// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_transform_decode

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource vault_transform_decode.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (vtd *DataSource) DataSource() string {
	return "vault_transform_decode"
}

// LocalName returns the local name for [DataSource].
func (vtd *DataSource) LocalName() string {
	return vtd.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (vtd *DataSource) Configuration() interface{} {
	return vtd.Args
}

// Attributes returns the attributes for [DataSource].
func (vtd *DataSource) Attributes() dataVaultTransformDecodeAttributes {
	return dataVaultTransformDecodeAttributes{ref: terra.ReferenceDataSource(vtd)}
}

// DataArgs contains the configurations for vault_transform_decode.
type DataArgs struct {
	// BatchInput: list of map of string, optional
	BatchInput terra.ListValue[terra.MapValue[terra.StringValue]] `hcl:"batch_input,attr"`
	// BatchResults: list of map of string, optional
	BatchResults terra.ListValue[terra.MapValue[terra.StringValue]] `hcl:"batch_results,attr"`
	// DecodedValue: string, optional
	DecodedValue terra.StringValue `hcl:"decoded_value,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// RoleName: string, required
	RoleName terra.StringValue `hcl:"role_name,attr" validate:"required"`
	// Transformation: string, optional
	Transformation terra.StringValue `hcl:"transformation,attr"`
	// Tweak: string, optional
	Tweak terra.StringValue `hcl:"tweak,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type dataVaultTransformDecodeAttributes struct {
	ref terra.Reference
}

// BatchInput returns a reference to field batch_input of vault_transform_decode.
func (vtd dataVaultTransformDecodeAttributes) BatchInput() terra.ListValue[terra.MapValue[terra.StringValue]] {
	return terra.ReferenceAsList[terra.MapValue[terra.StringValue]](vtd.ref.Append("batch_input"))
}

// BatchResults returns a reference to field batch_results of vault_transform_decode.
func (vtd dataVaultTransformDecodeAttributes) BatchResults() terra.ListValue[terra.MapValue[terra.StringValue]] {
	return terra.ReferenceAsList[terra.MapValue[terra.StringValue]](vtd.ref.Append("batch_results"))
}

// DecodedValue returns a reference to field decoded_value of vault_transform_decode.
func (vtd dataVaultTransformDecodeAttributes) DecodedValue() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("decoded_value"))
}

// Id returns a reference to field id of vault_transform_decode.
func (vtd dataVaultTransformDecodeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_transform_decode.
func (vtd dataVaultTransformDecodeAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_transform_decode.
func (vtd dataVaultTransformDecodeAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("path"))
}

// RoleName returns a reference to field role_name of vault_transform_decode.
func (vtd dataVaultTransformDecodeAttributes) RoleName() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("role_name"))
}

// Transformation returns a reference to field transformation of vault_transform_decode.
func (vtd dataVaultTransformDecodeAttributes) Transformation() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("transformation"))
}

// Tweak returns a reference to field tweak of vault_transform_decode.
func (vtd dataVaultTransformDecodeAttributes) Tweak() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("tweak"))
}

// Value returns a reference to field value of vault_transform_decode.
func (vtd dataVaultTransformDecodeAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("value"))
}
