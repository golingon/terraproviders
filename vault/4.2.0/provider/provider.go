// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package provider

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AuthLogin struct {
	// Method: string, optional
	Method terra.StringValue `hcl:"method,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// UseRootNamespace: bool, optional
	UseRootNamespace terra.BoolValue `hcl:"use_root_namespace,attr"`
}

type AuthLoginAws struct {
	// AwsAccessKeyId: string, optional
	AwsAccessKeyId terra.StringValue `hcl:"aws_access_key_id,attr"`
	// AwsIamEndpoint: string, optional
	AwsIamEndpoint terra.StringValue `hcl:"aws_iam_endpoint,attr"`
	// AwsProfile: string, optional
	AwsProfile terra.StringValue `hcl:"aws_profile,attr"`
	// AwsRegion: string, optional
	AwsRegion terra.StringValue `hcl:"aws_region,attr"`
	// AwsRoleArn: string, optional
	AwsRoleArn terra.StringValue `hcl:"aws_role_arn,attr"`
	// AwsRoleSessionName: string, optional
	AwsRoleSessionName terra.StringValue `hcl:"aws_role_session_name,attr"`
	// AwsSecretAccessKey: string, optional
	AwsSecretAccessKey terra.StringValue `hcl:"aws_secret_access_key,attr"`
	// AwsSessionToken: string, optional
	AwsSessionToken terra.StringValue `hcl:"aws_session_token,attr"`
	// AwsSharedCredentialsFile: string, optional
	AwsSharedCredentialsFile terra.StringValue `hcl:"aws_shared_credentials_file,attr"`
	// AwsStsEndpoint: string, optional
	AwsStsEndpoint terra.StringValue `hcl:"aws_sts_endpoint,attr"`
	// AwsWebIdentityTokenFile: string, optional
	AwsWebIdentityTokenFile terra.StringValue `hcl:"aws_web_identity_token_file,attr"`
	// HeaderValue: string, optional
	HeaderValue terra.StringValue `hcl:"header_value,attr"`
	// Mount: string, optional
	Mount terra.StringValue `hcl:"mount,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// UseRootNamespace: bool, optional
	UseRootNamespace terra.BoolValue `hcl:"use_root_namespace,attr"`
}

type AuthLoginAzure struct {
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// Jwt: string, optional
	Jwt terra.StringValue `hcl:"jwt,attr"`
	// Mount: string, optional
	Mount terra.StringValue `hcl:"mount,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Scope: string, optional
	Scope terra.StringValue `hcl:"scope,attr"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// TenantId: string, optional
	TenantId terra.StringValue `hcl:"tenant_id,attr"`
	// UseRootNamespace: bool, optional
	UseRootNamespace terra.BoolValue `hcl:"use_root_namespace,attr"`
	// VmName: string, optional
	VmName terra.StringValue `hcl:"vm_name,attr"`
	// VmssName: string, optional
	VmssName terra.StringValue `hcl:"vmss_name,attr"`
}

type AuthLoginCert struct {
	// CertFile: string, required
	CertFile terra.StringValue `hcl:"cert_file,attr" validate:"required"`
	// KeyFile: string, required
	KeyFile terra.StringValue `hcl:"key_file,attr" validate:"required"`
	// Mount: string, optional
	Mount terra.StringValue `hcl:"mount,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// UseRootNamespace: bool, optional
	UseRootNamespace terra.BoolValue `hcl:"use_root_namespace,attr"`
}

type AuthLoginGcp struct {
	// Credentials: string, optional
	Credentials terra.StringValue `hcl:"credentials,attr"`
	// Jwt: string, optional
	Jwt terra.StringValue `hcl:"jwt,attr"`
	// Mount: string, optional
	Mount terra.StringValue `hcl:"mount,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// UseRootNamespace: bool, optional
	UseRootNamespace terra.BoolValue `hcl:"use_root_namespace,attr"`
}

type AuthLoginJwt struct {
	// Jwt: string, required
	Jwt terra.StringValue `hcl:"jwt,attr" validate:"required"`
	// Mount: string, optional
	Mount terra.StringValue `hcl:"mount,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// UseRootNamespace: bool, optional
	UseRootNamespace terra.BoolValue `hcl:"use_root_namespace,attr"`
}

type AuthLoginKerberos struct {
	// DisableFastNegotiation: bool, optional
	DisableFastNegotiation terra.BoolValue `hcl:"disable_fast_negotiation,attr"`
	// KeytabPath: string, optional
	KeytabPath terra.StringValue `hcl:"keytab_path,attr"`
	// Krb5ConfPath: string, optional
	Krb5ConfPath terra.StringValue `hcl:"krb5conf_path,attr"`
	// Mount: string, optional
	Mount terra.StringValue `hcl:"mount,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Realm: string, optional
	Realm terra.StringValue `hcl:"realm,attr"`
	// RemoveInstanceName: bool, optional
	RemoveInstanceName terra.BoolValue `hcl:"remove_instance_name,attr"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
	// Token: string, optional
	Token terra.StringValue `hcl:"token,attr"`
	// UseRootNamespace: bool, optional
	UseRootNamespace terra.BoolValue `hcl:"use_root_namespace,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type AuthLoginOci struct {
	// AuthType: string, required
	AuthType terra.StringValue `hcl:"auth_type,attr" validate:"required"`
	// Mount: string, optional
	Mount terra.StringValue `hcl:"mount,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// UseRootNamespace: bool, optional
	UseRootNamespace terra.BoolValue `hcl:"use_root_namespace,attr"`
}

type AuthLoginOidc struct {
	// CallbackAddress: string, optional
	CallbackAddress terra.StringValue `hcl:"callback_address,attr"`
	// CallbackListenerAddress: string, optional
	CallbackListenerAddress terra.StringValue `hcl:"callback_listener_address,attr"`
	// Mount: string, optional
	Mount terra.StringValue `hcl:"mount,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// UseRootNamespace: bool, optional
	UseRootNamespace terra.BoolValue `hcl:"use_root_namespace,attr"`
}

type AuthLoginRadius struct {
	// Mount: string, optional
	Mount terra.StringValue `hcl:"mount,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// UseRootNamespace: bool, optional
	UseRootNamespace terra.BoolValue `hcl:"use_root_namespace,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type AuthLoginTokenFile struct {
	// Filename: string, required
	Filename terra.StringValue `hcl:"filename,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// UseRootNamespace: bool, optional
	UseRootNamespace terra.BoolValue `hcl:"use_root_namespace,attr"`
}

type AuthLoginUserpass struct {
	// Mount: string, optional
	Mount terra.StringValue `hcl:"mount,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// PasswordFile: string, optional
	PasswordFile terra.StringValue `hcl:"password_file,attr"`
	// UseRootNamespace: bool, optional
	UseRootNamespace terra.BoolValue `hcl:"use_root_namespace,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type ClientAuth struct {
	// CertFile: string, optional
	CertFile terra.StringValue `hcl:"cert_file,attr"`
	// KeyFile: string, optional
	KeyFile terra.StringValue `hcl:"key_file,attr"`
}

type Headers struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type AuthLoginAttributes struct {
	ref terra.Reference
}

func (al AuthLoginAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al AuthLoginAttributes) InternalWithRef(ref terra.Reference) AuthLoginAttributes {
	return AuthLoginAttributes{ref: ref}
}

func (al AuthLoginAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al AuthLoginAttributes) Method() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("method"))
}

func (al AuthLoginAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("namespace"))
}

func (al AuthLoginAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](al.ref.Append("parameters"))
}

func (al AuthLoginAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("path"))
}

func (al AuthLoginAttributes) UseRootNamespace() terra.BoolValue {
	return terra.ReferenceAsBool(al.ref.Append("use_root_namespace"))
}

type AuthLoginAwsAttributes struct {
	ref terra.Reference
}

func (ala AuthLoginAwsAttributes) InternalRef() (terra.Reference, error) {
	return ala.ref, nil
}

func (ala AuthLoginAwsAttributes) InternalWithRef(ref terra.Reference) AuthLoginAwsAttributes {
	return AuthLoginAwsAttributes{ref: ref}
}

func (ala AuthLoginAwsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ala.ref.InternalTokens()
}

func (ala AuthLoginAwsAttributes) AwsAccessKeyId() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("aws_access_key_id"))
}

func (ala AuthLoginAwsAttributes) AwsIamEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("aws_iam_endpoint"))
}

func (ala AuthLoginAwsAttributes) AwsProfile() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("aws_profile"))
}

func (ala AuthLoginAwsAttributes) AwsRegion() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("aws_region"))
}

func (ala AuthLoginAwsAttributes) AwsRoleArn() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("aws_role_arn"))
}

func (ala AuthLoginAwsAttributes) AwsRoleSessionName() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("aws_role_session_name"))
}

func (ala AuthLoginAwsAttributes) AwsSecretAccessKey() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("aws_secret_access_key"))
}

func (ala AuthLoginAwsAttributes) AwsSessionToken() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("aws_session_token"))
}

func (ala AuthLoginAwsAttributes) AwsSharedCredentialsFile() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("aws_shared_credentials_file"))
}

func (ala AuthLoginAwsAttributes) AwsStsEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("aws_sts_endpoint"))
}

func (ala AuthLoginAwsAttributes) AwsWebIdentityTokenFile() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("aws_web_identity_token_file"))
}

func (ala AuthLoginAwsAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("header_value"))
}

func (ala AuthLoginAwsAttributes) Mount() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("mount"))
}

func (ala AuthLoginAwsAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("namespace"))
}

func (ala AuthLoginAwsAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("role"))
}

func (ala AuthLoginAwsAttributes) UseRootNamespace() terra.BoolValue {
	return terra.ReferenceAsBool(ala.ref.Append("use_root_namespace"))
}

type AuthLoginAzureAttributes struct {
	ref terra.Reference
}

func (ala AuthLoginAzureAttributes) InternalRef() (terra.Reference, error) {
	return ala.ref, nil
}

func (ala AuthLoginAzureAttributes) InternalWithRef(ref terra.Reference) AuthLoginAzureAttributes {
	return AuthLoginAzureAttributes{ref: ref}
}

func (ala AuthLoginAzureAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ala.ref.InternalTokens()
}

func (ala AuthLoginAzureAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("client_id"))
}

func (ala AuthLoginAzureAttributes) Jwt() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("jwt"))
}

func (ala AuthLoginAzureAttributes) Mount() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("mount"))
}

func (ala AuthLoginAzureAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("namespace"))
}

func (ala AuthLoginAzureAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("resource_group_name"))
}

func (ala AuthLoginAzureAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("role"))
}

func (ala AuthLoginAzureAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("scope"))
}

func (ala AuthLoginAzureAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("subscription_id"))
}

func (ala AuthLoginAzureAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("tenant_id"))
}

func (ala AuthLoginAzureAttributes) UseRootNamespace() terra.BoolValue {
	return terra.ReferenceAsBool(ala.ref.Append("use_root_namespace"))
}

func (ala AuthLoginAzureAttributes) VmName() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("vm_name"))
}

func (ala AuthLoginAzureAttributes) VmssName() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("vmss_name"))
}

type AuthLoginCertAttributes struct {
	ref terra.Reference
}

func (alc AuthLoginCertAttributes) InternalRef() (terra.Reference, error) {
	return alc.ref, nil
}

func (alc AuthLoginCertAttributes) InternalWithRef(ref terra.Reference) AuthLoginCertAttributes {
	return AuthLoginCertAttributes{ref: ref}
}

func (alc AuthLoginCertAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alc.ref.InternalTokens()
}

func (alc AuthLoginCertAttributes) CertFile() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("cert_file"))
}

func (alc AuthLoginCertAttributes) KeyFile() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("key_file"))
}

func (alc AuthLoginCertAttributes) Mount() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("mount"))
}

func (alc AuthLoginCertAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("name"))
}

func (alc AuthLoginCertAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("namespace"))
}

func (alc AuthLoginCertAttributes) UseRootNamespace() terra.BoolValue {
	return terra.ReferenceAsBool(alc.ref.Append("use_root_namespace"))
}

type AuthLoginGcpAttributes struct {
	ref terra.Reference
}

func (alg AuthLoginGcpAttributes) InternalRef() (terra.Reference, error) {
	return alg.ref, nil
}

func (alg AuthLoginGcpAttributes) InternalWithRef(ref terra.Reference) AuthLoginGcpAttributes {
	return AuthLoginGcpAttributes{ref: ref}
}

func (alg AuthLoginGcpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alg.ref.InternalTokens()
}

func (alg AuthLoginGcpAttributes) Credentials() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("credentials"))
}

func (alg AuthLoginGcpAttributes) Jwt() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("jwt"))
}

func (alg AuthLoginGcpAttributes) Mount() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("mount"))
}

func (alg AuthLoginGcpAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("namespace"))
}

func (alg AuthLoginGcpAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("role"))
}

func (alg AuthLoginGcpAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("service_account"))
}

func (alg AuthLoginGcpAttributes) UseRootNamespace() terra.BoolValue {
	return terra.ReferenceAsBool(alg.ref.Append("use_root_namespace"))
}

type AuthLoginJwtAttributes struct {
	ref terra.Reference
}

func (alj AuthLoginJwtAttributes) InternalRef() (terra.Reference, error) {
	return alj.ref, nil
}

func (alj AuthLoginJwtAttributes) InternalWithRef(ref terra.Reference) AuthLoginJwtAttributes {
	return AuthLoginJwtAttributes{ref: ref}
}

func (alj AuthLoginJwtAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alj.ref.InternalTokens()
}

func (alj AuthLoginJwtAttributes) Jwt() terra.StringValue {
	return terra.ReferenceAsString(alj.ref.Append("jwt"))
}

func (alj AuthLoginJwtAttributes) Mount() terra.StringValue {
	return terra.ReferenceAsString(alj.ref.Append("mount"))
}

func (alj AuthLoginJwtAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(alj.ref.Append("namespace"))
}

func (alj AuthLoginJwtAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(alj.ref.Append("role"))
}

func (alj AuthLoginJwtAttributes) UseRootNamespace() terra.BoolValue {
	return terra.ReferenceAsBool(alj.ref.Append("use_root_namespace"))
}

type AuthLoginKerberosAttributes struct {
	ref terra.Reference
}

func (alk AuthLoginKerberosAttributes) InternalRef() (terra.Reference, error) {
	return alk.ref, nil
}

func (alk AuthLoginKerberosAttributes) InternalWithRef(ref terra.Reference) AuthLoginKerberosAttributes {
	return AuthLoginKerberosAttributes{ref: ref}
}

func (alk AuthLoginKerberosAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alk.ref.InternalTokens()
}

func (alk AuthLoginKerberosAttributes) DisableFastNegotiation() terra.BoolValue {
	return terra.ReferenceAsBool(alk.ref.Append("disable_fast_negotiation"))
}

func (alk AuthLoginKerberosAttributes) KeytabPath() terra.StringValue {
	return terra.ReferenceAsString(alk.ref.Append("keytab_path"))
}

func (alk AuthLoginKerberosAttributes) Krb5ConfPath() terra.StringValue {
	return terra.ReferenceAsString(alk.ref.Append("krb5conf_path"))
}

func (alk AuthLoginKerberosAttributes) Mount() terra.StringValue {
	return terra.ReferenceAsString(alk.ref.Append("mount"))
}

func (alk AuthLoginKerberosAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(alk.ref.Append("namespace"))
}

func (alk AuthLoginKerberosAttributes) Realm() terra.StringValue {
	return terra.ReferenceAsString(alk.ref.Append("realm"))
}

func (alk AuthLoginKerberosAttributes) RemoveInstanceName() terra.BoolValue {
	return terra.ReferenceAsBool(alk.ref.Append("remove_instance_name"))
}

func (alk AuthLoginKerberosAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(alk.ref.Append("service"))
}

func (alk AuthLoginKerberosAttributes) Token() terra.StringValue {
	return terra.ReferenceAsString(alk.ref.Append("token"))
}

func (alk AuthLoginKerberosAttributes) UseRootNamespace() terra.BoolValue {
	return terra.ReferenceAsBool(alk.ref.Append("use_root_namespace"))
}

func (alk AuthLoginKerberosAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(alk.ref.Append("username"))
}

type AuthLoginOciAttributes struct {
	ref terra.Reference
}

func (alo AuthLoginOciAttributes) InternalRef() (terra.Reference, error) {
	return alo.ref, nil
}

func (alo AuthLoginOciAttributes) InternalWithRef(ref terra.Reference) AuthLoginOciAttributes {
	return AuthLoginOciAttributes{ref: ref}
}

func (alo AuthLoginOciAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alo.ref.InternalTokens()
}

func (alo AuthLoginOciAttributes) AuthType() terra.StringValue {
	return terra.ReferenceAsString(alo.ref.Append("auth_type"))
}

func (alo AuthLoginOciAttributes) Mount() terra.StringValue {
	return terra.ReferenceAsString(alo.ref.Append("mount"))
}

func (alo AuthLoginOciAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(alo.ref.Append("namespace"))
}

func (alo AuthLoginOciAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(alo.ref.Append("role"))
}

func (alo AuthLoginOciAttributes) UseRootNamespace() terra.BoolValue {
	return terra.ReferenceAsBool(alo.ref.Append("use_root_namespace"))
}

type AuthLoginOidcAttributes struct {
	ref terra.Reference
}

func (alo AuthLoginOidcAttributes) InternalRef() (terra.Reference, error) {
	return alo.ref, nil
}

func (alo AuthLoginOidcAttributes) InternalWithRef(ref terra.Reference) AuthLoginOidcAttributes {
	return AuthLoginOidcAttributes{ref: ref}
}

func (alo AuthLoginOidcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alo.ref.InternalTokens()
}

func (alo AuthLoginOidcAttributes) CallbackAddress() terra.StringValue {
	return terra.ReferenceAsString(alo.ref.Append("callback_address"))
}

func (alo AuthLoginOidcAttributes) CallbackListenerAddress() terra.StringValue {
	return terra.ReferenceAsString(alo.ref.Append("callback_listener_address"))
}

func (alo AuthLoginOidcAttributes) Mount() terra.StringValue {
	return terra.ReferenceAsString(alo.ref.Append("mount"))
}

func (alo AuthLoginOidcAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(alo.ref.Append("namespace"))
}

func (alo AuthLoginOidcAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(alo.ref.Append("role"))
}

func (alo AuthLoginOidcAttributes) UseRootNamespace() terra.BoolValue {
	return terra.ReferenceAsBool(alo.ref.Append("use_root_namespace"))
}

type AuthLoginRadiusAttributes struct {
	ref terra.Reference
}

func (alr AuthLoginRadiusAttributes) InternalRef() (terra.Reference, error) {
	return alr.ref, nil
}

func (alr AuthLoginRadiusAttributes) InternalWithRef(ref terra.Reference) AuthLoginRadiusAttributes {
	return AuthLoginRadiusAttributes{ref: ref}
}

func (alr AuthLoginRadiusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alr.ref.InternalTokens()
}

func (alr AuthLoginRadiusAttributes) Mount() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("mount"))
}

func (alr AuthLoginRadiusAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("namespace"))
}

func (alr AuthLoginRadiusAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("password"))
}

func (alr AuthLoginRadiusAttributes) UseRootNamespace() terra.BoolValue {
	return terra.ReferenceAsBool(alr.ref.Append("use_root_namespace"))
}

func (alr AuthLoginRadiusAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("username"))
}

type AuthLoginTokenFileAttributes struct {
	ref terra.Reference
}

func (altf AuthLoginTokenFileAttributes) InternalRef() (terra.Reference, error) {
	return altf.ref, nil
}

func (altf AuthLoginTokenFileAttributes) InternalWithRef(ref terra.Reference) AuthLoginTokenFileAttributes {
	return AuthLoginTokenFileAttributes{ref: ref}
}

func (altf AuthLoginTokenFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return altf.ref.InternalTokens()
}

func (altf AuthLoginTokenFileAttributes) Filename() terra.StringValue {
	return terra.ReferenceAsString(altf.ref.Append("filename"))
}

func (altf AuthLoginTokenFileAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(altf.ref.Append("namespace"))
}

func (altf AuthLoginTokenFileAttributes) UseRootNamespace() terra.BoolValue {
	return terra.ReferenceAsBool(altf.ref.Append("use_root_namespace"))
}

type AuthLoginUserpassAttributes struct {
	ref terra.Reference
}

func (alu AuthLoginUserpassAttributes) InternalRef() (terra.Reference, error) {
	return alu.ref, nil
}

func (alu AuthLoginUserpassAttributes) InternalWithRef(ref terra.Reference) AuthLoginUserpassAttributes {
	return AuthLoginUserpassAttributes{ref: ref}
}

func (alu AuthLoginUserpassAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alu.ref.InternalTokens()
}

func (alu AuthLoginUserpassAttributes) Mount() terra.StringValue {
	return terra.ReferenceAsString(alu.ref.Append("mount"))
}

func (alu AuthLoginUserpassAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(alu.ref.Append("namespace"))
}

func (alu AuthLoginUserpassAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(alu.ref.Append("password"))
}

func (alu AuthLoginUserpassAttributes) PasswordFile() terra.StringValue {
	return terra.ReferenceAsString(alu.ref.Append("password_file"))
}

func (alu AuthLoginUserpassAttributes) UseRootNamespace() terra.BoolValue {
	return terra.ReferenceAsBool(alu.ref.Append("use_root_namespace"))
}

func (alu AuthLoginUserpassAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(alu.ref.Append("username"))
}

type ClientAuthAttributes struct {
	ref terra.Reference
}

func (ca ClientAuthAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca ClientAuthAttributes) InternalWithRef(ref terra.Reference) ClientAuthAttributes {
	return ClientAuthAttributes{ref: ref}
}

func (ca ClientAuthAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca ClientAuthAttributes) CertFile() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("cert_file"))
}

func (ca ClientAuthAttributes) KeyFile() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("key_file"))
}

type HeadersAttributes struct {
	ref terra.Reference
}

func (h HeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HeadersAttributes) InternalWithRef(ref terra.Reference) HeadersAttributes {
	return HeadersAttributes{ref: ref}
}

func (h HeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HeadersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("name"))
}

func (h HeadersAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("value"))
}

type AuthLoginState struct {
	Method           string            `json:"method"`
	Namespace        string            `json:"namespace"`
	Parameters       map[string]string `json:"parameters"`
	Path             string            `json:"path"`
	UseRootNamespace bool              `json:"use_root_namespace"`
}

type AuthLoginAwsState struct {
	AwsAccessKeyId           string `json:"aws_access_key_id"`
	AwsIamEndpoint           string `json:"aws_iam_endpoint"`
	AwsProfile               string `json:"aws_profile"`
	AwsRegion                string `json:"aws_region"`
	AwsRoleArn               string `json:"aws_role_arn"`
	AwsRoleSessionName       string `json:"aws_role_session_name"`
	AwsSecretAccessKey       string `json:"aws_secret_access_key"`
	AwsSessionToken          string `json:"aws_session_token"`
	AwsSharedCredentialsFile string `json:"aws_shared_credentials_file"`
	AwsStsEndpoint           string `json:"aws_sts_endpoint"`
	AwsWebIdentityTokenFile  string `json:"aws_web_identity_token_file"`
	HeaderValue              string `json:"header_value"`
	Mount                    string `json:"mount"`
	Namespace                string `json:"namespace"`
	Role                     string `json:"role"`
	UseRootNamespace         bool   `json:"use_root_namespace"`
}

type AuthLoginAzureState struct {
	ClientId          string `json:"client_id"`
	Jwt               string `json:"jwt"`
	Mount             string `json:"mount"`
	Namespace         string `json:"namespace"`
	ResourceGroupName string `json:"resource_group_name"`
	Role              string `json:"role"`
	Scope             string `json:"scope"`
	SubscriptionId    string `json:"subscription_id"`
	TenantId          string `json:"tenant_id"`
	UseRootNamespace  bool   `json:"use_root_namespace"`
	VmName            string `json:"vm_name"`
	VmssName          string `json:"vmss_name"`
}

type AuthLoginCertState struct {
	CertFile         string `json:"cert_file"`
	KeyFile          string `json:"key_file"`
	Mount            string `json:"mount"`
	Name             string `json:"name"`
	Namespace        string `json:"namespace"`
	UseRootNamespace bool   `json:"use_root_namespace"`
}

type AuthLoginGcpState struct {
	Credentials      string `json:"credentials"`
	Jwt              string `json:"jwt"`
	Mount            string `json:"mount"`
	Namespace        string `json:"namespace"`
	Role             string `json:"role"`
	ServiceAccount   string `json:"service_account"`
	UseRootNamespace bool   `json:"use_root_namespace"`
}

type AuthLoginJwtState struct {
	Jwt              string `json:"jwt"`
	Mount            string `json:"mount"`
	Namespace        string `json:"namespace"`
	Role             string `json:"role"`
	UseRootNamespace bool   `json:"use_root_namespace"`
}

type AuthLoginKerberosState struct {
	DisableFastNegotiation bool   `json:"disable_fast_negotiation"`
	KeytabPath             string `json:"keytab_path"`
	Krb5ConfPath           string `json:"krb5conf_path"`
	Mount                  string `json:"mount"`
	Namespace              string `json:"namespace"`
	Realm                  string `json:"realm"`
	RemoveInstanceName     bool   `json:"remove_instance_name"`
	Service                string `json:"service"`
	Token                  string `json:"token"`
	UseRootNamespace       bool   `json:"use_root_namespace"`
	Username               string `json:"username"`
}

type AuthLoginOciState struct {
	AuthType         string `json:"auth_type"`
	Mount            string `json:"mount"`
	Namespace        string `json:"namespace"`
	Role             string `json:"role"`
	UseRootNamespace bool   `json:"use_root_namespace"`
}

type AuthLoginOidcState struct {
	CallbackAddress         string `json:"callback_address"`
	CallbackListenerAddress string `json:"callback_listener_address"`
	Mount                   string `json:"mount"`
	Namespace               string `json:"namespace"`
	Role                    string `json:"role"`
	UseRootNamespace        bool   `json:"use_root_namespace"`
}

type AuthLoginRadiusState struct {
	Mount            string `json:"mount"`
	Namespace        string `json:"namespace"`
	Password         string `json:"password"`
	UseRootNamespace bool   `json:"use_root_namespace"`
	Username         string `json:"username"`
}

type AuthLoginTokenFileState struct {
	Filename         string `json:"filename"`
	Namespace        string `json:"namespace"`
	UseRootNamespace bool   `json:"use_root_namespace"`
}

type AuthLoginUserpassState struct {
	Mount            string `json:"mount"`
	Namespace        string `json:"namespace"`
	Password         string `json:"password"`
	PasswordFile     string `json:"password_file"`
	UseRootNamespace bool   `json:"use_root_namespace"`
	Username         string `json:"username"`
}

type ClientAuthState struct {
	CertFile string `json:"cert_file"`
	KeyFile  string `json:"key_file"`
}

type HeadersState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}
