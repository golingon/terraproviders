// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_pki_secret_backend_cert

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_pki_secret_backend_cert.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultPkiSecretBackendCertState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vpsbc *Resource) Type() string {
	return "vault_pki_secret_backend_cert"
}

// LocalName returns the local name for [Resource].
func (vpsbc *Resource) LocalName() string {
	return vpsbc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vpsbc *Resource) Configuration() interface{} {
	return vpsbc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vpsbc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vpsbc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vpsbc *Resource) Dependencies() terra.Dependencies {
	return vpsbc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vpsbc *Resource) LifecycleManagement() *terra.Lifecycle {
	return vpsbc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vpsbc *Resource) Attributes() vaultPkiSecretBackendCertAttributes {
	return vaultPkiSecretBackendCertAttributes{ref: terra.ReferenceResource(vpsbc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vpsbc *Resource) ImportState(state io.Reader) error {
	vpsbc.state = &vaultPkiSecretBackendCertState{}
	if err := json.NewDecoder(state).Decode(vpsbc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vpsbc.Type(), vpsbc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vpsbc *Resource) State() (*vaultPkiSecretBackendCertState, bool) {
	return vpsbc.state, vpsbc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vpsbc *Resource) StateMust() *vaultPkiSecretBackendCertState {
	if vpsbc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vpsbc.Type(), vpsbc.LocalName()))
	}
	return vpsbc.state
}

// Args contains the configurations for vault_pki_secret_backend_cert.
type Args struct {
	// AltNames: list of string, optional
	AltNames terra.ListValue[terra.StringValue] `hcl:"alt_names,attr"`
	// AutoRenew: bool, optional
	AutoRenew terra.BoolValue `hcl:"auto_renew,attr"`
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// CommonName: string, required
	CommonName terra.StringValue `hcl:"common_name,attr" validate:"required"`
	// ExcludeCnFromSans: bool, optional
	ExcludeCnFromSans terra.BoolValue `hcl:"exclude_cn_from_sans,attr"`
	// Format: string, optional
	Format terra.StringValue `hcl:"format,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpSans: list of string, optional
	IpSans terra.ListValue[terra.StringValue] `hcl:"ip_sans,attr"`
	// IssuerRef: string, optional
	IssuerRef terra.StringValue `hcl:"issuer_ref,attr"`
	// MinSecondsRemaining: number, optional
	MinSecondsRemaining terra.NumberValue `hcl:"min_seconds_remaining,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// OtherSans: list of string, optional
	OtherSans terra.ListValue[terra.StringValue] `hcl:"other_sans,attr"`
	// PrivateKeyFormat: string, optional
	PrivateKeyFormat terra.StringValue `hcl:"private_key_format,attr"`
	// Revoke: bool, optional
	Revoke terra.BoolValue `hcl:"revoke,attr"`
	// Ttl: string, optional
	Ttl terra.StringValue `hcl:"ttl,attr"`
	// UriSans: list of string, optional
	UriSans terra.ListValue[terra.StringValue] `hcl:"uri_sans,attr"`
	// UserIds: list of string, optional
	UserIds terra.ListValue[terra.StringValue] `hcl:"user_ids,attr"`
}

type vaultPkiSecretBackendCertAttributes struct {
	ref terra.Reference
}

// AltNames returns a reference to field alt_names of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) AltNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vpsbc.ref.Append("alt_names"))
}

// AutoRenew returns a reference to field auto_renew of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) AutoRenew() terra.BoolValue {
	return terra.ReferenceAsBool(vpsbc.ref.Append("auto_renew"))
}

// Backend returns a reference to field backend of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("backend"))
}

// CaChain returns a reference to field ca_chain of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) CaChain() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("ca_chain"))
}

// Certificate returns a reference to field certificate of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("certificate"))
}

// CommonName returns a reference to field common_name of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) CommonName() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("common_name"))
}

// ExcludeCnFromSans returns a reference to field exclude_cn_from_sans of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) ExcludeCnFromSans() terra.BoolValue {
	return terra.ReferenceAsBool(vpsbc.ref.Append("exclude_cn_from_sans"))
}

// Expiration returns a reference to field expiration of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) Expiration() terra.NumberValue {
	return terra.ReferenceAsNumber(vpsbc.ref.Append("expiration"))
}

// Format returns a reference to field format of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("format"))
}

// Id returns a reference to field id of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("id"))
}

// IpSans returns a reference to field ip_sans of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) IpSans() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vpsbc.ref.Append("ip_sans"))
}

// IssuerRef returns a reference to field issuer_ref of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) IssuerRef() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("issuer_ref"))
}

// IssuingCa returns a reference to field issuing_ca of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) IssuingCa() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("issuing_ca"))
}

// MinSecondsRemaining returns a reference to field min_seconds_remaining of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) MinSecondsRemaining() terra.NumberValue {
	return terra.ReferenceAsNumber(vpsbc.ref.Append("min_seconds_remaining"))
}

// Name returns a reference to field name of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("namespace"))
}

// OtherSans returns a reference to field other_sans of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) OtherSans() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vpsbc.ref.Append("other_sans"))
}

// PrivateKey returns a reference to field private_key of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("private_key"))
}

// PrivateKeyFormat returns a reference to field private_key_format of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) PrivateKeyFormat() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("private_key_format"))
}

// PrivateKeyType returns a reference to field private_key_type of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) PrivateKeyType() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("private_key_type"))
}

// RenewPending returns a reference to field renew_pending of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) RenewPending() terra.BoolValue {
	return terra.ReferenceAsBool(vpsbc.ref.Append("renew_pending"))
}

// Revoke returns a reference to field revoke of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) Revoke() terra.BoolValue {
	return terra.ReferenceAsBool(vpsbc.ref.Append("revoke"))
}

// SerialNumber returns a reference to field serial_number of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) SerialNumber() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("serial_number"))
}

// Ttl returns a reference to field ttl of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) Ttl() terra.StringValue {
	return terra.ReferenceAsString(vpsbc.ref.Append("ttl"))
}

// UriSans returns a reference to field uri_sans of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) UriSans() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vpsbc.ref.Append("uri_sans"))
}

// UserIds returns a reference to field user_ids of vault_pki_secret_backend_cert.
func (vpsbc vaultPkiSecretBackendCertAttributes) UserIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vpsbc.ref.Append("user_ids"))
}

type vaultPkiSecretBackendCertState struct {
	AltNames            []string `json:"alt_names"`
	AutoRenew           bool     `json:"auto_renew"`
	Backend             string   `json:"backend"`
	CaChain             string   `json:"ca_chain"`
	Certificate         string   `json:"certificate"`
	CommonName          string   `json:"common_name"`
	ExcludeCnFromSans   bool     `json:"exclude_cn_from_sans"`
	Expiration          float64  `json:"expiration"`
	Format              string   `json:"format"`
	Id                  string   `json:"id"`
	IpSans              []string `json:"ip_sans"`
	IssuerRef           string   `json:"issuer_ref"`
	IssuingCa           string   `json:"issuing_ca"`
	MinSecondsRemaining float64  `json:"min_seconds_remaining"`
	Name                string   `json:"name"`
	Namespace           string   `json:"namespace"`
	OtherSans           []string `json:"other_sans"`
	PrivateKey          string   `json:"private_key"`
	PrivateKeyFormat    string   `json:"private_key_format"`
	PrivateKeyType      string   `json:"private_key_type"`
	RenewPending        bool     `json:"renew_pending"`
	Revoke              bool     `json:"revoke"`
	SerialNumber        string   `json:"serial_number"`
	Ttl                 string   `json:"ttl"`
	UriSans             []string `json:"uri_sans"`
	UserIds             []string `json:"user_ids"`
}
