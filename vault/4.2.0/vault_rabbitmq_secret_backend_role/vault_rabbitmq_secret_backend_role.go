// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_rabbitmq_secret_backend_role

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_rabbitmq_secret_backend_role.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultRabbitmqSecretBackendRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vrsbr *Resource) Type() string {
	return "vault_rabbitmq_secret_backend_role"
}

// LocalName returns the local name for [Resource].
func (vrsbr *Resource) LocalName() string {
	return vrsbr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vrsbr *Resource) Configuration() interface{} {
	return vrsbr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vrsbr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vrsbr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vrsbr *Resource) Dependencies() terra.Dependencies {
	return vrsbr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vrsbr *Resource) LifecycleManagement() *terra.Lifecycle {
	return vrsbr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vrsbr *Resource) Attributes() vaultRabbitmqSecretBackendRoleAttributes {
	return vaultRabbitmqSecretBackendRoleAttributes{ref: terra.ReferenceResource(vrsbr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vrsbr *Resource) ImportState(state io.Reader) error {
	vrsbr.state = &vaultRabbitmqSecretBackendRoleState{}
	if err := json.NewDecoder(state).Decode(vrsbr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vrsbr.Type(), vrsbr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vrsbr *Resource) State() (*vaultRabbitmqSecretBackendRoleState, bool) {
	return vrsbr.state, vrsbr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vrsbr *Resource) StateMust() *vaultRabbitmqSecretBackendRoleState {
	if vrsbr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vrsbr.Type(), vrsbr.LocalName()))
	}
	return vrsbr.state
}

// Args contains the configurations for vault_rabbitmq_secret_backend_role.
type Args struct {
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Tags: string, optional
	Tags terra.StringValue `hcl:"tags,attr"`
	// Vhost: min=0
	Vhost []Vhost `hcl:"vhost,block" validate:"min=0"`
	// VhostTopic: min=0
	VhostTopic []VhostTopic `hcl:"vhost_topic,block" validate:"min=0"`
}

type vaultRabbitmqSecretBackendRoleAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_rabbitmq_secret_backend_role.
func (vrsbr vaultRabbitmqSecretBackendRoleAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vrsbr.ref.Append("backend"))
}

// Id returns a reference to field id of vault_rabbitmq_secret_backend_role.
func (vrsbr vaultRabbitmqSecretBackendRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vrsbr.ref.Append("id"))
}

// Name returns a reference to field name of vault_rabbitmq_secret_backend_role.
func (vrsbr vaultRabbitmqSecretBackendRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vrsbr.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_rabbitmq_secret_backend_role.
func (vrsbr vaultRabbitmqSecretBackendRoleAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vrsbr.ref.Append("namespace"))
}

// Tags returns a reference to field tags of vault_rabbitmq_secret_backend_role.
func (vrsbr vaultRabbitmqSecretBackendRoleAttributes) Tags() terra.StringValue {
	return terra.ReferenceAsString(vrsbr.ref.Append("tags"))
}

func (vrsbr vaultRabbitmqSecretBackendRoleAttributes) Vhost() terra.ListValue[VhostAttributes] {
	return terra.ReferenceAsList[VhostAttributes](vrsbr.ref.Append("vhost"))
}

func (vrsbr vaultRabbitmqSecretBackendRoleAttributes) VhostTopic() terra.ListValue[VhostTopicAttributes] {
	return terra.ReferenceAsList[VhostTopicAttributes](vrsbr.ref.Append("vhost_topic"))
}

type vaultRabbitmqSecretBackendRoleState struct {
	Backend    string            `json:"backend"`
	Id         string            `json:"id"`
	Name       string            `json:"name"`
	Namespace  string            `json:"namespace"`
	Tags       string            `json:"tags"`
	Vhost      []VhostState      `json:"vhost"`
	VhostTopic []VhostTopicState `json:"vhost_topic"`
}
