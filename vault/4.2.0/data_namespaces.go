// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault

import "github.com/golingon/lingon/pkg/terra"

// NewDataNamespaces creates a new instance of [DataNamespaces].
func NewDataNamespaces(name string, args DataNamespacesArgs) *DataNamespaces {
	return &DataNamespaces{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataNamespaces)(nil)

// DataNamespaces represents the Terraform data resource vault_namespaces.
type DataNamespaces struct {
	Name string
	Args DataNamespacesArgs
}

// DataSource returns the Terraform object type for [DataNamespaces].
func (n *DataNamespaces) DataSource() string {
	return "vault_namespaces"
}

// LocalName returns the local name for [DataNamespaces].
func (n *DataNamespaces) LocalName() string {
	return n.Name
}

// Configuration returns the configuration (args) for [DataNamespaces].
func (n *DataNamespaces) Configuration() interface{} {
	return n.Args
}

// Attributes returns the attributes for [DataNamespaces].
func (n *DataNamespaces) Attributes() dataNamespacesAttributes {
	return dataNamespacesAttributes{ref: terra.ReferenceDataResource(n)}
}

// DataNamespacesArgs contains the configurations for vault_namespaces.
type DataNamespacesArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}
type dataNamespacesAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of vault_namespaces.
func (n dataNamespacesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_namespaces.
func (n dataNamespacesAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("namespace"))
}

// Paths returns a reference to field paths of vault_namespaces.
func (n dataNamespacesAttributes) Paths() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](n.ref.Append("paths"))
}
