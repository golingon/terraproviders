// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_aws_auth_backend_role

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_aws_auth_backend_role.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultAwsAuthBackendRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vaabr *Resource) Type() string {
	return "vault_aws_auth_backend_role"
}

// LocalName returns the local name for [Resource].
func (vaabr *Resource) LocalName() string {
	return vaabr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vaabr *Resource) Configuration() interface{} {
	return vaabr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vaabr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vaabr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vaabr *Resource) Dependencies() terra.Dependencies {
	return vaabr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vaabr *Resource) LifecycleManagement() *terra.Lifecycle {
	return vaabr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vaabr *Resource) Attributes() vaultAwsAuthBackendRoleAttributes {
	return vaultAwsAuthBackendRoleAttributes{ref: terra.ReferenceResource(vaabr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vaabr *Resource) ImportState(state io.Reader) error {
	vaabr.state = &vaultAwsAuthBackendRoleState{}
	if err := json.NewDecoder(state).Decode(vaabr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vaabr.Type(), vaabr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vaabr *Resource) State() (*vaultAwsAuthBackendRoleState, bool) {
	return vaabr.state, vaabr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vaabr *Resource) StateMust() *vaultAwsAuthBackendRoleState {
	if vaabr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vaabr.Type(), vaabr.LocalName()))
	}
	return vaabr.state
}

// Args contains the configurations for vault_aws_auth_backend_role.
type Args struct {
	// AllowInstanceMigration: bool, optional
	AllowInstanceMigration terra.BoolValue `hcl:"allow_instance_migration,attr"`
	// AuthType: string, optional
	AuthType terra.StringValue `hcl:"auth_type,attr"`
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// BoundAccountIds: set of string, optional
	BoundAccountIds terra.SetValue[terra.StringValue] `hcl:"bound_account_ids,attr"`
	// BoundAmiIds: set of string, optional
	BoundAmiIds terra.SetValue[terra.StringValue] `hcl:"bound_ami_ids,attr"`
	// BoundEc2InstanceIds: set of string, optional
	BoundEc2InstanceIds terra.SetValue[terra.StringValue] `hcl:"bound_ec2_instance_ids,attr"`
	// BoundIamInstanceProfileArns: set of string, optional
	BoundIamInstanceProfileArns terra.SetValue[terra.StringValue] `hcl:"bound_iam_instance_profile_arns,attr"`
	// BoundIamPrincipalArns: set of string, optional
	BoundIamPrincipalArns terra.SetValue[terra.StringValue] `hcl:"bound_iam_principal_arns,attr"`
	// BoundIamRoleArns: set of string, optional
	BoundIamRoleArns terra.SetValue[terra.StringValue] `hcl:"bound_iam_role_arns,attr"`
	// BoundRegions: set of string, optional
	BoundRegions terra.SetValue[terra.StringValue] `hcl:"bound_regions,attr"`
	// BoundSubnetIds: set of string, optional
	BoundSubnetIds terra.SetValue[terra.StringValue] `hcl:"bound_subnet_ids,attr"`
	// BoundVpcIds: set of string, optional
	BoundVpcIds terra.SetValue[terra.StringValue] `hcl:"bound_vpc_ids,attr"`
	// DisallowReauthentication: bool, optional
	DisallowReauthentication terra.BoolValue `hcl:"disallow_reauthentication,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InferredAwsRegion: string, optional
	InferredAwsRegion terra.StringValue `hcl:"inferred_aws_region,attr"`
	// InferredEntityType: string, optional
	InferredEntityType terra.StringValue `hcl:"inferred_entity_type,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// ResolveAwsUniqueIds: bool, optional
	ResolveAwsUniqueIds terra.BoolValue `hcl:"resolve_aws_unique_ids,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// RoleTag: string, optional
	RoleTag terra.StringValue `hcl:"role_tag,attr"`
	// TokenBoundCidrs: set of string, optional
	TokenBoundCidrs terra.SetValue[terra.StringValue] `hcl:"token_bound_cidrs,attr"`
	// TokenExplicitMaxTtl: number, optional
	TokenExplicitMaxTtl terra.NumberValue `hcl:"token_explicit_max_ttl,attr"`
	// TokenMaxTtl: number, optional
	TokenMaxTtl terra.NumberValue `hcl:"token_max_ttl,attr"`
	// TokenNoDefaultPolicy: bool, optional
	TokenNoDefaultPolicy terra.BoolValue `hcl:"token_no_default_policy,attr"`
	// TokenNumUses: number, optional
	TokenNumUses terra.NumberValue `hcl:"token_num_uses,attr"`
	// TokenPeriod: number, optional
	TokenPeriod terra.NumberValue `hcl:"token_period,attr"`
	// TokenPolicies: set of string, optional
	TokenPolicies terra.SetValue[terra.StringValue] `hcl:"token_policies,attr"`
	// TokenTtl: number, optional
	TokenTtl terra.NumberValue `hcl:"token_ttl,attr"`
	// TokenType: string, optional
	TokenType terra.StringValue `hcl:"token_type,attr"`
}

type vaultAwsAuthBackendRoleAttributes struct {
	ref terra.Reference
}

// AllowInstanceMigration returns a reference to field allow_instance_migration of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) AllowInstanceMigration() terra.BoolValue {
	return terra.ReferenceAsBool(vaabr.ref.Append("allow_instance_migration"))
}

// AuthType returns a reference to field auth_type of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) AuthType() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("auth_type"))
}

// Backend returns a reference to field backend of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("backend"))
}

// BoundAccountIds returns a reference to field bound_account_ids of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) BoundAccountIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabr.ref.Append("bound_account_ids"))
}

// BoundAmiIds returns a reference to field bound_ami_ids of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) BoundAmiIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabr.ref.Append("bound_ami_ids"))
}

// BoundEc2InstanceIds returns a reference to field bound_ec2_instance_ids of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) BoundEc2InstanceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabr.ref.Append("bound_ec2_instance_ids"))
}

// BoundIamInstanceProfileArns returns a reference to field bound_iam_instance_profile_arns of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) BoundIamInstanceProfileArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabr.ref.Append("bound_iam_instance_profile_arns"))
}

// BoundIamPrincipalArns returns a reference to field bound_iam_principal_arns of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) BoundIamPrincipalArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabr.ref.Append("bound_iam_principal_arns"))
}

// BoundIamRoleArns returns a reference to field bound_iam_role_arns of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) BoundIamRoleArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabr.ref.Append("bound_iam_role_arns"))
}

// BoundRegions returns a reference to field bound_regions of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) BoundRegions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabr.ref.Append("bound_regions"))
}

// BoundSubnetIds returns a reference to field bound_subnet_ids of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) BoundSubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabr.ref.Append("bound_subnet_ids"))
}

// BoundVpcIds returns a reference to field bound_vpc_ids of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) BoundVpcIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabr.ref.Append("bound_vpc_ids"))
}

// DisallowReauthentication returns a reference to field disallow_reauthentication of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) DisallowReauthentication() terra.BoolValue {
	return terra.ReferenceAsBool(vaabr.ref.Append("disallow_reauthentication"))
}

// Id returns a reference to field id of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("id"))
}

// InferredAwsRegion returns a reference to field inferred_aws_region of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) InferredAwsRegion() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("inferred_aws_region"))
}

// InferredEntityType returns a reference to field inferred_entity_type of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) InferredEntityType() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("inferred_entity_type"))
}

// Namespace returns a reference to field namespace of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("namespace"))
}

// ResolveAwsUniqueIds returns a reference to field resolve_aws_unique_ids of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) ResolveAwsUniqueIds() terra.BoolValue {
	return terra.ReferenceAsBool(vaabr.ref.Append("resolve_aws_unique_ids"))
}

// Role returns a reference to field role of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("role"))
}

// RoleId returns a reference to field role_id of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) RoleId() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("role_id"))
}

// RoleTag returns a reference to field role_tag of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) RoleTag() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("role_tag"))
}

// TokenBoundCidrs returns a reference to field token_bound_cidrs of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) TokenBoundCidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabr.ref.Append("token_bound_cidrs"))
}

// TokenExplicitMaxTtl returns a reference to field token_explicit_max_ttl of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) TokenExplicitMaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(vaabr.ref.Append("token_explicit_max_ttl"))
}

// TokenMaxTtl returns a reference to field token_max_ttl of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) TokenMaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(vaabr.ref.Append("token_max_ttl"))
}

// TokenNoDefaultPolicy returns a reference to field token_no_default_policy of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) TokenNoDefaultPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(vaabr.ref.Append("token_no_default_policy"))
}

// TokenNumUses returns a reference to field token_num_uses of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) TokenNumUses() terra.NumberValue {
	return terra.ReferenceAsNumber(vaabr.ref.Append("token_num_uses"))
}

// TokenPeriod returns a reference to field token_period of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) TokenPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(vaabr.ref.Append("token_period"))
}

// TokenPolicies returns a reference to field token_policies of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) TokenPolicies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabr.ref.Append("token_policies"))
}

// TokenTtl returns a reference to field token_ttl of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) TokenTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(vaabr.ref.Append("token_ttl"))
}

// TokenType returns a reference to field token_type of vault_aws_auth_backend_role.
func (vaabr vaultAwsAuthBackendRoleAttributes) TokenType() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("token_type"))
}

type vaultAwsAuthBackendRoleState struct {
	AllowInstanceMigration      bool     `json:"allow_instance_migration"`
	AuthType                    string   `json:"auth_type"`
	Backend                     string   `json:"backend"`
	BoundAccountIds             []string `json:"bound_account_ids"`
	BoundAmiIds                 []string `json:"bound_ami_ids"`
	BoundEc2InstanceIds         []string `json:"bound_ec2_instance_ids"`
	BoundIamInstanceProfileArns []string `json:"bound_iam_instance_profile_arns"`
	BoundIamPrincipalArns       []string `json:"bound_iam_principal_arns"`
	BoundIamRoleArns            []string `json:"bound_iam_role_arns"`
	BoundRegions                []string `json:"bound_regions"`
	BoundSubnetIds              []string `json:"bound_subnet_ids"`
	BoundVpcIds                 []string `json:"bound_vpc_ids"`
	DisallowReauthentication    bool     `json:"disallow_reauthentication"`
	Id                          string   `json:"id"`
	InferredAwsRegion           string   `json:"inferred_aws_region"`
	InferredEntityType          string   `json:"inferred_entity_type"`
	Namespace                   string   `json:"namespace"`
	ResolveAwsUniqueIds         bool     `json:"resolve_aws_unique_ids"`
	Role                        string   `json:"role"`
	RoleId                      string   `json:"role_id"`
	RoleTag                     string   `json:"role_tag"`
	TokenBoundCidrs             []string `json:"token_bound_cidrs"`
	TokenExplicitMaxTtl         float64  `json:"token_explicit_max_ttl"`
	TokenMaxTtl                 float64  `json:"token_max_ttl"`
	TokenNoDefaultPolicy        bool     `json:"token_no_default_policy"`
	TokenNumUses                float64  `json:"token_num_uses"`
	TokenPeriod                 float64  `json:"token_period"`
	TokenPolicies               []string `json:"token_policies"`
	TokenTtl                    float64  `json:"token_ttl"`
	TokenType                   string   `json:"token_type"`
}
