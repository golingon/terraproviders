// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewNomadSecretRole creates a new instance of [NomadSecretRole].
func NewNomadSecretRole(name string, args NomadSecretRoleArgs) *NomadSecretRole {
	return &NomadSecretRole{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NomadSecretRole)(nil)

// NomadSecretRole represents the Terraform resource vault_nomad_secret_role.
type NomadSecretRole struct {
	Name      string
	Args      NomadSecretRoleArgs
	state     *nomadSecretRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NomadSecretRole].
func (nsr *NomadSecretRole) Type() string {
	return "vault_nomad_secret_role"
}

// LocalName returns the local name for [NomadSecretRole].
func (nsr *NomadSecretRole) LocalName() string {
	return nsr.Name
}

// Configuration returns the configuration (args) for [NomadSecretRole].
func (nsr *NomadSecretRole) Configuration() interface{} {
	return nsr.Args
}

// DependOn is used for other resources to depend on [NomadSecretRole].
func (nsr *NomadSecretRole) DependOn() terra.Reference {
	return terra.ReferenceResource(nsr)
}

// Dependencies returns the list of resources [NomadSecretRole] depends_on.
func (nsr *NomadSecretRole) Dependencies() terra.Dependencies {
	return nsr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NomadSecretRole].
func (nsr *NomadSecretRole) LifecycleManagement() *terra.Lifecycle {
	return nsr.Lifecycle
}

// Attributes returns the attributes for [NomadSecretRole].
func (nsr *NomadSecretRole) Attributes() nomadSecretRoleAttributes {
	return nomadSecretRoleAttributes{ref: terra.ReferenceResource(nsr)}
}

// ImportState imports the given attribute values into [NomadSecretRole]'s state.
func (nsr *NomadSecretRole) ImportState(av io.Reader) error {
	nsr.state = &nomadSecretRoleState{}
	if err := json.NewDecoder(av).Decode(nsr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nsr.Type(), nsr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NomadSecretRole] has state.
func (nsr *NomadSecretRole) State() (*nomadSecretRoleState, bool) {
	return nsr.state, nsr.state != nil
}

// StateMust returns the state for [NomadSecretRole]. Panics if the state is nil.
func (nsr *NomadSecretRole) StateMust() *nomadSecretRoleState {
	if nsr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nsr.Type(), nsr.LocalName()))
	}
	return nsr.state
}

// NomadSecretRoleArgs contains the configurations for vault_nomad_secret_role.
type NomadSecretRoleArgs struct {
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// Global: bool, optional
	Global terra.BoolValue `hcl:"global,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Policies: list of string, optional
	Policies terra.ListValue[terra.StringValue] `hcl:"policies,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}
type nomadSecretRoleAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_nomad_secret_role.
func (nsr nomadSecretRoleAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(nsr.ref.Append("backend"))
}

// Global returns a reference to field global of vault_nomad_secret_role.
func (nsr nomadSecretRoleAttributes) Global() terra.BoolValue {
	return terra.ReferenceAsBool(nsr.ref.Append("global"))
}

// Id returns a reference to field id of vault_nomad_secret_role.
func (nsr nomadSecretRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nsr.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_nomad_secret_role.
func (nsr nomadSecretRoleAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(nsr.ref.Append("namespace"))
}

// Policies returns a reference to field policies of vault_nomad_secret_role.
func (nsr nomadSecretRoleAttributes) Policies() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nsr.ref.Append("policies"))
}

// Role returns a reference to field role of vault_nomad_secret_role.
func (nsr nomadSecretRoleAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(nsr.ref.Append("role"))
}

// Type returns a reference to field type of vault_nomad_secret_role.
func (nsr nomadSecretRoleAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(nsr.ref.Append("type"))
}

type nomadSecretRoleState struct {
	Backend   string   `json:"backend"`
	Global    bool     `json:"global"`
	Id        string   `json:"id"`
	Namespace string   `json:"namespace"`
	Policies  []string `json:"policies"`
	Role      string   `json:"role"`
	Type      string   `json:"type"`
}
