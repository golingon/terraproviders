// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewGcpSecretBackend creates a new instance of [GcpSecretBackend].
func NewGcpSecretBackend(name string, args GcpSecretBackendArgs) *GcpSecretBackend {
	return &GcpSecretBackend{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GcpSecretBackend)(nil)

// GcpSecretBackend represents the Terraform resource vault_gcp_secret_backend.
type GcpSecretBackend struct {
	Name      string
	Args      GcpSecretBackendArgs
	state     *gcpSecretBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GcpSecretBackend].
func (gsb *GcpSecretBackend) Type() string {
	return "vault_gcp_secret_backend"
}

// LocalName returns the local name for [GcpSecretBackend].
func (gsb *GcpSecretBackend) LocalName() string {
	return gsb.Name
}

// Configuration returns the configuration (args) for [GcpSecretBackend].
func (gsb *GcpSecretBackend) Configuration() interface{} {
	return gsb.Args
}

// DependOn is used for other resources to depend on [GcpSecretBackend].
func (gsb *GcpSecretBackend) DependOn() terra.Reference {
	return terra.ReferenceResource(gsb)
}

// Dependencies returns the list of resources [GcpSecretBackend] depends_on.
func (gsb *GcpSecretBackend) Dependencies() terra.Dependencies {
	return gsb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GcpSecretBackend].
func (gsb *GcpSecretBackend) LifecycleManagement() *terra.Lifecycle {
	return gsb.Lifecycle
}

// Attributes returns the attributes for [GcpSecretBackend].
func (gsb *GcpSecretBackend) Attributes() gcpSecretBackendAttributes {
	return gcpSecretBackendAttributes{ref: terra.ReferenceResource(gsb)}
}

// ImportState imports the given attribute values into [GcpSecretBackend]'s state.
func (gsb *GcpSecretBackend) ImportState(av io.Reader) error {
	gsb.state = &gcpSecretBackendState{}
	if err := json.NewDecoder(av).Decode(gsb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsb.Type(), gsb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GcpSecretBackend] has state.
func (gsb *GcpSecretBackend) State() (*gcpSecretBackendState, bool) {
	return gsb.state, gsb.state != nil
}

// StateMust returns the state for [GcpSecretBackend]. Panics if the state is nil.
func (gsb *GcpSecretBackend) StateMust() *gcpSecretBackendState {
	if gsb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsb.Type(), gsb.LocalName()))
	}
	return gsb.state
}

// GcpSecretBackendArgs contains the configurations for vault_gcp_secret_backend.
type GcpSecretBackendArgs struct {
	// Credentials: string, optional
	Credentials terra.StringValue `hcl:"credentials,attr"`
	// DefaultLeaseTtlSeconds: number, optional
	DefaultLeaseTtlSeconds terra.NumberValue `hcl:"default_lease_ttl_seconds,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableRemount: bool, optional
	DisableRemount terra.BoolValue `hcl:"disable_remount,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Local: bool, optional
	Local terra.BoolValue `hcl:"local,attr"`
	// MaxLeaseTtlSeconds: number, optional
	MaxLeaseTtlSeconds terra.NumberValue `hcl:"max_lease_ttl_seconds,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
}
type gcpSecretBackendAttributes struct {
	ref terra.Reference
}

// Credentials returns a reference to field credentials of vault_gcp_secret_backend.
func (gsb gcpSecretBackendAttributes) Credentials() terra.StringValue {
	return terra.ReferenceAsString(gsb.ref.Append("credentials"))
}

// DefaultLeaseTtlSeconds returns a reference to field default_lease_ttl_seconds of vault_gcp_secret_backend.
func (gsb gcpSecretBackendAttributes) DefaultLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(gsb.ref.Append("default_lease_ttl_seconds"))
}

// Description returns a reference to field description of vault_gcp_secret_backend.
func (gsb gcpSecretBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gsb.ref.Append("description"))
}

// DisableRemount returns a reference to field disable_remount of vault_gcp_secret_backend.
func (gsb gcpSecretBackendAttributes) DisableRemount() terra.BoolValue {
	return terra.ReferenceAsBool(gsb.ref.Append("disable_remount"))
}

// Id returns a reference to field id of vault_gcp_secret_backend.
func (gsb gcpSecretBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsb.ref.Append("id"))
}

// Local returns a reference to field local of vault_gcp_secret_backend.
func (gsb gcpSecretBackendAttributes) Local() terra.BoolValue {
	return terra.ReferenceAsBool(gsb.ref.Append("local"))
}

// MaxLeaseTtlSeconds returns a reference to field max_lease_ttl_seconds of vault_gcp_secret_backend.
func (gsb gcpSecretBackendAttributes) MaxLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(gsb.ref.Append("max_lease_ttl_seconds"))
}

// Namespace returns a reference to field namespace of vault_gcp_secret_backend.
func (gsb gcpSecretBackendAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(gsb.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_gcp_secret_backend.
func (gsb gcpSecretBackendAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(gsb.ref.Append("path"))
}

type gcpSecretBackendState struct {
	Credentials            string  `json:"credentials"`
	DefaultLeaseTtlSeconds float64 `json:"default_lease_ttl_seconds"`
	Description            string  `json:"description"`
	DisableRemount         bool    `json:"disable_remount"`
	Id                     string  `json:"id"`
	Local                  bool    `json:"local"`
	MaxLeaseTtlSeconds     float64 `json:"max_lease_ttl_seconds"`
	Namespace              string  `json:"namespace"`
	Path                   string  `json:"path"`
}
