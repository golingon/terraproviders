// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_aws_auth_backend_config_identity

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_aws_auth_backend_config_identity.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultAwsAuthBackendConfigIdentityState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vaabci *Resource) Type() string {
	return "vault_aws_auth_backend_config_identity"
}

// LocalName returns the local name for [Resource].
func (vaabci *Resource) LocalName() string {
	return vaabci.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vaabci *Resource) Configuration() interface{} {
	return vaabci.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vaabci *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vaabci)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vaabci *Resource) Dependencies() terra.Dependencies {
	return vaabci.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vaabci *Resource) LifecycleManagement() *terra.Lifecycle {
	return vaabci.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vaabci *Resource) Attributes() vaultAwsAuthBackendConfigIdentityAttributes {
	return vaultAwsAuthBackendConfigIdentityAttributes{ref: terra.ReferenceResource(vaabci)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vaabci *Resource) ImportState(state io.Reader) error {
	vaabci.state = &vaultAwsAuthBackendConfigIdentityState{}
	if err := json.NewDecoder(state).Decode(vaabci.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vaabci.Type(), vaabci.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vaabci *Resource) State() (*vaultAwsAuthBackendConfigIdentityState, bool) {
	return vaabci.state, vaabci.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vaabci *Resource) StateMust() *vaultAwsAuthBackendConfigIdentityState {
	if vaabci.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vaabci.Type(), vaabci.LocalName()))
	}
	return vaabci.state
}

// Args contains the configurations for vault_aws_auth_backend_config_identity.
type Args struct {
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// Ec2Alias: string, optional
	Ec2Alias terra.StringValue `hcl:"ec2_alias,attr"`
	// Ec2Metadata: set of string, optional
	Ec2Metadata terra.SetValue[terra.StringValue] `hcl:"ec2_metadata,attr"`
	// IamAlias: string, optional
	IamAlias terra.StringValue `hcl:"iam_alias,attr"`
	// IamMetadata: set of string, optional
	IamMetadata terra.SetValue[terra.StringValue] `hcl:"iam_metadata,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}

type vaultAwsAuthBackendConfigIdentityAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_aws_auth_backend_config_identity.
func (vaabci vaultAwsAuthBackendConfigIdentityAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vaabci.ref.Append("backend"))
}

// Ec2Alias returns a reference to field ec2_alias of vault_aws_auth_backend_config_identity.
func (vaabci vaultAwsAuthBackendConfigIdentityAttributes) Ec2Alias() terra.StringValue {
	return terra.ReferenceAsString(vaabci.ref.Append("ec2_alias"))
}

// Ec2Metadata returns a reference to field ec2_metadata of vault_aws_auth_backend_config_identity.
func (vaabci vaultAwsAuthBackendConfigIdentityAttributes) Ec2Metadata() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabci.ref.Append("ec2_metadata"))
}

// IamAlias returns a reference to field iam_alias of vault_aws_auth_backend_config_identity.
func (vaabci vaultAwsAuthBackendConfigIdentityAttributes) IamAlias() terra.StringValue {
	return terra.ReferenceAsString(vaabci.ref.Append("iam_alias"))
}

// IamMetadata returns a reference to field iam_metadata of vault_aws_auth_backend_config_identity.
func (vaabci vaultAwsAuthBackendConfigIdentityAttributes) IamMetadata() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabci.ref.Append("iam_metadata"))
}

// Id returns a reference to field id of vault_aws_auth_backend_config_identity.
func (vaabci vaultAwsAuthBackendConfigIdentityAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vaabci.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_aws_auth_backend_config_identity.
func (vaabci vaultAwsAuthBackendConfigIdentityAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vaabci.ref.Append("namespace"))
}

type vaultAwsAuthBackendConfigIdentityState struct {
	Backend     string   `json:"backend"`
	Ec2Alias    string   `json:"ec2_alias"`
	Ec2Metadata []string `json:"ec2_metadata"`
	IamAlias    string   `json:"iam_alias"`
	IamMetadata []string `json:"iam_metadata"`
	Id          string   `json:"id"`
	Namespace   string   `json:"namespace"`
}
