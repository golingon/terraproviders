// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_transit_secret_backend_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_transit_secret_backend_key.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultTransitSecretBackendKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vtsbk *Resource) Type() string {
	return "vault_transit_secret_backend_key"
}

// LocalName returns the local name for [Resource].
func (vtsbk *Resource) LocalName() string {
	return vtsbk.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vtsbk *Resource) Configuration() interface{} {
	return vtsbk.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vtsbk *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vtsbk)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vtsbk *Resource) Dependencies() terra.Dependencies {
	return vtsbk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vtsbk *Resource) LifecycleManagement() *terra.Lifecycle {
	return vtsbk.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vtsbk *Resource) Attributes() vaultTransitSecretBackendKeyAttributes {
	return vaultTransitSecretBackendKeyAttributes{ref: terra.ReferenceResource(vtsbk)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vtsbk *Resource) ImportState(state io.Reader) error {
	vtsbk.state = &vaultTransitSecretBackendKeyState{}
	if err := json.NewDecoder(state).Decode(vtsbk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vtsbk.Type(), vtsbk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vtsbk *Resource) State() (*vaultTransitSecretBackendKeyState, bool) {
	return vtsbk.state, vtsbk.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vtsbk *Resource) StateMust() *vaultTransitSecretBackendKeyState {
	if vtsbk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vtsbk.Type(), vtsbk.LocalName()))
	}
	return vtsbk.state
}

// Args contains the configurations for vault_transit_secret_backend_key.
type Args struct {
	// AllowPlaintextBackup: bool, optional
	AllowPlaintextBackup terra.BoolValue `hcl:"allow_plaintext_backup,attr"`
	// AutoRotatePeriod: number, optional
	AutoRotatePeriod terra.NumberValue `hcl:"auto_rotate_period,attr"`
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// ConvergentEncryption: bool, optional
	ConvergentEncryption terra.BoolValue `hcl:"convergent_encryption,attr"`
	// DeletionAllowed: bool, optional
	DeletionAllowed terra.BoolValue `hcl:"deletion_allowed,attr"`
	// Derived: bool, optional
	Derived terra.BoolValue `hcl:"derived,attr"`
	// Exportable: bool, optional
	Exportable terra.BoolValue `hcl:"exportable,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeySize: number, optional
	KeySize terra.NumberValue `hcl:"key_size,attr"`
	// MinDecryptionVersion: number, optional
	MinDecryptionVersion terra.NumberValue `hcl:"min_decryption_version,attr"`
	// MinEncryptionVersion: number, optional
	MinEncryptionVersion terra.NumberValue `hcl:"min_encryption_version,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type vaultTransitSecretBackendKeyAttributes struct {
	ref terra.Reference
}

// AllowPlaintextBackup returns a reference to field allow_plaintext_backup of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) AllowPlaintextBackup() terra.BoolValue {
	return terra.ReferenceAsBool(vtsbk.ref.Append("allow_plaintext_backup"))
}

// AutoRotatePeriod returns a reference to field auto_rotate_period of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) AutoRotatePeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(vtsbk.ref.Append("auto_rotate_period"))
}

// Backend returns a reference to field backend of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vtsbk.ref.Append("backend"))
}

// ConvergentEncryption returns a reference to field convergent_encryption of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) ConvergentEncryption() terra.BoolValue {
	return terra.ReferenceAsBool(vtsbk.ref.Append("convergent_encryption"))
}

// DeletionAllowed returns a reference to field deletion_allowed of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) DeletionAllowed() terra.BoolValue {
	return terra.ReferenceAsBool(vtsbk.ref.Append("deletion_allowed"))
}

// Derived returns a reference to field derived of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) Derived() terra.BoolValue {
	return terra.ReferenceAsBool(vtsbk.ref.Append("derived"))
}

// Exportable returns a reference to field exportable of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) Exportable() terra.BoolValue {
	return terra.ReferenceAsBool(vtsbk.ref.Append("exportable"))
}

// Id returns a reference to field id of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vtsbk.ref.Append("id"))
}

// KeySize returns a reference to field key_size of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) KeySize() terra.NumberValue {
	return terra.ReferenceAsNumber(vtsbk.ref.Append("key_size"))
}

// Keys returns a reference to field keys of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) Keys() terra.ListValue[terra.MapValue[terra.StringValue]] {
	return terra.ReferenceAsList[terra.MapValue[terra.StringValue]](vtsbk.ref.Append("keys"))
}

// LatestVersion returns a reference to field latest_version of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) LatestVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(vtsbk.ref.Append("latest_version"))
}

// MinAvailableVersion returns a reference to field min_available_version of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) MinAvailableVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(vtsbk.ref.Append("min_available_version"))
}

// MinDecryptionVersion returns a reference to field min_decryption_version of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) MinDecryptionVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(vtsbk.ref.Append("min_decryption_version"))
}

// MinEncryptionVersion returns a reference to field min_encryption_version of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) MinEncryptionVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(vtsbk.ref.Append("min_encryption_version"))
}

// Name returns a reference to field name of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vtsbk.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vtsbk.ref.Append("namespace"))
}

// SupportsDecryption returns a reference to field supports_decryption of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) SupportsDecryption() terra.BoolValue {
	return terra.ReferenceAsBool(vtsbk.ref.Append("supports_decryption"))
}

// SupportsDerivation returns a reference to field supports_derivation of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) SupportsDerivation() terra.BoolValue {
	return terra.ReferenceAsBool(vtsbk.ref.Append("supports_derivation"))
}

// SupportsEncryption returns a reference to field supports_encryption of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) SupportsEncryption() terra.BoolValue {
	return terra.ReferenceAsBool(vtsbk.ref.Append("supports_encryption"))
}

// SupportsSigning returns a reference to field supports_signing of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) SupportsSigning() terra.BoolValue {
	return terra.ReferenceAsBool(vtsbk.ref.Append("supports_signing"))
}

// Type returns a reference to field type of vault_transit_secret_backend_key.
func (vtsbk vaultTransitSecretBackendKeyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(vtsbk.ref.Append("type"))
}

type vaultTransitSecretBackendKeyState struct {
	AllowPlaintextBackup bool                `json:"allow_plaintext_backup"`
	AutoRotatePeriod     float64             `json:"auto_rotate_period"`
	Backend              string              `json:"backend"`
	ConvergentEncryption bool                `json:"convergent_encryption"`
	DeletionAllowed      bool                `json:"deletion_allowed"`
	Derived              bool                `json:"derived"`
	Exportable           bool                `json:"exportable"`
	Id                   string              `json:"id"`
	KeySize              float64             `json:"key_size"`
	Keys                 []map[string]string `json:"keys"`
	LatestVersion        float64             `json:"latest_version"`
	MinAvailableVersion  float64             `json:"min_available_version"`
	MinDecryptionVersion float64             `json:"min_decryption_version"`
	MinEncryptionVersion float64             `json:"min_encryption_version"`
	Name                 string              `json:"name"`
	Namespace            string              `json:"namespace"`
	SupportsDecryption   bool                `json:"supports_decryption"`
	SupportsDerivation   bool                `json:"supports_derivation"`
	SupportsEncryption   bool                `json:"supports_encryption"`
	SupportsSigning      bool                `json:"supports_signing"`
	Type                 string              `json:"type"`
}
