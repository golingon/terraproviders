// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_kubernetes_secret_backend

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_kubernetes_secret_backend.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultKubernetesSecretBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vksb *Resource) Type() string {
	return "vault_kubernetes_secret_backend"
}

// LocalName returns the local name for [Resource].
func (vksb *Resource) LocalName() string {
	return vksb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vksb *Resource) Configuration() interface{} {
	return vksb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vksb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vksb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vksb *Resource) Dependencies() terra.Dependencies {
	return vksb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vksb *Resource) LifecycleManagement() *terra.Lifecycle {
	return vksb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vksb *Resource) Attributes() vaultKubernetesSecretBackendAttributes {
	return vaultKubernetesSecretBackendAttributes{ref: terra.ReferenceResource(vksb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vksb *Resource) ImportState(state io.Reader) error {
	vksb.state = &vaultKubernetesSecretBackendState{}
	if err := json.NewDecoder(state).Decode(vksb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vksb.Type(), vksb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vksb *Resource) State() (*vaultKubernetesSecretBackendState, bool) {
	return vksb.state, vksb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vksb *Resource) StateMust() *vaultKubernetesSecretBackendState {
	if vksb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vksb.Type(), vksb.LocalName()))
	}
	return vksb.state
}

// Args contains the configurations for vault_kubernetes_secret_backend.
type Args struct {
	// AllowedManagedKeys: set of string, optional
	AllowedManagedKeys terra.SetValue[terra.StringValue] `hcl:"allowed_managed_keys,attr"`
	// AuditNonHmacRequestKeys: list of string, optional
	AuditNonHmacRequestKeys terra.ListValue[terra.StringValue] `hcl:"audit_non_hmac_request_keys,attr"`
	// AuditNonHmacResponseKeys: list of string, optional
	AuditNonHmacResponseKeys terra.ListValue[terra.StringValue] `hcl:"audit_non_hmac_response_keys,attr"`
	// DefaultLeaseTtlSeconds: number, optional
	DefaultLeaseTtlSeconds terra.NumberValue `hcl:"default_lease_ttl_seconds,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableLocalCaJwt: bool, optional
	DisableLocalCaJwt terra.BoolValue `hcl:"disable_local_ca_jwt,attr"`
	// ExternalEntropyAccess: bool, optional
	ExternalEntropyAccess terra.BoolValue `hcl:"external_entropy_access,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KubernetesCaCert: string, optional
	KubernetesCaCert terra.StringValue `hcl:"kubernetes_ca_cert,attr"`
	// KubernetesHost: string, optional
	KubernetesHost terra.StringValue `hcl:"kubernetes_host,attr"`
	// Local: bool, optional
	Local terra.BoolValue `hcl:"local,attr"`
	// MaxLeaseTtlSeconds: number, optional
	MaxLeaseTtlSeconds terra.NumberValue `hcl:"max_lease_ttl_seconds,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Options: map of string, optional
	Options terra.MapValue[terra.StringValue] `hcl:"options,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// SealWrap: bool, optional
	SealWrap terra.BoolValue `hcl:"seal_wrap,attr"`
	// ServiceAccountJwt: string, optional
	ServiceAccountJwt terra.StringValue `hcl:"service_account_jwt,attr"`
}

type vaultKubernetesSecretBackendAttributes struct {
	ref terra.Reference
}

// Accessor returns a reference to field accessor of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) Accessor() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("accessor"))
}

// AllowedManagedKeys returns a reference to field allowed_managed_keys of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) AllowedManagedKeys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vksb.ref.Append("allowed_managed_keys"))
}

// AuditNonHmacRequestKeys returns a reference to field audit_non_hmac_request_keys of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) AuditNonHmacRequestKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vksb.ref.Append("audit_non_hmac_request_keys"))
}

// AuditNonHmacResponseKeys returns a reference to field audit_non_hmac_response_keys of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) AuditNonHmacResponseKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vksb.ref.Append("audit_non_hmac_response_keys"))
}

// DefaultLeaseTtlSeconds returns a reference to field default_lease_ttl_seconds of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) DefaultLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(vksb.ref.Append("default_lease_ttl_seconds"))
}

// Description returns a reference to field description of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("description"))
}

// DisableLocalCaJwt returns a reference to field disable_local_ca_jwt of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) DisableLocalCaJwt() terra.BoolValue {
	return terra.ReferenceAsBool(vksb.ref.Append("disable_local_ca_jwt"))
}

// ExternalEntropyAccess returns a reference to field external_entropy_access of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) ExternalEntropyAccess() terra.BoolValue {
	return terra.ReferenceAsBool(vksb.ref.Append("external_entropy_access"))
}

// Id returns a reference to field id of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("id"))
}

// KubernetesCaCert returns a reference to field kubernetes_ca_cert of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) KubernetesCaCert() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("kubernetes_ca_cert"))
}

// KubernetesHost returns a reference to field kubernetes_host of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) KubernetesHost() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("kubernetes_host"))
}

// Local returns a reference to field local of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) Local() terra.BoolValue {
	return terra.ReferenceAsBool(vksb.ref.Append("local"))
}

// MaxLeaseTtlSeconds returns a reference to field max_lease_ttl_seconds of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) MaxLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(vksb.ref.Append("max_lease_ttl_seconds"))
}

// Namespace returns a reference to field namespace of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("namespace"))
}

// Options returns a reference to field options of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) Options() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vksb.ref.Append("options"))
}

// Path returns a reference to field path of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("path"))
}

// SealWrap returns a reference to field seal_wrap of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) SealWrap() terra.BoolValue {
	return terra.ReferenceAsBool(vksb.ref.Append("seal_wrap"))
}

// ServiceAccountJwt returns a reference to field service_account_jwt of vault_kubernetes_secret_backend.
func (vksb vaultKubernetesSecretBackendAttributes) ServiceAccountJwt() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("service_account_jwt"))
}

type vaultKubernetesSecretBackendState struct {
	Accessor                 string            `json:"accessor"`
	AllowedManagedKeys       []string          `json:"allowed_managed_keys"`
	AuditNonHmacRequestKeys  []string          `json:"audit_non_hmac_request_keys"`
	AuditNonHmacResponseKeys []string          `json:"audit_non_hmac_response_keys"`
	DefaultLeaseTtlSeconds   float64           `json:"default_lease_ttl_seconds"`
	Description              string            `json:"description"`
	DisableLocalCaJwt        bool              `json:"disable_local_ca_jwt"`
	ExternalEntropyAccess    bool              `json:"external_entropy_access"`
	Id                       string            `json:"id"`
	KubernetesCaCert         string            `json:"kubernetes_ca_cert"`
	KubernetesHost           string            `json:"kubernetes_host"`
	Local                    bool              `json:"local"`
	MaxLeaseTtlSeconds       float64           `json:"max_lease_ttl_seconds"`
	Namespace                string            `json:"namespace"`
	Options                  map[string]string `json:"options"`
	Path                     string            `json:"path"`
	SealWrap                 bool              `json:"seal_wrap"`
	ServiceAccountJwt        string            `json:"service_account_jwt"`
}
