// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_transit_decrypt

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource vault_transit_decrypt.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (vtd *DataSource) DataSource() string {
	return "vault_transit_decrypt"
}

// LocalName returns the local name for [DataSource].
func (vtd *DataSource) LocalName() string {
	return vtd.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (vtd *DataSource) Configuration() interface{} {
	return vtd.Args
}

// Attributes returns the attributes for [DataSource].
func (vtd *DataSource) Attributes() dataVaultTransitDecryptAttributes {
	return dataVaultTransitDecryptAttributes{ref: terra.ReferenceDataSource(vtd)}
}

// DataArgs contains the configurations for vault_transit_decrypt.
type DataArgs struct {
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// Ciphertext: string, required
	Ciphertext terra.StringValue `hcl:"ciphertext,attr" validate:"required"`
	// Context: string, optional
	Context terra.StringValue `hcl:"context,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}

type dataVaultTransitDecryptAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_transit_decrypt.
func (vtd dataVaultTransitDecryptAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("backend"))
}

// Ciphertext returns a reference to field ciphertext of vault_transit_decrypt.
func (vtd dataVaultTransitDecryptAttributes) Ciphertext() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("ciphertext"))
}

// Context returns a reference to field context of vault_transit_decrypt.
func (vtd dataVaultTransitDecryptAttributes) Context() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("context"))
}

// Id returns a reference to field id of vault_transit_decrypt.
func (vtd dataVaultTransitDecryptAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("id"))
}

// Key returns a reference to field key of vault_transit_decrypt.
func (vtd dataVaultTransitDecryptAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("key"))
}

// Namespace returns a reference to field namespace of vault_transit_decrypt.
func (vtd dataVaultTransitDecryptAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("namespace"))
}

// Plaintext returns a reference to field plaintext of vault_transit_decrypt.
func (vtd dataVaultTransitDecryptAttributes) Plaintext() terra.StringValue {
	return terra.ReferenceAsString(vtd.ref.Append("plaintext"))
}
