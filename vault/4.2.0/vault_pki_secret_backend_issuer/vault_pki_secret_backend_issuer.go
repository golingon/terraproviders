// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_pki_secret_backend_issuer

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_pki_secret_backend_issuer.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultPkiSecretBackendIssuerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vpsbi *Resource) Type() string {
	return "vault_pki_secret_backend_issuer"
}

// LocalName returns the local name for [Resource].
func (vpsbi *Resource) LocalName() string {
	return vpsbi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vpsbi *Resource) Configuration() interface{} {
	return vpsbi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vpsbi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vpsbi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vpsbi *Resource) Dependencies() terra.Dependencies {
	return vpsbi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vpsbi *Resource) LifecycleManagement() *terra.Lifecycle {
	return vpsbi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vpsbi *Resource) Attributes() vaultPkiSecretBackendIssuerAttributes {
	return vaultPkiSecretBackendIssuerAttributes{ref: terra.ReferenceResource(vpsbi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vpsbi *Resource) ImportState(state io.Reader) error {
	vpsbi.state = &vaultPkiSecretBackendIssuerState{}
	if err := json.NewDecoder(state).Decode(vpsbi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vpsbi.Type(), vpsbi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vpsbi *Resource) State() (*vaultPkiSecretBackendIssuerState, bool) {
	return vpsbi.state, vpsbi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vpsbi *Resource) StateMust() *vaultPkiSecretBackendIssuerState {
	if vpsbi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vpsbi.Type(), vpsbi.LocalName()))
	}
	return vpsbi.state
}

// Args contains the configurations for vault_pki_secret_backend_issuer.
type Args struct {
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// CrlDistributionPoints: list of string, optional
	CrlDistributionPoints terra.ListValue[terra.StringValue] `hcl:"crl_distribution_points,attr"`
	// EnableAiaUrlTemplating: bool, optional
	EnableAiaUrlTemplating terra.BoolValue `hcl:"enable_aia_url_templating,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IssuerName: string, optional
	IssuerName terra.StringValue `hcl:"issuer_name,attr"`
	// IssuerRef: string, required
	IssuerRef terra.StringValue `hcl:"issuer_ref,attr" validate:"required"`
	// IssuingCertificates: list of string, optional
	IssuingCertificates terra.ListValue[terra.StringValue] `hcl:"issuing_certificates,attr"`
	// LeafNotAfterBehavior: string, optional
	LeafNotAfterBehavior terra.StringValue `hcl:"leaf_not_after_behavior,attr"`
	// ManualChain: list of string, optional
	ManualChain terra.ListValue[terra.StringValue] `hcl:"manual_chain,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// OcspServers: list of string, optional
	OcspServers terra.ListValue[terra.StringValue] `hcl:"ocsp_servers,attr"`
	// RevocationSignatureAlgorithm: string, optional
	RevocationSignatureAlgorithm terra.StringValue `hcl:"revocation_signature_algorithm,attr"`
	// Usage: string, optional
	Usage terra.StringValue `hcl:"usage,attr"`
}

type vaultPkiSecretBackendIssuerAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_pki_secret_backend_issuer.
func (vpsbi vaultPkiSecretBackendIssuerAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vpsbi.ref.Append("backend"))
}

// CrlDistributionPoints returns a reference to field crl_distribution_points of vault_pki_secret_backend_issuer.
func (vpsbi vaultPkiSecretBackendIssuerAttributes) CrlDistributionPoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vpsbi.ref.Append("crl_distribution_points"))
}

// EnableAiaUrlTemplating returns a reference to field enable_aia_url_templating of vault_pki_secret_backend_issuer.
func (vpsbi vaultPkiSecretBackendIssuerAttributes) EnableAiaUrlTemplating() terra.BoolValue {
	return terra.ReferenceAsBool(vpsbi.ref.Append("enable_aia_url_templating"))
}

// Id returns a reference to field id of vault_pki_secret_backend_issuer.
func (vpsbi vaultPkiSecretBackendIssuerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vpsbi.ref.Append("id"))
}

// IssuerId returns a reference to field issuer_id of vault_pki_secret_backend_issuer.
func (vpsbi vaultPkiSecretBackendIssuerAttributes) IssuerId() terra.StringValue {
	return terra.ReferenceAsString(vpsbi.ref.Append("issuer_id"))
}

// IssuerName returns a reference to field issuer_name of vault_pki_secret_backend_issuer.
func (vpsbi vaultPkiSecretBackendIssuerAttributes) IssuerName() terra.StringValue {
	return terra.ReferenceAsString(vpsbi.ref.Append("issuer_name"))
}

// IssuerRef returns a reference to field issuer_ref of vault_pki_secret_backend_issuer.
func (vpsbi vaultPkiSecretBackendIssuerAttributes) IssuerRef() terra.StringValue {
	return terra.ReferenceAsString(vpsbi.ref.Append("issuer_ref"))
}

// IssuingCertificates returns a reference to field issuing_certificates of vault_pki_secret_backend_issuer.
func (vpsbi vaultPkiSecretBackendIssuerAttributes) IssuingCertificates() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vpsbi.ref.Append("issuing_certificates"))
}

// LeafNotAfterBehavior returns a reference to field leaf_not_after_behavior of vault_pki_secret_backend_issuer.
func (vpsbi vaultPkiSecretBackendIssuerAttributes) LeafNotAfterBehavior() terra.StringValue {
	return terra.ReferenceAsString(vpsbi.ref.Append("leaf_not_after_behavior"))
}

// ManualChain returns a reference to field manual_chain of vault_pki_secret_backend_issuer.
func (vpsbi vaultPkiSecretBackendIssuerAttributes) ManualChain() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vpsbi.ref.Append("manual_chain"))
}

// Namespace returns a reference to field namespace of vault_pki_secret_backend_issuer.
func (vpsbi vaultPkiSecretBackendIssuerAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vpsbi.ref.Append("namespace"))
}

// OcspServers returns a reference to field ocsp_servers of vault_pki_secret_backend_issuer.
func (vpsbi vaultPkiSecretBackendIssuerAttributes) OcspServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vpsbi.ref.Append("ocsp_servers"))
}

// RevocationSignatureAlgorithm returns a reference to field revocation_signature_algorithm of vault_pki_secret_backend_issuer.
func (vpsbi vaultPkiSecretBackendIssuerAttributes) RevocationSignatureAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(vpsbi.ref.Append("revocation_signature_algorithm"))
}

// Usage returns a reference to field usage of vault_pki_secret_backend_issuer.
func (vpsbi vaultPkiSecretBackendIssuerAttributes) Usage() terra.StringValue {
	return terra.ReferenceAsString(vpsbi.ref.Append("usage"))
}

type vaultPkiSecretBackendIssuerState struct {
	Backend                      string   `json:"backend"`
	CrlDistributionPoints        []string `json:"crl_distribution_points"`
	EnableAiaUrlTemplating       bool     `json:"enable_aia_url_templating"`
	Id                           string   `json:"id"`
	IssuerId                     string   `json:"issuer_id"`
	IssuerName                   string   `json:"issuer_name"`
	IssuerRef                    string   `json:"issuer_ref"`
	IssuingCertificates          []string `json:"issuing_certificates"`
	LeafNotAfterBehavior         string   `json:"leaf_not_after_behavior"`
	ManualChain                  []string `json:"manual_chain"`
	Namespace                    string   `json:"namespace"`
	OcspServers                  []string `json:"ocsp_servers"`
	RevocationSignatureAlgorithm string   `json:"revocation_signature_algorithm"`
	Usage                        string   `json:"usage"`
}
