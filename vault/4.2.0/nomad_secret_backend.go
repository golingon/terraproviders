// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewNomadSecretBackend creates a new instance of [NomadSecretBackend].
func NewNomadSecretBackend(name string, args NomadSecretBackendArgs) *NomadSecretBackend {
	return &NomadSecretBackend{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NomadSecretBackend)(nil)

// NomadSecretBackend represents the Terraform resource vault_nomad_secret_backend.
type NomadSecretBackend struct {
	Name      string
	Args      NomadSecretBackendArgs
	state     *nomadSecretBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NomadSecretBackend].
func (nsb *NomadSecretBackend) Type() string {
	return "vault_nomad_secret_backend"
}

// LocalName returns the local name for [NomadSecretBackend].
func (nsb *NomadSecretBackend) LocalName() string {
	return nsb.Name
}

// Configuration returns the configuration (args) for [NomadSecretBackend].
func (nsb *NomadSecretBackend) Configuration() interface{} {
	return nsb.Args
}

// DependOn is used for other resources to depend on [NomadSecretBackend].
func (nsb *NomadSecretBackend) DependOn() terra.Reference {
	return terra.ReferenceResource(nsb)
}

// Dependencies returns the list of resources [NomadSecretBackend] depends_on.
func (nsb *NomadSecretBackend) Dependencies() terra.Dependencies {
	return nsb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NomadSecretBackend].
func (nsb *NomadSecretBackend) LifecycleManagement() *terra.Lifecycle {
	return nsb.Lifecycle
}

// Attributes returns the attributes for [NomadSecretBackend].
func (nsb *NomadSecretBackend) Attributes() nomadSecretBackendAttributes {
	return nomadSecretBackendAttributes{ref: terra.ReferenceResource(nsb)}
}

// ImportState imports the given attribute values into [NomadSecretBackend]'s state.
func (nsb *NomadSecretBackend) ImportState(av io.Reader) error {
	nsb.state = &nomadSecretBackendState{}
	if err := json.NewDecoder(av).Decode(nsb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nsb.Type(), nsb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NomadSecretBackend] has state.
func (nsb *NomadSecretBackend) State() (*nomadSecretBackendState, bool) {
	return nsb.state, nsb.state != nil
}

// StateMust returns the state for [NomadSecretBackend]. Panics if the state is nil.
func (nsb *NomadSecretBackend) StateMust() *nomadSecretBackendState {
	if nsb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nsb.Type(), nsb.LocalName()))
	}
	return nsb.state
}

// NomadSecretBackendArgs contains the configurations for vault_nomad_secret_backend.
type NomadSecretBackendArgs struct {
	// Address: string, optional
	Address terra.StringValue `hcl:"address,attr"`
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// CaCert: string, optional
	CaCert terra.StringValue `hcl:"ca_cert,attr"`
	// ClientCert: string, optional
	ClientCert terra.StringValue `hcl:"client_cert,attr"`
	// ClientKey: string, optional
	ClientKey terra.StringValue `hcl:"client_key,attr"`
	// DefaultLeaseTtlSeconds: number, optional
	DefaultLeaseTtlSeconds terra.NumberValue `hcl:"default_lease_ttl_seconds,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableRemount: bool, optional
	DisableRemount terra.BoolValue `hcl:"disable_remount,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Local: bool, optional
	Local terra.BoolValue `hcl:"local,attr"`
	// MaxLeaseTtlSeconds: number, optional
	MaxLeaseTtlSeconds terra.NumberValue `hcl:"max_lease_ttl_seconds,attr"`
	// MaxTokenNameLength: number, optional
	MaxTokenNameLength terra.NumberValue `hcl:"max_token_name_length,attr"`
	// MaxTtl: number, optional
	MaxTtl terra.NumberValue `hcl:"max_ttl,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Token: string, optional
	Token terra.StringValue `hcl:"token,attr"`
	// Ttl: number, optional
	Ttl terra.NumberValue `hcl:"ttl,attr"`
}
type nomadSecretBackendAttributes struct {
	ref terra.Reference
}

// Address returns a reference to field address of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(nsb.ref.Append("address"))
}

// Backend returns a reference to field backend of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(nsb.ref.Append("backend"))
}

// CaCert returns a reference to field ca_cert of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) CaCert() terra.StringValue {
	return terra.ReferenceAsString(nsb.ref.Append("ca_cert"))
}

// ClientCert returns a reference to field client_cert of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) ClientCert() terra.StringValue {
	return terra.ReferenceAsString(nsb.ref.Append("client_cert"))
}

// ClientKey returns a reference to field client_key of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceAsString(nsb.ref.Append("client_key"))
}

// DefaultLeaseTtlSeconds returns a reference to field default_lease_ttl_seconds of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) DefaultLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(nsb.ref.Append("default_lease_ttl_seconds"))
}

// Description returns a reference to field description of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(nsb.ref.Append("description"))
}

// DisableRemount returns a reference to field disable_remount of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) DisableRemount() terra.BoolValue {
	return terra.ReferenceAsBool(nsb.ref.Append("disable_remount"))
}

// Id returns a reference to field id of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nsb.ref.Append("id"))
}

// Local returns a reference to field local of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) Local() terra.BoolValue {
	return terra.ReferenceAsBool(nsb.ref.Append("local"))
}

// MaxLeaseTtlSeconds returns a reference to field max_lease_ttl_seconds of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) MaxLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(nsb.ref.Append("max_lease_ttl_seconds"))
}

// MaxTokenNameLength returns a reference to field max_token_name_length of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) MaxTokenNameLength() terra.NumberValue {
	return terra.ReferenceAsNumber(nsb.ref.Append("max_token_name_length"))
}

// MaxTtl returns a reference to field max_ttl of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) MaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(nsb.ref.Append("max_ttl"))
}

// Namespace returns a reference to field namespace of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(nsb.ref.Append("namespace"))
}

// Token returns a reference to field token of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) Token() terra.StringValue {
	return terra.ReferenceAsString(nsb.ref.Append("token"))
}

// Ttl returns a reference to field ttl of vault_nomad_secret_backend.
func (nsb nomadSecretBackendAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(nsb.ref.Append("ttl"))
}

type nomadSecretBackendState struct {
	Address                string  `json:"address"`
	Backend                string  `json:"backend"`
	CaCert                 string  `json:"ca_cert"`
	ClientCert             string  `json:"client_cert"`
	ClientKey              string  `json:"client_key"`
	DefaultLeaseTtlSeconds float64 `json:"default_lease_ttl_seconds"`
	Description            string  `json:"description"`
	DisableRemount         bool    `json:"disable_remount"`
	Id                     string  `json:"id"`
	Local                  bool    `json:"local"`
	MaxLeaseTtlSeconds     float64 `json:"max_lease_ttl_seconds"`
	MaxTokenNameLength     float64 `json:"max_token_name_length"`
	MaxTtl                 float64 `json:"max_ttl"`
	Namespace              string  `json:"namespace"`
	Token                  string  `json:"token"`
	Ttl                    float64 `json:"ttl"`
}
