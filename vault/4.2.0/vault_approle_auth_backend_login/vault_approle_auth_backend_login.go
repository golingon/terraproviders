// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_approle_auth_backend_login

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_approle_auth_backend_login.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultApproleAuthBackendLoginState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vaabl *Resource) Type() string {
	return "vault_approle_auth_backend_login"
}

// LocalName returns the local name for [Resource].
func (vaabl *Resource) LocalName() string {
	return vaabl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vaabl *Resource) Configuration() interface{} {
	return vaabl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vaabl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vaabl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vaabl *Resource) Dependencies() terra.Dependencies {
	return vaabl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vaabl *Resource) LifecycleManagement() *terra.Lifecycle {
	return vaabl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vaabl *Resource) Attributes() vaultApproleAuthBackendLoginAttributes {
	return vaultApproleAuthBackendLoginAttributes{ref: terra.ReferenceResource(vaabl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vaabl *Resource) ImportState(state io.Reader) error {
	vaabl.state = &vaultApproleAuthBackendLoginState{}
	if err := json.NewDecoder(state).Decode(vaabl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vaabl.Type(), vaabl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vaabl *Resource) State() (*vaultApproleAuthBackendLoginState, bool) {
	return vaabl.state, vaabl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vaabl *Resource) StateMust() *vaultApproleAuthBackendLoginState {
	if vaabl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vaabl.Type(), vaabl.LocalName()))
	}
	return vaabl.state
}

// Args contains the configurations for vault_approle_auth_backend_login.
type Args struct {
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// RoleId: string, required
	RoleId terra.StringValue `hcl:"role_id,attr" validate:"required"`
	// SecretId: string, optional
	SecretId terra.StringValue `hcl:"secret_id,attr"`
}

type vaultApproleAuthBackendLoginAttributes struct {
	ref terra.Reference
}

// Accessor returns a reference to field accessor of vault_approle_auth_backend_login.
func (vaabl vaultApproleAuthBackendLoginAttributes) Accessor() terra.StringValue {
	return terra.ReferenceAsString(vaabl.ref.Append("accessor"))
}

// Backend returns a reference to field backend of vault_approle_auth_backend_login.
func (vaabl vaultApproleAuthBackendLoginAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vaabl.ref.Append("backend"))
}

// ClientToken returns a reference to field client_token of vault_approle_auth_backend_login.
func (vaabl vaultApproleAuthBackendLoginAttributes) ClientToken() terra.StringValue {
	return terra.ReferenceAsString(vaabl.ref.Append("client_token"))
}

// Id returns a reference to field id of vault_approle_auth_backend_login.
func (vaabl vaultApproleAuthBackendLoginAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vaabl.ref.Append("id"))
}

// LeaseDuration returns a reference to field lease_duration of vault_approle_auth_backend_login.
func (vaabl vaultApproleAuthBackendLoginAttributes) LeaseDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(vaabl.ref.Append("lease_duration"))
}

// LeaseStarted returns a reference to field lease_started of vault_approle_auth_backend_login.
func (vaabl vaultApproleAuthBackendLoginAttributes) LeaseStarted() terra.StringValue {
	return terra.ReferenceAsString(vaabl.ref.Append("lease_started"))
}

// Metadata returns a reference to field metadata of vault_approle_auth_backend_login.
func (vaabl vaultApproleAuthBackendLoginAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vaabl.ref.Append("metadata"))
}

// Namespace returns a reference to field namespace of vault_approle_auth_backend_login.
func (vaabl vaultApproleAuthBackendLoginAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vaabl.ref.Append("namespace"))
}

// Policies returns a reference to field policies of vault_approle_auth_backend_login.
func (vaabl vaultApproleAuthBackendLoginAttributes) Policies() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vaabl.ref.Append("policies"))
}

// Renewable returns a reference to field renewable of vault_approle_auth_backend_login.
func (vaabl vaultApproleAuthBackendLoginAttributes) Renewable() terra.BoolValue {
	return terra.ReferenceAsBool(vaabl.ref.Append("renewable"))
}

// RoleId returns a reference to field role_id of vault_approle_auth_backend_login.
func (vaabl vaultApproleAuthBackendLoginAttributes) RoleId() terra.StringValue {
	return terra.ReferenceAsString(vaabl.ref.Append("role_id"))
}

// SecretId returns a reference to field secret_id of vault_approle_auth_backend_login.
func (vaabl vaultApproleAuthBackendLoginAttributes) SecretId() terra.StringValue {
	return terra.ReferenceAsString(vaabl.ref.Append("secret_id"))
}

type vaultApproleAuthBackendLoginState struct {
	Accessor      string            `json:"accessor"`
	Backend       string            `json:"backend"`
	ClientToken   string            `json:"client_token"`
	Id            string            `json:"id"`
	LeaseDuration float64           `json:"lease_duration"`
	LeaseStarted  string            `json:"lease_started"`
	Metadata      map[string]string `json:"metadata"`
	Namespace     string            `json:"namespace"`
	Policies      []string          `json:"policies"`
	Renewable     bool              `json:"renewable"`
	RoleId        string            `json:"role_id"`
	SecretId      string            `json:"secret_id"`
}
