// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_secrets_sync_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_secrets_sync_config.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultSecretsSyncConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vssc *Resource) Type() string {
	return "vault_secrets_sync_config"
}

// LocalName returns the local name for [Resource].
func (vssc *Resource) LocalName() string {
	return vssc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vssc *Resource) Configuration() interface{} {
	return vssc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vssc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vssc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vssc *Resource) Dependencies() terra.Dependencies {
	return vssc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vssc *Resource) LifecycleManagement() *terra.Lifecycle {
	return vssc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vssc *Resource) Attributes() vaultSecretsSyncConfigAttributes {
	return vaultSecretsSyncConfigAttributes{ref: terra.ReferenceResource(vssc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vssc *Resource) ImportState(state io.Reader) error {
	vssc.state = &vaultSecretsSyncConfigState{}
	if err := json.NewDecoder(state).Decode(vssc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vssc.Type(), vssc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vssc *Resource) State() (*vaultSecretsSyncConfigState, bool) {
	return vssc.state, vssc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vssc *Resource) StateMust() *vaultSecretsSyncConfigState {
	if vssc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vssc.Type(), vssc.LocalName()))
	}
	return vssc.state
}

// Args contains the configurations for vault_secrets_sync_config.
type Args struct {
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// QueueCapacity: number, optional
	QueueCapacity terra.NumberValue `hcl:"queue_capacity,attr"`
}

type vaultSecretsSyncConfigAttributes struct {
	ref terra.Reference
}

// Disabled returns a reference to field disabled of vault_secrets_sync_config.
func (vssc vaultSecretsSyncConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(vssc.ref.Append("disabled"))
}

// Id returns a reference to field id of vault_secrets_sync_config.
func (vssc vaultSecretsSyncConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vssc.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_secrets_sync_config.
func (vssc vaultSecretsSyncConfigAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vssc.ref.Append("namespace"))
}

// QueueCapacity returns a reference to field queue_capacity of vault_secrets_sync_config.
func (vssc vaultSecretsSyncConfigAttributes) QueueCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(vssc.ref.Append("queue_capacity"))
}

type vaultSecretsSyncConfigState struct {
	Disabled      bool    `json:"disabled"`
	Id            string  `json:"id"`
	Namespace     string  `json:"namespace"`
	QueueCapacity float64 `json:"queue_capacity"`
}
