// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_terraform_cloud_secret_role

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_terraform_cloud_secret_role.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultTerraformCloudSecretRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vtcsr *Resource) Type() string {
	return "vault_terraform_cloud_secret_role"
}

// LocalName returns the local name for [Resource].
func (vtcsr *Resource) LocalName() string {
	return vtcsr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vtcsr *Resource) Configuration() interface{} {
	return vtcsr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vtcsr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vtcsr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vtcsr *Resource) Dependencies() terra.Dependencies {
	return vtcsr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vtcsr *Resource) LifecycleManagement() *terra.Lifecycle {
	return vtcsr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vtcsr *Resource) Attributes() vaultTerraformCloudSecretRoleAttributes {
	return vaultTerraformCloudSecretRoleAttributes{ref: terra.ReferenceResource(vtcsr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vtcsr *Resource) ImportState(state io.Reader) error {
	vtcsr.state = &vaultTerraformCloudSecretRoleState{}
	if err := json.NewDecoder(state).Decode(vtcsr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vtcsr.Type(), vtcsr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vtcsr *Resource) State() (*vaultTerraformCloudSecretRoleState, bool) {
	return vtcsr.state, vtcsr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vtcsr *Resource) StateMust() *vaultTerraformCloudSecretRoleState {
	if vtcsr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vtcsr.Type(), vtcsr.LocalName()))
	}
	return vtcsr.state
}

// Args contains the configurations for vault_terraform_cloud_secret_role.
type Args struct {
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxTtl: number, optional
	MaxTtl terra.NumberValue `hcl:"max_ttl,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Organization: string, optional
	Organization terra.StringValue `hcl:"organization,attr"`
	// TeamId: string, optional
	TeamId terra.StringValue `hcl:"team_id,attr"`
	// Ttl: number, optional
	Ttl terra.NumberValue `hcl:"ttl,attr"`
	// UserId: string, optional
	UserId terra.StringValue `hcl:"user_id,attr"`
}

type vaultTerraformCloudSecretRoleAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_terraform_cloud_secret_role.
func (vtcsr vaultTerraformCloudSecretRoleAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vtcsr.ref.Append("backend"))
}

// Id returns a reference to field id of vault_terraform_cloud_secret_role.
func (vtcsr vaultTerraformCloudSecretRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vtcsr.ref.Append("id"))
}

// MaxTtl returns a reference to field max_ttl of vault_terraform_cloud_secret_role.
func (vtcsr vaultTerraformCloudSecretRoleAttributes) MaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(vtcsr.ref.Append("max_ttl"))
}

// Name returns a reference to field name of vault_terraform_cloud_secret_role.
func (vtcsr vaultTerraformCloudSecretRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vtcsr.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_terraform_cloud_secret_role.
func (vtcsr vaultTerraformCloudSecretRoleAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vtcsr.ref.Append("namespace"))
}

// Organization returns a reference to field organization of vault_terraform_cloud_secret_role.
func (vtcsr vaultTerraformCloudSecretRoleAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(vtcsr.ref.Append("organization"))
}

// TeamId returns a reference to field team_id of vault_terraform_cloud_secret_role.
func (vtcsr vaultTerraformCloudSecretRoleAttributes) TeamId() terra.StringValue {
	return terra.ReferenceAsString(vtcsr.ref.Append("team_id"))
}

// Ttl returns a reference to field ttl of vault_terraform_cloud_secret_role.
func (vtcsr vaultTerraformCloudSecretRoleAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(vtcsr.ref.Append("ttl"))
}

// UserId returns a reference to field user_id of vault_terraform_cloud_secret_role.
func (vtcsr vaultTerraformCloudSecretRoleAttributes) UserId() terra.StringValue {
	return terra.ReferenceAsString(vtcsr.ref.Append("user_id"))
}

type vaultTerraformCloudSecretRoleState struct {
	Backend      string  `json:"backend"`
	Id           string  `json:"id"`
	MaxTtl       float64 `json:"max_ttl"`
	Name         string  `json:"name"`
	Namespace    string  `json:"namespace"`
	Organization string  `json:"organization"`
	TeamId       string  `json:"team_id"`
	Ttl          float64 `json:"ttl"`
	UserId       string  `json:"user_id"`
}
