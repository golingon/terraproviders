// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_pki_secret_backend_config_urls

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_pki_secret_backend_config_urls.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultPkiSecretBackendConfigUrlsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vpsbcu *Resource) Type() string {
	return "vault_pki_secret_backend_config_urls"
}

// LocalName returns the local name for [Resource].
func (vpsbcu *Resource) LocalName() string {
	return vpsbcu.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vpsbcu *Resource) Configuration() interface{} {
	return vpsbcu.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vpsbcu *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vpsbcu)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vpsbcu *Resource) Dependencies() terra.Dependencies {
	return vpsbcu.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vpsbcu *Resource) LifecycleManagement() *terra.Lifecycle {
	return vpsbcu.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vpsbcu *Resource) Attributes() vaultPkiSecretBackendConfigUrlsAttributes {
	return vaultPkiSecretBackendConfigUrlsAttributes{ref: terra.ReferenceResource(vpsbcu)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vpsbcu *Resource) ImportState(state io.Reader) error {
	vpsbcu.state = &vaultPkiSecretBackendConfigUrlsState{}
	if err := json.NewDecoder(state).Decode(vpsbcu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vpsbcu.Type(), vpsbcu.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vpsbcu *Resource) State() (*vaultPkiSecretBackendConfigUrlsState, bool) {
	return vpsbcu.state, vpsbcu.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vpsbcu *Resource) StateMust() *vaultPkiSecretBackendConfigUrlsState {
	if vpsbcu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vpsbcu.Type(), vpsbcu.LocalName()))
	}
	return vpsbcu.state
}

// Args contains the configurations for vault_pki_secret_backend_config_urls.
type Args struct {
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// CrlDistributionPoints: list of string, optional
	CrlDistributionPoints terra.ListValue[terra.StringValue] `hcl:"crl_distribution_points,attr"`
	// EnableTemplating: bool, optional
	EnableTemplating terra.BoolValue `hcl:"enable_templating,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IssuingCertificates: list of string, optional
	IssuingCertificates terra.ListValue[terra.StringValue] `hcl:"issuing_certificates,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// OcspServers: list of string, optional
	OcspServers terra.ListValue[terra.StringValue] `hcl:"ocsp_servers,attr"`
}

type vaultPkiSecretBackendConfigUrlsAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_pki_secret_backend_config_urls.
func (vpsbcu vaultPkiSecretBackendConfigUrlsAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vpsbcu.ref.Append("backend"))
}

// CrlDistributionPoints returns a reference to field crl_distribution_points of vault_pki_secret_backend_config_urls.
func (vpsbcu vaultPkiSecretBackendConfigUrlsAttributes) CrlDistributionPoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vpsbcu.ref.Append("crl_distribution_points"))
}

// EnableTemplating returns a reference to field enable_templating of vault_pki_secret_backend_config_urls.
func (vpsbcu vaultPkiSecretBackendConfigUrlsAttributes) EnableTemplating() terra.BoolValue {
	return terra.ReferenceAsBool(vpsbcu.ref.Append("enable_templating"))
}

// Id returns a reference to field id of vault_pki_secret_backend_config_urls.
func (vpsbcu vaultPkiSecretBackendConfigUrlsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vpsbcu.ref.Append("id"))
}

// IssuingCertificates returns a reference to field issuing_certificates of vault_pki_secret_backend_config_urls.
func (vpsbcu vaultPkiSecretBackendConfigUrlsAttributes) IssuingCertificates() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vpsbcu.ref.Append("issuing_certificates"))
}

// Namespace returns a reference to field namespace of vault_pki_secret_backend_config_urls.
func (vpsbcu vaultPkiSecretBackendConfigUrlsAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vpsbcu.ref.Append("namespace"))
}

// OcspServers returns a reference to field ocsp_servers of vault_pki_secret_backend_config_urls.
func (vpsbcu vaultPkiSecretBackendConfigUrlsAttributes) OcspServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vpsbcu.ref.Append("ocsp_servers"))
}

type vaultPkiSecretBackendConfigUrlsState struct {
	Backend               string   `json:"backend"`
	CrlDistributionPoints []string `json:"crl_distribution_points"`
	EnableTemplating      bool     `json:"enable_templating"`
	Id                    string   `json:"id"`
	IssuingCertificates   []string `json:"issuing_certificates"`
	Namespace             string   `json:"namespace"`
	OcspServers           []string `json:"ocsp_servers"`
}
