// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewAzureAuthBackendConfig creates a new instance of [AzureAuthBackendConfig].
func NewAzureAuthBackendConfig(name string, args AzureAuthBackendConfigArgs) *AzureAuthBackendConfig {
	return &AzureAuthBackendConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AzureAuthBackendConfig)(nil)

// AzureAuthBackendConfig represents the Terraform resource vault_azure_auth_backend_config.
type AzureAuthBackendConfig struct {
	Name      string
	Args      AzureAuthBackendConfigArgs
	state     *azureAuthBackendConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AzureAuthBackendConfig].
func (aabc *AzureAuthBackendConfig) Type() string {
	return "vault_azure_auth_backend_config"
}

// LocalName returns the local name for [AzureAuthBackendConfig].
func (aabc *AzureAuthBackendConfig) LocalName() string {
	return aabc.Name
}

// Configuration returns the configuration (args) for [AzureAuthBackendConfig].
func (aabc *AzureAuthBackendConfig) Configuration() interface{} {
	return aabc.Args
}

// DependOn is used for other resources to depend on [AzureAuthBackendConfig].
func (aabc *AzureAuthBackendConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(aabc)
}

// Dependencies returns the list of resources [AzureAuthBackendConfig] depends_on.
func (aabc *AzureAuthBackendConfig) Dependencies() terra.Dependencies {
	return aabc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AzureAuthBackendConfig].
func (aabc *AzureAuthBackendConfig) LifecycleManagement() *terra.Lifecycle {
	return aabc.Lifecycle
}

// Attributes returns the attributes for [AzureAuthBackendConfig].
func (aabc *AzureAuthBackendConfig) Attributes() azureAuthBackendConfigAttributes {
	return azureAuthBackendConfigAttributes{ref: terra.ReferenceResource(aabc)}
}

// ImportState imports the given attribute values into [AzureAuthBackendConfig]'s state.
func (aabc *AzureAuthBackendConfig) ImportState(av io.Reader) error {
	aabc.state = &azureAuthBackendConfigState{}
	if err := json.NewDecoder(av).Decode(aabc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aabc.Type(), aabc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AzureAuthBackendConfig] has state.
func (aabc *AzureAuthBackendConfig) State() (*azureAuthBackendConfigState, bool) {
	return aabc.state, aabc.state != nil
}

// StateMust returns the state for [AzureAuthBackendConfig]. Panics if the state is nil.
func (aabc *AzureAuthBackendConfig) StateMust() *azureAuthBackendConfigState {
	if aabc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aabc.Type(), aabc.LocalName()))
	}
	return aabc.state
}

// AzureAuthBackendConfigArgs contains the configurations for vault_azure_auth_backend_config.
type AzureAuthBackendConfigArgs struct {
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// ClientSecret: string, optional
	ClientSecret terra.StringValue `hcl:"client_secret,attr"`
	// Environment: string, optional
	Environment terra.StringValue `hcl:"environment,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Resource: string, required
	Resource terra.StringValue `hcl:"resource,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
}
type azureAuthBackendConfigAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_azure_auth_backend_config.
func (aabc azureAuthBackendConfigAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(aabc.ref.Append("backend"))
}

// ClientId returns a reference to field client_id of vault_azure_auth_backend_config.
func (aabc azureAuthBackendConfigAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(aabc.ref.Append("client_id"))
}

// ClientSecret returns a reference to field client_secret of vault_azure_auth_backend_config.
func (aabc azureAuthBackendConfigAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(aabc.ref.Append("client_secret"))
}

// Environment returns a reference to field environment of vault_azure_auth_backend_config.
func (aabc azureAuthBackendConfigAttributes) Environment() terra.StringValue {
	return terra.ReferenceAsString(aabc.ref.Append("environment"))
}

// Id returns a reference to field id of vault_azure_auth_backend_config.
func (aabc azureAuthBackendConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aabc.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_azure_auth_backend_config.
func (aabc azureAuthBackendConfigAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(aabc.ref.Append("namespace"))
}

// Resource returns a reference to field resource of vault_azure_auth_backend_config.
func (aabc azureAuthBackendConfigAttributes) Resource() terra.StringValue {
	return terra.ReferenceAsString(aabc.ref.Append("resource"))
}

// TenantId returns a reference to field tenant_id of vault_azure_auth_backend_config.
func (aabc azureAuthBackendConfigAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(aabc.ref.Append("tenant_id"))
}

type azureAuthBackendConfigState struct {
	Backend      string `json:"backend"`
	ClientId     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
	Environment  string `json:"environment"`
	Id           string `json:"id"`
	Namespace    string `json:"namespace"`
	Resource     string `json:"resource"`
	TenantId     string `json:"tenant_id"`
}
