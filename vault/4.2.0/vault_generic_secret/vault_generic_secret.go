// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_generic_secret

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_generic_secret.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultGenericSecretState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vgs *Resource) Type() string {
	return "vault_generic_secret"
}

// LocalName returns the local name for [Resource].
func (vgs *Resource) LocalName() string {
	return vgs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vgs *Resource) Configuration() interface{} {
	return vgs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vgs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vgs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vgs *Resource) Dependencies() terra.Dependencies {
	return vgs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vgs *Resource) LifecycleManagement() *terra.Lifecycle {
	return vgs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vgs *Resource) Attributes() vaultGenericSecretAttributes {
	return vaultGenericSecretAttributes{ref: terra.ReferenceResource(vgs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vgs *Resource) ImportState(state io.Reader) error {
	vgs.state = &vaultGenericSecretState{}
	if err := json.NewDecoder(state).Decode(vgs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vgs.Type(), vgs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vgs *Resource) State() (*vaultGenericSecretState, bool) {
	return vgs.state, vgs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vgs *Resource) StateMust() *vaultGenericSecretState {
	if vgs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vgs.Type(), vgs.LocalName()))
	}
	return vgs.state
}

// Args contains the configurations for vault_generic_secret.
type Args struct {
	// DataJson: string, required
	DataJson terra.StringValue `hcl:"data_json,attr" validate:"required"`
	// DeleteAllVersions: bool, optional
	DeleteAllVersions terra.BoolValue `hcl:"delete_all_versions,attr"`
	// DisableRead: bool, optional
	DisableRead terra.BoolValue `hcl:"disable_read,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type vaultGenericSecretAttributes struct {
	ref terra.Reference
}

// Data returns a reference to field data of vault_generic_secret.
func (vgs vaultGenericSecretAttributes) Data() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vgs.ref.Append("data"))
}

// DataJson returns a reference to field data_json of vault_generic_secret.
func (vgs vaultGenericSecretAttributes) DataJson() terra.StringValue {
	return terra.ReferenceAsString(vgs.ref.Append("data_json"))
}

// DeleteAllVersions returns a reference to field delete_all_versions of vault_generic_secret.
func (vgs vaultGenericSecretAttributes) DeleteAllVersions() terra.BoolValue {
	return terra.ReferenceAsBool(vgs.ref.Append("delete_all_versions"))
}

// DisableRead returns a reference to field disable_read of vault_generic_secret.
func (vgs vaultGenericSecretAttributes) DisableRead() terra.BoolValue {
	return terra.ReferenceAsBool(vgs.ref.Append("disable_read"))
}

// Id returns a reference to field id of vault_generic_secret.
func (vgs vaultGenericSecretAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vgs.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_generic_secret.
func (vgs vaultGenericSecretAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vgs.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_generic_secret.
func (vgs vaultGenericSecretAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(vgs.ref.Append("path"))
}

type vaultGenericSecretState struct {
	Data              map[string]string `json:"data"`
	DataJson          string            `json:"data_json"`
	DeleteAllVersions bool              `json:"delete_all_versions"`
	DisableRead       bool              `json:"disable_read"`
	Id                string            `json:"id"`
	Namespace         string            `json:"namespace"`
	Path              string            `json:"path"`
}
