// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_okta_auth_backend

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_okta_auth_backend.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultOktaAuthBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (voab *Resource) Type() string {
	return "vault_okta_auth_backend"
}

// LocalName returns the local name for [Resource].
func (voab *Resource) LocalName() string {
	return voab.Name
}

// Configuration returns the configuration (args) for [Resource].
func (voab *Resource) Configuration() interface{} {
	return voab.Args
}

// DependOn is used for other resources to depend on [Resource].
func (voab *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(voab)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (voab *Resource) Dependencies() terra.Dependencies {
	return voab.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (voab *Resource) LifecycleManagement() *terra.Lifecycle {
	return voab.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (voab *Resource) Attributes() vaultOktaAuthBackendAttributes {
	return vaultOktaAuthBackendAttributes{ref: terra.ReferenceResource(voab)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (voab *Resource) ImportState(state io.Reader) error {
	voab.state = &vaultOktaAuthBackendState{}
	if err := json.NewDecoder(state).Decode(voab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", voab.Type(), voab.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (voab *Resource) State() (*vaultOktaAuthBackendState, bool) {
	return voab.state, voab.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (voab *Resource) StateMust() *vaultOktaAuthBackendState {
	if voab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", voab.Type(), voab.LocalName()))
	}
	return voab.state
}

// Args contains the configurations for vault_okta_auth_backend.
type Args struct {
	// BaseUrl: string, optional
	BaseUrl terra.StringValue `hcl:"base_url,attr"`
	// BypassOktaMfa: bool, optional
	BypassOktaMfa terra.BoolValue `hcl:"bypass_okta_mfa,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableRemount: bool, optional
	DisableRemount terra.BoolValue `hcl:"disable_remount,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxTtl: string, optional
	MaxTtl terra.StringValue `hcl:"max_ttl,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Organization: string, required
	Organization terra.StringValue `hcl:"organization,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Token: string, optional
	Token terra.StringValue `hcl:"token,attr"`
	// Ttl: string, optional
	Ttl terra.StringValue `hcl:"ttl,attr"`
	// Group: min=0
	Group []Group `hcl:"group,block" validate:"min=0"`
	// User: min=0
	User []User `hcl:"user,block" validate:"min=0"`
}

type vaultOktaAuthBackendAttributes struct {
	ref terra.Reference
}

// Accessor returns a reference to field accessor of vault_okta_auth_backend.
func (voab vaultOktaAuthBackendAttributes) Accessor() terra.StringValue {
	return terra.ReferenceAsString(voab.ref.Append("accessor"))
}

// BaseUrl returns a reference to field base_url of vault_okta_auth_backend.
func (voab vaultOktaAuthBackendAttributes) BaseUrl() terra.StringValue {
	return terra.ReferenceAsString(voab.ref.Append("base_url"))
}

// BypassOktaMfa returns a reference to field bypass_okta_mfa of vault_okta_auth_backend.
func (voab vaultOktaAuthBackendAttributes) BypassOktaMfa() terra.BoolValue {
	return terra.ReferenceAsBool(voab.ref.Append("bypass_okta_mfa"))
}

// Description returns a reference to field description of vault_okta_auth_backend.
func (voab vaultOktaAuthBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(voab.ref.Append("description"))
}

// DisableRemount returns a reference to field disable_remount of vault_okta_auth_backend.
func (voab vaultOktaAuthBackendAttributes) DisableRemount() terra.BoolValue {
	return terra.ReferenceAsBool(voab.ref.Append("disable_remount"))
}

// Id returns a reference to field id of vault_okta_auth_backend.
func (voab vaultOktaAuthBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(voab.ref.Append("id"))
}

// MaxTtl returns a reference to field max_ttl of vault_okta_auth_backend.
func (voab vaultOktaAuthBackendAttributes) MaxTtl() terra.StringValue {
	return terra.ReferenceAsString(voab.ref.Append("max_ttl"))
}

// Namespace returns a reference to field namespace of vault_okta_auth_backend.
func (voab vaultOktaAuthBackendAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(voab.ref.Append("namespace"))
}

// Organization returns a reference to field organization of vault_okta_auth_backend.
func (voab vaultOktaAuthBackendAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(voab.ref.Append("organization"))
}

// Path returns a reference to field path of vault_okta_auth_backend.
func (voab vaultOktaAuthBackendAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(voab.ref.Append("path"))
}

// Token returns a reference to field token of vault_okta_auth_backend.
func (voab vaultOktaAuthBackendAttributes) Token() terra.StringValue {
	return terra.ReferenceAsString(voab.ref.Append("token"))
}

// Ttl returns a reference to field ttl of vault_okta_auth_backend.
func (voab vaultOktaAuthBackendAttributes) Ttl() terra.StringValue {
	return terra.ReferenceAsString(voab.ref.Append("ttl"))
}

func (voab vaultOktaAuthBackendAttributes) Group() terra.SetValue[GroupAttributes] {
	return terra.ReferenceAsSet[GroupAttributes](voab.ref.Append("group"))
}

func (voab vaultOktaAuthBackendAttributes) User() terra.SetValue[UserAttributes] {
	return terra.ReferenceAsSet[UserAttributes](voab.ref.Append("user"))
}

type vaultOktaAuthBackendState struct {
	Accessor       string       `json:"accessor"`
	BaseUrl        string       `json:"base_url"`
	BypassOktaMfa  bool         `json:"bypass_okta_mfa"`
	Description    string       `json:"description"`
	DisableRemount bool         `json:"disable_remount"`
	Id             string       `json:"id"`
	MaxTtl         string       `json:"max_ttl"`
	Namespace      string       `json:"namespace"`
	Organization   string       `json:"organization"`
	Path           string       `json:"path"`
	Token          string       `json:"token"`
	Ttl            string       `json:"ttl"`
	Group          []GroupState `json:"group"`
	User           []UserState  `json:"user"`
}
