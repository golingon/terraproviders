// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_ldap_auth_backend_user

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_ldap_auth_backend_user.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultLdapAuthBackendUserState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vlabu *Resource) Type() string {
	return "vault_ldap_auth_backend_user"
}

// LocalName returns the local name for [Resource].
func (vlabu *Resource) LocalName() string {
	return vlabu.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vlabu *Resource) Configuration() interface{} {
	return vlabu.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vlabu *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vlabu)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vlabu *Resource) Dependencies() terra.Dependencies {
	return vlabu.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vlabu *Resource) LifecycleManagement() *terra.Lifecycle {
	return vlabu.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vlabu *Resource) Attributes() vaultLdapAuthBackendUserAttributes {
	return vaultLdapAuthBackendUserAttributes{ref: terra.ReferenceResource(vlabu)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vlabu *Resource) ImportState(state io.Reader) error {
	vlabu.state = &vaultLdapAuthBackendUserState{}
	if err := json.NewDecoder(state).Decode(vlabu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vlabu.Type(), vlabu.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vlabu *Resource) State() (*vaultLdapAuthBackendUserState, bool) {
	return vlabu.state, vlabu.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vlabu *Resource) StateMust() *vaultLdapAuthBackendUserState {
	if vlabu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vlabu.Type(), vlabu.LocalName()))
	}
	return vlabu.state
}

// Args contains the configurations for vault_ldap_auth_backend_user.
type Args struct {
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// Groups: set of string, optional
	Groups terra.SetValue[terra.StringValue] `hcl:"groups,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Policies: set of string, optional
	Policies terra.SetValue[terra.StringValue] `hcl:"policies,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type vaultLdapAuthBackendUserAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_ldap_auth_backend_user.
func (vlabu vaultLdapAuthBackendUserAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vlabu.ref.Append("backend"))
}

// Groups returns a reference to field groups of vault_ldap_auth_backend_user.
func (vlabu vaultLdapAuthBackendUserAttributes) Groups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vlabu.ref.Append("groups"))
}

// Id returns a reference to field id of vault_ldap_auth_backend_user.
func (vlabu vaultLdapAuthBackendUserAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vlabu.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_ldap_auth_backend_user.
func (vlabu vaultLdapAuthBackendUserAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vlabu.ref.Append("namespace"))
}

// Policies returns a reference to field policies of vault_ldap_auth_backend_user.
func (vlabu vaultLdapAuthBackendUserAttributes) Policies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vlabu.ref.Append("policies"))
}

// Username returns a reference to field username of vault_ldap_auth_backend_user.
func (vlabu vaultLdapAuthBackendUserAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(vlabu.ref.Append("username"))
}

type vaultLdapAuthBackendUserState struct {
	Backend   string   `json:"backend"`
	Groups    []string `json:"groups"`
	Id        string   `json:"id"`
	Namespace string   `json:"namespace"`
	Policies  []string `json:"policies"`
	Username  string   `json:"username"`
}
