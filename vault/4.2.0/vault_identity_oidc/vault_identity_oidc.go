// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_identity_oidc

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_identity_oidc.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultIdentityOidcState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vio *Resource) Type() string {
	return "vault_identity_oidc"
}

// LocalName returns the local name for [Resource].
func (vio *Resource) LocalName() string {
	return vio.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vio *Resource) Configuration() interface{} {
	return vio.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vio *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vio)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vio *Resource) Dependencies() terra.Dependencies {
	return vio.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vio *Resource) LifecycleManagement() *terra.Lifecycle {
	return vio.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vio *Resource) Attributes() vaultIdentityOidcAttributes {
	return vaultIdentityOidcAttributes{ref: terra.ReferenceResource(vio)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vio *Resource) ImportState(state io.Reader) error {
	vio.state = &vaultIdentityOidcState{}
	if err := json.NewDecoder(state).Decode(vio.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vio.Type(), vio.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vio *Resource) State() (*vaultIdentityOidcState, bool) {
	return vio.state, vio.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vio *Resource) StateMust() *vaultIdentityOidcState {
	if vio.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vio.Type(), vio.LocalName()))
	}
	return vio.state
}

// Args contains the configurations for vault_identity_oidc.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Issuer: string, optional
	Issuer terra.StringValue `hcl:"issuer,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}

type vaultIdentityOidcAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of vault_identity_oidc.
func (vio vaultIdentityOidcAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vio.ref.Append("id"))
}

// Issuer returns a reference to field issuer of vault_identity_oidc.
func (vio vaultIdentityOidcAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(vio.ref.Append("issuer"))
}

// Namespace returns a reference to field namespace of vault_identity_oidc.
func (vio vaultIdentityOidcAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vio.ref.Append("namespace"))
}

type vaultIdentityOidcState struct {
	Id        string `json:"id"`
	Issuer    string `json:"issuer"`
	Namespace string `json:"namespace"`
}
