// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_namespace

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_namespace.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultNamespaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vn *Resource) Type() string {
	return "vault_namespace"
}

// LocalName returns the local name for [Resource].
func (vn *Resource) LocalName() string {
	return vn.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vn *Resource) Configuration() interface{} {
	return vn.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vn *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vn)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vn *Resource) Dependencies() terra.Dependencies {
	return vn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vn *Resource) LifecycleManagement() *terra.Lifecycle {
	return vn.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vn *Resource) Attributes() vaultNamespaceAttributes {
	return vaultNamespaceAttributes{ref: terra.ReferenceResource(vn)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vn *Resource) ImportState(state io.Reader) error {
	vn.state = &vaultNamespaceState{}
	if err := json.NewDecoder(state).Decode(vn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vn.Type(), vn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vn *Resource) State() (*vaultNamespaceState, bool) {
	return vn.state, vn.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vn *Resource) StateMust() *vaultNamespaceState {
	if vn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vn.Type(), vn.LocalName()))
	}
	return vn.state
}

// Args contains the configurations for vault_namespace.
type Args struct {
	// CustomMetadata: map of string, optional
	CustomMetadata terra.MapValue[terra.StringValue] `hcl:"custom_metadata,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// PathFq: string, optional
	PathFq terra.StringValue `hcl:"path_fq,attr"`
}

type vaultNamespaceAttributes struct {
	ref terra.Reference
}

// CustomMetadata returns a reference to field custom_metadata of vault_namespace.
func (vn vaultNamespaceAttributes) CustomMetadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vn.ref.Append("custom_metadata"))
}

// Id returns a reference to field id of vault_namespace.
func (vn vaultNamespaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vn.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_namespace.
func (vn vaultNamespaceAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vn.ref.Append("namespace"))
}

// NamespaceId returns a reference to field namespace_id of vault_namespace.
func (vn vaultNamespaceAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceAsString(vn.ref.Append("namespace_id"))
}

// Path returns a reference to field path of vault_namespace.
func (vn vaultNamespaceAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(vn.ref.Append("path"))
}

// PathFq returns a reference to field path_fq of vault_namespace.
func (vn vaultNamespaceAttributes) PathFq() terra.StringValue {
	return terra.ReferenceAsString(vn.ref.Append("path_fq"))
}

type vaultNamespaceState struct {
	CustomMetadata map[string]string `json:"custom_metadata"`
	Id             string            `json:"id"`
	Namespace      string            `json:"namespace"`
	NamespaceId    string            `json:"namespace_id"`
	Path           string            `json:"path"`
	PathFq         string            `json:"path_fq"`
}
