// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_pki_secret_backend_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_pki_secret_backend_key.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultPkiSecretBackendKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vpsbk *Resource) Type() string {
	return "vault_pki_secret_backend_key"
}

// LocalName returns the local name for [Resource].
func (vpsbk *Resource) LocalName() string {
	return vpsbk.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vpsbk *Resource) Configuration() interface{} {
	return vpsbk.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vpsbk *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vpsbk)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vpsbk *Resource) Dependencies() terra.Dependencies {
	return vpsbk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vpsbk *Resource) LifecycleManagement() *terra.Lifecycle {
	return vpsbk.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vpsbk *Resource) Attributes() vaultPkiSecretBackendKeyAttributes {
	return vaultPkiSecretBackendKeyAttributes{ref: terra.ReferenceResource(vpsbk)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vpsbk *Resource) ImportState(state io.Reader) error {
	vpsbk.state = &vaultPkiSecretBackendKeyState{}
	if err := json.NewDecoder(state).Decode(vpsbk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vpsbk.Type(), vpsbk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vpsbk *Resource) State() (*vaultPkiSecretBackendKeyState, bool) {
	return vpsbk.state, vpsbk.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vpsbk *Resource) StateMust() *vaultPkiSecretBackendKeyState {
	if vpsbk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vpsbk.Type(), vpsbk.LocalName()))
	}
	return vpsbk.state
}

// Args contains the configurations for vault_pki_secret_backend_key.
type Args struct {
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyBits: number, optional
	KeyBits terra.NumberValue `hcl:"key_bits,attr"`
	// KeyName: string, optional
	KeyName terra.StringValue `hcl:"key_name,attr"`
	// KeyType: string, optional
	KeyType terra.StringValue `hcl:"key_type,attr"`
	// ManagedKeyId: string, optional
	ManagedKeyId terra.StringValue `hcl:"managed_key_id,attr"`
	// ManagedKeyName: string, optional
	ManagedKeyName terra.StringValue `hcl:"managed_key_name,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type vaultPkiSecretBackendKeyAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_pki_secret_backend_key.
func (vpsbk vaultPkiSecretBackendKeyAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vpsbk.ref.Append("backend"))
}

// Id returns a reference to field id of vault_pki_secret_backend_key.
func (vpsbk vaultPkiSecretBackendKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vpsbk.ref.Append("id"))
}

// KeyBits returns a reference to field key_bits of vault_pki_secret_backend_key.
func (vpsbk vaultPkiSecretBackendKeyAttributes) KeyBits() terra.NumberValue {
	return terra.ReferenceAsNumber(vpsbk.ref.Append("key_bits"))
}

// KeyId returns a reference to field key_id of vault_pki_secret_backend_key.
func (vpsbk vaultPkiSecretBackendKeyAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(vpsbk.ref.Append("key_id"))
}

// KeyName returns a reference to field key_name of vault_pki_secret_backend_key.
func (vpsbk vaultPkiSecretBackendKeyAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(vpsbk.ref.Append("key_name"))
}

// KeyType returns a reference to field key_type of vault_pki_secret_backend_key.
func (vpsbk vaultPkiSecretBackendKeyAttributes) KeyType() terra.StringValue {
	return terra.ReferenceAsString(vpsbk.ref.Append("key_type"))
}

// ManagedKeyId returns a reference to field managed_key_id of vault_pki_secret_backend_key.
func (vpsbk vaultPkiSecretBackendKeyAttributes) ManagedKeyId() terra.StringValue {
	return terra.ReferenceAsString(vpsbk.ref.Append("managed_key_id"))
}

// ManagedKeyName returns a reference to field managed_key_name of vault_pki_secret_backend_key.
func (vpsbk vaultPkiSecretBackendKeyAttributes) ManagedKeyName() terra.StringValue {
	return terra.ReferenceAsString(vpsbk.ref.Append("managed_key_name"))
}

// Namespace returns a reference to field namespace of vault_pki_secret_backend_key.
func (vpsbk vaultPkiSecretBackendKeyAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vpsbk.ref.Append("namespace"))
}

// Type returns a reference to field type of vault_pki_secret_backend_key.
func (vpsbk vaultPkiSecretBackendKeyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(vpsbk.ref.Append("type"))
}

type vaultPkiSecretBackendKeyState struct {
	Backend        string  `json:"backend"`
	Id             string  `json:"id"`
	KeyBits        float64 `json:"key_bits"`
	KeyId          string  `json:"key_id"`
	KeyName        string  `json:"key_name"`
	KeyType        string  `json:"key_type"`
	ManagedKeyId   string  `json:"managed_key_id"`
	ManagedKeyName string  `json:"managed_key_name"`
	Namespace      string  `json:"namespace"`
	Type           string  `json:"type"`
}
