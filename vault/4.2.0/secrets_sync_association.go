// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	secretssyncassociation "github.com/golingon/terraproviders/vault/4.2.0/secretssyncassociation"
	"io"
)

// NewSecretsSyncAssociation creates a new instance of [SecretsSyncAssociation].
func NewSecretsSyncAssociation(name string, args SecretsSyncAssociationArgs) *SecretsSyncAssociation {
	return &SecretsSyncAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecretsSyncAssociation)(nil)

// SecretsSyncAssociation represents the Terraform resource vault_secrets_sync_association.
type SecretsSyncAssociation struct {
	Name      string
	Args      SecretsSyncAssociationArgs
	state     *secretsSyncAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SecretsSyncAssociation].
func (ssa *SecretsSyncAssociation) Type() string {
	return "vault_secrets_sync_association"
}

// LocalName returns the local name for [SecretsSyncAssociation].
func (ssa *SecretsSyncAssociation) LocalName() string {
	return ssa.Name
}

// Configuration returns the configuration (args) for [SecretsSyncAssociation].
func (ssa *SecretsSyncAssociation) Configuration() interface{} {
	return ssa.Args
}

// DependOn is used for other resources to depend on [SecretsSyncAssociation].
func (ssa *SecretsSyncAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(ssa)
}

// Dependencies returns the list of resources [SecretsSyncAssociation] depends_on.
func (ssa *SecretsSyncAssociation) Dependencies() terra.Dependencies {
	return ssa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SecretsSyncAssociation].
func (ssa *SecretsSyncAssociation) LifecycleManagement() *terra.Lifecycle {
	return ssa.Lifecycle
}

// Attributes returns the attributes for [SecretsSyncAssociation].
func (ssa *SecretsSyncAssociation) Attributes() secretsSyncAssociationAttributes {
	return secretsSyncAssociationAttributes{ref: terra.ReferenceResource(ssa)}
}

// ImportState imports the given attribute values into [SecretsSyncAssociation]'s state.
func (ssa *SecretsSyncAssociation) ImportState(av io.Reader) error {
	ssa.state = &secretsSyncAssociationState{}
	if err := json.NewDecoder(av).Decode(ssa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssa.Type(), ssa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SecretsSyncAssociation] has state.
func (ssa *SecretsSyncAssociation) State() (*secretsSyncAssociationState, bool) {
	return ssa.state, ssa.state != nil
}

// StateMust returns the state for [SecretsSyncAssociation]. Panics if the state is nil.
func (ssa *SecretsSyncAssociation) StateMust() *secretsSyncAssociationState {
	if ssa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssa.Type(), ssa.LocalName()))
	}
	return ssa.state
}

// SecretsSyncAssociationArgs contains the configurations for vault_secrets_sync_association.
type SecretsSyncAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Mount: string, required
	Mount terra.StringValue `hcl:"mount,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// SecretName: string, required
	SecretName terra.StringValue `hcl:"secret_name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Metadata: min=0
	Metadata []secretssyncassociation.Metadata `hcl:"metadata,block" validate:"min=0"`
}
type secretsSyncAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of vault_secrets_sync_association.
func (ssa secretsSyncAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ssa.ref.Append("id"))
}

// Mount returns a reference to field mount of vault_secrets_sync_association.
func (ssa secretsSyncAssociationAttributes) Mount() terra.StringValue {
	return terra.ReferenceAsString(ssa.ref.Append("mount"))
}

// Name returns a reference to field name of vault_secrets_sync_association.
func (ssa secretsSyncAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ssa.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_secrets_sync_association.
func (ssa secretsSyncAssociationAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(ssa.ref.Append("namespace"))
}

// SecretName returns a reference to field secret_name of vault_secrets_sync_association.
func (ssa secretsSyncAssociationAttributes) SecretName() terra.StringValue {
	return terra.ReferenceAsString(ssa.ref.Append("secret_name"))
}

// Type returns a reference to field type of vault_secrets_sync_association.
func (ssa secretsSyncAssociationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ssa.ref.Append("type"))
}

func (ssa secretsSyncAssociationAttributes) Metadata() terra.ListValue[secretssyncassociation.MetadataAttributes] {
	return terra.ReferenceAsList[secretssyncassociation.MetadataAttributes](ssa.ref.Append("metadata"))
}

type secretsSyncAssociationState struct {
	Id         string                                 `json:"id"`
	Mount      string                                 `json:"mount"`
	Name       string                                 `json:"name"`
	Namespace  string                                 `json:"namespace"`
	SecretName string                                 `json:"secret_name"`
	Type       string                                 `json:"type"`
	Metadata   []secretssyncassociation.MetadataState `json:"metadata"`
}
