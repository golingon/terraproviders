// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_identity_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_identity_group.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultIdentityGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vig *Resource) Type() string {
	return "vault_identity_group"
}

// LocalName returns the local name for [Resource].
func (vig *Resource) LocalName() string {
	return vig.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vig *Resource) Configuration() interface{} {
	return vig.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vig *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vig)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vig *Resource) Dependencies() terra.Dependencies {
	return vig.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vig *Resource) LifecycleManagement() *terra.Lifecycle {
	return vig.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vig *Resource) Attributes() vaultIdentityGroupAttributes {
	return vaultIdentityGroupAttributes{ref: terra.ReferenceResource(vig)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vig *Resource) ImportState(state io.Reader) error {
	vig.state = &vaultIdentityGroupState{}
	if err := json.NewDecoder(state).Decode(vig.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vig.Type(), vig.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vig *Resource) State() (*vaultIdentityGroupState, bool) {
	return vig.state, vig.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vig *Resource) StateMust() *vaultIdentityGroupState {
	if vig.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vig.Type(), vig.LocalName()))
	}
	return vig.state
}

// Args contains the configurations for vault_identity_group.
type Args struct {
	// ExternalMemberEntityIds: bool, optional
	ExternalMemberEntityIds terra.BoolValue `hcl:"external_member_entity_ids,attr"`
	// ExternalMemberGroupIds: bool, optional
	ExternalMemberGroupIds terra.BoolValue `hcl:"external_member_group_ids,attr"`
	// ExternalPolicies: bool, optional
	ExternalPolicies terra.BoolValue `hcl:"external_policies,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MemberEntityIds: set of string, optional
	MemberEntityIds terra.SetValue[terra.StringValue] `hcl:"member_entity_ids,attr"`
	// MemberGroupIds: set of string, optional
	MemberGroupIds terra.SetValue[terra.StringValue] `hcl:"member_group_ids,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Policies: set of string, optional
	Policies terra.SetValue[terra.StringValue] `hcl:"policies,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type vaultIdentityGroupAttributes struct {
	ref terra.Reference
}

// ExternalMemberEntityIds returns a reference to field external_member_entity_ids of vault_identity_group.
func (vig vaultIdentityGroupAttributes) ExternalMemberEntityIds() terra.BoolValue {
	return terra.ReferenceAsBool(vig.ref.Append("external_member_entity_ids"))
}

// ExternalMemberGroupIds returns a reference to field external_member_group_ids of vault_identity_group.
func (vig vaultIdentityGroupAttributes) ExternalMemberGroupIds() terra.BoolValue {
	return terra.ReferenceAsBool(vig.ref.Append("external_member_group_ids"))
}

// ExternalPolicies returns a reference to field external_policies of vault_identity_group.
func (vig vaultIdentityGroupAttributes) ExternalPolicies() terra.BoolValue {
	return terra.ReferenceAsBool(vig.ref.Append("external_policies"))
}

// Id returns a reference to field id of vault_identity_group.
func (vig vaultIdentityGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vig.ref.Append("id"))
}

// MemberEntityIds returns a reference to field member_entity_ids of vault_identity_group.
func (vig vaultIdentityGroupAttributes) MemberEntityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vig.ref.Append("member_entity_ids"))
}

// MemberGroupIds returns a reference to field member_group_ids of vault_identity_group.
func (vig vaultIdentityGroupAttributes) MemberGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vig.ref.Append("member_group_ids"))
}

// Metadata returns a reference to field metadata of vault_identity_group.
func (vig vaultIdentityGroupAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vig.ref.Append("metadata"))
}

// Name returns a reference to field name of vault_identity_group.
func (vig vaultIdentityGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vig.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_identity_group.
func (vig vaultIdentityGroupAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vig.ref.Append("namespace"))
}

// Policies returns a reference to field policies of vault_identity_group.
func (vig vaultIdentityGroupAttributes) Policies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vig.ref.Append("policies"))
}

// Type returns a reference to field type of vault_identity_group.
func (vig vaultIdentityGroupAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(vig.ref.Append("type"))
}

type vaultIdentityGroupState struct {
	ExternalMemberEntityIds bool              `json:"external_member_entity_ids"`
	ExternalMemberGroupIds  bool              `json:"external_member_group_ids"`
	ExternalPolicies        bool              `json:"external_policies"`
	Id                      string            `json:"id"`
	MemberEntityIds         []string          `json:"member_entity_ids"`
	MemberGroupIds          []string          `json:"member_group_ids"`
	Metadata                map[string]string `json:"metadata"`
	Name                    string            `json:"name"`
	Namespace               string            `json:"namespace"`
	Policies                []string          `json:"policies"`
	Type                    string            `json:"type"`
}
