// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_gcp_secret_static_account

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_gcp_secret_static_account.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultGcpSecretStaticAccountState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vgssa *Resource) Type() string {
	return "vault_gcp_secret_static_account"
}

// LocalName returns the local name for [Resource].
func (vgssa *Resource) LocalName() string {
	return vgssa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vgssa *Resource) Configuration() interface{} {
	return vgssa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vgssa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vgssa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vgssa *Resource) Dependencies() terra.Dependencies {
	return vgssa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vgssa *Resource) LifecycleManagement() *terra.Lifecycle {
	return vgssa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vgssa *Resource) Attributes() vaultGcpSecretStaticAccountAttributes {
	return vaultGcpSecretStaticAccountAttributes{ref: terra.ReferenceResource(vgssa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vgssa *Resource) ImportState(state io.Reader) error {
	vgssa.state = &vaultGcpSecretStaticAccountState{}
	if err := json.NewDecoder(state).Decode(vgssa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vgssa.Type(), vgssa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vgssa *Resource) State() (*vaultGcpSecretStaticAccountState, bool) {
	return vgssa.state, vgssa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vgssa *Resource) StateMust() *vaultGcpSecretStaticAccountState {
	if vgssa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vgssa.Type(), vgssa.LocalName()))
	}
	return vgssa.state
}

// Args contains the configurations for vault_gcp_secret_static_account.
type Args struct {
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// SecretType: string, optional
	SecretType terra.StringValue `hcl:"secret_type,attr"`
	// ServiceAccountEmail: string, required
	ServiceAccountEmail terra.StringValue `hcl:"service_account_email,attr" validate:"required"`
	// StaticAccount: string, required
	StaticAccount terra.StringValue `hcl:"static_account,attr" validate:"required"`
	// TokenScopes: set of string, optional
	TokenScopes terra.SetValue[terra.StringValue] `hcl:"token_scopes,attr"`
	// Binding: min=0
	Binding []Binding `hcl:"binding,block" validate:"min=0"`
}

type vaultGcpSecretStaticAccountAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_gcp_secret_static_account.
func (vgssa vaultGcpSecretStaticAccountAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vgssa.ref.Append("backend"))
}

// Id returns a reference to field id of vault_gcp_secret_static_account.
func (vgssa vaultGcpSecretStaticAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vgssa.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_gcp_secret_static_account.
func (vgssa vaultGcpSecretStaticAccountAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vgssa.ref.Append("namespace"))
}

// SecretType returns a reference to field secret_type of vault_gcp_secret_static_account.
func (vgssa vaultGcpSecretStaticAccountAttributes) SecretType() terra.StringValue {
	return terra.ReferenceAsString(vgssa.ref.Append("secret_type"))
}

// ServiceAccountEmail returns a reference to field service_account_email of vault_gcp_secret_static_account.
func (vgssa vaultGcpSecretStaticAccountAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(vgssa.ref.Append("service_account_email"))
}

// ServiceAccountProject returns a reference to field service_account_project of vault_gcp_secret_static_account.
func (vgssa vaultGcpSecretStaticAccountAttributes) ServiceAccountProject() terra.StringValue {
	return terra.ReferenceAsString(vgssa.ref.Append("service_account_project"))
}

// StaticAccount returns a reference to field static_account of vault_gcp_secret_static_account.
func (vgssa vaultGcpSecretStaticAccountAttributes) StaticAccount() terra.StringValue {
	return terra.ReferenceAsString(vgssa.ref.Append("static_account"))
}

// TokenScopes returns a reference to field token_scopes of vault_gcp_secret_static_account.
func (vgssa vaultGcpSecretStaticAccountAttributes) TokenScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vgssa.ref.Append("token_scopes"))
}

func (vgssa vaultGcpSecretStaticAccountAttributes) Binding() terra.SetValue[BindingAttributes] {
	return terra.ReferenceAsSet[BindingAttributes](vgssa.ref.Append("binding"))
}

type vaultGcpSecretStaticAccountState struct {
	Backend               string         `json:"backend"`
	Id                    string         `json:"id"`
	Namespace             string         `json:"namespace"`
	SecretType            string         `json:"secret_type"`
	ServiceAccountEmail   string         `json:"service_account_email"`
	ServiceAccountProject string         `json:"service_account_project"`
	StaticAccount         string         `json:"static_account"`
	TokenScopes           []string       `json:"token_scopes"`
	Binding               []BindingState `json:"binding"`
}
