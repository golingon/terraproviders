// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_azure_auth_backend_role

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_azure_auth_backend_role.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultAzureAuthBackendRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vaabr *Resource) Type() string {
	return "vault_azure_auth_backend_role"
}

// LocalName returns the local name for [Resource].
func (vaabr *Resource) LocalName() string {
	return vaabr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vaabr *Resource) Configuration() interface{} {
	return vaabr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vaabr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vaabr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vaabr *Resource) Dependencies() terra.Dependencies {
	return vaabr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vaabr *Resource) LifecycleManagement() *terra.Lifecycle {
	return vaabr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vaabr *Resource) Attributes() vaultAzureAuthBackendRoleAttributes {
	return vaultAzureAuthBackendRoleAttributes{ref: terra.ReferenceResource(vaabr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vaabr *Resource) ImportState(state io.Reader) error {
	vaabr.state = &vaultAzureAuthBackendRoleState{}
	if err := json.NewDecoder(state).Decode(vaabr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vaabr.Type(), vaabr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vaabr *Resource) State() (*vaultAzureAuthBackendRoleState, bool) {
	return vaabr.state, vaabr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vaabr *Resource) StateMust() *vaultAzureAuthBackendRoleState {
	if vaabr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vaabr.Type(), vaabr.LocalName()))
	}
	return vaabr.state
}

// Args contains the configurations for vault_azure_auth_backend_role.
type Args struct {
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// BoundGroupIds: list of string, optional
	BoundGroupIds terra.ListValue[terra.StringValue] `hcl:"bound_group_ids,attr"`
	// BoundLocations: list of string, optional
	BoundLocations terra.ListValue[terra.StringValue] `hcl:"bound_locations,attr"`
	// BoundResourceGroups: list of string, optional
	BoundResourceGroups terra.ListValue[terra.StringValue] `hcl:"bound_resource_groups,attr"`
	// BoundScaleSets: list of string, optional
	BoundScaleSets terra.ListValue[terra.StringValue] `hcl:"bound_scale_sets,attr"`
	// BoundServicePrincipalIds: list of string, optional
	BoundServicePrincipalIds terra.ListValue[terra.StringValue] `hcl:"bound_service_principal_ids,attr"`
	// BoundSubscriptionIds: list of string, optional
	BoundSubscriptionIds terra.ListValue[terra.StringValue] `hcl:"bound_subscription_ids,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// TokenBoundCidrs: set of string, optional
	TokenBoundCidrs terra.SetValue[terra.StringValue] `hcl:"token_bound_cidrs,attr"`
	// TokenExplicitMaxTtl: number, optional
	TokenExplicitMaxTtl terra.NumberValue `hcl:"token_explicit_max_ttl,attr"`
	// TokenMaxTtl: number, optional
	TokenMaxTtl terra.NumberValue `hcl:"token_max_ttl,attr"`
	// TokenNoDefaultPolicy: bool, optional
	TokenNoDefaultPolicy terra.BoolValue `hcl:"token_no_default_policy,attr"`
	// TokenNumUses: number, optional
	TokenNumUses terra.NumberValue `hcl:"token_num_uses,attr"`
	// TokenPeriod: number, optional
	TokenPeriod terra.NumberValue `hcl:"token_period,attr"`
	// TokenPolicies: set of string, optional
	TokenPolicies terra.SetValue[terra.StringValue] `hcl:"token_policies,attr"`
	// TokenTtl: number, optional
	TokenTtl terra.NumberValue `hcl:"token_ttl,attr"`
	// TokenType: string, optional
	TokenType terra.StringValue `hcl:"token_type,attr"`
}

type vaultAzureAuthBackendRoleAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("backend"))
}

// BoundGroupIds returns a reference to field bound_group_ids of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) BoundGroupIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vaabr.ref.Append("bound_group_ids"))
}

// BoundLocations returns a reference to field bound_locations of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) BoundLocations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vaabr.ref.Append("bound_locations"))
}

// BoundResourceGroups returns a reference to field bound_resource_groups of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) BoundResourceGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vaabr.ref.Append("bound_resource_groups"))
}

// BoundScaleSets returns a reference to field bound_scale_sets of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) BoundScaleSets() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vaabr.ref.Append("bound_scale_sets"))
}

// BoundServicePrincipalIds returns a reference to field bound_service_principal_ids of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) BoundServicePrincipalIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vaabr.ref.Append("bound_service_principal_ids"))
}

// BoundSubscriptionIds returns a reference to field bound_subscription_ids of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) BoundSubscriptionIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vaabr.ref.Append("bound_subscription_ids"))
}

// Id returns a reference to field id of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("namespace"))
}

// Role returns a reference to field role of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("role"))
}

// TokenBoundCidrs returns a reference to field token_bound_cidrs of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) TokenBoundCidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabr.ref.Append("token_bound_cidrs"))
}

// TokenExplicitMaxTtl returns a reference to field token_explicit_max_ttl of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) TokenExplicitMaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(vaabr.ref.Append("token_explicit_max_ttl"))
}

// TokenMaxTtl returns a reference to field token_max_ttl of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) TokenMaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(vaabr.ref.Append("token_max_ttl"))
}

// TokenNoDefaultPolicy returns a reference to field token_no_default_policy of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) TokenNoDefaultPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(vaabr.ref.Append("token_no_default_policy"))
}

// TokenNumUses returns a reference to field token_num_uses of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) TokenNumUses() terra.NumberValue {
	return terra.ReferenceAsNumber(vaabr.ref.Append("token_num_uses"))
}

// TokenPeriod returns a reference to field token_period of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) TokenPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(vaabr.ref.Append("token_period"))
}

// TokenPolicies returns a reference to field token_policies of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) TokenPolicies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vaabr.ref.Append("token_policies"))
}

// TokenTtl returns a reference to field token_ttl of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) TokenTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(vaabr.ref.Append("token_ttl"))
}

// TokenType returns a reference to field token_type of vault_azure_auth_backend_role.
func (vaabr vaultAzureAuthBackendRoleAttributes) TokenType() terra.StringValue {
	return terra.ReferenceAsString(vaabr.ref.Append("token_type"))
}

type vaultAzureAuthBackendRoleState struct {
	Backend                  string   `json:"backend"`
	BoundGroupIds            []string `json:"bound_group_ids"`
	BoundLocations           []string `json:"bound_locations"`
	BoundResourceGroups      []string `json:"bound_resource_groups"`
	BoundScaleSets           []string `json:"bound_scale_sets"`
	BoundServicePrincipalIds []string `json:"bound_service_principal_ids"`
	BoundSubscriptionIds     []string `json:"bound_subscription_ids"`
	Id                       string   `json:"id"`
	Namespace                string   `json:"namespace"`
	Role                     string   `json:"role"`
	TokenBoundCidrs          []string `json:"token_bound_cidrs"`
	TokenExplicitMaxTtl      float64  `json:"token_explicit_max_ttl"`
	TokenMaxTtl              float64  `json:"token_max_ttl"`
	TokenNoDefaultPolicy     bool     `json:"token_no_default_policy"`
	TokenNumUses             float64  `json:"token_num_uses"`
	TokenPeriod              float64  `json:"token_period"`
	TokenPolicies            []string `json:"token_policies"`
	TokenTtl                 float64  `json:"token_ttl"`
	TokenType                string   `json:"token_type"`
}
