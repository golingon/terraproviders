// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_kv_secret_backend_v2

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_kv_secret_backend_v2.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultKvSecretBackendV2State
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vksbv *Resource) Type() string {
	return "vault_kv_secret_backend_v2"
}

// LocalName returns the local name for [Resource].
func (vksbv *Resource) LocalName() string {
	return vksbv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vksbv *Resource) Configuration() interface{} {
	return vksbv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vksbv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vksbv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vksbv *Resource) Dependencies() terra.Dependencies {
	return vksbv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vksbv *Resource) LifecycleManagement() *terra.Lifecycle {
	return vksbv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vksbv *Resource) Attributes() vaultKvSecretBackendV2Attributes {
	return vaultKvSecretBackendV2Attributes{ref: terra.ReferenceResource(vksbv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vksbv *Resource) ImportState(state io.Reader) error {
	vksbv.state = &vaultKvSecretBackendV2State{}
	if err := json.NewDecoder(state).Decode(vksbv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vksbv.Type(), vksbv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vksbv *Resource) State() (*vaultKvSecretBackendV2State, bool) {
	return vksbv.state, vksbv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vksbv *Resource) StateMust() *vaultKvSecretBackendV2State {
	if vksbv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vksbv.Type(), vksbv.LocalName()))
	}
	return vksbv.state
}

// Args contains the configurations for vault_kv_secret_backend_v2.
type Args struct {
	// CasRequired: bool, optional
	CasRequired terra.BoolValue `hcl:"cas_required,attr"`
	// DeleteVersionAfter: number, optional
	DeleteVersionAfter terra.NumberValue `hcl:"delete_version_after,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxVersions: number, optional
	MaxVersions terra.NumberValue `hcl:"max_versions,attr"`
	// Mount: string, required
	Mount terra.StringValue `hcl:"mount,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}

type vaultKvSecretBackendV2Attributes struct {
	ref terra.Reference
}

// CasRequired returns a reference to field cas_required of vault_kv_secret_backend_v2.
func (vksbv vaultKvSecretBackendV2Attributes) CasRequired() terra.BoolValue {
	return terra.ReferenceAsBool(vksbv.ref.Append("cas_required"))
}

// DeleteVersionAfter returns a reference to field delete_version_after of vault_kv_secret_backend_v2.
func (vksbv vaultKvSecretBackendV2Attributes) DeleteVersionAfter() terra.NumberValue {
	return terra.ReferenceAsNumber(vksbv.ref.Append("delete_version_after"))
}

// Id returns a reference to field id of vault_kv_secret_backend_v2.
func (vksbv vaultKvSecretBackendV2Attributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vksbv.ref.Append("id"))
}

// MaxVersions returns a reference to field max_versions of vault_kv_secret_backend_v2.
func (vksbv vaultKvSecretBackendV2Attributes) MaxVersions() terra.NumberValue {
	return terra.ReferenceAsNumber(vksbv.ref.Append("max_versions"))
}

// Mount returns a reference to field mount of vault_kv_secret_backend_v2.
func (vksbv vaultKvSecretBackendV2Attributes) Mount() terra.StringValue {
	return terra.ReferenceAsString(vksbv.ref.Append("mount"))
}

// Namespace returns a reference to field namespace of vault_kv_secret_backend_v2.
func (vksbv vaultKvSecretBackendV2Attributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vksbv.ref.Append("namespace"))
}

type vaultKvSecretBackendV2State struct {
	CasRequired        bool    `json:"cas_required"`
	DeleteVersionAfter float64 `json:"delete_version_after"`
	Id                 string  `json:"id"`
	MaxVersions        float64 `json:"max_versions"`
	Mount              string  `json:"mount"`
	Namespace          string  `json:"namespace"`
}
