// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_consul_secret_backend

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_consul_secret_backend.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultConsulSecretBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vcsb *Resource) Type() string {
	return "vault_consul_secret_backend"
}

// LocalName returns the local name for [Resource].
func (vcsb *Resource) LocalName() string {
	return vcsb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vcsb *Resource) Configuration() interface{} {
	return vcsb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vcsb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vcsb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vcsb *Resource) Dependencies() terra.Dependencies {
	return vcsb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vcsb *Resource) LifecycleManagement() *terra.Lifecycle {
	return vcsb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vcsb *Resource) Attributes() vaultConsulSecretBackendAttributes {
	return vaultConsulSecretBackendAttributes{ref: terra.ReferenceResource(vcsb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vcsb *Resource) ImportState(state io.Reader) error {
	vcsb.state = &vaultConsulSecretBackendState{}
	if err := json.NewDecoder(state).Decode(vcsb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vcsb.Type(), vcsb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vcsb *Resource) State() (*vaultConsulSecretBackendState, bool) {
	return vcsb.state, vcsb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vcsb *Resource) StateMust() *vaultConsulSecretBackendState {
	if vcsb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vcsb.Type(), vcsb.LocalName()))
	}
	return vcsb.state
}

// Args contains the configurations for vault_consul_secret_backend.
type Args struct {
	// Address: string, required
	Address terra.StringValue `hcl:"address,attr" validate:"required"`
	// Bootstrap: bool, optional
	Bootstrap terra.BoolValue `hcl:"bootstrap,attr"`
	// CaCert: string, optional
	CaCert terra.StringValue `hcl:"ca_cert,attr"`
	// ClientCert: string, optional
	ClientCert terra.StringValue `hcl:"client_cert,attr"`
	// ClientKey: string, optional
	ClientKey terra.StringValue `hcl:"client_key,attr"`
	// DefaultLeaseTtlSeconds: number, optional
	DefaultLeaseTtlSeconds terra.NumberValue `hcl:"default_lease_ttl_seconds,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableRemount: bool, optional
	DisableRemount terra.BoolValue `hcl:"disable_remount,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Local: bool, optional
	Local terra.BoolValue `hcl:"local,attr"`
	// MaxLeaseTtlSeconds: number, optional
	MaxLeaseTtlSeconds terra.NumberValue `hcl:"max_lease_ttl_seconds,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Scheme: string, optional
	Scheme terra.StringValue `hcl:"scheme,attr"`
	// Token: string, optional
	Token terra.StringValue `hcl:"token,attr"`
}

type vaultConsulSecretBackendAttributes struct {
	ref terra.Reference
}

// Address returns a reference to field address of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(vcsb.ref.Append("address"))
}

// Bootstrap returns a reference to field bootstrap of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) Bootstrap() terra.BoolValue {
	return terra.ReferenceAsBool(vcsb.ref.Append("bootstrap"))
}

// CaCert returns a reference to field ca_cert of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) CaCert() terra.StringValue {
	return terra.ReferenceAsString(vcsb.ref.Append("ca_cert"))
}

// ClientCert returns a reference to field client_cert of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) ClientCert() terra.StringValue {
	return terra.ReferenceAsString(vcsb.ref.Append("client_cert"))
}

// ClientKey returns a reference to field client_key of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceAsString(vcsb.ref.Append("client_key"))
}

// DefaultLeaseTtlSeconds returns a reference to field default_lease_ttl_seconds of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) DefaultLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(vcsb.ref.Append("default_lease_ttl_seconds"))
}

// Description returns a reference to field description of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(vcsb.ref.Append("description"))
}

// DisableRemount returns a reference to field disable_remount of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) DisableRemount() terra.BoolValue {
	return terra.ReferenceAsBool(vcsb.ref.Append("disable_remount"))
}

// Id returns a reference to field id of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vcsb.ref.Append("id"))
}

// Local returns a reference to field local of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) Local() terra.BoolValue {
	return terra.ReferenceAsBool(vcsb.ref.Append("local"))
}

// MaxLeaseTtlSeconds returns a reference to field max_lease_ttl_seconds of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) MaxLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(vcsb.ref.Append("max_lease_ttl_seconds"))
}

// Namespace returns a reference to field namespace of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vcsb.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(vcsb.ref.Append("path"))
}

// Scheme returns a reference to field scheme of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) Scheme() terra.StringValue {
	return terra.ReferenceAsString(vcsb.ref.Append("scheme"))
}

// Token returns a reference to field token of vault_consul_secret_backend.
func (vcsb vaultConsulSecretBackendAttributes) Token() terra.StringValue {
	return terra.ReferenceAsString(vcsb.ref.Append("token"))
}

type vaultConsulSecretBackendState struct {
	Address                string  `json:"address"`
	Bootstrap              bool    `json:"bootstrap"`
	CaCert                 string  `json:"ca_cert"`
	ClientCert             string  `json:"client_cert"`
	ClientKey              string  `json:"client_key"`
	DefaultLeaseTtlSeconds float64 `json:"default_lease_ttl_seconds"`
	Description            string  `json:"description"`
	DisableRemount         bool    `json:"disable_remount"`
	Id                     string  `json:"id"`
	Local                  bool    `json:"local"`
	MaxLeaseTtlSeconds     float64 `json:"max_lease_ttl_seconds"`
	Namespace              string  `json:"namespace"`
	Path                   string  `json:"path"`
	Scheme                 string  `json:"scheme"`
	Token                  string  `json:"token"`
}
