// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_saml_auth_backend

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_saml_auth_backend.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultSamlAuthBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vsab *Resource) Type() string {
	return "vault_saml_auth_backend"
}

// LocalName returns the local name for [Resource].
func (vsab *Resource) LocalName() string {
	return vsab.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vsab *Resource) Configuration() interface{} {
	return vsab.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vsab *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vsab)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vsab *Resource) Dependencies() terra.Dependencies {
	return vsab.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vsab *Resource) LifecycleManagement() *terra.Lifecycle {
	return vsab.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vsab *Resource) Attributes() vaultSamlAuthBackendAttributes {
	return vaultSamlAuthBackendAttributes{ref: terra.ReferenceResource(vsab)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vsab *Resource) ImportState(state io.Reader) error {
	vsab.state = &vaultSamlAuthBackendState{}
	if err := json.NewDecoder(state).Decode(vsab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vsab.Type(), vsab.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vsab *Resource) State() (*vaultSamlAuthBackendState, bool) {
	return vsab.state, vsab.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vsab *Resource) StateMust() *vaultSamlAuthBackendState {
	if vsab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vsab.Type(), vsab.LocalName()))
	}
	return vsab.state
}

// Args contains the configurations for vault_saml_auth_backend.
type Args struct {
	// AcsUrls: list of string, required
	AcsUrls terra.ListValue[terra.StringValue] `hcl:"acs_urls,attr" validate:"required"`
	// DefaultRole: string, optional
	DefaultRole terra.StringValue `hcl:"default_role,attr"`
	// DisableRemount: bool, optional
	DisableRemount terra.BoolValue `hcl:"disable_remount,attr"`
	// EntityId: string, required
	EntityId terra.StringValue `hcl:"entity_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdpCert: string, optional
	IdpCert terra.StringValue `hcl:"idp_cert,attr"`
	// IdpEntityId: string, optional
	IdpEntityId terra.StringValue `hcl:"idp_entity_id,attr"`
	// IdpMetadataUrl: string, optional
	IdpMetadataUrl terra.StringValue `hcl:"idp_metadata_url,attr"`
	// IdpSsoUrl: string, optional
	IdpSsoUrl terra.StringValue `hcl:"idp_sso_url,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// VerboseLogging: bool, optional
	VerboseLogging terra.BoolValue `hcl:"verbose_logging,attr"`
}

type vaultSamlAuthBackendAttributes struct {
	ref terra.Reference
}

// AcsUrls returns a reference to field acs_urls of vault_saml_auth_backend.
func (vsab vaultSamlAuthBackendAttributes) AcsUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vsab.ref.Append("acs_urls"))
}

// DefaultRole returns a reference to field default_role of vault_saml_auth_backend.
func (vsab vaultSamlAuthBackendAttributes) DefaultRole() terra.StringValue {
	return terra.ReferenceAsString(vsab.ref.Append("default_role"))
}

// DisableRemount returns a reference to field disable_remount of vault_saml_auth_backend.
func (vsab vaultSamlAuthBackendAttributes) DisableRemount() terra.BoolValue {
	return terra.ReferenceAsBool(vsab.ref.Append("disable_remount"))
}

// EntityId returns a reference to field entity_id of vault_saml_auth_backend.
func (vsab vaultSamlAuthBackendAttributes) EntityId() terra.StringValue {
	return terra.ReferenceAsString(vsab.ref.Append("entity_id"))
}

// Id returns a reference to field id of vault_saml_auth_backend.
func (vsab vaultSamlAuthBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vsab.ref.Append("id"))
}

// IdpCert returns a reference to field idp_cert of vault_saml_auth_backend.
func (vsab vaultSamlAuthBackendAttributes) IdpCert() terra.StringValue {
	return terra.ReferenceAsString(vsab.ref.Append("idp_cert"))
}

// IdpEntityId returns a reference to field idp_entity_id of vault_saml_auth_backend.
func (vsab vaultSamlAuthBackendAttributes) IdpEntityId() terra.StringValue {
	return terra.ReferenceAsString(vsab.ref.Append("idp_entity_id"))
}

// IdpMetadataUrl returns a reference to field idp_metadata_url of vault_saml_auth_backend.
func (vsab vaultSamlAuthBackendAttributes) IdpMetadataUrl() terra.StringValue {
	return terra.ReferenceAsString(vsab.ref.Append("idp_metadata_url"))
}

// IdpSsoUrl returns a reference to field idp_sso_url of vault_saml_auth_backend.
func (vsab vaultSamlAuthBackendAttributes) IdpSsoUrl() terra.StringValue {
	return terra.ReferenceAsString(vsab.ref.Append("idp_sso_url"))
}

// Namespace returns a reference to field namespace of vault_saml_auth_backend.
func (vsab vaultSamlAuthBackendAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vsab.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_saml_auth_backend.
func (vsab vaultSamlAuthBackendAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(vsab.ref.Append("path"))
}

// VerboseLogging returns a reference to field verbose_logging of vault_saml_auth_backend.
func (vsab vaultSamlAuthBackendAttributes) VerboseLogging() terra.BoolValue {
	return terra.ReferenceAsBool(vsab.ref.Append("verbose_logging"))
}

type vaultSamlAuthBackendState struct {
	AcsUrls        []string `json:"acs_urls"`
	DefaultRole    string   `json:"default_role"`
	DisableRemount bool     `json:"disable_remount"`
	EntityId       string   `json:"entity_id"`
	Id             string   `json:"id"`
	IdpCert        string   `json:"idp_cert"`
	IdpEntityId    string   `json:"idp_entity_id"`
	IdpMetadataUrl string   `json:"idp_metadata_url"`
	IdpSsoUrl      string   `json:"idp_sso_url"`
	Namespace      string   `json:"namespace"`
	Path           string   `json:"path"`
	VerboseLogging bool     `json:"verbose_logging"`
}
