// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_identity_oidc_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_identity_oidc_key.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultIdentityOidcKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (viok *Resource) Type() string {
	return "vault_identity_oidc_key"
}

// LocalName returns the local name for [Resource].
func (viok *Resource) LocalName() string {
	return viok.Name
}

// Configuration returns the configuration (args) for [Resource].
func (viok *Resource) Configuration() interface{} {
	return viok.Args
}

// DependOn is used for other resources to depend on [Resource].
func (viok *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(viok)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (viok *Resource) Dependencies() terra.Dependencies {
	return viok.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (viok *Resource) LifecycleManagement() *terra.Lifecycle {
	return viok.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (viok *Resource) Attributes() vaultIdentityOidcKeyAttributes {
	return vaultIdentityOidcKeyAttributes{ref: terra.ReferenceResource(viok)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (viok *Resource) ImportState(state io.Reader) error {
	viok.state = &vaultIdentityOidcKeyState{}
	if err := json.NewDecoder(state).Decode(viok.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", viok.Type(), viok.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (viok *Resource) State() (*vaultIdentityOidcKeyState, bool) {
	return viok.state, viok.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (viok *Resource) StateMust() *vaultIdentityOidcKeyState {
	if viok.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", viok.Type(), viok.LocalName()))
	}
	return viok.state
}

// Args contains the configurations for vault_identity_oidc_key.
type Args struct {
	// Algorithm: string, optional
	Algorithm terra.StringValue `hcl:"algorithm,attr"`
	// AllowedClientIds: set of string, optional
	AllowedClientIds terra.SetValue[terra.StringValue] `hcl:"allowed_client_ids,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// RotationPeriod: number, optional
	RotationPeriod terra.NumberValue `hcl:"rotation_period,attr"`
	// VerificationTtl: number, optional
	VerificationTtl terra.NumberValue `hcl:"verification_ttl,attr"`
}

type vaultIdentityOidcKeyAttributes struct {
	ref terra.Reference
}

// Algorithm returns a reference to field algorithm of vault_identity_oidc_key.
func (viok vaultIdentityOidcKeyAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceAsString(viok.ref.Append("algorithm"))
}

// AllowedClientIds returns a reference to field allowed_client_ids of vault_identity_oidc_key.
func (viok vaultIdentityOidcKeyAttributes) AllowedClientIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](viok.ref.Append("allowed_client_ids"))
}

// Id returns a reference to field id of vault_identity_oidc_key.
func (viok vaultIdentityOidcKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(viok.ref.Append("id"))
}

// Name returns a reference to field name of vault_identity_oidc_key.
func (viok vaultIdentityOidcKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(viok.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_identity_oidc_key.
func (viok vaultIdentityOidcKeyAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(viok.ref.Append("namespace"))
}

// RotationPeriod returns a reference to field rotation_period of vault_identity_oidc_key.
func (viok vaultIdentityOidcKeyAttributes) RotationPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(viok.ref.Append("rotation_period"))
}

// VerificationTtl returns a reference to field verification_ttl of vault_identity_oidc_key.
func (viok vaultIdentityOidcKeyAttributes) VerificationTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(viok.ref.Append("verification_ttl"))
}

type vaultIdentityOidcKeyState struct {
	Algorithm        string   `json:"algorithm"`
	AllowedClientIds []string `json:"allowed_client_ids"`
	Id               string   `json:"id"`
	Name             string   `json:"name"`
	Namespace        string   `json:"namespace"`
	RotationPeriod   float64  `json:"rotation_period"`
	VerificationTtl  float64  `json:"verification_ttl"`
}
