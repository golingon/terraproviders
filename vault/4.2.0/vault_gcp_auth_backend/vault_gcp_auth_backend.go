// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_gcp_auth_backend

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_gcp_auth_backend.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultGcpAuthBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vgab *Resource) Type() string {
	return "vault_gcp_auth_backend"
}

// LocalName returns the local name for [Resource].
func (vgab *Resource) LocalName() string {
	return vgab.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vgab *Resource) Configuration() interface{} {
	return vgab.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vgab *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vgab)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vgab *Resource) Dependencies() terra.Dependencies {
	return vgab.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vgab *Resource) LifecycleManagement() *terra.Lifecycle {
	return vgab.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vgab *Resource) Attributes() vaultGcpAuthBackendAttributes {
	return vaultGcpAuthBackendAttributes{ref: terra.ReferenceResource(vgab)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vgab *Resource) ImportState(state io.Reader) error {
	vgab.state = &vaultGcpAuthBackendState{}
	if err := json.NewDecoder(state).Decode(vgab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vgab.Type(), vgab.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vgab *Resource) State() (*vaultGcpAuthBackendState, bool) {
	return vgab.state, vgab.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vgab *Resource) StateMust() *vaultGcpAuthBackendState {
	if vgab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vgab.Type(), vgab.LocalName()))
	}
	return vgab.state
}

// Args contains the configurations for vault_gcp_auth_backend.
type Args struct {
	// ClientEmail: string, optional
	ClientEmail terra.StringValue `hcl:"client_email,attr"`
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// Credentials: string, optional
	Credentials terra.StringValue `hcl:"credentials,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableRemount: bool, optional
	DisableRemount terra.BoolValue `hcl:"disable_remount,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Local: bool, optional
	Local terra.BoolValue `hcl:"local,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// PrivateKeyId: string, optional
	PrivateKeyId terra.StringValue `hcl:"private_key_id,attr"`
	// ProjectId: string, optional
	ProjectId terra.StringValue `hcl:"project_id,attr"`
	// Tune: min=0
	Tune []Tune `hcl:"tune,block" validate:"min=0"`
	// CustomEndpoint: optional
	CustomEndpoint *CustomEndpoint `hcl:"custom_endpoint,block"`
}

type vaultGcpAuthBackendAttributes struct {
	ref terra.Reference
}

// Accessor returns a reference to field accessor of vault_gcp_auth_backend.
func (vgab vaultGcpAuthBackendAttributes) Accessor() terra.StringValue {
	return terra.ReferenceAsString(vgab.ref.Append("accessor"))
}

// ClientEmail returns a reference to field client_email of vault_gcp_auth_backend.
func (vgab vaultGcpAuthBackendAttributes) ClientEmail() terra.StringValue {
	return terra.ReferenceAsString(vgab.ref.Append("client_email"))
}

// ClientId returns a reference to field client_id of vault_gcp_auth_backend.
func (vgab vaultGcpAuthBackendAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(vgab.ref.Append("client_id"))
}

// Credentials returns a reference to field credentials of vault_gcp_auth_backend.
func (vgab vaultGcpAuthBackendAttributes) Credentials() terra.StringValue {
	return terra.ReferenceAsString(vgab.ref.Append("credentials"))
}

// Description returns a reference to field description of vault_gcp_auth_backend.
func (vgab vaultGcpAuthBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(vgab.ref.Append("description"))
}

// DisableRemount returns a reference to field disable_remount of vault_gcp_auth_backend.
func (vgab vaultGcpAuthBackendAttributes) DisableRemount() terra.BoolValue {
	return terra.ReferenceAsBool(vgab.ref.Append("disable_remount"))
}

// Id returns a reference to field id of vault_gcp_auth_backend.
func (vgab vaultGcpAuthBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vgab.ref.Append("id"))
}

// Local returns a reference to field local of vault_gcp_auth_backend.
func (vgab vaultGcpAuthBackendAttributes) Local() terra.BoolValue {
	return terra.ReferenceAsBool(vgab.ref.Append("local"))
}

// Namespace returns a reference to field namespace of vault_gcp_auth_backend.
func (vgab vaultGcpAuthBackendAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vgab.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_gcp_auth_backend.
func (vgab vaultGcpAuthBackendAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(vgab.ref.Append("path"))
}

// PrivateKeyId returns a reference to field private_key_id of vault_gcp_auth_backend.
func (vgab vaultGcpAuthBackendAttributes) PrivateKeyId() terra.StringValue {
	return terra.ReferenceAsString(vgab.ref.Append("private_key_id"))
}

// ProjectId returns a reference to field project_id of vault_gcp_auth_backend.
func (vgab vaultGcpAuthBackendAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(vgab.ref.Append("project_id"))
}

func (vgab vaultGcpAuthBackendAttributes) Tune() terra.SetValue[TuneAttributes] {
	return terra.ReferenceAsSet[TuneAttributes](vgab.ref.Append("tune"))
}

func (vgab vaultGcpAuthBackendAttributes) CustomEndpoint() terra.ListValue[CustomEndpointAttributes] {
	return terra.ReferenceAsList[CustomEndpointAttributes](vgab.ref.Append("custom_endpoint"))
}

type vaultGcpAuthBackendState struct {
	Accessor       string                `json:"accessor"`
	ClientEmail    string                `json:"client_email"`
	ClientId       string                `json:"client_id"`
	Credentials    string                `json:"credentials"`
	Description    string                `json:"description"`
	DisableRemount bool                  `json:"disable_remount"`
	Id             string                `json:"id"`
	Local          bool                  `json:"local"`
	Namespace      string                `json:"namespace"`
	Path           string                `json:"path"`
	PrivateKeyId   string                `json:"private_key_id"`
	ProjectId      string                `json:"project_id"`
	Tune           []TuneState           `json:"tune"`
	CustomEndpoint []CustomEndpointState `json:"custom_endpoint"`
}
