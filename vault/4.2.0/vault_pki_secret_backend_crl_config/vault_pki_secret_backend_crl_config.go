// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_pki_secret_backend_crl_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_pki_secret_backend_crl_config.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultPkiSecretBackendCrlConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vpsbcc *Resource) Type() string {
	return "vault_pki_secret_backend_crl_config"
}

// LocalName returns the local name for [Resource].
func (vpsbcc *Resource) LocalName() string {
	return vpsbcc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vpsbcc *Resource) Configuration() interface{} {
	return vpsbcc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vpsbcc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vpsbcc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vpsbcc *Resource) Dependencies() terra.Dependencies {
	return vpsbcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vpsbcc *Resource) LifecycleManagement() *terra.Lifecycle {
	return vpsbcc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vpsbcc *Resource) Attributes() vaultPkiSecretBackendCrlConfigAttributes {
	return vaultPkiSecretBackendCrlConfigAttributes{ref: terra.ReferenceResource(vpsbcc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vpsbcc *Resource) ImportState(state io.Reader) error {
	vpsbcc.state = &vaultPkiSecretBackendCrlConfigState{}
	if err := json.NewDecoder(state).Decode(vpsbcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vpsbcc.Type(), vpsbcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vpsbcc *Resource) State() (*vaultPkiSecretBackendCrlConfigState, bool) {
	return vpsbcc.state, vpsbcc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vpsbcc *Resource) StateMust() *vaultPkiSecretBackendCrlConfigState {
	if vpsbcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vpsbcc.Type(), vpsbcc.LocalName()))
	}
	return vpsbcc.state
}

// Args contains the configurations for vault_pki_secret_backend_crl_config.
type Args struct {
	// AutoRebuild: bool, optional
	AutoRebuild terra.BoolValue `hcl:"auto_rebuild,attr"`
	// AutoRebuildGracePeriod: string, optional
	AutoRebuildGracePeriod terra.StringValue `hcl:"auto_rebuild_grace_period,attr"`
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// CrossClusterRevocation: bool, optional
	CrossClusterRevocation terra.BoolValue `hcl:"cross_cluster_revocation,attr"`
	// DeltaRebuildInterval: string, optional
	DeltaRebuildInterval terra.StringValue `hcl:"delta_rebuild_interval,attr"`
	// Disable: bool, optional
	Disable terra.BoolValue `hcl:"disable,attr"`
	// EnableDelta: bool, optional
	EnableDelta terra.BoolValue `hcl:"enable_delta,attr"`
	// Expiry: string, optional
	Expiry terra.StringValue `hcl:"expiry,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// OcspDisable: bool, optional
	OcspDisable terra.BoolValue `hcl:"ocsp_disable,attr"`
	// OcspExpiry: string, optional
	OcspExpiry terra.StringValue `hcl:"ocsp_expiry,attr"`
	// UnifiedCrl: bool, optional
	UnifiedCrl terra.BoolValue `hcl:"unified_crl,attr"`
	// UnifiedCrlOnExistingPaths: bool, optional
	UnifiedCrlOnExistingPaths terra.BoolValue `hcl:"unified_crl_on_existing_paths,attr"`
}

type vaultPkiSecretBackendCrlConfigAttributes struct {
	ref terra.Reference
}

// AutoRebuild returns a reference to field auto_rebuild of vault_pki_secret_backend_crl_config.
func (vpsbcc vaultPkiSecretBackendCrlConfigAttributes) AutoRebuild() terra.BoolValue {
	return terra.ReferenceAsBool(vpsbcc.ref.Append("auto_rebuild"))
}

// AutoRebuildGracePeriod returns a reference to field auto_rebuild_grace_period of vault_pki_secret_backend_crl_config.
func (vpsbcc vaultPkiSecretBackendCrlConfigAttributes) AutoRebuildGracePeriod() terra.StringValue {
	return terra.ReferenceAsString(vpsbcc.ref.Append("auto_rebuild_grace_period"))
}

// Backend returns a reference to field backend of vault_pki_secret_backend_crl_config.
func (vpsbcc vaultPkiSecretBackendCrlConfigAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vpsbcc.ref.Append("backend"))
}

// CrossClusterRevocation returns a reference to field cross_cluster_revocation of vault_pki_secret_backend_crl_config.
func (vpsbcc vaultPkiSecretBackendCrlConfigAttributes) CrossClusterRevocation() terra.BoolValue {
	return terra.ReferenceAsBool(vpsbcc.ref.Append("cross_cluster_revocation"))
}

// DeltaRebuildInterval returns a reference to field delta_rebuild_interval of vault_pki_secret_backend_crl_config.
func (vpsbcc vaultPkiSecretBackendCrlConfigAttributes) DeltaRebuildInterval() terra.StringValue {
	return terra.ReferenceAsString(vpsbcc.ref.Append("delta_rebuild_interval"))
}

// Disable returns a reference to field disable of vault_pki_secret_backend_crl_config.
func (vpsbcc vaultPkiSecretBackendCrlConfigAttributes) Disable() terra.BoolValue {
	return terra.ReferenceAsBool(vpsbcc.ref.Append("disable"))
}

// EnableDelta returns a reference to field enable_delta of vault_pki_secret_backend_crl_config.
func (vpsbcc vaultPkiSecretBackendCrlConfigAttributes) EnableDelta() terra.BoolValue {
	return terra.ReferenceAsBool(vpsbcc.ref.Append("enable_delta"))
}

// Expiry returns a reference to field expiry of vault_pki_secret_backend_crl_config.
func (vpsbcc vaultPkiSecretBackendCrlConfigAttributes) Expiry() terra.StringValue {
	return terra.ReferenceAsString(vpsbcc.ref.Append("expiry"))
}

// Id returns a reference to field id of vault_pki_secret_backend_crl_config.
func (vpsbcc vaultPkiSecretBackendCrlConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vpsbcc.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_pki_secret_backend_crl_config.
func (vpsbcc vaultPkiSecretBackendCrlConfigAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vpsbcc.ref.Append("namespace"))
}

// OcspDisable returns a reference to field ocsp_disable of vault_pki_secret_backend_crl_config.
func (vpsbcc vaultPkiSecretBackendCrlConfigAttributes) OcspDisable() terra.BoolValue {
	return terra.ReferenceAsBool(vpsbcc.ref.Append("ocsp_disable"))
}

// OcspExpiry returns a reference to field ocsp_expiry of vault_pki_secret_backend_crl_config.
func (vpsbcc vaultPkiSecretBackendCrlConfigAttributes) OcspExpiry() terra.StringValue {
	return terra.ReferenceAsString(vpsbcc.ref.Append("ocsp_expiry"))
}

// UnifiedCrl returns a reference to field unified_crl of vault_pki_secret_backend_crl_config.
func (vpsbcc vaultPkiSecretBackendCrlConfigAttributes) UnifiedCrl() terra.BoolValue {
	return terra.ReferenceAsBool(vpsbcc.ref.Append("unified_crl"))
}

// UnifiedCrlOnExistingPaths returns a reference to field unified_crl_on_existing_paths of vault_pki_secret_backend_crl_config.
func (vpsbcc vaultPkiSecretBackendCrlConfigAttributes) UnifiedCrlOnExistingPaths() terra.BoolValue {
	return terra.ReferenceAsBool(vpsbcc.ref.Append("unified_crl_on_existing_paths"))
}

type vaultPkiSecretBackendCrlConfigState struct {
	AutoRebuild               bool   `json:"auto_rebuild"`
	AutoRebuildGracePeriod    string `json:"auto_rebuild_grace_period"`
	Backend                   string `json:"backend"`
	CrossClusterRevocation    bool   `json:"cross_cluster_revocation"`
	DeltaRebuildInterval      string `json:"delta_rebuild_interval"`
	Disable                   bool   `json:"disable"`
	EnableDelta               bool   `json:"enable_delta"`
	Expiry                    string `json:"expiry"`
	Id                        string `json:"id"`
	Namespace                 string `json:"namespace"`
	OcspDisable               bool   `json:"ocsp_disable"`
	OcspExpiry                string `json:"ocsp_expiry"`
	UnifiedCrl                bool   `json:"unified_crl"`
	UnifiedCrlOnExistingPaths bool   `json:"unified_crl_on_existing_paths"`
}
