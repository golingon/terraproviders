// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_mongodbatlas_secret_role

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_mongodbatlas_secret_role.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultMongodbatlasSecretRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vmsr *Resource) Type() string {
	return "vault_mongodbatlas_secret_role"
}

// LocalName returns the local name for [Resource].
func (vmsr *Resource) LocalName() string {
	return vmsr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vmsr *Resource) Configuration() interface{} {
	return vmsr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vmsr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vmsr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vmsr *Resource) Dependencies() terra.Dependencies {
	return vmsr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vmsr *Resource) LifecycleManagement() *terra.Lifecycle {
	return vmsr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vmsr *Resource) Attributes() vaultMongodbatlasSecretRoleAttributes {
	return vaultMongodbatlasSecretRoleAttributes{ref: terra.ReferenceResource(vmsr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vmsr *Resource) ImportState(state io.Reader) error {
	vmsr.state = &vaultMongodbatlasSecretRoleState{}
	if err := json.NewDecoder(state).Decode(vmsr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vmsr.Type(), vmsr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vmsr *Resource) State() (*vaultMongodbatlasSecretRoleState, bool) {
	return vmsr.state, vmsr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vmsr *Resource) StateMust() *vaultMongodbatlasSecretRoleState {
	if vmsr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vmsr.Type(), vmsr.LocalName()))
	}
	return vmsr.state
}

// Args contains the configurations for vault_mongodbatlas_secret_role.
type Args struct {
	// CidrBlocks: list of string, optional
	CidrBlocks terra.ListValue[terra.StringValue] `hcl:"cidr_blocks,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddresses: list of string, optional
	IpAddresses terra.ListValue[terra.StringValue] `hcl:"ip_addresses,attr"`
	// MaxTtl: string, optional
	MaxTtl terra.StringValue `hcl:"max_ttl,attr"`
	// Mount: string, required
	Mount terra.StringValue `hcl:"mount,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// OrganizationId: string, optional
	OrganizationId terra.StringValue `hcl:"organization_id,attr"`
	// ProjectId: string, optional
	ProjectId terra.StringValue `hcl:"project_id,attr"`
	// ProjectRoles: list of string, optional
	ProjectRoles terra.ListValue[terra.StringValue] `hcl:"project_roles,attr"`
	// Roles: list of string, required
	Roles terra.ListValue[terra.StringValue] `hcl:"roles,attr" validate:"required"`
	// Ttl: string, optional
	Ttl terra.StringValue `hcl:"ttl,attr"`
}

type vaultMongodbatlasSecretRoleAttributes struct {
	ref terra.Reference
}

// CidrBlocks returns a reference to field cidr_blocks of vault_mongodbatlas_secret_role.
func (vmsr vaultMongodbatlasSecretRoleAttributes) CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vmsr.ref.Append("cidr_blocks"))
}

// Id returns a reference to field id of vault_mongodbatlas_secret_role.
func (vmsr vaultMongodbatlasSecretRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vmsr.ref.Append("id"))
}

// IpAddresses returns a reference to field ip_addresses of vault_mongodbatlas_secret_role.
func (vmsr vaultMongodbatlasSecretRoleAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vmsr.ref.Append("ip_addresses"))
}

// MaxTtl returns a reference to field max_ttl of vault_mongodbatlas_secret_role.
func (vmsr vaultMongodbatlasSecretRoleAttributes) MaxTtl() terra.StringValue {
	return terra.ReferenceAsString(vmsr.ref.Append("max_ttl"))
}

// Mount returns a reference to field mount of vault_mongodbatlas_secret_role.
func (vmsr vaultMongodbatlasSecretRoleAttributes) Mount() terra.StringValue {
	return terra.ReferenceAsString(vmsr.ref.Append("mount"))
}

// Name returns a reference to field name of vault_mongodbatlas_secret_role.
func (vmsr vaultMongodbatlasSecretRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vmsr.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_mongodbatlas_secret_role.
func (vmsr vaultMongodbatlasSecretRoleAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vmsr.ref.Append("namespace"))
}

// OrganizationId returns a reference to field organization_id of vault_mongodbatlas_secret_role.
func (vmsr vaultMongodbatlasSecretRoleAttributes) OrganizationId() terra.StringValue {
	return terra.ReferenceAsString(vmsr.ref.Append("organization_id"))
}

// ProjectId returns a reference to field project_id of vault_mongodbatlas_secret_role.
func (vmsr vaultMongodbatlasSecretRoleAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(vmsr.ref.Append("project_id"))
}

// ProjectRoles returns a reference to field project_roles of vault_mongodbatlas_secret_role.
func (vmsr vaultMongodbatlasSecretRoleAttributes) ProjectRoles() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vmsr.ref.Append("project_roles"))
}

// Roles returns a reference to field roles of vault_mongodbatlas_secret_role.
func (vmsr vaultMongodbatlasSecretRoleAttributes) Roles() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vmsr.ref.Append("roles"))
}

// Ttl returns a reference to field ttl of vault_mongodbatlas_secret_role.
func (vmsr vaultMongodbatlasSecretRoleAttributes) Ttl() terra.StringValue {
	return terra.ReferenceAsString(vmsr.ref.Append("ttl"))
}

type vaultMongodbatlasSecretRoleState struct {
	CidrBlocks     []string `json:"cidr_blocks"`
	Id             string   `json:"id"`
	IpAddresses    []string `json:"ip_addresses"`
	MaxTtl         string   `json:"max_ttl"`
	Mount          string   `json:"mount"`
	Name           string   `json:"name"`
	Namespace      string   `json:"namespace"`
	OrganizationId string   `json:"organization_id"`
	ProjectId      string   `json:"project_id"`
	ProjectRoles   []string `json:"project_roles"`
	Roles          []string `json:"roles"`
	Ttl            string   `json:"ttl"`
}
