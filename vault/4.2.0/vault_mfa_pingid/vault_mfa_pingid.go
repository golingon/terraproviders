// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_mfa_pingid

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_mfa_pingid.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultMfaPingidState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vmp *Resource) Type() string {
	return "vault_mfa_pingid"
}

// LocalName returns the local name for [Resource].
func (vmp *Resource) LocalName() string {
	return vmp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vmp *Resource) Configuration() interface{} {
	return vmp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vmp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vmp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vmp *Resource) Dependencies() terra.Dependencies {
	return vmp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vmp *Resource) LifecycleManagement() *terra.Lifecycle {
	return vmp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vmp *Resource) Attributes() vaultMfaPingidAttributes {
	return vaultMfaPingidAttributes{ref: terra.ReferenceResource(vmp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vmp *Resource) ImportState(state io.Reader) error {
	vmp.state = &vaultMfaPingidState{}
	if err := json.NewDecoder(state).Decode(vmp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vmp.Type(), vmp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vmp *Resource) State() (*vaultMfaPingidState, bool) {
	return vmp.state, vmp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vmp *Resource) StateMust() *vaultMfaPingidState {
	if vmp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vmp.Type(), vmp.LocalName()))
	}
	return vmp.state
}

// Args contains the configurations for vault_mfa_pingid.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MountAccessor: string, required
	MountAccessor terra.StringValue `hcl:"mount_accessor,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// SettingsFileBase64: string, required
	SettingsFileBase64 terra.StringValue `hcl:"settings_file_base64,attr" validate:"required"`
	// UsernameFormat: string, optional
	UsernameFormat terra.StringValue `hcl:"username_format,attr"`
}

type vaultMfaPingidAttributes struct {
	ref terra.Reference
}

// AdminUrl returns a reference to field admin_url of vault_mfa_pingid.
func (vmp vaultMfaPingidAttributes) AdminUrl() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("admin_url"))
}

// AuthenticatorUrl returns a reference to field authenticator_url of vault_mfa_pingid.
func (vmp vaultMfaPingidAttributes) AuthenticatorUrl() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("authenticator_url"))
}

// Id returns a reference to field id of vault_mfa_pingid.
func (vmp vaultMfaPingidAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("id"))
}

// IdpUrl returns a reference to field idp_url of vault_mfa_pingid.
func (vmp vaultMfaPingidAttributes) IdpUrl() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("idp_url"))
}

// MountAccessor returns a reference to field mount_accessor of vault_mfa_pingid.
func (vmp vaultMfaPingidAttributes) MountAccessor() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("mount_accessor"))
}

// Name returns a reference to field name of vault_mfa_pingid.
func (vmp vaultMfaPingidAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_mfa_pingid.
func (vmp vaultMfaPingidAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("namespace"))
}

// NamespaceId returns a reference to field namespace_id of vault_mfa_pingid.
func (vmp vaultMfaPingidAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("namespace_id"))
}

// OrgAlias returns a reference to field org_alias of vault_mfa_pingid.
func (vmp vaultMfaPingidAttributes) OrgAlias() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("org_alias"))
}

// SettingsFileBase64 returns a reference to field settings_file_base64 of vault_mfa_pingid.
func (vmp vaultMfaPingidAttributes) SettingsFileBase64() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("settings_file_base64"))
}

// Type returns a reference to field type of vault_mfa_pingid.
func (vmp vaultMfaPingidAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("type"))
}

// UseSignature returns a reference to field use_signature of vault_mfa_pingid.
func (vmp vaultMfaPingidAttributes) UseSignature() terra.BoolValue {
	return terra.ReferenceAsBool(vmp.ref.Append("use_signature"))
}

// UsernameFormat returns a reference to field username_format of vault_mfa_pingid.
func (vmp vaultMfaPingidAttributes) UsernameFormat() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("username_format"))
}

type vaultMfaPingidState struct {
	AdminUrl           string `json:"admin_url"`
	AuthenticatorUrl   string `json:"authenticator_url"`
	Id                 string `json:"id"`
	IdpUrl             string `json:"idp_url"`
	MountAccessor      string `json:"mount_accessor"`
	Name               string `json:"name"`
	Namespace          string `json:"namespace"`
	NamespaceId        string `json:"namespace_id"`
	OrgAlias           string `json:"org_alias"`
	SettingsFileBase64 string `json:"settings_file_base64"`
	Type               string `json:"type"`
	UseSignature       bool   `json:"use_signature"`
	UsernameFormat     string `json:"username_format"`
}
