// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_transform_transformation

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_transform_transformation.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultTransformTransformationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vtt *Resource) Type() string {
	return "vault_transform_transformation"
}

// LocalName returns the local name for [Resource].
func (vtt *Resource) LocalName() string {
	return vtt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vtt *Resource) Configuration() interface{} {
	return vtt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vtt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vtt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vtt *Resource) Dependencies() terra.Dependencies {
	return vtt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vtt *Resource) LifecycleManagement() *terra.Lifecycle {
	return vtt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vtt *Resource) Attributes() vaultTransformTransformationAttributes {
	return vaultTransformTransformationAttributes{ref: terra.ReferenceResource(vtt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vtt *Resource) ImportState(state io.Reader) error {
	vtt.state = &vaultTransformTransformationState{}
	if err := json.NewDecoder(state).Decode(vtt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vtt.Type(), vtt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vtt *Resource) State() (*vaultTransformTransformationState, bool) {
	return vtt.state, vtt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vtt *Resource) StateMust() *vaultTransformTransformationState {
	if vtt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vtt.Type(), vtt.LocalName()))
	}
	return vtt.state
}

// Args contains the configurations for vault_transform_transformation.
type Args struct {
	// AllowedRoles: list of string, optional
	AllowedRoles terra.ListValue[terra.StringValue] `hcl:"allowed_roles,attr"`
	// DeletionAllowed: bool, optional
	DeletionAllowed terra.BoolValue `hcl:"deletion_allowed,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaskingCharacter: string, optional
	MaskingCharacter terra.StringValue `hcl:"masking_character,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Template: string, optional
	Template terra.StringValue `hcl:"template,attr"`
	// Templates: list of string, optional
	Templates terra.ListValue[terra.StringValue] `hcl:"templates,attr"`
	// TweakSource: string, optional
	TweakSource terra.StringValue `hcl:"tweak_source,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type vaultTransformTransformationAttributes struct {
	ref terra.Reference
}

// AllowedRoles returns a reference to field allowed_roles of vault_transform_transformation.
func (vtt vaultTransformTransformationAttributes) AllowedRoles() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vtt.ref.Append("allowed_roles"))
}

// DeletionAllowed returns a reference to field deletion_allowed of vault_transform_transformation.
func (vtt vaultTransformTransformationAttributes) DeletionAllowed() terra.BoolValue {
	return terra.ReferenceAsBool(vtt.ref.Append("deletion_allowed"))
}

// Id returns a reference to field id of vault_transform_transformation.
func (vtt vaultTransformTransformationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("id"))
}

// MaskingCharacter returns a reference to field masking_character of vault_transform_transformation.
func (vtt vaultTransformTransformationAttributes) MaskingCharacter() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("masking_character"))
}

// Name returns a reference to field name of vault_transform_transformation.
func (vtt vaultTransformTransformationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_transform_transformation.
func (vtt vaultTransformTransformationAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_transform_transformation.
func (vtt vaultTransformTransformationAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("path"))
}

// Template returns a reference to field template of vault_transform_transformation.
func (vtt vaultTransformTransformationAttributes) Template() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("template"))
}

// Templates returns a reference to field templates of vault_transform_transformation.
func (vtt vaultTransformTransformationAttributes) Templates() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vtt.ref.Append("templates"))
}

// TweakSource returns a reference to field tweak_source of vault_transform_transformation.
func (vtt vaultTransformTransformationAttributes) TweakSource() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("tweak_source"))
}

// Type returns a reference to field type of vault_transform_transformation.
func (vtt vaultTransformTransformationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("type"))
}

type vaultTransformTransformationState struct {
	AllowedRoles     []string `json:"allowed_roles"`
	DeletionAllowed  bool     `json:"deletion_allowed"`
	Id               string   `json:"id"`
	MaskingCharacter string   `json:"masking_character"`
	Name             string   `json:"name"`
	Namespace        string   `json:"namespace"`
	Path             string   `json:"path"`
	Template         string   `json:"template"`
	Templates        []string `json:"templates"`
	TweakSource      string   `json:"tweak_source"`
	Type             string   `json:"type"`
}
