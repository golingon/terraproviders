// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_identity_oidc_client

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_identity_oidc_client.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultIdentityOidcClientState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vioc *Resource) Type() string {
	return "vault_identity_oidc_client"
}

// LocalName returns the local name for [Resource].
func (vioc *Resource) LocalName() string {
	return vioc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vioc *Resource) Configuration() interface{} {
	return vioc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vioc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vioc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vioc *Resource) Dependencies() terra.Dependencies {
	return vioc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vioc *Resource) LifecycleManagement() *terra.Lifecycle {
	return vioc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vioc *Resource) Attributes() vaultIdentityOidcClientAttributes {
	return vaultIdentityOidcClientAttributes{ref: terra.ReferenceResource(vioc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vioc *Resource) ImportState(state io.Reader) error {
	vioc.state = &vaultIdentityOidcClientState{}
	if err := json.NewDecoder(state).Decode(vioc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vioc.Type(), vioc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vioc *Resource) State() (*vaultIdentityOidcClientState, bool) {
	return vioc.state, vioc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vioc *Resource) StateMust() *vaultIdentityOidcClientState {
	if vioc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vioc.Type(), vioc.LocalName()))
	}
	return vioc.state
}

// Args contains the configurations for vault_identity_oidc_client.
type Args struct {
	// AccessTokenTtl: number, optional
	AccessTokenTtl terra.NumberValue `hcl:"access_token_ttl,attr"`
	// Assignments: set of string, optional
	Assignments terra.SetValue[terra.StringValue] `hcl:"assignments,attr"`
	// ClientType: string, optional
	ClientType terra.StringValue `hcl:"client_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdTokenTtl: number, optional
	IdTokenTtl terra.NumberValue `hcl:"id_token_ttl,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// RedirectUris: set of string, optional
	RedirectUris terra.SetValue[terra.StringValue] `hcl:"redirect_uris,attr"`
}

type vaultIdentityOidcClientAttributes struct {
	ref terra.Reference
}

// AccessTokenTtl returns a reference to field access_token_ttl of vault_identity_oidc_client.
func (vioc vaultIdentityOidcClientAttributes) AccessTokenTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(vioc.ref.Append("access_token_ttl"))
}

// Assignments returns a reference to field assignments of vault_identity_oidc_client.
func (vioc vaultIdentityOidcClientAttributes) Assignments() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vioc.ref.Append("assignments"))
}

// ClientId returns a reference to field client_id of vault_identity_oidc_client.
func (vioc vaultIdentityOidcClientAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(vioc.ref.Append("client_id"))
}

// ClientSecret returns a reference to field client_secret of vault_identity_oidc_client.
func (vioc vaultIdentityOidcClientAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(vioc.ref.Append("client_secret"))
}

// ClientType returns a reference to field client_type of vault_identity_oidc_client.
func (vioc vaultIdentityOidcClientAttributes) ClientType() terra.StringValue {
	return terra.ReferenceAsString(vioc.ref.Append("client_type"))
}

// Id returns a reference to field id of vault_identity_oidc_client.
func (vioc vaultIdentityOidcClientAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vioc.ref.Append("id"))
}

// IdTokenTtl returns a reference to field id_token_ttl of vault_identity_oidc_client.
func (vioc vaultIdentityOidcClientAttributes) IdTokenTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(vioc.ref.Append("id_token_ttl"))
}

// Key returns a reference to field key of vault_identity_oidc_client.
func (vioc vaultIdentityOidcClientAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(vioc.ref.Append("key"))
}

// Name returns a reference to field name of vault_identity_oidc_client.
func (vioc vaultIdentityOidcClientAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vioc.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_identity_oidc_client.
func (vioc vaultIdentityOidcClientAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vioc.ref.Append("namespace"))
}

// RedirectUris returns a reference to field redirect_uris of vault_identity_oidc_client.
func (vioc vaultIdentityOidcClientAttributes) RedirectUris() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vioc.ref.Append("redirect_uris"))
}

type vaultIdentityOidcClientState struct {
	AccessTokenTtl float64  `json:"access_token_ttl"`
	Assignments    []string `json:"assignments"`
	ClientId       string   `json:"client_id"`
	ClientSecret   string   `json:"client_secret"`
	ClientType     string   `json:"client_type"`
	Id             string   `json:"id"`
	IdTokenTtl     float64  `json:"id_token_ttl"`
	Key            string   `json:"key"`
	Name           string   `json:"name"`
	Namespace      string   `json:"namespace"`
	RedirectUris   []string `json:"redirect_uris"`
}
