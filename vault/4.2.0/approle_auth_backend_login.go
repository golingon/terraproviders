// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewApproleAuthBackendLogin creates a new instance of [ApproleAuthBackendLogin].
func NewApproleAuthBackendLogin(name string, args ApproleAuthBackendLoginArgs) *ApproleAuthBackendLogin {
	return &ApproleAuthBackendLogin{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApproleAuthBackendLogin)(nil)

// ApproleAuthBackendLogin represents the Terraform resource vault_approle_auth_backend_login.
type ApproleAuthBackendLogin struct {
	Name      string
	Args      ApproleAuthBackendLoginArgs
	state     *approleAuthBackendLoginState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApproleAuthBackendLogin].
func (aabl *ApproleAuthBackendLogin) Type() string {
	return "vault_approle_auth_backend_login"
}

// LocalName returns the local name for [ApproleAuthBackendLogin].
func (aabl *ApproleAuthBackendLogin) LocalName() string {
	return aabl.Name
}

// Configuration returns the configuration (args) for [ApproleAuthBackendLogin].
func (aabl *ApproleAuthBackendLogin) Configuration() interface{} {
	return aabl.Args
}

// DependOn is used for other resources to depend on [ApproleAuthBackendLogin].
func (aabl *ApproleAuthBackendLogin) DependOn() terra.Reference {
	return terra.ReferenceResource(aabl)
}

// Dependencies returns the list of resources [ApproleAuthBackendLogin] depends_on.
func (aabl *ApproleAuthBackendLogin) Dependencies() terra.Dependencies {
	return aabl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApproleAuthBackendLogin].
func (aabl *ApproleAuthBackendLogin) LifecycleManagement() *terra.Lifecycle {
	return aabl.Lifecycle
}

// Attributes returns the attributes for [ApproleAuthBackendLogin].
func (aabl *ApproleAuthBackendLogin) Attributes() approleAuthBackendLoginAttributes {
	return approleAuthBackendLoginAttributes{ref: terra.ReferenceResource(aabl)}
}

// ImportState imports the given attribute values into [ApproleAuthBackendLogin]'s state.
func (aabl *ApproleAuthBackendLogin) ImportState(av io.Reader) error {
	aabl.state = &approleAuthBackendLoginState{}
	if err := json.NewDecoder(av).Decode(aabl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aabl.Type(), aabl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApproleAuthBackendLogin] has state.
func (aabl *ApproleAuthBackendLogin) State() (*approleAuthBackendLoginState, bool) {
	return aabl.state, aabl.state != nil
}

// StateMust returns the state for [ApproleAuthBackendLogin]. Panics if the state is nil.
func (aabl *ApproleAuthBackendLogin) StateMust() *approleAuthBackendLoginState {
	if aabl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aabl.Type(), aabl.LocalName()))
	}
	return aabl.state
}

// ApproleAuthBackendLoginArgs contains the configurations for vault_approle_auth_backend_login.
type ApproleAuthBackendLoginArgs struct {
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// RoleId: string, required
	RoleId terra.StringValue `hcl:"role_id,attr" validate:"required"`
	// SecretId: string, optional
	SecretId terra.StringValue `hcl:"secret_id,attr"`
}
type approleAuthBackendLoginAttributes struct {
	ref terra.Reference
}

// Accessor returns a reference to field accessor of vault_approle_auth_backend_login.
func (aabl approleAuthBackendLoginAttributes) Accessor() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("accessor"))
}

// Backend returns a reference to field backend of vault_approle_auth_backend_login.
func (aabl approleAuthBackendLoginAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("backend"))
}

// ClientToken returns a reference to field client_token of vault_approle_auth_backend_login.
func (aabl approleAuthBackendLoginAttributes) ClientToken() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("client_token"))
}

// Id returns a reference to field id of vault_approle_auth_backend_login.
func (aabl approleAuthBackendLoginAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("id"))
}

// LeaseDuration returns a reference to field lease_duration of vault_approle_auth_backend_login.
func (aabl approleAuthBackendLoginAttributes) LeaseDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(aabl.ref.Append("lease_duration"))
}

// LeaseStarted returns a reference to field lease_started of vault_approle_auth_backend_login.
func (aabl approleAuthBackendLoginAttributes) LeaseStarted() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("lease_started"))
}

// Metadata returns a reference to field metadata of vault_approle_auth_backend_login.
func (aabl approleAuthBackendLoginAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aabl.ref.Append("metadata"))
}

// Namespace returns a reference to field namespace of vault_approle_auth_backend_login.
func (aabl approleAuthBackendLoginAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("namespace"))
}

// Policies returns a reference to field policies of vault_approle_auth_backend_login.
func (aabl approleAuthBackendLoginAttributes) Policies() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aabl.ref.Append("policies"))
}

// Renewable returns a reference to field renewable of vault_approle_auth_backend_login.
func (aabl approleAuthBackendLoginAttributes) Renewable() terra.BoolValue {
	return terra.ReferenceAsBool(aabl.ref.Append("renewable"))
}

// RoleId returns a reference to field role_id of vault_approle_auth_backend_login.
func (aabl approleAuthBackendLoginAttributes) RoleId() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("role_id"))
}

// SecretId returns a reference to field secret_id of vault_approle_auth_backend_login.
func (aabl approleAuthBackendLoginAttributes) SecretId() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("secret_id"))
}

type approleAuthBackendLoginState struct {
	Accessor      string            `json:"accessor"`
	Backend       string            `json:"backend"`
	ClientToken   string            `json:"client_token"`
	Id            string            `json:"id"`
	LeaseDuration float64           `json:"lease_duration"`
	LeaseStarted  string            `json:"lease_started"`
	Metadata      map[string]string `json:"metadata"`
	Namespace     string            `json:"namespace"`
	Policies      []string          `json:"policies"`
	Renewable     bool              `json:"renewable"`
	RoleId        string            `json:"role_id"`
	SecretId      string            `json:"secret_id"`
}
