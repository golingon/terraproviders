// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewTransformTemplate creates a new instance of [TransformTemplate].
func NewTransformTemplate(name string, args TransformTemplateArgs) *TransformTemplate {
	return &TransformTemplate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TransformTemplate)(nil)

// TransformTemplate represents the Terraform resource vault_transform_template.
type TransformTemplate struct {
	Name      string
	Args      TransformTemplateArgs
	state     *transformTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [TransformTemplate].
func (tt *TransformTemplate) Type() string {
	return "vault_transform_template"
}

// LocalName returns the local name for [TransformTemplate].
func (tt *TransformTemplate) LocalName() string {
	return tt.Name
}

// Configuration returns the configuration (args) for [TransformTemplate].
func (tt *TransformTemplate) Configuration() interface{} {
	return tt.Args
}

// DependOn is used for other resources to depend on [TransformTemplate].
func (tt *TransformTemplate) DependOn() terra.Reference {
	return terra.ReferenceResource(tt)
}

// Dependencies returns the list of resources [TransformTemplate] depends_on.
func (tt *TransformTemplate) Dependencies() terra.Dependencies {
	return tt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [TransformTemplate].
func (tt *TransformTemplate) LifecycleManagement() *terra.Lifecycle {
	return tt.Lifecycle
}

// Attributes returns the attributes for [TransformTemplate].
func (tt *TransformTemplate) Attributes() transformTemplateAttributes {
	return transformTemplateAttributes{ref: terra.ReferenceResource(tt)}
}

// ImportState imports the given attribute values into [TransformTemplate]'s state.
func (tt *TransformTemplate) ImportState(av io.Reader) error {
	tt.state = &transformTemplateState{}
	if err := json.NewDecoder(av).Decode(tt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tt.Type(), tt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [TransformTemplate] has state.
func (tt *TransformTemplate) State() (*transformTemplateState, bool) {
	return tt.state, tt.state != nil
}

// StateMust returns the state for [TransformTemplate]. Panics if the state is nil.
func (tt *TransformTemplate) StateMust() *transformTemplateState {
	if tt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tt.Type(), tt.LocalName()))
	}
	return tt.state
}

// TransformTemplateArgs contains the configurations for vault_transform_template.
type TransformTemplateArgs struct {
	// Alphabet: string, optional
	Alphabet terra.StringValue `hcl:"alphabet,attr"`
	// DecodeFormats: map of string, optional
	DecodeFormats terra.MapValue[terra.StringValue] `hcl:"decode_formats,attr"`
	// EncodeFormat: string, optional
	EncodeFormat terra.StringValue `hcl:"encode_format,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Pattern: string, optional
	Pattern terra.StringValue `hcl:"pattern,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}
type transformTemplateAttributes struct {
	ref terra.Reference
}

// Alphabet returns a reference to field alphabet of vault_transform_template.
func (tt transformTemplateAttributes) Alphabet() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("alphabet"))
}

// DecodeFormats returns a reference to field decode_formats of vault_transform_template.
func (tt transformTemplateAttributes) DecodeFormats() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](tt.ref.Append("decode_formats"))
}

// EncodeFormat returns a reference to field encode_format of vault_transform_template.
func (tt transformTemplateAttributes) EncodeFormat() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("encode_format"))
}

// Id returns a reference to field id of vault_transform_template.
func (tt transformTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("id"))
}

// Name returns a reference to field name of vault_transform_template.
func (tt transformTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_transform_template.
func (tt transformTemplateAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_transform_template.
func (tt transformTemplateAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("path"))
}

// Pattern returns a reference to field pattern of vault_transform_template.
func (tt transformTemplateAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("pattern"))
}

// Type returns a reference to field type of vault_transform_template.
func (tt transformTemplateAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("type"))
}

type transformTemplateState struct {
	Alphabet      string            `json:"alphabet"`
	DecodeFormats map[string]string `json:"decode_formats"`
	EncodeFormat  string            `json:"encode_format"`
	Id            string            `json:"id"`
	Name          string            `json:"name"`
	Namespace     string            `json:"namespace"`
	Path          string            `json:"path"`
	Pattern       string            `json:"pattern"`
	Type          string            `json:"type"`
}
