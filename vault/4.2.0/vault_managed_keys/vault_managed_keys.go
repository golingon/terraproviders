// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_managed_keys

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_managed_keys.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultManagedKeysState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vmk *Resource) Type() string {
	return "vault_managed_keys"
}

// LocalName returns the local name for [Resource].
func (vmk *Resource) LocalName() string {
	return vmk.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vmk *Resource) Configuration() interface{} {
	return vmk.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vmk *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vmk)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vmk *Resource) Dependencies() terra.Dependencies {
	return vmk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vmk *Resource) LifecycleManagement() *terra.Lifecycle {
	return vmk.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vmk *Resource) Attributes() vaultManagedKeysAttributes {
	return vaultManagedKeysAttributes{ref: terra.ReferenceResource(vmk)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vmk *Resource) ImportState(state io.Reader) error {
	vmk.state = &vaultManagedKeysState{}
	if err := json.NewDecoder(state).Decode(vmk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vmk.Type(), vmk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vmk *Resource) State() (*vaultManagedKeysState, bool) {
	return vmk.state, vmk.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vmk *Resource) StateMust() *vaultManagedKeysState {
	if vmk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vmk.Type(), vmk.LocalName()))
	}
	return vmk.state
}

// Args contains the configurations for vault_managed_keys.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Aws: min=0
	Aws []Aws `hcl:"aws,block" validate:"min=0"`
	// Azure: min=0
	Azure []Azure `hcl:"azure,block" validate:"min=0"`
	// Pkcs: min=0
	Pkcs []Pkcs `hcl:"pkcs,block" validate:"min=0"`
}

type vaultManagedKeysAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of vault_managed_keys.
func (vmk vaultManagedKeysAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vmk.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_managed_keys.
func (vmk vaultManagedKeysAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vmk.ref.Append("namespace"))
}

func (vmk vaultManagedKeysAttributes) Aws() terra.SetValue[AwsAttributes] {
	return terra.ReferenceAsSet[AwsAttributes](vmk.ref.Append("aws"))
}

func (vmk vaultManagedKeysAttributes) Azure() terra.SetValue[AzureAttributes] {
	return terra.ReferenceAsSet[AzureAttributes](vmk.ref.Append("azure"))
}

func (vmk vaultManagedKeysAttributes) Pkcs() terra.SetValue[PkcsAttributes] {
	return terra.ReferenceAsSet[PkcsAttributes](vmk.ref.Append("pkcs"))
}

type vaultManagedKeysState struct {
	Id        string       `json:"id"`
	Namespace string       `json:"namespace"`
	Aws       []AwsState   `json:"aws"`
	Azure     []AzureState `json:"azure"`
	Pkcs      []PkcsState  `json:"pkcs"`
}
