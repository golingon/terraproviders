// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewLdapSecretBackend creates a new instance of [LdapSecretBackend].
func NewLdapSecretBackend(name string, args LdapSecretBackendArgs) *LdapSecretBackend {
	return &LdapSecretBackend{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LdapSecretBackend)(nil)

// LdapSecretBackend represents the Terraform resource vault_ldap_secret_backend.
type LdapSecretBackend struct {
	Name      string
	Args      LdapSecretBackendArgs
	state     *ldapSecretBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [LdapSecretBackend].
func (lsb *LdapSecretBackend) Type() string {
	return "vault_ldap_secret_backend"
}

// LocalName returns the local name for [LdapSecretBackend].
func (lsb *LdapSecretBackend) LocalName() string {
	return lsb.Name
}

// Configuration returns the configuration (args) for [LdapSecretBackend].
func (lsb *LdapSecretBackend) Configuration() interface{} {
	return lsb.Args
}

// DependOn is used for other resources to depend on [LdapSecretBackend].
func (lsb *LdapSecretBackend) DependOn() terra.Reference {
	return terra.ReferenceResource(lsb)
}

// Dependencies returns the list of resources [LdapSecretBackend] depends_on.
func (lsb *LdapSecretBackend) Dependencies() terra.Dependencies {
	return lsb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [LdapSecretBackend].
func (lsb *LdapSecretBackend) LifecycleManagement() *terra.Lifecycle {
	return lsb.Lifecycle
}

// Attributes returns the attributes for [LdapSecretBackend].
func (lsb *LdapSecretBackend) Attributes() ldapSecretBackendAttributes {
	return ldapSecretBackendAttributes{ref: terra.ReferenceResource(lsb)}
}

// ImportState imports the given attribute values into [LdapSecretBackend]'s state.
func (lsb *LdapSecretBackend) ImportState(av io.Reader) error {
	lsb.state = &ldapSecretBackendState{}
	if err := json.NewDecoder(av).Decode(lsb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lsb.Type(), lsb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [LdapSecretBackend] has state.
func (lsb *LdapSecretBackend) State() (*ldapSecretBackendState, bool) {
	return lsb.state, lsb.state != nil
}

// StateMust returns the state for [LdapSecretBackend]. Panics if the state is nil.
func (lsb *LdapSecretBackend) StateMust() *ldapSecretBackendState {
	if lsb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lsb.Type(), lsb.LocalName()))
	}
	return lsb.state
}

// LdapSecretBackendArgs contains the configurations for vault_ldap_secret_backend.
type LdapSecretBackendArgs struct {
	// AllowedManagedKeys: set of string, optional
	AllowedManagedKeys terra.SetValue[terra.StringValue] `hcl:"allowed_managed_keys,attr"`
	// AuditNonHmacRequestKeys: list of string, optional
	AuditNonHmacRequestKeys terra.ListValue[terra.StringValue] `hcl:"audit_non_hmac_request_keys,attr"`
	// AuditNonHmacResponseKeys: list of string, optional
	AuditNonHmacResponseKeys terra.ListValue[terra.StringValue] `hcl:"audit_non_hmac_response_keys,attr"`
	// Binddn: string, required
	Binddn terra.StringValue `hcl:"binddn,attr" validate:"required"`
	// Bindpass: string, required
	Bindpass terra.StringValue `hcl:"bindpass,attr" validate:"required"`
	// Certificate: string, optional
	Certificate terra.StringValue `hcl:"certificate,attr"`
	// ClientTlsCert: string, optional
	ClientTlsCert terra.StringValue `hcl:"client_tls_cert,attr"`
	// ClientTlsKey: string, optional
	ClientTlsKey terra.StringValue `hcl:"client_tls_key,attr"`
	// ConnectionTimeout: number, optional
	ConnectionTimeout terra.NumberValue `hcl:"connection_timeout,attr"`
	// DefaultLeaseTtlSeconds: number, optional
	DefaultLeaseTtlSeconds terra.NumberValue `hcl:"default_lease_ttl_seconds,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableRemount: bool, optional
	DisableRemount terra.BoolValue `hcl:"disable_remount,attr"`
	// ExternalEntropyAccess: bool, optional
	ExternalEntropyAccess terra.BoolValue `hcl:"external_entropy_access,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InsecureTls: bool, optional
	InsecureTls terra.BoolValue `hcl:"insecure_tls,attr"`
	// Local: bool, optional
	Local terra.BoolValue `hcl:"local,attr"`
	// MaxLeaseTtlSeconds: number, optional
	MaxLeaseTtlSeconds terra.NumberValue `hcl:"max_lease_ttl_seconds,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Options: map of string, optional
	Options terra.MapValue[terra.StringValue] `hcl:"options,attr"`
	// PasswordPolicy: string, optional
	PasswordPolicy terra.StringValue `hcl:"password_policy,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// RequestTimeout: number, optional
	RequestTimeout terra.NumberValue `hcl:"request_timeout,attr"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
	// SealWrap: bool, optional
	SealWrap terra.BoolValue `hcl:"seal_wrap,attr"`
	// SkipStaticRoleImportRotation: bool, optional
	SkipStaticRoleImportRotation terra.BoolValue `hcl:"skip_static_role_import_rotation,attr"`
	// Starttls: bool, optional
	Starttls terra.BoolValue `hcl:"starttls,attr"`
	// Upndomain: string, optional
	Upndomain terra.StringValue `hcl:"upndomain,attr"`
	// Url: string, optional
	Url terra.StringValue `hcl:"url,attr"`
	// Userattr: string, optional
	Userattr terra.StringValue `hcl:"userattr,attr"`
	// Userdn: string, optional
	Userdn terra.StringValue `hcl:"userdn,attr"`
}
type ldapSecretBackendAttributes struct {
	ref terra.Reference
}

// Accessor returns a reference to field accessor of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Accessor() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("accessor"))
}

// AllowedManagedKeys returns a reference to field allowed_managed_keys of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) AllowedManagedKeys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lsb.ref.Append("allowed_managed_keys"))
}

// AuditNonHmacRequestKeys returns a reference to field audit_non_hmac_request_keys of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) AuditNonHmacRequestKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lsb.ref.Append("audit_non_hmac_request_keys"))
}

// AuditNonHmacResponseKeys returns a reference to field audit_non_hmac_response_keys of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) AuditNonHmacResponseKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lsb.ref.Append("audit_non_hmac_response_keys"))
}

// Binddn returns a reference to field binddn of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Binddn() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("binddn"))
}

// Bindpass returns a reference to field bindpass of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Bindpass() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("bindpass"))
}

// Certificate returns a reference to field certificate of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("certificate"))
}

// ClientTlsCert returns a reference to field client_tls_cert of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) ClientTlsCert() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("client_tls_cert"))
}

// ClientTlsKey returns a reference to field client_tls_key of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) ClientTlsKey() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("client_tls_key"))
}

// ConnectionTimeout returns a reference to field connection_timeout of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) ConnectionTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(lsb.ref.Append("connection_timeout"))
}

// DefaultLeaseTtlSeconds returns a reference to field default_lease_ttl_seconds of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) DefaultLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lsb.ref.Append("default_lease_ttl_seconds"))
}

// Description returns a reference to field description of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("description"))
}

// DisableRemount returns a reference to field disable_remount of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) DisableRemount() terra.BoolValue {
	return terra.ReferenceAsBool(lsb.ref.Append("disable_remount"))
}

// ExternalEntropyAccess returns a reference to field external_entropy_access of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) ExternalEntropyAccess() terra.BoolValue {
	return terra.ReferenceAsBool(lsb.ref.Append("external_entropy_access"))
}

// Id returns a reference to field id of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("id"))
}

// InsecureTls returns a reference to field insecure_tls of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) InsecureTls() terra.BoolValue {
	return terra.ReferenceAsBool(lsb.ref.Append("insecure_tls"))
}

// Local returns a reference to field local of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Local() terra.BoolValue {
	return terra.ReferenceAsBool(lsb.ref.Append("local"))
}

// MaxLeaseTtlSeconds returns a reference to field max_lease_ttl_seconds of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) MaxLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lsb.ref.Append("max_lease_ttl_seconds"))
}

// Namespace returns a reference to field namespace of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("namespace"))
}

// Options returns a reference to field options of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Options() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lsb.ref.Append("options"))
}

// PasswordPolicy returns a reference to field password_policy of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) PasswordPolicy() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("password_policy"))
}

// Path returns a reference to field path of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("path"))
}

// RequestTimeout returns a reference to field request_timeout of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) RequestTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(lsb.ref.Append("request_timeout"))
}

// Schema returns a reference to field schema of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("schema"))
}

// SealWrap returns a reference to field seal_wrap of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) SealWrap() terra.BoolValue {
	return terra.ReferenceAsBool(lsb.ref.Append("seal_wrap"))
}

// SkipStaticRoleImportRotation returns a reference to field skip_static_role_import_rotation of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) SkipStaticRoleImportRotation() terra.BoolValue {
	return terra.ReferenceAsBool(lsb.ref.Append("skip_static_role_import_rotation"))
}

// Starttls returns a reference to field starttls of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Starttls() terra.BoolValue {
	return terra.ReferenceAsBool(lsb.ref.Append("starttls"))
}

// Upndomain returns a reference to field upndomain of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Upndomain() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("upndomain"))
}

// Url returns a reference to field url of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("url"))
}

// Userattr returns a reference to field userattr of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Userattr() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("userattr"))
}

// Userdn returns a reference to field userdn of vault_ldap_secret_backend.
func (lsb ldapSecretBackendAttributes) Userdn() terra.StringValue {
	return terra.ReferenceAsString(lsb.ref.Append("userdn"))
}

type ldapSecretBackendState struct {
	Accessor                     string            `json:"accessor"`
	AllowedManagedKeys           []string          `json:"allowed_managed_keys"`
	AuditNonHmacRequestKeys      []string          `json:"audit_non_hmac_request_keys"`
	AuditNonHmacResponseKeys     []string          `json:"audit_non_hmac_response_keys"`
	Binddn                       string            `json:"binddn"`
	Bindpass                     string            `json:"bindpass"`
	Certificate                  string            `json:"certificate"`
	ClientTlsCert                string            `json:"client_tls_cert"`
	ClientTlsKey                 string            `json:"client_tls_key"`
	ConnectionTimeout            float64           `json:"connection_timeout"`
	DefaultLeaseTtlSeconds       float64           `json:"default_lease_ttl_seconds"`
	Description                  string            `json:"description"`
	DisableRemount               bool              `json:"disable_remount"`
	ExternalEntropyAccess        bool              `json:"external_entropy_access"`
	Id                           string            `json:"id"`
	InsecureTls                  bool              `json:"insecure_tls"`
	Local                        bool              `json:"local"`
	MaxLeaseTtlSeconds           float64           `json:"max_lease_ttl_seconds"`
	Namespace                    string            `json:"namespace"`
	Options                      map[string]string `json:"options"`
	PasswordPolicy               string            `json:"password_policy"`
	Path                         string            `json:"path"`
	RequestTimeout               float64           `json:"request_timeout"`
	Schema                       string            `json:"schema"`
	SealWrap                     bool              `json:"seal_wrap"`
	SkipStaticRoleImportRotation bool              `json:"skip_static_role_import_rotation"`
	Starttls                     bool              `json:"starttls"`
	Upndomain                    string            `json:"upndomain"`
	Url                          string            `json:"url"`
	Userattr                     string            `json:"userattr"`
	Userdn                       string            `json:"userdn"`
}
