// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewNamespace creates a new instance of [Namespace].
func NewNamespace(name string, args NamespaceArgs) *Namespace {
	return &Namespace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Namespace)(nil)

// Namespace represents the Terraform resource vault_namespace.
type Namespace struct {
	Name      string
	Args      NamespaceArgs
	state     *namespaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Namespace].
func (n *Namespace) Type() string {
	return "vault_namespace"
}

// LocalName returns the local name for [Namespace].
func (n *Namespace) LocalName() string {
	return n.Name
}

// Configuration returns the configuration (args) for [Namespace].
func (n *Namespace) Configuration() interface{} {
	return n.Args
}

// DependOn is used for other resources to depend on [Namespace].
func (n *Namespace) DependOn() terra.Reference {
	return terra.ReferenceResource(n)
}

// Dependencies returns the list of resources [Namespace] depends_on.
func (n *Namespace) Dependencies() terra.Dependencies {
	return n.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Namespace].
func (n *Namespace) LifecycleManagement() *terra.Lifecycle {
	return n.Lifecycle
}

// Attributes returns the attributes for [Namespace].
func (n *Namespace) Attributes() namespaceAttributes {
	return namespaceAttributes{ref: terra.ReferenceResource(n)}
}

// ImportState imports the given attribute values into [Namespace]'s state.
func (n *Namespace) ImportState(av io.Reader) error {
	n.state = &namespaceState{}
	if err := json.NewDecoder(av).Decode(n.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", n.Type(), n.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Namespace] has state.
func (n *Namespace) State() (*namespaceState, bool) {
	return n.state, n.state != nil
}

// StateMust returns the state for [Namespace]. Panics if the state is nil.
func (n *Namespace) StateMust() *namespaceState {
	if n.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", n.Type(), n.LocalName()))
	}
	return n.state
}

// NamespaceArgs contains the configurations for vault_namespace.
type NamespaceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// PathFq: string, optional
	PathFq terra.StringValue `hcl:"path_fq,attr"`
}
type namespaceAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of vault_namespace.
func (n namespaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_namespace.
func (n namespaceAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("namespace"))
}

// NamespaceId returns a reference to field namespace_id of vault_namespace.
func (n namespaceAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("namespace_id"))
}

// Path returns a reference to field path of vault_namespace.
func (n namespaceAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("path"))
}

// PathFq returns a reference to field path_fq of vault_namespace.
func (n namespaceAttributes) PathFq() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("path_fq"))
}

type namespaceState struct {
	Id          string `json:"id"`
	Namespace   string `json:"namespace"`
	NamespaceId string `json:"namespace_id"`
	Path        string `json:"path"`
	PathFq      string `json:"path_fq"`
}
