// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewJwtAuthBackendRole creates a new instance of [JwtAuthBackendRole].
func NewJwtAuthBackendRole(name string, args JwtAuthBackendRoleArgs) *JwtAuthBackendRole {
	return &JwtAuthBackendRole{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*JwtAuthBackendRole)(nil)

// JwtAuthBackendRole represents the Terraform resource vault_jwt_auth_backend_role.
type JwtAuthBackendRole struct {
	Name      string
	Args      JwtAuthBackendRoleArgs
	state     *jwtAuthBackendRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [JwtAuthBackendRole].
func (jabr *JwtAuthBackendRole) Type() string {
	return "vault_jwt_auth_backend_role"
}

// LocalName returns the local name for [JwtAuthBackendRole].
func (jabr *JwtAuthBackendRole) LocalName() string {
	return jabr.Name
}

// Configuration returns the configuration (args) for [JwtAuthBackendRole].
func (jabr *JwtAuthBackendRole) Configuration() interface{} {
	return jabr.Args
}

// DependOn is used for other resources to depend on [JwtAuthBackendRole].
func (jabr *JwtAuthBackendRole) DependOn() terra.Reference {
	return terra.ReferenceResource(jabr)
}

// Dependencies returns the list of resources [JwtAuthBackendRole] depends_on.
func (jabr *JwtAuthBackendRole) Dependencies() terra.Dependencies {
	return jabr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [JwtAuthBackendRole].
func (jabr *JwtAuthBackendRole) LifecycleManagement() *terra.Lifecycle {
	return jabr.Lifecycle
}

// Attributes returns the attributes for [JwtAuthBackendRole].
func (jabr *JwtAuthBackendRole) Attributes() jwtAuthBackendRoleAttributes {
	return jwtAuthBackendRoleAttributes{ref: terra.ReferenceResource(jabr)}
}

// ImportState imports the given attribute values into [JwtAuthBackendRole]'s state.
func (jabr *JwtAuthBackendRole) ImportState(av io.Reader) error {
	jabr.state = &jwtAuthBackendRoleState{}
	if err := json.NewDecoder(av).Decode(jabr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", jabr.Type(), jabr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [JwtAuthBackendRole] has state.
func (jabr *JwtAuthBackendRole) State() (*jwtAuthBackendRoleState, bool) {
	return jabr.state, jabr.state != nil
}

// StateMust returns the state for [JwtAuthBackendRole]. Panics if the state is nil.
func (jabr *JwtAuthBackendRole) StateMust() *jwtAuthBackendRoleState {
	if jabr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", jabr.Type(), jabr.LocalName()))
	}
	return jabr.state
}

// JwtAuthBackendRoleArgs contains the configurations for vault_jwt_auth_backend_role.
type JwtAuthBackendRoleArgs struct {
	// AllowedRedirectUris: set of string, optional
	AllowedRedirectUris terra.SetValue[terra.StringValue] `hcl:"allowed_redirect_uris,attr"`
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// BoundAudiences: set of string, optional
	BoundAudiences terra.SetValue[terra.StringValue] `hcl:"bound_audiences,attr"`
	// BoundClaims: map of string, optional
	BoundClaims terra.MapValue[terra.StringValue] `hcl:"bound_claims,attr"`
	// BoundClaimsType: string, optional
	BoundClaimsType terra.StringValue `hcl:"bound_claims_type,attr"`
	// BoundSubject: string, optional
	BoundSubject terra.StringValue `hcl:"bound_subject,attr"`
	// ClaimMappings: map of string, optional
	ClaimMappings terra.MapValue[terra.StringValue] `hcl:"claim_mappings,attr"`
	// ClockSkewLeeway: number, optional
	ClockSkewLeeway terra.NumberValue `hcl:"clock_skew_leeway,attr"`
	// DisableBoundClaimsParsing: bool, optional
	DisableBoundClaimsParsing terra.BoolValue `hcl:"disable_bound_claims_parsing,attr"`
	// ExpirationLeeway: number, optional
	ExpirationLeeway terra.NumberValue `hcl:"expiration_leeway,attr"`
	// GroupsClaim: string, optional
	GroupsClaim terra.StringValue `hcl:"groups_claim,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxAge: number, optional
	MaxAge terra.NumberValue `hcl:"max_age,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// NotBeforeLeeway: number, optional
	NotBeforeLeeway terra.NumberValue `hcl:"not_before_leeway,attr"`
	// OidcScopes: set of string, optional
	OidcScopes terra.SetValue[terra.StringValue] `hcl:"oidc_scopes,attr"`
	// RoleName: string, required
	RoleName terra.StringValue `hcl:"role_name,attr" validate:"required"`
	// RoleType: string, optional
	RoleType terra.StringValue `hcl:"role_type,attr"`
	// TokenBoundCidrs: set of string, optional
	TokenBoundCidrs terra.SetValue[terra.StringValue] `hcl:"token_bound_cidrs,attr"`
	// TokenExplicitMaxTtl: number, optional
	TokenExplicitMaxTtl terra.NumberValue `hcl:"token_explicit_max_ttl,attr"`
	// TokenMaxTtl: number, optional
	TokenMaxTtl terra.NumberValue `hcl:"token_max_ttl,attr"`
	// TokenNoDefaultPolicy: bool, optional
	TokenNoDefaultPolicy terra.BoolValue `hcl:"token_no_default_policy,attr"`
	// TokenNumUses: number, optional
	TokenNumUses terra.NumberValue `hcl:"token_num_uses,attr"`
	// TokenPeriod: number, optional
	TokenPeriod terra.NumberValue `hcl:"token_period,attr"`
	// TokenPolicies: set of string, optional
	TokenPolicies terra.SetValue[terra.StringValue] `hcl:"token_policies,attr"`
	// TokenTtl: number, optional
	TokenTtl terra.NumberValue `hcl:"token_ttl,attr"`
	// TokenType: string, optional
	TokenType terra.StringValue `hcl:"token_type,attr"`
	// UserClaim: string, required
	UserClaim terra.StringValue `hcl:"user_claim,attr" validate:"required"`
	// UserClaimJsonPointer: bool, optional
	UserClaimJsonPointer terra.BoolValue `hcl:"user_claim_json_pointer,attr"`
	// VerboseOidcLogging: bool, optional
	VerboseOidcLogging terra.BoolValue `hcl:"verbose_oidc_logging,attr"`
}
type jwtAuthBackendRoleAttributes struct {
	ref terra.Reference
}

// AllowedRedirectUris returns a reference to field allowed_redirect_uris of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) AllowedRedirectUris() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](jabr.ref.Append("allowed_redirect_uris"))
}

// Backend returns a reference to field backend of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(jabr.ref.Append("backend"))
}

// BoundAudiences returns a reference to field bound_audiences of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) BoundAudiences() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](jabr.ref.Append("bound_audiences"))
}

// BoundClaims returns a reference to field bound_claims of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) BoundClaims() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](jabr.ref.Append("bound_claims"))
}

// BoundClaimsType returns a reference to field bound_claims_type of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) BoundClaimsType() terra.StringValue {
	return terra.ReferenceAsString(jabr.ref.Append("bound_claims_type"))
}

// BoundSubject returns a reference to field bound_subject of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) BoundSubject() terra.StringValue {
	return terra.ReferenceAsString(jabr.ref.Append("bound_subject"))
}

// ClaimMappings returns a reference to field claim_mappings of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) ClaimMappings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](jabr.ref.Append("claim_mappings"))
}

// ClockSkewLeeway returns a reference to field clock_skew_leeway of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) ClockSkewLeeway() terra.NumberValue {
	return terra.ReferenceAsNumber(jabr.ref.Append("clock_skew_leeway"))
}

// DisableBoundClaimsParsing returns a reference to field disable_bound_claims_parsing of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) DisableBoundClaimsParsing() terra.BoolValue {
	return terra.ReferenceAsBool(jabr.ref.Append("disable_bound_claims_parsing"))
}

// ExpirationLeeway returns a reference to field expiration_leeway of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) ExpirationLeeway() terra.NumberValue {
	return terra.ReferenceAsNumber(jabr.ref.Append("expiration_leeway"))
}

// GroupsClaim returns a reference to field groups_claim of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) GroupsClaim() terra.StringValue {
	return terra.ReferenceAsString(jabr.ref.Append("groups_claim"))
}

// Id returns a reference to field id of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(jabr.ref.Append("id"))
}

// MaxAge returns a reference to field max_age of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) MaxAge() terra.NumberValue {
	return terra.ReferenceAsNumber(jabr.ref.Append("max_age"))
}

// Namespace returns a reference to field namespace of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(jabr.ref.Append("namespace"))
}

// NotBeforeLeeway returns a reference to field not_before_leeway of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) NotBeforeLeeway() terra.NumberValue {
	return terra.ReferenceAsNumber(jabr.ref.Append("not_before_leeway"))
}

// OidcScopes returns a reference to field oidc_scopes of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) OidcScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](jabr.ref.Append("oidc_scopes"))
}

// RoleName returns a reference to field role_name of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) RoleName() terra.StringValue {
	return terra.ReferenceAsString(jabr.ref.Append("role_name"))
}

// RoleType returns a reference to field role_type of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) RoleType() terra.StringValue {
	return terra.ReferenceAsString(jabr.ref.Append("role_type"))
}

// TokenBoundCidrs returns a reference to field token_bound_cidrs of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) TokenBoundCidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](jabr.ref.Append("token_bound_cidrs"))
}

// TokenExplicitMaxTtl returns a reference to field token_explicit_max_ttl of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) TokenExplicitMaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(jabr.ref.Append("token_explicit_max_ttl"))
}

// TokenMaxTtl returns a reference to field token_max_ttl of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) TokenMaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(jabr.ref.Append("token_max_ttl"))
}

// TokenNoDefaultPolicy returns a reference to field token_no_default_policy of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) TokenNoDefaultPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(jabr.ref.Append("token_no_default_policy"))
}

// TokenNumUses returns a reference to field token_num_uses of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) TokenNumUses() terra.NumberValue {
	return terra.ReferenceAsNumber(jabr.ref.Append("token_num_uses"))
}

// TokenPeriod returns a reference to field token_period of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) TokenPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(jabr.ref.Append("token_period"))
}

// TokenPolicies returns a reference to field token_policies of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) TokenPolicies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](jabr.ref.Append("token_policies"))
}

// TokenTtl returns a reference to field token_ttl of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) TokenTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(jabr.ref.Append("token_ttl"))
}

// TokenType returns a reference to field token_type of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) TokenType() terra.StringValue {
	return terra.ReferenceAsString(jabr.ref.Append("token_type"))
}

// UserClaim returns a reference to field user_claim of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) UserClaim() terra.StringValue {
	return terra.ReferenceAsString(jabr.ref.Append("user_claim"))
}

// UserClaimJsonPointer returns a reference to field user_claim_json_pointer of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) UserClaimJsonPointer() terra.BoolValue {
	return terra.ReferenceAsBool(jabr.ref.Append("user_claim_json_pointer"))
}

// VerboseOidcLogging returns a reference to field verbose_oidc_logging of vault_jwt_auth_backend_role.
func (jabr jwtAuthBackendRoleAttributes) VerboseOidcLogging() terra.BoolValue {
	return terra.ReferenceAsBool(jabr.ref.Append("verbose_oidc_logging"))
}

type jwtAuthBackendRoleState struct {
	AllowedRedirectUris       []string          `json:"allowed_redirect_uris"`
	Backend                   string            `json:"backend"`
	BoundAudiences            []string          `json:"bound_audiences"`
	BoundClaims               map[string]string `json:"bound_claims"`
	BoundClaimsType           string            `json:"bound_claims_type"`
	BoundSubject              string            `json:"bound_subject"`
	ClaimMappings             map[string]string `json:"claim_mappings"`
	ClockSkewLeeway           float64           `json:"clock_skew_leeway"`
	DisableBoundClaimsParsing bool              `json:"disable_bound_claims_parsing"`
	ExpirationLeeway          float64           `json:"expiration_leeway"`
	GroupsClaim               string            `json:"groups_claim"`
	Id                        string            `json:"id"`
	MaxAge                    float64           `json:"max_age"`
	Namespace                 string            `json:"namespace"`
	NotBeforeLeeway           float64           `json:"not_before_leeway"`
	OidcScopes                []string          `json:"oidc_scopes"`
	RoleName                  string            `json:"role_name"`
	RoleType                  string            `json:"role_type"`
	TokenBoundCidrs           []string          `json:"token_bound_cidrs"`
	TokenExplicitMaxTtl       float64           `json:"token_explicit_max_ttl"`
	TokenMaxTtl               float64           `json:"token_max_ttl"`
	TokenNoDefaultPolicy      bool              `json:"token_no_default_policy"`
	TokenNumUses              float64           `json:"token_num_uses"`
	TokenPeriod               float64           `json:"token_period"`
	TokenPolicies             []string          `json:"token_policies"`
	TokenTtl                  float64           `json:"token_ttl"`
	TokenType                 string            `json:"token_type"`
	UserClaim                 string            `json:"user_claim"`
	UserClaimJsonPointer      bool              `json:"user_claim_json_pointer"`
	VerboseOidcLogging        bool              `json:"verbose_oidc_logging"`
}
