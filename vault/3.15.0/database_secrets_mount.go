// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	databasesecretsmount "github.com/golingon/terraproviders/vault/3.15.0/databasesecretsmount"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDatabaseSecretsMount creates a new instance of [DatabaseSecretsMount].
func NewDatabaseSecretsMount(name string, args DatabaseSecretsMountArgs) *DatabaseSecretsMount {
	return &DatabaseSecretsMount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatabaseSecretsMount)(nil)

// DatabaseSecretsMount represents the Terraform resource vault_database_secrets_mount.
type DatabaseSecretsMount struct {
	Name      string
	Args      DatabaseSecretsMountArgs
	state     *databaseSecretsMountState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DatabaseSecretsMount].
func (dsm *DatabaseSecretsMount) Type() string {
	return "vault_database_secrets_mount"
}

// LocalName returns the local name for [DatabaseSecretsMount].
func (dsm *DatabaseSecretsMount) LocalName() string {
	return dsm.Name
}

// Configuration returns the configuration (args) for [DatabaseSecretsMount].
func (dsm *DatabaseSecretsMount) Configuration() interface{} {
	return dsm.Args
}

// DependOn is used for other resources to depend on [DatabaseSecretsMount].
func (dsm *DatabaseSecretsMount) DependOn() terra.Reference {
	return terra.ReferenceResource(dsm)
}

// Dependencies returns the list of resources [DatabaseSecretsMount] depends_on.
func (dsm *DatabaseSecretsMount) Dependencies() terra.Dependencies {
	return dsm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DatabaseSecretsMount].
func (dsm *DatabaseSecretsMount) LifecycleManagement() *terra.Lifecycle {
	return dsm.Lifecycle
}

// Attributes returns the attributes for [DatabaseSecretsMount].
func (dsm *DatabaseSecretsMount) Attributes() databaseSecretsMountAttributes {
	return databaseSecretsMountAttributes{ref: terra.ReferenceResource(dsm)}
}

// ImportState imports the given attribute values into [DatabaseSecretsMount]'s state.
func (dsm *DatabaseSecretsMount) ImportState(av io.Reader) error {
	dsm.state = &databaseSecretsMountState{}
	if err := json.NewDecoder(av).Decode(dsm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dsm.Type(), dsm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DatabaseSecretsMount] has state.
func (dsm *DatabaseSecretsMount) State() (*databaseSecretsMountState, bool) {
	return dsm.state, dsm.state != nil
}

// StateMust returns the state for [DatabaseSecretsMount]. Panics if the state is nil.
func (dsm *DatabaseSecretsMount) StateMust() *databaseSecretsMountState {
	if dsm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dsm.Type(), dsm.LocalName()))
	}
	return dsm.state
}

// DatabaseSecretsMountArgs contains the configurations for vault_database_secrets_mount.
type DatabaseSecretsMountArgs struct {
	// AllowedManagedKeys: set of string, optional
	AllowedManagedKeys terra.SetValue[terra.StringValue] `hcl:"allowed_managed_keys,attr"`
	// AuditNonHmacRequestKeys: list of string, optional
	AuditNonHmacRequestKeys terra.ListValue[terra.StringValue] `hcl:"audit_non_hmac_request_keys,attr"`
	// AuditNonHmacResponseKeys: list of string, optional
	AuditNonHmacResponseKeys terra.ListValue[terra.StringValue] `hcl:"audit_non_hmac_response_keys,attr"`
	// DefaultLeaseTtlSeconds: number, optional
	DefaultLeaseTtlSeconds terra.NumberValue `hcl:"default_lease_ttl_seconds,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExternalEntropyAccess: bool, optional
	ExternalEntropyAccess terra.BoolValue `hcl:"external_entropy_access,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Local: bool, optional
	Local terra.BoolValue `hcl:"local,attr"`
	// MaxLeaseTtlSeconds: number, optional
	MaxLeaseTtlSeconds terra.NumberValue `hcl:"max_lease_ttl_seconds,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Options: map of string, optional
	Options terra.MapValue[terra.StringValue] `hcl:"options,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// SealWrap: bool, optional
	SealWrap terra.BoolValue `hcl:"seal_wrap,attr"`
	// Cassandra: min=0
	Cassandra []databasesecretsmount.Cassandra `hcl:"cassandra,block" validate:"min=0"`
	// Couchbase: min=0
	Couchbase []databasesecretsmount.Couchbase `hcl:"couchbase,block" validate:"min=0"`
	// Elasticsearch: min=0
	Elasticsearch []databasesecretsmount.Elasticsearch `hcl:"elasticsearch,block" validate:"min=0"`
	// Hana: min=0
	Hana []databasesecretsmount.Hana `hcl:"hana,block" validate:"min=0"`
	// Influxdb: min=0
	Influxdb []databasesecretsmount.Influxdb `hcl:"influxdb,block" validate:"min=0"`
	// Mongodb: min=0
	Mongodb []databasesecretsmount.Mongodb `hcl:"mongodb,block" validate:"min=0"`
	// Mongodbatlas: min=0
	Mongodbatlas []databasesecretsmount.Mongodbatlas `hcl:"mongodbatlas,block" validate:"min=0"`
	// Mssql: min=0
	Mssql []databasesecretsmount.Mssql `hcl:"mssql,block" validate:"min=0"`
	// Mysql: min=0
	Mysql []databasesecretsmount.Mysql `hcl:"mysql,block" validate:"min=0"`
	// MysqlAurora: min=0
	MysqlAurora []databasesecretsmount.MysqlAurora `hcl:"mysql_aurora,block" validate:"min=0"`
	// MysqlLegacy: min=0
	MysqlLegacy []databasesecretsmount.MysqlLegacy `hcl:"mysql_legacy,block" validate:"min=0"`
	// MysqlRds: min=0
	MysqlRds []databasesecretsmount.MysqlRds `hcl:"mysql_rds,block" validate:"min=0"`
	// Oracle: min=0
	Oracle []databasesecretsmount.Oracle `hcl:"oracle,block" validate:"min=0"`
	// Postgresql: min=0
	Postgresql []databasesecretsmount.Postgresql `hcl:"postgresql,block" validate:"min=0"`
	// Redis: min=0
	Redis []databasesecretsmount.Redis `hcl:"redis,block" validate:"min=0"`
	// RedisElasticache: min=0
	RedisElasticache []databasesecretsmount.RedisElasticache `hcl:"redis_elasticache,block" validate:"min=0"`
	// Redshift: min=0
	Redshift []databasesecretsmount.Redshift `hcl:"redshift,block" validate:"min=0"`
	// Snowflake: min=0
	Snowflake []databasesecretsmount.Snowflake `hcl:"snowflake,block" validate:"min=0"`
}
type databaseSecretsMountAttributes struct {
	ref terra.Reference
}

// Accessor returns a reference to field accessor of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) Accessor() terra.StringValue {
	return terra.ReferenceAsString(dsm.ref.Append("accessor"))
}

// AllowedManagedKeys returns a reference to field allowed_managed_keys of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) AllowedManagedKeys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dsm.ref.Append("allowed_managed_keys"))
}

// AuditNonHmacRequestKeys returns a reference to field audit_non_hmac_request_keys of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) AuditNonHmacRequestKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dsm.ref.Append("audit_non_hmac_request_keys"))
}

// AuditNonHmacResponseKeys returns a reference to field audit_non_hmac_response_keys of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) AuditNonHmacResponseKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dsm.ref.Append("audit_non_hmac_response_keys"))
}

// DefaultLeaseTtlSeconds returns a reference to field default_lease_ttl_seconds of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) DefaultLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(dsm.ref.Append("default_lease_ttl_seconds"))
}

// Description returns a reference to field description of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(dsm.ref.Append("description"))
}

// EngineCount returns a reference to field engine_count of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) EngineCount() terra.NumberValue {
	return terra.ReferenceAsNumber(dsm.ref.Append("engine_count"))
}

// ExternalEntropyAccess returns a reference to field external_entropy_access of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) ExternalEntropyAccess() terra.BoolValue {
	return terra.ReferenceAsBool(dsm.ref.Append("external_entropy_access"))
}

// Id returns a reference to field id of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dsm.ref.Append("id"))
}

// Local returns a reference to field local of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) Local() terra.BoolValue {
	return terra.ReferenceAsBool(dsm.ref.Append("local"))
}

// MaxLeaseTtlSeconds returns a reference to field max_lease_ttl_seconds of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) MaxLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(dsm.ref.Append("max_lease_ttl_seconds"))
}

// Namespace returns a reference to field namespace of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(dsm.ref.Append("namespace"))
}

// Options returns a reference to field options of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) Options() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dsm.ref.Append("options"))
}

// Path returns a reference to field path of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(dsm.ref.Append("path"))
}

// SealWrap returns a reference to field seal_wrap of vault_database_secrets_mount.
func (dsm databaseSecretsMountAttributes) SealWrap() terra.BoolValue {
	return terra.ReferenceAsBool(dsm.ref.Append("seal_wrap"))
}

func (dsm databaseSecretsMountAttributes) Cassandra() terra.ListValue[databasesecretsmount.CassandraAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.CassandraAttributes](dsm.ref.Append("cassandra"))
}

func (dsm databaseSecretsMountAttributes) Couchbase() terra.ListValue[databasesecretsmount.CouchbaseAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.CouchbaseAttributes](dsm.ref.Append("couchbase"))
}

func (dsm databaseSecretsMountAttributes) Elasticsearch() terra.ListValue[databasesecretsmount.ElasticsearchAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.ElasticsearchAttributes](dsm.ref.Append("elasticsearch"))
}

func (dsm databaseSecretsMountAttributes) Hana() terra.ListValue[databasesecretsmount.HanaAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.HanaAttributes](dsm.ref.Append("hana"))
}

func (dsm databaseSecretsMountAttributes) Influxdb() terra.ListValue[databasesecretsmount.InfluxdbAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.InfluxdbAttributes](dsm.ref.Append("influxdb"))
}

func (dsm databaseSecretsMountAttributes) Mongodb() terra.ListValue[databasesecretsmount.MongodbAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.MongodbAttributes](dsm.ref.Append("mongodb"))
}

func (dsm databaseSecretsMountAttributes) Mongodbatlas() terra.ListValue[databasesecretsmount.MongodbatlasAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.MongodbatlasAttributes](dsm.ref.Append("mongodbatlas"))
}

func (dsm databaseSecretsMountAttributes) Mssql() terra.ListValue[databasesecretsmount.MssqlAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.MssqlAttributes](dsm.ref.Append("mssql"))
}

func (dsm databaseSecretsMountAttributes) Mysql() terra.ListValue[databasesecretsmount.MysqlAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.MysqlAttributes](dsm.ref.Append("mysql"))
}

func (dsm databaseSecretsMountAttributes) MysqlAurora() terra.ListValue[databasesecretsmount.MysqlAuroraAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.MysqlAuroraAttributes](dsm.ref.Append("mysql_aurora"))
}

func (dsm databaseSecretsMountAttributes) MysqlLegacy() terra.ListValue[databasesecretsmount.MysqlLegacyAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.MysqlLegacyAttributes](dsm.ref.Append("mysql_legacy"))
}

func (dsm databaseSecretsMountAttributes) MysqlRds() terra.ListValue[databasesecretsmount.MysqlRdsAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.MysqlRdsAttributes](dsm.ref.Append("mysql_rds"))
}

func (dsm databaseSecretsMountAttributes) Oracle() terra.ListValue[databasesecretsmount.OracleAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.OracleAttributes](dsm.ref.Append("oracle"))
}

func (dsm databaseSecretsMountAttributes) Postgresql() terra.ListValue[databasesecretsmount.PostgresqlAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.PostgresqlAttributes](dsm.ref.Append("postgresql"))
}

func (dsm databaseSecretsMountAttributes) Redis() terra.ListValue[databasesecretsmount.RedisAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.RedisAttributes](dsm.ref.Append("redis"))
}

func (dsm databaseSecretsMountAttributes) RedisElasticache() terra.ListValue[databasesecretsmount.RedisElasticacheAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.RedisElasticacheAttributes](dsm.ref.Append("redis_elasticache"))
}

func (dsm databaseSecretsMountAttributes) Redshift() terra.ListValue[databasesecretsmount.RedshiftAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.RedshiftAttributes](dsm.ref.Append("redshift"))
}

func (dsm databaseSecretsMountAttributes) Snowflake() terra.ListValue[databasesecretsmount.SnowflakeAttributes] {
	return terra.ReferenceAsList[databasesecretsmount.SnowflakeAttributes](dsm.ref.Append("snowflake"))
}

type databaseSecretsMountState struct {
	Accessor                 string                                       `json:"accessor"`
	AllowedManagedKeys       []string                                     `json:"allowed_managed_keys"`
	AuditNonHmacRequestKeys  []string                                     `json:"audit_non_hmac_request_keys"`
	AuditNonHmacResponseKeys []string                                     `json:"audit_non_hmac_response_keys"`
	DefaultLeaseTtlSeconds   float64                                      `json:"default_lease_ttl_seconds"`
	Description              string                                       `json:"description"`
	EngineCount              float64                                      `json:"engine_count"`
	ExternalEntropyAccess    bool                                         `json:"external_entropy_access"`
	Id                       string                                       `json:"id"`
	Local                    bool                                         `json:"local"`
	MaxLeaseTtlSeconds       float64                                      `json:"max_lease_ttl_seconds"`
	Namespace                string                                       `json:"namespace"`
	Options                  map[string]string                            `json:"options"`
	Path                     string                                       `json:"path"`
	SealWrap                 bool                                         `json:"seal_wrap"`
	Cassandra                []databasesecretsmount.CassandraState        `json:"cassandra"`
	Couchbase                []databasesecretsmount.CouchbaseState        `json:"couchbase"`
	Elasticsearch            []databasesecretsmount.ElasticsearchState    `json:"elasticsearch"`
	Hana                     []databasesecretsmount.HanaState             `json:"hana"`
	Influxdb                 []databasesecretsmount.InfluxdbState         `json:"influxdb"`
	Mongodb                  []databasesecretsmount.MongodbState          `json:"mongodb"`
	Mongodbatlas             []databasesecretsmount.MongodbatlasState     `json:"mongodbatlas"`
	Mssql                    []databasesecretsmount.MssqlState            `json:"mssql"`
	Mysql                    []databasesecretsmount.MysqlState            `json:"mysql"`
	MysqlAurora              []databasesecretsmount.MysqlAuroraState      `json:"mysql_aurora"`
	MysqlLegacy              []databasesecretsmount.MysqlLegacyState      `json:"mysql_legacy"`
	MysqlRds                 []databasesecretsmount.MysqlRdsState         `json:"mysql_rds"`
	Oracle                   []databasesecretsmount.OracleState           `json:"oracle"`
	Postgresql               []databasesecretsmount.PostgresqlState       `json:"postgresql"`
	Redis                    []databasesecretsmount.RedisState            `json:"redis"`
	RedisElasticache         []databasesecretsmount.RedisElasticacheState `json:"redis_elasticache"`
	Redshift                 []databasesecretsmount.RedshiftState         `json:"redshift"`
	Snowflake                []databasesecretsmount.SnowflakeState        `json:"snowflake"`
}
