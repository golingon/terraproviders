// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	pkisecretbackendrole "github.com/golingon/terraproviders/vault/3.15.0/pkisecretbackendrole"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewPkiSecretBackendRole creates a new instance of [PkiSecretBackendRole].
func NewPkiSecretBackendRole(name string, args PkiSecretBackendRoleArgs) *PkiSecretBackendRole {
	return &PkiSecretBackendRole{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PkiSecretBackendRole)(nil)

// PkiSecretBackendRole represents the Terraform resource vault_pki_secret_backend_role.
type PkiSecretBackendRole struct {
	Name      string
	Args      PkiSecretBackendRoleArgs
	state     *pkiSecretBackendRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [PkiSecretBackendRole].
func (psbr *PkiSecretBackendRole) Type() string {
	return "vault_pki_secret_backend_role"
}

// LocalName returns the local name for [PkiSecretBackendRole].
func (psbr *PkiSecretBackendRole) LocalName() string {
	return psbr.Name
}

// Configuration returns the configuration (args) for [PkiSecretBackendRole].
func (psbr *PkiSecretBackendRole) Configuration() interface{} {
	return psbr.Args
}

// DependOn is used for other resources to depend on [PkiSecretBackendRole].
func (psbr *PkiSecretBackendRole) DependOn() terra.Reference {
	return terra.ReferenceResource(psbr)
}

// Dependencies returns the list of resources [PkiSecretBackendRole] depends_on.
func (psbr *PkiSecretBackendRole) Dependencies() terra.Dependencies {
	return psbr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [PkiSecretBackendRole].
func (psbr *PkiSecretBackendRole) LifecycleManagement() *terra.Lifecycle {
	return psbr.Lifecycle
}

// Attributes returns the attributes for [PkiSecretBackendRole].
func (psbr *PkiSecretBackendRole) Attributes() pkiSecretBackendRoleAttributes {
	return pkiSecretBackendRoleAttributes{ref: terra.ReferenceResource(psbr)}
}

// ImportState imports the given attribute values into [PkiSecretBackendRole]'s state.
func (psbr *PkiSecretBackendRole) ImportState(av io.Reader) error {
	psbr.state = &pkiSecretBackendRoleState{}
	if err := json.NewDecoder(av).Decode(psbr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", psbr.Type(), psbr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [PkiSecretBackendRole] has state.
func (psbr *PkiSecretBackendRole) State() (*pkiSecretBackendRoleState, bool) {
	return psbr.state, psbr.state != nil
}

// StateMust returns the state for [PkiSecretBackendRole]. Panics if the state is nil.
func (psbr *PkiSecretBackendRole) StateMust() *pkiSecretBackendRoleState {
	if psbr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", psbr.Type(), psbr.LocalName()))
	}
	return psbr.state
}

// PkiSecretBackendRoleArgs contains the configurations for vault_pki_secret_backend_role.
type PkiSecretBackendRoleArgs struct {
	// AllowAnyName: bool, optional
	AllowAnyName terra.BoolValue `hcl:"allow_any_name,attr"`
	// AllowBareDomains: bool, optional
	AllowBareDomains terra.BoolValue `hcl:"allow_bare_domains,attr"`
	// AllowGlobDomains: bool, optional
	AllowGlobDomains terra.BoolValue `hcl:"allow_glob_domains,attr"`
	// AllowIpSans: bool, optional
	AllowIpSans terra.BoolValue `hcl:"allow_ip_sans,attr"`
	// AllowLocalhost: bool, optional
	AllowLocalhost terra.BoolValue `hcl:"allow_localhost,attr"`
	// AllowSubdomains: bool, optional
	AllowSubdomains terra.BoolValue `hcl:"allow_subdomains,attr"`
	// AllowedDomains: list of string, optional
	AllowedDomains terra.ListValue[terra.StringValue] `hcl:"allowed_domains,attr"`
	// AllowedDomainsTemplate: bool, optional
	AllowedDomainsTemplate terra.BoolValue `hcl:"allowed_domains_template,attr"`
	// AllowedOtherSans: list of string, optional
	AllowedOtherSans terra.ListValue[terra.StringValue] `hcl:"allowed_other_sans,attr"`
	// AllowedSerialNumbers: list of string, optional
	AllowedSerialNumbers terra.ListValue[terra.StringValue] `hcl:"allowed_serial_numbers,attr"`
	// AllowedUriSans: list of string, optional
	AllowedUriSans terra.ListValue[terra.StringValue] `hcl:"allowed_uri_sans,attr"`
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// BasicConstraintsValidForNonCa: bool, optional
	BasicConstraintsValidForNonCa terra.BoolValue `hcl:"basic_constraints_valid_for_non_ca,attr"`
	// ClientFlag: bool, optional
	ClientFlag terra.BoolValue `hcl:"client_flag,attr"`
	// CodeSigningFlag: bool, optional
	CodeSigningFlag terra.BoolValue `hcl:"code_signing_flag,attr"`
	// Country: list of string, optional
	Country terra.ListValue[terra.StringValue] `hcl:"country,attr"`
	// EmailProtectionFlag: bool, optional
	EmailProtectionFlag terra.BoolValue `hcl:"email_protection_flag,attr"`
	// EnforceHostnames: bool, optional
	EnforceHostnames terra.BoolValue `hcl:"enforce_hostnames,attr"`
	// ExtKeyUsage: list of string, optional
	ExtKeyUsage terra.ListValue[terra.StringValue] `hcl:"ext_key_usage,attr"`
	// GenerateLease: bool, optional
	GenerateLease terra.BoolValue `hcl:"generate_lease,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyBits: number, optional
	KeyBits terra.NumberValue `hcl:"key_bits,attr"`
	// KeyType: string, optional
	KeyType terra.StringValue `hcl:"key_type,attr"`
	// KeyUsage: list of string, optional
	KeyUsage terra.ListValue[terra.StringValue] `hcl:"key_usage,attr"`
	// Locality: list of string, optional
	Locality terra.ListValue[terra.StringValue] `hcl:"locality,attr"`
	// MaxTtl: string, optional
	MaxTtl terra.StringValue `hcl:"max_ttl,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// NoStore: bool, optional
	NoStore terra.BoolValue `hcl:"no_store,attr"`
	// NotBeforeDuration: string, optional
	NotBeforeDuration terra.StringValue `hcl:"not_before_duration,attr"`
	// Organization: list of string, optional
	Organization terra.ListValue[terra.StringValue] `hcl:"organization,attr"`
	// Ou: list of string, optional
	Ou terra.ListValue[terra.StringValue] `hcl:"ou,attr"`
	// PolicyIdentifiers: list of string, optional
	PolicyIdentifiers terra.ListValue[terra.StringValue] `hcl:"policy_identifiers,attr"`
	// PostalCode: list of string, optional
	PostalCode terra.ListValue[terra.StringValue] `hcl:"postal_code,attr"`
	// Province: list of string, optional
	Province terra.ListValue[terra.StringValue] `hcl:"province,attr"`
	// RequireCn: bool, optional
	RequireCn terra.BoolValue `hcl:"require_cn,attr"`
	// ServerFlag: bool, optional
	ServerFlag terra.BoolValue `hcl:"server_flag,attr"`
	// StreetAddress: list of string, optional
	StreetAddress terra.ListValue[terra.StringValue] `hcl:"street_address,attr"`
	// Ttl: string, optional
	Ttl terra.StringValue `hcl:"ttl,attr"`
	// UseCsrCommonName: bool, optional
	UseCsrCommonName terra.BoolValue `hcl:"use_csr_common_name,attr"`
	// UseCsrSans: bool, optional
	UseCsrSans terra.BoolValue `hcl:"use_csr_sans,attr"`
	// PolicyIdentifier: min=0
	PolicyIdentifier []pkisecretbackendrole.PolicyIdentifier `hcl:"policy_identifier,block" validate:"min=0"`
}
type pkiSecretBackendRoleAttributes struct {
	ref terra.Reference
}

// AllowAnyName returns a reference to field allow_any_name of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) AllowAnyName() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("allow_any_name"))
}

// AllowBareDomains returns a reference to field allow_bare_domains of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) AllowBareDomains() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("allow_bare_domains"))
}

// AllowGlobDomains returns a reference to field allow_glob_domains of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) AllowGlobDomains() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("allow_glob_domains"))
}

// AllowIpSans returns a reference to field allow_ip_sans of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) AllowIpSans() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("allow_ip_sans"))
}

// AllowLocalhost returns a reference to field allow_localhost of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) AllowLocalhost() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("allow_localhost"))
}

// AllowSubdomains returns a reference to field allow_subdomains of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) AllowSubdomains() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("allow_subdomains"))
}

// AllowedDomains returns a reference to field allowed_domains of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) AllowedDomains() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbr.ref.Append("allowed_domains"))
}

// AllowedDomainsTemplate returns a reference to field allowed_domains_template of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) AllowedDomainsTemplate() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("allowed_domains_template"))
}

// AllowedOtherSans returns a reference to field allowed_other_sans of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) AllowedOtherSans() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbr.ref.Append("allowed_other_sans"))
}

// AllowedSerialNumbers returns a reference to field allowed_serial_numbers of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) AllowedSerialNumbers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbr.ref.Append("allowed_serial_numbers"))
}

// AllowedUriSans returns a reference to field allowed_uri_sans of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) AllowedUriSans() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbr.ref.Append("allowed_uri_sans"))
}

// Backend returns a reference to field backend of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(psbr.ref.Append("backend"))
}

// BasicConstraintsValidForNonCa returns a reference to field basic_constraints_valid_for_non_ca of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) BasicConstraintsValidForNonCa() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("basic_constraints_valid_for_non_ca"))
}

// ClientFlag returns a reference to field client_flag of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) ClientFlag() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("client_flag"))
}

// CodeSigningFlag returns a reference to field code_signing_flag of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) CodeSigningFlag() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("code_signing_flag"))
}

// Country returns a reference to field country of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) Country() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbr.ref.Append("country"))
}

// EmailProtectionFlag returns a reference to field email_protection_flag of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) EmailProtectionFlag() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("email_protection_flag"))
}

// EnforceHostnames returns a reference to field enforce_hostnames of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) EnforceHostnames() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("enforce_hostnames"))
}

// ExtKeyUsage returns a reference to field ext_key_usage of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) ExtKeyUsage() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbr.ref.Append("ext_key_usage"))
}

// GenerateLease returns a reference to field generate_lease of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) GenerateLease() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("generate_lease"))
}

// Id returns a reference to field id of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(psbr.ref.Append("id"))
}

// KeyBits returns a reference to field key_bits of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) KeyBits() terra.NumberValue {
	return terra.ReferenceAsNumber(psbr.ref.Append("key_bits"))
}

// KeyType returns a reference to field key_type of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) KeyType() terra.StringValue {
	return terra.ReferenceAsString(psbr.ref.Append("key_type"))
}

// KeyUsage returns a reference to field key_usage of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) KeyUsage() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbr.ref.Append("key_usage"))
}

// Locality returns a reference to field locality of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) Locality() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbr.ref.Append("locality"))
}

// MaxTtl returns a reference to field max_ttl of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) MaxTtl() terra.StringValue {
	return terra.ReferenceAsString(psbr.ref.Append("max_ttl"))
}

// Name returns a reference to field name of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(psbr.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(psbr.ref.Append("namespace"))
}

// NoStore returns a reference to field no_store of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) NoStore() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("no_store"))
}

// NotBeforeDuration returns a reference to field not_before_duration of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) NotBeforeDuration() terra.StringValue {
	return terra.ReferenceAsString(psbr.ref.Append("not_before_duration"))
}

// Organization returns a reference to field organization of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) Organization() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbr.ref.Append("organization"))
}

// Ou returns a reference to field ou of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) Ou() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbr.ref.Append("ou"))
}

// PolicyIdentifiers returns a reference to field policy_identifiers of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) PolicyIdentifiers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbr.ref.Append("policy_identifiers"))
}

// PostalCode returns a reference to field postal_code of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) PostalCode() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbr.ref.Append("postal_code"))
}

// Province returns a reference to field province of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) Province() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbr.ref.Append("province"))
}

// RequireCn returns a reference to field require_cn of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) RequireCn() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("require_cn"))
}

// ServerFlag returns a reference to field server_flag of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) ServerFlag() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("server_flag"))
}

// StreetAddress returns a reference to field street_address of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) StreetAddress() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbr.ref.Append("street_address"))
}

// Ttl returns a reference to field ttl of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) Ttl() terra.StringValue {
	return terra.ReferenceAsString(psbr.ref.Append("ttl"))
}

// UseCsrCommonName returns a reference to field use_csr_common_name of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) UseCsrCommonName() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("use_csr_common_name"))
}

// UseCsrSans returns a reference to field use_csr_sans of vault_pki_secret_backend_role.
func (psbr pkiSecretBackendRoleAttributes) UseCsrSans() terra.BoolValue {
	return terra.ReferenceAsBool(psbr.ref.Append("use_csr_sans"))
}

func (psbr pkiSecretBackendRoleAttributes) PolicyIdentifier() terra.SetValue[pkisecretbackendrole.PolicyIdentifierAttributes] {
	return terra.ReferenceAsSet[pkisecretbackendrole.PolicyIdentifierAttributes](psbr.ref.Append("policy_identifier"))
}

type pkiSecretBackendRoleState struct {
	AllowAnyName                  bool                                         `json:"allow_any_name"`
	AllowBareDomains              bool                                         `json:"allow_bare_domains"`
	AllowGlobDomains              bool                                         `json:"allow_glob_domains"`
	AllowIpSans                   bool                                         `json:"allow_ip_sans"`
	AllowLocalhost                bool                                         `json:"allow_localhost"`
	AllowSubdomains               bool                                         `json:"allow_subdomains"`
	AllowedDomains                []string                                     `json:"allowed_domains"`
	AllowedDomainsTemplate        bool                                         `json:"allowed_domains_template"`
	AllowedOtherSans              []string                                     `json:"allowed_other_sans"`
	AllowedSerialNumbers          []string                                     `json:"allowed_serial_numbers"`
	AllowedUriSans                []string                                     `json:"allowed_uri_sans"`
	Backend                       string                                       `json:"backend"`
	BasicConstraintsValidForNonCa bool                                         `json:"basic_constraints_valid_for_non_ca"`
	ClientFlag                    bool                                         `json:"client_flag"`
	CodeSigningFlag               bool                                         `json:"code_signing_flag"`
	Country                       []string                                     `json:"country"`
	EmailProtectionFlag           bool                                         `json:"email_protection_flag"`
	EnforceHostnames              bool                                         `json:"enforce_hostnames"`
	ExtKeyUsage                   []string                                     `json:"ext_key_usage"`
	GenerateLease                 bool                                         `json:"generate_lease"`
	Id                            string                                       `json:"id"`
	KeyBits                       float64                                      `json:"key_bits"`
	KeyType                       string                                       `json:"key_type"`
	KeyUsage                      []string                                     `json:"key_usage"`
	Locality                      []string                                     `json:"locality"`
	MaxTtl                        string                                       `json:"max_ttl"`
	Name                          string                                       `json:"name"`
	Namespace                     string                                       `json:"namespace"`
	NoStore                       bool                                         `json:"no_store"`
	NotBeforeDuration             string                                       `json:"not_before_duration"`
	Organization                  []string                                     `json:"organization"`
	Ou                            []string                                     `json:"ou"`
	PolicyIdentifiers             []string                                     `json:"policy_identifiers"`
	PostalCode                    []string                                     `json:"postal_code"`
	Province                      []string                                     `json:"province"`
	RequireCn                     bool                                         `json:"require_cn"`
	ServerFlag                    bool                                         `json:"server_flag"`
	StreetAddress                 []string                                     `json:"street_address"`
	Ttl                           string                                       `json:"ttl"`
	UseCsrCommonName              bool                                         `json:"use_csr_common_name"`
	UseCsrSans                    bool                                         `json:"use_csr_sans"`
	PolicyIdentifier              []pkisecretbackendrole.PolicyIdentifierState `json:"policy_identifier"`
}
