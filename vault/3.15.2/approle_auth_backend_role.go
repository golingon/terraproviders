// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewApproleAuthBackendRole creates a new instance of [ApproleAuthBackendRole].
func NewApproleAuthBackendRole(name string, args ApproleAuthBackendRoleArgs) *ApproleAuthBackendRole {
	return &ApproleAuthBackendRole{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApproleAuthBackendRole)(nil)

// ApproleAuthBackendRole represents the Terraform resource vault_approle_auth_backend_role.
type ApproleAuthBackendRole struct {
	Name      string
	Args      ApproleAuthBackendRoleArgs
	state     *approleAuthBackendRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApproleAuthBackendRole].
func (aabr *ApproleAuthBackendRole) Type() string {
	return "vault_approle_auth_backend_role"
}

// LocalName returns the local name for [ApproleAuthBackendRole].
func (aabr *ApproleAuthBackendRole) LocalName() string {
	return aabr.Name
}

// Configuration returns the configuration (args) for [ApproleAuthBackendRole].
func (aabr *ApproleAuthBackendRole) Configuration() interface{} {
	return aabr.Args
}

// DependOn is used for other resources to depend on [ApproleAuthBackendRole].
func (aabr *ApproleAuthBackendRole) DependOn() terra.Reference {
	return terra.ReferenceResource(aabr)
}

// Dependencies returns the list of resources [ApproleAuthBackendRole] depends_on.
func (aabr *ApproleAuthBackendRole) Dependencies() terra.Dependencies {
	return aabr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApproleAuthBackendRole].
func (aabr *ApproleAuthBackendRole) LifecycleManagement() *terra.Lifecycle {
	return aabr.Lifecycle
}

// Attributes returns the attributes for [ApproleAuthBackendRole].
func (aabr *ApproleAuthBackendRole) Attributes() approleAuthBackendRoleAttributes {
	return approleAuthBackendRoleAttributes{ref: terra.ReferenceResource(aabr)}
}

// ImportState imports the given attribute values into [ApproleAuthBackendRole]'s state.
func (aabr *ApproleAuthBackendRole) ImportState(av io.Reader) error {
	aabr.state = &approleAuthBackendRoleState{}
	if err := json.NewDecoder(av).Decode(aabr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aabr.Type(), aabr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApproleAuthBackendRole] has state.
func (aabr *ApproleAuthBackendRole) State() (*approleAuthBackendRoleState, bool) {
	return aabr.state, aabr.state != nil
}

// StateMust returns the state for [ApproleAuthBackendRole]. Panics if the state is nil.
func (aabr *ApproleAuthBackendRole) StateMust() *approleAuthBackendRoleState {
	if aabr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aabr.Type(), aabr.LocalName()))
	}
	return aabr.state
}

// ApproleAuthBackendRoleArgs contains the configurations for vault_approle_auth_backend_role.
type ApproleAuthBackendRoleArgs struct {
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// BindSecretId: bool, optional
	BindSecretId terra.BoolValue `hcl:"bind_secret_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// RoleId: string, optional
	RoleId terra.StringValue `hcl:"role_id,attr"`
	// RoleName: string, required
	RoleName terra.StringValue `hcl:"role_name,attr" validate:"required"`
	// SecretIdBoundCidrs: set of string, optional
	SecretIdBoundCidrs terra.SetValue[terra.StringValue] `hcl:"secret_id_bound_cidrs,attr"`
	// SecretIdNumUses: number, optional
	SecretIdNumUses terra.NumberValue `hcl:"secret_id_num_uses,attr"`
	// SecretIdTtl: number, optional
	SecretIdTtl terra.NumberValue `hcl:"secret_id_ttl,attr"`
	// TokenBoundCidrs: set of string, optional
	TokenBoundCidrs terra.SetValue[terra.StringValue] `hcl:"token_bound_cidrs,attr"`
	// TokenExplicitMaxTtl: number, optional
	TokenExplicitMaxTtl terra.NumberValue `hcl:"token_explicit_max_ttl,attr"`
	// TokenMaxTtl: number, optional
	TokenMaxTtl terra.NumberValue `hcl:"token_max_ttl,attr"`
	// TokenNoDefaultPolicy: bool, optional
	TokenNoDefaultPolicy terra.BoolValue `hcl:"token_no_default_policy,attr"`
	// TokenNumUses: number, optional
	TokenNumUses terra.NumberValue `hcl:"token_num_uses,attr"`
	// TokenPeriod: number, optional
	TokenPeriod terra.NumberValue `hcl:"token_period,attr"`
	// TokenPolicies: set of string, optional
	TokenPolicies terra.SetValue[terra.StringValue] `hcl:"token_policies,attr"`
	// TokenTtl: number, optional
	TokenTtl terra.NumberValue `hcl:"token_ttl,attr"`
	// TokenType: string, optional
	TokenType terra.StringValue `hcl:"token_type,attr"`
}
type approleAuthBackendRoleAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(aabr.ref.Append("backend"))
}

// BindSecretId returns a reference to field bind_secret_id of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) BindSecretId() terra.BoolValue {
	return terra.ReferenceAsBool(aabr.ref.Append("bind_secret_id"))
}

// Id returns a reference to field id of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aabr.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(aabr.ref.Append("namespace"))
}

// RoleId returns a reference to field role_id of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) RoleId() terra.StringValue {
	return terra.ReferenceAsString(aabr.ref.Append("role_id"))
}

// RoleName returns a reference to field role_name of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) RoleName() terra.StringValue {
	return terra.ReferenceAsString(aabr.ref.Append("role_name"))
}

// SecretIdBoundCidrs returns a reference to field secret_id_bound_cidrs of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) SecretIdBoundCidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aabr.ref.Append("secret_id_bound_cidrs"))
}

// SecretIdNumUses returns a reference to field secret_id_num_uses of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) SecretIdNumUses() terra.NumberValue {
	return terra.ReferenceAsNumber(aabr.ref.Append("secret_id_num_uses"))
}

// SecretIdTtl returns a reference to field secret_id_ttl of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) SecretIdTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(aabr.ref.Append("secret_id_ttl"))
}

// TokenBoundCidrs returns a reference to field token_bound_cidrs of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) TokenBoundCidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aabr.ref.Append("token_bound_cidrs"))
}

// TokenExplicitMaxTtl returns a reference to field token_explicit_max_ttl of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) TokenExplicitMaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(aabr.ref.Append("token_explicit_max_ttl"))
}

// TokenMaxTtl returns a reference to field token_max_ttl of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) TokenMaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(aabr.ref.Append("token_max_ttl"))
}

// TokenNoDefaultPolicy returns a reference to field token_no_default_policy of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) TokenNoDefaultPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(aabr.ref.Append("token_no_default_policy"))
}

// TokenNumUses returns a reference to field token_num_uses of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) TokenNumUses() terra.NumberValue {
	return terra.ReferenceAsNumber(aabr.ref.Append("token_num_uses"))
}

// TokenPeriod returns a reference to field token_period of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) TokenPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(aabr.ref.Append("token_period"))
}

// TokenPolicies returns a reference to field token_policies of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) TokenPolicies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aabr.ref.Append("token_policies"))
}

// TokenTtl returns a reference to field token_ttl of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) TokenTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(aabr.ref.Append("token_ttl"))
}

// TokenType returns a reference to field token_type of vault_approle_auth_backend_role.
func (aabr approleAuthBackendRoleAttributes) TokenType() terra.StringValue {
	return terra.ReferenceAsString(aabr.ref.Append("token_type"))
}

type approleAuthBackendRoleState struct {
	Backend              string   `json:"backend"`
	BindSecretId         bool     `json:"bind_secret_id"`
	Id                   string   `json:"id"`
	Namespace            string   `json:"namespace"`
	RoleId               string   `json:"role_id"`
	RoleName             string   `json:"role_name"`
	SecretIdBoundCidrs   []string `json:"secret_id_bound_cidrs"`
	SecretIdNumUses      float64  `json:"secret_id_num_uses"`
	SecretIdTtl          float64  `json:"secret_id_ttl"`
	TokenBoundCidrs      []string `json:"token_bound_cidrs"`
	TokenExplicitMaxTtl  float64  `json:"token_explicit_max_ttl"`
	TokenMaxTtl          float64  `json:"token_max_ttl"`
	TokenNoDefaultPolicy bool     `json:"token_no_default_policy"`
	TokenNumUses         float64  `json:"token_num_uses"`
	TokenPeriod          float64  `json:"token_period"`
	TokenPolicies        []string `json:"token_policies"`
	TokenTtl             float64  `json:"token_ttl"`
	TokenType            string   `json:"token_type"`
}
