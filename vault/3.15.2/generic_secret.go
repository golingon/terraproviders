// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGenericSecret creates a new instance of [GenericSecret].
func NewGenericSecret(name string, args GenericSecretArgs) *GenericSecret {
	return &GenericSecret{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GenericSecret)(nil)

// GenericSecret represents the Terraform resource vault_generic_secret.
type GenericSecret struct {
	Name      string
	Args      GenericSecretArgs
	state     *genericSecretState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GenericSecret].
func (gs *GenericSecret) Type() string {
	return "vault_generic_secret"
}

// LocalName returns the local name for [GenericSecret].
func (gs *GenericSecret) LocalName() string {
	return gs.Name
}

// Configuration returns the configuration (args) for [GenericSecret].
func (gs *GenericSecret) Configuration() interface{} {
	return gs.Args
}

// DependOn is used for other resources to depend on [GenericSecret].
func (gs *GenericSecret) DependOn() terra.Reference {
	return terra.ReferenceResource(gs)
}

// Dependencies returns the list of resources [GenericSecret] depends_on.
func (gs *GenericSecret) Dependencies() terra.Dependencies {
	return gs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GenericSecret].
func (gs *GenericSecret) LifecycleManagement() *terra.Lifecycle {
	return gs.Lifecycle
}

// Attributes returns the attributes for [GenericSecret].
func (gs *GenericSecret) Attributes() genericSecretAttributes {
	return genericSecretAttributes{ref: terra.ReferenceResource(gs)}
}

// ImportState imports the given attribute values into [GenericSecret]'s state.
func (gs *GenericSecret) ImportState(av io.Reader) error {
	gs.state = &genericSecretState{}
	if err := json.NewDecoder(av).Decode(gs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gs.Type(), gs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GenericSecret] has state.
func (gs *GenericSecret) State() (*genericSecretState, bool) {
	return gs.state, gs.state != nil
}

// StateMust returns the state for [GenericSecret]. Panics if the state is nil.
func (gs *GenericSecret) StateMust() *genericSecretState {
	if gs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gs.Type(), gs.LocalName()))
	}
	return gs.state
}

// GenericSecretArgs contains the configurations for vault_generic_secret.
type GenericSecretArgs struct {
	// DataJson: string, required
	DataJson terra.StringValue `hcl:"data_json,attr" validate:"required"`
	// DeleteAllVersions: bool, optional
	DeleteAllVersions terra.BoolValue `hcl:"delete_all_versions,attr"`
	// DisableRead: bool, optional
	DisableRead terra.BoolValue `hcl:"disable_read,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}
type genericSecretAttributes struct {
	ref terra.Reference
}

// Data returns a reference to field data of vault_generic_secret.
func (gs genericSecretAttributes) Data() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gs.ref.Append("data"))
}

// DataJson returns a reference to field data_json of vault_generic_secret.
func (gs genericSecretAttributes) DataJson() terra.StringValue {
	return terra.ReferenceAsString(gs.ref.Append("data_json"))
}

// DeleteAllVersions returns a reference to field delete_all_versions of vault_generic_secret.
func (gs genericSecretAttributes) DeleteAllVersions() terra.BoolValue {
	return terra.ReferenceAsBool(gs.ref.Append("delete_all_versions"))
}

// DisableRead returns a reference to field disable_read of vault_generic_secret.
func (gs genericSecretAttributes) DisableRead() terra.BoolValue {
	return terra.ReferenceAsBool(gs.ref.Append("disable_read"))
}

// Id returns a reference to field id of vault_generic_secret.
func (gs genericSecretAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gs.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_generic_secret.
func (gs genericSecretAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(gs.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_generic_secret.
func (gs genericSecretAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(gs.ref.Append("path"))
}

type genericSecretState struct {
	Data              map[string]string `json:"data"`
	DataJson          string            `json:"data_json"`
	DeleteAllVersions bool              `json:"delete_all_versions"`
	DisableRead       bool              `json:"disable_read"`
	Id                string            `json:"id"`
	Namespace         string            `json:"namespace"`
	Path              string            `json:"path"`
}
