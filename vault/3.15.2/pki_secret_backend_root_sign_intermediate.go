// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewPkiSecretBackendRootSignIntermediate creates a new instance of [PkiSecretBackendRootSignIntermediate].
func NewPkiSecretBackendRootSignIntermediate(name string, args PkiSecretBackendRootSignIntermediateArgs) *PkiSecretBackendRootSignIntermediate {
	return &PkiSecretBackendRootSignIntermediate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PkiSecretBackendRootSignIntermediate)(nil)

// PkiSecretBackendRootSignIntermediate represents the Terraform resource vault_pki_secret_backend_root_sign_intermediate.
type PkiSecretBackendRootSignIntermediate struct {
	Name      string
	Args      PkiSecretBackendRootSignIntermediateArgs
	state     *pkiSecretBackendRootSignIntermediateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [PkiSecretBackendRootSignIntermediate].
func (psbrsi *PkiSecretBackendRootSignIntermediate) Type() string {
	return "vault_pki_secret_backend_root_sign_intermediate"
}

// LocalName returns the local name for [PkiSecretBackendRootSignIntermediate].
func (psbrsi *PkiSecretBackendRootSignIntermediate) LocalName() string {
	return psbrsi.Name
}

// Configuration returns the configuration (args) for [PkiSecretBackendRootSignIntermediate].
func (psbrsi *PkiSecretBackendRootSignIntermediate) Configuration() interface{} {
	return psbrsi.Args
}

// DependOn is used for other resources to depend on [PkiSecretBackendRootSignIntermediate].
func (psbrsi *PkiSecretBackendRootSignIntermediate) DependOn() terra.Reference {
	return terra.ReferenceResource(psbrsi)
}

// Dependencies returns the list of resources [PkiSecretBackendRootSignIntermediate] depends_on.
func (psbrsi *PkiSecretBackendRootSignIntermediate) Dependencies() terra.Dependencies {
	return psbrsi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [PkiSecretBackendRootSignIntermediate].
func (psbrsi *PkiSecretBackendRootSignIntermediate) LifecycleManagement() *terra.Lifecycle {
	return psbrsi.Lifecycle
}

// Attributes returns the attributes for [PkiSecretBackendRootSignIntermediate].
func (psbrsi *PkiSecretBackendRootSignIntermediate) Attributes() pkiSecretBackendRootSignIntermediateAttributes {
	return pkiSecretBackendRootSignIntermediateAttributes{ref: terra.ReferenceResource(psbrsi)}
}

// ImportState imports the given attribute values into [PkiSecretBackendRootSignIntermediate]'s state.
func (psbrsi *PkiSecretBackendRootSignIntermediate) ImportState(av io.Reader) error {
	psbrsi.state = &pkiSecretBackendRootSignIntermediateState{}
	if err := json.NewDecoder(av).Decode(psbrsi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", psbrsi.Type(), psbrsi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [PkiSecretBackendRootSignIntermediate] has state.
func (psbrsi *PkiSecretBackendRootSignIntermediate) State() (*pkiSecretBackendRootSignIntermediateState, bool) {
	return psbrsi.state, psbrsi.state != nil
}

// StateMust returns the state for [PkiSecretBackendRootSignIntermediate]. Panics if the state is nil.
func (psbrsi *PkiSecretBackendRootSignIntermediate) StateMust() *pkiSecretBackendRootSignIntermediateState {
	if psbrsi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", psbrsi.Type(), psbrsi.LocalName()))
	}
	return psbrsi.state
}

// PkiSecretBackendRootSignIntermediateArgs contains the configurations for vault_pki_secret_backend_root_sign_intermediate.
type PkiSecretBackendRootSignIntermediateArgs struct {
	// AltNames: list of string, optional
	AltNames terra.ListValue[terra.StringValue] `hcl:"alt_names,attr"`
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// CommonName: string, required
	CommonName terra.StringValue `hcl:"common_name,attr" validate:"required"`
	// Country: string, optional
	Country terra.StringValue `hcl:"country,attr"`
	// Csr: string, required
	Csr terra.StringValue `hcl:"csr,attr" validate:"required"`
	// ExcludeCnFromSans: bool, optional
	ExcludeCnFromSans terra.BoolValue `hcl:"exclude_cn_from_sans,attr"`
	// Format: string, optional
	Format terra.StringValue `hcl:"format,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpSans: list of string, optional
	IpSans terra.ListValue[terra.StringValue] `hcl:"ip_sans,attr"`
	// Locality: string, optional
	Locality terra.StringValue `hcl:"locality,attr"`
	// MaxPathLength: number, optional
	MaxPathLength terra.NumberValue `hcl:"max_path_length,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Organization: string, optional
	Organization terra.StringValue `hcl:"organization,attr"`
	// OtherSans: list of string, optional
	OtherSans terra.ListValue[terra.StringValue] `hcl:"other_sans,attr"`
	// Ou: string, optional
	Ou terra.StringValue `hcl:"ou,attr"`
	// PermittedDnsDomains: list of string, optional
	PermittedDnsDomains terra.ListValue[terra.StringValue] `hcl:"permitted_dns_domains,attr"`
	// PostalCode: string, optional
	PostalCode terra.StringValue `hcl:"postal_code,attr"`
	// Province: string, optional
	Province terra.StringValue `hcl:"province,attr"`
	// Revoke: bool, optional
	Revoke terra.BoolValue `hcl:"revoke,attr"`
	// StreetAddress: string, optional
	StreetAddress terra.StringValue `hcl:"street_address,attr"`
	// Ttl: string, optional
	Ttl terra.StringValue `hcl:"ttl,attr"`
	// UriSans: list of string, optional
	UriSans terra.ListValue[terra.StringValue] `hcl:"uri_sans,attr"`
	// UseCsrValues: bool, optional
	UseCsrValues terra.BoolValue `hcl:"use_csr_values,attr"`
}
type pkiSecretBackendRootSignIntermediateAttributes struct {
	ref terra.Reference
}

// AltNames returns a reference to field alt_names of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) AltNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbrsi.ref.Append("alt_names"))
}

// Backend returns a reference to field backend of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("backend"))
}

// CaChain returns a reference to field ca_chain of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) CaChain() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbrsi.ref.Append("ca_chain"))
}

// Certificate returns a reference to field certificate of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("certificate"))
}

// CertificateBundle returns a reference to field certificate_bundle of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) CertificateBundle() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("certificate_bundle"))
}

// CommonName returns a reference to field common_name of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) CommonName() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("common_name"))
}

// Country returns a reference to field country of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) Country() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("country"))
}

// Csr returns a reference to field csr of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) Csr() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("csr"))
}

// ExcludeCnFromSans returns a reference to field exclude_cn_from_sans of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) ExcludeCnFromSans() terra.BoolValue {
	return terra.ReferenceAsBool(psbrsi.ref.Append("exclude_cn_from_sans"))
}

// Format returns a reference to field format of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("format"))
}

// Id returns a reference to field id of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("id"))
}

// IpSans returns a reference to field ip_sans of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) IpSans() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbrsi.ref.Append("ip_sans"))
}

// IssuingCa returns a reference to field issuing_ca of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) IssuingCa() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("issuing_ca"))
}

// Locality returns a reference to field locality of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) Locality() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("locality"))
}

// MaxPathLength returns a reference to field max_path_length of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) MaxPathLength() terra.NumberValue {
	return terra.ReferenceAsNumber(psbrsi.ref.Append("max_path_length"))
}

// Namespace returns a reference to field namespace of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("namespace"))
}

// Organization returns a reference to field organization of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("organization"))
}

// OtherSans returns a reference to field other_sans of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) OtherSans() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbrsi.ref.Append("other_sans"))
}

// Ou returns a reference to field ou of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) Ou() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("ou"))
}

// PermittedDnsDomains returns a reference to field permitted_dns_domains of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) PermittedDnsDomains() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbrsi.ref.Append("permitted_dns_domains"))
}

// PostalCode returns a reference to field postal_code of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) PostalCode() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("postal_code"))
}

// Province returns a reference to field province of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) Province() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("province"))
}

// Revoke returns a reference to field revoke of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) Revoke() terra.BoolValue {
	return terra.ReferenceAsBool(psbrsi.ref.Append("revoke"))
}

// Serial returns a reference to field serial of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) Serial() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("serial"))
}

// SerialNumber returns a reference to field serial_number of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) SerialNumber() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("serial_number"))
}

// StreetAddress returns a reference to field street_address of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) StreetAddress() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("street_address"))
}

// Ttl returns a reference to field ttl of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) Ttl() terra.StringValue {
	return terra.ReferenceAsString(psbrsi.ref.Append("ttl"))
}

// UriSans returns a reference to field uri_sans of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) UriSans() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbrsi.ref.Append("uri_sans"))
}

// UseCsrValues returns a reference to field use_csr_values of vault_pki_secret_backend_root_sign_intermediate.
func (psbrsi pkiSecretBackendRootSignIntermediateAttributes) UseCsrValues() terra.BoolValue {
	return terra.ReferenceAsBool(psbrsi.ref.Append("use_csr_values"))
}

type pkiSecretBackendRootSignIntermediateState struct {
	AltNames            []string `json:"alt_names"`
	Backend             string   `json:"backend"`
	CaChain             []string `json:"ca_chain"`
	Certificate         string   `json:"certificate"`
	CertificateBundle   string   `json:"certificate_bundle"`
	CommonName          string   `json:"common_name"`
	Country             string   `json:"country"`
	Csr                 string   `json:"csr"`
	ExcludeCnFromSans   bool     `json:"exclude_cn_from_sans"`
	Format              string   `json:"format"`
	Id                  string   `json:"id"`
	IpSans              []string `json:"ip_sans"`
	IssuingCa           string   `json:"issuing_ca"`
	Locality            string   `json:"locality"`
	MaxPathLength       float64  `json:"max_path_length"`
	Namespace           string   `json:"namespace"`
	Organization        string   `json:"organization"`
	OtherSans           []string `json:"other_sans"`
	Ou                  string   `json:"ou"`
	PermittedDnsDomains []string `json:"permitted_dns_domains"`
	PostalCode          string   `json:"postal_code"`
	Province            string   `json:"province"`
	Revoke              bool     `json:"revoke"`
	Serial              string   `json:"serial"`
	SerialNumber        string   `json:"serial_number"`
	StreetAddress       string   `json:"street_address"`
	Ttl                 string   `json:"ttl"`
	UriSans             []string `json:"uri_sans"`
	UseCsrValues        bool     `json:"use_csr_values"`
}
