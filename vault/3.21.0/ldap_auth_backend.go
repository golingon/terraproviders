// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewLdapAuthBackend creates a new instance of [LdapAuthBackend].
func NewLdapAuthBackend(name string, args LdapAuthBackendArgs) *LdapAuthBackend {
	return &LdapAuthBackend{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LdapAuthBackend)(nil)

// LdapAuthBackend represents the Terraform resource vault_ldap_auth_backend.
type LdapAuthBackend struct {
	Name      string
	Args      LdapAuthBackendArgs
	state     *ldapAuthBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [LdapAuthBackend].
func (lab *LdapAuthBackend) Type() string {
	return "vault_ldap_auth_backend"
}

// LocalName returns the local name for [LdapAuthBackend].
func (lab *LdapAuthBackend) LocalName() string {
	return lab.Name
}

// Configuration returns the configuration (args) for [LdapAuthBackend].
func (lab *LdapAuthBackend) Configuration() interface{} {
	return lab.Args
}

// DependOn is used for other resources to depend on [LdapAuthBackend].
func (lab *LdapAuthBackend) DependOn() terra.Reference {
	return terra.ReferenceResource(lab)
}

// Dependencies returns the list of resources [LdapAuthBackend] depends_on.
func (lab *LdapAuthBackend) Dependencies() terra.Dependencies {
	return lab.DependsOn
}

// LifecycleManagement returns the lifecycle block for [LdapAuthBackend].
func (lab *LdapAuthBackend) LifecycleManagement() *terra.Lifecycle {
	return lab.Lifecycle
}

// Attributes returns the attributes for [LdapAuthBackend].
func (lab *LdapAuthBackend) Attributes() ldapAuthBackendAttributes {
	return ldapAuthBackendAttributes{ref: terra.ReferenceResource(lab)}
}

// ImportState imports the given attribute values into [LdapAuthBackend]'s state.
func (lab *LdapAuthBackend) ImportState(av io.Reader) error {
	lab.state = &ldapAuthBackendState{}
	if err := json.NewDecoder(av).Decode(lab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lab.Type(), lab.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [LdapAuthBackend] has state.
func (lab *LdapAuthBackend) State() (*ldapAuthBackendState, bool) {
	return lab.state, lab.state != nil
}

// StateMust returns the state for [LdapAuthBackend]. Panics if the state is nil.
func (lab *LdapAuthBackend) StateMust() *ldapAuthBackendState {
	if lab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lab.Type(), lab.LocalName()))
	}
	return lab.state
}

// LdapAuthBackendArgs contains the configurations for vault_ldap_auth_backend.
type LdapAuthBackendArgs struct {
	// Binddn: string, optional
	Binddn terra.StringValue `hcl:"binddn,attr"`
	// Bindpass: string, optional
	Bindpass terra.StringValue `hcl:"bindpass,attr"`
	// CaseSensitiveNames: bool, optional
	CaseSensitiveNames terra.BoolValue `hcl:"case_sensitive_names,attr"`
	// Certificate: string, optional
	Certificate terra.StringValue `hcl:"certificate,attr"`
	// ClientTlsCert: string, optional
	ClientTlsCert terra.StringValue `hcl:"client_tls_cert,attr"`
	// ClientTlsKey: string, optional
	ClientTlsKey terra.StringValue `hcl:"client_tls_key,attr"`
	// DenyNullBind: bool, optional
	DenyNullBind terra.BoolValue `hcl:"deny_null_bind,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableRemount: bool, optional
	DisableRemount terra.BoolValue `hcl:"disable_remount,attr"`
	// Discoverdn: bool, optional
	Discoverdn terra.BoolValue `hcl:"discoverdn,attr"`
	// Groupattr: string, optional
	Groupattr terra.StringValue `hcl:"groupattr,attr"`
	// Groupdn: string, optional
	Groupdn terra.StringValue `hcl:"groupdn,attr"`
	// Groupfilter: string, optional
	Groupfilter terra.StringValue `hcl:"groupfilter,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InsecureTls: bool, optional
	InsecureTls terra.BoolValue `hcl:"insecure_tls,attr"`
	// Local: bool, optional
	Local terra.BoolValue `hcl:"local,attr"`
	// MaxPageSize: number, optional
	MaxPageSize terra.NumberValue `hcl:"max_page_size,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Starttls: bool, optional
	Starttls terra.BoolValue `hcl:"starttls,attr"`
	// TlsMaxVersion: string, optional
	TlsMaxVersion terra.StringValue `hcl:"tls_max_version,attr"`
	// TlsMinVersion: string, optional
	TlsMinVersion terra.StringValue `hcl:"tls_min_version,attr"`
	// TokenBoundCidrs: set of string, optional
	TokenBoundCidrs terra.SetValue[terra.StringValue] `hcl:"token_bound_cidrs,attr"`
	// TokenExplicitMaxTtl: number, optional
	TokenExplicitMaxTtl terra.NumberValue `hcl:"token_explicit_max_ttl,attr"`
	// TokenMaxTtl: number, optional
	TokenMaxTtl terra.NumberValue `hcl:"token_max_ttl,attr"`
	// TokenNoDefaultPolicy: bool, optional
	TokenNoDefaultPolicy terra.BoolValue `hcl:"token_no_default_policy,attr"`
	// TokenNumUses: number, optional
	TokenNumUses terra.NumberValue `hcl:"token_num_uses,attr"`
	// TokenPeriod: number, optional
	TokenPeriod terra.NumberValue `hcl:"token_period,attr"`
	// TokenPolicies: set of string, optional
	TokenPolicies terra.SetValue[terra.StringValue] `hcl:"token_policies,attr"`
	// TokenTtl: number, optional
	TokenTtl terra.NumberValue `hcl:"token_ttl,attr"`
	// TokenType: string, optional
	TokenType terra.StringValue `hcl:"token_type,attr"`
	// Upndomain: string, optional
	Upndomain terra.StringValue `hcl:"upndomain,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// UseTokenGroups: bool, optional
	UseTokenGroups terra.BoolValue `hcl:"use_token_groups,attr"`
	// Userattr: string, optional
	Userattr terra.StringValue `hcl:"userattr,attr"`
	// Userdn: string, optional
	Userdn terra.StringValue `hcl:"userdn,attr"`
	// Userfilter: string, optional
	Userfilter terra.StringValue `hcl:"userfilter,attr"`
	// UsernameAsAlias: bool, optional
	UsernameAsAlias terra.BoolValue `hcl:"username_as_alias,attr"`
}
type ldapAuthBackendAttributes struct {
	ref terra.Reference
}

// Accessor returns a reference to field accessor of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Accessor() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("accessor"))
}

// Binddn returns a reference to field binddn of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Binddn() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("binddn"))
}

// Bindpass returns a reference to field bindpass of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Bindpass() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("bindpass"))
}

// CaseSensitiveNames returns a reference to field case_sensitive_names of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) CaseSensitiveNames() terra.BoolValue {
	return terra.ReferenceAsBool(lab.ref.Append("case_sensitive_names"))
}

// Certificate returns a reference to field certificate of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("certificate"))
}

// ClientTlsCert returns a reference to field client_tls_cert of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) ClientTlsCert() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("client_tls_cert"))
}

// ClientTlsKey returns a reference to field client_tls_key of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) ClientTlsKey() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("client_tls_key"))
}

// DenyNullBind returns a reference to field deny_null_bind of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) DenyNullBind() terra.BoolValue {
	return terra.ReferenceAsBool(lab.ref.Append("deny_null_bind"))
}

// Description returns a reference to field description of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("description"))
}

// DisableRemount returns a reference to field disable_remount of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) DisableRemount() terra.BoolValue {
	return terra.ReferenceAsBool(lab.ref.Append("disable_remount"))
}

// Discoverdn returns a reference to field discoverdn of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Discoverdn() terra.BoolValue {
	return terra.ReferenceAsBool(lab.ref.Append("discoverdn"))
}

// Groupattr returns a reference to field groupattr of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Groupattr() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("groupattr"))
}

// Groupdn returns a reference to field groupdn of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Groupdn() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("groupdn"))
}

// Groupfilter returns a reference to field groupfilter of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Groupfilter() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("groupfilter"))
}

// Id returns a reference to field id of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("id"))
}

// InsecureTls returns a reference to field insecure_tls of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) InsecureTls() terra.BoolValue {
	return terra.ReferenceAsBool(lab.ref.Append("insecure_tls"))
}

// Local returns a reference to field local of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Local() terra.BoolValue {
	return terra.ReferenceAsBool(lab.ref.Append("local"))
}

// MaxPageSize returns a reference to field max_page_size of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) MaxPageSize() terra.NumberValue {
	return terra.ReferenceAsNumber(lab.ref.Append("max_page_size"))
}

// Namespace returns a reference to field namespace of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("path"))
}

// Starttls returns a reference to field starttls of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Starttls() terra.BoolValue {
	return terra.ReferenceAsBool(lab.ref.Append("starttls"))
}

// TlsMaxVersion returns a reference to field tls_max_version of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) TlsMaxVersion() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("tls_max_version"))
}

// TlsMinVersion returns a reference to field tls_min_version of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) TlsMinVersion() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("tls_min_version"))
}

// TokenBoundCidrs returns a reference to field token_bound_cidrs of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) TokenBoundCidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lab.ref.Append("token_bound_cidrs"))
}

// TokenExplicitMaxTtl returns a reference to field token_explicit_max_ttl of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) TokenExplicitMaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(lab.ref.Append("token_explicit_max_ttl"))
}

// TokenMaxTtl returns a reference to field token_max_ttl of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) TokenMaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(lab.ref.Append("token_max_ttl"))
}

// TokenNoDefaultPolicy returns a reference to field token_no_default_policy of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) TokenNoDefaultPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(lab.ref.Append("token_no_default_policy"))
}

// TokenNumUses returns a reference to field token_num_uses of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) TokenNumUses() terra.NumberValue {
	return terra.ReferenceAsNumber(lab.ref.Append("token_num_uses"))
}

// TokenPeriod returns a reference to field token_period of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) TokenPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(lab.ref.Append("token_period"))
}

// TokenPolicies returns a reference to field token_policies of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) TokenPolicies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lab.ref.Append("token_policies"))
}

// TokenTtl returns a reference to field token_ttl of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) TokenTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(lab.ref.Append("token_ttl"))
}

// TokenType returns a reference to field token_type of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) TokenType() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("token_type"))
}

// Upndomain returns a reference to field upndomain of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Upndomain() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("upndomain"))
}

// Url returns a reference to field url of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("url"))
}

// UseTokenGroups returns a reference to field use_token_groups of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) UseTokenGroups() terra.BoolValue {
	return terra.ReferenceAsBool(lab.ref.Append("use_token_groups"))
}

// Userattr returns a reference to field userattr of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Userattr() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("userattr"))
}

// Userdn returns a reference to field userdn of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Userdn() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("userdn"))
}

// Userfilter returns a reference to field userfilter of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) Userfilter() terra.StringValue {
	return terra.ReferenceAsString(lab.ref.Append("userfilter"))
}

// UsernameAsAlias returns a reference to field username_as_alias of vault_ldap_auth_backend.
func (lab ldapAuthBackendAttributes) UsernameAsAlias() terra.BoolValue {
	return terra.ReferenceAsBool(lab.ref.Append("username_as_alias"))
}

type ldapAuthBackendState struct {
	Accessor             string   `json:"accessor"`
	Binddn               string   `json:"binddn"`
	Bindpass             string   `json:"bindpass"`
	CaseSensitiveNames   bool     `json:"case_sensitive_names"`
	Certificate          string   `json:"certificate"`
	ClientTlsCert        string   `json:"client_tls_cert"`
	ClientTlsKey         string   `json:"client_tls_key"`
	DenyNullBind         bool     `json:"deny_null_bind"`
	Description          string   `json:"description"`
	DisableRemount       bool     `json:"disable_remount"`
	Discoverdn           bool     `json:"discoverdn"`
	Groupattr            string   `json:"groupattr"`
	Groupdn              string   `json:"groupdn"`
	Groupfilter          string   `json:"groupfilter"`
	Id                   string   `json:"id"`
	InsecureTls          bool     `json:"insecure_tls"`
	Local                bool     `json:"local"`
	MaxPageSize          float64  `json:"max_page_size"`
	Namespace            string   `json:"namespace"`
	Path                 string   `json:"path"`
	Starttls             bool     `json:"starttls"`
	TlsMaxVersion        string   `json:"tls_max_version"`
	TlsMinVersion        string   `json:"tls_min_version"`
	TokenBoundCidrs      []string `json:"token_bound_cidrs"`
	TokenExplicitMaxTtl  float64  `json:"token_explicit_max_ttl"`
	TokenMaxTtl          float64  `json:"token_max_ttl"`
	TokenNoDefaultPolicy bool     `json:"token_no_default_policy"`
	TokenNumUses         float64  `json:"token_num_uses"`
	TokenPeriod          float64  `json:"token_period"`
	TokenPolicies        []string `json:"token_policies"`
	TokenTtl             float64  `json:"token_ttl"`
	TokenType            string   `json:"token_type"`
	Upndomain            string   `json:"upndomain"`
	Url                  string   `json:"url"`
	UseTokenGroups       bool     `json:"use_token_groups"`
	Userattr             string   `json:"userattr"`
	Userdn               string   `json:"userdn"`
	Userfilter           string   `json:"userfilter"`
	UsernameAsAlias      bool     `json:"username_as_alias"`
}
