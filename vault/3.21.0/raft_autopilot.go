// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewRaftAutopilot creates a new instance of [RaftAutopilot].
func NewRaftAutopilot(name string, args RaftAutopilotArgs) *RaftAutopilot {
	return &RaftAutopilot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RaftAutopilot)(nil)

// RaftAutopilot represents the Terraform resource vault_raft_autopilot.
type RaftAutopilot struct {
	Name      string
	Args      RaftAutopilotArgs
	state     *raftAutopilotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RaftAutopilot].
func (ra *RaftAutopilot) Type() string {
	return "vault_raft_autopilot"
}

// LocalName returns the local name for [RaftAutopilot].
func (ra *RaftAutopilot) LocalName() string {
	return ra.Name
}

// Configuration returns the configuration (args) for [RaftAutopilot].
func (ra *RaftAutopilot) Configuration() interface{} {
	return ra.Args
}

// DependOn is used for other resources to depend on [RaftAutopilot].
func (ra *RaftAutopilot) DependOn() terra.Reference {
	return terra.ReferenceResource(ra)
}

// Dependencies returns the list of resources [RaftAutopilot] depends_on.
func (ra *RaftAutopilot) Dependencies() terra.Dependencies {
	return ra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RaftAutopilot].
func (ra *RaftAutopilot) LifecycleManagement() *terra.Lifecycle {
	return ra.Lifecycle
}

// Attributes returns the attributes for [RaftAutopilot].
func (ra *RaftAutopilot) Attributes() raftAutopilotAttributes {
	return raftAutopilotAttributes{ref: terra.ReferenceResource(ra)}
}

// ImportState imports the given attribute values into [RaftAutopilot]'s state.
func (ra *RaftAutopilot) ImportState(av io.Reader) error {
	ra.state = &raftAutopilotState{}
	if err := json.NewDecoder(av).Decode(ra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ra.Type(), ra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RaftAutopilot] has state.
func (ra *RaftAutopilot) State() (*raftAutopilotState, bool) {
	return ra.state, ra.state != nil
}

// StateMust returns the state for [RaftAutopilot]. Panics if the state is nil.
func (ra *RaftAutopilot) StateMust() *raftAutopilotState {
	if ra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ra.Type(), ra.LocalName()))
	}
	return ra.state
}

// RaftAutopilotArgs contains the configurations for vault_raft_autopilot.
type RaftAutopilotArgs struct {
	// CleanupDeadServers: bool, optional
	CleanupDeadServers terra.BoolValue `hcl:"cleanup_dead_servers,attr"`
	// DeadServerLastContactThreshold: string, optional
	DeadServerLastContactThreshold terra.StringValue `hcl:"dead_server_last_contact_threshold,attr"`
	// DisableUpgradeMigration: bool, optional
	DisableUpgradeMigration terra.BoolValue `hcl:"disable_upgrade_migration,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LastContactThreshold: string, optional
	LastContactThreshold terra.StringValue `hcl:"last_contact_threshold,attr"`
	// MaxTrailingLogs: number, optional
	MaxTrailingLogs terra.NumberValue `hcl:"max_trailing_logs,attr"`
	// MinQuorum: number, optional
	MinQuorum terra.NumberValue `hcl:"min_quorum,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// ServerStabilizationTime: string, optional
	ServerStabilizationTime terra.StringValue `hcl:"server_stabilization_time,attr"`
}
type raftAutopilotAttributes struct {
	ref terra.Reference
}

// CleanupDeadServers returns a reference to field cleanup_dead_servers of vault_raft_autopilot.
func (ra raftAutopilotAttributes) CleanupDeadServers() terra.BoolValue {
	return terra.ReferenceAsBool(ra.ref.Append("cleanup_dead_servers"))
}

// DeadServerLastContactThreshold returns a reference to field dead_server_last_contact_threshold of vault_raft_autopilot.
func (ra raftAutopilotAttributes) DeadServerLastContactThreshold() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("dead_server_last_contact_threshold"))
}

// DisableUpgradeMigration returns a reference to field disable_upgrade_migration of vault_raft_autopilot.
func (ra raftAutopilotAttributes) DisableUpgradeMigration() terra.BoolValue {
	return terra.ReferenceAsBool(ra.ref.Append("disable_upgrade_migration"))
}

// Id returns a reference to field id of vault_raft_autopilot.
func (ra raftAutopilotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("id"))
}

// LastContactThreshold returns a reference to field last_contact_threshold of vault_raft_autopilot.
func (ra raftAutopilotAttributes) LastContactThreshold() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("last_contact_threshold"))
}

// MaxTrailingLogs returns a reference to field max_trailing_logs of vault_raft_autopilot.
func (ra raftAutopilotAttributes) MaxTrailingLogs() terra.NumberValue {
	return terra.ReferenceAsNumber(ra.ref.Append("max_trailing_logs"))
}

// MinQuorum returns a reference to field min_quorum of vault_raft_autopilot.
func (ra raftAutopilotAttributes) MinQuorum() terra.NumberValue {
	return terra.ReferenceAsNumber(ra.ref.Append("min_quorum"))
}

// Namespace returns a reference to field namespace of vault_raft_autopilot.
func (ra raftAutopilotAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("namespace"))
}

// ServerStabilizationTime returns a reference to field server_stabilization_time of vault_raft_autopilot.
func (ra raftAutopilotAttributes) ServerStabilizationTime() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("server_stabilization_time"))
}

type raftAutopilotState struct {
	CleanupDeadServers             bool    `json:"cleanup_dead_servers"`
	DeadServerLastContactThreshold string  `json:"dead_server_last_contact_threshold"`
	DisableUpgradeMigration        bool    `json:"disable_upgrade_migration"`
	Id                             string  `json:"id"`
	LastContactThreshold           string  `json:"last_contact_threshold"`
	MaxTrailingLogs                float64 `json:"max_trailing_logs"`
	MinQuorum                      float64 `json:"min_quorum"`
	Namespace                      string  `json:"namespace"`
	ServerStabilizationTime        string  `json:"server_stabilization_time"`
}
