// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewIdentityMfaDuo creates a new instance of [IdentityMfaDuo].
func NewIdentityMfaDuo(name string, args IdentityMfaDuoArgs) *IdentityMfaDuo {
	return &IdentityMfaDuo{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IdentityMfaDuo)(nil)

// IdentityMfaDuo represents the Terraform resource vault_identity_mfa_duo.
type IdentityMfaDuo struct {
	Name      string
	Args      IdentityMfaDuoArgs
	state     *identityMfaDuoState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [IdentityMfaDuo].
func (imd *IdentityMfaDuo) Type() string {
	return "vault_identity_mfa_duo"
}

// LocalName returns the local name for [IdentityMfaDuo].
func (imd *IdentityMfaDuo) LocalName() string {
	return imd.Name
}

// Configuration returns the configuration (args) for [IdentityMfaDuo].
func (imd *IdentityMfaDuo) Configuration() interface{} {
	return imd.Args
}

// DependOn is used for other resources to depend on [IdentityMfaDuo].
func (imd *IdentityMfaDuo) DependOn() terra.Reference {
	return terra.ReferenceResource(imd)
}

// Dependencies returns the list of resources [IdentityMfaDuo] depends_on.
func (imd *IdentityMfaDuo) Dependencies() terra.Dependencies {
	return imd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [IdentityMfaDuo].
func (imd *IdentityMfaDuo) LifecycleManagement() *terra.Lifecycle {
	return imd.Lifecycle
}

// Attributes returns the attributes for [IdentityMfaDuo].
func (imd *IdentityMfaDuo) Attributes() identityMfaDuoAttributes {
	return identityMfaDuoAttributes{ref: terra.ReferenceResource(imd)}
}

// ImportState imports the given attribute values into [IdentityMfaDuo]'s state.
func (imd *IdentityMfaDuo) ImportState(av io.Reader) error {
	imd.state = &identityMfaDuoState{}
	if err := json.NewDecoder(av).Decode(imd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", imd.Type(), imd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [IdentityMfaDuo] has state.
func (imd *IdentityMfaDuo) State() (*identityMfaDuoState, bool) {
	return imd.state, imd.state != nil
}

// StateMust returns the state for [IdentityMfaDuo]. Panics if the state is nil.
func (imd *IdentityMfaDuo) StateMust() *identityMfaDuoState {
	if imd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", imd.Type(), imd.LocalName()))
	}
	return imd.state
}

// IdentityMfaDuoArgs contains the configurations for vault_identity_mfa_duo.
type IdentityMfaDuoArgs struct {
	// ApiHostname: string, required
	ApiHostname terra.StringValue `hcl:"api_hostname,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationKey: string, required
	IntegrationKey terra.StringValue `hcl:"integration_key,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// PushInfo: string, optional
	PushInfo terra.StringValue `hcl:"push_info,attr"`
	// SecretKey: string, required
	SecretKey terra.StringValue `hcl:"secret_key,attr" validate:"required"`
	// UsePasscode: bool, optional
	UsePasscode terra.BoolValue `hcl:"use_passcode,attr"`
	// UsernameFormat: string, optional
	UsernameFormat terra.StringValue `hcl:"username_format,attr"`
}
type identityMfaDuoAttributes struct {
	ref terra.Reference
}

// ApiHostname returns a reference to field api_hostname of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) ApiHostname() terra.StringValue {
	return terra.ReferenceAsString(imd.ref.Append("api_hostname"))
}

// Id returns a reference to field id of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(imd.ref.Append("id"))
}

// IntegrationKey returns a reference to field integration_key of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) IntegrationKey() terra.StringValue {
	return terra.ReferenceAsString(imd.ref.Append("integration_key"))
}

// MethodId returns a reference to field method_id of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) MethodId() terra.StringValue {
	return terra.ReferenceAsString(imd.ref.Append("method_id"))
}

// MountAccessor returns a reference to field mount_accessor of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) MountAccessor() terra.StringValue {
	return terra.ReferenceAsString(imd.ref.Append("mount_accessor"))
}

// Name returns a reference to field name of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(imd.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(imd.ref.Append("namespace"))
}

// NamespaceId returns a reference to field namespace_id of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceAsString(imd.ref.Append("namespace_id"))
}

// NamespacePath returns a reference to field namespace_path of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) NamespacePath() terra.StringValue {
	return terra.ReferenceAsString(imd.ref.Append("namespace_path"))
}

// PushInfo returns a reference to field push_info of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) PushInfo() terra.StringValue {
	return terra.ReferenceAsString(imd.ref.Append("push_info"))
}

// SecretKey returns a reference to field secret_key of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) SecretKey() terra.StringValue {
	return terra.ReferenceAsString(imd.ref.Append("secret_key"))
}

// Type returns a reference to field type of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(imd.ref.Append("type"))
}

// UsePasscode returns a reference to field use_passcode of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) UsePasscode() terra.BoolValue {
	return terra.ReferenceAsBool(imd.ref.Append("use_passcode"))
}

// UsernameFormat returns a reference to field username_format of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) UsernameFormat() terra.StringValue {
	return terra.ReferenceAsString(imd.ref.Append("username_format"))
}

// Uuid returns a reference to field uuid of vault_identity_mfa_duo.
func (imd identityMfaDuoAttributes) Uuid() terra.StringValue {
	return terra.ReferenceAsString(imd.ref.Append("uuid"))
}

type identityMfaDuoState struct {
	ApiHostname    string `json:"api_hostname"`
	Id             string `json:"id"`
	IntegrationKey string `json:"integration_key"`
	MethodId       string `json:"method_id"`
	MountAccessor  string `json:"mount_accessor"`
	Name           string `json:"name"`
	Namespace      string `json:"namespace"`
	NamespaceId    string `json:"namespace_id"`
	NamespacePath  string `json:"namespace_path"`
	PushInfo       string `json:"push_info"`
	SecretKey      string `json:"secret_key"`
	Type           string `json:"type"`
	UsePasscode    bool   `json:"use_passcode"`
	UsernameFormat string `json:"username_format"`
	Uuid           string `json:"uuid"`
}
