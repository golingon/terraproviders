// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	authbackend "github.com/golingon/terraproviders/vault/3.21.0/authbackend"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAuthBackend creates a new instance of [AuthBackend].
func NewAuthBackend(name string, args AuthBackendArgs) *AuthBackend {
	return &AuthBackend{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AuthBackend)(nil)

// AuthBackend represents the Terraform resource vault_auth_backend.
type AuthBackend struct {
	Name      string
	Args      AuthBackendArgs
	state     *authBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AuthBackend].
func (ab *AuthBackend) Type() string {
	return "vault_auth_backend"
}

// LocalName returns the local name for [AuthBackend].
func (ab *AuthBackend) LocalName() string {
	return ab.Name
}

// Configuration returns the configuration (args) for [AuthBackend].
func (ab *AuthBackend) Configuration() interface{} {
	return ab.Args
}

// DependOn is used for other resources to depend on [AuthBackend].
func (ab *AuthBackend) DependOn() terra.Reference {
	return terra.ReferenceResource(ab)
}

// Dependencies returns the list of resources [AuthBackend] depends_on.
func (ab *AuthBackend) Dependencies() terra.Dependencies {
	return ab.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AuthBackend].
func (ab *AuthBackend) LifecycleManagement() *terra.Lifecycle {
	return ab.Lifecycle
}

// Attributes returns the attributes for [AuthBackend].
func (ab *AuthBackend) Attributes() authBackendAttributes {
	return authBackendAttributes{ref: terra.ReferenceResource(ab)}
}

// ImportState imports the given attribute values into [AuthBackend]'s state.
func (ab *AuthBackend) ImportState(av io.Reader) error {
	ab.state = &authBackendState{}
	if err := json.NewDecoder(av).Decode(ab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ab.Type(), ab.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AuthBackend] has state.
func (ab *AuthBackend) State() (*authBackendState, bool) {
	return ab.state, ab.state != nil
}

// StateMust returns the state for [AuthBackend]. Panics if the state is nil.
func (ab *AuthBackend) StateMust() *authBackendState {
	if ab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ab.Type(), ab.LocalName()))
	}
	return ab.state
}

// AuthBackendArgs contains the configurations for vault_auth_backend.
type AuthBackendArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableRemount: bool, optional
	DisableRemount terra.BoolValue `hcl:"disable_remount,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Local: bool, optional
	Local terra.BoolValue `hcl:"local,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Tune: min=0
	Tune []authbackend.Tune `hcl:"tune,block" validate:"min=0"`
}
type authBackendAttributes struct {
	ref terra.Reference
}

// Accessor returns a reference to field accessor of vault_auth_backend.
func (ab authBackendAttributes) Accessor() terra.StringValue {
	return terra.ReferenceAsString(ab.ref.Append("accessor"))
}

// Description returns a reference to field description of vault_auth_backend.
func (ab authBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ab.ref.Append("description"))
}

// DisableRemount returns a reference to field disable_remount of vault_auth_backend.
func (ab authBackendAttributes) DisableRemount() terra.BoolValue {
	return terra.ReferenceAsBool(ab.ref.Append("disable_remount"))
}

// Id returns a reference to field id of vault_auth_backend.
func (ab authBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ab.ref.Append("id"))
}

// Local returns a reference to field local of vault_auth_backend.
func (ab authBackendAttributes) Local() terra.BoolValue {
	return terra.ReferenceAsBool(ab.ref.Append("local"))
}

// Namespace returns a reference to field namespace of vault_auth_backend.
func (ab authBackendAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(ab.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_auth_backend.
func (ab authBackendAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(ab.ref.Append("path"))
}

// Type returns a reference to field type of vault_auth_backend.
func (ab authBackendAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ab.ref.Append("type"))
}

func (ab authBackendAttributes) Tune() terra.SetValue[authbackend.TuneAttributes] {
	return terra.ReferenceAsSet[authbackend.TuneAttributes](ab.ref.Append("tune"))
}

type authBackendState struct {
	Accessor       string                  `json:"accessor"`
	Description    string                  `json:"description"`
	DisableRemount bool                    `json:"disable_remount"`
	Id             string                  `json:"id"`
	Local          bool                    `json:"local"`
	Namespace      string                  `json:"namespace"`
	Path           string                  `json:"path"`
	Type           string                  `json:"type"`
	Tune           []authbackend.TuneState `json:"tune"`
}
