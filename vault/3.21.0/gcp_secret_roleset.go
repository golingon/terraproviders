// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	gcpsecretroleset "github.com/golingon/terraproviders/vault/3.21.0/gcpsecretroleset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGcpSecretRoleset creates a new instance of [GcpSecretRoleset].
func NewGcpSecretRoleset(name string, args GcpSecretRolesetArgs) *GcpSecretRoleset {
	return &GcpSecretRoleset{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GcpSecretRoleset)(nil)

// GcpSecretRoleset represents the Terraform resource vault_gcp_secret_roleset.
type GcpSecretRoleset struct {
	Name      string
	Args      GcpSecretRolesetArgs
	state     *gcpSecretRolesetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GcpSecretRoleset].
func (gsr *GcpSecretRoleset) Type() string {
	return "vault_gcp_secret_roleset"
}

// LocalName returns the local name for [GcpSecretRoleset].
func (gsr *GcpSecretRoleset) LocalName() string {
	return gsr.Name
}

// Configuration returns the configuration (args) for [GcpSecretRoleset].
func (gsr *GcpSecretRoleset) Configuration() interface{} {
	return gsr.Args
}

// DependOn is used for other resources to depend on [GcpSecretRoleset].
func (gsr *GcpSecretRoleset) DependOn() terra.Reference {
	return terra.ReferenceResource(gsr)
}

// Dependencies returns the list of resources [GcpSecretRoleset] depends_on.
func (gsr *GcpSecretRoleset) Dependencies() terra.Dependencies {
	return gsr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GcpSecretRoleset].
func (gsr *GcpSecretRoleset) LifecycleManagement() *terra.Lifecycle {
	return gsr.Lifecycle
}

// Attributes returns the attributes for [GcpSecretRoleset].
func (gsr *GcpSecretRoleset) Attributes() gcpSecretRolesetAttributes {
	return gcpSecretRolesetAttributes{ref: terra.ReferenceResource(gsr)}
}

// ImportState imports the given attribute values into [GcpSecretRoleset]'s state.
func (gsr *GcpSecretRoleset) ImportState(av io.Reader) error {
	gsr.state = &gcpSecretRolesetState{}
	if err := json.NewDecoder(av).Decode(gsr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsr.Type(), gsr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GcpSecretRoleset] has state.
func (gsr *GcpSecretRoleset) State() (*gcpSecretRolesetState, bool) {
	return gsr.state, gsr.state != nil
}

// StateMust returns the state for [GcpSecretRoleset]. Panics if the state is nil.
func (gsr *GcpSecretRoleset) StateMust() *gcpSecretRolesetState {
	if gsr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsr.Type(), gsr.LocalName()))
	}
	return gsr.state
}

// GcpSecretRolesetArgs contains the configurations for vault_gcp_secret_roleset.
type GcpSecretRolesetArgs struct {
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// Roleset: string, required
	Roleset terra.StringValue `hcl:"roleset,attr" validate:"required"`
	// SecretType: string, optional
	SecretType terra.StringValue `hcl:"secret_type,attr"`
	// TokenScopes: set of string, optional
	TokenScopes terra.SetValue[terra.StringValue] `hcl:"token_scopes,attr"`
	// Binding: min=1
	Binding []gcpsecretroleset.Binding `hcl:"binding,block" validate:"min=1"`
}
type gcpSecretRolesetAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_gcp_secret_roleset.
func (gsr gcpSecretRolesetAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(gsr.ref.Append("backend"))
}

// Id returns a reference to field id of vault_gcp_secret_roleset.
func (gsr gcpSecretRolesetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsr.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_gcp_secret_roleset.
func (gsr gcpSecretRolesetAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(gsr.ref.Append("namespace"))
}

// Project returns a reference to field project of vault_gcp_secret_roleset.
func (gsr gcpSecretRolesetAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gsr.ref.Append("project"))
}

// Roleset returns a reference to field roleset of vault_gcp_secret_roleset.
func (gsr gcpSecretRolesetAttributes) Roleset() terra.StringValue {
	return terra.ReferenceAsString(gsr.ref.Append("roleset"))
}

// SecretType returns a reference to field secret_type of vault_gcp_secret_roleset.
func (gsr gcpSecretRolesetAttributes) SecretType() terra.StringValue {
	return terra.ReferenceAsString(gsr.ref.Append("secret_type"))
}

// ServiceAccountEmail returns a reference to field service_account_email of vault_gcp_secret_roleset.
func (gsr gcpSecretRolesetAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(gsr.ref.Append("service_account_email"))
}

// TokenScopes returns a reference to field token_scopes of vault_gcp_secret_roleset.
func (gsr gcpSecretRolesetAttributes) TokenScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gsr.ref.Append("token_scopes"))
}

func (gsr gcpSecretRolesetAttributes) Binding() terra.SetValue[gcpsecretroleset.BindingAttributes] {
	return terra.ReferenceAsSet[gcpsecretroleset.BindingAttributes](gsr.ref.Append("binding"))
}

type gcpSecretRolesetState struct {
	Backend             string                          `json:"backend"`
	Id                  string                          `json:"id"`
	Namespace           string                          `json:"namespace"`
	Project             string                          `json:"project"`
	Roleset             string                          `json:"roleset"`
	SecretType          string                          `json:"secret_type"`
	ServiceAccountEmail string                          `json:"service_account_email"`
	TokenScopes         []string                        `json:"token_scopes"`
	Binding             []gcpsecretroleset.BindingState `json:"binding"`
}
