// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAudit creates a new instance of [Audit].
func NewAudit(name string, args AuditArgs) *Audit {
	return &Audit{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Audit)(nil)

// Audit represents the Terraform resource vault_audit.
type Audit struct {
	Name      string
	Args      AuditArgs
	state     *auditState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Audit].
func (a *Audit) Type() string {
	return "vault_audit"
}

// LocalName returns the local name for [Audit].
func (a *Audit) LocalName() string {
	return a.Name
}

// Configuration returns the configuration (args) for [Audit].
func (a *Audit) Configuration() interface{} {
	return a.Args
}

// DependOn is used for other resources to depend on [Audit].
func (a *Audit) DependOn() terra.Reference {
	return terra.ReferenceResource(a)
}

// Dependencies returns the list of resources [Audit] depends_on.
func (a *Audit) Dependencies() terra.Dependencies {
	return a.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Audit].
func (a *Audit) LifecycleManagement() *terra.Lifecycle {
	return a.Lifecycle
}

// Attributes returns the attributes for [Audit].
func (a *Audit) Attributes() auditAttributes {
	return auditAttributes{ref: terra.ReferenceResource(a)}
}

// ImportState imports the given attribute values into [Audit]'s state.
func (a *Audit) ImportState(av io.Reader) error {
	a.state = &auditState{}
	if err := json.NewDecoder(av).Decode(a.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", a.Type(), a.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Audit] has state.
func (a *Audit) State() (*auditState, bool) {
	return a.state, a.state != nil
}

// StateMust returns the state for [Audit]. Panics if the state is nil.
func (a *Audit) StateMust() *auditState {
	if a.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", a.Type(), a.LocalName()))
	}
	return a.state
}

// AuditArgs contains the configurations for vault_audit.
type AuditArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Local: bool, optional
	Local terra.BoolValue `hcl:"local,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Options: map of string, required
	Options terra.MapValue[terra.StringValue] `hcl:"options,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}
type auditAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of vault_audit.
func (a auditAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("description"))
}

// Id returns a reference to field id of vault_audit.
func (a auditAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("id"))
}

// Local returns a reference to field local of vault_audit.
func (a auditAttributes) Local() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("local"))
}

// Namespace returns a reference to field namespace of vault_audit.
func (a auditAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("namespace"))
}

// Options returns a reference to field options of vault_audit.
func (a auditAttributes) Options() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("options"))
}

// Path returns a reference to field path of vault_audit.
func (a auditAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("path"))
}

// Type returns a reference to field type of vault_audit.
func (a auditAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

type auditState struct {
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Local       bool              `json:"local"`
	Namespace   string            `json:"namespace"`
	Options     map[string]string `json:"options"`
	Path        string            `json:"path"`
	Type        string            `json:"type"`
}
