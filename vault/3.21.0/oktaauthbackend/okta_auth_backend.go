// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package oktaauthbackend

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Group struct {
	// GroupName: string, optional
	GroupName terra.StringValue `hcl:"group_name,attr"`
	// Policies: set of string, optional
	Policies terra.SetValue[terra.StringValue] `hcl:"policies,attr"`
}

type User struct {
	// Groups: set of string, optional
	Groups terra.SetValue[terra.StringValue] `hcl:"groups,attr"`
	// Policies: set of string, optional
	Policies terra.SetValue[terra.StringValue] `hcl:"policies,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type GroupAttributes struct {
	ref terra.Reference
}

func (g GroupAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GroupAttributes) InternalWithRef(ref terra.Reference) GroupAttributes {
	return GroupAttributes{ref: ref}
}

func (g GroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GroupAttributes) GroupName() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("group_name"))
}

func (g GroupAttributes) Policies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](g.ref.Append("policies"))
}

type UserAttributes struct {
	ref terra.Reference
}

func (u UserAttributes) InternalRef() (terra.Reference, error) {
	return u.ref, nil
}

func (u UserAttributes) InternalWithRef(ref terra.Reference) UserAttributes {
	return UserAttributes{ref: ref}
}

func (u UserAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return u.ref.InternalTokens()
}

func (u UserAttributes) Groups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](u.ref.Append("groups"))
}

func (u UserAttributes) Policies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](u.ref.Append("policies"))
}

func (u UserAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("username"))
}

type GroupState struct {
	GroupName string   `json:"group_name"`
	Policies  []string `json:"policies"`
}

type UserState struct {
	Groups   []string `json:"groups"`
	Policies []string `json:"policies"`
	Username string   `json:"username"`
}
