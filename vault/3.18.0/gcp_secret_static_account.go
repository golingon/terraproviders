// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	gcpsecretstaticaccount "github.com/golingon/terraproviders/vault/3.18.0/gcpsecretstaticaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGcpSecretStaticAccount creates a new instance of [GcpSecretStaticAccount].
func NewGcpSecretStaticAccount(name string, args GcpSecretStaticAccountArgs) *GcpSecretStaticAccount {
	return &GcpSecretStaticAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GcpSecretStaticAccount)(nil)

// GcpSecretStaticAccount represents the Terraform resource vault_gcp_secret_static_account.
type GcpSecretStaticAccount struct {
	Name      string
	Args      GcpSecretStaticAccountArgs
	state     *gcpSecretStaticAccountState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GcpSecretStaticAccount].
func (gssa *GcpSecretStaticAccount) Type() string {
	return "vault_gcp_secret_static_account"
}

// LocalName returns the local name for [GcpSecretStaticAccount].
func (gssa *GcpSecretStaticAccount) LocalName() string {
	return gssa.Name
}

// Configuration returns the configuration (args) for [GcpSecretStaticAccount].
func (gssa *GcpSecretStaticAccount) Configuration() interface{} {
	return gssa.Args
}

// DependOn is used for other resources to depend on [GcpSecretStaticAccount].
func (gssa *GcpSecretStaticAccount) DependOn() terra.Reference {
	return terra.ReferenceResource(gssa)
}

// Dependencies returns the list of resources [GcpSecretStaticAccount] depends_on.
func (gssa *GcpSecretStaticAccount) Dependencies() terra.Dependencies {
	return gssa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GcpSecretStaticAccount].
func (gssa *GcpSecretStaticAccount) LifecycleManagement() *terra.Lifecycle {
	return gssa.Lifecycle
}

// Attributes returns the attributes for [GcpSecretStaticAccount].
func (gssa *GcpSecretStaticAccount) Attributes() gcpSecretStaticAccountAttributes {
	return gcpSecretStaticAccountAttributes{ref: terra.ReferenceResource(gssa)}
}

// ImportState imports the given attribute values into [GcpSecretStaticAccount]'s state.
func (gssa *GcpSecretStaticAccount) ImportState(av io.Reader) error {
	gssa.state = &gcpSecretStaticAccountState{}
	if err := json.NewDecoder(av).Decode(gssa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gssa.Type(), gssa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GcpSecretStaticAccount] has state.
func (gssa *GcpSecretStaticAccount) State() (*gcpSecretStaticAccountState, bool) {
	return gssa.state, gssa.state != nil
}

// StateMust returns the state for [GcpSecretStaticAccount]. Panics if the state is nil.
func (gssa *GcpSecretStaticAccount) StateMust() *gcpSecretStaticAccountState {
	if gssa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gssa.Type(), gssa.LocalName()))
	}
	return gssa.state
}

// GcpSecretStaticAccountArgs contains the configurations for vault_gcp_secret_static_account.
type GcpSecretStaticAccountArgs struct {
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// SecretType: string, optional
	SecretType terra.StringValue `hcl:"secret_type,attr"`
	// ServiceAccountEmail: string, required
	ServiceAccountEmail terra.StringValue `hcl:"service_account_email,attr" validate:"required"`
	// StaticAccount: string, required
	StaticAccount terra.StringValue `hcl:"static_account,attr" validate:"required"`
	// TokenScopes: set of string, optional
	TokenScopes terra.SetValue[terra.StringValue] `hcl:"token_scopes,attr"`
	// Binding: min=0
	Binding []gcpsecretstaticaccount.Binding `hcl:"binding,block" validate:"min=0"`
}
type gcpSecretStaticAccountAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_gcp_secret_static_account.
func (gssa gcpSecretStaticAccountAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(gssa.ref.Append("backend"))
}

// Id returns a reference to field id of vault_gcp_secret_static_account.
func (gssa gcpSecretStaticAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gssa.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_gcp_secret_static_account.
func (gssa gcpSecretStaticAccountAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(gssa.ref.Append("namespace"))
}

// SecretType returns a reference to field secret_type of vault_gcp_secret_static_account.
func (gssa gcpSecretStaticAccountAttributes) SecretType() terra.StringValue {
	return terra.ReferenceAsString(gssa.ref.Append("secret_type"))
}

// ServiceAccountEmail returns a reference to field service_account_email of vault_gcp_secret_static_account.
func (gssa gcpSecretStaticAccountAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(gssa.ref.Append("service_account_email"))
}

// ServiceAccountProject returns a reference to field service_account_project of vault_gcp_secret_static_account.
func (gssa gcpSecretStaticAccountAttributes) ServiceAccountProject() terra.StringValue {
	return terra.ReferenceAsString(gssa.ref.Append("service_account_project"))
}

// StaticAccount returns a reference to field static_account of vault_gcp_secret_static_account.
func (gssa gcpSecretStaticAccountAttributes) StaticAccount() terra.StringValue {
	return terra.ReferenceAsString(gssa.ref.Append("static_account"))
}

// TokenScopes returns a reference to field token_scopes of vault_gcp_secret_static_account.
func (gssa gcpSecretStaticAccountAttributes) TokenScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gssa.ref.Append("token_scopes"))
}

func (gssa gcpSecretStaticAccountAttributes) Binding() terra.SetValue[gcpsecretstaticaccount.BindingAttributes] {
	return terra.ReferenceAsSet[gcpsecretstaticaccount.BindingAttributes](gssa.ref.Append("binding"))
}

type gcpSecretStaticAccountState struct {
	Backend               string                                `json:"backend"`
	Id                    string                                `json:"id"`
	Namespace             string                                `json:"namespace"`
	SecretType            string                                `json:"secret_type"`
	ServiceAccountEmail   string                                `json:"service_account_email"`
	ServiceAccountProject string                                `json:"service_account_project"`
	StaticAccount         string                                `json:"static_account"`
	TokenScopes           []string                              `json:"token_scopes"`
	Binding               []gcpsecretstaticaccount.BindingState `json:"binding"`
}
