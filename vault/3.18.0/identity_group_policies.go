// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewIdentityGroupPolicies creates a new instance of [IdentityGroupPolicies].
func NewIdentityGroupPolicies(name string, args IdentityGroupPoliciesArgs) *IdentityGroupPolicies {
	return &IdentityGroupPolicies{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IdentityGroupPolicies)(nil)

// IdentityGroupPolicies represents the Terraform resource vault_identity_group_policies.
type IdentityGroupPolicies struct {
	Name      string
	Args      IdentityGroupPoliciesArgs
	state     *identityGroupPoliciesState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [IdentityGroupPolicies].
func (igp *IdentityGroupPolicies) Type() string {
	return "vault_identity_group_policies"
}

// LocalName returns the local name for [IdentityGroupPolicies].
func (igp *IdentityGroupPolicies) LocalName() string {
	return igp.Name
}

// Configuration returns the configuration (args) for [IdentityGroupPolicies].
func (igp *IdentityGroupPolicies) Configuration() interface{} {
	return igp.Args
}

// DependOn is used for other resources to depend on [IdentityGroupPolicies].
func (igp *IdentityGroupPolicies) DependOn() terra.Reference {
	return terra.ReferenceResource(igp)
}

// Dependencies returns the list of resources [IdentityGroupPolicies] depends_on.
func (igp *IdentityGroupPolicies) Dependencies() terra.Dependencies {
	return igp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [IdentityGroupPolicies].
func (igp *IdentityGroupPolicies) LifecycleManagement() *terra.Lifecycle {
	return igp.Lifecycle
}

// Attributes returns the attributes for [IdentityGroupPolicies].
func (igp *IdentityGroupPolicies) Attributes() identityGroupPoliciesAttributes {
	return identityGroupPoliciesAttributes{ref: terra.ReferenceResource(igp)}
}

// ImportState imports the given attribute values into [IdentityGroupPolicies]'s state.
func (igp *IdentityGroupPolicies) ImportState(av io.Reader) error {
	igp.state = &identityGroupPoliciesState{}
	if err := json.NewDecoder(av).Decode(igp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", igp.Type(), igp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [IdentityGroupPolicies] has state.
func (igp *IdentityGroupPolicies) State() (*identityGroupPoliciesState, bool) {
	return igp.state, igp.state != nil
}

// StateMust returns the state for [IdentityGroupPolicies]. Panics if the state is nil.
func (igp *IdentityGroupPolicies) StateMust() *identityGroupPoliciesState {
	if igp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", igp.Type(), igp.LocalName()))
	}
	return igp.state
}

// IdentityGroupPoliciesArgs contains the configurations for vault_identity_group_policies.
type IdentityGroupPoliciesArgs struct {
	// Exclusive: bool, optional
	Exclusive terra.BoolValue `hcl:"exclusive,attr"`
	// GroupId: string, required
	GroupId terra.StringValue `hcl:"group_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Policies: set of string, required
	Policies terra.SetValue[terra.StringValue] `hcl:"policies,attr" validate:"required"`
}
type identityGroupPoliciesAttributes struct {
	ref terra.Reference
}

// Exclusive returns a reference to field exclusive of vault_identity_group_policies.
func (igp identityGroupPoliciesAttributes) Exclusive() terra.BoolValue {
	return terra.ReferenceAsBool(igp.ref.Append("exclusive"))
}

// GroupId returns a reference to field group_id of vault_identity_group_policies.
func (igp identityGroupPoliciesAttributes) GroupId() terra.StringValue {
	return terra.ReferenceAsString(igp.ref.Append("group_id"))
}

// GroupName returns a reference to field group_name of vault_identity_group_policies.
func (igp identityGroupPoliciesAttributes) GroupName() terra.StringValue {
	return terra.ReferenceAsString(igp.ref.Append("group_name"))
}

// Id returns a reference to field id of vault_identity_group_policies.
func (igp identityGroupPoliciesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(igp.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_identity_group_policies.
func (igp identityGroupPoliciesAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(igp.ref.Append("namespace"))
}

// Policies returns a reference to field policies of vault_identity_group_policies.
func (igp identityGroupPoliciesAttributes) Policies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](igp.ref.Append("policies"))
}

type identityGroupPoliciesState struct {
	Exclusive bool     `json:"exclusive"`
	GroupId   string   `json:"group_id"`
	GroupName string   `json:"group_name"`
	Id        string   `json:"id"`
	Namespace string   `json:"namespace"`
	Policies  []string `json:"policies"`
}
