// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewMfaPingid creates a new instance of [MfaPingid].
func NewMfaPingid(name string, args MfaPingidArgs) *MfaPingid {
	return &MfaPingid{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MfaPingid)(nil)

// MfaPingid represents the Terraform resource vault_mfa_pingid.
type MfaPingid struct {
	Name      string
	Args      MfaPingidArgs
	state     *mfaPingidState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [MfaPingid].
func (mp *MfaPingid) Type() string {
	return "vault_mfa_pingid"
}

// LocalName returns the local name for [MfaPingid].
func (mp *MfaPingid) LocalName() string {
	return mp.Name
}

// Configuration returns the configuration (args) for [MfaPingid].
func (mp *MfaPingid) Configuration() interface{} {
	return mp.Args
}

// DependOn is used for other resources to depend on [MfaPingid].
func (mp *MfaPingid) DependOn() terra.Reference {
	return terra.ReferenceResource(mp)
}

// Dependencies returns the list of resources [MfaPingid] depends_on.
func (mp *MfaPingid) Dependencies() terra.Dependencies {
	return mp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [MfaPingid].
func (mp *MfaPingid) LifecycleManagement() *terra.Lifecycle {
	return mp.Lifecycle
}

// Attributes returns the attributes for [MfaPingid].
func (mp *MfaPingid) Attributes() mfaPingidAttributes {
	return mfaPingidAttributes{ref: terra.ReferenceResource(mp)}
}

// ImportState imports the given attribute values into [MfaPingid]'s state.
func (mp *MfaPingid) ImportState(av io.Reader) error {
	mp.state = &mfaPingidState{}
	if err := json.NewDecoder(av).Decode(mp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mp.Type(), mp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [MfaPingid] has state.
func (mp *MfaPingid) State() (*mfaPingidState, bool) {
	return mp.state, mp.state != nil
}

// StateMust returns the state for [MfaPingid]. Panics if the state is nil.
func (mp *MfaPingid) StateMust() *mfaPingidState {
	if mp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mp.Type(), mp.LocalName()))
	}
	return mp.state
}

// MfaPingidArgs contains the configurations for vault_mfa_pingid.
type MfaPingidArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MountAccessor: string, required
	MountAccessor terra.StringValue `hcl:"mount_accessor,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// SettingsFileBase64: string, required
	SettingsFileBase64 terra.StringValue `hcl:"settings_file_base64,attr" validate:"required"`
	// UsernameFormat: string, optional
	UsernameFormat terra.StringValue `hcl:"username_format,attr"`
}
type mfaPingidAttributes struct {
	ref terra.Reference
}

// AdminUrl returns a reference to field admin_url of vault_mfa_pingid.
func (mp mfaPingidAttributes) AdminUrl() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("admin_url"))
}

// AuthenticatorUrl returns a reference to field authenticator_url of vault_mfa_pingid.
func (mp mfaPingidAttributes) AuthenticatorUrl() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("authenticator_url"))
}

// Id returns a reference to field id of vault_mfa_pingid.
func (mp mfaPingidAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("id"))
}

// IdpUrl returns a reference to field idp_url of vault_mfa_pingid.
func (mp mfaPingidAttributes) IdpUrl() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("idp_url"))
}

// MountAccessor returns a reference to field mount_accessor of vault_mfa_pingid.
func (mp mfaPingidAttributes) MountAccessor() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("mount_accessor"))
}

// Name returns a reference to field name of vault_mfa_pingid.
func (mp mfaPingidAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_mfa_pingid.
func (mp mfaPingidAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("namespace"))
}

// NamespaceId returns a reference to field namespace_id of vault_mfa_pingid.
func (mp mfaPingidAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("namespace_id"))
}

// OrgAlias returns a reference to field org_alias of vault_mfa_pingid.
func (mp mfaPingidAttributes) OrgAlias() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("org_alias"))
}

// SettingsFileBase64 returns a reference to field settings_file_base64 of vault_mfa_pingid.
func (mp mfaPingidAttributes) SettingsFileBase64() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("settings_file_base64"))
}

// Type returns a reference to field type of vault_mfa_pingid.
func (mp mfaPingidAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("type"))
}

// UseSignature returns a reference to field use_signature of vault_mfa_pingid.
func (mp mfaPingidAttributes) UseSignature() terra.BoolValue {
	return terra.ReferenceAsBool(mp.ref.Append("use_signature"))
}

// UsernameFormat returns a reference to field username_format of vault_mfa_pingid.
func (mp mfaPingidAttributes) UsernameFormat() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("username_format"))
}

type mfaPingidState struct {
	AdminUrl           string `json:"admin_url"`
	AuthenticatorUrl   string `json:"authenticator_url"`
	Id                 string `json:"id"`
	IdpUrl             string `json:"idp_url"`
	MountAccessor      string `json:"mount_accessor"`
	Name               string `json:"name"`
	Namespace          string `json:"namespace"`
	NamespaceId        string `json:"namespace_id"`
	OrgAlias           string `json:"org_alias"`
	SettingsFileBase64 string `json:"settings_file_base64"`
	Type               string `json:"type"`
	UseSignature       bool   `json:"use_signature"`
	UsernameFormat     string `json:"username_format"`
}
