// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAwsSecretBackend creates a new instance of [AwsSecretBackend].
func NewAwsSecretBackend(name string, args AwsSecretBackendArgs) *AwsSecretBackend {
	return &AwsSecretBackend{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AwsSecretBackend)(nil)

// AwsSecretBackend represents the Terraform resource vault_aws_secret_backend.
type AwsSecretBackend struct {
	Name      string
	Args      AwsSecretBackendArgs
	state     *awsSecretBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AwsSecretBackend].
func (asb *AwsSecretBackend) Type() string {
	return "vault_aws_secret_backend"
}

// LocalName returns the local name for [AwsSecretBackend].
func (asb *AwsSecretBackend) LocalName() string {
	return asb.Name
}

// Configuration returns the configuration (args) for [AwsSecretBackend].
func (asb *AwsSecretBackend) Configuration() interface{} {
	return asb.Args
}

// DependOn is used for other resources to depend on [AwsSecretBackend].
func (asb *AwsSecretBackend) DependOn() terra.Reference {
	return terra.ReferenceResource(asb)
}

// Dependencies returns the list of resources [AwsSecretBackend] depends_on.
func (asb *AwsSecretBackend) Dependencies() terra.Dependencies {
	return asb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AwsSecretBackend].
func (asb *AwsSecretBackend) LifecycleManagement() *terra.Lifecycle {
	return asb.Lifecycle
}

// Attributes returns the attributes for [AwsSecretBackend].
func (asb *AwsSecretBackend) Attributes() awsSecretBackendAttributes {
	return awsSecretBackendAttributes{ref: terra.ReferenceResource(asb)}
}

// ImportState imports the given attribute values into [AwsSecretBackend]'s state.
func (asb *AwsSecretBackend) ImportState(av io.Reader) error {
	asb.state = &awsSecretBackendState{}
	if err := json.NewDecoder(av).Decode(asb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asb.Type(), asb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AwsSecretBackend] has state.
func (asb *AwsSecretBackend) State() (*awsSecretBackendState, bool) {
	return asb.state, asb.state != nil
}

// StateMust returns the state for [AwsSecretBackend]. Panics if the state is nil.
func (asb *AwsSecretBackend) StateMust() *awsSecretBackendState {
	if asb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asb.Type(), asb.LocalName()))
	}
	return asb.state
}

// AwsSecretBackendArgs contains the configurations for vault_aws_secret_backend.
type AwsSecretBackendArgs struct {
	// AccessKey: string, optional
	AccessKey terra.StringValue `hcl:"access_key,attr"`
	// DefaultLeaseTtlSeconds: number, optional
	DefaultLeaseTtlSeconds terra.NumberValue `hcl:"default_lease_ttl_seconds,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableRemount: bool, optional
	DisableRemount terra.BoolValue `hcl:"disable_remount,attr"`
	// IamEndpoint: string, optional
	IamEndpoint terra.StringValue `hcl:"iam_endpoint,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxLeaseTtlSeconds: number, optional
	MaxLeaseTtlSeconds terra.NumberValue `hcl:"max_lease_ttl_seconds,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// SecretKey: string, optional
	SecretKey terra.StringValue `hcl:"secret_key,attr"`
	// StsEndpoint: string, optional
	StsEndpoint terra.StringValue `hcl:"sts_endpoint,attr"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}
type awsSecretBackendAttributes struct {
	ref terra.Reference
}

// AccessKey returns a reference to field access_key of vault_aws_secret_backend.
func (asb awsSecretBackendAttributes) AccessKey() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("access_key"))
}

// DefaultLeaseTtlSeconds returns a reference to field default_lease_ttl_seconds of vault_aws_secret_backend.
func (asb awsSecretBackendAttributes) DefaultLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(asb.ref.Append("default_lease_ttl_seconds"))
}

// Description returns a reference to field description of vault_aws_secret_backend.
func (asb awsSecretBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("description"))
}

// DisableRemount returns a reference to field disable_remount of vault_aws_secret_backend.
func (asb awsSecretBackendAttributes) DisableRemount() terra.BoolValue {
	return terra.ReferenceAsBool(asb.ref.Append("disable_remount"))
}

// IamEndpoint returns a reference to field iam_endpoint of vault_aws_secret_backend.
func (asb awsSecretBackendAttributes) IamEndpoint() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("iam_endpoint"))
}

// Id returns a reference to field id of vault_aws_secret_backend.
func (asb awsSecretBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("id"))
}

// MaxLeaseTtlSeconds returns a reference to field max_lease_ttl_seconds of vault_aws_secret_backend.
func (asb awsSecretBackendAttributes) MaxLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(asb.ref.Append("max_lease_ttl_seconds"))
}

// Namespace returns a reference to field namespace of vault_aws_secret_backend.
func (asb awsSecretBackendAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_aws_secret_backend.
func (asb awsSecretBackendAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("path"))
}

// Region returns a reference to field region of vault_aws_secret_backend.
func (asb awsSecretBackendAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("region"))
}

// SecretKey returns a reference to field secret_key of vault_aws_secret_backend.
func (asb awsSecretBackendAttributes) SecretKey() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("secret_key"))
}

// StsEndpoint returns a reference to field sts_endpoint of vault_aws_secret_backend.
func (asb awsSecretBackendAttributes) StsEndpoint() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("sts_endpoint"))
}

// UsernameTemplate returns a reference to field username_template of vault_aws_secret_backend.
func (asb awsSecretBackendAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("username_template"))
}

type awsSecretBackendState struct {
	AccessKey              string  `json:"access_key"`
	DefaultLeaseTtlSeconds float64 `json:"default_lease_ttl_seconds"`
	Description            string  `json:"description"`
	DisableRemount         bool    `json:"disable_remount"`
	IamEndpoint            string  `json:"iam_endpoint"`
	Id                     string  `json:"id"`
	MaxLeaseTtlSeconds     float64 `json:"max_lease_ttl_seconds"`
	Namespace              string  `json:"namespace"`
	Path                   string  `json:"path"`
	Region                 string  `json:"region"`
	SecretKey              string  `json:"secret_key"`
	StsEndpoint            string  `json:"sts_endpoint"`
	UsernameTemplate       string  `json:"username_template"`
}
