// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import "github.com/volvo-cars/lingon/pkg/terra"

// NewDataTransitEncrypt creates a new instance of [DataTransitEncrypt].
func NewDataTransitEncrypt(name string, args DataTransitEncryptArgs) *DataTransitEncrypt {
	return &DataTransitEncrypt{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataTransitEncrypt)(nil)

// DataTransitEncrypt represents the Terraform data resource vault_transit_encrypt.
type DataTransitEncrypt struct {
	Name string
	Args DataTransitEncryptArgs
}

// DataSource returns the Terraform object type for [DataTransitEncrypt].
func (te *DataTransitEncrypt) DataSource() string {
	return "vault_transit_encrypt"
}

// LocalName returns the local name for [DataTransitEncrypt].
func (te *DataTransitEncrypt) LocalName() string {
	return te.Name
}

// Configuration returns the configuration (args) for [DataTransitEncrypt].
func (te *DataTransitEncrypt) Configuration() interface{} {
	return te.Args
}

// Attributes returns the attributes for [DataTransitEncrypt].
func (te *DataTransitEncrypt) Attributes() dataTransitEncryptAttributes {
	return dataTransitEncryptAttributes{ref: terra.ReferenceDataResource(te)}
}

// DataTransitEncryptArgs contains the configurations for vault_transit_encrypt.
type DataTransitEncryptArgs struct {
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// Context: string, optional
	Context terra.StringValue `hcl:"context,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// KeyVersion: number, optional
	KeyVersion terra.NumberValue `hcl:"key_version,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Plaintext: string, required
	Plaintext terra.StringValue `hcl:"plaintext,attr" validate:"required"`
}
type dataTransitEncryptAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_transit_encrypt.
func (te dataTransitEncryptAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(te.ref.Append("backend"))
}

// Ciphertext returns a reference to field ciphertext of vault_transit_encrypt.
func (te dataTransitEncryptAttributes) Ciphertext() terra.StringValue {
	return terra.ReferenceAsString(te.ref.Append("ciphertext"))
}

// Context returns a reference to field context of vault_transit_encrypt.
func (te dataTransitEncryptAttributes) Context() terra.StringValue {
	return terra.ReferenceAsString(te.ref.Append("context"))
}

// Id returns a reference to field id of vault_transit_encrypt.
func (te dataTransitEncryptAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(te.ref.Append("id"))
}

// Key returns a reference to field key of vault_transit_encrypt.
func (te dataTransitEncryptAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(te.ref.Append("key"))
}

// KeyVersion returns a reference to field key_version of vault_transit_encrypt.
func (te dataTransitEncryptAttributes) KeyVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(te.ref.Append("key_version"))
}

// Namespace returns a reference to field namespace of vault_transit_encrypt.
func (te dataTransitEncryptAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(te.ref.Append("namespace"))
}

// Plaintext returns a reference to field plaintext of vault_transit_encrypt.
func (te dataTransitEncryptAttributes) Plaintext() terra.StringValue {
	return terra.ReferenceAsString(te.ref.Append("plaintext"))
}
