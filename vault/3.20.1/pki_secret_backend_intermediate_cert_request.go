// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewPkiSecretBackendIntermediateCertRequest creates a new instance of [PkiSecretBackendIntermediateCertRequest].
func NewPkiSecretBackendIntermediateCertRequest(name string, args PkiSecretBackendIntermediateCertRequestArgs) *PkiSecretBackendIntermediateCertRequest {
	return &PkiSecretBackendIntermediateCertRequest{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PkiSecretBackendIntermediateCertRequest)(nil)

// PkiSecretBackendIntermediateCertRequest represents the Terraform resource vault_pki_secret_backend_intermediate_cert_request.
type PkiSecretBackendIntermediateCertRequest struct {
	Name      string
	Args      PkiSecretBackendIntermediateCertRequestArgs
	state     *pkiSecretBackendIntermediateCertRequestState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [PkiSecretBackendIntermediateCertRequest].
func (psbicr *PkiSecretBackendIntermediateCertRequest) Type() string {
	return "vault_pki_secret_backend_intermediate_cert_request"
}

// LocalName returns the local name for [PkiSecretBackendIntermediateCertRequest].
func (psbicr *PkiSecretBackendIntermediateCertRequest) LocalName() string {
	return psbicr.Name
}

// Configuration returns the configuration (args) for [PkiSecretBackendIntermediateCertRequest].
func (psbicr *PkiSecretBackendIntermediateCertRequest) Configuration() interface{} {
	return psbicr.Args
}

// DependOn is used for other resources to depend on [PkiSecretBackendIntermediateCertRequest].
func (psbicr *PkiSecretBackendIntermediateCertRequest) DependOn() terra.Reference {
	return terra.ReferenceResource(psbicr)
}

// Dependencies returns the list of resources [PkiSecretBackendIntermediateCertRequest] depends_on.
func (psbicr *PkiSecretBackendIntermediateCertRequest) Dependencies() terra.Dependencies {
	return psbicr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [PkiSecretBackendIntermediateCertRequest].
func (psbicr *PkiSecretBackendIntermediateCertRequest) LifecycleManagement() *terra.Lifecycle {
	return psbicr.Lifecycle
}

// Attributes returns the attributes for [PkiSecretBackendIntermediateCertRequest].
func (psbicr *PkiSecretBackendIntermediateCertRequest) Attributes() pkiSecretBackendIntermediateCertRequestAttributes {
	return pkiSecretBackendIntermediateCertRequestAttributes{ref: terra.ReferenceResource(psbicr)}
}

// ImportState imports the given attribute values into [PkiSecretBackendIntermediateCertRequest]'s state.
func (psbicr *PkiSecretBackendIntermediateCertRequest) ImportState(av io.Reader) error {
	psbicr.state = &pkiSecretBackendIntermediateCertRequestState{}
	if err := json.NewDecoder(av).Decode(psbicr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", psbicr.Type(), psbicr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [PkiSecretBackendIntermediateCertRequest] has state.
func (psbicr *PkiSecretBackendIntermediateCertRequest) State() (*pkiSecretBackendIntermediateCertRequestState, bool) {
	return psbicr.state, psbicr.state != nil
}

// StateMust returns the state for [PkiSecretBackendIntermediateCertRequest]. Panics if the state is nil.
func (psbicr *PkiSecretBackendIntermediateCertRequest) StateMust() *pkiSecretBackendIntermediateCertRequestState {
	if psbicr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", psbicr.Type(), psbicr.LocalName()))
	}
	return psbicr.state
}

// PkiSecretBackendIntermediateCertRequestArgs contains the configurations for vault_pki_secret_backend_intermediate_cert_request.
type PkiSecretBackendIntermediateCertRequestArgs struct {
	// AddBasicConstraints: bool, optional
	AddBasicConstraints terra.BoolValue `hcl:"add_basic_constraints,attr"`
	// AltNames: list of string, optional
	AltNames terra.ListValue[terra.StringValue] `hcl:"alt_names,attr"`
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// CommonName: string, required
	CommonName terra.StringValue `hcl:"common_name,attr" validate:"required"`
	// Country: string, optional
	Country terra.StringValue `hcl:"country,attr"`
	// ExcludeCnFromSans: bool, optional
	ExcludeCnFromSans terra.BoolValue `hcl:"exclude_cn_from_sans,attr"`
	// Format: string, optional
	Format terra.StringValue `hcl:"format,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpSans: list of string, optional
	IpSans terra.ListValue[terra.StringValue] `hcl:"ip_sans,attr"`
	// KeyBits: number, optional
	KeyBits terra.NumberValue `hcl:"key_bits,attr"`
	// KeyName: string, optional
	KeyName terra.StringValue `hcl:"key_name,attr"`
	// KeyRef: string, optional
	KeyRef terra.StringValue `hcl:"key_ref,attr"`
	// KeyType: string, optional
	KeyType terra.StringValue `hcl:"key_type,attr"`
	// Locality: string, optional
	Locality terra.StringValue `hcl:"locality,attr"`
	// ManagedKeyId: string, optional
	ManagedKeyId terra.StringValue `hcl:"managed_key_id,attr"`
	// ManagedKeyName: string, optional
	ManagedKeyName terra.StringValue `hcl:"managed_key_name,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Organization: string, optional
	Organization terra.StringValue `hcl:"organization,attr"`
	// OtherSans: list of string, optional
	OtherSans terra.ListValue[terra.StringValue] `hcl:"other_sans,attr"`
	// Ou: string, optional
	Ou terra.StringValue `hcl:"ou,attr"`
	// PostalCode: string, optional
	PostalCode terra.StringValue `hcl:"postal_code,attr"`
	// PrivateKeyFormat: string, optional
	PrivateKeyFormat terra.StringValue `hcl:"private_key_format,attr"`
	// Province: string, optional
	Province terra.StringValue `hcl:"province,attr"`
	// StreetAddress: string, optional
	StreetAddress terra.StringValue `hcl:"street_address,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// UriSans: list of string, optional
	UriSans terra.ListValue[terra.StringValue] `hcl:"uri_sans,attr"`
}
type pkiSecretBackendIntermediateCertRequestAttributes struct {
	ref terra.Reference
}

// AddBasicConstraints returns a reference to field add_basic_constraints of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) AddBasicConstraints() terra.BoolValue {
	return terra.ReferenceAsBool(psbicr.ref.Append("add_basic_constraints"))
}

// AltNames returns a reference to field alt_names of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) AltNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbicr.ref.Append("alt_names"))
}

// Backend returns a reference to field backend of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("backend"))
}

// CommonName returns a reference to field common_name of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) CommonName() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("common_name"))
}

// Country returns a reference to field country of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) Country() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("country"))
}

// Csr returns a reference to field csr of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) Csr() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("csr"))
}

// ExcludeCnFromSans returns a reference to field exclude_cn_from_sans of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) ExcludeCnFromSans() terra.BoolValue {
	return terra.ReferenceAsBool(psbicr.ref.Append("exclude_cn_from_sans"))
}

// Format returns a reference to field format of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("format"))
}

// Id returns a reference to field id of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("id"))
}

// IpSans returns a reference to field ip_sans of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) IpSans() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbicr.ref.Append("ip_sans"))
}

// KeyBits returns a reference to field key_bits of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) KeyBits() terra.NumberValue {
	return terra.ReferenceAsNumber(psbicr.ref.Append("key_bits"))
}

// KeyId returns a reference to field key_id of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("key_id"))
}

// KeyName returns a reference to field key_name of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("key_name"))
}

// KeyRef returns a reference to field key_ref of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) KeyRef() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("key_ref"))
}

// KeyType returns a reference to field key_type of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) KeyType() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("key_type"))
}

// Locality returns a reference to field locality of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) Locality() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("locality"))
}

// ManagedKeyId returns a reference to field managed_key_id of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) ManagedKeyId() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("managed_key_id"))
}

// ManagedKeyName returns a reference to field managed_key_name of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) ManagedKeyName() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("managed_key_name"))
}

// Namespace returns a reference to field namespace of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("namespace"))
}

// Organization returns a reference to field organization of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("organization"))
}

// OtherSans returns a reference to field other_sans of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) OtherSans() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbicr.ref.Append("other_sans"))
}

// Ou returns a reference to field ou of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) Ou() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("ou"))
}

// PostalCode returns a reference to field postal_code of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) PostalCode() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("postal_code"))
}

// PrivateKey returns a reference to field private_key of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("private_key"))
}

// PrivateKeyFormat returns a reference to field private_key_format of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) PrivateKeyFormat() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("private_key_format"))
}

// PrivateKeyType returns a reference to field private_key_type of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) PrivateKeyType() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("private_key_type"))
}

// Province returns a reference to field province of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) Province() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("province"))
}

// StreetAddress returns a reference to field street_address of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) StreetAddress() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("street_address"))
}

// Type returns a reference to field type of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(psbicr.ref.Append("type"))
}

// UriSans returns a reference to field uri_sans of vault_pki_secret_backend_intermediate_cert_request.
func (psbicr pkiSecretBackendIntermediateCertRequestAttributes) UriSans() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psbicr.ref.Append("uri_sans"))
}

type pkiSecretBackendIntermediateCertRequestState struct {
	AddBasicConstraints bool     `json:"add_basic_constraints"`
	AltNames            []string `json:"alt_names"`
	Backend             string   `json:"backend"`
	CommonName          string   `json:"common_name"`
	Country             string   `json:"country"`
	Csr                 string   `json:"csr"`
	ExcludeCnFromSans   bool     `json:"exclude_cn_from_sans"`
	Format              string   `json:"format"`
	Id                  string   `json:"id"`
	IpSans              []string `json:"ip_sans"`
	KeyBits             float64  `json:"key_bits"`
	KeyId               string   `json:"key_id"`
	KeyName             string   `json:"key_name"`
	KeyRef              string   `json:"key_ref"`
	KeyType             string   `json:"key_type"`
	Locality            string   `json:"locality"`
	ManagedKeyId        string   `json:"managed_key_id"`
	ManagedKeyName      string   `json:"managed_key_name"`
	Namespace           string   `json:"namespace"`
	Organization        string   `json:"organization"`
	OtherSans           []string `json:"other_sans"`
	Ou                  string   `json:"ou"`
	PostalCode          string   `json:"postal_code"`
	PrivateKey          string   `json:"private_key"`
	PrivateKeyFormat    string   `json:"private_key_format"`
	PrivateKeyType      string   `json:"private_key_type"`
	Province            string   `json:"province"`
	StreetAddress       string   `json:"street_address"`
	Type                string   `json:"type"`
	UriSans             []string `json:"uri_sans"`
}
