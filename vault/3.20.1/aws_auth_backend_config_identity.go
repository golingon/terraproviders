// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAwsAuthBackendConfigIdentity creates a new instance of [AwsAuthBackendConfigIdentity].
func NewAwsAuthBackendConfigIdentity(name string, args AwsAuthBackendConfigIdentityArgs) *AwsAuthBackendConfigIdentity {
	return &AwsAuthBackendConfigIdentity{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AwsAuthBackendConfigIdentity)(nil)

// AwsAuthBackendConfigIdentity represents the Terraform resource vault_aws_auth_backend_config_identity.
type AwsAuthBackendConfigIdentity struct {
	Name      string
	Args      AwsAuthBackendConfigIdentityArgs
	state     *awsAuthBackendConfigIdentityState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AwsAuthBackendConfigIdentity].
func (aabci *AwsAuthBackendConfigIdentity) Type() string {
	return "vault_aws_auth_backend_config_identity"
}

// LocalName returns the local name for [AwsAuthBackendConfigIdentity].
func (aabci *AwsAuthBackendConfigIdentity) LocalName() string {
	return aabci.Name
}

// Configuration returns the configuration (args) for [AwsAuthBackendConfigIdentity].
func (aabci *AwsAuthBackendConfigIdentity) Configuration() interface{} {
	return aabci.Args
}

// DependOn is used for other resources to depend on [AwsAuthBackendConfigIdentity].
func (aabci *AwsAuthBackendConfigIdentity) DependOn() terra.Reference {
	return terra.ReferenceResource(aabci)
}

// Dependencies returns the list of resources [AwsAuthBackendConfigIdentity] depends_on.
func (aabci *AwsAuthBackendConfigIdentity) Dependencies() terra.Dependencies {
	return aabci.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AwsAuthBackendConfigIdentity].
func (aabci *AwsAuthBackendConfigIdentity) LifecycleManagement() *terra.Lifecycle {
	return aabci.Lifecycle
}

// Attributes returns the attributes for [AwsAuthBackendConfigIdentity].
func (aabci *AwsAuthBackendConfigIdentity) Attributes() awsAuthBackendConfigIdentityAttributes {
	return awsAuthBackendConfigIdentityAttributes{ref: terra.ReferenceResource(aabci)}
}

// ImportState imports the given attribute values into [AwsAuthBackendConfigIdentity]'s state.
func (aabci *AwsAuthBackendConfigIdentity) ImportState(av io.Reader) error {
	aabci.state = &awsAuthBackendConfigIdentityState{}
	if err := json.NewDecoder(av).Decode(aabci.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aabci.Type(), aabci.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AwsAuthBackendConfigIdentity] has state.
func (aabci *AwsAuthBackendConfigIdentity) State() (*awsAuthBackendConfigIdentityState, bool) {
	return aabci.state, aabci.state != nil
}

// StateMust returns the state for [AwsAuthBackendConfigIdentity]. Panics if the state is nil.
func (aabci *AwsAuthBackendConfigIdentity) StateMust() *awsAuthBackendConfigIdentityState {
	if aabci.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aabci.Type(), aabci.LocalName()))
	}
	return aabci.state
}

// AwsAuthBackendConfigIdentityArgs contains the configurations for vault_aws_auth_backend_config_identity.
type AwsAuthBackendConfigIdentityArgs struct {
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// Ec2Alias: string, optional
	Ec2Alias terra.StringValue `hcl:"ec2_alias,attr"`
	// Ec2Metadata: set of string, optional
	Ec2Metadata terra.SetValue[terra.StringValue] `hcl:"ec2_metadata,attr"`
	// IamAlias: string, optional
	IamAlias terra.StringValue `hcl:"iam_alias,attr"`
	// IamMetadata: set of string, optional
	IamMetadata terra.SetValue[terra.StringValue] `hcl:"iam_metadata,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}
type awsAuthBackendConfigIdentityAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_aws_auth_backend_config_identity.
func (aabci awsAuthBackendConfigIdentityAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(aabci.ref.Append("backend"))
}

// Ec2Alias returns a reference to field ec2_alias of vault_aws_auth_backend_config_identity.
func (aabci awsAuthBackendConfigIdentityAttributes) Ec2Alias() terra.StringValue {
	return terra.ReferenceAsString(aabci.ref.Append("ec2_alias"))
}

// Ec2Metadata returns a reference to field ec2_metadata of vault_aws_auth_backend_config_identity.
func (aabci awsAuthBackendConfigIdentityAttributes) Ec2Metadata() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aabci.ref.Append("ec2_metadata"))
}

// IamAlias returns a reference to field iam_alias of vault_aws_auth_backend_config_identity.
func (aabci awsAuthBackendConfigIdentityAttributes) IamAlias() terra.StringValue {
	return terra.ReferenceAsString(aabci.ref.Append("iam_alias"))
}

// IamMetadata returns a reference to field iam_metadata of vault_aws_auth_backend_config_identity.
func (aabci awsAuthBackendConfigIdentityAttributes) IamMetadata() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aabci.ref.Append("iam_metadata"))
}

// Id returns a reference to field id of vault_aws_auth_backend_config_identity.
func (aabci awsAuthBackendConfigIdentityAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aabci.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_aws_auth_backend_config_identity.
func (aabci awsAuthBackendConfigIdentityAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(aabci.ref.Append("namespace"))
}

type awsAuthBackendConfigIdentityState struct {
	Backend     string   `json:"backend"`
	Ec2Alias    string   `json:"ec2_alias"`
	Ec2Metadata []string `json:"ec2_metadata"`
	IamAlias    string   `json:"iam_alias"`
	IamMetadata []string `json:"iam_metadata"`
	Id          string   `json:"id"`
	Namespace   string   `json:"namespace"`
}
