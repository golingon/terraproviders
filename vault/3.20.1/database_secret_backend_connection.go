// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	databasesecretbackendconnection "github.com/golingon/terraproviders/vault/3.20.1/databasesecretbackendconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDatabaseSecretBackendConnection creates a new instance of [DatabaseSecretBackendConnection].
func NewDatabaseSecretBackendConnection(name string, args DatabaseSecretBackendConnectionArgs) *DatabaseSecretBackendConnection {
	return &DatabaseSecretBackendConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatabaseSecretBackendConnection)(nil)

// DatabaseSecretBackendConnection represents the Terraform resource vault_database_secret_backend_connection.
type DatabaseSecretBackendConnection struct {
	Name      string
	Args      DatabaseSecretBackendConnectionArgs
	state     *databaseSecretBackendConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DatabaseSecretBackendConnection].
func (dsbc *DatabaseSecretBackendConnection) Type() string {
	return "vault_database_secret_backend_connection"
}

// LocalName returns the local name for [DatabaseSecretBackendConnection].
func (dsbc *DatabaseSecretBackendConnection) LocalName() string {
	return dsbc.Name
}

// Configuration returns the configuration (args) for [DatabaseSecretBackendConnection].
func (dsbc *DatabaseSecretBackendConnection) Configuration() interface{} {
	return dsbc.Args
}

// DependOn is used for other resources to depend on [DatabaseSecretBackendConnection].
func (dsbc *DatabaseSecretBackendConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(dsbc)
}

// Dependencies returns the list of resources [DatabaseSecretBackendConnection] depends_on.
func (dsbc *DatabaseSecretBackendConnection) Dependencies() terra.Dependencies {
	return dsbc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DatabaseSecretBackendConnection].
func (dsbc *DatabaseSecretBackendConnection) LifecycleManagement() *terra.Lifecycle {
	return dsbc.Lifecycle
}

// Attributes returns the attributes for [DatabaseSecretBackendConnection].
func (dsbc *DatabaseSecretBackendConnection) Attributes() databaseSecretBackendConnectionAttributes {
	return databaseSecretBackendConnectionAttributes{ref: terra.ReferenceResource(dsbc)}
}

// ImportState imports the given attribute values into [DatabaseSecretBackendConnection]'s state.
func (dsbc *DatabaseSecretBackendConnection) ImportState(av io.Reader) error {
	dsbc.state = &databaseSecretBackendConnectionState{}
	if err := json.NewDecoder(av).Decode(dsbc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dsbc.Type(), dsbc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DatabaseSecretBackendConnection] has state.
func (dsbc *DatabaseSecretBackendConnection) State() (*databaseSecretBackendConnectionState, bool) {
	return dsbc.state, dsbc.state != nil
}

// StateMust returns the state for [DatabaseSecretBackendConnection]. Panics if the state is nil.
func (dsbc *DatabaseSecretBackendConnection) StateMust() *databaseSecretBackendConnectionState {
	if dsbc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dsbc.Type(), dsbc.LocalName()))
	}
	return dsbc.state
}

// DatabaseSecretBackendConnectionArgs contains the configurations for vault_database_secret_backend_connection.
type DatabaseSecretBackendConnectionArgs struct {
	// AllowedRoles: list of string, optional
	AllowedRoles terra.ListValue[terra.StringValue] `hcl:"allowed_roles,attr"`
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// Data: map of string, optional
	Data terra.MapValue[terra.StringValue] `hcl:"data,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// PluginName: string, optional
	PluginName terra.StringValue `hcl:"plugin_name,attr"`
	// RootRotationStatements: list of string, optional
	RootRotationStatements terra.ListValue[terra.StringValue] `hcl:"root_rotation_statements,attr"`
	// VerifyConnection: bool, optional
	VerifyConnection terra.BoolValue `hcl:"verify_connection,attr"`
	// Cassandra: optional
	Cassandra *databasesecretbackendconnection.Cassandra `hcl:"cassandra,block"`
	// Couchbase: optional
	Couchbase *databasesecretbackendconnection.Couchbase `hcl:"couchbase,block"`
	// Elasticsearch: optional
	Elasticsearch *databasesecretbackendconnection.Elasticsearch `hcl:"elasticsearch,block"`
	// Hana: optional
	Hana *databasesecretbackendconnection.Hana `hcl:"hana,block"`
	// Influxdb: optional
	Influxdb *databasesecretbackendconnection.Influxdb `hcl:"influxdb,block"`
	// Mongodb: optional
	Mongodb *databasesecretbackendconnection.Mongodb `hcl:"mongodb,block"`
	// Mongodbatlas: optional
	Mongodbatlas *databasesecretbackendconnection.Mongodbatlas `hcl:"mongodbatlas,block"`
	// Mssql: optional
	Mssql *databasesecretbackendconnection.Mssql `hcl:"mssql,block"`
	// Mysql: optional
	Mysql *databasesecretbackendconnection.Mysql `hcl:"mysql,block"`
	// MysqlAurora: optional
	MysqlAurora *databasesecretbackendconnection.MysqlAurora `hcl:"mysql_aurora,block"`
	// MysqlLegacy: optional
	MysqlLegacy *databasesecretbackendconnection.MysqlLegacy `hcl:"mysql_legacy,block"`
	// MysqlRds: optional
	MysqlRds *databasesecretbackendconnection.MysqlRds `hcl:"mysql_rds,block"`
	// Oracle: optional
	Oracle *databasesecretbackendconnection.Oracle `hcl:"oracle,block"`
	// Postgresql: optional
	Postgresql *databasesecretbackendconnection.Postgresql `hcl:"postgresql,block"`
	// Redis: optional
	Redis *databasesecretbackendconnection.Redis `hcl:"redis,block"`
	// RedisElasticache: optional
	RedisElasticache *databasesecretbackendconnection.RedisElasticache `hcl:"redis_elasticache,block"`
	// Redshift: optional
	Redshift *databasesecretbackendconnection.Redshift `hcl:"redshift,block"`
	// Snowflake: optional
	Snowflake *databasesecretbackendconnection.Snowflake `hcl:"snowflake,block"`
}
type databaseSecretBackendConnectionAttributes struct {
	ref terra.Reference
}

// AllowedRoles returns a reference to field allowed_roles of vault_database_secret_backend_connection.
func (dsbc databaseSecretBackendConnectionAttributes) AllowedRoles() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dsbc.ref.Append("allowed_roles"))
}

// Backend returns a reference to field backend of vault_database_secret_backend_connection.
func (dsbc databaseSecretBackendConnectionAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(dsbc.ref.Append("backend"))
}

// Data returns a reference to field data of vault_database_secret_backend_connection.
func (dsbc databaseSecretBackendConnectionAttributes) Data() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dsbc.ref.Append("data"))
}

// Id returns a reference to field id of vault_database_secret_backend_connection.
func (dsbc databaseSecretBackendConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dsbc.ref.Append("id"))
}

// Name returns a reference to field name of vault_database_secret_backend_connection.
func (dsbc databaseSecretBackendConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dsbc.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_database_secret_backend_connection.
func (dsbc databaseSecretBackendConnectionAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(dsbc.ref.Append("namespace"))
}

// PluginName returns a reference to field plugin_name of vault_database_secret_backend_connection.
func (dsbc databaseSecretBackendConnectionAttributes) PluginName() terra.StringValue {
	return terra.ReferenceAsString(dsbc.ref.Append("plugin_name"))
}

// RootRotationStatements returns a reference to field root_rotation_statements of vault_database_secret_backend_connection.
func (dsbc databaseSecretBackendConnectionAttributes) RootRotationStatements() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dsbc.ref.Append("root_rotation_statements"))
}

// VerifyConnection returns a reference to field verify_connection of vault_database_secret_backend_connection.
func (dsbc databaseSecretBackendConnectionAttributes) VerifyConnection() terra.BoolValue {
	return terra.ReferenceAsBool(dsbc.ref.Append("verify_connection"))
}

func (dsbc databaseSecretBackendConnectionAttributes) Cassandra() terra.ListValue[databasesecretbackendconnection.CassandraAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.CassandraAttributes](dsbc.ref.Append("cassandra"))
}

func (dsbc databaseSecretBackendConnectionAttributes) Couchbase() terra.ListValue[databasesecretbackendconnection.CouchbaseAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.CouchbaseAttributes](dsbc.ref.Append("couchbase"))
}

func (dsbc databaseSecretBackendConnectionAttributes) Elasticsearch() terra.ListValue[databasesecretbackendconnection.ElasticsearchAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.ElasticsearchAttributes](dsbc.ref.Append("elasticsearch"))
}

func (dsbc databaseSecretBackendConnectionAttributes) Hana() terra.ListValue[databasesecretbackendconnection.HanaAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.HanaAttributes](dsbc.ref.Append("hana"))
}

func (dsbc databaseSecretBackendConnectionAttributes) Influxdb() terra.ListValue[databasesecretbackendconnection.InfluxdbAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.InfluxdbAttributes](dsbc.ref.Append("influxdb"))
}

func (dsbc databaseSecretBackendConnectionAttributes) Mongodb() terra.ListValue[databasesecretbackendconnection.MongodbAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.MongodbAttributes](dsbc.ref.Append("mongodb"))
}

func (dsbc databaseSecretBackendConnectionAttributes) Mongodbatlas() terra.ListValue[databasesecretbackendconnection.MongodbatlasAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.MongodbatlasAttributes](dsbc.ref.Append("mongodbatlas"))
}

func (dsbc databaseSecretBackendConnectionAttributes) Mssql() terra.ListValue[databasesecretbackendconnection.MssqlAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.MssqlAttributes](dsbc.ref.Append("mssql"))
}

func (dsbc databaseSecretBackendConnectionAttributes) Mysql() terra.ListValue[databasesecretbackendconnection.MysqlAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.MysqlAttributes](dsbc.ref.Append("mysql"))
}

func (dsbc databaseSecretBackendConnectionAttributes) MysqlAurora() terra.ListValue[databasesecretbackendconnection.MysqlAuroraAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.MysqlAuroraAttributes](dsbc.ref.Append("mysql_aurora"))
}

func (dsbc databaseSecretBackendConnectionAttributes) MysqlLegacy() terra.ListValue[databasesecretbackendconnection.MysqlLegacyAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.MysqlLegacyAttributes](dsbc.ref.Append("mysql_legacy"))
}

func (dsbc databaseSecretBackendConnectionAttributes) MysqlRds() terra.ListValue[databasesecretbackendconnection.MysqlRdsAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.MysqlRdsAttributes](dsbc.ref.Append("mysql_rds"))
}

func (dsbc databaseSecretBackendConnectionAttributes) Oracle() terra.ListValue[databasesecretbackendconnection.OracleAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.OracleAttributes](dsbc.ref.Append("oracle"))
}

func (dsbc databaseSecretBackendConnectionAttributes) Postgresql() terra.ListValue[databasesecretbackendconnection.PostgresqlAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.PostgresqlAttributes](dsbc.ref.Append("postgresql"))
}

func (dsbc databaseSecretBackendConnectionAttributes) Redis() terra.ListValue[databasesecretbackendconnection.RedisAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.RedisAttributes](dsbc.ref.Append("redis"))
}

func (dsbc databaseSecretBackendConnectionAttributes) RedisElasticache() terra.ListValue[databasesecretbackendconnection.RedisElasticacheAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.RedisElasticacheAttributes](dsbc.ref.Append("redis_elasticache"))
}

func (dsbc databaseSecretBackendConnectionAttributes) Redshift() terra.ListValue[databasesecretbackendconnection.RedshiftAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.RedshiftAttributes](dsbc.ref.Append("redshift"))
}

func (dsbc databaseSecretBackendConnectionAttributes) Snowflake() terra.ListValue[databasesecretbackendconnection.SnowflakeAttributes] {
	return terra.ReferenceAsList[databasesecretbackendconnection.SnowflakeAttributes](dsbc.ref.Append("snowflake"))
}

type databaseSecretBackendConnectionState struct {
	AllowedRoles           []string                                                `json:"allowed_roles"`
	Backend                string                                                  `json:"backend"`
	Data                   map[string]string                                       `json:"data"`
	Id                     string                                                  `json:"id"`
	Name                   string                                                  `json:"name"`
	Namespace              string                                                  `json:"namespace"`
	PluginName             string                                                  `json:"plugin_name"`
	RootRotationStatements []string                                                `json:"root_rotation_statements"`
	VerifyConnection       bool                                                    `json:"verify_connection"`
	Cassandra              []databasesecretbackendconnection.CassandraState        `json:"cassandra"`
	Couchbase              []databasesecretbackendconnection.CouchbaseState        `json:"couchbase"`
	Elasticsearch          []databasesecretbackendconnection.ElasticsearchState    `json:"elasticsearch"`
	Hana                   []databasesecretbackendconnection.HanaState             `json:"hana"`
	Influxdb               []databasesecretbackendconnection.InfluxdbState         `json:"influxdb"`
	Mongodb                []databasesecretbackendconnection.MongodbState          `json:"mongodb"`
	Mongodbatlas           []databasesecretbackendconnection.MongodbatlasState     `json:"mongodbatlas"`
	Mssql                  []databasesecretbackendconnection.MssqlState            `json:"mssql"`
	Mysql                  []databasesecretbackendconnection.MysqlState            `json:"mysql"`
	MysqlAurora            []databasesecretbackendconnection.MysqlAuroraState      `json:"mysql_aurora"`
	MysqlLegacy            []databasesecretbackendconnection.MysqlLegacyState      `json:"mysql_legacy"`
	MysqlRds               []databasesecretbackendconnection.MysqlRdsState         `json:"mysql_rds"`
	Oracle                 []databasesecretbackendconnection.OracleState           `json:"oracle"`
	Postgresql             []databasesecretbackendconnection.PostgresqlState       `json:"postgresql"`
	Redis                  []databasesecretbackendconnection.RedisState            `json:"redis"`
	RedisElasticache       []databasesecretbackendconnection.RedisElasticacheState `json:"redis_elasticache"`
	Redshift               []databasesecretbackendconnection.RedshiftState         `json:"redshift"`
	Snowflake              []databasesecretbackendconnection.SnowflakeState        `json:"snowflake"`
}
