// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGithubUser creates a new instance of [GithubUser].
func NewGithubUser(name string, args GithubUserArgs) *GithubUser {
	return &GithubUser{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GithubUser)(nil)

// GithubUser represents the Terraform resource vault_github_user.
type GithubUser struct {
	Name      string
	Args      GithubUserArgs
	state     *githubUserState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GithubUser].
func (gu *GithubUser) Type() string {
	return "vault_github_user"
}

// LocalName returns the local name for [GithubUser].
func (gu *GithubUser) LocalName() string {
	return gu.Name
}

// Configuration returns the configuration (args) for [GithubUser].
func (gu *GithubUser) Configuration() interface{} {
	return gu.Args
}

// DependOn is used for other resources to depend on [GithubUser].
func (gu *GithubUser) DependOn() terra.Reference {
	return terra.ReferenceResource(gu)
}

// Dependencies returns the list of resources [GithubUser] depends_on.
func (gu *GithubUser) Dependencies() terra.Dependencies {
	return gu.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GithubUser].
func (gu *GithubUser) LifecycleManagement() *terra.Lifecycle {
	return gu.Lifecycle
}

// Attributes returns the attributes for [GithubUser].
func (gu *GithubUser) Attributes() githubUserAttributes {
	return githubUserAttributes{ref: terra.ReferenceResource(gu)}
}

// ImportState imports the given attribute values into [GithubUser]'s state.
func (gu *GithubUser) ImportState(av io.Reader) error {
	gu.state = &githubUserState{}
	if err := json.NewDecoder(av).Decode(gu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gu.Type(), gu.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GithubUser] has state.
func (gu *GithubUser) State() (*githubUserState, bool) {
	return gu.state, gu.state != nil
}

// StateMust returns the state for [GithubUser]. Panics if the state is nil.
func (gu *GithubUser) StateMust() *githubUserState {
	if gu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gu.Type(), gu.LocalName()))
	}
	return gu.state
}

// GithubUserArgs contains the configurations for vault_github_user.
type GithubUserArgs struct {
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Policies: list of string, optional
	Policies terra.ListValue[terra.StringValue] `hcl:"policies,attr"`
	// User: string, required
	User terra.StringValue `hcl:"user,attr" validate:"required"`
}
type githubUserAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_github_user.
func (gu githubUserAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(gu.ref.Append("backend"))
}

// Id returns a reference to field id of vault_github_user.
func (gu githubUserAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gu.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_github_user.
func (gu githubUserAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(gu.ref.Append("namespace"))
}

// Policies returns a reference to field policies of vault_github_user.
func (gu githubUserAttributes) Policies() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gu.ref.Append("policies"))
}

// User returns a reference to field user of vault_github_user.
func (gu githubUserAttributes) User() terra.StringValue {
	return terra.ReferenceAsString(gu.ref.Append("user"))
}

type githubUserState struct {
	Backend   string   `json:"backend"`
	Id        string   `json:"id"`
	Namespace string   `json:"namespace"`
	Policies  []string `json:"policies"`
	User      string   `json:"user"`
}
