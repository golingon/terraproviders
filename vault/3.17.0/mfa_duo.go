// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewMfaDuo creates a new instance of [MfaDuo].
func NewMfaDuo(name string, args MfaDuoArgs) *MfaDuo {
	return &MfaDuo{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MfaDuo)(nil)

// MfaDuo represents the Terraform resource vault_mfa_duo.
type MfaDuo struct {
	Name      string
	Args      MfaDuoArgs
	state     *mfaDuoState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [MfaDuo].
func (md *MfaDuo) Type() string {
	return "vault_mfa_duo"
}

// LocalName returns the local name for [MfaDuo].
func (md *MfaDuo) LocalName() string {
	return md.Name
}

// Configuration returns the configuration (args) for [MfaDuo].
func (md *MfaDuo) Configuration() interface{} {
	return md.Args
}

// DependOn is used for other resources to depend on [MfaDuo].
func (md *MfaDuo) DependOn() terra.Reference {
	return terra.ReferenceResource(md)
}

// Dependencies returns the list of resources [MfaDuo] depends_on.
func (md *MfaDuo) Dependencies() terra.Dependencies {
	return md.DependsOn
}

// LifecycleManagement returns the lifecycle block for [MfaDuo].
func (md *MfaDuo) LifecycleManagement() *terra.Lifecycle {
	return md.Lifecycle
}

// Attributes returns the attributes for [MfaDuo].
func (md *MfaDuo) Attributes() mfaDuoAttributes {
	return mfaDuoAttributes{ref: terra.ReferenceResource(md)}
}

// ImportState imports the given attribute values into [MfaDuo]'s state.
func (md *MfaDuo) ImportState(av io.Reader) error {
	md.state = &mfaDuoState{}
	if err := json.NewDecoder(av).Decode(md.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", md.Type(), md.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [MfaDuo] has state.
func (md *MfaDuo) State() (*mfaDuoState, bool) {
	return md.state, md.state != nil
}

// StateMust returns the state for [MfaDuo]. Panics if the state is nil.
func (md *MfaDuo) StateMust() *mfaDuoState {
	if md.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", md.Type(), md.LocalName()))
	}
	return md.state
}

// MfaDuoArgs contains the configurations for vault_mfa_duo.
type MfaDuoArgs struct {
	// ApiHostname: string, required
	ApiHostname terra.StringValue `hcl:"api_hostname,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationKey: string, required
	IntegrationKey terra.StringValue `hcl:"integration_key,attr" validate:"required"`
	// MountAccessor: string, required
	MountAccessor terra.StringValue `hcl:"mount_accessor,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// PushInfo: string, optional
	PushInfo terra.StringValue `hcl:"push_info,attr"`
	// SecretKey: string, required
	SecretKey terra.StringValue `hcl:"secret_key,attr" validate:"required"`
	// UsernameFormat: string, optional
	UsernameFormat terra.StringValue `hcl:"username_format,attr"`
}
type mfaDuoAttributes struct {
	ref terra.Reference
}

// ApiHostname returns a reference to field api_hostname of vault_mfa_duo.
func (md mfaDuoAttributes) ApiHostname() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("api_hostname"))
}

// Id returns a reference to field id of vault_mfa_duo.
func (md mfaDuoAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("id"))
}

// IntegrationKey returns a reference to field integration_key of vault_mfa_duo.
func (md mfaDuoAttributes) IntegrationKey() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("integration_key"))
}

// MountAccessor returns a reference to field mount_accessor of vault_mfa_duo.
func (md mfaDuoAttributes) MountAccessor() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("mount_accessor"))
}

// Name returns a reference to field name of vault_mfa_duo.
func (md mfaDuoAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_mfa_duo.
func (md mfaDuoAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("namespace"))
}

// PushInfo returns a reference to field push_info of vault_mfa_duo.
func (md mfaDuoAttributes) PushInfo() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("push_info"))
}

// SecretKey returns a reference to field secret_key of vault_mfa_duo.
func (md mfaDuoAttributes) SecretKey() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("secret_key"))
}

// UsernameFormat returns a reference to field username_format of vault_mfa_duo.
func (md mfaDuoAttributes) UsernameFormat() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("username_format"))
}

type mfaDuoState struct {
	ApiHostname    string `json:"api_hostname"`
	Id             string `json:"id"`
	IntegrationKey string `json:"integration_key"`
	MountAccessor  string `json:"mount_accessor"`
	Name           string `json:"name"`
	Namespace      string `json:"namespace"`
	PushInfo       string `json:"push_info"`
	SecretKey      string `json:"secret_key"`
	UsernameFormat string `json:"username_format"`
}
