// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAuditRequestHeader creates a new instance of [AuditRequestHeader].
func NewAuditRequestHeader(name string, args AuditRequestHeaderArgs) *AuditRequestHeader {
	return &AuditRequestHeader{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AuditRequestHeader)(nil)

// AuditRequestHeader represents the Terraform resource vault_audit_request_header.
type AuditRequestHeader struct {
	Name      string
	Args      AuditRequestHeaderArgs
	state     *auditRequestHeaderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AuditRequestHeader].
func (arh *AuditRequestHeader) Type() string {
	return "vault_audit_request_header"
}

// LocalName returns the local name for [AuditRequestHeader].
func (arh *AuditRequestHeader) LocalName() string {
	return arh.Name
}

// Configuration returns the configuration (args) for [AuditRequestHeader].
func (arh *AuditRequestHeader) Configuration() interface{} {
	return arh.Args
}

// DependOn is used for other resources to depend on [AuditRequestHeader].
func (arh *AuditRequestHeader) DependOn() terra.Reference {
	return terra.ReferenceResource(arh)
}

// Dependencies returns the list of resources [AuditRequestHeader] depends_on.
func (arh *AuditRequestHeader) Dependencies() terra.Dependencies {
	return arh.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AuditRequestHeader].
func (arh *AuditRequestHeader) LifecycleManagement() *terra.Lifecycle {
	return arh.Lifecycle
}

// Attributes returns the attributes for [AuditRequestHeader].
func (arh *AuditRequestHeader) Attributes() auditRequestHeaderAttributes {
	return auditRequestHeaderAttributes{ref: terra.ReferenceResource(arh)}
}

// ImportState imports the given attribute values into [AuditRequestHeader]'s state.
func (arh *AuditRequestHeader) ImportState(av io.Reader) error {
	arh.state = &auditRequestHeaderState{}
	if err := json.NewDecoder(av).Decode(arh.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arh.Type(), arh.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AuditRequestHeader] has state.
func (arh *AuditRequestHeader) State() (*auditRequestHeaderState, bool) {
	return arh.state, arh.state != nil
}

// StateMust returns the state for [AuditRequestHeader]. Panics if the state is nil.
func (arh *AuditRequestHeader) StateMust() *auditRequestHeaderState {
	if arh.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arh.Type(), arh.LocalName()))
	}
	return arh.state
}

// AuditRequestHeaderArgs contains the configurations for vault_audit_request_header.
type AuditRequestHeaderArgs struct {
	// Hmac: bool, optional
	Hmac terra.BoolValue `hcl:"hmac,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}
type auditRequestHeaderAttributes struct {
	ref terra.Reference
}

// Hmac returns a reference to field hmac of vault_audit_request_header.
func (arh auditRequestHeaderAttributes) Hmac() terra.BoolValue {
	return terra.ReferenceAsBool(arh.ref.Append("hmac"))
}

// Id returns a reference to field id of vault_audit_request_header.
func (arh auditRequestHeaderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arh.ref.Append("id"))
}

// Name returns a reference to field name of vault_audit_request_header.
func (arh auditRequestHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arh.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_audit_request_header.
func (arh auditRequestHeaderAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(arh.ref.Append("namespace"))
}

type auditRequestHeaderState struct {
	Hmac      bool   `json:"hmac"`
	Id        string `json:"id"`
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}
