// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package managedkeys

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Aws struct {
	// AccessKey: string, required
	AccessKey terra.StringValue `hcl:"access_key,attr" validate:"required"`
	// AllowGenerateKey: bool, optional
	AllowGenerateKey terra.BoolValue `hcl:"allow_generate_key,attr"`
	// AllowReplaceKey: bool, optional
	AllowReplaceKey terra.BoolValue `hcl:"allow_replace_key,attr"`
	// AllowStoreKey: bool, optional
	AllowStoreKey terra.BoolValue `hcl:"allow_store_key,attr"`
	// AnyMount: bool, optional
	AnyMount terra.BoolValue `hcl:"any_mount,attr"`
	// Curve: string, optional
	Curve terra.StringValue `hcl:"curve,attr"`
	// Endpoint: string, optional
	Endpoint terra.StringValue `hcl:"endpoint,attr"`
	// KeyBits: string, required
	KeyBits terra.StringValue `hcl:"key_bits,attr" validate:"required"`
	// KeyType: string, required
	KeyType terra.StringValue `hcl:"key_type,attr" validate:"required"`
	// KmsKey: string, required
	KmsKey terra.StringValue `hcl:"kms_key,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// SecretKey: string, required
	SecretKey terra.StringValue `hcl:"secret_key,attr" validate:"required"`
}

type Azure struct {
	// AllowGenerateKey: bool, optional
	AllowGenerateKey terra.BoolValue `hcl:"allow_generate_key,attr"`
	// AllowReplaceKey: bool, optional
	AllowReplaceKey terra.BoolValue `hcl:"allow_replace_key,attr"`
	// AllowStoreKey: bool, optional
	AllowStoreKey terra.BoolValue `hcl:"allow_store_key,attr"`
	// AnyMount: bool, optional
	AnyMount terra.BoolValue `hcl:"any_mount,attr"`
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, required
	ClientSecret terra.StringValue `hcl:"client_secret,attr" validate:"required"`
	// Environment: string, optional
	Environment terra.StringValue `hcl:"environment,attr"`
	// KeyBits: string, optional
	KeyBits terra.StringValue `hcl:"key_bits,attr"`
	// KeyName: string, required
	KeyName terra.StringValue `hcl:"key_name,attr" validate:"required"`
	// KeyType: string, required
	KeyType terra.StringValue `hcl:"key_type,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Resource: string, optional
	Resource terra.StringValue `hcl:"resource,attr"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// VaultName: string, required
	VaultName terra.StringValue `hcl:"vault_name,attr" validate:"required"`
}

type Pkcs struct {
	// AllowGenerateKey: bool, optional
	AllowGenerateKey terra.BoolValue `hcl:"allow_generate_key,attr"`
	// AllowReplaceKey: bool, optional
	AllowReplaceKey terra.BoolValue `hcl:"allow_replace_key,attr"`
	// AllowStoreKey: bool, optional
	AllowStoreKey terra.BoolValue `hcl:"allow_store_key,attr"`
	// AnyMount: bool, optional
	AnyMount terra.BoolValue `hcl:"any_mount,attr"`
	// Curve: string, optional
	Curve terra.StringValue `hcl:"curve,attr"`
	// ForceRwSession: string, optional
	ForceRwSession terra.StringValue `hcl:"force_rw_session,attr"`
	// KeyBits: string, optional
	KeyBits terra.StringValue `hcl:"key_bits,attr"`
	// KeyId: string, required
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
	// KeyLabel: string, required
	KeyLabel terra.StringValue `hcl:"key_label,attr" validate:"required"`
	// Library: string, required
	Library terra.StringValue `hcl:"library,attr" validate:"required"`
	// Mechanism: string, required
	Mechanism terra.StringValue `hcl:"mechanism,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Pin: string, required
	Pin terra.StringValue `hcl:"pin,attr" validate:"required"`
	// Slot: string, optional
	Slot terra.StringValue `hcl:"slot,attr"`
	// TokenLabel: string, optional
	TokenLabel terra.StringValue `hcl:"token_label,attr"`
}

type AwsAttributes struct {
	ref terra.Reference
}

func (a AwsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AwsAttributes) InternalWithRef(ref terra.Reference) AwsAttributes {
	return AwsAttributes{ref: ref}
}

func (a AwsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AwsAttributes) AccessKey() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("access_key"))
}

func (a AwsAttributes) AllowGenerateKey() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("allow_generate_key"))
}

func (a AwsAttributes) AllowReplaceKey() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("allow_replace_key"))
}

func (a AwsAttributes) AllowStoreKey() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("allow_store_key"))
}

func (a AwsAttributes) AnyMount() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("any_mount"))
}

func (a AwsAttributes) Curve() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("curve"))
}

func (a AwsAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("endpoint"))
}

func (a AwsAttributes) KeyBits() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("key_bits"))
}

func (a AwsAttributes) KeyType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("key_type"))
}

func (a AwsAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("kms_key"))
}

func (a AwsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a AwsAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("region"))
}

func (a AwsAttributes) SecretKey() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("secret_key"))
}

func (a AwsAttributes) Uuid() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("uuid"))
}

type AzureAttributes struct {
	ref terra.Reference
}

func (a AzureAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AzureAttributes) InternalWithRef(ref terra.Reference) AzureAttributes {
	return AzureAttributes{ref: ref}
}

func (a AzureAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AzureAttributes) AllowGenerateKey() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("allow_generate_key"))
}

func (a AzureAttributes) AllowReplaceKey() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("allow_replace_key"))
}

func (a AzureAttributes) AllowStoreKey() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("allow_store_key"))
}

func (a AzureAttributes) AnyMount() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("any_mount"))
}

func (a AzureAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("client_id"))
}

func (a AzureAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("client_secret"))
}

func (a AzureAttributes) Environment() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("environment"))
}

func (a AzureAttributes) KeyBits() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("key_bits"))
}

func (a AzureAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("key_name"))
}

func (a AzureAttributes) KeyType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("key_type"))
}

func (a AzureAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a AzureAttributes) Resource() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("resource"))
}

func (a AzureAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("tenant_id"))
}

func (a AzureAttributes) Uuid() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("uuid"))
}

func (a AzureAttributes) VaultName() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("vault_name"))
}

type PkcsAttributes struct {
	ref terra.Reference
}

func (p PkcsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PkcsAttributes) InternalWithRef(ref terra.Reference) PkcsAttributes {
	return PkcsAttributes{ref: ref}
}

func (p PkcsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PkcsAttributes) AllowGenerateKey() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("allow_generate_key"))
}

func (p PkcsAttributes) AllowReplaceKey() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("allow_replace_key"))
}

func (p PkcsAttributes) AllowStoreKey() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("allow_store_key"))
}

func (p PkcsAttributes) AnyMount() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("any_mount"))
}

func (p PkcsAttributes) Curve() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("curve"))
}

func (p PkcsAttributes) ForceRwSession() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("force_rw_session"))
}

func (p PkcsAttributes) KeyBits() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("key_bits"))
}

func (p PkcsAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("key_id"))
}

func (p PkcsAttributes) KeyLabel() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("key_label"))
}

func (p PkcsAttributes) Library() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("library"))
}

func (p PkcsAttributes) Mechanism() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("mechanism"))
}

func (p PkcsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p PkcsAttributes) Pin() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("pin"))
}

func (p PkcsAttributes) Slot() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("slot"))
}

func (p PkcsAttributes) TokenLabel() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("token_label"))
}

func (p PkcsAttributes) Uuid() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("uuid"))
}

type AwsState struct {
	AccessKey        string `json:"access_key"`
	AllowGenerateKey bool   `json:"allow_generate_key"`
	AllowReplaceKey  bool   `json:"allow_replace_key"`
	AllowStoreKey    bool   `json:"allow_store_key"`
	AnyMount         bool   `json:"any_mount"`
	Curve            string `json:"curve"`
	Endpoint         string `json:"endpoint"`
	KeyBits          string `json:"key_bits"`
	KeyType          string `json:"key_type"`
	KmsKey           string `json:"kms_key"`
	Name             string `json:"name"`
	Region           string `json:"region"`
	SecretKey        string `json:"secret_key"`
	Uuid             string `json:"uuid"`
}

type AzureState struct {
	AllowGenerateKey bool   `json:"allow_generate_key"`
	AllowReplaceKey  bool   `json:"allow_replace_key"`
	AllowStoreKey    bool   `json:"allow_store_key"`
	AnyMount         bool   `json:"any_mount"`
	ClientId         string `json:"client_id"`
	ClientSecret     string `json:"client_secret"`
	Environment      string `json:"environment"`
	KeyBits          string `json:"key_bits"`
	KeyName          string `json:"key_name"`
	KeyType          string `json:"key_type"`
	Name             string `json:"name"`
	Resource         string `json:"resource"`
	TenantId         string `json:"tenant_id"`
	Uuid             string `json:"uuid"`
	VaultName        string `json:"vault_name"`
}

type PkcsState struct {
	AllowGenerateKey bool   `json:"allow_generate_key"`
	AllowReplaceKey  bool   `json:"allow_replace_key"`
	AllowStoreKey    bool   `json:"allow_store_key"`
	AnyMount         bool   `json:"any_mount"`
	Curve            string `json:"curve"`
	ForceRwSession   string `json:"force_rw_session"`
	KeyBits          string `json:"key_bits"`
	KeyId            string `json:"key_id"`
	KeyLabel         string `json:"key_label"`
	Library          string `json:"library"`
	Mechanism        string `json:"mechanism"`
	Name             string `json:"name"`
	Pin              string `json:"pin"`
	Slot             string `json:"slot"`
	TokenLabel       string `json:"token_label"`
	Uuid             string `json:"uuid"`
}
