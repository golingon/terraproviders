// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAwsSecretBackendRole creates a new instance of [AwsSecretBackendRole].
func NewAwsSecretBackendRole(name string, args AwsSecretBackendRoleArgs) *AwsSecretBackendRole {
	return &AwsSecretBackendRole{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AwsSecretBackendRole)(nil)

// AwsSecretBackendRole represents the Terraform resource vault_aws_secret_backend_role.
type AwsSecretBackendRole struct {
	Name      string
	Args      AwsSecretBackendRoleArgs
	state     *awsSecretBackendRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AwsSecretBackendRole].
func (asbr *AwsSecretBackendRole) Type() string {
	return "vault_aws_secret_backend_role"
}

// LocalName returns the local name for [AwsSecretBackendRole].
func (asbr *AwsSecretBackendRole) LocalName() string {
	return asbr.Name
}

// Configuration returns the configuration (args) for [AwsSecretBackendRole].
func (asbr *AwsSecretBackendRole) Configuration() interface{} {
	return asbr.Args
}

// DependOn is used for other resources to depend on [AwsSecretBackendRole].
func (asbr *AwsSecretBackendRole) DependOn() terra.Reference {
	return terra.ReferenceResource(asbr)
}

// Dependencies returns the list of resources [AwsSecretBackendRole] depends_on.
func (asbr *AwsSecretBackendRole) Dependencies() terra.Dependencies {
	return asbr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AwsSecretBackendRole].
func (asbr *AwsSecretBackendRole) LifecycleManagement() *terra.Lifecycle {
	return asbr.Lifecycle
}

// Attributes returns the attributes for [AwsSecretBackendRole].
func (asbr *AwsSecretBackendRole) Attributes() awsSecretBackendRoleAttributes {
	return awsSecretBackendRoleAttributes{ref: terra.ReferenceResource(asbr)}
}

// ImportState imports the given attribute values into [AwsSecretBackendRole]'s state.
func (asbr *AwsSecretBackendRole) ImportState(av io.Reader) error {
	asbr.state = &awsSecretBackendRoleState{}
	if err := json.NewDecoder(av).Decode(asbr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asbr.Type(), asbr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AwsSecretBackendRole] has state.
func (asbr *AwsSecretBackendRole) State() (*awsSecretBackendRoleState, bool) {
	return asbr.state, asbr.state != nil
}

// StateMust returns the state for [AwsSecretBackendRole]. Panics if the state is nil.
func (asbr *AwsSecretBackendRole) StateMust() *awsSecretBackendRoleState {
	if asbr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asbr.Type(), asbr.LocalName()))
	}
	return asbr.state
}

// AwsSecretBackendRoleArgs contains the configurations for vault_aws_secret_backend_role.
type AwsSecretBackendRoleArgs struct {
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// CredentialType: string, required
	CredentialType terra.StringValue `hcl:"credential_type,attr" validate:"required"`
	// DefaultStsTtl: number, optional
	DefaultStsTtl terra.NumberValue `hcl:"default_sts_ttl,attr"`
	// IamGroups: set of string, optional
	IamGroups terra.SetValue[terra.StringValue] `hcl:"iam_groups,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxStsTtl: number, optional
	MaxStsTtl terra.NumberValue `hcl:"max_sts_ttl,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// PermissionsBoundaryArn: string, optional
	PermissionsBoundaryArn terra.StringValue `hcl:"permissions_boundary_arn,attr"`
	// PolicyArns: set of string, optional
	PolicyArns terra.SetValue[terra.StringValue] `hcl:"policy_arns,attr"`
	// PolicyDocument: string, optional
	PolicyDocument terra.StringValue `hcl:"policy_document,attr"`
	// RoleArns: set of string, optional
	RoleArns terra.SetValue[terra.StringValue] `hcl:"role_arns,attr"`
	// UserPath: string, optional
	UserPath terra.StringValue `hcl:"user_path,attr"`
}
type awsSecretBackendRoleAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_aws_secret_backend_role.
func (asbr awsSecretBackendRoleAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(asbr.ref.Append("backend"))
}

// CredentialType returns a reference to field credential_type of vault_aws_secret_backend_role.
func (asbr awsSecretBackendRoleAttributes) CredentialType() terra.StringValue {
	return terra.ReferenceAsString(asbr.ref.Append("credential_type"))
}

// DefaultStsTtl returns a reference to field default_sts_ttl of vault_aws_secret_backend_role.
func (asbr awsSecretBackendRoleAttributes) DefaultStsTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(asbr.ref.Append("default_sts_ttl"))
}

// IamGroups returns a reference to field iam_groups of vault_aws_secret_backend_role.
func (asbr awsSecretBackendRoleAttributes) IamGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asbr.ref.Append("iam_groups"))
}

// Id returns a reference to field id of vault_aws_secret_backend_role.
func (asbr awsSecretBackendRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asbr.ref.Append("id"))
}

// MaxStsTtl returns a reference to field max_sts_ttl of vault_aws_secret_backend_role.
func (asbr awsSecretBackendRoleAttributes) MaxStsTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(asbr.ref.Append("max_sts_ttl"))
}

// Name returns a reference to field name of vault_aws_secret_backend_role.
func (asbr awsSecretBackendRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asbr.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_aws_secret_backend_role.
func (asbr awsSecretBackendRoleAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(asbr.ref.Append("namespace"))
}

// PermissionsBoundaryArn returns a reference to field permissions_boundary_arn of vault_aws_secret_backend_role.
func (asbr awsSecretBackendRoleAttributes) PermissionsBoundaryArn() terra.StringValue {
	return terra.ReferenceAsString(asbr.ref.Append("permissions_boundary_arn"))
}

// PolicyArns returns a reference to field policy_arns of vault_aws_secret_backend_role.
func (asbr awsSecretBackendRoleAttributes) PolicyArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asbr.ref.Append("policy_arns"))
}

// PolicyDocument returns a reference to field policy_document of vault_aws_secret_backend_role.
func (asbr awsSecretBackendRoleAttributes) PolicyDocument() terra.StringValue {
	return terra.ReferenceAsString(asbr.ref.Append("policy_document"))
}

// RoleArns returns a reference to field role_arns of vault_aws_secret_backend_role.
func (asbr awsSecretBackendRoleAttributes) RoleArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asbr.ref.Append("role_arns"))
}

// UserPath returns a reference to field user_path of vault_aws_secret_backend_role.
func (asbr awsSecretBackendRoleAttributes) UserPath() terra.StringValue {
	return terra.ReferenceAsString(asbr.ref.Append("user_path"))
}

type awsSecretBackendRoleState struct {
	Backend                string   `json:"backend"`
	CredentialType         string   `json:"credential_type"`
	DefaultStsTtl          float64  `json:"default_sts_ttl"`
	IamGroups              []string `json:"iam_groups"`
	Id                     string   `json:"id"`
	MaxStsTtl              float64  `json:"max_sts_ttl"`
	Name                   string   `json:"name"`
	Namespace              string   `json:"namespace"`
	PermissionsBoundaryArn string   `json:"permissions_boundary_arn"`
	PolicyArns             []string `json:"policy_arns"`
	PolicyDocument         string   `json:"policy_document"`
	RoleArns               []string `json:"role_arns"`
	UserPath               string   `json:"user_path"`
}
