// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAwsAuthBackendLogin creates a new instance of [AwsAuthBackendLogin].
func NewAwsAuthBackendLogin(name string, args AwsAuthBackendLoginArgs) *AwsAuthBackendLogin {
	return &AwsAuthBackendLogin{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AwsAuthBackendLogin)(nil)

// AwsAuthBackendLogin represents the Terraform resource vault_aws_auth_backend_login.
type AwsAuthBackendLogin struct {
	Name      string
	Args      AwsAuthBackendLoginArgs
	state     *awsAuthBackendLoginState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AwsAuthBackendLogin].
func (aabl *AwsAuthBackendLogin) Type() string {
	return "vault_aws_auth_backend_login"
}

// LocalName returns the local name for [AwsAuthBackendLogin].
func (aabl *AwsAuthBackendLogin) LocalName() string {
	return aabl.Name
}

// Configuration returns the configuration (args) for [AwsAuthBackendLogin].
func (aabl *AwsAuthBackendLogin) Configuration() interface{} {
	return aabl.Args
}

// DependOn is used for other resources to depend on [AwsAuthBackendLogin].
func (aabl *AwsAuthBackendLogin) DependOn() terra.Reference {
	return terra.ReferenceResource(aabl)
}

// Dependencies returns the list of resources [AwsAuthBackendLogin] depends_on.
func (aabl *AwsAuthBackendLogin) Dependencies() terra.Dependencies {
	return aabl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AwsAuthBackendLogin].
func (aabl *AwsAuthBackendLogin) LifecycleManagement() *terra.Lifecycle {
	return aabl.Lifecycle
}

// Attributes returns the attributes for [AwsAuthBackendLogin].
func (aabl *AwsAuthBackendLogin) Attributes() awsAuthBackendLoginAttributes {
	return awsAuthBackendLoginAttributes{ref: terra.ReferenceResource(aabl)}
}

// ImportState imports the given attribute values into [AwsAuthBackendLogin]'s state.
func (aabl *AwsAuthBackendLogin) ImportState(av io.Reader) error {
	aabl.state = &awsAuthBackendLoginState{}
	if err := json.NewDecoder(av).Decode(aabl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aabl.Type(), aabl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AwsAuthBackendLogin] has state.
func (aabl *AwsAuthBackendLogin) State() (*awsAuthBackendLoginState, bool) {
	return aabl.state, aabl.state != nil
}

// StateMust returns the state for [AwsAuthBackendLogin]. Panics if the state is nil.
func (aabl *AwsAuthBackendLogin) StateMust() *awsAuthBackendLoginState {
	if aabl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aabl.Type(), aabl.LocalName()))
	}
	return aabl.state
}

// AwsAuthBackendLoginArgs contains the configurations for vault_aws_auth_backend_login.
type AwsAuthBackendLoginArgs struct {
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// IamHttpRequestMethod: string, optional
	IamHttpRequestMethod terra.StringValue `hcl:"iam_http_request_method,attr"`
	// IamRequestBody: string, optional
	IamRequestBody terra.StringValue `hcl:"iam_request_body,attr"`
	// IamRequestHeaders: string, optional
	IamRequestHeaders terra.StringValue `hcl:"iam_request_headers,attr"`
	// IamRequestUrl: string, optional
	IamRequestUrl terra.StringValue `hcl:"iam_request_url,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Identity: string, optional
	Identity terra.StringValue `hcl:"identity,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Nonce: string, optional
	Nonce terra.StringValue `hcl:"nonce,attr"`
	// Pkcs7: string, optional
	Pkcs7 terra.StringValue `hcl:"pkcs7,attr"`
	// Role: string, optional
	Role terra.StringValue `hcl:"role,attr"`
	// Signature: string, optional
	Signature terra.StringValue `hcl:"signature,attr"`
}
type awsAuthBackendLoginAttributes struct {
	ref terra.Reference
}

// Accessor returns a reference to field accessor of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) Accessor() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("accessor"))
}

// AuthType returns a reference to field auth_type of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) AuthType() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("auth_type"))
}

// Backend returns a reference to field backend of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("backend"))
}

// ClientToken returns a reference to field client_token of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) ClientToken() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("client_token"))
}

// IamHttpRequestMethod returns a reference to field iam_http_request_method of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) IamHttpRequestMethod() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("iam_http_request_method"))
}

// IamRequestBody returns a reference to field iam_request_body of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) IamRequestBody() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("iam_request_body"))
}

// IamRequestHeaders returns a reference to field iam_request_headers of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) IamRequestHeaders() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("iam_request_headers"))
}

// IamRequestUrl returns a reference to field iam_request_url of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) IamRequestUrl() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("iam_request_url"))
}

// Id returns a reference to field id of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("id"))
}

// Identity returns a reference to field identity of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) Identity() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("identity"))
}

// LeaseDuration returns a reference to field lease_duration of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) LeaseDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(aabl.ref.Append("lease_duration"))
}

// LeaseStartTime returns a reference to field lease_start_time of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) LeaseStartTime() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("lease_start_time"))
}

// Metadata returns a reference to field metadata of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aabl.ref.Append("metadata"))
}

// Namespace returns a reference to field namespace of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("namespace"))
}

// Nonce returns a reference to field nonce of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) Nonce() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("nonce"))
}

// Pkcs7 returns a reference to field pkcs7 of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) Pkcs7() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("pkcs7"))
}

// Policies returns a reference to field policies of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) Policies() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aabl.ref.Append("policies"))
}

// Renewable returns a reference to field renewable of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) Renewable() terra.BoolValue {
	return terra.ReferenceAsBool(aabl.ref.Append("renewable"))
}

// Role returns a reference to field role of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("role"))
}

// Signature returns a reference to field signature of vault_aws_auth_backend_login.
func (aabl awsAuthBackendLoginAttributes) Signature() terra.StringValue {
	return terra.ReferenceAsString(aabl.ref.Append("signature"))
}

type awsAuthBackendLoginState struct {
	Accessor             string            `json:"accessor"`
	AuthType             string            `json:"auth_type"`
	Backend              string            `json:"backend"`
	ClientToken          string            `json:"client_token"`
	IamHttpRequestMethod string            `json:"iam_http_request_method"`
	IamRequestBody       string            `json:"iam_request_body"`
	IamRequestHeaders    string            `json:"iam_request_headers"`
	IamRequestUrl        string            `json:"iam_request_url"`
	Id                   string            `json:"id"`
	Identity             string            `json:"identity"`
	LeaseDuration        float64           `json:"lease_duration"`
	LeaseStartTime       string            `json:"lease_start_time"`
	Metadata             map[string]string `json:"metadata"`
	Namespace            string            `json:"namespace"`
	Nonce                string            `json:"nonce"`
	Pkcs7                string            `json:"pkcs7"`
	Policies             []string          `json:"policies"`
	Renewable            bool              `json:"renewable"`
	Role                 string            `json:"role"`
	Signature            string            `json:"signature"`
}
