// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package rabbitmqsecretbackendrole

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Vhost struct {
	// Configure: string, required
	Configure terra.StringValue `hcl:"configure,attr" validate:"required"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Read: string, required
	Read terra.StringValue `hcl:"read,attr" validate:"required"`
	// Write: string, required
	Write terra.StringValue `hcl:"write,attr" validate:"required"`
}

type VhostTopic struct {
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// VhostTopicVhost: min=0
	Vhost []VhostTopicVhost `hcl:"vhost,block" validate:"min=0"`
}

type VhostTopicVhost struct {
	// Read: string, required
	Read terra.StringValue `hcl:"read,attr" validate:"required"`
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
	// Write: string, required
	Write terra.StringValue `hcl:"write,attr" validate:"required"`
}

type VhostAttributes struct {
	ref terra.Reference
}

func (v VhostAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VhostAttributes) InternalWithRef(ref terra.Reference) VhostAttributes {
	return VhostAttributes{ref: ref}
}

func (v VhostAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VhostAttributes) Configure() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("configure"))
}

func (v VhostAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("host"))
}

func (v VhostAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("read"))
}

func (v VhostAttributes) Write() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("write"))
}

type VhostTopicAttributes struct {
	ref terra.Reference
}

func (vt VhostTopicAttributes) InternalRef() (terra.Reference, error) {
	return vt.ref, nil
}

func (vt VhostTopicAttributes) InternalWithRef(ref terra.Reference) VhostTopicAttributes {
	return VhostTopicAttributes{ref: ref}
}

func (vt VhostTopicAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vt.ref.InternalTokens()
}

func (vt VhostTopicAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("host"))
}

func (vt VhostTopicAttributes) Vhost() terra.ListValue[VhostTopicVhostAttributes] {
	return terra.ReferenceAsList[VhostTopicVhostAttributes](vt.ref.Append("vhost"))
}

type VhostTopicVhostAttributes struct {
	ref terra.Reference
}

func (v VhostTopicVhostAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VhostTopicVhostAttributes) InternalWithRef(ref terra.Reference) VhostTopicVhostAttributes {
	return VhostTopicVhostAttributes{ref: ref}
}

func (v VhostTopicVhostAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VhostTopicVhostAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("read"))
}

func (v VhostTopicVhostAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("topic"))
}

func (v VhostTopicVhostAttributes) Write() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("write"))
}

type VhostState struct {
	Configure string `json:"configure"`
	Host      string `json:"host"`
	Read      string `json:"read"`
	Write     string `json:"write"`
}

type VhostTopicState struct {
	Host  string                 `json:"host"`
	Vhost []VhostTopicVhostState `json:"vhost"`
}

type VhostTopicVhostState struct {
	Read  string `json:"read"`
	Topic string `json:"topic"`
	Write string `json:"write"`
}
