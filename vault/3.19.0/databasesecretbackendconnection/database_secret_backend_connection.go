// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package databasesecretbackendconnection

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Cassandra struct {
	// ConnectTimeout: number, optional
	ConnectTimeout terra.NumberValue `hcl:"connect_timeout,attr"`
	// Hosts: list of string, optional
	Hosts terra.ListValue[terra.StringValue] `hcl:"hosts,attr"`
	// InsecureTls: bool, optional
	InsecureTls terra.BoolValue `hcl:"insecure_tls,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// PemBundle: string, optional
	PemBundle terra.StringValue `hcl:"pem_bundle,attr"`
	// PemJson: string, optional
	PemJson terra.StringValue `hcl:"pem_json,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// ProtocolVersion: number, optional
	ProtocolVersion terra.NumberValue `hcl:"protocol_version,attr"`
	// Tls: bool, optional
	Tls terra.BoolValue `hcl:"tls,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type Couchbase struct {
	// Base64Pem: string, optional
	Base64Pem terra.StringValue `hcl:"base64_pem,attr"`
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// Hosts: list of string, required
	Hosts terra.ListValue[terra.StringValue] `hcl:"hosts,attr" validate:"required"`
	// InsecureTls: bool, optional
	InsecureTls terra.BoolValue `hcl:"insecure_tls,attr"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Tls: bool, optional
	Tls terra.BoolValue `hcl:"tls,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}

type Elasticsearch struct {
	// CaCert: string, optional
	CaCert terra.StringValue `hcl:"ca_cert,attr"`
	// CaPath: string, optional
	CaPath terra.StringValue `hcl:"ca_path,attr"`
	// ClientCert: string, optional
	ClientCert terra.StringValue `hcl:"client_cert,attr"`
	// ClientKey: string, optional
	ClientKey terra.StringValue `hcl:"client_key,attr"`
	// Insecure: bool, optional
	Insecure terra.BoolValue `hcl:"insecure,attr"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// TlsServerName: string, optional
	TlsServerName terra.StringValue `hcl:"tls_server_name,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}

type Hana struct {
	// ConnectionUrl: string, optional
	ConnectionUrl terra.StringValue `hcl:"connection_url,attr"`
	// DisableEscaping: bool, optional
	DisableEscaping terra.BoolValue `hcl:"disable_escaping,attr"`
	// MaxConnectionLifetime: number, optional
	MaxConnectionLifetime terra.NumberValue `hcl:"max_connection_lifetime,attr"`
	// MaxIdleConnections: number, optional
	MaxIdleConnections terra.NumberValue `hcl:"max_idle_connections,attr"`
	// MaxOpenConnections: number, optional
	MaxOpenConnections terra.NumberValue `hcl:"max_open_connections,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type Influxdb struct {
	// ConnectTimeout: number, optional
	ConnectTimeout terra.NumberValue `hcl:"connect_timeout,attr"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// InsecureTls: bool, optional
	InsecureTls terra.BoolValue `hcl:"insecure_tls,attr"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// PemBundle: string, optional
	PemBundle terra.StringValue `hcl:"pem_bundle,attr"`
	// PemJson: string, optional
	PemJson terra.StringValue `hcl:"pem_json,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Tls: bool, optional
	Tls terra.BoolValue `hcl:"tls,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}

type Mongodb struct {
	// ConnectionUrl: string, optional
	ConnectionUrl terra.StringValue `hcl:"connection_url,attr"`
	// MaxConnectionLifetime: number, optional
	MaxConnectionLifetime terra.NumberValue `hcl:"max_connection_lifetime,attr"`
	// MaxIdleConnections: number, optional
	MaxIdleConnections terra.NumberValue `hcl:"max_idle_connections,attr"`
	// MaxOpenConnections: number, optional
	MaxOpenConnections terra.NumberValue `hcl:"max_open_connections,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}

type Mongodbatlas struct {
	// PrivateKey: string, required
	PrivateKey terra.StringValue `hcl:"private_key,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// PublicKey: string, required
	PublicKey terra.StringValue `hcl:"public_key,attr" validate:"required"`
}

type Mssql struct {
	// ConnectionUrl: string, optional
	ConnectionUrl terra.StringValue `hcl:"connection_url,attr"`
	// ContainedDb: bool, optional
	ContainedDb terra.BoolValue `hcl:"contained_db,attr"`
	// DisableEscaping: bool, optional
	DisableEscaping terra.BoolValue `hcl:"disable_escaping,attr"`
	// MaxConnectionLifetime: number, optional
	MaxConnectionLifetime terra.NumberValue `hcl:"max_connection_lifetime,attr"`
	// MaxIdleConnections: number, optional
	MaxIdleConnections terra.NumberValue `hcl:"max_idle_connections,attr"`
	// MaxOpenConnections: number, optional
	MaxOpenConnections terra.NumberValue `hcl:"max_open_connections,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}

type Mysql struct {
	// ConnectionUrl: string, optional
	ConnectionUrl terra.StringValue `hcl:"connection_url,attr"`
	// MaxConnectionLifetime: number, optional
	MaxConnectionLifetime terra.NumberValue `hcl:"max_connection_lifetime,attr"`
	// MaxIdleConnections: number, optional
	MaxIdleConnections terra.NumberValue `hcl:"max_idle_connections,attr"`
	// MaxOpenConnections: number, optional
	MaxOpenConnections terra.NumberValue `hcl:"max_open_connections,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// TlsCa: string, optional
	TlsCa terra.StringValue `hcl:"tls_ca,attr"`
	// TlsCertificateKey: string, optional
	TlsCertificateKey terra.StringValue `hcl:"tls_certificate_key,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}

type MysqlAurora struct {
	// ConnectionUrl: string, optional
	ConnectionUrl terra.StringValue `hcl:"connection_url,attr"`
	// MaxConnectionLifetime: number, optional
	MaxConnectionLifetime terra.NumberValue `hcl:"max_connection_lifetime,attr"`
	// MaxIdleConnections: number, optional
	MaxIdleConnections terra.NumberValue `hcl:"max_idle_connections,attr"`
	// MaxOpenConnections: number, optional
	MaxOpenConnections terra.NumberValue `hcl:"max_open_connections,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}

type MysqlLegacy struct {
	// ConnectionUrl: string, optional
	ConnectionUrl terra.StringValue `hcl:"connection_url,attr"`
	// MaxConnectionLifetime: number, optional
	MaxConnectionLifetime terra.NumberValue `hcl:"max_connection_lifetime,attr"`
	// MaxIdleConnections: number, optional
	MaxIdleConnections terra.NumberValue `hcl:"max_idle_connections,attr"`
	// MaxOpenConnections: number, optional
	MaxOpenConnections terra.NumberValue `hcl:"max_open_connections,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}

type MysqlRds struct {
	// ConnectionUrl: string, optional
	ConnectionUrl terra.StringValue `hcl:"connection_url,attr"`
	// MaxConnectionLifetime: number, optional
	MaxConnectionLifetime terra.NumberValue `hcl:"max_connection_lifetime,attr"`
	// MaxIdleConnections: number, optional
	MaxIdleConnections terra.NumberValue `hcl:"max_idle_connections,attr"`
	// MaxOpenConnections: number, optional
	MaxOpenConnections terra.NumberValue `hcl:"max_open_connections,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}

type Oracle struct {
	// ConnectionUrl: string, optional
	ConnectionUrl terra.StringValue `hcl:"connection_url,attr"`
	// MaxConnectionLifetime: number, optional
	MaxConnectionLifetime terra.NumberValue `hcl:"max_connection_lifetime,attr"`
	// MaxIdleConnections: number, optional
	MaxIdleConnections terra.NumberValue `hcl:"max_idle_connections,attr"`
	// MaxOpenConnections: number, optional
	MaxOpenConnections terra.NumberValue `hcl:"max_open_connections,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}

type Postgresql struct {
	// ConnectionUrl: string, optional
	ConnectionUrl terra.StringValue `hcl:"connection_url,attr"`
	// DisableEscaping: bool, optional
	DisableEscaping terra.BoolValue `hcl:"disable_escaping,attr"`
	// MaxConnectionLifetime: number, optional
	MaxConnectionLifetime terra.NumberValue `hcl:"max_connection_lifetime,attr"`
	// MaxIdleConnections: number, optional
	MaxIdleConnections terra.NumberValue `hcl:"max_idle_connections,attr"`
	// MaxOpenConnections: number, optional
	MaxOpenConnections terra.NumberValue `hcl:"max_open_connections,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}

type Redis struct {
	// CaCert: string, optional
	CaCert terra.StringValue `hcl:"ca_cert,attr"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// InsecureTls: bool, optional
	InsecureTls terra.BoolValue `hcl:"insecure_tls,attr"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Tls: bool, optional
	Tls terra.BoolValue `hcl:"tls,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type RedisElasticache struct {
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type Redshift struct {
	// ConnectionUrl: string, optional
	ConnectionUrl terra.StringValue `hcl:"connection_url,attr"`
	// DisableEscaping: bool, optional
	DisableEscaping terra.BoolValue `hcl:"disable_escaping,attr"`
	// MaxConnectionLifetime: number, optional
	MaxConnectionLifetime terra.NumberValue `hcl:"max_connection_lifetime,attr"`
	// MaxIdleConnections: number, optional
	MaxIdleConnections terra.NumberValue `hcl:"max_idle_connections,attr"`
	// MaxOpenConnections: number, optional
	MaxOpenConnections terra.NumberValue `hcl:"max_open_connections,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}

type Snowflake struct {
	// ConnectionUrl: string, optional
	ConnectionUrl terra.StringValue `hcl:"connection_url,attr"`
	// MaxConnectionLifetime: number, optional
	MaxConnectionLifetime terra.NumberValue `hcl:"max_connection_lifetime,attr"`
	// MaxIdleConnections: number, optional
	MaxIdleConnections terra.NumberValue `hcl:"max_idle_connections,attr"`
	// MaxOpenConnections: number, optional
	MaxOpenConnections terra.NumberValue `hcl:"max_open_connections,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}

type CassandraAttributes struct {
	ref terra.Reference
}

func (c CassandraAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CassandraAttributes) InternalWithRef(ref terra.Reference) CassandraAttributes {
	return CassandraAttributes{ref: ref}
}

func (c CassandraAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CassandraAttributes) ConnectTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("connect_timeout"))
}

func (c CassandraAttributes) Hosts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("hosts"))
}

func (c CassandraAttributes) InsecureTls() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("insecure_tls"))
}

func (c CassandraAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("password"))
}

func (c CassandraAttributes) PemBundle() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("pem_bundle"))
}

func (c CassandraAttributes) PemJson() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("pem_json"))
}

func (c CassandraAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("port"))
}

func (c CassandraAttributes) ProtocolVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("protocol_version"))
}

func (c CassandraAttributes) Tls() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("tls"))
}

func (c CassandraAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("username"))
}

type CouchbaseAttributes struct {
	ref terra.Reference
}

func (c CouchbaseAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CouchbaseAttributes) InternalWithRef(ref terra.Reference) CouchbaseAttributes {
	return CouchbaseAttributes{ref: ref}
}

func (c CouchbaseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CouchbaseAttributes) Base64Pem() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("base64_pem"))
}

func (c CouchbaseAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("bucket_name"))
}

func (c CouchbaseAttributes) Hosts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("hosts"))
}

func (c CouchbaseAttributes) InsecureTls() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("insecure_tls"))
}

func (c CouchbaseAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("password"))
}

func (c CouchbaseAttributes) Tls() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("tls"))
}

func (c CouchbaseAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("username"))
}

func (c CouchbaseAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("username_template"))
}

type ElasticsearchAttributes struct {
	ref terra.Reference
}

func (e ElasticsearchAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ElasticsearchAttributes) InternalWithRef(ref terra.Reference) ElasticsearchAttributes {
	return ElasticsearchAttributes{ref: ref}
}

func (e ElasticsearchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ElasticsearchAttributes) CaCert() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ca_cert"))
}

func (e ElasticsearchAttributes) CaPath() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ca_path"))
}

func (e ElasticsearchAttributes) ClientCert() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("client_cert"))
}

func (e ElasticsearchAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("client_key"))
}

func (e ElasticsearchAttributes) Insecure() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("insecure"))
}

func (e ElasticsearchAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("password"))
}

func (e ElasticsearchAttributes) TlsServerName() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("tls_server_name"))
}

func (e ElasticsearchAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("url"))
}

func (e ElasticsearchAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("username"))
}

func (e ElasticsearchAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("username_template"))
}

type HanaAttributes struct {
	ref terra.Reference
}

func (h HanaAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HanaAttributes) InternalWithRef(ref terra.Reference) HanaAttributes {
	return HanaAttributes{ref: ref}
}

func (h HanaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HanaAttributes) ConnectionUrl() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("connection_url"))
}

func (h HanaAttributes) DisableEscaping() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("disable_escaping"))
}

func (h HanaAttributes) MaxConnectionLifetime() terra.NumberValue {
	return terra.ReferenceAsNumber(h.ref.Append("max_connection_lifetime"))
}

func (h HanaAttributes) MaxIdleConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(h.ref.Append("max_idle_connections"))
}

func (h HanaAttributes) MaxOpenConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(h.ref.Append("max_open_connections"))
}

func (h HanaAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("password"))
}

func (h HanaAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("username"))
}

type InfluxdbAttributes struct {
	ref terra.Reference
}

func (i InfluxdbAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i InfluxdbAttributes) InternalWithRef(ref terra.Reference) InfluxdbAttributes {
	return InfluxdbAttributes{ref: ref}
}

func (i InfluxdbAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i InfluxdbAttributes) ConnectTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("connect_timeout"))
}

func (i InfluxdbAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("host"))
}

func (i InfluxdbAttributes) InsecureTls() terra.BoolValue {
	return terra.ReferenceAsBool(i.ref.Append("insecure_tls"))
}

func (i InfluxdbAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("password"))
}

func (i InfluxdbAttributes) PemBundle() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("pem_bundle"))
}

func (i InfluxdbAttributes) PemJson() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("pem_json"))
}

func (i InfluxdbAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("port"))
}

func (i InfluxdbAttributes) Tls() terra.BoolValue {
	return terra.ReferenceAsBool(i.ref.Append("tls"))
}

func (i InfluxdbAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("username"))
}

func (i InfluxdbAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("username_template"))
}

type MongodbAttributes struct {
	ref terra.Reference
}

func (m MongodbAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MongodbAttributes) InternalWithRef(ref terra.Reference) MongodbAttributes {
	return MongodbAttributes{ref: ref}
}

func (m MongodbAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MongodbAttributes) ConnectionUrl() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("connection_url"))
}

func (m MongodbAttributes) MaxConnectionLifetime() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("max_connection_lifetime"))
}

func (m MongodbAttributes) MaxIdleConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("max_idle_connections"))
}

func (m MongodbAttributes) MaxOpenConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("max_open_connections"))
}

func (m MongodbAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("password"))
}

func (m MongodbAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("username"))
}

func (m MongodbAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("username_template"))
}

type MongodbatlasAttributes struct {
	ref terra.Reference
}

func (m MongodbatlasAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MongodbatlasAttributes) InternalWithRef(ref terra.Reference) MongodbatlasAttributes {
	return MongodbatlasAttributes{ref: ref}
}

func (m MongodbatlasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MongodbatlasAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("private_key"))
}

func (m MongodbatlasAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("project_id"))
}

func (m MongodbatlasAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("public_key"))
}

type MssqlAttributes struct {
	ref terra.Reference
}

func (m MssqlAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MssqlAttributes) InternalWithRef(ref terra.Reference) MssqlAttributes {
	return MssqlAttributes{ref: ref}
}

func (m MssqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MssqlAttributes) ConnectionUrl() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("connection_url"))
}

func (m MssqlAttributes) ContainedDb() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("contained_db"))
}

func (m MssqlAttributes) DisableEscaping() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("disable_escaping"))
}

func (m MssqlAttributes) MaxConnectionLifetime() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("max_connection_lifetime"))
}

func (m MssqlAttributes) MaxIdleConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("max_idle_connections"))
}

func (m MssqlAttributes) MaxOpenConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("max_open_connections"))
}

func (m MssqlAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("password"))
}

func (m MssqlAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("username"))
}

func (m MssqlAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("username_template"))
}

type MysqlAttributes struct {
	ref terra.Reference
}

func (m MysqlAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MysqlAttributes) InternalWithRef(ref terra.Reference) MysqlAttributes {
	return MysqlAttributes{ref: ref}
}

func (m MysqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MysqlAttributes) ConnectionUrl() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("connection_url"))
}

func (m MysqlAttributes) MaxConnectionLifetime() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("max_connection_lifetime"))
}

func (m MysqlAttributes) MaxIdleConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("max_idle_connections"))
}

func (m MysqlAttributes) MaxOpenConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("max_open_connections"))
}

func (m MysqlAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("password"))
}

func (m MysqlAttributes) TlsCa() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("tls_ca"))
}

func (m MysqlAttributes) TlsCertificateKey() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("tls_certificate_key"))
}

func (m MysqlAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("username"))
}

func (m MysqlAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("username_template"))
}

type MysqlAuroraAttributes struct {
	ref terra.Reference
}

func (ma MysqlAuroraAttributes) InternalRef() (terra.Reference, error) {
	return ma.ref, nil
}

func (ma MysqlAuroraAttributes) InternalWithRef(ref terra.Reference) MysqlAuroraAttributes {
	return MysqlAuroraAttributes{ref: ref}
}

func (ma MysqlAuroraAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ma.ref.InternalTokens()
}

func (ma MysqlAuroraAttributes) ConnectionUrl() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("connection_url"))
}

func (ma MysqlAuroraAttributes) MaxConnectionLifetime() terra.NumberValue {
	return terra.ReferenceAsNumber(ma.ref.Append("max_connection_lifetime"))
}

func (ma MysqlAuroraAttributes) MaxIdleConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(ma.ref.Append("max_idle_connections"))
}

func (ma MysqlAuroraAttributes) MaxOpenConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(ma.ref.Append("max_open_connections"))
}

func (ma MysqlAuroraAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("password"))
}

func (ma MysqlAuroraAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("username"))
}

func (ma MysqlAuroraAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("username_template"))
}

type MysqlLegacyAttributes struct {
	ref terra.Reference
}

func (ml MysqlLegacyAttributes) InternalRef() (terra.Reference, error) {
	return ml.ref, nil
}

func (ml MysqlLegacyAttributes) InternalWithRef(ref terra.Reference) MysqlLegacyAttributes {
	return MysqlLegacyAttributes{ref: ref}
}

func (ml MysqlLegacyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ml.ref.InternalTokens()
}

func (ml MysqlLegacyAttributes) ConnectionUrl() terra.StringValue {
	return terra.ReferenceAsString(ml.ref.Append("connection_url"))
}

func (ml MysqlLegacyAttributes) MaxConnectionLifetime() terra.NumberValue {
	return terra.ReferenceAsNumber(ml.ref.Append("max_connection_lifetime"))
}

func (ml MysqlLegacyAttributes) MaxIdleConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(ml.ref.Append("max_idle_connections"))
}

func (ml MysqlLegacyAttributes) MaxOpenConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(ml.ref.Append("max_open_connections"))
}

func (ml MysqlLegacyAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(ml.ref.Append("password"))
}

func (ml MysqlLegacyAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(ml.ref.Append("username"))
}

func (ml MysqlLegacyAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(ml.ref.Append("username_template"))
}

type MysqlRdsAttributes struct {
	ref terra.Reference
}

func (mr MysqlRdsAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr MysqlRdsAttributes) InternalWithRef(ref terra.Reference) MysqlRdsAttributes {
	return MysqlRdsAttributes{ref: ref}
}

func (mr MysqlRdsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr MysqlRdsAttributes) ConnectionUrl() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("connection_url"))
}

func (mr MysqlRdsAttributes) MaxConnectionLifetime() terra.NumberValue {
	return terra.ReferenceAsNumber(mr.ref.Append("max_connection_lifetime"))
}

func (mr MysqlRdsAttributes) MaxIdleConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(mr.ref.Append("max_idle_connections"))
}

func (mr MysqlRdsAttributes) MaxOpenConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(mr.ref.Append("max_open_connections"))
}

func (mr MysqlRdsAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("password"))
}

func (mr MysqlRdsAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("username"))
}

func (mr MysqlRdsAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("username_template"))
}

type OracleAttributes struct {
	ref terra.Reference
}

func (o OracleAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OracleAttributes) InternalWithRef(ref terra.Reference) OracleAttributes {
	return OracleAttributes{ref: ref}
}

func (o OracleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o OracleAttributes) ConnectionUrl() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("connection_url"))
}

func (o OracleAttributes) MaxConnectionLifetime() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("max_connection_lifetime"))
}

func (o OracleAttributes) MaxIdleConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("max_idle_connections"))
}

func (o OracleAttributes) MaxOpenConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("max_open_connections"))
}

func (o OracleAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("password"))
}

func (o OracleAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("username"))
}

func (o OracleAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("username_template"))
}

type PostgresqlAttributes struct {
	ref terra.Reference
}

func (p PostgresqlAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PostgresqlAttributes) InternalWithRef(ref terra.Reference) PostgresqlAttributes {
	return PostgresqlAttributes{ref: ref}
}

func (p PostgresqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PostgresqlAttributes) ConnectionUrl() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("connection_url"))
}

func (p PostgresqlAttributes) DisableEscaping() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("disable_escaping"))
}

func (p PostgresqlAttributes) MaxConnectionLifetime() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("max_connection_lifetime"))
}

func (p PostgresqlAttributes) MaxIdleConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("max_idle_connections"))
}

func (p PostgresqlAttributes) MaxOpenConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("max_open_connections"))
}

func (p PostgresqlAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("password"))
}

func (p PostgresqlAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("username"))
}

func (p PostgresqlAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("username_template"))
}

type RedisAttributes struct {
	ref terra.Reference
}

func (r RedisAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RedisAttributes) InternalWithRef(ref terra.Reference) RedisAttributes {
	return RedisAttributes{ref: ref}
}

func (r RedisAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RedisAttributes) CaCert() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("ca_cert"))
}

func (r RedisAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("host"))
}

func (r RedisAttributes) InsecureTls() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("insecure_tls"))
}

func (r RedisAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("password"))
}

func (r RedisAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("port"))
}

func (r RedisAttributes) Tls() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("tls"))
}

func (r RedisAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("username"))
}

type RedisElasticacheAttributes struct {
	ref terra.Reference
}

func (re RedisElasticacheAttributes) InternalRef() (terra.Reference, error) {
	return re.ref, nil
}

func (re RedisElasticacheAttributes) InternalWithRef(ref terra.Reference) RedisElasticacheAttributes {
	return RedisElasticacheAttributes{ref: ref}
}

func (re RedisElasticacheAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return re.ref.InternalTokens()
}

func (re RedisElasticacheAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(re.ref.Append("password"))
}

func (re RedisElasticacheAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(re.ref.Append("region"))
}

func (re RedisElasticacheAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(re.ref.Append("url"))
}

func (re RedisElasticacheAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(re.ref.Append("username"))
}

type RedshiftAttributes struct {
	ref terra.Reference
}

func (r RedshiftAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RedshiftAttributes) InternalWithRef(ref terra.Reference) RedshiftAttributes {
	return RedshiftAttributes{ref: ref}
}

func (r RedshiftAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RedshiftAttributes) ConnectionUrl() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("connection_url"))
}

func (r RedshiftAttributes) DisableEscaping() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("disable_escaping"))
}

func (r RedshiftAttributes) MaxConnectionLifetime() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("max_connection_lifetime"))
}

func (r RedshiftAttributes) MaxIdleConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("max_idle_connections"))
}

func (r RedshiftAttributes) MaxOpenConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("max_open_connections"))
}

func (r RedshiftAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("password"))
}

func (r RedshiftAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("username"))
}

func (r RedshiftAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("username_template"))
}

type SnowflakeAttributes struct {
	ref terra.Reference
}

func (s SnowflakeAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SnowflakeAttributes) InternalWithRef(ref terra.Reference) SnowflakeAttributes {
	return SnowflakeAttributes{ref: ref}
}

func (s SnowflakeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SnowflakeAttributes) ConnectionUrl() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("connection_url"))
}

func (s SnowflakeAttributes) MaxConnectionLifetime() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("max_connection_lifetime"))
}

func (s SnowflakeAttributes) MaxIdleConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("max_idle_connections"))
}

func (s SnowflakeAttributes) MaxOpenConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("max_open_connections"))
}

func (s SnowflakeAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("password"))
}

func (s SnowflakeAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("username"))
}

func (s SnowflakeAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("username_template"))
}

type CassandraState struct {
	ConnectTimeout  float64  `json:"connect_timeout"`
	Hosts           []string `json:"hosts"`
	InsecureTls     bool     `json:"insecure_tls"`
	Password        string   `json:"password"`
	PemBundle       string   `json:"pem_bundle"`
	PemJson         string   `json:"pem_json"`
	Port            float64  `json:"port"`
	ProtocolVersion float64  `json:"protocol_version"`
	Tls             bool     `json:"tls"`
	Username        string   `json:"username"`
}

type CouchbaseState struct {
	Base64Pem        string   `json:"base64_pem"`
	BucketName       string   `json:"bucket_name"`
	Hosts            []string `json:"hosts"`
	InsecureTls      bool     `json:"insecure_tls"`
	Password         string   `json:"password"`
	Tls              bool     `json:"tls"`
	Username         string   `json:"username"`
	UsernameTemplate string   `json:"username_template"`
}

type ElasticsearchState struct {
	CaCert           string `json:"ca_cert"`
	CaPath           string `json:"ca_path"`
	ClientCert       string `json:"client_cert"`
	ClientKey        string `json:"client_key"`
	Insecure         bool   `json:"insecure"`
	Password         string `json:"password"`
	TlsServerName    string `json:"tls_server_name"`
	Url              string `json:"url"`
	Username         string `json:"username"`
	UsernameTemplate string `json:"username_template"`
}

type HanaState struct {
	ConnectionUrl         string  `json:"connection_url"`
	DisableEscaping       bool    `json:"disable_escaping"`
	MaxConnectionLifetime float64 `json:"max_connection_lifetime"`
	MaxIdleConnections    float64 `json:"max_idle_connections"`
	MaxOpenConnections    float64 `json:"max_open_connections"`
	Password              string  `json:"password"`
	Username              string  `json:"username"`
}

type InfluxdbState struct {
	ConnectTimeout   float64 `json:"connect_timeout"`
	Host             string  `json:"host"`
	InsecureTls      bool    `json:"insecure_tls"`
	Password         string  `json:"password"`
	PemBundle        string  `json:"pem_bundle"`
	PemJson          string  `json:"pem_json"`
	Port             float64 `json:"port"`
	Tls              bool    `json:"tls"`
	Username         string  `json:"username"`
	UsernameTemplate string  `json:"username_template"`
}

type MongodbState struct {
	ConnectionUrl         string  `json:"connection_url"`
	MaxConnectionLifetime float64 `json:"max_connection_lifetime"`
	MaxIdleConnections    float64 `json:"max_idle_connections"`
	MaxOpenConnections    float64 `json:"max_open_connections"`
	Password              string  `json:"password"`
	Username              string  `json:"username"`
	UsernameTemplate      string  `json:"username_template"`
}

type MongodbatlasState struct {
	PrivateKey string `json:"private_key"`
	ProjectId  string `json:"project_id"`
	PublicKey  string `json:"public_key"`
}

type MssqlState struct {
	ConnectionUrl         string  `json:"connection_url"`
	ContainedDb           bool    `json:"contained_db"`
	DisableEscaping       bool    `json:"disable_escaping"`
	MaxConnectionLifetime float64 `json:"max_connection_lifetime"`
	MaxIdleConnections    float64 `json:"max_idle_connections"`
	MaxOpenConnections    float64 `json:"max_open_connections"`
	Password              string  `json:"password"`
	Username              string  `json:"username"`
	UsernameTemplate      string  `json:"username_template"`
}

type MysqlState struct {
	ConnectionUrl         string  `json:"connection_url"`
	MaxConnectionLifetime float64 `json:"max_connection_lifetime"`
	MaxIdleConnections    float64 `json:"max_idle_connections"`
	MaxOpenConnections    float64 `json:"max_open_connections"`
	Password              string  `json:"password"`
	TlsCa                 string  `json:"tls_ca"`
	TlsCertificateKey     string  `json:"tls_certificate_key"`
	Username              string  `json:"username"`
	UsernameTemplate      string  `json:"username_template"`
}

type MysqlAuroraState struct {
	ConnectionUrl         string  `json:"connection_url"`
	MaxConnectionLifetime float64 `json:"max_connection_lifetime"`
	MaxIdleConnections    float64 `json:"max_idle_connections"`
	MaxOpenConnections    float64 `json:"max_open_connections"`
	Password              string  `json:"password"`
	Username              string  `json:"username"`
	UsernameTemplate      string  `json:"username_template"`
}

type MysqlLegacyState struct {
	ConnectionUrl         string  `json:"connection_url"`
	MaxConnectionLifetime float64 `json:"max_connection_lifetime"`
	MaxIdleConnections    float64 `json:"max_idle_connections"`
	MaxOpenConnections    float64 `json:"max_open_connections"`
	Password              string  `json:"password"`
	Username              string  `json:"username"`
	UsernameTemplate      string  `json:"username_template"`
}

type MysqlRdsState struct {
	ConnectionUrl         string  `json:"connection_url"`
	MaxConnectionLifetime float64 `json:"max_connection_lifetime"`
	MaxIdleConnections    float64 `json:"max_idle_connections"`
	MaxOpenConnections    float64 `json:"max_open_connections"`
	Password              string  `json:"password"`
	Username              string  `json:"username"`
	UsernameTemplate      string  `json:"username_template"`
}

type OracleState struct {
	ConnectionUrl         string  `json:"connection_url"`
	MaxConnectionLifetime float64 `json:"max_connection_lifetime"`
	MaxIdleConnections    float64 `json:"max_idle_connections"`
	MaxOpenConnections    float64 `json:"max_open_connections"`
	Password              string  `json:"password"`
	Username              string  `json:"username"`
	UsernameTemplate      string  `json:"username_template"`
}

type PostgresqlState struct {
	ConnectionUrl         string  `json:"connection_url"`
	DisableEscaping       bool    `json:"disable_escaping"`
	MaxConnectionLifetime float64 `json:"max_connection_lifetime"`
	MaxIdleConnections    float64 `json:"max_idle_connections"`
	MaxOpenConnections    float64 `json:"max_open_connections"`
	Password              string  `json:"password"`
	Username              string  `json:"username"`
	UsernameTemplate      string  `json:"username_template"`
}

type RedisState struct {
	CaCert      string  `json:"ca_cert"`
	Host        string  `json:"host"`
	InsecureTls bool    `json:"insecure_tls"`
	Password    string  `json:"password"`
	Port        float64 `json:"port"`
	Tls         bool    `json:"tls"`
	Username    string  `json:"username"`
}

type RedisElasticacheState struct {
	Password string `json:"password"`
	Region   string `json:"region"`
	Url      string `json:"url"`
	Username string `json:"username"`
}

type RedshiftState struct {
	ConnectionUrl         string  `json:"connection_url"`
	DisableEscaping       bool    `json:"disable_escaping"`
	MaxConnectionLifetime float64 `json:"max_connection_lifetime"`
	MaxIdleConnections    float64 `json:"max_idle_connections"`
	MaxOpenConnections    float64 `json:"max_open_connections"`
	Password              string  `json:"password"`
	Username              string  `json:"username"`
	UsernameTemplate      string  `json:"username_template"`
}

type SnowflakeState struct {
	ConnectionUrl         string  `json:"connection_url"`
	MaxConnectionLifetime float64 `json:"max_connection_lifetime"`
	MaxIdleConnections    float64 `json:"max_idle_connections"`
	MaxOpenConnections    float64 `json:"max_open_connections"`
	Password              string  `json:"password"`
	Username              string  `json:"username"`
	UsernameTemplate      string  `json:"username_template"`
}
