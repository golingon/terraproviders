// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDatabaseSecretBackendRole creates a new instance of [DatabaseSecretBackendRole].
func NewDatabaseSecretBackendRole(name string, args DatabaseSecretBackendRoleArgs) *DatabaseSecretBackendRole {
	return &DatabaseSecretBackendRole{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatabaseSecretBackendRole)(nil)

// DatabaseSecretBackendRole represents the Terraform resource vault_database_secret_backend_role.
type DatabaseSecretBackendRole struct {
	Name      string
	Args      DatabaseSecretBackendRoleArgs
	state     *databaseSecretBackendRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DatabaseSecretBackendRole].
func (dsbr *DatabaseSecretBackendRole) Type() string {
	return "vault_database_secret_backend_role"
}

// LocalName returns the local name for [DatabaseSecretBackendRole].
func (dsbr *DatabaseSecretBackendRole) LocalName() string {
	return dsbr.Name
}

// Configuration returns the configuration (args) for [DatabaseSecretBackendRole].
func (dsbr *DatabaseSecretBackendRole) Configuration() interface{} {
	return dsbr.Args
}

// DependOn is used for other resources to depend on [DatabaseSecretBackendRole].
func (dsbr *DatabaseSecretBackendRole) DependOn() terra.Reference {
	return terra.ReferenceResource(dsbr)
}

// Dependencies returns the list of resources [DatabaseSecretBackendRole] depends_on.
func (dsbr *DatabaseSecretBackendRole) Dependencies() terra.Dependencies {
	return dsbr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DatabaseSecretBackendRole].
func (dsbr *DatabaseSecretBackendRole) LifecycleManagement() *terra.Lifecycle {
	return dsbr.Lifecycle
}

// Attributes returns the attributes for [DatabaseSecretBackendRole].
func (dsbr *DatabaseSecretBackendRole) Attributes() databaseSecretBackendRoleAttributes {
	return databaseSecretBackendRoleAttributes{ref: terra.ReferenceResource(dsbr)}
}

// ImportState imports the given attribute values into [DatabaseSecretBackendRole]'s state.
func (dsbr *DatabaseSecretBackendRole) ImportState(av io.Reader) error {
	dsbr.state = &databaseSecretBackendRoleState{}
	if err := json.NewDecoder(av).Decode(dsbr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dsbr.Type(), dsbr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DatabaseSecretBackendRole] has state.
func (dsbr *DatabaseSecretBackendRole) State() (*databaseSecretBackendRoleState, bool) {
	return dsbr.state, dsbr.state != nil
}

// StateMust returns the state for [DatabaseSecretBackendRole]. Panics if the state is nil.
func (dsbr *DatabaseSecretBackendRole) StateMust() *databaseSecretBackendRoleState {
	if dsbr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dsbr.Type(), dsbr.LocalName()))
	}
	return dsbr.state
}

// DatabaseSecretBackendRoleArgs contains the configurations for vault_database_secret_backend_role.
type DatabaseSecretBackendRoleArgs struct {
	// Backend: string, required
	Backend terra.StringValue `hcl:"backend,attr" validate:"required"`
	// CreationStatements: list of string, required
	CreationStatements terra.ListValue[terra.StringValue] `hcl:"creation_statements,attr" validate:"required"`
	// CredentialConfig: map of string, optional
	CredentialConfig terra.MapValue[terra.StringValue] `hcl:"credential_config,attr"`
	// CredentialType: string, optional
	CredentialType terra.StringValue `hcl:"credential_type,attr"`
	// DbName: string, required
	DbName terra.StringValue `hcl:"db_name,attr" validate:"required"`
	// DefaultTtl: number, optional
	DefaultTtl terra.NumberValue `hcl:"default_ttl,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxTtl: number, optional
	MaxTtl terra.NumberValue `hcl:"max_ttl,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// RenewStatements: list of string, optional
	RenewStatements terra.ListValue[terra.StringValue] `hcl:"renew_statements,attr"`
	// RevocationStatements: list of string, optional
	RevocationStatements terra.ListValue[terra.StringValue] `hcl:"revocation_statements,attr"`
	// RollbackStatements: list of string, optional
	RollbackStatements terra.ListValue[terra.StringValue] `hcl:"rollback_statements,attr"`
}
type databaseSecretBackendRoleAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_database_secret_backend_role.
func (dsbr databaseSecretBackendRoleAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(dsbr.ref.Append("backend"))
}

// CreationStatements returns a reference to field creation_statements of vault_database_secret_backend_role.
func (dsbr databaseSecretBackendRoleAttributes) CreationStatements() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dsbr.ref.Append("creation_statements"))
}

// CredentialConfig returns a reference to field credential_config of vault_database_secret_backend_role.
func (dsbr databaseSecretBackendRoleAttributes) CredentialConfig() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dsbr.ref.Append("credential_config"))
}

// CredentialType returns a reference to field credential_type of vault_database_secret_backend_role.
func (dsbr databaseSecretBackendRoleAttributes) CredentialType() terra.StringValue {
	return terra.ReferenceAsString(dsbr.ref.Append("credential_type"))
}

// DbName returns a reference to field db_name of vault_database_secret_backend_role.
func (dsbr databaseSecretBackendRoleAttributes) DbName() terra.StringValue {
	return terra.ReferenceAsString(dsbr.ref.Append("db_name"))
}

// DefaultTtl returns a reference to field default_ttl of vault_database_secret_backend_role.
func (dsbr databaseSecretBackendRoleAttributes) DefaultTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(dsbr.ref.Append("default_ttl"))
}

// Id returns a reference to field id of vault_database_secret_backend_role.
func (dsbr databaseSecretBackendRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dsbr.ref.Append("id"))
}

// MaxTtl returns a reference to field max_ttl of vault_database_secret_backend_role.
func (dsbr databaseSecretBackendRoleAttributes) MaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(dsbr.ref.Append("max_ttl"))
}

// Name returns a reference to field name of vault_database_secret_backend_role.
func (dsbr databaseSecretBackendRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dsbr.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_database_secret_backend_role.
func (dsbr databaseSecretBackendRoleAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(dsbr.ref.Append("namespace"))
}

// RenewStatements returns a reference to field renew_statements of vault_database_secret_backend_role.
func (dsbr databaseSecretBackendRoleAttributes) RenewStatements() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dsbr.ref.Append("renew_statements"))
}

// RevocationStatements returns a reference to field revocation_statements of vault_database_secret_backend_role.
func (dsbr databaseSecretBackendRoleAttributes) RevocationStatements() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dsbr.ref.Append("revocation_statements"))
}

// RollbackStatements returns a reference to field rollback_statements of vault_database_secret_backend_role.
func (dsbr databaseSecretBackendRoleAttributes) RollbackStatements() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dsbr.ref.Append("rollback_statements"))
}

type databaseSecretBackendRoleState struct {
	Backend              string            `json:"backend"`
	CreationStatements   []string          `json:"creation_statements"`
	CredentialConfig     map[string]string `json:"credential_config"`
	CredentialType       string            `json:"credential_type"`
	DbName               string            `json:"db_name"`
	DefaultTtl           float64           `json:"default_ttl"`
	Id                   string            `json:"id"`
	MaxTtl               float64           `json:"max_ttl"`
	Name                 string            `json:"name"`
	Namespace            string            `json:"namespace"`
	RenewStatements      []string          `json:"renew_statements"`
	RevocationStatements []string          `json:"revocation_statements"`
	RollbackStatements   []string          `json:"rollback_statements"`
}
