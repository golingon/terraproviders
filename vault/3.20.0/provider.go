// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	provider "github.com/golingon/terraproviders/vault/3.20.0/provider"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewProvider(args ProviderArgs) *Provider {
	return &Provider{Args: args}
}

var _ terra.Provider = (*Provider)(nil)

type Provider struct {
	Args ProviderArgs
}

// LocalName returns the provider local name for [Provider].
func (p *Provider) LocalName() string {
	return "vault"
}

// Source returns the provider source for [Provider].
func (p *Provider) Source() string {
	return "hashicorp/vault"
}

// Version returns the provider version for [Provider].
func (p *Provider) Version() string {
	return "3.20.0"
}

// Configuration returns the configuration (args) for [Provider].
func (p *Provider) Configuration() interface{} {
	return p.Args
}

// ProviderArgs contains the configurations for provider.
type ProviderArgs struct {
	// AddAddressToEnv: string, optional
	AddAddressToEnv terra.StringValue `hcl:"add_address_to_env,attr"`
	// Address: string, required
	Address terra.StringValue `hcl:"address,attr" validate:"required"`
	// CaCertDir: string, optional
	CaCertDir terra.StringValue `hcl:"ca_cert_dir,attr"`
	// CaCertFile: string, optional
	CaCertFile terra.StringValue `hcl:"ca_cert_file,attr"`
	// MaxLeaseTtlSeconds: number, optional
	MaxLeaseTtlSeconds terra.NumberValue `hcl:"max_lease_ttl_seconds,attr"`
	// MaxRetries: number, optional
	MaxRetries terra.NumberValue `hcl:"max_retries,attr"`
	// MaxRetriesCcc: number, optional
	MaxRetriesCcc terra.NumberValue `hcl:"max_retries_ccc,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// SkipChildToken: bool, optional
	SkipChildToken terra.BoolValue `hcl:"skip_child_token,attr"`
	// SkipGetVaultVersion: bool, optional
	SkipGetVaultVersion terra.BoolValue `hcl:"skip_get_vault_version,attr"`
	// SkipTlsVerify: bool, optional
	SkipTlsVerify terra.BoolValue `hcl:"skip_tls_verify,attr"`
	// TlsServerName: string, optional
	TlsServerName terra.StringValue `hcl:"tls_server_name,attr"`
	// Token: string, optional
	Token terra.StringValue `hcl:"token,attr"`
	// TokenName: string, optional
	TokenName terra.StringValue `hcl:"token_name,attr"`
	// VaultVersionOverride: string, optional
	VaultVersionOverride terra.StringValue `hcl:"vault_version_override,attr"`
	// AuthLogin: optional
	AuthLogin *provider.AuthLogin `hcl:"auth_login,block"`
	// AuthLoginAws: optional
	AuthLoginAws *provider.AuthLoginAws `hcl:"auth_login_aws,block"`
	// AuthLoginAzure: optional
	AuthLoginAzure *provider.AuthLoginAzure `hcl:"auth_login_azure,block"`
	// AuthLoginCert: optional
	AuthLoginCert *provider.AuthLoginCert `hcl:"auth_login_cert,block"`
	// AuthLoginGcp: optional
	AuthLoginGcp *provider.AuthLoginGcp `hcl:"auth_login_gcp,block"`
	// AuthLoginJwt: optional
	AuthLoginJwt *provider.AuthLoginJwt `hcl:"auth_login_jwt,block"`
	// AuthLoginKerberos: optional
	AuthLoginKerberos *provider.AuthLoginKerberos `hcl:"auth_login_kerberos,block"`
	// AuthLoginOci: optional
	AuthLoginOci *provider.AuthLoginOci `hcl:"auth_login_oci,block"`
	// AuthLoginOidc: optional
	AuthLoginOidc *provider.AuthLoginOidc `hcl:"auth_login_oidc,block"`
	// AuthLoginRadius: optional
	AuthLoginRadius *provider.AuthLoginRadius `hcl:"auth_login_radius,block"`
	// AuthLoginTokenFile: optional
	AuthLoginTokenFile *provider.AuthLoginTokenFile `hcl:"auth_login_token_file,block"`
	// AuthLoginUserpass: optional
	AuthLoginUserpass *provider.AuthLoginUserpass `hcl:"auth_login_userpass,block"`
	// ClientAuth: optional
	ClientAuth *provider.ClientAuth `hcl:"client_auth,block"`
	// Headers: min=0
	Headers []provider.Headers `hcl:"headers,block" validate:"min=0"`
}
