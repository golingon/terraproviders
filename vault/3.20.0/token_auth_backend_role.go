// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewTokenAuthBackendRole creates a new instance of [TokenAuthBackendRole].
func NewTokenAuthBackendRole(name string, args TokenAuthBackendRoleArgs) *TokenAuthBackendRole {
	return &TokenAuthBackendRole{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TokenAuthBackendRole)(nil)

// TokenAuthBackendRole represents the Terraform resource vault_token_auth_backend_role.
type TokenAuthBackendRole struct {
	Name      string
	Args      TokenAuthBackendRoleArgs
	state     *tokenAuthBackendRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [TokenAuthBackendRole].
func (tabr *TokenAuthBackendRole) Type() string {
	return "vault_token_auth_backend_role"
}

// LocalName returns the local name for [TokenAuthBackendRole].
func (tabr *TokenAuthBackendRole) LocalName() string {
	return tabr.Name
}

// Configuration returns the configuration (args) for [TokenAuthBackendRole].
func (tabr *TokenAuthBackendRole) Configuration() interface{} {
	return tabr.Args
}

// DependOn is used for other resources to depend on [TokenAuthBackendRole].
func (tabr *TokenAuthBackendRole) DependOn() terra.Reference {
	return terra.ReferenceResource(tabr)
}

// Dependencies returns the list of resources [TokenAuthBackendRole] depends_on.
func (tabr *TokenAuthBackendRole) Dependencies() terra.Dependencies {
	return tabr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [TokenAuthBackendRole].
func (tabr *TokenAuthBackendRole) LifecycleManagement() *terra.Lifecycle {
	return tabr.Lifecycle
}

// Attributes returns the attributes for [TokenAuthBackendRole].
func (tabr *TokenAuthBackendRole) Attributes() tokenAuthBackendRoleAttributes {
	return tokenAuthBackendRoleAttributes{ref: terra.ReferenceResource(tabr)}
}

// ImportState imports the given attribute values into [TokenAuthBackendRole]'s state.
func (tabr *TokenAuthBackendRole) ImportState(av io.Reader) error {
	tabr.state = &tokenAuthBackendRoleState{}
	if err := json.NewDecoder(av).Decode(tabr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tabr.Type(), tabr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [TokenAuthBackendRole] has state.
func (tabr *TokenAuthBackendRole) State() (*tokenAuthBackendRoleState, bool) {
	return tabr.state, tabr.state != nil
}

// StateMust returns the state for [TokenAuthBackendRole]. Panics if the state is nil.
func (tabr *TokenAuthBackendRole) StateMust() *tokenAuthBackendRoleState {
	if tabr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tabr.Type(), tabr.LocalName()))
	}
	return tabr.state
}

// TokenAuthBackendRoleArgs contains the configurations for vault_token_auth_backend_role.
type TokenAuthBackendRoleArgs struct {
	// AllowedEntityAliases: set of string, optional
	AllowedEntityAliases terra.SetValue[terra.StringValue] `hcl:"allowed_entity_aliases,attr"`
	// AllowedPolicies: set of string, optional
	AllowedPolicies terra.SetValue[terra.StringValue] `hcl:"allowed_policies,attr"`
	// AllowedPoliciesGlob: set of string, optional
	AllowedPoliciesGlob terra.SetValue[terra.StringValue] `hcl:"allowed_policies_glob,attr"`
	// DisallowedPolicies: set of string, optional
	DisallowedPolicies terra.SetValue[terra.StringValue] `hcl:"disallowed_policies,attr"`
	// DisallowedPoliciesGlob: set of string, optional
	DisallowedPoliciesGlob terra.SetValue[terra.StringValue] `hcl:"disallowed_policies_glob,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Orphan: bool, optional
	Orphan terra.BoolValue `hcl:"orphan,attr"`
	// PathSuffix: string, optional
	PathSuffix terra.StringValue `hcl:"path_suffix,attr"`
	// Renewable: bool, optional
	Renewable terra.BoolValue `hcl:"renewable,attr"`
	// RoleName: string, required
	RoleName terra.StringValue `hcl:"role_name,attr" validate:"required"`
	// TokenBoundCidrs: set of string, optional
	TokenBoundCidrs terra.SetValue[terra.StringValue] `hcl:"token_bound_cidrs,attr"`
	// TokenExplicitMaxTtl: number, optional
	TokenExplicitMaxTtl terra.NumberValue `hcl:"token_explicit_max_ttl,attr"`
	// TokenMaxTtl: number, optional
	TokenMaxTtl terra.NumberValue `hcl:"token_max_ttl,attr"`
	// TokenNoDefaultPolicy: bool, optional
	TokenNoDefaultPolicy terra.BoolValue `hcl:"token_no_default_policy,attr"`
	// TokenNumUses: number, optional
	TokenNumUses terra.NumberValue `hcl:"token_num_uses,attr"`
	// TokenPeriod: number, optional
	TokenPeriod terra.NumberValue `hcl:"token_period,attr"`
	// TokenPolicies: set of string, optional
	TokenPolicies terra.SetValue[terra.StringValue] `hcl:"token_policies,attr"`
	// TokenTtl: number, optional
	TokenTtl terra.NumberValue `hcl:"token_ttl,attr"`
	// TokenType: string, optional
	TokenType terra.StringValue `hcl:"token_type,attr"`
}
type tokenAuthBackendRoleAttributes struct {
	ref terra.Reference
}

// AllowedEntityAliases returns a reference to field allowed_entity_aliases of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) AllowedEntityAliases() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tabr.ref.Append("allowed_entity_aliases"))
}

// AllowedPolicies returns a reference to field allowed_policies of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) AllowedPolicies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tabr.ref.Append("allowed_policies"))
}

// AllowedPoliciesGlob returns a reference to field allowed_policies_glob of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) AllowedPoliciesGlob() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tabr.ref.Append("allowed_policies_glob"))
}

// DisallowedPolicies returns a reference to field disallowed_policies of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) DisallowedPolicies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tabr.ref.Append("disallowed_policies"))
}

// DisallowedPoliciesGlob returns a reference to field disallowed_policies_glob of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) DisallowedPoliciesGlob() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tabr.ref.Append("disallowed_policies_glob"))
}

// Id returns a reference to field id of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tabr.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(tabr.ref.Append("namespace"))
}

// Orphan returns a reference to field orphan of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) Orphan() terra.BoolValue {
	return terra.ReferenceAsBool(tabr.ref.Append("orphan"))
}

// PathSuffix returns a reference to field path_suffix of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) PathSuffix() terra.StringValue {
	return terra.ReferenceAsString(tabr.ref.Append("path_suffix"))
}

// Renewable returns a reference to field renewable of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) Renewable() terra.BoolValue {
	return terra.ReferenceAsBool(tabr.ref.Append("renewable"))
}

// RoleName returns a reference to field role_name of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) RoleName() terra.StringValue {
	return terra.ReferenceAsString(tabr.ref.Append("role_name"))
}

// TokenBoundCidrs returns a reference to field token_bound_cidrs of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) TokenBoundCidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tabr.ref.Append("token_bound_cidrs"))
}

// TokenExplicitMaxTtl returns a reference to field token_explicit_max_ttl of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) TokenExplicitMaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(tabr.ref.Append("token_explicit_max_ttl"))
}

// TokenMaxTtl returns a reference to field token_max_ttl of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) TokenMaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(tabr.ref.Append("token_max_ttl"))
}

// TokenNoDefaultPolicy returns a reference to field token_no_default_policy of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) TokenNoDefaultPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(tabr.ref.Append("token_no_default_policy"))
}

// TokenNumUses returns a reference to field token_num_uses of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) TokenNumUses() terra.NumberValue {
	return terra.ReferenceAsNumber(tabr.ref.Append("token_num_uses"))
}

// TokenPeriod returns a reference to field token_period of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) TokenPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(tabr.ref.Append("token_period"))
}

// TokenPolicies returns a reference to field token_policies of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) TokenPolicies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tabr.ref.Append("token_policies"))
}

// TokenTtl returns a reference to field token_ttl of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) TokenTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(tabr.ref.Append("token_ttl"))
}

// TokenType returns a reference to field token_type of vault_token_auth_backend_role.
func (tabr tokenAuthBackendRoleAttributes) TokenType() terra.StringValue {
	return terra.ReferenceAsString(tabr.ref.Append("token_type"))
}

type tokenAuthBackendRoleState struct {
	AllowedEntityAliases   []string `json:"allowed_entity_aliases"`
	AllowedPolicies        []string `json:"allowed_policies"`
	AllowedPoliciesGlob    []string `json:"allowed_policies_glob"`
	DisallowedPolicies     []string `json:"disallowed_policies"`
	DisallowedPoliciesGlob []string `json:"disallowed_policies_glob"`
	Id                     string   `json:"id"`
	Namespace              string   `json:"namespace"`
	Orphan                 bool     `json:"orphan"`
	PathSuffix             string   `json:"path_suffix"`
	Renewable              bool     `json:"renewable"`
	RoleName               string   `json:"role_name"`
	TokenBoundCidrs        []string `json:"token_bound_cidrs"`
	TokenExplicitMaxTtl    float64  `json:"token_explicit_max_ttl"`
	TokenMaxTtl            float64  `json:"token_max_ttl"`
	TokenNoDefaultPolicy   bool     `json:"token_no_default_policy"`
	TokenNumUses           float64  `json:"token_num_uses"`
	TokenPeriod            float64  `json:"token_period"`
	TokenPolicies          []string `json:"token_policies"`
	TokenTtl               float64  `json:"token_ttl"`
	TokenType              string   `json:"token_type"`
}
