// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package external

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource external.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (e *DataSource) DataSource() string {
	return "external"
}

// LocalName returns the local name for [DataSource].
func (e *DataSource) LocalName() string {
	return e.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (e *DataSource) Configuration() interface{} {
	return e.Args
}

// Attributes returns the attributes for [DataSource].
func (e *DataSource) Attributes() dataExternalAttributes {
	return dataExternalAttributes{ref: terra.ReferenceDataSource(e)}
}

// DataArgs contains the configurations for external.
type DataArgs struct {
	// Program: list of string, required
	Program terra.ListValue[terra.StringValue] `hcl:"program,attr" validate:"required"`
	// Query: map of string, optional
	Query terra.MapValue[terra.StringValue] `hcl:"query,attr"`
	// WorkingDir: string, optional
	WorkingDir terra.StringValue `hcl:"working_dir,attr"`
}

type dataExternalAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of external.
func (e dataExternalAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("id"))
}

// Program returns a reference to field program of external.
func (e dataExternalAttributes) Program() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("program"))
}

// Query returns a reference to field query of external.
func (e dataExternalAttributes) Query() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](e.ref.Append("query"))
}

// Result returns a reference to field result of external.
func (e dataExternalAttributes) Result() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](e.ref.Append("result"))
}

// WorkingDir returns a reference to field working_dir of external.
func (e dataExternalAttributes) WorkingDir() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("working_dir"))
}
