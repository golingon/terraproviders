// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewOrganizationIamPolicy creates a new instance of [OrganizationIamPolicy].
func NewOrganizationIamPolicy(name string, args OrganizationIamPolicyArgs) *OrganizationIamPolicy {
	return &OrganizationIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OrganizationIamPolicy)(nil)

// OrganizationIamPolicy represents the Terraform resource google_organization_iam_policy.
type OrganizationIamPolicy struct {
	Name      string
	Args      OrganizationIamPolicyArgs
	state     *organizationIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [OrganizationIamPolicy].
func (oip *OrganizationIamPolicy) Type() string {
	return "google_organization_iam_policy"
}

// LocalName returns the local name for [OrganizationIamPolicy].
func (oip *OrganizationIamPolicy) LocalName() string {
	return oip.Name
}

// Configuration returns the configuration (args) for [OrganizationIamPolicy].
func (oip *OrganizationIamPolicy) Configuration() interface{} {
	return oip.Args
}

// DependOn is used for other resources to depend on [OrganizationIamPolicy].
func (oip *OrganizationIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(oip)
}

// Dependencies returns the list of resources [OrganizationIamPolicy] depends_on.
func (oip *OrganizationIamPolicy) Dependencies() terra.Dependencies {
	return oip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [OrganizationIamPolicy].
func (oip *OrganizationIamPolicy) LifecycleManagement() *terra.Lifecycle {
	return oip.Lifecycle
}

// Attributes returns the attributes for [OrganizationIamPolicy].
func (oip *OrganizationIamPolicy) Attributes() organizationIamPolicyAttributes {
	return organizationIamPolicyAttributes{ref: terra.ReferenceResource(oip)}
}

// ImportState imports the given attribute values into [OrganizationIamPolicy]'s state.
func (oip *OrganizationIamPolicy) ImportState(av io.Reader) error {
	oip.state = &organizationIamPolicyState{}
	if err := json.NewDecoder(av).Decode(oip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", oip.Type(), oip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [OrganizationIamPolicy] has state.
func (oip *OrganizationIamPolicy) State() (*organizationIamPolicyState, bool) {
	return oip.state, oip.state != nil
}

// StateMust returns the state for [OrganizationIamPolicy]. Panics if the state is nil.
func (oip *OrganizationIamPolicy) StateMust() *organizationIamPolicyState {
	if oip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", oip.Type(), oip.LocalName()))
	}
	return oip.state
}

// OrganizationIamPolicyArgs contains the configurations for google_organization_iam_policy.
type OrganizationIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OrgId: string, required
	OrgId terra.StringValue `hcl:"org_id,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
}
type organizationIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_organization_iam_policy.
func (oip organizationIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(oip.ref.Append("etag"))
}

// Id returns a reference to field id of google_organization_iam_policy.
func (oip organizationIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(oip.ref.Append("id"))
}

// OrgId returns a reference to field org_id of google_organization_iam_policy.
func (oip organizationIamPolicyAttributes) OrgId() terra.StringValue {
	return terra.ReferenceAsString(oip.ref.Append("org_id"))
}

// PolicyData returns a reference to field policy_data of google_organization_iam_policy.
func (oip organizationIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(oip.ref.Append("policy_data"))
}

type organizationIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	OrgId      string `json:"org_id"`
	PolicyData string `json:"policy_data"`
}
