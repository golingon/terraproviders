// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package monitoringmetricdescriptor

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Labels struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// ValueType: string, optional
	ValueType terra.StringValue `hcl:"value_type,attr"`
}

type Metadata struct {
	// IngestDelay: string, optional
	IngestDelay terra.StringValue `hcl:"ingest_delay,attr"`
	// SamplePeriod: string, optional
	SamplePeriod terra.StringValue `hcl:"sample_period,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type LabelsAttributes struct {
	ref terra.Reference
}

func (l LabelsAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LabelsAttributes) InternalWithRef(ref terra.Reference) LabelsAttributes {
	return LabelsAttributes{ref: ref}
}

func (l LabelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LabelsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("description"))
}

func (l LabelsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("key"))
}

func (l LabelsAttributes) ValueType() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("value_type"))
}

type MetadataAttributes struct {
	ref terra.Reference
}

func (m MetadataAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MetadataAttributes) InternalWithRef(ref terra.Reference) MetadataAttributes {
	return MetadataAttributes{ref: ref}
}

func (m MetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MetadataAttributes) IngestDelay() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("ingest_delay"))
}

func (m MetadataAttributes) SamplePeriod() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("sample_period"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type LabelsState struct {
	Description string `json:"description"`
	Key         string `json:"key"`
	ValueType   string `json:"value_type"`
}

type MetadataState struct {
	IngestDelay  string `json:"ingest_delay"`
	SamplePeriod string `json:"sample_period"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
