// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataproccluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ClusterConfig struct {
	// StagingBucket: string, optional
	StagingBucket terra.StringValue `hcl:"staging_bucket,attr"`
	// TempBucket: string, optional
	TempBucket terra.StringValue `hcl:"temp_bucket,attr"`
	// AutoscalingConfig: optional
	AutoscalingConfig *AutoscalingConfig `hcl:"autoscaling_config,block"`
	// DataprocMetricConfig: optional
	DataprocMetricConfig *DataprocMetricConfig `hcl:"dataproc_metric_config,block"`
	// EncryptionConfig: optional
	EncryptionConfig *EncryptionConfig `hcl:"encryption_config,block"`
	// EndpointConfig: optional
	EndpointConfig *EndpointConfig `hcl:"endpoint_config,block"`
	// GceClusterConfig: optional
	GceClusterConfig *GceClusterConfig `hcl:"gce_cluster_config,block"`
	// InitializationAction: min=0
	InitializationAction []InitializationAction `hcl:"initialization_action,block" validate:"min=0"`
	// LifecycleConfig: optional
	LifecycleConfig *LifecycleConfig `hcl:"lifecycle_config,block"`
	// MasterConfig: optional
	MasterConfig *MasterConfig `hcl:"master_config,block"`
	// ClusterConfigMetastoreConfig: optional
	MetastoreConfig *ClusterConfigMetastoreConfig `hcl:"metastore_config,block"`
	// PreemptibleWorkerConfig: optional
	PreemptibleWorkerConfig *PreemptibleWorkerConfig `hcl:"preemptible_worker_config,block"`
	// SecurityConfig: optional
	SecurityConfig *SecurityConfig `hcl:"security_config,block"`
	// SoftwareConfig: optional
	SoftwareConfig *SoftwareConfig `hcl:"software_config,block"`
	// WorkerConfig: optional
	WorkerConfig *WorkerConfig `hcl:"worker_config,block"`
}

type AutoscalingConfig struct {
	// PolicyUri: string, required
	PolicyUri terra.StringValue `hcl:"policy_uri,attr" validate:"required"`
}

type DataprocMetricConfig struct {
	// Metrics: min=1
	Metrics []Metrics `hcl:"metrics,block" validate:"min=1"`
}

type Metrics struct {
	// MetricOverrides: set of string, optional
	MetricOverrides terra.SetValue[terra.StringValue] `hcl:"metric_overrides,attr"`
	// MetricSource: string, required
	MetricSource terra.StringValue `hcl:"metric_source,attr" validate:"required"`
}

type EncryptionConfig struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type EndpointConfig struct {
	// EnableHttpPortAccess: bool, required
	EnableHttpPortAccess terra.BoolValue `hcl:"enable_http_port_access,attr" validate:"required"`
}

type GceClusterConfig struct {
	// InternalIpOnly: bool, optional
	InternalIpOnly terra.BoolValue `hcl:"internal_ip_only,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// ServiceAccountScopes: set of string, optional
	ServiceAccountScopes terra.SetValue[terra.StringValue] `hcl:"service_account_scopes,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// Tags: set of string, optional
	Tags terra.SetValue[terra.StringValue] `hcl:"tags,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// NodeGroupAffinity: optional
	NodeGroupAffinity *NodeGroupAffinity `hcl:"node_group_affinity,block"`
	// ReservationAffinity: optional
	ReservationAffinity *ReservationAffinity `hcl:"reservation_affinity,block"`
	// ShieldedInstanceConfig: optional
	ShieldedInstanceConfig *ShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
}

type NodeGroupAffinity struct {
	// NodeGroupUri: string, required
	NodeGroupUri terra.StringValue `hcl:"node_group_uri,attr" validate:"required"`
}

type ReservationAffinity struct {
	// ConsumeReservationType: string, optional
	ConsumeReservationType terra.StringValue `hcl:"consume_reservation_type,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
	// EnableVtpm: bool, optional
	EnableVtpm terra.BoolValue `hcl:"enable_vtpm,attr"`
}

type InitializationAction struct {
	// Script: string, required
	Script terra.StringValue `hcl:"script,attr" validate:"required"`
	// TimeoutSec: number, optional
	TimeoutSec terra.NumberValue `hcl:"timeout_sec,attr"`
}

type LifecycleConfig struct {
	// AutoDeleteTime: string, optional
	AutoDeleteTime terra.StringValue `hcl:"auto_delete_time,attr"`
	// IdleDeleteTtl: string, optional
	IdleDeleteTtl terra.StringValue `hcl:"idle_delete_ttl,attr"`
}

type MasterConfig struct {
	// ImageUri: string, optional
	ImageUri terra.StringValue `hcl:"image_uri,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NumInstances: number, optional
	NumInstances terra.NumberValue `hcl:"num_instances,attr"`
	// MasterConfigAccelerators: min=0
	Accelerators []MasterConfigAccelerators `hcl:"accelerators,block" validate:"min=0"`
	// MasterConfigDiskConfig: optional
	DiskConfig *MasterConfigDiskConfig `hcl:"disk_config,block"`
}

type MasterConfigAccelerators struct {
	// AcceleratorCount: number, required
	AcceleratorCount terra.NumberValue `hcl:"accelerator_count,attr" validate:"required"`
	// AcceleratorType: string, required
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr" validate:"required"`
}

type MasterConfigDiskConfig struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// BootDiskType: string, optional
	BootDiskType terra.StringValue `hcl:"boot_disk_type,attr"`
	// NumLocalSsds: number, optional
	NumLocalSsds terra.NumberValue `hcl:"num_local_ssds,attr"`
}

type ClusterConfigMetastoreConfig struct {
	// DataprocMetastoreService: string, required
	DataprocMetastoreService terra.StringValue `hcl:"dataproc_metastore_service,attr" validate:"required"`
}

type PreemptibleWorkerConfig struct {
	// NumInstances: number, optional
	NumInstances terra.NumberValue `hcl:"num_instances,attr"`
	// Preemptibility: string, optional
	Preemptibility terra.StringValue `hcl:"preemptibility,attr"`
	// PreemptibleWorkerConfigDiskConfig: optional
	DiskConfig *PreemptibleWorkerConfigDiskConfig `hcl:"disk_config,block"`
}

type PreemptibleWorkerConfigDiskConfig struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// BootDiskType: string, optional
	BootDiskType terra.StringValue `hcl:"boot_disk_type,attr"`
	// NumLocalSsds: number, optional
	NumLocalSsds terra.NumberValue `hcl:"num_local_ssds,attr"`
}

type SecurityConfig struct {
	// KerberosConfig: required
	KerberosConfig *KerberosConfig `hcl:"kerberos_config,block" validate:"required"`
}

type KerberosConfig struct {
	// CrossRealmTrustAdminServer: string, optional
	CrossRealmTrustAdminServer terra.StringValue `hcl:"cross_realm_trust_admin_server,attr"`
	// CrossRealmTrustKdc: string, optional
	CrossRealmTrustKdc terra.StringValue `hcl:"cross_realm_trust_kdc,attr"`
	// CrossRealmTrustRealm: string, optional
	CrossRealmTrustRealm terra.StringValue `hcl:"cross_realm_trust_realm,attr"`
	// CrossRealmTrustSharedPasswordUri: string, optional
	CrossRealmTrustSharedPasswordUri terra.StringValue `hcl:"cross_realm_trust_shared_password_uri,attr"`
	// EnableKerberos: bool, optional
	EnableKerberos terra.BoolValue `hcl:"enable_kerberos,attr"`
	// KdcDbKeyUri: string, optional
	KdcDbKeyUri terra.StringValue `hcl:"kdc_db_key_uri,attr"`
	// KeyPasswordUri: string, optional
	KeyPasswordUri terra.StringValue `hcl:"key_password_uri,attr"`
	// KeystorePasswordUri: string, optional
	KeystorePasswordUri terra.StringValue `hcl:"keystore_password_uri,attr"`
	// KeystoreUri: string, optional
	KeystoreUri terra.StringValue `hcl:"keystore_uri,attr"`
	// KmsKeyUri: string, required
	KmsKeyUri terra.StringValue `hcl:"kms_key_uri,attr" validate:"required"`
	// Realm: string, optional
	Realm terra.StringValue `hcl:"realm,attr"`
	// RootPrincipalPasswordUri: string, required
	RootPrincipalPasswordUri terra.StringValue `hcl:"root_principal_password_uri,attr" validate:"required"`
	// TgtLifetimeHours: number, optional
	TgtLifetimeHours terra.NumberValue `hcl:"tgt_lifetime_hours,attr"`
	// TruststorePasswordUri: string, optional
	TruststorePasswordUri terra.StringValue `hcl:"truststore_password_uri,attr"`
	// TruststoreUri: string, optional
	TruststoreUri terra.StringValue `hcl:"truststore_uri,attr"`
}

type SoftwareConfig struct {
	// ImageVersion: string, optional
	ImageVersion terra.StringValue `hcl:"image_version,attr"`
	// OptionalComponents: set of string, optional
	OptionalComponents terra.SetValue[terra.StringValue] `hcl:"optional_components,attr"`
	// OverrideProperties: map of string, optional
	OverrideProperties terra.MapValue[terra.StringValue] `hcl:"override_properties,attr"`
}

type WorkerConfig struct {
	// ImageUri: string, optional
	ImageUri terra.StringValue `hcl:"image_uri,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NumInstances: number, optional
	NumInstances terra.NumberValue `hcl:"num_instances,attr"`
	// WorkerConfigAccelerators: min=0
	Accelerators []WorkerConfigAccelerators `hcl:"accelerators,block" validate:"min=0"`
	// WorkerConfigDiskConfig: optional
	DiskConfig *WorkerConfigDiskConfig `hcl:"disk_config,block"`
}

type WorkerConfigAccelerators struct {
	// AcceleratorCount: number, required
	AcceleratorCount terra.NumberValue `hcl:"accelerator_count,attr" validate:"required"`
	// AcceleratorType: string, required
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr" validate:"required"`
}

type WorkerConfigDiskConfig struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// BootDiskType: string, optional
	BootDiskType terra.StringValue `hcl:"boot_disk_type,attr"`
	// NumLocalSsds: number, optional
	NumLocalSsds terra.NumberValue `hcl:"num_local_ssds,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VirtualClusterConfig struct {
	// StagingBucket: string, optional
	StagingBucket terra.StringValue `hcl:"staging_bucket,attr"`
	// AuxiliaryServicesConfig: optional
	AuxiliaryServicesConfig *AuxiliaryServicesConfig `hcl:"auxiliary_services_config,block"`
	// KubernetesClusterConfig: optional
	KubernetesClusterConfig *KubernetesClusterConfig `hcl:"kubernetes_cluster_config,block"`
}

type AuxiliaryServicesConfig struct {
	// AuxiliaryServicesConfigMetastoreConfig: optional
	MetastoreConfig *AuxiliaryServicesConfigMetastoreConfig `hcl:"metastore_config,block"`
	// SparkHistoryServerConfig: optional
	SparkHistoryServerConfig *SparkHistoryServerConfig `hcl:"spark_history_server_config,block"`
}

type AuxiliaryServicesConfigMetastoreConfig struct {
	// DataprocMetastoreService: string, optional
	DataprocMetastoreService terra.StringValue `hcl:"dataproc_metastore_service,attr"`
}

type SparkHistoryServerConfig struct {
	// DataprocCluster: string, optional
	DataprocCluster terra.StringValue `hcl:"dataproc_cluster,attr"`
}

type KubernetesClusterConfig struct {
	// KubernetesNamespace: string, optional
	KubernetesNamespace terra.StringValue `hcl:"kubernetes_namespace,attr"`
	// GkeClusterConfig: required
	GkeClusterConfig *GkeClusterConfig `hcl:"gke_cluster_config,block" validate:"required"`
	// KubernetesSoftwareConfig: required
	KubernetesSoftwareConfig *KubernetesSoftwareConfig `hcl:"kubernetes_software_config,block" validate:"required"`
}

type GkeClusterConfig struct {
	// GkeClusterTarget: string, optional
	GkeClusterTarget terra.StringValue `hcl:"gke_cluster_target,attr"`
	// NodePoolTarget: min=0
	NodePoolTarget []NodePoolTarget `hcl:"node_pool_target,block" validate:"min=0"`
}

type NodePoolTarget struct {
	// NodePool: string, required
	NodePool terra.StringValue `hcl:"node_pool,attr" validate:"required"`
	// Roles: set of string, required
	Roles terra.SetValue[terra.StringValue] `hcl:"roles,attr" validate:"required"`
	// NodePoolConfig: optional
	NodePoolConfig *NodePoolConfig `hcl:"node_pool_config,block"`
}

type NodePoolConfig struct {
	// Locations: set of string, required
	Locations terra.SetValue[terra.StringValue] `hcl:"locations,attr" validate:"required"`
	// Autoscaling: optional
	Autoscaling *Autoscaling `hcl:"autoscaling,block"`
	// Config: optional
	Config *Config `hcl:"config,block"`
}

type Autoscaling struct {
	// MaxNodeCount: number, optional
	MaxNodeCount terra.NumberValue `hcl:"max_node_count,attr"`
	// MinNodeCount: number, optional
	MinNodeCount terra.NumberValue `hcl:"min_node_count,attr"`
}

type Config struct {
	// LocalSsdCount: number, optional
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// Preemptible: bool, optional
	Preemptible terra.BoolValue `hcl:"preemptible,attr"`
	// Spot: bool, optional
	Spot terra.BoolValue `hcl:"spot,attr"`
}

type KubernetesSoftwareConfig struct {
	// ComponentVersion: map of string, required
	ComponentVersion terra.MapValue[terra.StringValue] `hcl:"component_version,attr" validate:"required"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type ClusterConfigAttributes struct {
	ref terra.Reference
}

func (cc ClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ClusterConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigAttributes {
	return ClusterConfigAttributes{ref: ref}
}

func (cc ClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ClusterConfigAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("bucket"))
}

func (cc ClusterConfigAttributes) StagingBucket() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("staging_bucket"))
}

func (cc ClusterConfigAttributes) TempBucket() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("temp_bucket"))
}

func (cc ClusterConfigAttributes) AutoscalingConfig() terra.ListValue[AutoscalingConfigAttributes] {
	return terra.ReferenceAsList[AutoscalingConfigAttributes](cc.ref.Append("autoscaling_config"))
}

func (cc ClusterConfigAttributes) DataprocMetricConfig() terra.ListValue[DataprocMetricConfigAttributes] {
	return terra.ReferenceAsList[DataprocMetricConfigAttributes](cc.ref.Append("dataproc_metric_config"))
}

func (cc ClusterConfigAttributes) EncryptionConfig() terra.ListValue[EncryptionConfigAttributes] {
	return terra.ReferenceAsList[EncryptionConfigAttributes](cc.ref.Append("encryption_config"))
}

func (cc ClusterConfigAttributes) EndpointConfig() terra.ListValue[EndpointConfigAttributes] {
	return terra.ReferenceAsList[EndpointConfigAttributes](cc.ref.Append("endpoint_config"))
}

func (cc ClusterConfigAttributes) GceClusterConfig() terra.ListValue[GceClusterConfigAttributes] {
	return terra.ReferenceAsList[GceClusterConfigAttributes](cc.ref.Append("gce_cluster_config"))
}

func (cc ClusterConfigAttributes) InitializationAction() terra.ListValue[InitializationActionAttributes] {
	return terra.ReferenceAsList[InitializationActionAttributes](cc.ref.Append("initialization_action"))
}

func (cc ClusterConfigAttributes) LifecycleConfig() terra.ListValue[LifecycleConfigAttributes] {
	return terra.ReferenceAsList[LifecycleConfigAttributes](cc.ref.Append("lifecycle_config"))
}

func (cc ClusterConfigAttributes) MasterConfig() terra.ListValue[MasterConfigAttributes] {
	return terra.ReferenceAsList[MasterConfigAttributes](cc.ref.Append("master_config"))
}

func (cc ClusterConfigAttributes) MetastoreConfig() terra.ListValue[ClusterConfigMetastoreConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigMetastoreConfigAttributes](cc.ref.Append("metastore_config"))
}

func (cc ClusterConfigAttributes) PreemptibleWorkerConfig() terra.ListValue[PreemptibleWorkerConfigAttributes] {
	return terra.ReferenceAsList[PreemptibleWorkerConfigAttributes](cc.ref.Append("preemptible_worker_config"))
}

func (cc ClusterConfigAttributes) SecurityConfig() terra.ListValue[SecurityConfigAttributes] {
	return terra.ReferenceAsList[SecurityConfigAttributes](cc.ref.Append("security_config"))
}

func (cc ClusterConfigAttributes) SoftwareConfig() terra.ListValue[SoftwareConfigAttributes] {
	return terra.ReferenceAsList[SoftwareConfigAttributes](cc.ref.Append("software_config"))
}

func (cc ClusterConfigAttributes) WorkerConfig() terra.ListValue[WorkerConfigAttributes] {
	return terra.ReferenceAsList[WorkerConfigAttributes](cc.ref.Append("worker_config"))
}

type AutoscalingConfigAttributes struct {
	ref terra.Reference
}

func (ac AutoscalingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AutoscalingConfigAttributes) InternalWithRef(ref terra.Reference) AutoscalingConfigAttributes {
	return AutoscalingConfigAttributes{ref: ref}
}

func (ac AutoscalingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AutoscalingConfigAttributes) PolicyUri() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("policy_uri"))
}

type DataprocMetricConfigAttributes struct {
	ref terra.Reference
}

func (dmc DataprocMetricConfigAttributes) InternalRef() (terra.Reference, error) {
	return dmc.ref, nil
}

func (dmc DataprocMetricConfigAttributes) InternalWithRef(ref terra.Reference) DataprocMetricConfigAttributes {
	return DataprocMetricConfigAttributes{ref: ref}
}

func (dmc DataprocMetricConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dmc.ref.InternalTokens()
}

func (dmc DataprocMetricConfigAttributes) Metrics() terra.ListValue[MetricsAttributes] {
	return terra.ReferenceAsList[MetricsAttributes](dmc.ref.Append("metrics"))
}

type MetricsAttributes struct {
	ref terra.Reference
}

func (m MetricsAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MetricsAttributes) InternalWithRef(ref terra.Reference) MetricsAttributes {
	return MetricsAttributes{ref: ref}
}

func (m MetricsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MetricsAttributes) MetricOverrides() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](m.ref.Append("metric_overrides"))
}

func (m MetricsAttributes) MetricSource() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("metric_source"))
}

type EncryptionConfigAttributes struct {
	ref terra.Reference
}

func (ec EncryptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EncryptionConfigAttributes) InternalWithRef(ref terra.Reference) EncryptionConfigAttributes {
	return EncryptionConfigAttributes{ref: ref}
}

func (ec EncryptionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EncryptionConfigAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key_name"))
}

type EndpointConfigAttributes struct {
	ref terra.Reference
}

func (ec EndpointConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EndpointConfigAttributes) InternalWithRef(ref terra.Reference) EndpointConfigAttributes {
	return EndpointConfigAttributes{ref: ref}
}

func (ec EndpointConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EndpointConfigAttributes) EnableHttpPortAccess() terra.BoolValue {
	return terra.ReferenceAsBool(ec.ref.Append("enable_http_port_access"))
}

func (ec EndpointConfigAttributes) HttpPorts() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ec.ref.Append("http_ports"))
}

type GceClusterConfigAttributes struct {
	ref terra.Reference
}

func (gcc GceClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return gcc.ref, nil
}

func (gcc GceClusterConfigAttributes) InternalWithRef(ref terra.Reference) GceClusterConfigAttributes {
	return GceClusterConfigAttributes{ref: ref}
}

func (gcc GceClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gcc.ref.InternalTokens()
}

func (gcc GceClusterConfigAttributes) InternalIpOnly() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("internal_ip_only"))
}

func (gcc GceClusterConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcc.ref.Append("metadata"))
}

func (gcc GceClusterConfigAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("network"))
}

func (gcc GceClusterConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("service_account"))
}

func (gcc GceClusterConfigAttributes) ServiceAccountScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gcc.ref.Append("service_account_scopes"))
}

func (gcc GceClusterConfigAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("subnetwork"))
}

func (gcc GceClusterConfigAttributes) Tags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gcc.ref.Append("tags"))
}

func (gcc GceClusterConfigAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("zone"))
}

func (gcc GceClusterConfigAttributes) NodeGroupAffinity() terra.ListValue[NodeGroupAffinityAttributes] {
	return terra.ReferenceAsList[NodeGroupAffinityAttributes](gcc.ref.Append("node_group_affinity"))
}

func (gcc GceClusterConfigAttributes) ReservationAffinity() terra.ListValue[ReservationAffinityAttributes] {
	return terra.ReferenceAsList[ReservationAffinityAttributes](gcc.ref.Append("reservation_affinity"))
}

func (gcc GceClusterConfigAttributes) ShieldedInstanceConfig() terra.ListValue[ShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[ShieldedInstanceConfigAttributes](gcc.ref.Append("shielded_instance_config"))
}

type NodeGroupAffinityAttributes struct {
	ref terra.Reference
}

func (nga NodeGroupAffinityAttributes) InternalRef() (terra.Reference, error) {
	return nga.ref, nil
}

func (nga NodeGroupAffinityAttributes) InternalWithRef(ref terra.Reference) NodeGroupAffinityAttributes {
	return NodeGroupAffinityAttributes{ref: ref}
}

func (nga NodeGroupAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nga.ref.InternalTokens()
}

func (nga NodeGroupAffinityAttributes) NodeGroupUri() terra.StringValue {
	return terra.ReferenceAsString(nga.ref.Append("node_group_uri"))
}

type ReservationAffinityAttributes struct {
	ref terra.Reference
}

func (ra ReservationAffinityAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra ReservationAffinityAttributes) InternalWithRef(ref terra.Reference) ReservationAffinityAttributes {
	return ReservationAffinityAttributes{ref: ref}
}

func (ra ReservationAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra ReservationAffinityAttributes) ConsumeReservationType() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("consume_reservation_type"))
}

func (ra ReservationAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("key"))
}

func (ra ReservationAffinityAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ra.ref.Append("values"))
}

type ShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic ShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic ShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) ShieldedInstanceConfigAttributes {
	return ShieldedInstanceConfigAttributes{ref: ref}
}

func (sic ShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic ShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic ShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

func (sic ShieldedInstanceConfigAttributes) EnableVtpm() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_vtpm"))
}

type InitializationActionAttributes struct {
	ref terra.Reference
}

func (ia InitializationActionAttributes) InternalRef() (terra.Reference, error) {
	return ia.ref, nil
}

func (ia InitializationActionAttributes) InternalWithRef(ref terra.Reference) InitializationActionAttributes {
	return InitializationActionAttributes{ref: ref}
}

func (ia InitializationActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ia.ref.InternalTokens()
}

func (ia InitializationActionAttributes) Script() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("script"))
}

func (ia InitializationActionAttributes) TimeoutSec() terra.NumberValue {
	return terra.ReferenceAsNumber(ia.ref.Append("timeout_sec"))
}

type LifecycleConfigAttributes struct {
	ref terra.Reference
}

func (lc LifecycleConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LifecycleConfigAttributes) InternalWithRef(ref terra.Reference) LifecycleConfigAttributes {
	return LifecycleConfigAttributes{ref: ref}
}

func (lc LifecycleConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LifecycleConfigAttributes) AutoDeleteTime() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("auto_delete_time"))
}

func (lc LifecycleConfigAttributes) IdleDeleteTtl() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("idle_delete_ttl"))
}

func (lc LifecycleConfigAttributes) IdleStartTime() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("idle_start_time"))
}

type MasterConfigAttributes struct {
	ref terra.Reference
}

func (mc MasterConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MasterConfigAttributes) InternalWithRef(ref terra.Reference) MasterConfigAttributes {
	return MasterConfigAttributes{ref: ref}
}

func (mc MasterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MasterConfigAttributes) ImageUri() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("image_uri"))
}

func (mc MasterConfigAttributes) InstanceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("instance_names"))
}

func (mc MasterConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("machine_type"))
}

func (mc MasterConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("min_cpu_platform"))
}

func (mc MasterConfigAttributes) NumInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("num_instances"))
}

func (mc MasterConfigAttributes) Accelerators() terra.SetValue[MasterConfigAcceleratorsAttributes] {
	return terra.ReferenceAsSet[MasterConfigAcceleratorsAttributes](mc.ref.Append("accelerators"))
}

func (mc MasterConfigAttributes) DiskConfig() terra.ListValue[MasterConfigDiskConfigAttributes] {
	return terra.ReferenceAsList[MasterConfigDiskConfigAttributes](mc.ref.Append("disk_config"))
}

type MasterConfigAcceleratorsAttributes struct {
	ref terra.Reference
}

func (a MasterConfigAcceleratorsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a MasterConfigAcceleratorsAttributes) InternalWithRef(ref terra.Reference) MasterConfigAcceleratorsAttributes {
	return MasterConfigAcceleratorsAttributes{ref: ref}
}

func (a MasterConfigAcceleratorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a MasterConfigAcceleratorsAttributes) AcceleratorCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("accelerator_count"))
}

func (a MasterConfigAcceleratorsAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("accelerator_type"))
}

type MasterConfigDiskConfigAttributes struct {
	ref terra.Reference
}

func (dc MasterConfigDiskConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc MasterConfigDiskConfigAttributes) InternalWithRef(ref terra.Reference) MasterConfigDiskConfigAttributes {
	return MasterConfigDiskConfigAttributes{ref: ref}
}

func (dc MasterConfigDiskConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc MasterConfigDiskConfigAttributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("boot_disk_size_gb"))
}

func (dc MasterConfigDiskConfigAttributes) BootDiskType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("boot_disk_type"))
}

func (dc MasterConfigDiskConfigAttributes) NumLocalSsds() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("num_local_ssds"))
}

type ClusterConfigMetastoreConfigAttributes struct {
	ref terra.Reference
}

func (mc ClusterConfigMetastoreConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc ClusterConfigMetastoreConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigMetastoreConfigAttributes {
	return ClusterConfigMetastoreConfigAttributes{ref: ref}
}

func (mc ClusterConfigMetastoreConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc ClusterConfigMetastoreConfigAttributes) DataprocMetastoreService() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("dataproc_metastore_service"))
}

type PreemptibleWorkerConfigAttributes struct {
	ref terra.Reference
}

func (pwc PreemptibleWorkerConfigAttributes) InternalRef() (terra.Reference, error) {
	return pwc.ref, nil
}

func (pwc PreemptibleWorkerConfigAttributes) InternalWithRef(ref terra.Reference) PreemptibleWorkerConfigAttributes {
	return PreemptibleWorkerConfigAttributes{ref: ref}
}

func (pwc PreemptibleWorkerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pwc.ref.InternalTokens()
}

func (pwc PreemptibleWorkerConfigAttributes) InstanceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pwc.ref.Append("instance_names"))
}

func (pwc PreemptibleWorkerConfigAttributes) NumInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(pwc.ref.Append("num_instances"))
}

func (pwc PreemptibleWorkerConfigAttributes) Preemptibility() terra.StringValue {
	return terra.ReferenceAsString(pwc.ref.Append("preemptibility"))
}

func (pwc PreemptibleWorkerConfigAttributes) DiskConfig() terra.ListValue[PreemptibleWorkerConfigDiskConfigAttributes] {
	return terra.ReferenceAsList[PreemptibleWorkerConfigDiskConfigAttributes](pwc.ref.Append("disk_config"))
}

type PreemptibleWorkerConfigDiskConfigAttributes struct {
	ref terra.Reference
}

func (dc PreemptibleWorkerConfigDiskConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc PreemptibleWorkerConfigDiskConfigAttributes) InternalWithRef(ref terra.Reference) PreemptibleWorkerConfigDiskConfigAttributes {
	return PreemptibleWorkerConfigDiskConfigAttributes{ref: ref}
}

func (dc PreemptibleWorkerConfigDiskConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc PreemptibleWorkerConfigDiskConfigAttributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("boot_disk_size_gb"))
}

func (dc PreemptibleWorkerConfigDiskConfigAttributes) BootDiskType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("boot_disk_type"))
}

func (dc PreemptibleWorkerConfigDiskConfigAttributes) NumLocalSsds() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("num_local_ssds"))
}

type SecurityConfigAttributes struct {
	ref terra.Reference
}

func (sc SecurityConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SecurityConfigAttributes) InternalWithRef(ref terra.Reference) SecurityConfigAttributes {
	return SecurityConfigAttributes{ref: ref}
}

func (sc SecurityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SecurityConfigAttributes) KerberosConfig() terra.ListValue[KerberosConfigAttributes] {
	return terra.ReferenceAsList[KerberosConfigAttributes](sc.ref.Append("kerberos_config"))
}

type KerberosConfigAttributes struct {
	ref terra.Reference
}

func (kc KerberosConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc KerberosConfigAttributes) InternalWithRef(ref terra.Reference) KerberosConfigAttributes {
	return KerberosConfigAttributes{ref: ref}
}

func (kc KerberosConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc KerberosConfigAttributes) CrossRealmTrustAdminServer() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_admin_server"))
}

func (kc KerberosConfigAttributes) CrossRealmTrustKdc() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_kdc"))
}

func (kc KerberosConfigAttributes) CrossRealmTrustRealm() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_realm"))
}

func (kc KerberosConfigAttributes) CrossRealmTrustSharedPasswordUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_shared_password_uri"))
}

func (kc KerberosConfigAttributes) EnableKerberos() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("enable_kerberos"))
}

func (kc KerberosConfigAttributes) KdcDbKeyUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("kdc_db_key_uri"))
}

func (kc KerberosConfigAttributes) KeyPasswordUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("key_password_uri"))
}

func (kc KerberosConfigAttributes) KeystorePasswordUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("keystore_password_uri"))
}

func (kc KerberosConfigAttributes) KeystoreUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("keystore_uri"))
}

func (kc KerberosConfigAttributes) KmsKeyUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("kms_key_uri"))
}

func (kc KerberosConfigAttributes) Realm() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("realm"))
}

func (kc KerberosConfigAttributes) RootPrincipalPasswordUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("root_principal_password_uri"))
}

func (kc KerberosConfigAttributes) TgtLifetimeHours() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("tgt_lifetime_hours"))
}

func (kc KerberosConfigAttributes) TruststorePasswordUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("truststore_password_uri"))
}

func (kc KerberosConfigAttributes) TruststoreUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("truststore_uri"))
}

type SoftwareConfigAttributes struct {
	ref terra.Reference
}

func (sc SoftwareConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SoftwareConfigAttributes) InternalWithRef(ref terra.Reference) SoftwareConfigAttributes {
	return SoftwareConfigAttributes{ref: ref}
}

func (sc SoftwareConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SoftwareConfigAttributes) ImageVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("image_version"))
}

func (sc SoftwareConfigAttributes) OptionalComponents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sc.ref.Append("optional_components"))
}

func (sc SoftwareConfigAttributes) OverrideProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sc.ref.Append("override_properties"))
}

func (sc SoftwareConfigAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sc.ref.Append("properties"))
}

type WorkerConfigAttributes struct {
	ref terra.Reference
}

func (wc WorkerConfigAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc WorkerConfigAttributes) InternalWithRef(ref terra.Reference) WorkerConfigAttributes {
	return WorkerConfigAttributes{ref: ref}
}

func (wc WorkerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc WorkerConfigAttributes) ImageUri() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("image_uri"))
}

func (wc WorkerConfigAttributes) InstanceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wc.ref.Append("instance_names"))
}

func (wc WorkerConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("machine_type"))
}

func (wc WorkerConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("min_cpu_platform"))
}

func (wc WorkerConfigAttributes) NumInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(wc.ref.Append("num_instances"))
}

func (wc WorkerConfigAttributes) Accelerators() terra.SetValue[WorkerConfigAcceleratorsAttributes] {
	return terra.ReferenceAsSet[WorkerConfigAcceleratorsAttributes](wc.ref.Append("accelerators"))
}

func (wc WorkerConfigAttributes) DiskConfig() terra.ListValue[WorkerConfigDiskConfigAttributes] {
	return terra.ReferenceAsList[WorkerConfigDiskConfigAttributes](wc.ref.Append("disk_config"))
}

type WorkerConfigAcceleratorsAttributes struct {
	ref terra.Reference
}

func (a WorkerConfigAcceleratorsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a WorkerConfigAcceleratorsAttributes) InternalWithRef(ref terra.Reference) WorkerConfigAcceleratorsAttributes {
	return WorkerConfigAcceleratorsAttributes{ref: ref}
}

func (a WorkerConfigAcceleratorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a WorkerConfigAcceleratorsAttributes) AcceleratorCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("accelerator_count"))
}

func (a WorkerConfigAcceleratorsAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("accelerator_type"))
}

type WorkerConfigDiskConfigAttributes struct {
	ref terra.Reference
}

func (dc WorkerConfigDiskConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc WorkerConfigDiskConfigAttributes) InternalWithRef(ref terra.Reference) WorkerConfigDiskConfigAttributes {
	return WorkerConfigDiskConfigAttributes{ref: ref}
}

func (dc WorkerConfigDiskConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc WorkerConfigDiskConfigAttributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("boot_disk_size_gb"))
}

func (dc WorkerConfigDiskConfigAttributes) BootDiskType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("boot_disk_type"))
}

func (dc WorkerConfigDiskConfigAttributes) NumLocalSsds() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("num_local_ssds"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VirtualClusterConfigAttributes struct {
	ref terra.Reference
}

func (vcc VirtualClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return vcc.ref, nil
}

func (vcc VirtualClusterConfigAttributes) InternalWithRef(ref terra.Reference) VirtualClusterConfigAttributes {
	return VirtualClusterConfigAttributes{ref: ref}
}

func (vcc VirtualClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vcc.ref.InternalTokens()
}

func (vcc VirtualClusterConfigAttributes) StagingBucket() terra.StringValue {
	return terra.ReferenceAsString(vcc.ref.Append("staging_bucket"))
}

func (vcc VirtualClusterConfigAttributes) AuxiliaryServicesConfig() terra.ListValue[AuxiliaryServicesConfigAttributes] {
	return terra.ReferenceAsList[AuxiliaryServicesConfigAttributes](vcc.ref.Append("auxiliary_services_config"))
}

func (vcc VirtualClusterConfigAttributes) KubernetesClusterConfig() terra.ListValue[KubernetesClusterConfigAttributes] {
	return terra.ReferenceAsList[KubernetesClusterConfigAttributes](vcc.ref.Append("kubernetes_cluster_config"))
}

type AuxiliaryServicesConfigAttributes struct {
	ref terra.Reference
}

func (asc AuxiliaryServicesConfigAttributes) InternalRef() (terra.Reference, error) {
	return asc.ref, nil
}

func (asc AuxiliaryServicesConfigAttributes) InternalWithRef(ref terra.Reference) AuxiliaryServicesConfigAttributes {
	return AuxiliaryServicesConfigAttributes{ref: ref}
}

func (asc AuxiliaryServicesConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asc.ref.InternalTokens()
}

func (asc AuxiliaryServicesConfigAttributes) MetastoreConfig() terra.ListValue[AuxiliaryServicesConfigMetastoreConfigAttributes] {
	return terra.ReferenceAsList[AuxiliaryServicesConfigMetastoreConfigAttributes](asc.ref.Append("metastore_config"))
}

func (asc AuxiliaryServicesConfigAttributes) SparkHistoryServerConfig() terra.ListValue[SparkHistoryServerConfigAttributes] {
	return terra.ReferenceAsList[SparkHistoryServerConfigAttributes](asc.ref.Append("spark_history_server_config"))
}

type AuxiliaryServicesConfigMetastoreConfigAttributes struct {
	ref terra.Reference
}

func (mc AuxiliaryServicesConfigMetastoreConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc AuxiliaryServicesConfigMetastoreConfigAttributes) InternalWithRef(ref terra.Reference) AuxiliaryServicesConfigMetastoreConfigAttributes {
	return AuxiliaryServicesConfigMetastoreConfigAttributes{ref: ref}
}

func (mc AuxiliaryServicesConfigMetastoreConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc AuxiliaryServicesConfigMetastoreConfigAttributes) DataprocMetastoreService() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("dataproc_metastore_service"))
}

type SparkHistoryServerConfigAttributes struct {
	ref terra.Reference
}

func (shsc SparkHistoryServerConfigAttributes) InternalRef() (terra.Reference, error) {
	return shsc.ref, nil
}

func (shsc SparkHistoryServerConfigAttributes) InternalWithRef(ref terra.Reference) SparkHistoryServerConfigAttributes {
	return SparkHistoryServerConfigAttributes{ref: ref}
}

func (shsc SparkHistoryServerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return shsc.ref.InternalTokens()
}

func (shsc SparkHistoryServerConfigAttributes) DataprocCluster() terra.StringValue {
	return terra.ReferenceAsString(shsc.ref.Append("dataproc_cluster"))
}

type KubernetesClusterConfigAttributes struct {
	ref terra.Reference
}

func (kcc KubernetesClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return kcc.ref, nil
}

func (kcc KubernetesClusterConfigAttributes) InternalWithRef(ref terra.Reference) KubernetesClusterConfigAttributes {
	return KubernetesClusterConfigAttributes{ref: ref}
}

func (kcc KubernetesClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kcc.ref.InternalTokens()
}

func (kcc KubernetesClusterConfigAttributes) KubernetesNamespace() terra.StringValue {
	return terra.ReferenceAsString(kcc.ref.Append("kubernetes_namespace"))
}

func (kcc KubernetesClusterConfigAttributes) GkeClusterConfig() terra.ListValue[GkeClusterConfigAttributes] {
	return terra.ReferenceAsList[GkeClusterConfigAttributes](kcc.ref.Append("gke_cluster_config"))
}

func (kcc KubernetesClusterConfigAttributes) KubernetesSoftwareConfig() terra.ListValue[KubernetesSoftwareConfigAttributes] {
	return terra.ReferenceAsList[KubernetesSoftwareConfigAttributes](kcc.ref.Append("kubernetes_software_config"))
}

type GkeClusterConfigAttributes struct {
	ref terra.Reference
}

func (gcc GkeClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return gcc.ref, nil
}

func (gcc GkeClusterConfigAttributes) InternalWithRef(ref terra.Reference) GkeClusterConfigAttributes {
	return GkeClusterConfigAttributes{ref: ref}
}

func (gcc GkeClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gcc.ref.InternalTokens()
}

func (gcc GkeClusterConfigAttributes) GkeClusterTarget() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("gke_cluster_target"))
}

func (gcc GkeClusterConfigAttributes) NodePoolTarget() terra.ListValue[NodePoolTargetAttributes] {
	return terra.ReferenceAsList[NodePoolTargetAttributes](gcc.ref.Append("node_pool_target"))
}

type NodePoolTargetAttributes struct {
	ref terra.Reference
}

func (npt NodePoolTargetAttributes) InternalRef() (terra.Reference, error) {
	return npt.ref, nil
}

func (npt NodePoolTargetAttributes) InternalWithRef(ref terra.Reference) NodePoolTargetAttributes {
	return NodePoolTargetAttributes{ref: ref}
}

func (npt NodePoolTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npt.ref.InternalTokens()
}

func (npt NodePoolTargetAttributes) NodePool() terra.StringValue {
	return terra.ReferenceAsString(npt.ref.Append("node_pool"))
}

func (npt NodePoolTargetAttributes) Roles() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](npt.ref.Append("roles"))
}

func (npt NodePoolTargetAttributes) NodePoolConfig() terra.ListValue[NodePoolConfigAttributes] {
	return terra.ReferenceAsList[NodePoolConfigAttributes](npt.ref.Append("node_pool_config"))
}

type NodePoolConfigAttributes struct {
	ref terra.Reference
}

func (npc NodePoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return npc.ref, nil
}

func (npc NodePoolConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolConfigAttributes {
	return NodePoolConfigAttributes{ref: ref}
}

func (npc NodePoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npc.ref.InternalTokens()
}

func (npc NodePoolConfigAttributes) Locations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](npc.ref.Append("locations"))
}

func (npc NodePoolConfigAttributes) Autoscaling() terra.ListValue[AutoscalingAttributes] {
	return terra.ReferenceAsList[AutoscalingAttributes](npc.ref.Append("autoscaling"))
}

func (npc NodePoolConfigAttributes) Config() terra.ListValue[ConfigAttributes] {
	return terra.ReferenceAsList[ConfigAttributes](npc.ref.Append("config"))
}

type AutoscalingAttributes struct {
	ref terra.Reference
}

func (a AutoscalingAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AutoscalingAttributes) InternalWithRef(ref terra.Reference) AutoscalingAttributes {
	return AutoscalingAttributes{ref: ref}
}

func (a AutoscalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AutoscalingAttributes) MaxNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("max_node_count"))
}

func (a AutoscalingAttributes) MinNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("min_node_count"))
}

type ConfigAttributes struct {
	ref terra.Reference
}

func (c ConfigAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigAttributes) InternalWithRef(ref terra.Reference) ConfigAttributes {
	return ConfigAttributes{ref: ref}
}

func (c ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("local_ssd_count"))
}

func (c ConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("machine_type"))
}

func (c ConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("min_cpu_platform"))
}

func (c ConfigAttributes) Preemptible() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("preemptible"))
}

func (c ConfigAttributes) Spot() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("spot"))
}

type KubernetesSoftwareConfigAttributes struct {
	ref terra.Reference
}

func (ksc KubernetesSoftwareConfigAttributes) InternalRef() (terra.Reference, error) {
	return ksc.ref, nil
}

func (ksc KubernetesSoftwareConfigAttributes) InternalWithRef(ref terra.Reference) KubernetesSoftwareConfigAttributes {
	return KubernetesSoftwareConfigAttributes{ref: ref}
}

func (ksc KubernetesSoftwareConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ksc.ref.InternalTokens()
}

func (ksc KubernetesSoftwareConfigAttributes) ComponentVersion() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ksc.ref.Append("component_version"))
}

func (ksc KubernetesSoftwareConfigAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ksc.ref.Append("properties"))
}

type ClusterConfigState struct {
	Bucket                  string                              `json:"bucket"`
	StagingBucket           string                              `json:"staging_bucket"`
	TempBucket              string                              `json:"temp_bucket"`
	AutoscalingConfig       []AutoscalingConfigState            `json:"autoscaling_config"`
	DataprocMetricConfig    []DataprocMetricConfigState         `json:"dataproc_metric_config"`
	EncryptionConfig        []EncryptionConfigState             `json:"encryption_config"`
	EndpointConfig          []EndpointConfigState               `json:"endpoint_config"`
	GceClusterConfig        []GceClusterConfigState             `json:"gce_cluster_config"`
	InitializationAction    []InitializationActionState         `json:"initialization_action"`
	LifecycleConfig         []LifecycleConfigState              `json:"lifecycle_config"`
	MasterConfig            []MasterConfigState                 `json:"master_config"`
	MetastoreConfig         []ClusterConfigMetastoreConfigState `json:"metastore_config"`
	PreemptibleWorkerConfig []PreemptibleWorkerConfigState      `json:"preemptible_worker_config"`
	SecurityConfig          []SecurityConfigState               `json:"security_config"`
	SoftwareConfig          []SoftwareConfigState               `json:"software_config"`
	WorkerConfig            []WorkerConfigState                 `json:"worker_config"`
}

type AutoscalingConfigState struct {
	PolicyUri string `json:"policy_uri"`
}

type DataprocMetricConfigState struct {
	Metrics []MetricsState `json:"metrics"`
}

type MetricsState struct {
	MetricOverrides []string `json:"metric_overrides"`
	MetricSource    string   `json:"metric_source"`
}

type EncryptionConfigState struct {
	KmsKeyName string `json:"kms_key_name"`
}

type EndpointConfigState struct {
	EnableHttpPortAccess bool              `json:"enable_http_port_access"`
	HttpPorts            map[string]string `json:"http_ports"`
}

type GceClusterConfigState struct {
	InternalIpOnly         bool                          `json:"internal_ip_only"`
	Metadata               map[string]string             `json:"metadata"`
	Network                string                        `json:"network"`
	ServiceAccount         string                        `json:"service_account"`
	ServiceAccountScopes   []string                      `json:"service_account_scopes"`
	Subnetwork             string                        `json:"subnetwork"`
	Tags                   []string                      `json:"tags"`
	Zone                   string                        `json:"zone"`
	NodeGroupAffinity      []NodeGroupAffinityState      `json:"node_group_affinity"`
	ReservationAffinity    []ReservationAffinityState    `json:"reservation_affinity"`
	ShieldedInstanceConfig []ShieldedInstanceConfigState `json:"shielded_instance_config"`
}

type NodeGroupAffinityState struct {
	NodeGroupUri string `json:"node_group_uri"`
}

type ReservationAffinityState struct {
	ConsumeReservationType string   `json:"consume_reservation_type"`
	Key                    string   `json:"key"`
	Values                 []string `json:"values"`
}

type ShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
	EnableVtpm                bool `json:"enable_vtpm"`
}

type InitializationActionState struct {
	Script     string  `json:"script"`
	TimeoutSec float64 `json:"timeout_sec"`
}

type LifecycleConfigState struct {
	AutoDeleteTime string `json:"auto_delete_time"`
	IdleDeleteTtl  string `json:"idle_delete_ttl"`
	IdleStartTime  string `json:"idle_start_time"`
}

type MasterConfigState struct {
	ImageUri       string                          `json:"image_uri"`
	InstanceNames  []string                        `json:"instance_names"`
	MachineType    string                          `json:"machine_type"`
	MinCpuPlatform string                          `json:"min_cpu_platform"`
	NumInstances   float64                         `json:"num_instances"`
	Accelerators   []MasterConfigAcceleratorsState `json:"accelerators"`
	DiskConfig     []MasterConfigDiskConfigState   `json:"disk_config"`
}

type MasterConfigAcceleratorsState struct {
	AcceleratorCount float64 `json:"accelerator_count"`
	AcceleratorType  string  `json:"accelerator_type"`
}

type MasterConfigDiskConfigState struct {
	BootDiskSizeGb float64 `json:"boot_disk_size_gb"`
	BootDiskType   string  `json:"boot_disk_type"`
	NumLocalSsds   float64 `json:"num_local_ssds"`
}

type ClusterConfigMetastoreConfigState struct {
	DataprocMetastoreService string `json:"dataproc_metastore_service"`
}

type PreemptibleWorkerConfigState struct {
	InstanceNames  []string                                 `json:"instance_names"`
	NumInstances   float64                                  `json:"num_instances"`
	Preemptibility string                                   `json:"preemptibility"`
	DiskConfig     []PreemptibleWorkerConfigDiskConfigState `json:"disk_config"`
}

type PreemptibleWorkerConfigDiskConfigState struct {
	BootDiskSizeGb float64 `json:"boot_disk_size_gb"`
	BootDiskType   string  `json:"boot_disk_type"`
	NumLocalSsds   float64 `json:"num_local_ssds"`
}

type SecurityConfigState struct {
	KerberosConfig []KerberosConfigState `json:"kerberos_config"`
}

type KerberosConfigState struct {
	CrossRealmTrustAdminServer       string  `json:"cross_realm_trust_admin_server"`
	CrossRealmTrustKdc               string  `json:"cross_realm_trust_kdc"`
	CrossRealmTrustRealm             string  `json:"cross_realm_trust_realm"`
	CrossRealmTrustSharedPasswordUri string  `json:"cross_realm_trust_shared_password_uri"`
	EnableKerberos                   bool    `json:"enable_kerberos"`
	KdcDbKeyUri                      string  `json:"kdc_db_key_uri"`
	KeyPasswordUri                   string  `json:"key_password_uri"`
	KeystorePasswordUri              string  `json:"keystore_password_uri"`
	KeystoreUri                      string  `json:"keystore_uri"`
	KmsKeyUri                        string  `json:"kms_key_uri"`
	Realm                            string  `json:"realm"`
	RootPrincipalPasswordUri         string  `json:"root_principal_password_uri"`
	TgtLifetimeHours                 float64 `json:"tgt_lifetime_hours"`
	TruststorePasswordUri            string  `json:"truststore_password_uri"`
	TruststoreUri                    string  `json:"truststore_uri"`
}

type SoftwareConfigState struct {
	ImageVersion       string            `json:"image_version"`
	OptionalComponents []string          `json:"optional_components"`
	OverrideProperties map[string]string `json:"override_properties"`
	Properties         map[string]string `json:"properties"`
}

type WorkerConfigState struct {
	ImageUri       string                          `json:"image_uri"`
	InstanceNames  []string                        `json:"instance_names"`
	MachineType    string                          `json:"machine_type"`
	MinCpuPlatform string                          `json:"min_cpu_platform"`
	NumInstances   float64                         `json:"num_instances"`
	Accelerators   []WorkerConfigAcceleratorsState `json:"accelerators"`
	DiskConfig     []WorkerConfigDiskConfigState   `json:"disk_config"`
}

type WorkerConfigAcceleratorsState struct {
	AcceleratorCount float64 `json:"accelerator_count"`
	AcceleratorType  string  `json:"accelerator_type"`
}

type WorkerConfigDiskConfigState struct {
	BootDiskSizeGb float64 `json:"boot_disk_size_gb"`
	BootDiskType   string  `json:"boot_disk_type"`
	NumLocalSsds   float64 `json:"num_local_ssds"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VirtualClusterConfigState struct {
	StagingBucket           string                         `json:"staging_bucket"`
	AuxiliaryServicesConfig []AuxiliaryServicesConfigState `json:"auxiliary_services_config"`
	KubernetesClusterConfig []KubernetesClusterConfigState `json:"kubernetes_cluster_config"`
}

type AuxiliaryServicesConfigState struct {
	MetastoreConfig          []AuxiliaryServicesConfigMetastoreConfigState `json:"metastore_config"`
	SparkHistoryServerConfig []SparkHistoryServerConfigState               `json:"spark_history_server_config"`
}

type AuxiliaryServicesConfigMetastoreConfigState struct {
	DataprocMetastoreService string `json:"dataproc_metastore_service"`
}

type SparkHistoryServerConfigState struct {
	DataprocCluster string `json:"dataproc_cluster"`
}

type KubernetesClusterConfigState struct {
	KubernetesNamespace      string                          `json:"kubernetes_namespace"`
	GkeClusterConfig         []GkeClusterConfigState         `json:"gke_cluster_config"`
	KubernetesSoftwareConfig []KubernetesSoftwareConfigState `json:"kubernetes_software_config"`
}

type GkeClusterConfigState struct {
	GkeClusterTarget string                `json:"gke_cluster_target"`
	NodePoolTarget   []NodePoolTargetState `json:"node_pool_target"`
}

type NodePoolTargetState struct {
	NodePool       string                `json:"node_pool"`
	Roles          []string              `json:"roles"`
	NodePoolConfig []NodePoolConfigState `json:"node_pool_config"`
}

type NodePoolConfigState struct {
	Locations   []string           `json:"locations"`
	Autoscaling []AutoscalingState `json:"autoscaling"`
	Config      []ConfigState      `json:"config"`
}

type AutoscalingState struct {
	MaxNodeCount float64 `json:"max_node_count"`
	MinNodeCount float64 `json:"min_node_count"`
}

type ConfigState struct {
	LocalSsdCount  float64 `json:"local_ssd_count"`
	MachineType    string  `json:"machine_type"`
	MinCpuPlatform string  `json:"min_cpu_platform"`
	Preemptible    bool    `json:"preemptible"`
	Spot           bool    `json:"spot"`
}

type KubernetesSoftwareConfigState struct {
	ComponentVersion map[string]string `json:"component_version"`
	Properties       map[string]string `json:"properties"`
}
