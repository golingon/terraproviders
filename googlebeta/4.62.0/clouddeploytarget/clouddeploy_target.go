// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package clouddeploytarget

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AnthosCluster struct {
	// Membership: string, optional
	Membership terra.StringValue `hcl:"membership,attr"`
}

type ExecutionConfigs struct {
	// ArtifactStorage: string, optional
	ArtifactStorage terra.StringValue `hcl:"artifact_storage,attr"`
	// ExecutionTimeout: string, optional
	ExecutionTimeout terra.StringValue `hcl:"execution_timeout,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// Usages: list of string, required
	Usages terra.ListValue[terra.StringValue] `hcl:"usages,attr" validate:"required"`
	// WorkerPool: string, optional
	WorkerPool terra.StringValue `hcl:"worker_pool,attr"`
}

type Gke struct {
	// Cluster: string, optional
	Cluster terra.StringValue `hcl:"cluster,attr"`
	// InternalIp: bool, optional
	InternalIp terra.BoolValue `hcl:"internal_ip,attr"`
}

type MultiTarget struct {
	// TargetIds: list of string, required
	TargetIds terra.ListValue[terra.StringValue] `hcl:"target_ids,attr" validate:"required"`
}

type Run struct {
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AnthosClusterAttributes struct {
	ref terra.Reference
}

func (ac AnthosClusterAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AnthosClusterAttributes) InternalWithRef(ref terra.Reference) AnthosClusterAttributes {
	return AnthosClusterAttributes{ref: ref}
}

func (ac AnthosClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AnthosClusterAttributes) Membership() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("membership"))
}

type ExecutionConfigsAttributes struct {
	ref terra.Reference
}

func (ec ExecutionConfigsAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec ExecutionConfigsAttributes) InternalWithRef(ref terra.Reference) ExecutionConfigsAttributes {
	return ExecutionConfigsAttributes{ref: ref}
}

func (ec ExecutionConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec ExecutionConfigsAttributes) ArtifactStorage() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("artifact_storage"))
}

func (ec ExecutionConfigsAttributes) ExecutionTimeout() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("execution_timeout"))
}

func (ec ExecutionConfigsAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("service_account"))
}

func (ec ExecutionConfigsAttributes) Usages() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ec.ref.Append("usages"))
}

func (ec ExecutionConfigsAttributes) WorkerPool() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("worker_pool"))
}

type GkeAttributes struct {
	ref terra.Reference
}

func (g GkeAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GkeAttributes) InternalWithRef(ref terra.Reference) GkeAttributes {
	return GkeAttributes{ref: ref}
}

func (g GkeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GkeAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("cluster"))
}

func (g GkeAttributes) InternalIp() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("internal_ip"))
}

type MultiTargetAttributes struct {
	ref terra.Reference
}

func (mt MultiTargetAttributes) InternalRef() (terra.Reference, error) {
	return mt.ref, nil
}

func (mt MultiTargetAttributes) InternalWithRef(ref terra.Reference) MultiTargetAttributes {
	return MultiTargetAttributes{ref: ref}
}

func (mt MultiTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mt.ref.InternalTokens()
}

func (mt MultiTargetAttributes) TargetIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mt.ref.Append("target_ids"))
}

type RunAttributes struct {
	ref terra.Reference
}

func (r RunAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RunAttributes) InternalWithRef(ref terra.Reference) RunAttributes {
	return RunAttributes{ref: ref}
}

func (r RunAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RunAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("location"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AnthosClusterState struct {
	Membership string `json:"membership"`
}

type ExecutionConfigsState struct {
	ArtifactStorage  string   `json:"artifact_storage"`
	ExecutionTimeout string   `json:"execution_timeout"`
	ServiceAccount   string   `json:"service_account"`
	Usages           []string `json:"usages"`
	WorkerPool       string   `json:"worker_pool"`
}

type GkeState struct {
	Cluster    string `json:"cluster"`
	InternalIp bool   `json:"internal_ip"`
}

type MultiTargetState struct {
	TargetIds []string `json:"target_ids"`
}

type RunState struct {
	Location string `json:"location"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
