// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataformrepositoryreleaseconfig

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type RecentScheduledReleaseRecords struct {
	// ErrorStatus: min=0
	ErrorStatus []ErrorStatus `hcl:"error_status,block" validate:"min=0"`
}

type ErrorStatus struct{}

type CodeCompilationConfig struct {
	// AssertionSchema: string, optional
	AssertionSchema terra.StringValue `hcl:"assertion_schema,attr"`
	// DatabaseSuffix: string, optional
	DatabaseSuffix terra.StringValue `hcl:"database_suffix,attr"`
	// DefaultDatabase: string, optional
	DefaultDatabase terra.StringValue `hcl:"default_database,attr"`
	// DefaultLocation: string, optional
	DefaultLocation terra.StringValue `hcl:"default_location,attr"`
	// DefaultSchema: string, optional
	DefaultSchema terra.StringValue `hcl:"default_schema,attr"`
	// SchemaSuffix: string, optional
	SchemaSuffix terra.StringValue `hcl:"schema_suffix,attr"`
	// TablePrefix: string, optional
	TablePrefix terra.StringValue `hcl:"table_prefix,attr"`
	// Vars: map of string, optional
	Vars terra.MapValue[terra.StringValue] `hcl:"vars,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RecentScheduledReleaseRecordsAttributes struct {
	ref terra.Reference
}

func (rsrr RecentScheduledReleaseRecordsAttributes) InternalRef() (terra.Reference, error) {
	return rsrr.ref, nil
}

func (rsrr RecentScheduledReleaseRecordsAttributes) InternalWithRef(ref terra.Reference) RecentScheduledReleaseRecordsAttributes {
	return RecentScheduledReleaseRecordsAttributes{ref: ref}
}

func (rsrr RecentScheduledReleaseRecordsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rsrr.ref.InternalTokens()
}

func (rsrr RecentScheduledReleaseRecordsAttributes) CompilationResult() terra.StringValue {
	return terra.ReferenceAsString(rsrr.ref.Append("compilation_result"))
}

func (rsrr RecentScheduledReleaseRecordsAttributes) ReleaseTime() terra.StringValue {
	return terra.ReferenceAsString(rsrr.ref.Append("release_time"))
}

func (rsrr RecentScheduledReleaseRecordsAttributes) ErrorStatus() terra.ListValue[ErrorStatusAttributes] {
	return terra.ReferenceAsList[ErrorStatusAttributes](rsrr.ref.Append("error_status"))
}

type ErrorStatusAttributes struct {
	ref terra.Reference
}

func (es ErrorStatusAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es ErrorStatusAttributes) InternalWithRef(ref terra.Reference) ErrorStatusAttributes {
	return ErrorStatusAttributes{ref: ref}
}

func (es ErrorStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es ErrorStatusAttributes) Code() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("code"))
}

func (es ErrorStatusAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("message"))
}

type CodeCompilationConfigAttributes struct {
	ref terra.Reference
}

func (ccc CodeCompilationConfigAttributes) InternalRef() (terra.Reference, error) {
	return ccc.ref, nil
}

func (ccc CodeCompilationConfigAttributes) InternalWithRef(ref terra.Reference) CodeCompilationConfigAttributes {
	return CodeCompilationConfigAttributes{ref: ref}
}

func (ccc CodeCompilationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccc.ref.InternalTokens()
}

func (ccc CodeCompilationConfigAttributes) AssertionSchema() terra.StringValue {
	return terra.ReferenceAsString(ccc.ref.Append("assertion_schema"))
}

func (ccc CodeCompilationConfigAttributes) DatabaseSuffix() terra.StringValue {
	return terra.ReferenceAsString(ccc.ref.Append("database_suffix"))
}

func (ccc CodeCompilationConfigAttributes) DefaultDatabase() terra.StringValue {
	return terra.ReferenceAsString(ccc.ref.Append("default_database"))
}

func (ccc CodeCompilationConfigAttributes) DefaultLocation() terra.StringValue {
	return terra.ReferenceAsString(ccc.ref.Append("default_location"))
}

func (ccc CodeCompilationConfigAttributes) DefaultSchema() terra.StringValue {
	return terra.ReferenceAsString(ccc.ref.Append("default_schema"))
}

func (ccc CodeCompilationConfigAttributes) SchemaSuffix() terra.StringValue {
	return terra.ReferenceAsString(ccc.ref.Append("schema_suffix"))
}

func (ccc CodeCompilationConfigAttributes) TablePrefix() terra.StringValue {
	return terra.ReferenceAsString(ccc.ref.Append("table_prefix"))
}

func (ccc CodeCompilationConfigAttributes) Vars() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ccc.ref.Append("vars"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RecentScheduledReleaseRecordsState struct {
	CompilationResult string             `json:"compilation_result"`
	ReleaseTime       string             `json:"release_time"`
	ErrorStatus       []ErrorStatusState `json:"error_status"`
}

type ErrorStatusState struct {
	Code    float64 `json:"code"`
	Message string  `json:"message"`
}

type CodeCompilationConfigState struct {
	AssertionSchema string            `json:"assertion_schema"`
	DatabaseSuffix  string            `json:"database_suffix"`
	DefaultDatabase string            `json:"default_database"`
	DefaultLocation string            `json:"default_location"`
	DefaultSchema   string            `json:"default_schema"`
	SchemaSuffix    string            `json:"schema_suffix"`
	TablePrefix     string            `json:"table_prefix"`
	Vars            map[string]string `json:"vars"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
