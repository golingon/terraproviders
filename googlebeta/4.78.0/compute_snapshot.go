// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	computesnapshot "github.com/golingon/terraproviders/googlebeta/4.78.0/computesnapshot"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewComputeSnapshot creates a new instance of [ComputeSnapshot].
func NewComputeSnapshot(name string, args ComputeSnapshotArgs) *ComputeSnapshot {
	return &ComputeSnapshot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeSnapshot)(nil)

// ComputeSnapshot represents the Terraform resource google_compute_snapshot.
type ComputeSnapshot struct {
	Name      string
	Args      ComputeSnapshotArgs
	state     *computeSnapshotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ComputeSnapshot].
func (cs *ComputeSnapshot) Type() string {
	return "google_compute_snapshot"
}

// LocalName returns the local name for [ComputeSnapshot].
func (cs *ComputeSnapshot) LocalName() string {
	return cs.Name
}

// Configuration returns the configuration (args) for [ComputeSnapshot].
func (cs *ComputeSnapshot) Configuration() interface{} {
	return cs.Args
}

// DependOn is used for other resources to depend on [ComputeSnapshot].
func (cs *ComputeSnapshot) DependOn() terra.Reference {
	return terra.ReferenceResource(cs)
}

// Dependencies returns the list of resources [ComputeSnapshot] depends_on.
func (cs *ComputeSnapshot) Dependencies() terra.Dependencies {
	return cs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ComputeSnapshot].
func (cs *ComputeSnapshot) LifecycleManagement() *terra.Lifecycle {
	return cs.Lifecycle
}

// Attributes returns the attributes for [ComputeSnapshot].
func (cs *ComputeSnapshot) Attributes() computeSnapshotAttributes {
	return computeSnapshotAttributes{ref: terra.ReferenceResource(cs)}
}

// ImportState imports the given attribute values into [ComputeSnapshot]'s state.
func (cs *ComputeSnapshot) ImportState(av io.Reader) error {
	cs.state = &computeSnapshotState{}
	if err := json.NewDecoder(av).Decode(cs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cs.Type(), cs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ComputeSnapshot] has state.
func (cs *ComputeSnapshot) State() (*computeSnapshotState, bool) {
	return cs.state, cs.state != nil
}

// StateMust returns the state for [ComputeSnapshot]. Panics if the state is nil.
func (cs *ComputeSnapshot) StateMust() *computeSnapshotState {
	if cs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cs.Type(), cs.LocalName()))
	}
	return cs.state
}

// ComputeSnapshotArgs contains the configurations for google_compute_snapshot.
type ComputeSnapshotArgs struct {
	// ChainName: string, optional
	ChainName terra.StringValue `hcl:"chain_name,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SourceDisk: string, required
	SourceDisk terra.StringValue `hcl:"source_disk,attr" validate:"required"`
	// StorageLocations: list of string, optional
	StorageLocations terra.ListValue[terra.StringValue] `hcl:"storage_locations,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// SnapshotEncryptionKey: optional
	SnapshotEncryptionKey *computesnapshot.SnapshotEncryptionKey `hcl:"snapshot_encryption_key,block"`
	// SourceDiskEncryptionKey: optional
	SourceDiskEncryptionKey *computesnapshot.SourceDiskEncryptionKey `hcl:"source_disk_encryption_key,block"`
	// Timeouts: optional
	Timeouts *computesnapshot.Timeouts `hcl:"timeouts,block"`
}
type computeSnapshotAttributes struct {
	ref terra.Reference
}

// ChainName returns a reference to field chain_name of google_compute_snapshot.
func (cs computeSnapshotAttributes) ChainName() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("chain_name"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_snapshot.
func (cs computeSnapshotAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_snapshot.
func (cs computeSnapshotAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("description"))
}

// DiskSizeGb returns a reference to field disk_size_gb of google_compute_snapshot.
func (cs computeSnapshotAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(cs.ref.Append("disk_size_gb"))
}

// Id returns a reference to field id of google_compute_snapshot.
func (cs computeSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("id"))
}

// LabelFingerprint returns a reference to field label_fingerprint of google_compute_snapshot.
func (cs computeSnapshotAttributes) LabelFingerprint() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("label_fingerprint"))
}

// Labels returns a reference to field labels of google_compute_snapshot.
func (cs computeSnapshotAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cs.ref.Append("labels"))
}

// Licenses returns a reference to field licenses of google_compute_snapshot.
func (cs computeSnapshotAttributes) Licenses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cs.ref.Append("licenses"))
}

// Name returns a reference to field name of google_compute_snapshot.
func (cs computeSnapshotAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_snapshot.
func (cs computeSnapshotAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_compute_snapshot.
func (cs computeSnapshotAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("self_link"))
}

// SnapshotId returns a reference to field snapshot_id of google_compute_snapshot.
func (cs computeSnapshotAttributes) SnapshotId() terra.NumberValue {
	return terra.ReferenceAsNumber(cs.ref.Append("snapshot_id"))
}

// SourceDisk returns a reference to field source_disk of google_compute_snapshot.
func (cs computeSnapshotAttributes) SourceDisk() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("source_disk"))
}

// StorageBytes returns a reference to field storage_bytes of google_compute_snapshot.
func (cs computeSnapshotAttributes) StorageBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(cs.ref.Append("storage_bytes"))
}

// StorageLocations returns a reference to field storage_locations of google_compute_snapshot.
func (cs computeSnapshotAttributes) StorageLocations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cs.ref.Append("storage_locations"))
}

// Zone returns a reference to field zone of google_compute_snapshot.
func (cs computeSnapshotAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("zone"))
}

func (cs computeSnapshotAttributes) SnapshotEncryptionKey() terra.ListValue[computesnapshot.SnapshotEncryptionKeyAttributes] {
	return terra.ReferenceAsList[computesnapshot.SnapshotEncryptionKeyAttributes](cs.ref.Append("snapshot_encryption_key"))
}

func (cs computeSnapshotAttributes) SourceDiskEncryptionKey() terra.ListValue[computesnapshot.SourceDiskEncryptionKeyAttributes] {
	return terra.ReferenceAsList[computesnapshot.SourceDiskEncryptionKeyAttributes](cs.ref.Append("source_disk_encryption_key"))
}

func (cs computeSnapshotAttributes) Timeouts() computesnapshot.TimeoutsAttributes {
	return terra.ReferenceAsSingle[computesnapshot.TimeoutsAttributes](cs.ref.Append("timeouts"))
}

type computeSnapshotState struct {
	ChainName               string                                         `json:"chain_name"`
	CreationTimestamp       string                                         `json:"creation_timestamp"`
	Description             string                                         `json:"description"`
	DiskSizeGb              float64                                        `json:"disk_size_gb"`
	Id                      string                                         `json:"id"`
	LabelFingerprint        string                                         `json:"label_fingerprint"`
	Labels                  map[string]string                              `json:"labels"`
	Licenses                []string                                       `json:"licenses"`
	Name                    string                                         `json:"name"`
	Project                 string                                         `json:"project"`
	SelfLink                string                                         `json:"self_link"`
	SnapshotId              float64                                        `json:"snapshot_id"`
	SourceDisk              string                                         `json:"source_disk"`
	StorageBytes            float64                                        `json:"storage_bytes"`
	StorageLocations        []string                                       `json:"storage_locations"`
	Zone                    string                                         `json:"zone"`
	SnapshotEncryptionKey   []computesnapshot.SnapshotEncryptionKeyState   `json:"snapshot_encryption_key"`
	SourceDiskEncryptionKey []computesnapshot.SourceDiskEncryptionKeyState `json:"source_disk_encryption_key"`
	Timeouts                *computesnapshot.TimeoutsState                 `json:"timeouts"`
}
