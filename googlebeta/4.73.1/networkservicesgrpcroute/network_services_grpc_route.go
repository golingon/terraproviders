// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package networkservicesgrpcroute

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Rules struct {
	// Action: optional
	Action *Action `hcl:"action,block"`
	// Matches: min=0
	Matches []Matches `hcl:"matches,block" validate:"min=0"`
}

type Action struct {
	// Timeout: string, optional
	Timeout terra.StringValue `hcl:"timeout,attr"`
	// Destinations: min=0
	Destinations []Destinations `hcl:"destinations,block" validate:"min=0"`
	// FaultInjectionPolicy: optional
	FaultInjectionPolicy *FaultInjectionPolicy `hcl:"fault_injection_policy,block"`
	// RetryPolicy: optional
	RetryPolicy *RetryPolicy `hcl:"retry_policy,block"`
}

type Destinations struct {
	// ServiceName: string, optional
	ServiceName terra.StringValue `hcl:"service_name,attr"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type FaultInjectionPolicy struct {
	// Abort: optional
	Abort *Abort `hcl:"abort,block"`
	// Delay: optional
	Delay *Delay `hcl:"delay,block"`
}

type Abort struct {
	// HttpStatus: number, optional
	HttpStatus terra.NumberValue `hcl:"http_status,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type Delay struct {
	// FixedDelay: string, optional
	FixedDelay terra.StringValue `hcl:"fixed_delay,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type RetryPolicy struct {
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// RetryConditions: list of string, optional
	RetryConditions terra.ListValue[terra.StringValue] `hcl:"retry_conditions,attr"`
}

type Matches struct {
	// Headers: min=0
	Headers []Headers `hcl:"headers,block" validate:"min=0"`
	// Method: optional
	Method *Method `hcl:"method,block"`
}

type Headers struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Method struct {
	// CaseSensitive: bool, optional
	CaseSensitive terra.BoolValue `hcl:"case_sensitive,attr"`
	// GrpcMethod: string, required
	GrpcMethod terra.StringValue `hcl:"grpc_method,attr" validate:"required"`
	// GrpcService: string, required
	GrpcService terra.StringValue `hcl:"grpc_service,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RulesAttributes struct {
	ref terra.Reference
}

func (r RulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RulesAttributes) InternalWithRef(ref terra.Reference) RulesAttributes {
	return RulesAttributes{ref: ref}
}

func (r RulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RulesAttributes) Action() terra.ListValue[ActionAttributes] {
	return terra.ReferenceAsList[ActionAttributes](r.ref.Append("action"))
}

func (r RulesAttributes) Matches() terra.ListValue[MatchesAttributes] {
	return terra.ReferenceAsList[MatchesAttributes](r.ref.Append("matches"))
}

type ActionAttributes struct {
	ref terra.Reference
}

func (a ActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionAttributes) InternalWithRef(ref terra.Reference) ActionAttributes {
	return ActionAttributes{ref: ref}
}

func (a ActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionAttributes) Timeout() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("timeout"))
}

func (a ActionAttributes) Destinations() terra.ListValue[DestinationsAttributes] {
	return terra.ReferenceAsList[DestinationsAttributes](a.ref.Append("destinations"))
}

func (a ActionAttributes) FaultInjectionPolicy() terra.ListValue[FaultInjectionPolicyAttributes] {
	return terra.ReferenceAsList[FaultInjectionPolicyAttributes](a.ref.Append("fault_injection_policy"))
}

func (a ActionAttributes) RetryPolicy() terra.ListValue[RetryPolicyAttributes] {
	return terra.ReferenceAsList[RetryPolicyAttributes](a.ref.Append("retry_policy"))
}

type DestinationsAttributes struct {
	ref terra.Reference
}

func (d DestinationsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DestinationsAttributes) InternalWithRef(ref terra.Reference) DestinationsAttributes {
	return DestinationsAttributes{ref: ref}
}

func (d DestinationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DestinationsAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("service_name"))
}

func (d DestinationsAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("weight"))
}

type FaultInjectionPolicyAttributes struct {
	ref terra.Reference
}

func (fip FaultInjectionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return fip.ref, nil
}

func (fip FaultInjectionPolicyAttributes) InternalWithRef(ref terra.Reference) FaultInjectionPolicyAttributes {
	return FaultInjectionPolicyAttributes{ref: ref}
}

func (fip FaultInjectionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fip.ref.InternalTokens()
}

func (fip FaultInjectionPolicyAttributes) Abort() terra.ListValue[AbortAttributes] {
	return terra.ReferenceAsList[AbortAttributes](fip.ref.Append("abort"))
}

func (fip FaultInjectionPolicyAttributes) Delay() terra.ListValue[DelayAttributes] {
	return terra.ReferenceAsList[DelayAttributes](fip.ref.Append("delay"))
}

type AbortAttributes struct {
	ref terra.Reference
}

func (a AbortAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AbortAttributes) InternalWithRef(ref terra.Reference) AbortAttributes {
	return AbortAttributes{ref: ref}
}

func (a AbortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AbortAttributes) HttpStatus() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("http_status"))
}

func (a AbortAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("percentage"))
}

type DelayAttributes struct {
	ref terra.Reference
}

func (d DelayAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DelayAttributes) InternalWithRef(ref terra.Reference) DelayAttributes {
	return DelayAttributes{ref: ref}
}

func (d DelayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DelayAttributes) FixedDelay() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("fixed_delay"))
}

func (d DelayAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("percentage"))
}

type RetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp RetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RetryPolicyAttributes) InternalWithRef(ref terra.Reference) RetryPolicyAttributes {
	return RetryPolicyAttributes{ref: ref}
}

func (rp RetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RetryPolicyAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("num_retries"))
}

func (rp RetryPolicyAttributes) RetryConditions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rp.ref.Append("retry_conditions"))
}

type MatchesAttributes struct {
	ref terra.Reference
}

func (m MatchesAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MatchesAttributes) InternalWithRef(ref terra.Reference) MatchesAttributes {
	return MatchesAttributes{ref: ref}
}

func (m MatchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MatchesAttributes) Headers() terra.ListValue[HeadersAttributes] {
	return terra.ReferenceAsList[HeadersAttributes](m.ref.Append("headers"))
}

func (m MatchesAttributes) Method() terra.ListValue[MethodAttributes] {
	return terra.ReferenceAsList[MethodAttributes](m.ref.Append("method"))
}

type HeadersAttributes struct {
	ref terra.Reference
}

func (h HeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HeadersAttributes) InternalWithRef(ref terra.Reference) HeadersAttributes {
	return HeadersAttributes{ref: ref}
}

func (h HeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HeadersAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("key"))
}

func (h HeadersAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("type"))
}

func (h HeadersAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("value"))
}

type MethodAttributes struct {
	ref terra.Reference
}

func (m MethodAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MethodAttributes) InternalWithRef(ref terra.Reference) MethodAttributes {
	return MethodAttributes{ref: ref}
}

func (m MethodAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MethodAttributes) CaseSensitive() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("case_sensitive"))
}

func (m MethodAttributes) GrpcMethod() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("grpc_method"))
}

func (m MethodAttributes) GrpcService() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("grpc_service"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RulesState struct {
	Action  []ActionState  `json:"action"`
	Matches []MatchesState `json:"matches"`
}

type ActionState struct {
	Timeout              string                      `json:"timeout"`
	Destinations         []DestinationsState         `json:"destinations"`
	FaultInjectionPolicy []FaultInjectionPolicyState `json:"fault_injection_policy"`
	RetryPolicy          []RetryPolicyState          `json:"retry_policy"`
}

type DestinationsState struct {
	ServiceName string  `json:"service_name"`
	Weight      float64 `json:"weight"`
}

type FaultInjectionPolicyState struct {
	Abort []AbortState `json:"abort"`
	Delay []DelayState `json:"delay"`
}

type AbortState struct {
	HttpStatus float64 `json:"http_status"`
	Percentage float64 `json:"percentage"`
}

type DelayState struct {
	FixedDelay string  `json:"fixed_delay"`
	Percentage float64 `json:"percentage"`
}

type RetryPolicyState struct {
	NumRetries      float64  `json:"num_retries"`
	RetryConditions []string `json:"retry_conditions"`
}

type MatchesState struct {
	Headers []HeadersState `json:"headers"`
	Method  []MethodState  `json:"method"`
}

type HeadersState struct {
	Key   string `json:"key"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type MethodState struct {
	CaseSensitive bool   `json:"case_sensitive"`
	GrpcMethod    string `json:"grpc_method"`
	GrpcService   string `json:"grpc_service"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
