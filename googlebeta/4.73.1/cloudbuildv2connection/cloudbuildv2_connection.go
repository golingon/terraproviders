// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package cloudbuildv2connection

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type InstallationState struct{}

type GithubConfig struct {
	// AppInstallationId: number, optional
	AppInstallationId terra.NumberValue `hcl:"app_installation_id,attr"`
	// AuthorizerCredential: optional
	AuthorizerCredential *AuthorizerCredential `hcl:"authorizer_credential,block"`
}

type AuthorizerCredential struct {
	// OauthTokenSecretVersion: string, optional
	OauthTokenSecretVersion terra.StringValue `hcl:"oauth_token_secret_version,attr"`
}

type GithubEnterpriseConfig struct {
	// AppId: number, optional
	AppId terra.NumberValue `hcl:"app_id,attr"`
	// AppInstallationId: number, optional
	AppInstallationId terra.NumberValue `hcl:"app_installation_id,attr"`
	// AppSlug: string, optional
	AppSlug terra.StringValue `hcl:"app_slug,attr"`
	// HostUri: string, required
	HostUri terra.StringValue `hcl:"host_uri,attr" validate:"required"`
	// PrivateKeySecretVersion: string, optional
	PrivateKeySecretVersion terra.StringValue `hcl:"private_key_secret_version,attr"`
	// SslCa: string, optional
	SslCa terra.StringValue `hcl:"ssl_ca,attr"`
	// WebhookSecretSecretVersion: string, optional
	WebhookSecretSecretVersion terra.StringValue `hcl:"webhook_secret_secret_version,attr"`
	// ServiceDirectoryConfig: optional
	ServiceDirectoryConfig *ServiceDirectoryConfig `hcl:"service_directory_config,block"`
}

type ServiceDirectoryConfig struct {
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type InstallationStateAttributes struct {
	ref terra.Reference
}

func (is InstallationStateAttributes) InternalRef() (terra.Reference, error) {
	return is.ref, nil
}

func (is InstallationStateAttributes) InternalWithRef(ref terra.Reference) InstallationStateAttributes {
	return InstallationStateAttributes{ref: ref}
}

func (is InstallationStateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return is.ref.InternalTokens()
}

func (is InstallationStateAttributes) ActionUri() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("action_uri"))
}

func (is InstallationStateAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("message"))
}

func (is InstallationStateAttributes) Stage() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("stage"))
}

type GithubConfigAttributes struct {
	ref terra.Reference
}

func (gc GithubConfigAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc GithubConfigAttributes) InternalWithRef(ref terra.Reference) GithubConfigAttributes {
	return GithubConfigAttributes{ref: ref}
}

func (gc GithubConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc GithubConfigAttributes) AppInstallationId() terra.NumberValue {
	return terra.ReferenceAsNumber(gc.ref.Append("app_installation_id"))
}

func (gc GithubConfigAttributes) AuthorizerCredential() terra.ListValue[AuthorizerCredentialAttributes] {
	return terra.ReferenceAsList[AuthorizerCredentialAttributes](gc.ref.Append("authorizer_credential"))
}

type AuthorizerCredentialAttributes struct {
	ref terra.Reference
}

func (ac AuthorizerCredentialAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AuthorizerCredentialAttributes) InternalWithRef(ref terra.Reference) AuthorizerCredentialAttributes {
	return AuthorizerCredentialAttributes{ref: ref}
}

func (ac AuthorizerCredentialAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AuthorizerCredentialAttributes) OauthTokenSecretVersion() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("oauth_token_secret_version"))
}

func (ac AuthorizerCredentialAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("username"))
}

type GithubEnterpriseConfigAttributes struct {
	ref terra.Reference
}

func (gec GithubEnterpriseConfigAttributes) InternalRef() (terra.Reference, error) {
	return gec.ref, nil
}

func (gec GithubEnterpriseConfigAttributes) InternalWithRef(ref terra.Reference) GithubEnterpriseConfigAttributes {
	return GithubEnterpriseConfigAttributes{ref: ref}
}

func (gec GithubEnterpriseConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gec.ref.InternalTokens()
}

func (gec GithubEnterpriseConfigAttributes) AppId() terra.NumberValue {
	return terra.ReferenceAsNumber(gec.ref.Append("app_id"))
}

func (gec GithubEnterpriseConfigAttributes) AppInstallationId() terra.NumberValue {
	return terra.ReferenceAsNumber(gec.ref.Append("app_installation_id"))
}

func (gec GithubEnterpriseConfigAttributes) AppSlug() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("app_slug"))
}

func (gec GithubEnterpriseConfigAttributes) HostUri() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("host_uri"))
}

func (gec GithubEnterpriseConfigAttributes) PrivateKeySecretVersion() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("private_key_secret_version"))
}

func (gec GithubEnterpriseConfigAttributes) SslCa() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("ssl_ca"))
}

func (gec GithubEnterpriseConfigAttributes) WebhookSecretSecretVersion() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("webhook_secret_secret_version"))
}

func (gec GithubEnterpriseConfigAttributes) ServiceDirectoryConfig() terra.ListValue[ServiceDirectoryConfigAttributes] {
	return terra.ReferenceAsList[ServiceDirectoryConfigAttributes](gec.ref.Append("service_directory_config"))
}

type ServiceDirectoryConfigAttributes struct {
	ref terra.Reference
}

func (sdc ServiceDirectoryConfigAttributes) InternalRef() (terra.Reference, error) {
	return sdc.ref, nil
}

func (sdc ServiceDirectoryConfigAttributes) InternalWithRef(ref terra.Reference) ServiceDirectoryConfigAttributes {
	return ServiceDirectoryConfigAttributes{ref: ref}
}

func (sdc ServiceDirectoryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sdc.ref.InternalTokens()
}

func (sdc ServiceDirectoryConfigAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(sdc.ref.Append("service"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type InstallationStateState struct {
	ActionUri string `json:"action_uri"`
	Message   string `json:"message"`
	Stage     string `json:"stage"`
}

type GithubConfigState struct {
	AppInstallationId    float64                     `json:"app_installation_id"`
	AuthorizerCredential []AuthorizerCredentialState `json:"authorizer_credential"`
}

type AuthorizerCredentialState struct {
	OauthTokenSecretVersion string `json:"oauth_token_secret_version"`
	Username                string `json:"username"`
}

type GithubEnterpriseConfigState struct {
	AppId                      float64                       `json:"app_id"`
	AppInstallationId          float64                       `json:"app_installation_id"`
	AppSlug                    string                        `json:"app_slug"`
	HostUri                    string                        `json:"host_uri"`
	PrivateKeySecretVersion    string                        `json:"private_key_secret_version"`
	SslCa                      string                        `json:"ssl_ca"`
	WebhookSecretSecretVersion string                        `json:"webhook_secret_secret_version"`
	ServiceDirectoryConfig     []ServiceDirectoryConfigState `json:"service_directory_config"`
}

type ServiceDirectoryConfigState struct {
	Service string `json:"service"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
