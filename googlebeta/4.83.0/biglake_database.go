// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	biglakedatabase "github.com/golingon/terraproviders/googlebeta/4.83.0/biglakedatabase"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewBiglakeDatabase creates a new instance of [BiglakeDatabase].
func NewBiglakeDatabase(name string, args BiglakeDatabaseArgs) *BiglakeDatabase {
	return &BiglakeDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BiglakeDatabase)(nil)

// BiglakeDatabase represents the Terraform resource google_biglake_database.
type BiglakeDatabase struct {
	Name      string
	Args      BiglakeDatabaseArgs
	state     *biglakeDatabaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [BiglakeDatabase].
func (bd *BiglakeDatabase) Type() string {
	return "google_biglake_database"
}

// LocalName returns the local name for [BiglakeDatabase].
func (bd *BiglakeDatabase) LocalName() string {
	return bd.Name
}

// Configuration returns the configuration (args) for [BiglakeDatabase].
func (bd *BiglakeDatabase) Configuration() interface{} {
	return bd.Args
}

// DependOn is used for other resources to depend on [BiglakeDatabase].
func (bd *BiglakeDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(bd)
}

// Dependencies returns the list of resources [BiglakeDatabase] depends_on.
func (bd *BiglakeDatabase) Dependencies() terra.Dependencies {
	return bd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [BiglakeDatabase].
func (bd *BiglakeDatabase) LifecycleManagement() *terra.Lifecycle {
	return bd.Lifecycle
}

// Attributes returns the attributes for [BiglakeDatabase].
func (bd *BiglakeDatabase) Attributes() biglakeDatabaseAttributes {
	return biglakeDatabaseAttributes{ref: terra.ReferenceResource(bd)}
}

// ImportState imports the given attribute values into [BiglakeDatabase]'s state.
func (bd *BiglakeDatabase) ImportState(av io.Reader) error {
	bd.state = &biglakeDatabaseState{}
	if err := json.NewDecoder(av).Decode(bd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bd.Type(), bd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [BiglakeDatabase] has state.
func (bd *BiglakeDatabase) State() (*biglakeDatabaseState, bool) {
	return bd.state, bd.state != nil
}

// StateMust returns the state for [BiglakeDatabase]. Panics if the state is nil.
func (bd *BiglakeDatabase) StateMust() *biglakeDatabaseState {
	if bd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bd.Type(), bd.LocalName()))
	}
	return bd.state
}

// BiglakeDatabaseArgs contains the configurations for google_biglake_database.
type BiglakeDatabaseArgs struct {
	// Catalog: string, required
	Catalog terra.StringValue `hcl:"catalog,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// HiveOptions: required
	HiveOptions *biglakedatabase.HiveOptions `hcl:"hive_options,block" validate:"required"`
	// Timeouts: optional
	Timeouts *biglakedatabase.Timeouts `hcl:"timeouts,block"`
}
type biglakeDatabaseAttributes struct {
	ref terra.Reference
}

// Catalog returns a reference to field catalog of google_biglake_database.
func (bd biglakeDatabaseAttributes) Catalog() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("catalog"))
}

// CreateTime returns a reference to field create_time of google_biglake_database.
func (bd biglakeDatabaseAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_biglake_database.
func (bd biglakeDatabaseAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("delete_time"))
}

// ExpireTime returns a reference to field expire_time of google_biglake_database.
func (bd biglakeDatabaseAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("expire_time"))
}

// Id returns a reference to field id of google_biglake_database.
func (bd biglakeDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("id"))
}

// Name returns a reference to field name of google_biglake_database.
func (bd biglakeDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("name"))
}

// Type returns a reference to field type of google_biglake_database.
func (bd biglakeDatabaseAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("type"))
}

// UpdateTime returns a reference to field update_time of google_biglake_database.
func (bd biglakeDatabaseAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("update_time"))
}

func (bd biglakeDatabaseAttributes) HiveOptions() terra.ListValue[biglakedatabase.HiveOptionsAttributes] {
	return terra.ReferenceAsList[biglakedatabase.HiveOptionsAttributes](bd.ref.Append("hive_options"))
}

func (bd biglakeDatabaseAttributes) Timeouts() biglakedatabase.TimeoutsAttributes {
	return terra.ReferenceAsSingle[biglakedatabase.TimeoutsAttributes](bd.ref.Append("timeouts"))
}

type biglakeDatabaseState struct {
	Catalog     string                             `json:"catalog"`
	CreateTime  string                             `json:"create_time"`
	DeleteTime  string                             `json:"delete_time"`
	ExpireTime  string                             `json:"expire_time"`
	Id          string                             `json:"id"`
	Name        string                             `json:"name"`
	Type        string                             `json:"type"`
	UpdateTime  string                             `json:"update_time"`
	HiveOptions []biglakedatabase.HiveOptionsState `json:"hive_options"`
	Timeouts    *biglakedatabase.TimeoutsState     `json:"timeouts"`
}
