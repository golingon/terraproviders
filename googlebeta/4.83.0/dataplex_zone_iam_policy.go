// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDataplexZoneIamPolicy creates a new instance of [DataplexZoneIamPolicy].
func NewDataplexZoneIamPolicy(name string, args DataplexZoneIamPolicyArgs) *DataplexZoneIamPolicy {
	return &DataplexZoneIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataplexZoneIamPolicy)(nil)

// DataplexZoneIamPolicy represents the Terraform resource google_dataplex_zone_iam_policy.
type DataplexZoneIamPolicy struct {
	Name      string
	Args      DataplexZoneIamPolicyArgs
	state     *dataplexZoneIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataplexZoneIamPolicy].
func (dzip *DataplexZoneIamPolicy) Type() string {
	return "google_dataplex_zone_iam_policy"
}

// LocalName returns the local name for [DataplexZoneIamPolicy].
func (dzip *DataplexZoneIamPolicy) LocalName() string {
	return dzip.Name
}

// Configuration returns the configuration (args) for [DataplexZoneIamPolicy].
func (dzip *DataplexZoneIamPolicy) Configuration() interface{} {
	return dzip.Args
}

// DependOn is used for other resources to depend on [DataplexZoneIamPolicy].
func (dzip *DataplexZoneIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(dzip)
}

// Dependencies returns the list of resources [DataplexZoneIamPolicy] depends_on.
func (dzip *DataplexZoneIamPolicy) Dependencies() terra.Dependencies {
	return dzip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataplexZoneIamPolicy].
func (dzip *DataplexZoneIamPolicy) LifecycleManagement() *terra.Lifecycle {
	return dzip.Lifecycle
}

// Attributes returns the attributes for [DataplexZoneIamPolicy].
func (dzip *DataplexZoneIamPolicy) Attributes() dataplexZoneIamPolicyAttributes {
	return dataplexZoneIamPolicyAttributes{ref: terra.ReferenceResource(dzip)}
}

// ImportState imports the given attribute values into [DataplexZoneIamPolicy]'s state.
func (dzip *DataplexZoneIamPolicy) ImportState(av io.Reader) error {
	dzip.state = &dataplexZoneIamPolicyState{}
	if err := json.NewDecoder(av).Decode(dzip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dzip.Type(), dzip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataplexZoneIamPolicy] has state.
func (dzip *DataplexZoneIamPolicy) State() (*dataplexZoneIamPolicyState, bool) {
	return dzip.state, dzip.state != nil
}

// StateMust returns the state for [DataplexZoneIamPolicy]. Panics if the state is nil.
func (dzip *DataplexZoneIamPolicy) StateMust() *dataplexZoneIamPolicyState {
	if dzip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dzip.Type(), dzip.LocalName()))
	}
	return dzip.state
}

// DataplexZoneIamPolicyArgs contains the configurations for google_dataplex_zone_iam_policy.
type DataplexZoneIamPolicyArgs struct {
	// DataplexZone: string, required
	DataplexZone terra.StringValue `hcl:"dataplex_zone,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Lake: string, required
	Lake terra.StringValue `hcl:"lake,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}
type dataplexZoneIamPolicyAttributes struct {
	ref terra.Reference
}

// DataplexZone returns a reference to field dataplex_zone of google_dataplex_zone_iam_policy.
func (dzip dataplexZoneIamPolicyAttributes) DataplexZone() terra.StringValue {
	return terra.ReferenceAsString(dzip.ref.Append("dataplex_zone"))
}

// Etag returns a reference to field etag of google_dataplex_zone_iam_policy.
func (dzip dataplexZoneIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(dzip.ref.Append("etag"))
}

// Id returns a reference to field id of google_dataplex_zone_iam_policy.
func (dzip dataplexZoneIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dzip.ref.Append("id"))
}

// Lake returns a reference to field lake of google_dataplex_zone_iam_policy.
func (dzip dataplexZoneIamPolicyAttributes) Lake() terra.StringValue {
	return terra.ReferenceAsString(dzip.ref.Append("lake"))
}

// Location returns a reference to field location of google_dataplex_zone_iam_policy.
func (dzip dataplexZoneIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(dzip.ref.Append("location"))
}

// PolicyData returns a reference to field policy_data of google_dataplex_zone_iam_policy.
func (dzip dataplexZoneIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(dzip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_dataplex_zone_iam_policy.
func (dzip dataplexZoneIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(dzip.ref.Append("project"))
}

type dataplexZoneIamPolicyState struct {
	DataplexZone string `json:"dataplex_zone"`
	Etag         string `json:"etag"`
	Id           string `json:"id"`
	Lake         string `json:"lake"`
	Location     string `json:"location"`
	PolicyData   string `json:"policy_data"`
	Project      string `json:"project"`
}
