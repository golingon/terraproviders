// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dialogflowcxtestcase

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type LastTestResult struct {
	// ConversationTurns: min=0
	ConversationTurns []ConversationTurns `hcl:"conversation_turns,block" validate:"min=0"`
}

type ConversationTurns struct {
	// ConversationTurnsUserInput: min=0
	UserInput []ConversationTurnsUserInput `hcl:"user_input,block" validate:"min=0"`
	// ConversationTurnsVirtualAgentOutput: min=0
	VirtualAgentOutput []ConversationTurnsVirtualAgentOutput `hcl:"virtual_agent_output,block" validate:"min=0"`
}

type ConversationTurnsUserInput struct {
	// ConversationTurnsUserInputInput: min=0
	Input []ConversationTurnsUserInputInput `hcl:"input,block" validate:"min=0"`
}

type ConversationTurnsUserInputInput struct {
	// ConversationTurnsUserInputInputDtmf: min=0
	Dtmf []ConversationTurnsUserInputInputDtmf `hcl:"dtmf,block" validate:"min=0"`
	// ConversationTurnsUserInputInputEvent: min=0
	Event []ConversationTurnsUserInputInputEvent `hcl:"event,block" validate:"min=0"`
	// ConversationTurnsUserInputInputText: min=0
	Text []ConversationTurnsUserInputInputText `hcl:"text,block" validate:"min=0"`
}

type ConversationTurnsUserInputInputDtmf struct{}

type ConversationTurnsUserInputInputEvent struct{}

type ConversationTurnsUserInputInputText struct{}

type ConversationTurnsVirtualAgentOutput struct {
	// ConversationTurnsVirtualAgentOutputCurrentPage: min=0
	CurrentPage []ConversationTurnsVirtualAgentOutputCurrentPage `hcl:"current_page,block" validate:"min=0"`
	// Differences: min=0
	Differences []Differences `hcl:"differences,block" validate:"min=0"`
	// Status: min=0
	Status []Status `hcl:"status,block" validate:"min=0"`
	// ConversationTurnsVirtualAgentOutputTextResponses: min=0
	TextResponses []ConversationTurnsVirtualAgentOutputTextResponses `hcl:"text_responses,block" validate:"min=0"`
	// ConversationTurnsVirtualAgentOutputTriggeredIntent: min=0
	TriggeredIntent []ConversationTurnsVirtualAgentOutputTriggeredIntent `hcl:"triggered_intent,block" validate:"min=0"`
}

type ConversationTurnsVirtualAgentOutputCurrentPage struct{}

type Differences struct{}

type Status struct{}

type ConversationTurnsVirtualAgentOutputTextResponses struct{}

type ConversationTurnsVirtualAgentOutputTriggeredIntent struct{}

type TestCaseConversationTurns struct {
	// TestCaseConversationTurnsUserInput: optional
	UserInput *TestCaseConversationTurnsUserInput `hcl:"user_input,block"`
	// TestCaseConversationTurnsVirtualAgentOutput: optional
	VirtualAgentOutput *TestCaseConversationTurnsVirtualAgentOutput `hcl:"virtual_agent_output,block"`
}

type TestCaseConversationTurnsUserInput struct {
	// EnableSentimentAnalysis: bool, optional
	EnableSentimentAnalysis terra.BoolValue `hcl:"enable_sentiment_analysis,attr"`
	// InjectedParameters: string, optional
	InjectedParameters terra.StringValue `hcl:"injected_parameters,attr"`
	// IsWebhookEnabled: bool, optional
	IsWebhookEnabled terra.BoolValue `hcl:"is_webhook_enabled,attr"`
	// TestCaseConversationTurnsUserInputInput: optional
	Input *TestCaseConversationTurnsUserInputInput `hcl:"input,block"`
}

type TestCaseConversationTurnsUserInputInput struct {
	// LanguageCode: string, optional
	LanguageCode terra.StringValue `hcl:"language_code,attr"`
	// TestCaseConversationTurnsUserInputInputDtmf: optional
	Dtmf *TestCaseConversationTurnsUserInputInputDtmf `hcl:"dtmf,block"`
	// TestCaseConversationTurnsUserInputInputEvent: optional
	Event *TestCaseConversationTurnsUserInputInputEvent `hcl:"event,block"`
	// TestCaseConversationTurnsUserInputInputText: optional
	Text *TestCaseConversationTurnsUserInputInputText `hcl:"text,block"`
}

type TestCaseConversationTurnsUserInputInputDtmf struct {
	// Digits: string, optional
	Digits terra.StringValue `hcl:"digits,attr"`
	// FinishDigit: string, optional
	FinishDigit terra.StringValue `hcl:"finish_digit,attr"`
}

type TestCaseConversationTurnsUserInputInputEvent struct {
	// Event: string, required
	Event terra.StringValue `hcl:"event,attr" validate:"required"`
}

type TestCaseConversationTurnsUserInputInputText struct {
	// Text: string, required
	Text terra.StringValue `hcl:"text,attr" validate:"required"`
}

type TestCaseConversationTurnsVirtualAgentOutput struct {
	// SessionParameters: string, optional
	SessionParameters terra.StringValue `hcl:"session_parameters,attr"`
	// TestCaseConversationTurnsVirtualAgentOutputCurrentPage: optional
	CurrentPage *TestCaseConversationTurnsVirtualAgentOutputCurrentPage `hcl:"current_page,block"`
	// TestCaseConversationTurnsVirtualAgentOutputTextResponses: min=0
	TextResponses []TestCaseConversationTurnsVirtualAgentOutputTextResponses `hcl:"text_responses,block" validate:"min=0"`
	// TestCaseConversationTurnsVirtualAgentOutputTriggeredIntent: optional
	TriggeredIntent *TestCaseConversationTurnsVirtualAgentOutputTriggeredIntent `hcl:"triggered_intent,block"`
}

type TestCaseConversationTurnsVirtualAgentOutputCurrentPage struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type TestCaseConversationTurnsVirtualAgentOutputTextResponses struct {
	// Text: list of string, optional
	Text terra.ListValue[terra.StringValue] `hcl:"text,attr"`
}

type TestCaseConversationTurnsVirtualAgentOutputTriggeredIntent struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type TestConfig struct {
	// Flow: string, optional
	Flow terra.StringValue `hcl:"flow,attr"`
	// Page: string, optional
	Page terra.StringValue `hcl:"page,attr"`
	// TrackingParameters: list of string, optional
	TrackingParameters terra.ListValue[terra.StringValue] `hcl:"tracking_parameters,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type LastTestResultAttributes struct {
	ref terra.Reference
}

func (ltr LastTestResultAttributes) InternalRef() (terra.Reference, error) {
	return ltr.ref, nil
}

func (ltr LastTestResultAttributes) InternalWithRef(ref terra.Reference) LastTestResultAttributes {
	return LastTestResultAttributes{ref: ref}
}

func (ltr LastTestResultAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ltr.ref.InternalTokens()
}

func (ltr LastTestResultAttributes) Environment() terra.StringValue {
	return terra.ReferenceAsString(ltr.ref.Append("environment"))
}

func (ltr LastTestResultAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ltr.ref.Append("name"))
}

func (ltr LastTestResultAttributes) TestResult() terra.StringValue {
	return terra.ReferenceAsString(ltr.ref.Append("test_result"))
}

func (ltr LastTestResultAttributes) TestTime() terra.StringValue {
	return terra.ReferenceAsString(ltr.ref.Append("test_time"))
}

func (ltr LastTestResultAttributes) ConversationTurns() terra.ListValue[ConversationTurnsAttributes] {
	return terra.ReferenceAsList[ConversationTurnsAttributes](ltr.ref.Append("conversation_turns"))
}

type ConversationTurnsAttributes struct {
	ref terra.Reference
}

func (ct ConversationTurnsAttributes) InternalRef() (terra.Reference, error) {
	return ct.ref, nil
}

func (ct ConversationTurnsAttributes) InternalWithRef(ref terra.Reference) ConversationTurnsAttributes {
	return ConversationTurnsAttributes{ref: ref}
}

func (ct ConversationTurnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ct.ref.InternalTokens()
}

func (ct ConversationTurnsAttributes) UserInput() terra.ListValue[ConversationTurnsUserInputAttributes] {
	return terra.ReferenceAsList[ConversationTurnsUserInputAttributes](ct.ref.Append("user_input"))
}

func (ct ConversationTurnsAttributes) VirtualAgentOutput() terra.ListValue[ConversationTurnsVirtualAgentOutputAttributes] {
	return terra.ReferenceAsList[ConversationTurnsVirtualAgentOutputAttributes](ct.ref.Append("virtual_agent_output"))
}

type ConversationTurnsUserInputAttributes struct {
	ref terra.Reference
}

func (ui ConversationTurnsUserInputAttributes) InternalRef() (terra.Reference, error) {
	return ui.ref, nil
}

func (ui ConversationTurnsUserInputAttributes) InternalWithRef(ref terra.Reference) ConversationTurnsUserInputAttributes {
	return ConversationTurnsUserInputAttributes{ref: ref}
}

func (ui ConversationTurnsUserInputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ui.ref.InternalTokens()
}

func (ui ConversationTurnsUserInputAttributes) EnableSentimentAnalysis() terra.BoolValue {
	return terra.ReferenceAsBool(ui.ref.Append("enable_sentiment_analysis"))
}

func (ui ConversationTurnsUserInputAttributes) InjectedParameters() terra.StringValue {
	return terra.ReferenceAsString(ui.ref.Append("injected_parameters"))
}

func (ui ConversationTurnsUserInputAttributes) IsWebhookEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ui.ref.Append("is_webhook_enabled"))
}

func (ui ConversationTurnsUserInputAttributes) Input() terra.ListValue[ConversationTurnsUserInputInputAttributes] {
	return terra.ReferenceAsList[ConversationTurnsUserInputInputAttributes](ui.ref.Append("input"))
}

type ConversationTurnsUserInputInputAttributes struct {
	ref terra.Reference
}

func (i ConversationTurnsUserInputInputAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i ConversationTurnsUserInputInputAttributes) InternalWithRef(ref terra.Reference) ConversationTurnsUserInputInputAttributes {
	return ConversationTurnsUserInputInputAttributes{ref: ref}
}

func (i ConversationTurnsUserInputInputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i ConversationTurnsUserInputInputAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("language_code"))
}

func (i ConversationTurnsUserInputInputAttributes) Dtmf() terra.ListValue[ConversationTurnsUserInputInputDtmfAttributes] {
	return terra.ReferenceAsList[ConversationTurnsUserInputInputDtmfAttributes](i.ref.Append("dtmf"))
}

func (i ConversationTurnsUserInputInputAttributes) Event() terra.ListValue[ConversationTurnsUserInputInputEventAttributes] {
	return terra.ReferenceAsList[ConversationTurnsUserInputInputEventAttributes](i.ref.Append("event"))
}

func (i ConversationTurnsUserInputInputAttributes) Text() terra.ListValue[ConversationTurnsUserInputInputTextAttributes] {
	return terra.ReferenceAsList[ConversationTurnsUserInputInputTextAttributes](i.ref.Append("text"))
}

type ConversationTurnsUserInputInputDtmfAttributes struct {
	ref terra.Reference
}

func (d ConversationTurnsUserInputInputDtmfAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ConversationTurnsUserInputInputDtmfAttributes) InternalWithRef(ref terra.Reference) ConversationTurnsUserInputInputDtmfAttributes {
	return ConversationTurnsUserInputInputDtmfAttributes{ref: ref}
}

func (d ConversationTurnsUserInputInputDtmfAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ConversationTurnsUserInputInputDtmfAttributes) Digits() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("digits"))
}

func (d ConversationTurnsUserInputInputDtmfAttributes) FinishDigit() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("finish_digit"))
}

type ConversationTurnsUserInputInputEventAttributes struct {
	ref terra.Reference
}

func (e ConversationTurnsUserInputInputEventAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ConversationTurnsUserInputInputEventAttributes) InternalWithRef(ref terra.Reference) ConversationTurnsUserInputInputEventAttributes {
	return ConversationTurnsUserInputInputEventAttributes{ref: ref}
}

func (e ConversationTurnsUserInputInputEventAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ConversationTurnsUserInputInputEventAttributes) Event() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("event"))
}

type ConversationTurnsUserInputInputTextAttributes struct {
	ref terra.Reference
}

func (t ConversationTurnsUserInputInputTextAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ConversationTurnsUserInputInputTextAttributes) InternalWithRef(ref terra.Reference) ConversationTurnsUserInputInputTextAttributes {
	return ConversationTurnsUserInputInputTextAttributes{ref: ref}
}

func (t ConversationTurnsUserInputInputTextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ConversationTurnsUserInputInputTextAttributes) Text() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("text"))
}

type ConversationTurnsVirtualAgentOutputAttributes struct {
	ref terra.Reference
}

func (vao ConversationTurnsVirtualAgentOutputAttributes) InternalRef() (terra.Reference, error) {
	return vao.ref, nil
}

func (vao ConversationTurnsVirtualAgentOutputAttributes) InternalWithRef(ref terra.Reference) ConversationTurnsVirtualAgentOutputAttributes {
	return ConversationTurnsVirtualAgentOutputAttributes{ref: ref}
}

func (vao ConversationTurnsVirtualAgentOutputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vao.ref.InternalTokens()
}

func (vao ConversationTurnsVirtualAgentOutputAttributes) SessionParameters() terra.StringValue {
	return terra.ReferenceAsString(vao.ref.Append("session_parameters"))
}

func (vao ConversationTurnsVirtualAgentOutputAttributes) CurrentPage() terra.ListValue[ConversationTurnsVirtualAgentOutputCurrentPageAttributes] {
	return terra.ReferenceAsList[ConversationTurnsVirtualAgentOutputCurrentPageAttributes](vao.ref.Append("current_page"))
}

func (vao ConversationTurnsVirtualAgentOutputAttributes) Differences() terra.ListValue[DifferencesAttributes] {
	return terra.ReferenceAsList[DifferencesAttributes](vao.ref.Append("differences"))
}

func (vao ConversationTurnsVirtualAgentOutputAttributes) Status() terra.ListValue[StatusAttributes] {
	return terra.ReferenceAsList[StatusAttributes](vao.ref.Append("status"))
}

func (vao ConversationTurnsVirtualAgentOutputAttributes) TextResponses() terra.ListValue[ConversationTurnsVirtualAgentOutputTextResponsesAttributes] {
	return terra.ReferenceAsList[ConversationTurnsVirtualAgentOutputTextResponsesAttributes](vao.ref.Append("text_responses"))
}

func (vao ConversationTurnsVirtualAgentOutputAttributes) TriggeredIntent() terra.ListValue[ConversationTurnsVirtualAgentOutputTriggeredIntentAttributes] {
	return terra.ReferenceAsList[ConversationTurnsVirtualAgentOutputTriggeredIntentAttributes](vao.ref.Append("triggered_intent"))
}

type ConversationTurnsVirtualAgentOutputCurrentPageAttributes struct {
	ref terra.Reference
}

func (cp ConversationTurnsVirtualAgentOutputCurrentPageAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp ConversationTurnsVirtualAgentOutputCurrentPageAttributes) InternalWithRef(ref terra.Reference) ConversationTurnsVirtualAgentOutputCurrentPageAttributes {
	return ConversationTurnsVirtualAgentOutputCurrentPageAttributes{ref: ref}
}

func (cp ConversationTurnsVirtualAgentOutputCurrentPageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp ConversationTurnsVirtualAgentOutputCurrentPageAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("display_name"))
}

func (cp ConversationTurnsVirtualAgentOutputCurrentPageAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("name"))
}

type DifferencesAttributes struct {
	ref terra.Reference
}

func (d DifferencesAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DifferencesAttributes) InternalWithRef(ref terra.Reference) DifferencesAttributes {
	return DifferencesAttributes{ref: ref}
}

func (d DifferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DifferencesAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("description"))
}

func (d DifferencesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("type"))
}

type StatusAttributes struct {
	ref terra.Reference
}

func (s StatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StatusAttributes) InternalWithRef(ref terra.Reference) StatusAttributes {
	return StatusAttributes{ref: ref}
}

func (s StatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StatusAttributes) Code() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("code"))
}

func (s StatusAttributes) Details() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("details"))
}

func (s StatusAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("message"))
}

type ConversationTurnsVirtualAgentOutputTextResponsesAttributes struct {
	ref terra.Reference
}

func (tr ConversationTurnsVirtualAgentOutputTextResponsesAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr ConversationTurnsVirtualAgentOutputTextResponsesAttributes) InternalWithRef(ref terra.Reference) ConversationTurnsVirtualAgentOutputTextResponsesAttributes {
	return ConversationTurnsVirtualAgentOutputTextResponsesAttributes{ref: ref}
}

func (tr ConversationTurnsVirtualAgentOutputTextResponsesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr ConversationTurnsVirtualAgentOutputTextResponsesAttributes) Text() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tr.ref.Append("text"))
}

type ConversationTurnsVirtualAgentOutputTriggeredIntentAttributes struct {
	ref terra.Reference
}

func (ti ConversationTurnsVirtualAgentOutputTriggeredIntentAttributes) InternalRef() (terra.Reference, error) {
	return ti.ref, nil
}

func (ti ConversationTurnsVirtualAgentOutputTriggeredIntentAttributes) InternalWithRef(ref terra.Reference) ConversationTurnsVirtualAgentOutputTriggeredIntentAttributes {
	return ConversationTurnsVirtualAgentOutputTriggeredIntentAttributes{ref: ref}
}

func (ti ConversationTurnsVirtualAgentOutputTriggeredIntentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ti.ref.InternalTokens()
}

func (ti ConversationTurnsVirtualAgentOutputTriggeredIntentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(ti.ref.Append("display_name"))
}

func (ti ConversationTurnsVirtualAgentOutputTriggeredIntentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ti.ref.Append("name"))
}

type TestCaseConversationTurnsAttributes struct {
	ref terra.Reference
}

func (tcct TestCaseConversationTurnsAttributes) InternalRef() (terra.Reference, error) {
	return tcct.ref, nil
}

func (tcct TestCaseConversationTurnsAttributes) InternalWithRef(ref terra.Reference) TestCaseConversationTurnsAttributes {
	return TestCaseConversationTurnsAttributes{ref: ref}
}

func (tcct TestCaseConversationTurnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tcct.ref.InternalTokens()
}

func (tcct TestCaseConversationTurnsAttributes) UserInput() terra.ListValue[TestCaseConversationTurnsUserInputAttributes] {
	return terra.ReferenceAsList[TestCaseConversationTurnsUserInputAttributes](tcct.ref.Append("user_input"))
}

func (tcct TestCaseConversationTurnsAttributes) VirtualAgentOutput() terra.ListValue[TestCaseConversationTurnsVirtualAgentOutputAttributes] {
	return terra.ReferenceAsList[TestCaseConversationTurnsVirtualAgentOutputAttributes](tcct.ref.Append("virtual_agent_output"))
}

type TestCaseConversationTurnsUserInputAttributes struct {
	ref terra.Reference
}

func (ui TestCaseConversationTurnsUserInputAttributes) InternalRef() (terra.Reference, error) {
	return ui.ref, nil
}

func (ui TestCaseConversationTurnsUserInputAttributes) InternalWithRef(ref terra.Reference) TestCaseConversationTurnsUserInputAttributes {
	return TestCaseConversationTurnsUserInputAttributes{ref: ref}
}

func (ui TestCaseConversationTurnsUserInputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ui.ref.InternalTokens()
}

func (ui TestCaseConversationTurnsUserInputAttributes) EnableSentimentAnalysis() terra.BoolValue {
	return terra.ReferenceAsBool(ui.ref.Append("enable_sentiment_analysis"))
}

func (ui TestCaseConversationTurnsUserInputAttributes) InjectedParameters() terra.StringValue {
	return terra.ReferenceAsString(ui.ref.Append("injected_parameters"))
}

func (ui TestCaseConversationTurnsUserInputAttributes) IsWebhookEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ui.ref.Append("is_webhook_enabled"))
}

func (ui TestCaseConversationTurnsUserInputAttributes) Input() terra.ListValue[TestCaseConversationTurnsUserInputInputAttributes] {
	return terra.ReferenceAsList[TestCaseConversationTurnsUserInputInputAttributes](ui.ref.Append("input"))
}

type TestCaseConversationTurnsUserInputInputAttributes struct {
	ref terra.Reference
}

func (i TestCaseConversationTurnsUserInputInputAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i TestCaseConversationTurnsUserInputInputAttributes) InternalWithRef(ref terra.Reference) TestCaseConversationTurnsUserInputInputAttributes {
	return TestCaseConversationTurnsUserInputInputAttributes{ref: ref}
}

func (i TestCaseConversationTurnsUserInputInputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i TestCaseConversationTurnsUserInputInputAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("language_code"))
}

func (i TestCaseConversationTurnsUserInputInputAttributes) Dtmf() terra.ListValue[TestCaseConversationTurnsUserInputInputDtmfAttributes] {
	return terra.ReferenceAsList[TestCaseConversationTurnsUserInputInputDtmfAttributes](i.ref.Append("dtmf"))
}

func (i TestCaseConversationTurnsUserInputInputAttributes) Event() terra.ListValue[TestCaseConversationTurnsUserInputInputEventAttributes] {
	return terra.ReferenceAsList[TestCaseConversationTurnsUserInputInputEventAttributes](i.ref.Append("event"))
}

func (i TestCaseConversationTurnsUserInputInputAttributes) Text() terra.ListValue[TestCaseConversationTurnsUserInputInputTextAttributes] {
	return terra.ReferenceAsList[TestCaseConversationTurnsUserInputInputTextAttributes](i.ref.Append("text"))
}

type TestCaseConversationTurnsUserInputInputDtmfAttributes struct {
	ref terra.Reference
}

func (d TestCaseConversationTurnsUserInputInputDtmfAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d TestCaseConversationTurnsUserInputInputDtmfAttributes) InternalWithRef(ref terra.Reference) TestCaseConversationTurnsUserInputInputDtmfAttributes {
	return TestCaseConversationTurnsUserInputInputDtmfAttributes{ref: ref}
}

func (d TestCaseConversationTurnsUserInputInputDtmfAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d TestCaseConversationTurnsUserInputInputDtmfAttributes) Digits() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("digits"))
}

func (d TestCaseConversationTurnsUserInputInputDtmfAttributes) FinishDigit() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("finish_digit"))
}

type TestCaseConversationTurnsUserInputInputEventAttributes struct {
	ref terra.Reference
}

func (e TestCaseConversationTurnsUserInputInputEventAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e TestCaseConversationTurnsUserInputInputEventAttributes) InternalWithRef(ref terra.Reference) TestCaseConversationTurnsUserInputInputEventAttributes {
	return TestCaseConversationTurnsUserInputInputEventAttributes{ref: ref}
}

func (e TestCaseConversationTurnsUserInputInputEventAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e TestCaseConversationTurnsUserInputInputEventAttributes) Event() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("event"))
}

type TestCaseConversationTurnsUserInputInputTextAttributes struct {
	ref terra.Reference
}

func (t TestCaseConversationTurnsUserInputInputTextAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TestCaseConversationTurnsUserInputInputTextAttributes) InternalWithRef(ref terra.Reference) TestCaseConversationTurnsUserInputInputTextAttributes {
	return TestCaseConversationTurnsUserInputInputTextAttributes{ref: ref}
}

func (t TestCaseConversationTurnsUserInputInputTextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TestCaseConversationTurnsUserInputInputTextAttributes) Text() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("text"))
}

type TestCaseConversationTurnsVirtualAgentOutputAttributes struct {
	ref terra.Reference
}

func (vao TestCaseConversationTurnsVirtualAgentOutputAttributes) InternalRef() (terra.Reference, error) {
	return vao.ref, nil
}

func (vao TestCaseConversationTurnsVirtualAgentOutputAttributes) InternalWithRef(ref terra.Reference) TestCaseConversationTurnsVirtualAgentOutputAttributes {
	return TestCaseConversationTurnsVirtualAgentOutputAttributes{ref: ref}
}

func (vao TestCaseConversationTurnsVirtualAgentOutputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vao.ref.InternalTokens()
}

func (vao TestCaseConversationTurnsVirtualAgentOutputAttributes) SessionParameters() terra.StringValue {
	return terra.ReferenceAsString(vao.ref.Append("session_parameters"))
}

func (vao TestCaseConversationTurnsVirtualAgentOutputAttributes) CurrentPage() terra.ListValue[TestCaseConversationTurnsVirtualAgentOutputCurrentPageAttributes] {
	return terra.ReferenceAsList[TestCaseConversationTurnsVirtualAgentOutputCurrentPageAttributes](vao.ref.Append("current_page"))
}

func (vao TestCaseConversationTurnsVirtualAgentOutputAttributes) TextResponses() terra.ListValue[TestCaseConversationTurnsVirtualAgentOutputTextResponsesAttributes] {
	return terra.ReferenceAsList[TestCaseConversationTurnsVirtualAgentOutputTextResponsesAttributes](vao.ref.Append("text_responses"))
}

func (vao TestCaseConversationTurnsVirtualAgentOutputAttributes) TriggeredIntent() terra.ListValue[TestCaseConversationTurnsVirtualAgentOutputTriggeredIntentAttributes] {
	return terra.ReferenceAsList[TestCaseConversationTurnsVirtualAgentOutputTriggeredIntentAttributes](vao.ref.Append("triggered_intent"))
}

type TestCaseConversationTurnsVirtualAgentOutputCurrentPageAttributes struct {
	ref terra.Reference
}

func (cp TestCaseConversationTurnsVirtualAgentOutputCurrentPageAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp TestCaseConversationTurnsVirtualAgentOutputCurrentPageAttributes) InternalWithRef(ref terra.Reference) TestCaseConversationTurnsVirtualAgentOutputCurrentPageAttributes {
	return TestCaseConversationTurnsVirtualAgentOutputCurrentPageAttributes{ref: ref}
}

func (cp TestCaseConversationTurnsVirtualAgentOutputCurrentPageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp TestCaseConversationTurnsVirtualAgentOutputCurrentPageAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("display_name"))
}

func (cp TestCaseConversationTurnsVirtualAgentOutputCurrentPageAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("name"))
}

type TestCaseConversationTurnsVirtualAgentOutputTextResponsesAttributes struct {
	ref terra.Reference
}

func (tr TestCaseConversationTurnsVirtualAgentOutputTextResponsesAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr TestCaseConversationTurnsVirtualAgentOutputTextResponsesAttributes) InternalWithRef(ref terra.Reference) TestCaseConversationTurnsVirtualAgentOutputTextResponsesAttributes {
	return TestCaseConversationTurnsVirtualAgentOutputTextResponsesAttributes{ref: ref}
}

func (tr TestCaseConversationTurnsVirtualAgentOutputTextResponsesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr TestCaseConversationTurnsVirtualAgentOutputTextResponsesAttributes) Text() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tr.ref.Append("text"))
}

type TestCaseConversationTurnsVirtualAgentOutputTriggeredIntentAttributes struct {
	ref terra.Reference
}

func (ti TestCaseConversationTurnsVirtualAgentOutputTriggeredIntentAttributes) InternalRef() (terra.Reference, error) {
	return ti.ref, nil
}

func (ti TestCaseConversationTurnsVirtualAgentOutputTriggeredIntentAttributes) InternalWithRef(ref terra.Reference) TestCaseConversationTurnsVirtualAgentOutputTriggeredIntentAttributes {
	return TestCaseConversationTurnsVirtualAgentOutputTriggeredIntentAttributes{ref: ref}
}

func (ti TestCaseConversationTurnsVirtualAgentOutputTriggeredIntentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ti.ref.InternalTokens()
}

func (ti TestCaseConversationTurnsVirtualAgentOutputTriggeredIntentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(ti.ref.Append("display_name"))
}

func (ti TestCaseConversationTurnsVirtualAgentOutputTriggeredIntentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ti.ref.Append("name"))
}

type TestConfigAttributes struct {
	ref terra.Reference
}

func (tc TestConfigAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TestConfigAttributes) InternalWithRef(ref terra.Reference) TestConfigAttributes {
	return TestConfigAttributes{ref: ref}
}

func (tc TestConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TestConfigAttributes) Flow() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("flow"))
}

func (tc TestConfigAttributes) Page() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("page"))
}

func (tc TestConfigAttributes) TrackingParameters() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tc.ref.Append("tracking_parameters"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type LastTestResultState struct {
	Environment       string                   `json:"environment"`
	Name              string                   `json:"name"`
	TestResult        string                   `json:"test_result"`
	TestTime          string                   `json:"test_time"`
	ConversationTurns []ConversationTurnsState `json:"conversation_turns"`
}

type ConversationTurnsState struct {
	UserInput          []ConversationTurnsUserInputState          `json:"user_input"`
	VirtualAgentOutput []ConversationTurnsVirtualAgentOutputState `json:"virtual_agent_output"`
}

type ConversationTurnsUserInputState struct {
	EnableSentimentAnalysis bool                                   `json:"enable_sentiment_analysis"`
	InjectedParameters      string                                 `json:"injected_parameters"`
	IsWebhookEnabled        bool                                   `json:"is_webhook_enabled"`
	Input                   []ConversationTurnsUserInputInputState `json:"input"`
}

type ConversationTurnsUserInputInputState struct {
	LanguageCode string                                      `json:"language_code"`
	Dtmf         []ConversationTurnsUserInputInputDtmfState  `json:"dtmf"`
	Event        []ConversationTurnsUserInputInputEventState `json:"event"`
	Text         []ConversationTurnsUserInputInputTextState  `json:"text"`
}

type ConversationTurnsUserInputInputDtmfState struct {
	Digits      string `json:"digits"`
	FinishDigit string `json:"finish_digit"`
}

type ConversationTurnsUserInputInputEventState struct {
	Event string `json:"event"`
}

type ConversationTurnsUserInputInputTextState struct {
	Text string `json:"text"`
}

type ConversationTurnsVirtualAgentOutputState struct {
	SessionParameters string                                                    `json:"session_parameters"`
	CurrentPage       []ConversationTurnsVirtualAgentOutputCurrentPageState     `json:"current_page"`
	Differences       []DifferencesState                                        `json:"differences"`
	Status            []StatusState                                             `json:"status"`
	TextResponses     []ConversationTurnsVirtualAgentOutputTextResponsesState   `json:"text_responses"`
	TriggeredIntent   []ConversationTurnsVirtualAgentOutputTriggeredIntentState `json:"triggered_intent"`
}

type ConversationTurnsVirtualAgentOutputCurrentPageState struct {
	DisplayName string `json:"display_name"`
	Name        string `json:"name"`
}

type DifferencesState struct {
	Description string `json:"description"`
	Type        string `json:"type"`
}

type StatusState struct {
	Code    float64 `json:"code"`
	Details string  `json:"details"`
	Message string  `json:"message"`
}

type ConversationTurnsVirtualAgentOutputTextResponsesState struct {
	Text []string `json:"text"`
}

type ConversationTurnsVirtualAgentOutputTriggeredIntentState struct {
	DisplayName string `json:"display_name"`
	Name        string `json:"name"`
}

type TestCaseConversationTurnsState struct {
	UserInput          []TestCaseConversationTurnsUserInputState          `json:"user_input"`
	VirtualAgentOutput []TestCaseConversationTurnsVirtualAgentOutputState `json:"virtual_agent_output"`
}

type TestCaseConversationTurnsUserInputState struct {
	EnableSentimentAnalysis bool                                           `json:"enable_sentiment_analysis"`
	InjectedParameters      string                                         `json:"injected_parameters"`
	IsWebhookEnabled        bool                                           `json:"is_webhook_enabled"`
	Input                   []TestCaseConversationTurnsUserInputInputState `json:"input"`
}

type TestCaseConversationTurnsUserInputInputState struct {
	LanguageCode string                                              `json:"language_code"`
	Dtmf         []TestCaseConversationTurnsUserInputInputDtmfState  `json:"dtmf"`
	Event        []TestCaseConversationTurnsUserInputInputEventState `json:"event"`
	Text         []TestCaseConversationTurnsUserInputInputTextState  `json:"text"`
}

type TestCaseConversationTurnsUserInputInputDtmfState struct {
	Digits      string `json:"digits"`
	FinishDigit string `json:"finish_digit"`
}

type TestCaseConversationTurnsUserInputInputEventState struct {
	Event string `json:"event"`
}

type TestCaseConversationTurnsUserInputInputTextState struct {
	Text string `json:"text"`
}

type TestCaseConversationTurnsVirtualAgentOutputState struct {
	SessionParameters string                                                            `json:"session_parameters"`
	CurrentPage       []TestCaseConversationTurnsVirtualAgentOutputCurrentPageState     `json:"current_page"`
	TextResponses     []TestCaseConversationTurnsVirtualAgentOutputTextResponsesState   `json:"text_responses"`
	TriggeredIntent   []TestCaseConversationTurnsVirtualAgentOutputTriggeredIntentState `json:"triggered_intent"`
}

type TestCaseConversationTurnsVirtualAgentOutputCurrentPageState struct {
	DisplayName string `json:"display_name"`
	Name        string `json:"name"`
}

type TestCaseConversationTurnsVirtualAgentOutputTextResponsesState struct {
	Text []string `json:"text"`
}

type TestCaseConversationTurnsVirtualAgentOutputTriggeredIntentState struct {
	DisplayName string `json:"display_name"`
	Name        string `json:"name"`
}

type TestConfigState struct {
	Flow               string   `json:"flow"`
	Page               string   `json:"page"`
	TrackingParameters []string `json:"tracking_parameters"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
