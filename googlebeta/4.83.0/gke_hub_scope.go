// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	gkehubscope "github.com/golingon/terraproviders/googlebeta/4.83.0/gkehubscope"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGkeHubScope creates a new instance of [GkeHubScope].
func NewGkeHubScope(name string, args GkeHubScopeArgs) *GkeHubScope {
	return &GkeHubScope{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeHubScope)(nil)

// GkeHubScope represents the Terraform resource google_gke_hub_scope.
type GkeHubScope struct {
	Name      string
	Args      GkeHubScopeArgs
	state     *gkeHubScopeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GkeHubScope].
func (ghs *GkeHubScope) Type() string {
	return "google_gke_hub_scope"
}

// LocalName returns the local name for [GkeHubScope].
func (ghs *GkeHubScope) LocalName() string {
	return ghs.Name
}

// Configuration returns the configuration (args) for [GkeHubScope].
func (ghs *GkeHubScope) Configuration() interface{} {
	return ghs.Args
}

// DependOn is used for other resources to depend on [GkeHubScope].
func (ghs *GkeHubScope) DependOn() terra.Reference {
	return terra.ReferenceResource(ghs)
}

// Dependencies returns the list of resources [GkeHubScope] depends_on.
func (ghs *GkeHubScope) Dependencies() terra.Dependencies {
	return ghs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GkeHubScope].
func (ghs *GkeHubScope) LifecycleManagement() *terra.Lifecycle {
	return ghs.Lifecycle
}

// Attributes returns the attributes for [GkeHubScope].
func (ghs *GkeHubScope) Attributes() gkeHubScopeAttributes {
	return gkeHubScopeAttributes{ref: terra.ReferenceResource(ghs)}
}

// ImportState imports the given attribute values into [GkeHubScope]'s state.
func (ghs *GkeHubScope) ImportState(av io.Reader) error {
	ghs.state = &gkeHubScopeState{}
	if err := json.NewDecoder(av).Decode(ghs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ghs.Type(), ghs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GkeHubScope] has state.
func (ghs *GkeHubScope) State() (*gkeHubScopeState, bool) {
	return ghs.state, ghs.state != nil
}

// StateMust returns the state for [GkeHubScope]. Panics if the state is nil.
func (ghs *GkeHubScope) StateMust() *gkeHubScopeState {
	if ghs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ghs.Type(), ghs.LocalName()))
	}
	return ghs.state
}

// GkeHubScopeArgs contains the configurations for google_gke_hub_scope.
type GkeHubScopeArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ScopeId: string, required
	ScopeId terra.StringValue `hcl:"scope_id,attr" validate:"required"`
	// State: min=0
	State []gkehubscope.State `hcl:"state,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *gkehubscope.Timeouts `hcl:"timeouts,block"`
}
type gkeHubScopeAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_gke_hub_scope.
func (ghs gkeHubScopeAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(ghs.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_gke_hub_scope.
func (ghs gkeHubScopeAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(ghs.ref.Append("delete_time"))
}

// Id returns a reference to field id of google_gke_hub_scope.
func (ghs gkeHubScopeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ghs.ref.Append("id"))
}

// Labels returns a reference to field labels of google_gke_hub_scope.
func (ghs gkeHubScopeAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghs.ref.Append("labels"))
}

// Name returns a reference to field name of google_gke_hub_scope.
func (ghs gkeHubScopeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ghs.ref.Append("name"))
}

// Project returns a reference to field project of google_gke_hub_scope.
func (ghs gkeHubScopeAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ghs.ref.Append("project"))
}

// ScopeId returns a reference to field scope_id of google_gke_hub_scope.
func (ghs gkeHubScopeAttributes) ScopeId() terra.StringValue {
	return terra.ReferenceAsString(ghs.ref.Append("scope_id"))
}

// Uid returns a reference to field uid of google_gke_hub_scope.
func (ghs gkeHubScopeAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(ghs.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_gke_hub_scope.
func (ghs gkeHubScopeAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(ghs.ref.Append("update_time"))
}

func (ghs gkeHubScopeAttributes) State() terra.ListValue[gkehubscope.StateAttributes] {
	return terra.ReferenceAsList[gkehubscope.StateAttributes](ghs.ref.Append("state"))
}

func (ghs gkeHubScopeAttributes) Timeouts() gkehubscope.TimeoutsAttributes {
	return terra.ReferenceAsSingle[gkehubscope.TimeoutsAttributes](ghs.ref.Append("timeouts"))
}

type gkeHubScopeState struct {
	CreateTime string                     `json:"create_time"`
	DeleteTime string                     `json:"delete_time"`
	Id         string                     `json:"id"`
	Labels     map[string]string          `json:"labels"`
	Name       string                     `json:"name"`
	Project    string                     `json:"project"`
	ScopeId    string                     `json:"scope_id"`
	Uid        string                     `json:"uid"`
	UpdateTime string                     `json:"update_time"`
	State      []gkehubscope.StateState   `json:"state"`
	Timeouts   *gkehubscope.TimeoutsState `json:"timeouts"`
}
