// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package networkserviceshttproute

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Rules struct {
	// Action: optional
	Action *Action `hcl:"action,block"`
	// Matches: min=0
	Matches []Matches `hcl:"matches,block" validate:"min=0"`
}

type Action struct {
	// Timeout: string, optional
	Timeout terra.StringValue `hcl:"timeout,attr"`
	// CorsPolicy: optional
	CorsPolicy *CorsPolicy `hcl:"cors_policy,block"`
	// Destinations: min=0
	Destinations []Destinations `hcl:"destinations,block" validate:"min=0"`
	// FaultInjectionPolicy: optional
	FaultInjectionPolicy *FaultInjectionPolicy `hcl:"fault_injection_policy,block"`
	// Redirect: optional
	Redirect *Redirect `hcl:"redirect,block"`
	// RequestHeaderModifier: optional
	RequestHeaderModifier *RequestHeaderModifier `hcl:"request_header_modifier,block"`
	// RequestMirrorPolicy: optional
	RequestMirrorPolicy *RequestMirrorPolicy `hcl:"request_mirror_policy,block"`
	// ResponseHeaderModifier: optional
	ResponseHeaderModifier *ResponseHeaderModifier `hcl:"response_header_modifier,block"`
	// RetryPolicy: optional
	RetryPolicy *RetryPolicy `hcl:"retry_policy,block"`
	// UrlRewrite: optional
	UrlRewrite *UrlRewrite `hcl:"url_rewrite,block"`
}

type CorsPolicy struct {
	// AllowCredentials: bool, optional
	AllowCredentials terra.BoolValue `hcl:"allow_credentials,attr"`
	// AllowHeaders: list of string, optional
	AllowHeaders terra.ListValue[terra.StringValue] `hcl:"allow_headers,attr"`
	// AllowMethods: list of string, optional
	AllowMethods terra.ListValue[terra.StringValue] `hcl:"allow_methods,attr"`
	// AllowOriginRegexes: list of string, optional
	AllowOriginRegexes terra.ListValue[terra.StringValue] `hcl:"allow_origin_regexes,attr"`
	// AllowOrigins: list of string, optional
	AllowOrigins terra.ListValue[terra.StringValue] `hcl:"allow_origins,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// ExposeHeaders: list of string, optional
	ExposeHeaders terra.ListValue[terra.StringValue] `hcl:"expose_headers,attr"`
	// MaxAge: string, optional
	MaxAge terra.StringValue `hcl:"max_age,attr"`
}

type Destinations struct {
	// ServiceName: string, optional
	ServiceName terra.StringValue `hcl:"service_name,attr"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type FaultInjectionPolicy struct {
	// Abort: optional
	Abort *Abort `hcl:"abort,block"`
	// Delay: optional
	Delay *Delay `hcl:"delay,block"`
}

type Abort struct {
	// HttpStatus: number, optional
	HttpStatus terra.NumberValue `hcl:"http_status,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type Delay struct {
	// FixedDelay: string, optional
	FixedDelay terra.StringValue `hcl:"fixed_delay,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type Redirect struct {
	// HostRedirect: string, optional
	HostRedirect terra.StringValue `hcl:"host_redirect,attr"`
	// HttpsRedirect: bool, optional
	HttpsRedirect terra.BoolValue `hcl:"https_redirect,attr"`
	// PathRedirect: string, optional
	PathRedirect terra.StringValue `hcl:"path_redirect,attr"`
	// PortRedirect: number, optional
	PortRedirect terra.NumberValue `hcl:"port_redirect,attr"`
	// PrefixRewrite: string, optional
	PrefixRewrite terra.StringValue `hcl:"prefix_rewrite,attr"`
	// ResponseCode: string, optional
	ResponseCode terra.StringValue `hcl:"response_code,attr"`
	// StripQuery: bool, optional
	StripQuery terra.BoolValue `hcl:"strip_query,attr"`
}

type RequestHeaderModifier struct {
	// Add: map of string, optional
	Add terra.MapValue[terra.StringValue] `hcl:"add,attr"`
	// Remove: list of string, optional
	Remove terra.ListValue[terra.StringValue] `hcl:"remove,attr"`
	// Set: map of string, optional
	Set terra.MapValue[terra.StringValue] `hcl:"set,attr"`
}

type RequestMirrorPolicy struct {
	// Destination: optional
	Destination *Destination `hcl:"destination,block"`
}

type Destination struct {
	// ServiceName: string, optional
	ServiceName terra.StringValue `hcl:"service_name,attr"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type ResponseHeaderModifier struct {
	// Add: map of string, optional
	Add terra.MapValue[terra.StringValue] `hcl:"add,attr"`
	// Remove: list of string, optional
	Remove terra.ListValue[terra.StringValue] `hcl:"remove,attr"`
	// Set: map of string, optional
	Set terra.MapValue[terra.StringValue] `hcl:"set,attr"`
}

type RetryPolicy struct {
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// PerTryTimeout: string, optional
	PerTryTimeout terra.StringValue `hcl:"per_try_timeout,attr"`
	// RetryConditions: list of string, optional
	RetryConditions terra.ListValue[terra.StringValue] `hcl:"retry_conditions,attr"`
}

type UrlRewrite struct {
	// HostRewrite: string, optional
	HostRewrite terra.StringValue `hcl:"host_rewrite,attr"`
	// PathPrefixRewrite: string, optional
	PathPrefixRewrite terra.StringValue `hcl:"path_prefix_rewrite,attr"`
}

type Matches struct {
	// FullPathMatch: string, optional
	FullPathMatch terra.StringValue `hcl:"full_path_match,attr"`
	// IgnoreCase: bool, optional
	IgnoreCase terra.BoolValue `hcl:"ignore_case,attr"`
	// PrefixMatch: string, optional
	PrefixMatch terra.StringValue `hcl:"prefix_match,attr"`
	// RegexMatch: string, optional
	RegexMatch terra.StringValue `hcl:"regex_match,attr"`
	// Headers: min=0
	Headers []Headers `hcl:"headers,block" validate:"min=0"`
	// QueryParameters: min=0
	QueryParameters []QueryParameters `hcl:"query_parameters,block" validate:"min=0"`
}

type Headers struct {
	// ExactMatch: string, optional
	ExactMatch terra.StringValue `hcl:"exact_match,attr"`
	// Header: string, optional
	Header terra.StringValue `hcl:"header,attr"`
	// InvertMatch: bool, optional
	InvertMatch terra.BoolValue `hcl:"invert_match,attr"`
	// PrefixMatch: string, optional
	PrefixMatch terra.StringValue `hcl:"prefix_match,attr"`
	// PresentMatch: bool, optional
	PresentMatch terra.BoolValue `hcl:"present_match,attr"`
	// RegexMatch: string, optional
	RegexMatch terra.StringValue `hcl:"regex_match,attr"`
	// SuffixMatch: string, optional
	SuffixMatch terra.StringValue `hcl:"suffix_match,attr"`
	// RangeMatch: optional
	RangeMatch *RangeMatch `hcl:"range_match,block"`
}

type RangeMatch struct {
	// End: number, required
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Start: number, required
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type QueryParameters struct {
	// ExactMatch: string, optional
	ExactMatch terra.StringValue `hcl:"exact_match,attr"`
	// PresentMatch: bool, optional
	PresentMatch terra.BoolValue `hcl:"present_match,attr"`
	// QueryParameter: string, optional
	QueryParameter terra.StringValue `hcl:"query_parameter,attr"`
	// RegexMatch: string, optional
	RegexMatch terra.StringValue `hcl:"regex_match,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RulesAttributes struct {
	ref terra.Reference
}

func (r RulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RulesAttributes) InternalWithRef(ref terra.Reference) RulesAttributes {
	return RulesAttributes{ref: ref}
}

func (r RulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RulesAttributes) Action() terra.ListValue[ActionAttributes] {
	return terra.ReferenceAsList[ActionAttributes](r.ref.Append("action"))
}

func (r RulesAttributes) Matches() terra.ListValue[MatchesAttributes] {
	return terra.ReferenceAsList[MatchesAttributes](r.ref.Append("matches"))
}

type ActionAttributes struct {
	ref terra.Reference
}

func (a ActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionAttributes) InternalWithRef(ref terra.Reference) ActionAttributes {
	return ActionAttributes{ref: ref}
}

func (a ActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionAttributes) Timeout() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("timeout"))
}

func (a ActionAttributes) CorsPolicy() terra.ListValue[CorsPolicyAttributes] {
	return terra.ReferenceAsList[CorsPolicyAttributes](a.ref.Append("cors_policy"))
}

func (a ActionAttributes) Destinations() terra.ListValue[DestinationsAttributes] {
	return terra.ReferenceAsList[DestinationsAttributes](a.ref.Append("destinations"))
}

func (a ActionAttributes) FaultInjectionPolicy() terra.ListValue[FaultInjectionPolicyAttributes] {
	return terra.ReferenceAsList[FaultInjectionPolicyAttributes](a.ref.Append("fault_injection_policy"))
}

func (a ActionAttributes) Redirect() terra.ListValue[RedirectAttributes] {
	return terra.ReferenceAsList[RedirectAttributes](a.ref.Append("redirect"))
}

func (a ActionAttributes) RequestHeaderModifier() terra.ListValue[RequestHeaderModifierAttributes] {
	return terra.ReferenceAsList[RequestHeaderModifierAttributes](a.ref.Append("request_header_modifier"))
}

func (a ActionAttributes) RequestMirrorPolicy() terra.ListValue[RequestMirrorPolicyAttributes] {
	return terra.ReferenceAsList[RequestMirrorPolicyAttributes](a.ref.Append("request_mirror_policy"))
}

func (a ActionAttributes) ResponseHeaderModifier() terra.ListValue[ResponseHeaderModifierAttributes] {
	return terra.ReferenceAsList[ResponseHeaderModifierAttributes](a.ref.Append("response_header_modifier"))
}

func (a ActionAttributes) RetryPolicy() terra.ListValue[RetryPolicyAttributes] {
	return terra.ReferenceAsList[RetryPolicyAttributes](a.ref.Append("retry_policy"))
}

func (a ActionAttributes) UrlRewrite() terra.ListValue[UrlRewriteAttributes] {
	return terra.ReferenceAsList[UrlRewriteAttributes](a.ref.Append("url_rewrite"))
}

type CorsPolicyAttributes struct {
	ref terra.Reference
}

func (cp CorsPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp CorsPolicyAttributes) InternalWithRef(ref terra.Reference) CorsPolicyAttributes {
	return CorsPolicyAttributes{ref: ref}
}

func (cp CorsPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp CorsPolicyAttributes) AllowCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("allow_credentials"))
}

func (cp CorsPolicyAttributes) AllowHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_headers"))
}

func (cp CorsPolicyAttributes) AllowMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_methods"))
}

func (cp CorsPolicyAttributes) AllowOriginRegexes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origin_regexes"))
}

func (cp CorsPolicyAttributes) AllowOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origins"))
}

func (cp CorsPolicyAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("disabled"))
}

func (cp CorsPolicyAttributes) ExposeHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("expose_headers"))
}

func (cp CorsPolicyAttributes) MaxAge() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("max_age"))
}

type DestinationsAttributes struct {
	ref terra.Reference
}

func (d DestinationsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DestinationsAttributes) InternalWithRef(ref terra.Reference) DestinationsAttributes {
	return DestinationsAttributes{ref: ref}
}

func (d DestinationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DestinationsAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("service_name"))
}

func (d DestinationsAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("weight"))
}

type FaultInjectionPolicyAttributes struct {
	ref terra.Reference
}

func (fip FaultInjectionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return fip.ref, nil
}

func (fip FaultInjectionPolicyAttributes) InternalWithRef(ref terra.Reference) FaultInjectionPolicyAttributes {
	return FaultInjectionPolicyAttributes{ref: ref}
}

func (fip FaultInjectionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fip.ref.InternalTokens()
}

func (fip FaultInjectionPolicyAttributes) Abort() terra.ListValue[AbortAttributes] {
	return terra.ReferenceAsList[AbortAttributes](fip.ref.Append("abort"))
}

func (fip FaultInjectionPolicyAttributes) Delay() terra.ListValue[DelayAttributes] {
	return terra.ReferenceAsList[DelayAttributes](fip.ref.Append("delay"))
}

type AbortAttributes struct {
	ref terra.Reference
}

func (a AbortAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AbortAttributes) InternalWithRef(ref terra.Reference) AbortAttributes {
	return AbortAttributes{ref: ref}
}

func (a AbortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AbortAttributes) HttpStatus() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("http_status"))
}

func (a AbortAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("percentage"))
}

type DelayAttributes struct {
	ref terra.Reference
}

func (d DelayAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DelayAttributes) InternalWithRef(ref terra.Reference) DelayAttributes {
	return DelayAttributes{ref: ref}
}

func (d DelayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DelayAttributes) FixedDelay() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("fixed_delay"))
}

func (d DelayAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("percentage"))
}

type RedirectAttributes struct {
	ref terra.Reference
}

func (r RedirectAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RedirectAttributes) InternalWithRef(ref terra.Reference) RedirectAttributes {
	return RedirectAttributes{ref: ref}
}

func (r RedirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RedirectAttributes) HostRedirect() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("host_redirect"))
}

func (r RedirectAttributes) HttpsRedirect() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("https_redirect"))
}

func (r RedirectAttributes) PathRedirect() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("path_redirect"))
}

func (r RedirectAttributes) PortRedirect() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("port_redirect"))
}

func (r RedirectAttributes) PrefixRewrite() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("prefix_rewrite"))
}

func (r RedirectAttributes) ResponseCode() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("response_code"))
}

func (r RedirectAttributes) StripQuery() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("strip_query"))
}

type RequestHeaderModifierAttributes struct {
	ref terra.Reference
}

func (rhm RequestHeaderModifierAttributes) InternalRef() (terra.Reference, error) {
	return rhm.ref, nil
}

func (rhm RequestHeaderModifierAttributes) InternalWithRef(ref terra.Reference) RequestHeaderModifierAttributes {
	return RequestHeaderModifierAttributes{ref: ref}
}

func (rhm RequestHeaderModifierAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhm.ref.InternalTokens()
}

func (rhm RequestHeaderModifierAttributes) Add() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rhm.ref.Append("add"))
}

func (rhm RequestHeaderModifierAttributes) Remove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rhm.ref.Append("remove"))
}

func (rhm RequestHeaderModifierAttributes) Set() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rhm.ref.Append("set"))
}

type RequestMirrorPolicyAttributes struct {
	ref terra.Reference
}

func (rmp RequestMirrorPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rmp.ref, nil
}

func (rmp RequestMirrorPolicyAttributes) InternalWithRef(ref terra.Reference) RequestMirrorPolicyAttributes {
	return RequestMirrorPolicyAttributes{ref: ref}
}

func (rmp RequestMirrorPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rmp.ref.InternalTokens()
}

func (rmp RequestMirrorPolicyAttributes) Destination() terra.ListValue[DestinationAttributes] {
	return terra.ReferenceAsList[DestinationAttributes](rmp.ref.Append("destination"))
}

type DestinationAttributes struct {
	ref terra.Reference
}

func (d DestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DestinationAttributes) InternalWithRef(ref terra.Reference) DestinationAttributes {
	return DestinationAttributes{ref: ref}
}

func (d DestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DestinationAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("service_name"))
}

func (d DestinationAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("weight"))
}

type ResponseHeaderModifierAttributes struct {
	ref terra.Reference
}

func (rhm ResponseHeaderModifierAttributes) InternalRef() (terra.Reference, error) {
	return rhm.ref, nil
}

func (rhm ResponseHeaderModifierAttributes) InternalWithRef(ref terra.Reference) ResponseHeaderModifierAttributes {
	return ResponseHeaderModifierAttributes{ref: ref}
}

func (rhm ResponseHeaderModifierAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhm.ref.InternalTokens()
}

func (rhm ResponseHeaderModifierAttributes) Add() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rhm.ref.Append("add"))
}

func (rhm ResponseHeaderModifierAttributes) Remove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rhm.ref.Append("remove"))
}

func (rhm ResponseHeaderModifierAttributes) Set() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rhm.ref.Append("set"))
}

type RetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp RetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RetryPolicyAttributes) InternalWithRef(ref terra.Reference) RetryPolicyAttributes {
	return RetryPolicyAttributes{ref: ref}
}

func (rp RetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RetryPolicyAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("num_retries"))
}

func (rp RetryPolicyAttributes) PerTryTimeout() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("per_try_timeout"))
}

func (rp RetryPolicyAttributes) RetryConditions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rp.ref.Append("retry_conditions"))
}

type UrlRewriteAttributes struct {
	ref terra.Reference
}

func (ur UrlRewriteAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur UrlRewriteAttributes) InternalWithRef(ref terra.Reference) UrlRewriteAttributes {
	return UrlRewriteAttributes{ref: ref}
}

func (ur UrlRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur UrlRewriteAttributes) HostRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_rewrite"))
}

func (ur UrlRewriteAttributes) PathPrefixRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_prefix_rewrite"))
}

type MatchesAttributes struct {
	ref terra.Reference
}

func (m MatchesAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MatchesAttributes) InternalWithRef(ref terra.Reference) MatchesAttributes {
	return MatchesAttributes{ref: ref}
}

func (m MatchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MatchesAttributes) FullPathMatch() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("full_path_match"))
}

func (m MatchesAttributes) IgnoreCase() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("ignore_case"))
}

func (m MatchesAttributes) PrefixMatch() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix_match"))
}

func (m MatchesAttributes) RegexMatch() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("regex_match"))
}

func (m MatchesAttributes) Headers() terra.ListValue[HeadersAttributes] {
	return terra.ReferenceAsList[HeadersAttributes](m.ref.Append("headers"))
}

func (m MatchesAttributes) QueryParameters() terra.ListValue[QueryParametersAttributes] {
	return terra.ReferenceAsList[QueryParametersAttributes](m.ref.Append("query_parameters"))
}

type HeadersAttributes struct {
	ref terra.Reference
}

func (h HeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HeadersAttributes) InternalWithRef(ref terra.Reference) HeadersAttributes {
	return HeadersAttributes{ref: ref}
}

func (h HeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HeadersAttributes) ExactMatch() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("exact_match"))
}

func (h HeadersAttributes) Header() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("header"))
}

func (h HeadersAttributes) InvertMatch() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("invert_match"))
}

func (h HeadersAttributes) PrefixMatch() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("prefix_match"))
}

func (h HeadersAttributes) PresentMatch() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("present_match"))
}

func (h HeadersAttributes) RegexMatch() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("regex_match"))
}

func (h HeadersAttributes) SuffixMatch() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("suffix_match"))
}

func (h HeadersAttributes) RangeMatch() terra.ListValue[RangeMatchAttributes] {
	return terra.ReferenceAsList[RangeMatchAttributes](h.ref.Append("range_match"))
}

type RangeMatchAttributes struct {
	ref terra.Reference
}

func (rm RangeMatchAttributes) InternalRef() (terra.Reference, error) {
	return rm.ref, nil
}

func (rm RangeMatchAttributes) InternalWithRef(ref terra.Reference) RangeMatchAttributes {
	return RangeMatchAttributes{ref: ref}
}

func (rm RangeMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rm.ref.InternalTokens()
}

func (rm RangeMatchAttributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(rm.ref.Append("end"))
}

func (rm RangeMatchAttributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(rm.ref.Append("start"))
}

type QueryParametersAttributes struct {
	ref terra.Reference
}

func (qp QueryParametersAttributes) InternalRef() (terra.Reference, error) {
	return qp.ref, nil
}

func (qp QueryParametersAttributes) InternalWithRef(ref terra.Reference) QueryParametersAttributes {
	return QueryParametersAttributes{ref: ref}
}

func (qp QueryParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qp.ref.InternalTokens()
}

func (qp QueryParametersAttributes) ExactMatch() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("exact_match"))
}

func (qp QueryParametersAttributes) PresentMatch() terra.BoolValue {
	return terra.ReferenceAsBool(qp.ref.Append("present_match"))
}

func (qp QueryParametersAttributes) QueryParameter() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("query_parameter"))
}

func (qp QueryParametersAttributes) RegexMatch() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("regex_match"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RulesState struct {
	Action  []ActionState  `json:"action"`
	Matches []MatchesState `json:"matches"`
}

type ActionState struct {
	Timeout                string                        `json:"timeout"`
	CorsPolicy             []CorsPolicyState             `json:"cors_policy"`
	Destinations           []DestinationsState           `json:"destinations"`
	FaultInjectionPolicy   []FaultInjectionPolicyState   `json:"fault_injection_policy"`
	Redirect               []RedirectState               `json:"redirect"`
	RequestHeaderModifier  []RequestHeaderModifierState  `json:"request_header_modifier"`
	RequestMirrorPolicy    []RequestMirrorPolicyState    `json:"request_mirror_policy"`
	ResponseHeaderModifier []ResponseHeaderModifierState `json:"response_header_modifier"`
	RetryPolicy            []RetryPolicyState            `json:"retry_policy"`
	UrlRewrite             []UrlRewriteState             `json:"url_rewrite"`
}

type CorsPolicyState struct {
	AllowCredentials   bool     `json:"allow_credentials"`
	AllowHeaders       []string `json:"allow_headers"`
	AllowMethods       []string `json:"allow_methods"`
	AllowOriginRegexes []string `json:"allow_origin_regexes"`
	AllowOrigins       []string `json:"allow_origins"`
	Disabled           bool     `json:"disabled"`
	ExposeHeaders      []string `json:"expose_headers"`
	MaxAge             string   `json:"max_age"`
}

type DestinationsState struct {
	ServiceName string  `json:"service_name"`
	Weight      float64 `json:"weight"`
}

type FaultInjectionPolicyState struct {
	Abort []AbortState `json:"abort"`
	Delay []DelayState `json:"delay"`
}

type AbortState struct {
	HttpStatus float64 `json:"http_status"`
	Percentage float64 `json:"percentage"`
}

type DelayState struct {
	FixedDelay string  `json:"fixed_delay"`
	Percentage float64 `json:"percentage"`
}

type RedirectState struct {
	HostRedirect  string  `json:"host_redirect"`
	HttpsRedirect bool    `json:"https_redirect"`
	PathRedirect  string  `json:"path_redirect"`
	PortRedirect  float64 `json:"port_redirect"`
	PrefixRewrite string  `json:"prefix_rewrite"`
	ResponseCode  string  `json:"response_code"`
	StripQuery    bool    `json:"strip_query"`
}

type RequestHeaderModifierState struct {
	Add    map[string]string `json:"add"`
	Remove []string          `json:"remove"`
	Set    map[string]string `json:"set"`
}

type RequestMirrorPolicyState struct {
	Destination []DestinationState `json:"destination"`
}

type DestinationState struct {
	ServiceName string  `json:"service_name"`
	Weight      float64 `json:"weight"`
}

type ResponseHeaderModifierState struct {
	Add    map[string]string `json:"add"`
	Remove []string          `json:"remove"`
	Set    map[string]string `json:"set"`
}

type RetryPolicyState struct {
	NumRetries      float64  `json:"num_retries"`
	PerTryTimeout   string   `json:"per_try_timeout"`
	RetryConditions []string `json:"retry_conditions"`
}

type UrlRewriteState struct {
	HostRewrite       string `json:"host_rewrite"`
	PathPrefixRewrite string `json:"path_prefix_rewrite"`
}

type MatchesState struct {
	FullPathMatch   string                 `json:"full_path_match"`
	IgnoreCase      bool                   `json:"ignore_case"`
	PrefixMatch     string                 `json:"prefix_match"`
	RegexMatch      string                 `json:"regex_match"`
	Headers         []HeadersState         `json:"headers"`
	QueryParameters []QueryParametersState `json:"query_parameters"`
}

type HeadersState struct {
	ExactMatch   string            `json:"exact_match"`
	Header       string            `json:"header"`
	InvertMatch  bool              `json:"invert_match"`
	PrefixMatch  string            `json:"prefix_match"`
	PresentMatch bool              `json:"present_match"`
	RegexMatch   string            `json:"regex_match"`
	SuffixMatch  string            `json:"suffix_match"`
	RangeMatch   []RangeMatchState `json:"range_match"`
}

type RangeMatchState struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type QueryParametersState struct {
	ExactMatch     string `json:"exact_match"`
	PresentMatch   bool   `json:"present_match"`
	QueryParameter string `json:"query_parameter"`
	RegexMatch     string `json:"regex_match"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
