// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	computenetworkattachment "github.com/golingon/terraproviders/googlebeta/4.83.0/computenetworkattachment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewComputeNetworkAttachment creates a new instance of [ComputeNetworkAttachment].
func NewComputeNetworkAttachment(name string, args ComputeNetworkAttachmentArgs) *ComputeNetworkAttachment {
	return &ComputeNetworkAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeNetworkAttachment)(nil)

// ComputeNetworkAttachment represents the Terraform resource google_compute_network_attachment.
type ComputeNetworkAttachment struct {
	Name      string
	Args      ComputeNetworkAttachmentArgs
	state     *computeNetworkAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ComputeNetworkAttachment].
func (cna *ComputeNetworkAttachment) Type() string {
	return "google_compute_network_attachment"
}

// LocalName returns the local name for [ComputeNetworkAttachment].
func (cna *ComputeNetworkAttachment) LocalName() string {
	return cna.Name
}

// Configuration returns the configuration (args) for [ComputeNetworkAttachment].
func (cna *ComputeNetworkAttachment) Configuration() interface{} {
	return cna.Args
}

// DependOn is used for other resources to depend on [ComputeNetworkAttachment].
func (cna *ComputeNetworkAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(cna)
}

// Dependencies returns the list of resources [ComputeNetworkAttachment] depends_on.
func (cna *ComputeNetworkAttachment) Dependencies() terra.Dependencies {
	return cna.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ComputeNetworkAttachment].
func (cna *ComputeNetworkAttachment) LifecycleManagement() *terra.Lifecycle {
	return cna.Lifecycle
}

// Attributes returns the attributes for [ComputeNetworkAttachment].
func (cna *ComputeNetworkAttachment) Attributes() computeNetworkAttachmentAttributes {
	return computeNetworkAttachmentAttributes{ref: terra.ReferenceResource(cna)}
}

// ImportState imports the given attribute values into [ComputeNetworkAttachment]'s state.
func (cna *ComputeNetworkAttachment) ImportState(av io.Reader) error {
	cna.state = &computeNetworkAttachmentState{}
	if err := json.NewDecoder(av).Decode(cna.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cna.Type(), cna.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ComputeNetworkAttachment] has state.
func (cna *ComputeNetworkAttachment) State() (*computeNetworkAttachmentState, bool) {
	return cna.state, cna.state != nil
}

// StateMust returns the state for [ComputeNetworkAttachment]. Panics if the state is nil.
func (cna *ComputeNetworkAttachment) StateMust() *computeNetworkAttachmentState {
	if cna.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cna.Type(), cna.LocalName()))
	}
	return cna.state
}

// ComputeNetworkAttachmentArgs contains the configurations for google_compute_network_attachment.
type ComputeNetworkAttachmentArgs struct {
	// ConnectionPreference: string, required
	ConnectionPreference terra.StringValue `hcl:"connection_preference,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProducerAcceptLists: list of string, optional
	ProducerAcceptLists terra.ListValue[terra.StringValue] `hcl:"producer_accept_lists,attr"`
	// ProducerRejectLists: list of string, optional
	ProducerRejectLists terra.ListValue[terra.StringValue] `hcl:"producer_reject_lists,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Subnetworks: list of string, required
	Subnetworks terra.ListValue[terra.StringValue] `hcl:"subnetworks,attr" validate:"required"`
	// ConnectionEndpoints: min=0
	ConnectionEndpoints []computenetworkattachment.ConnectionEndpoints `hcl:"connection_endpoints,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *computenetworkattachment.Timeouts `hcl:"timeouts,block"`
}
type computeNetworkAttachmentAttributes struct {
	ref terra.Reference
}

// ConnectionPreference returns a reference to field connection_preference of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) ConnectionPreference() terra.StringValue {
	return terra.ReferenceAsString(cna.ref.Append("connection_preference"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(cna.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cna.ref.Append("description"))
}

// Fingerprint returns a reference to field fingerprint of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(cna.ref.Append("fingerprint"))
}

// Id returns a reference to field id of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cna.ref.Append("id"))
}

// Kind returns a reference to field kind of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(cna.ref.Append("kind"))
}

// Name returns a reference to field name of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cna.ref.Append("name"))
}

// Network returns a reference to field network of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(cna.ref.Append("network"))
}

// ProducerAcceptLists returns a reference to field producer_accept_lists of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) ProducerAcceptLists() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cna.ref.Append("producer_accept_lists"))
}

// ProducerRejectLists returns a reference to field producer_reject_lists of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) ProducerRejectLists() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cna.ref.Append("producer_reject_lists"))
}

// Project returns a reference to field project of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(cna.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(cna.ref.Append("region"))
}

// SelfLink returns a reference to field self_link of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(cna.ref.Append("self_link"))
}

// SelfLinkWithId returns a reference to field self_link_with_id of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) SelfLinkWithId() terra.StringValue {
	return terra.ReferenceAsString(cna.ref.Append("self_link_with_id"))
}

// Subnetworks returns a reference to field subnetworks of google_compute_network_attachment.
func (cna computeNetworkAttachmentAttributes) Subnetworks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cna.ref.Append("subnetworks"))
}

func (cna computeNetworkAttachmentAttributes) ConnectionEndpoints() terra.ListValue[computenetworkattachment.ConnectionEndpointsAttributes] {
	return terra.ReferenceAsList[computenetworkattachment.ConnectionEndpointsAttributes](cna.ref.Append("connection_endpoints"))
}

func (cna computeNetworkAttachmentAttributes) Timeouts() computenetworkattachment.TimeoutsAttributes {
	return terra.ReferenceAsSingle[computenetworkattachment.TimeoutsAttributes](cna.ref.Append("timeouts"))
}

type computeNetworkAttachmentState struct {
	ConnectionPreference string                                              `json:"connection_preference"`
	CreationTimestamp    string                                              `json:"creation_timestamp"`
	Description          string                                              `json:"description"`
	Fingerprint          string                                              `json:"fingerprint"`
	Id                   string                                              `json:"id"`
	Kind                 string                                              `json:"kind"`
	Name                 string                                              `json:"name"`
	Network              string                                              `json:"network"`
	ProducerAcceptLists  []string                                            `json:"producer_accept_lists"`
	ProducerRejectLists  []string                                            `json:"producer_reject_lists"`
	Project              string                                              `json:"project"`
	Region               string                                              `json:"region"`
	SelfLink             string                                              `json:"self_link"`
	SelfLinkWithId       string                                              `json:"self_link_with_id"`
	Subnetworks          []string                                            `json:"subnetworks"`
	ConnectionEndpoints  []computenetworkattachment.ConnectionEndpointsState `json:"connection_endpoints"`
	Timeouts             *computenetworkattachment.TimeoutsState             `json:"timeouts"`
}
