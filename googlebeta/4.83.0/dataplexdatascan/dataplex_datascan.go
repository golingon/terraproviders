// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataplexdatascan

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type DataProfileResult struct {
	// DataProfileResultProfile: min=0
	Profile []DataProfileResultProfile `hcl:"profile,block" validate:"min=0"`
	// DataProfileResultScannedData: min=0
	ScannedData []DataProfileResultScannedData `hcl:"scanned_data,block" validate:"min=0"`
}

type DataProfileResultProfile struct {
	// Fields: min=0
	Fields []Fields `hcl:"fields,block" validate:"min=0"`
}

type Fields struct {
	// FieldsProfile: min=0
	Profile []FieldsProfile `hcl:"profile,block" validate:"min=0"`
}

type FieldsProfile struct {
	// DoubleProfile: min=0
	DoubleProfile []DoubleProfile `hcl:"double_profile,block" validate:"min=0"`
	// IntegerProfile: min=0
	IntegerProfile []IntegerProfile `hcl:"integer_profile,block" validate:"min=0"`
	// StringProfile: min=0
	StringProfile []StringProfile `hcl:"string_profile,block" validate:"min=0"`
	// TopNValues: min=0
	TopNValues []TopNValues `hcl:"top_n_values,block" validate:"min=0"`
}

type DoubleProfile struct{}

type IntegerProfile struct{}

type StringProfile struct{}

type TopNValues struct{}

type DataProfileResultScannedData struct {
	// DataProfileResultScannedDataIncrementalField: min=0
	IncrementalField []DataProfileResultScannedDataIncrementalField `hcl:"incremental_field,block" validate:"min=0"`
}

type DataProfileResultScannedDataIncrementalField struct{}

type DataQualityResult struct {
	// Dimensions: min=0
	Dimensions []Dimensions `hcl:"dimensions,block" validate:"min=0"`
	// DataQualityResultRules: min=0
	Rules []DataQualityResultRules `hcl:"rules,block" validate:"min=0"`
	// DataQualityResultScannedData: min=0
	ScannedData []DataQualityResultScannedData `hcl:"scanned_data,block" validate:"min=0"`
}

type Dimensions struct{}

type DataQualityResultRules struct {
	// Rule: min=0
	Rule []Rule `hcl:"rule,block" validate:"min=0"`
}

type Rule struct {
	// RuleNonNullExpectation: min=0
	NonNullExpectation []RuleNonNullExpectation `hcl:"non_null_expectation,block" validate:"min=0"`
	// RuleRangeExpectation: min=0
	RangeExpectation []RuleRangeExpectation `hcl:"range_expectation,block" validate:"min=0"`
	// RuleRegexExpectation: min=0
	RegexExpectation []RuleRegexExpectation `hcl:"regex_expectation,block" validate:"min=0"`
	// RuleRowConditionExpectation: min=0
	RowConditionExpectation []RuleRowConditionExpectation `hcl:"row_condition_expectation,block" validate:"min=0"`
	// RuleSetExpectation: min=0
	SetExpectation []RuleSetExpectation `hcl:"set_expectation,block" validate:"min=0"`
	// RuleStatisticRangeExpectation: min=0
	StatisticRangeExpectation []RuleStatisticRangeExpectation `hcl:"statistic_range_expectation,block" validate:"min=0"`
	// RuleTableConditionExpectation: min=0
	TableConditionExpectation []RuleTableConditionExpectation `hcl:"table_condition_expectation,block" validate:"min=0"`
	// RuleUniquenessExpectation: min=0
	UniquenessExpectation []RuleUniquenessExpectation `hcl:"uniqueness_expectation,block" validate:"min=0"`
}

type RuleNonNullExpectation struct{}

type RuleRangeExpectation struct{}

type RuleRegexExpectation struct{}

type RuleRowConditionExpectation struct{}

type RuleSetExpectation struct{}

type RuleStatisticRangeExpectation struct{}

type RuleTableConditionExpectation struct{}

type RuleUniquenessExpectation struct{}

type DataQualityResultScannedData struct {
	// DataQualityResultScannedDataIncrementalField: min=0
	IncrementalField []DataQualityResultScannedDataIncrementalField `hcl:"incremental_field,block" validate:"min=0"`
}

type DataQualityResultScannedDataIncrementalField struct{}

type ExecutionStatus struct{}

type Data struct {
	// Entity: string, optional
	Entity terra.StringValue `hcl:"entity,attr"`
	// Resource: string, optional
	Resource terra.StringValue `hcl:"resource,attr"`
}

type DataProfileSpec struct {
	// RowFilter: string, optional
	RowFilter terra.StringValue `hcl:"row_filter,attr"`
	// SamplingPercent: number, optional
	SamplingPercent terra.NumberValue `hcl:"sampling_percent,attr"`
	// ExcludeFields: optional
	ExcludeFields *ExcludeFields `hcl:"exclude_fields,block"`
	// IncludeFields: optional
	IncludeFields *IncludeFields `hcl:"include_fields,block"`
	// DataProfileSpecPostScanActions: optional
	PostScanActions *DataProfileSpecPostScanActions `hcl:"post_scan_actions,block"`
}

type ExcludeFields struct {
	// FieldNames: list of string, optional
	FieldNames terra.ListValue[terra.StringValue] `hcl:"field_names,attr"`
}

type IncludeFields struct {
	// FieldNames: list of string, optional
	FieldNames terra.ListValue[terra.StringValue] `hcl:"field_names,attr"`
}

type DataProfileSpecPostScanActions struct {
	// DataProfileSpecPostScanActionsBigqueryExport: optional
	BigqueryExport *DataProfileSpecPostScanActionsBigqueryExport `hcl:"bigquery_export,block"`
}

type DataProfileSpecPostScanActionsBigqueryExport struct {
	// ResultsTable: string, optional
	ResultsTable terra.StringValue `hcl:"results_table,attr"`
}

type DataQualitySpec struct {
	// RowFilter: string, optional
	RowFilter terra.StringValue `hcl:"row_filter,attr"`
	// SamplingPercent: number, optional
	SamplingPercent terra.NumberValue `hcl:"sampling_percent,attr"`
	// DataQualitySpecPostScanActions: optional
	PostScanActions *DataQualitySpecPostScanActions `hcl:"post_scan_actions,block"`
	// DataQualitySpecRules: min=0
	Rules []DataQualitySpecRules `hcl:"rules,block" validate:"min=0"`
}

type DataQualitySpecPostScanActions struct {
	// DataQualitySpecPostScanActionsBigqueryExport: optional
	BigqueryExport *DataQualitySpecPostScanActionsBigqueryExport `hcl:"bigquery_export,block"`
}

type DataQualitySpecPostScanActionsBigqueryExport struct {
	// ResultsTable: string, optional
	ResultsTable terra.StringValue `hcl:"results_table,attr"`
}

type DataQualitySpecRules struct {
	// Column: string, optional
	Column terra.StringValue `hcl:"column,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Dimension: string, required
	Dimension terra.StringValue `hcl:"dimension,attr" validate:"required"`
	// IgnoreNull: bool, optional
	IgnoreNull terra.BoolValue `hcl:"ignore_null,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Threshold: number, optional
	Threshold terra.NumberValue `hcl:"threshold,attr"`
	// RulesNonNullExpectation: optional
	NonNullExpectation *RulesNonNullExpectation `hcl:"non_null_expectation,block"`
	// RulesRangeExpectation: optional
	RangeExpectation *RulesRangeExpectation `hcl:"range_expectation,block"`
	// RulesRegexExpectation: optional
	RegexExpectation *RulesRegexExpectation `hcl:"regex_expectation,block"`
	// RulesRowConditionExpectation: optional
	RowConditionExpectation *RulesRowConditionExpectation `hcl:"row_condition_expectation,block"`
	// RulesSetExpectation: optional
	SetExpectation *RulesSetExpectation `hcl:"set_expectation,block"`
	// RulesStatisticRangeExpectation: optional
	StatisticRangeExpectation *RulesStatisticRangeExpectation `hcl:"statistic_range_expectation,block"`
	// RulesTableConditionExpectation: optional
	TableConditionExpectation *RulesTableConditionExpectation `hcl:"table_condition_expectation,block"`
	// RulesUniquenessExpectation: optional
	UniquenessExpectation *RulesUniquenessExpectation `hcl:"uniqueness_expectation,block"`
}

type RulesNonNullExpectation struct{}

type RulesRangeExpectation struct {
	// MaxValue: string, optional
	MaxValue terra.StringValue `hcl:"max_value,attr"`
	// MinValue: string, optional
	MinValue terra.StringValue `hcl:"min_value,attr"`
	// StrictMaxEnabled: bool, optional
	StrictMaxEnabled terra.BoolValue `hcl:"strict_max_enabled,attr"`
	// StrictMinEnabled: bool, optional
	StrictMinEnabled terra.BoolValue `hcl:"strict_min_enabled,attr"`
}

type RulesRegexExpectation struct {
	// Regex: string, required
	Regex terra.StringValue `hcl:"regex,attr" validate:"required"`
}

type RulesRowConditionExpectation struct {
	// SqlExpression: string, required
	SqlExpression terra.StringValue `hcl:"sql_expression,attr" validate:"required"`
}

type RulesSetExpectation struct {
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type RulesStatisticRangeExpectation struct {
	// MaxValue: string, optional
	MaxValue terra.StringValue `hcl:"max_value,attr"`
	// MinValue: string, optional
	MinValue terra.StringValue `hcl:"min_value,attr"`
	// Statistic: string, required
	Statistic terra.StringValue `hcl:"statistic,attr" validate:"required"`
	// StrictMaxEnabled: bool, optional
	StrictMaxEnabled terra.BoolValue `hcl:"strict_max_enabled,attr"`
	// StrictMinEnabled: bool, optional
	StrictMinEnabled terra.BoolValue `hcl:"strict_min_enabled,attr"`
}

type RulesTableConditionExpectation struct {
	// SqlExpression: string, required
	SqlExpression terra.StringValue `hcl:"sql_expression,attr" validate:"required"`
}

type RulesUniquenessExpectation struct{}

type ExecutionSpec struct {
	// Field: string, optional
	Field terra.StringValue `hcl:"field,attr"`
	// Trigger: required
	Trigger *Trigger `hcl:"trigger,block" validate:"required"`
}

type Trigger struct {
	// OnDemand: optional
	OnDemand *OnDemand `hcl:"on_demand,block"`
	// Schedule: optional
	Schedule *Schedule `hcl:"schedule,block"`
}

type OnDemand struct{}

type Schedule struct {
	// Cron: string, required
	Cron terra.StringValue `hcl:"cron,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DataProfileResultAttributes struct {
	ref terra.Reference
}

func (dpr DataProfileResultAttributes) InternalRef() (terra.Reference, error) {
	return dpr.ref, nil
}

func (dpr DataProfileResultAttributes) InternalWithRef(ref terra.Reference) DataProfileResultAttributes {
	return DataProfileResultAttributes{ref: ref}
}

func (dpr DataProfileResultAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dpr.ref.InternalTokens()
}

func (dpr DataProfileResultAttributes) RowCount() terra.StringValue {
	return terra.ReferenceAsString(dpr.ref.Append("row_count"))
}

func (dpr DataProfileResultAttributes) Profile() terra.ListValue[DataProfileResultProfileAttributes] {
	return terra.ReferenceAsList[DataProfileResultProfileAttributes](dpr.ref.Append("profile"))
}

func (dpr DataProfileResultAttributes) ScannedData() terra.ListValue[DataProfileResultScannedDataAttributes] {
	return terra.ReferenceAsList[DataProfileResultScannedDataAttributes](dpr.ref.Append("scanned_data"))
}

type DataProfileResultProfileAttributes struct {
	ref terra.Reference
}

func (p DataProfileResultProfileAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DataProfileResultProfileAttributes) InternalWithRef(ref terra.Reference) DataProfileResultProfileAttributes {
	return DataProfileResultProfileAttributes{ref: ref}
}

func (p DataProfileResultProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DataProfileResultProfileAttributes) Fields() terra.ListValue[FieldsAttributes] {
	return terra.ReferenceAsList[FieldsAttributes](p.ref.Append("fields"))
}

type FieldsAttributes struct {
	ref terra.Reference
}

func (f FieldsAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FieldsAttributes) InternalWithRef(ref terra.Reference) FieldsAttributes {
	return FieldsAttributes{ref: ref}
}

func (f FieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FieldsAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("mode"))
}

func (f FieldsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("name"))
}

func (f FieldsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("type"))
}

func (f FieldsAttributes) Profile() terra.ListValue[FieldsProfileAttributes] {
	return terra.ReferenceAsList[FieldsProfileAttributes](f.ref.Append("profile"))
}

type FieldsProfileAttributes struct {
	ref terra.Reference
}

func (p FieldsProfileAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p FieldsProfileAttributes) InternalWithRef(ref terra.Reference) FieldsProfileAttributes {
	return FieldsProfileAttributes{ref: ref}
}

func (p FieldsProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p FieldsProfileAttributes) DistinctRatio() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("distinct_ratio"))
}

func (p FieldsProfileAttributes) NullRatio() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("null_ratio"))
}

func (p FieldsProfileAttributes) DoubleProfile() terra.ListValue[DoubleProfileAttributes] {
	return terra.ReferenceAsList[DoubleProfileAttributes](p.ref.Append("double_profile"))
}

func (p FieldsProfileAttributes) IntegerProfile() terra.ListValue[IntegerProfileAttributes] {
	return terra.ReferenceAsList[IntegerProfileAttributes](p.ref.Append("integer_profile"))
}

func (p FieldsProfileAttributes) StringProfile() terra.ListValue[StringProfileAttributes] {
	return terra.ReferenceAsList[StringProfileAttributes](p.ref.Append("string_profile"))
}

func (p FieldsProfileAttributes) TopNValues() terra.ListValue[TopNValuesAttributes] {
	return terra.ReferenceAsList[TopNValuesAttributes](p.ref.Append("top_n_values"))
}

type DoubleProfileAttributes struct {
	ref terra.Reference
}

func (dp DoubleProfileAttributes) InternalRef() (terra.Reference, error) {
	return dp.ref, nil
}

func (dp DoubleProfileAttributes) InternalWithRef(ref terra.Reference) DoubleProfileAttributes {
	return DoubleProfileAttributes{ref: ref}
}

func (dp DoubleProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dp.ref.InternalTokens()
}

func (dp DoubleProfileAttributes) Average() terra.NumberValue {
	return terra.ReferenceAsNumber(dp.ref.Append("average"))
}

func (dp DoubleProfileAttributes) Max() terra.StringValue {
	return terra.ReferenceAsString(dp.ref.Append("max"))
}

func (dp DoubleProfileAttributes) Min() terra.StringValue {
	return terra.ReferenceAsString(dp.ref.Append("min"))
}

func (dp DoubleProfileAttributes) Quartiles() terra.StringValue {
	return terra.ReferenceAsString(dp.ref.Append("quartiles"))
}

func (dp DoubleProfileAttributes) StandardDeviation() terra.NumberValue {
	return terra.ReferenceAsNumber(dp.ref.Append("standard_deviation"))
}

type IntegerProfileAttributes struct {
	ref terra.Reference
}

func (ip IntegerProfileAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip IntegerProfileAttributes) InternalWithRef(ref terra.Reference) IntegerProfileAttributes {
	return IntegerProfileAttributes{ref: ref}
}

func (ip IntegerProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip IntegerProfileAttributes) Average() terra.NumberValue {
	return terra.ReferenceAsNumber(ip.ref.Append("average"))
}

func (ip IntegerProfileAttributes) Max() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("max"))
}

func (ip IntegerProfileAttributes) Min() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("min"))
}

func (ip IntegerProfileAttributes) Quartiles() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("quartiles"))
}

func (ip IntegerProfileAttributes) StandardDeviation() terra.NumberValue {
	return terra.ReferenceAsNumber(ip.ref.Append("standard_deviation"))
}

type StringProfileAttributes struct {
	ref terra.Reference
}

func (sp StringProfileAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp StringProfileAttributes) InternalWithRef(ref terra.Reference) StringProfileAttributes {
	return StringProfileAttributes{ref: ref}
}

func (sp StringProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp StringProfileAttributes) AverageLength() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("average_length"))
}

func (sp StringProfileAttributes) MaxLength() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("max_length"))
}

func (sp StringProfileAttributes) MinLength() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("min_length"))
}

type TopNValuesAttributes struct {
	ref terra.Reference
}

func (tnv TopNValuesAttributes) InternalRef() (terra.Reference, error) {
	return tnv.ref, nil
}

func (tnv TopNValuesAttributes) InternalWithRef(ref terra.Reference) TopNValuesAttributes {
	return TopNValuesAttributes{ref: ref}
}

func (tnv TopNValuesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tnv.ref.InternalTokens()
}

func (tnv TopNValuesAttributes) Count() terra.StringValue {
	return terra.ReferenceAsString(tnv.ref.Append("count"))
}

func (tnv TopNValuesAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(tnv.ref.Append("value"))
}

type DataProfileResultScannedDataAttributes struct {
	ref terra.Reference
}

func (sd DataProfileResultScannedDataAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd DataProfileResultScannedDataAttributes) InternalWithRef(ref terra.Reference) DataProfileResultScannedDataAttributes {
	return DataProfileResultScannedDataAttributes{ref: ref}
}

func (sd DataProfileResultScannedDataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd DataProfileResultScannedDataAttributes) IncrementalField() terra.ListValue[DataProfileResultScannedDataIncrementalFieldAttributes] {
	return terra.ReferenceAsList[DataProfileResultScannedDataIncrementalFieldAttributes](sd.ref.Append("incremental_field"))
}

type DataProfileResultScannedDataIncrementalFieldAttributes struct {
	ref terra.Reference
}

func (_if DataProfileResultScannedDataIncrementalFieldAttributes) InternalRef() (terra.Reference, error) {
	return _if.ref, nil
}

func (_if DataProfileResultScannedDataIncrementalFieldAttributes) InternalWithRef(ref terra.Reference) DataProfileResultScannedDataIncrementalFieldAttributes {
	return DataProfileResultScannedDataIncrementalFieldAttributes{ref: ref}
}

func (_if DataProfileResultScannedDataIncrementalFieldAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _if.ref.InternalTokens()
}

func (_if DataProfileResultScannedDataIncrementalFieldAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("end"))
}

func (_if DataProfileResultScannedDataIncrementalFieldAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("field"))
}

func (_if DataProfileResultScannedDataIncrementalFieldAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("start"))
}

type DataQualityResultAttributes struct {
	ref terra.Reference
}

func (dqr DataQualityResultAttributes) InternalRef() (terra.Reference, error) {
	return dqr.ref, nil
}

func (dqr DataQualityResultAttributes) InternalWithRef(ref terra.Reference) DataQualityResultAttributes {
	return DataQualityResultAttributes{ref: ref}
}

func (dqr DataQualityResultAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dqr.ref.InternalTokens()
}

func (dqr DataQualityResultAttributes) Passed() terra.BoolValue {
	return terra.ReferenceAsBool(dqr.ref.Append("passed"))
}

func (dqr DataQualityResultAttributes) RowCount() terra.StringValue {
	return terra.ReferenceAsString(dqr.ref.Append("row_count"))
}

func (dqr DataQualityResultAttributes) Dimensions() terra.ListValue[DimensionsAttributes] {
	return terra.ReferenceAsList[DimensionsAttributes](dqr.ref.Append("dimensions"))
}

func (dqr DataQualityResultAttributes) Rules() terra.ListValue[DataQualityResultRulesAttributes] {
	return terra.ReferenceAsList[DataQualityResultRulesAttributes](dqr.ref.Append("rules"))
}

func (dqr DataQualityResultAttributes) ScannedData() terra.ListValue[DataQualityResultScannedDataAttributes] {
	return terra.ReferenceAsList[DataQualityResultScannedDataAttributes](dqr.ref.Append("scanned_data"))
}

type DimensionsAttributes struct {
	ref terra.Reference
}

func (d DimensionsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DimensionsAttributes) InternalWithRef(ref terra.Reference) DimensionsAttributes {
	return DimensionsAttributes{ref: ref}
}

func (d DimensionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DimensionsAttributes) Passed() terra.BoolValue {
	return terra.ReferenceAsBool(d.ref.Append("passed"))
}

type DataQualityResultRulesAttributes struct {
	ref terra.Reference
}

func (r DataQualityResultRulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataQualityResultRulesAttributes) InternalWithRef(ref terra.Reference) DataQualityResultRulesAttributes {
	return DataQualityResultRulesAttributes{ref: ref}
}

func (r DataQualityResultRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataQualityResultRulesAttributes) EvaluatedCount() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("evaluated_count"))
}

func (r DataQualityResultRulesAttributes) FailingRowsQuery() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("failing_rows_query"))
}

func (r DataQualityResultRulesAttributes) NullCount() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("null_count"))
}

func (r DataQualityResultRulesAttributes) PassRatio() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("pass_ratio"))
}

func (r DataQualityResultRulesAttributes) Passed() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("passed"))
}

func (r DataQualityResultRulesAttributes) PassedCount() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("passed_count"))
}

func (r DataQualityResultRulesAttributes) Rule() terra.ListValue[RuleAttributes] {
	return terra.ReferenceAsList[RuleAttributes](r.ref.Append("rule"))
}

type RuleAttributes struct {
	ref terra.Reference
}

func (r RuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RuleAttributes) InternalWithRef(ref terra.Reference) RuleAttributes {
	return RuleAttributes{ref: ref}
}

func (r RuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RuleAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("column"))
}

func (r RuleAttributes) Dimension() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("dimension"))
}

func (r RuleAttributes) IgnoreNull() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("ignore_null"))
}

func (r RuleAttributes) Threshold() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("threshold"))
}

func (r RuleAttributes) NonNullExpectation() terra.ListValue[RuleNonNullExpectationAttributes] {
	return terra.ReferenceAsList[RuleNonNullExpectationAttributes](r.ref.Append("non_null_expectation"))
}

func (r RuleAttributes) RangeExpectation() terra.ListValue[RuleRangeExpectationAttributes] {
	return terra.ReferenceAsList[RuleRangeExpectationAttributes](r.ref.Append("range_expectation"))
}

func (r RuleAttributes) RegexExpectation() terra.ListValue[RuleRegexExpectationAttributes] {
	return terra.ReferenceAsList[RuleRegexExpectationAttributes](r.ref.Append("regex_expectation"))
}

func (r RuleAttributes) RowConditionExpectation() terra.ListValue[RuleRowConditionExpectationAttributes] {
	return terra.ReferenceAsList[RuleRowConditionExpectationAttributes](r.ref.Append("row_condition_expectation"))
}

func (r RuleAttributes) SetExpectation() terra.ListValue[RuleSetExpectationAttributes] {
	return terra.ReferenceAsList[RuleSetExpectationAttributes](r.ref.Append("set_expectation"))
}

func (r RuleAttributes) StatisticRangeExpectation() terra.ListValue[RuleStatisticRangeExpectationAttributes] {
	return terra.ReferenceAsList[RuleStatisticRangeExpectationAttributes](r.ref.Append("statistic_range_expectation"))
}

func (r RuleAttributes) TableConditionExpectation() terra.ListValue[RuleTableConditionExpectationAttributes] {
	return terra.ReferenceAsList[RuleTableConditionExpectationAttributes](r.ref.Append("table_condition_expectation"))
}

func (r RuleAttributes) UniquenessExpectation() terra.ListValue[RuleUniquenessExpectationAttributes] {
	return terra.ReferenceAsList[RuleUniquenessExpectationAttributes](r.ref.Append("uniqueness_expectation"))
}

type RuleNonNullExpectationAttributes struct {
	ref terra.Reference
}

func (nne RuleNonNullExpectationAttributes) InternalRef() (terra.Reference, error) {
	return nne.ref, nil
}

func (nne RuleNonNullExpectationAttributes) InternalWithRef(ref terra.Reference) RuleNonNullExpectationAttributes {
	return RuleNonNullExpectationAttributes{ref: ref}
}

func (nne RuleNonNullExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nne.ref.InternalTokens()
}

type RuleRangeExpectationAttributes struct {
	ref terra.Reference
}

func (re RuleRangeExpectationAttributes) InternalRef() (terra.Reference, error) {
	return re.ref, nil
}

func (re RuleRangeExpectationAttributes) InternalWithRef(ref terra.Reference) RuleRangeExpectationAttributes {
	return RuleRangeExpectationAttributes{ref: ref}
}

func (re RuleRangeExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return re.ref.InternalTokens()
}

func (re RuleRangeExpectationAttributes) MaxValue() terra.StringValue {
	return terra.ReferenceAsString(re.ref.Append("max_value"))
}

func (re RuleRangeExpectationAttributes) MinValue() terra.StringValue {
	return terra.ReferenceAsString(re.ref.Append("min_value"))
}

func (re RuleRangeExpectationAttributes) StrictMaxEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(re.ref.Append("strict_max_enabled"))
}

func (re RuleRangeExpectationAttributes) StrictMinEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(re.ref.Append("strict_min_enabled"))
}

type RuleRegexExpectationAttributes struct {
	ref terra.Reference
}

func (re RuleRegexExpectationAttributes) InternalRef() (terra.Reference, error) {
	return re.ref, nil
}

func (re RuleRegexExpectationAttributes) InternalWithRef(ref terra.Reference) RuleRegexExpectationAttributes {
	return RuleRegexExpectationAttributes{ref: ref}
}

func (re RuleRegexExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return re.ref.InternalTokens()
}

func (re RuleRegexExpectationAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(re.ref.Append("regex"))
}

type RuleRowConditionExpectationAttributes struct {
	ref terra.Reference
}

func (rce RuleRowConditionExpectationAttributes) InternalRef() (terra.Reference, error) {
	return rce.ref, nil
}

func (rce RuleRowConditionExpectationAttributes) InternalWithRef(ref terra.Reference) RuleRowConditionExpectationAttributes {
	return RuleRowConditionExpectationAttributes{ref: ref}
}

func (rce RuleRowConditionExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rce.ref.InternalTokens()
}

func (rce RuleRowConditionExpectationAttributes) SqlExpression() terra.StringValue {
	return terra.ReferenceAsString(rce.ref.Append("sql_expression"))
}

type RuleSetExpectationAttributes struct {
	ref terra.Reference
}

func (se RuleSetExpectationAttributes) InternalRef() (terra.Reference, error) {
	return se.ref, nil
}

func (se RuleSetExpectationAttributes) InternalWithRef(ref terra.Reference) RuleSetExpectationAttributes {
	return RuleSetExpectationAttributes{ref: ref}
}

func (se RuleSetExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return se.ref.InternalTokens()
}

func (se RuleSetExpectationAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](se.ref.Append("values"))
}

type RuleStatisticRangeExpectationAttributes struct {
	ref terra.Reference
}

func (sre RuleStatisticRangeExpectationAttributes) InternalRef() (terra.Reference, error) {
	return sre.ref, nil
}

func (sre RuleStatisticRangeExpectationAttributes) InternalWithRef(ref terra.Reference) RuleStatisticRangeExpectationAttributes {
	return RuleStatisticRangeExpectationAttributes{ref: ref}
}

func (sre RuleStatisticRangeExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sre.ref.InternalTokens()
}

func (sre RuleStatisticRangeExpectationAttributes) MaxValue() terra.StringValue {
	return terra.ReferenceAsString(sre.ref.Append("max_value"))
}

func (sre RuleStatisticRangeExpectationAttributes) MinValue() terra.StringValue {
	return terra.ReferenceAsString(sre.ref.Append("min_value"))
}

func (sre RuleStatisticRangeExpectationAttributes) Statistic() terra.StringValue {
	return terra.ReferenceAsString(sre.ref.Append("statistic"))
}

func (sre RuleStatisticRangeExpectationAttributes) StrictMaxEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sre.ref.Append("strict_max_enabled"))
}

func (sre RuleStatisticRangeExpectationAttributes) StrictMinEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sre.ref.Append("strict_min_enabled"))
}

type RuleTableConditionExpectationAttributes struct {
	ref terra.Reference
}

func (tce RuleTableConditionExpectationAttributes) InternalRef() (terra.Reference, error) {
	return tce.ref, nil
}

func (tce RuleTableConditionExpectationAttributes) InternalWithRef(ref terra.Reference) RuleTableConditionExpectationAttributes {
	return RuleTableConditionExpectationAttributes{ref: ref}
}

func (tce RuleTableConditionExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tce.ref.InternalTokens()
}

func (tce RuleTableConditionExpectationAttributes) SqlExpression() terra.StringValue {
	return terra.ReferenceAsString(tce.ref.Append("sql_expression"))
}

type RuleUniquenessExpectationAttributes struct {
	ref terra.Reference
}

func (ue RuleUniquenessExpectationAttributes) InternalRef() (terra.Reference, error) {
	return ue.ref, nil
}

func (ue RuleUniquenessExpectationAttributes) InternalWithRef(ref terra.Reference) RuleUniquenessExpectationAttributes {
	return RuleUniquenessExpectationAttributes{ref: ref}
}

func (ue RuleUniquenessExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ue.ref.InternalTokens()
}

type DataQualityResultScannedDataAttributes struct {
	ref terra.Reference
}

func (sd DataQualityResultScannedDataAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd DataQualityResultScannedDataAttributes) InternalWithRef(ref terra.Reference) DataQualityResultScannedDataAttributes {
	return DataQualityResultScannedDataAttributes{ref: ref}
}

func (sd DataQualityResultScannedDataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd DataQualityResultScannedDataAttributes) IncrementalField() terra.ListValue[DataQualityResultScannedDataIncrementalFieldAttributes] {
	return terra.ReferenceAsList[DataQualityResultScannedDataIncrementalFieldAttributes](sd.ref.Append("incremental_field"))
}

type DataQualityResultScannedDataIncrementalFieldAttributes struct {
	ref terra.Reference
}

func (_if DataQualityResultScannedDataIncrementalFieldAttributes) InternalRef() (terra.Reference, error) {
	return _if.ref, nil
}

func (_if DataQualityResultScannedDataIncrementalFieldAttributes) InternalWithRef(ref terra.Reference) DataQualityResultScannedDataIncrementalFieldAttributes {
	return DataQualityResultScannedDataIncrementalFieldAttributes{ref: ref}
}

func (_if DataQualityResultScannedDataIncrementalFieldAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _if.ref.InternalTokens()
}

func (_if DataQualityResultScannedDataIncrementalFieldAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("end"))
}

func (_if DataQualityResultScannedDataIncrementalFieldAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("field"))
}

func (_if DataQualityResultScannedDataIncrementalFieldAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("start"))
}

type ExecutionStatusAttributes struct {
	ref terra.Reference
}

func (es ExecutionStatusAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es ExecutionStatusAttributes) InternalWithRef(ref terra.Reference) ExecutionStatusAttributes {
	return ExecutionStatusAttributes{ref: ref}
}

func (es ExecutionStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es ExecutionStatusAttributes) LatestJobEndTime() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("latest_job_end_time"))
}

func (es ExecutionStatusAttributes) LatestJobStartTime() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("latest_job_start_time"))
}

type DataAttributes struct {
	ref terra.Reference
}

func (d DataAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DataAttributes) InternalWithRef(ref terra.Reference) DataAttributes {
	return DataAttributes{ref: ref}
}

func (d DataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DataAttributes) Entity() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("entity"))
}

func (d DataAttributes) Resource() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("resource"))
}

type DataProfileSpecAttributes struct {
	ref terra.Reference
}

func (dps DataProfileSpecAttributes) InternalRef() (terra.Reference, error) {
	return dps.ref, nil
}

func (dps DataProfileSpecAttributes) InternalWithRef(ref terra.Reference) DataProfileSpecAttributes {
	return DataProfileSpecAttributes{ref: ref}
}

func (dps DataProfileSpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dps.ref.InternalTokens()
}

func (dps DataProfileSpecAttributes) RowFilter() terra.StringValue {
	return terra.ReferenceAsString(dps.ref.Append("row_filter"))
}

func (dps DataProfileSpecAttributes) SamplingPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(dps.ref.Append("sampling_percent"))
}

func (dps DataProfileSpecAttributes) ExcludeFields() terra.ListValue[ExcludeFieldsAttributes] {
	return terra.ReferenceAsList[ExcludeFieldsAttributes](dps.ref.Append("exclude_fields"))
}

func (dps DataProfileSpecAttributes) IncludeFields() terra.ListValue[IncludeFieldsAttributes] {
	return terra.ReferenceAsList[IncludeFieldsAttributes](dps.ref.Append("include_fields"))
}

func (dps DataProfileSpecAttributes) PostScanActions() terra.ListValue[DataProfileSpecPostScanActionsAttributes] {
	return terra.ReferenceAsList[DataProfileSpecPostScanActionsAttributes](dps.ref.Append("post_scan_actions"))
}

type ExcludeFieldsAttributes struct {
	ref terra.Reference
}

func (ef ExcludeFieldsAttributes) InternalRef() (terra.Reference, error) {
	return ef.ref, nil
}

func (ef ExcludeFieldsAttributes) InternalWithRef(ref terra.Reference) ExcludeFieldsAttributes {
	return ExcludeFieldsAttributes{ref: ref}
}

func (ef ExcludeFieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ef.ref.InternalTokens()
}

func (ef ExcludeFieldsAttributes) FieldNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ef.ref.Append("field_names"))
}

type IncludeFieldsAttributes struct {
	ref terra.Reference
}

func (_if IncludeFieldsAttributes) InternalRef() (terra.Reference, error) {
	return _if.ref, nil
}

func (_if IncludeFieldsAttributes) InternalWithRef(ref terra.Reference) IncludeFieldsAttributes {
	return IncludeFieldsAttributes{ref: ref}
}

func (_if IncludeFieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _if.ref.InternalTokens()
}

func (_if IncludeFieldsAttributes) FieldNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](_if.ref.Append("field_names"))
}

type DataProfileSpecPostScanActionsAttributes struct {
	ref terra.Reference
}

func (psa DataProfileSpecPostScanActionsAttributes) InternalRef() (terra.Reference, error) {
	return psa.ref, nil
}

func (psa DataProfileSpecPostScanActionsAttributes) InternalWithRef(ref terra.Reference) DataProfileSpecPostScanActionsAttributes {
	return DataProfileSpecPostScanActionsAttributes{ref: ref}
}

func (psa DataProfileSpecPostScanActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return psa.ref.InternalTokens()
}

func (psa DataProfileSpecPostScanActionsAttributes) BigqueryExport() terra.ListValue[DataProfileSpecPostScanActionsBigqueryExportAttributes] {
	return terra.ReferenceAsList[DataProfileSpecPostScanActionsBigqueryExportAttributes](psa.ref.Append("bigquery_export"))
}

type DataProfileSpecPostScanActionsBigqueryExportAttributes struct {
	ref terra.Reference
}

func (be DataProfileSpecPostScanActionsBigqueryExportAttributes) InternalRef() (terra.Reference, error) {
	return be.ref, nil
}

func (be DataProfileSpecPostScanActionsBigqueryExportAttributes) InternalWithRef(ref terra.Reference) DataProfileSpecPostScanActionsBigqueryExportAttributes {
	return DataProfileSpecPostScanActionsBigqueryExportAttributes{ref: ref}
}

func (be DataProfileSpecPostScanActionsBigqueryExportAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return be.ref.InternalTokens()
}

func (be DataProfileSpecPostScanActionsBigqueryExportAttributes) ResultsTable() terra.StringValue {
	return terra.ReferenceAsString(be.ref.Append("results_table"))
}

type DataQualitySpecAttributes struct {
	ref terra.Reference
}

func (dqs DataQualitySpecAttributes) InternalRef() (terra.Reference, error) {
	return dqs.ref, nil
}

func (dqs DataQualitySpecAttributes) InternalWithRef(ref terra.Reference) DataQualitySpecAttributes {
	return DataQualitySpecAttributes{ref: ref}
}

func (dqs DataQualitySpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dqs.ref.InternalTokens()
}

func (dqs DataQualitySpecAttributes) RowFilter() terra.StringValue {
	return terra.ReferenceAsString(dqs.ref.Append("row_filter"))
}

func (dqs DataQualitySpecAttributes) SamplingPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(dqs.ref.Append("sampling_percent"))
}

func (dqs DataQualitySpecAttributes) PostScanActions() terra.ListValue[DataQualitySpecPostScanActionsAttributes] {
	return terra.ReferenceAsList[DataQualitySpecPostScanActionsAttributes](dqs.ref.Append("post_scan_actions"))
}

func (dqs DataQualitySpecAttributes) Rules() terra.ListValue[DataQualitySpecRulesAttributes] {
	return terra.ReferenceAsList[DataQualitySpecRulesAttributes](dqs.ref.Append("rules"))
}

type DataQualitySpecPostScanActionsAttributes struct {
	ref terra.Reference
}

func (psa DataQualitySpecPostScanActionsAttributes) InternalRef() (terra.Reference, error) {
	return psa.ref, nil
}

func (psa DataQualitySpecPostScanActionsAttributes) InternalWithRef(ref terra.Reference) DataQualitySpecPostScanActionsAttributes {
	return DataQualitySpecPostScanActionsAttributes{ref: ref}
}

func (psa DataQualitySpecPostScanActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return psa.ref.InternalTokens()
}

func (psa DataQualitySpecPostScanActionsAttributes) BigqueryExport() terra.ListValue[DataQualitySpecPostScanActionsBigqueryExportAttributes] {
	return terra.ReferenceAsList[DataQualitySpecPostScanActionsBigqueryExportAttributes](psa.ref.Append("bigquery_export"))
}

type DataQualitySpecPostScanActionsBigqueryExportAttributes struct {
	ref terra.Reference
}

func (be DataQualitySpecPostScanActionsBigqueryExportAttributes) InternalRef() (terra.Reference, error) {
	return be.ref, nil
}

func (be DataQualitySpecPostScanActionsBigqueryExportAttributes) InternalWithRef(ref terra.Reference) DataQualitySpecPostScanActionsBigqueryExportAttributes {
	return DataQualitySpecPostScanActionsBigqueryExportAttributes{ref: ref}
}

func (be DataQualitySpecPostScanActionsBigqueryExportAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return be.ref.InternalTokens()
}

func (be DataQualitySpecPostScanActionsBigqueryExportAttributes) ResultsTable() terra.StringValue {
	return terra.ReferenceAsString(be.ref.Append("results_table"))
}

type DataQualitySpecRulesAttributes struct {
	ref terra.Reference
}

func (r DataQualitySpecRulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataQualitySpecRulesAttributes) InternalWithRef(ref terra.Reference) DataQualitySpecRulesAttributes {
	return DataQualitySpecRulesAttributes{ref: ref}
}

func (r DataQualitySpecRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataQualitySpecRulesAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("column"))
}

func (r DataQualitySpecRulesAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("description"))
}

func (r DataQualitySpecRulesAttributes) Dimension() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("dimension"))
}

func (r DataQualitySpecRulesAttributes) IgnoreNull() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("ignore_null"))
}

func (r DataQualitySpecRulesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

func (r DataQualitySpecRulesAttributes) Threshold() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("threshold"))
}

func (r DataQualitySpecRulesAttributes) NonNullExpectation() terra.ListValue[RulesNonNullExpectationAttributes] {
	return terra.ReferenceAsList[RulesNonNullExpectationAttributes](r.ref.Append("non_null_expectation"))
}

func (r DataQualitySpecRulesAttributes) RangeExpectation() terra.ListValue[RulesRangeExpectationAttributes] {
	return terra.ReferenceAsList[RulesRangeExpectationAttributes](r.ref.Append("range_expectation"))
}

func (r DataQualitySpecRulesAttributes) RegexExpectation() terra.ListValue[RulesRegexExpectationAttributes] {
	return terra.ReferenceAsList[RulesRegexExpectationAttributes](r.ref.Append("regex_expectation"))
}

func (r DataQualitySpecRulesAttributes) RowConditionExpectation() terra.ListValue[RulesRowConditionExpectationAttributes] {
	return terra.ReferenceAsList[RulesRowConditionExpectationAttributes](r.ref.Append("row_condition_expectation"))
}

func (r DataQualitySpecRulesAttributes) SetExpectation() terra.ListValue[RulesSetExpectationAttributes] {
	return terra.ReferenceAsList[RulesSetExpectationAttributes](r.ref.Append("set_expectation"))
}

func (r DataQualitySpecRulesAttributes) StatisticRangeExpectation() terra.ListValue[RulesStatisticRangeExpectationAttributes] {
	return terra.ReferenceAsList[RulesStatisticRangeExpectationAttributes](r.ref.Append("statistic_range_expectation"))
}

func (r DataQualitySpecRulesAttributes) TableConditionExpectation() terra.ListValue[RulesTableConditionExpectationAttributes] {
	return terra.ReferenceAsList[RulesTableConditionExpectationAttributes](r.ref.Append("table_condition_expectation"))
}

func (r DataQualitySpecRulesAttributes) UniquenessExpectation() terra.ListValue[RulesUniquenessExpectationAttributes] {
	return terra.ReferenceAsList[RulesUniquenessExpectationAttributes](r.ref.Append("uniqueness_expectation"))
}

type RulesNonNullExpectationAttributes struct {
	ref terra.Reference
}

func (nne RulesNonNullExpectationAttributes) InternalRef() (terra.Reference, error) {
	return nne.ref, nil
}

func (nne RulesNonNullExpectationAttributes) InternalWithRef(ref terra.Reference) RulesNonNullExpectationAttributes {
	return RulesNonNullExpectationAttributes{ref: ref}
}

func (nne RulesNonNullExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nne.ref.InternalTokens()
}

type RulesRangeExpectationAttributes struct {
	ref terra.Reference
}

func (re RulesRangeExpectationAttributes) InternalRef() (terra.Reference, error) {
	return re.ref, nil
}

func (re RulesRangeExpectationAttributes) InternalWithRef(ref terra.Reference) RulesRangeExpectationAttributes {
	return RulesRangeExpectationAttributes{ref: ref}
}

func (re RulesRangeExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return re.ref.InternalTokens()
}

func (re RulesRangeExpectationAttributes) MaxValue() terra.StringValue {
	return terra.ReferenceAsString(re.ref.Append("max_value"))
}

func (re RulesRangeExpectationAttributes) MinValue() terra.StringValue {
	return terra.ReferenceAsString(re.ref.Append("min_value"))
}

func (re RulesRangeExpectationAttributes) StrictMaxEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(re.ref.Append("strict_max_enabled"))
}

func (re RulesRangeExpectationAttributes) StrictMinEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(re.ref.Append("strict_min_enabled"))
}

type RulesRegexExpectationAttributes struct {
	ref terra.Reference
}

func (re RulesRegexExpectationAttributes) InternalRef() (terra.Reference, error) {
	return re.ref, nil
}

func (re RulesRegexExpectationAttributes) InternalWithRef(ref terra.Reference) RulesRegexExpectationAttributes {
	return RulesRegexExpectationAttributes{ref: ref}
}

func (re RulesRegexExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return re.ref.InternalTokens()
}

func (re RulesRegexExpectationAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(re.ref.Append("regex"))
}

type RulesRowConditionExpectationAttributes struct {
	ref terra.Reference
}

func (rce RulesRowConditionExpectationAttributes) InternalRef() (terra.Reference, error) {
	return rce.ref, nil
}

func (rce RulesRowConditionExpectationAttributes) InternalWithRef(ref terra.Reference) RulesRowConditionExpectationAttributes {
	return RulesRowConditionExpectationAttributes{ref: ref}
}

func (rce RulesRowConditionExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rce.ref.InternalTokens()
}

func (rce RulesRowConditionExpectationAttributes) SqlExpression() terra.StringValue {
	return terra.ReferenceAsString(rce.ref.Append("sql_expression"))
}

type RulesSetExpectationAttributes struct {
	ref terra.Reference
}

func (se RulesSetExpectationAttributes) InternalRef() (terra.Reference, error) {
	return se.ref, nil
}

func (se RulesSetExpectationAttributes) InternalWithRef(ref terra.Reference) RulesSetExpectationAttributes {
	return RulesSetExpectationAttributes{ref: ref}
}

func (se RulesSetExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return se.ref.InternalTokens()
}

func (se RulesSetExpectationAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](se.ref.Append("values"))
}

type RulesStatisticRangeExpectationAttributes struct {
	ref terra.Reference
}

func (sre RulesStatisticRangeExpectationAttributes) InternalRef() (terra.Reference, error) {
	return sre.ref, nil
}

func (sre RulesStatisticRangeExpectationAttributes) InternalWithRef(ref terra.Reference) RulesStatisticRangeExpectationAttributes {
	return RulesStatisticRangeExpectationAttributes{ref: ref}
}

func (sre RulesStatisticRangeExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sre.ref.InternalTokens()
}

func (sre RulesStatisticRangeExpectationAttributes) MaxValue() terra.StringValue {
	return terra.ReferenceAsString(sre.ref.Append("max_value"))
}

func (sre RulesStatisticRangeExpectationAttributes) MinValue() terra.StringValue {
	return terra.ReferenceAsString(sre.ref.Append("min_value"))
}

func (sre RulesStatisticRangeExpectationAttributes) Statistic() terra.StringValue {
	return terra.ReferenceAsString(sre.ref.Append("statistic"))
}

func (sre RulesStatisticRangeExpectationAttributes) StrictMaxEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sre.ref.Append("strict_max_enabled"))
}

func (sre RulesStatisticRangeExpectationAttributes) StrictMinEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sre.ref.Append("strict_min_enabled"))
}

type RulesTableConditionExpectationAttributes struct {
	ref terra.Reference
}

func (tce RulesTableConditionExpectationAttributes) InternalRef() (terra.Reference, error) {
	return tce.ref, nil
}

func (tce RulesTableConditionExpectationAttributes) InternalWithRef(ref terra.Reference) RulesTableConditionExpectationAttributes {
	return RulesTableConditionExpectationAttributes{ref: ref}
}

func (tce RulesTableConditionExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tce.ref.InternalTokens()
}

func (tce RulesTableConditionExpectationAttributes) SqlExpression() terra.StringValue {
	return terra.ReferenceAsString(tce.ref.Append("sql_expression"))
}

type RulesUniquenessExpectationAttributes struct {
	ref terra.Reference
}

func (ue RulesUniquenessExpectationAttributes) InternalRef() (terra.Reference, error) {
	return ue.ref, nil
}

func (ue RulesUniquenessExpectationAttributes) InternalWithRef(ref terra.Reference) RulesUniquenessExpectationAttributes {
	return RulesUniquenessExpectationAttributes{ref: ref}
}

func (ue RulesUniquenessExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ue.ref.InternalTokens()
}

type ExecutionSpecAttributes struct {
	ref terra.Reference
}

func (es ExecutionSpecAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es ExecutionSpecAttributes) InternalWithRef(ref terra.Reference) ExecutionSpecAttributes {
	return ExecutionSpecAttributes{ref: ref}
}

func (es ExecutionSpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es ExecutionSpecAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("field"))
}

func (es ExecutionSpecAttributes) Trigger() terra.ListValue[TriggerAttributes] {
	return terra.ReferenceAsList[TriggerAttributes](es.ref.Append("trigger"))
}

type TriggerAttributes struct {
	ref terra.Reference
}

func (t TriggerAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TriggerAttributes) InternalWithRef(ref terra.Reference) TriggerAttributes {
	return TriggerAttributes{ref: ref}
}

func (t TriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TriggerAttributes) OnDemand() terra.ListValue[OnDemandAttributes] {
	return terra.ReferenceAsList[OnDemandAttributes](t.ref.Append("on_demand"))
}

func (t TriggerAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](t.ref.Append("schedule"))
}

type OnDemandAttributes struct {
	ref terra.Reference
}

func (od OnDemandAttributes) InternalRef() (terra.Reference, error) {
	return od.ref, nil
}

func (od OnDemandAttributes) InternalWithRef(ref terra.Reference) OnDemandAttributes {
	return OnDemandAttributes{ref: ref}
}

func (od OnDemandAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return od.ref.InternalTokens()
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) Cron() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("cron"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DataProfileResultState struct {
	RowCount    string                              `json:"row_count"`
	Profile     []DataProfileResultProfileState     `json:"profile"`
	ScannedData []DataProfileResultScannedDataState `json:"scanned_data"`
}

type DataProfileResultProfileState struct {
	Fields []FieldsState `json:"fields"`
}

type FieldsState struct {
	Mode    string               `json:"mode"`
	Name    string               `json:"name"`
	Type    string               `json:"type"`
	Profile []FieldsProfileState `json:"profile"`
}

type FieldsProfileState struct {
	DistinctRatio  float64               `json:"distinct_ratio"`
	NullRatio      float64               `json:"null_ratio"`
	DoubleProfile  []DoubleProfileState  `json:"double_profile"`
	IntegerProfile []IntegerProfileState `json:"integer_profile"`
	StringProfile  []StringProfileState  `json:"string_profile"`
	TopNValues     []TopNValuesState     `json:"top_n_values"`
}

type DoubleProfileState struct {
	Average           float64 `json:"average"`
	Max               string  `json:"max"`
	Min               string  `json:"min"`
	Quartiles         string  `json:"quartiles"`
	StandardDeviation float64 `json:"standard_deviation"`
}

type IntegerProfileState struct {
	Average           float64 `json:"average"`
	Max               string  `json:"max"`
	Min               string  `json:"min"`
	Quartiles         string  `json:"quartiles"`
	StandardDeviation float64 `json:"standard_deviation"`
}

type StringProfileState struct {
	AverageLength float64 `json:"average_length"`
	MaxLength     string  `json:"max_length"`
	MinLength     string  `json:"min_length"`
}

type TopNValuesState struct {
	Count string `json:"count"`
	Value string `json:"value"`
}

type DataProfileResultScannedDataState struct {
	IncrementalField []DataProfileResultScannedDataIncrementalFieldState `json:"incremental_field"`
}

type DataProfileResultScannedDataIncrementalFieldState struct {
	End   string `json:"end"`
	Field string `json:"field"`
	Start string `json:"start"`
}

type DataQualityResultState struct {
	Passed      bool                                `json:"passed"`
	RowCount    string                              `json:"row_count"`
	Dimensions  []DimensionsState                   `json:"dimensions"`
	Rules       []DataQualityResultRulesState       `json:"rules"`
	ScannedData []DataQualityResultScannedDataState `json:"scanned_data"`
}

type DimensionsState struct {
	Passed bool `json:"passed"`
}

type DataQualityResultRulesState struct {
	EvaluatedCount   string      `json:"evaluated_count"`
	FailingRowsQuery string      `json:"failing_rows_query"`
	NullCount        string      `json:"null_count"`
	PassRatio        float64     `json:"pass_ratio"`
	Passed           bool        `json:"passed"`
	PassedCount      string      `json:"passed_count"`
	Rule             []RuleState `json:"rule"`
}

type RuleState struct {
	Column                    string                               `json:"column"`
	Dimension                 string                               `json:"dimension"`
	IgnoreNull                bool                                 `json:"ignore_null"`
	Threshold                 float64                              `json:"threshold"`
	NonNullExpectation        []RuleNonNullExpectationState        `json:"non_null_expectation"`
	RangeExpectation          []RuleRangeExpectationState          `json:"range_expectation"`
	RegexExpectation          []RuleRegexExpectationState          `json:"regex_expectation"`
	RowConditionExpectation   []RuleRowConditionExpectationState   `json:"row_condition_expectation"`
	SetExpectation            []RuleSetExpectationState            `json:"set_expectation"`
	StatisticRangeExpectation []RuleStatisticRangeExpectationState `json:"statistic_range_expectation"`
	TableConditionExpectation []RuleTableConditionExpectationState `json:"table_condition_expectation"`
	UniquenessExpectation     []RuleUniquenessExpectationState     `json:"uniqueness_expectation"`
}

type RuleNonNullExpectationState struct{}

type RuleRangeExpectationState struct {
	MaxValue         string `json:"max_value"`
	MinValue         string `json:"min_value"`
	StrictMaxEnabled bool   `json:"strict_max_enabled"`
	StrictMinEnabled bool   `json:"strict_min_enabled"`
}

type RuleRegexExpectationState struct {
	Regex string `json:"regex"`
}

type RuleRowConditionExpectationState struct {
	SqlExpression string `json:"sql_expression"`
}

type RuleSetExpectationState struct {
	Values []string `json:"values"`
}

type RuleStatisticRangeExpectationState struct {
	MaxValue         string `json:"max_value"`
	MinValue         string `json:"min_value"`
	Statistic        string `json:"statistic"`
	StrictMaxEnabled bool   `json:"strict_max_enabled"`
	StrictMinEnabled bool   `json:"strict_min_enabled"`
}

type RuleTableConditionExpectationState struct {
	SqlExpression string `json:"sql_expression"`
}

type RuleUniquenessExpectationState struct{}

type DataQualityResultScannedDataState struct {
	IncrementalField []DataQualityResultScannedDataIncrementalFieldState `json:"incremental_field"`
}

type DataQualityResultScannedDataIncrementalFieldState struct {
	End   string `json:"end"`
	Field string `json:"field"`
	Start string `json:"start"`
}

type ExecutionStatusState struct {
	LatestJobEndTime   string `json:"latest_job_end_time"`
	LatestJobStartTime string `json:"latest_job_start_time"`
}

type DataState struct {
	Entity   string `json:"entity"`
	Resource string `json:"resource"`
}

type DataProfileSpecState struct {
	RowFilter       string                                `json:"row_filter"`
	SamplingPercent float64                               `json:"sampling_percent"`
	ExcludeFields   []ExcludeFieldsState                  `json:"exclude_fields"`
	IncludeFields   []IncludeFieldsState                  `json:"include_fields"`
	PostScanActions []DataProfileSpecPostScanActionsState `json:"post_scan_actions"`
}

type ExcludeFieldsState struct {
	FieldNames []string `json:"field_names"`
}

type IncludeFieldsState struct {
	FieldNames []string `json:"field_names"`
}

type DataProfileSpecPostScanActionsState struct {
	BigqueryExport []DataProfileSpecPostScanActionsBigqueryExportState `json:"bigquery_export"`
}

type DataProfileSpecPostScanActionsBigqueryExportState struct {
	ResultsTable string `json:"results_table"`
}

type DataQualitySpecState struct {
	RowFilter       string                                `json:"row_filter"`
	SamplingPercent float64                               `json:"sampling_percent"`
	PostScanActions []DataQualitySpecPostScanActionsState `json:"post_scan_actions"`
	Rules           []DataQualitySpecRulesState           `json:"rules"`
}

type DataQualitySpecPostScanActionsState struct {
	BigqueryExport []DataQualitySpecPostScanActionsBigqueryExportState `json:"bigquery_export"`
}

type DataQualitySpecPostScanActionsBigqueryExportState struct {
	ResultsTable string `json:"results_table"`
}

type DataQualitySpecRulesState struct {
	Column                    string                                `json:"column"`
	Description               string                                `json:"description"`
	Dimension                 string                                `json:"dimension"`
	IgnoreNull                bool                                  `json:"ignore_null"`
	Name                      string                                `json:"name"`
	Threshold                 float64                               `json:"threshold"`
	NonNullExpectation        []RulesNonNullExpectationState        `json:"non_null_expectation"`
	RangeExpectation          []RulesRangeExpectationState          `json:"range_expectation"`
	RegexExpectation          []RulesRegexExpectationState          `json:"regex_expectation"`
	RowConditionExpectation   []RulesRowConditionExpectationState   `json:"row_condition_expectation"`
	SetExpectation            []RulesSetExpectationState            `json:"set_expectation"`
	StatisticRangeExpectation []RulesStatisticRangeExpectationState `json:"statistic_range_expectation"`
	TableConditionExpectation []RulesTableConditionExpectationState `json:"table_condition_expectation"`
	UniquenessExpectation     []RulesUniquenessExpectationState     `json:"uniqueness_expectation"`
}

type RulesNonNullExpectationState struct{}

type RulesRangeExpectationState struct {
	MaxValue         string `json:"max_value"`
	MinValue         string `json:"min_value"`
	StrictMaxEnabled bool   `json:"strict_max_enabled"`
	StrictMinEnabled bool   `json:"strict_min_enabled"`
}

type RulesRegexExpectationState struct {
	Regex string `json:"regex"`
}

type RulesRowConditionExpectationState struct {
	SqlExpression string `json:"sql_expression"`
}

type RulesSetExpectationState struct {
	Values []string `json:"values"`
}

type RulesStatisticRangeExpectationState struct {
	MaxValue         string `json:"max_value"`
	MinValue         string `json:"min_value"`
	Statistic        string `json:"statistic"`
	StrictMaxEnabled bool   `json:"strict_max_enabled"`
	StrictMinEnabled bool   `json:"strict_min_enabled"`
}

type RulesTableConditionExpectationState struct {
	SqlExpression string `json:"sql_expression"`
}

type RulesUniquenessExpectationState struct{}

type ExecutionSpecState struct {
	Field   string         `json:"field"`
	Trigger []TriggerState `json:"trigger"`
}

type TriggerState struct {
	OnDemand []OnDemandState `json:"on_demand"`
	Schedule []ScheduleState `json:"schedule"`
}

type OnDemandState struct{}

type ScheduleState struct {
	Cron string `json:"cron"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
