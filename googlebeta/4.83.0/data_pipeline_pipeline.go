// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	datapipelinepipeline "github.com/golingon/terraproviders/googlebeta/4.83.0/datapipelinepipeline"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDataPipelinePipeline creates a new instance of [DataPipelinePipeline].
func NewDataPipelinePipeline(name string, args DataPipelinePipelineArgs) *DataPipelinePipeline {
	return &DataPipelinePipeline{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataPipelinePipeline)(nil)

// DataPipelinePipeline represents the Terraform resource google_data_pipeline_pipeline.
type DataPipelinePipeline struct {
	Name      string
	Args      DataPipelinePipelineArgs
	state     *dataPipelinePipelineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataPipelinePipeline].
func (dpp *DataPipelinePipeline) Type() string {
	return "google_data_pipeline_pipeline"
}

// LocalName returns the local name for [DataPipelinePipeline].
func (dpp *DataPipelinePipeline) LocalName() string {
	return dpp.Name
}

// Configuration returns the configuration (args) for [DataPipelinePipeline].
func (dpp *DataPipelinePipeline) Configuration() interface{} {
	return dpp.Args
}

// DependOn is used for other resources to depend on [DataPipelinePipeline].
func (dpp *DataPipelinePipeline) DependOn() terra.Reference {
	return terra.ReferenceResource(dpp)
}

// Dependencies returns the list of resources [DataPipelinePipeline] depends_on.
func (dpp *DataPipelinePipeline) Dependencies() terra.Dependencies {
	return dpp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataPipelinePipeline].
func (dpp *DataPipelinePipeline) LifecycleManagement() *terra.Lifecycle {
	return dpp.Lifecycle
}

// Attributes returns the attributes for [DataPipelinePipeline].
func (dpp *DataPipelinePipeline) Attributes() dataPipelinePipelineAttributes {
	return dataPipelinePipelineAttributes{ref: terra.ReferenceResource(dpp)}
}

// ImportState imports the given attribute values into [DataPipelinePipeline]'s state.
func (dpp *DataPipelinePipeline) ImportState(av io.Reader) error {
	dpp.state = &dataPipelinePipelineState{}
	if err := json.NewDecoder(av).Decode(dpp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dpp.Type(), dpp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataPipelinePipeline] has state.
func (dpp *DataPipelinePipeline) State() (*dataPipelinePipelineState, bool) {
	return dpp.state, dpp.state != nil
}

// StateMust returns the state for [DataPipelinePipeline]. Panics if the state is nil.
func (dpp *DataPipelinePipeline) StateMust() *dataPipelinePipelineState {
	if dpp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dpp.Type(), dpp.LocalName()))
	}
	return dpp.state
}

// DataPipelinePipelineArgs contains the configurations for google_data_pipeline_pipeline.
type DataPipelinePipelineArgs struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PipelineSources: map of string, optional
	PipelineSources terra.MapValue[terra.StringValue] `hcl:"pipeline_sources,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// SchedulerServiceAccountEmail: string, optional
	SchedulerServiceAccountEmail terra.StringValue `hcl:"scheduler_service_account_email,attr"`
	// State: string, required
	State terra.StringValue `hcl:"state,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ScheduleInfo: optional
	ScheduleInfo *datapipelinepipeline.ScheduleInfo `hcl:"schedule_info,block"`
	// Timeouts: optional
	Timeouts *datapipelinepipeline.Timeouts `hcl:"timeouts,block"`
	// Workload: optional
	Workload *datapipelinepipeline.Workload `hcl:"workload,block"`
}
type dataPipelinePipelineAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_data_pipeline_pipeline.
func (dpp dataPipelinePipelineAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(dpp.ref.Append("create_time"))
}

// DisplayName returns a reference to field display_name of google_data_pipeline_pipeline.
func (dpp dataPipelinePipelineAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(dpp.ref.Append("display_name"))
}

// Id returns a reference to field id of google_data_pipeline_pipeline.
func (dpp dataPipelinePipelineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dpp.ref.Append("id"))
}

// JobCount returns a reference to field job_count of google_data_pipeline_pipeline.
func (dpp dataPipelinePipelineAttributes) JobCount() terra.NumberValue {
	return terra.ReferenceAsNumber(dpp.ref.Append("job_count"))
}

// LastUpdateTime returns a reference to field last_update_time of google_data_pipeline_pipeline.
func (dpp dataPipelinePipelineAttributes) LastUpdateTime() terra.StringValue {
	return terra.ReferenceAsString(dpp.ref.Append("last_update_time"))
}

// Name returns a reference to field name of google_data_pipeline_pipeline.
func (dpp dataPipelinePipelineAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dpp.ref.Append("name"))
}

// PipelineSources returns a reference to field pipeline_sources of google_data_pipeline_pipeline.
func (dpp dataPipelinePipelineAttributes) PipelineSources() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dpp.ref.Append("pipeline_sources"))
}

// Project returns a reference to field project of google_data_pipeline_pipeline.
func (dpp dataPipelinePipelineAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(dpp.ref.Append("project"))
}

// Region returns a reference to field region of google_data_pipeline_pipeline.
func (dpp dataPipelinePipelineAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(dpp.ref.Append("region"))
}

// SchedulerServiceAccountEmail returns a reference to field scheduler_service_account_email of google_data_pipeline_pipeline.
func (dpp dataPipelinePipelineAttributes) SchedulerServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(dpp.ref.Append("scheduler_service_account_email"))
}

// State returns a reference to field state of google_data_pipeline_pipeline.
func (dpp dataPipelinePipelineAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(dpp.ref.Append("state"))
}

// Type returns a reference to field type of google_data_pipeline_pipeline.
func (dpp dataPipelinePipelineAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(dpp.ref.Append("type"))
}

func (dpp dataPipelinePipelineAttributes) ScheduleInfo() terra.ListValue[datapipelinepipeline.ScheduleInfoAttributes] {
	return terra.ReferenceAsList[datapipelinepipeline.ScheduleInfoAttributes](dpp.ref.Append("schedule_info"))
}

func (dpp dataPipelinePipelineAttributes) Timeouts() datapipelinepipeline.TimeoutsAttributes {
	return terra.ReferenceAsSingle[datapipelinepipeline.TimeoutsAttributes](dpp.ref.Append("timeouts"))
}

func (dpp dataPipelinePipelineAttributes) Workload() terra.ListValue[datapipelinepipeline.WorkloadAttributes] {
	return terra.ReferenceAsList[datapipelinepipeline.WorkloadAttributes](dpp.ref.Append("workload"))
}

type dataPipelinePipelineState struct {
	CreateTime                   string                                   `json:"create_time"`
	DisplayName                  string                                   `json:"display_name"`
	Id                           string                                   `json:"id"`
	JobCount                     float64                                  `json:"job_count"`
	LastUpdateTime               string                                   `json:"last_update_time"`
	Name                         string                                   `json:"name"`
	PipelineSources              map[string]string                        `json:"pipeline_sources"`
	Project                      string                                   `json:"project"`
	Region                       string                                   `json:"region"`
	SchedulerServiceAccountEmail string                                   `json:"scheduler_service_account_email"`
	State                        string                                   `json:"state"`
	Type                         string                                   `json:"type"`
	ScheduleInfo                 []datapipelinepipeline.ScheduleInfoState `json:"schedule_info"`
	Timeouts                     *datapipelinepipeline.TimeoutsState      `json:"timeouts"`
	Workload                     []datapipelinepipeline.WorkloadState     `json:"workload"`
}
