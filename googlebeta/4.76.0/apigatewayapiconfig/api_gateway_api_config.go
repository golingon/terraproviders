// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package apigatewayapiconfig

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type GatewayConfig struct {
	// BackendConfig: required
	BackendConfig *BackendConfig `hcl:"backend_config,block" validate:"required"`
}

type BackendConfig struct {
	// GoogleServiceAccount: string, required
	GoogleServiceAccount terra.StringValue `hcl:"google_service_account,attr" validate:"required"`
}

type GrpcServices struct {
	// FileDescriptorSet: required
	FileDescriptorSet *FileDescriptorSet `hcl:"file_descriptor_set,block" validate:"required"`
	// Source: min=0
	Source []Source `hcl:"source,block" validate:"min=0"`
}

type FileDescriptorSet struct {
	// Contents: string, required
	Contents terra.StringValue `hcl:"contents,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type Source struct {
	// Contents: string, required
	Contents terra.StringValue `hcl:"contents,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type ManagedServiceConfigs struct {
	// Contents: string, required
	Contents terra.StringValue `hcl:"contents,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type OpenapiDocuments struct {
	// Document: required
	Document *Document `hcl:"document,block" validate:"required"`
}

type Document struct {
	// Contents: string, required
	Contents terra.StringValue `hcl:"contents,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type GatewayConfigAttributes struct {
	ref terra.Reference
}

func (gc GatewayConfigAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc GatewayConfigAttributes) InternalWithRef(ref terra.Reference) GatewayConfigAttributes {
	return GatewayConfigAttributes{ref: ref}
}

func (gc GatewayConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc GatewayConfigAttributes) BackendConfig() terra.ListValue[BackendConfigAttributes] {
	return terra.ReferenceAsList[BackendConfigAttributes](gc.ref.Append("backend_config"))
}

type BackendConfigAttributes struct {
	ref terra.Reference
}

func (bc BackendConfigAttributes) InternalRef() (terra.Reference, error) {
	return bc.ref, nil
}

func (bc BackendConfigAttributes) InternalWithRef(ref terra.Reference) BackendConfigAttributes {
	return BackendConfigAttributes{ref: ref}
}

func (bc BackendConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bc.ref.InternalTokens()
}

func (bc BackendConfigAttributes) GoogleServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("google_service_account"))
}

type GrpcServicesAttributes struct {
	ref terra.Reference
}

func (gs GrpcServicesAttributes) InternalRef() (terra.Reference, error) {
	return gs.ref, nil
}

func (gs GrpcServicesAttributes) InternalWithRef(ref terra.Reference) GrpcServicesAttributes {
	return GrpcServicesAttributes{ref: ref}
}

func (gs GrpcServicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gs.ref.InternalTokens()
}

func (gs GrpcServicesAttributes) FileDescriptorSet() terra.ListValue[FileDescriptorSetAttributes] {
	return terra.ReferenceAsList[FileDescriptorSetAttributes](gs.ref.Append("file_descriptor_set"))
}

func (gs GrpcServicesAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](gs.ref.Append("source"))
}

type FileDescriptorSetAttributes struct {
	ref terra.Reference
}

func (fds FileDescriptorSetAttributes) InternalRef() (terra.Reference, error) {
	return fds.ref, nil
}

func (fds FileDescriptorSetAttributes) InternalWithRef(ref terra.Reference) FileDescriptorSetAttributes {
	return FileDescriptorSetAttributes{ref: ref}
}

func (fds FileDescriptorSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fds.ref.InternalTokens()
}

func (fds FileDescriptorSetAttributes) Contents() terra.StringValue {
	return terra.ReferenceAsString(fds.ref.Append("contents"))
}

func (fds FileDescriptorSetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(fds.ref.Append("path"))
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) Contents() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("contents"))
}

func (s SourceAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("path"))
}

type ManagedServiceConfigsAttributes struct {
	ref terra.Reference
}

func (msc ManagedServiceConfigsAttributes) InternalRef() (terra.Reference, error) {
	return msc.ref, nil
}

func (msc ManagedServiceConfigsAttributes) InternalWithRef(ref terra.Reference) ManagedServiceConfigsAttributes {
	return ManagedServiceConfigsAttributes{ref: ref}
}

func (msc ManagedServiceConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return msc.ref.InternalTokens()
}

func (msc ManagedServiceConfigsAttributes) Contents() terra.StringValue {
	return terra.ReferenceAsString(msc.ref.Append("contents"))
}

func (msc ManagedServiceConfigsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(msc.ref.Append("path"))
}

type OpenapiDocumentsAttributes struct {
	ref terra.Reference
}

func (od OpenapiDocumentsAttributes) InternalRef() (terra.Reference, error) {
	return od.ref, nil
}

func (od OpenapiDocumentsAttributes) InternalWithRef(ref terra.Reference) OpenapiDocumentsAttributes {
	return OpenapiDocumentsAttributes{ref: ref}
}

func (od OpenapiDocumentsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return od.ref.InternalTokens()
}

func (od OpenapiDocumentsAttributes) Document() terra.ListValue[DocumentAttributes] {
	return terra.ReferenceAsList[DocumentAttributes](od.ref.Append("document"))
}

type DocumentAttributes struct {
	ref terra.Reference
}

func (d DocumentAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DocumentAttributes) InternalWithRef(ref terra.Reference) DocumentAttributes {
	return DocumentAttributes{ref: ref}
}

func (d DocumentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DocumentAttributes) Contents() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("contents"))
}

func (d DocumentAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("path"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type GatewayConfigState struct {
	BackendConfig []BackendConfigState `json:"backend_config"`
}

type BackendConfigState struct {
	GoogleServiceAccount string `json:"google_service_account"`
}

type GrpcServicesState struct {
	FileDescriptorSet []FileDescriptorSetState `json:"file_descriptor_set"`
	Source            []SourceState            `json:"source"`
}

type FileDescriptorSetState struct {
	Contents string `json:"contents"`
	Path     string `json:"path"`
}

type SourceState struct {
	Contents string `json:"contents"`
	Path     string `json:"path"`
}

type ManagedServiceConfigsState struct {
	Contents string `json:"contents"`
	Path     string `json:"path"`
}

type OpenapiDocumentsState struct {
	Document []DocumentState `json:"document"`
}

type DocumentState struct {
	Contents string `json:"contents"`
	Path     string `json:"path"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
