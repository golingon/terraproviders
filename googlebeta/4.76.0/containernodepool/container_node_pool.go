// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package containernodepool

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Autoscaling struct {
	// LocationPolicy: string, optional
	LocationPolicy terra.StringValue `hcl:"location_policy,attr"`
	// MaxNodeCount: number, optional
	MaxNodeCount terra.NumberValue `hcl:"max_node_count,attr"`
	// MinNodeCount: number, optional
	MinNodeCount terra.NumberValue `hcl:"min_node_count,attr"`
	// TotalMaxNodeCount: number, optional
	TotalMaxNodeCount terra.NumberValue `hcl:"total_max_node_count,attr"`
	// TotalMinNodeCount: number, optional
	TotalMinNodeCount terra.NumberValue `hcl:"total_min_node_count,attr"`
}

type Management struct {
	// AutoRepair: bool, optional
	AutoRepair terra.BoolValue `hcl:"auto_repair,attr"`
	// AutoUpgrade: bool, optional
	AutoUpgrade terra.BoolValue `hcl:"auto_upgrade,attr"`
}

type NetworkConfig struct {
	// CreatePodRange: bool, optional
	CreatePodRange terra.BoolValue `hcl:"create_pod_range,attr"`
	// EnablePrivateNodes: bool, optional
	EnablePrivateNodes terra.BoolValue `hcl:"enable_private_nodes,attr"`
	// PodIpv4CidrBlock: string, optional
	PodIpv4CidrBlock terra.StringValue `hcl:"pod_ipv4_cidr_block,attr"`
	// PodRange: string, optional
	PodRange terra.StringValue `hcl:"pod_range,attr"`
	// AdditionalNodeNetworkConfigs: min=0
	AdditionalNodeNetworkConfigs []AdditionalNodeNetworkConfigs `hcl:"additional_node_network_configs,block" validate:"min=0"`
	// AdditionalPodNetworkConfigs: min=0
	AdditionalPodNetworkConfigs []AdditionalPodNetworkConfigs `hcl:"additional_pod_network_configs,block" validate:"min=0"`
	// PodCidrOverprovisionConfig: optional
	PodCidrOverprovisionConfig *PodCidrOverprovisionConfig `hcl:"pod_cidr_overprovision_config,block"`
}

type AdditionalNodeNetworkConfigs struct {
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
}

type AdditionalPodNetworkConfigs struct {
	// MaxPodsPerNode: number, optional
	MaxPodsPerNode terra.NumberValue `hcl:"max_pods_per_node,attr"`
	// SecondaryPodRange: string, optional
	SecondaryPodRange terra.StringValue `hcl:"secondary_pod_range,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
}

type PodCidrOverprovisionConfig struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type NodeConfig struct {
	// BootDiskKmsKey: string, optional
	BootDiskKmsKey terra.StringValue `hcl:"boot_disk_kms_key,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// DiskType: string, optional
	DiskType terra.StringValue `hcl:"disk_type,attr"`
	// ImageType: string, optional
	ImageType terra.StringValue `hcl:"image_type,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LocalSsdCount: number, optional
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr"`
	// LoggingVariant: string, optional
	LoggingVariant terra.StringValue `hcl:"logging_variant,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NodeGroup: string, optional
	NodeGroup terra.StringValue `hcl:"node_group,attr"`
	// OauthScopes: set of string, optional
	OauthScopes terra.SetValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
	// Preemptible: bool, optional
	Preemptible terra.BoolValue `hcl:"preemptible,attr"`
	// ResourceLabels: map of string, optional
	ResourceLabels terra.MapValue[terra.StringValue] `hcl:"resource_labels,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// Spot: bool, optional
	Spot terra.BoolValue `hcl:"spot,attr"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
	// GuestAccelerator: min=0
	GuestAccelerator []GuestAccelerator `hcl:"guest_accelerator,block" validate:"min=0"`
	// Taint: min=0
	Taint []Taint `hcl:"taint,block" validate:"min=0"`
	// AdvancedMachineFeatures: optional
	AdvancedMachineFeatures *AdvancedMachineFeatures `hcl:"advanced_machine_features,block"`
	// EphemeralStorageConfig: optional
	EphemeralStorageConfig *EphemeralStorageConfig `hcl:"ephemeral_storage_config,block"`
	// EphemeralStorageLocalSsdConfig: optional
	EphemeralStorageLocalSsdConfig *EphemeralStorageLocalSsdConfig `hcl:"ephemeral_storage_local_ssd_config,block"`
	// GcfsConfig: optional
	GcfsConfig *GcfsConfig `hcl:"gcfs_config,block"`
	// Gvnic: optional
	Gvnic *Gvnic `hcl:"gvnic,block"`
	// KubeletConfig: optional
	KubeletConfig *KubeletConfig `hcl:"kubelet_config,block"`
	// LinuxNodeConfig: optional
	LinuxNodeConfig *LinuxNodeConfig `hcl:"linux_node_config,block"`
	// LocalNvmeSsdBlockConfig: optional
	LocalNvmeSsdBlockConfig *LocalNvmeSsdBlockConfig `hcl:"local_nvme_ssd_block_config,block"`
	// ReservationAffinity: optional
	ReservationAffinity *ReservationAffinity `hcl:"reservation_affinity,block"`
	// SandboxConfig: optional
	SandboxConfig *SandboxConfig `hcl:"sandbox_config,block"`
	// ShieldedInstanceConfig: optional
	ShieldedInstanceConfig *ShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
	// SoleTenantConfig: optional
	SoleTenantConfig *SoleTenantConfig `hcl:"sole_tenant_config,block"`
	// WorkloadMetadataConfig: optional
	WorkloadMetadataConfig *WorkloadMetadataConfig `hcl:"workload_metadata_config,block"`
}

type GuestAccelerator struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// GpuPartitionSize: string, optional
	GpuPartitionSize terra.StringValue `hcl:"gpu_partition_size,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// GpuDriverInstallationConfig: min=0
	GpuDriverInstallationConfig []GpuDriverInstallationConfig `hcl:"gpu_driver_installation_config,block" validate:"min=0"`
	// GpuSharingConfig: min=0
	GpuSharingConfig []GpuSharingConfig `hcl:"gpu_sharing_config,block" validate:"min=0"`
}

type GpuDriverInstallationConfig struct {
	// GpuDriverVersion: string, optional
	GpuDriverVersion terra.StringValue `hcl:"gpu_driver_version,attr"`
}

type GpuSharingConfig struct {
	// GpuSharingStrategy: string, optional
	GpuSharingStrategy terra.StringValue `hcl:"gpu_sharing_strategy,attr"`
	// MaxSharedClientsPerGpu: number, optional
	MaxSharedClientsPerGpu terra.NumberValue `hcl:"max_shared_clients_per_gpu,attr"`
}

type Taint struct {
	// Effect: string, optional
	Effect terra.StringValue `hcl:"effect,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type AdvancedMachineFeatures struct {
	// ThreadsPerCore: number, required
	ThreadsPerCore terra.NumberValue `hcl:"threads_per_core,attr" validate:"required"`
}

type EphemeralStorageConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type EphemeralStorageLocalSsdConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type GcfsConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type Gvnic struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type KubeletConfig struct {
	// CpuCfsQuota: bool, optional
	CpuCfsQuota terra.BoolValue `hcl:"cpu_cfs_quota,attr"`
	// CpuCfsQuotaPeriod: string, optional
	CpuCfsQuotaPeriod terra.StringValue `hcl:"cpu_cfs_quota_period,attr"`
	// CpuManagerPolicy: string, required
	CpuManagerPolicy terra.StringValue `hcl:"cpu_manager_policy,attr" validate:"required"`
	// PodPidsLimit: number, optional
	PodPidsLimit terra.NumberValue `hcl:"pod_pids_limit,attr"`
}

type LinuxNodeConfig struct {
	// Sysctls: map of string, required
	Sysctls terra.MapValue[terra.StringValue] `hcl:"sysctls,attr" validate:"required"`
}

type LocalNvmeSsdBlockConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type ReservationAffinity struct {
	// ConsumeReservationType: string, required
	ConsumeReservationType terra.StringValue `hcl:"consume_reservation_type,attr" validate:"required"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type SandboxConfig struct {
	// SandboxType: string, required
	SandboxType terra.StringValue `hcl:"sandbox_type,attr" validate:"required"`
}

type ShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
}

type SoleTenantConfig struct {
	// NodeAffinity: min=1
	NodeAffinity []NodeAffinity `hcl:"node_affinity,block" validate:"min=1"`
}

type NodeAffinity struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type WorkloadMetadataConfig struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type PlacementPolicy struct {
	// TpuTopology: string, optional
	TpuTopology terra.StringValue `hcl:"tpu_topology,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type UpgradeSettings struct {
	// MaxSurge: number, optional
	MaxSurge terra.NumberValue `hcl:"max_surge,attr"`
	// MaxUnavailable: number, optional
	MaxUnavailable terra.NumberValue `hcl:"max_unavailable,attr"`
	// Strategy: string, optional
	Strategy terra.StringValue `hcl:"strategy,attr"`
	// BlueGreenSettings: optional
	BlueGreenSettings *BlueGreenSettings `hcl:"blue_green_settings,block"`
}

type BlueGreenSettings struct {
	// NodePoolSoakDuration: string, optional
	NodePoolSoakDuration terra.StringValue `hcl:"node_pool_soak_duration,attr"`
	// StandardRolloutPolicy: required
	StandardRolloutPolicy *StandardRolloutPolicy `hcl:"standard_rollout_policy,block" validate:"required"`
}

type StandardRolloutPolicy struct {
	// BatchNodeCount: number, optional
	BatchNodeCount terra.NumberValue `hcl:"batch_node_count,attr"`
	// BatchPercentage: number, optional
	BatchPercentage terra.NumberValue `hcl:"batch_percentage,attr"`
	// BatchSoakDuration: string, optional
	BatchSoakDuration terra.StringValue `hcl:"batch_soak_duration,attr"`
}

type AutoscalingAttributes struct {
	ref terra.Reference
}

func (a AutoscalingAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AutoscalingAttributes) InternalWithRef(ref terra.Reference) AutoscalingAttributes {
	return AutoscalingAttributes{ref: ref}
}

func (a AutoscalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AutoscalingAttributes) LocationPolicy() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("location_policy"))
}

func (a AutoscalingAttributes) MaxNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("max_node_count"))
}

func (a AutoscalingAttributes) MinNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("min_node_count"))
}

func (a AutoscalingAttributes) TotalMaxNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("total_max_node_count"))
}

func (a AutoscalingAttributes) TotalMinNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("total_min_node_count"))
}

type ManagementAttributes struct {
	ref terra.Reference
}

func (m ManagementAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m ManagementAttributes) InternalWithRef(ref terra.Reference) ManagementAttributes {
	return ManagementAttributes{ref: ref}
}

func (m ManagementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m ManagementAttributes) AutoRepair() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("auto_repair"))
}

func (m ManagementAttributes) AutoUpgrade() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("auto_upgrade"))
}

type NetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAttributes {
	return NetworkConfigAttributes{ref: ref}
}

func (nc NetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigAttributes) CreatePodRange() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("create_pod_range"))
}

func (nc NetworkConfigAttributes) EnablePrivateNodes() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("enable_private_nodes"))
}

func (nc NetworkConfigAttributes) PodIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("pod_ipv4_cidr_block"))
}

func (nc NetworkConfigAttributes) PodRange() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("pod_range"))
}

func (nc NetworkConfigAttributes) AdditionalNodeNetworkConfigs() terra.ListValue[AdditionalNodeNetworkConfigsAttributes] {
	return terra.ReferenceAsList[AdditionalNodeNetworkConfigsAttributes](nc.ref.Append("additional_node_network_configs"))
}

func (nc NetworkConfigAttributes) AdditionalPodNetworkConfigs() terra.ListValue[AdditionalPodNetworkConfigsAttributes] {
	return terra.ReferenceAsList[AdditionalPodNetworkConfigsAttributes](nc.ref.Append("additional_pod_network_configs"))
}

func (nc NetworkConfigAttributes) PodCidrOverprovisionConfig() terra.ListValue[PodCidrOverprovisionConfigAttributes] {
	return terra.ReferenceAsList[PodCidrOverprovisionConfigAttributes](nc.ref.Append("pod_cidr_overprovision_config"))
}

type AdditionalNodeNetworkConfigsAttributes struct {
	ref terra.Reference
}

func (annc AdditionalNodeNetworkConfigsAttributes) InternalRef() (terra.Reference, error) {
	return annc.ref, nil
}

func (annc AdditionalNodeNetworkConfigsAttributes) InternalWithRef(ref terra.Reference) AdditionalNodeNetworkConfigsAttributes {
	return AdditionalNodeNetworkConfigsAttributes{ref: ref}
}

func (annc AdditionalNodeNetworkConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return annc.ref.InternalTokens()
}

func (annc AdditionalNodeNetworkConfigsAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(annc.ref.Append("network"))
}

func (annc AdditionalNodeNetworkConfigsAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(annc.ref.Append("subnetwork"))
}

type AdditionalPodNetworkConfigsAttributes struct {
	ref terra.Reference
}

func (apnc AdditionalPodNetworkConfigsAttributes) InternalRef() (terra.Reference, error) {
	return apnc.ref, nil
}

func (apnc AdditionalPodNetworkConfigsAttributes) InternalWithRef(ref terra.Reference) AdditionalPodNetworkConfigsAttributes {
	return AdditionalPodNetworkConfigsAttributes{ref: ref}
}

func (apnc AdditionalPodNetworkConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return apnc.ref.InternalTokens()
}

func (apnc AdditionalPodNetworkConfigsAttributes) MaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(apnc.ref.Append("max_pods_per_node"))
}

func (apnc AdditionalPodNetworkConfigsAttributes) SecondaryPodRange() terra.StringValue {
	return terra.ReferenceAsString(apnc.ref.Append("secondary_pod_range"))
}

func (apnc AdditionalPodNetworkConfigsAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(apnc.ref.Append("subnetwork"))
}

type PodCidrOverprovisionConfigAttributes struct {
	ref terra.Reference
}

func (pcoc PodCidrOverprovisionConfigAttributes) InternalRef() (terra.Reference, error) {
	return pcoc.ref, nil
}

func (pcoc PodCidrOverprovisionConfigAttributes) InternalWithRef(ref terra.Reference) PodCidrOverprovisionConfigAttributes {
	return PodCidrOverprovisionConfigAttributes{ref: ref}
}

func (pcoc PodCidrOverprovisionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pcoc.ref.InternalTokens()
}

func (pcoc PodCidrOverprovisionConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(pcoc.ref.Append("disabled"))
}

type NodeConfigAttributes struct {
	ref terra.Reference
}

func (nc NodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigAttributes {
	return NodeConfigAttributes{ref: ref}
}

func (nc NodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NodeConfigAttributes) BootDiskKmsKey() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("boot_disk_kms_key"))
}

func (nc NodeConfigAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("disk_size_gb"))
}

func (nc NodeConfigAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("disk_type"))
}

func (nc NodeConfigAttributes) ImageType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("image_type"))
}

func (nc NodeConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("labels"))
}

func (nc NodeConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("local_ssd_count"))
}

func (nc NodeConfigAttributes) LoggingVariant() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("logging_variant"))
}

func (nc NodeConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("machine_type"))
}

func (nc NodeConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("metadata"))
}

func (nc NodeConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("min_cpu_platform"))
}

func (nc NodeConfigAttributes) NodeGroup() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("node_group"))
}

func (nc NodeConfigAttributes) OauthScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("oauth_scopes"))
}

func (nc NodeConfigAttributes) Preemptible() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("preemptible"))
}

func (nc NodeConfigAttributes) ResourceLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("resource_labels"))
}

func (nc NodeConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("service_account"))
}

func (nc NodeConfigAttributes) Spot() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("spot"))
}

func (nc NodeConfigAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("tags"))
}

func (nc NodeConfigAttributes) GuestAccelerator() terra.ListValue[GuestAcceleratorAttributes] {
	return terra.ReferenceAsList[GuestAcceleratorAttributes](nc.ref.Append("guest_accelerator"))
}

func (nc NodeConfigAttributes) Taint() terra.ListValue[TaintAttributes] {
	return terra.ReferenceAsList[TaintAttributes](nc.ref.Append("taint"))
}

func (nc NodeConfigAttributes) AdvancedMachineFeatures() terra.ListValue[AdvancedMachineFeaturesAttributes] {
	return terra.ReferenceAsList[AdvancedMachineFeaturesAttributes](nc.ref.Append("advanced_machine_features"))
}

func (nc NodeConfigAttributes) EphemeralStorageConfig() terra.ListValue[EphemeralStorageConfigAttributes] {
	return terra.ReferenceAsList[EphemeralStorageConfigAttributes](nc.ref.Append("ephemeral_storage_config"))
}

func (nc NodeConfigAttributes) EphemeralStorageLocalSsdConfig() terra.ListValue[EphemeralStorageLocalSsdConfigAttributes] {
	return terra.ReferenceAsList[EphemeralStorageLocalSsdConfigAttributes](nc.ref.Append("ephemeral_storage_local_ssd_config"))
}

func (nc NodeConfigAttributes) GcfsConfig() terra.ListValue[GcfsConfigAttributes] {
	return terra.ReferenceAsList[GcfsConfigAttributes](nc.ref.Append("gcfs_config"))
}

func (nc NodeConfigAttributes) Gvnic() terra.ListValue[GvnicAttributes] {
	return terra.ReferenceAsList[GvnicAttributes](nc.ref.Append("gvnic"))
}

func (nc NodeConfigAttributes) KubeletConfig() terra.ListValue[KubeletConfigAttributes] {
	return terra.ReferenceAsList[KubeletConfigAttributes](nc.ref.Append("kubelet_config"))
}

func (nc NodeConfigAttributes) LinuxNodeConfig() terra.ListValue[LinuxNodeConfigAttributes] {
	return terra.ReferenceAsList[LinuxNodeConfigAttributes](nc.ref.Append("linux_node_config"))
}

func (nc NodeConfigAttributes) LocalNvmeSsdBlockConfig() terra.ListValue[LocalNvmeSsdBlockConfigAttributes] {
	return terra.ReferenceAsList[LocalNvmeSsdBlockConfigAttributes](nc.ref.Append("local_nvme_ssd_block_config"))
}

func (nc NodeConfigAttributes) ReservationAffinity() terra.ListValue[ReservationAffinityAttributes] {
	return terra.ReferenceAsList[ReservationAffinityAttributes](nc.ref.Append("reservation_affinity"))
}

func (nc NodeConfigAttributes) SandboxConfig() terra.ListValue[SandboxConfigAttributes] {
	return terra.ReferenceAsList[SandboxConfigAttributes](nc.ref.Append("sandbox_config"))
}

func (nc NodeConfigAttributes) ShieldedInstanceConfig() terra.ListValue[ShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[ShieldedInstanceConfigAttributes](nc.ref.Append("shielded_instance_config"))
}

func (nc NodeConfigAttributes) SoleTenantConfig() terra.ListValue[SoleTenantConfigAttributes] {
	return terra.ReferenceAsList[SoleTenantConfigAttributes](nc.ref.Append("sole_tenant_config"))
}

func (nc NodeConfigAttributes) WorkloadMetadataConfig() terra.ListValue[WorkloadMetadataConfigAttributes] {
	return terra.ReferenceAsList[WorkloadMetadataConfigAttributes](nc.ref.Append("workload_metadata_config"))
}

type GuestAcceleratorAttributes struct {
	ref terra.Reference
}

func (ga GuestAcceleratorAttributes) InternalRef() (terra.Reference, error) {
	return ga.ref, nil
}

func (ga GuestAcceleratorAttributes) InternalWithRef(ref terra.Reference) GuestAcceleratorAttributes {
	return GuestAcceleratorAttributes{ref: ref}
}

func (ga GuestAcceleratorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ga.ref.InternalTokens()
}

func (ga GuestAcceleratorAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(ga.ref.Append("count"))
}

func (ga GuestAcceleratorAttributes) GpuPartitionSize() terra.StringValue {
	return terra.ReferenceAsString(ga.ref.Append("gpu_partition_size"))
}

func (ga GuestAcceleratorAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ga.ref.Append("type"))
}

func (ga GuestAcceleratorAttributes) GpuDriverInstallationConfig() terra.ListValue[GpuDriverInstallationConfigAttributes] {
	return terra.ReferenceAsList[GpuDriverInstallationConfigAttributes](ga.ref.Append("gpu_driver_installation_config"))
}

func (ga GuestAcceleratorAttributes) GpuSharingConfig() terra.ListValue[GpuSharingConfigAttributes] {
	return terra.ReferenceAsList[GpuSharingConfigAttributes](ga.ref.Append("gpu_sharing_config"))
}

type GpuDriverInstallationConfigAttributes struct {
	ref terra.Reference
}

func (gdic GpuDriverInstallationConfigAttributes) InternalRef() (terra.Reference, error) {
	return gdic.ref, nil
}

func (gdic GpuDriverInstallationConfigAttributes) InternalWithRef(ref terra.Reference) GpuDriverInstallationConfigAttributes {
	return GpuDriverInstallationConfigAttributes{ref: ref}
}

func (gdic GpuDriverInstallationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gdic.ref.InternalTokens()
}

func (gdic GpuDriverInstallationConfigAttributes) GpuDriverVersion() terra.StringValue {
	return terra.ReferenceAsString(gdic.ref.Append("gpu_driver_version"))
}

type GpuSharingConfigAttributes struct {
	ref terra.Reference
}

func (gsc GpuSharingConfigAttributes) InternalRef() (terra.Reference, error) {
	return gsc.ref, nil
}

func (gsc GpuSharingConfigAttributes) InternalWithRef(ref terra.Reference) GpuSharingConfigAttributes {
	return GpuSharingConfigAttributes{ref: ref}
}

func (gsc GpuSharingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gsc.ref.InternalTokens()
}

func (gsc GpuSharingConfigAttributes) GpuSharingStrategy() terra.StringValue {
	return terra.ReferenceAsString(gsc.ref.Append("gpu_sharing_strategy"))
}

func (gsc GpuSharingConfigAttributes) MaxSharedClientsPerGpu() terra.NumberValue {
	return terra.ReferenceAsNumber(gsc.ref.Append("max_shared_clients_per_gpu"))
}

type TaintAttributes struct {
	ref terra.Reference
}

func (t TaintAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TaintAttributes) InternalWithRef(ref terra.Reference) TaintAttributes {
	return TaintAttributes{ref: ref}
}

func (t TaintAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TaintAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("effect"))
}

func (t TaintAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t TaintAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type AdvancedMachineFeaturesAttributes struct {
	ref terra.Reference
}

func (amf AdvancedMachineFeaturesAttributes) InternalRef() (terra.Reference, error) {
	return amf.ref, nil
}

func (amf AdvancedMachineFeaturesAttributes) InternalWithRef(ref terra.Reference) AdvancedMachineFeaturesAttributes {
	return AdvancedMachineFeaturesAttributes{ref: ref}
}

func (amf AdvancedMachineFeaturesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return amf.ref.InternalTokens()
}

func (amf AdvancedMachineFeaturesAttributes) ThreadsPerCore() terra.NumberValue {
	return terra.ReferenceAsNumber(amf.ref.Append("threads_per_core"))
}

type EphemeralStorageConfigAttributes struct {
	ref terra.Reference
}

func (esc EphemeralStorageConfigAttributes) InternalRef() (terra.Reference, error) {
	return esc.ref, nil
}

func (esc EphemeralStorageConfigAttributes) InternalWithRef(ref terra.Reference) EphemeralStorageConfigAttributes {
	return EphemeralStorageConfigAttributes{ref: ref}
}

func (esc EphemeralStorageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return esc.ref.InternalTokens()
}

func (esc EphemeralStorageConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(esc.ref.Append("local_ssd_count"))
}

type EphemeralStorageLocalSsdConfigAttributes struct {
	ref terra.Reference
}

func (eslsc EphemeralStorageLocalSsdConfigAttributes) InternalRef() (terra.Reference, error) {
	return eslsc.ref, nil
}

func (eslsc EphemeralStorageLocalSsdConfigAttributes) InternalWithRef(ref terra.Reference) EphemeralStorageLocalSsdConfigAttributes {
	return EphemeralStorageLocalSsdConfigAttributes{ref: ref}
}

func (eslsc EphemeralStorageLocalSsdConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eslsc.ref.InternalTokens()
}

func (eslsc EphemeralStorageLocalSsdConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(eslsc.ref.Append("local_ssd_count"))
}

type GcfsConfigAttributes struct {
	ref terra.Reference
}

func (gc GcfsConfigAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc GcfsConfigAttributes) InternalWithRef(ref terra.Reference) GcfsConfigAttributes {
	return GcfsConfigAttributes{ref: ref}
}

func (gc GcfsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc GcfsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gc.ref.Append("enabled"))
}

type GvnicAttributes struct {
	ref terra.Reference
}

func (g GvnicAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GvnicAttributes) InternalWithRef(ref terra.Reference) GvnicAttributes {
	return GvnicAttributes{ref: ref}
}

func (g GvnicAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GvnicAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("enabled"))
}

type KubeletConfigAttributes struct {
	ref terra.Reference
}

func (kc KubeletConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc KubeletConfigAttributes) InternalWithRef(ref terra.Reference) KubeletConfigAttributes {
	return KubeletConfigAttributes{ref: ref}
}

func (kc KubeletConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc KubeletConfigAttributes) CpuCfsQuota() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("cpu_cfs_quota"))
}

func (kc KubeletConfigAttributes) CpuCfsQuotaPeriod() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cpu_cfs_quota_period"))
}

func (kc KubeletConfigAttributes) CpuManagerPolicy() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cpu_manager_policy"))
}

func (kc KubeletConfigAttributes) PodPidsLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("pod_pids_limit"))
}

type LinuxNodeConfigAttributes struct {
	ref terra.Reference
}

func (lnc LinuxNodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnc.ref, nil
}

func (lnc LinuxNodeConfigAttributes) InternalWithRef(ref terra.Reference) LinuxNodeConfigAttributes {
	return LinuxNodeConfigAttributes{ref: ref}
}

func (lnc LinuxNodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnc.ref.InternalTokens()
}

func (lnc LinuxNodeConfigAttributes) Sysctls() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lnc.ref.Append("sysctls"))
}

type LocalNvmeSsdBlockConfigAttributes struct {
	ref terra.Reference
}

func (lnsbc LocalNvmeSsdBlockConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnsbc.ref, nil
}

func (lnsbc LocalNvmeSsdBlockConfigAttributes) InternalWithRef(ref terra.Reference) LocalNvmeSsdBlockConfigAttributes {
	return LocalNvmeSsdBlockConfigAttributes{ref: ref}
}

func (lnsbc LocalNvmeSsdBlockConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnsbc.ref.InternalTokens()
}

func (lnsbc LocalNvmeSsdBlockConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(lnsbc.ref.Append("local_ssd_count"))
}

type ReservationAffinityAttributes struct {
	ref terra.Reference
}

func (ra ReservationAffinityAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra ReservationAffinityAttributes) InternalWithRef(ref terra.Reference) ReservationAffinityAttributes {
	return ReservationAffinityAttributes{ref: ref}
}

func (ra ReservationAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra ReservationAffinityAttributes) ConsumeReservationType() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("consume_reservation_type"))
}

func (ra ReservationAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("key"))
}

func (ra ReservationAffinityAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ra.ref.Append("values"))
}

type SandboxConfigAttributes struct {
	ref terra.Reference
}

func (sc SandboxConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SandboxConfigAttributes) InternalWithRef(ref terra.Reference) SandboxConfigAttributes {
	return SandboxConfigAttributes{ref: ref}
}

func (sc SandboxConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SandboxConfigAttributes) SandboxType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("sandbox_type"))
}

type ShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic ShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic ShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) ShieldedInstanceConfigAttributes {
	return ShieldedInstanceConfigAttributes{ref: ref}
}

func (sic ShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic ShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic ShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

type SoleTenantConfigAttributes struct {
	ref terra.Reference
}

func (stc SoleTenantConfigAttributes) InternalRef() (terra.Reference, error) {
	return stc.ref, nil
}

func (stc SoleTenantConfigAttributes) InternalWithRef(ref terra.Reference) SoleTenantConfigAttributes {
	return SoleTenantConfigAttributes{ref: ref}
}

func (stc SoleTenantConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return stc.ref.InternalTokens()
}

func (stc SoleTenantConfigAttributes) NodeAffinity() terra.SetValue[NodeAffinityAttributes] {
	return terra.ReferenceAsSet[NodeAffinityAttributes](stc.ref.Append("node_affinity"))
}

type NodeAffinityAttributes struct {
	ref terra.Reference
}

func (na NodeAffinityAttributes) InternalRef() (terra.Reference, error) {
	return na.ref, nil
}

func (na NodeAffinityAttributes) InternalWithRef(ref terra.Reference) NodeAffinityAttributes {
	return NodeAffinityAttributes{ref: ref}
}

func (na NodeAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return na.ref.InternalTokens()
}

func (na NodeAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("key"))
}

func (na NodeAffinityAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("operator"))
}

func (na NodeAffinityAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](na.ref.Append("values"))
}

type WorkloadMetadataConfigAttributes struct {
	ref terra.Reference
}

func (wmc WorkloadMetadataConfigAttributes) InternalRef() (terra.Reference, error) {
	return wmc.ref, nil
}

func (wmc WorkloadMetadataConfigAttributes) InternalWithRef(ref terra.Reference) WorkloadMetadataConfigAttributes {
	return WorkloadMetadataConfigAttributes{ref: ref}
}

func (wmc WorkloadMetadataConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wmc.ref.InternalTokens()
}

func (wmc WorkloadMetadataConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(wmc.ref.Append("mode"))
}

type PlacementPolicyAttributes struct {
	ref terra.Reference
}

func (pp PlacementPolicyAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp PlacementPolicyAttributes) InternalWithRef(ref terra.Reference) PlacementPolicyAttributes {
	return PlacementPolicyAttributes{ref: ref}
}

func (pp PlacementPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp PlacementPolicyAttributes) TpuTopology() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("tpu_topology"))
}

func (pp PlacementPolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type UpgradeSettingsAttributes struct {
	ref terra.Reference
}

func (us UpgradeSettingsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us UpgradeSettingsAttributes) InternalWithRef(ref terra.Reference) UpgradeSettingsAttributes {
	return UpgradeSettingsAttributes{ref: ref}
}

func (us UpgradeSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us UpgradeSettingsAttributes) MaxSurge() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("max_surge"))
}

func (us UpgradeSettingsAttributes) MaxUnavailable() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("max_unavailable"))
}

func (us UpgradeSettingsAttributes) Strategy() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("strategy"))
}

func (us UpgradeSettingsAttributes) BlueGreenSettings() terra.ListValue[BlueGreenSettingsAttributes] {
	return terra.ReferenceAsList[BlueGreenSettingsAttributes](us.ref.Append("blue_green_settings"))
}

type BlueGreenSettingsAttributes struct {
	ref terra.Reference
}

func (bgs BlueGreenSettingsAttributes) InternalRef() (terra.Reference, error) {
	return bgs.ref, nil
}

func (bgs BlueGreenSettingsAttributes) InternalWithRef(ref terra.Reference) BlueGreenSettingsAttributes {
	return BlueGreenSettingsAttributes{ref: ref}
}

func (bgs BlueGreenSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bgs.ref.InternalTokens()
}

func (bgs BlueGreenSettingsAttributes) NodePoolSoakDuration() terra.StringValue {
	return terra.ReferenceAsString(bgs.ref.Append("node_pool_soak_duration"))
}

func (bgs BlueGreenSettingsAttributes) StandardRolloutPolicy() terra.ListValue[StandardRolloutPolicyAttributes] {
	return terra.ReferenceAsList[StandardRolloutPolicyAttributes](bgs.ref.Append("standard_rollout_policy"))
}

type StandardRolloutPolicyAttributes struct {
	ref terra.Reference
}

func (srp StandardRolloutPolicyAttributes) InternalRef() (terra.Reference, error) {
	return srp.ref, nil
}

func (srp StandardRolloutPolicyAttributes) InternalWithRef(ref terra.Reference) StandardRolloutPolicyAttributes {
	return StandardRolloutPolicyAttributes{ref: ref}
}

func (srp StandardRolloutPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return srp.ref.InternalTokens()
}

func (srp StandardRolloutPolicyAttributes) BatchNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(srp.ref.Append("batch_node_count"))
}

func (srp StandardRolloutPolicyAttributes) BatchPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(srp.ref.Append("batch_percentage"))
}

func (srp StandardRolloutPolicyAttributes) BatchSoakDuration() terra.StringValue {
	return terra.ReferenceAsString(srp.ref.Append("batch_soak_duration"))
}

type AutoscalingState struct {
	LocationPolicy    string  `json:"location_policy"`
	MaxNodeCount      float64 `json:"max_node_count"`
	MinNodeCount      float64 `json:"min_node_count"`
	TotalMaxNodeCount float64 `json:"total_max_node_count"`
	TotalMinNodeCount float64 `json:"total_min_node_count"`
}

type ManagementState struct {
	AutoRepair  bool `json:"auto_repair"`
	AutoUpgrade bool `json:"auto_upgrade"`
}

type NetworkConfigState struct {
	CreatePodRange               bool                                `json:"create_pod_range"`
	EnablePrivateNodes           bool                                `json:"enable_private_nodes"`
	PodIpv4CidrBlock             string                              `json:"pod_ipv4_cidr_block"`
	PodRange                     string                              `json:"pod_range"`
	AdditionalNodeNetworkConfigs []AdditionalNodeNetworkConfigsState `json:"additional_node_network_configs"`
	AdditionalPodNetworkConfigs  []AdditionalPodNetworkConfigsState  `json:"additional_pod_network_configs"`
	PodCidrOverprovisionConfig   []PodCidrOverprovisionConfigState   `json:"pod_cidr_overprovision_config"`
}

type AdditionalNodeNetworkConfigsState struct {
	Network    string `json:"network"`
	Subnetwork string `json:"subnetwork"`
}

type AdditionalPodNetworkConfigsState struct {
	MaxPodsPerNode    float64 `json:"max_pods_per_node"`
	SecondaryPodRange string  `json:"secondary_pod_range"`
	Subnetwork        string  `json:"subnetwork"`
}

type PodCidrOverprovisionConfigState struct {
	Disabled bool `json:"disabled"`
}

type NodeConfigState struct {
	BootDiskKmsKey                 string                                `json:"boot_disk_kms_key"`
	DiskSizeGb                     float64                               `json:"disk_size_gb"`
	DiskType                       string                                `json:"disk_type"`
	ImageType                      string                                `json:"image_type"`
	Labels                         map[string]string                     `json:"labels"`
	LocalSsdCount                  float64                               `json:"local_ssd_count"`
	LoggingVariant                 string                                `json:"logging_variant"`
	MachineType                    string                                `json:"machine_type"`
	Metadata                       map[string]string                     `json:"metadata"`
	MinCpuPlatform                 string                                `json:"min_cpu_platform"`
	NodeGroup                      string                                `json:"node_group"`
	OauthScopes                    []string                              `json:"oauth_scopes"`
	Preemptible                    bool                                  `json:"preemptible"`
	ResourceLabels                 map[string]string                     `json:"resource_labels"`
	ServiceAccount                 string                                `json:"service_account"`
	Spot                           bool                                  `json:"spot"`
	Tags                           []string                              `json:"tags"`
	GuestAccelerator               []GuestAcceleratorState               `json:"guest_accelerator"`
	Taint                          []TaintState                          `json:"taint"`
	AdvancedMachineFeatures        []AdvancedMachineFeaturesState        `json:"advanced_machine_features"`
	EphemeralStorageConfig         []EphemeralStorageConfigState         `json:"ephemeral_storage_config"`
	EphemeralStorageLocalSsdConfig []EphemeralStorageLocalSsdConfigState `json:"ephemeral_storage_local_ssd_config"`
	GcfsConfig                     []GcfsConfigState                     `json:"gcfs_config"`
	Gvnic                          []GvnicState                          `json:"gvnic"`
	KubeletConfig                  []KubeletConfigState                  `json:"kubelet_config"`
	LinuxNodeConfig                []LinuxNodeConfigState                `json:"linux_node_config"`
	LocalNvmeSsdBlockConfig        []LocalNvmeSsdBlockConfigState        `json:"local_nvme_ssd_block_config"`
	ReservationAffinity            []ReservationAffinityState            `json:"reservation_affinity"`
	SandboxConfig                  []SandboxConfigState                  `json:"sandbox_config"`
	ShieldedInstanceConfig         []ShieldedInstanceConfigState         `json:"shielded_instance_config"`
	SoleTenantConfig               []SoleTenantConfigState               `json:"sole_tenant_config"`
	WorkloadMetadataConfig         []WorkloadMetadataConfigState         `json:"workload_metadata_config"`
}

type GuestAcceleratorState struct {
	Count                       float64                            `json:"count"`
	GpuPartitionSize            string                             `json:"gpu_partition_size"`
	Type                        string                             `json:"type"`
	GpuDriverInstallationConfig []GpuDriverInstallationConfigState `json:"gpu_driver_installation_config"`
	GpuSharingConfig            []GpuSharingConfigState            `json:"gpu_sharing_config"`
}

type GpuDriverInstallationConfigState struct {
	GpuDriverVersion string `json:"gpu_driver_version"`
}

type GpuSharingConfigState struct {
	GpuSharingStrategy     string  `json:"gpu_sharing_strategy"`
	MaxSharedClientsPerGpu float64 `json:"max_shared_clients_per_gpu"`
}

type TaintState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type AdvancedMachineFeaturesState struct {
	ThreadsPerCore float64 `json:"threads_per_core"`
}

type EphemeralStorageConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type EphemeralStorageLocalSsdConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type GcfsConfigState struct {
	Enabled bool `json:"enabled"`
}

type GvnicState struct {
	Enabled bool `json:"enabled"`
}

type KubeletConfigState struct {
	CpuCfsQuota       bool    `json:"cpu_cfs_quota"`
	CpuCfsQuotaPeriod string  `json:"cpu_cfs_quota_period"`
	CpuManagerPolicy  string  `json:"cpu_manager_policy"`
	PodPidsLimit      float64 `json:"pod_pids_limit"`
}

type LinuxNodeConfigState struct {
	Sysctls map[string]string `json:"sysctls"`
}

type LocalNvmeSsdBlockConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type ReservationAffinityState struct {
	ConsumeReservationType string   `json:"consume_reservation_type"`
	Key                    string   `json:"key"`
	Values                 []string `json:"values"`
}

type SandboxConfigState struct {
	SandboxType string `json:"sandbox_type"`
}

type ShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
}

type SoleTenantConfigState struct {
	NodeAffinity []NodeAffinityState `json:"node_affinity"`
}

type NodeAffinityState struct {
	Key      string   `json:"key"`
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type WorkloadMetadataConfigState struct {
	Mode string `json:"mode"`
}

type PlacementPolicyState struct {
	TpuTopology string `json:"tpu_topology"`
	Type        string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type UpgradeSettingsState struct {
	MaxSurge          float64                  `json:"max_surge"`
	MaxUnavailable    float64                  `json:"max_unavailable"`
	Strategy          string                   `json:"strategy"`
	BlueGreenSettings []BlueGreenSettingsState `json:"blue_green_settings"`
}

type BlueGreenSettingsState struct {
	NodePoolSoakDuration  string                       `json:"node_pool_soak_duration"`
	StandardRolloutPolicy []StandardRolloutPolicyState `json:"standard_rollout_policy"`
}

type StandardRolloutPolicyState struct {
	BatchNodeCount    float64 `json:"batch_node_count"`
	BatchPercentage   float64 `json:"batch_percentage"`
	BatchSoakDuration string  `json:"batch_soak_duration"`
}
