// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataartifactregistryrepository

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CleanupPolicies struct {
	// Condition: min=0
	Condition []Condition `hcl:"condition,block" validate:"min=0"`
	// MostRecentVersions: min=0
	MostRecentVersions []MostRecentVersions `hcl:"most_recent_versions,block" validate:"min=0"`
}

type Condition struct{}

type MostRecentVersions struct{}

type DockerConfig struct{}

type MavenConfig struct{}

type RemoteRepositoryConfig struct {
	// DockerRepository: min=0
	DockerRepository []DockerRepository `hcl:"docker_repository,block" validate:"min=0"`
	// MavenRepository: min=0
	MavenRepository []MavenRepository `hcl:"maven_repository,block" validate:"min=0"`
	// NpmRepository: min=0
	NpmRepository []NpmRepository `hcl:"npm_repository,block" validate:"min=0"`
	// PythonRepository: min=0
	PythonRepository []PythonRepository `hcl:"python_repository,block" validate:"min=0"`
}

type DockerRepository struct{}

type MavenRepository struct{}

type NpmRepository struct{}

type PythonRepository struct{}

type VirtualRepositoryConfig struct {
	// UpstreamPolicies: min=0
	UpstreamPolicies []UpstreamPolicies `hcl:"upstream_policies,block" validate:"min=0"`
}

type UpstreamPolicies struct{}

type CleanupPoliciesAttributes struct {
	ref terra.Reference
}

func (cp CleanupPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp CleanupPoliciesAttributes) InternalWithRef(ref terra.Reference) CleanupPoliciesAttributes {
	return CleanupPoliciesAttributes{ref: ref}
}

func (cp CleanupPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp CleanupPoliciesAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("action"))
}

func (cp CleanupPoliciesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("id"))
}

func (cp CleanupPoliciesAttributes) Condition() terra.ListValue[ConditionAttributes] {
	return terra.ReferenceAsList[ConditionAttributes](cp.ref.Append("condition"))
}

func (cp CleanupPoliciesAttributes) MostRecentVersions() terra.ListValue[MostRecentVersionsAttributes] {
	return terra.ReferenceAsList[MostRecentVersionsAttributes](cp.ref.Append("most_recent_versions"))
}

type ConditionAttributes struct {
	ref terra.Reference
}

func (c ConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionAttributes) InternalWithRef(ref terra.Reference) ConditionAttributes {
	return ConditionAttributes{ref: ref}
}

func (c ConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionAttributes) NewerThan() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("newer_than"))
}

func (c ConditionAttributes) OlderThan() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("older_than"))
}

func (c ConditionAttributes) PackageNamePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("package_name_prefixes"))
}

func (c ConditionAttributes) TagPrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("tag_prefixes"))
}

func (c ConditionAttributes) TagState() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("tag_state"))
}

func (c ConditionAttributes) VersionNamePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("version_name_prefixes"))
}

type MostRecentVersionsAttributes struct {
	ref terra.Reference
}

func (mrv MostRecentVersionsAttributes) InternalRef() (terra.Reference, error) {
	return mrv.ref, nil
}

func (mrv MostRecentVersionsAttributes) InternalWithRef(ref terra.Reference) MostRecentVersionsAttributes {
	return MostRecentVersionsAttributes{ref: ref}
}

func (mrv MostRecentVersionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mrv.ref.InternalTokens()
}

func (mrv MostRecentVersionsAttributes) KeepCount() terra.NumberValue {
	return terra.ReferenceAsNumber(mrv.ref.Append("keep_count"))
}

func (mrv MostRecentVersionsAttributes) PackageNamePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mrv.ref.Append("package_name_prefixes"))
}

type DockerConfigAttributes struct {
	ref terra.Reference
}

func (dc DockerConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DockerConfigAttributes) InternalWithRef(ref terra.Reference) DockerConfigAttributes {
	return DockerConfigAttributes{ref: ref}
}

func (dc DockerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DockerConfigAttributes) ImmutableTags() terra.BoolValue {
	return terra.ReferenceAsBool(dc.ref.Append("immutable_tags"))
}

type MavenConfigAttributes struct {
	ref terra.Reference
}

func (mc MavenConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MavenConfigAttributes) InternalWithRef(ref terra.Reference) MavenConfigAttributes {
	return MavenConfigAttributes{ref: ref}
}

func (mc MavenConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MavenConfigAttributes) AllowSnapshotOverwrites() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("allow_snapshot_overwrites"))
}

func (mc MavenConfigAttributes) VersionPolicy() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("version_policy"))
}

type RemoteRepositoryConfigAttributes struct {
	ref terra.Reference
}

func (rrc RemoteRepositoryConfigAttributes) InternalRef() (terra.Reference, error) {
	return rrc.ref, nil
}

func (rrc RemoteRepositoryConfigAttributes) InternalWithRef(ref terra.Reference) RemoteRepositoryConfigAttributes {
	return RemoteRepositoryConfigAttributes{ref: ref}
}

func (rrc RemoteRepositoryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rrc.ref.InternalTokens()
}

func (rrc RemoteRepositoryConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(rrc.ref.Append("description"))
}

func (rrc RemoteRepositoryConfigAttributes) DockerRepository() terra.ListValue[DockerRepositoryAttributes] {
	return terra.ReferenceAsList[DockerRepositoryAttributes](rrc.ref.Append("docker_repository"))
}

func (rrc RemoteRepositoryConfigAttributes) MavenRepository() terra.ListValue[MavenRepositoryAttributes] {
	return terra.ReferenceAsList[MavenRepositoryAttributes](rrc.ref.Append("maven_repository"))
}

func (rrc RemoteRepositoryConfigAttributes) NpmRepository() terra.ListValue[NpmRepositoryAttributes] {
	return terra.ReferenceAsList[NpmRepositoryAttributes](rrc.ref.Append("npm_repository"))
}

func (rrc RemoteRepositoryConfigAttributes) PythonRepository() terra.ListValue[PythonRepositoryAttributes] {
	return terra.ReferenceAsList[PythonRepositoryAttributes](rrc.ref.Append("python_repository"))
}

type DockerRepositoryAttributes struct {
	ref terra.Reference
}

func (dr DockerRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr DockerRepositoryAttributes) InternalWithRef(ref terra.Reference) DockerRepositoryAttributes {
	return DockerRepositoryAttributes{ref: ref}
}

func (dr DockerRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr DockerRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("public_repository"))
}

type MavenRepositoryAttributes struct {
	ref terra.Reference
}

func (mr MavenRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr MavenRepositoryAttributes) InternalWithRef(ref terra.Reference) MavenRepositoryAttributes {
	return MavenRepositoryAttributes{ref: ref}
}

func (mr MavenRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr MavenRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("public_repository"))
}

type NpmRepositoryAttributes struct {
	ref terra.Reference
}

func (nr NpmRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return nr.ref, nil
}

func (nr NpmRepositoryAttributes) InternalWithRef(ref terra.Reference) NpmRepositoryAttributes {
	return NpmRepositoryAttributes{ref: ref}
}

func (nr NpmRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nr.ref.InternalTokens()
}

func (nr NpmRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(nr.ref.Append("public_repository"))
}

type PythonRepositoryAttributes struct {
	ref terra.Reference
}

func (pr PythonRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr PythonRepositoryAttributes) InternalWithRef(ref terra.Reference) PythonRepositoryAttributes {
	return PythonRepositoryAttributes{ref: ref}
}

func (pr PythonRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr PythonRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("public_repository"))
}

type VirtualRepositoryConfigAttributes struct {
	ref terra.Reference
}

func (vrc VirtualRepositoryConfigAttributes) InternalRef() (terra.Reference, error) {
	return vrc.ref, nil
}

func (vrc VirtualRepositoryConfigAttributes) InternalWithRef(ref terra.Reference) VirtualRepositoryConfigAttributes {
	return VirtualRepositoryConfigAttributes{ref: ref}
}

func (vrc VirtualRepositoryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vrc.ref.InternalTokens()
}

func (vrc VirtualRepositoryConfigAttributes) UpstreamPolicies() terra.ListValue[UpstreamPoliciesAttributes] {
	return terra.ReferenceAsList[UpstreamPoliciesAttributes](vrc.ref.Append("upstream_policies"))
}

type UpstreamPoliciesAttributes struct {
	ref terra.Reference
}

func (up UpstreamPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return up.ref, nil
}

func (up UpstreamPoliciesAttributes) InternalWithRef(ref terra.Reference) UpstreamPoliciesAttributes {
	return UpstreamPoliciesAttributes{ref: ref}
}

func (up UpstreamPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return up.ref.InternalTokens()
}

func (up UpstreamPoliciesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("id"))
}

func (up UpstreamPoliciesAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(up.ref.Append("priority"))
}

func (up UpstreamPoliciesAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("repository"))
}

type CleanupPoliciesState struct {
	Action             string                    `json:"action"`
	Id                 string                    `json:"id"`
	Condition          []ConditionState          `json:"condition"`
	MostRecentVersions []MostRecentVersionsState `json:"most_recent_versions"`
}

type ConditionState struct {
	NewerThan           string   `json:"newer_than"`
	OlderThan           string   `json:"older_than"`
	PackageNamePrefixes []string `json:"package_name_prefixes"`
	TagPrefixes         []string `json:"tag_prefixes"`
	TagState            string   `json:"tag_state"`
	VersionNamePrefixes []string `json:"version_name_prefixes"`
}

type MostRecentVersionsState struct {
	KeepCount           float64  `json:"keep_count"`
	PackageNamePrefixes []string `json:"package_name_prefixes"`
}

type DockerConfigState struct {
	ImmutableTags bool `json:"immutable_tags"`
}

type MavenConfigState struct {
	AllowSnapshotOverwrites bool   `json:"allow_snapshot_overwrites"`
	VersionPolicy           string `json:"version_policy"`
}

type RemoteRepositoryConfigState struct {
	Description      string                  `json:"description"`
	DockerRepository []DockerRepositoryState `json:"docker_repository"`
	MavenRepository  []MavenRepositoryState  `json:"maven_repository"`
	NpmRepository    []NpmRepositoryState    `json:"npm_repository"`
	PythonRepository []PythonRepositoryState `json:"python_repository"`
}

type DockerRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type MavenRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type NpmRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type PythonRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type VirtualRepositoryConfigState struct {
	UpstreamPolicies []UpstreamPoliciesState `json:"upstream_policies"`
}

type UpstreamPoliciesState struct {
	Id         string  `json:"id"`
	Priority   float64 `json:"priority"`
	Repository string  `json:"repository"`
}
