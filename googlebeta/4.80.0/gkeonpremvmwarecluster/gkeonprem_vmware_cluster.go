// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package gkeonpremvmwarecluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Fleet struct{}

type Status struct {
	// Conditions: min=0
	Conditions []Conditions `hcl:"conditions,block" validate:"min=0"`
}

type Conditions struct{}

type ValidationCheck struct {
	// ValidationCheckStatus: min=0
	Status []ValidationCheckStatus `hcl:"status,block" validate:"min=0"`
}

type ValidationCheckStatus struct {
	// Result: min=0
	Result []Result `hcl:"result,block" validate:"min=0"`
}

type Result struct{}

type Vcenter struct{}

type AntiAffinityGroups struct {
	// AagConfigDisabled: bool, required
	AagConfigDisabled terra.BoolValue `hcl:"aag_config_disabled,attr" validate:"required"`
}

type Authorization struct {
	// AdminUsers: min=0
	AdminUsers []AdminUsers `hcl:"admin_users,block" validate:"min=0"`
}

type AdminUsers struct {
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type AutoRepairConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type ControlPlaneNode struct {
	// Cpus: number, optional
	Cpus terra.NumberValue `hcl:"cpus,attr"`
	// Memory: number, optional
	Memory terra.NumberValue `hcl:"memory,attr"`
	// Replicas: number, optional
	Replicas terra.NumberValue `hcl:"replicas,attr"`
	// VsphereConfig: min=0
	VsphereConfig []VsphereConfig `hcl:"vsphere_config,block" validate:"min=0"`
	// AutoResizeConfig: optional
	AutoResizeConfig *AutoResizeConfig `hcl:"auto_resize_config,block"`
}

type VsphereConfig struct{}

type AutoResizeConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type DataplaneV2 struct {
	// AdvancedNetworking: bool, optional
	AdvancedNetworking terra.BoolValue `hcl:"advanced_networking,attr"`
	// DataplaneV2Enabled: bool, optional
	DataplaneV2Enabled terra.BoolValue `hcl:"dataplane_v2_enabled,attr"`
	// WindowsDataplaneV2Enabled: bool, optional
	WindowsDataplaneV2Enabled terra.BoolValue `hcl:"windows_dataplane_v2_enabled,attr"`
}

type LoadBalancer struct {
	// F5Config: optional
	F5Config *F5Config `hcl:"f5_config,block"`
	// ManualLbConfig: optional
	ManualLbConfig *ManualLbConfig `hcl:"manual_lb_config,block"`
	// MetalLbConfig: optional
	MetalLbConfig *MetalLbConfig `hcl:"metal_lb_config,block"`
	// VipConfig: optional
	VipConfig *VipConfig `hcl:"vip_config,block"`
}

type F5Config struct {
	// Address: string, optional
	Address terra.StringValue `hcl:"address,attr"`
	// Partition: string, optional
	Partition terra.StringValue `hcl:"partition,attr"`
	// SnatPool: string, optional
	SnatPool terra.StringValue `hcl:"snat_pool,attr"`
}

type ManualLbConfig struct {
	// ControlPlaneNodePort: number, optional
	ControlPlaneNodePort terra.NumberValue `hcl:"control_plane_node_port,attr"`
	// IngressHttpNodePort: number, optional
	IngressHttpNodePort terra.NumberValue `hcl:"ingress_http_node_port,attr"`
	// IngressHttpsNodePort: number, optional
	IngressHttpsNodePort terra.NumberValue `hcl:"ingress_https_node_port,attr"`
	// KonnectivityServerNodePort: number, optional
	KonnectivityServerNodePort terra.NumberValue `hcl:"konnectivity_server_node_port,attr"`
}

type MetalLbConfig struct {
	// AddressPools: min=1
	AddressPools []AddressPools `hcl:"address_pools,block" validate:"min=1"`
}

type AddressPools struct {
	// Addresses: list of string, required
	Addresses terra.ListValue[terra.StringValue] `hcl:"addresses,attr" validate:"required"`
	// AvoidBuggyIps: bool, optional
	AvoidBuggyIps terra.BoolValue `hcl:"avoid_buggy_ips,attr"`
	// ManualAssign: bool, optional
	ManualAssign terra.BoolValue `hcl:"manual_assign,attr"`
	// Pool: string, required
	Pool terra.StringValue `hcl:"pool,attr" validate:"required"`
}

type VipConfig struct {
	// ControlPlaneVip: string, optional
	ControlPlaneVip terra.StringValue `hcl:"control_plane_vip,attr"`
	// IngressVip: string, optional
	IngressVip terra.StringValue `hcl:"ingress_vip,attr"`
}

type NetworkConfig struct {
	// PodAddressCidrBlocks: list of string, required
	PodAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"pod_address_cidr_blocks,attr" validate:"required"`
	// ServiceAddressCidrBlocks: list of string, required
	ServiceAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"service_address_cidr_blocks,attr" validate:"required"`
	// ControlPlaneV2Config: optional
	ControlPlaneV2Config *ControlPlaneV2Config `hcl:"control_plane_v2_config,block"`
	// DhcpIpConfig: optional
	DhcpIpConfig *DhcpIpConfig `hcl:"dhcp_ip_config,block"`
	// HostConfig: optional
	HostConfig *HostConfig `hcl:"host_config,block"`
	// StaticIpConfig: optional
	StaticIpConfig *StaticIpConfig `hcl:"static_ip_config,block"`
}

type ControlPlaneV2Config struct {
	// ControlPlaneIpBlock: optional
	ControlPlaneIpBlock *ControlPlaneIpBlock `hcl:"control_plane_ip_block,block"`
}

type ControlPlaneIpBlock struct {
	// Gateway: string, optional
	Gateway terra.StringValue `hcl:"gateway,attr"`
	// Netmask: string, optional
	Netmask terra.StringValue `hcl:"netmask,attr"`
	// ControlPlaneIpBlockIps: min=0
	Ips []ControlPlaneIpBlockIps `hcl:"ips,block" validate:"min=0"`
}

type ControlPlaneIpBlockIps struct {
	// Hostname: string, optional
	Hostname terra.StringValue `hcl:"hostname,attr"`
	// Ip: string, optional
	Ip terra.StringValue `hcl:"ip,attr"`
}

type DhcpIpConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type HostConfig struct {
	// DnsSearchDomains: list of string, optional
	DnsSearchDomains terra.ListValue[terra.StringValue] `hcl:"dns_search_domains,attr"`
	// DnsServers: list of string, optional
	DnsServers terra.ListValue[terra.StringValue] `hcl:"dns_servers,attr"`
	// NtpServers: list of string, optional
	NtpServers terra.ListValue[terra.StringValue] `hcl:"ntp_servers,attr"`
}

type StaticIpConfig struct {
	// IpBlocks: min=1
	IpBlocks []IpBlocks `hcl:"ip_blocks,block" validate:"min=1"`
}

type IpBlocks struct {
	// Gateway: string, required
	Gateway terra.StringValue `hcl:"gateway,attr" validate:"required"`
	// Netmask: string, required
	Netmask terra.StringValue `hcl:"netmask,attr" validate:"required"`
	// IpBlocksIps: min=1
	Ips []IpBlocksIps `hcl:"ips,block" validate:"min=1"`
}

type IpBlocksIps struct {
	// Hostname: string, optional
	Hostname terra.StringValue `hcl:"hostname,attr"`
	// Ip: string, required
	Ip terra.StringValue `hcl:"ip,attr" validate:"required"`
}

type Storage struct {
	// VsphereCsiDisabled: bool, required
	VsphereCsiDisabled terra.BoolValue `hcl:"vsphere_csi_disabled,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type FleetAttributes struct {
	ref terra.Reference
}

func (f FleetAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FleetAttributes) InternalWithRef(ref terra.Reference) FleetAttributes {
	return FleetAttributes{ref: ref}
}

func (f FleetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FleetAttributes) Membership() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("membership"))
}

type StatusAttributes struct {
	ref terra.Reference
}

func (s StatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StatusAttributes) InternalWithRef(ref terra.Reference) StatusAttributes {
	return StatusAttributes{ref: ref}
}

func (s StatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StatusAttributes) ErrorMessage() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("error_message"))
}

func (s StatusAttributes) Conditions() terra.ListValue[ConditionsAttributes] {
	return terra.ReferenceAsList[ConditionsAttributes](s.ref.Append("conditions"))
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) LastTransitionTime() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("last_transition_time"))
}

func (c ConditionsAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("message"))
}

func (c ConditionsAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("reason"))
}

func (c ConditionsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("state"))
}

func (c ConditionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type ValidationCheckAttributes struct {
	ref terra.Reference
}

func (vc ValidationCheckAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc ValidationCheckAttributes) InternalWithRef(ref terra.Reference) ValidationCheckAttributes {
	return ValidationCheckAttributes{ref: ref}
}

func (vc ValidationCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc ValidationCheckAttributes) Options() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("options"))
}

func (vc ValidationCheckAttributes) Scenario() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("scenario"))
}

func (vc ValidationCheckAttributes) Status() terra.ListValue[ValidationCheckStatusAttributes] {
	return terra.ReferenceAsList[ValidationCheckStatusAttributes](vc.ref.Append("status"))
}

type ValidationCheckStatusAttributes struct {
	ref terra.Reference
}

func (s ValidationCheckStatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ValidationCheckStatusAttributes) InternalWithRef(ref terra.Reference) ValidationCheckStatusAttributes {
	return ValidationCheckStatusAttributes{ref: ref}
}

func (s ValidationCheckStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ValidationCheckStatusAttributes) Result() terra.ListValue[ResultAttributes] {
	return terra.ReferenceAsList[ResultAttributes](s.ref.Append("result"))
}

type ResultAttributes struct {
	ref terra.Reference
}

func (r ResultAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ResultAttributes) InternalWithRef(ref terra.Reference) ResultAttributes {
	return ResultAttributes{ref: ref}
}

func (r ResultAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ResultAttributes) Category() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("category"))
}

func (r ResultAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("description"))
}

func (r ResultAttributes) Details() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("details"))
}

func (r ResultAttributes) Options() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("options"))
}

func (r ResultAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("reason"))
}

type VcenterAttributes struct {
	ref terra.Reference
}

func (v VcenterAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VcenterAttributes) InternalWithRef(ref terra.Reference) VcenterAttributes {
	return VcenterAttributes{ref: ref}
}

func (v VcenterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VcenterAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("address"))
}

func (v VcenterAttributes) CaCertData() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("ca_cert_data"))
}

func (v VcenterAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("cluster"))
}

func (v VcenterAttributes) Datacenter() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("datacenter"))
}

func (v VcenterAttributes) Datastore() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("datastore"))
}

func (v VcenterAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("folder"))
}

func (v VcenterAttributes) ResourcePool() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("resource_pool"))
}

func (v VcenterAttributes) StoragePolicyName() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("storage_policy_name"))
}

type AntiAffinityGroupsAttributes struct {
	ref terra.Reference
}

func (aag AntiAffinityGroupsAttributes) InternalRef() (terra.Reference, error) {
	return aag.ref, nil
}

func (aag AntiAffinityGroupsAttributes) InternalWithRef(ref terra.Reference) AntiAffinityGroupsAttributes {
	return AntiAffinityGroupsAttributes{ref: ref}
}

func (aag AntiAffinityGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aag.ref.InternalTokens()
}

func (aag AntiAffinityGroupsAttributes) AagConfigDisabled() terra.BoolValue {
	return terra.ReferenceAsBool(aag.ref.Append("aag_config_disabled"))
}

type AuthorizationAttributes struct {
	ref terra.Reference
}

func (a AuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthorizationAttributes) InternalWithRef(ref terra.Reference) AuthorizationAttributes {
	return AuthorizationAttributes{ref: ref}
}

func (a AuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthorizationAttributes) AdminUsers() terra.ListValue[AdminUsersAttributes] {
	return terra.ReferenceAsList[AdminUsersAttributes](a.ref.Append("admin_users"))
}

type AdminUsersAttributes struct {
	ref terra.Reference
}

func (au AdminUsersAttributes) InternalRef() (terra.Reference, error) {
	return au.ref, nil
}

func (au AdminUsersAttributes) InternalWithRef(ref terra.Reference) AdminUsersAttributes {
	return AdminUsersAttributes{ref: ref}
}

func (au AdminUsersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return au.ref.InternalTokens()
}

func (au AdminUsersAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("username"))
}

type AutoRepairConfigAttributes struct {
	ref terra.Reference
}

func (arc AutoRepairConfigAttributes) InternalRef() (terra.Reference, error) {
	return arc.ref, nil
}

func (arc AutoRepairConfigAttributes) InternalWithRef(ref terra.Reference) AutoRepairConfigAttributes {
	return AutoRepairConfigAttributes{ref: ref}
}

func (arc AutoRepairConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return arc.ref.InternalTokens()
}

func (arc AutoRepairConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("enabled"))
}

type ControlPlaneNodeAttributes struct {
	ref terra.Reference
}

func (cpn ControlPlaneNodeAttributes) InternalRef() (terra.Reference, error) {
	return cpn.ref, nil
}

func (cpn ControlPlaneNodeAttributes) InternalWithRef(ref terra.Reference) ControlPlaneNodeAttributes {
	return ControlPlaneNodeAttributes{ref: ref}
}

func (cpn ControlPlaneNodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpn.ref.InternalTokens()
}

func (cpn ControlPlaneNodeAttributes) Cpus() terra.NumberValue {
	return terra.ReferenceAsNumber(cpn.ref.Append("cpus"))
}

func (cpn ControlPlaneNodeAttributes) Memory() terra.NumberValue {
	return terra.ReferenceAsNumber(cpn.ref.Append("memory"))
}

func (cpn ControlPlaneNodeAttributes) Replicas() terra.NumberValue {
	return terra.ReferenceAsNumber(cpn.ref.Append("replicas"))
}

func (cpn ControlPlaneNodeAttributes) VsphereConfig() terra.ListValue[VsphereConfigAttributes] {
	return terra.ReferenceAsList[VsphereConfigAttributes](cpn.ref.Append("vsphere_config"))
}

func (cpn ControlPlaneNodeAttributes) AutoResizeConfig() terra.ListValue[AutoResizeConfigAttributes] {
	return terra.ReferenceAsList[AutoResizeConfigAttributes](cpn.ref.Append("auto_resize_config"))
}

type VsphereConfigAttributes struct {
	ref terra.Reference
}

func (vc VsphereConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VsphereConfigAttributes) InternalWithRef(ref terra.Reference) VsphereConfigAttributes {
	return VsphereConfigAttributes{ref: ref}
}

func (vc VsphereConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VsphereConfigAttributes) Datastore() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("datastore"))
}

func (vc VsphereConfigAttributes) StoragePolicyName() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("storage_policy_name"))
}

type AutoResizeConfigAttributes struct {
	ref terra.Reference
}

func (arc AutoResizeConfigAttributes) InternalRef() (terra.Reference, error) {
	return arc.ref, nil
}

func (arc AutoResizeConfigAttributes) InternalWithRef(ref terra.Reference) AutoResizeConfigAttributes {
	return AutoResizeConfigAttributes{ref: ref}
}

func (arc AutoResizeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return arc.ref.InternalTokens()
}

func (arc AutoResizeConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("enabled"))
}

type DataplaneV2Attributes struct {
	ref terra.Reference
}

func (dv DataplaneV2Attributes) InternalRef() (terra.Reference, error) {
	return dv.ref, nil
}

func (dv DataplaneV2Attributes) InternalWithRef(ref terra.Reference) DataplaneV2Attributes {
	return DataplaneV2Attributes{ref: ref}
}

func (dv DataplaneV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return dv.ref.InternalTokens()
}

func (dv DataplaneV2Attributes) AdvancedNetworking() terra.BoolValue {
	return terra.ReferenceAsBool(dv.ref.Append("advanced_networking"))
}

func (dv DataplaneV2Attributes) DataplaneV2Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dv.ref.Append("dataplane_v2_enabled"))
}

func (dv DataplaneV2Attributes) WindowsDataplaneV2Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dv.ref.Append("windows_dataplane_v2_enabled"))
}

type LoadBalancerAttributes struct {
	ref terra.Reference
}

func (lb LoadBalancerAttributes) InternalRef() (terra.Reference, error) {
	return lb.ref, nil
}

func (lb LoadBalancerAttributes) InternalWithRef(ref terra.Reference) LoadBalancerAttributes {
	return LoadBalancerAttributes{ref: ref}
}

func (lb LoadBalancerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lb.ref.InternalTokens()
}

func (lb LoadBalancerAttributes) F5Config() terra.ListValue[F5ConfigAttributes] {
	return terra.ReferenceAsList[F5ConfigAttributes](lb.ref.Append("f5_config"))
}

func (lb LoadBalancerAttributes) ManualLbConfig() terra.ListValue[ManualLbConfigAttributes] {
	return terra.ReferenceAsList[ManualLbConfigAttributes](lb.ref.Append("manual_lb_config"))
}

func (lb LoadBalancerAttributes) MetalLbConfig() terra.ListValue[MetalLbConfigAttributes] {
	return terra.ReferenceAsList[MetalLbConfigAttributes](lb.ref.Append("metal_lb_config"))
}

func (lb LoadBalancerAttributes) VipConfig() terra.ListValue[VipConfigAttributes] {
	return terra.ReferenceAsList[VipConfigAttributes](lb.ref.Append("vip_config"))
}

type F5ConfigAttributes struct {
	ref terra.Reference
}

func (fc F5ConfigAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc F5ConfigAttributes) InternalWithRef(ref terra.Reference) F5ConfigAttributes {
	return F5ConfigAttributes{ref: ref}
}

func (fc F5ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc F5ConfigAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("address"))
}

func (fc F5ConfigAttributes) Partition() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("partition"))
}

func (fc F5ConfigAttributes) SnatPool() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("snat_pool"))
}

type ManualLbConfigAttributes struct {
	ref terra.Reference
}

func (mlc ManualLbConfigAttributes) InternalRef() (terra.Reference, error) {
	return mlc.ref, nil
}

func (mlc ManualLbConfigAttributes) InternalWithRef(ref terra.Reference) ManualLbConfigAttributes {
	return ManualLbConfigAttributes{ref: ref}
}

func (mlc ManualLbConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mlc.ref.InternalTokens()
}

func (mlc ManualLbConfigAttributes) ControlPlaneNodePort() terra.NumberValue {
	return terra.ReferenceAsNumber(mlc.ref.Append("control_plane_node_port"))
}

func (mlc ManualLbConfigAttributes) IngressHttpNodePort() terra.NumberValue {
	return terra.ReferenceAsNumber(mlc.ref.Append("ingress_http_node_port"))
}

func (mlc ManualLbConfigAttributes) IngressHttpsNodePort() terra.NumberValue {
	return terra.ReferenceAsNumber(mlc.ref.Append("ingress_https_node_port"))
}

func (mlc ManualLbConfigAttributes) KonnectivityServerNodePort() terra.NumberValue {
	return terra.ReferenceAsNumber(mlc.ref.Append("konnectivity_server_node_port"))
}

type MetalLbConfigAttributes struct {
	ref terra.Reference
}

func (mlc MetalLbConfigAttributes) InternalRef() (terra.Reference, error) {
	return mlc.ref, nil
}

func (mlc MetalLbConfigAttributes) InternalWithRef(ref terra.Reference) MetalLbConfigAttributes {
	return MetalLbConfigAttributes{ref: ref}
}

func (mlc MetalLbConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mlc.ref.InternalTokens()
}

func (mlc MetalLbConfigAttributes) AddressPools() terra.ListValue[AddressPoolsAttributes] {
	return terra.ReferenceAsList[AddressPoolsAttributes](mlc.ref.Append("address_pools"))
}

type AddressPoolsAttributes struct {
	ref terra.Reference
}

func (ap AddressPoolsAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap AddressPoolsAttributes) InternalWithRef(ref terra.Reference) AddressPoolsAttributes {
	return AddressPoolsAttributes{ref: ref}
}

func (ap AddressPoolsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap AddressPoolsAttributes) Addresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ap.ref.Append("addresses"))
}

func (ap AddressPoolsAttributes) AvoidBuggyIps() terra.BoolValue {
	return terra.ReferenceAsBool(ap.ref.Append("avoid_buggy_ips"))
}

func (ap AddressPoolsAttributes) ManualAssign() terra.BoolValue {
	return terra.ReferenceAsBool(ap.ref.Append("manual_assign"))
}

func (ap AddressPoolsAttributes) Pool() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("pool"))
}

type VipConfigAttributes struct {
	ref terra.Reference
}

func (vc VipConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VipConfigAttributes) InternalWithRef(ref terra.Reference) VipConfigAttributes {
	return VipConfigAttributes{ref: ref}
}

func (vc VipConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VipConfigAttributes) ControlPlaneVip() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("control_plane_vip"))
}

func (vc VipConfigAttributes) IngressVip() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("ingress_vip"))
}

type NetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAttributes {
	return NetworkConfigAttributes{ref: ref}
}

func (nc NetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigAttributes) PodAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("pod_address_cidr_blocks"))
}

func (nc NetworkConfigAttributes) ServiceAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("service_address_cidr_blocks"))
}

func (nc NetworkConfigAttributes) VcenterNetwork() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("vcenter_network"))
}

func (nc NetworkConfigAttributes) ControlPlaneV2Config() terra.ListValue[ControlPlaneV2ConfigAttributes] {
	return terra.ReferenceAsList[ControlPlaneV2ConfigAttributes](nc.ref.Append("control_plane_v2_config"))
}

func (nc NetworkConfigAttributes) DhcpIpConfig() terra.ListValue[DhcpIpConfigAttributes] {
	return terra.ReferenceAsList[DhcpIpConfigAttributes](nc.ref.Append("dhcp_ip_config"))
}

func (nc NetworkConfigAttributes) HostConfig() terra.ListValue[HostConfigAttributes] {
	return terra.ReferenceAsList[HostConfigAttributes](nc.ref.Append("host_config"))
}

func (nc NetworkConfigAttributes) StaticIpConfig() terra.ListValue[StaticIpConfigAttributes] {
	return terra.ReferenceAsList[StaticIpConfigAttributes](nc.ref.Append("static_ip_config"))
}

type ControlPlaneV2ConfigAttributes struct {
	ref terra.Reference
}

func (cpvc ControlPlaneV2ConfigAttributes) InternalRef() (terra.Reference, error) {
	return cpvc.ref, nil
}

func (cpvc ControlPlaneV2ConfigAttributes) InternalWithRef(ref terra.Reference) ControlPlaneV2ConfigAttributes {
	return ControlPlaneV2ConfigAttributes{ref: ref}
}

func (cpvc ControlPlaneV2ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpvc.ref.InternalTokens()
}

func (cpvc ControlPlaneV2ConfigAttributes) ControlPlaneIpBlock() terra.ListValue[ControlPlaneIpBlockAttributes] {
	return terra.ReferenceAsList[ControlPlaneIpBlockAttributes](cpvc.ref.Append("control_plane_ip_block"))
}

type ControlPlaneIpBlockAttributes struct {
	ref terra.Reference
}

func (cpib ControlPlaneIpBlockAttributes) InternalRef() (terra.Reference, error) {
	return cpib.ref, nil
}

func (cpib ControlPlaneIpBlockAttributes) InternalWithRef(ref terra.Reference) ControlPlaneIpBlockAttributes {
	return ControlPlaneIpBlockAttributes{ref: ref}
}

func (cpib ControlPlaneIpBlockAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpib.ref.InternalTokens()
}

func (cpib ControlPlaneIpBlockAttributes) Gateway() terra.StringValue {
	return terra.ReferenceAsString(cpib.ref.Append("gateway"))
}

func (cpib ControlPlaneIpBlockAttributes) Netmask() terra.StringValue {
	return terra.ReferenceAsString(cpib.ref.Append("netmask"))
}

func (cpib ControlPlaneIpBlockAttributes) Ips() terra.ListValue[ControlPlaneIpBlockIpsAttributes] {
	return terra.ReferenceAsList[ControlPlaneIpBlockIpsAttributes](cpib.ref.Append("ips"))
}

type ControlPlaneIpBlockIpsAttributes struct {
	ref terra.Reference
}

func (i ControlPlaneIpBlockIpsAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i ControlPlaneIpBlockIpsAttributes) InternalWithRef(ref terra.Reference) ControlPlaneIpBlockIpsAttributes {
	return ControlPlaneIpBlockIpsAttributes{ref: ref}
}

func (i ControlPlaneIpBlockIpsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i ControlPlaneIpBlockIpsAttributes) Hostname() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("hostname"))
}

func (i ControlPlaneIpBlockIpsAttributes) Ip() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("ip"))
}

type DhcpIpConfigAttributes struct {
	ref terra.Reference
}

func (dic DhcpIpConfigAttributes) InternalRef() (terra.Reference, error) {
	return dic.ref, nil
}

func (dic DhcpIpConfigAttributes) InternalWithRef(ref terra.Reference) DhcpIpConfigAttributes {
	return DhcpIpConfigAttributes{ref: ref}
}

func (dic DhcpIpConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dic.ref.InternalTokens()
}

func (dic DhcpIpConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dic.ref.Append("enabled"))
}

type HostConfigAttributes struct {
	ref terra.Reference
}

func (hc HostConfigAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc HostConfigAttributes) InternalWithRef(ref terra.Reference) HostConfigAttributes {
	return HostConfigAttributes{ref: ref}
}

func (hc HostConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc HostConfigAttributes) DnsSearchDomains() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hc.ref.Append("dns_search_domains"))
}

func (hc HostConfigAttributes) DnsServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hc.ref.Append("dns_servers"))
}

func (hc HostConfigAttributes) NtpServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hc.ref.Append("ntp_servers"))
}

type StaticIpConfigAttributes struct {
	ref terra.Reference
}

func (sic StaticIpConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic StaticIpConfigAttributes) InternalWithRef(ref terra.Reference) StaticIpConfigAttributes {
	return StaticIpConfigAttributes{ref: ref}
}

func (sic StaticIpConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic StaticIpConfigAttributes) IpBlocks() terra.ListValue[IpBlocksAttributes] {
	return terra.ReferenceAsList[IpBlocksAttributes](sic.ref.Append("ip_blocks"))
}

type IpBlocksAttributes struct {
	ref terra.Reference
}

func (ib IpBlocksAttributes) InternalRef() (terra.Reference, error) {
	return ib.ref, nil
}

func (ib IpBlocksAttributes) InternalWithRef(ref terra.Reference) IpBlocksAttributes {
	return IpBlocksAttributes{ref: ref}
}

func (ib IpBlocksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ib.ref.InternalTokens()
}

func (ib IpBlocksAttributes) Gateway() terra.StringValue {
	return terra.ReferenceAsString(ib.ref.Append("gateway"))
}

func (ib IpBlocksAttributes) Netmask() terra.StringValue {
	return terra.ReferenceAsString(ib.ref.Append("netmask"))
}

func (ib IpBlocksAttributes) Ips() terra.ListValue[IpBlocksIpsAttributes] {
	return terra.ReferenceAsList[IpBlocksIpsAttributes](ib.ref.Append("ips"))
}

type IpBlocksIpsAttributes struct {
	ref terra.Reference
}

func (i IpBlocksIpsAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IpBlocksIpsAttributes) InternalWithRef(ref terra.Reference) IpBlocksIpsAttributes {
	return IpBlocksIpsAttributes{ref: ref}
}

func (i IpBlocksIpsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IpBlocksIpsAttributes) Hostname() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("hostname"))
}

func (i IpBlocksIpsAttributes) Ip() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("ip"))
}

type StorageAttributes struct {
	ref terra.Reference
}

func (s StorageAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StorageAttributes) InternalWithRef(ref terra.Reference) StorageAttributes {
	return StorageAttributes{ref: ref}
}

func (s StorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StorageAttributes) VsphereCsiDisabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("vsphere_csi_disabled"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type FleetState struct {
	Membership string `json:"membership"`
}

type StatusState struct {
	ErrorMessage string            `json:"error_message"`
	Conditions   []ConditionsState `json:"conditions"`
}

type ConditionsState struct {
	LastTransitionTime string `json:"last_transition_time"`
	Message            string `json:"message"`
	Reason             string `json:"reason"`
	State              string `json:"state"`
	Type               string `json:"type"`
}

type ValidationCheckState struct {
	Options  string                       `json:"options"`
	Scenario string                       `json:"scenario"`
	Status   []ValidationCheckStatusState `json:"status"`
}

type ValidationCheckStatusState struct {
	Result []ResultState `json:"result"`
}

type ResultState struct {
	Category    string `json:"category"`
	Description string `json:"description"`
	Details     string `json:"details"`
	Options     string `json:"options"`
	Reason      string `json:"reason"`
}

type VcenterState struct {
	Address           string `json:"address"`
	CaCertData        string `json:"ca_cert_data"`
	Cluster           string `json:"cluster"`
	Datacenter        string `json:"datacenter"`
	Datastore         string `json:"datastore"`
	Folder            string `json:"folder"`
	ResourcePool      string `json:"resource_pool"`
	StoragePolicyName string `json:"storage_policy_name"`
}

type AntiAffinityGroupsState struct {
	AagConfigDisabled bool `json:"aag_config_disabled"`
}

type AuthorizationState struct {
	AdminUsers []AdminUsersState `json:"admin_users"`
}

type AdminUsersState struct {
	Username string `json:"username"`
}

type AutoRepairConfigState struct {
	Enabled bool `json:"enabled"`
}

type ControlPlaneNodeState struct {
	Cpus             float64                 `json:"cpus"`
	Memory           float64                 `json:"memory"`
	Replicas         float64                 `json:"replicas"`
	VsphereConfig    []VsphereConfigState    `json:"vsphere_config"`
	AutoResizeConfig []AutoResizeConfigState `json:"auto_resize_config"`
}

type VsphereConfigState struct {
	Datastore         string `json:"datastore"`
	StoragePolicyName string `json:"storage_policy_name"`
}

type AutoResizeConfigState struct {
	Enabled bool `json:"enabled"`
}

type DataplaneV2State struct {
	AdvancedNetworking        bool `json:"advanced_networking"`
	DataplaneV2Enabled        bool `json:"dataplane_v2_enabled"`
	WindowsDataplaneV2Enabled bool `json:"windows_dataplane_v2_enabled"`
}

type LoadBalancerState struct {
	F5Config       []F5ConfigState       `json:"f5_config"`
	ManualLbConfig []ManualLbConfigState `json:"manual_lb_config"`
	MetalLbConfig  []MetalLbConfigState  `json:"metal_lb_config"`
	VipConfig      []VipConfigState      `json:"vip_config"`
}

type F5ConfigState struct {
	Address   string `json:"address"`
	Partition string `json:"partition"`
	SnatPool  string `json:"snat_pool"`
}

type ManualLbConfigState struct {
	ControlPlaneNodePort       float64 `json:"control_plane_node_port"`
	IngressHttpNodePort        float64 `json:"ingress_http_node_port"`
	IngressHttpsNodePort       float64 `json:"ingress_https_node_port"`
	KonnectivityServerNodePort float64 `json:"konnectivity_server_node_port"`
}

type MetalLbConfigState struct {
	AddressPools []AddressPoolsState `json:"address_pools"`
}

type AddressPoolsState struct {
	Addresses     []string `json:"addresses"`
	AvoidBuggyIps bool     `json:"avoid_buggy_ips"`
	ManualAssign  bool     `json:"manual_assign"`
	Pool          string   `json:"pool"`
}

type VipConfigState struct {
	ControlPlaneVip string `json:"control_plane_vip"`
	IngressVip      string `json:"ingress_vip"`
}

type NetworkConfigState struct {
	PodAddressCidrBlocks     []string                    `json:"pod_address_cidr_blocks"`
	ServiceAddressCidrBlocks []string                    `json:"service_address_cidr_blocks"`
	VcenterNetwork           string                      `json:"vcenter_network"`
	ControlPlaneV2Config     []ControlPlaneV2ConfigState `json:"control_plane_v2_config"`
	DhcpIpConfig             []DhcpIpConfigState         `json:"dhcp_ip_config"`
	HostConfig               []HostConfigState           `json:"host_config"`
	StaticIpConfig           []StaticIpConfigState       `json:"static_ip_config"`
}

type ControlPlaneV2ConfigState struct {
	ControlPlaneIpBlock []ControlPlaneIpBlockState `json:"control_plane_ip_block"`
}

type ControlPlaneIpBlockState struct {
	Gateway string                        `json:"gateway"`
	Netmask string                        `json:"netmask"`
	Ips     []ControlPlaneIpBlockIpsState `json:"ips"`
}

type ControlPlaneIpBlockIpsState struct {
	Hostname string `json:"hostname"`
	Ip       string `json:"ip"`
}

type DhcpIpConfigState struct {
	Enabled bool `json:"enabled"`
}

type HostConfigState struct {
	DnsSearchDomains []string `json:"dns_search_domains"`
	DnsServers       []string `json:"dns_servers"`
	NtpServers       []string `json:"ntp_servers"`
}

type StaticIpConfigState struct {
	IpBlocks []IpBlocksState `json:"ip_blocks"`
}

type IpBlocksState struct {
	Gateway string             `json:"gateway"`
	Netmask string             `json:"netmask"`
	Ips     []IpBlocksIpsState `json:"ips"`
}

type IpBlocksIpsState struct {
	Hostname string `json:"hostname"`
	Ip       string `json:"ip"`
}

type StorageState struct {
	VsphereCsiDisabled bool `json:"vsphere_csi_disabled"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
