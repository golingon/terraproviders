// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	networkservicesservicebinding "github.com/golingon/terraproviders/googlebeta/4.80.0/networkservicesservicebinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewNetworkServicesServiceBinding creates a new instance of [NetworkServicesServiceBinding].
func NewNetworkServicesServiceBinding(name string, args NetworkServicesServiceBindingArgs) *NetworkServicesServiceBinding {
	return &NetworkServicesServiceBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkServicesServiceBinding)(nil)

// NetworkServicesServiceBinding represents the Terraform resource google_network_services_service_binding.
type NetworkServicesServiceBinding struct {
	Name      string
	Args      NetworkServicesServiceBindingArgs
	state     *networkServicesServiceBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetworkServicesServiceBinding].
func (nssb *NetworkServicesServiceBinding) Type() string {
	return "google_network_services_service_binding"
}

// LocalName returns the local name for [NetworkServicesServiceBinding].
func (nssb *NetworkServicesServiceBinding) LocalName() string {
	return nssb.Name
}

// Configuration returns the configuration (args) for [NetworkServicesServiceBinding].
func (nssb *NetworkServicesServiceBinding) Configuration() interface{} {
	return nssb.Args
}

// DependOn is used for other resources to depend on [NetworkServicesServiceBinding].
func (nssb *NetworkServicesServiceBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(nssb)
}

// Dependencies returns the list of resources [NetworkServicesServiceBinding] depends_on.
func (nssb *NetworkServicesServiceBinding) Dependencies() terra.Dependencies {
	return nssb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetworkServicesServiceBinding].
func (nssb *NetworkServicesServiceBinding) LifecycleManagement() *terra.Lifecycle {
	return nssb.Lifecycle
}

// Attributes returns the attributes for [NetworkServicesServiceBinding].
func (nssb *NetworkServicesServiceBinding) Attributes() networkServicesServiceBindingAttributes {
	return networkServicesServiceBindingAttributes{ref: terra.ReferenceResource(nssb)}
}

// ImportState imports the given attribute values into [NetworkServicesServiceBinding]'s state.
func (nssb *NetworkServicesServiceBinding) ImportState(av io.Reader) error {
	nssb.state = &networkServicesServiceBindingState{}
	if err := json.NewDecoder(av).Decode(nssb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nssb.Type(), nssb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetworkServicesServiceBinding] has state.
func (nssb *NetworkServicesServiceBinding) State() (*networkServicesServiceBindingState, bool) {
	return nssb.state, nssb.state != nil
}

// StateMust returns the state for [NetworkServicesServiceBinding]. Panics if the state is nil.
func (nssb *NetworkServicesServiceBinding) StateMust() *networkServicesServiceBindingState {
	if nssb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nssb.Type(), nssb.LocalName()))
	}
	return nssb.state
}

// NetworkServicesServiceBindingArgs contains the configurations for google_network_services_service_binding.
type NetworkServicesServiceBindingArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *networkservicesservicebinding.Timeouts `hcl:"timeouts,block"`
}
type networkServicesServiceBindingAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_network_services_service_binding.
func (nssb networkServicesServiceBindingAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(nssb.ref.Append("create_time"))
}

// Description returns a reference to field description of google_network_services_service_binding.
func (nssb networkServicesServiceBindingAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(nssb.ref.Append("description"))
}

// Id returns a reference to field id of google_network_services_service_binding.
func (nssb networkServicesServiceBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nssb.ref.Append("id"))
}

// Labels returns a reference to field labels of google_network_services_service_binding.
func (nssb networkServicesServiceBindingAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nssb.ref.Append("labels"))
}

// Name returns a reference to field name of google_network_services_service_binding.
func (nssb networkServicesServiceBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nssb.ref.Append("name"))
}

// Project returns a reference to field project of google_network_services_service_binding.
func (nssb networkServicesServiceBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(nssb.ref.Append("project"))
}

// Service returns a reference to field service of google_network_services_service_binding.
func (nssb networkServicesServiceBindingAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(nssb.ref.Append("service"))
}

// UpdateTime returns a reference to field update_time of google_network_services_service_binding.
func (nssb networkServicesServiceBindingAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(nssb.ref.Append("update_time"))
}

func (nssb networkServicesServiceBindingAttributes) Timeouts() networkservicesservicebinding.TimeoutsAttributes {
	return terra.ReferenceAsSingle[networkservicesservicebinding.TimeoutsAttributes](nssb.ref.Append("timeouts"))
}

type networkServicesServiceBindingState struct {
	CreateTime  string                                       `json:"create_time"`
	Description string                                       `json:"description"`
	Id          string                                       `json:"id"`
	Labels      map[string]string                            `json:"labels"`
	Name        string                                       `json:"name"`
	Project     string                                       `json:"project"`
	Service     string                                       `json:"service"`
	UpdateTime  string                                       `json:"update_time"`
	Timeouts    *networkservicesservicebinding.TimeoutsState `json:"timeouts"`
}
