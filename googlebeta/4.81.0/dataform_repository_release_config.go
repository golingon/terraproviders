// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	dataformrepositoryreleaseconfig "github.com/golingon/terraproviders/googlebeta/4.81.0/dataformrepositoryreleaseconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDataformRepositoryReleaseConfig creates a new instance of [DataformRepositoryReleaseConfig].
func NewDataformRepositoryReleaseConfig(name string, args DataformRepositoryReleaseConfigArgs) *DataformRepositoryReleaseConfig {
	return &DataformRepositoryReleaseConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataformRepositoryReleaseConfig)(nil)

// DataformRepositoryReleaseConfig represents the Terraform resource google_dataform_repository_release_config.
type DataformRepositoryReleaseConfig struct {
	Name      string
	Args      DataformRepositoryReleaseConfigArgs
	state     *dataformRepositoryReleaseConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataformRepositoryReleaseConfig].
func (drrc *DataformRepositoryReleaseConfig) Type() string {
	return "google_dataform_repository_release_config"
}

// LocalName returns the local name for [DataformRepositoryReleaseConfig].
func (drrc *DataformRepositoryReleaseConfig) LocalName() string {
	return drrc.Name
}

// Configuration returns the configuration (args) for [DataformRepositoryReleaseConfig].
func (drrc *DataformRepositoryReleaseConfig) Configuration() interface{} {
	return drrc.Args
}

// DependOn is used for other resources to depend on [DataformRepositoryReleaseConfig].
func (drrc *DataformRepositoryReleaseConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(drrc)
}

// Dependencies returns the list of resources [DataformRepositoryReleaseConfig] depends_on.
func (drrc *DataformRepositoryReleaseConfig) Dependencies() terra.Dependencies {
	return drrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataformRepositoryReleaseConfig].
func (drrc *DataformRepositoryReleaseConfig) LifecycleManagement() *terra.Lifecycle {
	return drrc.Lifecycle
}

// Attributes returns the attributes for [DataformRepositoryReleaseConfig].
func (drrc *DataformRepositoryReleaseConfig) Attributes() dataformRepositoryReleaseConfigAttributes {
	return dataformRepositoryReleaseConfigAttributes{ref: terra.ReferenceResource(drrc)}
}

// ImportState imports the given attribute values into [DataformRepositoryReleaseConfig]'s state.
func (drrc *DataformRepositoryReleaseConfig) ImportState(av io.Reader) error {
	drrc.state = &dataformRepositoryReleaseConfigState{}
	if err := json.NewDecoder(av).Decode(drrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", drrc.Type(), drrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataformRepositoryReleaseConfig] has state.
func (drrc *DataformRepositoryReleaseConfig) State() (*dataformRepositoryReleaseConfigState, bool) {
	return drrc.state, drrc.state != nil
}

// StateMust returns the state for [DataformRepositoryReleaseConfig]. Panics if the state is nil.
func (drrc *DataformRepositoryReleaseConfig) StateMust() *dataformRepositoryReleaseConfigState {
	if drrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", drrc.Type(), drrc.LocalName()))
	}
	return drrc.state
}

// DataformRepositoryReleaseConfigArgs contains the configurations for google_dataform_repository_release_config.
type DataformRepositoryReleaseConfigArgs struct {
	// CronSchedule: string, optional
	CronSchedule terra.StringValue `hcl:"cron_schedule,attr"`
	// GitCommitish: string, required
	GitCommitish terra.StringValue `hcl:"git_commitish,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Repository: string, optional
	Repository terra.StringValue `hcl:"repository,attr"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
	// RecentScheduledReleaseRecords: min=0
	RecentScheduledReleaseRecords []dataformrepositoryreleaseconfig.RecentScheduledReleaseRecords `hcl:"recent_scheduled_release_records,block" validate:"min=0"`
	// CodeCompilationConfig: optional
	CodeCompilationConfig *dataformrepositoryreleaseconfig.CodeCompilationConfig `hcl:"code_compilation_config,block"`
	// Timeouts: optional
	Timeouts *dataformrepositoryreleaseconfig.Timeouts `hcl:"timeouts,block"`
}
type dataformRepositoryReleaseConfigAttributes struct {
	ref terra.Reference
}

// CronSchedule returns a reference to field cron_schedule of google_dataform_repository_release_config.
func (drrc dataformRepositoryReleaseConfigAttributes) CronSchedule() terra.StringValue {
	return terra.ReferenceAsString(drrc.ref.Append("cron_schedule"))
}

// GitCommitish returns a reference to field git_commitish of google_dataform_repository_release_config.
func (drrc dataformRepositoryReleaseConfigAttributes) GitCommitish() terra.StringValue {
	return terra.ReferenceAsString(drrc.ref.Append("git_commitish"))
}

// Id returns a reference to field id of google_dataform_repository_release_config.
func (drrc dataformRepositoryReleaseConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(drrc.ref.Append("id"))
}

// Name returns a reference to field name of google_dataform_repository_release_config.
func (drrc dataformRepositoryReleaseConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(drrc.ref.Append("name"))
}

// Project returns a reference to field project of google_dataform_repository_release_config.
func (drrc dataformRepositoryReleaseConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(drrc.ref.Append("project"))
}

// Region returns a reference to field region of google_dataform_repository_release_config.
func (drrc dataformRepositoryReleaseConfigAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(drrc.ref.Append("region"))
}

// Repository returns a reference to field repository of google_dataform_repository_release_config.
func (drrc dataformRepositoryReleaseConfigAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(drrc.ref.Append("repository"))
}

// TimeZone returns a reference to field time_zone of google_dataform_repository_release_config.
func (drrc dataformRepositoryReleaseConfigAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(drrc.ref.Append("time_zone"))
}

func (drrc dataformRepositoryReleaseConfigAttributes) RecentScheduledReleaseRecords() terra.ListValue[dataformrepositoryreleaseconfig.RecentScheduledReleaseRecordsAttributes] {
	return terra.ReferenceAsList[dataformrepositoryreleaseconfig.RecentScheduledReleaseRecordsAttributes](drrc.ref.Append("recent_scheduled_release_records"))
}

func (drrc dataformRepositoryReleaseConfigAttributes) CodeCompilationConfig() terra.ListValue[dataformrepositoryreleaseconfig.CodeCompilationConfigAttributes] {
	return terra.ReferenceAsList[dataformrepositoryreleaseconfig.CodeCompilationConfigAttributes](drrc.ref.Append("code_compilation_config"))
}

func (drrc dataformRepositoryReleaseConfigAttributes) Timeouts() dataformrepositoryreleaseconfig.TimeoutsAttributes {
	return terra.ReferenceAsSingle[dataformrepositoryreleaseconfig.TimeoutsAttributes](drrc.ref.Append("timeouts"))
}

type dataformRepositoryReleaseConfigState struct {
	CronSchedule                  string                                                               `json:"cron_schedule"`
	GitCommitish                  string                                                               `json:"git_commitish"`
	Id                            string                                                               `json:"id"`
	Name                          string                                                               `json:"name"`
	Project                       string                                                               `json:"project"`
	Region                        string                                                               `json:"region"`
	Repository                    string                                                               `json:"repository"`
	TimeZone                      string                                                               `json:"time_zone"`
	RecentScheduledReleaseRecords []dataformrepositoryreleaseconfig.RecentScheduledReleaseRecordsState `json:"recent_scheduled_release_records"`
	CodeCompilationConfig         []dataformrepositoryreleaseconfig.CodeCompilationConfigState         `json:"code_compilation_config"`
	Timeouts                      *dataformrepositoryreleaseconfig.TimeoutsState                       `json:"timeouts"`
}
