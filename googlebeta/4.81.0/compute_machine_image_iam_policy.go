// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewComputeMachineImageIamPolicy creates a new instance of [ComputeMachineImageIamPolicy].
func NewComputeMachineImageIamPolicy(name string, args ComputeMachineImageIamPolicyArgs) *ComputeMachineImageIamPolicy {
	return &ComputeMachineImageIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeMachineImageIamPolicy)(nil)

// ComputeMachineImageIamPolicy represents the Terraform resource google_compute_machine_image_iam_policy.
type ComputeMachineImageIamPolicy struct {
	Name      string
	Args      ComputeMachineImageIamPolicyArgs
	state     *computeMachineImageIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ComputeMachineImageIamPolicy].
func (cmiip *ComputeMachineImageIamPolicy) Type() string {
	return "google_compute_machine_image_iam_policy"
}

// LocalName returns the local name for [ComputeMachineImageIamPolicy].
func (cmiip *ComputeMachineImageIamPolicy) LocalName() string {
	return cmiip.Name
}

// Configuration returns the configuration (args) for [ComputeMachineImageIamPolicy].
func (cmiip *ComputeMachineImageIamPolicy) Configuration() interface{} {
	return cmiip.Args
}

// DependOn is used for other resources to depend on [ComputeMachineImageIamPolicy].
func (cmiip *ComputeMachineImageIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(cmiip)
}

// Dependencies returns the list of resources [ComputeMachineImageIamPolicy] depends_on.
func (cmiip *ComputeMachineImageIamPolicy) Dependencies() terra.Dependencies {
	return cmiip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ComputeMachineImageIamPolicy].
func (cmiip *ComputeMachineImageIamPolicy) LifecycleManagement() *terra.Lifecycle {
	return cmiip.Lifecycle
}

// Attributes returns the attributes for [ComputeMachineImageIamPolicy].
func (cmiip *ComputeMachineImageIamPolicy) Attributes() computeMachineImageIamPolicyAttributes {
	return computeMachineImageIamPolicyAttributes{ref: terra.ReferenceResource(cmiip)}
}

// ImportState imports the given attribute values into [ComputeMachineImageIamPolicy]'s state.
func (cmiip *ComputeMachineImageIamPolicy) ImportState(av io.Reader) error {
	cmiip.state = &computeMachineImageIamPolicyState{}
	if err := json.NewDecoder(av).Decode(cmiip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cmiip.Type(), cmiip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ComputeMachineImageIamPolicy] has state.
func (cmiip *ComputeMachineImageIamPolicy) State() (*computeMachineImageIamPolicyState, bool) {
	return cmiip.state, cmiip.state != nil
}

// StateMust returns the state for [ComputeMachineImageIamPolicy]. Panics if the state is nil.
func (cmiip *ComputeMachineImageIamPolicy) StateMust() *computeMachineImageIamPolicyState {
	if cmiip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cmiip.Type(), cmiip.LocalName()))
	}
	return cmiip.state
}

// ComputeMachineImageIamPolicyArgs contains the configurations for google_compute_machine_image_iam_policy.
type ComputeMachineImageIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MachineImage: string, required
	MachineImage terra.StringValue `hcl:"machine_image,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}
type computeMachineImageIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_compute_machine_image_iam_policy.
func (cmiip computeMachineImageIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(cmiip.ref.Append("etag"))
}

// Id returns a reference to field id of google_compute_machine_image_iam_policy.
func (cmiip computeMachineImageIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cmiip.ref.Append("id"))
}

// MachineImage returns a reference to field machine_image of google_compute_machine_image_iam_policy.
func (cmiip computeMachineImageIamPolicyAttributes) MachineImage() terra.StringValue {
	return terra.ReferenceAsString(cmiip.ref.Append("machine_image"))
}

// PolicyData returns a reference to field policy_data of google_compute_machine_image_iam_policy.
func (cmiip computeMachineImageIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(cmiip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_compute_machine_image_iam_policy.
func (cmiip computeMachineImageIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(cmiip.ref.Append("project"))
}

type computeMachineImageIamPolicyState struct {
	Etag         string `json:"etag"`
	Id           string `json:"id"`
	MachineImage string `json:"machine_image"`
	PolicyData   string `json:"policy_data"`
	Project      string `json:"project"`
}
