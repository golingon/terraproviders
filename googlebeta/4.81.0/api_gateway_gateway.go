// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	apigatewaygateway "github.com/golingon/terraproviders/googlebeta/4.81.0/apigatewaygateway"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewApiGatewayGateway creates a new instance of [ApiGatewayGateway].
func NewApiGatewayGateway(name string, args ApiGatewayGatewayArgs) *ApiGatewayGateway {
	return &ApiGatewayGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiGatewayGateway)(nil)

// ApiGatewayGateway represents the Terraform resource google_api_gateway_gateway.
type ApiGatewayGateway struct {
	Name      string
	Args      ApiGatewayGatewayArgs
	state     *apiGatewayGatewayState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApiGatewayGateway].
func (agg *ApiGatewayGateway) Type() string {
	return "google_api_gateway_gateway"
}

// LocalName returns the local name for [ApiGatewayGateway].
func (agg *ApiGatewayGateway) LocalName() string {
	return agg.Name
}

// Configuration returns the configuration (args) for [ApiGatewayGateway].
func (agg *ApiGatewayGateway) Configuration() interface{} {
	return agg.Args
}

// DependOn is used for other resources to depend on [ApiGatewayGateway].
func (agg *ApiGatewayGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(agg)
}

// Dependencies returns the list of resources [ApiGatewayGateway] depends_on.
func (agg *ApiGatewayGateway) Dependencies() terra.Dependencies {
	return agg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApiGatewayGateway].
func (agg *ApiGatewayGateway) LifecycleManagement() *terra.Lifecycle {
	return agg.Lifecycle
}

// Attributes returns the attributes for [ApiGatewayGateway].
func (agg *ApiGatewayGateway) Attributes() apiGatewayGatewayAttributes {
	return apiGatewayGatewayAttributes{ref: terra.ReferenceResource(agg)}
}

// ImportState imports the given attribute values into [ApiGatewayGateway]'s state.
func (agg *ApiGatewayGateway) ImportState(av io.Reader) error {
	agg.state = &apiGatewayGatewayState{}
	if err := json.NewDecoder(av).Decode(agg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agg.Type(), agg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApiGatewayGateway] has state.
func (agg *ApiGatewayGateway) State() (*apiGatewayGatewayState, bool) {
	return agg.state, agg.state != nil
}

// StateMust returns the state for [ApiGatewayGateway]. Panics if the state is nil.
func (agg *ApiGatewayGateway) StateMust() *apiGatewayGatewayState {
	if agg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agg.Type(), agg.LocalName()))
	}
	return agg.state
}

// ApiGatewayGatewayArgs contains the configurations for google_api_gateway_gateway.
type ApiGatewayGatewayArgs struct {
	// ApiConfig: string, required
	ApiConfig terra.StringValue `hcl:"api_config,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// GatewayId: string, required
	GatewayId terra.StringValue `hcl:"gateway_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Timeouts: optional
	Timeouts *apigatewaygateway.Timeouts `hcl:"timeouts,block"`
}
type apiGatewayGatewayAttributes struct {
	ref terra.Reference
}

// ApiConfig returns a reference to field api_config of google_api_gateway_gateway.
func (agg apiGatewayGatewayAttributes) ApiConfig() terra.StringValue {
	return terra.ReferenceAsString(agg.ref.Append("api_config"))
}

// DefaultHostname returns a reference to field default_hostname of google_api_gateway_gateway.
func (agg apiGatewayGatewayAttributes) DefaultHostname() terra.StringValue {
	return terra.ReferenceAsString(agg.ref.Append("default_hostname"))
}

// DisplayName returns a reference to field display_name of google_api_gateway_gateway.
func (agg apiGatewayGatewayAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(agg.ref.Append("display_name"))
}

// GatewayId returns a reference to field gateway_id of google_api_gateway_gateway.
func (agg apiGatewayGatewayAttributes) GatewayId() terra.StringValue {
	return terra.ReferenceAsString(agg.ref.Append("gateway_id"))
}

// Id returns a reference to field id of google_api_gateway_gateway.
func (agg apiGatewayGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agg.ref.Append("id"))
}

// Labels returns a reference to field labels of google_api_gateway_gateway.
func (agg apiGatewayGatewayAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agg.ref.Append("labels"))
}

// Name returns a reference to field name of google_api_gateway_gateway.
func (agg apiGatewayGatewayAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agg.ref.Append("name"))
}

// Project returns a reference to field project of google_api_gateway_gateway.
func (agg apiGatewayGatewayAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(agg.ref.Append("project"))
}

// Region returns a reference to field region of google_api_gateway_gateway.
func (agg apiGatewayGatewayAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(agg.ref.Append("region"))
}

func (agg apiGatewayGatewayAttributes) Timeouts() apigatewaygateway.TimeoutsAttributes {
	return terra.ReferenceAsSingle[apigatewaygateway.TimeoutsAttributes](agg.ref.Append("timeouts"))
}

type apiGatewayGatewayState struct {
	ApiConfig       string                           `json:"api_config"`
	DefaultHostname string                           `json:"default_hostname"`
	DisplayName     string                           `json:"display_name"`
	GatewayId       string                           `json:"gateway_id"`
	Id              string                           `json:"id"`
	Labels          map[string]string                `json:"labels"`
	Name            string                           `json:"name"`
	Project         string                           `json:"project"`
	Region          string                           `json:"region"`
	Timeouts        *apigatewaygateway.TimeoutsState `json:"timeouts"`
}
