// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	networkservicesendpointpolicy "github.com/golingon/terraproviders/googlebeta/4.71.0/networkservicesendpointpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewNetworkServicesEndpointPolicy creates a new instance of [NetworkServicesEndpointPolicy].
func NewNetworkServicesEndpointPolicy(name string, args NetworkServicesEndpointPolicyArgs) *NetworkServicesEndpointPolicy {
	return &NetworkServicesEndpointPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkServicesEndpointPolicy)(nil)

// NetworkServicesEndpointPolicy represents the Terraform resource google_network_services_endpoint_policy.
type NetworkServicesEndpointPolicy struct {
	Name      string
	Args      NetworkServicesEndpointPolicyArgs
	state     *networkServicesEndpointPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetworkServicesEndpointPolicy].
func (nsep *NetworkServicesEndpointPolicy) Type() string {
	return "google_network_services_endpoint_policy"
}

// LocalName returns the local name for [NetworkServicesEndpointPolicy].
func (nsep *NetworkServicesEndpointPolicy) LocalName() string {
	return nsep.Name
}

// Configuration returns the configuration (args) for [NetworkServicesEndpointPolicy].
func (nsep *NetworkServicesEndpointPolicy) Configuration() interface{} {
	return nsep.Args
}

// DependOn is used for other resources to depend on [NetworkServicesEndpointPolicy].
func (nsep *NetworkServicesEndpointPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(nsep)
}

// Dependencies returns the list of resources [NetworkServicesEndpointPolicy] depends_on.
func (nsep *NetworkServicesEndpointPolicy) Dependencies() terra.Dependencies {
	return nsep.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetworkServicesEndpointPolicy].
func (nsep *NetworkServicesEndpointPolicy) LifecycleManagement() *terra.Lifecycle {
	return nsep.Lifecycle
}

// Attributes returns the attributes for [NetworkServicesEndpointPolicy].
func (nsep *NetworkServicesEndpointPolicy) Attributes() networkServicesEndpointPolicyAttributes {
	return networkServicesEndpointPolicyAttributes{ref: terra.ReferenceResource(nsep)}
}

// ImportState imports the given attribute values into [NetworkServicesEndpointPolicy]'s state.
func (nsep *NetworkServicesEndpointPolicy) ImportState(av io.Reader) error {
	nsep.state = &networkServicesEndpointPolicyState{}
	if err := json.NewDecoder(av).Decode(nsep.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nsep.Type(), nsep.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetworkServicesEndpointPolicy] has state.
func (nsep *NetworkServicesEndpointPolicy) State() (*networkServicesEndpointPolicyState, bool) {
	return nsep.state, nsep.state != nil
}

// StateMust returns the state for [NetworkServicesEndpointPolicy]. Panics if the state is nil.
func (nsep *NetworkServicesEndpointPolicy) StateMust() *networkServicesEndpointPolicyState {
	if nsep.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nsep.Type(), nsep.LocalName()))
	}
	return nsep.state
}

// NetworkServicesEndpointPolicyArgs contains the configurations for google_network_services_endpoint_policy.
type NetworkServicesEndpointPolicyArgs struct {
	// AuthorizationPolicy: string, optional
	AuthorizationPolicy terra.StringValue `hcl:"authorization_policy,attr"`
	// ClientTlsPolicy: string, optional
	ClientTlsPolicy terra.StringValue `hcl:"client_tls_policy,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServerTlsPolicy: string, optional
	ServerTlsPolicy terra.StringValue `hcl:"server_tls_policy,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// EndpointMatcher: required
	EndpointMatcher *networkservicesendpointpolicy.EndpointMatcher `hcl:"endpoint_matcher,block" validate:"required"`
	// Timeouts: optional
	Timeouts *networkservicesendpointpolicy.Timeouts `hcl:"timeouts,block"`
	// TrafficPortSelector: optional
	TrafficPortSelector *networkservicesendpointpolicy.TrafficPortSelector `hcl:"traffic_port_selector,block"`
}
type networkServicesEndpointPolicyAttributes struct {
	ref terra.Reference
}

// AuthorizationPolicy returns a reference to field authorization_policy of google_network_services_endpoint_policy.
func (nsep networkServicesEndpointPolicyAttributes) AuthorizationPolicy() terra.StringValue {
	return terra.ReferenceAsString(nsep.ref.Append("authorization_policy"))
}

// ClientTlsPolicy returns a reference to field client_tls_policy of google_network_services_endpoint_policy.
func (nsep networkServicesEndpointPolicyAttributes) ClientTlsPolicy() terra.StringValue {
	return terra.ReferenceAsString(nsep.ref.Append("client_tls_policy"))
}

// CreateTime returns a reference to field create_time of google_network_services_endpoint_policy.
func (nsep networkServicesEndpointPolicyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(nsep.ref.Append("create_time"))
}

// Description returns a reference to field description of google_network_services_endpoint_policy.
func (nsep networkServicesEndpointPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(nsep.ref.Append("description"))
}

// Id returns a reference to field id of google_network_services_endpoint_policy.
func (nsep networkServicesEndpointPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nsep.ref.Append("id"))
}

// Labels returns a reference to field labels of google_network_services_endpoint_policy.
func (nsep networkServicesEndpointPolicyAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nsep.ref.Append("labels"))
}

// Name returns a reference to field name of google_network_services_endpoint_policy.
func (nsep networkServicesEndpointPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nsep.ref.Append("name"))
}

// Project returns a reference to field project of google_network_services_endpoint_policy.
func (nsep networkServicesEndpointPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(nsep.ref.Append("project"))
}

// ServerTlsPolicy returns a reference to field server_tls_policy of google_network_services_endpoint_policy.
func (nsep networkServicesEndpointPolicyAttributes) ServerTlsPolicy() terra.StringValue {
	return terra.ReferenceAsString(nsep.ref.Append("server_tls_policy"))
}

// Type returns a reference to field type of google_network_services_endpoint_policy.
func (nsep networkServicesEndpointPolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(nsep.ref.Append("type"))
}

// UpdateTime returns a reference to field update_time of google_network_services_endpoint_policy.
func (nsep networkServicesEndpointPolicyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(nsep.ref.Append("update_time"))
}

func (nsep networkServicesEndpointPolicyAttributes) EndpointMatcher() terra.ListValue[networkservicesendpointpolicy.EndpointMatcherAttributes] {
	return terra.ReferenceAsList[networkservicesendpointpolicy.EndpointMatcherAttributes](nsep.ref.Append("endpoint_matcher"))
}

func (nsep networkServicesEndpointPolicyAttributes) Timeouts() networkservicesendpointpolicy.TimeoutsAttributes {
	return terra.ReferenceAsSingle[networkservicesendpointpolicy.TimeoutsAttributes](nsep.ref.Append("timeouts"))
}

func (nsep networkServicesEndpointPolicyAttributes) TrafficPortSelector() terra.ListValue[networkservicesendpointpolicy.TrafficPortSelectorAttributes] {
	return terra.ReferenceAsList[networkservicesendpointpolicy.TrafficPortSelectorAttributes](nsep.ref.Append("traffic_port_selector"))
}

type networkServicesEndpointPolicyState struct {
	AuthorizationPolicy string                                                   `json:"authorization_policy"`
	ClientTlsPolicy     string                                                   `json:"client_tls_policy"`
	CreateTime          string                                                   `json:"create_time"`
	Description         string                                                   `json:"description"`
	Id                  string                                                   `json:"id"`
	Labels              map[string]string                                        `json:"labels"`
	Name                string                                                   `json:"name"`
	Project             string                                                   `json:"project"`
	ServerTlsPolicy     string                                                   `json:"server_tls_policy"`
	Type                string                                                   `json:"type"`
	UpdateTime          string                                                   `json:"update_time"`
	EndpointMatcher     []networkservicesendpointpolicy.EndpointMatcherState     `json:"endpoint_matcher"`
	Timeouts            *networkservicesendpointpolicy.TimeoutsState             `json:"timeouts"`
	TrafficPortSelector []networkservicesendpointpolicy.TrafficPortSelectorState `json:"traffic_port_selector"`
}
