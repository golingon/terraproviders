// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package gkebackupbackupplan

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type BackupConfig struct {
	// AllNamespaces: bool, optional
	AllNamespaces terra.BoolValue `hcl:"all_namespaces,attr"`
	// IncludeSecrets: bool, optional
	IncludeSecrets terra.BoolValue `hcl:"include_secrets,attr"`
	// IncludeVolumeData: bool, optional
	IncludeVolumeData terra.BoolValue `hcl:"include_volume_data,attr"`
	// EncryptionKey: optional
	EncryptionKey *EncryptionKey `hcl:"encryption_key,block"`
	// SelectedApplications: optional
	SelectedApplications *SelectedApplications `hcl:"selected_applications,block"`
	// SelectedNamespaces: optional
	SelectedNamespaces *SelectedNamespaces `hcl:"selected_namespaces,block"`
}

type EncryptionKey struct {
	// GcpKmsEncryptionKey: string, required
	GcpKmsEncryptionKey terra.StringValue `hcl:"gcp_kms_encryption_key,attr" validate:"required"`
}

type SelectedApplications struct {
	// NamespacedNames: min=1
	NamespacedNames []NamespacedNames `hcl:"namespaced_names,block" validate:"min=1"`
}

type NamespacedNames struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, required
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
}

type SelectedNamespaces struct {
	// Namespaces: list of string, required
	Namespaces terra.ListValue[terra.StringValue] `hcl:"namespaces,attr" validate:"required"`
}

type BackupSchedule struct {
	// CronSchedule: string, optional
	CronSchedule terra.StringValue `hcl:"cron_schedule,attr"`
	// Paused: bool, optional
	Paused terra.BoolValue `hcl:"paused,attr"`
}

type RetentionPolicy struct {
	// BackupDeleteLockDays: number, optional
	BackupDeleteLockDays terra.NumberValue `hcl:"backup_delete_lock_days,attr"`
	// BackupRetainDays: number, optional
	BackupRetainDays terra.NumberValue `hcl:"backup_retain_days,attr"`
	// Locked: bool, optional
	Locked terra.BoolValue `hcl:"locked,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BackupConfigAttributes struct {
	ref terra.Reference
}

func (bc BackupConfigAttributes) InternalRef() (terra.Reference, error) {
	return bc.ref, nil
}

func (bc BackupConfigAttributes) InternalWithRef(ref terra.Reference) BackupConfigAttributes {
	return BackupConfigAttributes{ref: ref}
}

func (bc BackupConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bc.ref.InternalTokens()
}

func (bc BackupConfigAttributes) AllNamespaces() terra.BoolValue {
	return terra.ReferenceAsBool(bc.ref.Append("all_namespaces"))
}

func (bc BackupConfigAttributes) IncludeSecrets() terra.BoolValue {
	return terra.ReferenceAsBool(bc.ref.Append("include_secrets"))
}

func (bc BackupConfigAttributes) IncludeVolumeData() terra.BoolValue {
	return terra.ReferenceAsBool(bc.ref.Append("include_volume_data"))
}

func (bc BackupConfigAttributes) EncryptionKey() terra.ListValue[EncryptionKeyAttributes] {
	return terra.ReferenceAsList[EncryptionKeyAttributes](bc.ref.Append("encryption_key"))
}

func (bc BackupConfigAttributes) SelectedApplications() terra.ListValue[SelectedApplicationsAttributes] {
	return terra.ReferenceAsList[SelectedApplicationsAttributes](bc.ref.Append("selected_applications"))
}

func (bc BackupConfigAttributes) SelectedNamespaces() terra.ListValue[SelectedNamespacesAttributes] {
	return terra.ReferenceAsList[SelectedNamespacesAttributes](bc.ref.Append("selected_namespaces"))
}

type EncryptionKeyAttributes struct {
	ref terra.Reference
}

func (ek EncryptionKeyAttributes) InternalRef() (terra.Reference, error) {
	return ek.ref, nil
}

func (ek EncryptionKeyAttributes) InternalWithRef(ref terra.Reference) EncryptionKeyAttributes {
	return EncryptionKeyAttributes{ref: ref}
}

func (ek EncryptionKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ek.ref.InternalTokens()
}

func (ek EncryptionKeyAttributes) GcpKmsEncryptionKey() terra.StringValue {
	return terra.ReferenceAsString(ek.ref.Append("gcp_kms_encryption_key"))
}

type SelectedApplicationsAttributes struct {
	ref terra.Reference
}

func (sa SelectedApplicationsAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa SelectedApplicationsAttributes) InternalWithRef(ref terra.Reference) SelectedApplicationsAttributes {
	return SelectedApplicationsAttributes{ref: ref}
}

func (sa SelectedApplicationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa SelectedApplicationsAttributes) NamespacedNames() terra.ListValue[NamespacedNamesAttributes] {
	return terra.ReferenceAsList[NamespacedNamesAttributes](sa.ref.Append("namespaced_names"))
}

type NamespacedNamesAttributes struct {
	ref terra.Reference
}

func (nn NamespacedNamesAttributes) InternalRef() (terra.Reference, error) {
	return nn.ref, nil
}

func (nn NamespacedNamesAttributes) InternalWithRef(ref terra.Reference) NamespacedNamesAttributes {
	return NamespacedNamesAttributes{ref: ref}
}

func (nn NamespacedNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nn.ref.InternalTokens()
}

func (nn NamespacedNamesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nn.ref.Append("name"))
}

func (nn NamespacedNamesAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(nn.ref.Append("namespace"))
}

type SelectedNamespacesAttributes struct {
	ref terra.Reference
}

func (sn SelectedNamespacesAttributes) InternalRef() (terra.Reference, error) {
	return sn.ref, nil
}

func (sn SelectedNamespacesAttributes) InternalWithRef(ref terra.Reference) SelectedNamespacesAttributes {
	return SelectedNamespacesAttributes{ref: ref}
}

func (sn SelectedNamespacesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sn.ref.InternalTokens()
}

func (sn SelectedNamespacesAttributes) Namespaces() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sn.ref.Append("namespaces"))
}

type BackupScheduleAttributes struct {
	ref terra.Reference
}

func (bs BackupScheduleAttributes) InternalRef() (terra.Reference, error) {
	return bs.ref, nil
}

func (bs BackupScheduleAttributes) InternalWithRef(ref terra.Reference) BackupScheduleAttributes {
	return BackupScheduleAttributes{ref: ref}
}

func (bs BackupScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bs.ref.InternalTokens()
}

func (bs BackupScheduleAttributes) CronSchedule() terra.StringValue {
	return terra.ReferenceAsString(bs.ref.Append("cron_schedule"))
}

func (bs BackupScheduleAttributes) Paused() terra.BoolValue {
	return terra.ReferenceAsBool(bs.ref.Append("paused"))
}

type RetentionPolicyAttributes struct {
	ref terra.Reference
}

func (rp RetentionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RetentionPolicyAttributes) InternalWithRef(ref terra.Reference) RetentionPolicyAttributes {
	return RetentionPolicyAttributes{ref: ref}
}

func (rp RetentionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RetentionPolicyAttributes) BackupDeleteLockDays() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("backup_delete_lock_days"))
}

func (rp RetentionPolicyAttributes) BackupRetainDays() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("backup_retain_days"))
}

func (rp RetentionPolicyAttributes) Locked() terra.BoolValue {
	return terra.ReferenceAsBool(rp.ref.Append("locked"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BackupConfigState struct {
	AllNamespaces        bool                        `json:"all_namespaces"`
	IncludeSecrets       bool                        `json:"include_secrets"`
	IncludeVolumeData    bool                        `json:"include_volume_data"`
	EncryptionKey        []EncryptionKeyState        `json:"encryption_key"`
	SelectedApplications []SelectedApplicationsState `json:"selected_applications"`
	SelectedNamespaces   []SelectedNamespacesState   `json:"selected_namespaces"`
}

type EncryptionKeyState struct {
	GcpKmsEncryptionKey string `json:"gcp_kms_encryption_key"`
}

type SelectedApplicationsState struct {
	NamespacedNames []NamespacedNamesState `json:"namespaced_names"`
}

type NamespacedNamesState struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}

type SelectedNamespacesState struct {
	Namespaces []string `json:"namespaces"`
}

type BackupScheduleState struct {
	CronSchedule string `json:"cron_schedule"`
	Paused       bool   `json:"paused"`
}

type RetentionPolicyState struct {
	BackupDeleteLockDays float64 `json:"backup_delete_lock_days"`
	BackupRetainDays     float64 `json:"backup_retain_days"`
	Locked               bool    `json:"locked"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
