// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package computeurlmap

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type DefaultRouteAction struct {
	// DefaultRouteActionCorsPolicy: optional
	CorsPolicy *DefaultRouteActionCorsPolicy `hcl:"cors_policy,block"`
	// DefaultRouteActionFaultInjectionPolicy: optional
	FaultInjectionPolicy *DefaultRouteActionFaultInjectionPolicy `hcl:"fault_injection_policy,block"`
	// DefaultRouteActionRequestMirrorPolicy: optional
	RequestMirrorPolicy *DefaultRouteActionRequestMirrorPolicy `hcl:"request_mirror_policy,block"`
	// DefaultRouteActionRetryPolicy: optional
	RetryPolicy *DefaultRouteActionRetryPolicy `hcl:"retry_policy,block"`
	// DefaultRouteActionTimeout: optional
	Timeout *DefaultRouteActionTimeout `hcl:"timeout,block"`
	// DefaultRouteActionUrlRewrite: optional
	UrlRewrite *DefaultRouteActionUrlRewrite `hcl:"url_rewrite,block"`
	// DefaultRouteActionWeightedBackendServices: min=0
	WeightedBackendServices []DefaultRouteActionWeightedBackendServices `hcl:"weighted_backend_services,block" validate:"min=0"`
}

type DefaultRouteActionCorsPolicy struct {
	// AllowCredentials: bool, optional
	AllowCredentials terra.BoolValue `hcl:"allow_credentials,attr"`
	// AllowHeaders: list of string, optional
	AllowHeaders terra.ListValue[terra.StringValue] `hcl:"allow_headers,attr"`
	// AllowMethods: list of string, optional
	AllowMethods terra.ListValue[terra.StringValue] `hcl:"allow_methods,attr"`
	// AllowOriginRegexes: list of string, optional
	AllowOriginRegexes terra.ListValue[terra.StringValue] `hcl:"allow_origin_regexes,attr"`
	// AllowOrigins: list of string, optional
	AllowOrigins terra.ListValue[terra.StringValue] `hcl:"allow_origins,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// ExposeHeaders: list of string, optional
	ExposeHeaders terra.ListValue[terra.StringValue] `hcl:"expose_headers,attr"`
	// MaxAge: number, optional
	MaxAge terra.NumberValue `hcl:"max_age,attr"`
}

type DefaultRouteActionFaultInjectionPolicy struct {
	// DefaultRouteActionFaultInjectionPolicyAbort: optional
	Abort *DefaultRouteActionFaultInjectionPolicyAbort `hcl:"abort,block"`
	// DefaultRouteActionFaultInjectionPolicyDelay: optional
	Delay *DefaultRouteActionFaultInjectionPolicyDelay `hcl:"delay,block"`
}

type DefaultRouteActionFaultInjectionPolicyAbort struct {
	// HttpStatus: number, optional
	HttpStatus terra.NumberValue `hcl:"http_status,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type DefaultRouteActionFaultInjectionPolicyDelay struct {
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
	// DefaultRouteActionFaultInjectionPolicyDelayFixedDelay: optional
	FixedDelay *DefaultRouteActionFaultInjectionPolicyDelayFixedDelay `hcl:"fixed_delay,block"`
}

type DefaultRouteActionFaultInjectionPolicyDelayFixedDelay struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, optional
	Seconds terra.StringValue `hcl:"seconds,attr"`
}

type DefaultRouteActionRequestMirrorPolicy struct {
	// BackendService: string, required
	BackendService terra.StringValue `hcl:"backend_service,attr" validate:"required"`
}

type DefaultRouteActionRetryPolicy struct {
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// RetryConditions: list of string, optional
	RetryConditions terra.ListValue[terra.StringValue] `hcl:"retry_conditions,attr"`
	// DefaultRouteActionRetryPolicyPerTryTimeout: optional
	PerTryTimeout *DefaultRouteActionRetryPolicyPerTryTimeout `hcl:"per_try_timeout,block"`
}

type DefaultRouteActionRetryPolicyPerTryTimeout struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, optional
	Seconds terra.StringValue `hcl:"seconds,attr"`
}

type DefaultRouteActionTimeout struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, optional
	Seconds terra.StringValue `hcl:"seconds,attr"`
}

type DefaultRouteActionUrlRewrite struct {
	// HostRewrite: string, optional
	HostRewrite terra.StringValue `hcl:"host_rewrite,attr"`
	// PathPrefixRewrite: string, optional
	PathPrefixRewrite terra.StringValue `hcl:"path_prefix_rewrite,attr"`
}

type DefaultRouteActionWeightedBackendServices struct {
	// BackendService: string, optional
	BackendService terra.StringValue `hcl:"backend_service,attr"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
	// DefaultRouteActionWeightedBackendServicesHeaderAction: optional
	HeaderAction *DefaultRouteActionWeightedBackendServicesHeaderAction `hcl:"header_action,block"`
}

type DefaultRouteActionWeightedBackendServicesHeaderAction struct {
	// RequestHeadersToRemove: list of string, optional
	RequestHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"request_headers_to_remove,attr"`
	// ResponseHeadersToRemove: list of string, optional
	ResponseHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"response_headers_to_remove,attr"`
	// DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd: min=0
	RequestHeadersToAdd []DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd `hcl:"request_headers_to_add,block" validate:"min=0"`
	// DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd: min=0
	ResponseHeadersToAdd []DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd `hcl:"response_headers_to_add,block" validate:"min=0"`
}

type DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd struct {
	// HeaderName: string, optional
	HeaderName terra.StringValue `hcl:"header_name,attr"`
	// HeaderValue: string, optional
	HeaderValue terra.StringValue `hcl:"header_value,attr"`
	// Replace: bool, optional
	Replace terra.BoolValue `hcl:"replace,attr"`
}

type DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd struct {
	// HeaderName: string, optional
	HeaderName terra.StringValue `hcl:"header_name,attr"`
	// HeaderValue: string, optional
	HeaderValue terra.StringValue `hcl:"header_value,attr"`
	// Replace: bool, optional
	Replace terra.BoolValue `hcl:"replace,attr"`
}

type DefaultUrlRedirect struct {
	// HostRedirect: string, optional
	HostRedirect terra.StringValue `hcl:"host_redirect,attr"`
	// HttpsRedirect: bool, optional
	HttpsRedirect terra.BoolValue `hcl:"https_redirect,attr"`
	// PathRedirect: string, optional
	PathRedirect terra.StringValue `hcl:"path_redirect,attr"`
	// PrefixRedirect: string, optional
	PrefixRedirect terra.StringValue `hcl:"prefix_redirect,attr"`
	// RedirectResponseCode: string, optional
	RedirectResponseCode terra.StringValue `hcl:"redirect_response_code,attr"`
	// StripQuery: bool, required
	StripQuery terra.BoolValue `hcl:"strip_query,attr" validate:"required"`
}

type HeaderAction struct {
	// RequestHeadersToRemove: list of string, optional
	RequestHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"request_headers_to_remove,attr"`
	// ResponseHeadersToRemove: list of string, optional
	ResponseHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"response_headers_to_remove,attr"`
	// HeaderActionRequestHeadersToAdd: min=0
	RequestHeadersToAdd []HeaderActionRequestHeadersToAdd `hcl:"request_headers_to_add,block" validate:"min=0"`
	// HeaderActionResponseHeadersToAdd: min=0
	ResponseHeadersToAdd []HeaderActionResponseHeadersToAdd `hcl:"response_headers_to_add,block" validate:"min=0"`
}

type HeaderActionRequestHeadersToAdd struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type HeaderActionResponseHeadersToAdd struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type HostRule struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Hosts: set of string, required
	Hosts terra.SetValue[terra.StringValue] `hcl:"hosts,attr" validate:"required"`
	// PathMatcher: string, required
	PathMatcher terra.StringValue `hcl:"path_matcher,attr" validate:"required"`
}

type PathMatcher struct {
	// DefaultService: string, optional
	DefaultService terra.StringValue `hcl:"default_service,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PathMatcherDefaultRouteAction: optional
	DefaultRouteAction *PathMatcherDefaultRouteAction `hcl:"default_route_action,block"`
	// PathMatcherDefaultUrlRedirect: optional
	DefaultUrlRedirect *PathMatcherDefaultUrlRedirect `hcl:"default_url_redirect,block"`
	// PathMatcherHeaderAction: optional
	HeaderAction *PathMatcherHeaderAction `hcl:"header_action,block"`
	// PathRule: min=0
	PathRule []PathRule `hcl:"path_rule,block" validate:"min=0"`
	// RouteRules: min=0
	RouteRules []RouteRules `hcl:"route_rules,block" validate:"min=0"`
}

type PathMatcherDefaultRouteAction struct {
	// PathMatcherDefaultRouteActionCorsPolicy: optional
	CorsPolicy *PathMatcherDefaultRouteActionCorsPolicy `hcl:"cors_policy,block"`
	// PathMatcherDefaultRouteActionFaultInjectionPolicy: optional
	FaultInjectionPolicy *PathMatcherDefaultRouteActionFaultInjectionPolicy `hcl:"fault_injection_policy,block"`
	// PathMatcherDefaultRouteActionRequestMirrorPolicy: optional
	RequestMirrorPolicy *PathMatcherDefaultRouteActionRequestMirrorPolicy `hcl:"request_mirror_policy,block"`
	// PathMatcherDefaultRouteActionRetryPolicy: optional
	RetryPolicy *PathMatcherDefaultRouteActionRetryPolicy `hcl:"retry_policy,block"`
	// PathMatcherDefaultRouteActionTimeout: optional
	Timeout *PathMatcherDefaultRouteActionTimeout `hcl:"timeout,block"`
	// PathMatcherDefaultRouteActionUrlRewrite: optional
	UrlRewrite *PathMatcherDefaultRouteActionUrlRewrite `hcl:"url_rewrite,block"`
	// PathMatcherDefaultRouteActionWeightedBackendServices: min=0
	WeightedBackendServices []PathMatcherDefaultRouteActionWeightedBackendServices `hcl:"weighted_backend_services,block" validate:"min=0"`
}

type PathMatcherDefaultRouteActionCorsPolicy struct {
	// AllowCredentials: bool, optional
	AllowCredentials terra.BoolValue `hcl:"allow_credentials,attr"`
	// AllowHeaders: list of string, optional
	AllowHeaders terra.ListValue[terra.StringValue] `hcl:"allow_headers,attr"`
	// AllowMethods: list of string, optional
	AllowMethods terra.ListValue[terra.StringValue] `hcl:"allow_methods,attr"`
	// AllowOriginRegexes: list of string, optional
	AllowOriginRegexes terra.ListValue[terra.StringValue] `hcl:"allow_origin_regexes,attr"`
	// AllowOrigins: list of string, optional
	AllowOrigins terra.ListValue[terra.StringValue] `hcl:"allow_origins,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// ExposeHeaders: list of string, optional
	ExposeHeaders terra.ListValue[terra.StringValue] `hcl:"expose_headers,attr"`
	// MaxAge: number, optional
	MaxAge terra.NumberValue `hcl:"max_age,attr"`
}

type PathMatcherDefaultRouteActionFaultInjectionPolicy struct {
	// PathMatcherDefaultRouteActionFaultInjectionPolicyAbort: optional
	Abort *PathMatcherDefaultRouteActionFaultInjectionPolicyAbort `hcl:"abort,block"`
	// PathMatcherDefaultRouteActionFaultInjectionPolicyDelay: optional
	Delay *PathMatcherDefaultRouteActionFaultInjectionPolicyDelay `hcl:"delay,block"`
}

type PathMatcherDefaultRouteActionFaultInjectionPolicyAbort struct {
	// HttpStatus: number, optional
	HttpStatus terra.NumberValue `hcl:"http_status,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type PathMatcherDefaultRouteActionFaultInjectionPolicyDelay struct {
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
	// PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelay: optional
	FixedDelay *PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelay `hcl:"fixed_delay,block"`
}

type PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelay struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, optional
	Seconds terra.StringValue `hcl:"seconds,attr"`
}

type PathMatcherDefaultRouteActionRequestMirrorPolicy struct {
	// BackendService: string, required
	BackendService terra.StringValue `hcl:"backend_service,attr" validate:"required"`
}

type PathMatcherDefaultRouteActionRetryPolicy struct {
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// RetryConditions: list of string, optional
	RetryConditions terra.ListValue[terra.StringValue] `hcl:"retry_conditions,attr"`
	// PathMatcherDefaultRouteActionRetryPolicyPerTryTimeout: optional
	PerTryTimeout *PathMatcherDefaultRouteActionRetryPolicyPerTryTimeout `hcl:"per_try_timeout,block"`
}

type PathMatcherDefaultRouteActionRetryPolicyPerTryTimeout struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, optional
	Seconds terra.StringValue `hcl:"seconds,attr"`
}

type PathMatcherDefaultRouteActionTimeout struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, optional
	Seconds terra.StringValue `hcl:"seconds,attr"`
}

type PathMatcherDefaultRouteActionUrlRewrite struct {
	// HostRewrite: string, optional
	HostRewrite terra.StringValue `hcl:"host_rewrite,attr"`
	// PathPrefixRewrite: string, optional
	PathPrefixRewrite terra.StringValue `hcl:"path_prefix_rewrite,attr"`
}

type PathMatcherDefaultRouteActionWeightedBackendServices struct {
	// BackendService: string, optional
	BackendService terra.StringValue `hcl:"backend_service,attr"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
	// PathMatcherDefaultRouteActionWeightedBackendServicesHeaderAction: optional
	HeaderAction *PathMatcherDefaultRouteActionWeightedBackendServicesHeaderAction `hcl:"header_action,block"`
}

type PathMatcherDefaultRouteActionWeightedBackendServicesHeaderAction struct {
	// RequestHeadersToRemove: list of string, optional
	RequestHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"request_headers_to_remove,attr"`
	// ResponseHeadersToRemove: list of string, optional
	ResponseHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"response_headers_to_remove,attr"`
	// PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd: min=0
	RequestHeadersToAdd []PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd `hcl:"request_headers_to_add,block" validate:"min=0"`
	// PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd: min=0
	ResponseHeadersToAdd []PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd `hcl:"response_headers_to_add,block" validate:"min=0"`
}

type PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd struct {
	// HeaderName: string, optional
	HeaderName terra.StringValue `hcl:"header_name,attr"`
	// HeaderValue: string, optional
	HeaderValue terra.StringValue `hcl:"header_value,attr"`
	// Replace: bool, optional
	Replace terra.BoolValue `hcl:"replace,attr"`
}

type PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd struct {
	// HeaderName: string, optional
	HeaderName terra.StringValue `hcl:"header_name,attr"`
	// HeaderValue: string, optional
	HeaderValue terra.StringValue `hcl:"header_value,attr"`
	// Replace: bool, optional
	Replace terra.BoolValue `hcl:"replace,attr"`
}

type PathMatcherDefaultUrlRedirect struct {
	// HostRedirect: string, optional
	HostRedirect terra.StringValue `hcl:"host_redirect,attr"`
	// HttpsRedirect: bool, optional
	HttpsRedirect terra.BoolValue `hcl:"https_redirect,attr"`
	// PathRedirect: string, optional
	PathRedirect terra.StringValue `hcl:"path_redirect,attr"`
	// PrefixRedirect: string, optional
	PrefixRedirect terra.StringValue `hcl:"prefix_redirect,attr"`
	// RedirectResponseCode: string, optional
	RedirectResponseCode terra.StringValue `hcl:"redirect_response_code,attr"`
	// StripQuery: bool, required
	StripQuery terra.BoolValue `hcl:"strip_query,attr" validate:"required"`
}

type PathMatcherHeaderAction struct {
	// RequestHeadersToRemove: list of string, optional
	RequestHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"request_headers_to_remove,attr"`
	// ResponseHeadersToRemove: list of string, optional
	ResponseHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"response_headers_to_remove,attr"`
	// PathMatcherHeaderActionRequestHeadersToAdd: min=0
	RequestHeadersToAdd []PathMatcherHeaderActionRequestHeadersToAdd `hcl:"request_headers_to_add,block" validate:"min=0"`
	// PathMatcherHeaderActionResponseHeadersToAdd: min=0
	ResponseHeadersToAdd []PathMatcherHeaderActionResponseHeadersToAdd `hcl:"response_headers_to_add,block" validate:"min=0"`
}

type PathMatcherHeaderActionRequestHeadersToAdd struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type PathMatcherHeaderActionResponseHeadersToAdd struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type PathRule struct {
	// Paths: set of string, required
	Paths terra.SetValue[terra.StringValue] `hcl:"paths,attr" validate:"required"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
	// PathRuleRouteAction: optional
	RouteAction *PathRuleRouteAction `hcl:"route_action,block"`
	// PathRuleUrlRedirect: optional
	UrlRedirect *PathRuleUrlRedirect `hcl:"url_redirect,block"`
}

type PathRuleRouteAction struct {
	// PathRuleRouteActionCorsPolicy: optional
	CorsPolicy *PathRuleRouteActionCorsPolicy `hcl:"cors_policy,block"`
	// PathRuleRouteActionFaultInjectionPolicy: optional
	FaultInjectionPolicy *PathRuleRouteActionFaultInjectionPolicy `hcl:"fault_injection_policy,block"`
	// PathRuleRouteActionRequestMirrorPolicy: optional
	RequestMirrorPolicy *PathRuleRouteActionRequestMirrorPolicy `hcl:"request_mirror_policy,block"`
	// PathRuleRouteActionRetryPolicy: optional
	RetryPolicy *PathRuleRouteActionRetryPolicy `hcl:"retry_policy,block"`
	// PathRuleRouteActionTimeout: optional
	Timeout *PathRuleRouteActionTimeout `hcl:"timeout,block"`
	// PathRuleRouteActionUrlRewrite: optional
	UrlRewrite *PathRuleRouteActionUrlRewrite `hcl:"url_rewrite,block"`
	// PathRuleRouteActionWeightedBackendServices: min=0
	WeightedBackendServices []PathRuleRouteActionWeightedBackendServices `hcl:"weighted_backend_services,block" validate:"min=0"`
}

type PathRuleRouteActionCorsPolicy struct {
	// AllowCredentials: bool, optional
	AllowCredentials terra.BoolValue `hcl:"allow_credentials,attr"`
	// AllowHeaders: list of string, optional
	AllowHeaders terra.ListValue[terra.StringValue] `hcl:"allow_headers,attr"`
	// AllowMethods: list of string, optional
	AllowMethods terra.ListValue[terra.StringValue] `hcl:"allow_methods,attr"`
	// AllowOriginRegexes: list of string, optional
	AllowOriginRegexes terra.ListValue[terra.StringValue] `hcl:"allow_origin_regexes,attr"`
	// AllowOrigins: list of string, optional
	AllowOrigins terra.ListValue[terra.StringValue] `hcl:"allow_origins,attr"`
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
	// ExposeHeaders: list of string, optional
	ExposeHeaders terra.ListValue[terra.StringValue] `hcl:"expose_headers,attr"`
	// MaxAge: number, optional
	MaxAge terra.NumberValue `hcl:"max_age,attr"`
}

type PathRuleRouteActionFaultInjectionPolicy struct {
	// PathRuleRouteActionFaultInjectionPolicyAbort: optional
	Abort *PathRuleRouteActionFaultInjectionPolicyAbort `hcl:"abort,block"`
	// PathRuleRouteActionFaultInjectionPolicyDelay: optional
	Delay *PathRuleRouteActionFaultInjectionPolicyDelay `hcl:"delay,block"`
}

type PathRuleRouteActionFaultInjectionPolicyAbort struct {
	// HttpStatus: number, required
	HttpStatus terra.NumberValue `hcl:"http_status,attr" validate:"required"`
	// Percentage: number, required
	Percentage terra.NumberValue `hcl:"percentage,attr" validate:"required"`
}

type PathRuleRouteActionFaultInjectionPolicyDelay struct {
	// Percentage: number, required
	Percentage terra.NumberValue `hcl:"percentage,attr" validate:"required"`
	// PathRuleRouteActionFaultInjectionPolicyDelayFixedDelay: required
	FixedDelay *PathRuleRouteActionFaultInjectionPolicyDelayFixedDelay `hcl:"fixed_delay,block" validate:"required"`
}

type PathRuleRouteActionFaultInjectionPolicyDelayFixedDelay struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, required
	Seconds terra.StringValue `hcl:"seconds,attr" validate:"required"`
}

type PathRuleRouteActionRequestMirrorPolicy struct {
	// BackendService: string, required
	BackendService terra.StringValue `hcl:"backend_service,attr" validate:"required"`
}

type PathRuleRouteActionRetryPolicy struct {
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// RetryConditions: list of string, optional
	RetryConditions terra.ListValue[terra.StringValue] `hcl:"retry_conditions,attr"`
	// PathRuleRouteActionRetryPolicyPerTryTimeout: optional
	PerTryTimeout *PathRuleRouteActionRetryPolicyPerTryTimeout `hcl:"per_try_timeout,block"`
}

type PathRuleRouteActionRetryPolicyPerTryTimeout struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, required
	Seconds terra.StringValue `hcl:"seconds,attr" validate:"required"`
}

type PathRuleRouteActionTimeout struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, required
	Seconds terra.StringValue `hcl:"seconds,attr" validate:"required"`
}

type PathRuleRouteActionUrlRewrite struct {
	// HostRewrite: string, optional
	HostRewrite terra.StringValue `hcl:"host_rewrite,attr"`
	// PathPrefixRewrite: string, optional
	PathPrefixRewrite terra.StringValue `hcl:"path_prefix_rewrite,attr"`
}

type PathRuleRouteActionWeightedBackendServices struct {
	// BackendService: string, required
	BackendService terra.StringValue `hcl:"backend_service,attr" validate:"required"`
	// Weight: number, required
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
	// PathRuleRouteActionWeightedBackendServicesHeaderAction: optional
	HeaderAction *PathRuleRouteActionWeightedBackendServicesHeaderAction `hcl:"header_action,block"`
}

type PathRuleRouteActionWeightedBackendServicesHeaderAction struct {
	// RequestHeadersToRemove: list of string, optional
	RequestHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"request_headers_to_remove,attr"`
	// ResponseHeadersToRemove: list of string, optional
	ResponseHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"response_headers_to_remove,attr"`
	// PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd: min=0
	RequestHeadersToAdd []PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd `hcl:"request_headers_to_add,block" validate:"min=0"`
	// PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd: min=0
	ResponseHeadersToAdd []PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd `hcl:"response_headers_to_add,block" validate:"min=0"`
}

type PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type PathRuleUrlRedirect struct {
	// HostRedirect: string, optional
	HostRedirect terra.StringValue `hcl:"host_redirect,attr"`
	// HttpsRedirect: bool, optional
	HttpsRedirect terra.BoolValue `hcl:"https_redirect,attr"`
	// PathRedirect: string, optional
	PathRedirect terra.StringValue `hcl:"path_redirect,attr"`
	// PrefixRedirect: string, optional
	PrefixRedirect terra.StringValue `hcl:"prefix_redirect,attr"`
	// RedirectResponseCode: string, optional
	RedirectResponseCode terra.StringValue `hcl:"redirect_response_code,attr"`
	// StripQuery: bool, required
	StripQuery terra.BoolValue `hcl:"strip_query,attr" validate:"required"`
}

type RouteRules struct {
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
	// RouteRulesHeaderAction: optional
	HeaderAction *RouteRulesHeaderAction `hcl:"header_action,block"`
	// MatchRules: min=0
	MatchRules []MatchRules `hcl:"match_rules,block" validate:"min=0"`
	// RouteRulesRouteAction: optional
	RouteAction *RouteRulesRouteAction `hcl:"route_action,block"`
	// RouteRulesUrlRedirect: optional
	UrlRedirect *RouteRulesUrlRedirect `hcl:"url_redirect,block"`
}

type RouteRulesHeaderAction struct {
	// RequestHeadersToRemove: list of string, optional
	RequestHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"request_headers_to_remove,attr"`
	// ResponseHeadersToRemove: list of string, optional
	ResponseHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"response_headers_to_remove,attr"`
	// RouteRulesHeaderActionRequestHeadersToAdd: min=0
	RequestHeadersToAdd []RouteRulesHeaderActionRequestHeadersToAdd `hcl:"request_headers_to_add,block" validate:"min=0"`
	// RouteRulesHeaderActionResponseHeadersToAdd: min=0
	ResponseHeadersToAdd []RouteRulesHeaderActionResponseHeadersToAdd `hcl:"response_headers_to_add,block" validate:"min=0"`
}

type RouteRulesHeaderActionRequestHeadersToAdd struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type RouteRulesHeaderActionResponseHeadersToAdd struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type MatchRules struct {
	// FullPathMatch: string, optional
	FullPathMatch terra.StringValue `hcl:"full_path_match,attr"`
	// IgnoreCase: bool, optional
	IgnoreCase terra.BoolValue `hcl:"ignore_case,attr"`
	// PathTemplateMatch: string, optional
	PathTemplateMatch terra.StringValue `hcl:"path_template_match,attr"`
	// PrefixMatch: string, optional
	PrefixMatch terra.StringValue `hcl:"prefix_match,attr"`
	// RegexMatch: string, optional
	RegexMatch terra.StringValue `hcl:"regex_match,attr"`
	// HeaderMatches: min=0
	HeaderMatches []HeaderMatches `hcl:"header_matches,block" validate:"min=0"`
	// MetadataFilters: min=0
	MetadataFilters []MetadataFilters `hcl:"metadata_filters,block" validate:"min=0"`
	// QueryParameterMatches: min=0
	QueryParameterMatches []QueryParameterMatches `hcl:"query_parameter_matches,block" validate:"min=0"`
}

type HeaderMatches struct {
	// ExactMatch: string, optional
	ExactMatch terra.StringValue `hcl:"exact_match,attr"`
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// InvertMatch: bool, optional
	InvertMatch terra.BoolValue `hcl:"invert_match,attr"`
	// PrefixMatch: string, optional
	PrefixMatch terra.StringValue `hcl:"prefix_match,attr"`
	// PresentMatch: bool, optional
	PresentMatch terra.BoolValue `hcl:"present_match,attr"`
	// RegexMatch: string, optional
	RegexMatch terra.StringValue `hcl:"regex_match,attr"`
	// SuffixMatch: string, optional
	SuffixMatch terra.StringValue `hcl:"suffix_match,attr"`
	// RangeMatch: optional
	RangeMatch *RangeMatch `hcl:"range_match,block"`
}

type RangeMatch struct {
	// RangeEnd: number, required
	RangeEnd terra.NumberValue `hcl:"range_end,attr" validate:"required"`
	// RangeStart: number, required
	RangeStart terra.NumberValue `hcl:"range_start,attr" validate:"required"`
}

type MetadataFilters struct {
	// FilterMatchCriteria: string, required
	FilterMatchCriteria terra.StringValue `hcl:"filter_match_criteria,attr" validate:"required"`
	// FilterLabels: min=1,max=64
	FilterLabels []FilterLabels `hcl:"filter_labels,block" validate:"min=1,max=64"`
}

type FilterLabels struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type QueryParameterMatches struct {
	// ExactMatch: string, optional
	ExactMatch terra.StringValue `hcl:"exact_match,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PresentMatch: bool, optional
	PresentMatch terra.BoolValue `hcl:"present_match,attr"`
	// RegexMatch: string, optional
	RegexMatch terra.StringValue `hcl:"regex_match,attr"`
}

type RouteRulesRouteAction struct {
	// RouteRulesRouteActionCorsPolicy: optional
	CorsPolicy *RouteRulesRouteActionCorsPolicy `hcl:"cors_policy,block"`
	// RouteRulesRouteActionFaultInjectionPolicy: optional
	FaultInjectionPolicy *RouteRulesRouteActionFaultInjectionPolicy `hcl:"fault_injection_policy,block"`
	// RouteRulesRouteActionRequestMirrorPolicy: optional
	RequestMirrorPolicy *RouteRulesRouteActionRequestMirrorPolicy `hcl:"request_mirror_policy,block"`
	// RouteRulesRouteActionRetryPolicy: optional
	RetryPolicy *RouteRulesRouteActionRetryPolicy `hcl:"retry_policy,block"`
	// RouteRulesRouteActionTimeout: optional
	Timeout *RouteRulesRouteActionTimeout `hcl:"timeout,block"`
	// RouteRulesRouteActionUrlRewrite: optional
	UrlRewrite *RouteRulesRouteActionUrlRewrite `hcl:"url_rewrite,block"`
	// RouteRulesRouteActionWeightedBackendServices: min=0
	WeightedBackendServices []RouteRulesRouteActionWeightedBackendServices `hcl:"weighted_backend_services,block" validate:"min=0"`
}

type RouteRulesRouteActionCorsPolicy struct {
	// AllowCredentials: bool, optional
	AllowCredentials terra.BoolValue `hcl:"allow_credentials,attr"`
	// AllowHeaders: list of string, optional
	AllowHeaders terra.ListValue[terra.StringValue] `hcl:"allow_headers,attr"`
	// AllowMethods: list of string, optional
	AllowMethods terra.ListValue[terra.StringValue] `hcl:"allow_methods,attr"`
	// AllowOriginRegexes: list of string, optional
	AllowOriginRegexes terra.ListValue[terra.StringValue] `hcl:"allow_origin_regexes,attr"`
	// AllowOrigins: list of string, optional
	AllowOrigins terra.ListValue[terra.StringValue] `hcl:"allow_origins,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// ExposeHeaders: list of string, optional
	ExposeHeaders terra.ListValue[terra.StringValue] `hcl:"expose_headers,attr"`
	// MaxAge: number, optional
	MaxAge terra.NumberValue `hcl:"max_age,attr"`
}

type RouteRulesRouteActionFaultInjectionPolicy struct {
	// RouteRulesRouteActionFaultInjectionPolicyAbort: optional
	Abort *RouteRulesRouteActionFaultInjectionPolicyAbort `hcl:"abort,block"`
	// RouteRulesRouteActionFaultInjectionPolicyDelay: optional
	Delay *RouteRulesRouteActionFaultInjectionPolicyDelay `hcl:"delay,block"`
}

type RouteRulesRouteActionFaultInjectionPolicyAbort struct {
	// HttpStatus: number, optional
	HttpStatus terra.NumberValue `hcl:"http_status,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type RouteRulesRouteActionFaultInjectionPolicyDelay struct {
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
	// RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay: optional
	FixedDelay *RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay `hcl:"fixed_delay,block"`
}

type RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, required
	Seconds terra.StringValue `hcl:"seconds,attr" validate:"required"`
}

type RouteRulesRouteActionRequestMirrorPolicy struct {
	// BackendService: string, required
	BackendService terra.StringValue `hcl:"backend_service,attr" validate:"required"`
}

type RouteRulesRouteActionRetryPolicy struct {
	// NumRetries: number, required
	NumRetries terra.NumberValue `hcl:"num_retries,attr" validate:"required"`
	// RetryConditions: list of string, optional
	RetryConditions terra.ListValue[terra.StringValue] `hcl:"retry_conditions,attr"`
	// RouteRulesRouteActionRetryPolicyPerTryTimeout: optional
	PerTryTimeout *RouteRulesRouteActionRetryPolicyPerTryTimeout `hcl:"per_try_timeout,block"`
}

type RouteRulesRouteActionRetryPolicyPerTryTimeout struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, required
	Seconds terra.StringValue `hcl:"seconds,attr" validate:"required"`
}

type RouteRulesRouteActionTimeout struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, required
	Seconds terra.StringValue `hcl:"seconds,attr" validate:"required"`
}

type RouteRulesRouteActionUrlRewrite struct {
	// HostRewrite: string, optional
	HostRewrite terra.StringValue `hcl:"host_rewrite,attr"`
	// PathPrefixRewrite: string, optional
	PathPrefixRewrite terra.StringValue `hcl:"path_prefix_rewrite,attr"`
	// PathTemplateRewrite: string, optional
	PathTemplateRewrite terra.StringValue `hcl:"path_template_rewrite,attr"`
}

type RouteRulesRouteActionWeightedBackendServices struct {
	// BackendService: string, required
	BackendService terra.StringValue `hcl:"backend_service,attr" validate:"required"`
	// Weight: number, required
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
	// RouteRulesRouteActionWeightedBackendServicesHeaderAction: optional
	HeaderAction *RouteRulesRouteActionWeightedBackendServicesHeaderAction `hcl:"header_action,block"`
}

type RouteRulesRouteActionWeightedBackendServicesHeaderAction struct {
	// RequestHeadersToRemove: list of string, optional
	RequestHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"request_headers_to_remove,attr"`
	// ResponseHeadersToRemove: list of string, optional
	ResponseHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"response_headers_to_remove,attr"`
	// RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd: min=0
	RequestHeadersToAdd []RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd `hcl:"request_headers_to_add,block" validate:"min=0"`
	// RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd: min=0
	ResponseHeadersToAdd []RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd `hcl:"response_headers_to_add,block" validate:"min=0"`
}

type RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type RouteRulesUrlRedirect struct {
	// HostRedirect: string, optional
	HostRedirect terra.StringValue `hcl:"host_redirect,attr"`
	// HttpsRedirect: bool, optional
	HttpsRedirect terra.BoolValue `hcl:"https_redirect,attr"`
	// PathRedirect: string, optional
	PathRedirect terra.StringValue `hcl:"path_redirect,attr"`
	// PrefixRedirect: string, optional
	PrefixRedirect terra.StringValue `hcl:"prefix_redirect,attr"`
	// RedirectResponseCode: string, optional
	RedirectResponseCode terra.StringValue `hcl:"redirect_response_code,attr"`
	// StripQuery: bool, optional
	StripQuery terra.BoolValue `hcl:"strip_query,attr"`
}

type Test struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DefaultRouteActionAttributes struct {
	ref terra.Reference
}

func (dra DefaultRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return dra.ref, nil
}

func (dra DefaultRouteActionAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionAttributes {
	return DefaultRouteActionAttributes{ref: ref}
}

func (dra DefaultRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dra.ref.InternalTokens()
}

func (dra DefaultRouteActionAttributes) CorsPolicy() terra.ListValue[DefaultRouteActionCorsPolicyAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionCorsPolicyAttributes](dra.ref.Append("cors_policy"))
}

func (dra DefaultRouteActionAttributes) FaultInjectionPolicy() terra.ListValue[DefaultRouteActionFaultInjectionPolicyAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionFaultInjectionPolicyAttributes](dra.ref.Append("fault_injection_policy"))
}

func (dra DefaultRouteActionAttributes) RequestMirrorPolicy() terra.ListValue[DefaultRouteActionRequestMirrorPolicyAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionRequestMirrorPolicyAttributes](dra.ref.Append("request_mirror_policy"))
}

func (dra DefaultRouteActionAttributes) RetryPolicy() terra.ListValue[DefaultRouteActionRetryPolicyAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionRetryPolicyAttributes](dra.ref.Append("retry_policy"))
}

func (dra DefaultRouteActionAttributes) Timeout() terra.ListValue[DefaultRouteActionTimeoutAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionTimeoutAttributes](dra.ref.Append("timeout"))
}

func (dra DefaultRouteActionAttributes) UrlRewrite() terra.ListValue[DefaultRouteActionUrlRewriteAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionUrlRewriteAttributes](dra.ref.Append("url_rewrite"))
}

func (dra DefaultRouteActionAttributes) WeightedBackendServices() terra.ListValue[DefaultRouteActionWeightedBackendServicesAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionWeightedBackendServicesAttributes](dra.ref.Append("weighted_backend_services"))
}

type DefaultRouteActionCorsPolicyAttributes struct {
	ref terra.Reference
}

func (cp DefaultRouteActionCorsPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp DefaultRouteActionCorsPolicyAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionCorsPolicyAttributes {
	return DefaultRouteActionCorsPolicyAttributes{ref: ref}
}

func (cp DefaultRouteActionCorsPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp DefaultRouteActionCorsPolicyAttributes) AllowCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("allow_credentials"))
}

func (cp DefaultRouteActionCorsPolicyAttributes) AllowHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_headers"))
}

func (cp DefaultRouteActionCorsPolicyAttributes) AllowMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_methods"))
}

func (cp DefaultRouteActionCorsPolicyAttributes) AllowOriginRegexes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origin_regexes"))
}

func (cp DefaultRouteActionCorsPolicyAttributes) AllowOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origins"))
}

func (cp DefaultRouteActionCorsPolicyAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("disabled"))
}

func (cp DefaultRouteActionCorsPolicyAttributes) ExposeHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("expose_headers"))
}

func (cp DefaultRouteActionCorsPolicyAttributes) MaxAge() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("max_age"))
}

type DefaultRouteActionFaultInjectionPolicyAttributes struct {
	ref terra.Reference
}

func (fip DefaultRouteActionFaultInjectionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return fip.ref, nil
}

func (fip DefaultRouteActionFaultInjectionPolicyAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionFaultInjectionPolicyAttributes {
	return DefaultRouteActionFaultInjectionPolicyAttributes{ref: ref}
}

func (fip DefaultRouteActionFaultInjectionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fip.ref.InternalTokens()
}

func (fip DefaultRouteActionFaultInjectionPolicyAttributes) Abort() terra.ListValue[DefaultRouteActionFaultInjectionPolicyAbortAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionFaultInjectionPolicyAbortAttributes](fip.ref.Append("abort"))
}

func (fip DefaultRouteActionFaultInjectionPolicyAttributes) Delay() terra.ListValue[DefaultRouteActionFaultInjectionPolicyDelayAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionFaultInjectionPolicyDelayAttributes](fip.ref.Append("delay"))
}

type DefaultRouteActionFaultInjectionPolicyAbortAttributes struct {
	ref terra.Reference
}

func (a DefaultRouteActionFaultInjectionPolicyAbortAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DefaultRouteActionFaultInjectionPolicyAbortAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionFaultInjectionPolicyAbortAttributes {
	return DefaultRouteActionFaultInjectionPolicyAbortAttributes{ref: ref}
}

func (a DefaultRouteActionFaultInjectionPolicyAbortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DefaultRouteActionFaultInjectionPolicyAbortAttributes) HttpStatus() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("http_status"))
}

func (a DefaultRouteActionFaultInjectionPolicyAbortAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("percentage"))
}

type DefaultRouteActionFaultInjectionPolicyDelayAttributes struct {
	ref terra.Reference
}

func (d DefaultRouteActionFaultInjectionPolicyDelayAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DefaultRouteActionFaultInjectionPolicyDelayAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionFaultInjectionPolicyDelayAttributes {
	return DefaultRouteActionFaultInjectionPolicyDelayAttributes{ref: ref}
}

func (d DefaultRouteActionFaultInjectionPolicyDelayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DefaultRouteActionFaultInjectionPolicyDelayAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("percentage"))
}

func (d DefaultRouteActionFaultInjectionPolicyDelayAttributes) FixedDelay() terra.ListValue[DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes](d.ref.Append("fixed_delay"))
}

type DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes struct {
	ref terra.Reference
}

func (fd DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalRef() (terra.Reference, error) {
	return fd.ref, nil
}

func (fd DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes {
	return DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes{ref: ref}
}

func (fd DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fd.ref.InternalTokens()
}

func (fd DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(fd.ref.Append("nanos"))
}

func (fd DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(fd.ref.Append("seconds"))
}

type DefaultRouteActionRequestMirrorPolicyAttributes struct {
	ref terra.Reference
}

func (rmp DefaultRouteActionRequestMirrorPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rmp.ref, nil
}

func (rmp DefaultRouteActionRequestMirrorPolicyAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionRequestMirrorPolicyAttributes {
	return DefaultRouteActionRequestMirrorPolicyAttributes{ref: ref}
}

func (rmp DefaultRouteActionRequestMirrorPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rmp.ref.InternalTokens()
}

func (rmp DefaultRouteActionRequestMirrorPolicyAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(rmp.ref.Append("backend_service"))
}

type DefaultRouteActionRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp DefaultRouteActionRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp DefaultRouteActionRetryPolicyAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionRetryPolicyAttributes {
	return DefaultRouteActionRetryPolicyAttributes{ref: ref}
}

func (rp DefaultRouteActionRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp DefaultRouteActionRetryPolicyAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("num_retries"))
}

func (rp DefaultRouteActionRetryPolicyAttributes) RetryConditions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rp.ref.Append("retry_conditions"))
}

func (rp DefaultRouteActionRetryPolicyAttributes) PerTryTimeout() terra.ListValue[DefaultRouteActionRetryPolicyPerTryTimeoutAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionRetryPolicyPerTryTimeoutAttributes](rp.ref.Append("per_try_timeout"))
}

type DefaultRouteActionRetryPolicyPerTryTimeoutAttributes struct {
	ref terra.Reference
}

func (ptt DefaultRouteActionRetryPolicyPerTryTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return ptt.ref, nil
}

func (ptt DefaultRouteActionRetryPolicyPerTryTimeoutAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionRetryPolicyPerTryTimeoutAttributes {
	return DefaultRouteActionRetryPolicyPerTryTimeoutAttributes{ref: ref}
}

func (ptt DefaultRouteActionRetryPolicyPerTryTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ptt.ref.InternalTokens()
}

func (ptt DefaultRouteActionRetryPolicyPerTryTimeoutAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(ptt.ref.Append("nanos"))
}

func (ptt DefaultRouteActionRetryPolicyPerTryTimeoutAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(ptt.ref.Append("seconds"))
}

type DefaultRouteActionTimeoutAttributes struct {
	ref terra.Reference
}

func (t DefaultRouteActionTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DefaultRouteActionTimeoutAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionTimeoutAttributes {
	return DefaultRouteActionTimeoutAttributes{ref: ref}
}

func (t DefaultRouteActionTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DefaultRouteActionTimeoutAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("nanos"))
}

func (t DefaultRouteActionTimeoutAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("seconds"))
}

type DefaultRouteActionUrlRewriteAttributes struct {
	ref terra.Reference
}

func (ur DefaultRouteActionUrlRewriteAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur DefaultRouteActionUrlRewriteAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionUrlRewriteAttributes {
	return DefaultRouteActionUrlRewriteAttributes{ref: ref}
}

func (ur DefaultRouteActionUrlRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur DefaultRouteActionUrlRewriteAttributes) HostRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_rewrite"))
}

func (ur DefaultRouteActionUrlRewriteAttributes) PathPrefixRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_prefix_rewrite"))
}

type DefaultRouteActionWeightedBackendServicesAttributes struct {
	ref terra.Reference
}

func (wbs DefaultRouteActionWeightedBackendServicesAttributes) InternalRef() (terra.Reference, error) {
	return wbs.ref, nil
}

func (wbs DefaultRouteActionWeightedBackendServicesAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionWeightedBackendServicesAttributes {
	return DefaultRouteActionWeightedBackendServicesAttributes{ref: ref}
}

func (wbs DefaultRouteActionWeightedBackendServicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wbs.ref.InternalTokens()
}

func (wbs DefaultRouteActionWeightedBackendServicesAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(wbs.ref.Append("backend_service"))
}

func (wbs DefaultRouteActionWeightedBackendServicesAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wbs.ref.Append("weight"))
}

func (wbs DefaultRouteActionWeightedBackendServicesAttributes) HeaderAction() terra.ListValue[DefaultRouteActionWeightedBackendServicesHeaderActionAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionWeightedBackendServicesHeaderActionAttributes](wbs.ref.Append("header_action"))
}

type DefaultRouteActionWeightedBackendServicesHeaderActionAttributes struct {
	ref terra.Reference
}

func (ha DefaultRouteActionWeightedBackendServicesHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha DefaultRouteActionWeightedBackendServicesHeaderActionAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionWeightedBackendServicesHeaderActionAttributes {
	return DefaultRouteActionWeightedBackendServicesHeaderActionAttributes{ref: ref}
}

func (ha DefaultRouteActionWeightedBackendServicesHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha DefaultRouteActionWeightedBackendServicesHeaderActionAttributes) RequestHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("request_headers_to_remove"))
}

func (ha DefaultRouteActionWeightedBackendServicesHeaderActionAttributes) ResponseHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("response_headers_to_remove"))
}

func (ha DefaultRouteActionWeightedBackendServicesHeaderActionAttributes) RequestHeadersToAdd() terra.ListValue[DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes](ha.ref.Append("request_headers_to_add"))
}

func (ha DefaultRouteActionWeightedBackendServicesHeaderActionAttributes) ResponseHeadersToAdd() terra.ListValue[DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes](ha.ref.Append("response_headers_to_add"))
}

type DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes {
	return DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes{ref: ref}
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes {
	return DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes{ref: ref}
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type DefaultUrlRedirectAttributes struct {
	ref terra.Reference
}

func (dur DefaultUrlRedirectAttributes) InternalRef() (terra.Reference, error) {
	return dur.ref, nil
}

func (dur DefaultUrlRedirectAttributes) InternalWithRef(ref terra.Reference) DefaultUrlRedirectAttributes {
	return DefaultUrlRedirectAttributes{ref: ref}
}

func (dur DefaultUrlRedirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dur.ref.InternalTokens()
}

func (dur DefaultUrlRedirectAttributes) HostRedirect() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("host_redirect"))
}

func (dur DefaultUrlRedirectAttributes) HttpsRedirect() terra.BoolValue {
	return terra.ReferenceAsBool(dur.ref.Append("https_redirect"))
}

func (dur DefaultUrlRedirectAttributes) PathRedirect() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("path_redirect"))
}

func (dur DefaultUrlRedirectAttributes) PrefixRedirect() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("prefix_redirect"))
}

func (dur DefaultUrlRedirectAttributes) RedirectResponseCode() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("redirect_response_code"))
}

func (dur DefaultUrlRedirectAttributes) StripQuery() terra.BoolValue {
	return terra.ReferenceAsBool(dur.ref.Append("strip_query"))
}

type HeaderActionAttributes struct {
	ref terra.Reference
}

func (ha HeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha HeaderActionAttributes) InternalWithRef(ref terra.Reference) HeaderActionAttributes {
	return HeaderActionAttributes{ref: ref}
}

func (ha HeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha HeaderActionAttributes) RequestHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("request_headers_to_remove"))
}

func (ha HeaderActionAttributes) ResponseHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("response_headers_to_remove"))
}

func (ha HeaderActionAttributes) RequestHeadersToAdd() terra.ListValue[HeaderActionRequestHeadersToAddAttributes] {
	return terra.ReferenceAsList[HeaderActionRequestHeadersToAddAttributes](ha.ref.Append("request_headers_to_add"))
}

func (ha HeaderActionAttributes) ResponseHeadersToAdd() terra.ListValue[HeaderActionResponseHeadersToAddAttributes] {
	return terra.ReferenceAsList[HeaderActionResponseHeadersToAddAttributes](ha.ref.Append("response_headers_to_add"))
}

type HeaderActionRequestHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta HeaderActionRequestHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta HeaderActionRequestHeadersToAddAttributes) InternalWithRef(ref terra.Reference) HeaderActionRequestHeadersToAddAttributes {
	return HeaderActionRequestHeadersToAddAttributes{ref: ref}
}

func (rhta HeaderActionRequestHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta HeaderActionRequestHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta HeaderActionRequestHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta HeaderActionRequestHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type HeaderActionResponseHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta HeaderActionResponseHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta HeaderActionResponseHeadersToAddAttributes) InternalWithRef(ref terra.Reference) HeaderActionResponseHeadersToAddAttributes {
	return HeaderActionResponseHeadersToAddAttributes{ref: ref}
}

func (rhta HeaderActionResponseHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta HeaderActionResponseHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta HeaderActionResponseHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta HeaderActionResponseHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type HostRuleAttributes struct {
	ref terra.Reference
}

func (hr HostRuleAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr HostRuleAttributes) InternalWithRef(ref terra.Reference) HostRuleAttributes {
	return HostRuleAttributes{ref: ref}
}

func (hr HostRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr HostRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(hr.ref.Append("description"))
}

func (hr HostRuleAttributes) Hosts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](hr.ref.Append("hosts"))
}

func (hr HostRuleAttributes) PathMatcher() terra.StringValue {
	return terra.ReferenceAsString(hr.ref.Append("path_matcher"))
}

type PathMatcherAttributes struct {
	ref terra.Reference
}

func (pm PathMatcherAttributes) InternalRef() (terra.Reference, error) {
	return pm.ref, nil
}

func (pm PathMatcherAttributes) InternalWithRef(ref terra.Reference) PathMatcherAttributes {
	return PathMatcherAttributes{ref: ref}
}

func (pm PathMatcherAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pm.ref.InternalTokens()
}

func (pm PathMatcherAttributes) DefaultService() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("default_service"))
}

func (pm PathMatcherAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("description"))
}

func (pm PathMatcherAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("name"))
}

func (pm PathMatcherAttributes) DefaultRouteAction() terra.ListValue[PathMatcherDefaultRouteActionAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionAttributes](pm.ref.Append("default_route_action"))
}

func (pm PathMatcherAttributes) DefaultUrlRedirect() terra.ListValue[PathMatcherDefaultUrlRedirectAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultUrlRedirectAttributes](pm.ref.Append("default_url_redirect"))
}

func (pm PathMatcherAttributes) HeaderAction() terra.ListValue[PathMatcherHeaderActionAttributes] {
	return terra.ReferenceAsList[PathMatcherHeaderActionAttributes](pm.ref.Append("header_action"))
}

func (pm PathMatcherAttributes) PathRule() terra.ListValue[PathRuleAttributes] {
	return terra.ReferenceAsList[PathRuleAttributes](pm.ref.Append("path_rule"))
}

func (pm PathMatcherAttributes) RouteRules() terra.ListValue[RouteRulesAttributes] {
	return terra.ReferenceAsList[RouteRulesAttributes](pm.ref.Append("route_rules"))
}

type PathMatcherDefaultRouteActionAttributes struct {
	ref terra.Reference
}

func (dra PathMatcherDefaultRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return dra.ref, nil
}

func (dra PathMatcherDefaultRouteActionAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionAttributes {
	return PathMatcherDefaultRouteActionAttributes{ref: ref}
}

func (dra PathMatcherDefaultRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dra.ref.InternalTokens()
}

func (dra PathMatcherDefaultRouteActionAttributes) CorsPolicy() terra.ListValue[PathMatcherDefaultRouteActionCorsPolicyAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionCorsPolicyAttributes](dra.ref.Append("cors_policy"))
}

func (dra PathMatcherDefaultRouteActionAttributes) FaultInjectionPolicy() terra.ListValue[PathMatcherDefaultRouteActionFaultInjectionPolicyAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionFaultInjectionPolicyAttributes](dra.ref.Append("fault_injection_policy"))
}

func (dra PathMatcherDefaultRouteActionAttributes) RequestMirrorPolicy() terra.ListValue[PathMatcherDefaultRouteActionRequestMirrorPolicyAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionRequestMirrorPolicyAttributes](dra.ref.Append("request_mirror_policy"))
}

func (dra PathMatcherDefaultRouteActionAttributes) RetryPolicy() terra.ListValue[PathMatcherDefaultRouteActionRetryPolicyAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionRetryPolicyAttributes](dra.ref.Append("retry_policy"))
}

func (dra PathMatcherDefaultRouteActionAttributes) Timeout() terra.ListValue[PathMatcherDefaultRouteActionTimeoutAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionTimeoutAttributes](dra.ref.Append("timeout"))
}

func (dra PathMatcherDefaultRouteActionAttributes) UrlRewrite() terra.ListValue[PathMatcherDefaultRouteActionUrlRewriteAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionUrlRewriteAttributes](dra.ref.Append("url_rewrite"))
}

func (dra PathMatcherDefaultRouteActionAttributes) WeightedBackendServices() terra.ListValue[PathMatcherDefaultRouteActionWeightedBackendServicesAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionWeightedBackendServicesAttributes](dra.ref.Append("weighted_backend_services"))
}

type PathMatcherDefaultRouteActionCorsPolicyAttributes struct {
	ref terra.Reference
}

func (cp PathMatcherDefaultRouteActionCorsPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp PathMatcherDefaultRouteActionCorsPolicyAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionCorsPolicyAttributes {
	return PathMatcherDefaultRouteActionCorsPolicyAttributes{ref: ref}
}

func (cp PathMatcherDefaultRouteActionCorsPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp PathMatcherDefaultRouteActionCorsPolicyAttributes) AllowCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("allow_credentials"))
}

func (cp PathMatcherDefaultRouteActionCorsPolicyAttributes) AllowHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_headers"))
}

func (cp PathMatcherDefaultRouteActionCorsPolicyAttributes) AllowMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_methods"))
}

func (cp PathMatcherDefaultRouteActionCorsPolicyAttributes) AllowOriginRegexes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origin_regexes"))
}

func (cp PathMatcherDefaultRouteActionCorsPolicyAttributes) AllowOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origins"))
}

func (cp PathMatcherDefaultRouteActionCorsPolicyAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("disabled"))
}

func (cp PathMatcherDefaultRouteActionCorsPolicyAttributes) ExposeHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("expose_headers"))
}

func (cp PathMatcherDefaultRouteActionCorsPolicyAttributes) MaxAge() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("max_age"))
}

type PathMatcherDefaultRouteActionFaultInjectionPolicyAttributes struct {
	ref terra.Reference
}

func (fip PathMatcherDefaultRouteActionFaultInjectionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return fip.ref, nil
}

func (fip PathMatcherDefaultRouteActionFaultInjectionPolicyAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionFaultInjectionPolicyAttributes {
	return PathMatcherDefaultRouteActionFaultInjectionPolicyAttributes{ref: ref}
}

func (fip PathMatcherDefaultRouteActionFaultInjectionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fip.ref.InternalTokens()
}

func (fip PathMatcherDefaultRouteActionFaultInjectionPolicyAttributes) Abort() terra.ListValue[PathMatcherDefaultRouteActionFaultInjectionPolicyAbortAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionFaultInjectionPolicyAbortAttributes](fip.ref.Append("abort"))
}

func (fip PathMatcherDefaultRouteActionFaultInjectionPolicyAttributes) Delay() terra.ListValue[PathMatcherDefaultRouteActionFaultInjectionPolicyDelayAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionFaultInjectionPolicyDelayAttributes](fip.ref.Append("delay"))
}

type PathMatcherDefaultRouteActionFaultInjectionPolicyAbortAttributes struct {
	ref terra.Reference
}

func (a PathMatcherDefaultRouteActionFaultInjectionPolicyAbortAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a PathMatcherDefaultRouteActionFaultInjectionPolicyAbortAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionFaultInjectionPolicyAbortAttributes {
	return PathMatcherDefaultRouteActionFaultInjectionPolicyAbortAttributes{ref: ref}
}

func (a PathMatcherDefaultRouteActionFaultInjectionPolicyAbortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a PathMatcherDefaultRouteActionFaultInjectionPolicyAbortAttributes) HttpStatus() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("http_status"))
}

func (a PathMatcherDefaultRouteActionFaultInjectionPolicyAbortAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("percentage"))
}

type PathMatcherDefaultRouteActionFaultInjectionPolicyDelayAttributes struct {
	ref terra.Reference
}

func (d PathMatcherDefaultRouteActionFaultInjectionPolicyDelayAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d PathMatcherDefaultRouteActionFaultInjectionPolicyDelayAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionFaultInjectionPolicyDelayAttributes {
	return PathMatcherDefaultRouteActionFaultInjectionPolicyDelayAttributes{ref: ref}
}

func (d PathMatcherDefaultRouteActionFaultInjectionPolicyDelayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d PathMatcherDefaultRouteActionFaultInjectionPolicyDelayAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("percentage"))
}

func (d PathMatcherDefaultRouteActionFaultInjectionPolicyDelayAttributes) FixedDelay() terra.ListValue[PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes](d.ref.Append("fixed_delay"))
}

type PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes struct {
	ref terra.Reference
}

func (fd PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalRef() (terra.Reference, error) {
	return fd.ref, nil
}

func (fd PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes {
	return PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes{ref: ref}
}

func (fd PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fd.ref.InternalTokens()
}

func (fd PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(fd.ref.Append("nanos"))
}

func (fd PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(fd.ref.Append("seconds"))
}

type PathMatcherDefaultRouteActionRequestMirrorPolicyAttributes struct {
	ref terra.Reference
}

func (rmp PathMatcherDefaultRouteActionRequestMirrorPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rmp.ref, nil
}

func (rmp PathMatcherDefaultRouteActionRequestMirrorPolicyAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionRequestMirrorPolicyAttributes {
	return PathMatcherDefaultRouteActionRequestMirrorPolicyAttributes{ref: ref}
}

func (rmp PathMatcherDefaultRouteActionRequestMirrorPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rmp.ref.InternalTokens()
}

func (rmp PathMatcherDefaultRouteActionRequestMirrorPolicyAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(rmp.ref.Append("backend_service"))
}

type PathMatcherDefaultRouteActionRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp PathMatcherDefaultRouteActionRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp PathMatcherDefaultRouteActionRetryPolicyAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionRetryPolicyAttributes {
	return PathMatcherDefaultRouteActionRetryPolicyAttributes{ref: ref}
}

func (rp PathMatcherDefaultRouteActionRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp PathMatcherDefaultRouteActionRetryPolicyAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("num_retries"))
}

func (rp PathMatcherDefaultRouteActionRetryPolicyAttributes) RetryConditions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rp.ref.Append("retry_conditions"))
}

func (rp PathMatcherDefaultRouteActionRetryPolicyAttributes) PerTryTimeout() terra.ListValue[PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutAttributes](rp.ref.Append("per_try_timeout"))
}

type PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutAttributes struct {
	ref terra.Reference
}

func (ptt PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return ptt.ref, nil
}

func (ptt PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutAttributes {
	return PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutAttributes{ref: ref}
}

func (ptt PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ptt.ref.InternalTokens()
}

func (ptt PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(ptt.ref.Append("nanos"))
}

func (ptt PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(ptt.ref.Append("seconds"))
}

type PathMatcherDefaultRouteActionTimeoutAttributes struct {
	ref terra.Reference
}

func (t PathMatcherDefaultRouteActionTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t PathMatcherDefaultRouteActionTimeoutAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionTimeoutAttributes {
	return PathMatcherDefaultRouteActionTimeoutAttributes{ref: ref}
}

func (t PathMatcherDefaultRouteActionTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t PathMatcherDefaultRouteActionTimeoutAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("nanos"))
}

func (t PathMatcherDefaultRouteActionTimeoutAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("seconds"))
}

type PathMatcherDefaultRouteActionUrlRewriteAttributes struct {
	ref terra.Reference
}

func (ur PathMatcherDefaultRouteActionUrlRewriteAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur PathMatcherDefaultRouteActionUrlRewriteAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionUrlRewriteAttributes {
	return PathMatcherDefaultRouteActionUrlRewriteAttributes{ref: ref}
}

func (ur PathMatcherDefaultRouteActionUrlRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur PathMatcherDefaultRouteActionUrlRewriteAttributes) HostRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_rewrite"))
}

func (ur PathMatcherDefaultRouteActionUrlRewriteAttributes) PathPrefixRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_prefix_rewrite"))
}

type PathMatcherDefaultRouteActionWeightedBackendServicesAttributes struct {
	ref terra.Reference
}

func (wbs PathMatcherDefaultRouteActionWeightedBackendServicesAttributes) InternalRef() (terra.Reference, error) {
	return wbs.ref, nil
}

func (wbs PathMatcherDefaultRouteActionWeightedBackendServicesAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionWeightedBackendServicesAttributes {
	return PathMatcherDefaultRouteActionWeightedBackendServicesAttributes{ref: ref}
}

func (wbs PathMatcherDefaultRouteActionWeightedBackendServicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wbs.ref.InternalTokens()
}

func (wbs PathMatcherDefaultRouteActionWeightedBackendServicesAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(wbs.ref.Append("backend_service"))
}

func (wbs PathMatcherDefaultRouteActionWeightedBackendServicesAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wbs.ref.Append("weight"))
}

func (wbs PathMatcherDefaultRouteActionWeightedBackendServicesAttributes) HeaderAction() terra.ListValue[PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionAttributes](wbs.ref.Append("header_action"))
}

type PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionAttributes struct {
	ref terra.Reference
}

func (ha PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionAttributes {
	return PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionAttributes{ref: ref}
}

func (ha PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionAttributes) RequestHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("request_headers_to_remove"))
}

func (ha PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionAttributes) ResponseHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("response_headers_to_remove"))
}

func (ha PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionAttributes) RequestHeadersToAdd() terra.ListValue[PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes](ha.ref.Append("request_headers_to_add"))
}

func (ha PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionAttributes) ResponseHeadersToAdd() terra.ListValue[PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes](ha.ref.Append("response_headers_to_add"))
}

type PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes {
	return PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes{ref: ref}
}

func (rhta PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes {
	return PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes{ref: ref}
}

func (rhta PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type PathMatcherDefaultUrlRedirectAttributes struct {
	ref terra.Reference
}

func (dur PathMatcherDefaultUrlRedirectAttributes) InternalRef() (terra.Reference, error) {
	return dur.ref, nil
}

func (dur PathMatcherDefaultUrlRedirectAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultUrlRedirectAttributes {
	return PathMatcherDefaultUrlRedirectAttributes{ref: ref}
}

func (dur PathMatcherDefaultUrlRedirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dur.ref.InternalTokens()
}

func (dur PathMatcherDefaultUrlRedirectAttributes) HostRedirect() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("host_redirect"))
}

func (dur PathMatcherDefaultUrlRedirectAttributes) HttpsRedirect() terra.BoolValue {
	return terra.ReferenceAsBool(dur.ref.Append("https_redirect"))
}

func (dur PathMatcherDefaultUrlRedirectAttributes) PathRedirect() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("path_redirect"))
}

func (dur PathMatcherDefaultUrlRedirectAttributes) PrefixRedirect() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("prefix_redirect"))
}

func (dur PathMatcherDefaultUrlRedirectAttributes) RedirectResponseCode() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("redirect_response_code"))
}

func (dur PathMatcherDefaultUrlRedirectAttributes) StripQuery() terra.BoolValue {
	return terra.ReferenceAsBool(dur.ref.Append("strip_query"))
}

type PathMatcherHeaderActionAttributes struct {
	ref terra.Reference
}

func (ha PathMatcherHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha PathMatcherHeaderActionAttributes) InternalWithRef(ref terra.Reference) PathMatcherHeaderActionAttributes {
	return PathMatcherHeaderActionAttributes{ref: ref}
}

func (ha PathMatcherHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha PathMatcherHeaderActionAttributes) RequestHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("request_headers_to_remove"))
}

func (ha PathMatcherHeaderActionAttributes) ResponseHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("response_headers_to_remove"))
}

func (ha PathMatcherHeaderActionAttributes) RequestHeadersToAdd() terra.ListValue[PathMatcherHeaderActionRequestHeadersToAddAttributes] {
	return terra.ReferenceAsList[PathMatcherHeaderActionRequestHeadersToAddAttributes](ha.ref.Append("request_headers_to_add"))
}

func (ha PathMatcherHeaderActionAttributes) ResponseHeadersToAdd() terra.ListValue[PathMatcherHeaderActionResponseHeadersToAddAttributes] {
	return terra.ReferenceAsList[PathMatcherHeaderActionResponseHeadersToAddAttributes](ha.ref.Append("response_headers_to_add"))
}

type PathMatcherHeaderActionRequestHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta PathMatcherHeaderActionRequestHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta PathMatcherHeaderActionRequestHeadersToAddAttributes) InternalWithRef(ref terra.Reference) PathMatcherHeaderActionRequestHeadersToAddAttributes {
	return PathMatcherHeaderActionRequestHeadersToAddAttributes{ref: ref}
}

func (rhta PathMatcherHeaderActionRequestHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta PathMatcherHeaderActionRequestHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta PathMatcherHeaderActionRequestHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta PathMatcherHeaderActionRequestHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type PathMatcherHeaderActionResponseHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta PathMatcherHeaderActionResponseHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta PathMatcherHeaderActionResponseHeadersToAddAttributes) InternalWithRef(ref terra.Reference) PathMatcherHeaderActionResponseHeadersToAddAttributes {
	return PathMatcherHeaderActionResponseHeadersToAddAttributes{ref: ref}
}

func (rhta PathMatcherHeaderActionResponseHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta PathMatcherHeaderActionResponseHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta PathMatcherHeaderActionResponseHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta PathMatcherHeaderActionResponseHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type PathRuleAttributes struct {
	ref terra.Reference
}

func (pr PathRuleAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr PathRuleAttributes) InternalWithRef(ref terra.Reference) PathRuleAttributes {
	return PathRuleAttributes{ref: ref}
}

func (pr PathRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr PathRuleAttributes) Paths() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pr.ref.Append("paths"))
}

func (pr PathRuleAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("service"))
}

func (pr PathRuleAttributes) RouteAction() terra.ListValue[PathRuleRouteActionAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionAttributes](pr.ref.Append("route_action"))
}

func (pr PathRuleAttributes) UrlRedirect() terra.ListValue[PathRuleUrlRedirectAttributes] {
	return terra.ReferenceAsList[PathRuleUrlRedirectAttributes](pr.ref.Append("url_redirect"))
}

type PathRuleRouteActionAttributes struct {
	ref terra.Reference
}

func (ra PathRuleRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra PathRuleRouteActionAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionAttributes {
	return PathRuleRouteActionAttributes{ref: ref}
}

func (ra PathRuleRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra PathRuleRouteActionAttributes) CorsPolicy() terra.ListValue[PathRuleRouteActionCorsPolicyAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionCorsPolicyAttributes](ra.ref.Append("cors_policy"))
}

func (ra PathRuleRouteActionAttributes) FaultInjectionPolicy() terra.ListValue[PathRuleRouteActionFaultInjectionPolicyAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionFaultInjectionPolicyAttributes](ra.ref.Append("fault_injection_policy"))
}

func (ra PathRuleRouteActionAttributes) RequestMirrorPolicy() terra.ListValue[PathRuleRouteActionRequestMirrorPolicyAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionRequestMirrorPolicyAttributes](ra.ref.Append("request_mirror_policy"))
}

func (ra PathRuleRouteActionAttributes) RetryPolicy() terra.ListValue[PathRuleRouteActionRetryPolicyAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionRetryPolicyAttributes](ra.ref.Append("retry_policy"))
}

func (ra PathRuleRouteActionAttributes) Timeout() terra.ListValue[PathRuleRouteActionTimeoutAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionTimeoutAttributes](ra.ref.Append("timeout"))
}

func (ra PathRuleRouteActionAttributes) UrlRewrite() terra.ListValue[PathRuleRouteActionUrlRewriteAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionUrlRewriteAttributes](ra.ref.Append("url_rewrite"))
}

func (ra PathRuleRouteActionAttributes) WeightedBackendServices() terra.ListValue[PathRuleRouteActionWeightedBackendServicesAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionWeightedBackendServicesAttributes](ra.ref.Append("weighted_backend_services"))
}

type PathRuleRouteActionCorsPolicyAttributes struct {
	ref terra.Reference
}

func (cp PathRuleRouteActionCorsPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp PathRuleRouteActionCorsPolicyAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionCorsPolicyAttributes {
	return PathRuleRouteActionCorsPolicyAttributes{ref: ref}
}

func (cp PathRuleRouteActionCorsPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp PathRuleRouteActionCorsPolicyAttributes) AllowCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("allow_credentials"))
}

func (cp PathRuleRouteActionCorsPolicyAttributes) AllowHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_headers"))
}

func (cp PathRuleRouteActionCorsPolicyAttributes) AllowMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_methods"))
}

func (cp PathRuleRouteActionCorsPolicyAttributes) AllowOriginRegexes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origin_regexes"))
}

func (cp PathRuleRouteActionCorsPolicyAttributes) AllowOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origins"))
}

func (cp PathRuleRouteActionCorsPolicyAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("disabled"))
}

func (cp PathRuleRouteActionCorsPolicyAttributes) ExposeHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("expose_headers"))
}

func (cp PathRuleRouteActionCorsPolicyAttributes) MaxAge() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("max_age"))
}

type PathRuleRouteActionFaultInjectionPolicyAttributes struct {
	ref terra.Reference
}

func (fip PathRuleRouteActionFaultInjectionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return fip.ref, nil
}

func (fip PathRuleRouteActionFaultInjectionPolicyAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionFaultInjectionPolicyAttributes {
	return PathRuleRouteActionFaultInjectionPolicyAttributes{ref: ref}
}

func (fip PathRuleRouteActionFaultInjectionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fip.ref.InternalTokens()
}

func (fip PathRuleRouteActionFaultInjectionPolicyAttributes) Abort() terra.ListValue[PathRuleRouteActionFaultInjectionPolicyAbortAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionFaultInjectionPolicyAbortAttributes](fip.ref.Append("abort"))
}

func (fip PathRuleRouteActionFaultInjectionPolicyAttributes) Delay() terra.ListValue[PathRuleRouteActionFaultInjectionPolicyDelayAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionFaultInjectionPolicyDelayAttributes](fip.ref.Append("delay"))
}

type PathRuleRouteActionFaultInjectionPolicyAbortAttributes struct {
	ref terra.Reference
}

func (a PathRuleRouteActionFaultInjectionPolicyAbortAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a PathRuleRouteActionFaultInjectionPolicyAbortAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionFaultInjectionPolicyAbortAttributes {
	return PathRuleRouteActionFaultInjectionPolicyAbortAttributes{ref: ref}
}

func (a PathRuleRouteActionFaultInjectionPolicyAbortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a PathRuleRouteActionFaultInjectionPolicyAbortAttributes) HttpStatus() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("http_status"))
}

func (a PathRuleRouteActionFaultInjectionPolicyAbortAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("percentage"))
}

type PathRuleRouteActionFaultInjectionPolicyDelayAttributes struct {
	ref terra.Reference
}

func (d PathRuleRouteActionFaultInjectionPolicyDelayAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d PathRuleRouteActionFaultInjectionPolicyDelayAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionFaultInjectionPolicyDelayAttributes {
	return PathRuleRouteActionFaultInjectionPolicyDelayAttributes{ref: ref}
}

func (d PathRuleRouteActionFaultInjectionPolicyDelayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d PathRuleRouteActionFaultInjectionPolicyDelayAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("percentage"))
}

func (d PathRuleRouteActionFaultInjectionPolicyDelayAttributes) FixedDelay() terra.ListValue[PathRuleRouteActionFaultInjectionPolicyDelayFixedDelayAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionFaultInjectionPolicyDelayFixedDelayAttributes](d.ref.Append("fixed_delay"))
}

type PathRuleRouteActionFaultInjectionPolicyDelayFixedDelayAttributes struct {
	ref terra.Reference
}

func (fd PathRuleRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalRef() (terra.Reference, error) {
	return fd.ref, nil
}

func (fd PathRuleRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionFaultInjectionPolicyDelayFixedDelayAttributes {
	return PathRuleRouteActionFaultInjectionPolicyDelayFixedDelayAttributes{ref: ref}
}

func (fd PathRuleRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fd.ref.InternalTokens()
}

func (fd PathRuleRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(fd.ref.Append("nanos"))
}

func (fd PathRuleRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(fd.ref.Append("seconds"))
}

type PathRuleRouteActionRequestMirrorPolicyAttributes struct {
	ref terra.Reference
}

func (rmp PathRuleRouteActionRequestMirrorPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rmp.ref, nil
}

func (rmp PathRuleRouteActionRequestMirrorPolicyAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionRequestMirrorPolicyAttributes {
	return PathRuleRouteActionRequestMirrorPolicyAttributes{ref: ref}
}

func (rmp PathRuleRouteActionRequestMirrorPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rmp.ref.InternalTokens()
}

func (rmp PathRuleRouteActionRequestMirrorPolicyAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(rmp.ref.Append("backend_service"))
}

type PathRuleRouteActionRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp PathRuleRouteActionRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp PathRuleRouteActionRetryPolicyAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionRetryPolicyAttributes {
	return PathRuleRouteActionRetryPolicyAttributes{ref: ref}
}

func (rp PathRuleRouteActionRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp PathRuleRouteActionRetryPolicyAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("num_retries"))
}

func (rp PathRuleRouteActionRetryPolicyAttributes) RetryConditions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rp.ref.Append("retry_conditions"))
}

func (rp PathRuleRouteActionRetryPolicyAttributes) PerTryTimeout() terra.ListValue[PathRuleRouteActionRetryPolicyPerTryTimeoutAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionRetryPolicyPerTryTimeoutAttributes](rp.ref.Append("per_try_timeout"))
}

type PathRuleRouteActionRetryPolicyPerTryTimeoutAttributes struct {
	ref terra.Reference
}

func (ptt PathRuleRouteActionRetryPolicyPerTryTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return ptt.ref, nil
}

func (ptt PathRuleRouteActionRetryPolicyPerTryTimeoutAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionRetryPolicyPerTryTimeoutAttributes {
	return PathRuleRouteActionRetryPolicyPerTryTimeoutAttributes{ref: ref}
}

func (ptt PathRuleRouteActionRetryPolicyPerTryTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ptt.ref.InternalTokens()
}

func (ptt PathRuleRouteActionRetryPolicyPerTryTimeoutAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(ptt.ref.Append("nanos"))
}

func (ptt PathRuleRouteActionRetryPolicyPerTryTimeoutAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(ptt.ref.Append("seconds"))
}

type PathRuleRouteActionTimeoutAttributes struct {
	ref terra.Reference
}

func (t PathRuleRouteActionTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t PathRuleRouteActionTimeoutAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionTimeoutAttributes {
	return PathRuleRouteActionTimeoutAttributes{ref: ref}
}

func (t PathRuleRouteActionTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t PathRuleRouteActionTimeoutAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("nanos"))
}

func (t PathRuleRouteActionTimeoutAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("seconds"))
}

type PathRuleRouteActionUrlRewriteAttributes struct {
	ref terra.Reference
}

func (ur PathRuleRouteActionUrlRewriteAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur PathRuleRouteActionUrlRewriteAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionUrlRewriteAttributes {
	return PathRuleRouteActionUrlRewriteAttributes{ref: ref}
}

func (ur PathRuleRouteActionUrlRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur PathRuleRouteActionUrlRewriteAttributes) HostRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_rewrite"))
}

func (ur PathRuleRouteActionUrlRewriteAttributes) PathPrefixRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_prefix_rewrite"))
}

type PathRuleRouteActionWeightedBackendServicesAttributes struct {
	ref terra.Reference
}

func (wbs PathRuleRouteActionWeightedBackendServicesAttributes) InternalRef() (terra.Reference, error) {
	return wbs.ref, nil
}

func (wbs PathRuleRouteActionWeightedBackendServicesAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionWeightedBackendServicesAttributes {
	return PathRuleRouteActionWeightedBackendServicesAttributes{ref: ref}
}

func (wbs PathRuleRouteActionWeightedBackendServicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wbs.ref.InternalTokens()
}

func (wbs PathRuleRouteActionWeightedBackendServicesAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(wbs.ref.Append("backend_service"))
}

func (wbs PathRuleRouteActionWeightedBackendServicesAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wbs.ref.Append("weight"))
}

func (wbs PathRuleRouteActionWeightedBackendServicesAttributes) HeaderAction() terra.ListValue[PathRuleRouteActionWeightedBackendServicesHeaderActionAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionWeightedBackendServicesHeaderActionAttributes](wbs.ref.Append("header_action"))
}

type PathRuleRouteActionWeightedBackendServicesHeaderActionAttributes struct {
	ref terra.Reference
}

func (ha PathRuleRouteActionWeightedBackendServicesHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha PathRuleRouteActionWeightedBackendServicesHeaderActionAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionWeightedBackendServicesHeaderActionAttributes {
	return PathRuleRouteActionWeightedBackendServicesHeaderActionAttributes{ref: ref}
}

func (ha PathRuleRouteActionWeightedBackendServicesHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha PathRuleRouteActionWeightedBackendServicesHeaderActionAttributes) RequestHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("request_headers_to_remove"))
}

func (ha PathRuleRouteActionWeightedBackendServicesHeaderActionAttributes) ResponseHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("response_headers_to_remove"))
}

func (ha PathRuleRouteActionWeightedBackendServicesHeaderActionAttributes) RequestHeadersToAdd() terra.ListValue[PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes](ha.ref.Append("request_headers_to_add"))
}

func (ha PathRuleRouteActionWeightedBackendServicesHeaderActionAttributes) ResponseHeadersToAdd() terra.ListValue[PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes] {
	return terra.ReferenceAsList[PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes](ha.ref.Append("response_headers_to_add"))
}

type PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes {
	return PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes{ref: ref}
}

func (rhta PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalWithRef(ref terra.Reference) PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes {
	return PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes{ref: ref}
}

func (rhta PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type PathRuleUrlRedirectAttributes struct {
	ref terra.Reference
}

func (ur PathRuleUrlRedirectAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur PathRuleUrlRedirectAttributes) InternalWithRef(ref terra.Reference) PathRuleUrlRedirectAttributes {
	return PathRuleUrlRedirectAttributes{ref: ref}
}

func (ur PathRuleUrlRedirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur PathRuleUrlRedirectAttributes) HostRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_redirect"))
}

func (ur PathRuleUrlRedirectAttributes) HttpsRedirect() terra.BoolValue {
	return terra.ReferenceAsBool(ur.ref.Append("https_redirect"))
}

func (ur PathRuleUrlRedirectAttributes) PathRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_redirect"))
}

func (ur PathRuleUrlRedirectAttributes) PrefixRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("prefix_redirect"))
}

func (ur PathRuleUrlRedirectAttributes) RedirectResponseCode() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("redirect_response_code"))
}

func (ur PathRuleUrlRedirectAttributes) StripQuery() terra.BoolValue {
	return terra.ReferenceAsBool(ur.ref.Append("strip_query"))
}

type RouteRulesAttributes struct {
	ref terra.Reference
}

func (rr RouteRulesAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr RouteRulesAttributes) InternalWithRef(ref terra.Reference) RouteRulesAttributes {
	return RouteRulesAttributes{ref: ref}
}

func (rr RouteRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr RouteRulesAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("priority"))
}

func (rr RouteRulesAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("service"))
}

func (rr RouteRulesAttributes) HeaderAction() terra.ListValue[RouteRulesHeaderActionAttributes] {
	return terra.ReferenceAsList[RouteRulesHeaderActionAttributes](rr.ref.Append("header_action"))
}

func (rr RouteRulesAttributes) MatchRules() terra.ListValue[MatchRulesAttributes] {
	return terra.ReferenceAsList[MatchRulesAttributes](rr.ref.Append("match_rules"))
}

func (rr RouteRulesAttributes) RouteAction() terra.ListValue[RouteRulesRouteActionAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionAttributes](rr.ref.Append("route_action"))
}

func (rr RouteRulesAttributes) UrlRedirect() terra.ListValue[RouteRulesUrlRedirectAttributes] {
	return terra.ReferenceAsList[RouteRulesUrlRedirectAttributes](rr.ref.Append("url_redirect"))
}

type RouteRulesHeaderActionAttributes struct {
	ref terra.Reference
}

func (ha RouteRulesHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha RouteRulesHeaderActionAttributes) InternalWithRef(ref terra.Reference) RouteRulesHeaderActionAttributes {
	return RouteRulesHeaderActionAttributes{ref: ref}
}

func (ha RouteRulesHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha RouteRulesHeaderActionAttributes) RequestHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("request_headers_to_remove"))
}

func (ha RouteRulesHeaderActionAttributes) ResponseHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("response_headers_to_remove"))
}

func (ha RouteRulesHeaderActionAttributes) RequestHeadersToAdd() terra.ListValue[RouteRulesHeaderActionRequestHeadersToAddAttributes] {
	return terra.ReferenceAsList[RouteRulesHeaderActionRequestHeadersToAddAttributes](ha.ref.Append("request_headers_to_add"))
}

func (ha RouteRulesHeaderActionAttributes) ResponseHeadersToAdd() terra.ListValue[RouteRulesHeaderActionResponseHeadersToAddAttributes] {
	return terra.ReferenceAsList[RouteRulesHeaderActionResponseHeadersToAddAttributes](ha.ref.Append("response_headers_to_add"))
}

type RouteRulesHeaderActionRequestHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta RouteRulesHeaderActionRequestHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta RouteRulesHeaderActionRequestHeadersToAddAttributes) InternalWithRef(ref terra.Reference) RouteRulesHeaderActionRequestHeadersToAddAttributes {
	return RouteRulesHeaderActionRequestHeadersToAddAttributes{ref: ref}
}

func (rhta RouteRulesHeaderActionRequestHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta RouteRulesHeaderActionRequestHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta RouteRulesHeaderActionRequestHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta RouteRulesHeaderActionRequestHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type RouteRulesHeaderActionResponseHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta RouteRulesHeaderActionResponseHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta RouteRulesHeaderActionResponseHeadersToAddAttributes) InternalWithRef(ref terra.Reference) RouteRulesHeaderActionResponseHeadersToAddAttributes {
	return RouteRulesHeaderActionResponseHeadersToAddAttributes{ref: ref}
}

func (rhta RouteRulesHeaderActionResponseHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta RouteRulesHeaderActionResponseHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta RouteRulesHeaderActionResponseHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta RouteRulesHeaderActionResponseHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type MatchRulesAttributes struct {
	ref terra.Reference
}

func (mr MatchRulesAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr MatchRulesAttributes) InternalWithRef(ref terra.Reference) MatchRulesAttributes {
	return MatchRulesAttributes{ref: ref}
}

func (mr MatchRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr MatchRulesAttributes) FullPathMatch() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("full_path_match"))
}

func (mr MatchRulesAttributes) IgnoreCase() terra.BoolValue {
	return terra.ReferenceAsBool(mr.ref.Append("ignore_case"))
}

func (mr MatchRulesAttributes) PathTemplateMatch() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("path_template_match"))
}

func (mr MatchRulesAttributes) PrefixMatch() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("prefix_match"))
}

func (mr MatchRulesAttributes) RegexMatch() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("regex_match"))
}

func (mr MatchRulesAttributes) HeaderMatches() terra.ListValue[HeaderMatchesAttributes] {
	return terra.ReferenceAsList[HeaderMatchesAttributes](mr.ref.Append("header_matches"))
}

func (mr MatchRulesAttributes) MetadataFilters() terra.ListValue[MetadataFiltersAttributes] {
	return terra.ReferenceAsList[MetadataFiltersAttributes](mr.ref.Append("metadata_filters"))
}

func (mr MatchRulesAttributes) QueryParameterMatches() terra.ListValue[QueryParameterMatchesAttributes] {
	return terra.ReferenceAsList[QueryParameterMatchesAttributes](mr.ref.Append("query_parameter_matches"))
}

type HeaderMatchesAttributes struct {
	ref terra.Reference
}

func (hm HeaderMatchesAttributes) InternalRef() (terra.Reference, error) {
	return hm.ref, nil
}

func (hm HeaderMatchesAttributes) InternalWithRef(ref terra.Reference) HeaderMatchesAttributes {
	return HeaderMatchesAttributes{ref: ref}
}

func (hm HeaderMatchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hm.ref.InternalTokens()
}

func (hm HeaderMatchesAttributes) ExactMatch() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("exact_match"))
}

func (hm HeaderMatchesAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("header_name"))
}

func (hm HeaderMatchesAttributes) InvertMatch() terra.BoolValue {
	return terra.ReferenceAsBool(hm.ref.Append("invert_match"))
}

func (hm HeaderMatchesAttributes) PrefixMatch() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("prefix_match"))
}

func (hm HeaderMatchesAttributes) PresentMatch() terra.BoolValue {
	return terra.ReferenceAsBool(hm.ref.Append("present_match"))
}

func (hm HeaderMatchesAttributes) RegexMatch() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("regex_match"))
}

func (hm HeaderMatchesAttributes) SuffixMatch() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("suffix_match"))
}

func (hm HeaderMatchesAttributes) RangeMatch() terra.ListValue[RangeMatchAttributes] {
	return terra.ReferenceAsList[RangeMatchAttributes](hm.ref.Append("range_match"))
}

type RangeMatchAttributes struct {
	ref terra.Reference
}

func (rm RangeMatchAttributes) InternalRef() (terra.Reference, error) {
	return rm.ref, nil
}

func (rm RangeMatchAttributes) InternalWithRef(ref terra.Reference) RangeMatchAttributes {
	return RangeMatchAttributes{ref: ref}
}

func (rm RangeMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rm.ref.InternalTokens()
}

func (rm RangeMatchAttributes) RangeEnd() terra.NumberValue {
	return terra.ReferenceAsNumber(rm.ref.Append("range_end"))
}

func (rm RangeMatchAttributes) RangeStart() terra.NumberValue {
	return terra.ReferenceAsNumber(rm.ref.Append("range_start"))
}

type MetadataFiltersAttributes struct {
	ref terra.Reference
}

func (mf MetadataFiltersAttributes) InternalRef() (terra.Reference, error) {
	return mf.ref, nil
}

func (mf MetadataFiltersAttributes) InternalWithRef(ref terra.Reference) MetadataFiltersAttributes {
	return MetadataFiltersAttributes{ref: ref}
}

func (mf MetadataFiltersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mf.ref.InternalTokens()
}

func (mf MetadataFiltersAttributes) FilterMatchCriteria() terra.StringValue {
	return terra.ReferenceAsString(mf.ref.Append("filter_match_criteria"))
}

func (mf MetadataFiltersAttributes) FilterLabels() terra.ListValue[FilterLabelsAttributes] {
	return terra.ReferenceAsList[FilterLabelsAttributes](mf.ref.Append("filter_labels"))
}

type FilterLabelsAttributes struct {
	ref terra.Reference
}

func (fl FilterLabelsAttributes) InternalRef() (terra.Reference, error) {
	return fl.ref, nil
}

func (fl FilterLabelsAttributes) InternalWithRef(ref terra.Reference) FilterLabelsAttributes {
	return FilterLabelsAttributes{ref: ref}
}

func (fl FilterLabelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fl.ref.InternalTokens()
}

func (fl FilterLabelsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fl.ref.Append("name"))
}

func (fl FilterLabelsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(fl.ref.Append("value"))
}

type QueryParameterMatchesAttributes struct {
	ref terra.Reference
}

func (qpm QueryParameterMatchesAttributes) InternalRef() (terra.Reference, error) {
	return qpm.ref, nil
}

func (qpm QueryParameterMatchesAttributes) InternalWithRef(ref terra.Reference) QueryParameterMatchesAttributes {
	return QueryParameterMatchesAttributes{ref: ref}
}

func (qpm QueryParameterMatchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qpm.ref.InternalTokens()
}

func (qpm QueryParameterMatchesAttributes) ExactMatch() terra.StringValue {
	return terra.ReferenceAsString(qpm.ref.Append("exact_match"))
}

func (qpm QueryParameterMatchesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qpm.ref.Append("name"))
}

func (qpm QueryParameterMatchesAttributes) PresentMatch() terra.BoolValue {
	return terra.ReferenceAsBool(qpm.ref.Append("present_match"))
}

func (qpm QueryParameterMatchesAttributes) RegexMatch() terra.StringValue {
	return terra.ReferenceAsString(qpm.ref.Append("regex_match"))
}

type RouteRulesRouteActionAttributes struct {
	ref terra.Reference
}

func (ra RouteRulesRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra RouteRulesRouteActionAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionAttributes {
	return RouteRulesRouteActionAttributes{ref: ref}
}

func (ra RouteRulesRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra RouteRulesRouteActionAttributes) CorsPolicy() terra.ListValue[RouteRulesRouteActionCorsPolicyAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionCorsPolicyAttributes](ra.ref.Append("cors_policy"))
}

func (ra RouteRulesRouteActionAttributes) FaultInjectionPolicy() terra.ListValue[RouteRulesRouteActionFaultInjectionPolicyAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionFaultInjectionPolicyAttributes](ra.ref.Append("fault_injection_policy"))
}

func (ra RouteRulesRouteActionAttributes) RequestMirrorPolicy() terra.ListValue[RouteRulesRouteActionRequestMirrorPolicyAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionRequestMirrorPolicyAttributes](ra.ref.Append("request_mirror_policy"))
}

func (ra RouteRulesRouteActionAttributes) RetryPolicy() terra.ListValue[RouteRulesRouteActionRetryPolicyAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionRetryPolicyAttributes](ra.ref.Append("retry_policy"))
}

func (ra RouteRulesRouteActionAttributes) Timeout() terra.ListValue[RouteRulesRouteActionTimeoutAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionTimeoutAttributes](ra.ref.Append("timeout"))
}

func (ra RouteRulesRouteActionAttributes) UrlRewrite() terra.ListValue[RouteRulesRouteActionUrlRewriteAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionUrlRewriteAttributes](ra.ref.Append("url_rewrite"))
}

func (ra RouteRulesRouteActionAttributes) WeightedBackendServices() terra.ListValue[RouteRulesRouteActionWeightedBackendServicesAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionWeightedBackendServicesAttributes](ra.ref.Append("weighted_backend_services"))
}

type RouteRulesRouteActionCorsPolicyAttributes struct {
	ref terra.Reference
}

func (cp RouteRulesRouteActionCorsPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp RouteRulesRouteActionCorsPolicyAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionCorsPolicyAttributes {
	return RouteRulesRouteActionCorsPolicyAttributes{ref: ref}
}

func (cp RouteRulesRouteActionCorsPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp RouteRulesRouteActionCorsPolicyAttributes) AllowCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("allow_credentials"))
}

func (cp RouteRulesRouteActionCorsPolicyAttributes) AllowHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_headers"))
}

func (cp RouteRulesRouteActionCorsPolicyAttributes) AllowMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_methods"))
}

func (cp RouteRulesRouteActionCorsPolicyAttributes) AllowOriginRegexes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origin_regexes"))
}

func (cp RouteRulesRouteActionCorsPolicyAttributes) AllowOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origins"))
}

func (cp RouteRulesRouteActionCorsPolicyAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("disabled"))
}

func (cp RouteRulesRouteActionCorsPolicyAttributes) ExposeHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("expose_headers"))
}

func (cp RouteRulesRouteActionCorsPolicyAttributes) MaxAge() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("max_age"))
}

type RouteRulesRouteActionFaultInjectionPolicyAttributes struct {
	ref terra.Reference
}

func (fip RouteRulesRouteActionFaultInjectionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return fip.ref, nil
}

func (fip RouteRulesRouteActionFaultInjectionPolicyAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionFaultInjectionPolicyAttributes {
	return RouteRulesRouteActionFaultInjectionPolicyAttributes{ref: ref}
}

func (fip RouteRulesRouteActionFaultInjectionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fip.ref.InternalTokens()
}

func (fip RouteRulesRouteActionFaultInjectionPolicyAttributes) Abort() terra.ListValue[RouteRulesRouteActionFaultInjectionPolicyAbortAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionFaultInjectionPolicyAbortAttributes](fip.ref.Append("abort"))
}

func (fip RouteRulesRouteActionFaultInjectionPolicyAttributes) Delay() terra.ListValue[RouteRulesRouteActionFaultInjectionPolicyDelayAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionFaultInjectionPolicyDelayAttributes](fip.ref.Append("delay"))
}

type RouteRulesRouteActionFaultInjectionPolicyAbortAttributes struct {
	ref terra.Reference
}

func (a RouteRulesRouteActionFaultInjectionPolicyAbortAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a RouteRulesRouteActionFaultInjectionPolicyAbortAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionFaultInjectionPolicyAbortAttributes {
	return RouteRulesRouteActionFaultInjectionPolicyAbortAttributes{ref: ref}
}

func (a RouteRulesRouteActionFaultInjectionPolicyAbortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a RouteRulesRouteActionFaultInjectionPolicyAbortAttributes) HttpStatus() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("http_status"))
}

func (a RouteRulesRouteActionFaultInjectionPolicyAbortAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("percentage"))
}

type RouteRulesRouteActionFaultInjectionPolicyDelayAttributes struct {
	ref terra.Reference
}

func (d RouteRulesRouteActionFaultInjectionPolicyDelayAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d RouteRulesRouteActionFaultInjectionPolicyDelayAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionFaultInjectionPolicyDelayAttributes {
	return RouteRulesRouteActionFaultInjectionPolicyDelayAttributes{ref: ref}
}

func (d RouteRulesRouteActionFaultInjectionPolicyDelayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d RouteRulesRouteActionFaultInjectionPolicyDelayAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("percentage"))
}

func (d RouteRulesRouteActionFaultInjectionPolicyDelayAttributes) FixedDelay() terra.ListValue[RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayAttributes](d.ref.Append("fixed_delay"))
}

type RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayAttributes struct {
	ref terra.Reference
}

func (fd RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalRef() (terra.Reference, error) {
	return fd.ref, nil
}

func (fd RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayAttributes {
	return RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayAttributes{ref: ref}
}

func (fd RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fd.ref.InternalTokens()
}

func (fd RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(fd.ref.Append("nanos"))
}

func (fd RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(fd.ref.Append("seconds"))
}

type RouteRulesRouteActionRequestMirrorPolicyAttributes struct {
	ref terra.Reference
}

func (rmp RouteRulesRouteActionRequestMirrorPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rmp.ref, nil
}

func (rmp RouteRulesRouteActionRequestMirrorPolicyAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionRequestMirrorPolicyAttributes {
	return RouteRulesRouteActionRequestMirrorPolicyAttributes{ref: ref}
}

func (rmp RouteRulesRouteActionRequestMirrorPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rmp.ref.InternalTokens()
}

func (rmp RouteRulesRouteActionRequestMirrorPolicyAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(rmp.ref.Append("backend_service"))
}

type RouteRulesRouteActionRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp RouteRulesRouteActionRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RouteRulesRouteActionRetryPolicyAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionRetryPolicyAttributes {
	return RouteRulesRouteActionRetryPolicyAttributes{ref: ref}
}

func (rp RouteRulesRouteActionRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RouteRulesRouteActionRetryPolicyAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("num_retries"))
}

func (rp RouteRulesRouteActionRetryPolicyAttributes) RetryConditions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rp.ref.Append("retry_conditions"))
}

func (rp RouteRulesRouteActionRetryPolicyAttributes) PerTryTimeout() terra.ListValue[RouteRulesRouteActionRetryPolicyPerTryTimeoutAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionRetryPolicyPerTryTimeoutAttributes](rp.ref.Append("per_try_timeout"))
}

type RouteRulesRouteActionRetryPolicyPerTryTimeoutAttributes struct {
	ref terra.Reference
}

func (ptt RouteRulesRouteActionRetryPolicyPerTryTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return ptt.ref, nil
}

func (ptt RouteRulesRouteActionRetryPolicyPerTryTimeoutAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionRetryPolicyPerTryTimeoutAttributes {
	return RouteRulesRouteActionRetryPolicyPerTryTimeoutAttributes{ref: ref}
}

func (ptt RouteRulesRouteActionRetryPolicyPerTryTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ptt.ref.InternalTokens()
}

func (ptt RouteRulesRouteActionRetryPolicyPerTryTimeoutAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(ptt.ref.Append("nanos"))
}

func (ptt RouteRulesRouteActionRetryPolicyPerTryTimeoutAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(ptt.ref.Append("seconds"))
}

type RouteRulesRouteActionTimeoutAttributes struct {
	ref terra.Reference
}

func (t RouteRulesRouteActionTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t RouteRulesRouteActionTimeoutAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionTimeoutAttributes {
	return RouteRulesRouteActionTimeoutAttributes{ref: ref}
}

func (t RouteRulesRouteActionTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t RouteRulesRouteActionTimeoutAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("nanos"))
}

func (t RouteRulesRouteActionTimeoutAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("seconds"))
}

type RouteRulesRouteActionUrlRewriteAttributes struct {
	ref terra.Reference
}

func (ur RouteRulesRouteActionUrlRewriteAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur RouteRulesRouteActionUrlRewriteAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionUrlRewriteAttributes {
	return RouteRulesRouteActionUrlRewriteAttributes{ref: ref}
}

func (ur RouteRulesRouteActionUrlRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur RouteRulesRouteActionUrlRewriteAttributes) HostRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_rewrite"))
}

func (ur RouteRulesRouteActionUrlRewriteAttributes) PathPrefixRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_prefix_rewrite"))
}

func (ur RouteRulesRouteActionUrlRewriteAttributes) PathTemplateRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_template_rewrite"))
}

type RouteRulesRouteActionWeightedBackendServicesAttributes struct {
	ref terra.Reference
}

func (wbs RouteRulesRouteActionWeightedBackendServicesAttributes) InternalRef() (terra.Reference, error) {
	return wbs.ref, nil
}

func (wbs RouteRulesRouteActionWeightedBackendServicesAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionWeightedBackendServicesAttributes {
	return RouteRulesRouteActionWeightedBackendServicesAttributes{ref: ref}
}

func (wbs RouteRulesRouteActionWeightedBackendServicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wbs.ref.InternalTokens()
}

func (wbs RouteRulesRouteActionWeightedBackendServicesAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(wbs.ref.Append("backend_service"))
}

func (wbs RouteRulesRouteActionWeightedBackendServicesAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wbs.ref.Append("weight"))
}

func (wbs RouteRulesRouteActionWeightedBackendServicesAttributes) HeaderAction() terra.ListValue[RouteRulesRouteActionWeightedBackendServicesHeaderActionAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionWeightedBackendServicesHeaderActionAttributes](wbs.ref.Append("header_action"))
}

type RouteRulesRouteActionWeightedBackendServicesHeaderActionAttributes struct {
	ref terra.Reference
}

func (ha RouteRulesRouteActionWeightedBackendServicesHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha RouteRulesRouteActionWeightedBackendServicesHeaderActionAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionWeightedBackendServicesHeaderActionAttributes {
	return RouteRulesRouteActionWeightedBackendServicesHeaderActionAttributes{ref: ref}
}

func (ha RouteRulesRouteActionWeightedBackendServicesHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha RouteRulesRouteActionWeightedBackendServicesHeaderActionAttributes) RequestHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("request_headers_to_remove"))
}

func (ha RouteRulesRouteActionWeightedBackendServicesHeaderActionAttributes) ResponseHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("response_headers_to_remove"))
}

func (ha RouteRulesRouteActionWeightedBackendServicesHeaderActionAttributes) RequestHeadersToAdd() terra.ListValue[RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes](ha.ref.Append("request_headers_to_add"))
}

func (ha RouteRulesRouteActionWeightedBackendServicesHeaderActionAttributes) ResponseHeadersToAdd() terra.ListValue[RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes] {
	return terra.ReferenceAsList[RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes](ha.ref.Append("response_headers_to_add"))
}

type RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes {
	return RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes{ref: ref}
}

func (rhta RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalWithRef(ref terra.Reference) RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes {
	return RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes{ref: ref}
}

func (rhta RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type RouteRulesUrlRedirectAttributes struct {
	ref terra.Reference
}

func (ur RouteRulesUrlRedirectAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur RouteRulesUrlRedirectAttributes) InternalWithRef(ref terra.Reference) RouteRulesUrlRedirectAttributes {
	return RouteRulesUrlRedirectAttributes{ref: ref}
}

func (ur RouteRulesUrlRedirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur RouteRulesUrlRedirectAttributes) HostRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_redirect"))
}

func (ur RouteRulesUrlRedirectAttributes) HttpsRedirect() terra.BoolValue {
	return terra.ReferenceAsBool(ur.ref.Append("https_redirect"))
}

func (ur RouteRulesUrlRedirectAttributes) PathRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_redirect"))
}

func (ur RouteRulesUrlRedirectAttributes) PrefixRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("prefix_redirect"))
}

func (ur RouteRulesUrlRedirectAttributes) RedirectResponseCode() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("redirect_response_code"))
}

func (ur RouteRulesUrlRedirectAttributes) StripQuery() terra.BoolValue {
	return terra.ReferenceAsBool(ur.ref.Append("strip_query"))
}

type TestAttributes struct {
	ref terra.Reference
}

func (t TestAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TestAttributes) InternalWithRef(ref terra.Reference) TestAttributes {
	return TestAttributes{ref: ref}
}

func (t TestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TestAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("description"))
}

func (t TestAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("host"))
}

func (t TestAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("path"))
}

func (t TestAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("service"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DefaultRouteActionState struct {
	CorsPolicy              []DefaultRouteActionCorsPolicyState              `json:"cors_policy"`
	FaultInjectionPolicy    []DefaultRouteActionFaultInjectionPolicyState    `json:"fault_injection_policy"`
	RequestMirrorPolicy     []DefaultRouteActionRequestMirrorPolicyState     `json:"request_mirror_policy"`
	RetryPolicy             []DefaultRouteActionRetryPolicyState             `json:"retry_policy"`
	Timeout                 []DefaultRouteActionTimeoutState                 `json:"timeout"`
	UrlRewrite              []DefaultRouteActionUrlRewriteState              `json:"url_rewrite"`
	WeightedBackendServices []DefaultRouteActionWeightedBackendServicesState `json:"weighted_backend_services"`
}

type DefaultRouteActionCorsPolicyState struct {
	AllowCredentials   bool     `json:"allow_credentials"`
	AllowHeaders       []string `json:"allow_headers"`
	AllowMethods       []string `json:"allow_methods"`
	AllowOriginRegexes []string `json:"allow_origin_regexes"`
	AllowOrigins       []string `json:"allow_origins"`
	Disabled           bool     `json:"disabled"`
	ExposeHeaders      []string `json:"expose_headers"`
	MaxAge             float64  `json:"max_age"`
}

type DefaultRouteActionFaultInjectionPolicyState struct {
	Abort []DefaultRouteActionFaultInjectionPolicyAbortState `json:"abort"`
	Delay []DefaultRouteActionFaultInjectionPolicyDelayState `json:"delay"`
}

type DefaultRouteActionFaultInjectionPolicyAbortState struct {
	HttpStatus float64 `json:"http_status"`
	Percentage float64 `json:"percentage"`
}

type DefaultRouteActionFaultInjectionPolicyDelayState struct {
	Percentage float64                                                      `json:"percentage"`
	FixedDelay []DefaultRouteActionFaultInjectionPolicyDelayFixedDelayState `json:"fixed_delay"`
}

type DefaultRouteActionFaultInjectionPolicyDelayFixedDelayState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type DefaultRouteActionRequestMirrorPolicyState struct {
	BackendService string `json:"backend_service"`
}

type DefaultRouteActionRetryPolicyState struct {
	NumRetries      float64                                           `json:"num_retries"`
	RetryConditions []string                                          `json:"retry_conditions"`
	PerTryTimeout   []DefaultRouteActionRetryPolicyPerTryTimeoutState `json:"per_try_timeout"`
}

type DefaultRouteActionRetryPolicyPerTryTimeoutState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type DefaultRouteActionTimeoutState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type DefaultRouteActionUrlRewriteState struct {
	HostRewrite       string `json:"host_rewrite"`
	PathPrefixRewrite string `json:"path_prefix_rewrite"`
}

type DefaultRouteActionWeightedBackendServicesState struct {
	BackendService string                                                       `json:"backend_service"`
	Weight         float64                                                      `json:"weight"`
	HeaderAction   []DefaultRouteActionWeightedBackendServicesHeaderActionState `json:"header_action"`
}

type DefaultRouteActionWeightedBackendServicesHeaderActionState struct {
	RequestHeadersToRemove  []string                                                                         `json:"request_headers_to_remove"`
	ResponseHeadersToRemove []string                                                                         `json:"response_headers_to_remove"`
	RequestHeadersToAdd     []DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddState  `json:"request_headers_to_add"`
	ResponseHeadersToAdd    []DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddState `json:"response_headers_to_add"`
}

type DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type DefaultUrlRedirectState struct {
	HostRedirect         string `json:"host_redirect"`
	HttpsRedirect        bool   `json:"https_redirect"`
	PathRedirect         string `json:"path_redirect"`
	PrefixRedirect       string `json:"prefix_redirect"`
	RedirectResponseCode string `json:"redirect_response_code"`
	StripQuery           bool   `json:"strip_query"`
}

type HeaderActionState struct {
	RequestHeadersToRemove  []string                                `json:"request_headers_to_remove"`
	ResponseHeadersToRemove []string                                `json:"response_headers_to_remove"`
	RequestHeadersToAdd     []HeaderActionRequestHeadersToAddState  `json:"request_headers_to_add"`
	ResponseHeadersToAdd    []HeaderActionResponseHeadersToAddState `json:"response_headers_to_add"`
}

type HeaderActionRequestHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type HeaderActionResponseHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type HostRuleState struct {
	Description string   `json:"description"`
	Hosts       []string `json:"hosts"`
	PathMatcher string   `json:"path_matcher"`
}

type PathMatcherState struct {
	DefaultService     string                               `json:"default_service"`
	Description        string                               `json:"description"`
	Name               string                               `json:"name"`
	DefaultRouteAction []PathMatcherDefaultRouteActionState `json:"default_route_action"`
	DefaultUrlRedirect []PathMatcherDefaultUrlRedirectState `json:"default_url_redirect"`
	HeaderAction       []PathMatcherHeaderActionState       `json:"header_action"`
	PathRule           []PathRuleState                      `json:"path_rule"`
	RouteRules         []RouteRulesState                    `json:"route_rules"`
}

type PathMatcherDefaultRouteActionState struct {
	CorsPolicy              []PathMatcherDefaultRouteActionCorsPolicyState              `json:"cors_policy"`
	FaultInjectionPolicy    []PathMatcherDefaultRouteActionFaultInjectionPolicyState    `json:"fault_injection_policy"`
	RequestMirrorPolicy     []PathMatcherDefaultRouteActionRequestMirrorPolicyState     `json:"request_mirror_policy"`
	RetryPolicy             []PathMatcherDefaultRouteActionRetryPolicyState             `json:"retry_policy"`
	Timeout                 []PathMatcherDefaultRouteActionTimeoutState                 `json:"timeout"`
	UrlRewrite              []PathMatcherDefaultRouteActionUrlRewriteState              `json:"url_rewrite"`
	WeightedBackendServices []PathMatcherDefaultRouteActionWeightedBackendServicesState `json:"weighted_backend_services"`
}

type PathMatcherDefaultRouteActionCorsPolicyState struct {
	AllowCredentials   bool     `json:"allow_credentials"`
	AllowHeaders       []string `json:"allow_headers"`
	AllowMethods       []string `json:"allow_methods"`
	AllowOriginRegexes []string `json:"allow_origin_regexes"`
	AllowOrigins       []string `json:"allow_origins"`
	Disabled           bool     `json:"disabled"`
	ExposeHeaders      []string `json:"expose_headers"`
	MaxAge             float64  `json:"max_age"`
}

type PathMatcherDefaultRouteActionFaultInjectionPolicyState struct {
	Abort []PathMatcherDefaultRouteActionFaultInjectionPolicyAbortState `json:"abort"`
	Delay []PathMatcherDefaultRouteActionFaultInjectionPolicyDelayState `json:"delay"`
}

type PathMatcherDefaultRouteActionFaultInjectionPolicyAbortState struct {
	HttpStatus float64 `json:"http_status"`
	Percentage float64 `json:"percentage"`
}

type PathMatcherDefaultRouteActionFaultInjectionPolicyDelayState struct {
	Percentage float64                                                                 `json:"percentage"`
	FixedDelay []PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayState `json:"fixed_delay"`
}

type PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type PathMatcherDefaultRouteActionRequestMirrorPolicyState struct {
	BackendService string `json:"backend_service"`
}

type PathMatcherDefaultRouteActionRetryPolicyState struct {
	NumRetries      float64                                                      `json:"num_retries"`
	RetryConditions []string                                                     `json:"retry_conditions"`
	PerTryTimeout   []PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutState `json:"per_try_timeout"`
}

type PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type PathMatcherDefaultRouteActionTimeoutState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type PathMatcherDefaultRouteActionUrlRewriteState struct {
	HostRewrite       string `json:"host_rewrite"`
	PathPrefixRewrite string `json:"path_prefix_rewrite"`
}

type PathMatcherDefaultRouteActionWeightedBackendServicesState struct {
	BackendService string                                                                  `json:"backend_service"`
	Weight         float64                                                                 `json:"weight"`
	HeaderAction   []PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionState `json:"header_action"`
}

type PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionState struct {
	RequestHeadersToRemove  []string                                                                                    `json:"request_headers_to_remove"`
	ResponseHeadersToRemove []string                                                                                    `json:"response_headers_to_remove"`
	RequestHeadersToAdd     []PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddState  `json:"request_headers_to_add"`
	ResponseHeadersToAdd    []PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddState `json:"response_headers_to_add"`
}

type PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type PathMatcherDefaultUrlRedirectState struct {
	HostRedirect         string `json:"host_redirect"`
	HttpsRedirect        bool   `json:"https_redirect"`
	PathRedirect         string `json:"path_redirect"`
	PrefixRedirect       string `json:"prefix_redirect"`
	RedirectResponseCode string `json:"redirect_response_code"`
	StripQuery           bool   `json:"strip_query"`
}

type PathMatcherHeaderActionState struct {
	RequestHeadersToRemove  []string                                           `json:"request_headers_to_remove"`
	ResponseHeadersToRemove []string                                           `json:"response_headers_to_remove"`
	RequestHeadersToAdd     []PathMatcherHeaderActionRequestHeadersToAddState  `json:"request_headers_to_add"`
	ResponseHeadersToAdd    []PathMatcherHeaderActionResponseHeadersToAddState `json:"response_headers_to_add"`
}

type PathMatcherHeaderActionRequestHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type PathMatcherHeaderActionResponseHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type PathRuleState struct {
	Paths       []string                   `json:"paths"`
	Service     string                     `json:"service"`
	RouteAction []PathRuleRouteActionState `json:"route_action"`
	UrlRedirect []PathRuleUrlRedirectState `json:"url_redirect"`
}

type PathRuleRouteActionState struct {
	CorsPolicy              []PathRuleRouteActionCorsPolicyState              `json:"cors_policy"`
	FaultInjectionPolicy    []PathRuleRouteActionFaultInjectionPolicyState    `json:"fault_injection_policy"`
	RequestMirrorPolicy     []PathRuleRouteActionRequestMirrorPolicyState     `json:"request_mirror_policy"`
	RetryPolicy             []PathRuleRouteActionRetryPolicyState             `json:"retry_policy"`
	Timeout                 []PathRuleRouteActionTimeoutState                 `json:"timeout"`
	UrlRewrite              []PathRuleRouteActionUrlRewriteState              `json:"url_rewrite"`
	WeightedBackendServices []PathRuleRouteActionWeightedBackendServicesState `json:"weighted_backend_services"`
}

type PathRuleRouteActionCorsPolicyState struct {
	AllowCredentials   bool     `json:"allow_credentials"`
	AllowHeaders       []string `json:"allow_headers"`
	AllowMethods       []string `json:"allow_methods"`
	AllowOriginRegexes []string `json:"allow_origin_regexes"`
	AllowOrigins       []string `json:"allow_origins"`
	Disabled           bool     `json:"disabled"`
	ExposeHeaders      []string `json:"expose_headers"`
	MaxAge             float64  `json:"max_age"`
}

type PathRuleRouteActionFaultInjectionPolicyState struct {
	Abort []PathRuleRouteActionFaultInjectionPolicyAbortState `json:"abort"`
	Delay []PathRuleRouteActionFaultInjectionPolicyDelayState `json:"delay"`
}

type PathRuleRouteActionFaultInjectionPolicyAbortState struct {
	HttpStatus float64 `json:"http_status"`
	Percentage float64 `json:"percentage"`
}

type PathRuleRouteActionFaultInjectionPolicyDelayState struct {
	Percentage float64                                                       `json:"percentage"`
	FixedDelay []PathRuleRouteActionFaultInjectionPolicyDelayFixedDelayState `json:"fixed_delay"`
}

type PathRuleRouteActionFaultInjectionPolicyDelayFixedDelayState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type PathRuleRouteActionRequestMirrorPolicyState struct {
	BackendService string `json:"backend_service"`
}

type PathRuleRouteActionRetryPolicyState struct {
	NumRetries      float64                                            `json:"num_retries"`
	RetryConditions []string                                           `json:"retry_conditions"`
	PerTryTimeout   []PathRuleRouteActionRetryPolicyPerTryTimeoutState `json:"per_try_timeout"`
}

type PathRuleRouteActionRetryPolicyPerTryTimeoutState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type PathRuleRouteActionTimeoutState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type PathRuleRouteActionUrlRewriteState struct {
	HostRewrite       string `json:"host_rewrite"`
	PathPrefixRewrite string `json:"path_prefix_rewrite"`
}

type PathRuleRouteActionWeightedBackendServicesState struct {
	BackendService string                                                        `json:"backend_service"`
	Weight         float64                                                       `json:"weight"`
	HeaderAction   []PathRuleRouteActionWeightedBackendServicesHeaderActionState `json:"header_action"`
}

type PathRuleRouteActionWeightedBackendServicesHeaderActionState struct {
	RequestHeadersToRemove  []string                                                                          `json:"request_headers_to_remove"`
	ResponseHeadersToRemove []string                                                                          `json:"response_headers_to_remove"`
	RequestHeadersToAdd     []PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddState  `json:"request_headers_to_add"`
	ResponseHeadersToAdd    []PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddState `json:"response_headers_to_add"`
}

type PathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type PathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type PathRuleUrlRedirectState struct {
	HostRedirect         string `json:"host_redirect"`
	HttpsRedirect        bool   `json:"https_redirect"`
	PathRedirect         string `json:"path_redirect"`
	PrefixRedirect       string `json:"prefix_redirect"`
	RedirectResponseCode string `json:"redirect_response_code"`
	StripQuery           bool   `json:"strip_query"`
}

type RouteRulesState struct {
	Priority     float64                       `json:"priority"`
	Service      string                        `json:"service"`
	HeaderAction []RouteRulesHeaderActionState `json:"header_action"`
	MatchRules   []MatchRulesState             `json:"match_rules"`
	RouteAction  []RouteRulesRouteActionState  `json:"route_action"`
	UrlRedirect  []RouteRulesUrlRedirectState  `json:"url_redirect"`
}

type RouteRulesHeaderActionState struct {
	RequestHeadersToRemove  []string                                          `json:"request_headers_to_remove"`
	ResponseHeadersToRemove []string                                          `json:"response_headers_to_remove"`
	RequestHeadersToAdd     []RouteRulesHeaderActionRequestHeadersToAddState  `json:"request_headers_to_add"`
	ResponseHeadersToAdd    []RouteRulesHeaderActionResponseHeadersToAddState `json:"response_headers_to_add"`
}

type RouteRulesHeaderActionRequestHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type RouteRulesHeaderActionResponseHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type MatchRulesState struct {
	FullPathMatch         string                       `json:"full_path_match"`
	IgnoreCase            bool                         `json:"ignore_case"`
	PathTemplateMatch     string                       `json:"path_template_match"`
	PrefixMatch           string                       `json:"prefix_match"`
	RegexMatch            string                       `json:"regex_match"`
	HeaderMatches         []HeaderMatchesState         `json:"header_matches"`
	MetadataFilters       []MetadataFiltersState       `json:"metadata_filters"`
	QueryParameterMatches []QueryParameterMatchesState `json:"query_parameter_matches"`
}

type HeaderMatchesState struct {
	ExactMatch   string            `json:"exact_match"`
	HeaderName   string            `json:"header_name"`
	InvertMatch  bool              `json:"invert_match"`
	PrefixMatch  string            `json:"prefix_match"`
	PresentMatch bool              `json:"present_match"`
	RegexMatch   string            `json:"regex_match"`
	SuffixMatch  string            `json:"suffix_match"`
	RangeMatch   []RangeMatchState `json:"range_match"`
}

type RangeMatchState struct {
	RangeEnd   float64 `json:"range_end"`
	RangeStart float64 `json:"range_start"`
}

type MetadataFiltersState struct {
	FilterMatchCriteria string              `json:"filter_match_criteria"`
	FilterLabels        []FilterLabelsState `json:"filter_labels"`
}

type FilterLabelsState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type QueryParameterMatchesState struct {
	ExactMatch   string `json:"exact_match"`
	Name         string `json:"name"`
	PresentMatch bool   `json:"present_match"`
	RegexMatch   string `json:"regex_match"`
}

type RouteRulesRouteActionState struct {
	CorsPolicy              []RouteRulesRouteActionCorsPolicyState              `json:"cors_policy"`
	FaultInjectionPolicy    []RouteRulesRouteActionFaultInjectionPolicyState    `json:"fault_injection_policy"`
	RequestMirrorPolicy     []RouteRulesRouteActionRequestMirrorPolicyState     `json:"request_mirror_policy"`
	RetryPolicy             []RouteRulesRouteActionRetryPolicyState             `json:"retry_policy"`
	Timeout                 []RouteRulesRouteActionTimeoutState                 `json:"timeout"`
	UrlRewrite              []RouteRulesRouteActionUrlRewriteState              `json:"url_rewrite"`
	WeightedBackendServices []RouteRulesRouteActionWeightedBackendServicesState `json:"weighted_backend_services"`
}

type RouteRulesRouteActionCorsPolicyState struct {
	AllowCredentials   bool     `json:"allow_credentials"`
	AllowHeaders       []string `json:"allow_headers"`
	AllowMethods       []string `json:"allow_methods"`
	AllowOriginRegexes []string `json:"allow_origin_regexes"`
	AllowOrigins       []string `json:"allow_origins"`
	Disabled           bool     `json:"disabled"`
	ExposeHeaders      []string `json:"expose_headers"`
	MaxAge             float64  `json:"max_age"`
}

type RouteRulesRouteActionFaultInjectionPolicyState struct {
	Abort []RouteRulesRouteActionFaultInjectionPolicyAbortState `json:"abort"`
	Delay []RouteRulesRouteActionFaultInjectionPolicyDelayState `json:"delay"`
}

type RouteRulesRouteActionFaultInjectionPolicyAbortState struct {
	HttpStatus float64 `json:"http_status"`
	Percentage float64 `json:"percentage"`
}

type RouteRulesRouteActionFaultInjectionPolicyDelayState struct {
	Percentage float64                                                         `json:"percentage"`
	FixedDelay []RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayState `json:"fixed_delay"`
}

type RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type RouteRulesRouteActionRequestMirrorPolicyState struct {
	BackendService string `json:"backend_service"`
}

type RouteRulesRouteActionRetryPolicyState struct {
	NumRetries      float64                                              `json:"num_retries"`
	RetryConditions []string                                             `json:"retry_conditions"`
	PerTryTimeout   []RouteRulesRouteActionRetryPolicyPerTryTimeoutState `json:"per_try_timeout"`
}

type RouteRulesRouteActionRetryPolicyPerTryTimeoutState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type RouteRulesRouteActionTimeoutState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type RouteRulesRouteActionUrlRewriteState struct {
	HostRewrite         string `json:"host_rewrite"`
	PathPrefixRewrite   string `json:"path_prefix_rewrite"`
	PathTemplateRewrite string `json:"path_template_rewrite"`
}

type RouteRulesRouteActionWeightedBackendServicesState struct {
	BackendService string                                                          `json:"backend_service"`
	Weight         float64                                                         `json:"weight"`
	HeaderAction   []RouteRulesRouteActionWeightedBackendServicesHeaderActionState `json:"header_action"`
}

type RouteRulesRouteActionWeightedBackendServicesHeaderActionState struct {
	RequestHeadersToRemove  []string                                                                            `json:"request_headers_to_remove"`
	ResponseHeadersToRemove []string                                                                            `json:"response_headers_to_remove"`
	RequestHeadersToAdd     []RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddState  `json:"request_headers_to_add"`
	ResponseHeadersToAdd    []RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddState `json:"response_headers_to_add"`
}

type RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type RouteRulesUrlRedirectState struct {
	HostRedirect         string `json:"host_redirect"`
	HttpsRedirect        bool   `json:"https_redirect"`
	PathRedirect         string `json:"path_redirect"`
	PrefixRedirect       string `json:"prefix_redirect"`
	RedirectResponseCode string `json:"redirect_response_code"`
	StripQuery           bool   `json:"strip_query"`
}

type TestState struct {
	Description string `json:"description"`
	Host        string `json:"host"`
	Path        string `json:"path"`
	Service     string `json:"service"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
