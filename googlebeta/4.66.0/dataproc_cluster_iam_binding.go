// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	dataprocclusteriambinding "github.com/golingon/terraproviders/googlebeta/4.66.0/dataprocclusteriambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDataprocClusterIamBinding creates a new instance of [DataprocClusterIamBinding].
func NewDataprocClusterIamBinding(name string, args DataprocClusterIamBindingArgs) *DataprocClusterIamBinding {
	return &DataprocClusterIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataprocClusterIamBinding)(nil)

// DataprocClusterIamBinding represents the Terraform resource google_dataproc_cluster_iam_binding.
type DataprocClusterIamBinding struct {
	Name      string
	Args      DataprocClusterIamBindingArgs
	state     *dataprocClusterIamBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataprocClusterIamBinding].
func (dcib *DataprocClusterIamBinding) Type() string {
	return "google_dataproc_cluster_iam_binding"
}

// LocalName returns the local name for [DataprocClusterIamBinding].
func (dcib *DataprocClusterIamBinding) LocalName() string {
	return dcib.Name
}

// Configuration returns the configuration (args) for [DataprocClusterIamBinding].
func (dcib *DataprocClusterIamBinding) Configuration() interface{} {
	return dcib.Args
}

// DependOn is used for other resources to depend on [DataprocClusterIamBinding].
func (dcib *DataprocClusterIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(dcib)
}

// Dependencies returns the list of resources [DataprocClusterIamBinding] depends_on.
func (dcib *DataprocClusterIamBinding) Dependencies() terra.Dependencies {
	return dcib.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataprocClusterIamBinding].
func (dcib *DataprocClusterIamBinding) LifecycleManagement() *terra.Lifecycle {
	return dcib.Lifecycle
}

// Attributes returns the attributes for [DataprocClusterIamBinding].
func (dcib *DataprocClusterIamBinding) Attributes() dataprocClusterIamBindingAttributes {
	return dataprocClusterIamBindingAttributes{ref: terra.ReferenceResource(dcib)}
}

// ImportState imports the given attribute values into [DataprocClusterIamBinding]'s state.
func (dcib *DataprocClusterIamBinding) ImportState(av io.Reader) error {
	dcib.state = &dataprocClusterIamBindingState{}
	if err := json.NewDecoder(av).Decode(dcib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcib.Type(), dcib.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataprocClusterIamBinding] has state.
func (dcib *DataprocClusterIamBinding) State() (*dataprocClusterIamBindingState, bool) {
	return dcib.state, dcib.state != nil
}

// StateMust returns the state for [DataprocClusterIamBinding]. Panics if the state is nil.
func (dcib *DataprocClusterIamBinding) StateMust() *dataprocClusterIamBindingState {
	if dcib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcib.Type(), dcib.LocalName()))
	}
	return dcib.state
}

// DataprocClusterIamBindingArgs contains the configurations for google_dataproc_cluster_iam_binding.
type DataprocClusterIamBindingArgs struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *dataprocclusteriambinding.Condition `hcl:"condition,block"`
}
type dataprocClusterIamBindingAttributes struct {
	ref terra.Reference
}

// Cluster returns a reference to field cluster of google_dataproc_cluster_iam_binding.
func (dcib dataprocClusterIamBindingAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(dcib.ref.Append("cluster"))
}

// Etag returns a reference to field etag of google_dataproc_cluster_iam_binding.
func (dcib dataprocClusterIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(dcib.ref.Append("etag"))
}

// Id returns a reference to field id of google_dataproc_cluster_iam_binding.
func (dcib dataprocClusterIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dcib.ref.Append("id"))
}

// Members returns a reference to field members of google_dataproc_cluster_iam_binding.
func (dcib dataprocClusterIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dcib.ref.Append("members"))
}

// Project returns a reference to field project of google_dataproc_cluster_iam_binding.
func (dcib dataprocClusterIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(dcib.ref.Append("project"))
}

// Region returns a reference to field region of google_dataproc_cluster_iam_binding.
func (dcib dataprocClusterIamBindingAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(dcib.ref.Append("region"))
}

// Role returns a reference to field role of google_dataproc_cluster_iam_binding.
func (dcib dataprocClusterIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(dcib.ref.Append("role"))
}

func (dcib dataprocClusterIamBindingAttributes) Condition() terra.ListValue[dataprocclusteriambinding.ConditionAttributes] {
	return terra.ReferenceAsList[dataprocclusteriambinding.ConditionAttributes](dcib.ref.Append("condition"))
}

type dataprocClusterIamBindingState struct {
	Cluster   string                                     `json:"cluster"`
	Etag      string                                     `json:"etag"`
	Id        string                                     `json:"id"`
	Members   []string                                   `json:"members"`
	Project   string                                     `json:"project"`
	Region    string                                     `json:"region"`
	Role      string                                     `json:"role"`
	Condition []dataprocclusteriambinding.ConditionState `json:"condition"`
}
