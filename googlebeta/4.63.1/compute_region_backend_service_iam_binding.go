// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	computeregionbackendserviceiambinding "github.com/golingon/terraproviders/googlebeta/4.63.1/computeregionbackendserviceiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewComputeRegionBackendServiceIamBinding creates a new instance of [ComputeRegionBackendServiceIamBinding].
func NewComputeRegionBackendServiceIamBinding(name string, args ComputeRegionBackendServiceIamBindingArgs) *ComputeRegionBackendServiceIamBinding {
	return &ComputeRegionBackendServiceIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeRegionBackendServiceIamBinding)(nil)

// ComputeRegionBackendServiceIamBinding represents the Terraform resource google_compute_region_backend_service_iam_binding.
type ComputeRegionBackendServiceIamBinding struct {
	Name      string
	Args      ComputeRegionBackendServiceIamBindingArgs
	state     *computeRegionBackendServiceIamBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ComputeRegionBackendServiceIamBinding].
func (crbsib *ComputeRegionBackendServiceIamBinding) Type() string {
	return "google_compute_region_backend_service_iam_binding"
}

// LocalName returns the local name for [ComputeRegionBackendServiceIamBinding].
func (crbsib *ComputeRegionBackendServiceIamBinding) LocalName() string {
	return crbsib.Name
}

// Configuration returns the configuration (args) for [ComputeRegionBackendServiceIamBinding].
func (crbsib *ComputeRegionBackendServiceIamBinding) Configuration() interface{} {
	return crbsib.Args
}

// DependOn is used for other resources to depend on [ComputeRegionBackendServiceIamBinding].
func (crbsib *ComputeRegionBackendServiceIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(crbsib)
}

// Dependencies returns the list of resources [ComputeRegionBackendServiceIamBinding] depends_on.
func (crbsib *ComputeRegionBackendServiceIamBinding) Dependencies() terra.Dependencies {
	return crbsib.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ComputeRegionBackendServiceIamBinding].
func (crbsib *ComputeRegionBackendServiceIamBinding) LifecycleManagement() *terra.Lifecycle {
	return crbsib.Lifecycle
}

// Attributes returns the attributes for [ComputeRegionBackendServiceIamBinding].
func (crbsib *ComputeRegionBackendServiceIamBinding) Attributes() computeRegionBackendServiceIamBindingAttributes {
	return computeRegionBackendServiceIamBindingAttributes{ref: terra.ReferenceResource(crbsib)}
}

// ImportState imports the given attribute values into [ComputeRegionBackendServiceIamBinding]'s state.
func (crbsib *ComputeRegionBackendServiceIamBinding) ImportState(av io.Reader) error {
	crbsib.state = &computeRegionBackendServiceIamBindingState{}
	if err := json.NewDecoder(av).Decode(crbsib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crbsib.Type(), crbsib.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ComputeRegionBackendServiceIamBinding] has state.
func (crbsib *ComputeRegionBackendServiceIamBinding) State() (*computeRegionBackendServiceIamBindingState, bool) {
	return crbsib.state, crbsib.state != nil
}

// StateMust returns the state for [ComputeRegionBackendServiceIamBinding]. Panics if the state is nil.
func (crbsib *ComputeRegionBackendServiceIamBinding) StateMust() *computeRegionBackendServiceIamBindingState {
	if crbsib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crbsib.Type(), crbsib.LocalName()))
	}
	return crbsib.state
}

// ComputeRegionBackendServiceIamBindingArgs contains the configurations for google_compute_region_backend_service_iam_binding.
type ComputeRegionBackendServiceIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *computeregionbackendserviceiambinding.Condition `hcl:"condition,block"`
}
type computeRegionBackendServiceIamBindingAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_compute_region_backend_service_iam_binding.
func (crbsib computeRegionBackendServiceIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(crbsib.ref.Append("etag"))
}

// Id returns a reference to field id of google_compute_region_backend_service_iam_binding.
func (crbsib computeRegionBackendServiceIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(crbsib.ref.Append("id"))
}

// Members returns a reference to field members of google_compute_region_backend_service_iam_binding.
func (crbsib computeRegionBackendServiceIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](crbsib.ref.Append("members"))
}

// Name returns a reference to field name of google_compute_region_backend_service_iam_binding.
func (crbsib computeRegionBackendServiceIamBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(crbsib.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_region_backend_service_iam_binding.
func (crbsib computeRegionBackendServiceIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(crbsib.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_region_backend_service_iam_binding.
func (crbsib computeRegionBackendServiceIamBindingAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(crbsib.ref.Append("region"))
}

// Role returns a reference to field role of google_compute_region_backend_service_iam_binding.
func (crbsib computeRegionBackendServiceIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(crbsib.ref.Append("role"))
}

func (crbsib computeRegionBackendServiceIamBindingAttributes) Condition() terra.ListValue[computeregionbackendserviceiambinding.ConditionAttributes] {
	return terra.ReferenceAsList[computeregionbackendserviceiambinding.ConditionAttributes](crbsib.ref.Append("condition"))
}

type computeRegionBackendServiceIamBindingState struct {
	Etag      string                                                 `json:"etag"`
	Id        string                                                 `json:"id"`
	Members   []string                                               `json:"members"`
	Name      string                                                 `json:"name"`
	Project   string                                                 `json:"project"`
	Region    string                                                 `json:"region"`
	Role      string                                                 `json:"role"`
	Condition []computeregionbackendserviceiambinding.ConditionState `json:"condition"`
}
