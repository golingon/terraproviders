// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	dataprocmetastorefederation "github.com/golingon/terraproviders/googlebeta/4.63.1/dataprocmetastorefederation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDataprocMetastoreFederation creates a new instance of [DataprocMetastoreFederation].
func NewDataprocMetastoreFederation(name string, args DataprocMetastoreFederationArgs) *DataprocMetastoreFederation {
	return &DataprocMetastoreFederation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataprocMetastoreFederation)(nil)

// DataprocMetastoreFederation represents the Terraform resource google_dataproc_metastore_federation.
type DataprocMetastoreFederation struct {
	Name      string
	Args      DataprocMetastoreFederationArgs
	state     *dataprocMetastoreFederationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataprocMetastoreFederation].
func (dmf *DataprocMetastoreFederation) Type() string {
	return "google_dataproc_metastore_federation"
}

// LocalName returns the local name for [DataprocMetastoreFederation].
func (dmf *DataprocMetastoreFederation) LocalName() string {
	return dmf.Name
}

// Configuration returns the configuration (args) for [DataprocMetastoreFederation].
func (dmf *DataprocMetastoreFederation) Configuration() interface{} {
	return dmf.Args
}

// DependOn is used for other resources to depend on [DataprocMetastoreFederation].
func (dmf *DataprocMetastoreFederation) DependOn() terra.Reference {
	return terra.ReferenceResource(dmf)
}

// Dependencies returns the list of resources [DataprocMetastoreFederation] depends_on.
func (dmf *DataprocMetastoreFederation) Dependencies() terra.Dependencies {
	return dmf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataprocMetastoreFederation].
func (dmf *DataprocMetastoreFederation) LifecycleManagement() *terra.Lifecycle {
	return dmf.Lifecycle
}

// Attributes returns the attributes for [DataprocMetastoreFederation].
func (dmf *DataprocMetastoreFederation) Attributes() dataprocMetastoreFederationAttributes {
	return dataprocMetastoreFederationAttributes{ref: terra.ReferenceResource(dmf)}
}

// ImportState imports the given attribute values into [DataprocMetastoreFederation]'s state.
func (dmf *DataprocMetastoreFederation) ImportState(av io.Reader) error {
	dmf.state = &dataprocMetastoreFederationState{}
	if err := json.NewDecoder(av).Decode(dmf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dmf.Type(), dmf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataprocMetastoreFederation] has state.
func (dmf *DataprocMetastoreFederation) State() (*dataprocMetastoreFederationState, bool) {
	return dmf.state, dmf.state != nil
}

// StateMust returns the state for [DataprocMetastoreFederation]. Panics if the state is nil.
func (dmf *DataprocMetastoreFederation) StateMust() *dataprocMetastoreFederationState {
	if dmf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dmf.Type(), dmf.LocalName()))
	}
	return dmf.state
}

// DataprocMetastoreFederationArgs contains the configurations for google_dataproc_metastore_federation.
type DataprocMetastoreFederationArgs struct {
	// FederationId: string, required
	FederationId terra.StringValue `hcl:"federation_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// BackendMetastores: min=1
	BackendMetastores []dataprocmetastorefederation.BackendMetastores `hcl:"backend_metastores,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *dataprocmetastorefederation.Timeouts `hcl:"timeouts,block"`
}
type dataprocMetastoreFederationAttributes struct {
	ref terra.Reference
}

// EndpointUri returns a reference to field endpoint_uri of google_dataproc_metastore_federation.
func (dmf dataprocMetastoreFederationAttributes) EndpointUri() terra.StringValue {
	return terra.ReferenceAsString(dmf.ref.Append("endpoint_uri"))
}

// FederationId returns a reference to field federation_id of google_dataproc_metastore_federation.
func (dmf dataprocMetastoreFederationAttributes) FederationId() terra.StringValue {
	return terra.ReferenceAsString(dmf.ref.Append("federation_id"))
}

// Id returns a reference to field id of google_dataproc_metastore_federation.
func (dmf dataprocMetastoreFederationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dmf.ref.Append("id"))
}

// Labels returns a reference to field labels of google_dataproc_metastore_federation.
func (dmf dataprocMetastoreFederationAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dmf.ref.Append("labels"))
}

// Location returns a reference to field location of google_dataproc_metastore_federation.
func (dmf dataprocMetastoreFederationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(dmf.ref.Append("location"))
}

// Name returns a reference to field name of google_dataproc_metastore_federation.
func (dmf dataprocMetastoreFederationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dmf.ref.Append("name"))
}

// Project returns a reference to field project of google_dataproc_metastore_federation.
func (dmf dataprocMetastoreFederationAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(dmf.ref.Append("project"))
}

// State returns a reference to field state of google_dataproc_metastore_federation.
func (dmf dataprocMetastoreFederationAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(dmf.ref.Append("state"))
}

// StateMessage returns a reference to field state_message of google_dataproc_metastore_federation.
func (dmf dataprocMetastoreFederationAttributes) StateMessage() terra.StringValue {
	return terra.ReferenceAsString(dmf.ref.Append("state_message"))
}

// Uid returns a reference to field uid of google_dataproc_metastore_federation.
func (dmf dataprocMetastoreFederationAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(dmf.ref.Append("uid"))
}

// Version returns a reference to field version of google_dataproc_metastore_federation.
func (dmf dataprocMetastoreFederationAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(dmf.ref.Append("version"))
}

func (dmf dataprocMetastoreFederationAttributes) BackendMetastores() terra.SetValue[dataprocmetastorefederation.BackendMetastoresAttributes] {
	return terra.ReferenceAsSet[dataprocmetastorefederation.BackendMetastoresAttributes](dmf.ref.Append("backend_metastores"))
}

func (dmf dataprocMetastoreFederationAttributes) Timeouts() dataprocmetastorefederation.TimeoutsAttributes {
	return terra.ReferenceAsSingle[dataprocmetastorefederation.TimeoutsAttributes](dmf.ref.Append("timeouts"))
}

type dataprocMetastoreFederationState struct {
	EndpointUri       string                                               `json:"endpoint_uri"`
	FederationId      string                                               `json:"federation_id"`
	Id                string                                               `json:"id"`
	Labels            map[string]string                                    `json:"labels"`
	Location          string                                               `json:"location"`
	Name              string                                               `json:"name"`
	Project           string                                               `json:"project"`
	State             string                                               `json:"state"`
	StateMessage      string                                               `json:"state_message"`
	Uid               string                                               `json:"uid"`
	Version           string                                               `json:"version"`
	BackendMetastores []dataprocmetastorefederation.BackendMetastoresState `json:"backend_metastores"`
	Timeouts          *dataprocmetastorefederation.TimeoutsState           `json:"timeouts"`
}
