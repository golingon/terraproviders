// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	recaptchaenterprisekey "github.com/golingon/terraproviders/googlebeta/5.2.0/recaptchaenterprisekey"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewRecaptchaEnterpriseKey creates a new instance of [RecaptchaEnterpriseKey].
func NewRecaptchaEnterpriseKey(name string, args RecaptchaEnterpriseKeyArgs) *RecaptchaEnterpriseKey {
	return &RecaptchaEnterpriseKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RecaptchaEnterpriseKey)(nil)

// RecaptchaEnterpriseKey represents the Terraform resource google_recaptcha_enterprise_key.
type RecaptchaEnterpriseKey struct {
	Name      string
	Args      RecaptchaEnterpriseKeyArgs
	state     *recaptchaEnterpriseKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RecaptchaEnterpriseKey].
func (rek *RecaptchaEnterpriseKey) Type() string {
	return "google_recaptcha_enterprise_key"
}

// LocalName returns the local name for [RecaptchaEnterpriseKey].
func (rek *RecaptchaEnterpriseKey) LocalName() string {
	return rek.Name
}

// Configuration returns the configuration (args) for [RecaptchaEnterpriseKey].
func (rek *RecaptchaEnterpriseKey) Configuration() interface{} {
	return rek.Args
}

// DependOn is used for other resources to depend on [RecaptchaEnterpriseKey].
func (rek *RecaptchaEnterpriseKey) DependOn() terra.Reference {
	return terra.ReferenceResource(rek)
}

// Dependencies returns the list of resources [RecaptchaEnterpriseKey] depends_on.
func (rek *RecaptchaEnterpriseKey) Dependencies() terra.Dependencies {
	return rek.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RecaptchaEnterpriseKey].
func (rek *RecaptchaEnterpriseKey) LifecycleManagement() *terra.Lifecycle {
	return rek.Lifecycle
}

// Attributes returns the attributes for [RecaptchaEnterpriseKey].
func (rek *RecaptchaEnterpriseKey) Attributes() recaptchaEnterpriseKeyAttributes {
	return recaptchaEnterpriseKeyAttributes{ref: terra.ReferenceResource(rek)}
}

// ImportState imports the given attribute values into [RecaptchaEnterpriseKey]'s state.
func (rek *RecaptchaEnterpriseKey) ImportState(av io.Reader) error {
	rek.state = &recaptchaEnterpriseKeyState{}
	if err := json.NewDecoder(av).Decode(rek.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rek.Type(), rek.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RecaptchaEnterpriseKey] has state.
func (rek *RecaptchaEnterpriseKey) State() (*recaptchaEnterpriseKeyState, bool) {
	return rek.state, rek.state != nil
}

// StateMust returns the state for [RecaptchaEnterpriseKey]. Panics if the state is nil.
func (rek *RecaptchaEnterpriseKey) StateMust() *recaptchaEnterpriseKeyState {
	if rek.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rek.Type(), rek.LocalName()))
	}
	return rek.state
}

// RecaptchaEnterpriseKeyArgs contains the configurations for google_recaptcha_enterprise_key.
type RecaptchaEnterpriseKeyArgs struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// AndroidSettings: optional
	AndroidSettings *recaptchaenterprisekey.AndroidSettings `hcl:"android_settings,block"`
	// IosSettings: optional
	IosSettings *recaptchaenterprisekey.IosSettings `hcl:"ios_settings,block"`
	// TestingOptions: optional
	TestingOptions *recaptchaenterprisekey.TestingOptions `hcl:"testing_options,block"`
	// Timeouts: optional
	Timeouts *recaptchaenterprisekey.Timeouts `hcl:"timeouts,block"`
	// WebSettings: optional
	WebSettings *recaptchaenterprisekey.WebSettings `hcl:"web_settings,block"`
}
type recaptchaEnterpriseKeyAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_recaptcha_enterprise_key.
func (rek recaptchaEnterpriseKeyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(rek.ref.Append("create_time"))
}

// DisplayName returns a reference to field display_name of google_recaptcha_enterprise_key.
func (rek recaptchaEnterpriseKeyAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(rek.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_recaptcha_enterprise_key.
func (rek recaptchaEnterpriseKeyAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rek.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_recaptcha_enterprise_key.
func (rek recaptchaEnterpriseKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rek.ref.Append("id"))
}

// Labels returns a reference to field labels of google_recaptcha_enterprise_key.
func (rek recaptchaEnterpriseKeyAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rek.ref.Append("labels"))
}

// Name returns a reference to field name of google_recaptcha_enterprise_key.
func (rek recaptchaEnterpriseKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rek.ref.Append("name"))
}

// Project returns a reference to field project of google_recaptcha_enterprise_key.
func (rek recaptchaEnterpriseKeyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(rek.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_recaptcha_enterprise_key.
func (rek recaptchaEnterpriseKeyAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rek.ref.Append("terraform_labels"))
}

func (rek recaptchaEnterpriseKeyAttributes) AndroidSettings() terra.ListValue[recaptchaenterprisekey.AndroidSettingsAttributes] {
	return terra.ReferenceAsList[recaptchaenterprisekey.AndroidSettingsAttributes](rek.ref.Append("android_settings"))
}

func (rek recaptchaEnterpriseKeyAttributes) IosSettings() terra.ListValue[recaptchaenterprisekey.IosSettingsAttributes] {
	return terra.ReferenceAsList[recaptchaenterprisekey.IosSettingsAttributes](rek.ref.Append("ios_settings"))
}

func (rek recaptchaEnterpriseKeyAttributes) TestingOptions() terra.ListValue[recaptchaenterprisekey.TestingOptionsAttributes] {
	return terra.ReferenceAsList[recaptchaenterprisekey.TestingOptionsAttributes](rek.ref.Append("testing_options"))
}

func (rek recaptchaEnterpriseKeyAttributes) Timeouts() recaptchaenterprisekey.TimeoutsAttributes {
	return terra.ReferenceAsSingle[recaptchaenterprisekey.TimeoutsAttributes](rek.ref.Append("timeouts"))
}

func (rek recaptchaEnterpriseKeyAttributes) WebSettings() terra.ListValue[recaptchaenterprisekey.WebSettingsAttributes] {
	return terra.ReferenceAsList[recaptchaenterprisekey.WebSettingsAttributes](rek.ref.Append("web_settings"))
}

type recaptchaEnterpriseKeyState struct {
	CreateTime      string                                        `json:"create_time"`
	DisplayName     string                                        `json:"display_name"`
	EffectiveLabels map[string]string                             `json:"effective_labels"`
	Id              string                                        `json:"id"`
	Labels          map[string]string                             `json:"labels"`
	Name            string                                        `json:"name"`
	Project         string                                        `json:"project"`
	TerraformLabels map[string]string                             `json:"terraform_labels"`
	AndroidSettings []recaptchaenterprisekey.AndroidSettingsState `json:"android_settings"`
	IosSettings     []recaptchaenterprisekey.IosSettingsState     `json:"ios_settings"`
	TestingOptions  []recaptchaenterprisekey.TestingOptionsState  `json:"testing_options"`
	Timeouts        *recaptchaenterprisekey.TimeoutsState         `json:"timeouts"`
	WebSettings     []recaptchaenterprisekey.WebSettingsState     `json:"web_settings"`
}
