// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	gkehubfleet "github.com/golingon/terraproviders/googlebeta/5.2.0/gkehubfleet"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGkeHubFleet creates a new instance of [GkeHubFleet].
func NewGkeHubFleet(name string, args GkeHubFleetArgs) *GkeHubFleet {
	return &GkeHubFleet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeHubFleet)(nil)

// GkeHubFleet represents the Terraform resource google_gke_hub_fleet.
type GkeHubFleet struct {
	Name      string
	Args      GkeHubFleetArgs
	state     *gkeHubFleetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GkeHubFleet].
func (ghf *GkeHubFleet) Type() string {
	return "google_gke_hub_fleet"
}

// LocalName returns the local name for [GkeHubFleet].
func (ghf *GkeHubFleet) LocalName() string {
	return ghf.Name
}

// Configuration returns the configuration (args) for [GkeHubFleet].
func (ghf *GkeHubFleet) Configuration() interface{} {
	return ghf.Args
}

// DependOn is used for other resources to depend on [GkeHubFleet].
func (ghf *GkeHubFleet) DependOn() terra.Reference {
	return terra.ReferenceResource(ghf)
}

// Dependencies returns the list of resources [GkeHubFleet] depends_on.
func (ghf *GkeHubFleet) Dependencies() terra.Dependencies {
	return ghf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GkeHubFleet].
func (ghf *GkeHubFleet) LifecycleManagement() *terra.Lifecycle {
	return ghf.Lifecycle
}

// Attributes returns the attributes for [GkeHubFleet].
func (ghf *GkeHubFleet) Attributes() gkeHubFleetAttributes {
	return gkeHubFleetAttributes{ref: terra.ReferenceResource(ghf)}
}

// ImportState imports the given attribute values into [GkeHubFleet]'s state.
func (ghf *GkeHubFleet) ImportState(av io.Reader) error {
	ghf.state = &gkeHubFleetState{}
	if err := json.NewDecoder(av).Decode(ghf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ghf.Type(), ghf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GkeHubFleet] has state.
func (ghf *GkeHubFleet) State() (*gkeHubFleetState, bool) {
	return ghf.state, ghf.state != nil
}

// StateMust returns the state for [GkeHubFleet]. Panics if the state is nil.
func (ghf *GkeHubFleet) StateMust() *gkeHubFleetState {
	if ghf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ghf.Type(), ghf.LocalName()))
	}
	return ghf.state
}

// GkeHubFleetArgs contains the configurations for google_gke_hub_fleet.
type GkeHubFleetArgs struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// State: min=0
	State []gkehubfleet.State `hcl:"state,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *gkehubfleet.Timeouts `hcl:"timeouts,block"`
}
type gkeHubFleetAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_gke_hub_fleet.
func (ghf gkeHubFleetAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(ghf.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_gke_hub_fleet.
func (ghf gkeHubFleetAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(ghf.ref.Append("delete_time"))
}

// DisplayName returns a reference to field display_name of google_gke_hub_fleet.
func (ghf gkeHubFleetAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(ghf.ref.Append("display_name"))
}

// Id returns a reference to field id of google_gke_hub_fleet.
func (ghf gkeHubFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ghf.ref.Append("id"))
}

// Project returns a reference to field project of google_gke_hub_fleet.
func (ghf gkeHubFleetAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ghf.ref.Append("project"))
}

// Uid returns a reference to field uid of google_gke_hub_fleet.
func (ghf gkeHubFleetAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(ghf.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_gke_hub_fleet.
func (ghf gkeHubFleetAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(ghf.ref.Append("update_time"))
}

func (ghf gkeHubFleetAttributes) State() terra.ListValue[gkehubfleet.StateAttributes] {
	return terra.ReferenceAsList[gkehubfleet.StateAttributes](ghf.ref.Append("state"))
}

func (ghf gkeHubFleetAttributes) Timeouts() gkehubfleet.TimeoutsAttributes {
	return terra.ReferenceAsSingle[gkehubfleet.TimeoutsAttributes](ghf.ref.Append("timeouts"))
}

type gkeHubFleetState struct {
	CreateTime  string                     `json:"create_time"`
	DeleteTime  string                     `json:"delete_time"`
	DisplayName string                     `json:"display_name"`
	Id          string                     `json:"id"`
	Project     string                     `json:"project"`
	Uid         string                     `json:"uid"`
	UpdateTime  string                     `json:"update_time"`
	State       []gkehubfleet.StateState   `json:"state"`
	Timeouts    *gkehubfleet.TimeoutsState `json:"timeouts"`
}
