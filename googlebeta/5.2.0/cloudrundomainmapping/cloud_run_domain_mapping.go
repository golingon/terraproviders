// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package cloudrundomainmapping

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Status struct {
	// Conditions: min=0
	Conditions []Conditions `hcl:"conditions,block" validate:"min=0"`
	// ResourceRecords: min=0
	ResourceRecords []ResourceRecords `hcl:"resource_records,block" validate:"min=0"`
}

type Conditions struct{}

type ResourceRecords struct{}

type Metadata struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Namespace: string, required
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
}

type Spec struct {
	// CertificateMode: string, optional
	CertificateMode terra.StringValue `hcl:"certificate_mode,attr"`
	// ForceOverride: bool, optional
	ForceOverride terra.BoolValue `hcl:"force_override,attr"`
	// RouteName: string, required
	RouteName terra.StringValue `hcl:"route_name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type StatusAttributes struct {
	ref terra.Reference
}

func (s StatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StatusAttributes) InternalWithRef(ref terra.Reference) StatusAttributes {
	return StatusAttributes{ref: ref}
}

func (s StatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StatusAttributes) MappedRouteName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("mapped_route_name"))
}

func (s StatusAttributes) ObservedGeneration() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("observed_generation"))
}

func (s StatusAttributes) Conditions() terra.ListValue[ConditionsAttributes] {
	return terra.ReferenceAsList[ConditionsAttributes](s.ref.Append("conditions"))
}

func (s StatusAttributes) ResourceRecords() terra.ListValue[ResourceRecordsAttributes] {
	return terra.ReferenceAsList[ResourceRecordsAttributes](s.ref.Append("resource_records"))
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("message"))
}

func (c ConditionsAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("reason"))
}

func (c ConditionsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("status"))
}

func (c ConditionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type ResourceRecordsAttributes struct {
	ref terra.Reference
}

func (rr ResourceRecordsAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr ResourceRecordsAttributes) InternalWithRef(ref terra.Reference) ResourceRecordsAttributes {
	return ResourceRecordsAttributes{ref: ref}
}

func (rr ResourceRecordsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr ResourceRecordsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("name"))
}

func (rr ResourceRecordsAttributes) Rrdata() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("rrdata"))
}

func (rr ResourceRecordsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("type"))
}

type MetadataAttributes struct {
	ref terra.Reference
}

func (m MetadataAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MetadataAttributes) InternalWithRef(ref terra.Reference) MetadataAttributes {
	return MetadataAttributes{ref: ref}
}

func (m MetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MetadataAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("annotations"))
}

func (m MetadataAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("effective_annotations"))
}

func (m MetadataAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("effective_labels"))
}

func (m MetadataAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("generation"))
}

func (m MetadataAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("labels"))
}

func (m MetadataAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("namespace"))
}

func (m MetadataAttributes) ResourceVersion() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("resource_version"))
}

func (m MetadataAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("self_link"))
}

func (m MetadataAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("terraform_labels"))
}

func (m MetadataAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("uid"))
}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) CertificateMode() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("certificate_mode"))
}

func (s SpecAttributes) ForceOverride() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("force_override"))
}

func (s SpecAttributes) RouteName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("route_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type StatusState struct {
	MappedRouteName    string                 `json:"mapped_route_name"`
	ObservedGeneration float64                `json:"observed_generation"`
	Conditions         []ConditionsState      `json:"conditions"`
	ResourceRecords    []ResourceRecordsState `json:"resource_records"`
}

type ConditionsState struct {
	Message string `json:"message"`
	Reason  string `json:"reason"`
	Status  string `json:"status"`
	Type    string `json:"type"`
}

type ResourceRecordsState struct {
	Name   string `json:"name"`
	Rrdata string `json:"rrdata"`
	Type   string `json:"type"`
}

type MetadataState struct {
	Annotations          map[string]string `json:"annotations"`
	EffectiveAnnotations map[string]string `json:"effective_annotations"`
	EffectiveLabels      map[string]string `json:"effective_labels"`
	Generation           float64           `json:"generation"`
	Labels               map[string]string `json:"labels"`
	Namespace            string            `json:"namespace"`
	ResourceVersion      string            `json:"resource_version"`
	SelfLink             string            `json:"self_link"`
	TerraformLabels      map[string]string `json:"terraform_labels"`
	Uid                  string            `json:"uid"`
}

type SpecState struct {
	CertificateMode string `json:"certificate_mode"`
	ForceOverride   bool   `json:"force_override"`
	RouteName       string `json:"route_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
