// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataprocworkflowtemplate

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Jobs struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// PrerequisiteStepIds: list of string, optional
	PrerequisiteStepIds terra.ListValue[terra.StringValue] `hcl:"prerequisite_step_ids,attr"`
	// StepId: string, required
	StepId terra.StringValue `hcl:"step_id,attr" validate:"required"`
	// HadoopJob: optional
	HadoopJob *HadoopJob `hcl:"hadoop_job,block"`
	// HiveJob: optional
	HiveJob *HiveJob `hcl:"hive_job,block"`
	// PigJob: optional
	PigJob *PigJob `hcl:"pig_job,block"`
	// PrestoJob: optional
	PrestoJob *PrestoJob `hcl:"presto_job,block"`
	// PysparkJob: optional
	PysparkJob *PysparkJob `hcl:"pyspark_job,block"`
	// Scheduling: optional
	Scheduling *Scheduling `hcl:"scheduling,block"`
	// SparkJob: optional
	SparkJob *SparkJob `hcl:"spark_job,block"`
	// SparkRJob: optional
	SparkRJob *SparkRJob `hcl:"spark_r_job,block"`
	// SparkSqlJob: optional
	SparkSqlJob *SparkSqlJob `hcl:"spark_sql_job,block"`
}

type HadoopJob struct {
	// ArchiveUris: list of string, optional
	ArchiveUris terra.ListValue[terra.StringValue] `hcl:"archive_uris,attr"`
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// FileUris: list of string, optional
	FileUris terra.ListValue[terra.StringValue] `hcl:"file_uris,attr"`
	// JarFileUris: list of string, optional
	JarFileUris terra.ListValue[terra.StringValue] `hcl:"jar_file_uris,attr"`
	// MainClass: string, optional
	MainClass terra.StringValue `hcl:"main_class,attr"`
	// MainJarFileUri: string, optional
	MainJarFileUri terra.StringValue `hcl:"main_jar_file_uri,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// HadoopJobLoggingConfig: optional
	LoggingConfig *HadoopJobLoggingConfig `hcl:"logging_config,block"`
}

type HadoopJobLoggingConfig struct {
	// DriverLogLevels: map of string, optional
	DriverLogLevels terra.MapValue[terra.StringValue] `hcl:"driver_log_levels,attr"`
}

type HiveJob struct {
	// ContinueOnFailure: bool, optional
	ContinueOnFailure terra.BoolValue `hcl:"continue_on_failure,attr"`
	// JarFileUris: list of string, optional
	JarFileUris terra.ListValue[terra.StringValue] `hcl:"jar_file_uris,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// QueryFileUri: string, optional
	QueryFileUri terra.StringValue `hcl:"query_file_uri,attr"`
	// ScriptVariables: map of string, optional
	ScriptVariables terra.MapValue[terra.StringValue] `hcl:"script_variables,attr"`
	// HiveJobQueryList: optional
	QueryList *HiveJobQueryList `hcl:"query_list,block"`
}

type HiveJobQueryList struct {
	// Queries: list of string, required
	Queries terra.ListValue[terra.StringValue] `hcl:"queries,attr" validate:"required"`
}

type PigJob struct {
	// ContinueOnFailure: bool, optional
	ContinueOnFailure terra.BoolValue `hcl:"continue_on_failure,attr"`
	// JarFileUris: list of string, optional
	JarFileUris terra.ListValue[terra.StringValue] `hcl:"jar_file_uris,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// QueryFileUri: string, optional
	QueryFileUri terra.StringValue `hcl:"query_file_uri,attr"`
	// ScriptVariables: map of string, optional
	ScriptVariables terra.MapValue[terra.StringValue] `hcl:"script_variables,attr"`
	// PigJobLoggingConfig: optional
	LoggingConfig *PigJobLoggingConfig `hcl:"logging_config,block"`
	// PigJobQueryList: optional
	QueryList *PigJobQueryList `hcl:"query_list,block"`
}

type PigJobLoggingConfig struct {
	// DriverLogLevels: map of string, optional
	DriverLogLevels terra.MapValue[terra.StringValue] `hcl:"driver_log_levels,attr"`
}

type PigJobQueryList struct {
	// Queries: list of string, required
	Queries terra.ListValue[terra.StringValue] `hcl:"queries,attr" validate:"required"`
}

type PrestoJob struct {
	// ClientTags: list of string, optional
	ClientTags terra.ListValue[terra.StringValue] `hcl:"client_tags,attr"`
	// ContinueOnFailure: bool, optional
	ContinueOnFailure terra.BoolValue `hcl:"continue_on_failure,attr"`
	// OutputFormat: string, optional
	OutputFormat terra.StringValue `hcl:"output_format,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// QueryFileUri: string, optional
	QueryFileUri terra.StringValue `hcl:"query_file_uri,attr"`
	// PrestoJobLoggingConfig: optional
	LoggingConfig *PrestoJobLoggingConfig `hcl:"logging_config,block"`
	// PrestoJobQueryList: optional
	QueryList *PrestoJobQueryList `hcl:"query_list,block"`
}

type PrestoJobLoggingConfig struct {
	// DriverLogLevels: map of string, optional
	DriverLogLevels terra.MapValue[terra.StringValue] `hcl:"driver_log_levels,attr"`
}

type PrestoJobQueryList struct {
	// Queries: list of string, required
	Queries terra.ListValue[terra.StringValue] `hcl:"queries,attr" validate:"required"`
}

type PysparkJob struct {
	// ArchiveUris: list of string, optional
	ArchiveUris terra.ListValue[terra.StringValue] `hcl:"archive_uris,attr"`
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// FileUris: list of string, optional
	FileUris terra.ListValue[terra.StringValue] `hcl:"file_uris,attr"`
	// JarFileUris: list of string, optional
	JarFileUris terra.ListValue[terra.StringValue] `hcl:"jar_file_uris,attr"`
	// MainPythonFileUri: string, required
	MainPythonFileUri terra.StringValue `hcl:"main_python_file_uri,attr" validate:"required"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// PythonFileUris: list of string, optional
	PythonFileUris terra.ListValue[terra.StringValue] `hcl:"python_file_uris,attr"`
	// PysparkJobLoggingConfig: optional
	LoggingConfig *PysparkJobLoggingConfig `hcl:"logging_config,block"`
}

type PysparkJobLoggingConfig struct {
	// DriverLogLevels: map of string, optional
	DriverLogLevels terra.MapValue[terra.StringValue] `hcl:"driver_log_levels,attr"`
}

type Scheduling struct {
	// MaxFailuresPerHour: number, optional
	MaxFailuresPerHour terra.NumberValue `hcl:"max_failures_per_hour,attr"`
	// MaxFailuresTotal: number, optional
	MaxFailuresTotal terra.NumberValue `hcl:"max_failures_total,attr"`
}

type SparkJob struct {
	// ArchiveUris: list of string, optional
	ArchiveUris terra.ListValue[terra.StringValue] `hcl:"archive_uris,attr"`
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// FileUris: list of string, optional
	FileUris terra.ListValue[terra.StringValue] `hcl:"file_uris,attr"`
	// JarFileUris: list of string, optional
	JarFileUris terra.ListValue[terra.StringValue] `hcl:"jar_file_uris,attr"`
	// MainClass: string, optional
	MainClass terra.StringValue `hcl:"main_class,attr"`
	// MainJarFileUri: string, optional
	MainJarFileUri terra.StringValue `hcl:"main_jar_file_uri,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// SparkJobLoggingConfig: optional
	LoggingConfig *SparkJobLoggingConfig `hcl:"logging_config,block"`
}

type SparkJobLoggingConfig struct {
	// DriverLogLevels: map of string, optional
	DriverLogLevels terra.MapValue[terra.StringValue] `hcl:"driver_log_levels,attr"`
}

type SparkRJob struct {
	// ArchiveUris: list of string, optional
	ArchiveUris terra.ListValue[terra.StringValue] `hcl:"archive_uris,attr"`
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// FileUris: list of string, optional
	FileUris terra.ListValue[terra.StringValue] `hcl:"file_uris,attr"`
	// MainRFileUri: string, required
	MainRFileUri terra.StringValue `hcl:"main_r_file_uri,attr" validate:"required"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// SparkRJobLoggingConfig: optional
	LoggingConfig *SparkRJobLoggingConfig `hcl:"logging_config,block"`
}

type SparkRJobLoggingConfig struct {
	// DriverLogLevels: map of string, optional
	DriverLogLevels terra.MapValue[terra.StringValue] `hcl:"driver_log_levels,attr"`
}

type SparkSqlJob struct {
	// JarFileUris: list of string, optional
	JarFileUris terra.ListValue[terra.StringValue] `hcl:"jar_file_uris,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// QueryFileUri: string, optional
	QueryFileUri terra.StringValue `hcl:"query_file_uri,attr"`
	// ScriptVariables: map of string, optional
	ScriptVariables terra.MapValue[terra.StringValue] `hcl:"script_variables,attr"`
	// SparkSqlJobLoggingConfig: optional
	LoggingConfig *SparkSqlJobLoggingConfig `hcl:"logging_config,block"`
	// SparkSqlJobQueryList: optional
	QueryList *SparkSqlJobQueryList `hcl:"query_list,block"`
}

type SparkSqlJobLoggingConfig struct {
	// DriverLogLevels: map of string, optional
	DriverLogLevels terra.MapValue[terra.StringValue] `hcl:"driver_log_levels,attr"`
}

type SparkSqlJobQueryList struct {
	// Queries: list of string, required
	Queries terra.ListValue[terra.StringValue] `hcl:"queries,attr" validate:"required"`
}

type Parameters struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Fields: list of string, required
	Fields terra.ListValue[terra.StringValue] `hcl:"fields,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Validation: optional
	Validation *Validation `hcl:"validation,block"`
}

type Validation struct {
	// Regex: optional
	Regex *Regex `hcl:"regex,block"`
	// Values: optional
	Values *Values `hcl:"values,block"`
}

type Regex struct {
	// Regexes: list of string, required
	Regexes terra.ListValue[terra.StringValue] `hcl:"regexes,attr" validate:"required"`
}

type Values struct {
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type Placement struct {
	// ClusterSelector: optional
	ClusterSelector *ClusterSelector `hcl:"cluster_selector,block"`
	// ManagedCluster: optional
	ManagedCluster *ManagedCluster `hcl:"managed_cluster,block"`
}

type ClusterSelector struct {
	// ClusterLabels: map of string, required
	ClusterLabels terra.MapValue[terra.StringValue] `hcl:"cluster_labels,attr" validate:"required"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
}

type ManagedCluster struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Config: required
	Config *Config `hcl:"config,block" validate:"required"`
}

type Config struct {
	// StagingBucket: string, optional
	StagingBucket terra.StringValue `hcl:"staging_bucket,attr"`
	// TempBucket: string, optional
	TempBucket terra.StringValue `hcl:"temp_bucket,attr"`
	// AutoscalingConfig: optional
	AutoscalingConfig *AutoscalingConfig `hcl:"autoscaling_config,block"`
	// EncryptionConfig: optional
	EncryptionConfig *EncryptionConfig `hcl:"encryption_config,block"`
	// EndpointConfig: optional
	EndpointConfig *EndpointConfig `hcl:"endpoint_config,block"`
	// GceClusterConfig: optional
	GceClusterConfig *GceClusterConfig `hcl:"gce_cluster_config,block"`
	// GkeClusterConfig: optional
	GkeClusterConfig *GkeClusterConfig `hcl:"gke_cluster_config,block"`
	// InitializationActions: min=0
	InitializationActions []InitializationActions `hcl:"initialization_actions,block" validate:"min=0"`
	// LifecycleConfig: optional
	LifecycleConfig *LifecycleConfig `hcl:"lifecycle_config,block"`
	// MasterConfig: optional
	MasterConfig *MasterConfig `hcl:"master_config,block"`
	// MetastoreConfig: optional
	MetastoreConfig *MetastoreConfig `hcl:"metastore_config,block"`
	// SecondaryWorkerConfig: optional
	SecondaryWorkerConfig *SecondaryWorkerConfig `hcl:"secondary_worker_config,block"`
	// SecurityConfig: optional
	SecurityConfig *SecurityConfig `hcl:"security_config,block"`
	// SoftwareConfig: optional
	SoftwareConfig *SoftwareConfig `hcl:"software_config,block"`
	// WorkerConfig: optional
	WorkerConfig *WorkerConfig `hcl:"worker_config,block"`
}

type AutoscalingConfig struct {
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
}

type EncryptionConfig struct {
	// GcePdKmsKeyName: string, optional
	GcePdKmsKeyName terra.StringValue `hcl:"gce_pd_kms_key_name,attr"`
}

type EndpointConfig struct {
	// EnableHttpPortAccess: bool, optional
	EnableHttpPortAccess terra.BoolValue `hcl:"enable_http_port_access,attr"`
}

type GceClusterConfig struct {
	// InternalIpOnly: bool, optional
	InternalIpOnly terra.BoolValue `hcl:"internal_ip_only,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// PrivateIpv6GoogleAccess: string, optional
	PrivateIpv6GoogleAccess terra.StringValue `hcl:"private_ipv6_google_access,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// ServiceAccountScopes: list of string, optional
	ServiceAccountScopes terra.ListValue[terra.StringValue] `hcl:"service_account_scopes,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// Tags: set of string, optional
	Tags terra.SetValue[terra.StringValue] `hcl:"tags,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// NodeGroupAffinity: optional
	NodeGroupAffinity *NodeGroupAffinity `hcl:"node_group_affinity,block"`
	// ReservationAffinity: optional
	ReservationAffinity *ReservationAffinity `hcl:"reservation_affinity,block"`
	// ShieldedInstanceConfig: optional
	ShieldedInstanceConfig *ShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
}

type NodeGroupAffinity struct {
	// NodeGroup: string, required
	NodeGroup terra.StringValue `hcl:"node_group,attr" validate:"required"`
}

type ReservationAffinity struct {
	// ConsumeReservationType: string, optional
	ConsumeReservationType terra.StringValue `hcl:"consume_reservation_type,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Values: list of string, optional
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr"`
}

type ShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
	// EnableVtpm: bool, optional
	EnableVtpm terra.BoolValue `hcl:"enable_vtpm,attr"`
}

type GkeClusterConfig struct {
	// NamespacedGkeDeploymentTarget: optional
	NamespacedGkeDeploymentTarget *NamespacedGkeDeploymentTarget `hcl:"namespaced_gke_deployment_target,block"`
}

type NamespacedGkeDeploymentTarget struct {
	// ClusterNamespace: string, optional
	ClusterNamespace terra.StringValue `hcl:"cluster_namespace,attr"`
	// TargetGkeCluster: string, optional
	TargetGkeCluster terra.StringValue `hcl:"target_gke_cluster,attr"`
}

type InitializationActions struct {
	// ExecutableFile: string, optional
	ExecutableFile terra.StringValue `hcl:"executable_file,attr"`
	// ExecutionTimeout: string, optional
	ExecutionTimeout terra.StringValue `hcl:"execution_timeout,attr"`
}

type LifecycleConfig struct {
	// AutoDeleteTime: string, optional
	AutoDeleteTime terra.StringValue `hcl:"auto_delete_time,attr"`
	// AutoDeleteTtl: string, optional
	AutoDeleteTtl terra.StringValue `hcl:"auto_delete_ttl,attr"`
	// IdleDeleteTtl: string, optional
	IdleDeleteTtl terra.StringValue `hcl:"idle_delete_ttl,attr"`
}

type MasterConfig struct {
	// Image: string, optional
	Image terra.StringValue `hcl:"image,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NumInstances: number, optional
	NumInstances terra.NumberValue `hcl:"num_instances,attr"`
	// Preemptibility: string, optional
	Preemptibility terra.StringValue `hcl:"preemptibility,attr"`
	// MasterConfigManagedGroupConfig: min=0
	ManagedGroupConfig []MasterConfigManagedGroupConfig `hcl:"managed_group_config,block" validate:"min=0"`
	// MasterConfigAccelerators: min=0
	Accelerators []MasterConfigAccelerators `hcl:"accelerators,block" validate:"min=0"`
	// MasterConfigDiskConfig: optional
	DiskConfig *MasterConfigDiskConfig `hcl:"disk_config,block"`
}

type MasterConfigManagedGroupConfig struct{}

type MasterConfigAccelerators struct {
	// AcceleratorCount: number, optional
	AcceleratorCount terra.NumberValue `hcl:"accelerator_count,attr"`
	// AcceleratorType: string, optional
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr"`
}

type MasterConfigDiskConfig struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// BootDiskType: string, optional
	BootDiskType terra.StringValue `hcl:"boot_disk_type,attr"`
	// NumLocalSsds: number, optional
	NumLocalSsds terra.NumberValue `hcl:"num_local_ssds,attr"`
}

type MetastoreConfig struct {
	// DataprocMetastoreService: string, required
	DataprocMetastoreService terra.StringValue `hcl:"dataproc_metastore_service,attr" validate:"required"`
}

type SecondaryWorkerConfig struct {
	// Image: string, optional
	Image terra.StringValue `hcl:"image,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NumInstances: number, optional
	NumInstances terra.NumberValue `hcl:"num_instances,attr"`
	// Preemptibility: string, optional
	Preemptibility terra.StringValue `hcl:"preemptibility,attr"`
	// SecondaryWorkerConfigManagedGroupConfig: min=0
	ManagedGroupConfig []SecondaryWorkerConfigManagedGroupConfig `hcl:"managed_group_config,block" validate:"min=0"`
	// SecondaryWorkerConfigAccelerators: min=0
	Accelerators []SecondaryWorkerConfigAccelerators `hcl:"accelerators,block" validate:"min=0"`
	// SecondaryWorkerConfigDiskConfig: optional
	DiskConfig *SecondaryWorkerConfigDiskConfig `hcl:"disk_config,block"`
}

type SecondaryWorkerConfigManagedGroupConfig struct{}

type SecondaryWorkerConfigAccelerators struct {
	// AcceleratorCount: number, optional
	AcceleratorCount terra.NumberValue `hcl:"accelerator_count,attr"`
	// AcceleratorType: string, optional
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr"`
}

type SecondaryWorkerConfigDiskConfig struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// BootDiskType: string, optional
	BootDiskType terra.StringValue `hcl:"boot_disk_type,attr"`
	// NumLocalSsds: number, optional
	NumLocalSsds terra.NumberValue `hcl:"num_local_ssds,attr"`
}

type SecurityConfig struct {
	// KerberosConfig: optional
	KerberosConfig *KerberosConfig `hcl:"kerberos_config,block"`
}

type KerberosConfig struct {
	// CrossRealmTrustAdminServer: string, optional
	CrossRealmTrustAdminServer terra.StringValue `hcl:"cross_realm_trust_admin_server,attr"`
	// CrossRealmTrustKdc: string, optional
	CrossRealmTrustKdc terra.StringValue `hcl:"cross_realm_trust_kdc,attr"`
	// CrossRealmTrustRealm: string, optional
	CrossRealmTrustRealm terra.StringValue `hcl:"cross_realm_trust_realm,attr"`
	// CrossRealmTrustSharedPassword: string, optional
	CrossRealmTrustSharedPassword terra.StringValue `hcl:"cross_realm_trust_shared_password,attr"`
	// EnableKerberos: bool, optional
	EnableKerberos terra.BoolValue `hcl:"enable_kerberos,attr"`
	// KdcDbKey: string, optional
	KdcDbKey terra.StringValue `hcl:"kdc_db_key,attr"`
	// KeyPassword: string, optional
	KeyPassword terra.StringValue `hcl:"key_password,attr"`
	// Keystore: string, optional
	Keystore terra.StringValue `hcl:"keystore,attr"`
	// KeystorePassword: string, optional
	KeystorePassword terra.StringValue `hcl:"keystore_password,attr"`
	// KmsKey: string, optional
	KmsKey terra.StringValue `hcl:"kms_key,attr"`
	// Realm: string, optional
	Realm terra.StringValue `hcl:"realm,attr"`
	// RootPrincipalPassword: string, optional
	RootPrincipalPassword terra.StringValue `hcl:"root_principal_password,attr"`
	// TgtLifetimeHours: number, optional
	TgtLifetimeHours terra.NumberValue `hcl:"tgt_lifetime_hours,attr"`
	// Truststore: string, optional
	Truststore terra.StringValue `hcl:"truststore,attr"`
	// TruststorePassword: string, optional
	TruststorePassword terra.StringValue `hcl:"truststore_password,attr"`
}

type SoftwareConfig struct {
	// ImageVersion: string, optional
	ImageVersion terra.StringValue `hcl:"image_version,attr"`
	// OptionalComponents: list of string, optional
	OptionalComponents terra.ListValue[terra.StringValue] `hcl:"optional_components,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type WorkerConfig struct {
	// Image: string, optional
	Image terra.StringValue `hcl:"image,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NumInstances: number, optional
	NumInstances terra.NumberValue `hcl:"num_instances,attr"`
	// Preemptibility: string, optional
	Preemptibility terra.StringValue `hcl:"preemptibility,attr"`
	// WorkerConfigManagedGroupConfig: min=0
	ManagedGroupConfig []WorkerConfigManagedGroupConfig `hcl:"managed_group_config,block" validate:"min=0"`
	// WorkerConfigAccelerators: min=0
	Accelerators []WorkerConfigAccelerators `hcl:"accelerators,block" validate:"min=0"`
	// WorkerConfigDiskConfig: optional
	DiskConfig *WorkerConfigDiskConfig `hcl:"disk_config,block"`
}

type WorkerConfigManagedGroupConfig struct{}

type WorkerConfigAccelerators struct {
	// AcceleratorCount: number, optional
	AcceleratorCount terra.NumberValue `hcl:"accelerator_count,attr"`
	// AcceleratorType: string, optional
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr"`
}

type WorkerConfigDiskConfig struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// BootDiskType: string, optional
	BootDiskType terra.StringValue `hcl:"boot_disk_type,attr"`
	// NumLocalSsds: number, optional
	NumLocalSsds terra.NumberValue `hcl:"num_local_ssds,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type JobsAttributes struct {
	ref terra.Reference
}

func (j JobsAttributes) InternalRef() (terra.Reference, error) {
	return j.ref, nil
}

func (j JobsAttributes) InternalWithRef(ref terra.Reference) JobsAttributes {
	return JobsAttributes{ref: ref}
}

func (j JobsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return j.ref.InternalTokens()
}

func (j JobsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](j.ref.Append("labels"))
}

func (j JobsAttributes) PrerequisiteStepIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](j.ref.Append("prerequisite_step_ids"))
}

func (j JobsAttributes) StepId() terra.StringValue {
	return terra.ReferenceAsString(j.ref.Append("step_id"))
}

func (j JobsAttributes) HadoopJob() terra.ListValue[HadoopJobAttributes] {
	return terra.ReferenceAsList[HadoopJobAttributes](j.ref.Append("hadoop_job"))
}

func (j JobsAttributes) HiveJob() terra.ListValue[HiveJobAttributes] {
	return terra.ReferenceAsList[HiveJobAttributes](j.ref.Append("hive_job"))
}

func (j JobsAttributes) PigJob() terra.ListValue[PigJobAttributes] {
	return terra.ReferenceAsList[PigJobAttributes](j.ref.Append("pig_job"))
}

func (j JobsAttributes) PrestoJob() terra.ListValue[PrestoJobAttributes] {
	return terra.ReferenceAsList[PrestoJobAttributes](j.ref.Append("presto_job"))
}

func (j JobsAttributes) PysparkJob() terra.ListValue[PysparkJobAttributes] {
	return terra.ReferenceAsList[PysparkJobAttributes](j.ref.Append("pyspark_job"))
}

func (j JobsAttributes) Scheduling() terra.ListValue[SchedulingAttributes] {
	return terra.ReferenceAsList[SchedulingAttributes](j.ref.Append("scheduling"))
}

func (j JobsAttributes) SparkJob() terra.ListValue[SparkJobAttributes] {
	return terra.ReferenceAsList[SparkJobAttributes](j.ref.Append("spark_job"))
}

func (j JobsAttributes) SparkRJob() terra.ListValue[SparkRJobAttributes] {
	return terra.ReferenceAsList[SparkRJobAttributes](j.ref.Append("spark_r_job"))
}

func (j JobsAttributes) SparkSqlJob() terra.ListValue[SparkSqlJobAttributes] {
	return terra.ReferenceAsList[SparkSqlJobAttributes](j.ref.Append("spark_sql_job"))
}

type HadoopJobAttributes struct {
	ref terra.Reference
}

func (hj HadoopJobAttributes) InternalRef() (terra.Reference, error) {
	return hj.ref, nil
}

func (hj HadoopJobAttributes) InternalWithRef(ref terra.Reference) HadoopJobAttributes {
	return HadoopJobAttributes{ref: ref}
}

func (hj HadoopJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hj.ref.InternalTokens()
}

func (hj HadoopJobAttributes) ArchiveUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hj.ref.Append("archive_uris"))
}

func (hj HadoopJobAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hj.ref.Append("args"))
}

func (hj HadoopJobAttributes) FileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hj.ref.Append("file_uris"))
}

func (hj HadoopJobAttributes) JarFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hj.ref.Append("jar_file_uris"))
}

func (hj HadoopJobAttributes) MainClass() terra.StringValue {
	return terra.ReferenceAsString(hj.ref.Append("main_class"))
}

func (hj HadoopJobAttributes) MainJarFileUri() terra.StringValue {
	return terra.ReferenceAsString(hj.ref.Append("main_jar_file_uri"))
}

func (hj HadoopJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hj.ref.Append("properties"))
}

func (hj HadoopJobAttributes) LoggingConfig() terra.ListValue[HadoopJobLoggingConfigAttributes] {
	return terra.ReferenceAsList[HadoopJobLoggingConfigAttributes](hj.ref.Append("logging_config"))
}

type HadoopJobLoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc HadoopJobLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc HadoopJobLoggingConfigAttributes) InternalWithRef(ref terra.Reference) HadoopJobLoggingConfigAttributes {
	return HadoopJobLoggingConfigAttributes{ref: ref}
}

func (lc HadoopJobLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc HadoopJobLoggingConfigAttributes) DriverLogLevels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("driver_log_levels"))
}

type HiveJobAttributes struct {
	ref terra.Reference
}

func (hj HiveJobAttributes) InternalRef() (terra.Reference, error) {
	return hj.ref, nil
}

func (hj HiveJobAttributes) InternalWithRef(ref terra.Reference) HiveJobAttributes {
	return HiveJobAttributes{ref: ref}
}

func (hj HiveJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hj.ref.InternalTokens()
}

func (hj HiveJobAttributes) ContinueOnFailure() terra.BoolValue {
	return terra.ReferenceAsBool(hj.ref.Append("continue_on_failure"))
}

func (hj HiveJobAttributes) JarFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hj.ref.Append("jar_file_uris"))
}

func (hj HiveJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hj.ref.Append("properties"))
}

func (hj HiveJobAttributes) QueryFileUri() terra.StringValue {
	return terra.ReferenceAsString(hj.ref.Append("query_file_uri"))
}

func (hj HiveJobAttributes) ScriptVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hj.ref.Append("script_variables"))
}

func (hj HiveJobAttributes) QueryList() terra.ListValue[HiveJobQueryListAttributes] {
	return terra.ReferenceAsList[HiveJobQueryListAttributes](hj.ref.Append("query_list"))
}

type HiveJobQueryListAttributes struct {
	ref terra.Reference
}

func (ql HiveJobQueryListAttributes) InternalRef() (terra.Reference, error) {
	return ql.ref, nil
}

func (ql HiveJobQueryListAttributes) InternalWithRef(ref terra.Reference) HiveJobQueryListAttributes {
	return HiveJobQueryListAttributes{ref: ref}
}

func (ql HiveJobQueryListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ql.ref.InternalTokens()
}

func (ql HiveJobQueryListAttributes) Queries() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ql.ref.Append("queries"))
}

type PigJobAttributes struct {
	ref terra.Reference
}

func (pj PigJobAttributes) InternalRef() (terra.Reference, error) {
	return pj.ref, nil
}

func (pj PigJobAttributes) InternalWithRef(ref terra.Reference) PigJobAttributes {
	return PigJobAttributes{ref: ref}
}

func (pj PigJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pj.ref.InternalTokens()
}

func (pj PigJobAttributes) ContinueOnFailure() terra.BoolValue {
	return terra.ReferenceAsBool(pj.ref.Append("continue_on_failure"))
}

func (pj PigJobAttributes) JarFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pj.ref.Append("jar_file_uris"))
}

func (pj PigJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pj.ref.Append("properties"))
}

func (pj PigJobAttributes) QueryFileUri() terra.StringValue {
	return terra.ReferenceAsString(pj.ref.Append("query_file_uri"))
}

func (pj PigJobAttributes) ScriptVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pj.ref.Append("script_variables"))
}

func (pj PigJobAttributes) LoggingConfig() terra.ListValue[PigJobLoggingConfigAttributes] {
	return terra.ReferenceAsList[PigJobLoggingConfigAttributes](pj.ref.Append("logging_config"))
}

func (pj PigJobAttributes) QueryList() terra.ListValue[PigJobQueryListAttributes] {
	return terra.ReferenceAsList[PigJobQueryListAttributes](pj.ref.Append("query_list"))
}

type PigJobLoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc PigJobLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc PigJobLoggingConfigAttributes) InternalWithRef(ref terra.Reference) PigJobLoggingConfigAttributes {
	return PigJobLoggingConfigAttributes{ref: ref}
}

func (lc PigJobLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc PigJobLoggingConfigAttributes) DriverLogLevels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("driver_log_levels"))
}

type PigJobQueryListAttributes struct {
	ref terra.Reference
}

func (ql PigJobQueryListAttributes) InternalRef() (terra.Reference, error) {
	return ql.ref, nil
}

func (ql PigJobQueryListAttributes) InternalWithRef(ref terra.Reference) PigJobQueryListAttributes {
	return PigJobQueryListAttributes{ref: ref}
}

func (ql PigJobQueryListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ql.ref.InternalTokens()
}

func (ql PigJobQueryListAttributes) Queries() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ql.ref.Append("queries"))
}

type PrestoJobAttributes struct {
	ref terra.Reference
}

func (pj PrestoJobAttributes) InternalRef() (terra.Reference, error) {
	return pj.ref, nil
}

func (pj PrestoJobAttributes) InternalWithRef(ref terra.Reference) PrestoJobAttributes {
	return PrestoJobAttributes{ref: ref}
}

func (pj PrestoJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pj.ref.InternalTokens()
}

func (pj PrestoJobAttributes) ClientTags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pj.ref.Append("client_tags"))
}

func (pj PrestoJobAttributes) ContinueOnFailure() terra.BoolValue {
	return terra.ReferenceAsBool(pj.ref.Append("continue_on_failure"))
}

func (pj PrestoJobAttributes) OutputFormat() terra.StringValue {
	return terra.ReferenceAsString(pj.ref.Append("output_format"))
}

func (pj PrestoJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pj.ref.Append("properties"))
}

func (pj PrestoJobAttributes) QueryFileUri() terra.StringValue {
	return terra.ReferenceAsString(pj.ref.Append("query_file_uri"))
}

func (pj PrestoJobAttributes) LoggingConfig() terra.ListValue[PrestoJobLoggingConfigAttributes] {
	return terra.ReferenceAsList[PrestoJobLoggingConfigAttributes](pj.ref.Append("logging_config"))
}

func (pj PrestoJobAttributes) QueryList() terra.ListValue[PrestoJobQueryListAttributes] {
	return terra.ReferenceAsList[PrestoJobQueryListAttributes](pj.ref.Append("query_list"))
}

type PrestoJobLoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc PrestoJobLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc PrestoJobLoggingConfigAttributes) InternalWithRef(ref terra.Reference) PrestoJobLoggingConfigAttributes {
	return PrestoJobLoggingConfigAttributes{ref: ref}
}

func (lc PrestoJobLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc PrestoJobLoggingConfigAttributes) DriverLogLevels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("driver_log_levels"))
}

type PrestoJobQueryListAttributes struct {
	ref terra.Reference
}

func (ql PrestoJobQueryListAttributes) InternalRef() (terra.Reference, error) {
	return ql.ref, nil
}

func (ql PrestoJobQueryListAttributes) InternalWithRef(ref terra.Reference) PrestoJobQueryListAttributes {
	return PrestoJobQueryListAttributes{ref: ref}
}

func (ql PrestoJobQueryListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ql.ref.InternalTokens()
}

func (ql PrestoJobQueryListAttributes) Queries() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ql.ref.Append("queries"))
}

type PysparkJobAttributes struct {
	ref terra.Reference
}

func (pj PysparkJobAttributes) InternalRef() (terra.Reference, error) {
	return pj.ref, nil
}

func (pj PysparkJobAttributes) InternalWithRef(ref terra.Reference) PysparkJobAttributes {
	return PysparkJobAttributes{ref: ref}
}

func (pj PysparkJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pj.ref.InternalTokens()
}

func (pj PysparkJobAttributes) ArchiveUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pj.ref.Append("archive_uris"))
}

func (pj PysparkJobAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pj.ref.Append("args"))
}

func (pj PysparkJobAttributes) FileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pj.ref.Append("file_uris"))
}

func (pj PysparkJobAttributes) JarFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pj.ref.Append("jar_file_uris"))
}

func (pj PysparkJobAttributes) MainPythonFileUri() terra.StringValue {
	return terra.ReferenceAsString(pj.ref.Append("main_python_file_uri"))
}

func (pj PysparkJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pj.ref.Append("properties"))
}

func (pj PysparkJobAttributes) PythonFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pj.ref.Append("python_file_uris"))
}

func (pj PysparkJobAttributes) LoggingConfig() terra.ListValue[PysparkJobLoggingConfigAttributes] {
	return terra.ReferenceAsList[PysparkJobLoggingConfigAttributes](pj.ref.Append("logging_config"))
}

type PysparkJobLoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc PysparkJobLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc PysparkJobLoggingConfigAttributes) InternalWithRef(ref terra.Reference) PysparkJobLoggingConfigAttributes {
	return PysparkJobLoggingConfigAttributes{ref: ref}
}

func (lc PysparkJobLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc PysparkJobLoggingConfigAttributes) DriverLogLevels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("driver_log_levels"))
}

type SchedulingAttributes struct {
	ref terra.Reference
}

func (s SchedulingAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SchedulingAttributes) InternalWithRef(ref terra.Reference) SchedulingAttributes {
	return SchedulingAttributes{ref: ref}
}

func (s SchedulingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SchedulingAttributes) MaxFailuresPerHour() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("max_failures_per_hour"))
}

func (s SchedulingAttributes) MaxFailuresTotal() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("max_failures_total"))
}

type SparkJobAttributes struct {
	ref terra.Reference
}

func (sj SparkJobAttributes) InternalRef() (terra.Reference, error) {
	return sj.ref, nil
}

func (sj SparkJobAttributes) InternalWithRef(ref terra.Reference) SparkJobAttributes {
	return SparkJobAttributes{ref: ref}
}

func (sj SparkJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sj.ref.InternalTokens()
}

func (sj SparkJobAttributes) ArchiveUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sj.ref.Append("archive_uris"))
}

func (sj SparkJobAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sj.ref.Append("args"))
}

func (sj SparkJobAttributes) FileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sj.ref.Append("file_uris"))
}

func (sj SparkJobAttributes) JarFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sj.ref.Append("jar_file_uris"))
}

func (sj SparkJobAttributes) MainClass() terra.StringValue {
	return terra.ReferenceAsString(sj.ref.Append("main_class"))
}

func (sj SparkJobAttributes) MainJarFileUri() terra.StringValue {
	return terra.ReferenceAsString(sj.ref.Append("main_jar_file_uri"))
}

func (sj SparkJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sj.ref.Append("properties"))
}

func (sj SparkJobAttributes) LoggingConfig() terra.ListValue[SparkJobLoggingConfigAttributes] {
	return terra.ReferenceAsList[SparkJobLoggingConfigAttributes](sj.ref.Append("logging_config"))
}

type SparkJobLoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc SparkJobLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc SparkJobLoggingConfigAttributes) InternalWithRef(ref terra.Reference) SparkJobLoggingConfigAttributes {
	return SparkJobLoggingConfigAttributes{ref: ref}
}

func (lc SparkJobLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc SparkJobLoggingConfigAttributes) DriverLogLevels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("driver_log_levels"))
}

type SparkRJobAttributes struct {
	ref terra.Reference
}

func (srj SparkRJobAttributes) InternalRef() (terra.Reference, error) {
	return srj.ref, nil
}

func (srj SparkRJobAttributes) InternalWithRef(ref terra.Reference) SparkRJobAttributes {
	return SparkRJobAttributes{ref: ref}
}

func (srj SparkRJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return srj.ref.InternalTokens()
}

func (srj SparkRJobAttributes) ArchiveUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](srj.ref.Append("archive_uris"))
}

func (srj SparkRJobAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](srj.ref.Append("args"))
}

func (srj SparkRJobAttributes) FileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](srj.ref.Append("file_uris"))
}

func (srj SparkRJobAttributes) MainRFileUri() terra.StringValue {
	return terra.ReferenceAsString(srj.ref.Append("main_r_file_uri"))
}

func (srj SparkRJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](srj.ref.Append("properties"))
}

func (srj SparkRJobAttributes) LoggingConfig() terra.ListValue[SparkRJobLoggingConfigAttributes] {
	return terra.ReferenceAsList[SparkRJobLoggingConfigAttributes](srj.ref.Append("logging_config"))
}

type SparkRJobLoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc SparkRJobLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc SparkRJobLoggingConfigAttributes) InternalWithRef(ref terra.Reference) SparkRJobLoggingConfigAttributes {
	return SparkRJobLoggingConfigAttributes{ref: ref}
}

func (lc SparkRJobLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc SparkRJobLoggingConfigAttributes) DriverLogLevels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("driver_log_levels"))
}

type SparkSqlJobAttributes struct {
	ref terra.Reference
}

func (ssj SparkSqlJobAttributes) InternalRef() (terra.Reference, error) {
	return ssj.ref, nil
}

func (ssj SparkSqlJobAttributes) InternalWithRef(ref terra.Reference) SparkSqlJobAttributes {
	return SparkSqlJobAttributes{ref: ref}
}

func (ssj SparkSqlJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssj.ref.InternalTokens()
}

func (ssj SparkSqlJobAttributes) JarFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ssj.ref.Append("jar_file_uris"))
}

func (ssj SparkSqlJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ssj.ref.Append("properties"))
}

func (ssj SparkSqlJobAttributes) QueryFileUri() terra.StringValue {
	return terra.ReferenceAsString(ssj.ref.Append("query_file_uri"))
}

func (ssj SparkSqlJobAttributes) ScriptVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ssj.ref.Append("script_variables"))
}

func (ssj SparkSqlJobAttributes) LoggingConfig() terra.ListValue[SparkSqlJobLoggingConfigAttributes] {
	return terra.ReferenceAsList[SparkSqlJobLoggingConfigAttributes](ssj.ref.Append("logging_config"))
}

func (ssj SparkSqlJobAttributes) QueryList() terra.ListValue[SparkSqlJobQueryListAttributes] {
	return terra.ReferenceAsList[SparkSqlJobQueryListAttributes](ssj.ref.Append("query_list"))
}

type SparkSqlJobLoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc SparkSqlJobLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc SparkSqlJobLoggingConfigAttributes) InternalWithRef(ref terra.Reference) SparkSqlJobLoggingConfigAttributes {
	return SparkSqlJobLoggingConfigAttributes{ref: ref}
}

func (lc SparkSqlJobLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc SparkSqlJobLoggingConfigAttributes) DriverLogLevels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("driver_log_levels"))
}

type SparkSqlJobQueryListAttributes struct {
	ref terra.Reference
}

func (ql SparkSqlJobQueryListAttributes) InternalRef() (terra.Reference, error) {
	return ql.ref, nil
}

func (ql SparkSqlJobQueryListAttributes) InternalWithRef(ref terra.Reference) SparkSqlJobQueryListAttributes {
	return SparkSqlJobQueryListAttributes{ref: ref}
}

func (ql SparkSqlJobQueryListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ql.ref.InternalTokens()
}

func (ql SparkSqlJobQueryListAttributes) Queries() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ql.ref.Append("queries"))
}

type ParametersAttributes struct {
	ref terra.Reference
}

func (p ParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ParametersAttributes) InternalWithRef(ref terra.Reference) ParametersAttributes {
	return ParametersAttributes{ref: ref}
}

func (p ParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ParametersAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("description"))
}

func (p ParametersAttributes) Fields() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("fields"))
}

func (p ParametersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p ParametersAttributes) Validation() terra.ListValue[ValidationAttributes] {
	return terra.ReferenceAsList[ValidationAttributes](p.ref.Append("validation"))
}

type ValidationAttributes struct {
	ref terra.Reference
}

func (v ValidationAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ValidationAttributes) InternalWithRef(ref terra.Reference) ValidationAttributes {
	return ValidationAttributes{ref: ref}
}

func (v ValidationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ValidationAttributes) Regex() terra.ListValue[RegexAttributes] {
	return terra.ReferenceAsList[RegexAttributes](v.ref.Append("regex"))
}

func (v ValidationAttributes) Values() terra.ListValue[ValuesAttributes] {
	return terra.ReferenceAsList[ValuesAttributes](v.ref.Append("values"))
}

type RegexAttributes struct {
	ref terra.Reference
}

func (r RegexAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RegexAttributes) InternalWithRef(ref terra.Reference) RegexAttributes {
	return RegexAttributes{ref: ref}
}

func (r RegexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RegexAttributes) Regexes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](r.ref.Append("regexes"))
}

type ValuesAttributes struct {
	ref terra.Reference
}

func (v ValuesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ValuesAttributes) InternalWithRef(ref terra.Reference) ValuesAttributes {
	return ValuesAttributes{ref: ref}
}

func (v ValuesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ValuesAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("values"))
}

type PlacementAttributes struct {
	ref terra.Reference
}

func (p PlacementAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PlacementAttributes) InternalWithRef(ref terra.Reference) PlacementAttributes {
	return PlacementAttributes{ref: ref}
}

func (p PlacementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PlacementAttributes) ClusterSelector() terra.ListValue[ClusterSelectorAttributes] {
	return terra.ReferenceAsList[ClusterSelectorAttributes](p.ref.Append("cluster_selector"))
}

func (p PlacementAttributes) ManagedCluster() terra.ListValue[ManagedClusterAttributes] {
	return terra.ReferenceAsList[ManagedClusterAttributes](p.ref.Append("managed_cluster"))
}

type ClusterSelectorAttributes struct {
	ref terra.Reference
}

func (cs ClusterSelectorAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs ClusterSelectorAttributes) InternalWithRef(ref terra.Reference) ClusterSelectorAttributes {
	return ClusterSelectorAttributes{ref: ref}
}

func (cs ClusterSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs ClusterSelectorAttributes) ClusterLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cs.ref.Append("cluster_labels"))
}

func (cs ClusterSelectorAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("zone"))
}

type ManagedClusterAttributes struct {
	ref terra.Reference
}

func (mc ManagedClusterAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc ManagedClusterAttributes) InternalWithRef(ref terra.Reference) ManagedClusterAttributes {
	return ManagedClusterAttributes{ref: ref}
}

func (mc ManagedClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc ManagedClusterAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("cluster_name"))
}

func (mc ManagedClusterAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](mc.ref.Append("labels"))
}

func (mc ManagedClusterAttributes) Config() terra.ListValue[ConfigAttributes] {
	return terra.ReferenceAsList[ConfigAttributes](mc.ref.Append("config"))
}

type ConfigAttributes struct {
	ref terra.Reference
}

func (c ConfigAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigAttributes) InternalWithRef(ref terra.Reference) ConfigAttributes {
	return ConfigAttributes{ref: ref}
}

func (c ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigAttributes) StagingBucket() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("staging_bucket"))
}

func (c ConfigAttributes) TempBucket() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("temp_bucket"))
}

func (c ConfigAttributes) AutoscalingConfig() terra.ListValue[AutoscalingConfigAttributes] {
	return terra.ReferenceAsList[AutoscalingConfigAttributes](c.ref.Append("autoscaling_config"))
}

func (c ConfigAttributes) EncryptionConfig() terra.ListValue[EncryptionConfigAttributes] {
	return terra.ReferenceAsList[EncryptionConfigAttributes](c.ref.Append("encryption_config"))
}

func (c ConfigAttributes) EndpointConfig() terra.ListValue[EndpointConfigAttributes] {
	return terra.ReferenceAsList[EndpointConfigAttributes](c.ref.Append("endpoint_config"))
}

func (c ConfigAttributes) GceClusterConfig() terra.ListValue[GceClusterConfigAttributes] {
	return terra.ReferenceAsList[GceClusterConfigAttributes](c.ref.Append("gce_cluster_config"))
}

func (c ConfigAttributes) GkeClusterConfig() terra.ListValue[GkeClusterConfigAttributes] {
	return terra.ReferenceAsList[GkeClusterConfigAttributes](c.ref.Append("gke_cluster_config"))
}

func (c ConfigAttributes) InitializationActions() terra.ListValue[InitializationActionsAttributes] {
	return terra.ReferenceAsList[InitializationActionsAttributes](c.ref.Append("initialization_actions"))
}

func (c ConfigAttributes) LifecycleConfig() terra.ListValue[LifecycleConfigAttributes] {
	return terra.ReferenceAsList[LifecycleConfigAttributes](c.ref.Append("lifecycle_config"))
}

func (c ConfigAttributes) MasterConfig() terra.ListValue[MasterConfigAttributes] {
	return terra.ReferenceAsList[MasterConfigAttributes](c.ref.Append("master_config"))
}

func (c ConfigAttributes) MetastoreConfig() terra.ListValue[MetastoreConfigAttributes] {
	return terra.ReferenceAsList[MetastoreConfigAttributes](c.ref.Append("metastore_config"))
}

func (c ConfigAttributes) SecondaryWorkerConfig() terra.ListValue[SecondaryWorkerConfigAttributes] {
	return terra.ReferenceAsList[SecondaryWorkerConfigAttributes](c.ref.Append("secondary_worker_config"))
}

func (c ConfigAttributes) SecurityConfig() terra.ListValue[SecurityConfigAttributes] {
	return terra.ReferenceAsList[SecurityConfigAttributes](c.ref.Append("security_config"))
}

func (c ConfigAttributes) SoftwareConfig() terra.ListValue[SoftwareConfigAttributes] {
	return terra.ReferenceAsList[SoftwareConfigAttributes](c.ref.Append("software_config"))
}

func (c ConfigAttributes) WorkerConfig() terra.ListValue[WorkerConfigAttributes] {
	return terra.ReferenceAsList[WorkerConfigAttributes](c.ref.Append("worker_config"))
}

type AutoscalingConfigAttributes struct {
	ref terra.Reference
}

func (ac AutoscalingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AutoscalingConfigAttributes) InternalWithRef(ref terra.Reference) AutoscalingConfigAttributes {
	return AutoscalingConfigAttributes{ref: ref}
}

func (ac AutoscalingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AutoscalingConfigAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("policy"))
}

type EncryptionConfigAttributes struct {
	ref terra.Reference
}

func (ec EncryptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EncryptionConfigAttributes) InternalWithRef(ref terra.Reference) EncryptionConfigAttributes {
	return EncryptionConfigAttributes{ref: ref}
}

func (ec EncryptionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EncryptionConfigAttributes) GcePdKmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("gce_pd_kms_key_name"))
}

type EndpointConfigAttributes struct {
	ref terra.Reference
}

func (ec EndpointConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EndpointConfigAttributes) InternalWithRef(ref terra.Reference) EndpointConfigAttributes {
	return EndpointConfigAttributes{ref: ref}
}

func (ec EndpointConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EndpointConfigAttributes) EnableHttpPortAccess() terra.BoolValue {
	return terra.ReferenceAsBool(ec.ref.Append("enable_http_port_access"))
}

func (ec EndpointConfigAttributes) HttpPorts() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ec.ref.Append("http_ports"))
}

type GceClusterConfigAttributes struct {
	ref terra.Reference
}

func (gcc GceClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return gcc.ref, nil
}

func (gcc GceClusterConfigAttributes) InternalWithRef(ref terra.Reference) GceClusterConfigAttributes {
	return GceClusterConfigAttributes{ref: ref}
}

func (gcc GceClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gcc.ref.InternalTokens()
}

func (gcc GceClusterConfigAttributes) InternalIpOnly() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("internal_ip_only"))
}

func (gcc GceClusterConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcc.ref.Append("metadata"))
}

func (gcc GceClusterConfigAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("network"))
}

func (gcc GceClusterConfigAttributes) PrivateIpv6GoogleAccess() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("private_ipv6_google_access"))
}

func (gcc GceClusterConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("service_account"))
}

func (gcc GceClusterConfigAttributes) ServiceAccountScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcc.ref.Append("service_account_scopes"))
}

func (gcc GceClusterConfigAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("subnetwork"))
}

func (gcc GceClusterConfigAttributes) Tags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gcc.ref.Append("tags"))
}

func (gcc GceClusterConfigAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("zone"))
}

func (gcc GceClusterConfigAttributes) NodeGroupAffinity() terra.ListValue[NodeGroupAffinityAttributes] {
	return terra.ReferenceAsList[NodeGroupAffinityAttributes](gcc.ref.Append("node_group_affinity"))
}

func (gcc GceClusterConfigAttributes) ReservationAffinity() terra.ListValue[ReservationAffinityAttributes] {
	return terra.ReferenceAsList[ReservationAffinityAttributes](gcc.ref.Append("reservation_affinity"))
}

func (gcc GceClusterConfigAttributes) ShieldedInstanceConfig() terra.ListValue[ShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[ShieldedInstanceConfigAttributes](gcc.ref.Append("shielded_instance_config"))
}

type NodeGroupAffinityAttributes struct {
	ref terra.Reference
}

func (nga NodeGroupAffinityAttributes) InternalRef() (terra.Reference, error) {
	return nga.ref, nil
}

func (nga NodeGroupAffinityAttributes) InternalWithRef(ref terra.Reference) NodeGroupAffinityAttributes {
	return NodeGroupAffinityAttributes{ref: ref}
}

func (nga NodeGroupAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nga.ref.InternalTokens()
}

func (nga NodeGroupAffinityAttributes) NodeGroup() terra.StringValue {
	return terra.ReferenceAsString(nga.ref.Append("node_group"))
}

type ReservationAffinityAttributes struct {
	ref terra.Reference
}

func (ra ReservationAffinityAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra ReservationAffinityAttributes) InternalWithRef(ref terra.Reference) ReservationAffinityAttributes {
	return ReservationAffinityAttributes{ref: ref}
}

func (ra ReservationAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra ReservationAffinityAttributes) ConsumeReservationType() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("consume_reservation_type"))
}

func (ra ReservationAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("key"))
}

func (ra ReservationAffinityAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ra.ref.Append("values"))
}

type ShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic ShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic ShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) ShieldedInstanceConfigAttributes {
	return ShieldedInstanceConfigAttributes{ref: ref}
}

func (sic ShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic ShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic ShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

func (sic ShieldedInstanceConfigAttributes) EnableVtpm() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_vtpm"))
}

type GkeClusterConfigAttributes struct {
	ref terra.Reference
}

func (gcc GkeClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return gcc.ref, nil
}

func (gcc GkeClusterConfigAttributes) InternalWithRef(ref terra.Reference) GkeClusterConfigAttributes {
	return GkeClusterConfigAttributes{ref: ref}
}

func (gcc GkeClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gcc.ref.InternalTokens()
}

func (gcc GkeClusterConfigAttributes) NamespacedGkeDeploymentTarget() terra.ListValue[NamespacedGkeDeploymentTargetAttributes] {
	return terra.ReferenceAsList[NamespacedGkeDeploymentTargetAttributes](gcc.ref.Append("namespaced_gke_deployment_target"))
}

type NamespacedGkeDeploymentTargetAttributes struct {
	ref terra.Reference
}

func (ngdt NamespacedGkeDeploymentTargetAttributes) InternalRef() (terra.Reference, error) {
	return ngdt.ref, nil
}

func (ngdt NamespacedGkeDeploymentTargetAttributes) InternalWithRef(ref terra.Reference) NamespacedGkeDeploymentTargetAttributes {
	return NamespacedGkeDeploymentTargetAttributes{ref: ref}
}

func (ngdt NamespacedGkeDeploymentTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ngdt.ref.InternalTokens()
}

func (ngdt NamespacedGkeDeploymentTargetAttributes) ClusterNamespace() terra.StringValue {
	return terra.ReferenceAsString(ngdt.ref.Append("cluster_namespace"))
}

func (ngdt NamespacedGkeDeploymentTargetAttributes) TargetGkeCluster() terra.StringValue {
	return terra.ReferenceAsString(ngdt.ref.Append("target_gke_cluster"))
}

type InitializationActionsAttributes struct {
	ref terra.Reference
}

func (ia InitializationActionsAttributes) InternalRef() (terra.Reference, error) {
	return ia.ref, nil
}

func (ia InitializationActionsAttributes) InternalWithRef(ref terra.Reference) InitializationActionsAttributes {
	return InitializationActionsAttributes{ref: ref}
}

func (ia InitializationActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ia.ref.InternalTokens()
}

func (ia InitializationActionsAttributes) ExecutableFile() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("executable_file"))
}

func (ia InitializationActionsAttributes) ExecutionTimeout() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("execution_timeout"))
}

type LifecycleConfigAttributes struct {
	ref terra.Reference
}

func (lc LifecycleConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LifecycleConfigAttributes) InternalWithRef(ref terra.Reference) LifecycleConfigAttributes {
	return LifecycleConfigAttributes{ref: ref}
}

func (lc LifecycleConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LifecycleConfigAttributes) AutoDeleteTime() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("auto_delete_time"))
}

func (lc LifecycleConfigAttributes) AutoDeleteTtl() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("auto_delete_ttl"))
}

func (lc LifecycleConfigAttributes) IdleDeleteTtl() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("idle_delete_ttl"))
}

func (lc LifecycleConfigAttributes) IdleStartTime() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("idle_start_time"))
}

type MasterConfigAttributes struct {
	ref terra.Reference
}

func (mc MasterConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MasterConfigAttributes) InternalWithRef(ref terra.Reference) MasterConfigAttributes {
	return MasterConfigAttributes{ref: ref}
}

func (mc MasterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MasterConfigAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("image"))
}

func (mc MasterConfigAttributes) InstanceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("instance_names"))
}

func (mc MasterConfigAttributes) IsPreemptible() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("is_preemptible"))
}

func (mc MasterConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("machine_type"))
}

func (mc MasterConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("min_cpu_platform"))
}

func (mc MasterConfigAttributes) NumInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("num_instances"))
}

func (mc MasterConfigAttributes) Preemptibility() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("preemptibility"))
}

func (mc MasterConfigAttributes) ManagedGroupConfig() terra.ListValue[MasterConfigManagedGroupConfigAttributes] {
	return terra.ReferenceAsList[MasterConfigManagedGroupConfigAttributes](mc.ref.Append("managed_group_config"))
}

func (mc MasterConfigAttributes) Accelerators() terra.ListValue[MasterConfigAcceleratorsAttributes] {
	return terra.ReferenceAsList[MasterConfigAcceleratorsAttributes](mc.ref.Append("accelerators"))
}

func (mc MasterConfigAttributes) DiskConfig() terra.ListValue[MasterConfigDiskConfigAttributes] {
	return terra.ReferenceAsList[MasterConfigDiskConfigAttributes](mc.ref.Append("disk_config"))
}

type MasterConfigManagedGroupConfigAttributes struct {
	ref terra.Reference
}

func (mgc MasterConfigManagedGroupConfigAttributes) InternalRef() (terra.Reference, error) {
	return mgc.ref, nil
}

func (mgc MasterConfigManagedGroupConfigAttributes) InternalWithRef(ref terra.Reference) MasterConfigManagedGroupConfigAttributes {
	return MasterConfigManagedGroupConfigAttributes{ref: ref}
}

func (mgc MasterConfigManagedGroupConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mgc.ref.InternalTokens()
}

func (mgc MasterConfigManagedGroupConfigAttributes) InstanceGroupManagerName() terra.StringValue {
	return terra.ReferenceAsString(mgc.ref.Append("instance_group_manager_name"))
}

func (mgc MasterConfigManagedGroupConfigAttributes) InstanceTemplateName() terra.StringValue {
	return terra.ReferenceAsString(mgc.ref.Append("instance_template_name"))
}

type MasterConfigAcceleratorsAttributes struct {
	ref terra.Reference
}

func (a MasterConfigAcceleratorsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a MasterConfigAcceleratorsAttributes) InternalWithRef(ref terra.Reference) MasterConfigAcceleratorsAttributes {
	return MasterConfigAcceleratorsAttributes{ref: ref}
}

func (a MasterConfigAcceleratorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a MasterConfigAcceleratorsAttributes) AcceleratorCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("accelerator_count"))
}

func (a MasterConfigAcceleratorsAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("accelerator_type"))
}

type MasterConfigDiskConfigAttributes struct {
	ref terra.Reference
}

func (dc MasterConfigDiskConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc MasterConfigDiskConfigAttributes) InternalWithRef(ref terra.Reference) MasterConfigDiskConfigAttributes {
	return MasterConfigDiskConfigAttributes{ref: ref}
}

func (dc MasterConfigDiskConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc MasterConfigDiskConfigAttributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("boot_disk_size_gb"))
}

func (dc MasterConfigDiskConfigAttributes) BootDiskType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("boot_disk_type"))
}

func (dc MasterConfigDiskConfigAttributes) NumLocalSsds() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("num_local_ssds"))
}

type MetastoreConfigAttributes struct {
	ref terra.Reference
}

func (mc MetastoreConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MetastoreConfigAttributes) InternalWithRef(ref terra.Reference) MetastoreConfigAttributes {
	return MetastoreConfigAttributes{ref: ref}
}

func (mc MetastoreConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MetastoreConfigAttributes) DataprocMetastoreService() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("dataproc_metastore_service"))
}

type SecondaryWorkerConfigAttributes struct {
	ref terra.Reference
}

func (swc SecondaryWorkerConfigAttributes) InternalRef() (terra.Reference, error) {
	return swc.ref, nil
}

func (swc SecondaryWorkerConfigAttributes) InternalWithRef(ref terra.Reference) SecondaryWorkerConfigAttributes {
	return SecondaryWorkerConfigAttributes{ref: ref}
}

func (swc SecondaryWorkerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return swc.ref.InternalTokens()
}

func (swc SecondaryWorkerConfigAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(swc.ref.Append("image"))
}

func (swc SecondaryWorkerConfigAttributes) InstanceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](swc.ref.Append("instance_names"))
}

func (swc SecondaryWorkerConfigAttributes) IsPreemptible() terra.BoolValue {
	return terra.ReferenceAsBool(swc.ref.Append("is_preemptible"))
}

func (swc SecondaryWorkerConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(swc.ref.Append("machine_type"))
}

func (swc SecondaryWorkerConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(swc.ref.Append("min_cpu_platform"))
}

func (swc SecondaryWorkerConfigAttributes) NumInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(swc.ref.Append("num_instances"))
}

func (swc SecondaryWorkerConfigAttributes) Preemptibility() terra.StringValue {
	return terra.ReferenceAsString(swc.ref.Append("preemptibility"))
}

func (swc SecondaryWorkerConfigAttributes) ManagedGroupConfig() terra.ListValue[SecondaryWorkerConfigManagedGroupConfigAttributes] {
	return terra.ReferenceAsList[SecondaryWorkerConfigManagedGroupConfigAttributes](swc.ref.Append("managed_group_config"))
}

func (swc SecondaryWorkerConfigAttributes) Accelerators() terra.ListValue[SecondaryWorkerConfigAcceleratorsAttributes] {
	return terra.ReferenceAsList[SecondaryWorkerConfigAcceleratorsAttributes](swc.ref.Append("accelerators"))
}

func (swc SecondaryWorkerConfigAttributes) DiskConfig() terra.ListValue[SecondaryWorkerConfigDiskConfigAttributes] {
	return terra.ReferenceAsList[SecondaryWorkerConfigDiskConfigAttributes](swc.ref.Append("disk_config"))
}

type SecondaryWorkerConfigManagedGroupConfigAttributes struct {
	ref terra.Reference
}

func (mgc SecondaryWorkerConfigManagedGroupConfigAttributes) InternalRef() (terra.Reference, error) {
	return mgc.ref, nil
}

func (mgc SecondaryWorkerConfigManagedGroupConfigAttributes) InternalWithRef(ref terra.Reference) SecondaryWorkerConfigManagedGroupConfigAttributes {
	return SecondaryWorkerConfigManagedGroupConfigAttributes{ref: ref}
}

func (mgc SecondaryWorkerConfigManagedGroupConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mgc.ref.InternalTokens()
}

func (mgc SecondaryWorkerConfigManagedGroupConfigAttributes) InstanceGroupManagerName() terra.StringValue {
	return terra.ReferenceAsString(mgc.ref.Append("instance_group_manager_name"))
}

func (mgc SecondaryWorkerConfigManagedGroupConfigAttributes) InstanceTemplateName() terra.StringValue {
	return terra.ReferenceAsString(mgc.ref.Append("instance_template_name"))
}

type SecondaryWorkerConfigAcceleratorsAttributes struct {
	ref terra.Reference
}

func (a SecondaryWorkerConfigAcceleratorsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a SecondaryWorkerConfigAcceleratorsAttributes) InternalWithRef(ref terra.Reference) SecondaryWorkerConfigAcceleratorsAttributes {
	return SecondaryWorkerConfigAcceleratorsAttributes{ref: ref}
}

func (a SecondaryWorkerConfigAcceleratorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a SecondaryWorkerConfigAcceleratorsAttributes) AcceleratorCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("accelerator_count"))
}

func (a SecondaryWorkerConfigAcceleratorsAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("accelerator_type"))
}

type SecondaryWorkerConfigDiskConfigAttributes struct {
	ref terra.Reference
}

func (dc SecondaryWorkerConfigDiskConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc SecondaryWorkerConfigDiskConfigAttributes) InternalWithRef(ref terra.Reference) SecondaryWorkerConfigDiskConfigAttributes {
	return SecondaryWorkerConfigDiskConfigAttributes{ref: ref}
}

func (dc SecondaryWorkerConfigDiskConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc SecondaryWorkerConfigDiskConfigAttributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("boot_disk_size_gb"))
}

func (dc SecondaryWorkerConfigDiskConfigAttributes) BootDiskType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("boot_disk_type"))
}

func (dc SecondaryWorkerConfigDiskConfigAttributes) NumLocalSsds() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("num_local_ssds"))
}

type SecurityConfigAttributes struct {
	ref terra.Reference
}

func (sc SecurityConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SecurityConfigAttributes) InternalWithRef(ref terra.Reference) SecurityConfigAttributes {
	return SecurityConfigAttributes{ref: ref}
}

func (sc SecurityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SecurityConfigAttributes) KerberosConfig() terra.ListValue[KerberosConfigAttributes] {
	return terra.ReferenceAsList[KerberosConfigAttributes](sc.ref.Append("kerberos_config"))
}

type KerberosConfigAttributes struct {
	ref terra.Reference
}

func (kc KerberosConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc KerberosConfigAttributes) InternalWithRef(ref terra.Reference) KerberosConfigAttributes {
	return KerberosConfigAttributes{ref: ref}
}

func (kc KerberosConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc KerberosConfigAttributes) CrossRealmTrustAdminServer() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_admin_server"))
}

func (kc KerberosConfigAttributes) CrossRealmTrustKdc() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_kdc"))
}

func (kc KerberosConfigAttributes) CrossRealmTrustRealm() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_realm"))
}

func (kc KerberosConfigAttributes) CrossRealmTrustSharedPassword() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_shared_password"))
}

func (kc KerberosConfigAttributes) EnableKerberos() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("enable_kerberos"))
}

func (kc KerberosConfigAttributes) KdcDbKey() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("kdc_db_key"))
}

func (kc KerberosConfigAttributes) KeyPassword() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("key_password"))
}

func (kc KerberosConfigAttributes) Keystore() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("keystore"))
}

func (kc KerberosConfigAttributes) KeystorePassword() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("keystore_password"))
}

func (kc KerberosConfigAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("kms_key"))
}

func (kc KerberosConfigAttributes) Realm() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("realm"))
}

func (kc KerberosConfigAttributes) RootPrincipalPassword() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("root_principal_password"))
}

func (kc KerberosConfigAttributes) TgtLifetimeHours() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("tgt_lifetime_hours"))
}

func (kc KerberosConfigAttributes) Truststore() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("truststore"))
}

func (kc KerberosConfigAttributes) TruststorePassword() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("truststore_password"))
}

type SoftwareConfigAttributes struct {
	ref terra.Reference
}

func (sc SoftwareConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SoftwareConfigAttributes) InternalWithRef(ref terra.Reference) SoftwareConfigAttributes {
	return SoftwareConfigAttributes{ref: ref}
}

func (sc SoftwareConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SoftwareConfigAttributes) ImageVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("image_version"))
}

func (sc SoftwareConfigAttributes) OptionalComponents() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sc.ref.Append("optional_components"))
}

func (sc SoftwareConfigAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sc.ref.Append("properties"))
}

type WorkerConfigAttributes struct {
	ref terra.Reference
}

func (wc WorkerConfigAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc WorkerConfigAttributes) InternalWithRef(ref terra.Reference) WorkerConfigAttributes {
	return WorkerConfigAttributes{ref: ref}
}

func (wc WorkerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc WorkerConfigAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("image"))
}

func (wc WorkerConfigAttributes) InstanceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wc.ref.Append("instance_names"))
}

func (wc WorkerConfigAttributes) IsPreemptible() terra.BoolValue {
	return terra.ReferenceAsBool(wc.ref.Append("is_preemptible"))
}

func (wc WorkerConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("machine_type"))
}

func (wc WorkerConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("min_cpu_platform"))
}

func (wc WorkerConfigAttributes) NumInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(wc.ref.Append("num_instances"))
}

func (wc WorkerConfigAttributes) Preemptibility() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("preemptibility"))
}

func (wc WorkerConfigAttributes) ManagedGroupConfig() terra.ListValue[WorkerConfigManagedGroupConfigAttributes] {
	return terra.ReferenceAsList[WorkerConfigManagedGroupConfigAttributes](wc.ref.Append("managed_group_config"))
}

func (wc WorkerConfigAttributes) Accelerators() terra.ListValue[WorkerConfigAcceleratorsAttributes] {
	return terra.ReferenceAsList[WorkerConfigAcceleratorsAttributes](wc.ref.Append("accelerators"))
}

func (wc WorkerConfigAttributes) DiskConfig() terra.ListValue[WorkerConfigDiskConfigAttributes] {
	return terra.ReferenceAsList[WorkerConfigDiskConfigAttributes](wc.ref.Append("disk_config"))
}

type WorkerConfigManagedGroupConfigAttributes struct {
	ref terra.Reference
}

func (mgc WorkerConfigManagedGroupConfigAttributes) InternalRef() (terra.Reference, error) {
	return mgc.ref, nil
}

func (mgc WorkerConfigManagedGroupConfigAttributes) InternalWithRef(ref terra.Reference) WorkerConfigManagedGroupConfigAttributes {
	return WorkerConfigManagedGroupConfigAttributes{ref: ref}
}

func (mgc WorkerConfigManagedGroupConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mgc.ref.InternalTokens()
}

func (mgc WorkerConfigManagedGroupConfigAttributes) InstanceGroupManagerName() terra.StringValue {
	return terra.ReferenceAsString(mgc.ref.Append("instance_group_manager_name"))
}

func (mgc WorkerConfigManagedGroupConfigAttributes) InstanceTemplateName() terra.StringValue {
	return terra.ReferenceAsString(mgc.ref.Append("instance_template_name"))
}

type WorkerConfigAcceleratorsAttributes struct {
	ref terra.Reference
}

func (a WorkerConfigAcceleratorsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a WorkerConfigAcceleratorsAttributes) InternalWithRef(ref terra.Reference) WorkerConfigAcceleratorsAttributes {
	return WorkerConfigAcceleratorsAttributes{ref: ref}
}

func (a WorkerConfigAcceleratorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a WorkerConfigAcceleratorsAttributes) AcceleratorCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("accelerator_count"))
}

func (a WorkerConfigAcceleratorsAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("accelerator_type"))
}

type WorkerConfigDiskConfigAttributes struct {
	ref terra.Reference
}

func (dc WorkerConfigDiskConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc WorkerConfigDiskConfigAttributes) InternalWithRef(ref terra.Reference) WorkerConfigDiskConfigAttributes {
	return WorkerConfigDiskConfigAttributes{ref: ref}
}

func (dc WorkerConfigDiskConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc WorkerConfigDiskConfigAttributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("boot_disk_size_gb"))
}

func (dc WorkerConfigDiskConfigAttributes) BootDiskType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("boot_disk_type"))
}

func (dc WorkerConfigDiskConfigAttributes) NumLocalSsds() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("num_local_ssds"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type JobsState struct {
	Labels              map[string]string  `json:"labels"`
	PrerequisiteStepIds []string           `json:"prerequisite_step_ids"`
	StepId              string             `json:"step_id"`
	HadoopJob           []HadoopJobState   `json:"hadoop_job"`
	HiveJob             []HiveJobState     `json:"hive_job"`
	PigJob              []PigJobState      `json:"pig_job"`
	PrestoJob           []PrestoJobState   `json:"presto_job"`
	PysparkJob          []PysparkJobState  `json:"pyspark_job"`
	Scheduling          []SchedulingState  `json:"scheduling"`
	SparkJob            []SparkJobState    `json:"spark_job"`
	SparkRJob           []SparkRJobState   `json:"spark_r_job"`
	SparkSqlJob         []SparkSqlJobState `json:"spark_sql_job"`
}

type HadoopJobState struct {
	ArchiveUris    []string                      `json:"archive_uris"`
	Args           []string                      `json:"args"`
	FileUris       []string                      `json:"file_uris"`
	JarFileUris    []string                      `json:"jar_file_uris"`
	MainClass      string                        `json:"main_class"`
	MainJarFileUri string                        `json:"main_jar_file_uri"`
	Properties     map[string]string             `json:"properties"`
	LoggingConfig  []HadoopJobLoggingConfigState `json:"logging_config"`
}

type HadoopJobLoggingConfigState struct {
	DriverLogLevels map[string]string `json:"driver_log_levels"`
}

type HiveJobState struct {
	ContinueOnFailure bool                    `json:"continue_on_failure"`
	JarFileUris       []string                `json:"jar_file_uris"`
	Properties        map[string]string       `json:"properties"`
	QueryFileUri      string                  `json:"query_file_uri"`
	ScriptVariables   map[string]string       `json:"script_variables"`
	QueryList         []HiveJobQueryListState `json:"query_list"`
}

type HiveJobQueryListState struct {
	Queries []string `json:"queries"`
}

type PigJobState struct {
	ContinueOnFailure bool                       `json:"continue_on_failure"`
	JarFileUris       []string                   `json:"jar_file_uris"`
	Properties        map[string]string          `json:"properties"`
	QueryFileUri      string                     `json:"query_file_uri"`
	ScriptVariables   map[string]string          `json:"script_variables"`
	LoggingConfig     []PigJobLoggingConfigState `json:"logging_config"`
	QueryList         []PigJobQueryListState     `json:"query_list"`
}

type PigJobLoggingConfigState struct {
	DriverLogLevels map[string]string `json:"driver_log_levels"`
}

type PigJobQueryListState struct {
	Queries []string `json:"queries"`
}

type PrestoJobState struct {
	ClientTags        []string                      `json:"client_tags"`
	ContinueOnFailure bool                          `json:"continue_on_failure"`
	OutputFormat      string                        `json:"output_format"`
	Properties        map[string]string             `json:"properties"`
	QueryFileUri      string                        `json:"query_file_uri"`
	LoggingConfig     []PrestoJobLoggingConfigState `json:"logging_config"`
	QueryList         []PrestoJobQueryListState     `json:"query_list"`
}

type PrestoJobLoggingConfigState struct {
	DriverLogLevels map[string]string `json:"driver_log_levels"`
}

type PrestoJobQueryListState struct {
	Queries []string `json:"queries"`
}

type PysparkJobState struct {
	ArchiveUris       []string                       `json:"archive_uris"`
	Args              []string                       `json:"args"`
	FileUris          []string                       `json:"file_uris"`
	JarFileUris       []string                       `json:"jar_file_uris"`
	MainPythonFileUri string                         `json:"main_python_file_uri"`
	Properties        map[string]string              `json:"properties"`
	PythonFileUris    []string                       `json:"python_file_uris"`
	LoggingConfig     []PysparkJobLoggingConfigState `json:"logging_config"`
}

type PysparkJobLoggingConfigState struct {
	DriverLogLevels map[string]string `json:"driver_log_levels"`
}

type SchedulingState struct {
	MaxFailuresPerHour float64 `json:"max_failures_per_hour"`
	MaxFailuresTotal   float64 `json:"max_failures_total"`
}

type SparkJobState struct {
	ArchiveUris    []string                     `json:"archive_uris"`
	Args           []string                     `json:"args"`
	FileUris       []string                     `json:"file_uris"`
	JarFileUris    []string                     `json:"jar_file_uris"`
	MainClass      string                       `json:"main_class"`
	MainJarFileUri string                       `json:"main_jar_file_uri"`
	Properties     map[string]string            `json:"properties"`
	LoggingConfig  []SparkJobLoggingConfigState `json:"logging_config"`
}

type SparkJobLoggingConfigState struct {
	DriverLogLevels map[string]string `json:"driver_log_levels"`
}

type SparkRJobState struct {
	ArchiveUris   []string                      `json:"archive_uris"`
	Args          []string                      `json:"args"`
	FileUris      []string                      `json:"file_uris"`
	MainRFileUri  string                        `json:"main_r_file_uri"`
	Properties    map[string]string             `json:"properties"`
	LoggingConfig []SparkRJobLoggingConfigState `json:"logging_config"`
}

type SparkRJobLoggingConfigState struct {
	DriverLogLevels map[string]string `json:"driver_log_levels"`
}

type SparkSqlJobState struct {
	JarFileUris     []string                        `json:"jar_file_uris"`
	Properties      map[string]string               `json:"properties"`
	QueryFileUri    string                          `json:"query_file_uri"`
	ScriptVariables map[string]string               `json:"script_variables"`
	LoggingConfig   []SparkSqlJobLoggingConfigState `json:"logging_config"`
	QueryList       []SparkSqlJobQueryListState     `json:"query_list"`
}

type SparkSqlJobLoggingConfigState struct {
	DriverLogLevels map[string]string `json:"driver_log_levels"`
}

type SparkSqlJobQueryListState struct {
	Queries []string `json:"queries"`
}

type ParametersState struct {
	Description string            `json:"description"`
	Fields      []string          `json:"fields"`
	Name        string            `json:"name"`
	Validation  []ValidationState `json:"validation"`
}

type ValidationState struct {
	Regex  []RegexState  `json:"regex"`
	Values []ValuesState `json:"values"`
}

type RegexState struct {
	Regexes []string `json:"regexes"`
}

type ValuesState struct {
	Values []string `json:"values"`
}

type PlacementState struct {
	ClusterSelector []ClusterSelectorState `json:"cluster_selector"`
	ManagedCluster  []ManagedClusterState  `json:"managed_cluster"`
}

type ClusterSelectorState struct {
	ClusterLabels map[string]string `json:"cluster_labels"`
	Zone          string            `json:"zone"`
}

type ManagedClusterState struct {
	ClusterName string            `json:"cluster_name"`
	Labels      map[string]string `json:"labels"`
	Config      []ConfigState     `json:"config"`
}

type ConfigState struct {
	StagingBucket         string                       `json:"staging_bucket"`
	TempBucket            string                       `json:"temp_bucket"`
	AutoscalingConfig     []AutoscalingConfigState     `json:"autoscaling_config"`
	EncryptionConfig      []EncryptionConfigState      `json:"encryption_config"`
	EndpointConfig        []EndpointConfigState        `json:"endpoint_config"`
	GceClusterConfig      []GceClusterConfigState      `json:"gce_cluster_config"`
	GkeClusterConfig      []GkeClusterConfigState      `json:"gke_cluster_config"`
	InitializationActions []InitializationActionsState `json:"initialization_actions"`
	LifecycleConfig       []LifecycleConfigState       `json:"lifecycle_config"`
	MasterConfig          []MasterConfigState          `json:"master_config"`
	MetastoreConfig       []MetastoreConfigState       `json:"metastore_config"`
	SecondaryWorkerConfig []SecondaryWorkerConfigState `json:"secondary_worker_config"`
	SecurityConfig        []SecurityConfigState        `json:"security_config"`
	SoftwareConfig        []SoftwareConfigState        `json:"software_config"`
	WorkerConfig          []WorkerConfigState          `json:"worker_config"`
}

type AutoscalingConfigState struct {
	Policy string `json:"policy"`
}

type EncryptionConfigState struct {
	GcePdKmsKeyName string `json:"gce_pd_kms_key_name"`
}

type EndpointConfigState struct {
	EnableHttpPortAccess bool              `json:"enable_http_port_access"`
	HttpPorts            map[string]string `json:"http_ports"`
}

type GceClusterConfigState struct {
	InternalIpOnly          bool                          `json:"internal_ip_only"`
	Metadata                map[string]string             `json:"metadata"`
	Network                 string                        `json:"network"`
	PrivateIpv6GoogleAccess string                        `json:"private_ipv6_google_access"`
	ServiceAccount          string                        `json:"service_account"`
	ServiceAccountScopes    []string                      `json:"service_account_scopes"`
	Subnetwork              string                        `json:"subnetwork"`
	Tags                    []string                      `json:"tags"`
	Zone                    string                        `json:"zone"`
	NodeGroupAffinity       []NodeGroupAffinityState      `json:"node_group_affinity"`
	ReservationAffinity     []ReservationAffinityState    `json:"reservation_affinity"`
	ShieldedInstanceConfig  []ShieldedInstanceConfigState `json:"shielded_instance_config"`
}

type NodeGroupAffinityState struct {
	NodeGroup string `json:"node_group"`
}

type ReservationAffinityState struct {
	ConsumeReservationType string   `json:"consume_reservation_type"`
	Key                    string   `json:"key"`
	Values                 []string `json:"values"`
}

type ShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
	EnableVtpm                bool `json:"enable_vtpm"`
}

type GkeClusterConfigState struct {
	NamespacedGkeDeploymentTarget []NamespacedGkeDeploymentTargetState `json:"namespaced_gke_deployment_target"`
}

type NamespacedGkeDeploymentTargetState struct {
	ClusterNamespace string `json:"cluster_namespace"`
	TargetGkeCluster string `json:"target_gke_cluster"`
}

type InitializationActionsState struct {
	ExecutableFile   string `json:"executable_file"`
	ExecutionTimeout string `json:"execution_timeout"`
}

type LifecycleConfigState struct {
	AutoDeleteTime string `json:"auto_delete_time"`
	AutoDeleteTtl  string `json:"auto_delete_ttl"`
	IdleDeleteTtl  string `json:"idle_delete_ttl"`
	IdleStartTime  string `json:"idle_start_time"`
}

type MasterConfigState struct {
	Image              string                                `json:"image"`
	InstanceNames      []string                              `json:"instance_names"`
	IsPreemptible      bool                                  `json:"is_preemptible"`
	MachineType        string                                `json:"machine_type"`
	MinCpuPlatform     string                                `json:"min_cpu_platform"`
	NumInstances       float64                               `json:"num_instances"`
	Preemptibility     string                                `json:"preemptibility"`
	ManagedGroupConfig []MasterConfigManagedGroupConfigState `json:"managed_group_config"`
	Accelerators       []MasterConfigAcceleratorsState       `json:"accelerators"`
	DiskConfig         []MasterConfigDiskConfigState         `json:"disk_config"`
}

type MasterConfigManagedGroupConfigState struct {
	InstanceGroupManagerName string `json:"instance_group_manager_name"`
	InstanceTemplateName     string `json:"instance_template_name"`
}

type MasterConfigAcceleratorsState struct {
	AcceleratorCount float64 `json:"accelerator_count"`
	AcceleratorType  string  `json:"accelerator_type"`
}

type MasterConfigDiskConfigState struct {
	BootDiskSizeGb float64 `json:"boot_disk_size_gb"`
	BootDiskType   string  `json:"boot_disk_type"`
	NumLocalSsds   float64 `json:"num_local_ssds"`
}

type MetastoreConfigState struct {
	DataprocMetastoreService string `json:"dataproc_metastore_service"`
}

type SecondaryWorkerConfigState struct {
	Image              string                                         `json:"image"`
	InstanceNames      []string                                       `json:"instance_names"`
	IsPreemptible      bool                                           `json:"is_preemptible"`
	MachineType        string                                         `json:"machine_type"`
	MinCpuPlatform     string                                         `json:"min_cpu_platform"`
	NumInstances       float64                                        `json:"num_instances"`
	Preemptibility     string                                         `json:"preemptibility"`
	ManagedGroupConfig []SecondaryWorkerConfigManagedGroupConfigState `json:"managed_group_config"`
	Accelerators       []SecondaryWorkerConfigAcceleratorsState       `json:"accelerators"`
	DiskConfig         []SecondaryWorkerConfigDiskConfigState         `json:"disk_config"`
}

type SecondaryWorkerConfigManagedGroupConfigState struct {
	InstanceGroupManagerName string `json:"instance_group_manager_name"`
	InstanceTemplateName     string `json:"instance_template_name"`
}

type SecondaryWorkerConfigAcceleratorsState struct {
	AcceleratorCount float64 `json:"accelerator_count"`
	AcceleratorType  string  `json:"accelerator_type"`
}

type SecondaryWorkerConfigDiskConfigState struct {
	BootDiskSizeGb float64 `json:"boot_disk_size_gb"`
	BootDiskType   string  `json:"boot_disk_type"`
	NumLocalSsds   float64 `json:"num_local_ssds"`
}

type SecurityConfigState struct {
	KerberosConfig []KerberosConfigState `json:"kerberos_config"`
}

type KerberosConfigState struct {
	CrossRealmTrustAdminServer    string  `json:"cross_realm_trust_admin_server"`
	CrossRealmTrustKdc            string  `json:"cross_realm_trust_kdc"`
	CrossRealmTrustRealm          string  `json:"cross_realm_trust_realm"`
	CrossRealmTrustSharedPassword string  `json:"cross_realm_trust_shared_password"`
	EnableKerberos                bool    `json:"enable_kerberos"`
	KdcDbKey                      string  `json:"kdc_db_key"`
	KeyPassword                   string  `json:"key_password"`
	Keystore                      string  `json:"keystore"`
	KeystorePassword              string  `json:"keystore_password"`
	KmsKey                        string  `json:"kms_key"`
	Realm                         string  `json:"realm"`
	RootPrincipalPassword         string  `json:"root_principal_password"`
	TgtLifetimeHours              float64 `json:"tgt_lifetime_hours"`
	Truststore                    string  `json:"truststore"`
	TruststorePassword            string  `json:"truststore_password"`
}

type SoftwareConfigState struct {
	ImageVersion       string            `json:"image_version"`
	OptionalComponents []string          `json:"optional_components"`
	Properties         map[string]string `json:"properties"`
}

type WorkerConfigState struct {
	Image              string                                `json:"image"`
	InstanceNames      []string                              `json:"instance_names"`
	IsPreemptible      bool                                  `json:"is_preemptible"`
	MachineType        string                                `json:"machine_type"`
	MinCpuPlatform     string                                `json:"min_cpu_platform"`
	NumInstances       float64                               `json:"num_instances"`
	Preemptibility     string                                `json:"preemptibility"`
	ManagedGroupConfig []WorkerConfigManagedGroupConfigState `json:"managed_group_config"`
	Accelerators       []WorkerConfigAcceleratorsState       `json:"accelerators"`
	DiskConfig         []WorkerConfigDiskConfigState         `json:"disk_config"`
}

type WorkerConfigManagedGroupConfigState struct {
	InstanceGroupManagerName string `json:"instance_group_manager_name"`
	InstanceTemplateName     string `json:"instance_template_name"`
}

type WorkerConfigAcceleratorsState struct {
	AcceleratorCount float64 `json:"accelerator_count"`
	AcceleratorType  string  `json:"accelerator_type"`
}

type WorkerConfigDiskConfigState struct {
	BootDiskSizeGb float64 `json:"boot_disk_size_gb"`
	BootDiskType   string  `json:"boot_disk_type"`
	NumLocalSsds   float64 `json:"num_local_ssds"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
