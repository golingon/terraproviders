// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	apigeeinstance "github.com/golingon/terraproviders/googlebeta/5.2.0/apigeeinstance"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewApigeeInstance creates a new instance of [ApigeeInstance].
func NewApigeeInstance(name string, args ApigeeInstanceArgs) *ApigeeInstance {
	return &ApigeeInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApigeeInstance)(nil)

// ApigeeInstance represents the Terraform resource google_apigee_instance.
type ApigeeInstance struct {
	Name      string
	Args      ApigeeInstanceArgs
	state     *apigeeInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApigeeInstance].
func (ai *ApigeeInstance) Type() string {
	return "google_apigee_instance"
}

// LocalName returns the local name for [ApigeeInstance].
func (ai *ApigeeInstance) LocalName() string {
	return ai.Name
}

// Configuration returns the configuration (args) for [ApigeeInstance].
func (ai *ApigeeInstance) Configuration() interface{} {
	return ai.Args
}

// DependOn is used for other resources to depend on [ApigeeInstance].
func (ai *ApigeeInstance) DependOn() terra.Reference {
	return terra.ReferenceResource(ai)
}

// Dependencies returns the list of resources [ApigeeInstance] depends_on.
func (ai *ApigeeInstance) Dependencies() terra.Dependencies {
	return ai.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApigeeInstance].
func (ai *ApigeeInstance) LifecycleManagement() *terra.Lifecycle {
	return ai.Lifecycle
}

// Attributes returns the attributes for [ApigeeInstance].
func (ai *ApigeeInstance) Attributes() apigeeInstanceAttributes {
	return apigeeInstanceAttributes{ref: terra.ReferenceResource(ai)}
}

// ImportState imports the given attribute values into [ApigeeInstance]'s state.
func (ai *ApigeeInstance) ImportState(av io.Reader) error {
	ai.state = &apigeeInstanceState{}
	if err := json.NewDecoder(av).Decode(ai.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ai.Type(), ai.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApigeeInstance] has state.
func (ai *ApigeeInstance) State() (*apigeeInstanceState, bool) {
	return ai.state, ai.state != nil
}

// StateMust returns the state for [ApigeeInstance]. Panics if the state is nil.
func (ai *ApigeeInstance) StateMust() *apigeeInstanceState {
	if ai.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ai.Type(), ai.LocalName()))
	}
	return ai.state
}

// ApigeeInstanceArgs contains the configurations for google_apigee_instance.
type ApigeeInstanceArgs struct {
	// ConsumerAcceptList: list of string, optional
	ConsumerAcceptList terra.ListValue[terra.StringValue] `hcl:"consumer_accept_list,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DiskEncryptionKeyName: string, optional
	DiskEncryptionKeyName terra.StringValue `hcl:"disk_encryption_key_name,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpRange: string, optional
	IpRange terra.StringValue `hcl:"ip_range,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OrgId: string, required
	OrgId terra.StringValue `hcl:"org_id,attr" validate:"required"`
	// PeeringCidrRange: string, optional
	PeeringCidrRange terra.StringValue `hcl:"peering_cidr_range,attr"`
	// Timeouts: optional
	Timeouts *apigeeinstance.Timeouts `hcl:"timeouts,block"`
}
type apigeeInstanceAttributes struct {
	ref terra.Reference
}

// ConsumerAcceptList returns a reference to field consumer_accept_list of google_apigee_instance.
func (ai apigeeInstanceAttributes) ConsumerAcceptList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ai.ref.Append("consumer_accept_list"))
}

// Description returns a reference to field description of google_apigee_instance.
func (ai apigeeInstanceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("description"))
}

// DiskEncryptionKeyName returns a reference to field disk_encryption_key_name of google_apigee_instance.
func (ai apigeeInstanceAttributes) DiskEncryptionKeyName() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("disk_encryption_key_name"))
}

// DisplayName returns a reference to field display_name of google_apigee_instance.
func (ai apigeeInstanceAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("display_name"))
}

// Host returns a reference to field host of google_apigee_instance.
func (ai apigeeInstanceAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("host"))
}

// Id returns a reference to field id of google_apigee_instance.
func (ai apigeeInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("id"))
}

// IpRange returns a reference to field ip_range of google_apigee_instance.
func (ai apigeeInstanceAttributes) IpRange() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("ip_range"))
}

// Location returns a reference to field location of google_apigee_instance.
func (ai apigeeInstanceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("location"))
}

// Name returns a reference to field name of google_apigee_instance.
func (ai apigeeInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("name"))
}

// OrgId returns a reference to field org_id of google_apigee_instance.
func (ai apigeeInstanceAttributes) OrgId() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("org_id"))
}

// PeeringCidrRange returns a reference to field peering_cidr_range of google_apigee_instance.
func (ai apigeeInstanceAttributes) PeeringCidrRange() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("peering_cidr_range"))
}

// Port returns a reference to field port of google_apigee_instance.
func (ai apigeeInstanceAttributes) Port() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("port"))
}

// ServiceAttachment returns a reference to field service_attachment of google_apigee_instance.
func (ai apigeeInstanceAttributes) ServiceAttachment() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("service_attachment"))
}

func (ai apigeeInstanceAttributes) Timeouts() apigeeinstance.TimeoutsAttributes {
	return terra.ReferenceAsSingle[apigeeinstance.TimeoutsAttributes](ai.ref.Append("timeouts"))
}

type apigeeInstanceState struct {
	ConsumerAcceptList    []string                      `json:"consumer_accept_list"`
	Description           string                        `json:"description"`
	DiskEncryptionKeyName string                        `json:"disk_encryption_key_name"`
	DisplayName           string                        `json:"display_name"`
	Host                  string                        `json:"host"`
	Id                    string                        `json:"id"`
	IpRange               string                        `json:"ip_range"`
	Location              string                        `json:"location"`
	Name                  string                        `json:"name"`
	OrgId                 string                        `json:"org_id"`
	PeeringCidrRange      string                        `json:"peering_cidr_range"`
	Port                  string                        `json:"port"`
	ServiceAttachment     string                        `json:"service_attachment"`
	Timeouts              *apigeeinstance.TimeoutsState `json:"timeouts"`
}
