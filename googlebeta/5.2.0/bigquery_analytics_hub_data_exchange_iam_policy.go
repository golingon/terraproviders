// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewBigqueryAnalyticsHubDataExchangeIamPolicy creates a new instance of [BigqueryAnalyticsHubDataExchangeIamPolicy].
func NewBigqueryAnalyticsHubDataExchangeIamPolicy(name string, args BigqueryAnalyticsHubDataExchangeIamPolicyArgs) *BigqueryAnalyticsHubDataExchangeIamPolicy {
	return &BigqueryAnalyticsHubDataExchangeIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryAnalyticsHubDataExchangeIamPolicy)(nil)

// BigqueryAnalyticsHubDataExchangeIamPolicy represents the Terraform resource google_bigquery_analytics_hub_data_exchange_iam_policy.
type BigqueryAnalyticsHubDataExchangeIamPolicy struct {
	Name      string
	Args      BigqueryAnalyticsHubDataExchangeIamPolicyArgs
	state     *bigqueryAnalyticsHubDataExchangeIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [BigqueryAnalyticsHubDataExchangeIamPolicy].
func (bahdeip *BigqueryAnalyticsHubDataExchangeIamPolicy) Type() string {
	return "google_bigquery_analytics_hub_data_exchange_iam_policy"
}

// LocalName returns the local name for [BigqueryAnalyticsHubDataExchangeIamPolicy].
func (bahdeip *BigqueryAnalyticsHubDataExchangeIamPolicy) LocalName() string {
	return bahdeip.Name
}

// Configuration returns the configuration (args) for [BigqueryAnalyticsHubDataExchangeIamPolicy].
func (bahdeip *BigqueryAnalyticsHubDataExchangeIamPolicy) Configuration() interface{} {
	return bahdeip.Args
}

// DependOn is used for other resources to depend on [BigqueryAnalyticsHubDataExchangeIamPolicy].
func (bahdeip *BigqueryAnalyticsHubDataExchangeIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(bahdeip)
}

// Dependencies returns the list of resources [BigqueryAnalyticsHubDataExchangeIamPolicy] depends_on.
func (bahdeip *BigqueryAnalyticsHubDataExchangeIamPolicy) Dependencies() terra.Dependencies {
	return bahdeip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [BigqueryAnalyticsHubDataExchangeIamPolicy].
func (bahdeip *BigqueryAnalyticsHubDataExchangeIamPolicy) LifecycleManagement() *terra.Lifecycle {
	return bahdeip.Lifecycle
}

// Attributes returns the attributes for [BigqueryAnalyticsHubDataExchangeIamPolicy].
func (bahdeip *BigqueryAnalyticsHubDataExchangeIamPolicy) Attributes() bigqueryAnalyticsHubDataExchangeIamPolicyAttributes {
	return bigqueryAnalyticsHubDataExchangeIamPolicyAttributes{ref: terra.ReferenceResource(bahdeip)}
}

// ImportState imports the given attribute values into [BigqueryAnalyticsHubDataExchangeIamPolicy]'s state.
func (bahdeip *BigqueryAnalyticsHubDataExchangeIamPolicy) ImportState(av io.Reader) error {
	bahdeip.state = &bigqueryAnalyticsHubDataExchangeIamPolicyState{}
	if err := json.NewDecoder(av).Decode(bahdeip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bahdeip.Type(), bahdeip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [BigqueryAnalyticsHubDataExchangeIamPolicy] has state.
func (bahdeip *BigqueryAnalyticsHubDataExchangeIamPolicy) State() (*bigqueryAnalyticsHubDataExchangeIamPolicyState, bool) {
	return bahdeip.state, bahdeip.state != nil
}

// StateMust returns the state for [BigqueryAnalyticsHubDataExchangeIamPolicy]. Panics if the state is nil.
func (bahdeip *BigqueryAnalyticsHubDataExchangeIamPolicy) StateMust() *bigqueryAnalyticsHubDataExchangeIamPolicyState {
	if bahdeip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bahdeip.Type(), bahdeip.LocalName()))
	}
	return bahdeip.state
}

// BigqueryAnalyticsHubDataExchangeIamPolicyArgs contains the configurations for google_bigquery_analytics_hub_data_exchange_iam_policy.
type BigqueryAnalyticsHubDataExchangeIamPolicyArgs struct {
	// DataExchangeId: string, required
	DataExchangeId terra.StringValue `hcl:"data_exchange_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}
type bigqueryAnalyticsHubDataExchangeIamPolicyAttributes struct {
	ref terra.Reference
}

// DataExchangeId returns a reference to field data_exchange_id of google_bigquery_analytics_hub_data_exchange_iam_policy.
func (bahdeip bigqueryAnalyticsHubDataExchangeIamPolicyAttributes) DataExchangeId() terra.StringValue {
	return terra.ReferenceAsString(bahdeip.ref.Append("data_exchange_id"))
}

// Etag returns a reference to field etag of google_bigquery_analytics_hub_data_exchange_iam_policy.
func (bahdeip bigqueryAnalyticsHubDataExchangeIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(bahdeip.ref.Append("etag"))
}

// Id returns a reference to field id of google_bigquery_analytics_hub_data_exchange_iam_policy.
func (bahdeip bigqueryAnalyticsHubDataExchangeIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bahdeip.ref.Append("id"))
}

// Location returns a reference to field location of google_bigquery_analytics_hub_data_exchange_iam_policy.
func (bahdeip bigqueryAnalyticsHubDataExchangeIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(bahdeip.ref.Append("location"))
}

// PolicyData returns a reference to field policy_data of google_bigquery_analytics_hub_data_exchange_iam_policy.
func (bahdeip bigqueryAnalyticsHubDataExchangeIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(bahdeip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_bigquery_analytics_hub_data_exchange_iam_policy.
func (bahdeip bigqueryAnalyticsHubDataExchangeIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(bahdeip.ref.Append("project"))
}

type bigqueryAnalyticsHubDataExchangeIamPolicyState struct {
	DataExchangeId string `json:"data_exchange_id"`
	Etag           string `json:"etag"`
	Id             string `json:"id"`
	Location       string `json:"location"`
	PolicyData     string `json:"policy_data"`
	Project        string `json:"project"`
}
