// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	edgecontainervpnconnection "github.com/golingon/terraproviders/googlebeta/5.2.0/edgecontainervpnconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewEdgecontainerVpnConnection creates a new instance of [EdgecontainerVpnConnection].
func NewEdgecontainerVpnConnection(name string, args EdgecontainerVpnConnectionArgs) *EdgecontainerVpnConnection {
	return &EdgecontainerVpnConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EdgecontainerVpnConnection)(nil)

// EdgecontainerVpnConnection represents the Terraform resource google_edgecontainer_vpn_connection.
type EdgecontainerVpnConnection struct {
	Name      string
	Args      EdgecontainerVpnConnectionArgs
	state     *edgecontainerVpnConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [EdgecontainerVpnConnection].
func (evc *EdgecontainerVpnConnection) Type() string {
	return "google_edgecontainer_vpn_connection"
}

// LocalName returns the local name for [EdgecontainerVpnConnection].
func (evc *EdgecontainerVpnConnection) LocalName() string {
	return evc.Name
}

// Configuration returns the configuration (args) for [EdgecontainerVpnConnection].
func (evc *EdgecontainerVpnConnection) Configuration() interface{} {
	return evc.Args
}

// DependOn is used for other resources to depend on [EdgecontainerVpnConnection].
func (evc *EdgecontainerVpnConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(evc)
}

// Dependencies returns the list of resources [EdgecontainerVpnConnection] depends_on.
func (evc *EdgecontainerVpnConnection) Dependencies() terra.Dependencies {
	return evc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [EdgecontainerVpnConnection].
func (evc *EdgecontainerVpnConnection) LifecycleManagement() *terra.Lifecycle {
	return evc.Lifecycle
}

// Attributes returns the attributes for [EdgecontainerVpnConnection].
func (evc *EdgecontainerVpnConnection) Attributes() edgecontainerVpnConnectionAttributes {
	return edgecontainerVpnConnectionAttributes{ref: terra.ReferenceResource(evc)}
}

// ImportState imports the given attribute values into [EdgecontainerVpnConnection]'s state.
func (evc *EdgecontainerVpnConnection) ImportState(av io.Reader) error {
	evc.state = &edgecontainerVpnConnectionState{}
	if err := json.NewDecoder(av).Decode(evc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", evc.Type(), evc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [EdgecontainerVpnConnection] has state.
func (evc *EdgecontainerVpnConnection) State() (*edgecontainerVpnConnectionState, bool) {
	return evc.state, evc.state != nil
}

// StateMust returns the state for [EdgecontainerVpnConnection]. Panics if the state is nil.
func (evc *EdgecontainerVpnConnection) StateMust() *edgecontainerVpnConnectionState {
	if evc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", evc.Type(), evc.LocalName()))
	}
	return evc.state
}

// EdgecontainerVpnConnectionArgs contains the configurations for google_edgecontainer_vpn_connection.
type EdgecontainerVpnConnectionArgs struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// EnableHighAvailability: bool, optional
	EnableHighAvailability terra.BoolValue `hcl:"enable_high_availability,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NatGatewayIp: string, optional
	NatGatewayIp terra.StringValue `hcl:"nat_gateway_ip,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Router: string, optional
	Router terra.StringValue `hcl:"router,attr"`
	// Vpc: string, optional
	Vpc terra.StringValue `hcl:"vpc,attr"`
	// Details: min=0
	Details []edgecontainervpnconnection.Details `hcl:"details,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *edgecontainervpnconnection.Timeouts `hcl:"timeouts,block"`
	// VpcProject: optional
	VpcProject *edgecontainervpnconnection.VpcProject `hcl:"vpc_project,block"`
}
type edgecontainerVpnConnectionAttributes struct {
	ref terra.Reference
}

// Cluster returns a reference to field cluster of google_edgecontainer_vpn_connection.
func (evc edgecontainerVpnConnectionAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("cluster"))
}

// CreateTime returns a reference to field create_time of google_edgecontainer_vpn_connection.
func (evc edgecontainerVpnConnectionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("create_time"))
}

// EffectiveLabels returns a reference to field effective_labels of google_edgecontainer_vpn_connection.
func (evc edgecontainerVpnConnectionAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](evc.ref.Append("effective_labels"))
}

// EnableHighAvailability returns a reference to field enable_high_availability of google_edgecontainer_vpn_connection.
func (evc edgecontainerVpnConnectionAttributes) EnableHighAvailability() terra.BoolValue {
	return terra.ReferenceAsBool(evc.ref.Append("enable_high_availability"))
}

// Id returns a reference to field id of google_edgecontainer_vpn_connection.
func (evc edgecontainerVpnConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("id"))
}

// Labels returns a reference to field labels of google_edgecontainer_vpn_connection.
func (evc edgecontainerVpnConnectionAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](evc.ref.Append("labels"))
}

// Location returns a reference to field location of google_edgecontainer_vpn_connection.
func (evc edgecontainerVpnConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("location"))
}

// Name returns a reference to field name of google_edgecontainer_vpn_connection.
func (evc edgecontainerVpnConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("name"))
}

// NatGatewayIp returns a reference to field nat_gateway_ip of google_edgecontainer_vpn_connection.
func (evc edgecontainerVpnConnectionAttributes) NatGatewayIp() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("nat_gateway_ip"))
}

// Project returns a reference to field project of google_edgecontainer_vpn_connection.
func (evc edgecontainerVpnConnectionAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("project"))
}

// Router returns a reference to field router of google_edgecontainer_vpn_connection.
func (evc edgecontainerVpnConnectionAttributes) Router() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("router"))
}

// TerraformLabels returns a reference to field terraform_labels of google_edgecontainer_vpn_connection.
func (evc edgecontainerVpnConnectionAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](evc.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_edgecontainer_vpn_connection.
func (evc edgecontainerVpnConnectionAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("update_time"))
}

// Vpc returns a reference to field vpc of google_edgecontainer_vpn_connection.
func (evc edgecontainerVpnConnectionAttributes) Vpc() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("vpc"))
}

func (evc edgecontainerVpnConnectionAttributes) Details() terra.ListValue[edgecontainervpnconnection.DetailsAttributes] {
	return terra.ReferenceAsList[edgecontainervpnconnection.DetailsAttributes](evc.ref.Append("details"))
}

func (evc edgecontainerVpnConnectionAttributes) Timeouts() edgecontainervpnconnection.TimeoutsAttributes {
	return terra.ReferenceAsSingle[edgecontainervpnconnection.TimeoutsAttributes](evc.ref.Append("timeouts"))
}

func (evc edgecontainerVpnConnectionAttributes) VpcProject() terra.ListValue[edgecontainervpnconnection.VpcProjectAttributes] {
	return terra.ReferenceAsList[edgecontainervpnconnection.VpcProjectAttributes](evc.ref.Append("vpc_project"))
}

type edgecontainerVpnConnectionState struct {
	Cluster                string                                       `json:"cluster"`
	CreateTime             string                                       `json:"create_time"`
	EffectiveLabels        map[string]string                            `json:"effective_labels"`
	EnableHighAvailability bool                                         `json:"enable_high_availability"`
	Id                     string                                       `json:"id"`
	Labels                 map[string]string                            `json:"labels"`
	Location               string                                       `json:"location"`
	Name                   string                                       `json:"name"`
	NatGatewayIp           string                                       `json:"nat_gateway_ip"`
	Project                string                                       `json:"project"`
	Router                 string                                       `json:"router"`
	TerraformLabels        map[string]string                            `json:"terraform_labels"`
	UpdateTime             string                                       `json:"update_time"`
	Vpc                    string                                       `json:"vpc"`
	Details                []edgecontainervpnconnection.DetailsState    `json:"details"`
	Timeouts               *edgecontainervpnconnection.TimeoutsState    `json:"timeouts"`
	VpcProject             []edgecontainervpnconnection.VpcProjectState `json:"vpc_project"`
}
