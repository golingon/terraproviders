// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataprocmetastoreservice

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type EncryptionConfig struct {
	// KmsKey: string, required
	KmsKey terra.StringValue `hcl:"kms_key,attr" validate:"required"`
}

type HiveMetastoreConfig struct {
	// ConfigOverrides: map of string, optional
	ConfigOverrides terra.MapValue[terra.StringValue] `hcl:"config_overrides,attr"`
	// EndpointProtocol: string, optional
	EndpointProtocol terra.StringValue `hcl:"endpoint_protocol,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// AuxiliaryVersions: min=0
	AuxiliaryVersions []AuxiliaryVersions `hcl:"auxiliary_versions,block" validate:"min=0"`
	// KerberosConfig: optional
	KerberosConfig *KerberosConfig `hcl:"kerberos_config,block"`
}

type AuxiliaryVersions struct {
	// ConfigOverrides: map of string, optional
	ConfigOverrides terra.MapValue[terra.StringValue] `hcl:"config_overrides,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type KerberosConfig struct {
	// Krb5ConfigGcsUri: string, required
	Krb5ConfigGcsUri terra.StringValue `hcl:"krb5_config_gcs_uri,attr" validate:"required"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
	// Keytab: required
	Keytab *Keytab `hcl:"keytab,block" validate:"required"`
}

type Keytab struct {
	// CloudSecret: string, required
	CloudSecret terra.StringValue `hcl:"cloud_secret,attr" validate:"required"`
}

type MaintenanceWindow struct {
	// DayOfWeek: string, required
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr" validate:"required"`
	// HourOfDay: number, required
	HourOfDay terra.NumberValue `hcl:"hour_of_day,attr" validate:"required"`
}

type MetadataIntegration struct {
	// DataCatalogConfig: required
	DataCatalogConfig *DataCatalogConfig `hcl:"data_catalog_config,block" validate:"required"`
}

type DataCatalogConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NetworkConfig struct {
	// Consumers: min=1
	Consumers []Consumers `hcl:"consumers,block" validate:"min=1"`
}

type Consumers struct {
	// Subnetwork: string, required
	Subnetwork terra.StringValue `hcl:"subnetwork,attr" validate:"required"`
}

type ScalingConfig struct {
	// InstanceSize: string, optional
	InstanceSize terra.StringValue `hcl:"instance_size,attr"`
	// ScalingFactor: number, optional
	ScalingFactor terra.NumberValue `hcl:"scaling_factor,attr"`
}

type TelemetryConfig struct {
	// LogFormat: string, optional
	LogFormat terra.StringValue `hcl:"log_format,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type EncryptionConfigAttributes struct {
	ref terra.Reference
}

func (ec EncryptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EncryptionConfigAttributes) InternalWithRef(ref terra.Reference) EncryptionConfigAttributes {
	return EncryptionConfigAttributes{ref: ref}
}

func (ec EncryptionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EncryptionConfigAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key"))
}

type HiveMetastoreConfigAttributes struct {
	ref terra.Reference
}

func (hmc HiveMetastoreConfigAttributes) InternalRef() (terra.Reference, error) {
	return hmc.ref, nil
}

func (hmc HiveMetastoreConfigAttributes) InternalWithRef(ref terra.Reference) HiveMetastoreConfigAttributes {
	return HiveMetastoreConfigAttributes{ref: ref}
}

func (hmc HiveMetastoreConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hmc.ref.InternalTokens()
}

func (hmc HiveMetastoreConfigAttributes) ConfigOverrides() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hmc.ref.Append("config_overrides"))
}

func (hmc HiveMetastoreConfigAttributes) EndpointProtocol() terra.StringValue {
	return terra.ReferenceAsString(hmc.ref.Append("endpoint_protocol"))
}

func (hmc HiveMetastoreConfigAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(hmc.ref.Append("version"))
}

func (hmc HiveMetastoreConfigAttributes) AuxiliaryVersions() terra.SetValue[AuxiliaryVersionsAttributes] {
	return terra.ReferenceAsSet[AuxiliaryVersionsAttributes](hmc.ref.Append("auxiliary_versions"))
}

func (hmc HiveMetastoreConfigAttributes) KerberosConfig() terra.ListValue[KerberosConfigAttributes] {
	return terra.ReferenceAsList[KerberosConfigAttributes](hmc.ref.Append("kerberos_config"))
}

type AuxiliaryVersionsAttributes struct {
	ref terra.Reference
}

func (av AuxiliaryVersionsAttributes) InternalRef() (terra.Reference, error) {
	return av.ref, nil
}

func (av AuxiliaryVersionsAttributes) InternalWithRef(ref terra.Reference) AuxiliaryVersionsAttributes {
	return AuxiliaryVersionsAttributes{ref: ref}
}

func (av AuxiliaryVersionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return av.ref.InternalTokens()
}

func (av AuxiliaryVersionsAttributes) ConfigOverrides() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](av.ref.Append("config_overrides"))
}

func (av AuxiliaryVersionsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("key"))
}

func (av AuxiliaryVersionsAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("version"))
}

type KerberosConfigAttributes struct {
	ref terra.Reference
}

func (kc KerberosConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc KerberosConfigAttributes) InternalWithRef(ref terra.Reference) KerberosConfigAttributes {
	return KerberosConfigAttributes{ref: ref}
}

func (kc KerberosConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc KerberosConfigAttributes) Krb5ConfigGcsUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("krb5_config_gcs_uri"))
}

func (kc KerberosConfigAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("principal"))
}

func (kc KerberosConfigAttributes) Keytab() terra.ListValue[KeytabAttributes] {
	return terra.ReferenceAsList[KeytabAttributes](kc.ref.Append("keytab"))
}

type KeytabAttributes struct {
	ref terra.Reference
}

func (k KeytabAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k KeytabAttributes) InternalWithRef(ref terra.Reference) KeytabAttributes {
	return KeytabAttributes{ref: ref}
}

func (k KeytabAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k KeytabAttributes) CloudSecret() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("cloud_secret"))
}

type MaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (mw MaintenanceWindowAttributes) InternalRef() (terra.Reference, error) {
	return mw.ref, nil
}

func (mw MaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) MaintenanceWindowAttributes {
	return MaintenanceWindowAttributes{ref: ref}
}

func (mw MaintenanceWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mw.ref.InternalTokens()
}

func (mw MaintenanceWindowAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(mw.ref.Append("day_of_week"))
}

func (mw MaintenanceWindowAttributes) HourOfDay() terra.NumberValue {
	return terra.ReferenceAsNumber(mw.ref.Append("hour_of_day"))
}

type MetadataIntegrationAttributes struct {
	ref terra.Reference
}

func (mi MetadataIntegrationAttributes) InternalRef() (terra.Reference, error) {
	return mi.ref, nil
}

func (mi MetadataIntegrationAttributes) InternalWithRef(ref terra.Reference) MetadataIntegrationAttributes {
	return MetadataIntegrationAttributes{ref: ref}
}

func (mi MetadataIntegrationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mi.ref.InternalTokens()
}

func (mi MetadataIntegrationAttributes) DataCatalogConfig() terra.ListValue[DataCatalogConfigAttributes] {
	return terra.ReferenceAsList[DataCatalogConfigAttributes](mi.ref.Append("data_catalog_config"))
}

type DataCatalogConfigAttributes struct {
	ref terra.Reference
}

func (dcc DataCatalogConfigAttributes) InternalRef() (terra.Reference, error) {
	return dcc.ref, nil
}

func (dcc DataCatalogConfigAttributes) InternalWithRef(ref terra.Reference) DataCatalogConfigAttributes {
	return DataCatalogConfigAttributes{ref: ref}
}

func (dcc DataCatalogConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcc.ref.InternalTokens()
}

func (dcc DataCatalogConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dcc.ref.Append("enabled"))
}

type NetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAttributes {
	return NetworkConfigAttributes{ref: ref}
}

func (nc NetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigAttributes) Consumers() terra.ListValue[ConsumersAttributes] {
	return terra.ReferenceAsList[ConsumersAttributes](nc.ref.Append("consumers"))
}

type ConsumersAttributes struct {
	ref terra.Reference
}

func (c ConsumersAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConsumersAttributes) InternalWithRef(ref terra.Reference) ConsumersAttributes {
	return ConsumersAttributes{ref: ref}
}

func (c ConsumersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConsumersAttributes) EndpointUri() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("endpoint_uri"))
}

func (c ConsumersAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("subnetwork"))
}

type ScalingConfigAttributes struct {
	ref terra.Reference
}

func (sc ScalingConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc ScalingConfigAttributes) InternalWithRef(ref terra.Reference) ScalingConfigAttributes {
	return ScalingConfigAttributes{ref: ref}
}

func (sc ScalingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc ScalingConfigAttributes) InstanceSize() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("instance_size"))
}

func (sc ScalingConfigAttributes) ScalingFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("scaling_factor"))
}

type TelemetryConfigAttributes struct {
	ref terra.Reference
}

func (tc TelemetryConfigAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TelemetryConfigAttributes) InternalWithRef(ref terra.Reference) TelemetryConfigAttributes {
	return TelemetryConfigAttributes{ref: ref}
}

func (tc TelemetryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TelemetryConfigAttributes) LogFormat() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("log_format"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EncryptionConfigState struct {
	KmsKey string `json:"kms_key"`
}

type HiveMetastoreConfigState struct {
	ConfigOverrides   map[string]string        `json:"config_overrides"`
	EndpointProtocol  string                   `json:"endpoint_protocol"`
	Version           string                   `json:"version"`
	AuxiliaryVersions []AuxiliaryVersionsState `json:"auxiliary_versions"`
	KerberosConfig    []KerberosConfigState    `json:"kerberos_config"`
}

type AuxiliaryVersionsState struct {
	ConfigOverrides map[string]string `json:"config_overrides"`
	Key             string            `json:"key"`
	Version         string            `json:"version"`
}

type KerberosConfigState struct {
	Krb5ConfigGcsUri string        `json:"krb5_config_gcs_uri"`
	Principal        string        `json:"principal"`
	Keytab           []KeytabState `json:"keytab"`
}

type KeytabState struct {
	CloudSecret string `json:"cloud_secret"`
}

type MaintenanceWindowState struct {
	DayOfWeek string  `json:"day_of_week"`
	HourOfDay float64 `json:"hour_of_day"`
}

type MetadataIntegrationState struct {
	DataCatalogConfig []DataCatalogConfigState `json:"data_catalog_config"`
}

type DataCatalogConfigState struct {
	Enabled bool `json:"enabled"`
}

type NetworkConfigState struct {
	Consumers []ConsumersState `json:"consumers"`
}

type ConsumersState struct {
	EndpointUri string `json:"endpoint_uri"`
	Subnetwork  string `json:"subnetwork"`
}

type ScalingConfigState struct {
	InstanceSize  string  `json:"instance_size"`
	ScalingFactor float64 `json:"scaling_factor"`
}

type TelemetryConfigState struct {
	LogFormat string `json:"log_format"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
