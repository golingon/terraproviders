// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package gkehubfeaturemembership

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Configmanagement struct {
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// Binauthz: optional
	Binauthz *Binauthz `hcl:"binauthz,block"`
	// ConfigSync: optional
	ConfigSync *ConfigSync `hcl:"config_sync,block"`
	// HierarchyController: optional
	HierarchyController *HierarchyController `hcl:"hierarchy_controller,block"`
	// PolicyController: optional
	PolicyController *PolicyController `hcl:"policy_controller,block"`
}

type Binauthz struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type ConfigSync struct {
	// PreventDrift: bool, optional
	PreventDrift terra.BoolValue `hcl:"prevent_drift,attr"`
	// SourceFormat: string, optional
	SourceFormat terra.StringValue `hcl:"source_format,attr"`
	// Git: optional
	Git *Git `hcl:"git,block"`
	// Oci: optional
	Oci *Oci `hcl:"oci,block"`
}

type Git struct {
	// GcpServiceAccountEmail: string, optional
	GcpServiceAccountEmail terra.StringValue `hcl:"gcp_service_account_email,attr"`
	// HttpsProxy: string, optional
	HttpsProxy terra.StringValue `hcl:"https_proxy,attr"`
	// PolicyDir: string, optional
	PolicyDir terra.StringValue `hcl:"policy_dir,attr"`
	// SecretType: string, optional
	SecretType terra.StringValue `hcl:"secret_type,attr"`
	// SyncBranch: string, optional
	SyncBranch terra.StringValue `hcl:"sync_branch,attr"`
	// SyncRepo: string, optional
	SyncRepo terra.StringValue `hcl:"sync_repo,attr"`
	// SyncRev: string, optional
	SyncRev terra.StringValue `hcl:"sync_rev,attr"`
	// SyncWaitSecs: string, optional
	SyncWaitSecs terra.StringValue `hcl:"sync_wait_secs,attr"`
}

type Oci struct {
	// GcpServiceAccountEmail: string, optional
	GcpServiceAccountEmail terra.StringValue `hcl:"gcp_service_account_email,attr"`
	// PolicyDir: string, optional
	PolicyDir terra.StringValue `hcl:"policy_dir,attr"`
	// SecretType: string, optional
	SecretType terra.StringValue `hcl:"secret_type,attr"`
	// SyncRepo: string, optional
	SyncRepo terra.StringValue `hcl:"sync_repo,attr"`
	// SyncWaitSecs: string, optional
	SyncWaitSecs terra.StringValue `hcl:"sync_wait_secs,attr"`
}

type HierarchyController struct {
	// EnableHierarchicalResourceQuota: bool, optional
	EnableHierarchicalResourceQuota terra.BoolValue `hcl:"enable_hierarchical_resource_quota,attr"`
	// EnablePodTreeLabels: bool, optional
	EnablePodTreeLabels terra.BoolValue `hcl:"enable_pod_tree_labels,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type PolicyController struct {
	// AuditIntervalSeconds: string, optional
	AuditIntervalSeconds terra.StringValue `hcl:"audit_interval_seconds,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// ExemptableNamespaces: list of string, optional
	ExemptableNamespaces terra.ListValue[terra.StringValue] `hcl:"exemptable_namespaces,attr"`
	// LogDeniesEnabled: bool, optional
	LogDeniesEnabled terra.BoolValue `hcl:"log_denies_enabled,attr"`
	// MutationEnabled: bool, optional
	MutationEnabled terra.BoolValue `hcl:"mutation_enabled,attr"`
	// ReferentialRulesEnabled: bool, optional
	ReferentialRulesEnabled terra.BoolValue `hcl:"referential_rules_enabled,attr"`
	// TemplateLibraryInstalled: bool, optional
	TemplateLibraryInstalled terra.BoolValue `hcl:"template_library_installed,attr"`
	// Monitoring: optional
	Monitoring *Monitoring `hcl:"monitoring,block"`
}

type Monitoring struct {
	// Backends: list of string, optional
	Backends terra.ListValue[terra.StringValue] `hcl:"backends,attr"`
}

type Mesh struct {
	// ControlPlane: string, optional
	ControlPlane terra.StringValue `hcl:"control_plane,attr"`
	// Management: string, optional
	Management terra.StringValue `hcl:"management,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConfigmanagementAttributes struct {
	ref terra.Reference
}

func (c ConfigmanagementAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigmanagementAttributes) InternalWithRef(ref terra.Reference) ConfigmanagementAttributes {
	return ConfigmanagementAttributes{ref: ref}
}

func (c ConfigmanagementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigmanagementAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("version"))
}

func (c ConfigmanagementAttributes) Binauthz() terra.ListValue[BinauthzAttributes] {
	return terra.ReferenceAsList[BinauthzAttributes](c.ref.Append("binauthz"))
}

func (c ConfigmanagementAttributes) ConfigSync() terra.ListValue[ConfigSyncAttributes] {
	return terra.ReferenceAsList[ConfigSyncAttributes](c.ref.Append("config_sync"))
}

func (c ConfigmanagementAttributes) HierarchyController() terra.ListValue[HierarchyControllerAttributes] {
	return terra.ReferenceAsList[HierarchyControllerAttributes](c.ref.Append("hierarchy_controller"))
}

func (c ConfigmanagementAttributes) PolicyController() terra.ListValue[PolicyControllerAttributes] {
	return terra.ReferenceAsList[PolicyControllerAttributes](c.ref.Append("policy_controller"))
}

type BinauthzAttributes struct {
	ref terra.Reference
}

func (b BinauthzAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BinauthzAttributes) InternalWithRef(ref terra.Reference) BinauthzAttributes {
	return BinauthzAttributes{ref: ref}
}

func (b BinauthzAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BinauthzAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(b.ref.Append("enabled"))
}

type ConfigSyncAttributes struct {
	ref terra.Reference
}

func (cs ConfigSyncAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs ConfigSyncAttributes) InternalWithRef(ref terra.Reference) ConfigSyncAttributes {
	return ConfigSyncAttributes{ref: ref}
}

func (cs ConfigSyncAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs ConfigSyncAttributes) PreventDrift() terra.BoolValue {
	return terra.ReferenceAsBool(cs.ref.Append("prevent_drift"))
}

func (cs ConfigSyncAttributes) SourceFormat() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("source_format"))
}

func (cs ConfigSyncAttributes) Git() terra.ListValue[GitAttributes] {
	return terra.ReferenceAsList[GitAttributes](cs.ref.Append("git"))
}

func (cs ConfigSyncAttributes) Oci() terra.ListValue[OciAttributes] {
	return terra.ReferenceAsList[OciAttributes](cs.ref.Append("oci"))
}

type GitAttributes struct {
	ref terra.Reference
}

func (g GitAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GitAttributes) InternalWithRef(ref terra.Reference) GitAttributes {
	return GitAttributes{ref: ref}
}

func (g GitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GitAttributes) GcpServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("gcp_service_account_email"))
}

func (g GitAttributes) HttpsProxy() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("https_proxy"))
}

func (g GitAttributes) PolicyDir() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("policy_dir"))
}

func (g GitAttributes) SecretType() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("secret_type"))
}

func (g GitAttributes) SyncBranch() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("sync_branch"))
}

func (g GitAttributes) SyncRepo() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("sync_repo"))
}

func (g GitAttributes) SyncRev() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("sync_rev"))
}

func (g GitAttributes) SyncWaitSecs() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("sync_wait_secs"))
}

type OciAttributes struct {
	ref terra.Reference
}

func (o OciAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OciAttributes) InternalWithRef(ref terra.Reference) OciAttributes {
	return OciAttributes{ref: ref}
}

func (o OciAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o OciAttributes) GcpServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("gcp_service_account_email"))
}

func (o OciAttributes) PolicyDir() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("policy_dir"))
}

func (o OciAttributes) SecretType() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("secret_type"))
}

func (o OciAttributes) SyncRepo() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("sync_repo"))
}

func (o OciAttributes) SyncWaitSecs() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("sync_wait_secs"))
}

type HierarchyControllerAttributes struct {
	ref terra.Reference
}

func (hc HierarchyControllerAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc HierarchyControllerAttributes) InternalWithRef(ref terra.Reference) HierarchyControllerAttributes {
	return HierarchyControllerAttributes{ref: ref}
}

func (hc HierarchyControllerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc HierarchyControllerAttributes) EnableHierarchicalResourceQuota() terra.BoolValue {
	return terra.ReferenceAsBool(hc.ref.Append("enable_hierarchical_resource_quota"))
}

func (hc HierarchyControllerAttributes) EnablePodTreeLabels() terra.BoolValue {
	return terra.ReferenceAsBool(hc.ref.Append("enable_pod_tree_labels"))
}

func (hc HierarchyControllerAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(hc.ref.Append("enabled"))
}

type PolicyControllerAttributes struct {
	ref terra.Reference
}

func (pc PolicyControllerAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PolicyControllerAttributes) InternalWithRef(ref terra.Reference) PolicyControllerAttributes {
	return PolicyControllerAttributes{ref: ref}
}

func (pc PolicyControllerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PolicyControllerAttributes) AuditIntervalSeconds() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("audit_interval_seconds"))
}

func (pc PolicyControllerAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc PolicyControllerAttributes) ExemptableNamespaces() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pc.ref.Append("exemptable_namespaces"))
}

func (pc PolicyControllerAttributes) LogDeniesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("log_denies_enabled"))
}

func (pc PolicyControllerAttributes) MutationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("mutation_enabled"))
}

func (pc PolicyControllerAttributes) ReferentialRulesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("referential_rules_enabled"))
}

func (pc PolicyControllerAttributes) TemplateLibraryInstalled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("template_library_installed"))
}

func (pc PolicyControllerAttributes) Monitoring() terra.ListValue[MonitoringAttributes] {
	return terra.ReferenceAsList[MonitoringAttributes](pc.ref.Append("monitoring"))
}

type MonitoringAttributes struct {
	ref terra.Reference
}

func (m MonitoringAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MonitoringAttributes) InternalWithRef(ref terra.Reference) MonitoringAttributes {
	return MonitoringAttributes{ref: ref}
}

func (m MonitoringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MonitoringAttributes) Backends() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("backends"))
}

type MeshAttributes struct {
	ref terra.Reference
}

func (m MeshAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MeshAttributes) InternalWithRef(ref terra.Reference) MeshAttributes {
	return MeshAttributes{ref: ref}
}

func (m MeshAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MeshAttributes) ControlPlane() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("control_plane"))
}

func (m MeshAttributes) Management() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("management"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConfigmanagementState struct {
	Version             string                     `json:"version"`
	Binauthz            []BinauthzState            `json:"binauthz"`
	ConfigSync          []ConfigSyncState          `json:"config_sync"`
	HierarchyController []HierarchyControllerState `json:"hierarchy_controller"`
	PolicyController    []PolicyControllerState    `json:"policy_controller"`
}

type BinauthzState struct {
	Enabled bool `json:"enabled"`
}

type ConfigSyncState struct {
	PreventDrift bool       `json:"prevent_drift"`
	SourceFormat string     `json:"source_format"`
	Git          []GitState `json:"git"`
	Oci          []OciState `json:"oci"`
}

type GitState struct {
	GcpServiceAccountEmail string `json:"gcp_service_account_email"`
	HttpsProxy             string `json:"https_proxy"`
	PolicyDir              string `json:"policy_dir"`
	SecretType             string `json:"secret_type"`
	SyncBranch             string `json:"sync_branch"`
	SyncRepo               string `json:"sync_repo"`
	SyncRev                string `json:"sync_rev"`
	SyncWaitSecs           string `json:"sync_wait_secs"`
}

type OciState struct {
	GcpServiceAccountEmail string `json:"gcp_service_account_email"`
	PolicyDir              string `json:"policy_dir"`
	SecretType             string `json:"secret_type"`
	SyncRepo               string `json:"sync_repo"`
	SyncWaitSecs           string `json:"sync_wait_secs"`
}

type HierarchyControllerState struct {
	EnableHierarchicalResourceQuota bool `json:"enable_hierarchical_resource_quota"`
	EnablePodTreeLabels             bool `json:"enable_pod_tree_labels"`
	Enabled                         bool `json:"enabled"`
}

type PolicyControllerState struct {
	AuditIntervalSeconds     string            `json:"audit_interval_seconds"`
	Enabled                  bool              `json:"enabled"`
	ExemptableNamespaces     []string          `json:"exemptable_namespaces"`
	LogDeniesEnabled         bool              `json:"log_denies_enabled"`
	MutationEnabled          bool              `json:"mutation_enabled"`
	ReferentialRulesEnabled  bool              `json:"referential_rules_enabled"`
	TemplateLibraryInstalled bool              `json:"template_library_installed"`
	Monitoring               []MonitoringState `json:"monitoring"`
}

type MonitoringState struct {
	Backends []string `json:"backends"`
}

type MeshState struct {
	ControlPlane string `json:"control_plane"`
	Management   string `json:"management"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
