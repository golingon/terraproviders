// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package computeorganizationsecuritypolicyrule

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Match struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// VersionedExpr: string, optional
	VersionedExpr terra.StringValue `hcl:"versioned_expr,attr"`
	// Config: required
	Config *Config `hcl:"config,block" validate:"required"`
}

type Config struct {
	// DestIpRanges: list of string, optional
	DestIpRanges terra.ListValue[terra.StringValue] `hcl:"dest_ip_ranges,attr"`
	// SrcIpRanges: list of string, optional
	SrcIpRanges terra.ListValue[terra.StringValue] `hcl:"src_ip_ranges,attr"`
	// Layer4Config: min=1
	Layer4Config []Layer4Config `hcl:"layer4_config,block" validate:"min=1"`
}

type Layer4Config struct {
	// IpProtocol: string, required
	IpProtocol terra.StringValue `hcl:"ip_protocol,attr" validate:"required"`
	// Ports: list of string, optional
	Ports terra.ListValue[terra.StringValue] `hcl:"ports,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type MatchAttributes struct {
	ref terra.Reference
}

func (m MatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MatchAttributes) InternalWithRef(ref terra.Reference) MatchAttributes {
	return MatchAttributes{ref: ref}
}

func (m MatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MatchAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("description"))
}

func (m MatchAttributes) VersionedExpr() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("versioned_expr"))
}

func (m MatchAttributes) Config() terra.ListValue[ConfigAttributes] {
	return terra.ReferenceAsList[ConfigAttributes](m.ref.Append("config"))
}

type ConfigAttributes struct {
	ref terra.Reference
}

func (c ConfigAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigAttributes) InternalWithRef(ref terra.Reference) ConfigAttributes {
	return ConfigAttributes{ref: ref}
}

func (c ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigAttributes) DestIpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("dest_ip_ranges"))
}

func (c ConfigAttributes) SrcIpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("src_ip_ranges"))
}

func (c ConfigAttributes) Layer4Config() terra.ListValue[Layer4ConfigAttributes] {
	return terra.ReferenceAsList[Layer4ConfigAttributes](c.ref.Append("layer4_config"))
}

type Layer4ConfigAttributes struct {
	ref terra.Reference
}

func (lc Layer4ConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc Layer4ConfigAttributes) InternalWithRef(ref terra.Reference) Layer4ConfigAttributes {
	return Layer4ConfigAttributes{ref: ref}
}

func (lc Layer4ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc Layer4ConfigAttributes) IpProtocol() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("ip_protocol"))
}

func (lc Layer4ConfigAttributes) Ports() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lc.ref.Append("ports"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type MatchState struct {
	Description   string        `json:"description"`
	VersionedExpr string        `json:"versioned_expr"`
	Config        []ConfigState `json:"config"`
}

type ConfigState struct {
	DestIpRanges []string            `json:"dest_ip_ranges"`
	SrcIpRanges  []string            `json:"src_ip_ranges"`
	Layer4Config []Layer4ConfigState `json:"layer4_config"`
}

type Layer4ConfigState struct {
	IpProtocol string   `json:"ip_protocol"`
	Ports      []string `json:"ports"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
