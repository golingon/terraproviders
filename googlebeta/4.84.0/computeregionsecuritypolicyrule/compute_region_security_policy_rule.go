// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package computeregionsecuritypolicyrule

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Match struct {
	// VersionedExpr: string, optional
	VersionedExpr terra.StringValue `hcl:"versioned_expr,attr"`
	// Config: optional
	Config *Config `hcl:"config,block"`
}

type Config struct {
	// SrcIpRanges: list of string, optional
	SrcIpRanges terra.ListValue[terra.StringValue] `hcl:"src_ip_ranges,attr"`
}

type NetworkMatch struct {
	// DestIpRanges: list of string, optional
	DestIpRanges terra.ListValue[terra.StringValue] `hcl:"dest_ip_ranges,attr"`
	// DestPorts: list of string, optional
	DestPorts terra.ListValue[terra.StringValue] `hcl:"dest_ports,attr"`
	// IpProtocols: list of string, optional
	IpProtocols terra.ListValue[terra.StringValue] `hcl:"ip_protocols,attr"`
	// SrcAsns: list of number, optional
	SrcAsns terra.ListValue[terra.NumberValue] `hcl:"src_asns,attr"`
	// SrcIpRanges: list of string, optional
	SrcIpRanges terra.ListValue[terra.StringValue] `hcl:"src_ip_ranges,attr"`
	// SrcPorts: list of string, optional
	SrcPorts terra.ListValue[terra.StringValue] `hcl:"src_ports,attr"`
	// SrcRegionCodes: list of string, optional
	SrcRegionCodes terra.ListValue[terra.StringValue] `hcl:"src_region_codes,attr"`
	// UserDefinedFields: min=0
	UserDefinedFields []UserDefinedFields `hcl:"user_defined_fields,block" validate:"min=0"`
}

type UserDefinedFields struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Values: list of string, optional
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type MatchAttributes struct {
	ref terra.Reference
}

func (m MatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MatchAttributes) InternalWithRef(ref terra.Reference) MatchAttributes {
	return MatchAttributes{ref: ref}
}

func (m MatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MatchAttributes) VersionedExpr() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("versioned_expr"))
}

func (m MatchAttributes) Config() terra.ListValue[ConfigAttributes] {
	return terra.ReferenceAsList[ConfigAttributes](m.ref.Append("config"))
}

type ConfigAttributes struct {
	ref terra.Reference
}

func (c ConfigAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigAttributes) InternalWithRef(ref terra.Reference) ConfigAttributes {
	return ConfigAttributes{ref: ref}
}

func (c ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigAttributes) SrcIpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("src_ip_ranges"))
}

type NetworkMatchAttributes struct {
	ref terra.Reference
}

func (nm NetworkMatchAttributes) InternalRef() (terra.Reference, error) {
	return nm.ref, nil
}

func (nm NetworkMatchAttributes) InternalWithRef(ref terra.Reference) NetworkMatchAttributes {
	return NetworkMatchAttributes{ref: ref}
}

func (nm NetworkMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nm.ref.InternalTokens()
}

func (nm NetworkMatchAttributes) DestIpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nm.ref.Append("dest_ip_ranges"))
}

func (nm NetworkMatchAttributes) DestPorts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nm.ref.Append("dest_ports"))
}

func (nm NetworkMatchAttributes) IpProtocols() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nm.ref.Append("ip_protocols"))
}

func (nm NetworkMatchAttributes) SrcAsns() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](nm.ref.Append("src_asns"))
}

func (nm NetworkMatchAttributes) SrcIpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nm.ref.Append("src_ip_ranges"))
}

func (nm NetworkMatchAttributes) SrcPorts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nm.ref.Append("src_ports"))
}

func (nm NetworkMatchAttributes) SrcRegionCodes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nm.ref.Append("src_region_codes"))
}

func (nm NetworkMatchAttributes) UserDefinedFields() terra.ListValue[UserDefinedFieldsAttributes] {
	return terra.ReferenceAsList[UserDefinedFieldsAttributes](nm.ref.Append("user_defined_fields"))
}

type UserDefinedFieldsAttributes struct {
	ref terra.Reference
}

func (udf UserDefinedFieldsAttributes) InternalRef() (terra.Reference, error) {
	return udf.ref, nil
}

func (udf UserDefinedFieldsAttributes) InternalWithRef(ref terra.Reference) UserDefinedFieldsAttributes {
	return UserDefinedFieldsAttributes{ref: ref}
}

func (udf UserDefinedFieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return udf.ref.InternalTokens()
}

func (udf UserDefinedFieldsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(udf.ref.Append("name"))
}

func (udf UserDefinedFieldsAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](udf.ref.Append("values"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type MatchState struct {
	VersionedExpr string        `json:"versioned_expr"`
	Config        []ConfigState `json:"config"`
}

type ConfigState struct {
	SrcIpRanges []string `json:"src_ip_ranges"`
}

type NetworkMatchState struct {
	DestIpRanges      []string                 `json:"dest_ip_ranges"`
	DestPorts         []string                 `json:"dest_ports"`
	IpProtocols       []string                 `json:"ip_protocols"`
	SrcAsns           []float64                `json:"src_asns"`
	SrcIpRanges       []string                 `json:"src_ip_ranges"`
	SrcPorts          []string                 `json:"src_ports"`
	SrcRegionCodes    []string                 `json:"src_region_codes"`
	UserDefinedFields []UserDefinedFieldsState `json:"user_defined_fields"`
}

type UserDefinedFieldsState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
