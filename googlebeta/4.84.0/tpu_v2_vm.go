// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	tpuv2vm "github.com/golingon/terraproviders/googlebeta/4.84.0/tpuv2vm"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewTpuV2Vm creates a new instance of [TpuV2Vm].
func NewTpuV2Vm(name string, args TpuV2VmArgs) *TpuV2Vm {
	return &TpuV2Vm{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TpuV2Vm)(nil)

// TpuV2Vm represents the Terraform resource google_tpu_v2_vm.
type TpuV2Vm struct {
	Name      string
	Args      TpuV2VmArgs
	state     *tpuV2VmState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [TpuV2Vm].
func (tvv *TpuV2Vm) Type() string {
	return "google_tpu_v2_vm"
}

// LocalName returns the local name for [TpuV2Vm].
func (tvv *TpuV2Vm) LocalName() string {
	return tvv.Name
}

// Configuration returns the configuration (args) for [TpuV2Vm].
func (tvv *TpuV2Vm) Configuration() interface{} {
	return tvv.Args
}

// DependOn is used for other resources to depend on [TpuV2Vm].
func (tvv *TpuV2Vm) DependOn() terra.Reference {
	return terra.ReferenceResource(tvv)
}

// Dependencies returns the list of resources [TpuV2Vm] depends_on.
func (tvv *TpuV2Vm) Dependencies() terra.Dependencies {
	return tvv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [TpuV2Vm].
func (tvv *TpuV2Vm) LifecycleManagement() *terra.Lifecycle {
	return tvv.Lifecycle
}

// Attributes returns the attributes for [TpuV2Vm].
func (tvv *TpuV2Vm) Attributes() tpuV2VmAttributes {
	return tpuV2VmAttributes{ref: terra.ReferenceResource(tvv)}
}

// ImportState imports the given attribute values into [TpuV2Vm]'s state.
func (tvv *TpuV2Vm) ImportState(av io.Reader) error {
	tvv.state = &tpuV2VmState{}
	if err := json.NewDecoder(av).Decode(tvv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tvv.Type(), tvv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [TpuV2Vm] has state.
func (tvv *TpuV2Vm) State() (*tpuV2VmState, bool) {
	return tvv.state, tvv.state != nil
}

// StateMust returns the state for [TpuV2Vm]. Panics if the state is nil.
func (tvv *TpuV2Vm) StateMust() *tpuV2VmState {
	if tvv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tvv.Type(), tvv.LocalName()))
	}
	return tvv.state
}

// TpuV2VmArgs contains the configurations for google_tpu_v2_vm.
type TpuV2VmArgs struct {
	// AcceleratorType: string, optional
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RuntimeVersion: string, required
	RuntimeVersion terra.StringValue `hcl:"runtime_version,attr" validate:"required"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Timeouts: optional
	Timeouts *tpuv2vm.Timeouts `hcl:"timeouts,block"`
}
type tpuV2VmAttributes struct {
	ref terra.Reference
}

// AcceleratorType returns a reference to field accelerator_type of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("accelerator_type"))
}

// Description returns a reference to field description of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("description"))
}

// Id returns a reference to field id of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("id"))
}

// Name returns a reference to field name of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("name"))
}

// Project returns a reference to field project of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("project"))
}

// RuntimeVersion returns a reference to field runtime_version of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) RuntimeVersion() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("runtime_version"))
}

// Zone returns a reference to field zone of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("zone"))
}

func (tvv tpuV2VmAttributes) Timeouts() tpuv2vm.TimeoutsAttributes {
	return terra.ReferenceAsSingle[tpuv2vm.TimeoutsAttributes](tvv.ref.Append("timeouts"))
}

type tpuV2VmState struct {
	AcceleratorType string                 `json:"accelerator_type"`
	Description     string                 `json:"description"`
	Id              string                 `json:"id"`
	Name            string                 `json:"name"`
	Project         string                 `json:"project"`
	RuntimeVersion  string                 `json:"runtime_version"`
	Zone            string                 `json:"zone"`
	Timeouts        *tpuv2vm.TimeoutsState `json:"timeouts"`
}
