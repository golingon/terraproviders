// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package clouddeploydeliverypipeline

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Condition struct {
	// PipelineReadyCondition: min=0
	PipelineReadyCondition []PipelineReadyCondition `hcl:"pipeline_ready_condition,block" validate:"min=0"`
	// TargetsPresentCondition: min=0
	TargetsPresentCondition []TargetsPresentCondition `hcl:"targets_present_condition,block" validate:"min=0"`
	// TargetsTypeCondition: min=0
	TargetsTypeCondition []TargetsTypeCondition `hcl:"targets_type_condition,block" validate:"min=0"`
}

type PipelineReadyCondition struct{}

type TargetsPresentCondition struct{}

type TargetsTypeCondition struct{}

type SerialPipeline struct {
	// Stages: min=0
	Stages []Stages `hcl:"stages,block" validate:"min=0"`
}

type Stages struct {
	// Profiles: list of string, optional
	Profiles terra.ListValue[terra.StringValue] `hcl:"profiles,attr"`
	// TargetId: string, optional
	TargetId terra.StringValue `hcl:"target_id,attr"`
	// DeployParameters: min=0
	DeployParameters []DeployParameters `hcl:"deploy_parameters,block" validate:"min=0"`
	// Strategy: optional
	Strategy *Strategy `hcl:"strategy,block"`
}

type DeployParameters struct {
	// MatchTargetLabels: map of string, optional
	MatchTargetLabels terra.MapValue[terra.StringValue] `hcl:"match_target_labels,attr"`
	// Values: map of string, required
	Values terra.MapValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type Strategy struct {
	// Canary: optional
	Canary *Canary `hcl:"canary,block"`
	// Standard: optional
	Standard *Standard `hcl:"standard,block"`
}

type Canary struct {
	// CanaryDeployment: optional
	CanaryDeployment *CanaryDeployment `hcl:"canary_deployment,block"`
	// CustomCanaryDeployment: optional
	CustomCanaryDeployment *CustomCanaryDeployment `hcl:"custom_canary_deployment,block"`
	// RuntimeConfig: optional
	RuntimeConfig *RuntimeConfig `hcl:"runtime_config,block"`
}

type CanaryDeployment struct {
	// Percentages: list of number, required
	Percentages terra.ListValue[terra.NumberValue] `hcl:"percentages,attr" validate:"required"`
	// Verify: bool, optional
	Verify terra.BoolValue `hcl:"verify,attr"`
	// CanaryDeploymentPostdeploy: optional
	Postdeploy *CanaryDeploymentPostdeploy `hcl:"postdeploy,block"`
	// CanaryDeploymentPredeploy: optional
	Predeploy *CanaryDeploymentPredeploy `hcl:"predeploy,block"`
}

type CanaryDeploymentPostdeploy struct {
	// Actions: list of string, optional
	Actions terra.ListValue[terra.StringValue] `hcl:"actions,attr"`
}

type CanaryDeploymentPredeploy struct {
	// Actions: list of string, optional
	Actions terra.ListValue[terra.StringValue] `hcl:"actions,attr"`
}

type CustomCanaryDeployment struct {
	// PhaseConfigs: min=1
	PhaseConfigs []PhaseConfigs `hcl:"phase_configs,block" validate:"min=1"`
}

type PhaseConfigs struct {
	// Percentage: number, required
	Percentage terra.NumberValue `hcl:"percentage,attr" validate:"required"`
	// PhaseId: string, required
	PhaseId terra.StringValue `hcl:"phase_id,attr" validate:"required"`
	// Profiles: list of string, optional
	Profiles terra.ListValue[terra.StringValue] `hcl:"profiles,attr"`
	// Verify: bool, optional
	Verify terra.BoolValue `hcl:"verify,attr"`
	// PhaseConfigsPostdeploy: optional
	Postdeploy *PhaseConfigsPostdeploy `hcl:"postdeploy,block"`
	// PhaseConfigsPredeploy: optional
	Predeploy *PhaseConfigsPredeploy `hcl:"predeploy,block"`
}

type PhaseConfigsPostdeploy struct {
	// Actions: list of string, optional
	Actions terra.ListValue[terra.StringValue] `hcl:"actions,attr"`
}

type PhaseConfigsPredeploy struct {
	// Actions: list of string, optional
	Actions terra.ListValue[terra.StringValue] `hcl:"actions,attr"`
}

type RuntimeConfig struct {
	// CloudRun: optional
	CloudRun *CloudRun `hcl:"cloud_run,block"`
	// Kubernetes: optional
	Kubernetes *Kubernetes `hcl:"kubernetes,block"`
}

type CloudRun struct {
	// AutomaticTrafficControl: bool, optional
	AutomaticTrafficControl terra.BoolValue `hcl:"automatic_traffic_control,attr"`
}

type Kubernetes struct {
	// GatewayServiceMesh: optional
	GatewayServiceMesh *GatewayServiceMesh `hcl:"gateway_service_mesh,block"`
	// ServiceNetworking: optional
	ServiceNetworking *ServiceNetworking `hcl:"service_networking,block"`
}

type GatewayServiceMesh struct {
	// Deployment: string, required
	Deployment terra.StringValue `hcl:"deployment,attr" validate:"required"`
	// HttpRoute: string, required
	HttpRoute terra.StringValue `hcl:"http_route,attr" validate:"required"`
	// RouteUpdateWaitTime: string, optional
	RouteUpdateWaitTime terra.StringValue `hcl:"route_update_wait_time,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
}

type ServiceNetworking struct {
	// Deployment: string, required
	Deployment terra.StringValue `hcl:"deployment,attr" validate:"required"`
	// DisablePodOverprovisioning: bool, optional
	DisablePodOverprovisioning terra.BoolValue `hcl:"disable_pod_overprovisioning,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
}

type Standard struct {
	// Verify: bool, optional
	Verify terra.BoolValue `hcl:"verify,attr"`
	// StandardPostdeploy: optional
	Postdeploy *StandardPostdeploy `hcl:"postdeploy,block"`
	// StandardPredeploy: optional
	Predeploy *StandardPredeploy `hcl:"predeploy,block"`
}

type StandardPostdeploy struct {
	// Actions: list of string, optional
	Actions terra.ListValue[terra.StringValue] `hcl:"actions,attr"`
}

type StandardPredeploy struct {
	// Actions: list of string, optional
	Actions terra.ListValue[terra.StringValue] `hcl:"actions,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConditionAttributes struct {
	ref terra.Reference
}

func (c ConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionAttributes) InternalWithRef(ref terra.Reference) ConditionAttributes {
	return ConditionAttributes{ref: ref}
}

func (c ConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionAttributes) PipelineReadyCondition() terra.ListValue[PipelineReadyConditionAttributes] {
	return terra.ReferenceAsList[PipelineReadyConditionAttributes](c.ref.Append("pipeline_ready_condition"))
}

func (c ConditionAttributes) TargetsPresentCondition() terra.ListValue[TargetsPresentConditionAttributes] {
	return terra.ReferenceAsList[TargetsPresentConditionAttributes](c.ref.Append("targets_present_condition"))
}

func (c ConditionAttributes) TargetsTypeCondition() terra.ListValue[TargetsTypeConditionAttributes] {
	return terra.ReferenceAsList[TargetsTypeConditionAttributes](c.ref.Append("targets_type_condition"))
}

type PipelineReadyConditionAttributes struct {
	ref terra.Reference
}

func (prc PipelineReadyConditionAttributes) InternalRef() (terra.Reference, error) {
	return prc.ref, nil
}

func (prc PipelineReadyConditionAttributes) InternalWithRef(ref terra.Reference) PipelineReadyConditionAttributes {
	return PipelineReadyConditionAttributes{ref: ref}
}

func (prc PipelineReadyConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return prc.ref.InternalTokens()
}

func (prc PipelineReadyConditionAttributes) Status() terra.BoolValue {
	return terra.ReferenceAsBool(prc.ref.Append("status"))
}

func (prc PipelineReadyConditionAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(prc.ref.Append("update_time"))
}

type TargetsPresentConditionAttributes struct {
	ref terra.Reference
}

func (tpc TargetsPresentConditionAttributes) InternalRef() (terra.Reference, error) {
	return tpc.ref, nil
}

func (tpc TargetsPresentConditionAttributes) InternalWithRef(ref terra.Reference) TargetsPresentConditionAttributes {
	return TargetsPresentConditionAttributes{ref: ref}
}

func (tpc TargetsPresentConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tpc.ref.InternalTokens()
}

func (tpc TargetsPresentConditionAttributes) MissingTargets() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tpc.ref.Append("missing_targets"))
}

func (tpc TargetsPresentConditionAttributes) Status() terra.BoolValue {
	return terra.ReferenceAsBool(tpc.ref.Append("status"))
}

func (tpc TargetsPresentConditionAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(tpc.ref.Append("update_time"))
}

type TargetsTypeConditionAttributes struct {
	ref terra.Reference
}

func (ttc TargetsTypeConditionAttributes) InternalRef() (terra.Reference, error) {
	return ttc.ref, nil
}

func (ttc TargetsTypeConditionAttributes) InternalWithRef(ref terra.Reference) TargetsTypeConditionAttributes {
	return TargetsTypeConditionAttributes{ref: ref}
}

func (ttc TargetsTypeConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ttc.ref.InternalTokens()
}

func (ttc TargetsTypeConditionAttributes) ErrorDetails() terra.StringValue {
	return terra.ReferenceAsString(ttc.ref.Append("error_details"))
}

func (ttc TargetsTypeConditionAttributes) Status() terra.BoolValue {
	return terra.ReferenceAsBool(ttc.ref.Append("status"))
}

type SerialPipelineAttributes struct {
	ref terra.Reference
}

func (sp SerialPipelineAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SerialPipelineAttributes) InternalWithRef(ref terra.Reference) SerialPipelineAttributes {
	return SerialPipelineAttributes{ref: ref}
}

func (sp SerialPipelineAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SerialPipelineAttributes) Stages() terra.ListValue[StagesAttributes] {
	return terra.ReferenceAsList[StagesAttributes](sp.ref.Append("stages"))
}

type StagesAttributes struct {
	ref terra.Reference
}

func (s StagesAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StagesAttributes) InternalWithRef(ref terra.Reference) StagesAttributes {
	return StagesAttributes{ref: ref}
}

func (s StagesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StagesAttributes) Profiles() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("profiles"))
}

func (s StagesAttributes) TargetId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("target_id"))
}

func (s StagesAttributes) DeployParameters() terra.ListValue[DeployParametersAttributes] {
	return terra.ReferenceAsList[DeployParametersAttributes](s.ref.Append("deploy_parameters"))
}

func (s StagesAttributes) Strategy() terra.ListValue[StrategyAttributes] {
	return terra.ReferenceAsList[StrategyAttributes](s.ref.Append("strategy"))
}

type DeployParametersAttributes struct {
	ref terra.Reference
}

func (dp DeployParametersAttributes) InternalRef() (terra.Reference, error) {
	return dp.ref, nil
}

func (dp DeployParametersAttributes) InternalWithRef(ref terra.Reference) DeployParametersAttributes {
	return DeployParametersAttributes{ref: ref}
}

func (dp DeployParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dp.ref.InternalTokens()
}

func (dp DeployParametersAttributes) MatchTargetLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dp.ref.Append("match_target_labels"))
}

func (dp DeployParametersAttributes) Values() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dp.ref.Append("values"))
}

type StrategyAttributes struct {
	ref terra.Reference
}

func (s StrategyAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StrategyAttributes) InternalWithRef(ref terra.Reference) StrategyAttributes {
	return StrategyAttributes{ref: ref}
}

func (s StrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StrategyAttributes) Canary() terra.ListValue[CanaryAttributes] {
	return terra.ReferenceAsList[CanaryAttributes](s.ref.Append("canary"))
}

func (s StrategyAttributes) Standard() terra.ListValue[StandardAttributes] {
	return terra.ReferenceAsList[StandardAttributes](s.ref.Append("standard"))
}

type CanaryAttributes struct {
	ref terra.Reference
}

func (c CanaryAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CanaryAttributes) InternalWithRef(ref terra.Reference) CanaryAttributes {
	return CanaryAttributes{ref: ref}
}

func (c CanaryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CanaryAttributes) CanaryDeployment() terra.ListValue[CanaryDeploymentAttributes] {
	return terra.ReferenceAsList[CanaryDeploymentAttributes](c.ref.Append("canary_deployment"))
}

func (c CanaryAttributes) CustomCanaryDeployment() terra.ListValue[CustomCanaryDeploymentAttributes] {
	return terra.ReferenceAsList[CustomCanaryDeploymentAttributes](c.ref.Append("custom_canary_deployment"))
}

func (c CanaryAttributes) RuntimeConfig() terra.ListValue[RuntimeConfigAttributes] {
	return terra.ReferenceAsList[RuntimeConfigAttributes](c.ref.Append("runtime_config"))
}

type CanaryDeploymentAttributes struct {
	ref terra.Reference
}

func (cd CanaryDeploymentAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd CanaryDeploymentAttributes) InternalWithRef(ref terra.Reference) CanaryDeploymentAttributes {
	return CanaryDeploymentAttributes{ref: ref}
}

func (cd CanaryDeploymentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd CanaryDeploymentAttributes) Percentages() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](cd.ref.Append("percentages"))
}

func (cd CanaryDeploymentAttributes) Verify() terra.BoolValue {
	return terra.ReferenceAsBool(cd.ref.Append("verify"))
}

func (cd CanaryDeploymentAttributes) Postdeploy() terra.ListValue[CanaryDeploymentPostdeployAttributes] {
	return terra.ReferenceAsList[CanaryDeploymentPostdeployAttributes](cd.ref.Append("postdeploy"))
}

func (cd CanaryDeploymentAttributes) Predeploy() terra.ListValue[CanaryDeploymentPredeployAttributes] {
	return terra.ReferenceAsList[CanaryDeploymentPredeployAttributes](cd.ref.Append("predeploy"))
}

type CanaryDeploymentPostdeployAttributes struct {
	ref terra.Reference
}

func (p CanaryDeploymentPostdeployAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p CanaryDeploymentPostdeployAttributes) InternalWithRef(ref terra.Reference) CanaryDeploymentPostdeployAttributes {
	return CanaryDeploymentPostdeployAttributes{ref: ref}
}

func (p CanaryDeploymentPostdeployAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p CanaryDeploymentPostdeployAttributes) Actions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("actions"))
}

type CanaryDeploymentPredeployAttributes struct {
	ref terra.Reference
}

func (p CanaryDeploymentPredeployAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p CanaryDeploymentPredeployAttributes) InternalWithRef(ref terra.Reference) CanaryDeploymentPredeployAttributes {
	return CanaryDeploymentPredeployAttributes{ref: ref}
}

func (p CanaryDeploymentPredeployAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p CanaryDeploymentPredeployAttributes) Actions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("actions"))
}

type CustomCanaryDeploymentAttributes struct {
	ref terra.Reference
}

func (ccd CustomCanaryDeploymentAttributes) InternalRef() (terra.Reference, error) {
	return ccd.ref, nil
}

func (ccd CustomCanaryDeploymentAttributes) InternalWithRef(ref terra.Reference) CustomCanaryDeploymentAttributes {
	return CustomCanaryDeploymentAttributes{ref: ref}
}

func (ccd CustomCanaryDeploymentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccd.ref.InternalTokens()
}

func (ccd CustomCanaryDeploymentAttributes) PhaseConfigs() terra.ListValue[PhaseConfigsAttributes] {
	return terra.ReferenceAsList[PhaseConfigsAttributes](ccd.ref.Append("phase_configs"))
}

type PhaseConfigsAttributes struct {
	ref terra.Reference
}

func (pc PhaseConfigsAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PhaseConfigsAttributes) InternalWithRef(ref terra.Reference) PhaseConfigsAttributes {
	return PhaseConfigsAttributes{ref: ref}
}

func (pc PhaseConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PhaseConfigsAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("percentage"))
}

func (pc PhaseConfigsAttributes) PhaseId() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("phase_id"))
}

func (pc PhaseConfigsAttributes) Profiles() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pc.ref.Append("profiles"))
}

func (pc PhaseConfigsAttributes) Verify() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("verify"))
}

func (pc PhaseConfigsAttributes) Postdeploy() terra.ListValue[PhaseConfigsPostdeployAttributes] {
	return terra.ReferenceAsList[PhaseConfigsPostdeployAttributes](pc.ref.Append("postdeploy"))
}

func (pc PhaseConfigsAttributes) Predeploy() terra.ListValue[PhaseConfigsPredeployAttributes] {
	return terra.ReferenceAsList[PhaseConfigsPredeployAttributes](pc.ref.Append("predeploy"))
}

type PhaseConfigsPostdeployAttributes struct {
	ref terra.Reference
}

func (p PhaseConfigsPostdeployAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PhaseConfigsPostdeployAttributes) InternalWithRef(ref terra.Reference) PhaseConfigsPostdeployAttributes {
	return PhaseConfigsPostdeployAttributes{ref: ref}
}

func (p PhaseConfigsPostdeployAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PhaseConfigsPostdeployAttributes) Actions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("actions"))
}

type PhaseConfigsPredeployAttributes struct {
	ref terra.Reference
}

func (p PhaseConfigsPredeployAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PhaseConfigsPredeployAttributes) InternalWithRef(ref terra.Reference) PhaseConfigsPredeployAttributes {
	return PhaseConfigsPredeployAttributes{ref: ref}
}

func (p PhaseConfigsPredeployAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PhaseConfigsPredeployAttributes) Actions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("actions"))
}

type RuntimeConfigAttributes struct {
	ref terra.Reference
}

func (rc RuntimeConfigAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc RuntimeConfigAttributes) InternalWithRef(ref terra.Reference) RuntimeConfigAttributes {
	return RuntimeConfigAttributes{ref: ref}
}

func (rc RuntimeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc RuntimeConfigAttributes) CloudRun() terra.ListValue[CloudRunAttributes] {
	return terra.ReferenceAsList[CloudRunAttributes](rc.ref.Append("cloud_run"))
}

func (rc RuntimeConfigAttributes) Kubernetes() terra.ListValue[KubernetesAttributes] {
	return terra.ReferenceAsList[KubernetesAttributes](rc.ref.Append("kubernetes"))
}

type CloudRunAttributes struct {
	ref terra.Reference
}

func (cr CloudRunAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr CloudRunAttributes) InternalWithRef(ref terra.Reference) CloudRunAttributes {
	return CloudRunAttributes{ref: ref}
}

func (cr CloudRunAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr CloudRunAttributes) AutomaticTrafficControl() terra.BoolValue {
	return terra.ReferenceAsBool(cr.ref.Append("automatic_traffic_control"))
}

type KubernetesAttributes struct {
	ref terra.Reference
}

func (k KubernetesAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k KubernetesAttributes) InternalWithRef(ref terra.Reference) KubernetesAttributes {
	return KubernetesAttributes{ref: ref}
}

func (k KubernetesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k KubernetesAttributes) GatewayServiceMesh() terra.ListValue[GatewayServiceMeshAttributes] {
	return terra.ReferenceAsList[GatewayServiceMeshAttributes](k.ref.Append("gateway_service_mesh"))
}

func (k KubernetesAttributes) ServiceNetworking() terra.ListValue[ServiceNetworkingAttributes] {
	return terra.ReferenceAsList[ServiceNetworkingAttributes](k.ref.Append("service_networking"))
}

type GatewayServiceMeshAttributes struct {
	ref terra.Reference
}

func (gsm GatewayServiceMeshAttributes) InternalRef() (terra.Reference, error) {
	return gsm.ref, nil
}

func (gsm GatewayServiceMeshAttributes) InternalWithRef(ref terra.Reference) GatewayServiceMeshAttributes {
	return GatewayServiceMeshAttributes{ref: ref}
}

func (gsm GatewayServiceMeshAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gsm.ref.InternalTokens()
}

func (gsm GatewayServiceMeshAttributes) Deployment() terra.StringValue {
	return terra.ReferenceAsString(gsm.ref.Append("deployment"))
}

func (gsm GatewayServiceMeshAttributes) HttpRoute() terra.StringValue {
	return terra.ReferenceAsString(gsm.ref.Append("http_route"))
}

func (gsm GatewayServiceMeshAttributes) RouteUpdateWaitTime() terra.StringValue {
	return terra.ReferenceAsString(gsm.ref.Append("route_update_wait_time"))
}

func (gsm GatewayServiceMeshAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(gsm.ref.Append("service"))
}

type ServiceNetworkingAttributes struct {
	ref terra.Reference
}

func (sn ServiceNetworkingAttributes) InternalRef() (terra.Reference, error) {
	return sn.ref, nil
}

func (sn ServiceNetworkingAttributes) InternalWithRef(ref terra.Reference) ServiceNetworkingAttributes {
	return ServiceNetworkingAttributes{ref: ref}
}

func (sn ServiceNetworkingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sn.ref.InternalTokens()
}

func (sn ServiceNetworkingAttributes) Deployment() terra.StringValue {
	return terra.ReferenceAsString(sn.ref.Append("deployment"))
}

func (sn ServiceNetworkingAttributes) DisablePodOverprovisioning() terra.BoolValue {
	return terra.ReferenceAsBool(sn.ref.Append("disable_pod_overprovisioning"))
}

func (sn ServiceNetworkingAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(sn.ref.Append("service"))
}

type StandardAttributes struct {
	ref terra.Reference
}

func (s StandardAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StandardAttributes) InternalWithRef(ref terra.Reference) StandardAttributes {
	return StandardAttributes{ref: ref}
}

func (s StandardAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StandardAttributes) Verify() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("verify"))
}

func (s StandardAttributes) Postdeploy() terra.ListValue[StandardPostdeployAttributes] {
	return terra.ReferenceAsList[StandardPostdeployAttributes](s.ref.Append("postdeploy"))
}

func (s StandardAttributes) Predeploy() terra.ListValue[StandardPredeployAttributes] {
	return terra.ReferenceAsList[StandardPredeployAttributes](s.ref.Append("predeploy"))
}

type StandardPostdeployAttributes struct {
	ref terra.Reference
}

func (p StandardPostdeployAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p StandardPostdeployAttributes) InternalWithRef(ref terra.Reference) StandardPostdeployAttributes {
	return StandardPostdeployAttributes{ref: ref}
}

func (p StandardPostdeployAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p StandardPostdeployAttributes) Actions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("actions"))
}

type StandardPredeployAttributes struct {
	ref terra.Reference
}

func (p StandardPredeployAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p StandardPredeployAttributes) InternalWithRef(ref terra.Reference) StandardPredeployAttributes {
	return StandardPredeployAttributes{ref: ref}
}

func (p StandardPredeployAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p StandardPredeployAttributes) Actions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("actions"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConditionState struct {
	PipelineReadyCondition  []PipelineReadyConditionState  `json:"pipeline_ready_condition"`
	TargetsPresentCondition []TargetsPresentConditionState `json:"targets_present_condition"`
	TargetsTypeCondition    []TargetsTypeConditionState    `json:"targets_type_condition"`
}

type PipelineReadyConditionState struct {
	Status     bool   `json:"status"`
	UpdateTime string `json:"update_time"`
}

type TargetsPresentConditionState struct {
	MissingTargets []string `json:"missing_targets"`
	Status         bool     `json:"status"`
	UpdateTime     string   `json:"update_time"`
}

type TargetsTypeConditionState struct {
	ErrorDetails string `json:"error_details"`
	Status       bool   `json:"status"`
}

type SerialPipelineState struct {
	Stages []StagesState `json:"stages"`
}

type StagesState struct {
	Profiles         []string                `json:"profiles"`
	TargetId         string                  `json:"target_id"`
	DeployParameters []DeployParametersState `json:"deploy_parameters"`
	Strategy         []StrategyState         `json:"strategy"`
}

type DeployParametersState struct {
	MatchTargetLabels map[string]string `json:"match_target_labels"`
	Values            map[string]string `json:"values"`
}

type StrategyState struct {
	Canary   []CanaryState   `json:"canary"`
	Standard []StandardState `json:"standard"`
}

type CanaryState struct {
	CanaryDeployment       []CanaryDeploymentState       `json:"canary_deployment"`
	CustomCanaryDeployment []CustomCanaryDeploymentState `json:"custom_canary_deployment"`
	RuntimeConfig          []RuntimeConfigState          `json:"runtime_config"`
}

type CanaryDeploymentState struct {
	Percentages []float64                         `json:"percentages"`
	Verify      bool                              `json:"verify"`
	Postdeploy  []CanaryDeploymentPostdeployState `json:"postdeploy"`
	Predeploy   []CanaryDeploymentPredeployState  `json:"predeploy"`
}

type CanaryDeploymentPostdeployState struct {
	Actions []string `json:"actions"`
}

type CanaryDeploymentPredeployState struct {
	Actions []string `json:"actions"`
}

type CustomCanaryDeploymentState struct {
	PhaseConfigs []PhaseConfigsState `json:"phase_configs"`
}

type PhaseConfigsState struct {
	Percentage float64                       `json:"percentage"`
	PhaseId    string                        `json:"phase_id"`
	Profiles   []string                      `json:"profiles"`
	Verify     bool                          `json:"verify"`
	Postdeploy []PhaseConfigsPostdeployState `json:"postdeploy"`
	Predeploy  []PhaseConfigsPredeployState  `json:"predeploy"`
}

type PhaseConfigsPostdeployState struct {
	Actions []string `json:"actions"`
}

type PhaseConfigsPredeployState struct {
	Actions []string `json:"actions"`
}

type RuntimeConfigState struct {
	CloudRun   []CloudRunState   `json:"cloud_run"`
	Kubernetes []KubernetesState `json:"kubernetes"`
}

type CloudRunState struct {
	AutomaticTrafficControl bool `json:"automatic_traffic_control"`
}

type KubernetesState struct {
	GatewayServiceMesh []GatewayServiceMeshState `json:"gateway_service_mesh"`
	ServiceNetworking  []ServiceNetworkingState  `json:"service_networking"`
}

type GatewayServiceMeshState struct {
	Deployment          string `json:"deployment"`
	HttpRoute           string `json:"http_route"`
	RouteUpdateWaitTime string `json:"route_update_wait_time"`
	Service             string `json:"service"`
}

type ServiceNetworkingState struct {
	Deployment                 string `json:"deployment"`
	DisablePodOverprovisioning bool   `json:"disable_pod_overprovisioning"`
	Service                    string `json:"service"`
}

type StandardState struct {
	Verify     bool                      `json:"verify"`
	Postdeploy []StandardPostdeployState `json:"postdeploy"`
	Predeploy  []StandardPredeployState  `json:"predeploy"`
}

type StandardPostdeployState struct {
	Actions []string `json:"actions"`
}

type StandardPredeployState struct {
	Actions []string `json:"actions"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
