// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package appengineapplicationurldispatchrules

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type DispatchRules struct {
	// Domain: string, optional
	Domain terra.StringValue `hcl:"domain,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DispatchRulesAttributes struct {
	ref terra.Reference
}

func (dr DispatchRulesAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr DispatchRulesAttributes) InternalWithRef(ref terra.Reference) DispatchRulesAttributes {
	return DispatchRulesAttributes{ref: ref}
}

func (dr DispatchRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr DispatchRulesAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("domain"))
}

func (dr DispatchRulesAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("path"))
}

func (dr DispatchRulesAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("service"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DispatchRulesState struct {
	Domain  string `json:"domain"`
	Path    string `json:"path"`
	Service string `json:"service"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
