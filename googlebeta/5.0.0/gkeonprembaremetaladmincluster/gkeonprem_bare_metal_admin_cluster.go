// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package gkeonprembaremetaladmincluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Fleet struct{}

type Status struct {
	// Conditions: min=0
	Conditions []Conditions `hcl:"conditions,block" validate:"min=0"`
}

type Conditions struct{}

type ValidationCheck struct {
	// ValidationCheckStatus: min=0
	Status []ValidationCheckStatus `hcl:"status,block" validate:"min=0"`
}

type ValidationCheckStatus struct {
	// Result: min=0
	Result []Result `hcl:"result,block" validate:"min=0"`
}

type Result struct{}

type ClusterOperations struct {
	// EnableApplicationLogs: bool, optional
	EnableApplicationLogs terra.BoolValue `hcl:"enable_application_logs,attr"`
}

type ControlPlane struct {
	// ApiServerArgs: min=0
	ApiServerArgs []ApiServerArgs `hcl:"api_server_args,block" validate:"min=0"`
	// ControlPlaneNodePoolConfig: required
	ControlPlaneNodePoolConfig *ControlPlaneNodePoolConfig `hcl:"control_plane_node_pool_config,block" validate:"required"`
}

type ApiServerArgs struct {
	// Argument: string, required
	Argument terra.StringValue `hcl:"argument,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ControlPlaneNodePoolConfig struct {
	// NodePoolConfig: required
	NodePoolConfig *NodePoolConfig `hcl:"node_pool_config,block" validate:"required"`
}

type NodePoolConfig struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// OperatingSystem: string, optional
	OperatingSystem terra.StringValue `hcl:"operating_system,attr"`
	// NodeConfigs: min=0
	NodeConfigs []NodeConfigs `hcl:"node_configs,block" validate:"min=0"`
	// Taints: min=0
	Taints []Taints `hcl:"taints,block" validate:"min=0"`
}

type NodeConfigs struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// NodeIp: string, optional
	NodeIp terra.StringValue `hcl:"node_ip,attr"`
}

type Taints struct {
	// Effect: string, optional
	Effect terra.StringValue `hcl:"effect,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type LoadBalancer struct {
	// ManualLbConfig: optional
	ManualLbConfig *ManualLbConfig `hcl:"manual_lb_config,block"`
	// PortConfig: required
	PortConfig *PortConfig `hcl:"port_config,block" validate:"required"`
	// VipConfig: required
	VipConfig *VipConfig `hcl:"vip_config,block" validate:"required"`
}

type ManualLbConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type PortConfig struct {
	// ControlPlaneLoadBalancerPort: number, required
	ControlPlaneLoadBalancerPort terra.NumberValue `hcl:"control_plane_load_balancer_port,attr" validate:"required"`
}

type VipConfig struct {
	// ControlPlaneVip: string, required
	ControlPlaneVip terra.StringValue `hcl:"control_plane_vip,attr" validate:"required"`
}

type MaintenanceConfig struct {
	// MaintenanceAddressCidrBlocks: list of string, required
	MaintenanceAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"maintenance_address_cidr_blocks,attr" validate:"required"`
}

type NetworkConfig struct {
	// IslandModeCidr: optional
	IslandModeCidr *IslandModeCidr `hcl:"island_mode_cidr,block"`
}

type IslandModeCidr struct {
	// PodAddressCidrBlocks: list of string, required
	PodAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"pod_address_cidr_blocks,attr" validate:"required"`
	// ServiceAddressCidrBlocks: list of string, required
	ServiceAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"service_address_cidr_blocks,attr" validate:"required"`
}

type NodeAccessConfig struct {
	// LoginUser: string, optional
	LoginUser terra.StringValue `hcl:"login_user,attr"`
}

type NodeConfig struct {
	// MaxPodsPerNode: number, optional
	MaxPodsPerNode terra.NumberValue `hcl:"max_pods_per_node,attr"`
}

type Proxy struct {
	// NoProxy: list of string, optional
	NoProxy terra.ListValue[terra.StringValue] `hcl:"no_proxy,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type SecurityConfig struct {
	// Authorization: optional
	Authorization *Authorization `hcl:"authorization,block"`
}

type Authorization struct {
	// AdminUsers: min=1
	AdminUsers []AdminUsers `hcl:"admin_users,block" validate:"min=1"`
}

type AdminUsers struct {
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Storage struct {
	// LvpNodeMountsConfig: required
	LvpNodeMountsConfig *LvpNodeMountsConfig `hcl:"lvp_node_mounts_config,block" validate:"required"`
	// LvpShareConfig: required
	LvpShareConfig *LvpShareConfig `hcl:"lvp_share_config,block" validate:"required"`
}

type LvpNodeMountsConfig struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// StorageClass: string, required
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
}

type LvpShareConfig struct {
	// SharedPathPvCount: number, optional
	SharedPathPvCount terra.NumberValue `hcl:"shared_path_pv_count,attr"`
	// LvpConfig: required
	LvpConfig *LvpConfig `hcl:"lvp_config,block" validate:"required"`
}

type LvpConfig struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// StorageClass: string, required
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type FleetAttributes struct {
	ref terra.Reference
}

func (f FleetAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FleetAttributes) InternalWithRef(ref terra.Reference) FleetAttributes {
	return FleetAttributes{ref: ref}
}

func (f FleetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FleetAttributes) Membership() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("membership"))
}

type StatusAttributes struct {
	ref terra.Reference
}

func (s StatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StatusAttributes) InternalWithRef(ref terra.Reference) StatusAttributes {
	return StatusAttributes{ref: ref}
}

func (s StatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StatusAttributes) ErrorMessage() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("error_message"))
}

func (s StatusAttributes) Conditions() terra.ListValue[ConditionsAttributes] {
	return terra.ReferenceAsList[ConditionsAttributes](s.ref.Append("conditions"))
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) LastTransitionTime() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("last_transition_time"))
}

func (c ConditionsAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("message"))
}

func (c ConditionsAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("reason"))
}

func (c ConditionsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("state"))
}

func (c ConditionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type ValidationCheckAttributes struct {
	ref terra.Reference
}

func (vc ValidationCheckAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc ValidationCheckAttributes) InternalWithRef(ref terra.Reference) ValidationCheckAttributes {
	return ValidationCheckAttributes{ref: ref}
}

func (vc ValidationCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc ValidationCheckAttributes) Options() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("options"))
}

func (vc ValidationCheckAttributes) Scenario() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("scenario"))
}

func (vc ValidationCheckAttributes) Status() terra.ListValue[ValidationCheckStatusAttributes] {
	return terra.ReferenceAsList[ValidationCheckStatusAttributes](vc.ref.Append("status"))
}

type ValidationCheckStatusAttributes struct {
	ref terra.Reference
}

func (s ValidationCheckStatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ValidationCheckStatusAttributes) InternalWithRef(ref terra.Reference) ValidationCheckStatusAttributes {
	return ValidationCheckStatusAttributes{ref: ref}
}

func (s ValidationCheckStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ValidationCheckStatusAttributes) Result() terra.ListValue[ResultAttributes] {
	return terra.ReferenceAsList[ResultAttributes](s.ref.Append("result"))
}

type ResultAttributes struct {
	ref terra.Reference
}

func (r ResultAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ResultAttributes) InternalWithRef(ref terra.Reference) ResultAttributes {
	return ResultAttributes{ref: ref}
}

func (r ResultAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ResultAttributes) Category() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("category"))
}

func (r ResultAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("description"))
}

func (r ResultAttributes) Details() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("details"))
}

func (r ResultAttributes) Options() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("options"))
}

func (r ResultAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("reason"))
}

type ClusterOperationsAttributes struct {
	ref terra.Reference
}

func (co ClusterOperationsAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co ClusterOperationsAttributes) InternalWithRef(ref terra.Reference) ClusterOperationsAttributes {
	return ClusterOperationsAttributes{ref: ref}
}

func (co ClusterOperationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co ClusterOperationsAttributes) EnableApplicationLogs() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("enable_application_logs"))
}

type ControlPlaneAttributes struct {
	ref terra.Reference
}

func (cp ControlPlaneAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp ControlPlaneAttributes) InternalWithRef(ref terra.Reference) ControlPlaneAttributes {
	return ControlPlaneAttributes{ref: ref}
}

func (cp ControlPlaneAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp ControlPlaneAttributes) ApiServerArgs() terra.ListValue[ApiServerArgsAttributes] {
	return terra.ReferenceAsList[ApiServerArgsAttributes](cp.ref.Append("api_server_args"))
}

func (cp ControlPlaneAttributes) ControlPlaneNodePoolConfig() terra.ListValue[ControlPlaneNodePoolConfigAttributes] {
	return terra.ReferenceAsList[ControlPlaneNodePoolConfigAttributes](cp.ref.Append("control_plane_node_pool_config"))
}

type ApiServerArgsAttributes struct {
	ref terra.Reference
}

func (asa ApiServerArgsAttributes) InternalRef() (terra.Reference, error) {
	return asa.ref, nil
}

func (asa ApiServerArgsAttributes) InternalWithRef(ref terra.Reference) ApiServerArgsAttributes {
	return ApiServerArgsAttributes{ref: ref}
}

func (asa ApiServerArgsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asa.ref.InternalTokens()
}

func (asa ApiServerArgsAttributes) Argument() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("argument"))
}

func (asa ApiServerArgsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("value"))
}

type ControlPlaneNodePoolConfigAttributes struct {
	ref terra.Reference
}

func (cpnpc ControlPlaneNodePoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return cpnpc.ref, nil
}

func (cpnpc ControlPlaneNodePoolConfigAttributes) InternalWithRef(ref terra.Reference) ControlPlaneNodePoolConfigAttributes {
	return ControlPlaneNodePoolConfigAttributes{ref: ref}
}

func (cpnpc ControlPlaneNodePoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpnpc.ref.InternalTokens()
}

func (cpnpc ControlPlaneNodePoolConfigAttributes) NodePoolConfig() terra.ListValue[NodePoolConfigAttributes] {
	return terra.ReferenceAsList[NodePoolConfigAttributes](cpnpc.ref.Append("node_pool_config"))
}

type NodePoolConfigAttributes struct {
	ref terra.Reference
}

func (npc NodePoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return npc.ref, nil
}

func (npc NodePoolConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolConfigAttributes {
	return NodePoolConfigAttributes{ref: ref}
}

func (npc NodePoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npc.ref.InternalTokens()
}

func (npc NodePoolConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](npc.ref.Append("labels"))
}

func (npc NodePoolConfigAttributes) OperatingSystem() terra.StringValue {
	return terra.ReferenceAsString(npc.ref.Append("operating_system"))
}

func (npc NodePoolConfigAttributes) NodeConfigs() terra.ListValue[NodeConfigsAttributes] {
	return terra.ReferenceAsList[NodeConfigsAttributes](npc.ref.Append("node_configs"))
}

func (npc NodePoolConfigAttributes) Taints() terra.ListValue[TaintsAttributes] {
	return terra.ReferenceAsList[TaintsAttributes](npc.ref.Append("taints"))
}

type NodeConfigsAttributes struct {
	ref terra.Reference
}

func (nc NodeConfigsAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NodeConfigsAttributes) InternalWithRef(ref terra.Reference) NodeConfigsAttributes {
	return NodeConfigsAttributes{ref: ref}
}

func (nc NodeConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NodeConfigsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("labels"))
}

func (nc NodeConfigsAttributes) NodeIp() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("node_ip"))
}

type TaintsAttributes struct {
	ref terra.Reference
}

func (t TaintsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TaintsAttributes) InternalWithRef(ref terra.Reference) TaintsAttributes {
	return TaintsAttributes{ref: ref}
}

func (t TaintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TaintsAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("effect"))
}

func (t TaintsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t TaintsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type LoadBalancerAttributes struct {
	ref terra.Reference
}

func (lb LoadBalancerAttributes) InternalRef() (terra.Reference, error) {
	return lb.ref, nil
}

func (lb LoadBalancerAttributes) InternalWithRef(ref terra.Reference) LoadBalancerAttributes {
	return LoadBalancerAttributes{ref: ref}
}

func (lb LoadBalancerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lb.ref.InternalTokens()
}

func (lb LoadBalancerAttributes) ManualLbConfig() terra.ListValue[ManualLbConfigAttributes] {
	return terra.ReferenceAsList[ManualLbConfigAttributes](lb.ref.Append("manual_lb_config"))
}

func (lb LoadBalancerAttributes) PortConfig() terra.ListValue[PortConfigAttributes] {
	return terra.ReferenceAsList[PortConfigAttributes](lb.ref.Append("port_config"))
}

func (lb LoadBalancerAttributes) VipConfig() terra.ListValue[VipConfigAttributes] {
	return terra.ReferenceAsList[VipConfigAttributes](lb.ref.Append("vip_config"))
}

type ManualLbConfigAttributes struct {
	ref terra.Reference
}

func (mlc ManualLbConfigAttributes) InternalRef() (terra.Reference, error) {
	return mlc.ref, nil
}

func (mlc ManualLbConfigAttributes) InternalWithRef(ref terra.Reference) ManualLbConfigAttributes {
	return ManualLbConfigAttributes{ref: ref}
}

func (mlc ManualLbConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mlc.ref.InternalTokens()
}

func (mlc ManualLbConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(mlc.ref.Append("enabled"))
}

type PortConfigAttributes struct {
	ref terra.Reference
}

func (pc PortConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PortConfigAttributes) InternalWithRef(ref terra.Reference) PortConfigAttributes {
	return PortConfigAttributes{ref: ref}
}

func (pc PortConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PortConfigAttributes) ControlPlaneLoadBalancerPort() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("control_plane_load_balancer_port"))
}

type VipConfigAttributes struct {
	ref terra.Reference
}

func (vc VipConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VipConfigAttributes) InternalWithRef(ref terra.Reference) VipConfigAttributes {
	return VipConfigAttributes{ref: ref}
}

func (vc VipConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VipConfigAttributes) ControlPlaneVip() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("control_plane_vip"))
}

type MaintenanceConfigAttributes struct {
	ref terra.Reference
}

func (mc MaintenanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MaintenanceConfigAttributes) InternalWithRef(ref terra.Reference) MaintenanceConfigAttributes {
	return MaintenanceConfigAttributes{ref: ref}
}

func (mc MaintenanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MaintenanceConfigAttributes) MaintenanceAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("maintenance_address_cidr_blocks"))
}

type NetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAttributes {
	return NetworkConfigAttributes{ref: ref}
}

func (nc NetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigAttributes) IslandModeCidr() terra.ListValue[IslandModeCidrAttributes] {
	return terra.ReferenceAsList[IslandModeCidrAttributes](nc.ref.Append("island_mode_cidr"))
}

type IslandModeCidrAttributes struct {
	ref terra.Reference
}

func (imc IslandModeCidrAttributes) InternalRef() (terra.Reference, error) {
	return imc.ref, nil
}

func (imc IslandModeCidrAttributes) InternalWithRef(ref terra.Reference) IslandModeCidrAttributes {
	return IslandModeCidrAttributes{ref: ref}
}

func (imc IslandModeCidrAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return imc.ref.InternalTokens()
}

func (imc IslandModeCidrAttributes) PodAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](imc.ref.Append("pod_address_cidr_blocks"))
}

func (imc IslandModeCidrAttributes) ServiceAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](imc.ref.Append("service_address_cidr_blocks"))
}

type NodeAccessConfigAttributes struct {
	ref terra.Reference
}

func (nac NodeAccessConfigAttributes) InternalRef() (terra.Reference, error) {
	return nac.ref, nil
}

func (nac NodeAccessConfigAttributes) InternalWithRef(ref terra.Reference) NodeAccessConfigAttributes {
	return NodeAccessConfigAttributes{ref: ref}
}

func (nac NodeAccessConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nac.ref.InternalTokens()
}

func (nac NodeAccessConfigAttributes) LoginUser() terra.StringValue {
	return terra.ReferenceAsString(nac.ref.Append("login_user"))
}

type NodeConfigAttributes struct {
	ref terra.Reference
}

func (nc NodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigAttributes {
	return NodeConfigAttributes{ref: ref}
}

func (nc NodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NodeConfigAttributes) MaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("max_pods_per_node"))
}

type ProxyAttributes struct {
	ref terra.Reference
}

func (p ProxyAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ProxyAttributes) InternalWithRef(ref terra.Reference) ProxyAttributes {
	return ProxyAttributes{ref: ref}
}

func (p ProxyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ProxyAttributes) NoProxy() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("no_proxy"))
}

func (p ProxyAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("uri"))
}

type SecurityConfigAttributes struct {
	ref terra.Reference
}

func (sc SecurityConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SecurityConfigAttributes) InternalWithRef(ref terra.Reference) SecurityConfigAttributes {
	return SecurityConfigAttributes{ref: ref}
}

func (sc SecurityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SecurityConfigAttributes) Authorization() terra.ListValue[AuthorizationAttributes] {
	return terra.ReferenceAsList[AuthorizationAttributes](sc.ref.Append("authorization"))
}

type AuthorizationAttributes struct {
	ref terra.Reference
}

func (a AuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthorizationAttributes) InternalWithRef(ref terra.Reference) AuthorizationAttributes {
	return AuthorizationAttributes{ref: ref}
}

func (a AuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthorizationAttributes) AdminUsers() terra.ListValue[AdminUsersAttributes] {
	return terra.ReferenceAsList[AdminUsersAttributes](a.ref.Append("admin_users"))
}

type AdminUsersAttributes struct {
	ref terra.Reference
}

func (au AdminUsersAttributes) InternalRef() (terra.Reference, error) {
	return au.ref, nil
}

func (au AdminUsersAttributes) InternalWithRef(ref terra.Reference) AdminUsersAttributes {
	return AdminUsersAttributes{ref: ref}
}

func (au AdminUsersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return au.ref.InternalTokens()
}

func (au AdminUsersAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("username"))
}

type StorageAttributes struct {
	ref terra.Reference
}

func (s StorageAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StorageAttributes) InternalWithRef(ref terra.Reference) StorageAttributes {
	return StorageAttributes{ref: ref}
}

func (s StorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StorageAttributes) LvpNodeMountsConfig() terra.ListValue[LvpNodeMountsConfigAttributes] {
	return terra.ReferenceAsList[LvpNodeMountsConfigAttributes](s.ref.Append("lvp_node_mounts_config"))
}

func (s StorageAttributes) LvpShareConfig() terra.ListValue[LvpShareConfigAttributes] {
	return terra.ReferenceAsList[LvpShareConfigAttributes](s.ref.Append("lvp_share_config"))
}

type LvpNodeMountsConfigAttributes struct {
	ref terra.Reference
}

func (lnmc LvpNodeMountsConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnmc.ref, nil
}

func (lnmc LvpNodeMountsConfigAttributes) InternalWithRef(ref terra.Reference) LvpNodeMountsConfigAttributes {
	return LvpNodeMountsConfigAttributes{ref: ref}
}

func (lnmc LvpNodeMountsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnmc.ref.InternalTokens()
}

func (lnmc LvpNodeMountsConfigAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(lnmc.ref.Append("path"))
}

func (lnmc LvpNodeMountsConfigAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(lnmc.ref.Append("storage_class"))
}

type LvpShareConfigAttributes struct {
	ref terra.Reference
}

func (lsc LvpShareConfigAttributes) InternalRef() (terra.Reference, error) {
	return lsc.ref, nil
}

func (lsc LvpShareConfigAttributes) InternalWithRef(ref terra.Reference) LvpShareConfigAttributes {
	return LvpShareConfigAttributes{ref: ref}
}

func (lsc LvpShareConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lsc.ref.InternalTokens()
}

func (lsc LvpShareConfigAttributes) SharedPathPvCount() terra.NumberValue {
	return terra.ReferenceAsNumber(lsc.ref.Append("shared_path_pv_count"))
}

func (lsc LvpShareConfigAttributes) LvpConfig() terra.ListValue[LvpConfigAttributes] {
	return terra.ReferenceAsList[LvpConfigAttributes](lsc.ref.Append("lvp_config"))
}

type LvpConfigAttributes struct {
	ref terra.Reference
}

func (lc LvpConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LvpConfigAttributes) InternalWithRef(ref terra.Reference) LvpConfigAttributes {
	return LvpConfigAttributes{ref: ref}
}

func (lc LvpConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LvpConfigAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("path"))
}

func (lc LvpConfigAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("storage_class"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type FleetState struct {
	Membership string `json:"membership"`
}

type StatusState struct {
	ErrorMessage string            `json:"error_message"`
	Conditions   []ConditionsState `json:"conditions"`
}

type ConditionsState struct {
	LastTransitionTime string `json:"last_transition_time"`
	Message            string `json:"message"`
	Reason             string `json:"reason"`
	State              string `json:"state"`
	Type               string `json:"type"`
}

type ValidationCheckState struct {
	Options  string                       `json:"options"`
	Scenario string                       `json:"scenario"`
	Status   []ValidationCheckStatusState `json:"status"`
}

type ValidationCheckStatusState struct {
	Result []ResultState `json:"result"`
}

type ResultState struct {
	Category    string `json:"category"`
	Description string `json:"description"`
	Details     string `json:"details"`
	Options     string `json:"options"`
	Reason      string `json:"reason"`
}

type ClusterOperationsState struct {
	EnableApplicationLogs bool `json:"enable_application_logs"`
}

type ControlPlaneState struct {
	ApiServerArgs              []ApiServerArgsState              `json:"api_server_args"`
	ControlPlaneNodePoolConfig []ControlPlaneNodePoolConfigState `json:"control_plane_node_pool_config"`
}

type ApiServerArgsState struct {
	Argument string `json:"argument"`
	Value    string `json:"value"`
}

type ControlPlaneNodePoolConfigState struct {
	NodePoolConfig []NodePoolConfigState `json:"node_pool_config"`
}

type NodePoolConfigState struct {
	Labels          map[string]string  `json:"labels"`
	OperatingSystem string             `json:"operating_system"`
	NodeConfigs     []NodeConfigsState `json:"node_configs"`
	Taints          []TaintsState      `json:"taints"`
}

type NodeConfigsState struct {
	Labels map[string]string `json:"labels"`
	NodeIp string            `json:"node_ip"`
}

type TaintsState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type LoadBalancerState struct {
	ManualLbConfig []ManualLbConfigState `json:"manual_lb_config"`
	PortConfig     []PortConfigState     `json:"port_config"`
	VipConfig      []VipConfigState      `json:"vip_config"`
}

type ManualLbConfigState struct {
	Enabled bool `json:"enabled"`
}

type PortConfigState struct {
	ControlPlaneLoadBalancerPort float64 `json:"control_plane_load_balancer_port"`
}

type VipConfigState struct {
	ControlPlaneVip string `json:"control_plane_vip"`
}

type MaintenanceConfigState struct {
	MaintenanceAddressCidrBlocks []string `json:"maintenance_address_cidr_blocks"`
}

type NetworkConfigState struct {
	IslandModeCidr []IslandModeCidrState `json:"island_mode_cidr"`
}

type IslandModeCidrState struct {
	PodAddressCidrBlocks     []string `json:"pod_address_cidr_blocks"`
	ServiceAddressCidrBlocks []string `json:"service_address_cidr_blocks"`
}

type NodeAccessConfigState struct {
	LoginUser string `json:"login_user"`
}

type NodeConfigState struct {
	MaxPodsPerNode float64 `json:"max_pods_per_node"`
}

type ProxyState struct {
	NoProxy []string `json:"no_proxy"`
	Uri     string   `json:"uri"`
}

type SecurityConfigState struct {
	Authorization []AuthorizationState `json:"authorization"`
}

type AuthorizationState struct {
	AdminUsers []AdminUsersState `json:"admin_users"`
}

type AdminUsersState struct {
	Username string `json:"username"`
}

type StorageState struct {
	LvpNodeMountsConfig []LvpNodeMountsConfigState `json:"lvp_node_mounts_config"`
	LvpShareConfig      []LvpShareConfigState      `json:"lvp_share_config"`
}

type LvpNodeMountsConfigState struct {
	Path         string `json:"path"`
	StorageClass string `json:"storage_class"`
}

type LvpShareConfigState struct {
	SharedPathPvCount float64          `json:"shared_path_pv_count"`
	LvpConfig         []LvpConfigState `json:"lvp_config"`
}

type LvpConfigState struct {
	Path         string `json:"path"`
	StorageClass string `json:"storage_class"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
