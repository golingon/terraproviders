// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	computeregionbackendserviceiammember "github.com/golingon/terraproviders/googlebeta/5.0.0/computeregionbackendserviceiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewComputeRegionBackendServiceIamMember creates a new instance of [ComputeRegionBackendServiceIamMember].
func NewComputeRegionBackendServiceIamMember(name string, args ComputeRegionBackendServiceIamMemberArgs) *ComputeRegionBackendServiceIamMember {
	return &ComputeRegionBackendServiceIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeRegionBackendServiceIamMember)(nil)

// ComputeRegionBackendServiceIamMember represents the Terraform resource google_compute_region_backend_service_iam_member.
type ComputeRegionBackendServiceIamMember struct {
	Name      string
	Args      ComputeRegionBackendServiceIamMemberArgs
	state     *computeRegionBackendServiceIamMemberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ComputeRegionBackendServiceIamMember].
func (crbsim *ComputeRegionBackendServiceIamMember) Type() string {
	return "google_compute_region_backend_service_iam_member"
}

// LocalName returns the local name for [ComputeRegionBackendServiceIamMember].
func (crbsim *ComputeRegionBackendServiceIamMember) LocalName() string {
	return crbsim.Name
}

// Configuration returns the configuration (args) for [ComputeRegionBackendServiceIamMember].
func (crbsim *ComputeRegionBackendServiceIamMember) Configuration() interface{} {
	return crbsim.Args
}

// DependOn is used for other resources to depend on [ComputeRegionBackendServiceIamMember].
func (crbsim *ComputeRegionBackendServiceIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(crbsim)
}

// Dependencies returns the list of resources [ComputeRegionBackendServiceIamMember] depends_on.
func (crbsim *ComputeRegionBackendServiceIamMember) Dependencies() terra.Dependencies {
	return crbsim.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ComputeRegionBackendServiceIamMember].
func (crbsim *ComputeRegionBackendServiceIamMember) LifecycleManagement() *terra.Lifecycle {
	return crbsim.Lifecycle
}

// Attributes returns the attributes for [ComputeRegionBackendServiceIamMember].
func (crbsim *ComputeRegionBackendServiceIamMember) Attributes() computeRegionBackendServiceIamMemberAttributes {
	return computeRegionBackendServiceIamMemberAttributes{ref: terra.ReferenceResource(crbsim)}
}

// ImportState imports the given attribute values into [ComputeRegionBackendServiceIamMember]'s state.
func (crbsim *ComputeRegionBackendServiceIamMember) ImportState(av io.Reader) error {
	crbsim.state = &computeRegionBackendServiceIamMemberState{}
	if err := json.NewDecoder(av).Decode(crbsim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crbsim.Type(), crbsim.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ComputeRegionBackendServiceIamMember] has state.
func (crbsim *ComputeRegionBackendServiceIamMember) State() (*computeRegionBackendServiceIamMemberState, bool) {
	return crbsim.state, crbsim.state != nil
}

// StateMust returns the state for [ComputeRegionBackendServiceIamMember]. Panics if the state is nil.
func (crbsim *ComputeRegionBackendServiceIamMember) StateMust() *computeRegionBackendServiceIamMemberState {
	if crbsim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crbsim.Type(), crbsim.LocalName()))
	}
	return crbsim.state
}

// ComputeRegionBackendServiceIamMemberArgs contains the configurations for google_compute_region_backend_service_iam_member.
type ComputeRegionBackendServiceIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *computeregionbackendserviceiammember.Condition `hcl:"condition,block"`
}
type computeRegionBackendServiceIamMemberAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_compute_region_backend_service_iam_member.
func (crbsim computeRegionBackendServiceIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(crbsim.ref.Append("etag"))
}

// Id returns a reference to field id of google_compute_region_backend_service_iam_member.
func (crbsim computeRegionBackendServiceIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(crbsim.ref.Append("id"))
}

// Member returns a reference to field member of google_compute_region_backend_service_iam_member.
func (crbsim computeRegionBackendServiceIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceAsString(crbsim.ref.Append("member"))
}

// Name returns a reference to field name of google_compute_region_backend_service_iam_member.
func (crbsim computeRegionBackendServiceIamMemberAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(crbsim.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_region_backend_service_iam_member.
func (crbsim computeRegionBackendServiceIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(crbsim.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_region_backend_service_iam_member.
func (crbsim computeRegionBackendServiceIamMemberAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(crbsim.ref.Append("region"))
}

// Role returns a reference to field role of google_compute_region_backend_service_iam_member.
func (crbsim computeRegionBackendServiceIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(crbsim.ref.Append("role"))
}

func (crbsim computeRegionBackendServiceIamMemberAttributes) Condition() terra.ListValue[computeregionbackendserviceiammember.ConditionAttributes] {
	return terra.ReferenceAsList[computeregionbackendserviceiammember.ConditionAttributes](crbsim.ref.Append("condition"))
}

type computeRegionBackendServiceIamMemberState struct {
	Etag      string                                                `json:"etag"`
	Id        string                                                `json:"id"`
	Member    string                                                `json:"member"`
	Name      string                                                `json:"name"`
	Project   string                                                `json:"project"`
	Region    string                                                `json:"region"`
	Role      string                                                `json:"role"`
	Condition []computeregionbackendserviceiammember.ConditionState `json:"condition"`
}
