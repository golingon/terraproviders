// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewApiGatewayGatewayIamPolicy creates a new instance of [ApiGatewayGatewayIamPolicy].
func NewApiGatewayGatewayIamPolicy(name string, args ApiGatewayGatewayIamPolicyArgs) *ApiGatewayGatewayIamPolicy {
	return &ApiGatewayGatewayIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiGatewayGatewayIamPolicy)(nil)

// ApiGatewayGatewayIamPolicy represents the Terraform resource google_api_gateway_gateway_iam_policy.
type ApiGatewayGatewayIamPolicy struct {
	Name      string
	Args      ApiGatewayGatewayIamPolicyArgs
	state     *apiGatewayGatewayIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApiGatewayGatewayIamPolicy].
func (aggip *ApiGatewayGatewayIamPolicy) Type() string {
	return "google_api_gateway_gateway_iam_policy"
}

// LocalName returns the local name for [ApiGatewayGatewayIamPolicy].
func (aggip *ApiGatewayGatewayIamPolicy) LocalName() string {
	return aggip.Name
}

// Configuration returns the configuration (args) for [ApiGatewayGatewayIamPolicy].
func (aggip *ApiGatewayGatewayIamPolicy) Configuration() interface{} {
	return aggip.Args
}

// DependOn is used for other resources to depend on [ApiGatewayGatewayIamPolicy].
func (aggip *ApiGatewayGatewayIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(aggip)
}

// Dependencies returns the list of resources [ApiGatewayGatewayIamPolicy] depends_on.
func (aggip *ApiGatewayGatewayIamPolicy) Dependencies() terra.Dependencies {
	return aggip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApiGatewayGatewayIamPolicy].
func (aggip *ApiGatewayGatewayIamPolicy) LifecycleManagement() *terra.Lifecycle {
	return aggip.Lifecycle
}

// Attributes returns the attributes for [ApiGatewayGatewayIamPolicy].
func (aggip *ApiGatewayGatewayIamPolicy) Attributes() apiGatewayGatewayIamPolicyAttributes {
	return apiGatewayGatewayIamPolicyAttributes{ref: terra.ReferenceResource(aggip)}
}

// ImportState imports the given attribute values into [ApiGatewayGatewayIamPolicy]'s state.
func (aggip *ApiGatewayGatewayIamPolicy) ImportState(av io.Reader) error {
	aggip.state = &apiGatewayGatewayIamPolicyState{}
	if err := json.NewDecoder(av).Decode(aggip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aggip.Type(), aggip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApiGatewayGatewayIamPolicy] has state.
func (aggip *ApiGatewayGatewayIamPolicy) State() (*apiGatewayGatewayIamPolicyState, bool) {
	return aggip.state, aggip.state != nil
}

// StateMust returns the state for [ApiGatewayGatewayIamPolicy]. Panics if the state is nil.
func (aggip *ApiGatewayGatewayIamPolicy) StateMust() *apiGatewayGatewayIamPolicyState {
	if aggip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aggip.Type(), aggip.LocalName()))
	}
	return aggip.state
}

// ApiGatewayGatewayIamPolicyArgs contains the configurations for google_api_gateway_gateway_iam_policy.
type ApiGatewayGatewayIamPolicyArgs struct {
	// Gateway: string, required
	Gateway terra.StringValue `hcl:"gateway,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
}
type apiGatewayGatewayIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_api_gateway_gateway_iam_policy.
func (aggip apiGatewayGatewayIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(aggip.ref.Append("etag"))
}

// Gateway returns a reference to field gateway of google_api_gateway_gateway_iam_policy.
func (aggip apiGatewayGatewayIamPolicyAttributes) Gateway() terra.StringValue {
	return terra.ReferenceAsString(aggip.ref.Append("gateway"))
}

// Id returns a reference to field id of google_api_gateway_gateway_iam_policy.
func (aggip apiGatewayGatewayIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aggip.ref.Append("id"))
}

// PolicyData returns a reference to field policy_data of google_api_gateway_gateway_iam_policy.
func (aggip apiGatewayGatewayIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(aggip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_api_gateway_gateway_iam_policy.
func (aggip apiGatewayGatewayIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(aggip.ref.Append("project"))
}

// Region returns a reference to field region of google_api_gateway_gateway_iam_policy.
func (aggip apiGatewayGatewayIamPolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(aggip.ref.Append("region"))
}

type apiGatewayGatewayIamPolicyState struct {
	Etag       string `json:"etag"`
	Gateway    string `json:"gateway"`
	Id         string `json:"id"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	Region     string `json:"region"`
}
