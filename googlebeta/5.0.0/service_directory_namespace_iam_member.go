// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	servicedirectorynamespaceiammember "github.com/golingon/terraproviders/googlebeta/5.0.0/servicedirectorynamespaceiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewServiceDirectoryNamespaceIamMember creates a new instance of [ServiceDirectoryNamespaceIamMember].
func NewServiceDirectoryNamespaceIamMember(name string, args ServiceDirectoryNamespaceIamMemberArgs) *ServiceDirectoryNamespaceIamMember {
	return &ServiceDirectoryNamespaceIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServiceDirectoryNamespaceIamMember)(nil)

// ServiceDirectoryNamespaceIamMember represents the Terraform resource google_service_directory_namespace_iam_member.
type ServiceDirectoryNamespaceIamMember struct {
	Name      string
	Args      ServiceDirectoryNamespaceIamMemberArgs
	state     *serviceDirectoryNamespaceIamMemberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ServiceDirectoryNamespaceIamMember].
func (sdnim *ServiceDirectoryNamespaceIamMember) Type() string {
	return "google_service_directory_namespace_iam_member"
}

// LocalName returns the local name for [ServiceDirectoryNamespaceIamMember].
func (sdnim *ServiceDirectoryNamespaceIamMember) LocalName() string {
	return sdnim.Name
}

// Configuration returns the configuration (args) for [ServiceDirectoryNamespaceIamMember].
func (sdnim *ServiceDirectoryNamespaceIamMember) Configuration() interface{} {
	return sdnim.Args
}

// DependOn is used for other resources to depend on [ServiceDirectoryNamespaceIamMember].
func (sdnim *ServiceDirectoryNamespaceIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(sdnim)
}

// Dependencies returns the list of resources [ServiceDirectoryNamespaceIamMember] depends_on.
func (sdnim *ServiceDirectoryNamespaceIamMember) Dependencies() terra.Dependencies {
	return sdnim.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ServiceDirectoryNamespaceIamMember].
func (sdnim *ServiceDirectoryNamespaceIamMember) LifecycleManagement() *terra.Lifecycle {
	return sdnim.Lifecycle
}

// Attributes returns the attributes for [ServiceDirectoryNamespaceIamMember].
func (sdnim *ServiceDirectoryNamespaceIamMember) Attributes() serviceDirectoryNamespaceIamMemberAttributes {
	return serviceDirectoryNamespaceIamMemberAttributes{ref: terra.ReferenceResource(sdnim)}
}

// ImportState imports the given attribute values into [ServiceDirectoryNamespaceIamMember]'s state.
func (sdnim *ServiceDirectoryNamespaceIamMember) ImportState(av io.Reader) error {
	sdnim.state = &serviceDirectoryNamespaceIamMemberState{}
	if err := json.NewDecoder(av).Decode(sdnim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sdnim.Type(), sdnim.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ServiceDirectoryNamespaceIamMember] has state.
func (sdnim *ServiceDirectoryNamespaceIamMember) State() (*serviceDirectoryNamespaceIamMemberState, bool) {
	return sdnim.state, sdnim.state != nil
}

// StateMust returns the state for [ServiceDirectoryNamespaceIamMember]. Panics if the state is nil.
func (sdnim *ServiceDirectoryNamespaceIamMember) StateMust() *serviceDirectoryNamespaceIamMemberState {
	if sdnim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sdnim.Type(), sdnim.LocalName()))
	}
	return sdnim.state
}

// ServiceDirectoryNamespaceIamMemberArgs contains the configurations for google_service_directory_namespace_iam_member.
type ServiceDirectoryNamespaceIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *servicedirectorynamespaceiammember.Condition `hcl:"condition,block"`
}
type serviceDirectoryNamespaceIamMemberAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_service_directory_namespace_iam_member.
func (sdnim serviceDirectoryNamespaceIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(sdnim.ref.Append("etag"))
}

// Id returns a reference to field id of google_service_directory_namespace_iam_member.
func (sdnim serviceDirectoryNamespaceIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sdnim.ref.Append("id"))
}

// Member returns a reference to field member of google_service_directory_namespace_iam_member.
func (sdnim serviceDirectoryNamespaceIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceAsString(sdnim.ref.Append("member"))
}

// Name returns a reference to field name of google_service_directory_namespace_iam_member.
func (sdnim serviceDirectoryNamespaceIamMemberAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sdnim.ref.Append("name"))
}

// Role returns a reference to field role of google_service_directory_namespace_iam_member.
func (sdnim serviceDirectoryNamespaceIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(sdnim.ref.Append("role"))
}

func (sdnim serviceDirectoryNamespaceIamMemberAttributes) Condition() terra.ListValue[servicedirectorynamespaceiammember.ConditionAttributes] {
	return terra.ReferenceAsList[servicedirectorynamespaceiammember.ConditionAttributes](sdnim.ref.Append("condition"))
}

type serviceDirectoryNamespaceIamMemberState struct {
	Etag      string                                              `json:"etag"`
	Id        string                                              `json:"id"`
	Member    string                                              `json:"member"`
	Name      string                                              `json:"name"`
	Role      string                                              `json:"role"`
	Condition []servicedirectorynamespaceiammember.ConditionState `json:"condition"`
}
