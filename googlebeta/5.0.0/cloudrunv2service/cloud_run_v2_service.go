// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package cloudrunv2service

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Conditions struct{}

type TerminalCondition struct{}

type TrafficStatuses struct{}

type BinaryAuthorization struct {
	// BreakglassJustification: string, optional
	BreakglassJustification terra.StringValue `hcl:"breakglass_justification,attr"`
	// UseDefault: bool, optional
	UseDefault terra.BoolValue `hcl:"use_default,attr"`
}

type Template struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// EncryptionKey: string, optional
	EncryptionKey terra.StringValue `hcl:"encryption_key,attr"`
	// ExecutionEnvironment: string, optional
	ExecutionEnvironment terra.StringValue `hcl:"execution_environment,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// MaxInstanceRequestConcurrency: number, optional
	MaxInstanceRequestConcurrency terra.NumberValue `hcl:"max_instance_request_concurrency,attr"`
	// Revision: string, optional
	Revision terra.StringValue `hcl:"revision,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// SessionAffinity: bool, optional
	SessionAffinity terra.BoolValue `hcl:"session_affinity,attr"`
	// Timeout: string, optional
	Timeout terra.StringValue `hcl:"timeout,attr"`
	// Containers: min=0
	Containers []Containers `hcl:"containers,block" validate:"min=0"`
	// Scaling: optional
	Scaling *Scaling `hcl:"scaling,block"`
	// Volumes: min=0
	Volumes []Volumes `hcl:"volumes,block" validate:"min=0"`
	// VpcAccess: optional
	VpcAccess *VpcAccess `hcl:"vpc_access,block"`
}

type Containers struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Command: list of string, optional
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// DependsOn: list of string, optional
	DependsOn terra.ListValue[terra.StringValue] `hcl:"depends_on,attr"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// WorkingDir: string, optional
	WorkingDir terra.StringValue `hcl:"working_dir,attr"`
	// Env: min=0
	Env []Env `hcl:"env,block" validate:"min=0"`
	// LivenessProbe: optional
	LivenessProbe *LivenessProbe `hcl:"liveness_probe,block"`
	// Ports: min=0
	Ports []Ports `hcl:"ports,block" validate:"min=0"`
	// Resources: optional
	Resources *Resources `hcl:"resources,block"`
	// StartupProbe: optional
	StartupProbe *StartupProbe `hcl:"startup_probe,block"`
	// VolumeMounts: min=0
	VolumeMounts []VolumeMounts `hcl:"volume_mounts,block" validate:"min=0"`
}

type Env struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
	// ValueSource: optional
	ValueSource *ValueSource `hcl:"value_source,block"`
}

type ValueSource struct {
	// SecretKeyRef: optional
	SecretKeyRef *SecretKeyRef `hcl:"secret_key_ref,block"`
}

type SecretKeyRef struct {
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type LivenessProbe struct {
	// FailureThreshold: number, optional
	FailureThreshold terra.NumberValue `hcl:"failure_threshold,attr"`
	// InitialDelaySeconds: number, optional
	InitialDelaySeconds terra.NumberValue `hcl:"initial_delay_seconds,attr"`
	// PeriodSeconds: number, optional
	PeriodSeconds terra.NumberValue `hcl:"period_seconds,attr"`
	// TimeoutSeconds: number, optional
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// LivenessProbeGrpc: optional
	Grpc *LivenessProbeGrpc `hcl:"grpc,block"`
	// LivenessProbeHttpGet: optional
	HttpGet *LivenessProbeHttpGet `hcl:"http_get,block"`
}

type LivenessProbeGrpc struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
}

type LivenessProbeHttpGet struct {
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// LivenessProbeHttpGetHttpHeaders: min=0
	HttpHeaders []LivenessProbeHttpGetHttpHeaders `hcl:"http_headers,block" validate:"min=0"`
}

type LivenessProbeHttpGetHttpHeaders struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Ports struct {
	// ContainerPort: number, optional
	ContainerPort terra.NumberValue `hcl:"container_port,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type Resources struct {
	// CpuIdle: bool, optional
	CpuIdle terra.BoolValue `hcl:"cpu_idle,attr"`
	// Limits: map of string, optional
	Limits terra.MapValue[terra.StringValue] `hcl:"limits,attr"`
	// StartupCpuBoost: bool, optional
	StartupCpuBoost terra.BoolValue `hcl:"startup_cpu_boost,attr"`
}

type StartupProbe struct {
	// FailureThreshold: number, optional
	FailureThreshold terra.NumberValue `hcl:"failure_threshold,attr"`
	// InitialDelaySeconds: number, optional
	InitialDelaySeconds terra.NumberValue `hcl:"initial_delay_seconds,attr"`
	// PeriodSeconds: number, optional
	PeriodSeconds terra.NumberValue `hcl:"period_seconds,attr"`
	// TimeoutSeconds: number, optional
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// StartupProbeGrpc: optional
	Grpc *StartupProbeGrpc `hcl:"grpc,block"`
	// StartupProbeHttpGet: optional
	HttpGet *StartupProbeHttpGet `hcl:"http_get,block"`
	// TcpSocket: optional
	TcpSocket *TcpSocket `hcl:"tcp_socket,block"`
}

type StartupProbeGrpc struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
}

type StartupProbeHttpGet struct {
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// StartupProbeHttpGetHttpHeaders: min=0
	HttpHeaders []StartupProbeHttpGetHttpHeaders `hcl:"http_headers,block" validate:"min=0"`
}

type StartupProbeHttpGetHttpHeaders struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type TcpSocket struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
}

type VolumeMounts struct {
	// MountPath: string, required
	MountPath terra.StringValue `hcl:"mount_path,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Scaling struct {
	// MaxInstanceCount: number, optional
	MaxInstanceCount terra.NumberValue `hcl:"max_instance_count,attr"`
	// MinInstanceCount: number, optional
	MinInstanceCount terra.NumberValue `hcl:"min_instance_count,attr"`
}

type Volumes struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// CloudSqlInstance: optional
	CloudSqlInstance *CloudSqlInstance `hcl:"cloud_sql_instance,block"`
	// EmptyDir: optional
	EmptyDir *EmptyDir `hcl:"empty_dir,block"`
	// Secret: optional
	Secret *Secret `hcl:"secret,block"`
}

type CloudSqlInstance struct {
	// Instances: set of string, optional
	Instances terra.SetValue[terra.StringValue] `hcl:"instances,attr"`
}

type EmptyDir struct {
	// Medium: string, optional
	Medium terra.StringValue `hcl:"medium,attr"`
	// SizeLimit: string, optional
	SizeLimit terra.StringValue `hcl:"size_limit,attr"`
}

type Secret struct {
	// DefaultMode: number, optional
	DefaultMode terra.NumberValue `hcl:"default_mode,attr"`
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
	// Items: min=0
	Items []Items `hcl:"items,block" validate:"min=0"`
}

type Items struct {
	// Mode: number, optional
	Mode terra.NumberValue `hcl:"mode,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type VpcAccess struct {
	// Connector: string, optional
	Connector terra.StringValue `hcl:"connector,attr"`
	// Egress: string, optional
	Egress terra.StringValue `hcl:"egress,attr"`
	// NetworkInterfaces: min=0
	NetworkInterfaces []NetworkInterfaces `hcl:"network_interfaces,block" validate:"min=0"`
}

type NetworkInterfaces struct {
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Traffic struct {
	// Percent: number, optional
	Percent terra.NumberValue `hcl:"percent,attr"`
	// Revision: string, optional
	Revision terra.StringValue `hcl:"revision,attr"`
	// Tag: string, optional
	Tag terra.StringValue `hcl:"tag,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) ExecutionReason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("execution_reason"))
}

func (c ConditionsAttributes) LastTransitionTime() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("last_transition_time"))
}

func (c ConditionsAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("message"))
}

func (c ConditionsAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("reason"))
}

func (c ConditionsAttributes) RevisionReason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("revision_reason"))
}

func (c ConditionsAttributes) Severity() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("severity"))
}

func (c ConditionsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("state"))
}

func (c ConditionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type TerminalConditionAttributes struct {
	ref terra.Reference
}

func (tc TerminalConditionAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TerminalConditionAttributes) InternalWithRef(ref terra.Reference) TerminalConditionAttributes {
	return TerminalConditionAttributes{ref: ref}
}

func (tc TerminalConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TerminalConditionAttributes) ExecutionReason() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("execution_reason"))
}

func (tc TerminalConditionAttributes) LastTransitionTime() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("last_transition_time"))
}

func (tc TerminalConditionAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("message"))
}

func (tc TerminalConditionAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("reason"))
}

func (tc TerminalConditionAttributes) RevisionReason() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("revision_reason"))
}

func (tc TerminalConditionAttributes) Severity() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("severity"))
}

func (tc TerminalConditionAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("state"))
}

func (tc TerminalConditionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("type"))
}

type TrafficStatusesAttributes struct {
	ref terra.Reference
}

func (ts TrafficStatusesAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TrafficStatusesAttributes) InternalWithRef(ref terra.Reference) TrafficStatusesAttributes {
	return TrafficStatusesAttributes{ref: ref}
}

func (ts TrafficStatusesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TrafficStatusesAttributes) Percent() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("percent"))
}

func (ts TrafficStatusesAttributes) Revision() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("revision"))
}

func (ts TrafficStatusesAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("tag"))
}

func (ts TrafficStatusesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("type"))
}

func (ts TrafficStatusesAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("uri"))
}

type BinaryAuthorizationAttributes struct {
	ref terra.Reference
}

func (ba BinaryAuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return ba.ref, nil
}

func (ba BinaryAuthorizationAttributes) InternalWithRef(ref terra.Reference) BinaryAuthorizationAttributes {
	return BinaryAuthorizationAttributes{ref: ref}
}

func (ba BinaryAuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ba.ref.InternalTokens()
}

func (ba BinaryAuthorizationAttributes) BreakglassJustification() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("breakglass_justification"))
}

func (ba BinaryAuthorizationAttributes) UseDefault() terra.BoolValue {
	return terra.ReferenceAsBool(ba.ref.Append("use_default"))
}

type TemplateAttributes struct {
	ref terra.Reference
}

func (t TemplateAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TemplateAttributes) InternalWithRef(ref terra.Reference) TemplateAttributes {
	return TemplateAttributes{ref: ref}
}

func (t TemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TemplateAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](t.ref.Append("annotations"))
}

func (t TemplateAttributes) EncryptionKey() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("encryption_key"))
}

func (t TemplateAttributes) ExecutionEnvironment() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("execution_environment"))
}

func (t TemplateAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](t.ref.Append("labels"))
}

func (t TemplateAttributes) MaxInstanceRequestConcurrency() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("max_instance_request_concurrency"))
}

func (t TemplateAttributes) Revision() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("revision"))
}

func (t TemplateAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("service_account"))
}

func (t TemplateAttributes) SessionAffinity() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("session_affinity"))
}

func (t TemplateAttributes) Timeout() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("timeout"))
}

func (t TemplateAttributes) Containers() terra.ListValue[ContainersAttributes] {
	return terra.ReferenceAsList[ContainersAttributes](t.ref.Append("containers"))
}

func (t TemplateAttributes) Scaling() terra.ListValue[ScalingAttributes] {
	return terra.ReferenceAsList[ScalingAttributes](t.ref.Append("scaling"))
}

func (t TemplateAttributes) Volumes() terra.ListValue[VolumesAttributes] {
	return terra.ReferenceAsList[VolumesAttributes](t.ref.Append("volumes"))
}

func (t TemplateAttributes) VpcAccess() terra.ListValue[VpcAccessAttributes] {
	return terra.ReferenceAsList[VpcAccessAttributes](t.ref.Append("vpc_access"))
}

type ContainersAttributes struct {
	ref terra.Reference
}

func (c ContainersAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ContainersAttributes) InternalWithRef(ref terra.Reference) ContainersAttributes {
	return ContainersAttributes{ref: ref}
}

func (c ContainersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ContainersAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("args"))
}

func (c ContainersAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("command"))
}

func (c ContainersAttributes) DependsOn() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("depends_on"))
}

func (c ContainersAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c ContainersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c ContainersAttributes) WorkingDir() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("working_dir"))
}

func (c ContainersAttributes) Env() terra.ListValue[EnvAttributes] {
	return terra.ReferenceAsList[EnvAttributes](c.ref.Append("env"))
}

func (c ContainersAttributes) LivenessProbe() terra.ListValue[LivenessProbeAttributes] {
	return terra.ReferenceAsList[LivenessProbeAttributes](c.ref.Append("liveness_probe"))
}

func (c ContainersAttributes) Ports() terra.ListValue[PortsAttributes] {
	return terra.ReferenceAsList[PortsAttributes](c.ref.Append("ports"))
}

func (c ContainersAttributes) Resources() terra.ListValue[ResourcesAttributes] {
	return terra.ReferenceAsList[ResourcesAttributes](c.ref.Append("resources"))
}

func (c ContainersAttributes) StartupProbe() terra.ListValue[StartupProbeAttributes] {
	return terra.ReferenceAsList[StartupProbeAttributes](c.ref.Append("startup_probe"))
}

func (c ContainersAttributes) VolumeMounts() terra.ListValue[VolumeMountsAttributes] {
	return terra.ReferenceAsList[VolumeMountsAttributes](c.ref.Append("volume_mounts"))
}

type EnvAttributes struct {
	ref terra.Reference
}

func (e EnvAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EnvAttributes) InternalWithRef(ref terra.Reference) EnvAttributes {
	return EnvAttributes{ref: ref}
}

func (e EnvAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EnvAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e EnvAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

func (e EnvAttributes) ValueSource() terra.ListValue[ValueSourceAttributes] {
	return terra.ReferenceAsList[ValueSourceAttributes](e.ref.Append("value_source"))
}

type ValueSourceAttributes struct {
	ref terra.Reference
}

func (vs ValueSourceAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs ValueSourceAttributes) InternalWithRef(ref terra.Reference) ValueSourceAttributes {
	return ValueSourceAttributes{ref: ref}
}

func (vs ValueSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs ValueSourceAttributes) SecretKeyRef() terra.ListValue[SecretKeyRefAttributes] {
	return terra.ReferenceAsList[SecretKeyRefAttributes](vs.ref.Append("secret_key_ref"))
}

type SecretKeyRefAttributes struct {
	ref terra.Reference
}

func (skr SecretKeyRefAttributes) InternalRef() (terra.Reference, error) {
	return skr.ref, nil
}

func (skr SecretKeyRefAttributes) InternalWithRef(ref terra.Reference) SecretKeyRefAttributes {
	return SecretKeyRefAttributes{ref: ref}
}

func (skr SecretKeyRefAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return skr.ref.InternalTokens()
}

func (skr SecretKeyRefAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(skr.ref.Append("secret"))
}

func (skr SecretKeyRefAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(skr.ref.Append("version"))
}

type LivenessProbeAttributes struct {
	ref terra.Reference
}

func (lp LivenessProbeAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp LivenessProbeAttributes) InternalWithRef(ref terra.Reference) LivenessProbeAttributes {
	return LivenessProbeAttributes{ref: ref}
}

func (lp LivenessProbeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp LivenessProbeAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("failure_threshold"))
}

func (lp LivenessProbeAttributes) InitialDelaySeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("initial_delay_seconds"))
}

func (lp LivenessProbeAttributes) PeriodSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("period_seconds"))
}

func (lp LivenessProbeAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("timeout_seconds"))
}

func (lp LivenessProbeAttributes) Grpc() terra.ListValue[LivenessProbeGrpcAttributes] {
	return terra.ReferenceAsList[LivenessProbeGrpcAttributes](lp.ref.Append("grpc"))
}

func (lp LivenessProbeAttributes) HttpGet() terra.ListValue[LivenessProbeHttpGetAttributes] {
	return terra.ReferenceAsList[LivenessProbeHttpGetAttributes](lp.ref.Append("http_get"))
}

type LivenessProbeGrpcAttributes struct {
	ref terra.Reference
}

func (g LivenessProbeGrpcAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g LivenessProbeGrpcAttributes) InternalWithRef(ref terra.Reference) LivenessProbeGrpcAttributes {
	return LivenessProbeGrpcAttributes{ref: ref}
}

func (g LivenessProbeGrpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g LivenessProbeGrpcAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("port"))
}

func (g LivenessProbeGrpcAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("service"))
}

type LivenessProbeHttpGetAttributes struct {
	ref terra.Reference
}

func (hg LivenessProbeHttpGetAttributes) InternalRef() (terra.Reference, error) {
	return hg.ref, nil
}

func (hg LivenessProbeHttpGetAttributes) InternalWithRef(ref terra.Reference) LivenessProbeHttpGetAttributes {
	return LivenessProbeHttpGetAttributes{ref: ref}
}

func (hg LivenessProbeHttpGetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hg.ref.InternalTokens()
}

func (hg LivenessProbeHttpGetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hg.ref.Append("path"))
}

func (hg LivenessProbeHttpGetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(hg.ref.Append("port"))
}

func (hg LivenessProbeHttpGetAttributes) HttpHeaders() terra.ListValue[LivenessProbeHttpGetHttpHeadersAttributes] {
	return terra.ReferenceAsList[LivenessProbeHttpGetHttpHeadersAttributes](hg.ref.Append("http_headers"))
}

type LivenessProbeHttpGetHttpHeadersAttributes struct {
	ref terra.Reference
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) InternalRef() (terra.Reference, error) {
	return hh.ref, nil
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) InternalWithRef(ref terra.Reference) LivenessProbeHttpGetHttpHeadersAttributes {
	return LivenessProbeHttpGetHttpHeadersAttributes{ref: ref}
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hh.ref.InternalTokens()
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("name"))
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("value"))
}

type PortsAttributes struct {
	ref terra.Reference
}

func (p PortsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PortsAttributes) InternalWithRef(ref terra.Reference) PortsAttributes {
	return PortsAttributes{ref: ref}
}

func (p PortsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PortsAttributes) ContainerPort() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("container_port"))
}

func (p PortsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

type ResourcesAttributes struct {
	ref terra.Reference
}

func (r ResourcesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ResourcesAttributes) InternalWithRef(ref terra.Reference) ResourcesAttributes {
	return ResourcesAttributes{ref: ref}
}

func (r ResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ResourcesAttributes) CpuIdle() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("cpu_idle"))
}

func (r ResourcesAttributes) Limits() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("limits"))
}

func (r ResourcesAttributes) StartupCpuBoost() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("startup_cpu_boost"))
}

type StartupProbeAttributes struct {
	ref terra.Reference
}

func (sp StartupProbeAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp StartupProbeAttributes) InternalWithRef(ref terra.Reference) StartupProbeAttributes {
	return StartupProbeAttributes{ref: ref}
}

func (sp StartupProbeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp StartupProbeAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("failure_threshold"))
}

func (sp StartupProbeAttributes) InitialDelaySeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("initial_delay_seconds"))
}

func (sp StartupProbeAttributes) PeriodSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("period_seconds"))
}

func (sp StartupProbeAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("timeout_seconds"))
}

func (sp StartupProbeAttributes) Grpc() terra.ListValue[StartupProbeGrpcAttributes] {
	return terra.ReferenceAsList[StartupProbeGrpcAttributes](sp.ref.Append("grpc"))
}

func (sp StartupProbeAttributes) HttpGet() terra.ListValue[StartupProbeHttpGetAttributes] {
	return terra.ReferenceAsList[StartupProbeHttpGetAttributes](sp.ref.Append("http_get"))
}

func (sp StartupProbeAttributes) TcpSocket() terra.ListValue[TcpSocketAttributes] {
	return terra.ReferenceAsList[TcpSocketAttributes](sp.ref.Append("tcp_socket"))
}

type StartupProbeGrpcAttributes struct {
	ref terra.Reference
}

func (g StartupProbeGrpcAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g StartupProbeGrpcAttributes) InternalWithRef(ref terra.Reference) StartupProbeGrpcAttributes {
	return StartupProbeGrpcAttributes{ref: ref}
}

func (g StartupProbeGrpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g StartupProbeGrpcAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("port"))
}

func (g StartupProbeGrpcAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("service"))
}

type StartupProbeHttpGetAttributes struct {
	ref terra.Reference
}

func (hg StartupProbeHttpGetAttributes) InternalRef() (terra.Reference, error) {
	return hg.ref, nil
}

func (hg StartupProbeHttpGetAttributes) InternalWithRef(ref terra.Reference) StartupProbeHttpGetAttributes {
	return StartupProbeHttpGetAttributes{ref: ref}
}

func (hg StartupProbeHttpGetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hg.ref.InternalTokens()
}

func (hg StartupProbeHttpGetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hg.ref.Append("path"))
}

func (hg StartupProbeHttpGetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(hg.ref.Append("port"))
}

func (hg StartupProbeHttpGetAttributes) HttpHeaders() terra.ListValue[StartupProbeHttpGetHttpHeadersAttributes] {
	return terra.ReferenceAsList[StartupProbeHttpGetHttpHeadersAttributes](hg.ref.Append("http_headers"))
}

type StartupProbeHttpGetHttpHeadersAttributes struct {
	ref terra.Reference
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) InternalRef() (terra.Reference, error) {
	return hh.ref, nil
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) InternalWithRef(ref terra.Reference) StartupProbeHttpGetHttpHeadersAttributes {
	return StartupProbeHttpGetHttpHeadersAttributes{ref: ref}
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hh.ref.InternalTokens()
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("name"))
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("value"))
}

type TcpSocketAttributes struct {
	ref terra.Reference
}

func (ts TcpSocketAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TcpSocketAttributes) InternalWithRef(ref terra.Reference) TcpSocketAttributes {
	return TcpSocketAttributes{ref: ref}
}

func (ts TcpSocketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TcpSocketAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("port"))
}

type VolumeMountsAttributes struct {
	ref terra.Reference
}

func (vm VolumeMountsAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm VolumeMountsAttributes) InternalWithRef(ref terra.Reference) VolumeMountsAttributes {
	return VolumeMountsAttributes{ref: ref}
}

func (vm VolumeMountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm VolumeMountsAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("mount_path"))
}

func (vm VolumeMountsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("name"))
}

type ScalingAttributes struct {
	ref terra.Reference
}

func (s ScalingAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScalingAttributes) InternalWithRef(ref terra.Reference) ScalingAttributes {
	return ScalingAttributes{ref: ref}
}

func (s ScalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScalingAttributes) MaxInstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("max_instance_count"))
}

func (s ScalingAttributes) MinInstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("min_instance_count"))
}

type VolumesAttributes struct {
	ref terra.Reference
}

func (v VolumesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VolumesAttributes) InternalWithRef(ref terra.Reference) VolumesAttributes {
	return VolumesAttributes{ref: ref}
}

func (v VolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v VolumesAttributes) CloudSqlInstance() terra.ListValue[CloudSqlInstanceAttributes] {
	return terra.ReferenceAsList[CloudSqlInstanceAttributes](v.ref.Append("cloud_sql_instance"))
}

func (v VolumesAttributes) EmptyDir() terra.ListValue[EmptyDirAttributes] {
	return terra.ReferenceAsList[EmptyDirAttributes](v.ref.Append("empty_dir"))
}

func (v VolumesAttributes) Secret() terra.ListValue[SecretAttributes] {
	return terra.ReferenceAsList[SecretAttributes](v.ref.Append("secret"))
}

type CloudSqlInstanceAttributes struct {
	ref terra.Reference
}

func (csi CloudSqlInstanceAttributes) InternalRef() (terra.Reference, error) {
	return csi.ref, nil
}

func (csi CloudSqlInstanceAttributes) InternalWithRef(ref terra.Reference) CloudSqlInstanceAttributes {
	return CloudSqlInstanceAttributes{ref: ref}
}

func (csi CloudSqlInstanceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return csi.ref.InternalTokens()
}

func (csi CloudSqlInstanceAttributes) Instances() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](csi.ref.Append("instances"))
}

type EmptyDirAttributes struct {
	ref terra.Reference
}

func (ed EmptyDirAttributes) InternalRef() (terra.Reference, error) {
	return ed.ref, nil
}

func (ed EmptyDirAttributes) InternalWithRef(ref terra.Reference) EmptyDirAttributes {
	return EmptyDirAttributes{ref: ref}
}

func (ed EmptyDirAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ed.ref.InternalTokens()
}

func (ed EmptyDirAttributes) Medium() terra.StringValue {
	return terra.ReferenceAsString(ed.ref.Append("medium"))
}

func (ed EmptyDirAttributes) SizeLimit() terra.StringValue {
	return terra.ReferenceAsString(ed.ref.Append("size_limit"))
}

type SecretAttributes struct {
	ref terra.Reference
}

func (s SecretAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SecretAttributes) InternalWithRef(ref terra.Reference) SecretAttributes {
	return SecretAttributes{ref: ref}
}

func (s SecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SecretAttributes) DefaultMode() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("default_mode"))
}

func (s SecretAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret"))
}

func (s SecretAttributes) Items() terra.ListValue[ItemsAttributes] {
	return terra.ReferenceAsList[ItemsAttributes](s.ref.Append("items"))
}

type ItemsAttributes struct {
	ref terra.Reference
}

func (i ItemsAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i ItemsAttributes) InternalWithRef(ref terra.Reference) ItemsAttributes {
	return ItemsAttributes{ref: ref}
}

func (i ItemsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i ItemsAttributes) Mode() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("mode"))
}

func (i ItemsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("path"))
}

func (i ItemsAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("version"))
}

type VpcAccessAttributes struct {
	ref terra.Reference
}

func (va VpcAccessAttributes) InternalRef() (terra.Reference, error) {
	return va.ref, nil
}

func (va VpcAccessAttributes) InternalWithRef(ref terra.Reference) VpcAccessAttributes {
	return VpcAccessAttributes{ref: ref}
}

func (va VpcAccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return va.ref.InternalTokens()
}

func (va VpcAccessAttributes) Connector() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("connector"))
}

func (va VpcAccessAttributes) Egress() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("egress"))
}

func (va VpcAccessAttributes) NetworkInterfaces() terra.ListValue[NetworkInterfacesAttributes] {
	return terra.ReferenceAsList[NetworkInterfacesAttributes](va.ref.Append("network_interfaces"))
}

type NetworkInterfacesAttributes struct {
	ref terra.Reference
}

func (ni NetworkInterfacesAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni NetworkInterfacesAttributes) InternalWithRef(ref terra.Reference) NetworkInterfacesAttributes {
	return NetworkInterfacesAttributes{ref: ref}
}

func (ni NetworkInterfacesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni NetworkInterfacesAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("network"))
}

func (ni NetworkInterfacesAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("subnetwork"))
}

func (ni NetworkInterfacesAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ni.ref.Append("tags"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TrafficAttributes struct {
	ref terra.Reference
}

func (t TrafficAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TrafficAttributes) InternalWithRef(ref terra.Reference) TrafficAttributes {
	return TrafficAttributes{ref: ref}
}

func (t TrafficAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TrafficAttributes) Percent() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("percent"))
}

func (t TrafficAttributes) Revision() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("revision"))
}

func (t TrafficAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("tag"))
}

func (t TrafficAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("type"))
}

type ConditionsState struct {
	ExecutionReason    string `json:"execution_reason"`
	LastTransitionTime string `json:"last_transition_time"`
	Message            string `json:"message"`
	Reason             string `json:"reason"`
	RevisionReason     string `json:"revision_reason"`
	Severity           string `json:"severity"`
	State              string `json:"state"`
	Type               string `json:"type"`
}

type TerminalConditionState struct {
	ExecutionReason    string `json:"execution_reason"`
	LastTransitionTime string `json:"last_transition_time"`
	Message            string `json:"message"`
	Reason             string `json:"reason"`
	RevisionReason     string `json:"revision_reason"`
	Severity           string `json:"severity"`
	State              string `json:"state"`
	Type               string `json:"type"`
}

type TrafficStatusesState struct {
	Percent  float64 `json:"percent"`
	Revision string  `json:"revision"`
	Tag      string  `json:"tag"`
	Type     string  `json:"type"`
	Uri      string  `json:"uri"`
}

type BinaryAuthorizationState struct {
	BreakglassJustification string `json:"breakglass_justification"`
	UseDefault              bool   `json:"use_default"`
}

type TemplateState struct {
	Annotations                   map[string]string `json:"annotations"`
	EncryptionKey                 string            `json:"encryption_key"`
	ExecutionEnvironment          string            `json:"execution_environment"`
	Labels                        map[string]string `json:"labels"`
	MaxInstanceRequestConcurrency float64           `json:"max_instance_request_concurrency"`
	Revision                      string            `json:"revision"`
	ServiceAccount                string            `json:"service_account"`
	SessionAffinity               bool              `json:"session_affinity"`
	Timeout                       string            `json:"timeout"`
	Containers                    []ContainersState `json:"containers"`
	Scaling                       []ScalingState    `json:"scaling"`
	Volumes                       []VolumesState    `json:"volumes"`
	VpcAccess                     []VpcAccessState  `json:"vpc_access"`
}

type ContainersState struct {
	Args          []string             `json:"args"`
	Command       []string             `json:"command"`
	DependsOn     []string             `json:"depends_on"`
	Image         string               `json:"image"`
	Name          string               `json:"name"`
	WorkingDir    string               `json:"working_dir"`
	Env           []EnvState           `json:"env"`
	LivenessProbe []LivenessProbeState `json:"liveness_probe"`
	Ports         []PortsState         `json:"ports"`
	Resources     []ResourcesState     `json:"resources"`
	StartupProbe  []StartupProbeState  `json:"startup_probe"`
	VolumeMounts  []VolumeMountsState  `json:"volume_mounts"`
}

type EnvState struct {
	Name        string             `json:"name"`
	Value       string             `json:"value"`
	ValueSource []ValueSourceState `json:"value_source"`
}

type ValueSourceState struct {
	SecretKeyRef []SecretKeyRefState `json:"secret_key_ref"`
}

type SecretKeyRefState struct {
	Secret  string `json:"secret"`
	Version string `json:"version"`
}

type LivenessProbeState struct {
	FailureThreshold    float64                     `json:"failure_threshold"`
	InitialDelaySeconds float64                     `json:"initial_delay_seconds"`
	PeriodSeconds       float64                     `json:"period_seconds"`
	TimeoutSeconds      float64                     `json:"timeout_seconds"`
	Grpc                []LivenessProbeGrpcState    `json:"grpc"`
	HttpGet             []LivenessProbeHttpGetState `json:"http_get"`
}

type LivenessProbeGrpcState struct {
	Port    float64 `json:"port"`
	Service string  `json:"service"`
}

type LivenessProbeHttpGetState struct {
	Path        string                                 `json:"path"`
	Port        float64                                `json:"port"`
	HttpHeaders []LivenessProbeHttpGetHttpHeadersState `json:"http_headers"`
}

type LivenessProbeHttpGetHttpHeadersState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type PortsState struct {
	ContainerPort float64 `json:"container_port"`
	Name          string  `json:"name"`
}

type ResourcesState struct {
	CpuIdle         bool              `json:"cpu_idle"`
	Limits          map[string]string `json:"limits"`
	StartupCpuBoost bool              `json:"startup_cpu_boost"`
}

type StartupProbeState struct {
	FailureThreshold    float64                    `json:"failure_threshold"`
	InitialDelaySeconds float64                    `json:"initial_delay_seconds"`
	PeriodSeconds       float64                    `json:"period_seconds"`
	TimeoutSeconds      float64                    `json:"timeout_seconds"`
	Grpc                []StartupProbeGrpcState    `json:"grpc"`
	HttpGet             []StartupProbeHttpGetState `json:"http_get"`
	TcpSocket           []TcpSocketState           `json:"tcp_socket"`
}

type StartupProbeGrpcState struct {
	Port    float64 `json:"port"`
	Service string  `json:"service"`
}

type StartupProbeHttpGetState struct {
	Path        string                                `json:"path"`
	Port        float64                               `json:"port"`
	HttpHeaders []StartupProbeHttpGetHttpHeadersState `json:"http_headers"`
}

type StartupProbeHttpGetHttpHeadersState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TcpSocketState struct {
	Port float64 `json:"port"`
}

type VolumeMountsState struct {
	MountPath string `json:"mount_path"`
	Name      string `json:"name"`
}

type ScalingState struct {
	MaxInstanceCount float64 `json:"max_instance_count"`
	MinInstanceCount float64 `json:"min_instance_count"`
}

type VolumesState struct {
	Name             string                  `json:"name"`
	CloudSqlInstance []CloudSqlInstanceState `json:"cloud_sql_instance"`
	EmptyDir         []EmptyDirState         `json:"empty_dir"`
	Secret           []SecretState           `json:"secret"`
}

type CloudSqlInstanceState struct {
	Instances []string `json:"instances"`
}

type EmptyDirState struct {
	Medium    string `json:"medium"`
	SizeLimit string `json:"size_limit"`
}

type SecretState struct {
	DefaultMode float64      `json:"default_mode"`
	Secret      string       `json:"secret"`
	Items       []ItemsState `json:"items"`
}

type ItemsState struct {
	Mode    float64 `json:"mode"`
	Path    string  `json:"path"`
	Version string  `json:"version"`
}

type VpcAccessState struct {
	Connector         string                   `json:"connector"`
	Egress            string                   `json:"egress"`
	NetworkInterfaces []NetworkInterfacesState `json:"network_interfaces"`
}

type NetworkInterfacesState struct {
	Network    string   `json:"network"`
	Subnetwork string   `json:"subnetwork"`
	Tags       []string `json:"tags"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TrafficState struct {
	Percent  float64 `json:"percent"`
	Revision string  `json:"revision"`
	Tag      string  `json:"tag"`
	Type     string  `json:"type"`
}
