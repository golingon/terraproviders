// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	clouddeploydeliverypipelineiammember "github.com/golingon/terraproviders/googlebeta/5.24.0/clouddeploydeliverypipelineiammember"
	"io"
)

// NewClouddeployDeliveryPipelineIamMember creates a new instance of [ClouddeployDeliveryPipelineIamMember].
func NewClouddeployDeliveryPipelineIamMember(name string, args ClouddeployDeliveryPipelineIamMemberArgs) *ClouddeployDeliveryPipelineIamMember {
	return &ClouddeployDeliveryPipelineIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ClouddeployDeliveryPipelineIamMember)(nil)

// ClouddeployDeliveryPipelineIamMember represents the Terraform resource google_clouddeploy_delivery_pipeline_iam_member.
type ClouddeployDeliveryPipelineIamMember struct {
	Name      string
	Args      ClouddeployDeliveryPipelineIamMemberArgs
	state     *clouddeployDeliveryPipelineIamMemberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ClouddeployDeliveryPipelineIamMember].
func (cdpim *ClouddeployDeliveryPipelineIamMember) Type() string {
	return "google_clouddeploy_delivery_pipeline_iam_member"
}

// LocalName returns the local name for [ClouddeployDeliveryPipelineIamMember].
func (cdpim *ClouddeployDeliveryPipelineIamMember) LocalName() string {
	return cdpim.Name
}

// Configuration returns the configuration (args) for [ClouddeployDeliveryPipelineIamMember].
func (cdpim *ClouddeployDeliveryPipelineIamMember) Configuration() interface{} {
	return cdpim.Args
}

// DependOn is used for other resources to depend on [ClouddeployDeliveryPipelineIamMember].
func (cdpim *ClouddeployDeliveryPipelineIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(cdpim)
}

// Dependencies returns the list of resources [ClouddeployDeliveryPipelineIamMember] depends_on.
func (cdpim *ClouddeployDeliveryPipelineIamMember) Dependencies() terra.Dependencies {
	return cdpim.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ClouddeployDeliveryPipelineIamMember].
func (cdpim *ClouddeployDeliveryPipelineIamMember) LifecycleManagement() *terra.Lifecycle {
	return cdpim.Lifecycle
}

// Attributes returns the attributes for [ClouddeployDeliveryPipelineIamMember].
func (cdpim *ClouddeployDeliveryPipelineIamMember) Attributes() clouddeployDeliveryPipelineIamMemberAttributes {
	return clouddeployDeliveryPipelineIamMemberAttributes{ref: terra.ReferenceResource(cdpim)}
}

// ImportState imports the given attribute values into [ClouddeployDeliveryPipelineIamMember]'s state.
func (cdpim *ClouddeployDeliveryPipelineIamMember) ImportState(av io.Reader) error {
	cdpim.state = &clouddeployDeliveryPipelineIamMemberState{}
	if err := json.NewDecoder(av).Decode(cdpim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cdpim.Type(), cdpim.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ClouddeployDeliveryPipelineIamMember] has state.
func (cdpim *ClouddeployDeliveryPipelineIamMember) State() (*clouddeployDeliveryPipelineIamMemberState, bool) {
	return cdpim.state, cdpim.state != nil
}

// StateMust returns the state for [ClouddeployDeliveryPipelineIamMember]. Panics if the state is nil.
func (cdpim *ClouddeployDeliveryPipelineIamMember) StateMust() *clouddeployDeliveryPipelineIamMemberState {
	if cdpim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cdpim.Type(), cdpim.LocalName()))
	}
	return cdpim.state
}

// ClouddeployDeliveryPipelineIamMemberArgs contains the configurations for google_clouddeploy_delivery_pipeline_iam_member.
type ClouddeployDeliveryPipelineIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *clouddeploydeliverypipelineiammember.Condition `hcl:"condition,block"`
}
type clouddeployDeliveryPipelineIamMemberAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_clouddeploy_delivery_pipeline_iam_member.
func (cdpim clouddeployDeliveryPipelineIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(cdpim.ref.Append("etag"))
}

// Id returns a reference to field id of google_clouddeploy_delivery_pipeline_iam_member.
func (cdpim clouddeployDeliveryPipelineIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cdpim.ref.Append("id"))
}

// Location returns a reference to field location of google_clouddeploy_delivery_pipeline_iam_member.
func (cdpim clouddeployDeliveryPipelineIamMemberAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(cdpim.ref.Append("location"))
}

// Member returns a reference to field member of google_clouddeploy_delivery_pipeline_iam_member.
func (cdpim clouddeployDeliveryPipelineIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceAsString(cdpim.ref.Append("member"))
}

// Name returns a reference to field name of google_clouddeploy_delivery_pipeline_iam_member.
func (cdpim clouddeployDeliveryPipelineIamMemberAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cdpim.ref.Append("name"))
}

// Project returns a reference to field project of google_clouddeploy_delivery_pipeline_iam_member.
func (cdpim clouddeployDeliveryPipelineIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(cdpim.ref.Append("project"))
}

// Role returns a reference to field role of google_clouddeploy_delivery_pipeline_iam_member.
func (cdpim clouddeployDeliveryPipelineIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(cdpim.ref.Append("role"))
}

func (cdpim clouddeployDeliveryPipelineIamMemberAttributes) Condition() terra.ListValue[clouddeploydeliverypipelineiammember.ConditionAttributes] {
	return terra.ReferenceAsList[clouddeploydeliverypipelineiammember.ConditionAttributes](cdpim.ref.Append("condition"))
}

type clouddeployDeliveryPipelineIamMemberState struct {
	Etag      string                                                `json:"etag"`
	Id        string                                                `json:"id"`
	Location  string                                                `json:"location"`
	Member    string                                                `json:"member"`
	Name      string                                                `json:"name"`
	Project   string                                                `json:"project"`
	Role      string                                                `json:"role"`
	Condition []clouddeploydeliverypipelineiammember.ConditionState `json:"condition"`
}
