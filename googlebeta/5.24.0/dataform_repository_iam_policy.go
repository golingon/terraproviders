// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewDataformRepositoryIamPolicy creates a new instance of [DataformRepositoryIamPolicy].
func NewDataformRepositoryIamPolicy(name string, args DataformRepositoryIamPolicyArgs) *DataformRepositoryIamPolicy {
	return &DataformRepositoryIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataformRepositoryIamPolicy)(nil)

// DataformRepositoryIamPolicy represents the Terraform resource google_dataform_repository_iam_policy.
type DataformRepositoryIamPolicy struct {
	Name      string
	Args      DataformRepositoryIamPolicyArgs
	state     *dataformRepositoryIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataformRepositoryIamPolicy].
func (drip *DataformRepositoryIamPolicy) Type() string {
	return "google_dataform_repository_iam_policy"
}

// LocalName returns the local name for [DataformRepositoryIamPolicy].
func (drip *DataformRepositoryIamPolicy) LocalName() string {
	return drip.Name
}

// Configuration returns the configuration (args) for [DataformRepositoryIamPolicy].
func (drip *DataformRepositoryIamPolicy) Configuration() interface{} {
	return drip.Args
}

// DependOn is used for other resources to depend on [DataformRepositoryIamPolicy].
func (drip *DataformRepositoryIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(drip)
}

// Dependencies returns the list of resources [DataformRepositoryIamPolicy] depends_on.
func (drip *DataformRepositoryIamPolicy) Dependencies() terra.Dependencies {
	return drip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataformRepositoryIamPolicy].
func (drip *DataformRepositoryIamPolicy) LifecycleManagement() *terra.Lifecycle {
	return drip.Lifecycle
}

// Attributes returns the attributes for [DataformRepositoryIamPolicy].
func (drip *DataformRepositoryIamPolicy) Attributes() dataformRepositoryIamPolicyAttributes {
	return dataformRepositoryIamPolicyAttributes{ref: terra.ReferenceResource(drip)}
}

// ImportState imports the given attribute values into [DataformRepositoryIamPolicy]'s state.
func (drip *DataformRepositoryIamPolicy) ImportState(av io.Reader) error {
	drip.state = &dataformRepositoryIamPolicyState{}
	if err := json.NewDecoder(av).Decode(drip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", drip.Type(), drip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataformRepositoryIamPolicy] has state.
func (drip *DataformRepositoryIamPolicy) State() (*dataformRepositoryIamPolicyState, bool) {
	return drip.state, drip.state != nil
}

// StateMust returns the state for [DataformRepositoryIamPolicy]. Panics if the state is nil.
func (drip *DataformRepositoryIamPolicy) StateMust() *dataformRepositoryIamPolicyState {
	if drip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", drip.Type(), drip.LocalName()))
	}
	return drip.state
}

// DataformRepositoryIamPolicyArgs contains the configurations for google_dataform_repository_iam_policy.
type DataformRepositoryIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
}
type dataformRepositoryIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_dataform_repository_iam_policy.
func (drip dataformRepositoryIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(drip.ref.Append("etag"))
}

// Id returns a reference to field id of google_dataform_repository_iam_policy.
func (drip dataformRepositoryIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(drip.ref.Append("id"))
}

// PolicyData returns a reference to field policy_data of google_dataform_repository_iam_policy.
func (drip dataformRepositoryIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(drip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_dataform_repository_iam_policy.
func (drip dataformRepositoryIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(drip.ref.Append("project"))
}

// Region returns a reference to field region of google_dataform_repository_iam_policy.
func (drip dataformRepositoryIamPolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(drip.ref.Append("region"))
}

// Repository returns a reference to field repository of google_dataform_repository_iam_policy.
func (drip dataformRepositoryIamPolicyAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(drip.ref.Append("repository"))
}

type dataformRepositoryIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	Region     string `json:"region"`
	Repository string `json:"repository"`
}
