// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	firebaseappcheckappattestconfig "github.com/golingon/terraproviders/googlebeta/5.24.0/firebaseappcheckappattestconfig"
	"io"
)

// NewFirebaseAppCheckAppAttestConfig creates a new instance of [FirebaseAppCheckAppAttestConfig].
func NewFirebaseAppCheckAppAttestConfig(name string, args FirebaseAppCheckAppAttestConfigArgs) *FirebaseAppCheckAppAttestConfig {
	return &FirebaseAppCheckAppAttestConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirebaseAppCheckAppAttestConfig)(nil)

// FirebaseAppCheckAppAttestConfig represents the Terraform resource google_firebase_app_check_app_attest_config.
type FirebaseAppCheckAppAttestConfig struct {
	Name      string
	Args      FirebaseAppCheckAppAttestConfigArgs
	state     *firebaseAppCheckAppAttestConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [FirebaseAppCheckAppAttestConfig].
func (facaac *FirebaseAppCheckAppAttestConfig) Type() string {
	return "google_firebase_app_check_app_attest_config"
}

// LocalName returns the local name for [FirebaseAppCheckAppAttestConfig].
func (facaac *FirebaseAppCheckAppAttestConfig) LocalName() string {
	return facaac.Name
}

// Configuration returns the configuration (args) for [FirebaseAppCheckAppAttestConfig].
func (facaac *FirebaseAppCheckAppAttestConfig) Configuration() interface{} {
	return facaac.Args
}

// DependOn is used for other resources to depend on [FirebaseAppCheckAppAttestConfig].
func (facaac *FirebaseAppCheckAppAttestConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(facaac)
}

// Dependencies returns the list of resources [FirebaseAppCheckAppAttestConfig] depends_on.
func (facaac *FirebaseAppCheckAppAttestConfig) Dependencies() terra.Dependencies {
	return facaac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [FirebaseAppCheckAppAttestConfig].
func (facaac *FirebaseAppCheckAppAttestConfig) LifecycleManagement() *terra.Lifecycle {
	return facaac.Lifecycle
}

// Attributes returns the attributes for [FirebaseAppCheckAppAttestConfig].
func (facaac *FirebaseAppCheckAppAttestConfig) Attributes() firebaseAppCheckAppAttestConfigAttributes {
	return firebaseAppCheckAppAttestConfigAttributes{ref: terra.ReferenceResource(facaac)}
}

// ImportState imports the given attribute values into [FirebaseAppCheckAppAttestConfig]'s state.
func (facaac *FirebaseAppCheckAppAttestConfig) ImportState(av io.Reader) error {
	facaac.state = &firebaseAppCheckAppAttestConfigState{}
	if err := json.NewDecoder(av).Decode(facaac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", facaac.Type(), facaac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [FirebaseAppCheckAppAttestConfig] has state.
func (facaac *FirebaseAppCheckAppAttestConfig) State() (*firebaseAppCheckAppAttestConfigState, bool) {
	return facaac.state, facaac.state != nil
}

// StateMust returns the state for [FirebaseAppCheckAppAttestConfig]. Panics if the state is nil.
func (facaac *FirebaseAppCheckAppAttestConfig) StateMust() *firebaseAppCheckAppAttestConfigState {
	if facaac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", facaac.Type(), facaac.LocalName()))
	}
	return facaac.state
}

// FirebaseAppCheckAppAttestConfigArgs contains the configurations for google_firebase_app_check_app_attest_config.
type FirebaseAppCheckAppAttestConfigArgs struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TokenTtl: string, optional
	TokenTtl terra.StringValue `hcl:"token_ttl,attr"`
	// Timeouts: optional
	Timeouts *firebaseappcheckappattestconfig.Timeouts `hcl:"timeouts,block"`
}
type firebaseAppCheckAppAttestConfigAttributes struct {
	ref terra.Reference
}

// AppId returns a reference to field app_id of google_firebase_app_check_app_attest_config.
func (facaac firebaseAppCheckAppAttestConfigAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(facaac.ref.Append("app_id"))
}

// Id returns a reference to field id of google_firebase_app_check_app_attest_config.
func (facaac firebaseAppCheckAppAttestConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(facaac.ref.Append("id"))
}

// Name returns a reference to field name of google_firebase_app_check_app_attest_config.
func (facaac firebaseAppCheckAppAttestConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(facaac.ref.Append("name"))
}

// Project returns a reference to field project of google_firebase_app_check_app_attest_config.
func (facaac firebaseAppCheckAppAttestConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(facaac.ref.Append("project"))
}

// TokenTtl returns a reference to field token_ttl of google_firebase_app_check_app_attest_config.
func (facaac firebaseAppCheckAppAttestConfigAttributes) TokenTtl() terra.StringValue {
	return terra.ReferenceAsString(facaac.ref.Append("token_ttl"))
}

func (facaac firebaseAppCheckAppAttestConfigAttributes) Timeouts() firebaseappcheckappattestconfig.TimeoutsAttributes {
	return terra.ReferenceAsSingle[firebaseappcheckappattestconfig.TimeoutsAttributes](facaac.ref.Append("timeouts"))
}

type firebaseAppCheckAppAttestConfigState struct {
	AppId    string                                         `json:"app_id"`
	Id       string                                         `json:"id"`
	Name     string                                         `json:"name"`
	Project  string                                         `json:"project"`
	TokenTtl string                                         `json:"token_ttl"`
	Timeouts *firebaseappcheckappattestconfig.TimeoutsState `json:"timeouts"`
}
