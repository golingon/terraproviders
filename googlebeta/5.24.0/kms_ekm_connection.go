// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	kmsekmconnection "github.com/golingon/terraproviders/googlebeta/5.24.0/kmsekmconnection"
	"io"
)

// NewKmsEkmConnection creates a new instance of [KmsEkmConnection].
func NewKmsEkmConnection(name string, args KmsEkmConnectionArgs) *KmsEkmConnection {
	return &KmsEkmConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KmsEkmConnection)(nil)

// KmsEkmConnection represents the Terraform resource google_kms_ekm_connection.
type KmsEkmConnection struct {
	Name      string
	Args      KmsEkmConnectionArgs
	state     *kmsEkmConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [KmsEkmConnection].
func (kec *KmsEkmConnection) Type() string {
	return "google_kms_ekm_connection"
}

// LocalName returns the local name for [KmsEkmConnection].
func (kec *KmsEkmConnection) LocalName() string {
	return kec.Name
}

// Configuration returns the configuration (args) for [KmsEkmConnection].
func (kec *KmsEkmConnection) Configuration() interface{} {
	return kec.Args
}

// DependOn is used for other resources to depend on [KmsEkmConnection].
func (kec *KmsEkmConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(kec)
}

// Dependencies returns the list of resources [KmsEkmConnection] depends_on.
func (kec *KmsEkmConnection) Dependencies() terra.Dependencies {
	return kec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [KmsEkmConnection].
func (kec *KmsEkmConnection) LifecycleManagement() *terra.Lifecycle {
	return kec.Lifecycle
}

// Attributes returns the attributes for [KmsEkmConnection].
func (kec *KmsEkmConnection) Attributes() kmsEkmConnectionAttributes {
	return kmsEkmConnectionAttributes{ref: terra.ReferenceResource(kec)}
}

// ImportState imports the given attribute values into [KmsEkmConnection]'s state.
func (kec *KmsEkmConnection) ImportState(av io.Reader) error {
	kec.state = &kmsEkmConnectionState{}
	if err := json.NewDecoder(av).Decode(kec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kec.Type(), kec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [KmsEkmConnection] has state.
func (kec *KmsEkmConnection) State() (*kmsEkmConnectionState, bool) {
	return kec.state, kec.state != nil
}

// StateMust returns the state for [KmsEkmConnection]. Panics if the state is nil.
func (kec *KmsEkmConnection) StateMust() *kmsEkmConnectionState {
	if kec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kec.Type(), kec.LocalName()))
	}
	return kec.state
}

// KmsEkmConnectionArgs contains the configurations for google_kms_ekm_connection.
type KmsEkmConnectionArgs struct {
	// CryptoSpacePath: string, optional
	CryptoSpacePath terra.StringValue `hcl:"crypto_space_path,attr"`
	// Etag: string, optional
	Etag terra.StringValue `hcl:"etag,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyManagementMode: string, optional
	KeyManagementMode terra.StringValue `hcl:"key_management_mode,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceResolvers: min=1
	ServiceResolvers []kmsekmconnection.ServiceResolvers `hcl:"service_resolvers,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *kmsekmconnection.Timeouts `hcl:"timeouts,block"`
}
type kmsEkmConnectionAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_kms_ekm_connection.
func (kec kmsEkmConnectionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(kec.ref.Append("create_time"))
}

// CryptoSpacePath returns a reference to field crypto_space_path of google_kms_ekm_connection.
func (kec kmsEkmConnectionAttributes) CryptoSpacePath() terra.StringValue {
	return terra.ReferenceAsString(kec.ref.Append("crypto_space_path"))
}

// Etag returns a reference to field etag of google_kms_ekm_connection.
func (kec kmsEkmConnectionAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(kec.ref.Append("etag"))
}

// Id returns a reference to field id of google_kms_ekm_connection.
func (kec kmsEkmConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(kec.ref.Append("id"))
}

// KeyManagementMode returns a reference to field key_management_mode of google_kms_ekm_connection.
func (kec kmsEkmConnectionAttributes) KeyManagementMode() terra.StringValue {
	return terra.ReferenceAsString(kec.ref.Append("key_management_mode"))
}

// Location returns a reference to field location of google_kms_ekm_connection.
func (kec kmsEkmConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(kec.ref.Append("location"))
}

// Name returns a reference to field name of google_kms_ekm_connection.
func (kec kmsEkmConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(kec.ref.Append("name"))
}

// Project returns a reference to field project of google_kms_ekm_connection.
func (kec kmsEkmConnectionAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(kec.ref.Append("project"))
}

func (kec kmsEkmConnectionAttributes) ServiceResolvers() terra.ListValue[kmsekmconnection.ServiceResolversAttributes] {
	return terra.ReferenceAsList[kmsekmconnection.ServiceResolversAttributes](kec.ref.Append("service_resolvers"))
}

func (kec kmsEkmConnectionAttributes) Timeouts() kmsekmconnection.TimeoutsAttributes {
	return terra.ReferenceAsSingle[kmsekmconnection.TimeoutsAttributes](kec.ref.Append("timeouts"))
}

type kmsEkmConnectionState struct {
	CreateTime        string                                   `json:"create_time"`
	CryptoSpacePath   string                                   `json:"crypto_space_path"`
	Etag              string                                   `json:"etag"`
	Id                string                                   `json:"id"`
	KeyManagementMode string                                   `json:"key_management_mode"`
	Location          string                                   `json:"location"`
	Name              string                                   `json:"name"`
	Project           string                                   `json:"project"`
	ServiceResolvers  []kmsekmconnection.ServiceResolversState `json:"service_resolvers"`
	Timeouts          *kmsekmconnection.TimeoutsState          `json:"timeouts"`
}
