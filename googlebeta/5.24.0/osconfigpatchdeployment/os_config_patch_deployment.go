// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package osconfigpatchdeployment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type InstanceFilter struct {
	// All: bool, optional
	All terra.BoolValue `hcl:"all,attr"`
	// InstanceNamePrefixes: list of string, optional
	InstanceNamePrefixes terra.ListValue[terra.StringValue] `hcl:"instance_name_prefixes,attr"`
	// Instances: list of string, optional
	Instances terra.ListValue[terra.StringValue] `hcl:"instances,attr"`
	// Zones: list of string, optional
	Zones terra.ListValue[terra.StringValue] `hcl:"zones,attr"`
	// GroupLabels: min=0
	GroupLabels []GroupLabels `hcl:"group_labels,block" validate:"min=0"`
}

type GroupLabels struct {
	// Labels: map of string, required
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr" validate:"required"`
}

type OneTimeSchedule struct {
	// ExecuteTime: string, required
	ExecuteTime terra.StringValue `hcl:"execute_time,attr" validate:"required"`
}

type PatchConfig struct {
	// MigInstancesAllowed: bool, optional
	MigInstancesAllowed terra.BoolValue `hcl:"mig_instances_allowed,attr"`
	// RebootConfig: string, optional
	RebootConfig terra.StringValue `hcl:"reboot_config,attr"`
	// Apt: optional
	Apt *Apt `hcl:"apt,block"`
	// Goo: optional
	Goo *Goo `hcl:"goo,block"`
	// PostStep: optional
	PostStep *PostStep `hcl:"post_step,block"`
	// PreStep: optional
	PreStep *PreStep `hcl:"pre_step,block"`
	// WindowsUpdate: optional
	WindowsUpdate *WindowsUpdate `hcl:"windows_update,block"`
	// Yum: optional
	Yum *Yum `hcl:"yum,block"`
	// Zypper: optional
	Zypper *Zypper `hcl:"zypper,block"`
}

type Apt struct {
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// ExclusivePackages: list of string, optional
	ExclusivePackages terra.ListValue[terra.StringValue] `hcl:"exclusive_packages,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type Goo struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type PostStep struct {
	// PostStepLinuxExecStepConfig: optional
	LinuxExecStepConfig *PostStepLinuxExecStepConfig `hcl:"linux_exec_step_config,block"`
	// PostStepWindowsExecStepConfig: optional
	WindowsExecStepConfig *PostStepWindowsExecStepConfig `hcl:"windows_exec_step_config,block"`
}

type PostStepLinuxExecStepConfig struct {
	// AllowedSuccessCodes: list of number, optional
	AllowedSuccessCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_success_codes,attr"`
	// Interpreter: string, optional
	Interpreter terra.StringValue `hcl:"interpreter,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// PostStepLinuxExecStepConfigGcsObject: optional
	GcsObject *PostStepLinuxExecStepConfigGcsObject `hcl:"gcs_object,block"`
}

type PostStepLinuxExecStepConfigGcsObject struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// GenerationNumber: string, required
	GenerationNumber terra.StringValue `hcl:"generation_number,attr" validate:"required"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type PostStepWindowsExecStepConfig struct {
	// AllowedSuccessCodes: list of number, optional
	AllowedSuccessCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_success_codes,attr"`
	// Interpreter: string, optional
	Interpreter terra.StringValue `hcl:"interpreter,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// PostStepWindowsExecStepConfigGcsObject: optional
	GcsObject *PostStepWindowsExecStepConfigGcsObject `hcl:"gcs_object,block"`
}

type PostStepWindowsExecStepConfigGcsObject struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// GenerationNumber: string, required
	GenerationNumber terra.StringValue `hcl:"generation_number,attr" validate:"required"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type PreStep struct {
	// PreStepLinuxExecStepConfig: optional
	LinuxExecStepConfig *PreStepLinuxExecStepConfig `hcl:"linux_exec_step_config,block"`
	// PreStepWindowsExecStepConfig: optional
	WindowsExecStepConfig *PreStepWindowsExecStepConfig `hcl:"windows_exec_step_config,block"`
}

type PreStepLinuxExecStepConfig struct {
	// AllowedSuccessCodes: list of number, optional
	AllowedSuccessCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_success_codes,attr"`
	// Interpreter: string, optional
	Interpreter terra.StringValue `hcl:"interpreter,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// PreStepLinuxExecStepConfigGcsObject: optional
	GcsObject *PreStepLinuxExecStepConfigGcsObject `hcl:"gcs_object,block"`
}

type PreStepLinuxExecStepConfigGcsObject struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// GenerationNumber: string, required
	GenerationNumber terra.StringValue `hcl:"generation_number,attr" validate:"required"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type PreStepWindowsExecStepConfig struct {
	// AllowedSuccessCodes: list of number, optional
	AllowedSuccessCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_success_codes,attr"`
	// Interpreter: string, optional
	Interpreter terra.StringValue `hcl:"interpreter,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// PreStepWindowsExecStepConfigGcsObject: optional
	GcsObject *PreStepWindowsExecStepConfigGcsObject `hcl:"gcs_object,block"`
}

type PreStepWindowsExecStepConfigGcsObject struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// GenerationNumber: string, required
	GenerationNumber terra.StringValue `hcl:"generation_number,attr" validate:"required"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type WindowsUpdate struct {
	// Classifications: list of string, optional
	Classifications terra.ListValue[terra.StringValue] `hcl:"classifications,attr"`
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// ExclusivePatches: list of string, optional
	ExclusivePatches terra.ListValue[terra.StringValue] `hcl:"exclusive_patches,attr"`
}

type Yum struct {
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// ExclusivePackages: list of string, optional
	ExclusivePackages terra.ListValue[terra.StringValue] `hcl:"exclusive_packages,attr"`
	// Minimal: bool, optional
	Minimal terra.BoolValue `hcl:"minimal,attr"`
	// Security: bool, optional
	Security terra.BoolValue `hcl:"security,attr"`
}

type Zypper struct {
	// Categories: list of string, optional
	Categories terra.ListValue[terra.StringValue] `hcl:"categories,attr"`
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// ExclusivePatches: list of string, optional
	ExclusivePatches terra.ListValue[terra.StringValue] `hcl:"exclusive_patches,attr"`
	// Severities: list of string, optional
	Severities terra.ListValue[terra.StringValue] `hcl:"severities,attr"`
	// WithOptional: bool, optional
	WithOptional terra.BoolValue `hcl:"with_optional,attr"`
	// WithUpdate: bool, optional
	WithUpdate terra.BoolValue `hcl:"with_update,attr"`
}

type RecurringSchedule struct {
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// Monthly: optional
	Monthly *Monthly `hcl:"monthly,block"`
	// TimeOfDay: required
	TimeOfDay *TimeOfDay `hcl:"time_of_day,block" validate:"required"`
	// TimeZone: required
	TimeZone *TimeZone `hcl:"time_zone,block" validate:"required"`
	// Weekly: optional
	Weekly *Weekly `hcl:"weekly,block"`
}

type Monthly struct {
	// MonthDay: number, optional
	MonthDay terra.NumberValue `hcl:"month_day,attr"`
	// WeekDayOfMonth: optional
	WeekDayOfMonth *WeekDayOfMonth `hcl:"week_day_of_month,block"`
}

type WeekDayOfMonth struct {
	// DayOfWeek: string, required
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr" validate:"required"`
	// DayOffset: number, optional
	DayOffset terra.NumberValue `hcl:"day_offset,attr"`
	// WeekOrdinal: number, required
	WeekOrdinal terra.NumberValue `hcl:"week_ordinal,attr" validate:"required"`
}

type TimeOfDay struct {
	// Hours: number, optional
	Hours terra.NumberValue `hcl:"hours,attr"`
	// Minutes: number, optional
	Minutes terra.NumberValue `hcl:"minutes,attr"`
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: number, optional
	Seconds terra.NumberValue `hcl:"seconds,attr"`
}

type TimeZone struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type Weekly struct {
	// DayOfWeek: string, required
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr" validate:"required"`
}

type Rollout struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
	// DisruptionBudget: required
	DisruptionBudget *DisruptionBudget `hcl:"disruption_budget,block" validate:"required"`
}

type DisruptionBudget struct {
	// Fixed: number, optional
	Fixed terra.NumberValue `hcl:"fixed,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type InstanceFilterAttributes struct {
	ref terra.Reference
}

func (_if InstanceFilterAttributes) InternalRef() (terra.Reference, error) {
	return _if.ref, nil
}

func (_if InstanceFilterAttributes) InternalWithRef(ref terra.Reference) InstanceFilterAttributes {
	return InstanceFilterAttributes{ref: ref}
}

func (_if InstanceFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _if.ref.InternalTokens()
}

func (_if InstanceFilterAttributes) All() terra.BoolValue {
	return terra.ReferenceAsBool(_if.ref.Append("all"))
}

func (_if InstanceFilterAttributes) InstanceNamePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](_if.ref.Append("instance_name_prefixes"))
}

func (_if InstanceFilterAttributes) Instances() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](_if.ref.Append("instances"))
}

func (_if InstanceFilterAttributes) Zones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](_if.ref.Append("zones"))
}

func (_if InstanceFilterAttributes) GroupLabels() terra.ListValue[GroupLabelsAttributes] {
	return terra.ReferenceAsList[GroupLabelsAttributes](_if.ref.Append("group_labels"))
}

type GroupLabelsAttributes struct {
	ref terra.Reference
}

func (gl GroupLabelsAttributes) InternalRef() (terra.Reference, error) {
	return gl.ref, nil
}

func (gl GroupLabelsAttributes) InternalWithRef(ref terra.Reference) GroupLabelsAttributes {
	return GroupLabelsAttributes{ref: ref}
}

func (gl GroupLabelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gl.ref.InternalTokens()
}

func (gl GroupLabelsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gl.ref.Append("labels"))
}

type OneTimeScheduleAttributes struct {
	ref terra.Reference
}

func (ots OneTimeScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ots.ref, nil
}

func (ots OneTimeScheduleAttributes) InternalWithRef(ref terra.Reference) OneTimeScheduleAttributes {
	return OneTimeScheduleAttributes{ref: ref}
}

func (ots OneTimeScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ots.ref.InternalTokens()
}

func (ots OneTimeScheduleAttributes) ExecuteTime() terra.StringValue {
	return terra.ReferenceAsString(ots.ref.Append("execute_time"))
}

type PatchConfigAttributes struct {
	ref terra.Reference
}

func (pc PatchConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PatchConfigAttributes) InternalWithRef(ref terra.Reference) PatchConfigAttributes {
	return PatchConfigAttributes{ref: ref}
}

func (pc PatchConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PatchConfigAttributes) MigInstancesAllowed() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("mig_instances_allowed"))
}

func (pc PatchConfigAttributes) RebootConfig() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("reboot_config"))
}

func (pc PatchConfigAttributes) Apt() terra.ListValue[AptAttributes] {
	return terra.ReferenceAsList[AptAttributes](pc.ref.Append("apt"))
}

func (pc PatchConfigAttributes) Goo() terra.ListValue[GooAttributes] {
	return terra.ReferenceAsList[GooAttributes](pc.ref.Append("goo"))
}

func (pc PatchConfigAttributes) PostStep() terra.ListValue[PostStepAttributes] {
	return terra.ReferenceAsList[PostStepAttributes](pc.ref.Append("post_step"))
}

func (pc PatchConfigAttributes) PreStep() terra.ListValue[PreStepAttributes] {
	return terra.ReferenceAsList[PreStepAttributes](pc.ref.Append("pre_step"))
}

func (pc PatchConfigAttributes) WindowsUpdate() terra.ListValue[WindowsUpdateAttributes] {
	return terra.ReferenceAsList[WindowsUpdateAttributes](pc.ref.Append("windows_update"))
}

func (pc PatchConfigAttributes) Yum() terra.ListValue[YumAttributes] {
	return terra.ReferenceAsList[YumAttributes](pc.ref.Append("yum"))
}

func (pc PatchConfigAttributes) Zypper() terra.ListValue[ZypperAttributes] {
	return terra.ReferenceAsList[ZypperAttributes](pc.ref.Append("zypper"))
}

type AptAttributes struct {
	ref terra.Reference
}

func (a AptAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AptAttributes) InternalWithRef(ref terra.Reference) AptAttributes {
	return AptAttributes{ref: ref}
}

func (a AptAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AptAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("excludes"))
}

func (a AptAttributes) ExclusivePackages() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("exclusive_packages"))
}

func (a AptAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

type GooAttributes struct {
	ref terra.Reference
}

func (g GooAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GooAttributes) InternalWithRef(ref terra.Reference) GooAttributes {
	return GooAttributes{ref: ref}
}

func (g GooAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GooAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("enabled"))
}

type PostStepAttributes struct {
	ref terra.Reference
}

func (ps PostStepAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps PostStepAttributes) InternalWithRef(ref terra.Reference) PostStepAttributes {
	return PostStepAttributes{ref: ref}
}

func (ps PostStepAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps PostStepAttributes) LinuxExecStepConfig() terra.ListValue[PostStepLinuxExecStepConfigAttributes] {
	return terra.ReferenceAsList[PostStepLinuxExecStepConfigAttributes](ps.ref.Append("linux_exec_step_config"))
}

func (ps PostStepAttributes) WindowsExecStepConfig() terra.ListValue[PostStepWindowsExecStepConfigAttributes] {
	return terra.ReferenceAsList[PostStepWindowsExecStepConfigAttributes](ps.ref.Append("windows_exec_step_config"))
}

type PostStepLinuxExecStepConfigAttributes struct {
	ref terra.Reference
}

func (lesc PostStepLinuxExecStepConfigAttributes) InternalRef() (terra.Reference, error) {
	return lesc.ref, nil
}

func (lesc PostStepLinuxExecStepConfigAttributes) InternalWithRef(ref terra.Reference) PostStepLinuxExecStepConfigAttributes {
	return PostStepLinuxExecStepConfigAttributes{ref: ref}
}

func (lesc PostStepLinuxExecStepConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lesc.ref.InternalTokens()
}

func (lesc PostStepLinuxExecStepConfigAttributes) AllowedSuccessCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](lesc.ref.Append("allowed_success_codes"))
}

func (lesc PostStepLinuxExecStepConfigAttributes) Interpreter() terra.StringValue {
	return terra.ReferenceAsString(lesc.ref.Append("interpreter"))
}

func (lesc PostStepLinuxExecStepConfigAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(lesc.ref.Append("local_path"))
}

func (lesc PostStepLinuxExecStepConfigAttributes) GcsObject() terra.ListValue[PostStepLinuxExecStepConfigGcsObjectAttributes] {
	return terra.ReferenceAsList[PostStepLinuxExecStepConfigGcsObjectAttributes](lesc.ref.Append("gcs_object"))
}

type PostStepLinuxExecStepConfigGcsObjectAttributes struct {
	ref terra.Reference
}

func (_go PostStepLinuxExecStepConfigGcsObjectAttributes) InternalRef() (terra.Reference, error) {
	return _go.ref, nil
}

func (_go PostStepLinuxExecStepConfigGcsObjectAttributes) InternalWithRef(ref terra.Reference) PostStepLinuxExecStepConfigGcsObjectAttributes {
	return PostStepLinuxExecStepConfigGcsObjectAttributes{ref: ref}
}

func (_go PostStepLinuxExecStepConfigGcsObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _go.ref.InternalTokens()
}

func (_go PostStepLinuxExecStepConfigGcsObjectAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("bucket"))
}

func (_go PostStepLinuxExecStepConfigGcsObjectAttributes) GenerationNumber() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("generation_number"))
}

func (_go PostStepLinuxExecStepConfigGcsObjectAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("object"))
}

type PostStepWindowsExecStepConfigAttributes struct {
	ref terra.Reference
}

func (wesc PostStepWindowsExecStepConfigAttributes) InternalRef() (terra.Reference, error) {
	return wesc.ref, nil
}

func (wesc PostStepWindowsExecStepConfigAttributes) InternalWithRef(ref terra.Reference) PostStepWindowsExecStepConfigAttributes {
	return PostStepWindowsExecStepConfigAttributes{ref: ref}
}

func (wesc PostStepWindowsExecStepConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wesc.ref.InternalTokens()
}

func (wesc PostStepWindowsExecStepConfigAttributes) AllowedSuccessCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](wesc.ref.Append("allowed_success_codes"))
}

func (wesc PostStepWindowsExecStepConfigAttributes) Interpreter() terra.StringValue {
	return terra.ReferenceAsString(wesc.ref.Append("interpreter"))
}

func (wesc PostStepWindowsExecStepConfigAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(wesc.ref.Append("local_path"))
}

func (wesc PostStepWindowsExecStepConfigAttributes) GcsObject() terra.ListValue[PostStepWindowsExecStepConfigGcsObjectAttributes] {
	return terra.ReferenceAsList[PostStepWindowsExecStepConfigGcsObjectAttributes](wesc.ref.Append("gcs_object"))
}

type PostStepWindowsExecStepConfigGcsObjectAttributes struct {
	ref terra.Reference
}

func (_go PostStepWindowsExecStepConfigGcsObjectAttributes) InternalRef() (terra.Reference, error) {
	return _go.ref, nil
}

func (_go PostStepWindowsExecStepConfigGcsObjectAttributes) InternalWithRef(ref terra.Reference) PostStepWindowsExecStepConfigGcsObjectAttributes {
	return PostStepWindowsExecStepConfigGcsObjectAttributes{ref: ref}
}

func (_go PostStepWindowsExecStepConfigGcsObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _go.ref.InternalTokens()
}

func (_go PostStepWindowsExecStepConfigGcsObjectAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("bucket"))
}

func (_go PostStepWindowsExecStepConfigGcsObjectAttributes) GenerationNumber() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("generation_number"))
}

func (_go PostStepWindowsExecStepConfigGcsObjectAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("object"))
}

type PreStepAttributes struct {
	ref terra.Reference
}

func (ps PreStepAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps PreStepAttributes) InternalWithRef(ref terra.Reference) PreStepAttributes {
	return PreStepAttributes{ref: ref}
}

func (ps PreStepAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps PreStepAttributes) LinuxExecStepConfig() terra.ListValue[PreStepLinuxExecStepConfigAttributes] {
	return terra.ReferenceAsList[PreStepLinuxExecStepConfigAttributes](ps.ref.Append("linux_exec_step_config"))
}

func (ps PreStepAttributes) WindowsExecStepConfig() terra.ListValue[PreStepWindowsExecStepConfigAttributes] {
	return terra.ReferenceAsList[PreStepWindowsExecStepConfigAttributes](ps.ref.Append("windows_exec_step_config"))
}

type PreStepLinuxExecStepConfigAttributes struct {
	ref terra.Reference
}

func (lesc PreStepLinuxExecStepConfigAttributes) InternalRef() (terra.Reference, error) {
	return lesc.ref, nil
}

func (lesc PreStepLinuxExecStepConfigAttributes) InternalWithRef(ref terra.Reference) PreStepLinuxExecStepConfigAttributes {
	return PreStepLinuxExecStepConfigAttributes{ref: ref}
}

func (lesc PreStepLinuxExecStepConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lesc.ref.InternalTokens()
}

func (lesc PreStepLinuxExecStepConfigAttributes) AllowedSuccessCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](lesc.ref.Append("allowed_success_codes"))
}

func (lesc PreStepLinuxExecStepConfigAttributes) Interpreter() terra.StringValue {
	return terra.ReferenceAsString(lesc.ref.Append("interpreter"))
}

func (lesc PreStepLinuxExecStepConfigAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(lesc.ref.Append("local_path"))
}

func (lesc PreStepLinuxExecStepConfigAttributes) GcsObject() terra.ListValue[PreStepLinuxExecStepConfigGcsObjectAttributes] {
	return terra.ReferenceAsList[PreStepLinuxExecStepConfigGcsObjectAttributes](lesc.ref.Append("gcs_object"))
}

type PreStepLinuxExecStepConfigGcsObjectAttributes struct {
	ref terra.Reference
}

func (_go PreStepLinuxExecStepConfigGcsObjectAttributes) InternalRef() (terra.Reference, error) {
	return _go.ref, nil
}

func (_go PreStepLinuxExecStepConfigGcsObjectAttributes) InternalWithRef(ref terra.Reference) PreStepLinuxExecStepConfigGcsObjectAttributes {
	return PreStepLinuxExecStepConfigGcsObjectAttributes{ref: ref}
}

func (_go PreStepLinuxExecStepConfigGcsObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _go.ref.InternalTokens()
}

func (_go PreStepLinuxExecStepConfigGcsObjectAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("bucket"))
}

func (_go PreStepLinuxExecStepConfigGcsObjectAttributes) GenerationNumber() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("generation_number"))
}

func (_go PreStepLinuxExecStepConfigGcsObjectAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("object"))
}

type PreStepWindowsExecStepConfigAttributes struct {
	ref terra.Reference
}

func (wesc PreStepWindowsExecStepConfigAttributes) InternalRef() (terra.Reference, error) {
	return wesc.ref, nil
}

func (wesc PreStepWindowsExecStepConfigAttributes) InternalWithRef(ref terra.Reference) PreStepWindowsExecStepConfigAttributes {
	return PreStepWindowsExecStepConfigAttributes{ref: ref}
}

func (wesc PreStepWindowsExecStepConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wesc.ref.InternalTokens()
}

func (wesc PreStepWindowsExecStepConfigAttributes) AllowedSuccessCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](wesc.ref.Append("allowed_success_codes"))
}

func (wesc PreStepWindowsExecStepConfigAttributes) Interpreter() terra.StringValue {
	return terra.ReferenceAsString(wesc.ref.Append("interpreter"))
}

func (wesc PreStepWindowsExecStepConfigAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(wesc.ref.Append("local_path"))
}

func (wesc PreStepWindowsExecStepConfigAttributes) GcsObject() terra.ListValue[PreStepWindowsExecStepConfigGcsObjectAttributes] {
	return terra.ReferenceAsList[PreStepWindowsExecStepConfigGcsObjectAttributes](wesc.ref.Append("gcs_object"))
}

type PreStepWindowsExecStepConfigGcsObjectAttributes struct {
	ref terra.Reference
}

func (_go PreStepWindowsExecStepConfigGcsObjectAttributes) InternalRef() (terra.Reference, error) {
	return _go.ref, nil
}

func (_go PreStepWindowsExecStepConfigGcsObjectAttributes) InternalWithRef(ref terra.Reference) PreStepWindowsExecStepConfigGcsObjectAttributes {
	return PreStepWindowsExecStepConfigGcsObjectAttributes{ref: ref}
}

func (_go PreStepWindowsExecStepConfigGcsObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _go.ref.InternalTokens()
}

func (_go PreStepWindowsExecStepConfigGcsObjectAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("bucket"))
}

func (_go PreStepWindowsExecStepConfigGcsObjectAttributes) GenerationNumber() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("generation_number"))
}

func (_go PreStepWindowsExecStepConfigGcsObjectAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("object"))
}

type WindowsUpdateAttributes struct {
	ref terra.Reference
}

func (wu WindowsUpdateAttributes) InternalRef() (terra.Reference, error) {
	return wu.ref, nil
}

func (wu WindowsUpdateAttributes) InternalWithRef(ref terra.Reference) WindowsUpdateAttributes {
	return WindowsUpdateAttributes{ref: ref}
}

func (wu WindowsUpdateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wu.ref.InternalTokens()
}

func (wu WindowsUpdateAttributes) Classifications() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wu.ref.Append("classifications"))
}

func (wu WindowsUpdateAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wu.ref.Append("excludes"))
}

func (wu WindowsUpdateAttributes) ExclusivePatches() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wu.ref.Append("exclusive_patches"))
}

type YumAttributes struct {
	ref terra.Reference
}

func (y YumAttributes) InternalRef() (terra.Reference, error) {
	return y.ref, nil
}

func (y YumAttributes) InternalWithRef(ref terra.Reference) YumAttributes {
	return YumAttributes{ref: ref}
}

func (y YumAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return y.ref.InternalTokens()
}

func (y YumAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](y.ref.Append("excludes"))
}

func (y YumAttributes) ExclusivePackages() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](y.ref.Append("exclusive_packages"))
}

func (y YumAttributes) Minimal() terra.BoolValue {
	return terra.ReferenceAsBool(y.ref.Append("minimal"))
}

func (y YumAttributes) Security() terra.BoolValue {
	return terra.ReferenceAsBool(y.ref.Append("security"))
}

type ZypperAttributes struct {
	ref terra.Reference
}

func (z ZypperAttributes) InternalRef() (terra.Reference, error) {
	return z.ref, nil
}

func (z ZypperAttributes) InternalWithRef(ref terra.Reference) ZypperAttributes {
	return ZypperAttributes{ref: ref}
}

func (z ZypperAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return z.ref.InternalTokens()
}

func (z ZypperAttributes) Categories() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](z.ref.Append("categories"))
}

func (z ZypperAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](z.ref.Append("excludes"))
}

func (z ZypperAttributes) ExclusivePatches() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](z.ref.Append("exclusive_patches"))
}

func (z ZypperAttributes) Severities() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](z.ref.Append("severities"))
}

func (z ZypperAttributes) WithOptional() terra.BoolValue {
	return terra.ReferenceAsBool(z.ref.Append("with_optional"))
}

func (z ZypperAttributes) WithUpdate() terra.BoolValue {
	return terra.ReferenceAsBool(z.ref.Append("with_update"))
}

type RecurringScheduleAttributes struct {
	ref terra.Reference
}

func (rs RecurringScheduleAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RecurringScheduleAttributes) InternalWithRef(ref terra.Reference) RecurringScheduleAttributes {
	return RecurringScheduleAttributes{ref: ref}
}

func (rs RecurringScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RecurringScheduleAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("end_time"))
}

func (rs RecurringScheduleAttributes) LastExecuteTime() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("last_execute_time"))
}

func (rs RecurringScheduleAttributes) NextExecuteTime() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("next_execute_time"))
}

func (rs RecurringScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("start_time"))
}

func (rs RecurringScheduleAttributes) Monthly() terra.ListValue[MonthlyAttributes] {
	return terra.ReferenceAsList[MonthlyAttributes](rs.ref.Append("monthly"))
}

func (rs RecurringScheduleAttributes) TimeOfDay() terra.ListValue[TimeOfDayAttributes] {
	return terra.ReferenceAsList[TimeOfDayAttributes](rs.ref.Append("time_of_day"))
}

func (rs RecurringScheduleAttributes) TimeZone() terra.ListValue[TimeZoneAttributes] {
	return terra.ReferenceAsList[TimeZoneAttributes](rs.ref.Append("time_zone"))
}

func (rs RecurringScheduleAttributes) Weekly() terra.ListValue[WeeklyAttributes] {
	return terra.ReferenceAsList[WeeklyAttributes](rs.ref.Append("weekly"))
}

type MonthlyAttributes struct {
	ref terra.Reference
}

func (m MonthlyAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MonthlyAttributes) InternalWithRef(ref terra.Reference) MonthlyAttributes {
	return MonthlyAttributes{ref: ref}
}

func (m MonthlyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MonthlyAttributes) MonthDay() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("month_day"))
}

func (m MonthlyAttributes) WeekDayOfMonth() terra.ListValue[WeekDayOfMonthAttributes] {
	return terra.ReferenceAsList[WeekDayOfMonthAttributes](m.ref.Append("week_day_of_month"))
}

type WeekDayOfMonthAttributes struct {
	ref terra.Reference
}

func (wdom WeekDayOfMonthAttributes) InternalRef() (terra.Reference, error) {
	return wdom.ref, nil
}

func (wdom WeekDayOfMonthAttributes) InternalWithRef(ref terra.Reference) WeekDayOfMonthAttributes {
	return WeekDayOfMonthAttributes{ref: ref}
}

func (wdom WeekDayOfMonthAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wdom.ref.InternalTokens()
}

func (wdom WeekDayOfMonthAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(wdom.ref.Append("day_of_week"))
}

func (wdom WeekDayOfMonthAttributes) DayOffset() terra.NumberValue {
	return terra.ReferenceAsNumber(wdom.ref.Append("day_offset"))
}

func (wdom WeekDayOfMonthAttributes) WeekOrdinal() terra.NumberValue {
	return terra.ReferenceAsNumber(wdom.ref.Append("week_ordinal"))
}

type TimeOfDayAttributes struct {
	ref terra.Reference
}

func (tod TimeOfDayAttributes) InternalRef() (terra.Reference, error) {
	return tod.ref, nil
}

func (tod TimeOfDayAttributes) InternalWithRef(ref terra.Reference) TimeOfDayAttributes {
	return TimeOfDayAttributes{ref: ref}
}

func (tod TimeOfDayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tod.ref.InternalTokens()
}

func (tod TimeOfDayAttributes) Hours() terra.NumberValue {
	return terra.ReferenceAsNumber(tod.ref.Append("hours"))
}

func (tod TimeOfDayAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(tod.ref.Append("minutes"))
}

func (tod TimeOfDayAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(tod.ref.Append("nanos"))
}

func (tod TimeOfDayAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceAsNumber(tod.ref.Append("seconds"))
}

type TimeZoneAttributes struct {
	ref terra.Reference
}

func (tz TimeZoneAttributes) InternalRef() (terra.Reference, error) {
	return tz.ref, nil
}

func (tz TimeZoneAttributes) InternalWithRef(ref terra.Reference) TimeZoneAttributes {
	return TimeZoneAttributes{ref: ref}
}

func (tz TimeZoneAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tz.ref.InternalTokens()
}

func (tz TimeZoneAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tz.ref.Append("id"))
}

func (tz TimeZoneAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(tz.ref.Append("version"))
}

type WeeklyAttributes struct {
	ref terra.Reference
}

func (w WeeklyAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w WeeklyAttributes) InternalWithRef(ref terra.Reference) WeeklyAttributes {
	return WeeklyAttributes{ref: ref}
}

func (w WeeklyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w WeeklyAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("day_of_week"))
}

type RolloutAttributes struct {
	ref terra.Reference
}

func (r RolloutAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RolloutAttributes) InternalWithRef(ref terra.Reference) RolloutAttributes {
	return RolloutAttributes{ref: ref}
}

func (r RolloutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RolloutAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("mode"))
}

func (r RolloutAttributes) DisruptionBudget() terra.ListValue[DisruptionBudgetAttributes] {
	return terra.ReferenceAsList[DisruptionBudgetAttributes](r.ref.Append("disruption_budget"))
}

type DisruptionBudgetAttributes struct {
	ref terra.Reference
}

func (db DisruptionBudgetAttributes) InternalRef() (terra.Reference, error) {
	return db.ref, nil
}

func (db DisruptionBudgetAttributes) InternalWithRef(ref terra.Reference) DisruptionBudgetAttributes {
	return DisruptionBudgetAttributes{ref: ref}
}

func (db DisruptionBudgetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return db.ref.InternalTokens()
}

func (db DisruptionBudgetAttributes) Fixed() terra.NumberValue {
	return terra.ReferenceAsNumber(db.ref.Append("fixed"))
}

func (db DisruptionBudgetAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(db.ref.Append("percentage"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type InstanceFilterState struct {
	All                  bool               `json:"all"`
	InstanceNamePrefixes []string           `json:"instance_name_prefixes"`
	Instances            []string           `json:"instances"`
	Zones                []string           `json:"zones"`
	GroupLabels          []GroupLabelsState `json:"group_labels"`
}

type GroupLabelsState struct {
	Labels map[string]string `json:"labels"`
}

type OneTimeScheduleState struct {
	ExecuteTime string `json:"execute_time"`
}

type PatchConfigState struct {
	MigInstancesAllowed bool                 `json:"mig_instances_allowed"`
	RebootConfig        string               `json:"reboot_config"`
	Apt                 []AptState           `json:"apt"`
	Goo                 []GooState           `json:"goo"`
	PostStep            []PostStepState      `json:"post_step"`
	PreStep             []PreStepState       `json:"pre_step"`
	WindowsUpdate       []WindowsUpdateState `json:"windows_update"`
	Yum                 []YumState           `json:"yum"`
	Zypper              []ZypperState        `json:"zypper"`
}

type AptState struct {
	Excludes          []string `json:"excludes"`
	ExclusivePackages []string `json:"exclusive_packages"`
	Type              string   `json:"type"`
}

type GooState struct {
	Enabled bool `json:"enabled"`
}

type PostStepState struct {
	LinuxExecStepConfig   []PostStepLinuxExecStepConfigState   `json:"linux_exec_step_config"`
	WindowsExecStepConfig []PostStepWindowsExecStepConfigState `json:"windows_exec_step_config"`
}

type PostStepLinuxExecStepConfigState struct {
	AllowedSuccessCodes []float64                                   `json:"allowed_success_codes"`
	Interpreter         string                                      `json:"interpreter"`
	LocalPath           string                                      `json:"local_path"`
	GcsObject           []PostStepLinuxExecStepConfigGcsObjectState `json:"gcs_object"`
}

type PostStepLinuxExecStepConfigGcsObjectState struct {
	Bucket           string `json:"bucket"`
	GenerationNumber string `json:"generation_number"`
	Object           string `json:"object"`
}

type PostStepWindowsExecStepConfigState struct {
	AllowedSuccessCodes []float64                                     `json:"allowed_success_codes"`
	Interpreter         string                                        `json:"interpreter"`
	LocalPath           string                                        `json:"local_path"`
	GcsObject           []PostStepWindowsExecStepConfigGcsObjectState `json:"gcs_object"`
}

type PostStepWindowsExecStepConfigGcsObjectState struct {
	Bucket           string `json:"bucket"`
	GenerationNumber string `json:"generation_number"`
	Object           string `json:"object"`
}

type PreStepState struct {
	LinuxExecStepConfig   []PreStepLinuxExecStepConfigState   `json:"linux_exec_step_config"`
	WindowsExecStepConfig []PreStepWindowsExecStepConfigState `json:"windows_exec_step_config"`
}

type PreStepLinuxExecStepConfigState struct {
	AllowedSuccessCodes []float64                                  `json:"allowed_success_codes"`
	Interpreter         string                                     `json:"interpreter"`
	LocalPath           string                                     `json:"local_path"`
	GcsObject           []PreStepLinuxExecStepConfigGcsObjectState `json:"gcs_object"`
}

type PreStepLinuxExecStepConfigGcsObjectState struct {
	Bucket           string `json:"bucket"`
	GenerationNumber string `json:"generation_number"`
	Object           string `json:"object"`
}

type PreStepWindowsExecStepConfigState struct {
	AllowedSuccessCodes []float64                                    `json:"allowed_success_codes"`
	Interpreter         string                                       `json:"interpreter"`
	LocalPath           string                                       `json:"local_path"`
	GcsObject           []PreStepWindowsExecStepConfigGcsObjectState `json:"gcs_object"`
}

type PreStepWindowsExecStepConfigGcsObjectState struct {
	Bucket           string `json:"bucket"`
	GenerationNumber string `json:"generation_number"`
	Object           string `json:"object"`
}

type WindowsUpdateState struct {
	Classifications  []string `json:"classifications"`
	Excludes         []string `json:"excludes"`
	ExclusivePatches []string `json:"exclusive_patches"`
}

type YumState struct {
	Excludes          []string `json:"excludes"`
	ExclusivePackages []string `json:"exclusive_packages"`
	Minimal           bool     `json:"minimal"`
	Security          bool     `json:"security"`
}

type ZypperState struct {
	Categories       []string `json:"categories"`
	Excludes         []string `json:"excludes"`
	ExclusivePatches []string `json:"exclusive_patches"`
	Severities       []string `json:"severities"`
	WithOptional     bool     `json:"with_optional"`
	WithUpdate       bool     `json:"with_update"`
}

type RecurringScheduleState struct {
	EndTime         string           `json:"end_time"`
	LastExecuteTime string           `json:"last_execute_time"`
	NextExecuteTime string           `json:"next_execute_time"`
	StartTime       string           `json:"start_time"`
	Monthly         []MonthlyState   `json:"monthly"`
	TimeOfDay       []TimeOfDayState `json:"time_of_day"`
	TimeZone        []TimeZoneState  `json:"time_zone"`
	Weekly          []WeeklyState    `json:"weekly"`
}

type MonthlyState struct {
	MonthDay       float64               `json:"month_day"`
	WeekDayOfMonth []WeekDayOfMonthState `json:"week_day_of_month"`
}

type WeekDayOfMonthState struct {
	DayOfWeek   string  `json:"day_of_week"`
	DayOffset   float64 `json:"day_offset"`
	WeekOrdinal float64 `json:"week_ordinal"`
}

type TimeOfDayState struct {
	Hours   float64 `json:"hours"`
	Minutes float64 `json:"minutes"`
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type TimeZoneState struct {
	Id      string `json:"id"`
	Version string `json:"version"`
}

type WeeklyState struct {
	DayOfWeek string `json:"day_of_week"`
}

type RolloutState struct {
	Mode             string                  `json:"mode"`
	DisruptionBudget []DisruptionBudgetState `json:"disruption_budget"`
}

type DisruptionBudgetState struct {
	Fixed      float64 `json:"fixed"`
	Percentage float64 `json:"percentage"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
