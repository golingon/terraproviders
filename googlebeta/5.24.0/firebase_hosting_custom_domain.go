// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	firebasehostingcustomdomain "github.com/golingon/terraproviders/googlebeta/5.24.0/firebasehostingcustomdomain"
	"io"
)

// NewFirebaseHostingCustomDomain creates a new instance of [FirebaseHostingCustomDomain].
func NewFirebaseHostingCustomDomain(name string, args FirebaseHostingCustomDomainArgs) *FirebaseHostingCustomDomain {
	return &FirebaseHostingCustomDomain{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirebaseHostingCustomDomain)(nil)

// FirebaseHostingCustomDomain represents the Terraform resource google_firebase_hosting_custom_domain.
type FirebaseHostingCustomDomain struct {
	Name      string
	Args      FirebaseHostingCustomDomainArgs
	state     *firebaseHostingCustomDomainState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [FirebaseHostingCustomDomain].
func (fhcd *FirebaseHostingCustomDomain) Type() string {
	return "google_firebase_hosting_custom_domain"
}

// LocalName returns the local name for [FirebaseHostingCustomDomain].
func (fhcd *FirebaseHostingCustomDomain) LocalName() string {
	return fhcd.Name
}

// Configuration returns the configuration (args) for [FirebaseHostingCustomDomain].
func (fhcd *FirebaseHostingCustomDomain) Configuration() interface{} {
	return fhcd.Args
}

// DependOn is used for other resources to depend on [FirebaseHostingCustomDomain].
func (fhcd *FirebaseHostingCustomDomain) DependOn() terra.Reference {
	return terra.ReferenceResource(fhcd)
}

// Dependencies returns the list of resources [FirebaseHostingCustomDomain] depends_on.
func (fhcd *FirebaseHostingCustomDomain) Dependencies() terra.Dependencies {
	return fhcd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [FirebaseHostingCustomDomain].
func (fhcd *FirebaseHostingCustomDomain) LifecycleManagement() *terra.Lifecycle {
	return fhcd.Lifecycle
}

// Attributes returns the attributes for [FirebaseHostingCustomDomain].
func (fhcd *FirebaseHostingCustomDomain) Attributes() firebaseHostingCustomDomainAttributes {
	return firebaseHostingCustomDomainAttributes{ref: terra.ReferenceResource(fhcd)}
}

// ImportState imports the given attribute values into [FirebaseHostingCustomDomain]'s state.
func (fhcd *FirebaseHostingCustomDomain) ImportState(av io.Reader) error {
	fhcd.state = &firebaseHostingCustomDomainState{}
	if err := json.NewDecoder(av).Decode(fhcd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fhcd.Type(), fhcd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [FirebaseHostingCustomDomain] has state.
func (fhcd *FirebaseHostingCustomDomain) State() (*firebaseHostingCustomDomainState, bool) {
	return fhcd.state, fhcd.state != nil
}

// StateMust returns the state for [FirebaseHostingCustomDomain]. Panics if the state is nil.
func (fhcd *FirebaseHostingCustomDomain) StateMust() *firebaseHostingCustomDomainState {
	if fhcd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fhcd.Type(), fhcd.LocalName()))
	}
	return fhcd.state
}

// FirebaseHostingCustomDomainArgs contains the configurations for google_firebase_hosting_custom_domain.
type FirebaseHostingCustomDomainArgs struct {
	// CertPreference: string, optional
	CertPreference terra.StringValue `hcl:"cert_preference,attr"`
	// CustomDomain: string, required
	CustomDomain terra.StringValue `hcl:"custom_domain,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RedirectTarget: string, optional
	RedirectTarget terra.StringValue `hcl:"redirect_target,attr"`
	// SiteId: string, required
	SiteId terra.StringValue `hcl:"site_id,attr" validate:"required"`
	// WaitDnsVerification: bool, optional
	WaitDnsVerification terra.BoolValue `hcl:"wait_dns_verification,attr"`
	// Cert: min=0
	Cert []firebasehostingcustomdomain.Cert `hcl:"cert,block" validate:"min=0"`
	// Issues: min=0
	Issues []firebasehostingcustomdomain.Issues `hcl:"issues,block" validate:"min=0"`
	// RequiredDnsUpdates: min=0
	RequiredDnsUpdates []firebasehostingcustomdomain.RequiredDnsUpdates `hcl:"required_dns_updates,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *firebasehostingcustomdomain.Timeouts `hcl:"timeouts,block"`
}
type firebaseHostingCustomDomainAttributes struct {
	ref terra.Reference
}

// CertPreference returns a reference to field cert_preference of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) CertPreference() terra.StringValue {
	return terra.ReferenceAsString(fhcd.ref.Append("cert_preference"))
}

// CreateTime returns a reference to field create_time of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(fhcd.ref.Append("create_time"))
}

// CustomDomain returns a reference to field custom_domain of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) CustomDomain() terra.StringValue {
	return terra.ReferenceAsString(fhcd.ref.Append("custom_domain"))
}

// DeleteTime returns a reference to field delete_time of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(fhcd.ref.Append("delete_time"))
}

// Etag returns a reference to field etag of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(fhcd.ref.Append("etag"))
}

// ExpireTime returns a reference to field expire_time of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(fhcd.ref.Append("expire_time"))
}

// HostState returns a reference to field host_state of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) HostState() terra.StringValue {
	return terra.ReferenceAsString(fhcd.ref.Append("host_state"))
}

// Id returns a reference to field id of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(fhcd.ref.Append("id"))
}

// Name returns a reference to field name of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fhcd.ref.Append("name"))
}

// OwnershipState returns a reference to field ownership_state of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) OwnershipState() terra.StringValue {
	return terra.ReferenceAsString(fhcd.ref.Append("ownership_state"))
}

// Project returns a reference to field project of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(fhcd.ref.Append("project"))
}

// Reconciling returns a reference to field reconciling of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceAsBool(fhcd.ref.Append("reconciling"))
}

// RedirectTarget returns a reference to field redirect_target of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) RedirectTarget() terra.StringValue {
	return terra.ReferenceAsString(fhcd.ref.Append("redirect_target"))
}

// SiteId returns a reference to field site_id of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) SiteId() terra.StringValue {
	return terra.ReferenceAsString(fhcd.ref.Append("site_id"))
}

// UpdateTime returns a reference to field update_time of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(fhcd.ref.Append("update_time"))
}

// WaitDnsVerification returns a reference to field wait_dns_verification of google_firebase_hosting_custom_domain.
func (fhcd firebaseHostingCustomDomainAttributes) WaitDnsVerification() terra.BoolValue {
	return terra.ReferenceAsBool(fhcd.ref.Append("wait_dns_verification"))
}

func (fhcd firebaseHostingCustomDomainAttributes) Cert() terra.ListValue[firebasehostingcustomdomain.CertAttributes] {
	return terra.ReferenceAsList[firebasehostingcustomdomain.CertAttributes](fhcd.ref.Append("cert"))
}

func (fhcd firebaseHostingCustomDomainAttributes) Issues() terra.ListValue[firebasehostingcustomdomain.IssuesAttributes] {
	return terra.ReferenceAsList[firebasehostingcustomdomain.IssuesAttributes](fhcd.ref.Append("issues"))
}

func (fhcd firebaseHostingCustomDomainAttributes) RequiredDnsUpdates() terra.ListValue[firebasehostingcustomdomain.RequiredDnsUpdatesAttributes] {
	return terra.ReferenceAsList[firebasehostingcustomdomain.RequiredDnsUpdatesAttributes](fhcd.ref.Append("required_dns_updates"))
}

func (fhcd firebaseHostingCustomDomainAttributes) Timeouts() firebasehostingcustomdomain.TimeoutsAttributes {
	return terra.ReferenceAsSingle[firebasehostingcustomdomain.TimeoutsAttributes](fhcd.ref.Append("timeouts"))
}

type firebaseHostingCustomDomainState struct {
	CertPreference      string                                                `json:"cert_preference"`
	CreateTime          string                                                `json:"create_time"`
	CustomDomain        string                                                `json:"custom_domain"`
	DeleteTime          string                                                `json:"delete_time"`
	Etag                string                                                `json:"etag"`
	ExpireTime          string                                                `json:"expire_time"`
	HostState           string                                                `json:"host_state"`
	Id                  string                                                `json:"id"`
	Name                string                                                `json:"name"`
	OwnershipState      string                                                `json:"ownership_state"`
	Project             string                                                `json:"project"`
	Reconciling         bool                                                  `json:"reconciling"`
	RedirectTarget      string                                                `json:"redirect_target"`
	SiteId              string                                                `json:"site_id"`
	UpdateTime          string                                                `json:"update_time"`
	WaitDnsVerification bool                                                  `json:"wait_dns_verification"`
	Cert                []firebasehostingcustomdomain.CertState               `json:"cert"`
	Issues              []firebasehostingcustomdomain.IssuesState             `json:"issues"`
	RequiredDnsUpdates  []firebasehostingcustomdomain.RequiredDnsUpdatesState `json:"required_dns_updates"`
	Timeouts            *firebasehostingcustomdomain.TimeoutsState            `json:"timeouts"`
}
