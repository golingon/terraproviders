// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	computeinstancegroupmembership "github.com/golingon/terraproviders/googlebeta/5.24.0/computeinstancegroupmembership"
	"io"
)

// NewComputeInstanceGroupMembership creates a new instance of [ComputeInstanceGroupMembership].
func NewComputeInstanceGroupMembership(name string, args ComputeInstanceGroupMembershipArgs) *ComputeInstanceGroupMembership {
	return &ComputeInstanceGroupMembership{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeInstanceGroupMembership)(nil)

// ComputeInstanceGroupMembership represents the Terraform resource google_compute_instance_group_membership.
type ComputeInstanceGroupMembership struct {
	Name      string
	Args      ComputeInstanceGroupMembershipArgs
	state     *computeInstanceGroupMembershipState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ComputeInstanceGroupMembership].
func (cigm *ComputeInstanceGroupMembership) Type() string {
	return "google_compute_instance_group_membership"
}

// LocalName returns the local name for [ComputeInstanceGroupMembership].
func (cigm *ComputeInstanceGroupMembership) LocalName() string {
	return cigm.Name
}

// Configuration returns the configuration (args) for [ComputeInstanceGroupMembership].
func (cigm *ComputeInstanceGroupMembership) Configuration() interface{} {
	return cigm.Args
}

// DependOn is used for other resources to depend on [ComputeInstanceGroupMembership].
func (cigm *ComputeInstanceGroupMembership) DependOn() terra.Reference {
	return terra.ReferenceResource(cigm)
}

// Dependencies returns the list of resources [ComputeInstanceGroupMembership] depends_on.
func (cigm *ComputeInstanceGroupMembership) Dependencies() terra.Dependencies {
	return cigm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ComputeInstanceGroupMembership].
func (cigm *ComputeInstanceGroupMembership) LifecycleManagement() *terra.Lifecycle {
	return cigm.Lifecycle
}

// Attributes returns the attributes for [ComputeInstanceGroupMembership].
func (cigm *ComputeInstanceGroupMembership) Attributes() computeInstanceGroupMembershipAttributes {
	return computeInstanceGroupMembershipAttributes{ref: terra.ReferenceResource(cigm)}
}

// ImportState imports the given attribute values into [ComputeInstanceGroupMembership]'s state.
func (cigm *ComputeInstanceGroupMembership) ImportState(av io.Reader) error {
	cigm.state = &computeInstanceGroupMembershipState{}
	if err := json.NewDecoder(av).Decode(cigm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cigm.Type(), cigm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ComputeInstanceGroupMembership] has state.
func (cigm *ComputeInstanceGroupMembership) State() (*computeInstanceGroupMembershipState, bool) {
	return cigm.state, cigm.state != nil
}

// StateMust returns the state for [ComputeInstanceGroupMembership]. Panics if the state is nil.
func (cigm *ComputeInstanceGroupMembership) StateMust() *computeInstanceGroupMembershipState {
	if cigm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cigm.Type(), cigm.LocalName()))
	}
	return cigm.state
}

// ComputeInstanceGroupMembershipArgs contains the configurations for google_compute_instance_group_membership.
type ComputeInstanceGroupMembershipArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// InstanceGroup: string, required
	InstanceGroup terra.StringValue `hcl:"instance_group,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Timeouts: optional
	Timeouts *computeinstancegroupmembership.Timeouts `hcl:"timeouts,block"`
}
type computeInstanceGroupMembershipAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_compute_instance_group_membership.
func (cigm computeInstanceGroupMembershipAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cigm.ref.Append("id"))
}

// Instance returns a reference to field instance of google_compute_instance_group_membership.
func (cigm computeInstanceGroupMembershipAttributes) Instance() terra.StringValue {
	return terra.ReferenceAsString(cigm.ref.Append("instance"))
}

// InstanceGroup returns a reference to field instance_group of google_compute_instance_group_membership.
func (cigm computeInstanceGroupMembershipAttributes) InstanceGroup() terra.StringValue {
	return terra.ReferenceAsString(cigm.ref.Append("instance_group"))
}

// Project returns a reference to field project of google_compute_instance_group_membership.
func (cigm computeInstanceGroupMembershipAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(cigm.ref.Append("project"))
}

// Zone returns a reference to field zone of google_compute_instance_group_membership.
func (cigm computeInstanceGroupMembershipAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(cigm.ref.Append("zone"))
}

func (cigm computeInstanceGroupMembershipAttributes) Timeouts() computeinstancegroupmembership.TimeoutsAttributes {
	return terra.ReferenceAsSingle[computeinstancegroupmembership.TimeoutsAttributes](cigm.ref.Append("timeouts"))
}

type computeInstanceGroupMembershipState struct {
	Id            string                                        `json:"id"`
	Instance      string                                        `json:"instance"`
	InstanceGroup string                                        `json:"instance_group"`
	Project       string                                        `json:"project"`
	Zone          string                                        `json:"zone"`
	Timeouts      *computeinstancegroupmembership.TimeoutsState `json:"timeouts"`
}
