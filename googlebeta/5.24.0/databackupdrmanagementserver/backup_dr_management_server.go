// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package databackupdrmanagementserver

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ManagementUri struct{}

type Networks struct{}

type ManagementUriAttributes struct {
	ref terra.Reference
}

func (mu ManagementUriAttributes) InternalRef() (terra.Reference, error) {
	return mu.ref, nil
}

func (mu ManagementUriAttributes) InternalWithRef(ref terra.Reference) ManagementUriAttributes {
	return ManagementUriAttributes{ref: ref}
}

func (mu ManagementUriAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mu.ref.InternalTokens()
}

func (mu ManagementUriAttributes) Api() terra.StringValue {
	return terra.ReferenceAsString(mu.ref.Append("api"))
}

func (mu ManagementUriAttributes) WebUi() terra.StringValue {
	return terra.ReferenceAsString(mu.ref.Append("web_ui"))
}

type NetworksAttributes struct {
	ref terra.Reference
}

func (n NetworksAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NetworksAttributes) InternalWithRef(ref terra.Reference) NetworksAttributes {
	return NetworksAttributes{ref: ref}
}

func (n NetworksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NetworksAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("network"))
}

func (n NetworksAttributes) PeeringMode() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("peering_mode"))
}

type ManagementUriState struct {
	Api   string `json:"api"`
	WebUi string `json:"web_ui"`
}

type NetworksState struct {
	Network     string `json:"network"`
	PeeringMode string `json:"peering_mode"`
}
