// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datacomputeglobalforwardingrule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type MetadataFilters struct {
	// FilterLabels: min=0
	FilterLabels []FilterLabels `hcl:"filter_labels,block" validate:"min=0"`
}

type FilterLabels struct{}

type ServiceDirectoryRegistrations struct{}

type MetadataFiltersAttributes struct {
	ref terra.Reference
}

func (mf MetadataFiltersAttributes) InternalRef() (terra.Reference, error) {
	return mf.ref, nil
}

func (mf MetadataFiltersAttributes) InternalWithRef(ref terra.Reference) MetadataFiltersAttributes {
	return MetadataFiltersAttributes{ref: ref}
}

func (mf MetadataFiltersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mf.ref.InternalTokens()
}

func (mf MetadataFiltersAttributes) FilterMatchCriteria() terra.StringValue {
	return terra.ReferenceAsString(mf.ref.Append("filter_match_criteria"))
}

func (mf MetadataFiltersAttributes) FilterLabels() terra.ListValue[FilterLabelsAttributes] {
	return terra.ReferenceAsList[FilterLabelsAttributes](mf.ref.Append("filter_labels"))
}

type FilterLabelsAttributes struct {
	ref terra.Reference
}

func (fl FilterLabelsAttributes) InternalRef() (terra.Reference, error) {
	return fl.ref, nil
}

func (fl FilterLabelsAttributes) InternalWithRef(ref terra.Reference) FilterLabelsAttributes {
	return FilterLabelsAttributes{ref: ref}
}

func (fl FilterLabelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fl.ref.InternalTokens()
}

func (fl FilterLabelsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fl.ref.Append("name"))
}

func (fl FilterLabelsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(fl.ref.Append("value"))
}

type ServiceDirectoryRegistrationsAttributes struct {
	ref terra.Reference
}

func (sdr ServiceDirectoryRegistrationsAttributes) InternalRef() (terra.Reference, error) {
	return sdr.ref, nil
}

func (sdr ServiceDirectoryRegistrationsAttributes) InternalWithRef(ref terra.Reference) ServiceDirectoryRegistrationsAttributes {
	return ServiceDirectoryRegistrationsAttributes{ref: ref}
}

func (sdr ServiceDirectoryRegistrationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sdr.ref.InternalTokens()
}

func (sdr ServiceDirectoryRegistrationsAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(sdr.ref.Append("namespace"))
}

func (sdr ServiceDirectoryRegistrationsAttributes) ServiceDirectoryRegion() terra.StringValue {
	return terra.ReferenceAsString(sdr.ref.Append("service_directory_region"))
}

type MetadataFiltersState struct {
	FilterMatchCriteria string              `json:"filter_match_criteria"`
	FilterLabels        []FilterLabelsState `json:"filter_labels"`
}

type FilterLabelsState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type ServiceDirectoryRegistrationsState struct {
	Namespace              string `json:"namespace"`
	ServiceDirectoryRegion string `json:"service_directory_region"`
}
