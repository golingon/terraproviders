// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package networksecurityservertlspolicy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type MtlsPolicy struct {
	// ClientValidationMode: string, optional
	ClientValidationMode terra.StringValue `hcl:"client_validation_mode,attr"`
	// ClientValidationTrustConfig: string, optional
	ClientValidationTrustConfig terra.StringValue `hcl:"client_validation_trust_config,attr"`
	// ClientValidationCa: min=0
	ClientValidationCa []ClientValidationCa `hcl:"client_validation_ca,block" validate:"min=0"`
}

type ClientValidationCa struct {
	// ClientValidationCaCertificateProviderInstance: optional
	CertificateProviderInstance *ClientValidationCaCertificateProviderInstance `hcl:"certificate_provider_instance,block"`
	// ClientValidationCaGrpcEndpoint: optional
	GrpcEndpoint *ClientValidationCaGrpcEndpoint `hcl:"grpc_endpoint,block"`
}

type ClientValidationCaCertificateProviderInstance struct {
	// PluginInstance: string, required
	PluginInstance terra.StringValue `hcl:"plugin_instance,attr" validate:"required"`
}

type ClientValidationCaGrpcEndpoint struct {
	// TargetUri: string, required
	TargetUri terra.StringValue `hcl:"target_uri,attr" validate:"required"`
}

type ServerCertificate struct {
	// ServerCertificateCertificateProviderInstance: optional
	CertificateProviderInstance *ServerCertificateCertificateProviderInstance `hcl:"certificate_provider_instance,block"`
	// ServerCertificateGrpcEndpoint: optional
	GrpcEndpoint *ServerCertificateGrpcEndpoint `hcl:"grpc_endpoint,block"`
}

type ServerCertificateCertificateProviderInstance struct {
	// PluginInstance: string, required
	PluginInstance terra.StringValue `hcl:"plugin_instance,attr" validate:"required"`
}

type ServerCertificateGrpcEndpoint struct {
	// TargetUri: string, required
	TargetUri terra.StringValue `hcl:"target_uri,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type MtlsPolicyAttributes struct {
	ref terra.Reference
}

func (mp MtlsPolicyAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp MtlsPolicyAttributes) InternalWithRef(ref terra.Reference) MtlsPolicyAttributes {
	return MtlsPolicyAttributes{ref: ref}
}

func (mp MtlsPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp MtlsPolicyAttributes) ClientValidationMode() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("client_validation_mode"))
}

func (mp MtlsPolicyAttributes) ClientValidationTrustConfig() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("client_validation_trust_config"))
}

func (mp MtlsPolicyAttributes) ClientValidationCa() terra.ListValue[ClientValidationCaAttributes] {
	return terra.ReferenceAsList[ClientValidationCaAttributes](mp.ref.Append("client_validation_ca"))
}

type ClientValidationCaAttributes struct {
	ref terra.Reference
}

func (cvc ClientValidationCaAttributes) InternalRef() (terra.Reference, error) {
	return cvc.ref, nil
}

func (cvc ClientValidationCaAttributes) InternalWithRef(ref terra.Reference) ClientValidationCaAttributes {
	return ClientValidationCaAttributes{ref: ref}
}

func (cvc ClientValidationCaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cvc.ref.InternalTokens()
}

func (cvc ClientValidationCaAttributes) CertificateProviderInstance() terra.ListValue[ClientValidationCaCertificateProviderInstanceAttributes] {
	return terra.ReferenceAsList[ClientValidationCaCertificateProviderInstanceAttributes](cvc.ref.Append("certificate_provider_instance"))
}

func (cvc ClientValidationCaAttributes) GrpcEndpoint() terra.ListValue[ClientValidationCaGrpcEndpointAttributes] {
	return terra.ReferenceAsList[ClientValidationCaGrpcEndpointAttributes](cvc.ref.Append("grpc_endpoint"))
}

type ClientValidationCaCertificateProviderInstanceAttributes struct {
	ref terra.Reference
}

func (cpi ClientValidationCaCertificateProviderInstanceAttributes) InternalRef() (terra.Reference, error) {
	return cpi.ref, nil
}

func (cpi ClientValidationCaCertificateProviderInstanceAttributes) InternalWithRef(ref terra.Reference) ClientValidationCaCertificateProviderInstanceAttributes {
	return ClientValidationCaCertificateProviderInstanceAttributes{ref: ref}
}

func (cpi ClientValidationCaCertificateProviderInstanceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpi.ref.InternalTokens()
}

func (cpi ClientValidationCaCertificateProviderInstanceAttributes) PluginInstance() terra.StringValue {
	return terra.ReferenceAsString(cpi.ref.Append("plugin_instance"))
}

type ClientValidationCaGrpcEndpointAttributes struct {
	ref terra.Reference
}

func (ge ClientValidationCaGrpcEndpointAttributes) InternalRef() (terra.Reference, error) {
	return ge.ref, nil
}

func (ge ClientValidationCaGrpcEndpointAttributes) InternalWithRef(ref terra.Reference) ClientValidationCaGrpcEndpointAttributes {
	return ClientValidationCaGrpcEndpointAttributes{ref: ref}
}

func (ge ClientValidationCaGrpcEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ge.ref.InternalTokens()
}

func (ge ClientValidationCaGrpcEndpointAttributes) TargetUri() terra.StringValue {
	return terra.ReferenceAsString(ge.ref.Append("target_uri"))
}

type ServerCertificateAttributes struct {
	ref terra.Reference
}

func (sc ServerCertificateAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc ServerCertificateAttributes) InternalWithRef(ref terra.Reference) ServerCertificateAttributes {
	return ServerCertificateAttributes{ref: ref}
}

func (sc ServerCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc ServerCertificateAttributes) CertificateProviderInstance() terra.ListValue[ServerCertificateCertificateProviderInstanceAttributes] {
	return terra.ReferenceAsList[ServerCertificateCertificateProviderInstanceAttributes](sc.ref.Append("certificate_provider_instance"))
}

func (sc ServerCertificateAttributes) GrpcEndpoint() terra.ListValue[ServerCertificateGrpcEndpointAttributes] {
	return terra.ReferenceAsList[ServerCertificateGrpcEndpointAttributes](sc.ref.Append("grpc_endpoint"))
}

type ServerCertificateCertificateProviderInstanceAttributes struct {
	ref terra.Reference
}

func (cpi ServerCertificateCertificateProviderInstanceAttributes) InternalRef() (terra.Reference, error) {
	return cpi.ref, nil
}

func (cpi ServerCertificateCertificateProviderInstanceAttributes) InternalWithRef(ref terra.Reference) ServerCertificateCertificateProviderInstanceAttributes {
	return ServerCertificateCertificateProviderInstanceAttributes{ref: ref}
}

func (cpi ServerCertificateCertificateProviderInstanceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpi.ref.InternalTokens()
}

func (cpi ServerCertificateCertificateProviderInstanceAttributes) PluginInstance() terra.StringValue {
	return terra.ReferenceAsString(cpi.ref.Append("plugin_instance"))
}

type ServerCertificateGrpcEndpointAttributes struct {
	ref terra.Reference
}

func (ge ServerCertificateGrpcEndpointAttributes) InternalRef() (terra.Reference, error) {
	return ge.ref, nil
}

func (ge ServerCertificateGrpcEndpointAttributes) InternalWithRef(ref terra.Reference) ServerCertificateGrpcEndpointAttributes {
	return ServerCertificateGrpcEndpointAttributes{ref: ref}
}

func (ge ServerCertificateGrpcEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ge.ref.InternalTokens()
}

func (ge ServerCertificateGrpcEndpointAttributes) TargetUri() terra.StringValue {
	return terra.ReferenceAsString(ge.ref.Append("target_uri"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type MtlsPolicyState struct {
	ClientValidationMode        string                    `json:"client_validation_mode"`
	ClientValidationTrustConfig string                    `json:"client_validation_trust_config"`
	ClientValidationCa          []ClientValidationCaState `json:"client_validation_ca"`
}

type ClientValidationCaState struct {
	CertificateProviderInstance []ClientValidationCaCertificateProviderInstanceState `json:"certificate_provider_instance"`
	GrpcEndpoint                []ClientValidationCaGrpcEndpointState                `json:"grpc_endpoint"`
}

type ClientValidationCaCertificateProviderInstanceState struct {
	PluginInstance string `json:"plugin_instance"`
}

type ClientValidationCaGrpcEndpointState struct {
	TargetUri string `json:"target_uri"`
}

type ServerCertificateState struct {
	CertificateProviderInstance []ServerCertificateCertificateProviderInstanceState `json:"certificate_provider_instance"`
	GrpcEndpoint                []ServerCertificateGrpcEndpointState                `json:"grpc_endpoint"`
}

type ServerCertificateCertificateProviderInstanceState struct {
	PluginInstance string `json:"plugin_instance"`
}

type ServerCertificateGrpcEndpointState struct {
	TargetUri string `json:"target_uri"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
