// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	netappstoragepool "github.com/golingon/terraproviders/googlebeta/5.24.0/netappstoragepool"
	"io"
)

// NewNetappStoragePool creates a new instance of [NetappStoragePool].
func NewNetappStoragePool(name string, args NetappStoragePoolArgs) *NetappStoragePool {
	return &NetappStoragePool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetappStoragePool)(nil)

// NetappStoragePool represents the Terraform resource google_netapp_storage_pool.
type NetappStoragePool struct {
	Name      string
	Args      NetappStoragePoolArgs
	state     *netappStoragePoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetappStoragePool].
func (nsp *NetappStoragePool) Type() string {
	return "google_netapp_storage_pool"
}

// LocalName returns the local name for [NetappStoragePool].
func (nsp *NetappStoragePool) LocalName() string {
	return nsp.Name
}

// Configuration returns the configuration (args) for [NetappStoragePool].
func (nsp *NetappStoragePool) Configuration() interface{} {
	return nsp.Args
}

// DependOn is used for other resources to depend on [NetappStoragePool].
func (nsp *NetappStoragePool) DependOn() terra.Reference {
	return terra.ReferenceResource(nsp)
}

// Dependencies returns the list of resources [NetappStoragePool] depends_on.
func (nsp *NetappStoragePool) Dependencies() terra.Dependencies {
	return nsp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetappStoragePool].
func (nsp *NetappStoragePool) LifecycleManagement() *terra.Lifecycle {
	return nsp.Lifecycle
}

// Attributes returns the attributes for [NetappStoragePool].
func (nsp *NetappStoragePool) Attributes() netappStoragePoolAttributes {
	return netappStoragePoolAttributes{ref: terra.ReferenceResource(nsp)}
}

// ImportState imports the given attribute values into [NetappStoragePool]'s state.
func (nsp *NetappStoragePool) ImportState(av io.Reader) error {
	nsp.state = &netappStoragePoolState{}
	if err := json.NewDecoder(av).Decode(nsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nsp.Type(), nsp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetappStoragePool] has state.
func (nsp *NetappStoragePool) State() (*netappStoragePoolState, bool) {
	return nsp.state, nsp.state != nil
}

// StateMust returns the state for [NetappStoragePool]. Panics if the state is nil.
func (nsp *NetappStoragePool) StateMust() *netappStoragePoolState {
	if nsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nsp.Type(), nsp.LocalName()))
	}
	return nsp.state
}

// NetappStoragePoolArgs contains the configurations for google_netapp_storage_pool.
type NetappStoragePoolArgs struct {
	// ActiveDirectory: string, optional
	ActiveDirectory terra.StringValue `hcl:"active_directory,attr"`
	// CapacityGib: string, required
	CapacityGib terra.StringValue `hcl:"capacity_gib,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsConfig: string, optional
	KmsConfig terra.StringValue `hcl:"kms_config,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LdapEnabled: bool, optional
	LdapEnabled terra.BoolValue `hcl:"ldap_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceLevel: string, required
	ServiceLevel terra.StringValue `hcl:"service_level,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *netappstoragepool.Timeouts `hcl:"timeouts,block"`
}
type netappStoragePoolAttributes struct {
	ref terra.Reference
}

// ActiveDirectory returns a reference to field active_directory of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) ActiveDirectory() terra.StringValue {
	return terra.ReferenceAsString(nsp.ref.Append("active_directory"))
}

// CapacityGib returns a reference to field capacity_gib of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) CapacityGib() terra.StringValue {
	return terra.ReferenceAsString(nsp.ref.Append("capacity_gib"))
}

// Description returns a reference to field description of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(nsp.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nsp.ref.Append("effective_labels"))
}

// EncryptionType returns a reference to field encryption_type of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(nsp.ref.Append("encryption_type"))
}

// Id returns a reference to field id of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nsp.ref.Append("id"))
}

// KmsConfig returns a reference to field kms_config of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) KmsConfig() terra.StringValue {
	return terra.ReferenceAsString(nsp.ref.Append("kms_config"))
}

// Labels returns a reference to field labels of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nsp.ref.Append("labels"))
}

// LdapEnabled returns a reference to field ldap_enabled of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) LdapEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(nsp.ref.Append("ldap_enabled"))
}

// Location returns a reference to field location of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(nsp.ref.Append("location"))
}

// Name returns a reference to field name of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nsp.ref.Append("name"))
}

// Network returns a reference to field network of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(nsp.ref.Append("network"))
}

// Project returns a reference to field project of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(nsp.ref.Append("project"))
}

// ServiceLevel returns a reference to field service_level of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) ServiceLevel() terra.StringValue {
	return terra.ReferenceAsString(nsp.ref.Append("service_level"))
}

// TerraformLabels returns a reference to field terraform_labels of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nsp.ref.Append("terraform_labels"))
}

// VolumeCapacityGib returns a reference to field volume_capacity_gib of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) VolumeCapacityGib() terra.StringValue {
	return terra.ReferenceAsString(nsp.ref.Append("volume_capacity_gib"))
}

// VolumeCount returns a reference to field volume_count of google_netapp_storage_pool.
func (nsp netappStoragePoolAttributes) VolumeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(nsp.ref.Append("volume_count"))
}

func (nsp netappStoragePoolAttributes) Timeouts() netappstoragepool.TimeoutsAttributes {
	return terra.ReferenceAsSingle[netappstoragepool.TimeoutsAttributes](nsp.ref.Append("timeouts"))
}

type netappStoragePoolState struct {
	ActiveDirectory   string                           `json:"active_directory"`
	CapacityGib       string                           `json:"capacity_gib"`
	Description       string                           `json:"description"`
	EffectiveLabels   map[string]string                `json:"effective_labels"`
	EncryptionType    string                           `json:"encryption_type"`
	Id                string                           `json:"id"`
	KmsConfig         string                           `json:"kms_config"`
	Labels            map[string]string                `json:"labels"`
	LdapEnabled       bool                             `json:"ldap_enabled"`
	Location          string                           `json:"location"`
	Name              string                           `json:"name"`
	Network           string                           `json:"network"`
	Project           string                           `json:"project"`
	ServiceLevel      string                           `json:"service_level"`
	TerraformLabels   map[string]string                `json:"terraform_labels"`
	VolumeCapacityGib string                           `json:"volume_capacity_gib"`
	VolumeCount       float64                          `json:"volume_count"`
	Timeouts          *netappstoragepool.TimeoutsState `json:"timeouts"`
}
