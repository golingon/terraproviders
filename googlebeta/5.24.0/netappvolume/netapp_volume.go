// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package netappvolume

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type MountOptions struct{}

type ExportPolicy struct {
	// Rules: min=1
	Rules []Rules `hcl:"rules,block" validate:"min=1"`
}

type Rules struct {
	// AccessType: string, optional
	AccessType terra.StringValue `hcl:"access_type,attr"`
	// AllowedClients: string, optional
	AllowedClients terra.StringValue `hcl:"allowed_clients,attr"`
	// HasRootAccess: string, optional
	HasRootAccess terra.StringValue `hcl:"has_root_access,attr"`
	// Kerberos5ReadOnly: bool, optional
	Kerberos5ReadOnly terra.BoolValue `hcl:"kerberos5_read_only,attr"`
	// Kerberos5ReadWrite: bool, optional
	Kerberos5ReadWrite terra.BoolValue `hcl:"kerberos5_read_write,attr"`
	// Kerberos5IReadOnly: bool, optional
	Kerberos5IReadOnly terra.BoolValue `hcl:"kerberos5i_read_only,attr"`
	// Kerberos5IReadWrite: bool, optional
	Kerberos5IReadWrite terra.BoolValue `hcl:"kerberos5i_read_write,attr"`
	// Kerberos5PReadOnly: bool, optional
	Kerberos5PReadOnly terra.BoolValue `hcl:"kerberos5p_read_only,attr"`
	// Kerberos5PReadWrite: bool, optional
	Kerberos5PReadWrite terra.BoolValue `hcl:"kerberos5p_read_write,attr"`
	// Nfsv3: bool, optional
	Nfsv3 terra.BoolValue `hcl:"nfsv3,attr"`
	// Nfsv4: bool, optional
	Nfsv4 terra.BoolValue `hcl:"nfsv4,attr"`
}

type RestoreParameters struct {
	// SourceBackup: string, optional
	SourceBackup terra.StringValue `hcl:"source_backup,attr"`
	// SourceSnapshot: string, optional
	SourceSnapshot terra.StringValue `hcl:"source_snapshot,attr"`
}

type SnapshotPolicy struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// DailySchedule: optional
	DailySchedule *DailySchedule `hcl:"daily_schedule,block"`
	// HourlySchedule: optional
	HourlySchedule *HourlySchedule `hcl:"hourly_schedule,block"`
	// MonthlySchedule: optional
	MonthlySchedule *MonthlySchedule `hcl:"monthly_schedule,block"`
	// WeeklySchedule: optional
	WeeklySchedule *WeeklySchedule `hcl:"weekly_schedule,block"`
}

type DailySchedule struct {
	// Hour: number, optional
	Hour terra.NumberValue `hcl:"hour,attr"`
	// Minute: number, optional
	Minute terra.NumberValue `hcl:"minute,attr"`
	// SnapshotsToKeep: number, required
	SnapshotsToKeep terra.NumberValue `hcl:"snapshots_to_keep,attr" validate:"required"`
}

type HourlySchedule struct {
	// Minute: number, optional
	Minute terra.NumberValue `hcl:"minute,attr"`
	// SnapshotsToKeep: number, required
	SnapshotsToKeep terra.NumberValue `hcl:"snapshots_to_keep,attr" validate:"required"`
}

type MonthlySchedule struct {
	// DaysOfMonth: string, optional
	DaysOfMonth terra.StringValue `hcl:"days_of_month,attr"`
	// Hour: number, optional
	Hour terra.NumberValue `hcl:"hour,attr"`
	// Minute: number, optional
	Minute terra.NumberValue `hcl:"minute,attr"`
	// SnapshotsToKeep: number, required
	SnapshotsToKeep terra.NumberValue `hcl:"snapshots_to_keep,attr" validate:"required"`
}

type WeeklySchedule struct {
	// Day: string, optional
	Day terra.StringValue `hcl:"day,attr"`
	// Hour: number, optional
	Hour terra.NumberValue `hcl:"hour,attr"`
	// Minute: number, optional
	Minute terra.NumberValue `hcl:"minute,attr"`
	// SnapshotsToKeep: number, required
	SnapshotsToKeep terra.NumberValue `hcl:"snapshots_to_keep,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type MountOptionsAttributes struct {
	ref terra.Reference
}

func (mo MountOptionsAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo MountOptionsAttributes) InternalWithRef(ref terra.Reference) MountOptionsAttributes {
	return MountOptionsAttributes{ref: ref}
}

func (mo MountOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mo.ref.InternalTokens()
}

func (mo MountOptionsAttributes) Export() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("export"))
}

func (mo MountOptionsAttributes) ExportFull() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("export_full"))
}

func (mo MountOptionsAttributes) Instructions() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("instructions"))
}

func (mo MountOptionsAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("protocol"))
}

type ExportPolicyAttributes struct {
	ref terra.Reference
}

func (ep ExportPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep ExportPolicyAttributes) InternalWithRef(ref terra.Reference) ExportPolicyAttributes {
	return ExportPolicyAttributes{ref: ref}
}

func (ep ExportPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep ExportPolicyAttributes) Rules() terra.ListValue[RulesAttributes] {
	return terra.ReferenceAsList[RulesAttributes](ep.ref.Append("rules"))
}

type RulesAttributes struct {
	ref terra.Reference
}

func (r RulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RulesAttributes) InternalWithRef(ref terra.Reference) RulesAttributes {
	return RulesAttributes{ref: ref}
}

func (r RulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RulesAttributes) AccessType() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("access_type"))
}

func (r RulesAttributes) AllowedClients() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("allowed_clients"))
}

func (r RulesAttributes) HasRootAccess() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("has_root_access"))
}

func (r RulesAttributes) Kerberos5ReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("kerberos5_read_only"))
}

func (r RulesAttributes) Kerberos5ReadWrite() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("kerberos5_read_write"))
}

func (r RulesAttributes) Kerberos5IReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("kerberos5i_read_only"))
}

func (r RulesAttributes) Kerberos5IReadWrite() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("kerberos5i_read_write"))
}

func (r RulesAttributes) Kerberos5PReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("kerberos5p_read_only"))
}

func (r RulesAttributes) Kerberos5PReadWrite() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("kerberos5p_read_write"))
}

func (r RulesAttributes) Nfsv3() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("nfsv3"))
}

func (r RulesAttributes) Nfsv4() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("nfsv4"))
}

type RestoreParametersAttributes struct {
	ref terra.Reference
}

func (rp RestoreParametersAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RestoreParametersAttributes) InternalWithRef(ref terra.Reference) RestoreParametersAttributes {
	return RestoreParametersAttributes{ref: ref}
}

func (rp RestoreParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RestoreParametersAttributes) SourceBackup() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("source_backup"))
}

func (rp RestoreParametersAttributes) SourceSnapshot() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("source_snapshot"))
}

type SnapshotPolicyAttributes struct {
	ref terra.Reference
}

func (sp SnapshotPolicyAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SnapshotPolicyAttributes) InternalWithRef(ref terra.Reference) SnapshotPolicyAttributes {
	return SnapshotPolicyAttributes{ref: ref}
}

func (sp SnapshotPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SnapshotPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(sp.ref.Append("enabled"))
}

func (sp SnapshotPolicyAttributes) DailySchedule() terra.ListValue[DailyScheduleAttributes] {
	return terra.ReferenceAsList[DailyScheduleAttributes](sp.ref.Append("daily_schedule"))
}

func (sp SnapshotPolicyAttributes) HourlySchedule() terra.ListValue[HourlyScheduleAttributes] {
	return terra.ReferenceAsList[HourlyScheduleAttributes](sp.ref.Append("hourly_schedule"))
}

func (sp SnapshotPolicyAttributes) MonthlySchedule() terra.ListValue[MonthlyScheduleAttributes] {
	return terra.ReferenceAsList[MonthlyScheduleAttributes](sp.ref.Append("monthly_schedule"))
}

func (sp SnapshotPolicyAttributes) WeeklySchedule() terra.ListValue[WeeklyScheduleAttributes] {
	return terra.ReferenceAsList[WeeklyScheduleAttributes](sp.ref.Append("weekly_schedule"))
}

type DailyScheduleAttributes struct {
	ref terra.Reference
}

func (ds DailyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DailyScheduleAttributes) InternalWithRef(ref terra.Reference) DailyScheduleAttributes {
	return DailyScheduleAttributes{ref: ref}
}

func (ds DailyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DailyScheduleAttributes) Hour() terra.NumberValue {
	return terra.ReferenceAsNumber(ds.ref.Append("hour"))
}

func (ds DailyScheduleAttributes) Minute() terra.NumberValue {
	return terra.ReferenceAsNumber(ds.ref.Append("minute"))
}

func (ds DailyScheduleAttributes) SnapshotsToKeep() terra.NumberValue {
	return terra.ReferenceAsNumber(ds.ref.Append("snapshots_to_keep"))
}

type HourlyScheduleAttributes struct {
	ref terra.Reference
}

func (hs HourlyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return hs.ref, nil
}

func (hs HourlyScheduleAttributes) InternalWithRef(ref terra.Reference) HourlyScheduleAttributes {
	return HourlyScheduleAttributes{ref: ref}
}

func (hs HourlyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hs.ref.InternalTokens()
}

func (hs HourlyScheduleAttributes) Minute() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("minute"))
}

func (hs HourlyScheduleAttributes) SnapshotsToKeep() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("snapshots_to_keep"))
}

type MonthlyScheduleAttributes struct {
	ref terra.Reference
}

func (ms MonthlyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms MonthlyScheduleAttributes) InternalWithRef(ref terra.Reference) MonthlyScheduleAttributes {
	return MonthlyScheduleAttributes{ref: ref}
}

func (ms MonthlyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms MonthlyScheduleAttributes) DaysOfMonth() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("days_of_month"))
}

func (ms MonthlyScheduleAttributes) Hour() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("hour"))
}

func (ms MonthlyScheduleAttributes) Minute() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("minute"))
}

func (ms MonthlyScheduleAttributes) SnapshotsToKeep() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("snapshots_to_keep"))
}

type WeeklyScheduleAttributes struct {
	ref terra.Reference
}

func (ws WeeklyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ws.ref, nil
}

func (ws WeeklyScheduleAttributes) InternalWithRef(ref terra.Reference) WeeklyScheduleAttributes {
	return WeeklyScheduleAttributes{ref: ref}
}

func (ws WeeklyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ws.ref.InternalTokens()
}

func (ws WeeklyScheduleAttributes) Day() terra.StringValue {
	return terra.ReferenceAsString(ws.ref.Append("day"))
}

func (ws WeeklyScheduleAttributes) Hour() terra.NumberValue {
	return terra.ReferenceAsNumber(ws.ref.Append("hour"))
}

func (ws WeeklyScheduleAttributes) Minute() terra.NumberValue {
	return terra.ReferenceAsNumber(ws.ref.Append("minute"))
}

func (ws WeeklyScheduleAttributes) SnapshotsToKeep() terra.NumberValue {
	return terra.ReferenceAsNumber(ws.ref.Append("snapshots_to_keep"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type MountOptionsState struct {
	Export       string `json:"export"`
	ExportFull   string `json:"export_full"`
	Instructions string `json:"instructions"`
	Protocol     string `json:"protocol"`
}

type ExportPolicyState struct {
	Rules []RulesState `json:"rules"`
}

type RulesState struct {
	AccessType          string `json:"access_type"`
	AllowedClients      string `json:"allowed_clients"`
	HasRootAccess       string `json:"has_root_access"`
	Kerberos5ReadOnly   bool   `json:"kerberos5_read_only"`
	Kerberos5ReadWrite  bool   `json:"kerberos5_read_write"`
	Kerberos5IReadOnly  bool   `json:"kerberos5i_read_only"`
	Kerberos5IReadWrite bool   `json:"kerberos5i_read_write"`
	Kerberos5PReadOnly  bool   `json:"kerberos5p_read_only"`
	Kerberos5PReadWrite bool   `json:"kerberos5p_read_write"`
	Nfsv3               bool   `json:"nfsv3"`
	Nfsv4               bool   `json:"nfsv4"`
}

type RestoreParametersState struct {
	SourceBackup   string `json:"source_backup"`
	SourceSnapshot string `json:"source_snapshot"`
}

type SnapshotPolicyState struct {
	Enabled         bool                   `json:"enabled"`
	DailySchedule   []DailyScheduleState   `json:"daily_schedule"`
	HourlySchedule  []HourlyScheduleState  `json:"hourly_schedule"`
	MonthlySchedule []MonthlyScheduleState `json:"monthly_schedule"`
	WeeklySchedule  []WeeklyScheduleState  `json:"weekly_schedule"`
}

type DailyScheduleState struct {
	Hour            float64 `json:"hour"`
	Minute          float64 `json:"minute"`
	SnapshotsToKeep float64 `json:"snapshots_to_keep"`
}

type HourlyScheduleState struct {
	Minute          float64 `json:"minute"`
	SnapshotsToKeep float64 `json:"snapshots_to_keep"`
}

type MonthlyScheduleState struct {
	DaysOfMonth     string  `json:"days_of_month"`
	Hour            float64 `json:"hour"`
	Minute          float64 `json:"minute"`
	SnapshotsToKeep float64 `json:"snapshots_to_keep"`
}

type WeeklyScheduleState struct {
	Day             string  `json:"day"`
	Hour            float64 `json:"hour"`
	Minute          float64 `json:"minute"`
	SnapshotsToKeep float64 `json:"snapshots_to_keep"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
