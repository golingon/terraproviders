// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package networksecurityclienttlspolicy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ClientCertificate struct {
	// ClientCertificateCertificateProviderInstance: optional
	CertificateProviderInstance *ClientCertificateCertificateProviderInstance `hcl:"certificate_provider_instance,block"`
	// ClientCertificateGrpcEndpoint: optional
	GrpcEndpoint *ClientCertificateGrpcEndpoint `hcl:"grpc_endpoint,block"`
}

type ClientCertificateCertificateProviderInstance struct {
	// PluginInstance: string, required
	PluginInstance terra.StringValue `hcl:"plugin_instance,attr" validate:"required"`
}

type ClientCertificateGrpcEndpoint struct {
	// TargetUri: string, required
	TargetUri terra.StringValue `hcl:"target_uri,attr" validate:"required"`
}

type ServerValidationCa struct {
	// ServerValidationCaCertificateProviderInstance: optional
	CertificateProviderInstance *ServerValidationCaCertificateProviderInstance `hcl:"certificate_provider_instance,block"`
	// ServerValidationCaGrpcEndpoint: optional
	GrpcEndpoint *ServerValidationCaGrpcEndpoint `hcl:"grpc_endpoint,block"`
}

type ServerValidationCaCertificateProviderInstance struct {
	// PluginInstance: string, required
	PluginInstance terra.StringValue `hcl:"plugin_instance,attr" validate:"required"`
}

type ServerValidationCaGrpcEndpoint struct {
	// TargetUri: string, required
	TargetUri terra.StringValue `hcl:"target_uri,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ClientCertificateAttributes struct {
	ref terra.Reference
}

func (cc ClientCertificateAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ClientCertificateAttributes) InternalWithRef(ref terra.Reference) ClientCertificateAttributes {
	return ClientCertificateAttributes{ref: ref}
}

func (cc ClientCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ClientCertificateAttributes) CertificateProviderInstance() terra.ListValue[ClientCertificateCertificateProviderInstanceAttributes] {
	return terra.ReferenceAsList[ClientCertificateCertificateProviderInstanceAttributes](cc.ref.Append("certificate_provider_instance"))
}

func (cc ClientCertificateAttributes) GrpcEndpoint() terra.ListValue[ClientCertificateGrpcEndpointAttributes] {
	return terra.ReferenceAsList[ClientCertificateGrpcEndpointAttributes](cc.ref.Append("grpc_endpoint"))
}

type ClientCertificateCertificateProviderInstanceAttributes struct {
	ref terra.Reference
}

func (cpi ClientCertificateCertificateProviderInstanceAttributes) InternalRef() (terra.Reference, error) {
	return cpi.ref, nil
}

func (cpi ClientCertificateCertificateProviderInstanceAttributes) InternalWithRef(ref terra.Reference) ClientCertificateCertificateProviderInstanceAttributes {
	return ClientCertificateCertificateProviderInstanceAttributes{ref: ref}
}

func (cpi ClientCertificateCertificateProviderInstanceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpi.ref.InternalTokens()
}

func (cpi ClientCertificateCertificateProviderInstanceAttributes) PluginInstance() terra.StringValue {
	return terra.ReferenceAsString(cpi.ref.Append("plugin_instance"))
}

type ClientCertificateGrpcEndpointAttributes struct {
	ref terra.Reference
}

func (ge ClientCertificateGrpcEndpointAttributes) InternalRef() (terra.Reference, error) {
	return ge.ref, nil
}

func (ge ClientCertificateGrpcEndpointAttributes) InternalWithRef(ref terra.Reference) ClientCertificateGrpcEndpointAttributes {
	return ClientCertificateGrpcEndpointAttributes{ref: ref}
}

func (ge ClientCertificateGrpcEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ge.ref.InternalTokens()
}

func (ge ClientCertificateGrpcEndpointAttributes) TargetUri() terra.StringValue {
	return terra.ReferenceAsString(ge.ref.Append("target_uri"))
}

type ServerValidationCaAttributes struct {
	ref terra.Reference
}

func (svc ServerValidationCaAttributes) InternalRef() (terra.Reference, error) {
	return svc.ref, nil
}

func (svc ServerValidationCaAttributes) InternalWithRef(ref terra.Reference) ServerValidationCaAttributes {
	return ServerValidationCaAttributes{ref: ref}
}

func (svc ServerValidationCaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return svc.ref.InternalTokens()
}

func (svc ServerValidationCaAttributes) CertificateProviderInstance() terra.ListValue[ServerValidationCaCertificateProviderInstanceAttributes] {
	return terra.ReferenceAsList[ServerValidationCaCertificateProviderInstanceAttributes](svc.ref.Append("certificate_provider_instance"))
}

func (svc ServerValidationCaAttributes) GrpcEndpoint() terra.ListValue[ServerValidationCaGrpcEndpointAttributes] {
	return terra.ReferenceAsList[ServerValidationCaGrpcEndpointAttributes](svc.ref.Append("grpc_endpoint"))
}

type ServerValidationCaCertificateProviderInstanceAttributes struct {
	ref terra.Reference
}

func (cpi ServerValidationCaCertificateProviderInstanceAttributes) InternalRef() (terra.Reference, error) {
	return cpi.ref, nil
}

func (cpi ServerValidationCaCertificateProviderInstanceAttributes) InternalWithRef(ref terra.Reference) ServerValidationCaCertificateProviderInstanceAttributes {
	return ServerValidationCaCertificateProviderInstanceAttributes{ref: ref}
}

func (cpi ServerValidationCaCertificateProviderInstanceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpi.ref.InternalTokens()
}

func (cpi ServerValidationCaCertificateProviderInstanceAttributes) PluginInstance() terra.StringValue {
	return terra.ReferenceAsString(cpi.ref.Append("plugin_instance"))
}

type ServerValidationCaGrpcEndpointAttributes struct {
	ref terra.Reference
}

func (ge ServerValidationCaGrpcEndpointAttributes) InternalRef() (terra.Reference, error) {
	return ge.ref, nil
}

func (ge ServerValidationCaGrpcEndpointAttributes) InternalWithRef(ref terra.Reference) ServerValidationCaGrpcEndpointAttributes {
	return ServerValidationCaGrpcEndpointAttributes{ref: ref}
}

func (ge ServerValidationCaGrpcEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ge.ref.InternalTokens()
}

func (ge ServerValidationCaGrpcEndpointAttributes) TargetUri() terra.StringValue {
	return terra.ReferenceAsString(ge.ref.Append("target_uri"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ClientCertificateState struct {
	CertificateProviderInstance []ClientCertificateCertificateProviderInstanceState `json:"certificate_provider_instance"`
	GrpcEndpoint                []ClientCertificateGrpcEndpointState                `json:"grpc_endpoint"`
}

type ClientCertificateCertificateProviderInstanceState struct {
	PluginInstance string `json:"plugin_instance"`
}

type ClientCertificateGrpcEndpointState struct {
	TargetUri string `json:"target_uri"`
}

type ServerValidationCaState struct {
	CertificateProviderInstance []ServerValidationCaCertificateProviderInstanceState `json:"certificate_provider_instance"`
	GrpcEndpoint                []ServerValidationCaGrpcEndpointState                `json:"grpc_endpoint"`
}

type ServerValidationCaCertificateProviderInstanceState struct {
	PluginInstance string `json:"plugin_instance"`
}

type ServerValidationCaGrpcEndpointState struct {
	TargetUri string `json:"target_uri"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
