// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewRuntimeconfigConfig creates a new instance of [RuntimeconfigConfig].
func NewRuntimeconfigConfig(name string, args RuntimeconfigConfigArgs) *RuntimeconfigConfig {
	return &RuntimeconfigConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RuntimeconfigConfig)(nil)

// RuntimeconfigConfig represents the Terraform resource google_runtimeconfig_config.
type RuntimeconfigConfig struct {
	Name      string
	Args      RuntimeconfigConfigArgs
	state     *runtimeconfigConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RuntimeconfigConfig].
func (rc *RuntimeconfigConfig) Type() string {
	return "google_runtimeconfig_config"
}

// LocalName returns the local name for [RuntimeconfigConfig].
func (rc *RuntimeconfigConfig) LocalName() string {
	return rc.Name
}

// Configuration returns the configuration (args) for [RuntimeconfigConfig].
func (rc *RuntimeconfigConfig) Configuration() interface{} {
	return rc.Args
}

// DependOn is used for other resources to depend on [RuntimeconfigConfig].
func (rc *RuntimeconfigConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(rc)
}

// Dependencies returns the list of resources [RuntimeconfigConfig] depends_on.
func (rc *RuntimeconfigConfig) Dependencies() terra.Dependencies {
	return rc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RuntimeconfigConfig].
func (rc *RuntimeconfigConfig) LifecycleManagement() *terra.Lifecycle {
	return rc.Lifecycle
}

// Attributes returns the attributes for [RuntimeconfigConfig].
func (rc *RuntimeconfigConfig) Attributes() runtimeconfigConfigAttributes {
	return runtimeconfigConfigAttributes{ref: terra.ReferenceResource(rc)}
}

// ImportState imports the given attribute values into [RuntimeconfigConfig]'s state.
func (rc *RuntimeconfigConfig) ImportState(av io.Reader) error {
	rc.state = &runtimeconfigConfigState{}
	if err := json.NewDecoder(av).Decode(rc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rc.Type(), rc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RuntimeconfigConfig] has state.
func (rc *RuntimeconfigConfig) State() (*runtimeconfigConfigState, bool) {
	return rc.state, rc.state != nil
}

// StateMust returns the state for [RuntimeconfigConfig]. Panics if the state is nil.
func (rc *RuntimeconfigConfig) StateMust() *runtimeconfigConfigState {
	if rc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rc.Type(), rc.LocalName()))
	}
	return rc.state
}

// RuntimeconfigConfigArgs contains the configurations for google_runtimeconfig_config.
type RuntimeconfigConfigArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}
type runtimeconfigConfigAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_runtimeconfig_config.
func (rc runtimeconfigConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("description"))
}

// Id returns a reference to field id of google_runtimeconfig_config.
func (rc runtimeconfigConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("id"))
}

// Name returns a reference to field name of google_runtimeconfig_config.
func (rc runtimeconfigConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("name"))
}

// Project returns a reference to field project of google_runtimeconfig_config.
func (rc runtimeconfigConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("project"))
}

type runtimeconfigConfigState struct {
	Description string `json:"description"`
	Id          string `json:"id"`
	Name        string `json:"name"`
	Project     string `json:"project"`
}
