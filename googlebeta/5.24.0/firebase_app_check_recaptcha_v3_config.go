// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	firebaseappcheckrecaptchav3config "github.com/golingon/terraproviders/googlebeta/5.24.0/firebaseappcheckrecaptchav3config"
	"io"
)

// NewFirebaseAppCheckRecaptchaV3Config creates a new instance of [FirebaseAppCheckRecaptchaV3Config].
func NewFirebaseAppCheckRecaptchaV3Config(name string, args FirebaseAppCheckRecaptchaV3ConfigArgs) *FirebaseAppCheckRecaptchaV3Config {
	return &FirebaseAppCheckRecaptchaV3Config{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirebaseAppCheckRecaptchaV3Config)(nil)

// FirebaseAppCheckRecaptchaV3Config represents the Terraform resource google_firebase_app_check_recaptcha_v3_config.
type FirebaseAppCheckRecaptchaV3Config struct {
	Name      string
	Args      FirebaseAppCheckRecaptchaV3ConfigArgs
	state     *firebaseAppCheckRecaptchaV3ConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [FirebaseAppCheckRecaptchaV3Config].
func (facrvc *FirebaseAppCheckRecaptchaV3Config) Type() string {
	return "google_firebase_app_check_recaptcha_v3_config"
}

// LocalName returns the local name for [FirebaseAppCheckRecaptchaV3Config].
func (facrvc *FirebaseAppCheckRecaptchaV3Config) LocalName() string {
	return facrvc.Name
}

// Configuration returns the configuration (args) for [FirebaseAppCheckRecaptchaV3Config].
func (facrvc *FirebaseAppCheckRecaptchaV3Config) Configuration() interface{} {
	return facrvc.Args
}

// DependOn is used for other resources to depend on [FirebaseAppCheckRecaptchaV3Config].
func (facrvc *FirebaseAppCheckRecaptchaV3Config) DependOn() terra.Reference {
	return terra.ReferenceResource(facrvc)
}

// Dependencies returns the list of resources [FirebaseAppCheckRecaptchaV3Config] depends_on.
func (facrvc *FirebaseAppCheckRecaptchaV3Config) Dependencies() terra.Dependencies {
	return facrvc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [FirebaseAppCheckRecaptchaV3Config].
func (facrvc *FirebaseAppCheckRecaptchaV3Config) LifecycleManagement() *terra.Lifecycle {
	return facrvc.Lifecycle
}

// Attributes returns the attributes for [FirebaseAppCheckRecaptchaV3Config].
func (facrvc *FirebaseAppCheckRecaptchaV3Config) Attributes() firebaseAppCheckRecaptchaV3ConfigAttributes {
	return firebaseAppCheckRecaptchaV3ConfigAttributes{ref: terra.ReferenceResource(facrvc)}
}

// ImportState imports the given attribute values into [FirebaseAppCheckRecaptchaV3Config]'s state.
func (facrvc *FirebaseAppCheckRecaptchaV3Config) ImportState(av io.Reader) error {
	facrvc.state = &firebaseAppCheckRecaptchaV3ConfigState{}
	if err := json.NewDecoder(av).Decode(facrvc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", facrvc.Type(), facrvc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [FirebaseAppCheckRecaptchaV3Config] has state.
func (facrvc *FirebaseAppCheckRecaptchaV3Config) State() (*firebaseAppCheckRecaptchaV3ConfigState, bool) {
	return facrvc.state, facrvc.state != nil
}

// StateMust returns the state for [FirebaseAppCheckRecaptchaV3Config]. Panics if the state is nil.
func (facrvc *FirebaseAppCheckRecaptchaV3Config) StateMust() *firebaseAppCheckRecaptchaV3ConfigState {
	if facrvc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", facrvc.Type(), facrvc.LocalName()))
	}
	return facrvc.state
}

// FirebaseAppCheckRecaptchaV3ConfigArgs contains the configurations for google_firebase_app_check_recaptcha_v3_config.
type FirebaseAppCheckRecaptchaV3ConfigArgs struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SiteSecret: string, required
	SiteSecret terra.StringValue `hcl:"site_secret,attr" validate:"required"`
	// TokenTtl: string, optional
	TokenTtl terra.StringValue `hcl:"token_ttl,attr"`
	// Timeouts: optional
	Timeouts *firebaseappcheckrecaptchav3config.Timeouts `hcl:"timeouts,block"`
}
type firebaseAppCheckRecaptchaV3ConfigAttributes struct {
	ref terra.Reference
}

// AppId returns a reference to field app_id of google_firebase_app_check_recaptcha_v3_config.
func (facrvc firebaseAppCheckRecaptchaV3ConfigAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(facrvc.ref.Append("app_id"))
}

// Id returns a reference to field id of google_firebase_app_check_recaptcha_v3_config.
func (facrvc firebaseAppCheckRecaptchaV3ConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(facrvc.ref.Append("id"))
}

// Name returns a reference to field name of google_firebase_app_check_recaptcha_v3_config.
func (facrvc firebaseAppCheckRecaptchaV3ConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(facrvc.ref.Append("name"))
}

// Project returns a reference to field project of google_firebase_app_check_recaptcha_v3_config.
func (facrvc firebaseAppCheckRecaptchaV3ConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(facrvc.ref.Append("project"))
}

// SiteSecret returns a reference to field site_secret of google_firebase_app_check_recaptcha_v3_config.
func (facrvc firebaseAppCheckRecaptchaV3ConfigAttributes) SiteSecret() terra.StringValue {
	return terra.ReferenceAsString(facrvc.ref.Append("site_secret"))
}

// SiteSecretSet returns a reference to field site_secret_set of google_firebase_app_check_recaptcha_v3_config.
func (facrvc firebaseAppCheckRecaptchaV3ConfigAttributes) SiteSecretSet() terra.BoolValue {
	return terra.ReferenceAsBool(facrvc.ref.Append("site_secret_set"))
}

// TokenTtl returns a reference to field token_ttl of google_firebase_app_check_recaptcha_v3_config.
func (facrvc firebaseAppCheckRecaptchaV3ConfigAttributes) TokenTtl() terra.StringValue {
	return terra.ReferenceAsString(facrvc.ref.Append("token_ttl"))
}

func (facrvc firebaseAppCheckRecaptchaV3ConfigAttributes) Timeouts() firebaseappcheckrecaptchav3config.TimeoutsAttributes {
	return terra.ReferenceAsSingle[firebaseappcheckrecaptchav3config.TimeoutsAttributes](facrvc.ref.Append("timeouts"))
}

type firebaseAppCheckRecaptchaV3ConfigState struct {
	AppId         string                                           `json:"app_id"`
	Id            string                                           `json:"id"`
	Name          string                                           `json:"name"`
	Project       string                                           `json:"project"`
	SiteSecret    string                                           `json:"site_secret"`
	SiteSecretSet bool                                             `json:"site_secret_set"`
	TokenTtl      string                                           `json:"token_ttl"`
	Timeouts      *firebaseappcheckrecaptchav3config.TimeoutsState `json:"timeouts"`
}
