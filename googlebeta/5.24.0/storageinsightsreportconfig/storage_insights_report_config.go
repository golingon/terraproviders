// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package storageinsightsreportconfig

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CsvOptions struct {
	// Delimiter: string, optional
	Delimiter terra.StringValue `hcl:"delimiter,attr"`
	// HeaderRequired: bool, optional
	HeaderRequired terra.BoolValue `hcl:"header_required,attr"`
	// RecordSeparator: string, optional
	RecordSeparator terra.StringValue `hcl:"record_separator,attr"`
}

type FrequencyOptions struct {
	// Frequency: string, required
	Frequency terra.StringValue `hcl:"frequency,attr" validate:"required"`
	// EndDate: required
	EndDate *EndDate `hcl:"end_date,block" validate:"required"`
	// StartDate: required
	StartDate *StartDate `hcl:"start_date,block" validate:"required"`
}

type EndDate struct {
	// Day: number, required
	Day terra.NumberValue `hcl:"day,attr" validate:"required"`
	// Month: number, required
	Month terra.NumberValue `hcl:"month,attr" validate:"required"`
	// Year: number, required
	Year terra.NumberValue `hcl:"year,attr" validate:"required"`
}

type StartDate struct {
	// Day: number, required
	Day terra.NumberValue `hcl:"day,attr" validate:"required"`
	// Month: number, required
	Month terra.NumberValue `hcl:"month,attr" validate:"required"`
	// Year: number, required
	Year terra.NumberValue `hcl:"year,attr" validate:"required"`
}

type ObjectMetadataReportOptions struct {
	// MetadataFields: list of string, required
	MetadataFields terra.ListValue[terra.StringValue] `hcl:"metadata_fields,attr" validate:"required"`
	// StorageDestinationOptions: required
	StorageDestinationOptions *StorageDestinationOptions `hcl:"storage_destination_options,block" validate:"required"`
	// StorageFilters: optional
	StorageFilters *StorageFilters `hcl:"storage_filters,block"`
}

type StorageDestinationOptions struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// DestinationPath: string, optional
	DestinationPath terra.StringValue `hcl:"destination_path,attr"`
}

type StorageFilters struct {
	// Bucket: string, optional
	Bucket terra.StringValue `hcl:"bucket,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CsvOptionsAttributes struct {
	ref terra.Reference
}

func (co CsvOptionsAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co CsvOptionsAttributes) InternalWithRef(ref terra.Reference) CsvOptionsAttributes {
	return CsvOptionsAttributes{ref: ref}
}

func (co CsvOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co CsvOptionsAttributes) Delimiter() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("delimiter"))
}

func (co CsvOptionsAttributes) HeaderRequired() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("header_required"))
}

func (co CsvOptionsAttributes) RecordSeparator() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("record_separator"))
}

type FrequencyOptionsAttributes struct {
	ref terra.Reference
}

func (fo FrequencyOptionsAttributes) InternalRef() (terra.Reference, error) {
	return fo.ref, nil
}

func (fo FrequencyOptionsAttributes) InternalWithRef(ref terra.Reference) FrequencyOptionsAttributes {
	return FrequencyOptionsAttributes{ref: ref}
}

func (fo FrequencyOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fo.ref.InternalTokens()
}

func (fo FrequencyOptionsAttributes) Frequency() terra.StringValue {
	return terra.ReferenceAsString(fo.ref.Append("frequency"))
}

func (fo FrequencyOptionsAttributes) EndDate() terra.ListValue[EndDateAttributes] {
	return terra.ReferenceAsList[EndDateAttributes](fo.ref.Append("end_date"))
}

func (fo FrequencyOptionsAttributes) StartDate() terra.ListValue[StartDateAttributes] {
	return terra.ReferenceAsList[StartDateAttributes](fo.ref.Append("start_date"))
}

type EndDateAttributes struct {
	ref terra.Reference
}

func (ed EndDateAttributes) InternalRef() (terra.Reference, error) {
	return ed.ref, nil
}

func (ed EndDateAttributes) InternalWithRef(ref terra.Reference) EndDateAttributes {
	return EndDateAttributes{ref: ref}
}

func (ed EndDateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ed.ref.InternalTokens()
}

func (ed EndDateAttributes) Day() terra.NumberValue {
	return terra.ReferenceAsNumber(ed.ref.Append("day"))
}

func (ed EndDateAttributes) Month() terra.NumberValue {
	return terra.ReferenceAsNumber(ed.ref.Append("month"))
}

func (ed EndDateAttributes) Year() terra.NumberValue {
	return terra.ReferenceAsNumber(ed.ref.Append("year"))
}

type StartDateAttributes struct {
	ref terra.Reference
}

func (sd StartDateAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd StartDateAttributes) InternalWithRef(ref terra.Reference) StartDateAttributes {
	return StartDateAttributes{ref: ref}
}

func (sd StartDateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd StartDateAttributes) Day() terra.NumberValue {
	return terra.ReferenceAsNumber(sd.ref.Append("day"))
}

func (sd StartDateAttributes) Month() terra.NumberValue {
	return terra.ReferenceAsNumber(sd.ref.Append("month"))
}

func (sd StartDateAttributes) Year() terra.NumberValue {
	return terra.ReferenceAsNumber(sd.ref.Append("year"))
}

type ObjectMetadataReportOptionsAttributes struct {
	ref terra.Reference
}

func (omro ObjectMetadataReportOptionsAttributes) InternalRef() (terra.Reference, error) {
	return omro.ref, nil
}

func (omro ObjectMetadataReportOptionsAttributes) InternalWithRef(ref terra.Reference) ObjectMetadataReportOptionsAttributes {
	return ObjectMetadataReportOptionsAttributes{ref: ref}
}

func (omro ObjectMetadataReportOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return omro.ref.InternalTokens()
}

func (omro ObjectMetadataReportOptionsAttributes) MetadataFields() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](omro.ref.Append("metadata_fields"))
}

func (omro ObjectMetadataReportOptionsAttributes) StorageDestinationOptions() terra.ListValue[StorageDestinationOptionsAttributes] {
	return terra.ReferenceAsList[StorageDestinationOptionsAttributes](omro.ref.Append("storage_destination_options"))
}

func (omro ObjectMetadataReportOptionsAttributes) StorageFilters() terra.ListValue[StorageFiltersAttributes] {
	return terra.ReferenceAsList[StorageFiltersAttributes](omro.ref.Append("storage_filters"))
}

type StorageDestinationOptionsAttributes struct {
	ref terra.Reference
}

func (sdo StorageDestinationOptionsAttributes) InternalRef() (terra.Reference, error) {
	return sdo.ref, nil
}

func (sdo StorageDestinationOptionsAttributes) InternalWithRef(ref terra.Reference) StorageDestinationOptionsAttributes {
	return StorageDestinationOptionsAttributes{ref: ref}
}

func (sdo StorageDestinationOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sdo.ref.InternalTokens()
}

func (sdo StorageDestinationOptionsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(sdo.ref.Append("bucket"))
}

func (sdo StorageDestinationOptionsAttributes) DestinationPath() terra.StringValue {
	return terra.ReferenceAsString(sdo.ref.Append("destination_path"))
}

type StorageFiltersAttributes struct {
	ref terra.Reference
}

func (sf StorageFiltersAttributes) InternalRef() (terra.Reference, error) {
	return sf.ref, nil
}

func (sf StorageFiltersAttributes) InternalWithRef(ref terra.Reference) StorageFiltersAttributes {
	return StorageFiltersAttributes{ref: ref}
}

func (sf StorageFiltersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sf.ref.InternalTokens()
}

func (sf StorageFiltersAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("bucket"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CsvOptionsState struct {
	Delimiter       string `json:"delimiter"`
	HeaderRequired  bool   `json:"header_required"`
	RecordSeparator string `json:"record_separator"`
}

type FrequencyOptionsState struct {
	Frequency string           `json:"frequency"`
	EndDate   []EndDateState   `json:"end_date"`
	StartDate []StartDateState `json:"start_date"`
}

type EndDateState struct {
	Day   float64 `json:"day"`
	Month float64 `json:"month"`
	Year  float64 `json:"year"`
}

type StartDateState struct {
	Day   float64 `json:"day"`
	Month float64 `json:"month"`
	Year  float64 `json:"year"`
}

type ObjectMetadataReportOptionsState struct {
	MetadataFields            []string                         `json:"metadata_fields"`
	StorageDestinationOptions []StorageDestinationOptionsState `json:"storage_destination_options"`
	StorageFilters            []StorageFiltersState            `json:"storage_filters"`
}

type StorageDestinationOptionsState struct {
	Bucket          string `json:"bucket"`
	DestinationPath string `json:"destination_path"`
}

type StorageFiltersState struct {
	Bucket string `json:"bucket"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
