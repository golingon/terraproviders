// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	netappvolumereplication "github.com/golingon/terraproviders/googlebeta/5.24.0/netappvolumereplication"
	"io"
)

// NewNetappVolumeReplication creates a new instance of [NetappVolumeReplication].
func NewNetappVolumeReplication(name string, args NetappVolumeReplicationArgs) *NetappVolumeReplication {
	return &NetappVolumeReplication{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetappVolumeReplication)(nil)

// NetappVolumeReplication represents the Terraform resource google_netapp_volume_replication.
type NetappVolumeReplication struct {
	Name      string
	Args      NetappVolumeReplicationArgs
	state     *netappVolumeReplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetappVolumeReplication].
func (nvr *NetappVolumeReplication) Type() string {
	return "google_netapp_volume_replication"
}

// LocalName returns the local name for [NetappVolumeReplication].
func (nvr *NetappVolumeReplication) LocalName() string {
	return nvr.Name
}

// Configuration returns the configuration (args) for [NetappVolumeReplication].
func (nvr *NetappVolumeReplication) Configuration() interface{} {
	return nvr.Args
}

// DependOn is used for other resources to depend on [NetappVolumeReplication].
func (nvr *NetappVolumeReplication) DependOn() terra.Reference {
	return terra.ReferenceResource(nvr)
}

// Dependencies returns the list of resources [NetappVolumeReplication] depends_on.
func (nvr *NetappVolumeReplication) Dependencies() terra.Dependencies {
	return nvr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetappVolumeReplication].
func (nvr *NetappVolumeReplication) LifecycleManagement() *terra.Lifecycle {
	return nvr.Lifecycle
}

// Attributes returns the attributes for [NetappVolumeReplication].
func (nvr *NetappVolumeReplication) Attributes() netappVolumeReplicationAttributes {
	return netappVolumeReplicationAttributes{ref: terra.ReferenceResource(nvr)}
}

// ImportState imports the given attribute values into [NetappVolumeReplication]'s state.
func (nvr *NetappVolumeReplication) ImportState(av io.Reader) error {
	nvr.state = &netappVolumeReplicationState{}
	if err := json.NewDecoder(av).Decode(nvr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nvr.Type(), nvr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetappVolumeReplication] has state.
func (nvr *NetappVolumeReplication) State() (*netappVolumeReplicationState, bool) {
	return nvr.state, nvr.state != nil
}

// StateMust returns the state for [NetappVolumeReplication]. Panics if the state is nil.
func (nvr *NetappVolumeReplication) StateMust() *netappVolumeReplicationState {
	if nvr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nvr.Type(), nvr.LocalName()))
	}
	return nvr.state
}

// NetappVolumeReplicationArgs contains the configurations for google_netapp_volume_replication.
type NetappVolumeReplicationArgs struct {
	// DeleteDestinationVolume: bool, optional
	DeleteDestinationVolume terra.BoolValue `hcl:"delete_destination_volume,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ForceStopping: bool, optional
	ForceStopping terra.BoolValue `hcl:"force_stopping,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ReplicationEnabled: bool, optional
	ReplicationEnabled terra.BoolValue `hcl:"replication_enabled,attr"`
	// ReplicationSchedule: string, required
	ReplicationSchedule terra.StringValue `hcl:"replication_schedule,attr" validate:"required"`
	// VolumeName: string, required
	VolumeName terra.StringValue `hcl:"volume_name,attr" validate:"required"`
	// WaitForMirror: bool, optional
	WaitForMirror terra.BoolValue `hcl:"wait_for_mirror,attr"`
	// TransferStats: min=0
	TransferStats []netappvolumereplication.TransferStats `hcl:"transfer_stats,block" validate:"min=0"`
	// DestinationVolumeParameters: optional
	DestinationVolumeParameters *netappvolumereplication.DestinationVolumeParameters `hcl:"destination_volume_parameters,block"`
	// Timeouts: optional
	Timeouts *netappvolumereplication.Timeouts `hcl:"timeouts,block"`
}
type netappVolumeReplicationAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(nvr.ref.Append("create_time"))
}

// DeleteDestinationVolume returns a reference to field delete_destination_volume of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) DeleteDestinationVolume() terra.BoolValue {
	return terra.ReferenceAsBool(nvr.ref.Append("delete_destination_volume"))
}

// Description returns a reference to field description of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(nvr.ref.Append("description"))
}

// DestinationVolume returns a reference to field destination_volume of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) DestinationVolume() terra.StringValue {
	return terra.ReferenceAsString(nvr.ref.Append("destination_volume"))
}

// EffectiveLabels returns a reference to field effective_labels of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nvr.ref.Append("effective_labels"))
}

// ForceStopping returns a reference to field force_stopping of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) ForceStopping() terra.BoolValue {
	return terra.ReferenceAsBool(nvr.ref.Append("force_stopping"))
}

// Healthy returns a reference to field healthy of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) Healthy() terra.BoolValue {
	return terra.ReferenceAsBool(nvr.ref.Append("healthy"))
}

// Id returns a reference to field id of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nvr.ref.Append("id"))
}

// Labels returns a reference to field labels of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nvr.ref.Append("labels"))
}

// Location returns a reference to field location of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(nvr.ref.Append("location"))
}

// MirrorState returns a reference to field mirror_state of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) MirrorState() terra.StringValue {
	return terra.ReferenceAsString(nvr.ref.Append("mirror_state"))
}

// Name returns a reference to field name of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nvr.ref.Append("name"))
}

// Project returns a reference to field project of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(nvr.ref.Append("project"))
}

// ReplicationEnabled returns a reference to field replication_enabled of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) ReplicationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(nvr.ref.Append("replication_enabled"))
}

// ReplicationSchedule returns a reference to field replication_schedule of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) ReplicationSchedule() terra.StringValue {
	return terra.ReferenceAsString(nvr.ref.Append("replication_schedule"))
}

// Role returns a reference to field role of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(nvr.ref.Append("role"))
}

// SourceVolume returns a reference to field source_volume of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) SourceVolume() terra.StringValue {
	return terra.ReferenceAsString(nvr.ref.Append("source_volume"))
}

// State returns a reference to field state of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(nvr.ref.Append("state"))
}

// StateDetails returns a reference to field state_details of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) StateDetails() terra.StringValue {
	return terra.ReferenceAsString(nvr.ref.Append("state_details"))
}

// TerraformLabels returns a reference to field terraform_labels of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nvr.ref.Append("terraform_labels"))
}

// VolumeName returns a reference to field volume_name of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) VolumeName() terra.StringValue {
	return terra.ReferenceAsString(nvr.ref.Append("volume_name"))
}

// WaitForMirror returns a reference to field wait_for_mirror of google_netapp_volume_replication.
func (nvr netappVolumeReplicationAttributes) WaitForMirror() terra.BoolValue {
	return terra.ReferenceAsBool(nvr.ref.Append("wait_for_mirror"))
}

func (nvr netappVolumeReplicationAttributes) TransferStats() terra.ListValue[netappvolumereplication.TransferStatsAttributes] {
	return terra.ReferenceAsList[netappvolumereplication.TransferStatsAttributes](nvr.ref.Append("transfer_stats"))
}

func (nvr netappVolumeReplicationAttributes) DestinationVolumeParameters() terra.ListValue[netappvolumereplication.DestinationVolumeParametersAttributes] {
	return terra.ReferenceAsList[netappvolumereplication.DestinationVolumeParametersAttributes](nvr.ref.Append("destination_volume_parameters"))
}

func (nvr netappVolumeReplicationAttributes) Timeouts() netappvolumereplication.TimeoutsAttributes {
	return terra.ReferenceAsSingle[netappvolumereplication.TimeoutsAttributes](nvr.ref.Append("timeouts"))
}

type netappVolumeReplicationState struct {
	CreateTime                  string                                                     `json:"create_time"`
	DeleteDestinationVolume     bool                                                       `json:"delete_destination_volume"`
	Description                 string                                                     `json:"description"`
	DestinationVolume           string                                                     `json:"destination_volume"`
	EffectiveLabels             map[string]string                                          `json:"effective_labels"`
	ForceStopping               bool                                                       `json:"force_stopping"`
	Healthy                     bool                                                       `json:"healthy"`
	Id                          string                                                     `json:"id"`
	Labels                      map[string]string                                          `json:"labels"`
	Location                    string                                                     `json:"location"`
	MirrorState                 string                                                     `json:"mirror_state"`
	Name                        string                                                     `json:"name"`
	Project                     string                                                     `json:"project"`
	ReplicationEnabled          bool                                                       `json:"replication_enabled"`
	ReplicationSchedule         string                                                     `json:"replication_schedule"`
	Role                        string                                                     `json:"role"`
	SourceVolume                string                                                     `json:"source_volume"`
	State                       string                                                     `json:"state"`
	StateDetails                string                                                     `json:"state_details"`
	TerraformLabels             map[string]string                                          `json:"terraform_labels"`
	VolumeName                  string                                                     `json:"volume_name"`
	WaitForMirror               bool                                                       `json:"wait_for_mirror"`
	TransferStats               []netappvolumereplication.TransferStatsState               `json:"transfer_stats"`
	DestinationVolumeParameters []netappvolumereplication.DestinationVolumeParametersState `json:"destination_volume_parameters"`
	Timeouts                    *netappvolumereplication.TimeoutsState                     `json:"timeouts"`
}
