// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package clouddomainsregistration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ContactSettings struct {
	// Privacy: string, required
	Privacy terra.StringValue `hcl:"privacy,attr" validate:"required"`
	// AdminContact: required
	AdminContact *AdminContact `hcl:"admin_contact,block" validate:"required"`
	// RegistrantContact: required
	RegistrantContact *RegistrantContact `hcl:"registrant_contact,block" validate:"required"`
	// TechnicalContact: required
	TechnicalContact *TechnicalContact `hcl:"technical_contact,block" validate:"required"`
}

type AdminContact struct {
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// FaxNumber: string, optional
	FaxNumber terra.StringValue `hcl:"fax_number,attr"`
	// PhoneNumber: string, required
	PhoneNumber terra.StringValue `hcl:"phone_number,attr" validate:"required"`
	// AdminContactPostalAddress: required
	PostalAddress *AdminContactPostalAddress `hcl:"postal_address,block" validate:"required"`
}

type AdminContactPostalAddress struct {
	// AddressLines: list of string, optional
	AddressLines terra.ListValue[terra.StringValue] `hcl:"address_lines,attr"`
	// AdministrativeArea: string, optional
	AdministrativeArea terra.StringValue `hcl:"administrative_area,attr"`
	// Locality: string, optional
	Locality terra.StringValue `hcl:"locality,attr"`
	// Organization: string, optional
	Organization terra.StringValue `hcl:"organization,attr"`
	// PostalCode: string, optional
	PostalCode terra.StringValue `hcl:"postal_code,attr"`
	// Recipients: list of string, optional
	Recipients terra.ListValue[terra.StringValue] `hcl:"recipients,attr"`
	// RegionCode: string, required
	RegionCode terra.StringValue `hcl:"region_code,attr" validate:"required"`
}

type RegistrantContact struct {
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// FaxNumber: string, optional
	FaxNumber terra.StringValue `hcl:"fax_number,attr"`
	// PhoneNumber: string, required
	PhoneNumber terra.StringValue `hcl:"phone_number,attr" validate:"required"`
	// RegistrantContactPostalAddress: required
	PostalAddress *RegistrantContactPostalAddress `hcl:"postal_address,block" validate:"required"`
}

type RegistrantContactPostalAddress struct {
	// AddressLines: list of string, optional
	AddressLines terra.ListValue[terra.StringValue] `hcl:"address_lines,attr"`
	// AdministrativeArea: string, optional
	AdministrativeArea terra.StringValue `hcl:"administrative_area,attr"`
	// Locality: string, optional
	Locality terra.StringValue `hcl:"locality,attr"`
	// Organization: string, optional
	Organization terra.StringValue `hcl:"organization,attr"`
	// PostalCode: string, optional
	PostalCode terra.StringValue `hcl:"postal_code,attr"`
	// Recipients: list of string, optional
	Recipients terra.ListValue[terra.StringValue] `hcl:"recipients,attr"`
	// RegionCode: string, required
	RegionCode terra.StringValue `hcl:"region_code,attr" validate:"required"`
}

type TechnicalContact struct {
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// FaxNumber: string, optional
	FaxNumber terra.StringValue `hcl:"fax_number,attr"`
	// PhoneNumber: string, required
	PhoneNumber terra.StringValue `hcl:"phone_number,attr" validate:"required"`
	// TechnicalContactPostalAddress: required
	PostalAddress *TechnicalContactPostalAddress `hcl:"postal_address,block" validate:"required"`
}

type TechnicalContactPostalAddress struct {
	// AddressLines: list of string, optional
	AddressLines terra.ListValue[terra.StringValue] `hcl:"address_lines,attr"`
	// AdministrativeArea: string, optional
	AdministrativeArea terra.StringValue `hcl:"administrative_area,attr"`
	// Locality: string, optional
	Locality terra.StringValue `hcl:"locality,attr"`
	// Organization: string, optional
	Organization terra.StringValue `hcl:"organization,attr"`
	// PostalCode: string, optional
	PostalCode terra.StringValue `hcl:"postal_code,attr"`
	// Recipients: list of string, optional
	Recipients terra.ListValue[terra.StringValue] `hcl:"recipients,attr"`
	// RegionCode: string, required
	RegionCode terra.StringValue `hcl:"region_code,attr" validate:"required"`
}

type DnsSettings struct {
	// CustomDns: optional
	CustomDns *CustomDns `hcl:"custom_dns,block"`
	// GlueRecords: min=0
	GlueRecords []GlueRecords `hcl:"glue_records,block" validate:"min=0"`
}

type CustomDns struct {
	// NameServers: list of string, required
	NameServers terra.ListValue[terra.StringValue] `hcl:"name_servers,attr" validate:"required"`
	// DsRecords: min=0
	DsRecords []DsRecords `hcl:"ds_records,block" validate:"min=0"`
}

type DsRecords struct {
	// Algorithm: string, optional
	Algorithm terra.StringValue `hcl:"algorithm,attr"`
	// Digest: string, optional
	Digest terra.StringValue `hcl:"digest,attr"`
	// DigestType: string, optional
	DigestType terra.StringValue `hcl:"digest_type,attr"`
	// KeyTag: number, optional
	KeyTag terra.NumberValue `hcl:"key_tag,attr"`
}

type GlueRecords struct {
	// HostName: string, required
	HostName terra.StringValue `hcl:"host_name,attr" validate:"required"`
	// Ipv4Addresses: list of string, optional
	Ipv4Addresses terra.ListValue[terra.StringValue] `hcl:"ipv4_addresses,attr"`
	// Ipv6Addresses: list of string, optional
	Ipv6Addresses terra.ListValue[terra.StringValue] `hcl:"ipv6_addresses,attr"`
}

type ManagementSettings struct {
	// PreferredRenewalMethod: string, optional
	PreferredRenewalMethod terra.StringValue `hcl:"preferred_renewal_method,attr"`
	// TransferLockState: string, optional
	TransferLockState terra.StringValue `hcl:"transfer_lock_state,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type YearlyPrice struct {
	// CurrencyCode: string, optional
	CurrencyCode terra.StringValue `hcl:"currency_code,attr"`
	// Units: string, optional
	Units terra.StringValue `hcl:"units,attr"`
}

type ContactSettingsAttributes struct {
	ref terra.Reference
}

func (cs ContactSettingsAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs ContactSettingsAttributes) InternalWithRef(ref terra.Reference) ContactSettingsAttributes {
	return ContactSettingsAttributes{ref: ref}
}

func (cs ContactSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs ContactSettingsAttributes) Privacy() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("privacy"))
}

func (cs ContactSettingsAttributes) AdminContact() terra.ListValue[AdminContactAttributes] {
	return terra.ReferenceAsList[AdminContactAttributes](cs.ref.Append("admin_contact"))
}

func (cs ContactSettingsAttributes) RegistrantContact() terra.ListValue[RegistrantContactAttributes] {
	return terra.ReferenceAsList[RegistrantContactAttributes](cs.ref.Append("registrant_contact"))
}

func (cs ContactSettingsAttributes) TechnicalContact() terra.ListValue[TechnicalContactAttributes] {
	return terra.ReferenceAsList[TechnicalContactAttributes](cs.ref.Append("technical_contact"))
}

type AdminContactAttributes struct {
	ref terra.Reference
}

func (ac AdminContactAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AdminContactAttributes) InternalWithRef(ref terra.Reference) AdminContactAttributes {
	return AdminContactAttributes{ref: ref}
}

func (ac AdminContactAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AdminContactAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("email"))
}

func (ac AdminContactAttributes) FaxNumber() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("fax_number"))
}

func (ac AdminContactAttributes) PhoneNumber() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("phone_number"))
}

func (ac AdminContactAttributes) PostalAddress() terra.ListValue[AdminContactPostalAddressAttributes] {
	return terra.ReferenceAsList[AdminContactPostalAddressAttributes](ac.ref.Append("postal_address"))
}

type AdminContactPostalAddressAttributes struct {
	ref terra.Reference
}

func (pa AdminContactPostalAddressAttributes) InternalRef() (terra.Reference, error) {
	return pa.ref, nil
}

func (pa AdminContactPostalAddressAttributes) InternalWithRef(ref terra.Reference) AdminContactPostalAddressAttributes {
	return AdminContactPostalAddressAttributes{ref: ref}
}

func (pa AdminContactPostalAddressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pa.ref.InternalTokens()
}

func (pa AdminContactPostalAddressAttributes) AddressLines() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("address_lines"))
}

func (pa AdminContactPostalAddressAttributes) AdministrativeArea() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("administrative_area"))
}

func (pa AdminContactPostalAddressAttributes) Locality() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("locality"))
}

func (pa AdminContactPostalAddressAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("organization"))
}

func (pa AdminContactPostalAddressAttributes) PostalCode() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("postal_code"))
}

func (pa AdminContactPostalAddressAttributes) Recipients() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("recipients"))
}

func (pa AdminContactPostalAddressAttributes) RegionCode() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("region_code"))
}

type RegistrantContactAttributes struct {
	ref terra.Reference
}

func (rc RegistrantContactAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc RegistrantContactAttributes) InternalWithRef(ref terra.Reference) RegistrantContactAttributes {
	return RegistrantContactAttributes{ref: ref}
}

func (rc RegistrantContactAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc RegistrantContactAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("email"))
}

func (rc RegistrantContactAttributes) FaxNumber() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("fax_number"))
}

func (rc RegistrantContactAttributes) PhoneNumber() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("phone_number"))
}

func (rc RegistrantContactAttributes) PostalAddress() terra.ListValue[RegistrantContactPostalAddressAttributes] {
	return terra.ReferenceAsList[RegistrantContactPostalAddressAttributes](rc.ref.Append("postal_address"))
}

type RegistrantContactPostalAddressAttributes struct {
	ref terra.Reference
}

func (pa RegistrantContactPostalAddressAttributes) InternalRef() (terra.Reference, error) {
	return pa.ref, nil
}

func (pa RegistrantContactPostalAddressAttributes) InternalWithRef(ref terra.Reference) RegistrantContactPostalAddressAttributes {
	return RegistrantContactPostalAddressAttributes{ref: ref}
}

func (pa RegistrantContactPostalAddressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pa.ref.InternalTokens()
}

func (pa RegistrantContactPostalAddressAttributes) AddressLines() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("address_lines"))
}

func (pa RegistrantContactPostalAddressAttributes) AdministrativeArea() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("administrative_area"))
}

func (pa RegistrantContactPostalAddressAttributes) Locality() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("locality"))
}

func (pa RegistrantContactPostalAddressAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("organization"))
}

func (pa RegistrantContactPostalAddressAttributes) PostalCode() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("postal_code"))
}

func (pa RegistrantContactPostalAddressAttributes) Recipients() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("recipients"))
}

func (pa RegistrantContactPostalAddressAttributes) RegionCode() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("region_code"))
}

type TechnicalContactAttributes struct {
	ref terra.Reference
}

func (tc TechnicalContactAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TechnicalContactAttributes) InternalWithRef(ref terra.Reference) TechnicalContactAttributes {
	return TechnicalContactAttributes{ref: ref}
}

func (tc TechnicalContactAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TechnicalContactAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("email"))
}

func (tc TechnicalContactAttributes) FaxNumber() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("fax_number"))
}

func (tc TechnicalContactAttributes) PhoneNumber() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("phone_number"))
}

func (tc TechnicalContactAttributes) PostalAddress() terra.ListValue[TechnicalContactPostalAddressAttributes] {
	return terra.ReferenceAsList[TechnicalContactPostalAddressAttributes](tc.ref.Append("postal_address"))
}

type TechnicalContactPostalAddressAttributes struct {
	ref terra.Reference
}

func (pa TechnicalContactPostalAddressAttributes) InternalRef() (terra.Reference, error) {
	return pa.ref, nil
}

func (pa TechnicalContactPostalAddressAttributes) InternalWithRef(ref terra.Reference) TechnicalContactPostalAddressAttributes {
	return TechnicalContactPostalAddressAttributes{ref: ref}
}

func (pa TechnicalContactPostalAddressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pa.ref.InternalTokens()
}

func (pa TechnicalContactPostalAddressAttributes) AddressLines() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("address_lines"))
}

func (pa TechnicalContactPostalAddressAttributes) AdministrativeArea() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("administrative_area"))
}

func (pa TechnicalContactPostalAddressAttributes) Locality() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("locality"))
}

func (pa TechnicalContactPostalAddressAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("organization"))
}

func (pa TechnicalContactPostalAddressAttributes) PostalCode() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("postal_code"))
}

func (pa TechnicalContactPostalAddressAttributes) Recipients() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("recipients"))
}

func (pa TechnicalContactPostalAddressAttributes) RegionCode() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("region_code"))
}

type DnsSettingsAttributes struct {
	ref terra.Reference
}

func (ds DnsSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DnsSettingsAttributes) InternalWithRef(ref terra.Reference) DnsSettingsAttributes {
	return DnsSettingsAttributes{ref: ref}
}

func (ds DnsSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DnsSettingsAttributes) CustomDns() terra.ListValue[CustomDnsAttributes] {
	return terra.ReferenceAsList[CustomDnsAttributes](ds.ref.Append("custom_dns"))
}

func (ds DnsSettingsAttributes) GlueRecords() terra.ListValue[GlueRecordsAttributes] {
	return terra.ReferenceAsList[GlueRecordsAttributes](ds.ref.Append("glue_records"))
}

type CustomDnsAttributes struct {
	ref terra.Reference
}

func (cd CustomDnsAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd CustomDnsAttributes) InternalWithRef(ref terra.Reference) CustomDnsAttributes {
	return CustomDnsAttributes{ref: ref}
}

func (cd CustomDnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd CustomDnsAttributes) NameServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cd.ref.Append("name_servers"))
}

func (cd CustomDnsAttributes) DsRecords() terra.ListValue[DsRecordsAttributes] {
	return terra.ReferenceAsList[DsRecordsAttributes](cd.ref.Append("ds_records"))
}

type DsRecordsAttributes struct {
	ref terra.Reference
}

func (dr DsRecordsAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr DsRecordsAttributes) InternalWithRef(ref terra.Reference) DsRecordsAttributes {
	return DsRecordsAttributes{ref: ref}
}

func (dr DsRecordsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr DsRecordsAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("algorithm"))
}

func (dr DsRecordsAttributes) Digest() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("digest"))
}

func (dr DsRecordsAttributes) DigestType() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("digest_type"))
}

func (dr DsRecordsAttributes) KeyTag() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("key_tag"))
}

type GlueRecordsAttributes struct {
	ref terra.Reference
}

func (gr GlueRecordsAttributes) InternalRef() (terra.Reference, error) {
	return gr.ref, nil
}

func (gr GlueRecordsAttributes) InternalWithRef(ref terra.Reference) GlueRecordsAttributes {
	return GlueRecordsAttributes{ref: ref}
}

func (gr GlueRecordsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gr.ref.InternalTokens()
}

func (gr GlueRecordsAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(gr.ref.Append("host_name"))
}

func (gr GlueRecordsAttributes) Ipv4Addresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gr.ref.Append("ipv4_addresses"))
}

func (gr GlueRecordsAttributes) Ipv6Addresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gr.ref.Append("ipv6_addresses"))
}

type ManagementSettingsAttributes struct {
	ref terra.Reference
}

func (ms ManagementSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms ManagementSettingsAttributes) InternalWithRef(ref terra.Reference) ManagementSettingsAttributes {
	return ManagementSettingsAttributes{ref: ref}
}

func (ms ManagementSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms ManagementSettingsAttributes) PreferredRenewalMethod() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("preferred_renewal_method"))
}

func (ms ManagementSettingsAttributes) RenewalMethod() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("renewal_method"))
}

func (ms ManagementSettingsAttributes) TransferLockState() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("transfer_lock_state"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type YearlyPriceAttributes struct {
	ref terra.Reference
}

func (yp YearlyPriceAttributes) InternalRef() (terra.Reference, error) {
	return yp.ref, nil
}

func (yp YearlyPriceAttributes) InternalWithRef(ref terra.Reference) YearlyPriceAttributes {
	return YearlyPriceAttributes{ref: ref}
}

func (yp YearlyPriceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return yp.ref.InternalTokens()
}

func (yp YearlyPriceAttributes) CurrencyCode() terra.StringValue {
	return terra.ReferenceAsString(yp.ref.Append("currency_code"))
}

func (yp YearlyPriceAttributes) Units() terra.StringValue {
	return terra.ReferenceAsString(yp.ref.Append("units"))
}

type ContactSettingsState struct {
	Privacy           string                   `json:"privacy"`
	AdminContact      []AdminContactState      `json:"admin_contact"`
	RegistrantContact []RegistrantContactState `json:"registrant_contact"`
	TechnicalContact  []TechnicalContactState  `json:"technical_contact"`
}

type AdminContactState struct {
	Email         string                           `json:"email"`
	FaxNumber     string                           `json:"fax_number"`
	PhoneNumber   string                           `json:"phone_number"`
	PostalAddress []AdminContactPostalAddressState `json:"postal_address"`
}

type AdminContactPostalAddressState struct {
	AddressLines       []string `json:"address_lines"`
	AdministrativeArea string   `json:"administrative_area"`
	Locality           string   `json:"locality"`
	Organization       string   `json:"organization"`
	PostalCode         string   `json:"postal_code"`
	Recipients         []string `json:"recipients"`
	RegionCode         string   `json:"region_code"`
}

type RegistrantContactState struct {
	Email         string                                `json:"email"`
	FaxNumber     string                                `json:"fax_number"`
	PhoneNumber   string                                `json:"phone_number"`
	PostalAddress []RegistrantContactPostalAddressState `json:"postal_address"`
}

type RegistrantContactPostalAddressState struct {
	AddressLines       []string `json:"address_lines"`
	AdministrativeArea string   `json:"administrative_area"`
	Locality           string   `json:"locality"`
	Organization       string   `json:"organization"`
	PostalCode         string   `json:"postal_code"`
	Recipients         []string `json:"recipients"`
	RegionCode         string   `json:"region_code"`
}

type TechnicalContactState struct {
	Email         string                               `json:"email"`
	FaxNumber     string                               `json:"fax_number"`
	PhoneNumber   string                               `json:"phone_number"`
	PostalAddress []TechnicalContactPostalAddressState `json:"postal_address"`
}

type TechnicalContactPostalAddressState struct {
	AddressLines       []string `json:"address_lines"`
	AdministrativeArea string   `json:"administrative_area"`
	Locality           string   `json:"locality"`
	Organization       string   `json:"organization"`
	PostalCode         string   `json:"postal_code"`
	Recipients         []string `json:"recipients"`
	RegionCode         string   `json:"region_code"`
}

type DnsSettingsState struct {
	CustomDns   []CustomDnsState   `json:"custom_dns"`
	GlueRecords []GlueRecordsState `json:"glue_records"`
}

type CustomDnsState struct {
	NameServers []string         `json:"name_servers"`
	DsRecords   []DsRecordsState `json:"ds_records"`
}

type DsRecordsState struct {
	Algorithm  string  `json:"algorithm"`
	Digest     string  `json:"digest"`
	DigestType string  `json:"digest_type"`
	KeyTag     float64 `json:"key_tag"`
}

type GlueRecordsState struct {
	HostName      string   `json:"host_name"`
	Ipv4Addresses []string `json:"ipv4_addresses"`
	Ipv6Addresses []string `json:"ipv6_addresses"`
}

type ManagementSettingsState struct {
	PreferredRenewalMethod string `json:"preferred_renewal_method"`
	RenewalMethod          string `json:"renewal_method"`
	TransferLockState      string `json:"transfer_lock_state"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type YearlyPriceState struct {
	CurrencyCode string `json:"currency_code"`
	Units        string `json:"units"`
}
