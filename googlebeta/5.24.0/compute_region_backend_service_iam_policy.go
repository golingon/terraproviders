// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewComputeRegionBackendServiceIamPolicy creates a new instance of [ComputeRegionBackendServiceIamPolicy].
func NewComputeRegionBackendServiceIamPolicy(name string, args ComputeRegionBackendServiceIamPolicyArgs) *ComputeRegionBackendServiceIamPolicy {
	return &ComputeRegionBackendServiceIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeRegionBackendServiceIamPolicy)(nil)

// ComputeRegionBackendServiceIamPolicy represents the Terraform resource google_compute_region_backend_service_iam_policy.
type ComputeRegionBackendServiceIamPolicy struct {
	Name      string
	Args      ComputeRegionBackendServiceIamPolicyArgs
	state     *computeRegionBackendServiceIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ComputeRegionBackendServiceIamPolicy].
func (crbsip *ComputeRegionBackendServiceIamPolicy) Type() string {
	return "google_compute_region_backend_service_iam_policy"
}

// LocalName returns the local name for [ComputeRegionBackendServiceIamPolicy].
func (crbsip *ComputeRegionBackendServiceIamPolicy) LocalName() string {
	return crbsip.Name
}

// Configuration returns the configuration (args) for [ComputeRegionBackendServiceIamPolicy].
func (crbsip *ComputeRegionBackendServiceIamPolicy) Configuration() interface{} {
	return crbsip.Args
}

// DependOn is used for other resources to depend on [ComputeRegionBackendServiceIamPolicy].
func (crbsip *ComputeRegionBackendServiceIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(crbsip)
}

// Dependencies returns the list of resources [ComputeRegionBackendServiceIamPolicy] depends_on.
func (crbsip *ComputeRegionBackendServiceIamPolicy) Dependencies() terra.Dependencies {
	return crbsip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ComputeRegionBackendServiceIamPolicy].
func (crbsip *ComputeRegionBackendServiceIamPolicy) LifecycleManagement() *terra.Lifecycle {
	return crbsip.Lifecycle
}

// Attributes returns the attributes for [ComputeRegionBackendServiceIamPolicy].
func (crbsip *ComputeRegionBackendServiceIamPolicy) Attributes() computeRegionBackendServiceIamPolicyAttributes {
	return computeRegionBackendServiceIamPolicyAttributes{ref: terra.ReferenceResource(crbsip)}
}

// ImportState imports the given attribute values into [ComputeRegionBackendServiceIamPolicy]'s state.
func (crbsip *ComputeRegionBackendServiceIamPolicy) ImportState(av io.Reader) error {
	crbsip.state = &computeRegionBackendServiceIamPolicyState{}
	if err := json.NewDecoder(av).Decode(crbsip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crbsip.Type(), crbsip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ComputeRegionBackendServiceIamPolicy] has state.
func (crbsip *ComputeRegionBackendServiceIamPolicy) State() (*computeRegionBackendServiceIamPolicyState, bool) {
	return crbsip.state, crbsip.state != nil
}

// StateMust returns the state for [ComputeRegionBackendServiceIamPolicy]. Panics if the state is nil.
func (crbsip *ComputeRegionBackendServiceIamPolicy) StateMust() *computeRegionBackendServiceIamPolicyState {
	if crbsip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crbsip.Type(), crbsip.LocalName()))
	}
	return crbsip.state
}

// ComputeRegionBackendServiceIamPolicyArgs contains the configurations for google_compute_region_backend_service_iam_policy.
type ComputeRegionBackendServiceIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
}
type computeRegionBackendServiceIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_compute_region_backend_service_iam_policy.
func (crbsip computeRegionBackendServiceIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(crbsip.ref.Append("etag"))
}

// Id returns a reference to field id of google_compute_region_backend_service_iam_policy.
func (crbsip computeRegionBackendServiceIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(crbsip.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_region_backend_service_iam_policy.
func (crbsip computeRegionBackendServiceIamPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(crbsip.ref.Append("name"))
}

// PolicyData returns a reference to field policy_data of google_compute_region_backend_service_iam_policy.
func (crbsip computeRegionBackendServiceIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(crbsip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_compute_region_backend_service_iam_policy.
func (crbsip computeRegionBackendServiceIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(crbsip.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_region_backend_service_iam_policy.
func (crbsip computeRegionBackendServiceIamPolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(crbsip.ref.Append("region"))
}

type computeRegionBackendServiceIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Name       string `json:"name"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	Region     string `json:"region"`
}
