// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	networkconnectivityserviceconnectionpolicy "github.com/golingon/terraproviders/googlebeta/5.24.0/networkconnectivityserviceconnectionpolicy"
	"io"
)

// NewNetworkConnectivityServiceConnectionPolicy creates a new instance of [NetworkConnectivityServiceConnectionPolicy].
func NewNetworkConnectivityServiceConnectionPolicy(name string, args NetworkConnectivityServiceConnectionPolicyArgs) *NetworkConnectivityServiceConnectionPolicy {
	return &NetworkConnectivityServiceConnectionPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkConnectivityServiceConnectionPolicy)(nil)

// NetworkConnectivityServiceConnectionPolicy represents the Terraform resource google_network_connectivity_service_connection_policy.
type NetworkConnectivityServiceConnectionPolicy struct {
	Name      string
	Args      NetworkConnectivityServiceConnectionPolicyArgs
	state     *networkConnectivityServiceConnectionPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetworkConnectivityServiceConnectionPolicy].
func (ncscp *NetworkConnectivityServiceConnectionPolicy) Type() string {
	return "google_network_connectivity_service_connection_policy"
}

// LocalName returns the local name for [NetworkConnectivityServiceConnectionPolicy].
func (ncscp *NetworkConnectivityServiceConnectionPolicy) LocalName() string {
	return ncscp.Name
}

// Configuration returns the configuration (args) for [NetworkConnectivityServiceConnectionPolicy].
func (ncscp *NetworkConnectivityServiceConnectionPolicy) Configuration() interface{} {
	return ncscp.Args
}

// DependOn is used for other resources to depend on [NetworkConnectivityServiceConnectionPolicy].
func (ncscp *NetworkConnectivityServiceConnectionPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ncscp)
}

// Dependencies returns the list of resources [NetworkConnectivityServiceConnectionPolicy] depends_on.
func (ncscp *NetworkConnectivityServiceConnectionPolicy) Dependencies() terra.Dependencies {
	return ncscp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetworkConnectivityServiceConnectionPolicy].
func (ncscp *NetworkConnectivityServiceConnectionPolicy) LifecycleManagement() *terra.Lifecycle {
	return ncscp.Lifecycle
}

// Attributes returns the attributes for [NetworkConnectivityServiceConnectionPolicy].
func (ncscp *NetworkConnectivityServiceConnectionPolicy) Attributes() networkConnectivityServiceConnectionPolicyAttributes {
	return networkConnectivityServiceConnectionPolicyAttributes{ref: terra.ReferenceResource(ncscp)}
}

// ImportState imports the given attribute values into [NetworkConnectivityServiceConnectionPolicy]'s state.
func (ncscp *NetworkConnectivityServiceConnectionPolicy) ImportState(av io.Reader) error {
	ncscp.state = &networkConnectivityServiceConnectionPolicyState{}
	if err := json.NewDecoder(av).Decode(ncscp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ncscp.Type(), ncscp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetworkConnectivityServiceConnectionPolicy] has state.
func (ncscp *NetworkConnectivityServiceConnectionPolicy) State() (*networkConnectivityServiceConnectionPolicyState, bool) {
	return ncscp.state, ncscp.state != nil
}

// StateMust returns the state for [NetworkConnectivityServiceConnectionPolicy]. Panics if the state is nil.
func (ncscp *NetworkConnectivityServiceConnectionPolicy) StateMust() *networkConnectivityServiceConnectionPolicyState {
	if ncscp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ncscp.Type(), ncscp.LocalName()))
	}
	return ncscp.state
}

// NetworkConnectivityServiceConnectionPolicyArgs contains the configurations for google_network_connectivity_service_connection_policy.
type NetworkConnectivityServiceConnectionPolicyArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceClass: string, required
	ServiceClass terra.StringValue `hcl:"service_class,attr" validate:"required"`
	// PscConnections: min=0
	PscConnections []networkconnectivityserviceconnectionpolicy.PscConnections `hcl:"psc_connections,block" validate:"min=0"`
	// PscConfig: optional
	PscConfig *networkconnectivityserviceconnectionpolicy.PscConfig `hcl:"psc_config,block"`
	// Timeouts: optional
	Timeouts *networkconnectivityserviceconnectionpolicy.Timeouts `hcl:"timeouts,block"`
}
type networkConnectivityServiceConnectionPolicyAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_network_connectivity_service_connection_policy.
func (ncscp networkConnectivityServiceConnectionPolicyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(ncscp.ref.Append("create_time"))
}

// Description returns a reference to field description of google_network_connectivity_service_connection_policy.
func (ncscp networkConnectivityServiceConnectionPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ncscp.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_network_connectivity_service_connection_policy.
func (ncscp networkConnectivityServiceConnectionPolicyAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ncscp.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_network_connectivity_service_connection_policy.
func (ncscp networkConnectivityServiceConnectionPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(ncscp.ref.Append("etag"))
}

// Id returns a reference to field id of google_network_connectivity_service_connection_policy.
func (ncscp networkConnectivityServiceConnectionPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ncscp.ref.Append("id"))
}

// Infrastructure returns a reference to field infrastructure of google_network_connectivity_service_connection_policy.
func (ncscp networkConnectivityServiceConnectionPolicyAttributes) Infrastructure() terra.StringValue {
	return terra.ReferenceAsString(ncscp.ref.Append("infrastructure"))
}

// Labels returns a reference to field labels of google_network_connectivity_service_connection_policy.
func (ncscp networkConnectivityServiceConnectionPolicyAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ncscp.ref.Append("labels"))
}

// Location returns a reference to field location of google_network_connectivity_service_connection_policy.
func (ncscp networkConnectivityServiceConnectionPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ncscp.ref.Append("location"))
}

// Name returns a reference to field name of google_network_connectivity_service_connection_policy.
func (ncscp networkConnectivityServiceConnectionPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ncscp.ref.Append("name"))
}

// Network returns a reference to field network of google_network_connectivity_service_connection_policy.
func (ncscp networkConnectivityServiceConnectionPolicyAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(ncscp.ref.Append("network"))
}

// Project returns a reference to field project of google_network_connectivity_service_connection_policy.
func (ncscp networkConnectivityServiceConnectionPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ncscp.ref.Append("project"))
}

// ServiceClass returns a reference to field service_class of google_network_connectivity_service_connection_policy.
func (ncscp networkConnectivityServiceConnectionPolicyAttributes) ServiceClass() terra.StringValue {
	return terra.ReferenceAsString(ncscp.ref.Append("service_class"))
}

// TerraformLabels returns a reference to field terraform_labels of google_network_connectivity_service_connection_policy.
func (ncscp networkConnectivityServiceConnectionPolicyAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ncscp.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_network_connectivity_service_connection_policy.
func (ncscp networkConnectivityServiceConnectionPolicyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(ncscp.ref.Append("update_time"))
}

func (ncscp networkConnectivityServiceConnectionPolicyAttributes) PscConnections() terra.ListValue[networkconnectivityserviceconnectionpolicy.PscConnectionsAttributes] {
	return terra.ReferenceAsList[networkconnectivityserviceconnectionpolicy.PscConnectionsAttributes](ncscp.ref.Append("psc_connections"))
}

func (ncscp networkConnectivityServiceConnectionPolicyAttributes) PscConfig() terra.ListValue[networkconnectivityserviceconnectionpolicy.PscConfigAttributes] {
	return terra.ReferenceAsList[networkconnectivityserviceconnectionpolicy.PscConfigAttributes](ncscp.ref.Append("psc_config"))
}

func (ncscp networkConnectivityServiceConnectionPolicyAttributes) Timeouts() networkconnectivityserviceconnectionpolicy.TimeoutsAttributes {
	return terra.ReferenceAsSingle[networkconnectivityserviceconnectionpolicy.TimeoutsAttributes](ncscp.ref.Append("timeouts"))
}

type networkConnectivityServiceConnectionPolicyState struct {
	CreateTime      string                                                           `json:"create_time"`
	Description     string                                                           `json:"description"`
	EffectiveLabels map[string]string                                                `json:"effective_labels"`
	Etag            string                                                           `json:"etag"`
	Id              string                                                           `json:"id"`
	Infrastructure  string                                                           `json:"infrastructure"`
	Labels          map[string]string                                                `json:"labels"`
	Location        string                                                           `json:"location"`
	Name            string                                                           `json:"name"`
	Network         string                                                           `json:"network"`
	Project         string                                                           `json:"project"`
	ServiceClass    string                                                           `json:"service_class"`
	TerraformLabels map[string]string                                                `json:"terraform_labels"`
	UpdateTime      string                                                           `json:"update_time"`
	PscConnections  []networkconnectivityserviceconnectionpolicy.PscConnectionsState `json:"psc_connections"`
	PscConfig       []networkconnectivityserviceconnectionpolicy.PscConfigState      `json:"psc_config"`
	Timeouts        *networkconnectivityserviceconnectionpolicy.TimeoutsState        `json:"timeouts"`
}
