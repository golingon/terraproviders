// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	computeregionnetworkendpoint "github.com/golingon/terraproviders/googlebeta/5.24.0/computeregionnetworkendpoint"
	"io"
)

// NewComputeRegionNetworkEndpoint creates a new instance of [ComputeRegionNetworkEndpoint].
func NewComputeRegionNetworkEndpoint(name string, args ComputeRegionNetworkEndpointArgs) *ComputeRegionNetworkEndpoint {
	return &ComputeRegionNetworkEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeRegionNetworkEndpoint)(nil)

// ComputeRegionNetworkEndpoint represents the Terraform resource google_compute_region_network_endpoint.
type ComputeRegionNetworkEndpoint struct {
	Name      string
	Args      ComputeRegionNetworkEndpointArgs
	state     *computeRegionNetworkEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ComputeRegionNetworkEndpoint].
func (crne *ComputeRegionNetworkEndpoint) Type() string {
	return "google_compute_region_network_endpoint"
}

// LocalName returns the local name for [ComputeRegionNetworkEndpoint].
func (crne *ComputeRegionNetworkEndpoint) LocalName() string {
	return crne.Name
}

// Configuration returns the configuration (args) for [ComputeRegionNetworkEndpoint].
func (crne *ComputeRegionNetworkEndpoint) Configuration() interface{} {
	return crne.Args
}

// DependOn is used for other resources to depend on [ComputeRegionNetworkEndpoint].
func (crne *ComputeRegionNetworkEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(crne)
}

// Dependencies returns the list of resources [ComputeRegionNetworkEndpoint] depends_on.
func (crne *ComputeRegionNetworkEndpoint) Dependencies() terra.Dependencies {
	return crne.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ComputeRegionNetworkEndpoint].
func (crne *ComputeRegionNetworkEndpoint) LifecycleManagement() *terra.Lifecycle {
	return crne.Lifecycle
}

// Attributes returns the attributes for [ComputeRegionNetworkEndpoint].
func (crne *ComputeRegionNetworkEndpoint) Attributes() computeRegionNetworkEndpointAttributes {
	return computeRegionNetworkEndpointAttributes{ref: terra.ReferenceResource(crne)}
}

// ImportState imports the given attribute values into [ComputeRegionNetworkEndpoint]'s state.
func (crne *ComputeRegionNetworkEndpoint) ImportState(av io.Reader) error {
	crne.state = &computeRegionNetworkEndpointState{}
	if err := json.NewDecoder(av).Decode(crne.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crne.Type(), crne.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ComputeRegionNetworkEndpoint] has state.
func (crne *ComputeRegionNetworkEndpoint) State() (*computeRegionNetworkEndpointState, bool) {
	return crne.state, crne.state != nil
}

// StateMust returns the state for [ComputeRegionNetworkEndpoint]. Panics if the state is nil.
func (crne *ComputeRegionNetworkEndpoint) StateMust() *computeRegionNetworkEndpointState {
	if crne.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crne.Type(), crne.LocalName()))
	}
	return crne.state
}

// ComputeRegionNetworkEndpointArgs contains the configurations for google_compute_region_network_endpoint.
type ComputeRegionNetworkEndpointArgs struct {
	// Fqdn: string, optional
	Fqdn terra.StringValue `hcl:"fqdn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// RegionNetworkEndpointGroup: string, required
	RegionNetworkEndpointGroup terra.StringValue `hcl:"region_network_endpoint_group,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *computeregionnetworkendpoint.Timeouts `hcl:"timeouts,block"`
}
type computeRegionNetworkEndpointAttributes struct {
	ref terra.Reference
}

// Fqdn returns a reference to field fqdn of google_compute_region_network_endpoint.
func (crne computeRegionNetworkEndpointAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(crne.ref.Append("fqdn"))
}

// Id returns a reference to field id of google_compute_region_network_endpoint.
func (crne computeRegionNetworkEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(crne.ref.Append("id"))
}

// IpAddress returns a reference to field ip_address of google_compute_region_network_endpoint.
func (crne computeRegionNetworkEndpointAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(crne.ref.Append("ip_address"))
}

// Port returns a reference to field port of google_compute_region_network_endpoint.
func (crne computeRegionNetworkEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(crne.ref.Append("port"))
}

// Project returns a reference to field project of google_compute_region_network_endpoint.
func (crne computeRegionNetworkEndpointAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(crne.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_region_network_endpoint.
func (crne computeRegionNetworkEndpointAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(crne.ref.Append("region"))
}

// RegionNetworkEndpointGroup returns a reference to field region_network_endpoint_group of google_compute_region_network_endpoint.
func (crne computeRegionNetworkEndpointAttributes) RegionNetworkEndpointGroup() terra.StringValue {
	return terra.ReferenceAsString(crne.ref.Append("region_network_endpoint_group"))
}

func (crne computeRegionNetworkEndpointAttributes) Timeouts() computeregionnetworkendpoint.TimeoutsAttributes {
	return terra.ReferenceAsSingle[computeregionnetworkendpoint.TimeoutsAttributes](crne.ref.Append("timeouts"))
}

type computeRegionNetworkEndpointState struct {
	Fqdn                       string                                      `json:"fqdn"`
	Id                         string                                      `json:"id"`
	IpAddress                  string                                      `json:"ip_address"`
	Port                       float64                                     `json:"port"`
	Project                    string                                      `json:"project"`
	Region                     string                                      `json:"region"`
	RegionNetworkEndpointGroup string                                      `json:"region_network_endpoint_group"`
	Timeouts                   *computeregionnetworkendpoint.TimeoutsState `json:"timeouts"`
}
