// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	networksecurityauthorizationpolicy "github.com/golingon/terraproviders/googlebeta/5.24.0/networksecurityauthorizationpolicy"
	"io"
)

// NewNetworkSecurityAuthorizationPolicy creates a new instance of [NetworkSecurityAuthorizationPolicy].
func NewNetworkSecurityAuthorizationPolicy(name string, args NetworkSecurityAuthorizationPolicyArgs) *NetworkSecurityAuthorizationPolicy {
	return &NetworkSecurityAuthorizationPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkSecurityAuthorizationPolicy)(nil)

// NetworkSecurityAuthorizationPolicy represents the Terraform resource google_network_security_authorization_policy.
type NetworkSecurityAuthorizationPolicy struct {
	Name      string
	Args      NetworkSecurityAuthorizationPolicyArgs
	state     *networkSecurityAuthorizationPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetworkSecurityAuthorizationPolicy].
func (nsap *NetworkSecurityAuthorizationPolicy) Type() string {
	return "google_network_security_authorization_policy"
}

// LocalName returns the local name for [NetworkSecurityAuthorizationPolicy].
func (nsap *NetworkSecurityAuthorizationPolicy) LocalName() string {
	return nsap.Name
}

// Configuration returns the configuration (args) for [NetworkSecurityAuthorizationPolicy].
func (nsap *NetworkSecurityAuthorizationPolicy) Configuration() interface{} {
	return nsap.Args
}

// DependOn is used for other resources to depend on [NetworkSecurityAuthorizationPolicy].
func (nsap *NetworkSecurityAuthorizationPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(nsap)
}

// Dependencies returns the list of resources [NetworkSecurityAuthorizationPolicy] depends_on.
func (nsap *NetworkSecurityAuthorizationPolicy) Dependencies() terra.Dependencies {
	return nsap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetworkSecurityAuthorizationPolicy].
func (nsap *NetworkSecurityAuthorizationPolicy) LifecycleManagement() *terra.Lifecycle {
	return nsap.Lifecycle
}

// Attributes returns the attributes for [NetworkSecurityAuthorizationPolicy].
func (nsap *NetworkSecurityAuthorizationPolicy) Attributes() networkSecurityAuthorizationPolicyAttributes {
	return networkSecurityAuthorizationPolicyAttributes{ref: terra.ReferenceResource(nsap)}
}

// ImportState imports the given attribute values into [NetworkSecurityAuthorizationPolicy]'s state.
func (nsap *NetworkSecurityAuthorizationPolicy) ImportState(av io.Reader) error {
	nsap.state = &networkSecurityAuthorizationPolicyState{}
	if err := json.NewDecoder(av).Decode(nsap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nsap.Type(), nsap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetworkSecurityAuthorizationPolicy] has state.
func (nsap *NetworkSecurityAuthorizationPolicy) State() (*networkSecurityAuthorizationPolicyState, bool) {
	return nsap.state, nsap.state != nil
}

// StateMust returns the state for [NetworkSecurityAuthorizationPolicy]. Panics if the state is nil.
func (nsap *NetworkSecurityAuthorizationPolicy) StateMust() *networkSecurityAuthorizationPolicyState {
	if nsap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nsap.Type(), nsap.LocalName()))
	}
	return nsap.state
}

// NetworkSecurityAuthorizationPolicyArgs contains the configurations for google_network_security_authorization_policy.
type NetworkSecurityAuthorizationPolicyArgs struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Rules: min=0
	Rules []networksecurityauthorizationpolicy.Rules `hcl:"rules,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *networksecurityauthorizationpolicy.Timeouts `hcl:"timeouts,block"`
}
type networkSecurityAuthorizationPolicyAttributes struct {
	ref terra.Reference
}

// Action returns a reference to field action of google_network_security_authorization_policy.
func (nsap networkSecurityAuthorizationPolicyAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(nsap.ref.Append("action"))
}

// CreateTime returns a reference to field create_time of google_network_security_authorization_policy.
func (nsap networkSecurityAuthorizationPolicyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(nsap.ref.Append("create_time"))
}

// Description returns a reference to field description of google_network_security_authorization_policy.
func (nsap networkSecurityAuthorizationPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(nsap.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_network_security_authorization_policy.
func (nsap networkSecurityAuthorizationPolicyAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nsap.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_network_security_authorization_policy.
func (nsap networkSecurityAuthorizationPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nsap.ref.Append("id"))
}

// Labels returns a reference to field labels of google_network_security_authorization_policy.
func (nsap networkSecurityAuthorizationPolicyAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nsap.ref.Append("labels"))
}

// Location returns a reference to field location of google_network_security_authorization_policy.
func (nsap networkSecurityAuthorizationPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(nsap.ref.Append("location"))
}

// Name returns a reference to field name of google_network_security_authorization_policy.
func (nsap networkSecurityAuthorizationPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nsap.ref.Append("name"))
}

// Project returns a reference to field project of google_network_security_authorization_policy.
func (nsap networkSecurityAuthorizationPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(nsap.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_network_security_authorization_policy.
func (nsap networkSecurityAuthorizationPolicyAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nsap.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_network_security_authorization_policy.
func (nsap networkSecurityAuthorizationPolicyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(nsap.ref.Append("update_time"))
}

func (nsap networkSecurityAuthorizationPolicyAttributes) Rules() terra.ListValue[networksecurityauthorizationpolicy.RulesAttributes] {
	return terra.ReferenceAsList[networksecurityauthorizationpolicy.RulesAttributes](nsap.ref.Append("rules"))
}

func (nsap networkSecurityAuthorizationPolicyAttributes) Timeouts() networksecurityauthorizationpolicy.TimeoutsAttributes {
	return terra.ReferenceAsSingle[networksecurityauthorizationpolicy.TimeoutsAttributes](nsap.ref.Append("timeouts"))
}

type networkSecurityAuthorizationPolicyState struct {
	Action          string                                            `json:"action"`
	CreateTime      string                                            `json:"create_time"`
	Description     string                                            `json:"description"`
	EffectiveLabels map[string]string                                 `json:"effective_labels"`
	Id              string                                            `json:"id"`
	Labels          map[string]string                                 `json:"labels"`
	Location        string                                            `json:"location"`
	Name            string                                            `json:"name"`
	Project         string                                            `json:"project"`
	TerraformLabels map[string]string                                 `json:"terraform_labels"`
	UpdateTime      string                                            `json:"update_time"`
	Rules           []networksecurityauthorizationpolicy.RulesState   `json:"rules"`
	Timeouts        *networksecurityauthorizationpolicy.TimeoutsState `json:"timeouts"`
}
