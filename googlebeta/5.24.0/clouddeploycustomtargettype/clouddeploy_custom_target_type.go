// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package clouddeploycustomtargettype

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CustomActions struct {
	// DeployAction: string, required
	DeployAction terra.StringValue `hcl:"deploy_action,attr" validate:"required"`
	// RenderAction: string, optional
	RenderAction terra.StringValue `hcl:"render_action,attr"`
	// IncludeSkaffoldModules: min=0
	IncludeSkaffoldModules []IncludeSkaffoldModules `hcl:"include_skaffold_modules,block" validate:"min=0"`
}

type IncludeSkaffoldModules struct {
	// Configs: list of string, optional
	Configs terra.ListValue[terra.StringValue] `hcl:"configs,attr"`
	// Git: optional
	Git *Git `hcl:"git,block"`
	// GoogleCloudStorage: optional
	GoogleCloudStorage *GoogleCloudStorage `hcl:"google_cloud_storage,block"`
}

type Git struct {
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Ref: string, optional
	Ref terra.StringValue `hcl:"ref,attr"`
	// Repo: string, required
	Repo terra.StringValue `hcl:"repo,attr" validate:"required"`
}

type GoogleCloudStorage struct {
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CustomActionsAttributes struct {
	ref terra.Reference
}

func (ca CustomActionsAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca CustomActionsAttributes) InternalWithRef(ref terra.Reference) CustomActionsAttributes {
	return CustomActionsAttributes{ref: ref}
}

func (ca CustomActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca CustomActionsAttributes) DeployAction() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("deploy_action"))
}

func (ca CustomActionsAttributes) RenderAction() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("render_action"))
}

func (ca CustomActionsAttributes) IncludeSkaffoldModules() terra.ListValue[IncludeSkaffoldModulesAttributes] {
	return terra.ReferenceAsList[IncludeSkaffoldModulesAttributes](ca.ref.Append("include_skaffold_modules"))
}

type IncludeSkaffoldModulesAttributes struct {
	ref terra.Reference
}

func (ism IncludeSkaffoldModulesAttributes) InternalRef() (terra.Reference, error) {
	return ism.ref, nil
}

func (ism IncludeSkaffoldModulesAttributes) InternalWithRef(ref terra.Reference) IncludeSkaffoldModulesAttributes {
	return IncludeSkaffoldModulesAttributes{ref: ref}
}

func (ism IncludeSkaffoldModulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ism.ref.InternalTokens()
}

func (ism IncludeSkaffoldModulesAttributes) Configs() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ism.ref.Append("configs"))
}

func (ism IncludeSkaffoldModulesAttributes) Git() terra.ListValue[GitAttributes] {
	return terra.ReferenceAsList[GitAttributes](ism.ref.Append("git"))
}

func (ism IncludeSkaffoldModulesAttributes) GoogleCloudStorage() terra.ListValue[GoogleCloudStorageAttributes] {
	return terra.ReferenceAsList[GoogleCloudStorageAttributes](ism.ref.Append("google_cloud_storage"))
}

type GitAttributes struct {
	ref terra.Reference
}

func (g GitAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GitAttributes) InternalWithRef(ref terra.Reference) GitAttributes {
	return GitAttributes{ref: ref}
}

func (g GitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GitAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("path"))
}

func (g GitAttributes) Ref() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("ref"))
}

func (g GitAttributes) Repo() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("repo"))
}

type GoogleCloudStorageAttributes struct {
	ref terra.Reference
}

func (gcs GoogleCloudStorageAttributes) InternalRef() (terra.Reference, error) {
	return gcs.ref, nil
}

func (gcs GoogleCloudStorageAttributes) InternalWithRef(ref terra.Reference) GoogleCloudStorageAttributes {
	return GoogleCloudStorageAttributes{ref: ref}
}

func (gcs GoogleCloudStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gcs.ref.InternalTokens()
}

func (gcs GoogleCloudStorageAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("path"))
}

func (gcs GoogleCloudStorageAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("source"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CustomActionsState struct {
	DeployAction           string                        `json:"deploy_action"`
	RenderAction           string                        `json:"render_action"`
	IncludeSkaffoldModules []IncludeSkaffoldModulesState `json:"include_skaffold_modules"`
}

type IncludeSkaffoldModulesState struct {
	Configs            []string                  `json:"configs"`
	Git                []GitState                `json:"git"`
	GoogleCloudStorage []GoogleCloudStorageState `json:"google_cloud_storage"`
}

type GitState struct {
	Path string `json:"path"`
	Ref  string `json:"ref"`
	Repo string `json:"repo"`
}

type GoogleCloudStorageState struct {
	Path   string `json:"path"`
	Source string `json:"source"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
