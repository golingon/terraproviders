// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package memcacheinstance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type MaintenanceSchedule struct{}

type MemcacheNodes struct{}

type MaintenancePolicy struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// WeeklyMaintenanceWindow: min=1
	WeeklyMaintenanceWindow []WeeklyMaintenanceWindow `hcl:"weekly_maintenance_window,block" validate:"min=1"`
}

type WeeklyMaintenanceWindow struct {
	// Day: string, required
	Day terra.StringValue `hcl:"day,attr" validate:"required"`
	// Duration: string, required
	Duration terra.StringValue `hcl:"duration,attr" validate:"required"`
	// StartTime: required
	StartTime *StartTime `hcl:"start_time,block" validate:"required"`
}

type StartTime struct {
	// Hours: number, optional
	Hours terra.NumberValue `hcl:"hours,attr"`
	// Minutes: number, optional
	Minutes terra.NumberValue `hcl:"minutes,attr"`
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: number, optional
	Seconds terra.NumberValue `hcl:"seconds,attr"`
}

type MemcacheParameters struct {
	// Params: map of string, optional
	Params terra.MapValue[terra.StringValue] `hcl:"params,attr"`
}

type NodeConfig struct {
	// CpuCount: number, required
	CpuCount terra.NumberValue `hcl:"cpu_count,attr" validate:"required"`
	// MemorySizeMb: number, required
	MemorySizeMb terra.NumberValue `hcl:"memory_size_mb,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type MaintenanceScheduleAttributes struct {
	ref terra.Reference
}

func (ms MaintenanceScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms MaintenanceScheduleAttributes) InternalWithRef(ref terra.Reference) MaintenanceScheduleAttributes {
	return MaintenanceScheduleAttributes{ref: ref}
}

func (ms MaintenanceScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms MaintenanceScheduleAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("end_time"))
}

func (ms MaintenanceScheduleAttributes) ScheduleDeadlineTime() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("schedule_deadline_time"))
}

func (ms MaintenanceScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("start_time"))
}

type MemcacheNodesAttributes struct {
	ref terra.Reference
}

func (mn MemcacheNodesAttributes) InternalRef() (terra.Reference, error) {
	return mn.ref, nil
}

func (mn MemcacheNodesAttributes) InternalWithRef(ref terra.Reference) MemcacheNodesAttributes {
	return MemcacheNodesAttributes{ref: ref}
}

func (mn MemcacheNodesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mn.ref.InternalTokens()
}

func (mn MemcacheNodesAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(mn.ref.Append("host"))
}

func (mn MemcacheNodesAttributes) NodeId() terra.StringValue {
	return terra.ReferenceAsString(mn.ref.Append("node_id"))
}

func (mn MemcacheNodesAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(mn.ref.Append("port"))
}

func (mn MemcacheNodesAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(mn.ref.Append("state"))
}

func (mn MemcacheNodesAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(mn.ref.Append("zone"))
}

type MaintenancePolicyAttributes struct {
	ref terra.Reference
}

func (mp MaintenancePolicyAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp MaintenancePolicyAttributes) InternalWithRef(ref terra.Reference) MaintenancePolicyAttributes {
	return MaintenancePolicyAttributes{ref: ref}
}

func (mp MaintenancePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp MaintenancePolicyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("create_time"))
}

func (mp MaintenancePolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("description"))
}

func (mp MaintenancePolicyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("update_time"))
}

func (mp MaintenancePolicyAttributes) WeeklyMaintenanceWindow() terra.ListValue[WeeklyMaintenanceWindowAttributes] {
	return terra.ReferenceAsList[WeeklyMaintenanceWindowAttributes](mp.ref.Append("weekly_maintenance_window"))
}

type WeeklyMaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (wmw WeeklyMaintenanceWindowAttributes) InternalRef() (terra.Reference, error) {
	return wmw.ref, nil
}

func (wmw WeeklyMaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) WeeklyMaintenanceWindowAttributes {
	return WeeklyMaintenanceWindowAttributes{ref: ref}
}

func (wmw WeeklyMaintenanceWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wmw.ref.InternalTokens()
}

func (wmw WeeklyMaintenanceWindowAttributes) Day() terra.StringValue {
	return terra.ReferenceAsString(wmw.ref.Append("day"))
}

func (wmw WeeklyMaintenanceWindowAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(wmw.ref.Append("duration"))
}

func (wmw WeeklyMaintenanceWindowAttributes) StartTime() terra.ListValue[StartTimeAttributes] {
	return terra.ReferenceAsList[StartTimeAttributes](wmw.ref.Append("start_time"))
}

type StartTimeAttributes struct {
	ref terra.Reference
}

func (st StartTimeAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st StartTimeAttributes) InternalWithRef(ref terra.Reference) StartTimeAttributes {
	return StartTimeAttributes{ref: ref}
}

func (st StartTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st StartTimeAttributes) Hours() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("hours"))
}

func (st StartTimeAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("minutes"))
}

func (st StartTimeAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("nanos"))
}

func (st StartTimeAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("seconds"))
}

type MemcacheParametersAttributes struct {
	ref terra.Reference
}

func (mp MemcacheParametersAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp MemcacheParametersAttributes) InternalWithRef(ref terra.Reference) MemcacheParametersAttributes {
	return MemcacheParametersAttributes{ref: ref}
}

func (mp MemcacheParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp MemcacheParametersAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("id"))
}

func (mp MemcacheParametersAttributes) Params() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](mp.ref.Append("params"))
}

type NodeConfigAttributes struct {
	ref terra.Reference
}

func (nc NodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigAttributes {
	return NodeConfigAttributes{ref: ref}
}

func (nc NodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NodeConfigAttributes) CpuCount() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("cpu_count"))
}

func (nc NodeConfigAttributes) MemorySizeMb() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("memory_size_mb"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type MaintenanceScheduleState struct {
	EndTime              string `json:"end_time"`
	ScheduleDeadlineTime string `json:"schedule_deadline_time"`
	StartTime            string `json:"start_time"`
}

type MemcacheNodesState struct {
	Host   string  `json:"host"`
	NodeId string  `json:"node_id"`
	Port   float64 `json:"port"`
	State  string  `json:"state"`
	Zone   string  `json:"zone"`
}

type MaintenancePolicyState struct {
	CreateTime              string                         `json:"create_time"`
	Description             string                         `json:"description"`
	UpdateTime              string                         `json:"update_time"`
	WeeklyMaintenanceWindow []WeeklyMaintenanceWindowState `json:"weekly_maintenance_window"`
}

type WeeklyMaintenanceWindowState struct {
	Day       string           `json:"day"`
	Duration  string           `json:"duration"`
	StartTime []StartTimeState `json:"start_time"`
}

type StartTimeState struct {
	Hours   float64 `json:"hours"`
	Minutes float64 `json:"minutes"`
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type MemcacheParametersState struct {
	Id     string            `json:"id"`
	Params map[string]string `json:"params"`
}

type NodeConfigState struct {
	CpuCount     float64 `json:"cpu_count"`
	MemorySizeMb float64 `json:"memory_size_mb"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
