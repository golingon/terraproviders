// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vertexaifeatureonlinestore

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Bigtable struct {
	// AutoScaling: required
	AutoScaling *AutoScaling `hcl:"auto_scaling,block" validate:"required"`
}

type AutoScaling struct {
	// CpuUtilizationTarget: number, optional
	CpuUtilizationTarget terra.NumberValue `hcl:"cpu_utilization_target,attr"`
	// MaxNodeCount: number, required
	MaxNodeCount terra.NumberValue `hcl:"max_node_count,attr" validate:"required"`
	// MinNodeCount: number, required
	MinNodeCount terra.NumberValue `hcl:"min_node_count,attr" validate:"required"`
}

type DedicatedServingEndpoint struct {
	// PrivateServiceConnectConfig: optional
	PrivateServiceConnectConfig *PrivateServiceConnectConfig `hcl:"private_service_connect_config,block"`
}

type PrivateServiceConnectConfig struct {
	// EnablePrivateServiceConnect: bool, required
	EnablePrivateServiceConnect terra.BoolValue `hcl:"enable_private_service_connect,attr" validate:"required"`
	// ProjectAllowlist: list of string, optional
	ProjectAllowlist terra.ListValue[terra.StringValue] `hcl:"project_allowlist,attr"`
}

type EmbeddingManagement struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type Optimized struct{}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BigtableAttributes struct {
	ref terra.Reference
}

func (b BigtableAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BigtableAttributes) InternalWithRef(ref terra.Reference) BigtableAttributes {
	return BigtableAttributes{ref: ref}
}

func (b BigtableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BigtableAttributes) AutoScaling() terra.ListValue[AutoScalingAttributes] {
	return terra.ReferenceAsList[AutoScalingAttributes](b.ref.Append("auto_scaling"))
}

type AutoScalingAttributes struct {
	ref terra.Reference
}

func (as AutoScalingAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AutoScalingAttributes) InternalWithRef(ref terra.Reference) AutoScalingAttributes {
	return AutoScalingAttributes{ref: ref}
}

func (as AutoScalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AutoScalingAttributes) CpuUtilizationTarget() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("cpu_utilization_target"))
}

func (as AutoScalingAttributes) MaxNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("max_node_count"))
}

func (as AutoScalingAttributes) MinNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("min_node_count"))
}

type DedicatedServingEndpointAttributes struct {
	ref terra.Reference
}

func (dse DedicatedServingEndpointAttributes) InternalRef() (terra.Reference, error) {
	return dse.ref, nil
}

func (dse DedicatedServingEndpointAttributes) InternalWithRef(ref terra.Reference) DedicatedServingEndpointAttributes {
	return DedicatedServingEndpointAttributes{ref: ref}
}

func (dse DedicatedServingEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dse.ref.InternalTokens()
}

func (dse DedicatedServingEndpointAttributes) PublicEndpointDomainName() terra.StringValue {
	return terra.ReferenceAsString(dse.ref.Append("public_endpoint_domain_name"))
}

func (dse DedicatedServingEndpointAttributes) ServiceAttachment() terra.StringValue {
	return terra.ReferenceAsString(dse.ref.Append("service_attachment"))
}

func (dse DedicatedServingEndpointAttributes) PrivateServiceConnectConfig() terra.ListValue[PrivateServiceConnectConfigAttributes] {
	return terra.ReferenceAsList[PrivateServiceConnectConfigAttributes](dse.ref.Append("private_service_connect_config"))
}

type PrivateServiceConnectConfigAttributes struct {
	ref terra.Reference
}

func (pscc PrivateServiceConnectConfigAttributes) InternalRef() (terra.Reference, error) {
	return pscc.ref, nil
}

func (pscc PrivateServiceConnectConfigAttributes) InternalWithRef(ref terra.Reference) PrivateServiceConnectConfigAttributes {
	return PrivateServiceConnectConfigAttributes{ref: ref}
}

func (pscc PrivateServiceConnectConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pscc.ref.InternalTokens()
}

func (pscc PrivateServiceConnectConfigAttributes) EnablePrivateServiceConnect() terra.BoolValue {
	return terra.ReferenceAsBool(pscc.ref.Append("enable_private_service_connect"))
}

func (pscc PrivateServiceConnectConfigAttributes) ProjectAllowlist() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pscc.ref.Append("project_allowlist"))
}

type EmbeddingManagementAttributes struct {
	ref terra.Reference
}

func (em EmbeddingManagementAttributes) InternalRef() (terra.Reference, error) {
	return em.ref, nil
}

func (em EmbeddingManagementAttributes) InternalWithRef(ref terra.Reference) EmbeddingManagementAttributes {
	return EmbeddingManagementAttributes{ref: ref}
}

func (em EmbeddingManagementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return em.ref.InternalTokens()
}

func (em EmbeddingManagementAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(em.ref.Append("enabled"))
}

type OptimizedAttributes struct {
	ref terra.Reference
}

func (o OptimizedAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OptimizedAttributes) InternalWithRef(ref terra.Reference) OptimizedAttributes {
	return OptimizedAttributes{ref: ref}
}

func (o OptimizedAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BigtableState struct {
	AutoScaling []AutoScalingState `json:"auto_scaling"`
}

type AutoScalingState struct {
	CpuUtilizationTarget float64 `json:"cpu_utilization_target"`
	MaxNodeCount         float64 `json:"max_node_count"`
	MinNodeCount         float64 `json:"min_node_count"`
}

type DedicatedServingEndpointState struct {
	PublicEndpointDomainName    string                             `json:"public_endpoint_domain_name"`
	ServiceAttachment           string                             `json:"service_attachment"`
	PrivateServiceConnectConfig []PrivateServiceConnectConfigState `json:"private_service_connect_config"`
}

type PrivateServiceConnectConfigState struct {
	EnablePrivateServiceConnect bool     `json:"enable_private_service_connect"`
	ProjectAllowlist            []string `json:"project_allowlist"`
}

type EmbeddingManagementState struct {
	Enabled bool `json:"enabled"`
}

type OptimizedState struct{}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
