// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dialogflowcxsecuritysettings

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AudioExportSettings struct {
	// AudioExportPattern: string, optional
	AudioExportPattern terra.StringValue `hcl:"audio_export_pattern,attr"`
	// AudioFormat: string, optional
	AudioFormat terra.StringValue `hcl:"audio_format,attr"`
	// EnableAudioRedaction: bool, optional
	EnableAudioRedaction terra.BoolValue `hcl:"enable_audio_redaction,attr"`
	// GcsBucket: string, optional
	GcsBucket terra.StringValue `hcl:"gcs_bucket,attr"`
}

type InsightsExportSettings struct {
	// EnableInsightsExport: bool, required
	EnableInsightsExport terra.BoolValue `hcl:"enable_insights_export,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AudioExportSettingsAttributes struct {
	ref terra.Reference
}

func (aes AudioExportSettingsAttributes) InternalRef() (terra.Reference, error) {
	return aes.ref, nil
}

func (aes AudioExportSettingsAttributes) InternalWithRef(ref terra.Reference) AudioExportSettingsAttributes {
	return AudioExportSettingsAttributes{ref: ref}
}

func (aes AudioExportSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aes.ref.InternalTokens()
}

func (aes AudioExportSettingsAttributes) AudioExportPattern() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("audio_export_pattern"))
}

func (aes AudioExportSettingsAttributes) AudioFormat() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("audio_format"))
}

func (aes AudioExportSettingsAttributes) EnableAudioRedaction() terra.BoolValue {
	return terra.ReferenceAsBool(aes.ref.Append("enable_audio_redaction"))
}

func (aes AudioExportSettingsAttributes) GcsBucket() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("gcs_bucket"))
}

type InsightsExportSettingsAttributes struct {
	ref terra.Reference
}

func (ies InsightsExportSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ies.ref, nil
}

func (ies InsightsExportSettingsAttributes) InternalWithRef(ref terra.Reference) InsightsExportSettingsAttributes {
	return InsightsExportSettingsAttributes{ref: ref}
}

func (ies InsightsExportSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ies.ref.InternalTokens()
}

func (ies InsightsExportSettingsAttributes) EnableInsightsExport() terra.BoolValue {
	return terra.ReferenceAsBool(ies.ref.Append("enable_insights_export"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AudioExportSettingsState struct {
	AudioExportPattern   string `json:"audio_export_pattern"`
	AudioFormat          string `json:"audio_format"`
	EnableAudioRedaction bool   `json:"enable_audio_redaction"`
	GcsBucket            string `json:"gcs_bucket"`
}

type InsightsExportSettingsState struct {
	EnableInsightsExport bool `json:"enable_insights_export"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
