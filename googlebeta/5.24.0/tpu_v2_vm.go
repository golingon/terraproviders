// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	tpuv2vm "github.com/golingon/terraproviders/googlebeta/5.24.0/tpuv2vm"
	"io"
)

// NewTpuV2Vm creates a new instance of [TpuV2Vm].
func NewTpuV2Vm(name string, args TpuV2VmArgs) *TpuV2Vm {
	return &TpuV2Vm{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TpuV2Vm)(nil)

// TpuV2Vm represents the Terraform resource google_tpu_v2_vm.
type TpuV2Vm struct {
	Name      string
	Args      TpuV2VmArgs
	state     *tpuV2VmState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [TpuV2Vm].
func (tvv *TpuV2Vm) Type() string {
	return "google_tpu_v2_vm"
}

// LocalName returns the local name for [TpuV2Vm].
func (tvv *TpuV2Vm) LocalName() string {
	return tvv.Name
}

// Configuration returns the configuration (args) for [TpuV2Vm].
func (tvv *TpuV2Vm) Configuration() interface{} {
	return tvv.Args
}

// DependOn is used for other resources to depend on [TpuV2Vm].
func (tvv *TpuV2Vm) DependOn() terra.Reference {
	return terra.ReferenceResource(tvv)
}

// Dependencies returns the list of resources [TpuV2Vm] depends_on.
func (tvv *TpuV2Vm) Dependencies() terra.Dependencies {
	return tvv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [TpuV2Vm].
func (tvv *TpuV2Vm) LifecycleManagement() *terra.Lifecycle {
	return tvv.Lifecycle
}

// Attributes returns the attributes for [TpuV2Vm].
func (tvv *TpuV2Vm) Attributes() tpuV2VmAttributes {
	return tpuV2VmAttributes{ref: terra.ReferenceResource(tvv)}
}

// ImportState imports the given attribute values into [TpuV2Vm]'s state.
func (tvv *TpuV2Vm) ImportState(av io.Reader) error {
	tvv.state = &tpuV2VmState{}
	if err := json.NewDecoder(av).Decode(tvv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tvv.Type(), tvv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [TpuV2Vm] has state.
func (tvv *TpuV2Vm) State() (*tpuV2VmState, bool) {
	return tvv.state, tvv.state != nil
}

// StateMust returns the state for [TpuV2Vm]. Panics if the state is nil.
func (tvv *TpuV2Vm) StateMust() *tpuV2VmState {
	if tvv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tvv.Type(), tvv.LocalName()))
	}
	return tvv.state
}

// TpuV2VmArgs contains the configurations for google_tpu_v2_vm.
type TpuV2VmArgs struct {
	// AcceleratorType: string, optional
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr"`
	// CidrBlock: string, optional
	CidrBlock terra.StringValue `hcl:"cidr_block,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RuntimeVersion: string, required
	RuntimeVersion terra.StringValue `hcl:"runtime_version,attr" validate:"required"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// NetworkEndpoints: min=0
	NetworkEndpoints []tpuv2vm.NetworkEndpoints `hcl:"network_endpoints,block" validate:"min=0"`
	// Symptoms: min=0
	Symptoms []tpuv2vm.Symptoms `hcl:"symptoms,block" validate:"min=0"`
	// AcceleratorConfig: optional
	AcceleratorConfig *tpuv2vm.AcceleratorConfig `hcl:"accelerator_config,block"`
	// DataDisks: min=0
	DataDisks []tpuv2vm.DataDisks `hcl:"data_disks,block" validate:"min=0"`
	// NetworkConfig: optional
	NetworkConfig *tpuv2vm.NetworkConfig `hcl:"network_config,block"`
	// SchedulingConfig: optional
	SchedulingConfig *tpuv2vm.SchedulingConfig `hcl:"scheduling_config,block"`
	// ServiceAccount: optional
	ServiceAccount *tpuv2vm.ServiceAccount `hcl:"service_account,block"`
	// ShieldedInstanceConfig: optional
	ShieldedInstanceConfig *tpuv2vm.ShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
	// Timeouts: optional
	Timeouts *tpuv2vm.Timeouts `hcl:"timeouts,block"`
}
type tpuV2VmAttributes struct {
	ref terra.Reference
}

// AcceleratorType returns a reference to field accelerator_type of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("accelerator_type"))
}

// ApiVersion returns a reference to field api_version of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) ApiVersion() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("api_version"))
}

// CidrBlock returns a reference to field cidr_block of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("cidr_block"))
}

// Description returns a reference to field description of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](tvv.ref.Append("effective_labels"))
}

// Health returns a reference to field health of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) Health() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("health"))
}

// HealthDescription returns a reference to field health_description of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) HealthDescription() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("health_description"))
}

// Id returns a reference to field id of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("id"))
}

// Labels returns a reference to field labels of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](tvv.ref.Append("labels"))
}

// Metadata returns a reference to field metadata of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](tvv.ref.Append("metadata"))
}

// MultisliceNode returns a reference to field multislice_node of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) MultisliceNode() terra.BoolValue {
	return terra.ReferenceAsBool(tvv.ref.Append("multislice_node"))
}

// Name returns a reference to field name of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("name"))
}

// Project returns a reference to field project of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("project"))
}

// QueuedResource returns a reference to field queued_resource of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) QueuedResource() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("queued_resource"))
}

// RuntimeVersion returns a reference to field runtime_version of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) RuntimeVersion() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("runtime_version"))
}

// State returns a reference to field state of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("state"))
}

// Tags returns a reference to field tags of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tvv.ref.Append("tags"))
}

// TerraformLabels returns a reference to field terraform_labels of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](tvv.ref.Append("terraform_labels"))
}

// Zone returns a reference to field zone of google_tpu_v2_vm.
func (tvv tpuV2VmAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(tvv.ref.Append("zone"))
}

func (tvv tpuV2VmAttributes) NetworkEndpoints() terra.ListValue[tpuv2vm.NetworkEndpointsAttributes] {
	return terra.ReferenceAsList[tpuv2vm.NetworkEndpointsAttributes](tvv.ref.Append("network_endpoints"))
}

func (tvv tpuV2VmAttributes) Symptoms() terra.ListValue[tpuv2vm.SymptomsAttributes] {
	return terra.ReferenceAsList[tpuv2vm.SymptomsAttributes](tvv.ref.Append("symptoms"))
}

func (tvv tpuV2VmAttributes) AcceleratorConfig() terra.ListValue[tpuv2vm.AcceleratorConfigAttributes] {
	return terra.ReferenceAsList[tpuv2vm.AcceleratorConfigAttributes](tvv.ref.Append("accelerator_config"))
}

func (tvv tpuV2VmAttributes) DataDisks() terra.ListValue[tpuv2vm.DataDisksAttributes] {
	return terra.ReferenceAsList[tpuv2vm.DataDisksAttributes](tvv.ref.Append("data_disks"))
}

func (tvv tpuV2VmAttributes) NetworkConfig() terra.ListValue[tpuv2vm.NetworkConfigAttributes] {
	return terra.ReferenceAsList[tpuv2vm.NetworkConfigAttributes](tvv.ref.Append("network_config"))
}

func (tvv tpuV2VmAttributes) SchedulingConfig() terra.ListValue[tpuv2vm.SchedulingConfigAttributes] {
	return terra.ReferenceAsList[tpuv2vm.SchedulingConfigAttributes](tvv.ref.Append("scheduling_config"))
}

func (tvv tpuV2VmAttributes) ServiceAccount() terra.ListValue[tpuv2vm.ServiceAccountAttributes] {
	return terra.ReferenceAsList[tpuv2vm.ServiceAccountAttributes](tvv.ref.Append("service_account"))
}

func (tvv tpuV2VmAttributes) ShieldedInstanceConfig() terra.ListValue[tpuv2vm.ShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[tpuv2vm.ShieldedInstanceConfigAttributes](tvv.ref.Append("shielded_instance_config"))
}

func (tvv tpuV2VmAttributes) Timeouts() tpuv2vm.TimeoutsAttributes {
	return terra.ReferenceAsSingle[tpuv2vm.TimeoutsAttributes](tvv.ref.Append("timeouts"))
}

type tpuV2VmState struct {
	AcceleratorType        string                                `json:"accelerator_type"`
	ApiVersion             string                                `json:"api_version"`
	CidrBlock              string                                `json:"cidr_block"`
	Description            string                                `json:"description"`
	EffectiveLabels        map[string]string                     `json:"effective_labels"`
	Health                 string                                `json:"health"`
	HealthDescription      string                                `json:"health_description"`
	Id                     string                                `json:"id"`
	Labels                 map[string]string                     `json:"labels"`
	Metadata               map[string]string                     `json:"metadata"`
	MultisliceNode         bool                                  `json:"multislice_node"`
	Name                   string                                `json:"name"`
	Project                string                                `json:"project"`
	QueuedResource         string                                `json:"queued_resource"`
	RuntimeVersion         string                                `json:"runtime_version"`
	State                  string                                `json:"state"`
	Tags                   []string                              `json:"tags"`
	TerraformLabels        map[string]string                     `json:"terraform_labels"`
	Zone                   string                                `json:"zone"`
	NetworkEndpoints       []tpuv2vm.NetworkEndpointsState       `json:"network_endpoints"`
	Symptoms               []tpuv2vm.SymptomsState               `json:"symptoms"`
	AcceleratorConfig      []tpuv2vm.AcceleratorConfigState      `json:"accelerator_config"`
	DataDisks              []tpuv2vm.DataDisksState              `json:"data_disks"`
	NetworkConfig          []tpuv2vm.NetworkConfigState          `json:"network_config"`
	SchedulingConfig       []tpuv2vm.SchedulingConfigState       `json:"scheduling_config"`
	ServiceAccount         []tpuv2vm.ServiceAccountState         `json:"service_account"`
	ShieldedInstanceConfig []tpuv2vm.ShieldedInstanceConfigState `json:"shielded_instance_config"`
	Timeouts               *tpuv2vm.TimeoutsState                `json:"timeouts"`
}
