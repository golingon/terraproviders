// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	discoveryenginechatengine "github.com/golingon/terraproviders/googlebeta/5.24.0/discoveryenginechatengine"
	"io"
)

// NewDiscoveryEngineChatEngine creates a new instance of [DiscoveryEngineChatEngine].
func NewDiscoveryEngineChatEngine(name string, args DiscoveryEngineChatEngineArgs) *DiscoveryEngineChatEngine {
	return &DiscoveryEngineChatEngine{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DiscoveryEngineChatEngine)(nil)

// DiscoveryEngineChatEngine represents the Terraform resource google_discovery_engine_chat_engine.
type DiscoveryEngineChatEngine struct {
	Name      string
	Args      DiscoveryEngineChatEngineArgs
	state     *discoveryEngineChatEngineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DiscoveryEngineChatEngine].
func (dece *DiscoveryEngineChatEngine) Type() string {
	return "google_discovery_engine_chat_engine"
}

// LocalName returns the local name for [DiscoveryEngineChatEngine].
func (dece *DiscoveryEngineChatEngine) LocalName() string {
	return dece.Name
}

// Configuration returns the configuration (args) for [DiscoveryEngineChatEngine].
func (dece *DiscoveryEngineChatEngine) Configuration() interface{} {
	return dece.Args
}

// DependOn is used for other resources to depend on [DiscoveryEngineChatEngine].
func (dece *DiscoveryEngineChatEngine) DependOn() terra.Reference {
	return terra.ReferenceResource(dece)
}

// Dependencies returns the list of resources [DiscoveryEngineChatEngine] depends_on.
func (dece *DiscoveryEngineChatEngine) Dependencies() terra.Dependencies {
	return dece.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DiscoveryEngineChatEngine].
func (dece *DiscoveryEngineChatEngine) LifecycleManagement() *terra.Lifecycle {
	return dece.Lifecycle
}

// Attributes returns the attributes for [DiscoveryEngineChatEngine].
func (dece *DiscoveryEngineChatEngine) Attributes() discoveryEngineChatEngineAttributes {
	return discoveryEngineChatEngineAttributes{ref: terra.ReferenceResource(dece)}
}

// ImportState imports the given attribute values into [DiscoveryEngineChatEngine]'s state.
func (dece *DiscoveryEngineChatEngine) ImportState(av io.Reader) error {
	dece.state = &discoveryEngineChatEngineState{}
	if err := json.NewDecoder(av).Decode(dece.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dece.Type(), dece.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DiscoveryEngineChatEngine] has state.
func (dece *DiscoveryEngineChatEngine) State() (*discoveryEngineChatEngineState, bool) {
	return dece.state, dece.state != nil
}

// StateMust returns the state for [DiscoveryEngineChatEngine]. Panics if the state is nil.
func (dece *DiscoveryEngineChatEngine) StateMust() *discoveryEngineChatEngineState {
	if dece.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dece.Type(), dece.LocalName()))
	}
	return dece.state
}

// DiscoveryEngineChatEngineArgs contains the configurations for google_discovery_engine_chat_engine.
type DiscoveryEngineChatEngineArgs struct {
	// CollectionId: string, required
	CollectionId terra.StringValue `hcl:"collection_id,attr" validate:"required"`
	// DataStoreIds: list of string, required
	DataStoreIds terra.ListValue[terra.StringValue] `hcl:"data_store_ids,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// EngineId: string, required
	EngineId terra.StringValue `hcl:"engine_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IndustryVertical: string, optional
	IndustryVertical terra.StringValue `hcl:"industry_vertical,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ChatEngineMetadata: min=0
	ChatEngineMetadata []discoveryenginechatengine.ChatEngineMetadata `hcl:"chat_engine_metadata,block" validate:"min=0"`
	// ChatEngineConfig: required
	ChatEngineConfig *discoveryenginechatengine.ChatEngineConfig `hcl:"chat_engine_config,block" validate:"required"`
	// CommonConfig: optional
	CommonConfig *discoveryenginechatengine.CommonConfig `hcl:"common_config,block"`
	// Timeouts: optional
	Timeouts *discoveryenginechatengine.Timeouts `hcl:"timeouts,block"`
}
type discoveryEngineChatEngineAttributes struct {
	ref terra.Reference
}

// CollectionId returns a reference to field collection_id of google_discovery_engine_chat_engine.
func (dece discoveryEngineChatEngineAttributes) CollectionId() terra.StringValue {
	return terra.ReferenceAsString(dece.ref.Append("collection_id"))
}

// CreateTime returns a reference to field create_time of google_discovery_engine_chat_engine.
func (dece discoveryEngineChatEngineAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(dece.ref.Append("create_time"))
}

// DataStoreIds returns a reference to field data_store_ids of google_discovery_engine_chat_engine.
func (dece discoveryEngineChatEngineAttributes) DataStoreIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dece.ref.Append("data_store_ids"))
}

// DisplayName returns a reference to field display_name of google_discovery_engine_chat_engine.
func (dece discoveryEngineChatEngineAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(dece.ref.Append("display_name"))
}

// EngineId returns a reference to field engine_id of google_discovery_engine_chat_engine.
func (dece discoveryEngineChatEngineAttributes) EngineId() terra.StringValue {
	return terra.ReferenceAsString(dece.ref.Append("engine_id"))
}

// Id returns a reference to field id of google_discovery_engine_chat_engine.
func (dece discoveryEngineChatEngineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dece.ref.Append("id"))
}

// IndustryVertical returns a reference to field industry_vertical of google_discovery_engine_chat_engine.
func (dece discoveryEngineChatEngineAttributes) IndustryVertical() terra.StringValue {
	return terra.ReferenceAsString(dece.ref.Append("industry_vertical"))
}

// Location returns a reference to field location of google_discovery_engine_chat_engine.
func (dece discoveryEngineChatEngineAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(dece.ref.Append("location"))
}

// Name returns a reference to field name of google_discovery_engine_chat_engine.
func (dece discoveryEngineChatEngineAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dece.ref.Append("name"))
}

// Project returns a reference to field project of google_discovery_engine_chat_engine.
func (dece discoveryEngineChatEngineAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(dece.ref.Append("project"))
}

// UpdateTime returns a reference to field update_time of google_discovery_engine_chat_engine.
func (dece discoveryEngineChatEngineAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(dece.ref.Append("update_time"))
}

func (dece discoveryEngineChatEngineAttributes) ChatEngineMetadata() terra.ListValue[discoveryenginechatengine.ChatEngineMetadataAttributes] {
	return terra.ReferenceAsList[discoveryenginechatengine.ChatEngineMetadataAttributes](dece.ref.Append("chat_engine_metadata"))
}

func (dece discoveryEngineChatEngineAttributes) ChatEngineConfig() terra.ListValue[discoveryenginechatengine.ChatEngineConfigAttributes] {
	return terra.ReferenceAsList[discoveryenginechatengine.ChatEngineConfigAttributes](dece.ref.Append("chat_engine_config"))
}

func (dece discoveryEngineChatEngineAttributes) CommonConfig() terra.ListValue[discoveryenginechatengine.CommonConfigAttributes] {
	return terra.ReferenceAsList[discoveryenginechatengine.CommonConfigAttributes](dece.ref.Append("common_config"))
}

func (dece discoveryEngineChatEngineAttributes) Timeouts() discoveryenginechatengine.TimeoutsAttributes {
	return terra.ReferenceAsSingle[discoveryenginechatengine.TimeoutsAttributes](dece.ref.Append("timeouts"))
}

type discoveryEngineChatEngineState struct {
	CollectionId       string                                              `json:"collection_id"`
	CreateTime         string                                              `json:"create_time"`
	DataStoreIds       []string                                            `json:"data_store_ids"`
	DisplayName        string                                              `json:"display_name"`
	EngineId           string                                              `json:"engine_id"`
	Id                 string                                              `json:"id"`
	IndustryVertical   string                                              `json:"industry_vertical"`
	Location           string                                              `json:"location"`
	Name               string                                              `json:"name"`
	Project            string                                              `json:"project"`
	UpdateTime         string                                              `json:"update_time"`
	ChatEngineMetadata []discoveryenginechatengine.ChatEngineMetadataState `json:"chat_engine_metadata"`
	ChatEngineConfig   []discoveryenginechatengine.ChatEngineConfigState   `json:"chat_engine_config"`
	CommonConfig       []discoveryenginechatengine.CommonConfigState       `json:"common_config"`
	Timeouts           *discoveryenginechatengine.TimeoutsState            `json:"timeouts"`
}
