// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	dataformrepositoryiambinding "github.com/golingon/terraproviders/googlebeta/5.24.0/dataformrepositoryiambinding"
	"io"
)

// NewDataformRepositoryIamBinding creates a new instance of [DataformRepositoryIamBinding].
func NewDataformRepositoryIamBinding(name string, args DataformRepositoryIamBindingArgs) *DataformRepositoryIamBinding {
	return &DataformRepositoryIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataformRepositoryIamBinding)(nil)

// DataformRepositoryIamBinding represents the Terraform resource google_dataform_repository_iam_binding.
type DataformRepositoryIamBinding struct {
	Name      string
	Args      DataformRepositoryIamBindingArgs
	state     *dataformRepositoryIamBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataformRepositoryIamBinding].
func (drib *DataformRepositoryIamBinding) Type() string {
	return "google_dataform_repository_iam_binding"
}

// LocalName returns the local name for [DataformRepositoryIamBinding].
func (drib *DataformRepositoryIamBinding) LocalName() string {
	return drib.Name
}

// Configuration returns the configuration (args) for [DataformRepositoryIamBinding].
func (drib *DataformRepositoryIamBinding) Configuration() interface{} {
	return drib.Args
}

// DependOn is used for other resources to depend on [DataformRepositoryIamBinding].
func (drib *DataformRepositoryIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(drib)
}

// Dependencies returns the list of resources [DataformRepositoryIamBinding] depends_on.
func (drib *DataformRepositoryIamBinding) Dependencies() terra.Dependencies {
	return drib.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataformRepositoryIamBinding].
func (drib *DataformRepositoryIamBinding) LifecycleManagement() *terra.Lifecycle {
	return drib.Lifecycle
}

// Attributes returns the attributes for [DataformRepositoryIamBinding].
func (drib *DataformRepositoryIamBinding) Attributes() dataformRepositoryIamBindingAttributes {
	return dataformRepositoryIamBindingAttributes{ref: terra.ReferenceResource(drib)}
}

// ImportState imports the given attribute values into [DataformRepositoryIamBinding]'s state.
func (drib *DataformRepositoryIamBinding) ImportState(av io.Reader) error {
	drib.state = &dataformRepositoryIamBindingState{}
	if err := json.NewDecoder(av).Decode(drib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", drib.Type(), drib.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataformRepositoryIamBinding] has state.
func (drib *DataformRepositoryIamBinding) State() (*dataformRepositoryIamBindingState, bool) {
	return drib.state, drib.state != nil
}

// StateMust returns the state for [DataformRepositoryIamBinding]. Panics if the state is nil.
func (drib *DataformRepositoryIamBinding) StateMust() *dataformRepositoryIamBindingState {
	if drib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", drib.Type(), drib.LocalName()))
	}
	return drib.state
}

// DataformRepositoryIamBindingArgs contains the configurations for google_dataform_repository_iam_binding.
type DataformRepositoryIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *dataformrepositoryiambinding.Condition `hcl:"condition,block"`
}
type dataformRepositoryIamBindingAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_dataform_repository_iam_binding.
func (drib dataformRepositoryIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(drib.ref.Append("etag"))
}

// Id returns a reference to field id of google_dataform_repository_iam_binding.
func (drib dataformRepositoryIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(drib.ref.Append("id"))
}

// Members returns a reference to field members of google_dataform_repository_iam_binding.
func (drib dataformRepositoryIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](drib.ref.Append("members"))
}

// Project returns a reference to field project of google_dataform_repository_iam_binding.
func (drib dataformRepositoryIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(drib.ref.Append("project"))
}

// Region returns a reference to field region of google_dataform_repository_iam_binding.
func (drib dataformRepositoryIamBindingAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(drib.ref.Append("region"))
}

// Repository returns a reference to field repository of google_dataform_repository_iam_binding.
func (drib dataformRepositoryIamBindingAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(drib.ref.Append("repository"))
}

// Role returns a reference to field role of google_dataform_repository_iam_binding.
func (drib dataformRepositoryIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(drib.ref.Append("role"))
}

func (drib dataformRepositoryIamBindingAttributes) Condition() terra.ListValue[dataformrepositoryiambinding.ConditionAttributes] {
	return terra.ReferenceAsList[dataformrepositoryiambinding.ConditionAttributes](drib.ref.Append("condition"))
}

type dataformRepositoryIamBindingState struct {
	Etag       string                                        `json:"etag"`
	Id         string                                        `json:"id"`
	Members    []string                                      `json:"members"`
	Project    string                                        `json:"project"`
	Region     string                                        `json:"region"`
	Repository string                                        `json:"repository"`
	Role       string                                        `json:"role"`
	Condition  []dataformrepositoryiambinding.ConditionState `json:"condition"`
}
