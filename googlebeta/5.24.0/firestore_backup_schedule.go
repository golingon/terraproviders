// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	firestorebackupschedule "github.com/golingon/terraproviders/googlebeta/5.24.0/firestorebackupschedule"
	"io"
)

// NewFirestoreBackupSchedule creates a new instance of [FirestoreBackupSchedule].
func NewFirestoreBackupSchedule(name string, args FirestoreBackupScheduleArgs) *FirestoreBackupSchedule {
	return &FirestoreBackupSchedule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirestoreBackupSchedule)(nil)

// FirestoreBackupSchedule represents the Terraform resource google_firestore_backup_schedule.
type FirestoreBackupSchedule struct {
	Name      string
	Args      FirestoreBackupScheduleArgs
	state     *firestoreBackupScheduleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [FirestoreBackupSchedule].
func (fbs *FirestoreBackupSchedule) Type() string {
	return "google_firestore_backup_schedule"
}

// LocalName returns the local name for [FirestoreBackupSchedule].
func (fbs *FirestoreBackupSchedule) LocalName() string {
	return fbs.Name
}

// Configuration returns the configuration (args) for [FirestoreBackupSchedule].
func (fbs *FirestoreBackupSchedule) Configuration() interface{} {
	return fbs.Args
}

// DependOn is used for other resources to depend on [FirestoreBackupSchedule].
func (fbs *FirestoreBackupSchedule) DependOn() terra.Reference {
	return terra.ReferenceResource(fbs)
}

// Dependencies returns the list of resources [FirestoreBackupSchedule] depends_on.
func (fbs *FirestoreBackupSchedule) Dependencies() terra.Dependencies {
	return fbs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [FirestoreBackupSchedule].
func (fbs *FirestoreBackupSchedule) LifecycleManagement() *terra.Lifecycle {
	return fbs.Lifecycle
}

// Attributes returns the attributes for [FirestoreBackupSchedule].
func (fbs *FirestoreBackupSchedule) Attributes() firestoreBackupScheduleAttributes {
	return firestoreBackupScheduleAttributes{ref: terra.ReferenceResource(fbs)}
}

// ImportState imports the given attribute values into [FirestoreBackupSchedule]'s state.
func (fbs *FirestoreBackupSchedule) ImportState(av io.Reader) error {
	fbs.state = &firestoreBackupScheduleState{}
	if err := json.NewDecoder(av).Decode(fbs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fbs.Type(), fbs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [FirestoreBackupSchedule] has state.
func (fbs *FirestoreBackupSchedule) State() (*firestoreBackupScheduleState, bool) {
	return fbs.state, fbs.state != nil
}

// StateMust returns the state for [FirestoreBackupSchedule]. Panics if the state is nil.
func (fbs *FirestoreBackupSchedule) StateMust() *firestoreBackupScheduleState {
	if fbs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fbs.Type(), fbs.LocalName()))
	}
	return fbs.state
}

// FirestoreBackupScheduleArgs contains the configurations for google_firestore_backup_schedule.
type FirestoreBackupScheduleArgs struct {
	// Database: string, optional
	Database terra.StringValue `hcl:"database,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Retention: string, required
	Retention terra.StringValue `hcl:"retention,attr" validate:"required"`
	// DailyRecurrence: optional
	DailyRecurrence *firestorebackupschedule.DailyRecurrence `hcl:"daily_recurrence,block"`
	// Timeouts: optional
	Timeouts *firestorebackupschedule.Timeouts `hcl:"timeouts,block"`
	// WeeklyRecurrence: optional
	WeeklyRecurrence *firestorebackupschedule.WeeklyRecurrence `hcl:"weekly_recurrence,block"`
}
type firestoreBackupScheduleAttributes struct {
	ref terra.Reference
}

// Database returns a reference to field database of google_firestore_backup_schedule.
func (fbs firestoreBackupScheduleAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(fbs.ref.Append("database"))
}

// Id returns a reference to field id of google_firestore_backup_schedule.
func (fbs firestoreBackupScheduleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(fbs.ref.Append("id"))
}

// Name returns a reference to field name of google_firestore_backup_schedule.
func (fbs firestoreBackupScheduleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fbs.ref.Append("name"))
}

// Project returns a reference to field project of google_firestore_backup_schedule.
func (fbs firestoreBackupScheduleAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(fbs.ref.Append("project"))
}

// Retention returns a reference to field retention of google_firestore_backup_schedule.
func (fbs firestoreBackupScheduleAttributes) Retention() terra.StringValue {
	return terra.ReferenceAsString(fbs.ref.Append("retention"))
}

func (fbs firestoreBackupScheduleAttributes) DailyRecurrence() terra.ListValue[firestorebackupschedule.DailyRecurrenceAttributes] {
	return terra.ReferenceAsList[firestorebackupschedule.DailyRecurrenceAttributes](fbs.ref.Append("daily_recurrence"))
}

func (fbs firestoreBackupScheduleAttributes) Timeouts() firestorebackupschedule.TimeoutsAttributes {
	return terra.ReferenceAsSingle[firestorebackupschedule.TimeoutsAttributes](fbs.ref.Append("timeouts"))
}

func (fbs firestoreBackupScheduleAttributes) WeeklyRecurrence() terra.ListValue[firestorebackupschedule.WeeklyRecurrenceAttributes] {
	return terra.ReferenceAsList[firestorebackupschedule.WeeklyRecurrenceAttributes](fbs.ref.Append("weekly_recurrence"))
}

type firestoreBackupScheduleState struct {
	Database         string                                          `json:"database"`
	Id               string                                          `json:"id"`
	Name             string                                          `json:"name"`
	Project          string                                          `json:"project"`
	Retention        string                                          `json:"retention"`
	DailyRecurrence  []firestorebackupschedule.DailyRecurrenceState  `json:"daily_recurrence"`
	Timeouts         *firestorebackupschedule.TimeoutsState          `json:"timeouts"`
	WeeklyRecurrence []firestorebackupschedule.WeeklyRecurrenceState `json:"weekly_recurrence"`
}
