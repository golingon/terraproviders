// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	apphubservice "github.com/golingon/terraproviders/googlebeta/5.24.0/apphubservice"
	"io"
)

// NewApphubService creates a new instance of [ApphubService].
func NewApphubService(name string, args ApphubServiceArgs) *ApphubService {
	return &ApphubService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApphubService)(nil)

// ApphubService represents the Terraform resource google_apphub_service.
type ApphubService struct {
	Name      string
	Args      ApphubServiceArgs
	state     *apphubServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApphubService].
func (as *ApphubService) Type() string {
	return "google_apphub_service"
}

// LocalName returns the local name for [ApphubService].
func (as *ApphubService) LocalName() string {
	return as.Name
}

// Configuration returns the configuration (args) for [ApphubService].
func (as *ApphubService) Configuration() interface{} {
	return as.Args
}

// DependOn is used for other resources to depend on [ApphubService].
func (as *ApphubService) DependOn() terra.Reference {
	return terra.ReferenceResource(as)
}

// Dependencies returns the list of resources [ApphubService] depends_on.
func (as *ApphubService) Dependencies() terra.Dependencies {
	return as.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApphubService].
func (as *ApphubService) LifecycleManagement() *terra.Lifecycle {
	return as.Lifecycle
}

// Attributes returns the attributes for [ApphubService].
func (as *ApphubService) Attributes() apphubServiceAttributes {
	return apphubServiceAttributes{ref: terra.ReferenceResource(as)}
}

// ImportState imports the given attribute values into [ApphubService]'s state.
func (as *ApphubService) ImportState(av io.Reader) error {
	as.state = &apphubServiceState{}
	if err := json.NewDecoder(av).Decode(as.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", as.Type(), as.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApphubService] has state.
func (as *ApphubService) State() (*apphubServiceState, bool) {
	return as.state, as.state != nil
}

// StateMust returns the state for [ApphubService]. Panics if the state is nil.
func (as *ApphubService) StateMust() *apphubServiceState {
	if as.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", as.Type(), as.LocalName()))
	}
	return as.state
}

// ApphubServiceArgs contains the configurations for google_apphub_service.
type ApphubServiceArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DiscoveredService: string, required
	DiscoveredService terra.StringValue `hcl:"discovered_service,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceId: string, required
	ServiceId terra.StringValue `hcl:"service_id,attr" validate:"required"`
	// ServiceProperties: min=0
	ServiceProperties []apphubservice.ServiceProperties `hcl:"service_properties,block" validate:"min=0"`
	// ServiceReference: min=0
	ServiceReference []apphubservice.ServiceReference `hcl:"service_reference,block" validate:"min=0"`
	// Attributes: optional
	Attributes *apphubservice.Attributes `hcl:"attributes,block"`
	// Timeouts: optional
	Timeouts *apphubservice.Timeouts `hcl:"timeouts,block"`
}
type apphubServiceAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of google_apphub_service.
func (as apphubServiceAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("application_id"))
}

// CreateTime returns a reference to field create_time of google_apphub_service.
func (as apphubServiceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("create_time"))
}

// Description returns a reference to field description of google_apphub_service.
func (as apphubServiceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("description"))
}

// DiscoveredService returns a reference to field discovered_service of google_apphub_service.
func (as apphubServiceAttributes) DiscoveredService() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("discovered_service"))
}

// DisplayName returns a reference to field display_name of google_apphub_service.
func (as apphubServiceAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("display_name"))
}

// Id returns a reference to field id of google_apphub_service.
func (as apphubServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("id"))
}

// Location returns a reference to field location of google_apphub_service.
func (as apphubServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("location"))
}

// Name returns a reference to field name of google_apphub_service.
func (as apphubServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("name"))
}

// Project returns a reference to field project of google_apphub_service.
func (as apphubServiceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("project"))
}

// ServiceId returns a reference to field service_id of google_apphub_service.
func (as apphubServiceAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("service_id"))
}

// State returns a reference to field state of google_apphub_service.
func (as apphubServiceAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("state"))
}

// Uid returns a reference to field uid of google_apphub_service.
func (as apphubServiceAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_apphub_service.
func (as apphubServiceAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("update_time"))
}

func (as apphubServiceAttributes) ServiceProperties() terra.ListValue[apphubservice.ServicePropertiesAttributes] {
	return terra.ReferenceAsList[apphubservice.ServicePropertiesAttributes](as.ref.Append("service_properties"))
}

func (as apphubServiceAttributes) ServiceReference() terra.ListValue[apphubservice.ServiceReferenceAttributes] {
	return terra.ReferenceAsList[apphubservice.ServiceReferenceAttributes](as.ref.Append("service_reference"))
}

func (as apphubServiceAttributes) Attributes() terra.ListValue[apphubservice.AttributesAttributes] {
	return terra.ReferenceAsList[apphubservice.AttributesAttributes](as.ref.Append("attributes"))
}

func (as apphubServiceAttributes) Timeouts() apphubservice.TimeoutsAttributes {
	return terra.ReferenceAsSingle[apphubservice.TimeoutsAttributes](as.ref.Append("timeouts"))
}

type apphubServiceState struct {
	ApplicationId     string                                 `json:"application_id"`
	CreateTime        string                                 `json:"create_time"`
	Description       string                                 `json:"description"`
	DiscoveredService string                                 `json:"discovered_service"`
	DisplayName       string                                 `json:"display_name"`
	Id                string                                 `json:"id"`
	Location          string                                 `json:"location"`
	Name              string                                 `json:"name"`
	Project           string                                 `json:"project"`
	ServiceId         string                                 `json:"service_id"`
	State             string                                 `json:"state"`
	Uid               string                                 `json:"uid"`
	UpdateTime        string                                 `json:"update_time"`
	ServiceProperties []apphubservice.ServicePropertiesState `json:"service_properties"`
	ServiceReference  []apphubservice.ServiceReferenceState  `json:"service_reference"`
	Attributes        []apphubservice.AttributesState        `json:"attributes"`
	Timeouts          *apphubservice.TimeoutsState           `json:"timeouts"`
}
