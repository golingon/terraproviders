// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewComputeBackendServiceIamPolicy creates a new instance of [ComputeBackendServiceIamPolicy].
func NewComputeBackendServiceIamPolicy(name string, args ComputeBackendServiceIamPolicyArgs) *ComputeBackendServiceIamPolicy {
	return &ComputeBackendServiceIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeBackendServiceIamPolicy)(nil)

// ComputeBackendServiceIamPolicy represents the Terraform resource google_compute_backend_service_iam_policy.
type ComputeBackendServiceIamPolicy struct {
	Name      string
	Args      ComputeBackendServiceIamPolicyArgs
	state     *computeBackendServiceIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ComputeBackendServiceIamPolicy].
func (cbsip *ComputeBackendServiceIamPolicy) Type() string {
	return "google_compute_backend_service_iam_policy"
}

// LocalName returns the local name for [ComputeBackendServiceIamPolicy].
func (cbsip *ComputeBackendServiceIamPolicy) LocalName() string {
	return cbsip.Name
}

// Configuration returns the configuration (args) for [ComputeBackendServiceIamPolicy].
func (cbsip *ComputeBackendServiceIamPolicy) Configuration() interface{} {
	return cbsip.Args
}

// DependOn is used for other resources to depend on [ComputeBackendServiceIamPolicy].
func (cbsip *ComputeBackendServiceIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(cbsip)
}

// Dependencies returns the list of resources [ComputeBackendServiceIamPolicy] depends_on.
func (cbsip *ComputeBackendServiceIamPolicy) Dependencies() terra.Dependencies {
	return cbsip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ComputeBackendServiceIamPolicy].
func (cbsip *ComputeBackendServiceIamPolicy) LifecycleManagement() *terra.Lifecycle {
	return cbsip.Lifecycle
}

// Attributes returns the attributes for [ComputeBackendServiceIamPolicy].
func (cbsip *ComputeBackendServiceIamPolicy) Attributes() computeBackendServiceIamPolicyAttributes {
	return computeBackendServiceIamPolicyAttributes{ref: terra.ReferenceResource(cbsip)}
}

// ImportState imports the given attribute values into [ComputeBackendServiceIamPolicy]'s state.
func (cbsip *ComputeBackendServiceIamPolicy) ImportState(av io.Reader) error {
	cbsip.state = &computeBackendServiceIamPolicyState{}
	if err := json.NewDecoder(av).Decode(cbsip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cbsip.Type(), cbsip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ComputeBackendServiceIamPolicy] has state.
func (cbsip *ComputeBackendServiceIamPolicy) State() (*computeBackendServiceIamPolicyState, bool) {
	return cbsip.state, cbsip.state != nil
}

// StateMust returns the state for [ComputeBackendServiceIamPolicy]. Panics if the state is nil.
func (cbsip *ComputeBackendServiceIamPolicy) StateMust() *computeBackendServiceIamPolicyState {
	if cbsip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cbsip.Type(), cbsip.LocalName()))
	}
	return cbsip.state
}

// ComputeBackendServiceIamPolicyArgs contains the configurations for google_compute_backend_service_iam_policy.
type ComputeBackendServiceIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}
type computeBackendServiceIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_compute_backend_service_iam_policy.
func (cbsip computeBackendServiceIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(cbsip.ref.Append("etag"))
}

// Id returns a reference to field id of google_compute_backend_service_iam_policy.
func (cbsip computeBackendServiceIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cbsip.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_backend_service_iam_policy.
func (cbsip computeBackendServiceIamPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cbsip.ref.Append("name"))
}

// PolicyData returns a reference to field policy_data of google_compute_backend_service_iam_policy.
func (cbsip computeBackendServiceIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(cbsip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_compute_backend_service_iam_policy.
func (cbsip computeBackendServiceIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(cbsip.ref.Append("project"))
}

type computeBackendServiceIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Name       string `json:"name"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
}
