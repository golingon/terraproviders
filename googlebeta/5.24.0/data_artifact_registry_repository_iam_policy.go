// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import "github.com/golingon/lingon/pkg/terra"

// NewDataArtifactRegistryRepositoryIamPolicy creates a new instance of [DataArtifactRegistryRepositoryIamPolicy].
func NewDataArtifactRegistryRepositoryIamPolicy(name string, args DataArtifactRegistryRepositoryIamPolicyArgs) *DataArtifactRegistryRepositoryIamPolicy {
	return &DataArtifactRegistryRepositoryIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataArtifactRegistryRepositoryIamPolicy)(nil)

// DataArtifactRegistryRepositoryIamPolicy represents the Terraform data resource google_artifact_registry_repository_iam_policy.
type DataArtifactRegistryRepositoryIamPolicy struct {
	Name string
	Args DataArtifactRegistryRepositoryIamPolicyArgs
}

// DataSource returns the Terraform object type for [DataArtifactRegistryRepositoryIamPolicy].
func (arrip *DataArtifactRegistryRepositoryIamPolicy) DataSource() string {
	return "google_artifact_registry_repository_iam_policy"
}

// LocalName returns the local name for [DataArtifactRegistryRepositoryIamPolicy].
func (arrip *DataArtifactRegistryRepositoryIamPolicy) LocalName() string {
	return arrip.Name
}

// Configuration returns the configuration (args) for [DataArtifactRegistryRepositoryIamPolicy].
func (arrip *DataArtifactRegistryRepositoryIamPolicy) Configuration() interface{} {
	return arrip.Args
}

// Attributes returns the attributes for [DataArtifactRegistryRepositoryIamPolicy].
func (arrip *DataArtifactRegistryRepositoryIamPolicy) Attributes() dataArtifactRegistryRepositoryIamPolicyAttributes {
	return dataArtifactRegistryRepositoryIamPolicyAttributes{ref: terra.ReferenceDataResource(arrip)}
}

// DataArtifactRegistryRepositoryIamPolicyArgs contains the configurations for google_artifact_registry_repository_iam_policy.
type DataArtifactRegistryRepositoryIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
}
type dataArtifactRegistryRepositoryIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_artifact_registry_repository_iam_policy.
func (arrip dataArtifactRegistryRepositoryIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(arrip.ref.Append("etag"))
}

// Id returns a reference to field id of google_artifact_registry_repository_iam_policy.
func (arrip dataArtifactRegistryRepositoryIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arrip.ref.Append("id"))
}

// Location returns a reference to field location of google_artifact_registry_repository_iam_policy.
func (arrip dataArtifactRegistryRepositoryIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(arrip.ref.Append("location"))
}

// PolicyData returns a reference to field policy_data of google_artifact_registry_repository_iam_policy.
func (arrip dataArtifactRegistryRepositoryIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(arrip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_artifact_registry_repository_iam_policy.
func (arrip dataArtifactRegistryRepositoryIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(arrip.ref.Append("project"))
}

// Repository returns a reference to field repository of google_artifact_registry_repository_iam_policy.
func (arrip dataArtifactRegistryRepositoryIamPolicyAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(arrip.ref.Append("repository"))
}
