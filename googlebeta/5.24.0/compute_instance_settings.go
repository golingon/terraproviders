// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	computeinstancesettings "github.com/golingon/terraproviders/googlebeta/5.24.0/computeinstancesettings"
	"io"
)

// NewComputeInstanceSettings creates a new instance of [ComputeInstanceSettings].
func NewComputeInstanceSettings(name string, args ComputeInstanceSettingsArgs) *ComputeInstanceSettings {
	return &ComputeInstanceSettings{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeInstanceSettings)(nil)

// ComputeInstanceSettings represents the Terraform resource google_compute_instance_settings.
type ComputeInstanceSettings struct {
	Name      string
	Args      ComputeInstanceSettingsArgs
	state     *computeInstanceSettingsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ComputeInstanceSettings].
func (cis *ComputeInstanceSettings) Type() string {
	return "google_compute_instance_settings"
}

// LocalName returns the local name for [ComputeInstanceSettings].
func (cis *ComputeInstanceSettings) LocalName() string {
	return cis.Name
}

// Configuration returns the configuration (args) for [ComputeInstanceSettings].
func (cis *ComputeInstanceSettings) Configuration() interface{} {
	return cis.Args
}

// DependOn is used for other resources to depend on [ComputeInstanceSettings].
func (cis *ComputeInstanceSettings) DependOn() terra.Reference {
	return terra.ReferenceResource(cis)
}

// Dependencies returns the list of resources [ComputeInstanceSettings] depends_on.
func (cis *ComputeInstanceSettings) Dependencies() terra.Dependencies {
	return cis.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ComputeInstanceSettings].
func (cis *ComputeInstanceSettings) LifecycleManagement() *terra.Lifecycle {
	return cis.Lifecycle
}

// Attributes returns the attributes for [ComputeInstanceSettings].
func (cis *ComputeInstanceSettings) Attributes() computeInstanceSettingsAttributes {
	return computeInstanceSettingsAttributes{ref: terra.ReferenceResource(cis)}
}

// ImportState imports the given attribute values into [ComputeInstanceSettings]'s state.
func (cis *ComputeInstanceSettings) ImportState(av io.Reader) error {
	cis.state = &computeInstanceSettingsState{}
	if err := json.NewDecoder(av).Decode(cis.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cis.Type(), cis.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ComputeInstanceSettings] has state.
func (cis *ComputeInstanceSettings) State() (*computeInstanceSettingsState, bool) {
	return cis.state, cis.state != nil
}

// StateMust returns the state for [ComputeInstanceSettings]. Panics if the state is nil.
func (cis *ComputeInstanceSettings) StateMust() *computeInstanceSettingsState {
	if cis.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cis.Type(), cis.LocalName()))
	}
	return cis.state
}

// ComputeInstanceSettingsArgs contains the configurations for google_compute_instance_settings.
type ComputeInstanceSettingsArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, required
	Zone terra.StringValue `hcl:"zone,attr" validate:"required"`
	// Metadata: optional
	Metadata *computeinstancesettings.Metadata `hcl:"metadata,block"`
	// Timeouts: optional
	Timeouts *computeinstancesettings.Timeouts `hcl:"timeouts,block"`
}
type computeInstanceSettingsAttributes struct {
	ref terra.Reference
}

// Fingerprint returns a reference to field fingerprint of google_compute_instance_settings.
func (cis computeInstanceSettingsAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(cis.ref.Append("fingerprint"))
}

// Id returns a reference to field id of google_compute_instance_settings.
func (cis computeInstanceSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cis.ref.Append("id"))
}

// Project returns a reference to field project of google_compute_instance_settings.
func (cis computeInstanceSettingsAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(cis.ref.Append("project"))
}

// Zone returns a reference to field zone of google_compute_instance_settings.
func (cis computeInstanceSettingsAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(cis.ref.Append("zone"))
}

func (cis computeInstanceSettingsAttributes) Metadata() terra.ListValue[computeinstancesettings.MetadataAttributes] {
	return terra.ReferenceAsList[computeinstancesettings.MetadataAttributes](cis.ref.Append("metadata"))
}

func (cis computeInstanceSettingsAttributes) Timeouts() computeinstancesettings.TimeoutsAttributes {
	return terra.ReferenceAsSingle[computeinstancesettings.TimeoutsAttributes](cis.ref.Append("timeouts"))
}

type computeInstanceSettingsState struct {
	Fingerprint string                                  `json:"fingerprint"`
	Id          string                                  `json:"id"`
	Project     string                                  `json:"project"`
	Zone        string                                  `json:"zone"`
	Metadata    []computeinstancesettings.MetadataState `json:"metadata"`
	Timeouts    *computeinstancesettings.TimeoutsState  `json:"timeouts"`
}
