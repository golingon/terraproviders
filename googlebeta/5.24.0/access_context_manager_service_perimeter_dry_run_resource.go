// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	accesscontextmanagerserviceperimeterdryrunresource "github.com/golingon/terraproviders/googlebeta/5.24.0/accesscontextmanagerserviceperimeterdryrunresource"
	"io"
)

// NewAccessContextManagerServicePerimeterDryRunResource creates a new instance of [AccessContextManagerServicePerimeterDryRunResource].
func NewAccessContextManagerServicePerimeterDryRunResource(name string, args AccessContextManagerServicePerimeterDryRunResourceArgs) *AccessContextManagerServicePerimeterDryRunResource {
	return &AccessContextManagerServicePerimeterDryRunResource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AccessContextManagerServicePerimeterDryRunResource)(nil)

// AccessContextManagerServicePerimeterDryRunResource represents the Terraform resource google_access_context_manager_service_perimeter_dry_run_resource.
type AccessContextManagerServicePerimeterDryRunResource struct {
	Name      string
	Args      AccessContextManagerServicePerimeterDryRunResourceArgs
	state     *accessContextManagerServicePerimeterDryRunResourceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AccessContextManagerServicePerimeterDryRunResource].
func (acmspdrr *AccessContextManagerServicePerimeterDryRunResource) Type() string {
	return "google_access_context_manager_service_perimeter_dry_run_resource"
}

// LocalName returns the local name for [AccessContextManagerServicePerimeterDryRunResource].
func (acmspdrr *AccessContextManagerServicePerimeterDryRunResource) LocalName() string {
	return acmspdrr.Name
}

// Configuration returns the configuration (args) for [AccessContextManagerServicePerimeterDryRunResource].
func (acmspdrr *AccessContextManagerServicePerimeterDryRunResource) Configuration() interface{} {
	return acmspdrr.Args
}

// DependOn is used for other resources to depend on [AccessContextManagerServicePerimeterDryRunResource].
func (acmspdrr *AccessContextManagerServicePerimeterDryRunResource) DependOn() terra.Reference {
	return terra.ReferenceResource(acmspdrr)
}

// Dependencies returns the list of resources [AccessContextManagerServicePerimeterDryRunResource] depends_on.
func (acmspdrr *AccessContextManagerServicePerimeterDryRunResource) Dependencies() terra.Dependencies {
	return acmspdrr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AccessContextManagerServicePerimeterDryRunResource].
func (acmspdrr *AccessContextManagerServicePerimeterDryRunResource) LifecycleManagement() *terra.Lifecycle {
	return acmspdrr.Lifecycle
}

// Attributes returns the attributes for [AccessContextManagerServicePerimeterDryRunResource].
func (acmspdrr *AccessContextManagerServicePerimeterDryRunResource) Attributes() accessContextManagerServicePerimeterDryRunResourceAttributes {
	return accessContextManagerServicePerimeterDryRunResourceAttributes{ref: terra.ReferenceResource(acmspdrr)}
}

// ImportState imports the given attribute values into [AccessContextManagerServicePerimeterDryRunResource]'s state.
func (acmspdrr *AccessContextManagerServicePerimeterDryRunResource) ImportState(av io.Reader) error {
	acmspdrr.state = &accessContextManagerServicePerimeterDryRunResourceState{}
	if err := json.NewDecoder(av).Decode(acmspdrr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acmspdrr.Type(), acmspdrr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AccessContextManagerServicePerimeterDryRunResource] has state.
func (acmspdrr *AccessContextManagerServicePerimeterDryRunResource) State() (*accessContextManagerServicePerimeterDryRunResourceState, bool) {
	return acmspdrr.state, acmspdrr.state != nil
}

// StateMust returns the state for [AccessContextManagerServicePerimeterDryRunResource]. Panics if the state is nil.
func (acmspdrr *AccessContextManagerServicePerimeterDryRunResource) StateMust() *accessContextManagerServicePerimeterDryRunResourceState {
	if acmspdrr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acmspdrr.Type(), acmspdrr.LocalName()))
	}
	return acmspdrr.state
}

// AccessContextManagerServicePerimeterDryRunResourceArgs contains the configurations for google_access_context_manager_service_perimeter_dry_run_resource.
type AccessContextManagerServicePerimeterDryRunResourceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PerimeterName: string, required
	PerimeterName terra.StringValue `hcl:"perimeter_name,attr" validate:"required"`
	// Resource: string, required
	Resource terra.StringValue `hcl:"resource,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *accesscontextmanagerserviceperimeterdryrunresource.Timeouts `hcl:"timeouts,block"`
}
type accessContextManagerServicePerimeterDryRunResourceAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_access_context_manager_service_perimeter_dry_run_resource.
func (acmspdrr accessContextManagerServicePerimeterDryRunResourceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acmspdrr.ref.Append("id"))
}

// PerimeterName returns a reference to field perimeter_name of google_access_context_manager_service_perimeter_dry_run_resource.
func (acmspdrr accessContextManagerServicePerimeterDryRunResourceAttributes) PerimeterName() terra.StringValue {
	return terra.ReferenceAsString(acmspdrr.ref.Append("perimeter_name"))
}

// Resource returns a reference to field resource of google_access_context_manager_service_perimeter_dry_run_resource.
func (acmspdrr accessContextManagerServicePerimeterDryRunResourceAttributes) Resource() terra.StringValue {
	return terra.ReferenceAsString(acmspdrr.ref.Append("resource"))
}

func (acmspdrr accessContextManagerServicePerimeterDryRunResourceAttributes) Timeouts() accesscontextmanagerserviceperimeterdryrunresource.TimeoutsAttributes {
	return terra.ReferenceAsSingle[accesscontextmanagerserviceperimeterdryrunresource.TimeoutsAttributes](acmspdrr.ref.Append("timeouts"))
}

type accessContextManagerServicePerimeterDryRunResourceState struct {
	Id            string                                                            `json:"id"`
	PerimeterName string                                                            `json:"perimeter_name"`
	Resource      string                                                            `json:"resource"`
	Timeouts      *accesscontextmanagerserviceperimeterdryrunresource.TimeoutsState `json:"timeouts"`
}
