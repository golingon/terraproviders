// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	clouddeploytargetiammember "github.com/golingon/terraproviders/googlebeta/5.24.0/clouddeploytargetiammember"
	"io"
)

// NewClouddeployTargetIamMember creates a new instance of [ClouddeployTargetIamMember].
func NewClouddeployTargetIamMember(name string, args ClouddeployTargetIamMemberArgs) *ClouddeployTargetIamMember {
	return &ClouddeployTargetIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ClouddeployTargetIamMember)(nil)

// ClouddeployTargetIamMember represents the Terraform resource google_clouddeploy_target_iam_member.
type ClouddeployTargetIamMember struct {
	Name      string
	Args      ClouddeployTargetIamMemberArgs
	state     *clouddeployTargetIamMemberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ClouddeployTargetIamMember].
func (ctim *ClouddeployTargetIamMember) Type() string {
	return "google_clouddeploy_target_iam_member"
}

// LocalName returns the local name for [ClouddeployTargetIamMember].
func (ctim *ClouddeployTargetIamMember) LocalName() string {
	return ctim.Name
}

// Configuration returns the configuration (args) for [ClouddeployTargetIamMember].
func (ctim *ClouddeployTargetIamMember) Configuration() interface{} {
	return ctim.Args
}

// DependOn is used for other resources to depend on [ClouddeployTargetIamMember].
func (ctim *ClouddeployTargetIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(ctim)
}

// Dependencies returns the list of resources [ClouddeployTargetIamMember] depends_on.
func (ctim *ClouddeployTargetIamMember) Dependencies() terra.Dependencies {
	return ctim.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ClouddeployTargetIamMember].
func (ctim *ClouddeployTargetIamMember) LifecycleManagement() *terra.Lifecycle {
	return ctim.Lifecycle
}

// Attributes returns the attributes for [ClouddeployTargetIamMember].
func (ctim *ClouddeployTargetIamMember) Attributes() clouddeployTargetIamMemberAttributes {
	return clouddeployTargetIamMemberAttributes{ref: terra.ReferenceResource(ctim)}
}

// ImportState imports the given attribute values into [ClouddeployTargetIamMember]'s state.
func (ctim *ClouddeployTargetIamMember) ImportState(av io.Reader) error {
	ctim.state = &clouddeployTargetIamMemberState{}
	if err := json.NewDecoder(av).Decode(ctim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ctim.Type(), ctim.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ClouddeployTargetIamMember] has state.
func (ctim *ClouddeployTargetIamMember) State() (*clouddeployTargetIamMemberState, bool) {
	return ctim.state, ctim.state != nil
}

// StateMust returns the state for [ClouddeployTargetIamMember]. Panics if the state is nil.
func (ctim *ClouddeployTargetIamMember) StateMust() *clouddeployTargetIamMemberState {
	if ctim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ctim.Type(), ctim.LocalName()))
	}
	return ctim.state
}

// ClouddeployTargetIamMemberArgs contains the configurations for google_clouddeploy_target_iam_member.
type ClouddeployTargetIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *clouddeploytargetiammember.Condition `hcl:"condition,block"`
}
type clouddeployTargetIamMemberAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_clouddeploy_target_iam_member.
func (ctim clouddeployTargetIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(ctim.ref.Append("etag"))
}

// Id returns a reference to field id of google_clouddeploy_target_iam_member.
func (ctim clouddeployTargetIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ctim.ref.Append("id"))
}

// Location returns a reference to field location of google_clouddeploy_target_iam_member.
func (ctim clouddeployTargetIamMemberAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ctim.ref.Append("location"))
}

// Member returns a reference to field member of google_clouddeploy_target_iam_member.
func (ctim clouddeployTargetIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceAsString(ctim.ref.Append("member"))
}

// Name returns a reference to field name of google_clouddeploy_target_iam_member.
func (ctim clouddeployTargetIamMemberAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ctim.ref.Append("name"))
}

// Project returns a reference to field project of google_clouddeploy_target_iam_member.
func (ctim clouddeployTargetIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ctim.ref.Append("project"))
}

// Role returns a reference to field role of google_clouddeploy_target_iam_member.
func (ctim clouddeployTargetIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(ctim.ref.Append("role"))
}

func (ctim clouddeployTargetIamMemberAttributes) Condition() terra.ListValue[clouddeploytargetiammember.ConditionAttributes] {
	return terra.ReferenceAsList[clouddeploytargetiammember.ConditionAttributes](ctim.ref.Append("condition"))
}

type clouddeployTargetIamMemberState struct {
	Etag      string                                      `json:"etag"`
	Id        string                                      `json:"id"`
	Location  string                                      `json:"location"`
	Member    string                                      `json:"member"`
	Name      string                                      `json:"name"`
	Project   string                                      `json:"project"`
	Role      string                                      `json:"role"`
	Condition []clouddeploytargetiammember.ConditionState `json:"condition"`
}
