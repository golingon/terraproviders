// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datacomputeinstancegroupmanager

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AllInstancesConfig struct{}

type AutoHealingPolicies struct{}

type InstanceLifecyclePolicy struct{}

type NamedPort struct{}

type StatefulDisk struct{}

type StatefulExternalIp struct{}

type StatefulInternalIp struct{}

type Status struct {
	// StatusAllInstancesConfig: min=0
	AllInstancesConfig []StatusAllInstancesConfig `hcl:"all_instances_config,block" validate:"min=0"`
	// Stateful: min=0
	Stateful []Stateful `hcl:"stateful,block" validate:"min=0"`
	// VersionTarget: min=0
	VersionTarget []VersionTarget `hcl:"version_target,block" validate:"min=0"`
}

type StatusAllInstancesConfig struct{}

type Stateful struct {
	// PerInstanceConfigs: min=0
	PerInstanceConfigs []PerInstanceConfigs `hcl:"per_instance_configs,block" validate:"min=0"`
}

type PerInstanceConfigs struct{}

type VersionTarget struct{}

type UpdatePolicy struct{}

type Version struct {
	// TargetSize: min=0
	TargetSize []TargetSize `hcl:"target_size,block" validate:"min=0"`
}

type TargetSize struct{}

type AllInstancesConfigAttributes struct {
	ref terra.Reference
}

func (aic AllInstancesConfigAttributes) InternalRef() (terra.Reference, error) {
	return aic.ref, nil
}

func (aic AllInstancesConfigAttributes) InternalWithRef(ref terra.Reference) AllInstancesConfigAttributes {
	return AllInstancesConfigAttributes{ref: ref}
}

func (aic AllInstancesConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aic.ref.InternalTokens()
}

func (aic AllInstancesConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aic.ref.Append("labels"))
}

func (aic AllInstancesConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aic.ref.Append("metadata"))
}

type AutoHealingPoliciesAttributes struct {
	ref terra.Reference
}

func (ahp AutoHealingPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return ahp.ref, nil
}

func (ahp AutoHealingPoliciesAttributes) InternalWithRef(ref terra.Reference) AutoHealingPoliciesAttributes {
	return AutoHealingPoliciesAttributes{ref: ref}
}

func (ahp AutoHealingPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ahp.ref.InternalTokens()
}

func (ahp AutoHealingPoliciesAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(ahp.ref.Append("health_check"))
}

func (ahp AutoHealingPoliciesAttributes) InitialDelaySec() terra.NumberValue {
	return terra.ReferenceAsNumber(ahp.ref.Append("initial_delay_sec"))
}

type InstanceLifecyclePolicyAttributes struct {
	ref terra.Reference
}

func (ilp InstanceLifecyclePolicyAttributes) InternalRef() (terra.Reference, error) {
	return ilp.ref, nil
}

func (ilp InstanceLifecyclePolicyAttributes) InternalWithRef(ref terra.Reference) InstanceLifecyclePolicyAttributes {
	return InstanceLifecyclePolicyAttributes{ref: ref}
}

func (ilp InstanceLifecyclePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ilp.ref.InternalTokens()
}

func (ilp InstanceLifecyclePolicyAttributes) DefaultActionOnFailure() terra.StringValue {
	return terra.ReferenceAsString(ilp.ref.Append("default_action_on_failure"))
}

func (ilp InstanceLifecyclePolicyAttributes) ForceUpdateOnRepair() terra.StringValue {
	return terra.ReferenceAsString(ilp.ref.Append("force_update_on_repair"))
}

type NamedPortAttributes struct {
	ref terra.Reference
}

func (np NamedPortAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np NamedPortAttributes) InternalWithRef(ref terra.Reference) NamedPortAttributes {
	return NamedPortAttributes{ref: ref}
}

func (np NamedPortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np NamedPortAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("name"))
}

func (np NamedPortAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("port"))
}

type StatefulDiskAttributes struct {
	ref terra.Reference
}

func (sd StatefulDiskAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd StatefulDiskAttributes) InternalWithRef(ref terra.Reference) StatefulDiskAttributes {
	return StatefulDiskAttributes{ref: ref}
}

func (sd StatefulDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd StatefulDiskAttributes) DeleteRule() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("delete_rule"))
}

func (sd StatefulDiskAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("device_name"))
}

type StatefulExternalIpAttributes struct {
	ref terra.Reference
}

func (sei StatefulExternalIpAttributes) InternalRef() (terra.Reference, error) {
	return sei.ref, nil
}

func (sei StatefulExternalIpAttributes) InternalWithRef(ref terra.Reference) StatefulExternalIpAttributes {
	return StatefulExternalIpAttributes{ref: ref}
}

func (sei StatefulExternalIpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sei.ref.InternalTokens()
}

func (sei StatefulExternalIpAttributes) DeleteRule() terra.StringValue {
	return terra.ReferenceAsString(sei.ref.Append("delete_rule"))
}

func (sei StatefulExternalIpAttributes) InterfaceName() terra.StringValue {
	return terra.ReferenceAsString(sei.ref.Append("interface_name"))
}

type StatefulInternalIpAttributes struct {
	ref terra.Reference
}

func (sii StatefulInternalIpAttributes) InternalRef() (terra.Reference, error) {
	return sii.ref, nil
}

func (sii StatefulInternalIpAttributes) InternalWithRef(ref terra.Reference) StatefulInternalIpAttributes {
	return StatefulInternalIpAttributes{ref: ref}
}

func (sii StatefulInternalIpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sii.ref.InternalTokens()
}

func (sii StatefulInternalIpAttributes) DeleteRule() terra.StringValue {
	return terra.ReferenceAsString(sii.ref.Append("delete_rule"))
}

func (sii StatefulInternalIpAttributes) InterfaceName() terra.StringValue {
	return terra.ReferenceAsString(sii.ref.Append("interface_name"))
}

type StatusAttributes struct {
	ref terra.Reference
}

func (s StatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StatusAttributes) InternalWithRef(ref terra.Reference) StatusAttributes {
	return StatusAttributes{ref: ref}
}

func (s StatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StatusAttributes) IsStable() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("is_stable"))
}

func (s StatusAttributes) AllInstancesConfig() terra.ListValue[StatusAllInstancesConfigAttributes] {
	return terra.ReferenceAsList[StatusAllInstancesConfigAttributes](s.ref.Append("all_instances_config"))
}

func (s StatusAttributes) Stateful() terra.ListValue[StatefulAttributes] {
	return terra.ReferenceAsList[StatefulAttributes](s.ref.Append("stateful"))
}

func (s StatusAttributes) VersionTarget() terra.ListValue[VersionTargetAttributes] {
	return terra.ReferenceAsList[VersionTargetAttributes](s.ref.Append("version_target"))
}

type StatusAllInstancesConfigAttributes struct {
	ref terra.Reference
}

func (aic StatusAllInstancesConfigAttributes) InternalRef() (terra.Reference, error) {
	return aic.ref, nil
}

func (aic StatusAllInstancesConfigAttributes) InternalWithRef(ref terra.Reference) StatusAllInstancesConfigAttributes {
	return StatusAllInstancesConfigAttributes{ref: ref}
}

func (aic StatusAllInstancesConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aic.ref.InternalTokens()
}

func (aic StatusAllInstancesConfigAttributes) CurrentRevision() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("current_revision"))
}

func (aic StatusAllInstancesConfigAttributes) Effective() terra.BoolValue {
	return terra.ReferenceAsBool(aic.ref.Append("effective"))
}

type StatefulAttributes struct {
	ref terra.Reference
}

func (s StatefulAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StatefulAttributes) InternalWithRef(ref terra.Reference) StatefulAttributes {
	return StatefulAttributes{ref: ref}
}

func (s StatefulAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StatefulAttributes) HasStatefulConfig() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("has_stateful_config"))
}

func (s StatefulAttributes) PerInstanceConfigs() terra.ListValue[PerInstanceConfigsAttributes] {
	return terra.ReferenceAsList[PerInstanceConfigsAttributes](s.ref.Append("per_instance_configs"))
}

type PerInstanceConfigsAttributes struct {
	ref terra.Reference
}

func (pic PerInstanceConfigsAttributes) InternalRef() (terra.Reference, error) {
	return pic.ref, nil
}

func (pic PerInstanceConfigsAttributes) InternalWithRef(ref terra.Reference) PerInstanceConfigsAttributes {
	return PerInstanceConfigsAttributes{ref: ref}
}

func (pic PerInstanceConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pic.ref.InternalTokens()
}

func (pic PerInstanceConfigsAttributes) AllEffective() terra.BoolValue {
	return terra.ReferenceAsBool(pic.ref.Append("all_effective"))
}

type VersionTargetAttributes struct {
	ref terra.Reference
}

func (vt VersionTargetAttributes) InternalRef() (terra.Reference, error) {
	return vt.ref, nil
}

func (vt VersionTargetAttributes) InternalWithRef(ref terra.Reference) VersionTargetAttributes {
	return VersionTargetAttributes{ref: ref}
}

func (vt VersionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vt.ref.InternalTokens()
}

func (vt VersionTargetAttributes) IsReached() terra.BoolValue {
	return terra.ReferenceAsBool(vt.ref.Append("is_reached"))
}

type UpdatePolicyAttributes struct {
	ref terra.Reference
}

func (up UpdatePolicyAttributes) InternalRef() (terra.Reference, error) {
	return up.ref, nil
}

func (up UpdatePolicyAttributes) InternalWithRef(ref terra.Reference) UpdatePolicyAttributes {
	return UpdatePolicyAttributes{ref: ref}
}

func (up UpdatePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return up.ref.InternalTokens()
}

func (up UpdatePolicyAttributes) MaxSurgeFixed() terra.NumberValue {
	return terra.ReferenceAsNumber(up.ref.Append("max_surge_fixed"))
}

func (up UpdatePolicyAttributes) MaxSurgePercent() terra.NumberValue {
	return terra.ReferenceAsNumber(up.ref.Append("max_surge_percent"))
}

func (up UpdatePolicyAttributes) MaxUnavailableFixed() terra.NumberValue {
	return terra.ReferenceAsNumber(up.ref.Append("max_unavailable_fixed"))
}

func (up UpdatePolicyAttributes) MaxUnavailablePercent() terra.NumberValue {
	return terra.ReferenceAsNumber(up.ref.Append("max_unavailable_percent"))
}

func (up UpdatePolicyAttributes) MinReadySec() terra.NumberValue {
	return terra.ReferenceAsNumber(up.ref.Append("min_ready_sec"))
}

func (up UpdatePolicyAttributes) MinimalAction() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("minimal_action"))
}

func (up UpdatePolicyAttributes) MostDisruptiveAllowedAction() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("most_disruptive_allowed_action"))
}

func (up UpdatePolicyAttributes) ReplacementMethod() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("replacement_method"))
}

func (up UpdatePolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("type"))
}

type VersionAttributes struct {
	ref terra.Reference
}

func (v VersionAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VersionAttributes) InternalWithRef(ref terra.Reference) VersionAttributes {
	return VersionAttributes{ref: ref}
}

func (v VersionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VersionAttributes) InstanceTemplate() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("instance_template"))
}

func (v VersionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v VersionAttributes) TargetSize() terra.ListValue[TargetSizeAttributes] {
	return terra.ReferenceAsList[TargetSizeAttributes](v.ref.Append("target_size"))
}

type TargetSizeAttributes struct {
	ref terra.Reference
}

func (ts TargetSizeAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TargetSizeAttributes) InternalWithRef(ref terra.Reference) TargetSizeAttributes {
	return TargetSizeAttributes{ref: ref}
}

func (ts TargetSizeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TargetSizeAttributes) Fixed() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("fixed"))
}

func (ts TargetSizeAttributes) Percent() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("percent"))
}

type AllInstancesConfigState struct {
	Labels   map[string]string `json:"labels"`
	Metadata map[string]string `json:"metadata"`
}

type AutoHealingPoliciesState struct {
	HealthCheck     string  `json:"health_check"`
	InitialDelaySec float64 `json:"initial_delay_sec"`
}

type InstanceLifecyclePolicyState struct {
	DefaultActionOnFailure string `json:"default_action_on_failure"`
	ForceUpdateOnRepair    string `json:"force_update_on_repair"`
}

type NamedPortState struct {
	Name string  `json:"name"`
	Port float64 `json:"port"`
}

type StatefulDiskState struct {
	DeleteRule string `json:"delete_rule"`
	DeviceName string `json:"device_name"`
}

type StatefulExternalIpState struct {
	DeleteRule    string `json:"delete_rule"`
	InterfaceName string `json:"interface_name"`
}

type StatefulInternalIpState struct {
	DeleteRule    string `json:"delete_rule"`
	InterfaceName string `json:"interface_name"`
}

type StatusState struct {
	IsStable           bool                            `json:"is_stable"`
	AllInstancesConfig []StatusAllInstancesConfigState `json:"all_instances_config"`
	Stateful           []StatefulState                 `json:"stateful"`
	VersionTarget      []VersionTargetState            `json:"version_target"`
}

type StatusAllInstancesConfigState struct {
	CurrentRevision string `json:"current_revision"`
	Effective       bool   `json:"effective"`
}

type StatefulState struct {
	HasStatefulConfig  bool                      `json:"has_stateful_config"`
	PerInstanceConfigs []PerInstanceConfigsState `json:"per_instance_configs"`
}

type PerInstanceConfigsState struct {
	AllEffective bool `json:"all_effective"`
}

type VersionTargetState struct {
	IsReached bool `json:"is_reached"`
}

type UpdatePolicyState struct {
	MaxSurgeFixed               float64 `json:"max_surge_fixed"`
	MaxSurgePercent             float64 `json:"max_surge_percent"`
	MaxUnavailableFixed         float64 `json:"max_unavailable_fixed"`
	MaxUnavailablePercent       float64 `json:"max_unavailable_percent"`
	MinReadySec                 float64 `json:"min_ready_sec"`
	MinimalAction               string  `json:"minimal_action"`
	MostDisruptiveAllowedAction string  `json:"most_disruptive_allowed_action"`
	ReplacementMethod           string  `json:"replacement_method"`
	Type                        string  `json:"type"`
}

type VersionState struct {
	InstanceTemplate string            `json:"instance_template"`
	Name             string            `json:"name"`
	TargetSize       []TargetSizeState `json:"target_size"`
}

type TargetSizeState struct {
	Fixed   float64 `json:"fixed"`
	Percent float64 `json:"percent"`
}
