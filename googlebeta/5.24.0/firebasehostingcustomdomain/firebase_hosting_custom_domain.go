// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package firebasehostingcustomdomain

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Cert struct {
	// Verification: min=0
	Verification []Verification `hcl:"verification,block" validate:"min=0"`
}

type Verification struct {
	// Dns: min=0
	Dns []Dns `hcl:"dns,block" validate:"min=0"`
	// Http: min=0
	Http []Http `hcl:"http,block" validate:"min=0"`
}

type Dns struct {
	// DnsDesired: min=0
	Desired []DnsDesired `hcl:"desired,block" validate:"min=0"`
	// DnsDiscovered: min=0
	Discovered []DnsDiscovered `hcl:"discovered,block" validate:"min=0"`
}

type DnsDesired struct {
	// DnsDesiredRecords: min=0
	Records []DnsDesiredRecords `hcl:"records,block" validate:"min=0"`
}

type DnsDesiredRecords struct{}

type DnsDiscovered struct {
	// DnsDiscoveredRecords: min=0
	Records []DnsDiscoveredRecords `hcl:"records,block" validate:"min=0"`
}

type DnsDiscoveredRecords struct{}

type Http struct{}

type Issues struct{}

type RequiredDnsUpdates struct {
	// RequiredDnsUpdatesDesired: min=0
	Desired []RequiredDnsUpdatesDesired `hcl:"desired,block" validate:"min=0"`
	// RequiredDnsUpdatesDiscovered: min=0
	Discovered []RequiredDnsUpdatesDiscovered `hcl:"discovered,block" validate:"min=0"`
}

type RequiredDnsUpdatesDesired struct {
	// RequiredDnsUpdatesDesiredRecords: min=0
	Records []RequiredDnsUpdatesDesiredRecords `hcl:"records,block" validate:"min=0"`
}

type RequiredDnsUpdatesDesiredRecords struct{}

type RequiredDnsUpdatesDiscovered struct {
	// RequiredDnsUpdatesDiscoveredRecords: min=0
	Records []RequiredDnsUpdatesDiscoveredRecords `hcl:"records,block" validate:"min=0"`
}

type RequiredDnsUpdatesDiscoveredRecords struct{}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CertAttributes struct {
	ref terra.Reference
}

func (c CertAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CertAttributes) InternalWithRef(ref terra.Reference) CertAttributes {
	return CertAttributes{ref: ref}
}

func (c CertAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CertAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("state"))
}

func (c CertAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

func (c CertAttributes) Verification() terra.ListValue[VerificationAttributes] {
	return terra.ReferenceAsList[VerificationAttributes](c.ref.Append("verification"))
}

type VerificationAttributes struct {
	ref terra.Reference
}

func (v VerificationAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VerificationAttributes) InternalWithRef(ref terra.Reference) VerificationAttributes {
	return VerificationAttributes{ref: ref}
}

func (v VerificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VerificationAttributes) Dns() terra.ListValue[DnsAttributes] {
	return terra.ReferenceAsList[DnsAttributes](v.ref.Append("dns"))
}

func (v VerificationAttributes) Http() terra.ListValue[HttpAttributes] {
	return terra.ReferenceAsList[HttpAttributes](v.ref.Append("http"))
}

type DnsAttributes struct {
	ref terra.Reference
}

func (d DnsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DnsAttributes) InternalWithRef(ref terra.Reference) DnsAttributes {
	return DnsAttributes{ref: ref}
}

func (d DnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DnsAttributes) CheckTime() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("check_time"))
}

func (d DnsAttributes) Desired() terra.ListValue[DnsDesiredAttributes] {
	return terra.ReferenceAsList[DnsDesiredAttributes](d.ref.Append("desired"))
}

func (d DnsAttributes) Discovered() terra.ListValue[DnsDiscoveredAttributes] {
	return terra.ReferenceAsList[DnsDiscoveredAttributes](d.ref.Append("discovered"))
}

type DnsDesiredAttributes struct {
	ref terra.Reference
}

func (d DnsDesiredAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DnsDesiredAttributes) InternalWithRef(ref terra.Reference) DnsDesiredAttributes {
	return DnsDesiredAttributes{ref: ref}
}

func (d DnsDesiredAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DnsDesiredAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("domain_name"))
}

func (d DnsDesiredAttributes) Records() terra.ListValue[DnsDesiredRecordsAttributes] {
	return terra.ReferenceAsList[DnsDesiredRecordsAttributes](d.ref.Append("records"))
}

type DnsDesiredRecordsAttributes struct {
	ref terra.Reference
}

func (r DnsDesiredRecordsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DnsDesiredRecordsAttributes) InternalWithRef(ref terra.Reference) DnsDesiredRecordsAttributes {
	return DnsDesiredRecordsAttributes{ref: ref}
}

func (r DnsDesiredRecordsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DnsDesiredRecordsAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("domain_name"))
}

func (r DnsDesiredRecordsAttributes) Rdata() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rdata"))
}

func (r DnsDesiredRecordsAttributes) RequiredAction() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("required_action"))
}

func (r DnsDesiredRecordsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("type"))
}

type DnsDiscoveredAttributes struct {
	ref terra.Reference
}

func (d DnsDiscoveredAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DnsDiscoveredAttributes) InternalWithRef(ref terra.Reference) DnsDiscoveredAttributes {
	return DnsDiscoveredAttributes{ref: ref}
}

func (d DnsDiscoveredAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DnsDiscoveredAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("domain_name"))
}

func (d DnsDiscoveredAttributes) Records() terra.ListValue[DnsDiscoveredRecordsAttributes] {
	return terra.ReferenceAsList[DnsDiscoveredRecordsAttributes](d.ref.Append("records"))
}

type DnsDiscoveredRecordsAttributes struct {
	ref terra.Reference
}

func (r DnsDiscoveredRecordsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DnsDiscoveredRecordsAttributes) InternalWithRef(ref terra.Reference) DnsDiscoveredRecordsAttributes {
	return DnsDiscoveredRecordsAttributes{ref: ref}
}

func (r DnsDiscoveredRecordsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DnsDiscoveredRecordsAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("domain_name"))
}

func (r DnsDiscoveredRecordsAttributes) Rdata() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rdata"))
}

func (r DnsDiscoveredRecordsAttributes) RequiredAction() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("required_action"))
}

func (r DnsDiscoveredRecordsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("type"))
}

type HttpAttributes struct {
	ref terra.Reference
}

func (h HttpAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HttpAttributes) InternalWithRef(ref terra.Reference) HttpAttributes {
	return HttpAttributes{ref: ref}
}

func (h HttpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HttpAttributes) Desired() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("desired"))
}

func (h HttpAttributes) Discovered() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("discovered"))
}

func (h HttpAttributes) LastCheckTime() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("last_check_time"))
}

func (h HttpAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("path"))
}

type IssuesAttributes struct {
	ref terra.Reference
}

func (i IssuesAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IssuesAttributes) InternalWithRef(ref terra.Reference) IssuesAttributes {
	return IssuesAttributes{ref: ref}
}

func (i IssuesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IssuesAttributes) Code() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("code"))
}

func (i IssuesAttributes) Details() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("details"))
}

func (i IssuesAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("message"))
}

type RequiredDnsUpdatesAttributes struct {
	ref terra.Reference
}

func (rdu RequiredDnsUpdatesAttributes) InternalRef() (terra.Reference, error) {
	return rdu.ref, nil
}

func (rdu RequiredDnsUpdatesAttributes) InternalWithRef(ref terra.Reference) RequiredDnsUpdatesAttributes {
	return RequiredDnsUpdatesAttributes{ref: ref}
}

func (rdu RequiredDnsUpdatesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rdu.ref.InternalTokens()
}

func (rdu RequiredDnsUpdatesAttributes) CheckTime() terra.StringValue {
	return terra.ReferenceAsString(rdu.ref.Append("check_time"))
}

func (rdu RequiredDnsUpdatesAttributes) Desired() terra.ListValue[RequiredDnsUpdatesDesiredAttributes] {
	return terra.ReferenceAsList[RequiredDnsUpdatesDesiredAttributes](rdu.ref.Append("desired"))
}

func (rdu RequiredDnsUpdatesAttributes) Discovered() terra.ListValue[RequiredDnsUpdatesDiscoveredAttributes] {
	return terra.ReferenceAsList[RequiredDnsUpdatesDiscoveredAttributes](rdu.ref.Append("discovered"))
}

type RequiredDnsUpdatesDesiredAttributes struct {
	ref terra.Reference
}

func (d RequiredDnsUpdatesDesiredAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d RequiredDnsUpdatesDesiredAttributes) InternalWithRef(ref terra.Reference) RequiredDnsUpdatesDesiredAttributes {
	return RequiredDnsUpdatesDesiredAttributes{ref: ref}
}

func (d RequiredDnsUpdatesDesiredAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d RequiredDnsUpdatesDesiredAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("domain_name"))
}

func (d RequiredDnsUpdatesDesiredAttributes) Records() terra.ListValue[RequiredDnsUpdatesDesiredRecordsAttributes] {
	return terra.ReferenceAsList[RequiredDnsUpdatesDesiredRecordsAttributes](d.ref.Append("records"))
}

type RequiredDnsUpdatesDesiredRecordsAttributes struct {
	ref terra.Reference
}

func (r RequiredDnsUpdatesDesiredRecordsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RequiredDnsUpdatesDesiredRecordsAttributes) InternalWithRef(ref terra.Reference) RequiredDnsUpdatesDesiredRecordsAttributes {
	return RequiredDnsUpdatesDesiredRecordsAttributes{ref: ref}
}

func (r RequiredDnsUpdatesDesiredRecordsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RequiredDnsUpdatesDesiredRecordsAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("domain_name"))
}

func (r RequiredDnsUpdatesDesiredRecordsAttributes) Rdata() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rdata"))
}

func (r RequiredDnsUpdatesDesiredRecordsAttributes) RequiredAction() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("required_action"))
}

func (r RequiredDnsUpdatesDesiredRecordsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("type"))
}

type RequiredDnsUpdatesDiscoveredAttributes struct {
	ref terra.Reference
}

func (d RequiredDnsUpdatesDiscoveredAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d RequiredDnsUpdatesDiscoveredAttributes) InternalWithRef(ref terra.Reference) RequiredDnsUpdatesDiscoveredAttributes {
	return RequiredDnsUpdatesDiscoveredAttributes{ref: ref}
}

func (d RequiredDnsUpdatesDiscoveredAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d RequiredDnsUpdatesDiscoveredAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("domain_name"))
}

func (d RequiredDnsUpdatesDiscoveredAttributes) Records() terra.ListValue[RequiredDnsUpdatesDiscoveredRecordsAttributes] {
	return terra.ReferenceAsList[RequiredDnsUpdatesDiscoveredRecordsAttributes](d.ref.Append("records"))
}

type RequiredDnsUpdatesDiscoveredRecordsAttributes struct {
	ref terra.Reference
}

func (r RequiredDnsUpdatesDiscoveredRecordsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RequiredDnsUpdatesDiscoveredRecordsAttributes) InternalWithRef(ref terra.Reference) RequiredDnsUpdatesDiscoveredRecordsAttributes {
	return RequiredDnsUpdatesDiscoveredRecordsAttributes{ref: ref}
}

func (r RequiredDnsUpdatesDiscoveredRecordsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RequiredDnsUpdatesDiscoveredRecordsAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("domain_name"))
}

func (r RequiredDnsUpdatesDiscoveredRecordsAttributes) Rdata() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rdata"))
}

func (r RequiredDnsUpdatesDiscoveredRecordsAttributes) RequiredAction() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("required_action"))
}

func (r RequiredDnsUpdatesDiscoveredRecordsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CertState struct {
	State        string              `json:"state"`
	Type         string              `json:"type"`
	Verification []VerificationState `json:"verification"`
}

type VerificationState struct {
	Dns  []DnsState  `json:"dns"`
	Http []HttpState `json:"http"`
}

type DnsState struct {
	CheckTime  string               `json:"check_time"`
	Desired    []DnsDesiredState    `json:"desired"`
	Discovered []DnsDiscoveredState `json:"discovered"`
}

type DnsDesiredState struct {
	DomainName string                   `json:"domain_name"`
	Records    []DnsDesiredRecordsState `json:"records"`
}

type DnsDesiredRecordsState struct {
	DomainName     string `json:"domain_name"`
	Rdata          string `json:"rdata"`
	RequiredAction string `json:"required_action"`
	Type           string `json:"type"`
}

type DnsDiscoveredState struct {
	DomainName string                      `json:"domain_name"`
	Records    []DnsDiscoveredRecordsState `json:"records"`
}

type DnsDiscoveredRecordsState struct {
	DomainName     string `json:"domain_name"`
	Rdata          string `json:"rdata"`
	RequiredAction string `json:"required_action"`
	Type           string `json:"type"`
}

type HttpState struct {
	Desired       string `json:"desired"`
	Discovered    string `json:"discovered"`
	LastCheckTime string `json:"last_check_time"`
	Path          string `json:"path"`
}

type IssuesState struct {
	Code    float64 `json:"code"`
	Details string  `json:"details"`
	Message string  `json:"message"`
}

type RequiredDnsUpdatesState struct {
	CheckTime  string                              `json:"check_time"`
	Desired    []RequiredDnsUpdatesDesiredState    `json:"desired"`
	Discovered []RequiredDnsUpdatesDiscoveredState `json:"discovered"`
}

type RequiredDnsUpdatesDesiredState struct {
	DomainName string                                  `json:"domain_name"`
	Records    []RequiredDnsUpdatesDesiredRecordsState `json:"records"`
}

type RequiredDnsUpdatesDesiredRecordsState struct {
	DomainName     string `json:"domain_name"`
	Rdata          string `json:"rdata"`
	RequiredAction string `json:"required_action"`
	Type           string `json:"type"`
}

type RequiredDnsUpdatesDiscoveredState struct {
	DomainName string                                     `json:"domain_name"`
	Records    []RequiredDnsUpdatesDiscoveredRecordsState `json:"records"`
}

type RequiredDnsUpdatesDiscoveredRecordsState struct {
	DomainName     string `json:"domain_name"`
	Rdata          string `json:"rdata"`
	RequiredAction string `json:"required_action"`
	Type           string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
