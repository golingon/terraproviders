// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dataformrepository

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type GitRemoteSettings struct {
	// AuthenticationTokenSecretVersion: string, optional
	AuthenticationTokenSecretVersion terra.StringValue `hcl:"authentication_token_secret_version,attr"`
	// DefaultBranch: string, required
	DefaultBranch terra.StringValue `hcl:"default_branch,attr" validate:"required"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// SshAuthenticationConfig: optional
	SshAuthenticationConfig *SshAuthenticationConfig `hcl:"ssh_authentication_config,block"`
}

type SshAuthenticationConfig struct {
	// HostPublicKey: string, required
	HostPublicKey terra.StringValue `hcl:"host_public_key,attr" validate:"required"`
	// UserPrivateKeySecretVersion: string, required
	UserPrivateKeySecretVersion terra.StringValue `hcl:"user_private_key_secret_version,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type WorkspaceCompilationOverrides struct {
	// DefaultDatabase: string, optional
	DefaultDatabase terra.StringValue `hcl:"default_database,attr"`
	// SchemaSuffix: string, optional
	SchemaSuffix terra.StringValue `hcl:"schema_suffix,attr"`
	// TablePrefix: string, optional
	TablePrefix terra.StringValue `hcl:"table_prefix,attr"`
}

type GitRemoteSettingsAttributes struct {
	ref terra.Reference
}

func (grs GitRemoteSettingsAttributes) InternalRef() (terra.Reference, error) {
	return grs.ref, nil
}

func (grs GitRemoteSettingsAttributes) InternalWithRef(ref terra.Reference) GitRemoteSettingsAttributes {
	return GitRemoteSettingsAttributes{ref: ref}
}

func (grs GitRemoteSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return grs.ref.InternalTokens()
}

func (grs GitRemoteSettingsAttributes) AuthenticationTokenSecretVersion() terra.StringValue {
	return terra.ReferenceAsString(grs.ref.Append("authentication_token_secret_version"))
}

func (grs GitRemoteSettingsAttributes) DefaultBranch() terra.StringValue {
	return terra.ReferenceAsString(grs.ref.Append("default_branch"))
}

func (grs GitRemoteSettingsAttributes) TokenStatus() terra.StringValue {
	return terra.ReferenceAsString(grs.ref.Append("token_status"))
}

func (grs GitRemoteSettingsAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(grs.ref.Append("url"))
}

func (grs GitRemoteSettingsAttributes) SshAuthenticationConfig() terra.ListValue[SshAuthenticationConfigAttributes] {
	return terra.ReferenceAsList[SshAuthenticationConfigAttributes](grs.ref.Append("ssh_authentication_config"))
}

type SshAuthenticationConfigAttributes struct {
	ref terra.Reference
}

func (sac SshAuthenticationConfigAttributes) InternalRef() (terra.Reference, error) {
	return sac.ref, nil
}

func (sac SshAuthenticationConfigAttributes) InternalWithRef(ref terra.Reference) SshAuthenticationConfigAttributes {
	return SshAuthenticationConfigAttributes{ref: ref}
}

func (sac SshAuthenticationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sac.ref.InternalTokens()
}

func (sac SshAuthenticationConfigAttributes) HostPublicKey() terra.StringValue {
	return terra.ReferenceAsString(sac.ref.Append("host_public_key"))
}

func (sac SshAuthenticationConfigAttributes) UserPrivateKeySecretVersion() terra.StringValue {
	return terra.ReferenceAsString(sac.ref.Append("user_private_key_secret_version"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type WorkspaceCompilationOverridesAttributes struct {
	ref terra.Reference
}

func (wco WorkspaceCompilationOverridesAttributes) InternalRef() (terra.Reference, error) {
	return wco.ref, nil
}

func (wco WorkspaceCompilationOverridesAttributes) InternalWithRef(ref terra.Reference) WorkspaceCompilationOverridesAttributes {
	return WorkspaceCompilationOverridesAttributes{ref: ref}
}

func (wco WorkspaceCompilationOverridesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wco.ref.InternalTokens()
}

func (wco WorkspaceCompilationOverridesAttributes) DefaultDatabase() terra.StringValue {
	return terra.ReferenceAsString(wco.ref.Append("default_database"))
}

func (wco WorkspaceCompilationOverridesAttributes) SchemaSuffix() terra.StringValue {
	return terra.ReferenceAsString(wco.ref.Append("schema_suffix"))
}

func (wco WorkspaceCompilationOverridesAttributes) TablePrefix() terra.StringValue {
	return terra.ReferenceAsString(wco.ref.Append("table_prefix"))
}

type GitRemoteSettingsState struct {
	AuthenticationTokenSecretVersion string                         `json:"authentication_token_secret_version"`
	DefaultBranch                    string                         `json:"default_branch"`
	TokenStatus                      string                         `json:"token_status"`
	Url                              string                         `json:"url"`
	SshAuthenticationConfig          []SshAuthenticationConfigState `json:"ssh_authentication_config"`
}

type SshAuthenticationConfigState struct {
	HostPublicKey               string `json:"host_public_key"`
	UserPrivateKeySecretVersion string `json:"user_private_key_secret_version"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type WorkspaceCompilationOverridesState struct {
	DefaultDatabase string `json:"default_database"`
	SchemaSuffix    string `json:"schema_suffix"`
	TablePrefix     string `json:"table_prefix"`
}
