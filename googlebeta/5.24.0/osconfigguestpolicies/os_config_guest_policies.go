// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package osconfigguestpolicies

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Assignment struct {
	// InstanceNamePrefixes: list of string, optional
	InstanceNamePrefixes terra.ListValue[terra.StringValue] `hcl:"instance_name_prefixes,attr"`
	// Instances: list of string, optional
	Instances terra.ListValue[terra.StringValue] `hcl:"instances,attr"`
	// Zones: list of string, optional
	Zones terra.ListValue[terra.StringValue] `hcl:"zones,attr"`
	// GroupLabels: min=0
	GroupLabels []GroupLabels `hcl:"group_labels,block" validate:"min=0"`
	// OsTypes: min=0
	OsTypes []OsTypes `hcl:"os_types,block" validate:"min=0"`
}

type GroupLabels struct {
	// Labels: map of string, required
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr" validate:"required"`
}

type OsTypes struct {
	// OsArchitecture: string, optional
	OsArchitecture terra.StringValue `hcl:"os_architecture,attr"`
	// OsShortName: string, optional
	OsShortName terra.StringValue `hcl:"os_short_name,attr"`
	// OsVersion: string, optional
	OsVersion terra.StringValue `hcl:"os_version,attr"`
}

type PackageRepositories struct {
	// Apt: optional
	Apt *Apt `hcl:"apt,block"`
	// Goo: optional
	Goo *Goo `hcl:"goo,block"`
	// Yum: optional
	Yum *Yum `hcl:"yum,block"`
	// Zypper: optional
	Zypper *Zypper `hcl:"zypper,block"`
}

type Apt struct {
	// ArchiveType: string, optional
	ArchiveType terra.StringValue `hcl:"archive_type,attr"`
	// Components: list of string, required
	Components terra.ListValue[terra.StringValue] `hcl:"components,attr" validate:"required"`
	// Distribution: string, required
	Distribution terra.StringValue `hcl:"distribution,attr" validate:"required"`
	// GpgKey: string, optional
	GpgKey terra.StringValue `hcl:"gpg_key,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type Goo struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type Yum struct {
	// BaseUrl: string, required
	BaseUrl terra.StringValue `hcl:"base_url,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// GpgKeys: list of string, optional
	GpgKeys terra.ListValue[terra.StringValue] `hcl:"gpg_keys,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
}

type Zypper struct {
	// BaseUrl: string, required
	BaseUrl terra.StringValue `hcl:"base_url,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// GpgKeys: list of string, optional
	GpgKeys terra.ListValue[terra.StringValue] `hcl:"gpg_keys,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
}

type Packages struct {
	// DesiredState: string, optional
	DesiredState terra.StringValue `hcl:"desired_state,attr"`
	// Manager: string, optional
	Manager terra.StringValue `hcl:"manager,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Recipes struct {
	// DesiredState: string, optional
	DesiredState terra.StringValue `hcl:"desired_state,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// Artifacts: min=0
	Artifacts []Artifacts `hcl:"artifacts,block" validate:"min=0"`
	// InstallSteps: min=0
	InstallSteps []InstallSteps `hcl:"install_steps,block" validate:"min=0"`
	// UpdateSteps: min=0
	UpdateSteps []UpdateSteps `hcl:"update_steps,block" validate:"min=0"`
}

type Artifacts struct {
	// AllowInsecure: bool, optional
	AllowInsecure terra.BoolValue `hcl:"allow_insecure,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Gcs: optional
	Gcs *Gcs `hcl:"gcs,block"`
	// Remote: optional
	Remote *Remote `hcl:"remote,block"`
}

type Gcs struct {
	// Bucket: string, optional
	Bucket terra.StringValue `hcl:"bucket,attr"`
	// Generation: number, optional
	Generation terra.NumberValue `hcl:"generation,attr"`
	// Object: string, optional
	Object terra.StringValue `hcl:"object,attr"`
}

type Remote struct {
	// CheckSum: string, optional
	CheckSum terra.StringValue `hcl:"check_sum,attr"`
	// Uri: string, optional
	Uri terra.StringValue `hcl:"uri,attr"`
}

type InstallSteps struct {
	// InstallStepsArchiveExtraction: optional
	ArchiveExtraction *InstallStepsArchiveExtraction `hcl:"archive_extraction,block"`
	// InstallStepsDpkgInstallation: optional
	DpkgInstallation *InstallStepsDpkgInstallation `hcl:"dpkg_installation,block"`
	// InstallStepsFileCopy: optional
	FileCopy *InstallStepsFileCopy `hcl:"file_copy,block"`
	// InstallStepsFileExec: optional
	FileExec *InstallStepsFileExec `hcl:"file_exec,block"`
	// InstallStepsMsiInstallation: optional
	MsiInstallation *InstallStepsMsiInstallation `hcl:"msi_installation,block"`
	// InstallStepsRpmInstallation: optional
	RpmInstallation *InstallStepsRpmInstallation `hcl:"rpm_installation,block"`
	// InstallStepsScriptRun: optional
	ScriptRun *InstallStepsScriptRun `hcl:"script_run,block"`
}

type InstallStepsArchiveExtraction struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
	// Destination: string, optional
	Destination terra.StringValue `hcl:"destination,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type InstallStepsDpkgInstallation struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
}

type InstallStepsFileCopy struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// Overwrite: bool, optional
	Overwrite terra.BoolValue `hcl:"overwrite,attr"`
	// Permissions: string, optional
	Permissions terra.StringValue `hcl:"permissions,attr"`
}

type InstallStepsFileExec struct {
	// AllowedExitCodes: string, optional
	AllowedExitCodes terra.StringValue `hcl:"allowed_exit_codes,attr"`
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// ArtifactId: string, optional
	ArtifactId terra.StringValue `hcl:"artifact_id,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
}

type InstallStepsMsiInstallation struct {
	// AllowedExitCodes: list of number, optional
	AllowedExitCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_exit_codes,attr"`
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
	// Flags: list of string, optional
	Flags terra.ListValue[terra.StringValue] `hcl:"flags,attr"`
}

type InstallStepsRpmInstallation struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
}

type InstallStepsScriptRun struct {
	// AllowedExitCodes: list of number, optional
	AllowedExitCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_exit_codes,attr"`
	// Interpreter: string, optional
	Interpreter terra.StringValue `hcl:"interpreter,attr"`
	// Script: string, required
	Script terra.StringValue `hcl:"script,attr" validate:"required"`
}

type UpdateSteps struct {
	// UpdateStepsArchiveExtraction: optional
	ArchiveExtraction *UpdateStepsArchiveExtraction `hcl:"archive_extraction,block"`
	// UpdateStepsDpkgInstallation: optional
	DpkgInstallation *UpdateStepsDpkgInstallation `hcl:"dpkg_installation,block"`
	// UpdateStepsFileCopy: optional
	FileCopy *UpdateStepsFileCopy `hcl:"file_copy,block"`
	// UpdateStepsFileExec: optional
	FileExec *UpdateStepsFileExec `hcl:"file_exec,block"`
	// UpdateStepsMsiInstallation: optional
	MsiInstallation *UpdateStepsMsiInstallation `hcl:"msi_installation,block"`
	// UpdateStepsRpmInstallation: optional
	RpmInstallation *UpdateStepsRpmInstallation `hcl:"rpm_installation,block"`
	// UpdateStepsScriptRun: optional
	ScriptRun *UpdateStepsScriptRun `hcl:"script_run,block"`
}

type UpdateStepsArchiveExtraction struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
	// Destination: string, optional
	Destination terra.StringValue `hcl:"destination,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type UpdateStepsDpkgInstallation struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
}

type UpdateStepsFileCopy struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// Overwrite: bool, optional
	Overwrite terra.BoolValue `hcl:"overwrite,attr"`
	// Permissions: string, optional
	Permissions terra.StringValue `hcl:"permissions,attr"`
}

type UpdateStepsFileExec struct {
	// AllowedExitCodes: list of number, optional
	AllowedExitCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_exit_codes,attr"`
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// ArtifactId: string, optional
	ArtifactId terra.StringValue `hcl:"artifact_id,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
}

type UpdateStepsMsiInstallation struct {
	// AllowedExitCodes: list of number, optional
	AllowedExitCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_exit_codes,attr"`
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
	// Flags: list of string, optional
	Flags terra.ListValue[terra.StringValue] `hcl:"flags,attr"`
}

type UpdateStepsRpmInstallation struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
}

type UpdateStepsScriptRun struct {
	// AllowedExitCodes: list of number, optional
	AllowedExitCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_exit_codes,attr"`
	// Interpreter: string, optional
	Interpreter terra.StringValue `hcl:"interpreter,attr"`
	// Script: string, required
	Script terra.StringValue `hcl:"script,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AssignmentAttributes struct {
	ref terra.Reference
}

func (a AssignmentAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AssignmentAttributes) InternalWithRef(ref terra.Reference) AssignmentAttributes {
	return AssignmentAttributes{ref: ref}
}

func (a AssignmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AssignmentAttributes) InstanceNamePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("instance_name_prefixes"))
}

func (a AssignmentAttributes) Instances() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("instances"))
}

func (a AssignmentAttributes) Zones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("zones"))
}

func (a AssignmentAttributes) GroupLabels() terra.ListValue[GroupLabelsAttributes] {
	return terra.ReferenceAsList[GroupLabelsAttributes](a.ref.Append("group_labels"))
}

func (a AssignmentAttributes) OsTypes() terra.ListValue[OsTypesAttributes] {
	return terra.ReferenceAsList[OsTypesAttributes](a.ref.Append("os_types"))
}

type GroupLabelsAttributes struct {
	ref terra.Reference
}

func (gl GroupLabelsAttributes) InternalRef() (terra.Reference, error) {
	return gl.ref, nil
}

func (gl GroupLabelsAttributes) InternalWithRef(ref terra.Reference) GroupLabelsAttributes {
	return GroupLabelsAttributes{ref: ref}
}

func (gl GroupLabelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gl.ref.InternalTokens()
}

func (gl GroupLabelsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gl.ref.Append("labels"))
}

type OsTypesAttributes struct {
	ref terra.Reference
}

func (ot OsTypesAttributes) InternalRef() (terra.Reference, error) {
	return ot.ref, nil
}

func (ot OsTypesAttributes) InternalWithRef(ref terra.Reference) OsTypesAttributes {
	return OsTypesAttributes{ref: ref}
}

func (ot OsTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ot.ref.InternalTokens()
}

func (ot OsTypesAttributes) OsArchitecture() terra.StringValue {
	return terra.ReferenceAsString(ot.ref.Append("os_architecture"))
}

func (ot OsTypesAttributes) OsShortName() terra.StringValue {
	return terra.ReferenceAsString(ot.ref.Append("os_short_name"))
}

func (ot OsTypesAttributes) OsVersion() terra.StringValue {
	return terra.ReferenceAsString(ot.ref.Append("os_version"))
}

type PackageRepositoriesAttributes struct {
	ref terra.Reference
}

func (pr PackageRepositoriesAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr PackageRepositoriesAttributes) InternalWithRef(ref terra.Reference) PackageRepositoriesAttributes {
	return PackageRepositoriesAttributes{ref: ref}
}

func (pr PackageRepositoriesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr PackageRepositoriesAttributes) Apt() terra.ListValue[AptAttributes] {
	return terra.ReferenceAsList[AptAttributes](pr.ref.Append("apt"))
}

func (pr PackageRepositoriesAttributes) Goo() terra.ListValue[GooAttributes] {
	return terra.ReferenceAsList[GooAttributes](pr.ref.Append("goo"))
}

func (pr PackageRepositoriesAttributes) Yum() terra.ListValue[YumAttributes] {
	return terra.ReferenceAsList[YumAttributes](pr.ref.Append("yum"))
}

func (pr PackageRepositoriesAttributes) Zypper() terra.ListValue[ZypperAttributes] {
	return terra.ReferenceAsList[ZypperAttributes](pr.ref.Append("zypper"))
}

type AptAttributes struct {
	ref terra.Reference
}

func (a AptAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AptAttributes) InternalWithRef(ref terra.Reference) AptAttributes {
	return AptAttributes{ref: ref}
}

func (a AptAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AptAttributes) ArchiveType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("archive_type"))
}

func (a AptAttributes) Components() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("components"))
}

func (a AptAttributes) Distribution() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("distribution"))
}

func (a AptAttributes) GpgKey() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("gpg_key"))
}

func (a AptAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("uri"))
}

type GooAttributes struct {
	ref terra.Reference
}

func (g GooAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GooAttributes) InternalWithRef(ref terra.Reference) GooAttributes {
	return GooAttributes{ref: ref}
}

func (g GooAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GooAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("name"))
}

func (g GooAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("url"))
}

type YumAttributes struct {
	ref terra.Reference
}

func (y YumAttributes) InternalRef() (terra.Reference, error) {
	return y.ref, nil
}

func (y YumAttributes) InternalWithRef(ref terra.Reference) YumAttributes {
	return YumAttributes{ref: ref}
}

func (y YumAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return y.ref.InternalTokens()
}

func (y YumAttributes) BaseUrl() terra.StringValue {
	return terra.ReferenceAsString(y.ref.Append("base_url"))
}

func (y YumAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(y.ref.Append("display_name"))
}

func (y YumAttributes) GpgKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](y.ref.Append("gpg_keys"))
}

func (y YumAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(y.ref.Append("id"))
}

type ZypperAttributes struct {
	ref terra.Reference
}

func (z ZypperAttributes) InternalRef() (terra.Reference, error) {
	return z.ref, nil
}

func (z ZypperAttributes) InternalWithRef(ref terra.Reference) ZypperAttributes {
	return ZypperAttributes{ref: ref}
}

func (z ZypperAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return z.ref.InternalTokens()
}

func (z ZypperAttributes) BaseUrl() terra.StringValue {
	return terra.ReferenceAsString(z.ref.Append("base_url"))
}

func (z ZypperAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(z.ref.Append("display_name"))
}

func (z ZypperAttributes) GpgKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](z.ref.Append("gpg_keys"))
}

func (z ZypperAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(z.ref.Append("id"))
}

type PackagesAttributes struct {
	ref terra.Reference
}

func (p PackagesAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PackagesAttributes) InternalWithRef(ref terra.Reference) PackagesAttributes {
	return PackagesAttributes{ref: ref}
}

func (p PackagesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PackagesAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("desired_state"))
}

func (p PackagesAttributes) Manager() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("manager"))
}

func (p PackagesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

type RecipesAttributes struct {
	ref terra.Reference
}

func (r RecipesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RecipesAttributes) InternalWithRef(ref terra.Reference) RecipesAttributes {
	return RecipesAttributes{ref: ref}
}

func (r RecipesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RecipesAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("desired_state"))
}

func (r RecipesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

func (r RecipesAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("version"))
}

func (r RecipesAttributes) Artifacts() terra.ListValue[ArtifactsAttributes] {
	return terra.ReferenceAsList[ArtifactsAttributes](r.ref.Append("artifacts"))
}

func (r RecipesAttributes) InstallSteps() terra.ListValue[InstallStepsAttributes] {
	return terra.ReferenceAsList[InstallStepsAttributes](r.ref.Append("install_steps"))
}

func (r RecipesAttributes) UpdateSteps() terra.ListValue[UpdateStepsAttributes] {
	return terra.ReferenceAsList[UpdateStepsAttributes](r.ref.Append("update_steps"))
}

type ArtifactsAttributes struct {
	ref terra.Reference
}

func (a ArtifactsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ArtifactsAttributes) InternalWithRef(ref terra.Reference) ArtifactsAttributes {
	return ArtifactsAttributes{ref: ref}
}

func (a ArtifactsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ArtifactsAttributes) AllowInsecure() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("allow_insecure"))
}

func (a ArtifactsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("id"))
}

func (a ArtifactsAttributes) Gcs() terra.ListValue[GcsAttributes] {
	return terra.ReferenceAsList[GcsAttributes](a.ref.Append("gcs"))
}

func (a ArtifactsAttributes) Remote() terra.ListValue[RemoteAttributes] {
	return terra.ReferenceAsList[RemoteAttributes](a.ref.Append("remote"))
}

type GcsAttributes struct {
	ref terra.Reference
}

func (g GcsAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GcsAttributes) InternalWithRef(ref terra.Reference) GcsAttributes {
	return GcsAttributes{ref: ref}
}

func (g GcsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GcsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("bucket"))
}

func (g GcsAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("generation"))
}

func (g GcsAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("object"))
}

type RemoteAttributes struct {
	ref terra.Reference
}

func (r RemoteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RemoteAttributes) InternalWithRef(ref terra.Reference) RemoteAttributes {
	return RemoteAttributes{ref: ref}
}

func (r RemoteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RemoteAttributes) CheckSum() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("check_sum"))
}

func (r RemoteAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("uri"))
}

type InstallStepsAttributes struct {
	ref terra.Reference
}

func (is InstallStepsAttributes) InternalRef() (terra.Reference, error) {
	return is.ref, nil
}

func (is InstallStepsAttributes) InternalWithRef(ref terra.Reference) InstallStepsAttributes {
	return InstallStepsAttributes{ref: ref}
}

func (is InstallStepsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return is.ref.InternalTokens()
}

func (is InstallStepsAttributes) ArchiveExtraction() terra.ListValue[InstallStepsArchiveExtractionAttributes] {
	return terra.ReferenceAsList[InstallStepsArchiveExtractionAttributes](is.ref.Append("archive_extraction"))
}

func (is InstallStepsAttributes) DpkgInstallation() terra.ListValue[InstallStepsDpkgInstallationAttributes] {
	return terra.ReferenceAsList[InstallStepsDpkgInstallationAttributes](is.ref.Append("dpkg_installation"))
}

func (is InstallStepsAttributes) FileCopy() terra.ListValue[InstallStepsFileCopyAttributes] {
	return terra.ReferenceAsList[InstallStepsFileCopyAttributes](is.ref.Append("file_copy"))
}

func (is InstallStepsAttributes) FileExec() terra.ListValue[InstallStepsFileExecAttributes] {
	return terra.ReferenceAsList[InstallStepsFileExecAttributes](is.ref.Append("file_exec"))
}

func (is InstallStepsAttributes) MsiInstallation() terra.ListValue[InstallStepsMsiInstallationAttributes] {
	return terra.ReferenceAsList[InstallStepsMsiInstallationAttributes](is.ref.Append("msi_installation"))
}

func (is InstallStepsAttributes) RpmInstallation() terra.ListValue[InstallStepsRpmInstallationAttributes] {
	return terra.ReferenceAsList[InstallStepsRpmInstallationAttributes](is.ref.Append("rpm_installation"))
}

func (is InstallStepsAttributes) ScriptRun() terra.ListValue[InstallStepsScriptRunAttributes] {
	return terra.ReferenceAsList[InstallStepsScriptRunAttributes](is.ref.Append("script_run"))
}

type InstallStepsArchiveExtractionAttributes struct {
	ref terra.Reference
}

func (ae InstallStepsArchiveExtractionAttributes) InternalRef() (terra.Reference, error) {
	return ae.ref, nil
}

func (ae InstallStepsArchiveExtractionAttributes) InternalWithRef(ref terra.Reference) InstallStepsArchiveExtractionAttributes {
	return InstallStepsArchiveExtractionAttributes{ref: ref}
}

func (ae InstallStepsArchiveExtractionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ae.ref.InternalTokens()
}

func (ae InstallStepsArchiveExtractionAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("artifact_id"))
}

func (ae InstallStepsArchiveExtractionAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("destination"))
}

func (ae InstallStepsArchiveExtractionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("type"))
}

type InstallStepsDpkgInstallationAttributes struct {
	ref terra.Reference
}

func (di InstallStepsDpkgInstallationAttributes) InternalRef() (terra.Reference, error) {
	return di.ref, nil
}

func (di InstallStepsDpkgInstallationAttributes) InternalWithRef(ref terra.Reference) InstallStepsDpkgInstallationAttributes {
	return InstallStepsDpkgInstallationAttributes{ref: ref}
}

func (di InstallStepsDpkgInstallationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return di.ref.InternalTokens()
}

func (di InstallStepsDpkgInstallationAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(di.ref.Append("artifact_id"))
}

type InstallStepsFileCopyAttributes struct {
	ref terra.Reference
}

func (fc InstallStepsFileCopyAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc InstallStepsFileCopyAttributes) InternalWithRef(ref terra.Reference) InstallStepsFileCopyAttributes {
	return InstallStepsFileCopyAttributes{ref: ref}
}

func (fc InstallStepsFileCopyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc InstallStepsFileCopyAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("artifact_id"))
}

func (fc InstallStepsFileCopyAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("destination"))
}

func (fc InstallStepsFileCopyAttributes) Overwrite() terra.BoolValue {
	return terra.ReferenceAsBool(fc.ref.Append("overwrite"))
}

func (fc InstallStepsFileCopyAttributes) Permissions() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("permissions"))
}

type InstallStepsFileExecAttributes struct {
	ref terra.Reference
}

func (fe InstallStepsFileExecAttributes) InternalRef() (terra.Reference, error) {
	return fe.ref, nil
}

func (fe InstallStepsFileExecAttributes) InternalWithRef(ref terra.Reference) InstallStepsFileExecAttributes {
	return InstallStepsFileExecAttributes{ref: ref}
}

func (fe InstallStepsFileExecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fe.ref.InternalTokens()
}

func (fe InstallStepsFileExecAttributes) AllowedExitCodes() terra.StringValue {
	return terra.ReferenceAsString(fe.ref.Append("allowed_exit_codes"))
}

func (fe InstallStepsFileExecAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fe.ref.Append("args"))
}

func (fe InstallStepsFileExecAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(fe.ref.Append("artifact_id"))
}

func (fe InstallStepsFileExecAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(fe.ref.Append("local_path"))
}

type InstallStepsMsiInstallationAttributes struct {
	ref terra.Reference
}

func (mi InstallStepsMsiInstallationAttributes) InternalRef() (terra.Reference, error) {
	return mi.ref, nil
}

func (mi InstallStepsMsiInstallationAttributes) InternalWithRef(ref terra.Reference) InstallStepsMsiInstallationAttributes {
	return InstallStepsMsiInstallationAttributes{ref: ref}
}

func (mi InstallStepsMsiInstallationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mi.ref.InternalTokens()
}

func (mi InstallStepsMsiInstallationAttributes) AllowedExitCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](mi.ref.Append("allowed_exit_codes"))
}

func (mi InstallStepsMsiInstallationAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(mi.ref.Append("artifact_id"))
}

func (mi InstallStepsMsiInstallationAttributes) Flags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mi.ref.Append("flags"))
}

type InstallStepsRpmInstallationAttributes struct {
	ref terra.Reference
}

func (ri InstallStepsRpmInstallationAttributes) InternalRef() (terra.Reference, error) {
	return ri.ref, nil
}

func (ri InstallStepsRpmInstallationAttributes) InternalWithRef(ref terra.Reference) InstallStepsRpmInstallationAttributes {
	return InstallStepsRpmInstallationAttributes{ref: ref}
}

func (ri InstallStepsRpmInstallationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ri.ref.InternalTokens()
}

func (ri InstallStepsRpmInstallationAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(ri.ref.Append("artifact_id"))
}

type InstallStepsScriptRunAttributes struct {
	ref terra.Reference
}

func (sr InstallStepsScriptRunAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr InstallStepsScriptRunAttributes) InternalWithRef(ref terra.Reference) InstallStepsScriptRunAttributes {
	return InstallStepsScriptRunAttributes{ref: ref}
}

func (sr InstallStepsScriptRunAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr InstallStepsScriptRunAttributes) AllowedExitCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](sr.ref.Append("allowed_exit_codes"))
}

func (sr InstallStepsScriptRunAttributes) Interpreter() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("interpreter"))
}

func (sr InstallStepsScriptRunAttributes) Script() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("script"))
}

type UpdateStepsAttributes struct {
	ref terra.Reference
}

func (us UpdateStepsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us UpdateStepsAttributes) InternalWithRef(ref terra.Reference) UpdateStepsAttributes {
	return UpdateStepsAttributes{ref: ref}
}

func (us UpdateStepsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us UpdateStepsAttributes) ArchiveExtraction() terra.ListValue[UpdateStepsArchiveExtractionAttributes] {
	return terra.ReferenceAsList[UpdateStepsArchiveExtractionAttributes](us.ref.Append("archive_extraction"))
}

func (us UpdateStepsAttributes) DpkgInstallation() terra.ListValue[UpdateStepsDpkgInstallationAttributes] {
	return terra.ReferenceAsList[UpdateStepsDpkgInstallationAttributes](us.ref.Append("dpkg_installation"))
}

func (us UpdateStepsAttributes) FileCopy() terra.ListValue[UpdateStepsFileCopyAttributes] {
	return terra.ReferenceAsList[UpdateStepsFileCopyAttributes](us.ref.Append("file_copy"))
}

func (us UpdateStepsAttributes) FileExec() terra.ListValue[UpdateStepsFileExecAttributes] {
	return terra.ReferenceAsList[UpdateStepsFileExecAttributes](us.ref.Append("file_exec"))
}

func (us UpdateStepsAttributes) MsiInstallation() terra.ListValue[UpdateStepsMsiInstallationAttributes] {
	return terra.ReferenceAsList[UpdateStepsMsiInstallationAttributes](us.ref.Append("msi_installation"))
}

func (us UpdateStepsAttributes) RpmInstallation() terra.ListValue[UpdateStepsRpmInstallationAttributes] {
	return terra.ReferenceAsList[UpdateStepsRpmInstallationAttributes](us.ref.Append("rpm_installation"))
}

func (us UpdateStepsAttributes) ScriptRun() terra.ListValue[UpdateStepsScriptRunAttributes] {
	return terra.ReferenceAsList[UpdateStepsScriptRunAttributes](us.ref.Append("script_run"))
}

type UpdateStepsArchiveExtractionAttributes struct {
	ref terra.Reference
}

func (ae UpdateStepsArchiveExtractionAttributes) InternalRef() (terra.Reference, error) {
	return ae.ref, nil
}

func (ae UpdateStepsArchiveExtractionAttributes) InternalWithRef(ref terra.Reference) UpdateStepsArchiveExtractionAttributes {
	return UpdateStepsArchiveExtractionAttributes{ref: ref}
}

func (ae UpdateStepsArchiveExtractionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ae.ref.InternalTokens()
}

func (ae UpdateStepsArchiveExtractionAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("artifact_id"))
}

func (ae UpdateStepsArchiveExtractionAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("destination"))
}

func (ae UpdateStepsArchiveExtractionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("type"))
}

type UpdateStepsDpkgInstallationAttributes struct {
	ref terra.Reference
}

func (di UpdateStepsDpkgInstallationAttributes) InternalRef() (terra.Reference, error) {
	return di.ref, nil
}

func (di UpdateStepsDpkgInstallationAttributes) InternalWithRef(ref terra.Reference) UpdateStepsDpkgInstallationAttributes {
	return UpdateStepsDpkgInstallationAttributes{ref: ref}
}

func (di UpdateStepsDpkgInstallationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return di.ref.InternalTokens()
}

func (di UpdateStepsDpkgInstallationAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(di.ref.Append("artifact_id"))
}

type UpdateStepsFileCopyAttributes struct {
	ref terra.Reference
}

func (fc UpdateStepsFileCopyAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc UpdateStepsFileCopyAttributes) InternalWithRef(ref terra.Reference) UpdateStepsFileCopyAttributes {
	return UpdateStepsFileCopyAttributes{ref: ref}
}

func (fc UpdateStepsFileCopyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc UpdateStepsFileCopyAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("artifact_id"))
}

func (fc UpdateStepsFileCopyAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("destination"))
}

func (fc UpdateStepsFileCopyAttributes) Overwrite() terra.BoolValue {
	return terra.ReferenceAsBool(fc.ref.Append("overwrite"))
}

func (fc UpdateStepsFileCopyAttributes) Permissions() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("permissions"))
}

type UpdateStepsFileExecAttributes struct {
	ref terra.Reference
}

func (fe UpdateStepsFileExecAttributes) InternalRef() (terra.Reference, error) {
	return fe.ref, nil
}

func (fe UpdateStepsFileExecAttributes) InternalWithRef(ref terra.Reference) UpdateStepsFileExecAttributes {
	return UpdateStepsFileExecAttributes{ref: ref}
}

func (fe UpdateStepsFileExecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fe.ref.InternalTokens()
}

func (fe UpdateStepsFileExecAttributes) AllowedExitCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](fe.ref.Append("allowed_exit_codes"))
}

func (fe UpdateStepsFileExecAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fe.ref.Append("args"))
}

func (fe UpdateStepsFileExecAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(fe.ref.Append("artifact_id"))
}

func (fe UpdateStepsFileExecAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(fe.ref.Append("local_path"))
}

type UpdateStepsMsiInstallationAttributes struct {
	ref terra.Reference
}

func (mi UpdateStepsMsiInstallationAttributes) InternalRef() (terra.Reference, error) {
	return mi.ref, nil
}

func (mi UpdateStepsMsiInstallationAttributes) InternalWithRef(ref terra.Reference) UpdateStepsMsiInstallationAttributes {
	return UpdateStepsMsiInstallationAttributes{ref: ref}
}

func (mi UpdateStepsMsiInstallationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mi.ref.InternalTokens()
}

func (mi UpdateStepsMsiInstallationAttributes) AllowedExitCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](mi.ref.Append("allowed_exit_codes"))
}

func (mi UpdateStepsMsiInstallationAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(mi.ref.Append("artifact_id"))
}

func (mi UpdateStepsMsiInstallationAttributes) Flags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mi.ref.Append("flags"))
}

type UpdateStepsRpmInstallationAttributes struct {
	ref terra.Reference
}

func (ri UpdateStepsRpmInstallationAttributes) InternalRef() (terra.Reference, error) {
	return ri.ref, nil
}

func (ri UpdateStepsRpmInstallationAttributes) InternalWithRef(ref terra.Reference) UpdateStepsRpmInstallationAttributes {
	return UpdateStepsRpmInstallationAttributes{ref: ref}
}

func (ri UpdateStepsRpmInstallationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ri.ref.InternalTokens()
}

func (ri UpdateStepsRpmInstallationAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(ri.ref.Append("artifact_id"))
}

type UpdateStepsScriptRunAttributes struct {
	ref terra.Reference
}

func (sr UpdateStepsScriptRunAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr UpdateStepsScriptRunAttributes) InternalWithRef(ref terra.Reference) UpdateStepsScriptRunAttributes {
	return UpdateStepsScriptRunAttributes{ref: ref}
}

func (sr UpdateStepsScriptRunAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr UpdateStepsScriptRunAttributes) AllowedExitCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](sr.ref.Append("allowed_exit_codes"))
}

func (sr UpdateStepsScriptRunAttributes) Interpreter() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("interpreter"))
}

func (sr UpdateStepsScriptRunAttributes) Script() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("script"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AssignmentState struct {
	InstanceNamePrefixes []string           `json:"instance_name_prefixes"`
	Instances            []string           `json:"instances"`
	Zones                []string           `json:"zones"`
	GroupLabels          []GroupLabelsState `json:"group_labels"`
	OsTypes              []OsTypesState     `json:"os_types"`
}

type GroupLabelsState struct {
	Labels map[string]string `json:"labels"`
}

type OsTypesState struct {
	OsArchitecture string `json:"os_architecture"`
	OsShortName    string `json:"os_short_name"`
	OsVersion      string `json:"os_version"`
}

type PackageRepositoriesState struct {
	Apt    []AptState    `json:"apt"`
	Goo    []GooState    `json:"goo"`
	Yum    []YumState    `json:"yum"`
	Zypper []ZypperState `json:"zypper"`
}

type AptState struct {
	ArchiveType  string   `json:"archive_type"`
	Components   []string `json:"components"`
	Distribution string   `json:"distribution"`
	GpgKey       string   `json:"gpg_key"`
	Uri          string   `json:"uri"`
}

type GooState struct {
	Name string `json:"name"`
	Url  string `json:"url"`
}

type YumState struct {
	BaseUrl     string   `json:"base_url"`
	DisplayName string   `json:"display_name"`
	GpgKeys     []string `json:"gpg_keys"`
	Id          string   `json:"id"`
}

type ZypperState struct {
	BaseUrl     string   `json:"base_url"`
	DisplayName string   `json:"display_name"`
	GpgKeys     []string `json:"gpg_keys"`
	Id          string   `json:"id"`
}

type PackagesState struct {
	DesiredState string `json:"desired_state"`
	Manager      string `json:"manager"`
	Name         string `json:"name"`
}

type RecipesState struct {
	DesiredState string              `json:"desired_state"`
	Name         string              `json:"name"`
	Version      string              `json:"version"`
	Artifacts    []ArtifactsState    `json:"artifacts"`
	InstallSteps []InstallStepsState `json:"install_steps"`
	UpdateSteps  []UpdateStepsState  `json:"update_steps"`
}

type ArtifactsState struct {
	AllowInsecure bool          `json:"allow_insecure"`
	Id            string        `json:"id"`
	Gcs           []GcsState    `json:"gcs"`
	Remote        []RemoteState `json:"remote"`
}

type GcsState struct {
	Bucket     string  `json:"bucket"`
	Generation float64 `json:"generation"`
	Object     string  `json:"object"`
}

type RemoteState struct {
	CheckSum string `json:"check_sum"`
	Uri      string `json:"uri"`
}

type InstallStepsState struct {
	ArchiveExtraction []InstallStepsArchiveExtractionState `json:"archive_extraction"`
	DpkgInstallation  []InstallStepsDpkgInstallationState  `json:"dpkg_installation"`
	FileCopy          []InstallStepsFileCopyState          `json:"file_copy"`
	FileExec          []InstallStepsFileExecState          `json:"file_exec"`
	MsiInstallation   []InstallStepsMsiInstallationState   `json:"msi_installation"`
	RpmInstallation   []InstallStepsRpmInstallationState   `json:"rpm_installation"`
	ScriptRun         []InstallStepsScriptRunState         `json:"script_run"`
}

type InstallStepsArchiveExtractionState struct {
	ArtifactId  string `json:"artifact_id"`
	Destination string `json:"destination"`
	Type        string `json:"type"`
}

type InstallStepsDpkgInstallationState struct {
	ArtifactId string `json:"artifact_id"`
}

type InstallStepsFileCopyState struct {
	ArtifactId  string `json:"artifact_id"`
	Destination string `json:"destination"`
	Overwrite   bool   `json:"overwrite"`
	Permissions string `json:"permissions"`
}

type InstallStepsFileExecState struct {
	AllowedExitCodes string   `json:"allowed_exit_codes"`
	Args             []string `json:"args"`
	ArtifactId       string   `json:"artifact_id"`
	LocalPath        string   `json:"local_path"`
}

type InstallStepsMsiInstallationState struct {
	AllowedExitCodes []float64 `json:"allowed_exit_codes"`
	ArtifactId       string    `json:"artifact_id"`
	Flags            []string  `json:"flags"`
}

type InstallStepsRpmInstallationState struct {
	ArtifactId string `json:"artifact_id"`
}

type InstallStepsScriptRunState struct {
	AllowedExitCodes []float64 `json:"allowed_exit_codes"`
	Interpreter      string    `json:"interpreter"`
	Script           string    `json:"script"`
}

type UpdateStepsState struct {
	ArchiveExtraction []UpdateStepsArchiveExtractionState `json:"archive_extraction"`
	DpkgInstallation  []UpdateStepsDpkgInstallationState  `json:"dpkg_installation"`
	FileCopy          []UpdateStepsFileCopyState          `json:"file_copy"`
	FileExec          []UpdateStepsFileExecState          `json:"file_exec"`
	MsiInstallation   []UpdateStepsMsiInstallationState   `json:"msi_installation"`
	RpmInstallation   []UpdateStepsRpmInstallationState   `json:"rpm_installation"`
	ScriptRun         []UpdateStepsScriptRunState         `json:"script_run"`
}

type UpdateStepsArchiveExtractionState struct {
	ArtifactId  string `json:"artifact_id"`
	Destination string `json:"destination"`
	Type        string `json:"type"`
}

type UpdateStepsDpkgInstallationState struct {
	ArtifactId string `json:"artifact_id"`
}

type UpdateStepsFileCopyState struct {
	ArtifactId  string `json:"artifact_id"`
	Destination string `json:"destination"`
	Overwrite   bool   `json:"overwrite"`
	Permissions string `json:"permissions"`
}

type UpdateStepsFileExecState struct {
	AllowedExitCodes []float64 `json:"allowed_exit_codes"`
	Args             []string  `json:"args"`
	ArtifactId       string    `json:"artifact_id"`
	LocalPath        string    `json:"local_path"`
}

type UpdateStepsMsiInstallationState struct {
	AllowedExitCodes []float64 `json:"allowed_exit_codes"`
	ArtifactId       string    `json:"artifact_id"`
	Flags            []string  `json:"flags"`
}

type UpdateStepsRpmInstallationState struct {
	ArtifactId string `json:"artifact_id"`
}

type UpdateStepsScriptRunState struct {
	AllowedExitCodes []float64 `json:"allowed_exit_codes"`
	Interpreter      string    `json:"interpreter"`
	Script           string    `json:"script"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
