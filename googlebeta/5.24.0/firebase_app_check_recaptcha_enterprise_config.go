// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	firebaseappcheckrecaptchaenterpriseconfig "github.com/golingon/terraproviders/googlebeta/5.24.0/firebaseappcheckrecaptchaenterpriseconfig"
	"io"
)

// NewFirebaseAppCheckRecaptchaEnterpriseConfig creates a new instance of [FirebaseAppCheckRecaptchaEnterpriseConfig].
func NewFirebaseAppCheckRecaptchaEnterpriseConfig(name string, args FirebaseAppCheckRecaptchaEnterpriseConfigArgs) *FirebaseAppCheckRecaptchaEnterpriseConfig {
	return &FirebaseAppCheckRecaptchaEnterpriseConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirebaseAppCheckRecaptchaEnterpriseConfig)(nil)

// FirebaseAppCheckRecaptchaEnterpriseConfig represents the Terraform resource google_firebase_app_check_recaptcha_enterprise_config.
type FirebaseAppCheckRecaptchaEnterpriseConfig struct {
	Name      string
	Args      FirebaseAppCheckRecaptchaEnterpriseConfigArgs
	state     *firebaseAppCheckRecaptchaEnterpriseConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [FirebaseAppCheckRecaptchaEnterpriseConfig].
func (facrec *FirebaseAppCheckRecaptchaEnterpriseConfig) Type() string {
	return "google_firebase_app_check_recaptcha_enterprise_config"
}

// LocalName returns the local name for [FirebaseAppCheckRecaptchaEnterpriseConfig].
func (facrec *FirebaseAppCheckRecaptchaEnterpriseConfig) LocalName() string {
	return facrec.Name
}

// Configuration returns the configuration (args) for [FirebaseAppCheckRecaptchaEnterpriseConfig].
func (facrec *FirebaseAppCheckRecaptchaEnterpriseConfig) Configuration() interface{} {
	return facrec.Args
}

// DependOn is used for other resources to depend on [FirebaseAppCheckRecaptchaEnterpriseConfig].
func (facrec *FirebaseAppCheckRecaptchaEnterpriseConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(facrec)
}

// Dependencies returns the list of resources [FirebaseAppCheckRecaptchaEnterpriseConfig] depends_on.
func (facrec *FirebaseAppCheckRecaptchaEnterpriseConfig) Dependencies() terra.Dependencies {
	return facrec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [FirebaseAppCheckRecaptchaEnterpriseConfig].
func (facrec *FirebaseAppCheckRecaptchaEnterpriseConfig) LifecycleManagement() *terra.Lifecycle {
	return facrec.Lifecycle
}

// Attributes returns the attributes for [FirebaseAppCheckRecaptchaEnterpriseConfig].
func (facrec *FirebaseAppCheckRecaptchaEnterpriseConfig) Attributes() firebaseAppCheckRecaptchaEnterpriseConfigAttributes {
	return firebaseAppCheckRecaptchaEnterpriseConfigAttributes{ref: terra.ReferenceResource(facrec)}
}

// ImportState imports the given attribute values into [FirebaseAppCheckRecaptchaEnterpriseConfig]'s state.
func (facrec *FirebaseAppCheckRecaptchaEnterpriseConfig) ImportState(av io.Reader) error {
	facrec.state = &firebaseAppCheckRecaptchaEnterpriseConfigState{}
	if err := json.NewDecoder(av).Decode(facrec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", facrec.Type(), facrec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [FirebaseAppCheckRecaptchaEnterpriseConfig] has state.
func (facrec *FirebaseAppCheckRecaptchaEnterpriseConfig) State() (*firebaseAppCheckRecaptchaEnterpriseConfigState, bool) {
	return facrec.state, facrec.state != nil
}

// StateMust returns the state for [FirebaseAppCheckRecaptchaEnterpriseConfig]. Panics if the state is nil.
func (facrec *FirebaseAppCheckRecaptchaEnterpriseConfig) StateMust() *firebaseAppCheckRecaptchaEnterpriseConfigState {
	if facrec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", facrec.Type(), facrec.LocalName()))
	}
	return facrec.state
}

// FirebaseAppCheckRecaptchaEnterpriseConfigArgs contains the configurations for google_firebase_app_check_recaptcha_enterprise_config.
type FirebaseAppCheckRecaptchaEnterpriseConfigArgs struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SiteKey: string, required
	SiteKey terra.StringValue `hcl:"site_key,attr" validate:"required"`
	// TokenTtl: string, optional
	TokenTtl terra.StringValue `hcl:"token_ttl,attr"`
	// Timeouts: optional
	Timeouts *firebaseappcheckrecaptchaenterpriseconfig.Timeouts `hcl:"timeouts,block"`
}
type firebaseAppCheckRecaptchaEnterpriseConfigAttributes struct {
	ref terra.Reference
}

// AppId returns a reference to field app_id of google_firebase_app_check_recaptcha_enterprise_config.
func (facrec firebaseAppCheckRecaptchaEnterpriseConfigAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(facrec.ref.Append("app_id"))
}

// Id returns a reference to field id of google_firebase_app_check_recaptcha_enterprise_config.
func (facrec firebaseAppCheckRecaptchaEnterpriseConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(facrec.ref.Append("id"))
}

// Name returns a reference to field name of google_firebase_app_check_recaptcha_enterprise_config.
func (facrec firebaseAppCheckRecaptchaEnterpriseConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(facrec.ref.Append("name"))
}

// Project returns a reference to field project of google_firebase_app_check_recaptcha_enterprise_config.
func (facrec firebaseAppCheckRecaptchaEnterpriseConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(facrec.ref.Append("project"))
}

// SiteKey returns a reference to field site_key of google_firebase_app_check_recaptcha_enterprise_config.
func (facrec firebaseAppCheckRecaptchaEnterpriseConfigAttributes) SiteKey() terra.StringValue {
	return terra.ReferenceAsString(facrec.ref.Append("site_key"))
}

// TokenTtl returns a reference to field token_ttl of google_firebase_app_check_recaptcha_enterprise_config.
func (facrec firebaseAppCheckRecaptchaEnterpriseConfigAttributes) TokenTtl() terra.StringValue {
	return terra.ReferenceAsString(facrec.ref.Append("token_ttl"))
}

func (facrec firebaseAppCheckRecaptchaEnterpriseConfigAttributes) Timeouts() firebaseappcheckrecaptchaenterpriseconfig.TimeoutsAttributes {
	return terra.ReferenceAsSingle[firebaseappcheckrecaptchaenterpriseconfig.TimeoutsAttributes](facrec.ref.Append("timeouts"))
}

type firebaseAppCheckRecaptchaEnterpriseConfigState struct {
	AppId    string                                                   `json:"app_id"`
	Id       string                                                   `json:"id"`
	Name     string                                                   `json:"name"`
	Project  string                                                   `json:"project"`
	SiteKey  string                                                   `json:"site_key"`
	TokenTtl string                                                   `json:"token_ttl"`
	Timeouts *firebaseappcheckrecaptchaenterpriseconfig.TimeoutsState `json:"timeouts"`
}
