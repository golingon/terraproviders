// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package bigquerydataset

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Access struct {
	// Domain: string, optional
	Domain terra.StringValue `hcl:"domain,attr"`
	// GroupByEmail: string, optional
	GroupByEmail terra.StringValue `hcl:"group_by_email,attr"`
	// IamMember: string, optional
	IamMember terra.StringValue `hcl:"iam_member,attr"`
	// Role: string, optional
	Role terra.StringValue `hcl:"role,attr"`
	// SpecialGroup: string, optional
	SpecialGroup terra.StringValue `hcl:"special_group,attr"`
	// UserByEmail: string, optional
	UserByEmail terra.StringValue `hcl:"user_by_email,attr"`
	// AccessDataset: optional
	Dataset *AccessDataset `hcl:"dataset,block"`
	// Routine: optional
	Routine *Routine `hcl:"routine,block"`
	// View: optional
	View *View `hcl:"view,block"`
}

type AccessDataset struct {
	// TargetTypes: list of string, required
	TargetTypes terra.ListValue[terra.StringValue] `hcl:"target_types,attr" validate:"required"`
	// DatasetDataset: required
	Dataset *DatasetDataset `hcl:"dataset,block" validate:"required"`
}

type DatasetDataset struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
}

type Routine struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// RoutineId: string, required
	RoutineId terra.StringValue `hcl:"routine_id,attr" validate:"required"`
}

type View struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
}

type DefaultEncryptionConfiguration struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type ExternalDatasetReference struct {
	// Connection: string, required
	Connection terra.StringValue `hcl:"connection,attr" validate:"required"`
	// ExternalSource: string, required
	ExternalSource terra.StringValue `hcl:"external_source,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AccessAttributes struct {
	ref terra.Reference
}

func (a AccessAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AccessAttributes) InternalWithRef(ref terra.Reference) AccessAttributes {
	return AccessAttributes{ref: ref}
}

func (a AccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AccessAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("domain"))
}

func (a AccessAttributes) GroupByEmail() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("group_by_email"))
}

func (a AccessAttributes) IamMember() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("iam_member"))
}

func (a AccessAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("role"))
}

func (a AccessAttributes) SpecialGroup() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("special_group"))
}

func (a AccessAttributes) UserByEmail() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("user_by_email"))
}

func (a AccessAttributes) Dataset() terra.ListValue[AccessDatasetAttributes] {
	return terra.ReferenceAsList[AccessDatasetAttributes](a.ref.Append("dataset"))
}

func (a AccessAttributes) Routine() terra.ListValue[RoutineAttributes] {
	return terra.ReferenceAsList[RoutineAttributes](a.ref.Append("routine"))
}

func (a AccessAttributes) View() terra.ListValue[ViewAttributes] {
	return terra.ReferenceAsList[ViewAttributes](a.ref.Append("view"))
}

type AccessDatasetAttributes struct {
	ref terra.Reference
}

func (d AccessDatasetAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d AccessDatasetAttributes) InternalWithRef(ref terra.Reference) AccessDatasetAttributes {
	return AccessDatasetAttributes{ref: ref}
}

func (d AccessDatasetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d AccessDatasetAttributes) TargetTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](d.ref.Append("target_types"))
}

func (d AccessDatasetAttributes) Dataset() terra.ListValue[DatasetDatasetAttributes] {
	return terra.ReferenceAsList[DatasetDatasetAttributes](d.ref.Append("dataset"))
}

type DatasetDatasetAttributes struct {
	ref terra.Reference
}

func (d DatasetDatasetAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DatasetDatasetAttributes) InternalWithRef(ref terra.Reference) DatasetDatasetAttributes {
	return DatasetDatasetAttributes{ref: ref}
}

func (d DatasetDatasetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DatasetDatasetAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("dataset_id"))
}

func (d DatasetDatasetAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("project_id"))
}

type RoutineAttributes struct {
	ref terra.Reference
}

func (r RoutineAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RoutineAttributes) InternalWithRef(ref terra.Reference) RoutineAttributes {
	return RoutineAttributes{ref: ref}
}

func (r RoutineAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RoutineAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("dataset_id"))
}

func (r RoutineAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("project_id"))
}

func (r RoutineAttributes) RoutineId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("routine_id"))
}

type ViewAttributes struct {
	ref terra.Reference
}

func (v ViewAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ViewAttributes) InternalWithRef(ref terra.Reference) ViewAttributes {
	return ViewAttributes{ref: ref}
}

func (v ViewAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ViewAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("dataset_id"))
}

func (v ViewAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("project_id"))
}

func (v ViewAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("table_id"))
}

type DefaultEncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (dec DefaultEncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dec.ref, nil
}

func (dec DefaultEncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) DefaultEncryptionConfigurationAttributes {
	return DefaultEncryptionConfigurationAttributes{ref: ref}
}

func (dec DefaultEncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dec.ref.InternalTokens()
}

func (dec DefaultEncryptionConfigurationAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(dec.ref.Append("kms_key_name"))
}

type ExternalDatasetReferenceAttributes struct {
	ref terra.Reference
}

func (edr ExternalDatasetReferenceAttributes) InternalRef() (terra.Reference, error) {
	return edr.ref, nil
}

func (edr ExternalDatasetReferenceAttributes) InternalWithRef(ref terra.Reference) ExternalDatasetReferenceAttributes {
	return ExternalDatasetReferenceAttributes{ref: ref}
}

func (edr ExternalDatasetReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return edr.ref.InternalTokens()
}

func (edr ExternalDatasetReferenceAttributes) Connection() terra.StringValue {
	return terra.ReferenceAsString(edr.ref.Append("connection"))
}

func (edr ExternalDatasetReferenceAttributes) ExternalSource() terra.StringValue {
	return terra.ReferenceAsString(edr.ref.Append("external_source"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AccessState struct {
	Domain       string               `json:"domain"`
	GroupByEmail string               `json:"group_by_email"`
	IamMember    string               `json:"iam_member"`
	Role         string               `json:"role"`
	SpecialGroup string               `json:"special_group"`
	UserByEmail  string               `json:"user_by_email"`
	Dataset      []AccessDatasetState `json:"dataset"`
	Routine      []RoutineState       `json:"routine"`
	View         []ViewState          `json:"view"`
}

type AccessDatasetState struct {
	TargetTypes []string              `json:"target_types"`
	Dataset     []DatasetDatasetState `json:"dataset"`
}

type DatasetDatasetState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
}

type RoutineState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	RoutineId string `json:"routine_id"`
}

type ViewState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	TableId   string `json:"table_id"`
}

type DefaultEncryptionConfigurationState struct {
	KmsKeyName string `json:"kms_key_name"`
}

type ExternalDatasetReferenceState struct {
	Connection     string `json:"connection"`
	ExternalSource string `json:"external_source"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
