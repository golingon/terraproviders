// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	netappvolume "github.com/golingon/terraproviders/googlebeta/5.24.0/netappvolume"
	"io"
)

// NewNetappVolume creates a new instance of [NetappVolume].
func NewNetappVolume(name string, args NetappVolumeArgs) *NetappVolume {
	return &NetappVolume{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetappVolume)(nil)

// NetappVolume represents the Terraform resource google_netapp_volume.
type NetappVolume struct {
	Name      string
	Args      NetappVolumeArgs
	state     *netappVolumeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetappVolume].
func (nv *NetappVolume) Type() string {
	return "google_netapp_volume"
}

// LocalName returns the local name for [NetappVolume].
func (nv *NetappVolume) LocalName() string {
	return nv.Name
}

// Configuration returns the configuration (args) for [NetappVolume].
func (nv *NetappVolume) Configuration() interface{} {
	return nv.Args
}

// DependOn is used for other resources to depend on [NetappVolume].
func (nv *NetappVolume) DependOn() terra.Reference {
	return terra.ReferenceResource(nv)
}

// Dependencies returns the list of resources [NetappVolume] depends_on.
func (nv *NetappVolume) Dependencies() terra.Dependencies {
	return nv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetappVolume].
func (nv *NetappVolume) LifecycleManagement() *terra.Lifecycle {
	return nv.Lifecycle
}

// Attributes returns the attributes for [NetappVolume].
func (nv *NetappVolume) Attributes() netappVolumeAttributes {
	return netappVolumeAttributes{ref: terra.ReferenceResource(nv)}
}

// ImportState imports the given attribute values into [NetappVolume]'s state.
func (nv *NetappVolume) ImportState(av io.Reader) error {
	nv.state = &netappVolumeState{}
	if err := json.NewDecoder(av).Decode(nv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nv.Type(), nv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetappVolume] has state.
func (nv *NetappVolume) State() (*netappVolumeState, bool) {
	return nv.state, nv.state != nil
}

// StateMust returns the state for [NetappVolume]. Panics if the state is nil.
func (nv *NetappVolume) StateMust() *netappVolumeState {
	if nv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nv.Type(), nv.LocalName()))
	}
	return nv.state
}

// NetappVolumeArgs contains the configurations for google_netapp_volume.
type NetappVolumeArgs struct {
	// CapacityGib: string, required
	CapacityGib terra.StringValue `hcl:"capacity_gib,attr" validate:"required"`
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KerberosEnabled: bool, optional
	KerberosEnabled terra.BoolValue `hcl:"kerberos_enabled,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Protocols: list of string, required
	Protocols terra.ListValue[terra.StringValue] `hcl:"protocols,attr" validate:"required"`
	// RestrictedActions: list of string, optional
	RestrictedActions terra.ListValue[terra.StringValue] `hcl:"restricted_actions,attr"`
	// SecurityStyle: string, optional
	SecurityStyle terra.StringValue `hcl:"security_style,attr"`
	// ShareName: string, required
	ShareName terra.StringValue `hcl:"share_name,attr" validate:"required"`
	// SmbSettings: list of string, optional
	SmbSettings terra.ListValue[terra.StringValue] `hcl:"smb_settings,attr"`
	// SnapshotDirectory: bool, optional
	SnapshotDirectory terra.BoolValue `hcl:"snapshot_directory,attr"`
	// StoragePool: string, required
	StoragePool terra.StringValue `hcl:"storage_pool,attr" validate:"required"`
	// UnixPermissions: string, optional
	UnixPermissions terra.StringValue `hcl:"unix_permissions,attr"`
	// MountOptions: min=0
	MountOptions []netappvolume.MountOptions `hcl:"mount_options,block" validate:"min=0"`
	// ExportPolicy: optional
	ExportPolicy *netappvolume.ExportPolicy `hcl:"export_policy,block"`
	// RestoreParameters: optional
	RestoreParameters *netappvolume.RestoreParameters `hcl:"restore_parameters,block"`
	// SnapshotPolicy: optional
	SnapshotPolicy *netappvolume.SnapshotPolicy `hcl:"snapshot_policy,block"`
	// Timeouts: optional
	Timeouts *netappvolume.Timeouts `hcl:"timeouts,block"`
}
type netappVolumeAttributes struct {
	ref terra.Reference
}

// ActiveDirectory returns a reference to field active_directory of google_netapp_volume.
func (nv netappVolumeAttributes) ActiveDirectory() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("active_directory"))
}

// CapacityGib returns a reference to field capacity_gib of google_netapp_volume.
func (nv netappVolumeAttributes) CapacityGib() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("capacity_gib"))
}

// CreateTime returns a reference to field create_time of google_netapp_volume.
func (nv netappVolumeAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("create_time"))
}

// DeletionPolicy returns a reference to field deletion_policy of google_netapp_volume.
func (nv netappVolumeAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("deletion_policy"))
}

// Description returns a reference to field description of google_netapp_volume.
func (nv netappVolumeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_netapp_volume.
func (nv netappVolumeAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nv.ref.Append("effective_labels"))
}

// EncryptionType returns a reference to field encryption_type of google_netapp_volume.
func (nv netappVolumeAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("encryption_type"))
}

// HasReplication returns a reference to field has_replication of google_netapp_volume.
func (nv netappVolumeAttributes) HasReplication() terra.BoolValue {
	return terra.ReferenceAsBool(nv.ref.Append("has_replication"))
}

// Id returns a reference to field id of google_netapp_volume.
func (nv netappVolumeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("id"))
}

// KerberosEnabled returns a reference to field kerberos_enabled of google_netapp_volume.
func (nv netappVolumeAttributes) KerberosEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(nv.ref.Append("kerberos_enabled"))
}

// KmsConfig returns a reference to field kms_config of google_netapp_volume.
func (nv netappVolumeAttributes) KmsConfig() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("kms_config"))
}

// Labels returns a reference to field labels of google_netapp_volume.
func (nv netappVolumeAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nv.ref.Append("labels"))
}

// LdapEnabled returns a reference to field ldap_enabled of google_netapp_volume.
func (nv netappVolumeAttributes) LdapEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(nv.ref.Append("ldap_enabled"))
}

// Location returns a reference to field location of google_netapp_volume.
func (nv netappVolumeAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("location"))
}

// Name returns a reference to field name of google_netapp_volume.
func (nv netappVolumeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("name"))
}

// Network returns a reference to field network of google_netapp_volume.
func (nv netappVolumeAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("network"))
}

// Project returns a reference to field project of google_netapp_volume.
func (nv netappVolumeAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("project"))
}

// Protocols returns a reference to field protocols of google_netapp_volume.
func (nv netappVolumeAttributes) Protocols() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nv.ref.Append("protocols"))
}

// PsaRange returns a reference to field psa_range of google_netapp_volume.
func (nv netappVolumeAttributes) PsaRange() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("psa_range"))
}

// RestrictedActions returns a reference to field restricted_actions of google_netapp_volume.
func (nv netappVolumeAttributes) RestrictedActions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nv.ref.Append("restricted_actions"))
}

// SecurityStyle returns a reference to field security_style of google_netapp_volume.
func (nv netappVolumeAttributes) SecurityStyle() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("security_style"))
}

// ServiceLevel returns a reference to field service_level of google_netapp_volume.
func (nv netappVolumeAttributes) ServiceLevel() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("service_level"))
}

// ShareName returns a reference to field share_name of google_netapp_volume.
func (nv netappVolumeAttributes) ShareName() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("share_name"))
}

// SmbSettings returns a reference to field smb_settings of google_netapp_volume.
func (nv netappVolumeAttributes) SmbSettings() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nv.ref.Append("smb_settings"))
}

// SnapshotDirectory returns a reference to field snapshot_directory of google_netapp_volume.
func (nv netappVolumeAttributes) SnapshotDirectory() terra.BoolValue {
	return terra.ReferenceAsBool(nv.ref.Append("snapshot_directory"))
}

// State returns a reference to field state of google_netapp_volume.
func (nv netappVolumeAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("state"))
}

// StateDetails returns a reference to field state_details of google_netapp_volume.
func (nv netappVolumeAttributes) StateDetails() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("state_details"))
}

// StoragePool returns a reference to field storage_pool of google_netapp_volume.
func (nv netappVolumeAttributes) StoragePool() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("storage_pool"))
}

// TerraformLabels returns a reference to field terraform_labels of google_netapp_volume.
func (nv netappVolumeAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nv.ref.Append("terraform_labels"))
}

// UnixPermissions returns a reference to field unix_permissions of google_netapp_volume.
func (nv netappVolumeAttributes) UnixPermissions() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("unix_permissions"))
}

// UsedGib returns a reference to field used_gib of google_netapp_volume.
func (nv netappVolumeAttributes) UsedGib() terra.StringValue {
	return terra.ReferenceAsString(nv.ref.Append("used_gib"))
}

func (nv netappVolumeAttributes) MountOptions() terra.ListValue[netappvolume.MountOptionsAttributes] {
	return terra.ReferenceAsList[netappvolume.MountOptionsAttributes](nv.ref.Append("mount_options"))
}

func (nv netappVolumeAttributes) ExportPolicy() terra.ListValue[netappvolume.ExportPolicyAttributes] {
	return terra.ReferenceAsList[netappvolume.ExportPolicyAttributes](nv.ref.Append("export_policy"))
}

func (nv netappVolumeAttributes) RestoreParameters() terra.ListValue[netappvolume.RestoreParametersAttributes] {
	return terra.ReferenceAsList[netappvolume.RestoreParametersAttributes](nv.ref.Append("restore_parameters"))
}

func (nv netappVolumeAttributes) SnapshotPolicy() terra.ListValue[netappvolume.SnapshotPolicyAttributes] {
	return terra.ReferenceAsList[netappvolume.SnapshotPolicyAttributes](nv.ref.Append("snapshot_policy"))
}

func (nv netappVolumeAttributes) Timeouts() netappvolume.TimeoutsAttributes {
	return terra.ReferenceAsSingle[netappvolume.TimeoutsAttributes](nv.ref.Append("timeouts"))
}

type netappVolumeState struct {
	ActiveDirectory   string                                `json:"active_directory"`
	CapacityGib       string                                `json:"capacity_gib"`
	CreateTime        string                                `json:"create_time"`
	DeletionPolicy    string                                `json:"deletion_policy"`
	Description       string                                `json:"description"`
	EffectiveLabels   map[string]string                     `json:"effective_labels"`
	EncryptionType    string                                `json:"encryption_type"`
	HasReplication    bool                                  `json:"has_replication"`
	Id                string                                `json:"id"`
	KerberosEnabled   bool                                  `json:"kerberos_enabled"`
	KmsConfig         string                                `json:"kms_config"`
	Labels            map[string]string                     `json:"labels"`
	LdapEnabled       bool                                  `json:"ldap_enabled"`
	Location          string                                `json:"location"`
	Name              string                                `json:"name"`
	Network           string                                `json:"network"`
	Project           string                                `json:"project"`
	Protocols         []string                              `json:"protocols"`
	PsaRange          string                                `json:"psa_range"`
	RestrictedActions []string                              `json:"restricted_actions"`
	SecurityStyle     string                                `json:"security_style"`
	ServiceLevel      string                                `json:"service_level"`
	ShareName         string                                `json:"share_name"`
	SmbSettings       []string                              `json:"smb_settings"`
	SnapshotDirectory bool                                  `json:"snapshot_directory"`
	State             string                                `json:"state"`
	StateDetails      string                                `json:"state_details"`
	StoragePool       string                                `json:"storage_pool"`
	TerraformLabels   map[string]string                     `json:"terraform_labels"`
	UnixPermissions   string                                `json:"unix_permissions"`
	UsedGib           string                                `json:"used_gib"`
	MountOptions      []netappvolume.MountOptionsState      `json:"mount_options"`
	ExportPolicy      []netappvolume.ExportPolicyState      `json:"export_policy"`
	RestoreParameters []netappvolume.RestoreParametersState `json:"restore_parameters"`
	SnapshotPolicy    []netappvolume.SnapshotPolicyState    `json:"snapshot_policy"`
	Timeouts          *netappvolume.TimeoutsState           `json:"timeouts"`
}
