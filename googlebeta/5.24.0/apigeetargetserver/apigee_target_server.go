// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package apigeetargetserver

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type SSlInfo struct {
	// Ciphers: list of string, optional
	Ciphers terra.ListValue[terra.StringValue] `hcl:"ciphers,attr"`
	// ClientAuthEnabled: bool, optional
	ClientAuthEnabled terra.BoolValue `hcl:"client_auth_enabled,attr"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// IgnoreValidationErrors: bool, optional
	IgnoreValidationErrors terra.BoolValue `hcl:"ignore_validation_errors,attr"`
	// KeyAlias: string, optional
	KeyAlias terra.StringValue `hcl:"key_alias,attr"`
	// KeyStore: string, optional
	KeyStore terra.StringValue `hcl:"key_store,attr"`
	// Protocols: list of string, optional
	Protocols terra.ListValue[terra.StringValue] `hcl:"protocols,attr"`
	// TrustStore: string, optional
	TrustStore terra.StringValue `hcl:"trust_store,attr"`
	// CommonName: optional
	CommonName *CommonName `hcl:"common_name,block"`
}

type CommonName struct {
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
	// WildcardMatch: bool, optional
	WildcardMatch terra.BoolValue `hcl:"wildcard_match,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SSlInfoAttributes struct {
	ref terra.Reference
}

func (ssi SSlInfoAttributes) InternalRef() (terra.Reference, error) {
	return ssi.ref, nil
}

func (ssi SSlInfoAttributes) InternalWithRef(ref terra.Reference) SSlInfoAttributes {
	return SSlInfoAttributes{ref: ref}
}

func (ssi SSlInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssi.ref.InternalTokens()
}

func (ssi SSlInfoAttributes) Ciphers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ssi.ref.Append("ciphers"))
}

func (ssi SSlInfoAttributes) ClientAuthEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ssi.ref.Append("client_auth_enabled"))
}

func (ssi SSlInfoAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ssi.ref.Append("enabled"))
}

func (ssi SSlInfoAttributes) IgnoreValidationErrors() terra.BoolValue {
	return terra.ReferenceAsBool(ssi.ref.Append("ignore_validation_errors"))
}

func (ssi SSlInfoAttributes) KeyAlias() terra.StringValue {
	return terra.ReferenceAsString(ssi.ref.Append("key_alias"))
}

func (ssi SSlInfoAttributes) KeyStore() terra.StringValue {
	return terra.ReferenceAsString(ssi.ref.Append("key_store"))
}

func (ssi SSlInfoAttributes) Protocols() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ssi.ref.Append("protocols"))
}

func (ssi SSlInfoAttributes) TrustStore() terra.StringValue {
	return terra.ReferenceAsString(ssi.ref.Append("trust_store"))
}

func (ssi SSlInfoAttributes) CommonName() terra.ListValue[CommonNameAttributes] {
	return terra.ReferenceAsList[CommonNameAttributes](ssi.ref.Append("common_name"))
}

type CommonNameAttributes struct {
	ref terra.Reference
}

func (cn CommonNameAttributes) InternalRef() (terra.Reference, error) {
	return cn.ref, nil
}

func (cn CommonNameAttributes) InternalWithRef(ref terra.Reference) CommonNameAttributes {
	return CommonNameAttributes{ref: ref}
}

func (cn CommonNameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cn.ref.InternalTokens()
}

func (cn CommonNameAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(cn.ref.Append("value"))
}

func (cn CommonNameAttributes) WildcardMatch() terra.BoolValue {
	return terra.ReferenceAsBool(cn.ref.Append("wildcard_match"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type SSlInfoState struct {
	Ciphers                []string          `json:"ciphers"`
	ClientAuthEnabled      bool              `json:"client_auth_enabled"`
	Enabled                bool              `json:"enabled"`
	IgnoreValidationErrors bool              `json:"ignore_validation_errors"`
	KeyAlias               string            `json:"key_alias"`
	KeyStore               string            `json:"key_store"`
	Protocols              []string          `json:"protocols"`
	TrustStore             string            `json:"trust_store"`
	CommonName             []CommonNameState `json:"common_name"`
}

type CommonNameState struct {
	Value         string `json:"value"`
	WildcardMatch bool   `json:"wildcard_match"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
