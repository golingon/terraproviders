// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package securesourcemanagerinstance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type HostConfig struct{}

type PrivateConfig struct {
	// CaPool: string, required
	CaPool terra.StringValue `hcl:"ca_pool,attr" validate:"required"`
	// IsPrivate: bool, required
	IsPrivate terra.BoolValue `hcl:"is_private,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type HostConfigAttributes struct {
	ref terra.Reference
}

func (hc HostConfigAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc HostConfigAttributes) InternalWithRef(ref terra.Reference) HostConfigAttributes {
	return HostConfigAttributes{ref: ref}
}

func (hc HostConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc HostConfigAttributes) Api() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("api"))
}

func (hc HostConfigAttributes) GitHttp() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("git_http"))
}

func (hc HostConfigAttributes) GitSsh() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("git_ssh"))
}

func (hc HostConfigAttributes) Html() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("html"))
}

type PrivateConfigAttributes struct {
	ref terra.Reference
}

func (pc PrivateConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PrivateConfigAttributes) InternalWithRef(ref terra.Reference) PrivateConfigAttributes {
	return PrivateConfigAttributes{ref: ref}
}

func (pc PrivateConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PrivateConfigAttributes) CaPool() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("ca_pool"))
}

func (pc PrivateConfigAttributes) HttpServiceAttachment() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("http_service_attachment"))
}

func (pc PrivateConfigAttributes) IsPrivate() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("is_private"))
}

func (pc PrivateConfigAttributes) SshServiceAttachment() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("ssh_service_attachment"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type HostConfigState struct {
	Api     string `json:"api"`
	GitHttp string `json:"git_http"`
	GitSsh  string `json:"git_ssh"`
	Html    string `json:"html"`
}

type PrivateConfigState struct {
	CaPool                string `json:"ca_pool"`
	HttpServiceAttachment string `json:"http_service_attachment"`
	IsPrivate             bool   `json:"is_private"`
	SshServiceAttachment  string `json:"ssh_service_attachment"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
