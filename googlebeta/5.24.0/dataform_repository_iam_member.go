// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	dataformrepositoryiammember "github.com/golingon/terraproviders/googlebeta/5.24.0/dataformrepositoryiammember"
	"io"
)

// NewDataformRepositoryIamMember creates a new instance of [DataformRepositoryIamMember].
func NewDataformRepositoryIamMember(name string, args DataformRepositoryIamMemberArgs) *DataformRepositoryIamMember {
	return &DataformRepositoryIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataformRepositoryIamMember)(nil)

// DataformRepositoryIamMember represents the Terraform resource google_dataform_repository_iam_member.
type DataformRepositoryIamMember struct {
	Name      string
	Args      DataformRepositoryIamMemberArgs
	state     *dataformRepositoryIamMemberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataformRepositoryIamMember].
func (drim *DataformRepositoryIamMember) Type() string {
	return "google_dataform_repository_iam_member"
}

// LocalName returns the local name for [DataformRepositoryIamMember].
func (drim *DataformRepositoryIamMember) LocalName() string {
	return drim.Name
}

// Configuration returns the configuration (args) for [DataformRepositoryIamMember].
func (drim *DataformRepositoryIamMember) Configuration() interface{} {
	return drim.Args
}

// DependOn is used for other resources to depend on [DataformRepositoryIamMember].
func (drim *DataformRepositoryIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(drim)
}

// Dependencies returns the list of resources [DataformRepositoryIamMember] depends_on.
func (drim *DataformRepositoryIamMember) Dependencies() terra.Dependencies {
	return drim.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataformRepositoryIamMember].
func (drim *DataformRepositoryIamMember) LifecycleManagement() *terra.Lifecycle {
	return drim.Lifecycle
}

// Attributes returns the attributes for [DataformRepositoryIamMember].
func (drim *DataformRepositoryIamMember) Attributes() dataformRepositoryIamMemberAttributes {
	return dataformRepositoryIamMemberAttributes{ref: terra.ReferenceResource(drim)}
}

// ImportState imports the given attribute values into [DataformRepositoryIamMember]'s state.
func (drim *DataformRepositoryIamMember) ImportState(av io.Reader) error {
	drim.state = &dataformRepositoryIamMemberState{}
	if err := json.NewDecoder(av).Decode(drim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", drim.Type(), drim.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataformRepositoryIamMember] has state.
func (drim *DataformRepositoryIamMember) State() (*dataformRepositoryIamMemberState, bool) {
	return drim.state, drim.state != nil
}

// StateMust returns the state for [DataformRepositoryIamMember]. Panics if the state is nil.
func (drim *DataformRepositoryIamMember) StateMust() *dataformRepositoryIamMemberState {
	if drim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", drim.Type(), drim.LocalName()))
	}
	return drim.state
}

// DataformRepositoryIamMemberArgs contains the configurations for google_dataform_repository_iam_member.
type DataformRepositoryIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *dataformrepositoryiammember.Condition `hcl:"condition,block"`
}
type dataformRepositoryIamMemberAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_dataform_repository_iam_member.
func (drim dataformRepositoryIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(drim.ref.Append("etag"))
}

// Id returns a reference to field id of google_dataform_repository_iam_member.
func (drim dataformRepositoryIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(drim.ref.Append("id"))
}

// Member returns a reference to field member of google_dataform_repository_iam_member.
func (drim dataformRepositoryIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceAsString(drim.ref.Append("member"))
}

// Project returns a reference to field project of google_dataform_repository_iam_member.
func (drim dataformRepositoryIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(drim.ref.Append("project"))
}

// Region returns a reference to field region of google_dataform_repository_iam_member.
func (drim dataformRepositoryIamMemberAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(drim.ref.Append("region"))
}

// Repository returns a reference to field repository of google_dataform_repository_iam_member.
func (drim dataformRepositoryIamMemberAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(drim.ref.Append("repository"))
}

// Role returns a reference to field role of google_dataform_repository_iam_member.
func (drim dataformRepositoryIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(drim.ref.Append("role"))
}

func (drim dataformRepositoryIamMemberAttributes) Condition() terra.ListValue[dataformrepositoryiammember.ConditionAttributes] {
	return terra.ReferenceAsList[dataformrepositoryiammember.ConditionAttributes](drim.ref.Append("condition"))
}

type dataformRepositoryIamMemberState struct {
	Etag       string                                       `json:"etag"`
	Id         string                                       `json:"id"`
	Member     string                                       `json:"member"`
	Project    string                                       `json:"project"`
	Region     string                                       `json:"region"`
	Repository string                                       `json:"repository"`
	Role       string                                       `json:"role"`
	Condition  []dataformrepositoryiammember.ConditionState `json:"condition"`
}
