// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package apigeekeystoresaliaseskeycertfile

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CertsInfo struct {
	// CertInfo: min=0
	CertInfo []CertInfo `hcl:"cert_info,block" validate:"min=0"`
}

type CertInfo struct {
	// BasicConstraints: string, optional
	BasicConstraints terra.StringValue `hcl:"basic_constraints,attr"`
	// ExpiryDate: string, optional
	ExpiryDate terra.StringValue `hcl:"expiry_date,attr"`
	// IsValid: string, optional
	IsValid terra.StringValue `hcl:"is_valid,attr"`
	// Issuer: string, optional
	Issuer terra.StringValue `hcl:"issuer,attr"`
	// PublicKey: string, optional
	PublicKey terra.StringValue `hcl:"public_key,attr"`
	// SerialNumber: string, optional
	SerialNumber terra.StringValue `hcl:"serial_number,attr"`
	// SigAlgName: string, optional
	SigAlgName terra.StringValue `hcl:"sig_alg_name,attr"`
	// Subject: string, optional
	Subject terra.StringValue `hcl:"subject,attr"`
	// SubjectAlternativeNames: list of string, optional
	SubjectAlternativeNames terra.ListValue[terra.StringValue] `hcl:"subject_alternative_names,attr"`
	// ValidFrom: string, optional
	ValidFrom terra.StringValue `hcl:"valid_from,attr"`
	// Version: number, optional
	Version terra.NumberValue `hcl:"version,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CertsInfoAttributes struct {
	ref terra.Reference
}

func (ci CertsInfoAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci CertsInfoAttributes) InternalWithRef(ref terra.Reference) CertsInfoAttributes {
	return CertsInfoAttributes{ref: ref}
}

func (ci CertsInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci CertsInfoAttributes) CertInfo() terra.ListValue[CertInfoAttributes] {
	return terra.ReferenceAsList[CertInfoAttributes](ci.ref.Append("cert_info"))
}

type CertInfoAttributes struct {
	ref terra.Reference
}

func (ci CertInfoAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci CertInfoAttributes) InternalWithRef(ref terra.Reference) CertInfoAttributes {
	return CertInfoAttributes{ref: ref}
}

func (ci CertInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci CertInfoAttributes) BasicConstraints() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("basic_constraints"))
}

func (ci CertInfoAttributes) ExpiryDate() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("expiry_date"))
}

func (ci CertInfoAttributes) IsValid() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("is_valid"))
}

func (ci CertInfoAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("issuer"))
}

func (ci CertInfoAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("public_key"))
}

func (ci CertInfoAttributes) SerialNumber() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("serial_number"))
}

func (ci CertInfoAttributes) SigAlgName() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("sig_alg_name"))
}

func (ci CertInfoAttributes) Subject() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("subject"))
}

func (ci CertInfoAttributes) SubjectAlternativeNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ci.ref.Append("subject_alternative_names"))
}

func (ci CertInfoAttributes) ValidFrom() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("valid_from"))
}

func (ci CertInfoAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(ci.ref.Append("version"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CertsInfoState struct {
	CertInfo []CertInfoState `json:"cert_info"`
}

type CertInfoState struct {
	BasicConstraints        string   `json:"basic_constraints"`
	ExpiryDate              string   `json:"expiry_date"`
	IsValid                 string   `json:"is_valid"`
	Issuer                  string   `json:"issuer"`
	PublicKey               string   `json:"public_key"`
	SerialNumber            string   `json:"serial_number"`
	SigAlgName              string   `json:"sig_alg_name"`
	Subject                 string   `json:"subject"`
	SubjectAlternativeNames []string `json:"subject_alternative_names"`
	ValidFrom               string   `json:"valid_from"`
	Version                 float64  `json:"version"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
