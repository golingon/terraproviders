// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	loggingprojectsink "github.com/golingon/terraproviders/googlebeta/5.24.0/loggingprojectsink"
	"io"
)

// NewLoggingProjectSink creates a new instance of [LoggingProjectSink].
func NewLoggingProjectSink(name string, args LoggingProjectSinkArgs) *LoggingProjectSink {
	return &LoggingProjectSink{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LoggingProjectSink)(nil)

// LoggingProjectSink represents the Terraform resource google_logging_project_sink.
type LoggingProjectSink struct {
	Name      string
	Args      LoggingProjectSinkArgs
	state     *loggingProjectSinkState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [LoggingProjectSink].
func (lps *LoggingProjectSink) Type() string {
	return "google_logging_project_sink"
}

// LocalName returns the local name for [LoggingProjectSink].
func (lps *LoggingProjectSink) LocalName() string {
	return lps.Name
}

// Configuration returns the configuration (args) for [LoggingProjectSink].
func (lps *LoggingProjectSink) Configuration() interface{} {
	return lps.Args
}

// DependOn is used for other resources to depend on [LoggingProjectSink].
func (lps *LoggingProjectSink) DependOn() terra.Reference {
	return terra.ReferenceResource(lps)
}

// Dependencies returns the list of resources [LoggingProjectSink] depends_on.
func (lps *LoggingProjectSink) Dependencies() terra.Dependencies {
	return lps.DependsOn
}

// LifecycleManagement returns the lifecycle block for [LoggingProjectSink].
func (lps *LoggingProjectSink) LifecycleManagement() *terra.Lifecycle {
	return lps.Lifecycle
}

// Attributes returns the attributes for [LoggingProjectSink].
func (lps *LoggingProjectSink) Attributes() loggingProjectSinkAttributes {
	return loggingProjectSinkAttributes{ref: terra.ReferenceResource(lps)}
}

// ImportState imports the given attribute values into [LoggingProjectSink]'s state.
func (lps *LoggingProjectSink) ImportState(av io.Reader) error {
	lps.state = &loggingProjectSinkState{}
	if err := json.NewDecoder(av).Decode(lps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lps.Type(), lps.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [LoggingProjectSink] has state.
func (lps *LoggingProjectSink) State() (*loggingProjectSinkState, bool) {
	return lps.state, lps.state != nil
}

// StateMust returns the state for [LoggingProjectSink]. Panics if the state is nil.
func (lps *LoggingProjectSink) StateMust() *loggingProjectSinkState {
	if lps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lps.Type(), lps.LocalName()))
	}
	return lps.state
}

// LoggingProjectSinkArgs contains the configurations for google_logging_project_sink.
type LoggingProjectSinkArgs struct {
	// CustomWriterIdentity: string, optional
	CustomWriterIdentity terra.StringValue `hcl:"custom_writer_identity,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// Filter: string, optional
	Filter terra.StringValue `hcl:"filter,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// UniqueWriterIdentity: bool, optional
	UniqueWriterIdentity terra.BoolValue `hcl:"unique_writer_identity,attr"`
	// BigqueryOptions: optional
	BigqueryOptions *loggingprojectsink.BigqueryOptions `hcl:"bigquery_options,block"`
	// Exclusions: min=0
	Exclusions []loggingprojectsink.Exclusions `hcl:"exclusions,block" validate:"min=0"`
}
type loggingProjectSinkAttributes struct {
	ref terra.Reference
}

// CustomWriterIdentity returns a reference to field custom_writer_identity of google_logging_project_sink.
func (lps loggingProjectSinkAttributes) CustomWriterIdentity() terra.StringValue {
	return terra.ReferenceAsString(lps.ref.Append("custom_writer_identity"))
}

// Description returns a reference to field description of google_logging_project_sink.
func (lps loggingProjectSinkAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(lps.ref.Append("description"))
}

// Destination returns a reference to field destination of google_logging_project_sink.
func (lps loggingProjectSinkAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(lps.ref.Append("destination"))
}

// Disabled returns a reference to field disabled of google_logging_project_sink.
func (lps loggingProjectSinkAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(lps.ref.Append("disabled"))
}

// Filter returns a reference to field filter of google_logging_project_sink.
func (lps loggingProjectSinkAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(lps.ref.Append("filter"))
}

// Id returns a reference to field id of google_logging_project_sink.
func (lps loggingProjectSinkAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lps.ref.Append("id"))
}

// Name returns a reference to field name of google_logging_project_sink.
func (lps loggingProjectSinkAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lps.ref.Append("name"))
}

// Project returns a reference to field project of google_logging_project_sink.
func (lps loggingProjectSinkAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(lps.ref.Append("project"))
}

// UniqueWriterIdentity returns a reference to field unique_writer_identity of google_logging_project_sink.
func (lps loggingProjectSinkAttributes) UniqueWriterIdentity() terra.BoolValue {
	return terra.ReferenceAsBool(lps.ref.Append("unique_writer_identity"))
}

// WriterIdentity returns a reference to field writer_identity of google_logging_project_sink.
func (lps loggingProjectSinkAttributes) WriterIdentity() terra.StringValue {
	return terra.ReferenceAsString(lps.ref.Append("writer_identity"))
}

func (lps loggingProjectSinkAttributes) BigqueryOptions() terra.ListValue[loggingprojectsink.BigqueryOptionsAttributes] {
	return terra.ReferenceAsList[loggingprojectsink.BigqueryOptionsAttributes](lps.ref.Append("bigquery_options"))
}

func (lps loggingProjectSinkAttributes) Exclusions() terra.ListValue[loggingprojectsink.ExclusionsAttributes] {
	return terra.ReferenceAsList[loggingprojectsink.ExclusionsAttributes](lps.ref.Append("exclusions"))
}

type loggingProjectSinkState struct {
	CustomWriterIdentity string                                    `json:"custom_writer_identity"`
	Description          string                                    `json:"description"`
	Destination          string                                    `json:"destination"`
	Disabled             bool                                      `json:"disabled"`
	Filter               string                                    `json:"filter"`
	Id                   string                                    `json:"id"`
	Name                 string                                    `json:"name"`
	Project              string                                    `json:"project"`
	UniqueWriterIdentity bool                                      `json:"unique_writer_identity"`
	WriterIdentity       string                                    `json:"writer_identity"`
	BigqueryOptions      []loggingprojectsink.BigqueryOptionsState `json:"bigquery_options"`
	Exclusions           []loggingprojectsink.ExclusionsState      `json:"exclusions"`
}
