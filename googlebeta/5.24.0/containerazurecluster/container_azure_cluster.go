// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package containerazurecluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type WorkloadIdentityConfig struct{}

type Authorization struct {
	// AdminGroups: min=0
	AdminGroups []AdminGroups `hcl:"admin_groups,block" validate:"min=0"`
	// AdminUsers: min=1
	AdminUsers []AdminUsers `hcl:"admin_users,block" validate:"min=1"`
}

type AdminGroups struct {
	// Group: string, required
	Group terra.StringValue `hcl:"group,attr" validate:"required"`
}

type AdminUsers struct {
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type AzureServicesAuthentication struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
}

type ControlPlane struct {
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// VmSize: string, optional
	VmSize terra.StringValue `hcl:"vm_size,attr"`
	// DatabaseEncryption: optional
	DatabaseEncryption *DatabaseEncryption `hcl:"database_encryption,block"`
	// MainVolume: optional
	MainVolume *MainVolume `hcl:"main_volume,block"`
	// ProxyConfig: optional
	ProxyConfig *ProxyConfig `hcl:"proxy_config,block"`
	// ReplicaPlacements: min=0
	ReplicaPlacements []ReplicaPlacements `hcl:"replica_placements,block" validate:"min=0"`
	// RootVolume: optional
	RootVolume *RootVolume `hcl:"root_volume,block"`
	// SshConfig: required
	SshConfig *SshConfig `hcl:"ssh_config,block" validate:"required"`
}

type DatabaseEncryption struct {
	// KeyId: string, required
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
}

type MainVolume struct {
	// SizeGib: number, optional
	SizeGib terra.NumberValue `hcl:"size_gib,attr"`
}

type ProxyConfig struct {
	// ResourceGroupId: string, required
	ResourceGroupId terra.StringValue `hcl:"resource_group_id,attr" validate:"required"`
	// SecretId: string, required
	SecretId terra.StringValue `hcl:"secret_id,attr" validate:"required"`
}

type ReplicaPlacements struct {
	// AzureAvailabilityZone: string, required
	AzureAvailabilityZone terra.StringValue `hcl:"azure_availability_zone,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
}

type RootVolume struct {
	// SizeGib: number, optional
	SizeGib terra.NumberValue `hcl:"size_gib,attr"`
}

type SshConfig struct {
	// AuthorizedKey: string, required
	AuthorizedKey terra.StringValue `hcl:"authorized_key,attr" validate:"required"`
}

type Fleet struct {
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}

type LoggingConfig struct {
	// ComponentConfig: optional
	ComponentConfig *ComponentConfig `hcl:"component_config,block"`
}

type ComponentConfig struct {
	// EnableComponents: list of string, optional
	EnableComponents terra.ListValue[terra.StringValue] `hcl:"enable_components,attr"`
}

type Networking struct {
	// PodAddressCidrBlocks: list of string, required
	PodAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"pod_address_cidr_blocks,attr" validate:"required"`
	// ServiceAddressCidrBlocks: list of string, required
	ServiceAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"service_address_cidr_blocks,attr" validate:"required"`
	// VirtualNetworkId: string, required
	VirtualNetworkId terra.StringValue `hcl:"virtual_network_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type WorkloadIdentityConfigAttributes struct {
	ref terra.Reference
}

func (wic WorkloadIdentityConfigAttributes) InternalRef() (terra.Reference, error) {
	return wic.ref, nil
}

func (wic WorkloadIdentityConfigAttributes) InternalWithRef(ref terra.Reference) WorkloadIdentityConfigAttributes {
	return WorkloadIdentityConfigAttributes{ref: ref}
}

func (wic WorkloadIdentityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wic.ref.InternalTokens()
}

func (wic WorkloadIdentityConfigAttributes) IdentityProvider() terra.StringValue {
	return terra.ReferenceAsString(wic.ref.Append("identity_provider"))
}

func (wic WorkloadIdentityConfigAttributes) IssuerUri() terra.StringValue {
	return terra.ReferenceAsString(wic.ref.Append("issuer_uri"))
}

func (wic WorkloadIdentityConfigAttributes) WorkloadPool() terra.StringValue {
	return terra.ReferenceAsString(wic.ref.Append("workload_pool"))
}

type AuthorizationAttributes struct {
	ref terra.Reference
}

func (a AuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthorizationAttributes) InternalWithRef(ref terra.Reference) AuthorizationAttributes {
	return AuthorizationAttributes{ref: ref}
}

func (a AuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthorizationAttributes) AdminGroups() terra.ListValue[AdminGroupsAttributes] {
	return terra.ReferenceAsList[AdminGroupsAttributes](a.ref.Append("admin_groups"))
}

func (a AuthorizationAttributes) AdminUsers() terra.ListValue[AdminUsersAttributes] {
	return terra.ReferenceAsList[AdminUsersAttributes](a.ref.Append("admin_users"))
}

type AdminGroupsAttributes struct {
	ref terra.Reference
}

func (ag AdminGroupsAttributes) InternalRef() (terra.Reference, error) {
	return ag.ref, nil
}

func (ag AdminGroupsAttributes) InternalWithRef(ref terra.Reference) AdminGroupsAttributes {
	return AdminGroupsAttributes{ref: ref}
}

func (ag AdminGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ag.ref.InternalTokens()
}

func (ag AdminGroupsAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("group"))
}

type AdminUsersAttributes struct {
	ref terra.Reference
}

func (au AdminUsersAttributes) InternalRef() (terra.Reference, error) {
	return au.ref, nil
}

func (au AdminUsersAttributes) InternalWithRef(ref terra.Reference) AdminUsersAttributes {
	return AdminUsersAttributes{ref: ref}
}

func (au AdminUsersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return au.ref.InternalTokens()
}

func (au AdminUsersAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("username"))
}

type AzureServicesAuthenticationAttributes struct {
	ref terra.Reference
}

func (asa AzureServicesAuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return asa.ref, nil
}

func (asa AzureServicesAuthenticationAttributes) InternalWithRef(ref terra.Reference) AzureServicesAuthenticationAttributes {
	return AzureServicesAuthenticationAttributes{ref: ref}
}

func (asa AzureServicesAuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asa.ref.InternalTokens()
}

func (asa AzureServicesAuthenticationAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("application_id"))
}

func (asa AzureServicesAuthenticationAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("tenant_id"))
}

type ControlPlaneAttributes struct {
	ref terra.Reference
}

func (cp ControlPlaneAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp ControlPlaneAttributes) InternalWithRef(ref terra.Reference) ControlPlaneAttributes {
	return ControlPlaneAttributes{ref: ref}
}

func (cp ControlPlaneAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp ControlPlaneAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("subnet_id"))
}

func (cp ControlPlaneAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cp.ref.Append("tags"))
}

func (cp ControlPlaneAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("version"))
}

func (cp ControlPlaneAttributes) VmSize() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("vm_size"))
}

func (cp ControlPlaneAttributes) DatabaseEncryption() terra.ListValue[DatabaseEncryptionAttributes] {
	return terra.ReferenceAsList[DatabaseEncryptionAttributes](cp.ref.Append("database_encryption"))
}

func (cp ControlPlaneAttributes) MainVolume() terra.ListValue[MainVolumeAttributes] {
	return terra.ReferenceAsList[MainVolumeAttributes](cp.ref.Append("main_volume"))
}

func (cp ControlPlaneAttributes) ProxyConfig() terra.ListValue[ProxyConfigAttributes] {
	return terra.ReferenceAsList[ProxyConfigAttributes](cp.ref.Append("proxy_config"))
}

func (cp ControlPlaneAttributes) ReplicaPlacements() terra.ListValue[ReplicaPlacementsAttributes] {
	return terra.ReferenceAsList[ReplicaPlacementsAttributes](cp.ref.Append("replica_placements"))
}

func (cp ControlPlaneAttributes) RootVolume() terra.ListValue[RootVolumeAttributes] {
	return terra.ReferenceAsList[RootVolumeAttributes](cp.ref.Append("root_volume"))
}

func (cp ControlPlaneAttributes) SshConfig() terra.ListValue[SshConfigAttributes] {
	return terra.ReferenceAsList[SshConfigAttributes](cp.ref.Append("ssh_config"))
}

type DatabaseEncryptionAttributes struct {
	ref terra.Reference
}

func (de DatabaseEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de DatabaseEncryptionAttributes) InternalWithRef(ref terra.Reference) DatabaseEncryptionAttributes {
	return DatabaseEncryptionAttributes{ref: ref}
}

func (de DatabaseEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de DatabaseEncryptionAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("key_id"))
}

type MainVolumeAttributes struct {
	ref terra.Reference
}

func (mv MainVolumeAttributes) InternalRef() (terra.Reference, error) {
	return mv.ref, nil
}

func (mv MainVolumeAttributes) InternalWithRef(ref terra.Reference) MainVolumeAttributes {
	return MainVolumeAttributes{ref: ref}
}

func (mv MainVolumeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mv.ref.InternalTokens()
}

func (mv MainVolumeAttributes) SizeGib() terra.NumberValue {
	return terra.ReferenceAsNumber(mv.ref.Append("size_gib"))
}

type ProxyConfigAttributes struct {
	ref terra.Reference
}

func (pc ProxyConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc ProxyConfigAttributes) InternalWithRef(ref terra.Reference) ProxyConfigAttributes {
	return ProxyConfigAttributes{ref: ref}
}

func (pc ProxyConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc ProxyConfigAttributes) ResourceGroupId() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("resource_group_id"))
}

func (pc ProxyConfigAttributes) SecretId() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("secret_id"))
}

type ReplicaPlacementsAttributes struct {
	ref terra.Reference
}

func (rp ReplicaPlacementsAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp ReplicaPlacementsAttributes) InternalWithRef(ref terra.Reference) ReplicaPlacementsAttributes {
	return ReplicaPlacementsAttributes{ref: ref}
}

func (rp ReplicaPlacementsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp ReplicaPlacementsAttributes) AzureAvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("azure_availability_zone"))
}

func (rp ReplicaPlacementsAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("subnet_id"))
}

type RootVolumeAttributes struct {
	ref terra.Reference
}

func (rv RootVolumeAttributes) InternalRef() (terra.Reference, error) {
	return rv.ref, nil
}

func (rv RootVolumeAttributes) InternalWithRef(ref terra.Reference) RootVolumeAttributes {
	return RootVolumeAttributes{ref: ref}
}

func (rv RootVolumeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rv.ref.InternalTokens()
}

func (rv RootVolumeAttributes) SizeGib() terra.NumberValue {
	return terra.ReferenceAsNumber(rv.ref.Append("size_gib"))
}

type SshConfigAttributes struct {
	ref terra.Reference
}

func (sc SshConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SshConfigAttributes) InternalWithRef(ref terra.Reference) SshConfigAttributes {
	return SshConfigAttributes{ref: ref}
}

func (sc SshConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SshConfigAttributes) AuthorizedKey() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("authorized_key"))
}

type FleetAttributes struct {
	ref terra.Reference
}

func (f FleetAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FleetAttributes) InternalWithRef(ref terra.Reference) FleetAttributes {
	return FleetAttributes{ref: ref}
}

func (f FleetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FleetAttributes) Membership() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("membership"))
}

func (f FleetAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("project"))
}

type LoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc LoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LoggingConfigAttributes) InternalWithRef(ref terra.Reference) LoggingConfigAttributes {
	return LoggingConfigAttributes{ref: ref}
}

func (lc LoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LoggingConfigAttributes) ComponentConfig() terra.ListValue[ComponentConfigAttributes] {
	return terra.ReferenceAsList[ComponentConfigAttributes](lc.ref.Append("component_config"))
}

type ComponentConfigAttributes struct {
	ref terra.Reference
}

func (cc ComponentConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ComponentConfigAttributes) InternalWithRef(ref terra.Reference) ComponentConfigAttributes {
	return ComponentConfigAttributes{ref: ref}
}

func (cc ComponentConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ComponentConfigAttributes) EnableComponents() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cc.ref.Append("enable_components"))
}

type NetworkingAttributes struct {
	ref terra.Reference
}

func (n NetworkingAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NetworkingAttributes) InternalWithRef(ref terra.Reference) NetworkingAttributes {
	return NetworkingAttributes{ref: ref}
}

func (n NetworkingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NetworkingAttributes) PodAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("pod_address_cidr_blocks"))
}

func (n NetworkingAttributes) ServiceAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("service_address_cidr_blocks"))
}

func (n NetworkingAttributes) VirtualNetworkId() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("virtual_network_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type WorkloadIdentityConfigState struct {
	IdentityProvider string `json:"identity_provider"`
	IssuerUri        string `json:"issuer_uri"`
	WorkloadPool     string `json:"workload_pool"`
}

type AuthorizationState struct {
	AdminGroups []AdminGroupsState `json:"admin_groups"`
	AdminUsers  []AdminUsersState  `json:"admin_users"`
}

type AdminGroupsState struct {
	Group string `json:"group"`
}

type AdminUsersState struct {
	Username string `json:"username"`
}

type AzureServicesAuthenticationState struct {
	ApplicationId string `json:"application_id"`
	TenantId      string `json:"tenant_id"`
}

type ControlPlaneState struct {
	SubnetId           string                    `json:"subnet_id"`
	Tags               map[string]string         `json:"tags"`
	Version            string                    `json:"version"`
	VmSize             string                    `json:"vm_size"`
	DatabaseEncryption []DatabaseEncryptionState `json:"database_encryption"`
	MainVolume         []MainVolumeState         `json:"main_volume"`
	ProxyConfig        []ProxyConfigState        `json:"proxy_config"`
	ReplicaPlacements  []ReplicaPlacementsState  `json:"replica_placements"`
	RootVolume         []RootVolumeState         `json:"root_volume"`
	SshConfig          []SshConfigState          `json:"ssh_config"`
}

type DatabaseEncryptionState struct {
	KeyId string `json:"key_id"`
}

type MainVolumeState struct {
	SizeGib float64 `json:"size_gib"`
}

type ProxyConfigState struct {
	ResourceGroupId string `json:"resource_group_id"`
	SecretId        string `json:"secret_id"`
}

type ReplicaPlacementsState struct {
	AzureAvailabilityZone string `json:"azure_availability_zone"`
	SubnetId              string `json:"subnet_id"`
}

type RootVolumeState struct {
	SizeGib float64 `json:"size_gib"`
}

type SshConfigState struct {
	AuthorizedKey string `json:"authorized_key"`
}

type FleetState struct {
	Membership string `json:"membership"`
	Project    string `json:"project"`
}

type LoggingConfigState struct {
	ComponentConfig []ComponentConfigState `json:"component_config"`
}

type ComponentConfigState struct {
	EnableComponents []string `json:"enable_components"`
}

type NetworkingState struct {
	PodAddressCidrBlocks     []string `json:"pod_address_cidr_blocks"`
	ServiceAddressCidrBlocks []string `json:"service_address_cidr_blocks"`
	VirtualNetworkId         string   `json:"virtual_network_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
