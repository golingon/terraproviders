// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	runtimeconfigconfigiambinding "github.com/golingon/terraproviders/googlebeta/4.74.0/runtimeconfigconfigiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewRuntimeconfigConfigIamBinding creates a new instance of [RuntimeconfigConfigIamBinding].
func NewRuntimeconfigConfigIamBinding(name string, args RuntimeconfigConfigIamBindingArgs) *RuntimeconfigConfigIamBinding {
	return &RuntimeconfigConfigIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RuntimeconfigConfigIamBinding)(nil)

// RuntimeconfigConfigIamBinding represents the Terraform resource google_runtimeconfig_config_iam_binding.
type RuntimeconfigConfigIamBinding struct {
	Name      string
	Args      RuntimeconfigConfigIamBindingArgs
	state     *runtimeconfigConfigIamBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RuntimeconfigConfigIamBinding].
func (rcib *RuntimeconfigConfigIamBinding) Type() string {
	return "google_runtimeconfig_config_iam_binding"
}

// LocalName returns the local name for [RuntimeconfigConfigIamBinding].
func (rcib *RuntimeconfigConfigIamBinding) LocalName() string {
	return rcib.Name
}

// Configuration returns the configuration (args) for [RuntimeconfigConfigIamBinding].
func (rcib *RuntimeconfigConfigIamBinding) Configuration() interface{} {
	return rcib.Args
}

// DependOn is used for other resources to depend on [RuntimeconfigConfigIamBinding].
func (rcib *RuntimeconfigConfigIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(rcib)
}

// Dependencies returns the list of resources [RuntimeconfigConfigIamBinding] depends_on.
func (rcib *RuntimeconfigConfigIamBinding) Dependencies() terra.Dependencies {
	return rcib.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RuntimeconfigConfigIamBinding].
func (rcib *RuntimeconfigConfigIamBinding) LifecycleManagement() *terra.Lifecycle {
	return rcib.Lifecycle
}

// Attributes returns the attributes for [RuntimeconfigConfigIamBinding].
func (rcib *RuntimeconfigConfigIamBinding) Attributes() runtimeconfigConfigIamBindingAttributes {
	return runtimeconfigConfigIamBindingAttributes{ref: terra.ReferenceResource(rcib)}
}

// ImportState imports the given attribute values into [RuntimeconfigConfigIamBinding]'s state.
func (rcib *RuntimeconfigConfigIamBinding) ImportState(av io.Reader) error {
	rcib.state = &runtimeconfigConfigIamBindingState{}
	if err := json.NewDecoder(av).Decode(rcib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rcib.Type(), rcib.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RuntimeconfigConfigIamBinding] has state.
func (rcib *RuntimeconfigConfigIamBinding) State() (*runtimeconfigConfigIamBindingState, bool) {
	return rcib.state, rcib.state != nil
}

// StateMust returns the state for [RuntimeconfigConfigIamBinding]. Panics if the state is nil.
func (rcib *RuntimeconfigConfigIamBinding) StateMust() *runtimeconfigConfigIamBindingState {
	if rcib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rcib.Type(), rcib.LocalName()))
	}
	return rcib.state
}

// RuntimeconfigConfigIamBindingArgs contains the configurations for google_runtimeconfig_config_iam_binding.
type RuntimeconfigConfigIamBindingArgs struct {
	// Config: string, required
	Config terra.StringValue `hcl:"config,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *runtimeconfigconfigiambinding.Condition `hcl:"condition,block"`
}
type runtimeconfigConfigIamBindingAttributes struct {
	ref terra.Reference
}

// Config returns a reference to field config of google_runtimeconfig_config_iam_binding.
func (rcib runtimeconfigConfigIamBindingAttributes) Config() terra.StringValue {
	return terra.ReferenceAsString(rcib.ref.Append("config"))
}

// Etag returns a reference to field etag of google_runtimeconfig_config_iam_binding.
func (rcib runtimeconfigConfigIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(rcib.ref.Append("etag"))
}

// Id returns a reference to field id of google_runtimeconfig_config_iam_binding.
func (rcib runtimeconfigConfigIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rcib.ref.Append("id"))
}

// Members returns a reference to field members of google_runtimeconfig_config_iam_binding.
func (rcib runtimeconfigConfigIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rcib.ref.Append("members"))
}

// Project returns a reference to field project of google_runtimeconfig_config_iam_binding.
func (rcib runtimeconfigConfigIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(rcib.ref.Append("project"))
}

// Role returns a reference to field role of google_runtimeconfig_config_iam_binding.
func (rcib runtimeconfigConfigIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(rcib.ref.Append("role"))
}

func (rcib runtimeconfigConfigIamBindingAttributes) Condition() terra.ListValue[runtimeconfigconfigiambinding.ConditionAttributes] {
	return terra.ReferenceAsList[runtimeconfigconfigiambinding.ConditionAttributes](rcib.ref.Append("condition"))
}

type runtimeconfigConfigIamBindingState struct {
	Config    string                                         `json:"config"`
	Etag      string                                         `json:"etag"`
	Id        string                                         `json:"id"`
	Members   []string                                       `json:"members"`
	Project   string                                         `json:"project"`
	Role      string                                         `json:"role"`
	Condition []runtimeconfigconfigiambinding.ConditionState `json:"condition"`
}
