// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	servicedirectorynamespace "github.com/golingon/terraproviders/googlebeta/4.74.0/servicedirectorynamespace"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewServiceDirectoryNamespace creates a new instance of [ServiceDirectoryNamespace].
func NewServiceDirectoryNamespace(name string, args ServiceDirectoryNamespaceArgs) *ServiceDirectoryNamespace {
	return &ServiceDirectoryNamespace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServiceDirectoryNamespace)(nil)

// ServiceDirectoryNamespace represents the Terraform resource google_service_directory_namespace.
type ServiceDirectoryNamespace struct {
	Name      string
	Args      ServiceDirectoryNamespaceArgs
	state     *serviceDirectoryNamespaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ServiceDirectoryNamespace].
func (sdn *ServiceDirectoryNamespace) Type() string {
	return "google_service_directory_namespace"
}

// LocalName returns the local name for [ServiceDirectoryNamespace].
func (sdn *ServiceDirectoryNamespace) LocalName() string {
	return sdn.Name
}

// Configuration returns the configuration (args) for [ServiceDirectoryNamespace].
func (sdn *ServiceDirectoryNamespace) Configuration() interface{} {
	return sdn.Args
}

// DependOn is used for other resources to depend on [ServiceDirectoryNamespace].
func (sdn *ServiceDirectoryNamespace) DependOn() terra.Reference {
	return terra.ReferenceResource(sdn)
}

// Dependencies returns the list of resources [ServiceDirectoryNamespace] depends_on.
func (sdn *ServiceDirectoryNamespace) Dependencies() terra.Dependencies {
	return sdn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ServiceDirectoryNamespace].
func (sdn *ServiceDirectoryNamespace) LifecycleManagement() *terra.Lifecycle {
	return sdn.Lifecycle
}

// Attributes returns the attributes for [ServiceDirectoryNamespace].
func (sdn *ServiceDirectoryNamespace) Attributes() serviceDirectoryNamespaceAttributes {
	return serviceDirectoryNamespaceAttributes{ref: terra.ReferenceResource(sdn)}
}

// ImportState imports the given attribute values into [ServiceDirectoryNamespace]'s state.
func (sdn *ServiceDirectoryNamespace) ImportState(av io.Reader) error {
	sdn.state = &serviceDirectoryNamespaceState{}
	if err := json.NewDecoder(av).Decode(sdn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sdn.Type(), sdn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ServiceDirectoryNamespace] has state.
func (sdn *ServiceDirectoryNamespace) State() (*serviceDirectoryNamespaceState, bool) {
	return sdn.state, sdn.state != nil
}

// StateMust returns the state for [ServiceDirectoryNamespace]. Panics if the state is nil.
func (sdn *ServiceDirectoryNamespace) StateMust() *serviceDirectoryNamespaceState {
	if sdn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sdn.Type(), sdn.LocalName()))
	}
	return sdn.state
}

// ServiceDirectoryNamespaceArgs contains the configurations for google_service_directory_namespace.
type ServiceDirectoryNamespaceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// NamespaceId: string, required
	NamespaceId terra.StringValue `hcl:"namespace_id,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *servicedirectorynamespace.Timeouts `hcl:"timeouts,block"`
}
type serviceDirectoryNamespaceAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_service_directory_namespace.
func (sdn serviceDirectoryNamespaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sdn.ref.Append("id"))
}

// Labels returns a reference to field labels of google_service_directory_namespace.
func (sdn serviceDirectoryNamespaceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sdn.ref.Append("labels"))
}

// Location returns a reference to field location of google_service_directory_namespace.
func (sdn serviceDirectoryNamespaceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(sdn.ref.Append("location"))
}

// Name returns a reference to field name of google_service_directory_namespace.
func (sdn serviceDirectoryNamespaceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sdn.ref.Append("name"))
}

// NamespaceId returns a reference to field namespace_id of google_service_directory_namespace.
func (sdn serviceDirectoryNamespaceAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceAsString(sdn.ref.Append("namespace_id"))
}

// Project returns a reference to field project of google_service_directory_namespace.
func (sdn serviceDirectoryNamespaceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(sdn.ref.Append("project"))
}

func (sdn serviceDirectoryNamespaceAttributes) Timeouts() servicedirectorynamespace.TimeoutsAttributes {
	return terra.ReferenceAsSingle[servicedirectorynamespace.TimeoutsAttributes](sdn.ref.Append("timeouts"))
}

type serviceDirectoryNamespaceState struct {
	Id          string                                   `json:"id"`
	Labels      map[string]string                        `json:"labels"`
	Location    string                                   `json:"location"`
	Name        string                                   `json:"name"`
	NamespaceId string                                   `json:"namespace_id"`
	Project     string                                   `json:"project"`
	Timeouts    *servicedirectorynamespace.TimeoutsState `json:"timeouts"`
}
