// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vmwareengineprivatecloud

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Hcx struct{}

type Nsx struct{}

type Vcenter struct{}

type ManagementCluster struct {
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// NodeTypeConfigs: min=0
	NodeTypeConfigs []NodeTypeConfigs `hcl:"node_type_configs,block" validate:"min=0"`
}

type NodeTypeConfigs struct {
	// CustomCoreCount: number, optional
	CustomCoreCount terra.NumberValue `hcl:"custom_core_count,attr"`
	// NodeCount: number, required
	NodeCount terra.NumberValue `hcl:"node_count,attr" validate:"required"`
	// NodeTypeId: string, required
	NodeTypeId terra.StringValue `hcl:"node_type_id,attr" validate:"required"`
}

type NetworkConfig struct {
	// ManagementCidr: string, required
	ManagementCidr terra.StringValue `hcl:"management_cidr,attr" validate:"required"`
	// VmwareEngineNetwork: string, optional
	VmwareEngineNetwork terra.StringValue `hcl:"vmware_engine_network,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type HcxAttributes struct {
	ref terra.Reference
}

func (h HcxAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HcxAttributes) InternalWithRef(ref terra.Reference) HcxAttributes {
	return HcxAttributes{ref: ref}
}

func (h HcxAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HcxAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("fqdn"))
}

func (h HcxAttributes) InternalIp() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("internal_ip"))
}

func (h HcxAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("state"))
}

func (h HcxAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("version"))
}

type NsxAttributes struct {
	ref terra.Reference
}

func (n NsxAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NsxAttributes) InternalWithRef(ref terra.Reference) NsxAttributes {
	return NsxAttributes{ref: ref}
}

func (n NsxAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NsxAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("fqdn"))
}

func (n NsxAttributes) InternalIp() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("internal_ip"))
}

func (n NsxAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("state"))
}

func (n NsxAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("version"))
}

type VcenterAttributes struct {
	ref terra.Reference
}

func (v VcenterAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VcenterAttributes) InternalWithRef(ref terra.Reference) VcenterAttributes {
	return VcenterAttributes{ref: ref}
}

func (v VcenterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VcenterAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("fqdn"))
}

func (v VcenterAttributes) InternalIp() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("internal_ip"))
}

func (v VcenterAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("state"))
}

func (v VcenterAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("version"))
}

type ManagementClusterAttributes struct {
	ref terra.Reference
}

func (mc ManagementClusterAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc ManagementClusterAttributes) InternalWithRef(ref terra.Reference) ManagementClusterAttributes {
	return ManagementClusterAttributes{ref: ref}
}

func (mc ManagementClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc ManagementClusterAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("cluster_id"))
}

func (mc ManagementClusterAttributes) NodeTypeConfigs() terra.SetValue[NodeTypeConfigsAttributes] {
	return terra.ReferenceAsSet[NodeTypeConfigsAttributes](mc.ref.Append("node_type_configs"))
}

type NodeTypeConfigsAttributes struct {
	ref terra.Reference
}

func (ntc NodeTypeConfigsAttributes) InternalRef() (terra.Reference, error) {
	return ntc.ref, nil
}

func (ntc NodeTypeConfigsAttributes) InternalWithRef(ref terra.Reference) NodeTypeConfigsAttributes {
	return NodeTypeConfigsAttributes{ref: ref}
}

func (ntc NodeTypeConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ntc.ref.InternalTokens()
}

func (ntc NodeTypeConfigsAttributes) CustomCoreCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ntc.ref.Append("custom_core_count"))
}

func (ntc NodeTypeConfigsAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ntc.ref.Append("node_count"))
}

func (ntc NodeTypeConfigsAttributes) NodeTypeId() terra.StringValue {
	return terra.ReferenceAsString(ntc.ref.Append("node_type_id"))
}

type NetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAttributes {
	return NetworkConfigAttributes{ref: ref}
}

func (nc NetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigAttributes) ManagementCidr() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("management_cidr"))
}

func (nc NetworkConfigAttributes) ManagementIpAddressLayoutVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("management_ip_address_layout_version"))
}

func (nc NetworkConfigAttributes) VmwareEngineNetwork() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("vmware_engine_network"))
}

func (nc NetworkConfigAttributes) VmwareEngineNetworkCanonical() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("vmware_engine_network_canonical"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type HcxState struct {
	Fqdn       string `json:"fqdn"`
	InternalIp string `json:"internal_ip"`
	State      string `json:"state"`
	Version    string `json:"version"`
}

type NsxState struct {
	Fqdn       string `json:"fqdn"`
	InternalIp string `json:"internal_ip"`
	State      string `json:"state"`
	Version    string `json:"version"`
}

type VcenterState struct {
	Fqdn       string `json:"fqdn"`
	InternalIp string `json:"internal_ip"`
	State      string `json:"state"`
	Version    string `json:"version"`
}

type ManagementClusterState struct {
	ClusterId       string                 `json:"cluster_id"`
	NodeTypeConfigs []NodeTypeConfigsState `json:"node_type_configs"`
}

type NodeTypeConfigsState struct {
	CustomCoreCount float64 `json:"custom_core_count"`
	NodeCount       float64 `json:"node_count"`
	NodeTypeId      string  `json:"node_type_id"`
}

type NetworkConfigState struct {
	ManagementCidr                   string  `json:"management_cidr"`
	ManagementIpAddressLayoutVersion float64 `json:"management_ip_address_layout_version"`
	VmwareEngineNetwork              string  `json:"vmware_engine_network"`
	VmwareEngineNetworkCanonical     string  `json:"vmware_engine_network_canonical"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
