// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	firebaseandroidapp "github.com/golingon/terraproviders/googlebeta/4.74.0/firebaseandroidapp"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewFirebaseAndroidApp creates a new instance of [FirebaseAndroidApp].
func NewFirebaseAndroidApp(name string, args FirebaseAndroidAppArgs) *FirebaseAndroidApp {
	return &FirebaseAndroidApp{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirebaseAndroidApp)(nil)

// FirebaseAndroidApp represents the Terraform resource google_firebase_android_app.
type FirebaseAndroidApp struct {
	Name      string
	Args      FirebaseAndroidAppArgs
	state     *firebaseAndroidAppState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [FirebaseAndroidApp].
func (faa *FirebaseAndroidApp) Type() string {
	return "google_firebase_android_app"
}

// LocalName returns the local name for [FirebaseAndroidApp].
func (faa *FirebaseAndroidApp) LocalName() string {
	return faa.Name
}

// Configuration returns the configuration (args) for [FirebaseAndroidApp].
func (faa *FirebaseAndroidApp) Configuration() interface{} {
	return faa.Args
}

// DependOn is used for other resources to depend on [FirebaseAndroidApp].
func (faa *FirebaseAndroidApp) DependOn() terra.Reference {
	return terra.ReferenceResource(faa)
}

// Dependencies returns the list of resources [FirebaseAndroidApp] depends_on.
func (faa *FirebaseAndroidApp) Dependencies() terra.Dependencies {
	return faa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [FirebaseAndroidApp].
func (faa *FirebaseAndroidApp) LifecycleManagement() *terra.Lifecycle {
	return faa.Lifecycle
}

// Attributes returns the attributes for [FirebaseAndroidApp].
func (faa *FirebaseAndroidApp) Attributes() firebaseAndroidAppAttributes {
	return firebaseAndroidAppAttributes{ref: terra.ReferenceResource(faa)}
}

// ImportState imports the given attribute values into [FirebaseAndroidApp]'s state.
func (faa *FirebaseAndroidApp) ImportState(av io.Reader) error {
	faa.state = &firebaseAndroidAppState{}
	if err := json.NewDecoder(av).Decode(faa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", faa.Type(), faa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [FirebaseAndroidApp] has state.
func (faa *FirebaseAndroidApp) State() (*firebaseAndroidAppState, bool) {
	return faa.state, faa.state != nil
}

// StateMust returns the state for [FirebaseAndroidApp]. Panics if the state is nil.
func (faa *FirebaseAndroidApp) StateMust() *firebaseAndroidAppState {
	if faa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", faa.Type(), faa.LocalName()))
	}
	return faa.state
}

// FirebaseAndroidAppArgs contains the configurations for google_firebase_android_app.
type FirebaseAndroidAppArgs struct {
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PackageName: string, optional
	PackageName terra.StringValue `hcl:"package_name,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Sha1Hashes: list of string, optional
	Sha1Hashes terra.ListValue[terra.StringValue] `hcl:"sha1_hashes,attr"`
	// Sha256Hashes: list of string, optional
	Sha256Hashes terra.ListValue[terra.StringValue] `hcl:"sha256_hashes,attr"`
	// Timeouts: optional
	Timeouts *firebaseandroidapp.Timeouts `hcl:"timeouts,block"`
}
type firebaseAndroidAppAttributes struct {
	ref terra.Reference
}

// AppId returns a reference to field app_id of google_firebase_android_app.
func (faa firebaseAndroidAppAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(faa.ref.Append("app_id"))
}

// DeletionPolicy returns a reference to field deletion_policy of google_firebase_android_app.
func (faa firebaseAndroidAppAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(faa.ref.Append("deletion_policy"))
}

// DisplayName returns a reference to field display_name of google_firebase_android_app.
func (faa firebaseAndroidAppAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(faa.ref.Append("display_name"))
}

// Etag returns a reference to field etag of google_firebase_android_app.
func (faa firebaseAndroidAppAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(faa.ref.Append("etag"))
}

// Id returns a reference to field id of google_firebase_android_app.
func (faa firebaseAndroidAppAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(faa.ref.Append("id"))
}

// Name returns a reference to field name of google_firebase_android_app.
func (faa firebaseAndroidAppAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(faa.ref.Append("name"))
}

// PackageName returns a reference to field package_name of google_firebase_android_app.
func (faa firebaseAndroidAppAttributes) PackageName() terra.StringValue {
	return terra.ReferenceAsString(faa.ref.Append("package_name"))
}

// Project returns a reference to field project of google_firebase_android_app.
func (faa firebaseAndroidAppAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(faa.ref.Append("project"))
}

// Sha1Hashes returns a reference to field sha1_hashes of google_firebase_android_app.
func (faa firebaseAndroidAppAttributes) Sha1Hashes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](faa.ref.Append("sha1_hashes"))
}

// Sha256Hashes returns a reference to field sha256_hashes of google_firebase_android_app.
func (faa firebaseAndroidAppAttributes) Sha256Hashes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](faa.ref.Append("sha256_hashes"))
}

func (faa firebaseAndroidAppAttributes) Timeouts() firebaseandroidapp.TimeoutsAttributes {
	return terra.ReferenceAsSingle[firebaseandroidapp.TimeoutsAttributes](faa.ref.Append("timeouts"))
}

type firebaseAndroidAppState struct {
	AppId          string                            `json:"app_id"`
	DeletionPolicy string                            `json:"deletion_policy"`
	DisplayName    string                            `json:"display_name"`
	Etag           string                            `json:"etag"`
	Id             string                            `json:"id"`
	Name           string                            `json:"name"`
	PackageName    string                            `json:"package_name"`
	Project        string                            `json:"project"`
	Sha1Hashes     []string                          `json:"sha1_hashes"`
	Sha256Hashes   []string                          `json:"sha256_hashes"`
	Timeouts       *firebaseandroidapp.TimeoutsState `json:"timeouts"`
}
