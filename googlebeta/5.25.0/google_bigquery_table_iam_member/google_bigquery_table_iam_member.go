// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_table_iam_member

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_table_iam_member.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryTableIamMemberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbtim *Resource) Type() string {
	return "google_bigquery_table_iam_member"
}

// LocalName returns the local name for [Resource].
func (gbtim *Resource) LocalName() string {
	return gbtim.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbtim *Resource) Configuration() interface{} {
	return gbtim.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbtim *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbtim)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbtim *Resource) Dependencies() terra.Dependencies {
	return gbtim.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbtim *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbtim.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbtim *Resource) Attributes() googleBigqueryTableIamMemberAttributes {
	return googleBigqueryTableIamMemberAttributes{ref: terra.ReferenceResource(gbtim)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbtim *Resource) ImportState(state io.Reader) error {
	gbtim.state = &googleBigqueryTableIamMemberState{}
	if err := json.NewDecoder(state).Decode(gbtim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbtim.Type(), gbtim.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbtim *Resource) State() (*googleBigqueryTableIamMemberState, bool) {
	return gbtim.state, gbtim.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbtim *Resource) StateMust() *googleBigqueryTableIamMemberState {
	if gbtim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbtim.Type(), gbtim.LocalName()))
	}
	return gbtim.state
}

// Args contains the configurations for google_bigquery_table_iam_member.
type Args struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
	// Condition: optional
	Condition *Condition `hcl:"condition,block"`
}

type googleBigqueryTableIamMemberAttributes struct {
	ref terra.Reference
}

// DatasetId returns a reference to field dataset_id of google_bigquery_table_iam_member.
func (gbtim googleBigqueryTableIamMemberAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(gbtim.ref.Append("dataset_id"))
}

// Etag returns a reference to field etag of google_bigquery_table_iam_member.
func (gbtim googleBigqueryTableIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gbtim.ref.Append("etag"))
}

// Id returns a reference to field id of google_bigquery_table_iam_member.
func (gbtim googleBigqueryTableIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbtim.ref.Append("id"))
}

// Member returns a reference to field member of google_bigquery_table_iam_member.
func (gbtim googleBigqueryTableIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceAsString(gbtim.ref.Append("member"))
}

// Project returns a reference to field project of google_bigquery_table_iam_member.
func (gbtim googleBigqueryTableIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbtim.ref.Append("project"))
}

// Role returns a reference to field role of google_bigquery_table_iam_member.
func (gbtim googleBigqueryTableIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(gbtim.ref.Append("role"))
}

// TableId returns a reference to field table_id of google_bigquery_table_iam_member.
func (gbtim googleBigqueryTableIamMemberAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(gbtim.ref.Append("table_id"))
}

func (gbtim googleBigqueryTableIamMemberAttributes) Condition() terra.ListValue[ConditionAttributes] {
	return terra.ReferenceAsList[ConditionAttributes](gbtim.ref.Append("condition"))
}

type googleBigqueryTableIamMemberState struct {
	DatasetId string           `json:"dataset_id"`
	Etag      string           `json:"etag"`
	Id        string           `json:"id"`
	Member    string           `json:"member"`
	Project   string           `json:"project"`
	Role      string           `json:"role"`
	TableId   string           `json:"table_id"`
	Condition []ConditionState `json:"condition"`
}
