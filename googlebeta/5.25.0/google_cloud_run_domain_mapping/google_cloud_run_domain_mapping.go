// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloud_run_domain_mapping

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_cloud_run_domain_mapping.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCloudRunDomainMappingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcrdm *Resource) Type() string {
	return "google_cloud_run_domain_mapping"
}

// LocalName returns the local name for [Resource].
func (gcrdm *Resource) LocalName() string {
	return gcrdm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcrdm *Resource) Configuration() interface{} {
	return gcrdm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcrdm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcrdm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcrdm *Resource) Dependencies() terra.Dependencies {
	return gcrdm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcrdm *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcrdm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcrdm *Resource) Attributes() googleCloudRunDomainMappingAttributes {
	return googleCloudRunDomainMappingAttributes{ref: terra.ReferenceResource(gcrdm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcrdm *Resource) ImportState(state io.Reader) error {
	gcrdm.state = &googleCloudRunDomainMappingState{}
	if err := json.NewDecoder(state).Decode(gcrdm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcrdm.Type(), gcrdm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcrdm *Resource) State() (*googleCloudRunDomainMappingState, bool) {
	return gcrdm.state, gcrdm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcrdm *Resource) StateMust() *googleCloudRunDomainMappingState {
	if gcrdm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcrdm.Type(), gcrdm.LocalName()))
	}
	return gcrdm.state
}

// Args contains the configurations for google_cloud_run_domain_mapping.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Metadata: optional
	Metadata *Metadata `hcl:"metadata,block"`
	// Spec: required
	Spec *Spec `hcl:"spec,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleCloudRunDomainMappingAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_cloud_run_domain_mapping.
func (gcrdm googleCloudRunDomainMappingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcrdm.ref.Append("id"))
}

// Location returns a reference to field location of google_cloud_run_domain_mapping.
func (gcrdm googleCloudRunDomainMappingAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcrdm.ref.Append("location"))
}

// Name returns a reference to field name of google_cloud_run_domain_mapping.
func (gcrdm googleCloudRunDomainMappingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcrdm.ref.Append("name"))
}

// Project returns a reference to field project of google_cloud_run_domain_mapping.
func (gcrdm googleCloudRunDomainMappingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcrdm.ref.Append("project"))
}

func (gcrdm googleCloudRunDomainMappingAttributes) Status() terra.ListValue[StatusAttributes] {
	return terra.ReferenceAsList[StatusAttributes](gcrdm.ref.Append("status"))
}

func (gcrdm googleCloudRunDomainMappingAttributes) Metadata() terra.ListValue[MetadataAttributes] {
	return terra.ReferenceAsList[MetadataAttributes](gcrdm.ref.Append("metadata"))
}

func (gcrdm googleCloudRunDomainMappingAttributes) Spec() terra.ListValue[SpecAttributes] {
	return terra.ReferenceAsList[SpecAttributes](gcrdm.ref.Append("spec"))
}

func (gcrdm googleCloudRunDomainMappingAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcrdm.ref.Append("timeouts"))
}

type googleCloudRunDomainMappingState struct {
	Id       string          `json:"id"`
	Location string          `json:"location"`
	Name     string          `json:"name"`
	Project  string          `json:"project"`
	Status   []StatusState   `json:"status"`
	Metadata []MetadataState `json:"metadata"`
	Spec     []SpecState     `json:"spec"`
	Timeouts *TimeoutsState  `json:"timeouts"`
}
