// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apphub_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_apphub_service.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApphubServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gas *Resource) Type() string {
	return "google_apphub_service"
}

// LocalName returns the local name for [Resource].
func (gas *Resource) LocalName() string {
	return gas.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gas *Resource) Configuration() interface{} {
	return gas.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gas *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gas)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gas *Resource) Dependencies() terra.Dependencies {
	return gas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gas *Resource) LifecycleManagement() *terra.Lifecycle {
	return gas.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gas *Resource) Attributes() googleApphubServiceAttributes {
	return googleApphubServiceAttributes{ref: terra.ReferenceResource(gas)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gas *Resource) ImportState(state io.Reader) error {
	gas.state = &googleApphubServiceState{}
	if err := json.NewDecoder(state).Decode(gas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gas.Type(), gas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gas *Resource) State() (*googleApphubServiceState, bool) {
	return gas.state, gas.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gas *Resource) StateMust() *googleApphubServiceState {
	if gas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gas.Type(), gas.LocalName()))
	}
	return gas.state
}

// Args contains the configurations for google_apphub_service.
type Args struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DiscoveredService: string, required
	DiscoveredService terra.StringValue `hcl:"discovered_service,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceId: string, required
	ServiceId terra.StringValue `hcl:"service_id,attr" validate:"required"`
	// Attributes: optional
	Attributes *Attributes `hcl:"attributes,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApphubServiceAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of google_apphub_service.
func (gas googleApphubServiceAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(gas.ref.Append("application_id"))
}

// CreateTime returns a reference to field create_time of google_apphub_service.
func (gas googleApphubServiceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gas.ref.Append("create_time"))
}

// Description returns a reference to field description of google_apphub_service.
func (gas googleApphubServiceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gas.ref.Append("description"))
}

// DiscoveredService returns a reference to field discovered_service of google_apphub_service.
func (gas googleApphubServiceAttributes) DiscoveredService() terra.StringValue {
	return terra.ReferenceAsString(gas.ref.Append("discovered_service"))
}

// DisplayName returns a reference to field display_name of google_apphub_service.
func (gas googleApphubServiceAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gas.ref.Append("display_name"))
}

// Id returns a reference to field id of google_apphub_service.
func (gas googleApphubServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gas.ref.Append("id"))
}

// Location returns a reference to field location of google_apphub_service.
func (gas googleApphubServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gas.ref.Append("location"))
}

// Name returns a reference to field name of google_apphub_service.
func (gas googleApphubServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gas.ref.Append("name"))
}

// Project returns a reference to field project of google_apphub_service.
func (gas googleApphubServiceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gas.ref.Append("project"))
}

// ServiceId returns a reference to field service_id of google_apphub_service.
func (gas googleApphubServiceAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceAsString(gas.ref.Append("service_id"))
}

// State returns a reference to field state of google_apphub_service.
func (gas googleApphubServiceAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gas.ref.Append("state"))
}

// Uid returns a reference to field uid of google_apphub_service.
func (gas googleApphubServiceAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gas.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_apphub_service.
func (gas googleApphubServiceAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gas.ref.Append("update_time"))
}

func (gas googleApphubServiceAttributes) ServiceProperties() terra.ListValue[ServicePropertiesAttributes] {
	return terra.ReferenceAsList[ServicePropertiesAttributes](gas.ref.Append("service_properties"))
}

func (gas googleApphubServiceAttributes) ServiceReference() terra.ListValue[ServiceReferenceAttributes] {
	return terra.ReferenceAsList[ServiceReferenceAttributes](gas.ref.Append("service_reference"))
}

func (gas googleApphubServiceAttributes) Attributes() terra.ListValue[AttributesAttributes] {
	return terra.ReferenceAsList[AttributesAttributes](gas.ref.Append("attributes"))
}

func (gas googleApphubServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gas.ref.Append("timeouts"))
}

type googleApphubServiceState struct {
	ApplicationId     string                   `json:"application_id"`
	CreateTime        string                   `json:"create_time"`
	Description       string                   `json:"description"`
	DiscoveredService string                   `json:"discovered_service"`
	DisplayName       string                   `json:"display_name"`
	Id                string                   `json:"id"`
	Location          string                   `json:"location"`
	Name              string                   `json:"name"`
	Project           string                   `json:"project"`
	ServiceId         string                   `json:"service_id"`
	State             string                   `json:"state"`
	Uid               string                   `json:"uid"`
	UpdateTime        string                   `json:"update_time"`
	ServiceProperties []ServicePropertiesState `json:"service_properties"`
	ServiceReference  []ServiceReferenceState  `json:"service_reference"`
	Attributes        []AttributesState        `json:"attributes"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
