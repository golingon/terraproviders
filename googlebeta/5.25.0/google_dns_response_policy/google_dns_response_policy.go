// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dns_response_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dns_response_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDnsResponsePolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdrp *Resource) Type() string {
	return "google_dns_response_policy"
}

// LocalName returns the local name for [Resource].
func (gdrp *Resource) LocalName() string {
	return gdrp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdrp *Resource) Configuration() interface{} {
	return gdrp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdrp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdrp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdrp *Resource) Dependencies() terra.Dependencies {
	return gdrp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdrp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdrp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdrp *Resource) Attributes() googleDnsResponsePolicyAttributes {
	return googleDnsResponsePolicyAttributes{ref: terra.ReferenceResource(gdrp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdrp *Resource) ImportState(state io.Reader) error {
	gdrp.state = &googleDnsResponsePolicyState{}
	if err := json.NewDecoder(state).Decode(gdrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdrp.Type(), gdrp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdrp *Resource) State() (*googleDnsResponsePolicyState, bool) {
	return gdrp.state, gdrp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdrp *Resource) StateMust() *googleDnsResponsePolicyState {
	if gdrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdrp.Type(), gdrp.LocalName()))
	}
	return gdrp.state
}

// Args contains the configurations for google_dns_response_policy.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ResponsePolicyName: string, required
	ResponsePolicyName terra.StringValue `hcl:"response_policy_name,attr" validate:"required"`
	// GkeClusters: min=0
	GkeClusters []GkeClusters `hcl:"gke_clusters,block" validate:"min=0"`
	// Networks: min=0
	Networks []Networks `hcl:"networks,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDnsResponsePolicyAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_dns_response_policy.
func (gdrp googleDnsResponsePolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdrp.ref.Append("description"))
}

// Id returns a reference to field id of google_dns_response_policy.
func (gdrp googleDnsResponsePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdrp.ref.Append("id"))
}

// Project returns a reference to field project of google_dns_response_policy.
func (gdrp googleDnsResponsePolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdrp.ref.Append("project"))
}

// ResponsePolicyName returns a reference to field response_policy_name of google_dns_response_policy.
func (gdrp googleDnsResponsePolicyAttributes) ResponsePolicyName() terra.StringValue {
	return terra.ReferenceAsString(gdrp.ref.Append("response_policy_name"))
}

func (gdrp googleDnsResponsePolicyAttributes) GkeClusters() terra.ListValue[GkeClustersAttributes] {
	return terra.ReferenceAsList[GkeClustersAttributes](gdrp.ref.Append("gke_clusters"))
}

func (gdrp googleDnsResponsePolicyAttributes) Networks() terra.ListValue[NetworksAttributes] {
	return terra.ReferenceAsList[NetworksAttributes](gdrp.ref.Append("networks"))
}

func (gdrp googleDnsResponsePolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdrp.ref.Append("timeouts"))
}

type googleDnsResponsePolicyState struct {
	Description        string             `json:"description"`
	Id                 string             `json:"id"`
	Project            string             `json:"project"`
	ResponsePolicyName string             `json:"response_policy_name"`
	GkeClusters        []GkeClustersState `json:"gke_clusters"`
	Networks           []NetworksState    `json:"networks"`
	Timeouts           *TimeoutsState     `json:"timeouts"`
}
