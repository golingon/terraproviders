// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataplex_zone

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DiscoverySpec struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// ExcludePatterns: list of string, optional
	ExcludePatterns terra.ListValue[terra.StringValue] `hcl:"exclude_patterns,attr"`
	// IncludePatterns: list of string, optional
	IncludePatterns terra.ListValue[terra.StringValue] `hcl:"include_patterns,attr"`
	// Schedule: string, optional
	Schedule terra.StringValue `hcl:"schedule,attr"`
	// DiscoverySpecCsvOptions: optional
	CsvOptions *DiscoverySpecCsvOptions `hcl:"csv_options,block"`
	// DiscoverySpecJsonOptions: optional
	JsonOptions *DiscoverySpecJsonOptions `hcl:"json_options,block"`
}

type DiscoverySpecCsvOptions struct {
	// Delimiter: string, optional
	Delimiter terra.StringValue `hcl:"delimiter,attr"`
	// DisableTypeInference: bool, optional
	DisableTypeInference terra.BoolValue `hcl:"disable_type_inference,attr"`
	// Encoding: string, optional
	Encoding terra.StringValue `hcl:"encoding,attr"`
	// HeaderRows: number, optional
	HeaderRows terra.NumberValue `hcl:"header_rows,attr"`
}

type DiscoverySpecJsonOptions struct {
	// DisableTypeInference: bool, optional
	DisableTypeInference terra.BoolValue `hcl:"disable_type_inference,attr"`
	// Encoding: string, optional
	Encoding terra.StringValue `hcl:"encoding,attr"`
}

type ResourceSpec struct {
	// LocationType: string, required
	LocationType terra.StringValue `hcl:"location_type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AssetStatusAttributes struct {
	ref terra.Reference
}

func (as AssetStatusAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AssetStatusAttributes) InternalWithRef(ref terra.Reference) AssetStatusAttributes {
	return AssetStatusAttributes{ref: ref}
}

func (as AssetStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AssetStatusAttributes) ActiveAssets() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("active_assets"))
}

func (as AssetStatusAttributes) SecurityPolicyApplyingAssets() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("security_policy_applying_assets"))
}

func (as AssetStatusAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("update_time"))
}

type DiscoverySpecAttributes struct {
	ref terra.Reference
}

func (ds DiscoverySpecAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DiscoverySpecAttributes) InternalWithRef(ref terra.Reference) DiscoverySpecAttributes {
	return DiscoverySpecAttributes{ref: ref}
}

func (ds DiscoverySpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DiscoverySpecAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ds.ref.Append("enabled"))
}

func (ds DiscoverySpecAttributes) ExcludePatterns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ds.ref.Append("exclude_patterns"))
}

func (ds DiscoverySpecAttributes) IncludePatterns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ds.ref.Append("include_patterns"))
}

func (ds DiscoverySpecAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("schedule"))
}

func (ds DiscoverySpecAttributes) CsvOptions() terra.ListValue[DiscoverySpecCsvOptionsAttributes] {
	return terra.ReferenceAsList[DiscoverySpecCsvOptionsAttributes](ds.ref.Append("csv_options"))
}

func (ds DiscoverySpecAttributes) JsonOptions() terra.ListValue[DiscoverySpecJsonOptionsAttributes] {
	return terra.ReferenceAsList[DiscoverySpecJsonOptionsAttributes](ds.ref.Append("json_options"))
}

type DiscoverySpecCsvOptionsAttributes struct {
	ref terra.Reference
}

func (co DiscoverySpecCsvOptionsAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co DiscoverySpecCsvOptionsAttributes) InternalWithRef(ref terra.Reference) DiscoverySpecCsvOptionsAttributes {
	return DiscoverySpecCsvOptionsAttributes{ref: ref}
}

func (co DiscoverySpecCsvOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co DiscoverySpecCsvOptionsAttributes) Delimiter() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("delimiter"))
}

func (co DiscoverySpecCsvOptionsAttributes) DisableTypeInference() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("disable_type_inference"))
}

func (co DiscoverySpecCsvOptionsAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("encoding"))
}

func (co DiscoverySpecCsvOptionsAttributes) HeaderRows() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("header_rows"))
}

type DiscoverySpecJsonOptionsAttributes struct {
	ref terra.Reference
}

func (jo DiscoverySpecJsonOptionsAttributes) InternalRef() (terra.Reference, error) {
	return jo.ref, nil
}

func (jo DiscoverySpecJsonOptionsAttributes) InternalWithRef(ref terra.Reference) DiscoverySpecJsonOptionsAttributes {
	return DiscoverySpecJsonOptionsAttributes{ref: ref}
}

func (jo DiscoverySpecJsonOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jo.ref.InternalTokens()
}

func (jo DiscoverySpecJsonOptionsAttributes) DisableTypeInference() terra.BoolValue {
	return terra.ReferenceAsBool(jo.ref.Append("disable_type_inference"))
}

func (jo DiscoverySpecJsonOptionsAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(jo.ref.Append("encoding"))
}

type ResourceSpecAttributes struct {
	ref terra.Reference
}

func (rs ResourceSpecAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs ResourceSpecAttributes) InternalWithRef(ref terra.Reference) ResourceSpecAttributes {
	return ResourceSpecAttributes{ref: ref}
}

func (rs ResourceSpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs ResourceSpecAttributes) LocationType() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("location_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AssetStatusState struct {
	ActiveAssets                 float64 `json:"active_assets"`
	SecurityPolicyApplyingAssets float64 `json:"security_policy_applying_assets"`
	UpdateTime                   string  `json:"update_time"`
}

type DiscoverySpecState struct {
	Enabled         bool                            `json:"enabled"`
	ExcludePatterns []string                        `json:"exclude_patterns"`
	IncludePatterns []string                        `json:"include_patterns"`
	Schedule        string                          `json:"schedule"`
	CsvOptions      []DiscoverySpecCsvOptionsState  `json:"csv_options"`
	JsonOptions     []DiscoverySpecJsonOptionsState `json:"json_options"`
}

type DiscoverySpecCsvOptionsState struct {
	Delimiter            string  `json:"delimiter"`
	DisableTypeInference bool    `json:"disable_type_inference"`
	Encoding             string  `json:"encoding"`
	HeaderRows           float64 `json:"header_rows"`
}

type DiscoverySpecJsonOptionsState struct {
	DisableTypeInference bool   `json:"disable_type_inference"`
	Encoding             string `json:"encoding"`
}

type ResourceSpecState struct {
	LocationType string `json:"location_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
