// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataplex_zone

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dataplex_zone.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataplexZoneState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdz *Resource) Type() string {
	return "google_dataplex_zone"
}

// LocalName returns the local name for [Resource].
func (gdz *Resource) LocalName() string {
	return gdz.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdz *Resource) Configuration() interface{} {
	return gdz.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdz *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdz)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdz *Resource) Dependencies() terra.Dependencies {
	return gdz.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdz *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdz.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdz *Resource) Attributes() googleDataplexZoneAttributes {
	return googleDataplexZoneAttributes{ref: terra.ReferenceResource(gdz)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdz *Resource) ImportState(state io.Reader) error {
	gdz.state = &googleDataplexZoneState{}
	if err := json.NewDecoder(state).Decode(gdz.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdz.Type(), gdz.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdz *Resource) State() (*googleDataplexZoneState, bool) {
	return gdz.state, gdz.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdz *Resource) StateMust() *googleDataplexZoneState {
	if gdz.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdz.Type(), gdz.LocalName()))
	}
	return gdz.state
}

// Args contains the configurations for google_dataplex_zone.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Lake: string, required
	Lake terra.StringValue `hcl:"lake,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// DiscoverySpec: required
	DiscoverySpec *DiscoverySpec `hcl:"discovery_spec,block" validate:"required"`
	// ResourceSpec: required
	ResourceSpec *ResourceSpec `hcl:"resource_spec,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDataplexZoneAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gdz.ref.Append("create_time"))
}

// Description returns a reference to field description of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdz.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdz.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdz.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdz.ref.Append("id"))
}

// Labels returns a reference to field labels of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdz.ref.Append("labels"))
}

// Lake returns a reference to field lake of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) Lake() terra.StringValue {
	return terra.ReferenceAsString(gdz.ref.Append("lake"))
}

// Location returns a reference to field location of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gdz.ref.Append("location"))
}

// Name returns a reference to field name of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdz.ref.Append("name"))
}

// Project returns a reference to field project of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdz.ref.Append("project"))
}

// State returns a reference to field state of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gdz.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdz.ref.Append("terraform_labels"))
}

// Type returns a reference to field type of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gdz.ref.Append("type"))
}

// Uid returns a reference to field uid of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gdz.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_dataplex_zone.
func (gdz googleDataplexZoneAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gdz.ref.Append("update_time"))
}

func (gdz googleDataplexZoneAttributes) AssetStatus() terra.ListValue[AssetStatusAttributes] {
	return terra.ReferenceAsList[AssetStatusAttributes](gdz.ref.Append("asset_status"))
}

func (gdz googleDataplexZoneAttributes) DiscoverySpec() terra.ListValue[DiscoverySpecAttributes] {
	return terra.ReferenceAsList[DiscoverySpecAttributes](gdz.ref.Append("discovery_spec"))
}

func (gdz googleDataplexZoneAttributes) ResourceSpec() terra.ListValue[ResourceSpecAttributes] {
	return terra.ReferenceAsList[ResourceSpecAttributes](gdz.ref.Append("resource_spec"))
}

func (gdz googleDataplexZoneAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdz.ref.Append("timeouts"))
}

type googleDataplexZoneState struct {
	CreateTime      string               `json:"create_time"`
	Description     string               `json:"description"`
	DisplayName     string               `json:"display_name"`
	EffectiveLabels map[string]string    `json:"effective_labels"`
	Id              string               `json:"id"`
	Labels          map[string]string    `json:"labels"`
	Lake            string               `json:"lake"`
	Location        string               `json:"location"`
	Name            string               `json:"name"`
	Project         string               `json:"project"`
	State           string               `json:"state"`
	TerraformLabels map[string]string    `json:"terraform_labels"`
	Type            string               `json:"type"`
	Uid             string               `json:"uid"`
	UpdateTime      string               `json:"update_time"`
	AssetStatus     []AssetStatusState   `json:"asset_status"`
	DiscoverySpec   []DiscoverySpecState `json:"discovery_spec"`
	ResourceSpec    []ResourceSpecState  `json:"resource_spec"`
	Timeouts        *TimeoutsState       `json:"timeouts"`
}
