// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_clouddomains_registration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_clouddomains_registration.
type Resource struct {
	Name      string
	Args      Args
	state     *googleClouddomainsRegistrationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcr *Resource) Type() string {
	return "google_clouddomains_registration"
}

// LocalName returns the local name for [Resource].
func (gcr *Resource) LocalName() string {
	return gcr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcr *Resource) Configuration() interface{} {
	return gcr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcr *Resource) Dependencies() terra.Dependencies {
	return gcr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcr *Resource) Attributes() googleClouddomainsRegistrationAttributes {
	return googleClouddomainsRegistrationAttributes{ref: terra.ReferenceResource(gcr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcr *Resource) ImportState(state io.Reader) error {
	gcr.state = &googleClouddomainsRegistrationState{}
	if err := json.NewDecoder(state).Decode(gcr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcr.Type(), gcr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcr *Resource) State() (*googleClouddomainsRegistrationState, bool) {
	return gcr.state, gcr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcr *Resource) StateMust() *googleClouddomainsRegistrationState {
	if gcr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcr.Type(), gcr.LocalName()))
	}
	return gcr.state
}

// Args contains the configurations for google_clouddomains_registration.
type Args struct {
	// ContactNotices: list of string, optional
	ContactNotices terra.ListValue[terra.StringValue] `hcl:"contact_notices,attr"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// DomainNotices: list of string, optional
	DomainNotices terra.ListValue[terra.StringValue] `hcl:"domain_notices,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ContactSettings: required
	ContactSettings *ContactSettings `hcl:"contact_settings,block" validate:"required"`
	// DnsSettings: optional
	DnsSettings *DnsSettings `hcl:"dns_settings,block"`
	// ManagementSettings: optional
	ManagementSettings *ManagementSettings `hcl:"management_settings,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// YearlyPrice: required
	YearlyPrice *YearlyPrice `hcl:"yearly_price,block" validate:"required"`
}

type googleClouddomainsRegistrationAttributes struct {
	ref terra.Reference
}

// ContactNotices returns a reference to field contact_notices of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) ContactNotices() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcr.ref.Append("contact_notices"))
}

// CreateTime returns a reference to field create_time of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("create_time"))
}

// DomainName returns a reference to field domain_name of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("domain_name"))
}

// DomainNotices returns a reference to field domain_notices of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) DomainNotices() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcr.ref.Append("domain_notices"))
}

// EffectiveLabels returns a reference to field effective_labels of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcr.ref.Append("effective_labels"))
}

// ExpireTime returns a reference to field expire_time of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("expire_time"))
}

// Id returns a reference to field id of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("id"))
}

// Issues returns a reference to field issues of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) Issues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcr.ref.Append("issues"))
}

// Labels returns a reference to field labels of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcr.ref.Append("labels"))
}

// Location returns a reference to field location of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("location"))
}

// Name returns a reference to field name of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("name"))
}

// Project returns a reference to field project of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("project"))
}

// RegisterFailureReason returns a reference to field register_failure_reason of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) RegisterFailureReason() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("register_failure_reason"))
}

// State returns a reference to field state of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("state"))
}

// SupportedPrivacy returns a reference to field supported_privacy of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) SupportedPrivacy() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcr.ref.Append("supported_privacy"))
}

// TerraformLabels returns a reference to field terraform_labels of google_clouddomains_registration.
func (gcr googleClouddomainsRegistrationAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcr.ref.Append("terraform_labels"))
}

func (gcr googleClouddomainsRegistrationAttributes) ContactSettings() terra.ListValue[ContactSettingsAttributes] {
	return terra.ReferenceAsList[ContactSettingsAttributes](gcr.ref.Append("contact_settings"))
}

func (gcr googleClouddomainsRegistrationAttributes) DnsSettings() terra.ListValue[DnsSettingsAttributes] {
	return terra.ReferenceAsList[DnsSettingsAttributes](gcr.ref.Append("dns_settings"))
}

func (gcr googleClouddomainsRegistrationAttributes) ManagementSettings() terra.ListValue[ManagementSettingsAttributes] {
	return terra.ReferenceAsList[ManagementSettingsAttributes](gcr.ref.Append("management_settings"))
}

func (gcr googleClouddomainsRegistrationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcr.ref.Append("timeouts"))
}

func (gcr googleClouddomainsRegistrationAttributes) YearlyPrice() terra.ListValue[YearlyPriceAttributes] {
	return terra.ReferenceAsList[YearlyPriceAttributes](gcr.ref.Append("yearly_price"))
}

type googleClouddomainsRegistrationState struct {
	ContactNotices        []string                  `json:"contact_notices"`
	CreateTime            string                    `json:"create_time"`
	DomainName            string                    `json:"domain_name"`
	DomainNotices         []string                  `json:"domain_notices"`
	EffectiveLabels       map[string]string         `json:"effective_labels"`
	ExpireTime            string                    `json:"expire_time"`
	Id                    string                    `json:"id"`
	Issues                []string                  `json:"issues"`
	Labels                map[string]string         `json:"labels"`
	Location              string                    `json:"location"`
	Name                  string                    `json:"name"`
	Project               string                    `json:"project"`
	RegisterFailureReason string                    `json:"register_failure_reason"`
	State                 string                    `json:"state"`
	SupportedPrivacy      []string                  `json:"supported_privacy"`
	TerraformLabels       map[string]string         `json:"terraform_labels"`
	ContactSettings       []ContactSettingsState    `json:"contact_settings"`
	DnsSettings           []DnsSettingsState        `json:"dns_settings"`
	ManagementSettings    []ManagementSettingsState `json:"management_settings"`
	Timeouts              *TimeoutsState            `json:"timeouts"`
	YearlyPrice           []YearlyPriceState        `json:"yearly_price"`
}
