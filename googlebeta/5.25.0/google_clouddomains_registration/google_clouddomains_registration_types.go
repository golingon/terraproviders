// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_clouddomains_registration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ContactSettings struct {
	// Privacy: string, required
	Privacy terra.StringValue `hcl:"privacy,attr" validate:"required"`
	// ContactSettingsAdminContact: required
	AdminContact *ContactSettingsAdminContact `hcl:"admin_contact,block" validate:"required"`
	// ContactSettingsRegistrantContact: required
	RegistrantContact *ContactSettingsRegistrantContact `hcl:"registrant_contact,block" validate:"required"`
	// ContactSettingsTechnicalContact: required
	TechnicalContact *ContactSettingsTechnicalContact `hcl:"technical_contact,block" validate:"required"`
}

type ContactSettingsAdminContact struct {
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// FaxNumber: string, optional
	FaxNumber terra.StringValue `hcl:"fax_number,attr"`
	// PhoneNumber: string, required
	PhoneNumber terra.StringValue `hcl:"phone_number,attr" validate:"required"`
	// ContactSettingsAdminContactPostalAddress: required
	PostalAddress *ContactSettingsAdminContactPostalAddress `hcl:"postal_address,block" validate:"required"`
}

type ContactSettingsAdminContactPostalAddress struct {
	// AddressLines: list of string, optional
	AddressLines terra.ListValue[terra.StringValue] `hcl:"address_lines,attr"`
	// AdministrativeArea: string, optional
	AdministrativeArea terra.StringValue `hcl:"administrative_area,attr"`
	// Locality: string, optional
	Locality terra.StringValue `hcl:"locality,attr"`
	// Organization: string, optional
	Organization terra.StringValue `hcl:"organization,attr"`
	// PostalCode: string, optional
	PostalCode terra.StringValue `hcl:"postal_code,attr"`
	// Recipients: list of string, optional
	Recipients terra.ListValue[terra.StringValue] `hcl:"recipients,attr"`
	// RegionCode: string, required
	RegionCode terra.StringValue `hcl:"region_code,attr" validate:"required"`
}

type ContactSettingsRegistrantContact struct {
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// FaxNumber: string, optional
	FaxNumber terra.StringValue `hcl:"fax_number,attr"`
	// PhoneNumber: string, required
	PhoneNumber terra.StringValue `hcl:"phone_number,attr" validate:"required"`
	// ContactSettingsRegistrantContactPostalAddress: required
	PostalAddress *ContactSettingsRegistrantContactPostalAddress `hcl:"postal_address,block" validate:"required"`
}

type ContactSettingsRegistrantContactPostalAddress struct {
	// AddressLines: list of string, optional
	AddressLines terra.ListValue[terra.StringValue] `hcl:"address_lines,attr"`
	// AdministrativeArea: string, optional
	AdministrativeArea terra.StringValue `hcl:"administrative_area,attr"`
	// Locality: string, optional
	Locality terra.StringValue `hcl:"locality,attr"`
	// Organization: string, optional
	Organization terra.StringValue `hcl:"organization,attr"`
	// PostalCode: string, optional
	PostalCode terra.StringValue `hcl:"postal_code,attr"`
	// Recipients: list of string, optional
	Recipients terra.ListValue[terra.StringValue] `hcl:"recipients,attr"`
	// RegionCode: string, required
	RegionCode terra.StringValue `hcl:"region_code,attr" validate:"required"`
}

type ContactSettingsTechnicalContact struct {
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// FaxNumber: string, optional
	FaxNumber terra.StringValue `hcl:"fax_number,attr"`
	// PhoneNumber: string, required
	PhoneNumber terra.StringValue `hcl:"phone_number,attr" validate:"required"`
	// ContactSettingsTechnicalContactPostalAddress: required
	PostalAddress *ContactSettingsTechnicalContactPostalAddress `hcl:"postal_address,block" validate:"required"`
}

type ContactSettingsTechnicalContactPostalAddress struct {
	// AddressLines: list of string, optional
	AddressLines terra.ListValue[terra.StringValue] `hcl:"address_lines,attr"`
	// AdministrativeArea: string, optional
	AdministrativeArea terra.StringValue `hcl:"administrative_area,attr"`
	// Locality: string, optional
	Locality terra.StringValue `hcl:"locality,attr"`
	// Organization: string, optional
	Organization terra.StringValue `hcl:"organization,attr"`
	// PostalCode: string, optional
	PostalCode terra.StringValue `hcl:"postal_code,attr"`
	// Recipients: list of string, optional
	Recipients terra.ListValue[terra.StringValue] `hcl:"recipients,attr"`
	// RegionCode: string, required
	RegionCode terra.StringValue `hcl:"region_code,attr" validate:"required"`
}

type DnsSettings struct {
	// DnsSettingsCustomDns: optional
	CustomDns *DnsSettingsCustomDns `hcl:"custom_dns,block"`
	// DnsSettingsGlueRecords: min=0
	GlueRecords []DnsSettingsGlueRecords `hcl:"glue_records,block" validate:"min=0"`
}

type DnsSettingsCustomDns struct {
	// NameServers: list of string, required
	NameServers terra.ListValue[terra.StringValue] `hcl:"name_servers,attr" validate:"required"`
	// DnsSettingsCustomDnsDsRecords: min=0
	DsRecords []DnsSettingsCustomDnsDsRecords `hcl:"ds_records,block" validate:"min=0"`
}

type DnsSettingsCustomDnsDsRecords struct {
	// Algorithm: string, optional
	Algorithm terra.StringValue `hcl:"algorithm,attr"`
	// Digest: string, optional
	Digest terra.StringValue `hcl:"digest,attr"`
	// DigestType: string, optional
	DigestType terra.StringValue `hcl:"digest_type,attr"`
	// KeyTag: number, optional
	KeyTag terra.NumberValue `hcl:"key_tag,attr"`
}

type DnsSettingsGlueRecords struct {
	// HostName: string, required
	HostName terra.StringValue `hcl:"host_name,attr" validate:"required"`
	// Ipv4Addresses: list of string, optional
	Ipv4Addresses terra.ListValue[terra.StringValue] `hcl:"ipv4_addresses,attr"`
	// Ipv6Addresses: list of string, optional
	Ipv6Addresses terra.ListValue[terra.StringValue] `hcl:"ipv6_addresses,attr"`
}

type ManagementSettings struct {
	// PreferredRenewalMethod: string, optional
	PreferredRenewalMethod terra.StringValue `hcl:"preferred_renewal_method,attr"`
	// TransferLockState: string, optional
	TransferLockState terra.StringValue `hcl:"transfer_lock_state,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type YearlyPrice struct {
	// CurrencyCode: string, optional
	CurrencyCode terra.StringValue `hcl:"currency_code,attr"`
	// Units: string, optional
	Units terra.StringValue `hcl:"units,attr"`
}

type ContactSettingsAttributes struct {
	ref terra.Reference
}

func (cs ContactSettingsAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs ContactSettingsAttributes) InternalWithRef(ref terra.Reference) ContactSettingsAttributes {
	return ContactSettingsAttributes{ref: ref}
}

func (cs ContactSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs ContactSettingsAttributes) Privacy() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("privacy"))
}

func (cs ContactSettingsAttributes) AdminContact() terra.ListValue[ContactSettingsAdminContactAttributes] {
	return terra.ReferenceAsList[ContactSettingsAdminContactAttributes](cs.ref.Append("admin_contact"))
}

func (cs ContactSettingsAttributes) RegistrantContact() terra.ListValue[ContactSettingsRegistrantContactAttributes] {
	return terra.ReferenceAsList[ContactSettingsRegistrantContactAttributes](cs.ref.Append("registrant_contact"))
}

func (cs ContactSettingsAttributes) TechnicalContact() terra.ListValue[ContactSettingsTechnicalContactAttributes] {
	return terra.ReferenceAsList[ContactSettingsTechnicalContactAttributes](cs.ref.Append("technical_contact"))
}

type ContactSettingsAdminContactAttributes struct {
	ref terra.Reference
}

func (ac ContactSettingsAdminContactAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac ContactSettingsAdminContactAttributes) InternalWithRef(ref terra.Reference) ContactSettingsAdminContactAttributes {
	return ContactSettingsAdminContactAttributes{ref: ref}
}

func (ac ContactSettingsAdminContactAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac ContactSettingsAdminContactAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("email"))
}

func (ac ContactSettingsAdminContactAttributes) FaxNumber() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("fax_number"))
}

func (ac ContactSettingsAdminContactAttributes) PhoneNumber() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("phone_number"))
}

func (ac ContactSettingsAdminContactAttributes) PostalAddress() terra.ListValue[ContactSettingsAdminContactPostalAddressAttributes] {
	return terra.ReferenceAsList[ContactSettingsAdminContactPostalAddressAttributes](ac.ref.Append("postal_address"))
}

type ContactSettingsAdminContactPostalAddressAttributes struct {
	ref terra.Reference
}

func (pa ContactSettingsAdminContactPostalAddressAttributes) InternalRef() (terra.Reference, error) {
	return pa.ref, nil
}

func (pa ContactSettingsAdminContactPostalAddressAttributes) InternalWithRef(ref terra.Reference) ContactSettingsAdminContactPostalAddressAttributes {
	return ContactSettingsAdminContactPostalAddressAttributes{ref: ref}
}

func (pa ContactSettingsAdminContactPostalAddressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pa.ref.InternalTokens()
}

func (pa ContactSettingsAdminContactPostalAddressAttributes) AddressLines() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("address_lines"))
}

func (pa ContactSettingsAdminContactPostalAddressAttributes) AdministrativeArea() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("administrative_area"))
}

func (pa ContactSettingsAdminContactPostalAddressAttributes) Locality() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("locality"))
}

func (pa ContactSettingsAdminContactPostalAddressAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("organization"))
}

func (pa ContactSettingsAdminContactPostalAddressAttributes) PostalCode() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("postal_code"))
}

func (pa ContactSettingsAdminContactPostalAddressAttributes) Recipients() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("recipients"))
}

func (pa ContactSettingsAdminContactPostalAddressAttributes) RegionCode() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("region_code"))
}

type ContactSettingsRegistrantContactAttributes struct {
	ref terra.Reference
}

func (rc ContactSettingsRegistrantContactAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc ContactSettingsRegistrantContactAttributes) InternalWithRef(ref terra.Reference) ContactSettingsRegistrantContactAttributes {
	return ContactSettingsRegistrantContactAttributes{ref: ref}
}

func (rc ContactSettingsRegistrantContactAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc ContactSettingsRegistrantContactAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("email"))
}

func (rc ContactSettingsRegistrantContactAttributes) FaxNumber() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("fax_number"))
}

func (rc ContactSettingsRegistrantContactAttributes) PhoneNumber() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("phone_number"))
}

func (rc ContactSettingsRegistrantContactAttributes) PostalAddress() terra.ListValue[ContactSettingsRegistrantContactPostalAddressAttributes] {
	return terra.ReferenceAsList[ContactSettingsRegistrantContactPostalAddressAttributes](rc.ref.Append("postal_address"))
}

type ContactSettingsRegistrantContactPostalAddressAttributes struct {
	ref terra.Reference
}

func (pa ContactSettingsRegistrantContactPostalAddressAttributes) InternalRef() (terra.Reference, error) {
	return pa.ref, nil
}

func (pa ContactSettingsRegistrantContactPostalAddressAttributes) InternalWithRef(ref terra.Reference) ContactSettingsRegistrantContactPostalAddressAttributes {
	return ContactSettingsRegistrantContactPostalAddressAttributes{ref: ref}
}

func (pa ContactSettingsRegistrantContactPostalAddressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pa.ref.InternalTokens()
}

func (pa ContactSettingsRegistrantContactPostalAddressAttributes) AddressLines() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("address_lines"))
}

func (pa ContactSettingsRegistrantContactPostalAddressAttributes) AdministrativeArea() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("administrative_area"))
}

func (pa ContactSettingsRegistrantContactPostalAddressAttributes) Locality() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("locality"))
}

func (pa ContactSettingsRegistrantContactPostalAddressAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("organization"))
}

func (pa ContactSettingsRegistrantContactPostalAddressAttributes) PostalCode() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("postal_code"))
}

func (pa ContactSettingsRegistrantContactPostalAddressAttributes) Recipients() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("recipients"))
}

func (pa ContactSettingsRegistrantContactPostalAddressAttributes) RegionCode() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("region_code"))
}

type ContactSettingsTechnicalContactAttributes struct {
	ref terra.Reference
}

func (tc ContactSettingsTechnicalContactAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc ContactSettingsTechnicalContactAttributes) InternalWithRef(ref terra.Reference) ContactSettingsTechnicalContactAttributes {
	return ContactSettingsTechnicalContactAttributes{ref: ref}
}

func (tc ContactSettingsTechnicalContactAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc ContactSettingsTechnicalContactAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("email"))
}

func (tc ContactSettingsTechnicalContactAttributes) FaxNumber() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("fax_number"))
}

func (tc ContactSettingsTechnicalContactAttributes) PhoneNumber() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("phone_number"))
}

func (tc ContactSettingsTechnicalContactAttributes) PostalAddress() terra.ListValue[ContactSettingsTechnicalContactPostalAddressAttributes] {
	return terra.ReferenceAsList[ContactSettingsTechnicalContactPostalAddressAttributes](tc.ref.Append("postal_address"))
}

type ContactSettingsTechnicalContactPostalAddressAttributes struct {
	ref terra.Reference
}

func (pa ContactSettingsTechnicalContactPostalAddressAttributes) InternalRef() (terra.Reference, error) {
	return pa.ref, nil
}

func (pa ContactSettingsTechnicalContactPostalAddressAttributes) InternalWithRef(ref terra.Reference) ContactSettingsTechnicalContactPostalAddressAttributes {
	return ContactSettingsTechnicalContactPostalAddressAttributes{ref: ref}
}

func (pa ContactSettingsTechnicalContactPostalAddressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pa.ref.InternalTokens()
}

func (pa ContactSettingsTechnicalContactPostalAddressAttributes) AddressLines() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("address_lines"))
}

func (pa ContactSettingsTechnicalContactPostalAddressAttributes) AdministrativeArea() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("administrative_area"))
}

func (pa ContactSettingsTechnicalContactPostalAddressAttributes) Locality() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("locality"))
}

func (pa ContactSettingsTechnicalContactPostalAddressAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("organization"))
}

func (pa ContactSettingsTechnicalContactPostalAddressAttributes) PostalCode() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("postal_code"))
}

func (pa ContactSettingsTechnicalContactPostalAddressAttributes) Recipients() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("recipients"))
}

func (pa ContactSettingsTechnicalContactPostalAddressAttributes) RegionCode() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("region_code"))
}

type DnsSettingsAttributes struct {
	ref terra.Reference
}

func (ds DnsSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DnsSettingsAttributes) InternalWithRef(ref terra.Reference) DnsSettingsAttributes {
	return DnsSettingsAttributes{ref: ref}
}

func (ds DnsSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DnsSettingsAttributes) CustomDns() terra.ListValue[DnsSettingsCustomDnsAttributes] {
	return terra.ReferenceAsList[DnsSettingsCustomDnsAttributes](ds.ref.Append("custom_dns"))
}

func (ds DnsSettingsAttributes) GlueRecords() terra.ListValue[DnsSettingsGlueRecordsAttributes] {
	return terra.ReferenceAsList[DnsSettingsGlueRecordsAttributes](ds.ref.Append("glue_records"))
}

type DnsSettingsCustomDnsAttributes struct {
	ref terra.Reference
}

func (cd DnsSettingsCustomDnsAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd DnsSettingsCustomDnsAttributes) InternalWithRef(ref terra.Reference) DnsSettingsCustomDnsAttributes {
	return DnsSettingsCustomDnsAttributes{ref: ref}
}

func (cd DnsSettingsCustomDnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd DnsSettingsCustomDnsAttributes) NameServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cd.ref.Append("name_servers"))
}

func (cd DnsSettingsCustomDnsAttributes) DsRecords() terra.ListValue[DnsSettingsCustomDnsDsRecordsAttributes] {
	return terra.ReferenceAsList[DnsSettingsCustomDnsDsRecordsAttributes](cd.ref.Append("ds_records"))
}

type DnsSettingsCustomDnsDsRecordsAttributes struct {
	ref terra.Reference
}

func (dr DnsSettingsCustomDnsDsRecordsAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr DnsSettingsCustomDnsDsRecordsAttributes) InternalWithRef(ref terra.Reference) DnsSettingsCustomDnsDsRecordsAttributes {
	return DnsSettingsCustomDnsDsRecordsAttributes{ref: ref}
}

func (dr DnsSettingsCustomDnsDsRecordsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr DnsSettingsCustomDnsDsRecordsAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("algorithm"))
}

func (dr DnsSettingsCustomDnsDsRecordsAttributes) Digest() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("digest"))
}

func (dr DnsSettingsCustomDnsDsRecordsAttributes) DigestType() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("digest_type"))
}

func (dr DnsSettingsCustomDnsDsRecordsAttributes) KeyTag() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("key_tag"))
}

type DnsSettingsGlueRecordsAttributes struct {
	ref terra.Reference
}

func (gr DnsSettingsGlueRecordsAttributes) InternalRef() (terra.Reference, error) {
	return gr.ref, nil
}

func (gr DnsSettingsGlueRecordsAttributes) InternalWithRef(ref terra.Reference) DnsSettingsGlueRecordsAttributes {
	return DnsSettingsGlueRecordsAttributes{ref: ref}
}

func (gr DnsSettingsGlueRecordsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gr.ref.InternalTokens()
}

func (gr DnsSettingsGlueRecordsAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(gr.ref.Append("host_name"))
}

func (gr DnsSettingsGlueRecordsAttributes) Ipv4Addresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gr.ref.Append("ipv4_addresses"))
}

func (gr DnsSettingsGlueRecordsAttributes) Ipv6Addresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gr.ref.Append("ipv6_addresses"))
}

type ManagementSettingsAttributes struct {
	ref terra.Reference
}

func (ms ManagementSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms ManagementSettingsAttributes) InternalWithRef(ref terra.Reference) ManagementSettingsAttributes {
	return ManagementSettingsAttributes{ref: ref}
}

func (ms ManagementSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms ManagementSettingsAttributes) PreferredRenewalMethod() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("preferred_renewal_method"))
}

func (ms ManagementSettingsAttributes) RenewalMethod() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("renewal_method"))
}

func (ms ManagementSettingsAttributes) TransferLockState() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("transfer_lock_state"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type YearlyPriceAttributes struct {
	ref terra.Reference
}

func (yp YearlyPriceAttributes) InternalRef() (terra.Reference, error) {
	return yp.ref, nil
}

func (yp YearlyPriceAttributes) InternalWithRef(ref terra.Reference) YearlyPriceAttributes {
	return YearlyPriceAttributes{ref: ref}
}

func (yp YearlyPriceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return yp.ref.InternalTokens()
}

func (yp YearlyPriceAttributes) CurrencyCode() terra.StringValue {
	return terra.ReferenceAsString(yp.ref.Append("currency_code"))
}

func (yp YearlyPriceAttributes) Units() terra.StringValue {
	return terra.ReferenceAsString(yp.ref.Append("units"))
}

type ContactSettingsState struct {
	Privacy           string                                  `json:"privacy"`
	AdminContact      []ContactSettingsAdminContactState      `json:"admin_contact"`
	RegistrantContact []ContactSettingsRegistrantContactState `json:"registrant_contact"`
	TechnicalContact  []ContactSettingsTechnicalContactState  `json:"technical_contact"`
}

type ContactSettingsAdminContactState struct {
	Email         string                                          `json:"email"`
	FaxNumber     string                                          `json:"fax_number"`
	PhoneNumber   string                                          `json:"phone_number"`
	PostalAddress []ContactSettingsAdminContactPostalAddressState `json:"postal_address"`
}

type ContactSettingsAdminContactPostalAddressState struct {
	AddressLines       []string `json:"address_lines"`
	AdministrativeArea string   `json:"administrative_area"`
	Locality           string   `json:"locality"`
	Organization       string   `json:"organization"`
	PostalCode         string   `json:"postal_code"`
	Recipients         []string `json:"recipients"`
	RegionCode         string   `json:"region_code"`
}

type ContactSettingsRegistrantContactState struct {
	Email         string                                               `json:"email"`
	FaxNumber     string                                               `json:"fax_number"`
	PhoneNumber   string                                               `json:"phone_number"`
	PostalAddress []ContactSettingsRegistrantContactPostalAddressState `json:"postal_address"`
}

type ContactSettingsRegistrantContactPostalAddressState struct {
	AddressLines       []string `json:"address_lines"`
	AdministrativeArea string   `json:"administrative_area"`
	Locality           string   `json:"locality"`
	Organization       string   `json:"organization"`
	PostalCode         string   `json:"postal_code"`
	Recipients         []string `json:"recipients"`
	RegionCode         string   `json:"region_code"`
}

type ContactSettingsTechnicalContactState struct {
	Email         string                                              `json:"email"`
	FaxNumber     string                                              `json:"fax_number"`
	PhoneNumber   string                                              `json:"phone_number"`
	PostalAddress []ContactSettingsTechnicalContactPostalAddressState `json:"postal_address"`
}

type ContactSettingsTechnicalContactPostalAddressState struct {
	AddressLines       []string `json:"address_lines"`
	AdministrativeArea string   `json:"administrative_area"`
	Locality           string   `json:"locality"`
	Organization       string   `json:"organization"`
	PostalCode         string   `json:"postal_code"`
	Recipients         []string `json:"recipients"`
	RegionCode         string   `json:"region_code"`
}

type DnsSettingsState struct {
	CustomDns   []DnsSettingsCustomDnsState   `json:"custom_dns"`
	GlueRecords []DnsSettingsGlueRecordsState `json:"glue_records"`
}

type DnsSettingsCustomDnsState struct {
	NameServers []string                             `json:"name_servers"`
	DsRecords   []DnsSettingsCustomDnsDsRecordsState `json:"ds_records"`
}

type DnsSettingsCustomDnsDsRecordsState struct {
	Algorithm  string  `json:"algorithm"`
	Digest     string  `json:"digest"`
	DigestType string  `json:"digest_type"`
	KeyTag     float64 `json:"key_tag"`
}

type DnsSettingsGlueRecordsState struct {
	HostName      string   `json:"host_name"`
	Ipv4Addresses []string `json:"ipv4_addresses"`
	Ipv6Addresses []string `json:"ipv6_addresses"`
}

type ManagementSettingsState struct {
	PreferredRenewalMethod string `json:"preferred_renewal_method"`
	RenewalMethod          string `json:"renewal_method"`
	TransferLockState      string `json:"transfer_lock_state"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type YearlyPriceState struct {
	CurrencyCode string `json:"currency_code"`
	Units        string `json:"units"`
}
