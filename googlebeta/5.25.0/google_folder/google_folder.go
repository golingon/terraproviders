// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_folder

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_folder.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFolderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gf *Resource) Type() string {
	return "google_folder"
}

// LocalName returns the local name for [Resource].
func (gf *Resource) LocalName() string {
	return gf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gf *Resource) Configuration() interface{} {
	return gf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gf *Resource) Dependencies() terra.Dependencies {
	return gf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gf *Resource) LifecycleManagement() *terra.Lifecycle {
	return gf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gf *Resource) Attributes() googleFolderAttributes {
	return googleFolderAttributes{ref: terra.ReferenceResource(gf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gf *Resource) ImportState(state io.Reader) error {
	gf.state = &googleFolderState{}
	if err := json.NewDecoder(state).Decode(gf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gf.Type(), gf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gf *Resource) State() (*googleFolderState, bool) {
	return gf.state, gf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gf *Resource) StateMust() *googleFolderState {
	if gf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gf.Type(), gf.LocalName()))
	}
	return gf.state
}

// Args contains the configurations for google_folder.
type Args struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFolderAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_folder.
func (gf googleFolderAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("create_time"))
}

// DisplayName returns a reference to field display_name of google_folder.
func (gf googleFolderAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("display_name"))
}

// FolderId returns a reference to field folder_id of google_folder.
func (gf googleFolderAttributes) FolderId() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("folder_id"))
}

// Id returns a reference to field id of google_folder.
func (gf googleFolderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("id"))
}

// LifecycleState returns a reference to field lifecycle_state of google_folder.
func (gf googleFolderAttributes) LifecycleState() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("lifecycle_state"))
}

// Name returns a reference to field name of google_folder.
func (gf googleFolderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("name"))
}

// Parent returns a reference to field parent of google_folder.
func (gf googleFolderAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("parent"))
}

func (gf googleFolderAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gf.ref.Append("timeouts"))
}

type googleFolderState struct {
	CreateTime     string         `json:"create_time"`
	DisplayName    string         `json:"display_name"`
	FolderId       string         `json:"folder_id"`
	Id             string         `json:"id"`
	LifecycleState string         `json:"lifecycle_state"`
	Name           string         `json:"name"`
	Parent         string         `json:"parent"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
