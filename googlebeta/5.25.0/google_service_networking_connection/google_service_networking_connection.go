// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_service_networking_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_service_networking_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *googleServiceNetworkingConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsnc *Resource) Type() string {
	return "google_service_networking_connection"
}

// LocalName returns the local name for [Resource].
func (gsnc *Resource) LocalName() string {
	return gsnc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsnc *Resource) Configuration() interface{} {
	return gsnc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsnc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsnc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsnc *Resource) Dependencies() terra.Dependencies {
	return gsnc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsnc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsnc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsnc *Resource) Attributes() googleServiceNetworkingConnectionAttributes {
	return googleServiceNetworkingConnectionAttributes{ref: terra.ReferenceResource(gsnc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsnc *Resource) ImportState(state io.Reader) error {
	gsnc.state = &googleServiceNetworkingConnectionState{}
	if err := json.NewDecoder(state).Decode(gsnc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsnc.Type(), gsnc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsnc *Resource) State() (*googleServiceNetworkingConnectionState, bool) {
	return gsnc.state, gsnc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsnc *Resource) StateMust() *googleServiceNetworkingConnectionState {
	if gsnc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsnc.Type(), gsnc.LocalName()))
	}
	return gsnc.state
}

// Args contains the configurations for google_service_networking_connection.
type Args struct {
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// ReservedPeeringRanges: list of string, required
	ReservedPeeringRanges terra.ListValue[terra.StringValue] `hcl:"reserved_peering_ranges,attr" validate:"required"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleServiceNetworkingConnectionAttributes struct {
	ref terra.Reference
}

// DeletionPolicy returns a reference to field deletion_policy of google_service_networking_connection.
func (gsnc googleServiceNetworkingConnectionAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(gsnc.ref.Append("deletion_policy"))
}

// Id returns a reference to field id of google_service_networking_connection.
func (gsnc googleServiceNetworkingConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsnc.ref.Append("id"))
}

// Network returns a reference to field network of google_service_networking_connection.
func (gsnc googleServiceNetworkingConnectionAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gsnc.ref.Append("network"))
}

// Peering returns a reference to field peering of google_service_networking_connection.
func (gsnc googleServiceNetworkingConnectionAttributes) Peering() terra.StringValue {
	return terra.ReferenceAsString(gsnc.ref.Append("peering"))
}

// ReservedPeeringRanges returns a reference to field reserved_peering_ranges of google_service_networking_connection.
func (gsnc googleServiceNetworkingConnectionAttributes) ReservedPeeringRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gsnc.ref.Append("reserved_peering_ranges"))
}

// Service returns a reference to field service of google_service_networking_connection.
func (gsnc googleServiceNetworkingConnectionAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(gsnc.ref.Append("service"))
}

func (gsnc googleServiceNetworkingConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsnc.ref.Append("timeouts"))
}

type googleServiceNetworkingConnectionState struct {
	DeletionPolicy        string         `json:"deletion_policy"`
	Id                    string         `json:"id"`
	Network               string         `json:"network"`
	Peering               string         `json:"peering"`
	ReservedPeeringRanges []string       `json:"reserved_peering_ranges"`
	Service               string         `json:"service"`
	Timeouts              *TimeoutsState `json:"timeouts"`
}
