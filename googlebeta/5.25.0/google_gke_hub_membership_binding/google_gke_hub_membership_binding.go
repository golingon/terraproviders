// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_gke_hub_membership_binding

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_gke_hub_membership_binding.
type Resource struct {
	Name      string
	Args      Args
	state     *googleGkeHubMembershipBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gghmb *Resource) Type() string {
	return "google_gke_hub_membership_binding"
}

// LocalName returns the local name for [Resource].
func (gghmb *Resource) LocalName() string {
	return gghmb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gghmb *Resource) Configuration() interface{} {
	return gghmb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gghmb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gghmb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gghmb *Resource) Dependencies() terra.Dependencies {
	return gghmb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gghmb *Resource) LifecycleManagement() *terra.Lifecycle {
	return gghmb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gghmb *Resource) Attributes() googleGkeHubMembershipBindingAttributes {
	return googleGkeHubMembershipBindingAttributes{ref: terra.ReferenceResource(gghmb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gghmb *Resource) ImportState(state io.Reader) error {
	gghmb.state = &googleGkeHubMembershipBindingState{}
	if err := json.NewDecoder(state).Decode(gghmb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gghmb.Type(), gghmb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gghmb *Resource) State() (*googleGkeHubMembershipBindingState, bool) {
	return gghmb.state, gghmb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gghmb *Resource) StateMust() *googleGkeHubMembershipBindingState {
	if gghmb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gghmb.Type(), gghmb.LocalName()))
	}
	return gghmb.state
}

// Args contains the configurations for google_gke_hub_membership_binding.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MembershipBindingId: string, required
	MembershipBindingId terra.StringValue `hcl:"membership_binding_id,attr" validate:"required"`
	// MembershipId: string, required
	MembershipId terra.StringValue `hcl:"membership_id,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleGkeHubMembershipBindingAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_gke_hub_membership_binding.
func (gghmb googleGkeHubMembershipBindingAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gghmb.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_gke_hub_membership_binding.
func (gghmb googleGkeHubMembershipBindingAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(gghmb.ref.Append("delete_time"))
}

// EffectiveLabels returns a reference to field effective_labels of google_gke_hub_membership_binding.
func (gghmb googleGkeHubMembershipBindingAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gghmb.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_gke_hub_membership_binding.
func (gghmb googleGkeHubMembershipBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gghmb.ref.Append("id"))
}

// Labels returns a reference to field labels of google_gke_hub_membership_binding.
func (gghmb googleGkeHubMembershipBindingAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gghmb.ref.Append("labels"))
}

// Location returns a reference to field location of google_gke_hub_membership_binding.
func (gghmb googleGkeHubMembershipBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gghmb.ref.Append("location"))
}

// MembershipBindingId returns a reference to field membership_binding_id of google_gke_hub_membership_binding.
func (gghmb googleGkeHubMembershipBindingAttributes) MembershipBindingId() terra.StringValue {
	return terra.ReferenceAsString(gghmb.ref.Append("membership_binding_id"))
}

// MembershipId returns a reference to field membership_id of google_gke_hub_membership_binding.
func (gghmb googleGkeHubMembershipBindingAttributes) MembershipId() terra.StringValue {
	return terra.ReferenceAsString(gghmb.ref.Append("membership_id"))
}

// Name returns a reference to field name of google_gke_hub_membership_binding.
func (gghmb googleGkeHubMembershipBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gghmb.ref.Append("name"))
}

// Project returns a reference to field project of google_gke_hub_membership_binding.
func (gghmb googleGkeHubMembershipBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gghmb.ref.Append("project"))
}

// Scope returns a reference to field scope of google_gke_hub_membership_binding.
func (gghmb googleGkeHubMembershipBindingAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(gghmb.ref.Append("scope"))
}

// TerraformLabels returns a reference to field terraform_labels of google_gke_hub_membership_binding.
func (gghmb googleGkeHubMembershipBindingAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gghmb.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_gke_hub_membership_binding.
func (gghmb googleGkeHubMembershipBindingAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gghmb.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_gke_hub_membership_binding.
func (gghmb googleGkeHubMembershipBindingAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gghmb.ref.Append("update_time"))
}

func (gghmb googleGkeHubMembershipBindingAttributes) State() terra.ListValue[StateAttributes] {
	return terra.ReferenceAsList[StateAttributes](gghmb.ref.Append("state"))
}

func (gghmb googleGkeHubMembershipBindingAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gghmb.ref.Append("timeouts"))
}

type googleGkeHubMembershipBindingState struct {
	CreateTime          string            `json:"create_time"`
	DeleteTime          string            `json:"delete_time"`
	EffectiveLabels     map[string]string `json:"effective_labels"`
	Id                  string            `json:"id"`
	Labels              map[string]string `json:"labels"`
	Location            string            `json:"location"`
	MembershipBindingId string            `json:"membership_binding_id"`
	MembershipId        string            `json:"membership_id"`
	Name                string            `json:"name"`
	Project             string            `json:"project"`
	Scope               string            `json:"scope"`
	TerraformLabels     map[string]string `json:"terraform_labels"`
	Uid                 string            `json:"uid"`
	UpdateTime          string            `json:"update_time"`
	State               []StateState      `json:"state"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
