// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_tags_tag_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_tags_tag_key.
type Resource struct {
	Name      string
	Args      Args
	state     *googleTagsTagKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gttk *Resource) Type() string {
	return "google_tags_tag_key"
}

// LocalName returns the local name for [Resource].
func (gttk *Resource) LocalName() string {
	return gttk.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gttk *Resource) Configuration() interface{} {
	return gttk.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gttk *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gttk)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gttk *Resource) Dependencies() terra.Dependencies {
	return gttk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gttk *Resource) LifecycleManagement() *terra.Lifecycle {
	return gttk.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gttk *Resource) Attributes() googleTagsTagKeyAttributes {
	return googleTagsTagKeyAttributes{ref: terra.ReferenceResource(gttk)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gttk *Resource) ImportState(state io.Reader) error {
	gttk.state = &googleTagsTagKeyState{}
	if err := json.NewDecoder(state).Decode(gttk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gttk.Type(), gttk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gttk *Resource) State() (*googleTagsTagKeyState, bool) {
	return gttk.state, gttk.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gttk *Resource) StateMust() *googleTagsTagKeyState {
	if gttk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gttk.Type(), gttk.LocalName()))
	}
	return gttk.state
}

// Args contains the configurations for google_tags_tag_key.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// Purpose: string, optional
	Purpose terra.StringValue `hcl:"purpose,attr"`
	// PurposeData: map of string, optional
	PurposeData terra.MapValue[terra.StringValue] `hcl:"purpose_data,attr"`
	// ShortName: string, required
	ShortName terra.StringValue `hcl:"short_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleTagsTagKeyAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_tags_tag_key.
func (gttk googleTagsTagKeyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gttk.ref.Append("create_time"))
}

// Description returns a reference to field description of google_tags_tag_key.
func (gttk googleTagsTagKeyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gttk.ref.Append("description"))
}

// Id returns a reference to field id of google_tags_tag_key.
func (gttk googleTagsTagKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gttk.ref.Append("id"))
}

// Name returns a reference to field name of google_tags_tag_key.
func (gttk googleTagsTagKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gttk.ref.Append("name"))
}

// NamespacedName returns a reference to field namespaced_name of google_tags_tag_key.
func (gttk googleTagsTagKeyAttributes) NamespacedName() terra.StringValue {
	return terra.ReferenceAsString(gttk.ref.Append("namespaced_name"))
}

// Parent returns a reference to field parent of google_tags_tag_key.
func (gttk googleTagsTagKeyAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gttk.ref.Append("parent"))
}

// Purpose returns a reference to field purpose of google_tags_tag_key.
func (gttk googleTagsTagKeyAttributes) Purpose() terra.StringValue {
	return terra.ReferenceAsString(gttk.ref.Append("purpose"))
}

// PurposeData returns a reference to field purpose_data of google_tags_tag_key.
func (gttk googleTagsTagKeyAttributes) PurposeData() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gttk.ref.Append("purpose_data"))
}

// ShortName returns a reference to field short_name of google_tags_tag_key.
func (gttk googleTagsTagKeyAttributes) ShortName() terra.StringValue {
	return terra.ReferenceAsString(gttk.ref.Append("short_name"))
}

// UpdateTime returns a reference to field update_time of google_tags_tag_key.
func (gttk googleTagsTagKeyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gttk.ref.Append("update_time"))
}

func (gttk googleTagsTagKeyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gttk.ref.Append("timeouts"))
}

type googleTagsTagKeyState struct {
	CreateTime     string            `json:"create_time"`
	Description    string            `json:"description"`
	Id             string            `json:"id"`
	Name           string            `json:"name"`
	NamespacedName string            `json:"namespaced_name"`
	Parent         string            `json:"parent"`
	Purpose        string            `json:"purpose"`
	PurposeData    map[string]string `json:"purpose_data"`
	ShortName      string            `json:"short_name"`
	UpdateTime     string            `json:"update_time"`
	Timeouts       *TimeoutsState    `json:"timeouts"`
}
