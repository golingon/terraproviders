// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_analytics_hub_data_exchange

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_analytics_hub_data_exchange.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryAnalyticsHubDataExchangeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbahde *Resource) Type() string {
	return "google_bigquery_analytics_hub_data_exchange"
}

// LocalName returns the local name for [Resource].
func (gbahde *Resource) LocalName() string {
	return gbahde.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbahde *Resource) Configuration() interface{} {
	return gbahde.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbahde *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbahde)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbahde *Resource) Dependencies() terra.Dependencies {
	return gbahde.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbahde *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbahde.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbahde *Resource) Attributes() googleBigqueryAnalyticsHubDataExchangeAttributes {
	return googleBigqueryAnalyticsHubDataExchangeAttributes{ref: terra.ReferenceResource(gbahde)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbahde *Resource) ImportState(state io.Reader) error {
	gbahde.state = &googleBigqueryAnalyticsHubDataExchangeState{}
	if err := json.NewDecoder(state).Decode(gbahde.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbahde.Type(), gbahde.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbahde *Resource) State() (*googleBigqueryAnalyticsHubDataExchangeState, bool) {
	return gbahde.state, gbahde.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbahde *Resource) StateMust() *googleBigqueryAnalyticsHubDataExchangeState {
	if gbahde.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbahde.Type(), gbahde.LocalName()))
	}
	return gbahde.state
}

// Args contains the configurations for google_bigquery_analytics_hub_data_exchange.
type Args struct {
	// DataExchangeId: string, required
	DataExchangeId terra.StringValue `hcl:"data_exchange_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Documentation: string, optional
	Documentation terra.StringValue `hcl:"documentation,attr"`
	// Icon: string, optional
	Icon terra.StringValue `hcl:"icon,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// PrimaryContact: string, optional
	PrimaryContact terra.StringValue `hcl:"primary_contact,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBigqueryAnalyticsHubDataExchangeAttributes struct {
	ref terra.Reference
}

// DataExchangeId returns a reference to field data_exchange_id of google_bigquery_analytics_hub_data_exchange.
func (gbahde googleBigqueryAnalyticsHubDataExchangeAttributes) DataExchangeId() terra.StringValue {
	return terra.ReferenceAsString(gbahde.ref.Append("data_exchange_id"))
}

// Description returns a reference to field description of google_bigquery_analytics_hub_data_exchange.
func (gbahde googleBigqueryAnalyticsHubDataExchangeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gbahde.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_bigquery_analytics_hub_data_exchange.
func (gbahde googleBigqueryAnalyticsHubDataExchangeAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gbahde.ref.Append("display_name"))
}

// Documentation returns a reference to field documentation of google_bigquery_analytics_hub_data_exchange.
func (gbahde googleBigqueryAnalyticsHubDataExchangeAttributes) Documentation() terra.StringValue {
	return terra.ReferenceAsString(gbahde.ref.Append("documentation"))
}

// Icon returns a reference to field icon of google_bigquery_analytics_hub_data_exchange.
func (gbahde googleBigqueryAnalyticsHubDataExchangeAttributes) Icon() terra.StringValue {
	return terra.ReferenceAsString(gbahde.ref.Append("icon"))
}

// Id returns a reference to field id of google_bigquery_analytics_hub_data_exchange.
func (gbahde googleBigqueryAnalyticsHubDataExchangeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbahde.ref.Append("id"))
}

// ListingCount returns a reference to field listing_count of google_bigquery_analytics_hub_data_exchange.
func (gbahde googleBigqueryAnalyticsHubDataExchangeAttributes) ListingCount() terra.NumberValue {
	return terra.ReferenceAsNumber(gbahde.ref.Append("listing_count"))
}

// Location returns a reference to field location of google_bigquery_analytics_hub_data_exchange.
func (gbahde googleBigqueryAnalyticsHubDataExchangeAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbahde.ref.Append("location"))
}

// Name returns a reference to field name of google_bigquery_analytics_hub_data_exchange.
func (gbahde googleBigqueryAnalyticsHubDataExchangeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbahde.ref.Append("name"))
}

// PrimaryContact returns a reference to field primary_contact of google_bigquery_analytics_hub_data_exchange.
func (gbahde googleBigqueryAnalyticsHubDataExchangeAttributes) PrimaryContact() terra.StringValue {
	return terra.ReferenceAsString(gbahde.ref.Append("primary_contact"))
}

// Project returns a reference to field project of google_bigquery_analytics_hub_data_exchange.
func (gbahde googleBigqueryAnalyticsHubDataExchangeAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbahde.ref.Append("project"))
}

func (gbahde googleBigqueryAnalyticsHubDataExchangeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbahde.ref.Append("timeouts"))
}

type googleBigqueryAnalyticsHubDataExchangeState struct {
	DataExchangeId string         `json:"data_exchange_id"`
	Description    string         `json:"description"`
	DisplayName    string         `json:"display_name"`
	Documentation  string         `json:"documentation"`
	Icon           string         `json:"icon"`
	Id             string         `json:"id"`
	ListingCount   float64        `json:"listing_count"`
	Location       string         `json:"location"`
	Name           string         `json:"name"`
	PrimaryContact string         `json:"primary_contact"`
	Project        string         `json:"project"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
