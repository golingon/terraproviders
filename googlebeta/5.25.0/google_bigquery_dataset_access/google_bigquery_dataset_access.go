// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_dataset_access

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_dataset_access.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryDatasetAccessState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbda *Resource) Type() string {
	return "google_bigquery_dataset_access"
}

// LocalName returns the local name for [Resource].
func (gbda *Resource) LocalName() string {
	return gbda.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbda *Resource) Configuration() interface{} {
	return gbda.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbda *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbda)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbda *Resource) Dependencies() terra.Dependencies {
	return gbda.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbda *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbda.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbda *Resource) Attributes() googleBigqueryDatasetAccessAttributes {
	return googleBigqueryDatasetAccessAttributes{ref: terra.ReferenceResource(gbda)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbda *Resource) ImportState(state io.Reader) error {
	gbda.state = &googleBigqueryDatasetAccessState{}
	if err := json.NewDecoder(state).Decode(gbda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbda.Type(), gbda.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbda *Resource) State() (*googleBigqueryDatasetAccessState, bool) {
	return gbda.state, gbda.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbda *Resource) StateMust() *googleBigqueryDatasetAccessState {
	if gbda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbda.Type(), gbda.LocalName()))
	}
	return gbda.state
}

// Args contains the configurations for google_bigquery_dataset_access.
type Args struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// Domain: string, optional
	Domain terra.StringValue `hcl:"domain,attr"`
	// GroupByEmail: string, optional
	GroupByEmail terra.StringValue `hcl:"group_by_email,attr"`
	// IamMember: string, optional
	IamMember terra.StringValue `hcl:"iam_member,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, optional
	Role terra.StringValue `hcl:"role,attr"`
	// SpecialGroup: string, optional
	SpecialGroup terra.StringValue `hcl:"special_group,attr"`
	// UserByEmail: string, optional
	UserByEmail terra.StringValue `hcl:"user_by_email,attr"`
	// Dataset: optional
	Dataset *Dataset `hcl:"dataset,block"`
	// Routine: optional
	Routine *Routine `hcl:"routine,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// View: optional
	View *View `hcl:"view,block"`
}

type googleBigqueryDatasetAccessAttributes struct {
	ref terra.Reference
}

// ApiUpdatedMember returns a reference to field api_updated_member of google_bigquery_dataset_access.
func (gbda googleBigqueryDatasetAccessAttributes) ApiUpdatedMember() terra.BoolValue {
	return terra.ReferenceAsBool(gbda.ref.Append("api_updated_member"))
}

// DatasetId returns a reference to field dataset_id of google_bigquery_dataset_access.
func (gbda googleBigqueryDatasetAccessAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(gbda.ref.Append("dataset_id"))
}

// Domain returns a reference to field domain of google_bigquery_dataset_access.
func (gbda googleBigqueryDatasetAccessAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(gbda.ref.Append("domain"))
}

// GroupByEmail returns a reference to field group_by_email of google_bigquery_dataset_access.
func (gbda googleBigqueryDatasetAccessAttributes) GroupByEmail() terra.StringValue {
	return terra.ReferenceAsString(gbda.ref.Append("group_by_email"))
}

// IamMember returns a reference to field iam_member of google_bigquery_dataset_access.
func (gbda googleBigqueryDatasetAccessAttributes) IamMember() terra.StringValue {
	return terra.ReferenceAsString(gbda.ref.Append("iam_member"))
}

// Id returns a reference to field id of google_bigquery_dataset_access.
func (gbda googleBigqueryDatasetAccessAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbda.ref.Append("id"))
}

// Project returns a reference to field project of google_bigquery_dataset_access.
func (gbda googleBigqueryDatasetAccessAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbda.ref.Append("project"))
}

// Role returns a reference to field role of google_bigquery_dataset_access.
func (gbda googleBigqueryDatasetAccessAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(gbda.ref.Append("role"))
}

// SpecialGroup returns a reference to field special_group of google_bigquery_dataset_access.
func (gbda googleBigqueryDatasetAccessAttributes) SpecialGroup() terra.StringValue {
	return terra.ReferenceAsString(gbda.ref.Append("special_group"))
}

// UserByEmail returns a reference to field user_by_email of google_bigquery_dataset_access.
func (gbda googleBigqueryDatasetAccessAttributes) UserByEmail() terra.StringValue {
	return terra.ReferenceAsString(gbda.ref.Append("user_by_email"))
}

func (gbda googleBigqueryDatasetAccessAttributes) Dataset() terra.ListValue[DatasetAttributes] {
	return terra.ReferenceAsList[DatasetAttributes](gbda.ref.Append("dataset"))
}

func (gbda googleBigqueryDatasetAccessAttributes) Routine() terra.ListValue[RoutineAttributes] {
	return terra.ReferenceAsList[RoutineAttributes](gbda.ref.Append("routine"))
}

func (gbda googleBigqueryDatasetAccessAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbda.ref.Append("timeouts"))
}

func (gbda googleBigqueryDatasetAccessAttributes) View() terra.ListValue[ViewAttributes] {
	return terra.ReferenceAsList[ViewAttributes](gbda.ref.Append("view"))
}

type googleBigqueryDatasetAccessState struct {
	ApiUpdatedMember bool           `json:"api_updated_member"`
	DatasetId        string         `json:"dataset_id"`
	Domain           string         `json:"domain"`
	GroupByEmail     string         `json:"group_by_email"`
	IamMember        string         `json:"iam_member"`
	Id               string         `json:"id"`
	Project          string         `json:"project"`
	Role             string         `json:"role"`
	SpecialGroup     string         `json:"special_group"`
	UserByEmail      string         `json:"user_by_email"`
	Dataset          []DatasetState `json:"dataset"`
	Routine          []RoutineState `json:"routine"`
	Timeouts         *TimeoutsState `json:"timeouts"`
	View             []ViewState    `json:"view"`
}
