// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firebase_android_app

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource google_firebase_android_app.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (gfaa *DataSource) DataSource() string {
	return "google_firebase_android_app"
}

// LocalName returns the local name for [DataSource].
func (gfaa *DataSource) LocalName() string {
	return gfaa.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (gfaa *DataSource) Configuration() interface{} {
	return gfaa.Args
}

// Attributes returns the attributes for [DataSource].
func (gfaa *DataSource) Attributes() dataGoogleFirebaseAndroidAppAttributes {
	return dataGoogleFirebaseAndroidAppAttributes{ref: terra.ReferenceDataSource(gfaa)}
}

// DataArgs contains the configurations for google_firebase_android_app.
type DataArgs struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}

type dataGoogleFirebaseAndroidAppAttributes struct {
	ref terra.Reference
}

// ApiKeyId returns a reference to field api_key_id of google_firebase_android_app.
func (gfaa dataGoogleFirebaseAndroidAppAttributes) ApiKeyId() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("api_key_id"))
}

// AppId returns a reference to field app_id of google_firebase_android_app.
func (gfaa dataGoogleFirebaseAndroidAppAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("app_id"))
}

// DeletionPolicy returns a reference to field deletion_policy of google_firebase_android_app.
func (gfaa dataGoogleFirebaseAndroidAppAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("deletion_policy"))
}

// DisplayName returns a reference to field display_name of google_firebase_android_app.
func (gfaa dataGoogleFirebaseAndroidAppAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("display_name"))
}

// Etag returns a reference to field etag of google_firebase_android_app.
func (gfaa dataGoogleFirebaseAndroidAppAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("etag"))
}

// Id returns a reference to field id of google_firebase_android_app.
func (gfaa dataGoogleFirebaseAndroidAppAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("id"))
}

// Name returns a reference to field name of google_firebase_android_app.
func (gfaa dataGoogleFirebaseAndroidAppAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("name"))
}

// PackageName returns a reference to field package_name of google_firebase_android_app.
func (gfaa dataGoogleFirebaseAndroidAppAttributes) PackageName() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("package_name"))
}

// Project returns a reference to field project of google_firebase_android_app.
func (gfaa dataGoogleFirebaseAndroidAppAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("project"))
}

// Sha1Hashes returns a reference to field sha1_hashes of google_firebase_android_app.
func (gfaa dataGoogleFirebaseAndroidAppAttributes) Sha1Hashes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gfaa.ref.Append("sha1_hashes"))
}

// Sha256Hashes returns a reference to field sha256_hashes of google_firebase_android_app.
func (gfaa dataGoogleFirebaseAndroidAppAttributes) Sha256Hashes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gfaa.ref.Append("sha256_hashes"))
}
