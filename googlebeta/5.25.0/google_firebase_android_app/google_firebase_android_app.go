// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firebase_android_app

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firebase_android_app.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirebaseAndroidAppState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfaa *Resource) Type() string {
	return "google_firebase_android_app"
}

// LocalName returns the local name for [Resource].
func (gfaa *Resource) LocalName() string {
	return gfaa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfaa *Resource) Configuration() interface{} {
	return gfaa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfaa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfaa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfaa *Resource) Dependencies() terra.Dependencies {
	return gfaa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfaa *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfaa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfaa *Resource) Attributes() googleFirebaseAndroidAppAttributes {
	return googleFirebaseAndroidAppAttributes{ref: terra.ReferenceResource(gfaa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfaa *Resource) ImportState(state io.Reader) error {
	gfaa.state = &googleFirebaseAndroidAppState{}
	if err := json.NewDecoder(state).Decode(gfaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfaa.Type(), gfaa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfaa *Resource) State() (*googleFirebaseAndroidAppState, bool) {
	return gfaa.state, gfaa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfaa *Resource) StateMust() *googleFirebaseAndroidAppState {
	if gfaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfaa.Type(), gfaa.LocalName()))
	}
	return gfaa.state
}

// Args contains the configurations for google_firebase_android_app.
type Args struct {
	// ApiKeyId: string, optional
	ApiKeyId terra.StringValue `hcl:"api_key_id,attr"`
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PackageName: string, required
	PackageName terra.StringValue `hcl:"package_name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Sha1Hashes: list of string, optional
	Sha1Hashes terra.ListValue[terra.StringValue] `hcl:"sha1_hashes,attr"`
	// Sha256Hashes: list of string, optional
	Sha256Hashes terra.ListValue[terra.StringValue] `hcl:"sha256_hashes,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirebaseAndroidAppAttributes struct {
	ref terra.Reference
}

// ApiKeyId returns a reference to field api_key_id of google_firebase_android_app.
func (gfaa googleFirebaseAndroidAppAttributes) ApiKeyId() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("api_key_id"))
}

// AppId returns a reference to field app_id of google_firebase_android_app.
func (gfaa googleFirebaseAndroidAppAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("app_id"))
}

// DeletionPolicy returns a reference to field deletion_policy of google_firebase_android_app.
func (gfaa googleFirebaseAndroidAppAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("deletion_policy"))
}

// DisplayName returns a reference to field display_name of google_firebase_android_app.
func (gfaa googleFirebaseAndroidAppAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("display_name"))
}

// Etag returns a reference to field etag of google_firebase_android_app.
func (gfaa googleFirebaseAndroidAppAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("etag"))
}

// Id returns a reference to field id of google_firebase_android_app.
func (gfaa googleFirebaseAndroidAppAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("id"))
}

// Name returns a reference to field name of google_firebase_android_app.
func (gfaa googleFirebaseAndroidAppAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("name"))
}

// PackageName returns a reference to field package_name of google_firebase_android_app.
func (gfaa googleFirebaseAndroidAppAttributes) PackageName() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("package_name"))
}

// Project returns a reference to field project of google_firebase_android_app.
func (gfaa googleFirebaseAndroidAppAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("project"))
}

// Sha1Hashes returns a reference to field sha1_hashes of google_firebase_android_app.
func (gfaa googleFirebaseAndroidAppAttributes) Sha1Hashes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gfaa.ref.Append("sha1_hashes"))
}

// Sha256Hashes returns a reference to field sha256_hashes of google_firebase_android_app.
func (gfaa googleFirebaseAndroidAppAttributes) Sha256Hashes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gfaa.ref.Append("sha256_hashes"))
}

func (gfaa googleFirebaseAndroidAppAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfaa.ref.Append("timeouts"))
}

type googleFirebaseAndroidAppState struct {
	ApiKeyId       string         `json:"api_key_id"`
	AppId          string         `json:"app_id"`
	DeletionPolicy string         `json:"deletion_policy"`
	DisplayName    string         `json:"display_name"`
	Etag           string         `json:"etag"`
	Id             string         `json:"id"`
	Name           string         `json:"name"`
	PackageName    string         `json:"package_name"`
	Project        string         `json:"project"`
	Sha1Hashes     []string       `json:"sha1_hashes"`
	Sha256Hashes   []string       `json:"sha256_hashes"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
