// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_app_engine_standard_app_version

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_app_engine_standard_app_version.
type Resource struct {
	Name      string
	Args      Args
	state     *googleAppEngineStandardAppVersionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gaesav *Resource) Type() string {
	return "google_app_engine_standard_app_version"
}

// LocalName returns the local name for [Resource].
func (gaesav *Resource) LocalName() string {
	return gaesav.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gaesav *Resource) Configuration() interface{} {
	return gaesav.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gaesav *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gaesav)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gaesav *Resource) Dependencies() terra.Dependencies {
	return gaesav.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gaesav *Resource) LifecycleManagement() *terra.Lifecycle {
	return gaesav.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gaesav *Resource) Attributes() googleAppEngineStandardAppVersionAttributes {
	return googleAppEngineStandardAppVersionAttributes{ref: terra.ReferenceResource(gaesav)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gaesav *Resource) ImportState(state io.Reader) error {
	gaesav.state = &googleAppEngineStandardAppVersionState{}
	if err := json.NewDecoder(state).Decode(gaesav.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gaesav.Type(), gaesav.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gaesav *Resource) State() (*googleAppEngineStandardAppVersionState, bool) {
	return gaesav.state, gaesav.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gaesav *Resource) StateMust() *googleAppEngineStandardAppVersionState {
	if gaesav.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gaesav.Type(), gaesav.LocalName()))
	}
	return gaesav.state
}

// Args contains the configurations for google_app_engine_standard_app_version.
type Args struct {
	// AppEngineApis: bool, optional
	AppEngineApis terra.BoolValue `hcl:"app_engine_apis,attr"`
	// DeleteServiceOnDestroy: bool, optional
	DeleteServiceOnDestroy terra.BoolValue `hcl:"delete_service_on_destroy,attr"`
	// EnvVariables: map of string, optional
	EnvVariables terra.MapValue[terra.StringValue] `hcl:"env_variables,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InboundServices: set of string, optional
	InboundServices terra.SetValue[terra.StringValue] `hcl:"inbound_services,attr"`
	// InstanceClass: string, optional
	InstanceClass terra.StringValue `hcl:"instance_class,attr"`
	// NoopOnDestroy: bool, optional
	NoopOnDestroy terra.BoolValue `hcl:"noop_on_destroy,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Runtime: string, required
	Runtime terra.StringValue `hcl:"runtime,attr" validate:"required"`
	// RuntimeApiVersion: string, optional
	RuntimeApiVersion terra.StringValue `hcl:"runtime_api_version,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// Threadsafe: bool, optional
	Threadsafe terra.BoolValue `hcl:"threadsafe,attr"`
	// VersionId: string, optional
	VersionId terra.StringValue `hcl:"version_id,attr"`
	// AutomaticScaling: optional
	AutomaticScaling *AutomaticScaling `hcl:"automatic_scaling,block"`
	// BasicScaling: optional
	BasicScaling *BasicScaling `hcl:"basic_scaling,block"`
	// Deployment: required
	Deployment *Deployment `hcl:"deployment,block" validate:"required"`
	// Entrypoint: required
	Entrypoint *Entrypoint `hcl:"entrypoint,block" validate:"required"`
	// Handlers: min=0
	Handlers []Handlers `hcl:"handlers,block" validate:"min=0"`
	// Libraries: min=0
	Libraries []Libraries `hcl:"libraries,block" validate:"min=0"`
	// ManualScaling: optional
	ManualScaling *ManualScaling `hcl:"manual_scaling,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcAccessConnector: optional
	VpcAccessConnector *VpcAccessConnector `hcl:"vpc_access_connector,block"`
}

type googleAppEngineStandardAppVersionAttributes struct {
	ref terra.Reference
}

// AppEngineApis returns a reference to field app_engine_apis of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) AppEngineApis() terra.BoolValue {
	return terra.ReferenceAsBool(gaesav.ref.Append("app_engine_apis"))
}

// DeleteServiceOnDestroy returns a reference to field delete_service_on_destroy of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) DeleteServiceOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(gaesav.ref.Append("delete_service_on_destroy"))
}

// EnvVariables returns a reference to field env_variables of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) EnvVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gaesav.ref.Append("env_variables"))
}

// Id returns a reference to field id of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gaesav.ref.Append("id"))
}

// InboundServices returns a reference to field inbound_services of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) InboundServices() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gaesav.ref.Append("inbound_services"))
}

// InstanceClass returns a reference to field instance_class of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) InstanceClass() terra.StringValue {
	return terra.ReferenceAsString(gaesav.ref.Append("instance_class"))
}

// Name returns a reference to field name of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gaesav.ref.Append("name"))
}

// NoopOnDestroy returns a reference to field noop_on_destroy of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) NoopOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(gaesav.ref.Append("noop_on_destroy"))
}

// Project returns a reference to field project of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gaesav.ref.Append("project"))
}

// Runtime returns a reference to field runtime of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) Runtime() terra.StringValue {
	return terra.ReferenceAsString(gaesav.ref.Append("runtime"))
}

// RuntimeApiVersion returns a reference to field runtime_api_version of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) RuntimeApiVersion() terra.StringValue {
	return terra.ReferenceAsString(gaesav.ref.Append("runtime_api_version"))
}

// Service returns a reference to field service of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(gaesav.ref.Append("service"))
}

// ServiceAccount returns a reference to field service_account of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(gaesav.ref.Append("service_account"))
}

// Threadsafe returns a reference to field threadsafe of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) Threadsafe() terra.BoolValue {
	return terra.ReferenceAsBool(gaesav.ref.Append("threadsafe"))
}

// VersionId returns a reference to field version_id of google_app_engine_standard_app_version.
func (gaesav googleAppEngineStandardAppVersionAttributes) VersionId() terra.StringValue {
	return terra.ReferenceAsString(gaesav.ref.Append("version_id"))
}

func (gaesav googleAppEngineStandardAppVersionAttributes) AutomaticScaling() terra.ListValue[AutomaticScalingAttributes] {
	return terra.ReferenceAsList[AutomaticScalingAttributes](gaesav.ref.Append("automatic_scaling"))
}

func (gaesav googleAppEngineStandardAppVersionAttributes) BasicScaling() terra.ListValue[BasicScalingAttributes] {
	return terra.ReferenceAsList[BasicScalingAttributes](gaesav.ref.Append("basic_scaling"))
}

func (gaesav googleAppEngineStandardAppVersionAttributes) Deployment() terra.ListValue[DeploymentAttributes] {
	return terra.ReferenceAsList[DeploymentAttributes](gaesav.ref.Append("deployment"))
}

func (gaesav googleAppEngineStandardAppVersionAttributes) Entrypoint() terra.ListValue[EntrypointAttributes] {
	return terra.ReferenceAsList[EntrypointAttributes](gaesav.ref.Append("entrypoint"))
}

func (gaesav googleAppEngineStandardAppVersionAttributes) Handlers() terra.ListValue[HandlersAttributes] {
	return terra.ReferenceAsList[HandlersAttributes](gaesav.ref.Append("handlers"))
}

func (gaesav googleAppEngineStandardAppVersionAttributes) Libraries() terra.ListValue[LibrariesAttributes] {
	return terra.ReferenceAsList[LibrariesAttributes](gaesav.ref.Append("libraries"))
}

func (gaesav googleAppEngineStandardAppVersionAttributes) ManualScaling() terra.ListValue[ManualScalingAttributes] {
	return terra.ReferenceAsList[ManualScalingAttributes](gaesav.ref.Append("manual_scaling"))
}

func (gaesav googleAppEngineStandardAppVersionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gaesav.ref.Append("timeouts"))
}

func (gaesav googleAppEngineStandardAppVersionAttributes) VpcAccessConnector() terra.ListValue[VpcAccessConnectorAttributes] {
	return terra.ReferenceAsList[VpcAccessConnectorAttributes](gaesav.ref.Append("vpc_access_connector"))
}

type googleAppEngineStandardAppVersionState struct {
	AppEngineApis          bool                      `json:"app_engine_apis"`
	DeleteServiceOnDestroy bool                      `json:"delete_service_on_destroy"`
	EnvVariables           map[string]string         `json:"env_variables"`
	Id                     string                    `json:"id"`
	InboundServices        []string                  `json:"inbound_services"`
	InstanceClass          string                    `json:"instance_class"`
	Name                   string                    `json:"name"`
	NoopOnDestroy          bool                      `json:"noop_on_destroy"`
	Project                string                    `json:"project"`
	Runtime                string                    `json:"runtime"`
	RuntimeApiVersion      string                    `json:"runtime_api_version"`
	Service                string                    `json:"service"`
	ServiceAccount         string                    `json:"service_account"`
	Threadsafe             bool                      `json:"threadsafe"`
	VersionId              string                    `json:"version_id"`
	AutomaticScaling       []AutomaticScalingState   `json:"automatic_scaling"`
	BasicScaling           []BasicScalingState       `json:"basic_scaling"`
	Deployment             []DeploymentState         `json:"deployment"`
	Entrypoint             []EntrypointState         `json:"entrypoint"`
	Handlers               []HandlersState           `json:"handlers"`
	Libraries              []LibrariesState          `json:"libraries"`
	ManualScaling          []ManualScalingState      `json:"manual_scaling"`
	Timeouts               *TimeoutsState            `json:"timeouts"`
	VpcAccessConnector     []VpcAccessConnectorState `json:"vpc_access_connector"`
}
