// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloudbuild_trigger

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ApprovalConfig struct {
	// ApprovalRequired: bool, optional
	ApprovalRequired terra.BoolValue `hcl:"approval_required,attr"`
}

type BitbucketServerTriggerConfig struct {
	// BitbucketServerConfigResource: string, required
	BitbucketServerConfigResource terra.StringValue `hcl:"bitbucket_server_config_resource,attr" validate:"required"`
	// ProjectKey: string, required
	ProjectKey terra.StringValue `hcl:"project_key,attr" validate:"required"`
	// RepoSlug: string, required
	RepoSlug terra.StringValue `hcl:"repo_slug,attr" validate:"required"`
	// BitbucketServerTriggerConfigPullRequest: optional
	PullRequest *BitbucketServerTriggerConfigPullRequest `hcl:"pull_request,block"`
	// BitbucketServerTriggerConfigPush: optional
	Push *BitbucketServerTriggerConfigPush `hcl:"push,block"`
}

type BitbucketServerTriggerConfigPullRequest struct {
	// Branch: string, required
	Branch terra.StringValue `hcl:"branch,attr" validate:"required"`
	// CommentControl: string, optional
	CommentControl terra.StringValue `hcl:"comment_control,attr"`
	// InvertRegex: bool, optional
	InvertRegex terra.BoolValue `hcl:"invert_regex,attr"`
}

type BitbucketServerTriggerConfigPush struct {
	// Branch: string, optional
	Branch terra.StringValue `hcl:"branch,attr"`
	// InvertRegex: bool, optional
	InvertRegex terra.BoolValue `hcl:"invert_regex,attr"`
	// Tag: string, optional
	Tag terra.StringValue `hcl:"tag,attr"`
}

type Build struct {
	// Images: list of string, optional
	Images terra.ListValue[terra.StringValue] `hcl:"images,attr"`
	// LogsBucket: string, optional
	LogsBucket terra.StringValue `hcl:"logs_bucket,attr"`
	// QueueTtl: string, optional
	QueueTtl terra.StringValue `hcl:"queue_ttl,attr"`
	// Substitutions: map of string, optional
	Substitutions terra.MapValue[terra.StringValue] `hcl:"substitutions,attr"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeout: string, optional
	Timeout terra.StringValue `hcl:"timeout,attr"`
	// BuildArtifacts: optional
	Artifacts *BuildArtifacts `hcl:"artifacts,block"`
	// BuildAvailableSecrets: optional
	AvailableSecrets *BuildAvailableSecrets `hcl:"available_secrets,block"`
	// BuildOptions: optional
	Options *BuildOptions `hcl:"options,block"`
	// BuildSecret: min=0
	Secret []BuildSecret `hcl:"secret,block" validate:"min=0"`
	// BuildSource: optional
	Source *BuildSource `hcl:"source,block"`
	// BuildStep: min=1
	Step []BuildStep `hcl:"step,block" validate:"min=1"`
}

type BuildArtifacts struct {
	// Images: list of string, optional
	Images terra.ListValue[terra.StringValue] `hcl:"images,attr"`
	// BuildArtifactsMavenArtifacts: min=0
	MavenArtifacts []BuildArtifactsMavenArtifacts `hcl:"maven_artifacts,block" validate:"min=0"`
	// BuildArtifactsNpmPackages: min=0
	NpmPackages []BuildArtifactsNpmPackages `hcl:"npm_packages,block" validate:"min=0"`
	// BuildArtifactsObjects: optional
	Objects *BuildArtifactsObjects `hcl:"objects,block"`
	// BuildArtifactsPythonPackages: min=0
	PythonPackages []BuildArtifactsPythonPackages `hcl:"python_packages,block" validate:"min=0"`
}

type BuildArtifactsMavenArtifacts struct {
	// ArtifactId: string, optional
	ArtifactId terra.StringValue `hcl:"artifact_id,attr"`
	// GroupId: string, optional
	GroupId terra.StringValue `hcl:"group_id,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Repository: string, optional
	Repository terra.StringValue `hcl:"repository,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type BuildArtifactsNpmPackages struct {
	// PackagePath: string, optional
	PackagePath terra.StringValue `hcl:"package_path,attr"`
	// Repository: string, optional
	Repository terra.StringValue `hcl:"repository,attr"`
}

type BuildArtifactsObjects struct {
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Paths: list of string, optional
	Paths terra.ListValue[terra.StringValue] `hcl:"paths,attr"`
}

type BuildArtifactsPythonPackages struct {
	// Paths: list of string, optional
	Paths terra.ListValue[terra.StringValue] `hcl:"paths,attr"`
	// Repository: string, optional
	Repository terra.StringValue `hcl:"repository,attr"`
}

type BuildAvailableSecrets struct {
	// BuildAvailableSecretsSecretManager: min=1
	SecretManager []BuildAvailableSecretsSecretManager `hcl:"secret_manager,block" validate:"min=1"`
}

type BuildAvailableSecretsSecretManager struct {
	// Env: string, required
	Env terra.StringValue `hcl:"env,attr" validate:"required"`
	// VersionName: string, required
	VersionName terra.StringValue `hcl:"version_name,attr" validate:"required"`
}

type BuildOptions struct {
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// DynamicSubstitutions: bool, optional
	DynamicSubstitutions terra.BoolValue `hcl:"dynamic_substitutions,attr"`
	// Env: list of string, optional
	Env terra.ListValue[terra.StringValue] `hcl:"env,attr"`
	// LogStreamingOption: string, optional
	LogStreamingOption terra.StringValue `hcl:"log_streaming_option,attr"`
	// Logging: string, optional
	Logging terra.StringValue `hcl:"logging,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// RequestedVerifyOption: string, optional
	RequestedVerifyOption terra.StringValue `hcl:"requested_verify_option,attr"`
	// SecretEnv: list of string, optional
	SecretEnv terra.ListValue[terra.StringValue] `hcl:"secret_env,attr"`
	// SourceProvenanceHash: list of string, optional
	SourceProvenanceHash terra.ListValue[terra.StringValue] `hcl:"source_provenance_hash,attr"`
	// SubstitutionOption: string, optional
	SubstitutionOption terra.StringValue `hcl:"substitution_option,attr"`
	// WorkerPool: string, optional
	WorkerPool terra.StringValue `hcl:"worker_pool,attr"`
	// BuildOptionsVolumes: min=0
	Volumes []BuildOptionsVolumes `hcl:"volumes,block" validate:"min=0"`
}

type BuildOptionsVolumes struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
}

type BuildSecret struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
	// SecretEnv: map of string, optional
	SecretEnv terra.MapValue[terra.StringValue] `hcl:"secret_env,attr"`
}

type BuildSource struct {
	// BuildSourceRepoSource: optional
	RepoSource *BuildSourceRepoSource `hcl:"repo_source,block"`
	// BuildSourceStorageSource: optional
	StorageSource *BuildSourceStorageSource `hcl:"storage_source,block"`
}

type BuildSourceRepoSource struct {
	// BranchName: string, optional
	BranchName terra.StringValue `hcl:"branch_name,attr"`
	// CommitSha: string, optional
	CommitSha terra.StringValue `hcl:"commit_sha,attr"`
	// Dir: string, optional
	Dir terra.StringValue `hcl:"dir,attr"`
	// InvertRegex: bool, optional
	InvertRegex terra.BoolValue `hcl:"invert_regex,attr"`
	// ProjectId: string, optional
	ProjectId terra.StringValue `hcl:"project_id,attr"`
	// RepoName: string, required
	RepoName terra.StringValue `hcl:"repo_name,attr" validate:"required"`
	// Substitutions: map of string, optional
	Substitutions terra.MapValue[terra.StringValue] `hcl:"substitutions,attr"`
	// TagName: string, optional
	TagName terra.StringValue `hcl:"tag_name,attr"`
}

type BuildSourceStorageSource struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Generation: string, optional
	Generation terra.StringValue `hcl:"generation,attr"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type BuildStep struct {
	// AllowExitCodes: list of number, optional
	AllowExitCodes terra.ListValue[terra.NumberValue] `hcl:"allow_exit_codes,attr"`
	// AllowFailure: bool, optional
	AllowFailure terra.BoolValue `hcl:"allow_failure,attr"`
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Dir: string, optional
	Dir terra.StringValue `hcl:"dir,attr"`
	// Entrypoint: string, optional
	Entrypoint terra.StringValue `hcl:"entrypoint,attr"`
	// Env: list of string, optional
	Env terra.ListValue[terra.StringValue] `hcl:"env,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Script: string, optional
	Script terra.StringValue `hcl:"script,attr"`
	// SecretEnv: list of string, optional
	SecretEnv terra.ListValue[terra.StringValue] `hcl:"secret_env,attr"`
	// Timeout: string, optional
	Timeout terra.StringValue `hcl:"timeout,attr"`
	// Timing: string, optional
	Timing terra.StringValue `hcl:"timing,attr"`
	// WaitFor: list of string, optional
	WaitFor terra.ListValue[terra.StringValue] `hcl:"wait_for,attr"`
	// BuildStepVolumes: min=0
	Volumes []BuildStepVolumes `hcl:"volumes,block" validate:"min=0"`
}

type BuildStepVolumes struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type GitFileSource struct {
	// BitbucketServerConfig: string, optional
	BitbucketServerConfig terra.StringValue `hcl:"bitbucket_server_config,attr"`
	// GithubEnterpriseConfig: string, optional
	GithubEnterpriseConfig terra.StringValue `hcl:"github_enterprise_config,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// RepoType: string, required
	RepoType terra.StringValue `hcl:"repo_type,attr" validate:"required"`
	// Repository: string, optional
	Repository terra.StringValue `hcl:"repository,attr"`
	// Revision: string, optional
	Revision terra.StringValue `hcl:"revision,attr"`
	// Uri: string, optional
	Uri terra.StringValue `hcl:"uri,attr"`
}

type Github struct {
	// EnterpriseConfigResourceName: string, optional
	EnterpriseConfigResourceName terra.StringValue `hcl:"enterprise_config_resource_name,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Owner: string, optional
	Owner terra.StringValue `hcl:"owner,attr"`
	// GithubPullRequest: optional
	PullRequest *GithubPullRequest `hcl:"pull_request,block"`
	// GithubPush: optional
	Push *GithubPush `hcl:"push,block"`
}

type GithubPullRequest struct {
	// Branch: string, required
	Branch terra.StringValue `hcl:"branch,attr" validate:"required"`
	// CommentControl: string, optional
	CommentControl terra.StringValue `hcl:"comment_control,attr"`
	// InvertRegex: bool, optional
	InvertRegex terra.BoolValue `hcl:"invert_regex,attr"`
}

type GithubPush struct {
	// Branch: string, optional
	Branch terra.StringValue `hcl:"branch,attr"`
	// InvertRegex: bool, optional
	InvertRegex terra.BoolValue `hcl:"invert_regex,attr"`
	// Tag: string, optional
	Tag terra.StringValue `hcl:"tag,attr"`
}

type PubsubConfig struct {
	// ServiceAccountEmail: string, optional
	ServiceAccountEmail terra.StringValue `hcl:"service_account_email,attr"`
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
}

type RepositoryEventConfig struct {
	// Repository: string, optional
	Repository terra.StringValue `hcl:"repository,attr"`
	// RepositoryEventConfigPullRequest: optional
	PullRequest *RepositoryEventConfigPullRequest `hcl:"pull_request,block"`
	// RepositoryEventConfigPush: optional
	Push *RepositoryEventConfigPush `hcl:"push,block"`
}

type RepositoryEventConfigPullRequest struct {
	// Branch: string, optional
	Branch terra.StringValue `hcl:"branch,attr"`
	// CommentControl: string, optional
	CommentControl terra.StringValue `hcl:"comment_control,attr"`
	// InvertRegex: bool, optional
	InvertRegex terra.BoolValue `hcl:"invert_regex,attr"`
}

type RepositoryEventConfigPush struct {
	// Branch: string, optional
	Branch terra.StringValue `hcl:"branch,attr"`
	// InvertRegex: bool, optional
	InvertRegex terra.BoolValue `hcl:"invert_regex,attr"`
	// Tag: string, optional
	Tag terra.StringValue `hcl:"tag,attr"`
}

type SourceToBuild struct {
	// BitbucketServerConfig: string, optional
	BitbucketServerConfig terra.StringValue `hcl:"bitbucket_server_config,attr"`
	// GithubEnterpriseConfig: string, optional
	GithubEnterpriseConfig terra.StringValue `hcl:"github_enterprise_config,attr"`
	// Ref: string, required
	Ref terra.StringValue `hcl:"ref,attr" validate:"required"`
	// RepoType: string, required
	RepoType terra.StringValue `hcl:"repo_type,attr" validate:"required"`
	// Repository: string, optional
	Repository terra.StringValue `hcl:"repository,attr"`
	// Uri: string, optional
	Uri terra.StringValue `hcl:"uri,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type TriggerTemplate struct {
	// BranchName: string, optional
	BranchName terra.StringValue `hcl:"branch_name,attr"`
	// CommitSha: string, optional
	CommitSha terra.StringValue `hcl:"commit_sha,attr"`
	// Dir: string, optional
	Dir terra.StringValue `hcl:"dir,attr"`
	// InvertRegex: bool, optional
	InvertRegex terra.BoolValue `hcl:"invert_regex,attr"`
	// ProjectId: string, optional
	ProjectId terra.StringValue `hcl:"project_id,attr"`
	// RepoName: string, optional
	RepoName terra.StringValue `hcl:"repo_name,attr"`
	// TagName: string, optional
	TagName terra.StringValue `hcl:"tag_name,attr"`
}

type WebhookConfig struct {
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
}

type ApprovalConfigAttributes struct {
	ref terra.Reference
}

func (ac ApprovalConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac ApprovalConfigAttributes) InternalWithRef(ref terra.Reference) ApprovalConfigAttributes {
	return ApprovalConfigAttributes{ref: ref}
}

func (ac ApprovalConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac ApprovalConfigAttributes) ApprovalRequired() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("approval_required"))
}

type BitbucketServerTriggerConfigAttributes struct {
	ref terra.Reference
}

func (bstc BitbucketServerTriggerConfigAttributes) InternalRef() (terra.Reference, error) {
	return bstc.ref, nil
}

func (bstc BitbucketServerTriggerConfigAttributes) InternalWithRef(ref terra.Reference) BitbucketServerTriggerConfigAttributes {
	return BitbucketServerTriggerConfigAttributes{ref: ref}
}

func (bstc BitbucketServerTriggerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bstc.ref.InternalTokens()
}

func (bstc BitbucketServerTriggerConfigAttributes) BitbucketServerConfigResource() terra.StringValue {
	return terra.ReferenceAsString(bstc.ref.Append("bitbucket_server_config_resource"))
}

func (bstc BitbucketServerTriggerConfigAttributes) ProjectKey() terra.StringValue {
	return terra.ReferenceAsString(bstc.ref.Append("project_key"))
}

func (bstc BitbucketServerTriggerConfigAttributes) RepoSlug() terra.StringValue {
	return terra.ReferenceAsString(bstc.ref.Append("repo_slug"))
}

func (bstc BitbucketServerTriggerConfigAttributes) PullRequest() terra.ListValue[BitbucketServerTriggerConfigPullRequestAttributes] {
	return terra.ReferenceAsList[BitbucketServerTriggerConfigPullRequestAttributes](bstc.ref.Append("pull_request"))
}

func (bstc BitbucketServerTriggerConfigAttributes) Push() terra.ListValue[BitbucketServerTriggerConfigPushAttributes] {
	return terra.ReferenceAsList[BitbucketServerTriggerConfigPushAttributes](bstc.ref.Append("push"))
}

type BitbucketServerTriggerConfigPullRequestAttributes struct {
	ref terra.Reference
}

func (pr BitbucketServerTriggerConfigPullRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr BitbucketServerTriggerConfigPullRequestAttributes) InternalWithRef(ref terra.Reference) BitbucketServerTriggerConfigPullRequestAttributes {
	return BitbucketServerTriggerConfigPullRequestAttributes{ref: ref}
}

func (pr BitbucketServerTriggerConfigPullRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr BitbucketServerTriggerConfigPullRequestAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("branch"))
}

func (pr BitbucketServerTriggerConfigPullRequestAttributes) CommentControl() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("comment_control"))
}

func (pr BitbucketServerTriggerConfigPullRequestAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(pr.ref.Append("invert_regex"))
}

type BitbucketServerTriggerConfigPushAttributes struct {
	ref terra.Reference
}

func (p BitbucketServerTriggerConfigPushAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p BitbucketServerTriggerConfigPushAttributes) InternalWithRef(ref terra.Reference) BitbucketServerTriggerConfigPushAttributes {
	return BitbucketServerTriggerConfigPushAttributes{ref: ref}
}

func (p BitbucketServerTriggerConfigPushAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p BitbucketServerTriggerConfigPushAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("branch"))
}

func (p BitbucketServerTriggerConfigPushAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("invert_regex"))
}

func (p BitbucketServerTriggerConfigPushAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("tag"))
}

type BuildAttributes struct {
	ref terra.Reference
}

func (b BuildAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BuildAttributes) InternalWithRef(ref terra.Reference) BuildAttributes {
	return BuildAttributes{ref: ref}
}

func (b BuildAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BuildAttributes) Images() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](b.ref.Append("images"))
}

func (b BuildAttributes) LogsBucket() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("logs_bucket"))
}

func (b BuildAttributes) QueueTtl() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("queue_ttl"))
}

func (b BuildAttributes) Substitutions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](b.ref.Append("substitutions"))
}

func (b BuildAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](b.ref.Append("tags"))
}

func (b BuildAttributes) Timeout() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("timeout"))
}

func (b BuildAttributes) Artifacts() terra.ListValue[BuildArtifactsAttributes] {
	return terra.ReferenceAsList[BuildArtifactsAttributes](b.ref.Append("artifacts"))
}

func (b BuildAttributes) AvailableSecrets() terra.ListValue[BuildAvailableSecretsAttributes] {
	return terra.ReferenceAsList[BuildAvailableSecretsAttributes](b.ref.Append("available_secrets"))
}

func (b BuildAttributes) Options() terra.ListValue[BuildOptionsAttributes] {
	return terra.ReferenceAsList[BuildOptionsAttributes](b.ref.Append("options"))
}

func (b BuildAttributes) Secret() terra.ListValue[BuildSecretAttributes] {
	return terra.ReferenceAsList[BuildSecretAttributes](b.ref.Append("secret"))
}

func (b BuildAttributes) Source() terra.ListValue[BuildSourceAttributes] {
	return terra.ReferenceAsList[BuildSourceAttributes](b.ref.Append("source"))
}

func (b BuildAttributes) Step() terra.ListValue[BuildStepAttributes] {
	return terra.ReferenceAsList[BuildStepAttributes](b.ref.Append("step"))
}

type BuildArtifactsAttributes struct {
	ref terra.Reference
}

func (a BuildArtifactsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a BuildArtifactsAttributes) InternalWithRef(ref terra.Reference) BuildArtifactsAttributes {
	return BuildArtifactsAttributes{ref: ref}
}

func (a BuildArtifactsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a BuildArtifactsAttributes) Images() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("images"))
}

func (a BuildArtifactsAttributes) MavenArtifacts() terra.ListValue[BuildArtifactsMavenArtifactsAttributes] {
	return terra.ReferenceAsList[BuildArtifactsMavenArtifactsAttributes](a.ref.Append("maven_artifacts"))
}

func (a BuildArtifactsAttributes) NpmPackages() terra.ListValue[BuildArtifactsNpmPackagesAttributes] {
	return terra.ReferenceAsList[BuildArtifactsNpmPackagesAttributes](a.ref.Append("npm_packages"))
}

func (a BuildArtifactsAttributes) Objects() terra.ListValue[BuildArtifactsObjectsAttributes] {
	return terra.ReferenceAsList[BuildArtifactsObjectsAttributes](a.ref.Append("objects"))
}

func (a BuildArtifactsAttributes) PythonPackages() terra.ListValue[BuildArtifactsPythonPackagesAttributes] {
	return terra.ReferenceAsList[BuildArtifactsPythonPackagesAttributes](a.ref.Append("python_packages"))
}

type BuildArtifactsMavenArtifactsAttributes struct {
	ref terra.Reference
}

func (ma BuildArtifactsMavenArtifactsAttributes) InternalRef() (terra.Reference, error) {
	return ma.ref, nil
}

func (ma BuildArtifactsMavenArtifactsAttributes) InternalWithRef(ref terra.Reference) BuildArtifactsMavenArtifactsAttributes {
	return BuildArtifactsMavenArtifactsAttributes{ref: ref}
}

func (ma BuildArtifactsMavenArtifactsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ma.ref.InternalTokens()
}

func (ma BuildArtifactsMavenArtifactsAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("artifact_id"))
}

func (ma BuildArtifactsMavenArtifactsAttributes) GroupId() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("group_id"))
}

func (ma BuildArtifactsMavenArtifactsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("path"))
}

func (ma BuildArtifactsMavenArtifactsAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("repository"))
}

func (ma BuildArtifactsMavenArtifactsAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("version"))
}

type BuildArtifactsNpmPackagesAttributes struct {
	ref terra.Reference
}

func (np BuildArtifactsNpmPackagesAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np BuildArtifactsNpmPackagesAttributes) InternalWithRef(ref terra.Reference) BuildArtifactsNpmPackagesAttributes {
	return BuildArtifactsNpmPackagesAttributes{ref: ref}
}

func (np BuildArtifactsNpmPackagesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np BuildArtifactsNpmPackagesAttributes) PackagePath() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("package_path"))
}

func (np BuildArtifactsNpmPackagesAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("repository"))
}

type BuildArtifactsObjectsAttributes struct {
	ref terra.Reference
}

func (o BuildArtifactsObjectsAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o BuildArtifactsObjectsAttributes) InternalWithRef(ref terra.Reference) BuildArtifactsObjectsAttributes {
	return BuildArtifactsObjectsAttributes{ref: ref}
}

func (o BuildArtifactsObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o BuildArtifactsObjectsAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("location"))
}

func (o BuildArtifactsObjectsAttributes) Paths() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](o.ref.Append("paths"))
}

func (o BuildArtifactsObjectsAttributes) Timing() terra.ListValue[BuildArtifactsObjectsTimingAttributes] {
	return terra.ReferenceAsList[BuildArtifactsObjectsTimingAttributes](o.ref.Append("timing"))
}

type BuildArtifactsObjectsTimingAttributes struct {
	ref terra.Reference
}

func (t BuildArtifactsObjectsTimingAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t BuildArtifactsObjectsTimingAttributes) InternalWithRef(ref terra.Reference) BuildArtifactsObjectsTimingAttributes {
	return BuildArtifactsObjectsTimingAttributes{ref: ref}
}

func (t BuildArtifactsObjectsTimingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t BuildArtifactsObjectsTimingAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("end_time"))
}

func (t BuildArtifactsObjectsTimingAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("start_time"))
}

type BuildArtifactsPythonPackagesAttributes struct {
	ref terra.Reference
}

func (pp BuildArtifactsPythonPackagesAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp BuildArtifactsPythonPackagesAttributes) InternalWithRef(ref terra.Reference) BuildArtifactsPythonPackagesAttributes {
	return BuildArtifactsPythonPackagesAttributes{ref: ref}
}

func (pp BuildArtifactsPythonPackagesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp BuildArtifactsPythonPackagesAttributes) Paths() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pp.ref.Append("paths"))
}

func (pp BuildArtifactsPythonPackagesAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("repository"))
}

type BuildAvailableSecretsAttributes struct {
	ref terra.Reference
}

func (as BuildAvailableSecretsAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as BuildAvailableSecretsAttributes) InternalWithRef(ref terra.Reference) BuildAvailableSecretsAttributes {
	return BuildAvailableSecretsAttributes{ref: ref}
}

func (as BuildAvailableSecretsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as BuildAvailableSecretsAttributes) SecretManager() terra.ListValue[BuildAvailableSecretsSecretManagerAttributes] {
	return terra.ReferenceAsList[BuildAvailableSecretsSecretManagerAttributes](as.ref.Append("secret_manager"))
}

type BuildAvailableSecretsSecretManagerAttributes struct {
	ref terra.Reference
}

func (sm BuildAvailableSecretsSecretManagerAttributes) InternalRef() (terra.Reference, error) {
	return sm.ref, nil
}

func (sm BuildAvailableSecretsSecretManagerAttributes) InternalWithRef(ref terra.Reference) BuildAvailableSecretsSecretManagerAttributes {
	return BuildAvailableSecretsSecretManagerAttributes{ref: ref}
}

func (sm BuildAvailableSecretsSecretManagerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sm.ref.InternalTokens()
}

func (sm BuildAvailableSecretsSecretManagerAttributes) Env() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("env"))
}

func (sm BuildAvailableSecretsSecretManagerAttributes) VersionName() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("version_name"))
}

type BuildOptionsAttributes struct {
	ref terra.Reference
}

func (o BuildOptionsAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o BuildOptionsAttributes) InternalWithRef(ref terra.Reference) BuildOptionsAttributes {
	return BuildOptionsAttributes{ref: ref}
}

func (o BuildOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o BuildOptionsAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("disk_size_gb"))
}

func (o BuildOptionsAttributes) DynamicSubstitutions() terra.BoolValue {
	return terra.ReferenceAsBool(o.ref.Append("dynamic_substitutions"))
}

func (o BuildOptionsAttributes) Env() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](o.ref.Append("env"))
}

func (o BuildOptionsAttributes) LogStreamingOption() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("log_streaming_option"))
}

func (o BuildOptionsAttributes) Logging() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("logging"))
}

func (o BuildOptionsAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("machine_type"))
}

func (o BuildOptionsAttributes) RequestedVerifyOption() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("requested_verify_option"))
}

func (o BuildOptionsAttributes) SecretEnv() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](o.ref.Append("secret_env"))
}

func (o BuildOptionsAttributes) SourceProvenanceHash() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](o.ref.Append("source_provenance_hash"))
}

func (o BuildOptionsAttributes) SubstitutionOption() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("substitution_option"))
}

func (o BuildOptionsAttributes) WorkerPool() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("worker_pool"))
}

func (o BuildOptionsAttributes) Volumes() terra.ListValue[BuildOptionsVolumesAttributes] {
	return terra.ReferenceAsList[BuildOptionsVolumesAttributes](o.ref.Append("volumes"))
}

type BuildOptionsVolumesAttributes struct {
	ref terra.Reference
}

func (v BuildOptionsVolumesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v BuildOptionsVolumesAttributes) InternalWithRef(ref terra.Reference) BuildOptionsVolumesAttributes {
	return BuildOptionsVolumesAttributes{ref: ref}
}

func (v BuildOptionsVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v BuildOptionsVolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v BuildOptionsVolumesAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("path"))
}

type BuildSecretAttributes struct {
	ref terra.Reference
}

func (s BuildSecretAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s BuildSecretAttributes) InternalWithRef(ref terra.Reference) BuildSecretAttributes {
	return BuildSecretAttributes{ref: ref}
}

func (s BuildSecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s BuildSecretAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("kms_key_name"))
}

func (s BuildSecretAttributes) SecretEnv() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("secret_env"))
}

type BuildSourceAttributes struct {
	ref terra.Reference
}

func (s BuildSourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s BuildSourceAttributes) InternalWithRef(ref terra.Reference) BuildSourceAttributes {
	return BuildSourceAttributes{ref: ref}
}

func (s BuildSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s BuildSourceAttributes) RepoSource() terra.ListValue[BuildSourceRepoSourceAttributes] {
	return terra.ReferenceAsList[BuildSourceRepoSourceAttributes](s.ref.Append("repo_source"))
}

func (s BuildSourceAttributes) StorageSource() terra.ListValue[BuildSourceStorageSourceAttributes] {
	return terra.ReferenceAsList[BuildSourceStorageSourceAttributes](s.ref.Append("storage_source"))
}

type BuildSourceRepoSourceAttributes struct {
	ref terra.Reference
}

func (rs BuildSourceRepoSourceAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs BuildSourceRepoSourceAttributes) InternalWithRef(ref terra.Reference) BuildSourceRepoSourceAttributes {
	return BuildSourceRepoSourceAttributes{ref: ref}
}

func (rs BuildSourceRepoSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs BuildSourceRepoSourceAttributes) BranchName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("branch_name"))
}

func (rs BuildSourceRepoSourceAttributes) CommitSha() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("commit_sha"))
}

func (rs BuildSourceRepoSourceAttributes) Dir() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("dir"))
}

func (rs BuildSourceRepoSourceAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(rs.ref.Append("invert_regex"))
}

func (rs BuildSourceRepoSourceAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("project_id"))
}

func (rs BuildSourceRepoSourceAttributes) RepoName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("repo_name"))
}

func (rs BuildSourceRepoSourceAttributes) Substitutions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rs.ref.Append("substitutions"))
}

func (rs BuildSourceRepoSourceAttributes) TagName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("tag_name"))
}

type BuildSourceStorageSourceAttributes struct {
	ref terra.Reference
}

func (ss BuildSourceStorageSourceAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss BuildSourceStorageSourceAttributes) InternalWithRef(ref terra.Reference) BuildSourceStorageSourceAttributes {
	return BuildSourceStorageSourceAttributes{ref: ref}
}

func (ss BuildSourceStorageSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss BuildSourceStorageSourceAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("bucket"))
}

func (ss BuildSourceStorageSourceAttributes) Generation() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("generation"))
}

func (ss BuildSourceStorageSourceAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("object"))
}

type BuildStepAttributes struct {
	ref terra.Reference
}

func (s BuildStepAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s BuildStepAttributes) InternalWithRef(ref terra.Reference) BuildStepAttributes {
	return BuildStepAttributes{ref: ref}
}

func (s BuildStepAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s BuildStepAttributes) AllowExitCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](s.ref.Append("allow_exit_codes"))
}

func (s BuildStepAttributes) AllowFailure() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("allow_failure"))
}

func (s BuildStepAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("args"))
}

func (s BuildStepAttributes) Dir() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("dir"))
}

func (s BuildStepAttributes) Entrypoint() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("entrypoint"))
}

func (s BuildStepAttributes) Env() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("env"))
}

func (s BuildStepAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("id"))
}

func (s BuildStepAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s BuildStepAttributes) Script() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("script"))
}

func (s BuildStepAttributes) SecretEnv() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("secret_env"))
}

func (s BuildStepAttributes) Timeout() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("timeout"))
}

func (s BuildStepAttributes) Timing() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("timing"))
}

func (s BuildStepAttributes) WaitFor() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("wait_for"))
}

func (s BuildStepAttributes) Volumes() terra.ListValue[BuildStepVolumesAttributes] {
	return terra.ReferenceAsList[BuildStepVolumesAttributes](s.ref.Append("volumes"))
}

type BuildStepVolumesAttributes struct {
	ref terra.Reference
}

func (v BuildStepVolumesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v BuildStepVolumesAttributes) InternalWithRef(ref terra.Reference) BuildStepVolumesAttributes {
	return BuildStepVolumesAttributes{ref: ref}
}

func (v BuildStepVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v BuildStepVolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v BuildStepVolumesAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("path"))
}

type GitFileSourceAttributes struct {
	ref terra.Reference
}

func (gfs GitFileSourceAttributes) InternalRef() (terra.Reference, error) {
	return gfs.ref, nil
}

func (gfs GitFileSourceAttributes) InternalWithRef(ref terra.Reference) GitFileSourceAttributes {
	return GitFileSourceAttributes{ref: ref}
}

func (gfs GitFileSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gfs.ref.InternalTokens()
}

func (gfs GitFileSourceAttributes) BitbucketServerConfig() terra.StringValue {
	return terra.ReferenceAsString(gfs.ref.Append("bitbucket_server_config"))
}

func (gfs GitFileSourceAttributes) GithubEnterpriseConfig() terra.StringValue {
	return terra.ReferenceAsString(gfs.ref.Append("github_enterprise_config"))
}

func (gfs GitFileSourceAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(gfs.ref.Append("path"))
}

func (gfs GitFileSourceAttributes) RepoType() terra.StringValue {
	return terra.ReferenceAsString(gfs.ref.Append("repo_type"))
}

func (gfs GitFileSourceAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(gfs.ref.Append("repository"))
}

func (gfs GitFileSourceAttributes) Revision() terra.StringValue {
	return terra.ReferenceAsString(gfs.ref.Append("revision"))
}

func (gfs GitFileSourceAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(gfs.ref.Append("uri"))
}

type GithubAttributes struct {
	ref terra.Reference
}

func (g GithubAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GithubAttributes) InternalWithRef(ref terra.Reference) GithubAttributes {
	return GithubAttributes{ref: ref}
}

func (g GithubAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GithubAttributes) EnterpriseConfigResourceName() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("enterprise_config_resource_name"))
}

func (g GithubAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("name"))
}

func (g GithubAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("owner"))
}

func (g GithubAttributes) PullRequest() terra.ListValue[GithubPullRequestAttributes] {
	return terra.ReferenceAsList[GithubPullRequestAttributes](g.ref.Append("pull_request"))
}

func (g GithubAttributes) Push() terra.ListValue[GithubPushAttributes] {
	return terra.ReferenceAsList[GithubPushAttributes](g.ref.Append("push"))
}

type GithubPullRequestAttributes struct {
	ref terra.Reference
}

func (pr GithubPullRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr GithubPullRequestAttributes) InternalWithRef(ref terra.Reference) GithubPullRequestAttributes {
	return GithubPullRequestAttributes{ref: ref}
}

func (pr GithubPullRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr GithubPullRequestAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("branch"))
}

func (pr GithubPullRequestAttributes) CommentControl() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("comment_control"))
}

func (pr GithubPullRequestAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(pr.ref.Append("invert_regex"))
}

type GithubPushAttributes struct {
	ref terra.Reference
}

func (p GithubPushAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p GithubPushAttributes) InternalWithRef(ref terra.Reference) GithubPushAttributes {
	return GithubPushAttributes{ref: ref}
}

func (p GithubPushAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p GithubPushAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("branch"))
}

func (p GithubPushAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("invert_regex"))
}

func (p GithubPushAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("tag"))
}

type PubsubConfigAttributes struct {
	ref terra.Reference
}

func (pc PubsubConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PubsubConfigAttributes) InternalWithRef(ref terra.Reference) PubsubConfigAttributes {
	return PubsubConfigAttributes{ref: ref}
}

func (pc PubsubConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PubsubConfigAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("service_account_email"))
}

func (pc PubsubConfigAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("state"))
}

func (pc PubsubConfigAttributes) Subscription() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("subscription"))
}

func (pc PubsubConfigAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("topic"))
}

type RepositoryEventConfigAttributes struct {
	ref terra.Reference
}

func (rec RepositoryEventConfigAttributes) InternalRef() (terra.Reference, error) {
	return rec.ref, nil
}

func (rec RepositoryEventConfigAttributes) InternalWithRef(ref terra.Reference) RepositoryEventConfigAttributes {
	return RepositoryEventConfigAttributes{ref: ref}
}

func (rec RepositoryEventConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rec.ref.InternalTokens()
}

func (rec RepositoryEventConfigAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(rec.ref.Append("repository"))
}

func (rec RepositoryEventConfigAttributes) PullRequest() terra.ListValue[RepositoryEventConfigPullRequestAttributes] {
	return terra.ReferenceAsList[RepositoryEventConfigPullRequestAttributes](rec.ref.Append("pull_request"))
}

func (rec RepositoryEventConfigAttributes) Push() terra.ListValue[RepositoryEventConfigPushAttributes] {
	return terra.ReferenceAsList[RepositoryEventConfigPushAttributes](rec.ref.Append("push"))
}

type RepositoryEventConfigPullRequestAttributes struct {
	ref terra.Reference
}

func (pr RepositoryEventConfigPullRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr RepositoryEventConfigPullRequestAttributes) InternalWithRef(ref terra.Reference) RepositoryEventConfigPullRequestAttributes {
	return RepositoryEventConfigPullRequestAttributes{ref: ref}
}

func (pr RepositoryEventConfigPullRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr RepositoryEventConfigPullRequestAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("branch"))
}

func (pr RepositoryEventConfigPullRequestAttributes) CommentControl() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("comment_control"))
}

func (pr RepositoryEventConfigPullRequestAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(pr.ref.Append("invert_regex"))
}

type RepositoryEventConfigPushAttributes struct {
	ref terra.Reference
}

func (p RepositoryEventConfigPushAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p RepositoryEventConfigPushAttributes) InternalWithRef(ref terra.Reference) RepositoryEventConfigPushAttributes {
	return RepositoryEventConfigPushAttributes{ref: ref}
}

func (p RepositoryEventConfigPushAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p RepositoryEventConfigPushAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("branch"))
}

func (p RepositoryEventConfigPushAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("invert_regex"))
}

func (p RepositoryEventConfigPushAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("tag"))
}

type SourceToBuildAttributes struct {
	ref terra.Reference
}

func (stb SourceToBuildAttributes) InternalRef() (terra.Reference, error) {
	return stb.ref, nil
}

func (stb SourceToBuildAttributes) InternalWithRef(ref terra.Reference) SourceToBuildAttributes {
	return SourceToBuildAttributes{ref: ref}
}

func (stb SourceToBuildAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return stb.ref.InternalTokens()
}

func (stb SourceToBuildAttributes) BitbucketServerConfig() terra.StringValue {
	return terra.ReferenceAsString(stb.ref.Append("bitbucket_server_config"))
}

func (stb SourceToBuildAttributes) GithubEnterpriseConfig() terra.StringValue {
	return terra.ReferenceAsString(stb.ref.Append("github_enterprise_config"))
}

func (stb SourceToBuildAttributes) Ref() terra.StringValue {
	return terra.ReferenceAsString(stb.ref.Append("ref"))
}

func (stb SourceToBuildAttributes) RepoType() terra.StringValue {
	return terra.ReferenceAsString(stb.ref.Append("repo_type"))
}

func (stb SourceToBuildAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(stb.ref.Append("repository"))
}

func (stb SourceToBuildAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(stb.ref.Append("uri"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TriggerTemplateAttributes struct {
	ref terra.Reference
}

func (tt TriggerTemplateAttributes) InternalRef() (terra.Reference, error) {
	return tt.ref, nil
}

func (tt TriggerTemplateAttributes) InternalWithRef(ref terra.Reference) TriggerTemplateAttributes {
	return TriggerTemplateAttributes{ref: ref}
}

func (tt TriggerTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tt.ref.InternalTokens()
}

func (tt TriggerTemplateAttributes) BranchName() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("branch_name"))
}

func (tt TriggerTemplateAttributes) CommitSha() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("commit_sha"))
}

func (tt TriggerTemplateAttributes) Dir() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("dir"))
}

func (tt TriggerTemplateAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(tt.ref.Append("invert_regex"))
}

func (tt TriggerTemplateAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("project_id"))
}

func (tt TriggerTemplateAttributes) RepoName() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("repo_name"))
}

func (tt TriggerTemplateAttributes) TagName() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("tag_name"))
}

type WebhookConfigAttributes struct {
	ref terra.Reference
}

func (wc WebhookConfigAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc WebhookConfigAttributes) InternalWithRef(ref terra.Reference) WebhookConfigAttributes {
	return WebhookConfigAttributes{ref: ref}
}

func (wc WebhookConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc WebhookConfigAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("secret"))
}

func (wc WebhookConfigAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("state"))
}

type ApprovalConfigState struct {
	ApprovalRequired bool `json:"approval_required"`
}

type BitbucketServerTriggerConfigState struct {
	BitbucketServerConfigResource string                                         `json:"bitbucket_server_config_resource"`
	ProjectKey                    string                                         `json:"project_key"`
	RepoSlug                      string                                         `json:"repo_slug"`
	PullRequest                   []BitbucketServerTriggerConfigPullRequestState `json:"pull_request"`
	Push                          []BitbucketServerTriggerConfigPushState        `json:"push"`
}

type BitbucketServerTriggerConfigPullRequestState struct {
	Branch         string `json:"branch"`
	CommentControl string `json:"comment_control"`
	InvertRegex    bool   `json:"invert_regex"`
}

type BitbucketServerTriggerConfigPushState struct {
	Branch      string `json:"branch"`
	InvertRegex bool   `json:"invert_regex"`
	Tag         string `json:"tag"`
}

type BuildState struct {
	Images           []string                     `json:"images"`
	LogsBucket       string                       `json:"logs_bucket"`
	QueueTtl         string                       `json:"queue_ttl"`
	Substitutions    map[string]string            `json:"substitutions"`
	Tags             []string                     `json:"tags"`
	Timeout          string                       `json:"timeout"`
	Artifacts        []BuildArtifactsState        `json:"artifacts"`
	AvailableSecrets []BuildAvailableSecretsState `json:"available_secrets"`
	Options          []BuildOptionsState          `json:"options"`
	Secret           []BuildSecretState           `json:"secret"`
	Source           []BuildSourceState           `json:"source"`
	Step             []BuildStepState             `json:"step"`
}

type BuildArtifactsState struct {
	Images         []string                            `json:"images"`
	MavenArtifacts []BuildArtifactsMavenArtifactsState `json:"maven_artifacts"`
	NpmPackages    []BuildArtifactsNpmPackagesState    `json:"npm_packages"`
	Objects        []BuildArtifactsObjectsState        `json:"objects"`
	PythonPackages []BuildArtifactsPythonPackagesState `json:"python_packages"`
}

type BuildArtifactsMavenArtifactsState struct {
	ArtifactId string `json:"artifact_id"`
	GroupId    string `json:"group_id"`
	Path       string `json:"path"`
	Repository string `json:"repository"`
	Version    string `json:"version"`
}

type BuildArtifactsNpmPackagesState struct {
	PackagePath string `json:"package_path"`
	Repository  string `json:"repository"`
}

type BuildArtifactsObjectsState struct {
	Location string                             `json:"location"`
	Paths    []string                           `json:"paths"`
	Timing   []BuildArtifactsObjectsTimingState `json:"timing"`
}

type BuildArtifactsObjectsTimingState struct {
	EndTime   string `json:"end_time"`
	StartTime string `json:"start_time"`
}

type BuildArtifactsPythonPackagesState struct {
	Paths      []string `json:"paths"`
	Repository string   `json:"repository"`
}

type BuildAvailableSecretsState struct {
	SecretManager []BuildAvailableSecretsSecretManagerState `json:"secret_manager"`
}

type BuildAvailableSecretsSecretManagerState struct {
	Env         string `json:"env"`
	VersionName string `json:"version_name"`
}

type BuildOptionsState struct {
	DiskSizeGb            float64                    `json:"disk_size_gb"`
	DynamicSubstitutions  bool                       `json:"dynamic_substitutions"`
	Env                   []string                   `json:"env"`
	LogStreamingOption    string                     `json:"log_streaming_option"`
	Logging               string                     `json:"logging"`
	MachineType           string                     `json:"machine_type"`
	RequestedVerifyOption string                     `json:"requested_verify_option"`
	SecretEnv             []string                   `json:"secret_env"`
	SourceProvenanceHash  []string                   `json:"source_provenance_hash"`
	SubstitutionOption    string                     `json:"substitution_option"`
	WorkerPool            string                     `json:"worker_pool"`
	Volumes               []BuildOptionsVolumesState `json:"volumes"`
}

type BuildOptionsVolumesState struct {
	Name string `json:"name"`
	Path string `json:"path"`
}

type BuildSecretState struct {
	KmsKeyName string            `json:"kms_key_name"`
	SecretEnv  map[string]string `json:"secret_env"`
}

type BuildSourceState struct {
	RepoSource    []BuildSourceRepoSourceState    `json:"repo_source"`
	StorageSource []BuildSourceStorageSourceState `json:"storage_source"`
}

type BuildSourceRepoSourceState struct {
	BranchName    string            `json:"branch_name"`
	CommitSha     string            `json:"commit_sha"`
	Dir           string            `json:"dir"`
	InvertRegex   bool              `json:"invert_regex"`
	ProjectId     string            `json:"project_id"`
	RepoName      string            `json:"repo_name"`
	Substitutions map[string]string `json:"substitutions"`
	TagName       string            `json:"tag_name"`
}

type BuildSourceStorageSourceState struct {
	Bucket     string `json:"bucket"`
	Generation string `json:"generation"`
	Object     string `json:"object"`
}

type BuildStepState struct {
	AllowExitCodes []float64               `json:"allow_exit_codes"`
	AllowFailure   bool                    `json:"allow_failure"`
	Args           []string                `json:"args"`
	Dir            string                  `json:"dir"`
	Entrypoint     string                  `json:"entrypoint"`
	Env            []string                `json:"env"`
	Id             string                  `json:"id"`
	Name           string                  `json:"name"`
	Script         string                  `json:"script"`
	SecretEnv      []string                `json:"secret_env"`
	Timeout        string                  `json:"timeout"`
	Timing         string                  `json:"timing"`
	WaitFor        []string                `json:"wait_for"`
	Volumes        []BuildStepVolumesState `json:"volumes"`
}

type BuildStepVolumesState struct {
	Name string `json:"name"`
	Path string `json:"path"`
}

type GitFileSourceState struct {
	BitbucketServerConfig  string `json:"bitbucket_server_config"`
	GithubEnterpriseConfig string `json:"github_enterprise_config"`
	Path                   string `json:"path"`
	RepoType               string `json:"repo_type"`
	Repository             string `json:"repository"`
	Revision               string `json:"revision"`
	Uri                    string `json:"uri"`
}

type GithubState struct {
	EnterpriseConfigResourceName string                   `json:"enterprise_config_resource_name"`
	Name                         string                   `json:"name"`
	Owner                        string                   `json:"owner"`
	PullRequest                  []GithubPullRequestState `json:"pull_request"`
	Push                         []GithubPushState        `json:"push"`
}

type GithubPullRequestState struct {
	Branch         string `json:"branch"`
	CommentControl string `json:"comment_control"`
	InvertRegex    bool   `json:"invert_regex"`
}

type GithubPushState struct {
	Branch      string `json:"branch"`
	InvertRegex bool   `json:"invert_regex"`
	Tag         string `json:"tag"`
}

type PubsubConfigState struct {
	ServiceAccountEmail string `json:"service_account_email"`
	State               string `json:"state"`
	Subscription        string `json:"subscription"`
	Topic               string `json:"topic"`
}

type RepositoryEventConfigState struct {
	Repository  string                                  `json:"repository"`
	PullRequest []RepositoryEventConfigPullRequestState `json:"pull_request"`
	Push        []RepositoryEventConfigPushState        `json:"push"`
}

type RepositoryEventConfigPullRequestState struct {
	Branch         string `json:"branch"`
	CommentControl string `json:"comment_control"`
	InvertRegex    bool   `json:"invert_regex"`
}

type RepositoryEventConfigPushState struct {
	Branch      string `json:"branch"`
	InvertRegex bool   `json:"invert_regex"`
	Tag         string `json:"tag"`
}

type SourceToBuildState struct {
	BitbucketServerConfig  string `json:"bitbucket_server_config"`
	GithubEnterpriseConfig string `json:"github_enterprise_config"`
	Ref                    string `json:"ref"`
	RepoType               string `json:"repo_type"`
	Repository             string `json:"repository"`
	Uri                    string `json:"uri"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TriggerTemplateState struct {
	BranchName  string `json:"branch_name"`
	CommitSha   string `json:"commit_sha"`
	Dir         string `json:"dir"`
	InvertRegex bool   `json:"invert_regex"`
	ProjectId   string `json:"project_id"`
	RepoName    string `json:"repo_name"`
	TagName     string `json:"tag_name"`
}

type WebhookConfigState struct {
	Secret string `json:"secret"`
	State  string `json:"state"`
}
