// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_region_instance_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataInstancesAttributes struct {
	ref terra.Reference
}

func (i DataInstancesAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DataInstancesAttributes) InternalWithRef(ref terra.Reference) DataInstancesAttributes {
	return DataInstancesAttributes{ref: ref}
}

func (i DataInstancesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DataInstancesAttributes) Instance() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("instance"))
}

func (i DataInstancesAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("status"))
}

func (i DataInstancesAttributes) NamedPorts() terra.ListValue[DataInstancesNamedPortsAttributes] {
	return terra.ReferenceAsList[DataInstancesNamedPortsAttributes](i.ref.Append("named_ports"))
}

type DataInstancesNamedPortsAttributes struct {
	ref terra.Reference
}

func (np DataInstancesNamedPortsAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np DataInstancesNamedPortsAttributes) InternalWithRef(ref terra.Reference) DataInstancesNamedPortsAttributes {
	return DataInstancesNamedPortsAttributes{ref: ref}
}

func (np DataInstancesNamedPortsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np DataInstancesNamedPortsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("name"))
}

func (np DataInstancesNamedPortsAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("port"))
}

type DataInstancesState struct {
	Instance   string                         `json:"instance"`
	Status     string                         `json:"status"`
	NamedPorts []DataInstancesNamedPortsState `json:"named_ports"`
}

type DataInstancesNamedPortsState struct {
	Name string  `json:"name"`
	Port float64 `json:"port"`
}
