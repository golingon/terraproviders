// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_notebooks_environment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_notebooks_environment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleNotebooksEnvironmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gne *Resource) Type() string {
	return "google_notebooks_environment"
}

// LocalName returns the local name for [Resource].
func (gne *Resource) LocalName() string {
	return gne.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gne *Resource) Configuration() interface{} {
	return gne.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gne *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gne)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gne *Resource) Dependencies() terra.Dependencies {
	return gne.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gne *Resource) LifecycleManagement() *terra.Lifecycle {
	return gne.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gne *Resource) Attributes() googleNotebooksEnvironmentAttributes {
	return googleNotebooksEnvironmentAttributes{ref: terra.ReferenceResource(gne)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gne *Resource) ImportState(state io.Reader) error {
	gne.state = &googleNotebooksEnvironmentState{}
	if err := json.NewDecoder(state).Decode(gne.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gne.Type(), gne.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gne *Resource) State() (*googleNotebooksEnvironmentState, bool) {
	return gne.state, gne.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gne *Resource) StateMust() *googleNotebooksEnvironmentState {
	if gne.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gne.Type(), gne.LocalName()))
	}
	return gne.state
}

// Args contains the configurations for google_notebooks_environment.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PostStartupScript: string, optional
	PostStartupScript terra.StringValue `hcl:"post_startup_script,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ContainerImage: optional
	ContainerImage *ContainerImage `hcl:"container_image,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VmImage: optional
	VmImage *VmImage `hcl:"vm_image,block"`
}

type googleNotebooksEnvironmentAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_notebooks_environment.
func (gne googleNotebooksEnvironmentAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gne.ref.Append("create_time"))
}

// Description returns a reference to field description of google_notebooks_environment.
func (gne googleNotebooksEnvironmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gne.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_notebooks_environment.
func (gne googleNotebooksEnvironmentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gne.ref.Append("display_name"))
}

// Id returns a reference to field id of google_notebooks_environment.
func (gne googleNotebooksEnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gne.ref.Append("id"))
}

// Location returns a reference to field location of google_notebooks_environment.
func (gne googleNotebooksEnvironmentAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gne.ref.Append("location"))
}

// Name returns a reference to field name of google_notebooks_environment.
func (gne googleNotebooksEnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gne.ref.Append("name"))
}

// PostStartupScript returns a reference to field post_startup_script of google_notebooks_environment.
func (gne googleNotebooksEnvironmentAttributes) PostStartupScript() terra.StringValue {
	return terra.ReferenceAsString(gne.ref.Append("post_startup_script"))
}

// Project returns a reference to field project of google_notebooks_environment.
func (gne googleNotebooksEnvironmentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gne.ref.Append("project"))
}

func (gne googleNotebooksEnvironmentAttributes) ContainerImage() terra.ListValue[ContainerImageAttributes] {
	return terra.ReferenceAsList[ContainerImageAttributes](gne.ref.Append("container_image"))
}

func (gne googleNotebooksEnvironmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gne.ref.Append("timeouts"))
}

func (gne googleNotebooksEnvironmentAttributes) VmImage() terra.ListValue[VmImageAttributes] {
	return terra.ReferenceAsList[VmImageAttributes](gne.ref.Append("vm_image"))
}

type googleNotebooksEnvironmentState struct {
	CreateTime        string                `json:"create_time"`
	Description       string                `json:"description"`
	DisplayName       string                `json:"display_name"`
	Id                string                `json:"id"`
	Location          string                `json:"location"`
	Name              string                `json:"name"`
	PostStartupScript string                `json:"post_startup_script"`
	Project           string                `json:"project"`
	ContainerImage    []ContainerImageState `json:"container_image"`
	Timeouts          *TimeoutsState        `json:"timeouts"`
	VmImage           []VmImageState        `json:"vm_image"`
}
