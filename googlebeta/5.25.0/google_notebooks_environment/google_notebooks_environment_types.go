// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_notebooks_environment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ContainerImage struct {
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
	// Tag: string, optional
	Tag terra.StringValue `hcl:"tag,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VmImage struct {
	// ImageFamily: string, optional
	ImageFamily terra.StringValue `hcl:"image_family,attr"`
	// ImageName: string, optional
	ImageName terra.StringValue `hcl:"image_name,attr"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
}

type ContainerImageAttributes struct {
	ref terra.Reference
}

func (ci ContainerImageAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci ContainerImageAttributes) InternalWithRef(ref terra.Reference) ContainerImageAttributes {
	return ContainerImageAttributes{ref: ref}
}

func (ci ContainerImageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci ContainerImageAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("repository"))
}

func (ci ContainerImageAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("tag"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VmImageAttributes struct {
	ref terra.Reference
}

func (vi VmImageAttributes) InternalRef() (terra.Reference, error) {
	return vi.ref, nil
}

func (vi VmImageAttributes) InternalWithRef(ref terra.Reference) VmImageAttributes {
	return VmImageAttributes{ref: ref}
}

func (vi VmImageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vi.ref.InternalTokens()
}

func (vi VmImageAttributes) ImageFamily() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("image_family"))
}

func (vi VmImageAttributes) ImageName() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("image_name"))
}

func (vi VmImageAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("project"))
}

type ContainerImageState struct {
	Repository string `json:"repository"`
	Tag        string `json:"tag"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VmImageState struct {
	ImageFamily string `json:"image_family"`
	ImageName   string `json:"image_name"`
	Project     string `json:"project"`
}
