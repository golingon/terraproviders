// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_data_catalog_tag_template_iam_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_data_catalog_tag_template_iam_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataCatalogTagTemplateIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdcttip *Resource) Type() string {
	return "google_data_catalog_tag_template_iam_policy"
}

// LocalName returns the local name for [Resource].
func (gdcttip *Resource) LocalName() string {
	return gdcttip.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdcttip *Resource) Configuration() interface{} {
	return gdcttip.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdcttip *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdcttip)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdcttip *Resource) Dependencies() terra.Dependencies {
	return gdcttip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdcttip *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdcttip.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdcttip *Resource) Attributes() googleDataCatalogTagTemplateIamPolicyAttributes {
	return googleDataCatalogTagTemplateIamPolicyAttributes{ref: terra.ReferenceResource(gdcttip)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdcttip *Resource) ImportState(state io.Reader) error {
	gdcttip.state = &googleDataCatalogTagTemplateIamPolicyState{}
	if err := json.NewDecoder(state).Decode(gdcttip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdcttip.Type(), gdcttip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdcttip *Resource) State() (*googleDataCatalogTagTemplateIamPolicyState, bool) {
	return gdcttip.state, gdcttip.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdcttip *Resource) StateMust() *googleDataCatalogTagTemplateIamPolicyState {
	if gdcttip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdcttip.Type(), gdcttip.LocalName()))
	}
	return gdcttip.state
}

// Args contains the configurations for google_data_catalog_tag_template_iam_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// TagTemplate: string, required
	TagTemplate terra.StringValue `hcl:"tag_template,attr" validate:"required"`
}

type googleDataCatalogTagTemplateIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_data_catalog_tag_template_iam_policy.
func (gdcttip googleDataCatalogTagTemplateIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gdcttip.ref.Append("etag"))
}

// Id returns a reference to field id of google_data_catalog_tag_template_iam_policy.
func (gdcttip googleDataCatalogTagTemplateIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdcttip.ref.Append("id"))
}

// PolicyData returns a reference to field policy_data of google_data_catalog_tag_template_iam_policy.
func (gdcttip googleDataCatalogTagTemplateIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(gdcttip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_data_catalog_tag_template_iam_policy.
func (gdcttip googleDataCatalogTagTemplateIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdcttip.ref.Append("project"))
}

// Region returns a reference to field region of google_data_catalog_tag_template_iam_policy.
func (gdcttip googleDataCatalogTagTemplateIamPolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gdcttip.ref.Append("region"))
}

// TagTemplate returns a reference to field tag_template of google_data_catalog_tag_template_iam_policy.
func (gdcttip googleDataCatalogTagTemplateIamPolicyAttributes) TagTemplate() terra.StringValue {
	return terra.ReferenceAsString(gdcttip.ref.Append("tag_template"))
}

type googleDataCatalogTagTemplateIamPolicyState struct {
	Etag        string `json:"etag"`
	Id          string `json:"id"`
	PolicyData  string `json:"policy_data"`
	Project     string `json:"project"`
	Region      string `json:"region"`
	TagTemplate string `json:"tag_template"`
}
