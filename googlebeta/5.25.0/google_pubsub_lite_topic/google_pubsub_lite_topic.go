// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_pubsub_lite_topic

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_pubsub_lite_topic.
type Resource struct {
	Name      string
	Args      Args
	state     *googlePubsubLiteTopicState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gplt *Resource) Type() string {
	return "google_pubsub_lite_topic"
}

// LocalName returns the local name for [Resource].
func (gplt *Resource) LocalName() string {
	return gplt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gplt *Resource) Configuration() interface{} {
	return gplt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gplt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gplt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gplt *Resource) Dependencies() terra.Dependencies {
	return gplt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gplt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gplt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gplt *Resource) Attributes() googlePubsubLiteTopicAttributes {
	return googlePubsubLiteTopicAttributes{ref: terra.ReferenceResource(gplt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gplt *Resource) ImportState(state io.Reader) error {
	gplt.state = &googlePubsubLiteTopicState{}
	if err := json.NewDecoder(state).Decode(gplt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gplt.Type(), gplt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gplt *Resource) State() (*googlePubsubLiteTopicState, bool) {
	return gplt.state, gplt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gplt *Resource) StateMust() *googlePubsubLiteTopicState {
	if gplt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gplt.Type(), gplt.LocalName()))
	}
	return gplt.state
}

// Args contains the configurations for google_pubsub_lite_topic.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// PartitionConfig: optional
	PartitionConfig *PartitionConfig `hcl:"partition_config,block"`
	// ReservationConfig: optional
	ReservationConfig *ReservationConfig `hcl:"reservation_config,block"`
	// RetentionConfig: optional
	RetentionConfig *RetentionConfig `hcl:"retention_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googlePubsubLiteTopicAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_pubsub_lite_topic.
func (gplt googlePubsubLiteTopicAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gplt.ref.Append("id"))
}

// Name returns a reference to field name of google_pubsub_lite_topic.
func (gplt googlePubsubLiteTopicAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gplt.ref.Append("name"))
}

// Project returns a reference to field project of google_pubsub_lite_topic.
func (gplt googlePubsubLiteTopicAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gplt.ref.Append("project"))
}

// Region returns a reference to field region of google_pubsub_lite_topic.
func (gplt googlePubsubLiteTopicAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gplt.ref.Append("region"))
}

// Zone returns a reference to field zone of google_pubsub_lite_topic.
func (gplt googlePubsubLiteTopicAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gplt.ref.Append("zone"))
}

func (gplt googlePubsubLiteTopicAttributes) PartitionConfig() terra.ListValue[PartitionConfigAttributes] {
	return terra.ReferenceAsList[PartitionConfigAttributes](gplt.ref.Append("partition_config"))
}

func (gplt googlePubsubLiteTopicAttributes) ReservationConfig() terra.ListValue[ReservationConfigAttributes] {
	return terra.ReferenceAsList[ReservationConfigAttributes](gplt.ref.Append("reservation_config"))
}

func (gplt googlePubsubLiteTopicAttributes) RetentionConfig() terra.ListValue[RetentionConfigAttributes] {
	return terra.ReferenceAsList[RetentionConfigAttributes](gplt.ref.Append("retention_config"))
}

func (gplt googlePubsubLiteTopicAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gplt.ref.Append("timeouts"))
}

type googlePubsubLiteTopicState struct {
	Id                string                   `json:"id"`
	Name              string                   `json:"name"`
	Project           string                   `json:"project"`
	Region            string                   `json:"region"`
	Zone              string                   `json:"zone"`
	PartitionConfig   []PartitionConfigState   `json:"partition_config"`
	ReservationConfig []ReservationConfigState `json:"reservation_config"`
	RetentionConfig   []RetentionConfigState   `json:"retention_config"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
