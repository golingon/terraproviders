// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_managed_ssl_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_managed_ssl_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeManagedSslCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcmsc *Resource) Type() string {
	return "google_compute_managed_ssl_certificate"
}

// LocalName returns the local name for [Resource].
func (gcmsc *Resource) LocalName() string {
	return gcmsc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcmsc *Resource) Configuration() interface{} {
	return gcmsc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcmsc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcmsc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcmsc *Resource) Dependencies() terra.Dependencies {
	return gcmsc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcmsc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcmsc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcmsc *Resource) Attributes() googleComputeManagedSslCertificateAttributes {
	return googleComputeManagedSslCertificateAttributes{ref: terra.ReferenceResource(gcmsc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcmsc *Resource) ImportState(state io.Reader) error {
	gcmsc.state = &googleComputeManagedSslCertificateState{}
	if err := json.NewDecoder(state).Decode(gcmsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcmsc.Type(), gcmsc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcmsc *Resource) State() (*googleComputeManagedSslCertificateState, bool) {
	return gcmsc.state, gcmsc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcmsc *Resource) StateMust() *googleComputeManagedSslCertificateState {
	if gcmsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcmsc.Type(), gcmsc.LocalName()))
	}
	return gcmsc.state
}

// Args contains the configurations for google_compute_managed_ssl_certificate.
type Args struct {
	// CertificateId: number, optional
	CertificateId terra.NumberValue `hcl:"certificate_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Managed: optional
	Managed *Managed `hcl:"managed,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeManagedSslCertificateAttributes struct {
	ref terra.Reference
}

// CertificateId returns a reference to field certificate_id of google_compute_managed_ssl_certificate.
func (gcmsc googleComputeManagedSslCertificateAttributes) CertificateId() terra.NumberValue {
	return terra.ReferenceAsNumber(gcmsc.ref.Append("certificate_id"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_managed_ssl_certificate.
func (gcmsc googleComputeManagedSslCertificateAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcmsc.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_managed_ssl_certificate.
func (gcmsc googleComputeManagedSslCertificateAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcmsc.ref.Append("description"))
}

// ExpireTime returns a reference to field expire_time of google_compute_managed_ssl_certificate.
func (gcmsc googleComputeManagedSslCertificateAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(gcmsc.ref.Append("expire_time"))
}

// Id returns a reference to field id of google_compute_managed_ssl_certificate.
func (gcmsc googleComputeManagedSslCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcmsc.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_managed_ssl_certificate.
func (gcmsc googleComputeManagedSslCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcmsc.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_managed_ssl_certificate.
func (gcmsc googleComputeManagedSslCertificateAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcmsc.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_compute_managed_ssl_certificate.
func (gcmsc googleComputeManagedSslCertificateAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcmsc.ref.Append("self_link"))
}

// SubjectAlternativeNames returns a reference to field subject_alternative_names of google_compute_managed_ssl_certificate.
func (gcmsc googleComputeManagedSslCertificateAttributes) SubjectAlternativeNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcmsc.ref.Append("subject_alternative_names"))
}

// Type returns a reference to field type of google_compute_managed_ssl_certificate.
func (gcmsc googleComputeManagedSslCertificateAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gcmsc.ref.Append("type"))
}

func (gcmsc googleComputeManagedSslCertificateAttributes) Managed() terra.ListValue[ManagedAttributes] {
	return terra.ReferenceAsList[ManagedAttributes](gcmsc.ref.Append("managed"))
}

func (gcmsc googleComputeManagedSslCertificateAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcmsc.ref.Append("timeouts"))
}

type googleComputeManagedSslCertificateState struct {
	CertificateId           float64        `json:"certificate_id"`
	CreationTimestamp       string         `json:"creation_timestamp"`
	Description             string         `json:"description"`
	ExpireTime              string         `json:"expire_time"`
	Id                      string         `json:"id"`
	Name                    string         `json:"name"`
	Project                 string         `json:"project"`
	SelfLink                string         `json:"self_link"`
	SubjectAlternativeNames []string       `json:"subject_alternative_names"`
	Type                    string         `json:"type"`
	Managed                 []ManagedState `json:"managed"`
	Timeouts                *TimeoutsState `json:"timeouts"`
}
