// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_artifact_registry_repository

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_artifact_registry_repository.
type Resource struct {
	Name      string
	Args      Args
	state     *googleArtifactRegistryRepositoryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (garr *Resource) Type() string {
	return "google_artifact_registry_repository"
}

// LocalName returns the local name for [Resource].
func (garr *Resource) LocalName() string {
	return garr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (garr *Resource) Configuration() interface{} {
	return garr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (garr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(garr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (garr *Resource) Dependencies() terra.Dependencies {
	return garr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (garr *Resource) LifecycleManagement() *terra.Lifecycle {
	return garr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (garr *Resource) Attributes() googleArtifactRegistryRepositoryAttributes {
	return googleArtifactRegistryRepositoryAttributes{ref: terra.ReferenceResource(garr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (garr *Resource) ImportState(state io.Reader) error {
	garr.state = &googleArtifactRegistryRepositoryState{}
	if err := json.NewDecoder(state).Decode(garr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", garr.Type(), garr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (garr *Resource) State() (*googleArtifactRegistryRepositoryState, bool) {
	return garr.state, garr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (garr *Resource) StateMust() *googleArtifactRegistryRepositoryState {
	if garr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", garr.Type(), garr.LocalName()))
	}
	return garr.state
}

// Args contains the configurations for google_artifact_registry_repository.
type Args struct {
	// CleanupPolicyDryRun: bool, optional
	CleanupPolicyDryRun terra.BoolValue `hcl:"cleanup_policy_dry_run,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Format: string, required
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RepositoryId: string, required
	RepositoryId terra.StringValue `hcl:"repository_id,attr" validate:"required"`
	// CleanupPolicies: min=0
	CleanupPolicies []CleanupPolicies `hcl:"cleanup_policies,block" validate:"min=0"`
	// DockerConfig: optional
	DockerConfig *DockerConfig `hcl:"docker_config,block"`
	// MavenConfig: optional
	MavenConfig *MavenConfig `hcl:"maven_config,block"`
	// RemoteRepositoryConfig: optional
	RemoteRepositoryConfig *RemoteRepositoryConfig `hcl:"remote_repository_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VirtualRepositoryConfig: optional
	VirtualRepositoryConfig *VirtualRepositoryConfig `hcl:"virtual_repository_config,block"`
}

type googleArtifactRegistryRepositoryAttributes struct {
	ref terra.Reference
}

// CleanupPolicyDryRun returns a reference to field cleanup_policy_dry_run of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) CleanupPolicyDryRun() terra.BoolValue {
	return terra.ReferenceAsBool(garr.ref.Append("cleanup_policy_dry_run"))
}

// CreateTime returns a reference to field create_time of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(garr.ref.Append("create_time"))
}

// Description returns a reference to field description of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(garr.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](garr.ref.Append("effective_labels"))
}

// Format returns a reference to field format of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(garr.ref.Append("format"))
}

// Id returns a reference to field id of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(garr.ref.Append("id"))
}

// KmsKeyName returns a reference to field kms_key_name of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(garr.ref.Append("kms_key_name"))
}

// Labels returns a reference to field labels of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](garr.ref.Append("labels"))
}

// Location returns a reference to field location of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(garr.ref.Append("location"))
}

// Mode returns a reference to field mode of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(garr.ref.Append("mode"))
}

// Name returns a reference to field name of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(garr.ref.Append("name"))
}

// Project returns a reference to field project of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(garr.ref.Append("project"))
}

// RepositoryId returns a reference to field repository_id of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) RepositoryId() terra.StringValue {
	return terra.ReferenceAsString(garr.ref.Append("repository_id"))
}

// TerraformLabels returns a reference to field terraform_labels of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](garr.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_artifact_registry_repository.
func (garr googleArtifactRegistryRepositoryAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(garr.ref.Append("update_time"))
}

func (garr googleArtifactRegistryRepositoryAttributes) CleanupPolicies() terra.SetValue[CleanupPoliciesAttributes] {
	return terra.ReferenceAsSet[CleanupPoliciesAttributes](garr.ref.Append("cleanup_policies"))
}

func (garr googleArtifactRegistryRepositoryAttributes) DockerConfig() terra.ListValue[DockerConfigAttributes] {
	return terra.ReferenceAsList[DockerConfigAttributes](garr.ref.Append("docker_config"))
}

func (garr googleArtifactRegistryRepositoryAttributes) MavenConfig() terra.ListValue[MavenConfigAttributes] {
	return terra.ReferenceAsList[MavenConfigAttributes](garr.ref.Append("maven_config"))
}

func (garr googleArtifactRegistryRepositoryAttributes) RemoteRepositoryConfig() terra.ListValue[RemoteRepositoryConfigAttributes] {
	return terra.ReferenceAsList[RemoteRepositoryConfigAttributes](garr.ref.Append("remote_repository_config"))
}

func (garr googleArtifactRegistryRepositoryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](garr.ref.Append("timeouts"))
}

func (garr googleArtifactRegistryRepositoryAttributes) VirtualRepositoryConfig() terra.ListValue[VirtualRepositoryConfigAttributes] {
	return terra.ReferenceAsList[VirtualRepositoryConfigAttributes](garr.ref.Append("virtual_repository_config"))
}

type googleArtifactRegistryRepositoryState struct {
	CleanupPolicyDryRun     bool                           `json:"cleanup_policy_dry_run"`
	CreateTime              string                         `json:"create_time"`
	Description             string                         `json:"description"`
	EffectiveLabels         map[string]string              `json:"effective_labels"`
	Format                  string                         `json:"format"`
	Id                      string                         `json:"id"`
	KmsKeyName              string                         `json:"kms_key_name"`
	Labels                  map[string]string              `json:"labels"`
	Location                string                         `json:"location"`
	Mode                    string                         `json:"mode"`
	Name                    string                         `json:"name"`
	Project                 string                         `json:"project"`
	RepositoryId            string                         `json:"repository_id"`
	TerraformLabels         map[string]string              `json:"terraform_labels"`
	UpdateTime              string                         `json:"update_time"`
	CleanupPolicies         []CleanupPoliciesState         `json:"cleanup_policies"`
	DockerConfig            []DockerConfigState            `json:"docker_config"`
	MavenConfig             []MavenConfigState             `json:"maven_config"`
	RemoteRepositoryConfig  []RemoteRepositoryConfigState  `json:"remote_repository_config"`
	Timeouts                *TimeoutsState                 `json:"timeouts"`
	VirtualRepositoryConfig []VirtualRepositoryConfigState `json:"virtual_repository_config"`
}
