// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_artifact_registry_repository

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CleanupPolicies struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// CleanupPoliciesCondition: optional
	Condition *CleanupPoliciesCondition `hcl:"condition,block"`
	// CleanupPoliciesMostRecentVersions: optional
	MostRecentVersions *CleanupPoliciesMostRecentVersions `hcl:"most_recent_versions,block"`
}

type CleanupPoliciesCondition struct {
	// NewerThan: string, optional
	NewerThan terra.StringValue `hcl:"newer_than,attr"`
	// OlderThan: string, optional
	OlderThan terra.StringValue `hcl:"older_than,attr"`
	// PackageNamePrefixes: list of string, optional
	PackageNamePrefixes terra.ListValue[terra.StringValue] `hcl:"package_name_prefixes,attr"`
	// TagPrefixes: list of string, optional
	TagPrefixes terra.ListValue[terra.StringValue] `hcl:"tag_prefixes,attr"`
	// TagState: string, optional
	TagState terra.StringValue `hcl:"tag_state,attr"`
	// VersionNamePrefixes: list of string, optional
	VersionNamePrefixes terra.ListValue[terra.StringValue] `hcl:"version_name_prefixes,attr"`
}

type CleanupPoliciesMostRecentVersions struct {
	// KeepCount: number, optional
	KeepCount terra.NumberValue `hcl:"keep_count,attr"`
	// PackageNamePrefixes: list of string, optional
	PackageNamePrefixes terra.ListValue[terra.StringValue] `hcl:"package_name_prefixes,attr"`
}

type DockerConfig struct {
	// ImmutableTags: bool, optional
	ImmutableTags terra.BoolValue `hcl:"immutable_tags,attr"`
}

type MavenConfig struct {
	// AllowSnapshotOverwrites: bool, optional
	AllowSnapshotOverwrites terra.BoolValue `hcl:"allow_snapshot_overwrites,attr"`
	// VersionPolicy: string, optional
	VersionPolicy terra.StringValue `hcl:"version_policy,attr"`
}

type RemoteRepositoryConfig struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// RemoteRepositoryConfigAptRepository: optional
	AptRepository *RemoteRepositoryConfigAptRepository `hcl:"apt_repository,block"`
	// RemoteRepositoryConfigDockerRepository: optional
	DockerRepository *RemoteRepositoryConfigDockerRepository `hcl:"docker_repository,block"`
	// RemoteRepositoryConfigMavenRepository: optional
	MavenRepository *RemoteRepositoryConfigMavenRepository `hcl:"maven_repository,block"`
	// RemoteRepositoryConfigNpmRepository: optional
	NpmRepository *RemoteRepositoryConfigNpmRepository `hcl:"npm_repository,block"`
	// RemoteRepositoryConfigPythonRepository: optional
	PythonRepository *RemoteRepositoryConfigPythonRepository `hcl:"python_repository,block"`
	// RemoteRepositoryConfigUpstreamCredentials: optional
	UpstreamCredentials *RemoteRepositoryConfigUpstreamCredentials `hcl:"upstream_credentials,block"`
	// RemoteRepositoryConfigYumRepository: optional
	YumRepository *RemoteRepositoryConfigYumRepository `hcl:"yum_repository,block"`
}

type RemoteRepositoryConfigAptRepository struct {
	// RemoteRepositoryConfigAptRepositoryPublicRepository: optional
	PublicRepository *RemoteRepositoryConfigAptRepositoryPublicRepository `hcl:"public_repository,block"`
}

type RemoteRepositoryConfigAptRepositoryPublicRepository struct {
	// RepositoryBase: string, required
	RepositoryBase terra.StringValue `hcl:"repository_base,attr" validate:"required"`
	// RepositoryPath: string, required
	RepositoryPath terra.StringValue `hcl:"repository_path,attr" validate:"required"`
}

type RemoteRepositoryConfigDockerRepository struct {
	// PublicRepository: string, optional
	PublicRepository terra.StringValue `hcl:"public_repository,attr"`
}

type RemoteRepositoryConfigMavenRepository struct {
	// PublicRepository: string, optional
	PublicRepository terra.StringValue `hcl:"public_repository,attr"`
}

type RemoteRepositoryConfigNpmRepository struct {
	// PublicRepository: string, optional
	PublicRepository terra.StringValue `hcl:"public_repository,attr"`
}

type RemoteRepositoryConfigPythonRepository struct {
	// PublicRepository: string, optional
	PublicRepository terra.StringValue `hcl:"public_repository,attr"`
}

type RemoteRepositoryConfigUpstreamCredentials struct {
	// RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials: optional
	UsernamePasswordCredentials *RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials `hcl:"username_password_credentials,block"`
}

type RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials struct {
	// PasswordSecretVersion: string, optional
	PasswordSecretVersion terra.StringValue `hcl:"password_secret_version,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type RemoteRepositoryConfigYumRepository struct {
	// RemoteRepositoryConfigYumRepositoryPublicRepository: optional
	PublicRepository *RemoteRepositoryConfigYumRepositoryPublicRepository `hcl:"public_repository,block"`
}

type RemoteRepositoryConfigYumRepositoryPublicRepository struct {
	// RepositoryBase: string, required
	RepositoryBase terra.StringValue `hcl:"repository_base,attr" validate:"required"`
	// RepositoryPath: string, required
	RepositoryPath terra.StringValue `hcl:"repository_path,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VirtualRepositoryConfig struct {
	// VirtualRepositoryConfigUpstreamPolicies: min=0
	UpstreamPolicies []VirtualRepositoryConfigUpstreamPolicies `hcl:"upstream_policies,block" validate:"min=0"`
}

type VirtualRepositoryConfigUpstreamPolicies struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Repository: string, optional
	Repository terra.StringValue `hcl:"repository,attr"`
}

type CleanupPoliciesAttributes struct {
	ref terra.Reference
}

func (cp CleanupPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp CleanupPoliciesAttributes) InternalWithRef(ref terra.Reference) CleanupPoliciesAttributes {
	return CleanupPoliciesAttributes{ref: ref}
}

func (cp CleanupPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp CleanupPoliciesAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("action"))
}

func (cp CleanupPoliciesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("id"))
}

func (cp CleanupPoliciesAttributes) Condition() terra.ListValue[CleanupPoliciesConditionAttributes] {
	return terra.ReferenceAsList[CleanupPoliciesConditionAttributes](cp.ref.Append("condition"))
}

func (cp CleanupPoliciesAttributes) MostRecentVersions() terra.ListValue[CleanupPoliciesMostRecentVersionsAttributes] {
	return terra.ReferenceAsList[CleanupPoliciesMostRecentVersionsAttributes](cp.ref.Append("most_recent_versions"))
}

type CleanupPoliciesConditionAttributes struct {
	ref terra.Reference
}

func (c CleanupPoliciesConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CleanupPoliciesConditionAttributes) InternalWithRef(ref terra.Reference) CleanupPoliciesConditionAttributes {
	return CleanupPoliciesConditionAttributes{ref: ref}
}

func (c CleanupPoliciesConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CleanupPoliciesConditionAttributes) NewerThan() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("newer_than"))
}

func (c CleanupPoliciesConditionAttributes) OlderThan() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("older_than"))
}

func (c CleanupPoliciesConditionAttributes) PackageNamePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("package_name_prefixes"))
}

func (c CleanupPoliciesConditionAttributes) TagPrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("tag_prefixes"))
}

func (c CleanupPoliciesConditionAttributes) TagState() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("tag_state"))
}

func (c CleanupPoliciesConditionAttributes) VersionNamePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("version_name_prefixes"))
}

type CleanupPoliciesMostRecentVersionsAttributes struct {
	ref terra.Reference
}

func (mrv CleanupPoliciesMostRecentVersionsAttributes) InternalRef() (terra.Reference, error) {
	return mrv.ref, nil
}

func (mrv CleanupPoliciesMostRecentVersionsAttributes) InternalWithRef(ref terra.Reference) CleanupPoliciesMostRecentVersionsAttributes {
	return CleanupPoliciesMostRecentVersionsAttributes{ref: ref}
}

func (mrv CleanupPoliciesMostRecentVersionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mrv.ref.InternalTokens()
}

func (mrv CleanupPoliciesMostRecentVersionsAttributes) KeepCount() terra.NumberValue {
	return terra.ReferenceAsNumber(mrv.ref.Append("keep_count"))
}

func (mrv CleanupPoliciesMostRecentVersionsAttributes) PackageNamePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mrv.ref.Append("package_name_prefixes"))
}

type DockerConfigAttributes struct {
	ref terra.Reference
}

func (dc DockerConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DockerConfigAttributes) InternalWithRef(ref terra.Reference) DockerConfigAttributes {
	return DockerConfigAttributes{ref: ref}
}

func (dc DockerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DockerConfigAttributes) ImmutableTags() terra.BoolValue {
	return terra.ReferenceAsBool(dc.ref.Append("immutable_tags"))
}

type MavenConfigAttributes struct {
	ref terra.Reference
}

func (mc MavenConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MavenConfigAttributes) InternalWithRef(ref terra.Reference) MavenConfigAttributes {
	return MavenConfigAttributes{ref: ref}
}

func (mc MavenConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MavenConfigAttributes) AllowSnapshotOverwrites() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("allow_snapshot_overwrites"))
}

func (mc MavenConfigAttributes) VersionPolicy() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("version_policy"))
}

type RemoteRepositoryConfigAttributes struct {
	ref terra.Reference
}

func (rrc RemoteRepositoryConfigAttributes) InternalRef() (terra.Reference, error) {
	return rrc.ref, nil
}

func (rrc RemoteRepositoryConfigAttributes) InternalWithRef(ref terra.Reference) RemoteRepositoryConfigAttributes {
	return RemoteRepositoryConfigAttributes{ref: ref}
}

func (rrc RemoteRepositoryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rrc.ref.InternalTokens()
}

func (rrc RemoteRepositoryConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(rrc.ref.Append("description"))
}

func (rrc RemoteRepositoryConfigAttributes) AptRepository() terra.ListValue[RemoteRepositoryConfigAptRepositoryAttributes] {
	return terra.ReferenceAsList[RemoteRepositoryConfigAptRepositoryAttributes](rrc.ref.Append("apt_repository"))
}

func (rrc RemoteRepositoryConfigAttributes) DockerRepository() terra.ListValue[RemoteRepositoryConfigDockerRepositoryAttributes] {
	return terra.ReferenceAsList[RemoteRepositoryConfigDockerRepositoryAttributes](rrc.ref.Append("docker_repository"))
}

func (rrc RemoteRepositoryConfigAttributes) MavenRepository() terra.ListValue[RemoteRepositoryConfigMavenRepositoryAttributes] {
	return terra.ReferenceAsList[RemoteRepositoryConfigMavenRepositoryAttributes](rrc.ref.Append("maven_repository"))
}

func (rrc RemoteRepositoryConfigAttributes) NpmRepository() terra.ListValue[RemoteRepositoryConfigNpmRepositoryAttributes] {
	return terra.ReferenceAsList[RemoteRepositoryConfigNpmRepositoryAttributes](rrc.ref.Append("npm_repository"))
}

func (rrc RemoteRepositoryConfigAttributes) PythonRepository() terra.ListValue[RemoteRepositoryConfigPythonRepositoryAttributes] {
	return terra.ReferenceAsList[RemoteRepositoryConfigPythonRepositoryAttributes](rrc.ref.Append("python_repository"))
}

func (rrc RemoteRepositoryConfigAttributes) UpstreamCredentials() terra.ListValue[RemoteRepositoryConfigUpstreamCredentialsAttributes] {
	return terra.ReferenceAsList[RemoteRepositoryConfigUpstreamCredentialsAttributes](rrc.ref.Append("upstream_credentials"))
}

func (rrc RemoteRepositoryConfigAttributes) YumRepository() terra.ListValue[RemoteRepositoryConfigYumRepositoryAttributes] {
	return terra.ReferenceAsList[RemoteRepositoryConfigYumRepositoryAttributes](rrc.ref.Append("yum_repository"))
}

type RemoteRepositoryConfigAptRepositoryAttributes struct {
	ref terra.Reference
}

func (ar RemoteRepositoryConfigAptRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return ar.ref, nil
}

func (ar RemoteRepositoryConfigAptRepositoryAttributes) InternalWithRef(ref terra.Reference) RemoteRepositoryConfigAptRepositoryAttributes {
	return RemoteRepositoryConfigAptRepositoryAttributes{ref: ref}
}

func (ar RemoteRepositoryConfigAptRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ar.ref.InternalTokens()
}

func (ar RemoteRepositoryConfigAptRepositoryAttributes) PublicRepository() terra.ListValue[RemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes] {
	return terra.ReferenceAsList[RemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes](ar.ref.Append("public_repository"))
}

type RemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes struct {
	ref terra.Reference
}

func (pr RemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr RemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes) InternalWithRef(ref terra.Reference) RemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes {
	return RemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes{ref: ref}
}

func (pr RemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr RemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes) RepositoryBase() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("repository_base"))
}

func (pr RemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes) RepositoryPath() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("repository_path"))
}

type RemoteRepositoryConfigDockerRepositoryAttributes struct {
	ref terra.Reference
}

func (dr RemoteRepositoryConfigDockerRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr RemoteRepositoryConfigDockerRepositoryAttributes) InternalWithRef(ref terra.Reference) RemoteRepositoryConfigDockerRepositoryAttributes {
	return RemoteRepositoryConfigDockerRepositoryAttributes{ref: ref}
}

func (dr RemoteRepositoryConfigDockerRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr RemoteRepositoryConfigDockerRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("public_repository"))
}

type RemoteRepositoryConfigMavenRepositoryAttributes struct {
	ref terra.Reference
}

func (mr RemoteRepositoryConfigMavenRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr RemoteRepositoryConfigMavenRepositoryAttributes) InternalWithRef(ref terra.Reference) RemoteRepositoryConfigMavenRepositoryAttributes {
	return RemoteRepositoryConfigMavenRepositoryAttributes{ref: ref}
}

func (mr RemoteRepositoryConfigMavenRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr RemoteRepositoryConfigMavenRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("public_repository"))
}

type RemoteRepositoryConfigNpmRepositoryAttributes struct {
	ref terra.Reference
}

func (nr RemoteRepositoryConfigNpmRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return nr.ref, nil
}

func (nr RemoteRepositoryConfigNpmRepositoryAttributes) InternalWithRef(ref terra.Reference) RemoteRepositoryConfigNpmRepositoryAttributes {
	return RemoteRepositoryConfigNpmRepositoryAttributes{ref: ref}
}

func (nr RemoteRepositoryConfigNpmRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nr.ref.InternalTokens()
}

func (nr RemoteRepositoryConfigNpmRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(nr.ref.Append("public_repository"))
}

type RemoteRepositoryConfigPythonRepositoryAttributes struct {
	ref terra.Reference
}

func (pr RemoteRepositoryConfigPythonRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr RemoteRepositoryConfigPythonRepositoryAttributes) InternalWithRef(ref terra.Reference) RemoteRepositoryConfigPythonRepositoryAttributes {
	return RemoteRepositoryConfigPythonRepositoryAttributes{ref: ref}
}

func (pr RemoteRepositoryConfigPythonRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr RemoteRepositoryConfigPythonRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("public_repository"))
}

type RemoteRepositoryConfigUpstreamCredentialsAttributes struct {
	ref terra.Reference
}

func (uc RemoteRepositoryConfigUpstreamCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return uc.ref, nil
}

func (uc RemoteRepositoryConfigUpstreamCredentialsAttributes) InternalWithRef(ref terra.Reference) RemoteRepositoryConfigUpstreamCredentialsAttributes {
	return RemoteRepositoryConfigUpstreamCredentialsAttributes{ref: ref}
}

func (uc RemoteRepositoryConfigUpstreamCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uc.ref.InternalTokens()
}

func (uc RemoteRepositoryConfigUpstreamCredentialsAttributes) UsernamePasswordCredentials() terra.ListValue[RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes] {
	return terra.ReferenceAsList[RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes](uc.ref.Append("username_password_credentials"))
}

type RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes struct {
	ref terra.Reference
}

func (upc RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return upc.ref, nil
}

func (upc RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes) InternalWithRef(ref terra.Reference) RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes {
	return RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes{ref: ref}
}

func (upc RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return upc.ref.InternalTokens()
}

func (upc RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes) PasswordSecretVersion() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("password_secret_version"))
}

func (upc RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("username"))
}

type RemoteRepositoryConfigYumRepositoryAttributes struct {
	ref terra.Reference
}

func (yr RemoteRepositoryConfigYumRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return yr.ref, nil
}

func (yr RemoteRepositoryConfigYumRepositoryAttributes) InternalWithRef(ref terra.Reference) RemoteRepositoryConfigYumRepositoryAttributes {
	return RemoteRepositoryConfigYumRepositoryAttributes{ref: ref}
}

func (yr RemoteRepositoryConfigYumRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return yr.ref.InternalTokens()
}

func (yr RemoteRepositoryConfigYumRepositoryAttributes) PublicRepository() terra.ListValue[RemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes] {
	return terra.ReferenceAsList[RemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes](yr.ref.Append("public_repository"))
}

type RemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes struct {
	ref terra.Reference
}

func (pr RemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr RemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes) InternalWithRef(ref terra.Reference) RemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes {
	return RemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes{ref: ref}
}

func (pr RemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr RemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes) RepositoryBase() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("repository_base"))
}

func (pr RemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes) RepositoryPath() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("repository_path"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VirtualRepositoryConfigAttributes struct {
	ref terra.Reference
}

func (vrc VirtualRepositoryConfigAttributes) InternalRef() (terra.Reference, error) {
	return vrc.ref, nil
}

func (vrc VirtualRepositoryConfigAttributes) InternalWithRef(ref terra.Reference) VirtualRepositoryConfigAttributes {
	return VirtualRepositoryConfigAttributes{ref: ref}
}

func (vrc VirtualRepositoryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vrc.ref.InternalTokens()
}

func (vrc VirtualRepositoryConfigAttributes) UpstreamPolicies() terra.ListValue[VirtualRepositoryConfigUpstreamPoliciesAttributes] {
	return terra.ReferenceAsList[VirtualRepositoryConfigUpstreamPoliciesAttributes](vrc.ref.Append("upstream_policies"))
}

type VirtualRepositoryConfigUpstreamPoliciesAttributes struct {
	ref terra.Reference
}

func (up VirtualRepositoryConfigUpstreamPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return up.ref, nil
}

func (up VirtualRepositoryConfigUpstreamPoliciesAttributes) InternalWithRef(ref terra.Reference) VirtualRepositoryConfigUpstreamPoliciesAttributes {
	return VirtualRepositoryConfigUpstreamPoliciesAttributes{ref: ref}
}

func (up VirtualRepositoryConfigUpstreamPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return up.ref.InternalTokens()
}

func (up VirtualRepositoryConfigUpstreamPoliciesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("id"))
}

func (up VirtualRepositoryConfigUpstreamPoliciesAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(up.ref.Append("priority"))
}

func (up VirtualRepositoryConfigUpstreamPoliciesAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("repository"))
}

type CleanupPoliciesState struct {
	Action             string                                   `json:"action"`
	Id                 string                                   `json:"id"`
	Condition          []CleanupPoliciesConditionState          `json:"condition"`
	MostRecentVersions []CleanupPoliciesMostRecentVersionsState `json:"most_recent_versions"`
}

type CleanupPoliciesConditionState struct {
	NewerThan           string   `json:"newer_than"`
	OlderThan           string   `json:"older_than"`
	PackageNamePrefixes []string `json:"package_name_prefixes"`
	TagPrefixes         []string `json:"tag_prefixes"`
	TagState            string   `json:"tag_state"`
	VersionNamePrefixes []string `json:"version_name_prefixes"`
}

type CleanupPoliciesMostRecentVersionsState struct {
	KeepCount           float64  `json:"keep_count"`
	PackageNamePrefixes []string `json:"package_name_prefixes"`
}

type DockerConfigState struct {
	ImmutableTags bool `json:"immutable_tags"`
}

type MavenConfigState struct {
	AllowSnapshotOverwrites bool   `json:"allow_snapshot_overwrites"`
	VersionPolicy           string `json:"version_policy"`
}

type RemoteRepositoryConfigState struct {
	Description         string                                           `json:"description"`
	AptRepository       []RemoteRepositoryConfigAptRepositoryState       `json:"apt_repository"`
	DockerRepository    []RemoteRepositoryConfigDockerRepositoryState    `json:"docker_repository"`
	MavenRepository     []RemoteRepositoryConfigMavenRepositoryState     `json:"maven_repository"`
	NpmRepository       []RemoteRepositoryConfigNpmRepositoryState       `json:"npm_repository"`
	PythonRepository    []RemoteRepositoryConfigPythonRepositoryState    `json:"python_repository"`
	UpstreamCredentials []RemoteRepositoryConfigUpstreamCredentialsState `json:"upstream_credentials"`
	YumRepository       []RemoteRepositoryConfigYumRepositoryState       `json:"yum_repository"`
}

type RemoteRepositoryConfigAptRepositoryState struct {
	PublicRepository []RemoteRepositoryConfigAptRepositoryPublicRepositoryState `json:"public_repository"`
}

type RemoteRepositoryConfigAptRepositoryPublicRepositoryState struct {
	RepositoryBase string `json:"repository_base"`
	RepositoryPath string `json:"repository_path"`
}

type RemoteRepositoryConfigDockerRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type RemoteRepositoryConfigMavenRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type RemoteRepositoryConfigNpmRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type RemoteRepositoryConfigPythonRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type RemoteRepositoryConfigUpstreamCredentialsState struct {
	UsernamePasswordCredentials []RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsState `json:"username_password_credentials"`
}

type RemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsState struct {
	PasswordSecretVersion string `json:"password_secret_version"`
	Username              string `json:"username"`
}

type RemoteRepositoryConfigYumRepositoryState struct {
	PublicRepository []RemoteRepositoryConfigYumRepositoryPublicRepositoryState `json:"public_repository"`
}

type RemoteRepositoryConfigYumRepositoryPublicRepositoryState struct {
	RepositoryBase string `json:"repository_base"`
	RepositoryPath string `json:"repository_path"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VirtualRepositoryConfigState struct {
	UpstreamPolicies []VirtualRepositoryConfigUpstreamPoliciesState `json:"upstream_policies"`
}

type VirtualRepositoryConfigUpstreamPoliciesState struct {
	Id         string  `json:"id"`
	Priority   float64 `json:"priority"`
	Repository string  `json:"repository"`
}
