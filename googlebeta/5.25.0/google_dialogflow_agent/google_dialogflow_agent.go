// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dialogflow_agent

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dialogflow_agent.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDialogflowAgentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gda *Resource) Type() string {
	return "google_dialogflow_agent"
}

// LocalName returns the local name for [Resource].
func (gda *Resource) LocalName() string {
	return gda.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gda *Resource) Configuration() interface{} {
	return gda.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gda *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gda)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gda *Resource) Dependencies() terra.Dependencies {
	return gda.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gda *Resource) LifecycleManagement() *terra.Lifecycle {
	return gda.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gda *Resource) Attributes() googleDialogflowAgentAttributes {
	return googleDialogflowAgentAttributes{ref: terra.ReferenceResource(gda)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gda *Resource) ImportState(state io.Reader) error {
	gda.state = &googleDialogflowAgentState{}
	if err := json.NewDecoder(state).Decode(gda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gda.Type(), gda.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gda *Resource) State() (*googleDialogflowAgentState, bool) {
	return gda.state, gda.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gda *Resource) StateMust() *googleDialogflowAgentState {
	if gda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gda.Type(), gda.LocalName()))
	}
	return gda.state
}

// Args contains the configurations for google_dialogflow_agent.
type Args struct {
	// ApiVersion: string, optional
	ApiVersion terra.StringValue `hcl:"api_version,attr"`
	// AvatarUri: string, optional
	AvatarUri terra.StringValue `hcl:"avatar_uri,attr"`
	// ClassificationThreshold: number, optional
	ClassificationThreshold terra.NumberValue `hcl:"classification_threshold,attr"`
	// DefaultLanguageCode: string, required
	DefaultLanguageCode terra.StringValue `hcl:"default_language_code,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// EnableLogging: bool, optional
	EnableLogging terra.BoolValue `hcl:"enable_logging,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MatchMode: string, optional
	MatchMode terra.StringValue `hcl:"match_mode,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SupportedLanguageCodes: list of string, optional
	SupportedLanguageCodes terra.ListValue[terra.StringValue] `hcl:"supported_language_codes,attr"`
	// Tier: string, optional
	Tier terra.StringValue `hcl:"tier,attr"`
	// TimeZone: string, required
	TimeZone terra.StringValue `hcl:"time_zone,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDialogflowAgentAttributes struct {
	ref terra.Reference
}

// ApiVersion returns a reference to field api_version of google_dialogflow_agent.
func (gda googleDialogflowAgentAttributes) ApiVersion() terra.StringValue {
	return terra.ReferenceAsString(gda.ref.Append("api_version"))
}

// AvatarUri returns a reference to field avatar_uri of google_dialogflow_agent.
func (gda googleDialogflowAgentAttributes) AvatarUri() terra.StringValue {
	return terra.ReferenceAsString(gda.ref.Append("avatar_uri"))
}

// AvatarUriBackend returns a reference to field avatar_uri_backend of google_dialogflow_agent.
func (gda googleDialogflowAgentAttributes) AvatarUriBackend() terra.StringValue {
	return terra.ReferenceAsString(gda.ref.Append("avatar_uri_backend"))
}

// ClassificationThreshold returns a reference to field classification_threshold of google_dialogflow_agent.
func (gda googleDialogflowAgentAttributes) ClassificationThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(gda.ref.Append("classification_threshold"))
}

// DefaultLanguageCode returns a reference to field default_language_code of google_dialogflow_agent.
func (gda googleDialogflowAgentAttributes) DefaultLanguageCode() terra.StringValue {
	return terra.ReferenceAsString(gda.ref.Append("default_language_code"))
}

// Description returns a reference to field description of google_dialogflow_agent.
func (gda googleDialogflowAgentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gda.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_dialogflow_agent.
func (gda googleDialogflowAgentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gda.ref.Append("display_name"))
}

// EnableLogging returns a reference to field enable_logging of google_dialogflow_agent.
func (gda googleDialogflowAgentAttributes) EnableLogging() terra.BoolValue {
	return terra.ReferenceAsBool(gda.ref.Append("enable_logging"))
}

// Id returns a reference to field id of google_dialogflow_agent.
func (gda googleDialogflowAgentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gda.ref.Append("id"))
}

// MatchMode returns a reference to field match_mode of google_dialogflow_agent.
func (gda googleDialogflowAgentAttributes) MatchMode() terra.StringValue {
	return terra.ReferenceAsString(gda.ref.Append("match_mode"))
}

// Project returns a reference to field project of google_dialogflow_agent.
func (gda googleDialogflowAgentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gda.ref.Append("project"))
}

// SupportedLanguageCodes returns a reference to field supported_language_codes of google_dialogflow_agent.
func (gda googleDialogflowAgentAttributes) SupportedLanguageCodes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gda.ref.Append("supported_language_codes"))
}

// Tier returns a reference to field tier of google_dialogflow_agent.
func (gda googleDialogflowAgentAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(gda.ref.Append("tier"))
}

// TimeZone returns a reference to field time_zone of google_dialogflow_agent.
func (gda googleDialogflowAgentAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(gda.ref.Append("time_zone"))
}

func (gda googleDialogflowAgentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gda.ref.Append("timeouts"))
}

type googleDialogflowAgentState struct {
	ApiVersion              string         `json:"api_version"`
	AvatarUri               string         `json:"avatar_uri"`
	AvatarUriBackend        string         `json:"avatar_uri_backend"`
	ClassificationThreshold float64        `json:"classification_threshold"`
	DefaultLanguageCode     string         `json:"default_language_code"`
	Description             string         `json:"description"`
	DisplayName             string         `json:"display_name"`
	EnableLogging           bool           `json:"enable_logging"`
	Id                      string         `json:"id"`
	MatchMode               string         `json:"match_mode"`
	Project                 string         `json:"project"`
	SupportedLanguageCodes  []string       `json:"supported_language_codes"`
	Tier                    string         `json:"tier"`
	TimeZone                string         `json:"time_zone"`
	Timeouts                *TimeoutsState `json:"timeouts"`
}
