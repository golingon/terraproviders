// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_iam_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataAuditConfig struct {
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// AuditConfigAuditLogConfigs: min=1
	AuditLogConfigs []DataAuditConfigAuditLogConfigs `hcl:"audit_log_configs,block" validate:"min=1"`
}

type DataAuditConfigAuditLogConfigs struct {
	// ExemptedMembers: set of string, optional
	ExemptedMembers terra.SetValue[terra.StringValue] `hcl:"exempted_members,attr"`
	// LogType: string, required
	LogType terra.StringValue `hcl:"log_type,attr" validate:"required"`
}

type DataBinding struct {
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// BindingCondition: optional
	Condition *DataBindingCondition `hcl:"condition,block"`
}

type DataBindingCondition struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Expression: string, required
	Expression terra.StringValue `hcl:"expression,attr" validate:"required"`
	// Title: string, required
	Title terra.StringValue `hcl:"title,attr" validate:"required"`
}

type DataAuditConfigAttributes struct {
	ref terra.Reference
}

func (ac DataAuditConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac DataAuditConfigAttributes) InternalWithRef(ref terra.Reference) DataAuditConfigAttributes {
	return DataAuditConfigAttributes{ref: ref}
}

func (ac DataAuditConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac DataAuditConfigAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("service"))
}

func (ac DataAuditConfigAttributes) AuditLogConfigs() terra.SetValue[DataAuditConfigAuditLogConfigsAttributes] {
	return terra.ReferenceAsSet[DataAuditConfigAuditLogConfigsAttributes](ac.ref.Append("audit_log_configs"))
}

type DataAuditConfigAuditLogConfigsAttributes struct {
	ref terra.Reference
}

func (alc DataAuditConfigAuditLogConfigsAttributes) InternalRef() (terra.Reference, error) {
	return alc.ref, nil
}

func (alc DataAuditConfigAuditLogConfigsAttributes) InternalWithRef(ref terra.Reference) DataAuditConfigAuditLogConfigsAttributes {
	return DataAuditConfigAuditLogConfigsAttributes{ref: ref}
}

func (alc DataAuditConfigAuditLogConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alc.ref.InternalTokens()
}

func (alc DataAuditConfigAuditLogConfigsAttributes) ExemptedMembers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](alc.ref.Append("exempted_members"))
}

func (alc DataAuditConfigAuditLogConfigsAttributes) LogType() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("log_type"))
}

type DataBindingAttributes struct {
	ref terra.Reference
}

func (b DataBindingAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b DataBindingAttributes) InternalWithRef(ref terra.Reference) DataBindingAttributes {
	return DataBindingAttributes{ref: ref}
}

func (b DataBindingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b DataBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](b.ref.Append("members"))
}

func (b DataBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("role"))
}

func (b DataBindingAttributes) Condition() terra.ListValue[DataBindingConditionAttributes] {
	return terra.ReferenceAsList[DataBindingConditionAttributes](b.ref.Append("condition"))
}

type DataBindingConditionAttributes struct {
	ref terra.Reference
}

func (c DataBindingConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataBindingConditionAttributes) InternalWithRef(ref terra.Reference) DataBindingConditionAttributes {
	return DataBindingConditionAttributes{ref: ref}
}

func (c DataBindingConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataBindingConditionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("description"))
}

func (c DataBindingConditionAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("expression"))
}

func (c DataBindingConditionAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("title"))
}

type DataAuditConfigState struct {
	Service         string                                `json:"service"`
	AuditLogConfigs []DataAuditConfigAuditLogConfigsState `json:"audit_log_configs"`
}

type DataAuditConfigAuditLogConfigsState struct {
	ExemptedMembers []string `json:"exempted_members"`
	LogType         string   `json:"log_type"`
}

type DataBindingState struct {
	Members   []string                    `json:"members"`
	Role      string                      `json:"role"`
	Condition []DataBindingConditionState `json:"condition"`
}

type DataBindingConditionState struct {
	Description string `json:"description"`
	Expression  string `json:"expression"`
	Title       string `json:"title"`
}
