// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_kms_ekm_connection

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ServiceResolvers struct {
	// EndpointFilter: string, optional
	EndpointFilter terra.StringValue `hcl:"endpoint_filter,attr"`
	// Hostname: string, required
	Hostname terra.StringValue `hcl:"hostname,attr" validate:"required"`
	// ServiceDirectoryService: string, required
	ServiceDirectoryService terra.StringValue `hcl:"service_directory_service,attr" validate:"required"`
	// ServiceResolversServerCertificates: min=1
	ServerCertificates []ServiceResolversServerCertificates `hcl:"server_certificates,block" validate:"min=1"`
}

type ServiceResolversServerCertificates struct {
	// RawDer: string, required
	RawDer terra.StringValue `hcl:"raw_der,attr" validate:"required"`
	// SubjectAlternativeDnsNames: list of string, optional
	SubjectAlternativeDnsNames terra.ListValue[terra.StringValue] `hcl:"subject_alternative_dns_names,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ServiceResolversAttributes struct {
	ref terra.Reference
}

func (sr ServiceResolversAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr ServiceResolversAttributes) InternalWithRef(ref terra.Reference) ServiceResolversAttributes {
	return ServiceResolversAttributes{ref: ref}
}

func (sr ServiceResolversAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr ServiceResolversAttributes) EndpointFilter() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("endpoint_filter"))
}

func (sr ServiceResolversAttributes) Hostname() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("hostname"))
}

func (sr ServiceResolversAttributes) ServiceDirectoryService() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("service_directory_service"))
}

func (sr ServiceResolversAttributes) ServerCertificates() terra.ListValue[ServiceResolversServerCertificatesAttributes] {
	return terra.ReferenceAsList[ServiceResolversServerCertificatesAttributes](sr.ref.Append("server_certificates"))
}

type ServiceResolversServerCertificatesAttributes struct {
	ref terra.Reference
}

func (sc ServiceResolversServerCertificatesAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc ServiceResolversServerCertificatesAttributes) InternalWithRef(ref terra.Reference) ServiceResolversServerCertificatesAttributes {
	return ServiceResolversServerCertificatesAttributes{ref: ref}
}

func (sc ServiceResolversServerCertificatesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc ServiceResolversServerCertificatesAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("issuer"))
}

func (sc ServiceResolversServerCertificatesAttributes) NotAfterTime() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("not_after_time"))
}

func (sc ServiceResolversServerCertificatesAttributes) NotBeforeTime() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("not_before_time"))
}

func (sc ServiceResolversServerCertificatesAttributes) Parsed() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("parsed"))
}

func (sc ServiceResolversServerCertificatesAttributes) RawDer() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("raw_der"))
}

func (sc ServiceResolversServerCertificatesAttributes) SerialNumber() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("serial_number"))
}

func (sc ServiceResolversServerCertificatesAttributes) Sha256Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("sha256_fingerprint"))
}

func (sc ServiceResolversServerCertificatesAttributes) Subject() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("subject"))
}

func (sc ServiceResolversServerCertificatesAttributes) SubjectAlternativeDnsNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sc.ref.Append("subject_alternative_dns_names"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ServiceResolversState struct {
	EndpointFilter          string                                    `json:"endpoint_filter"`
	Hostname                string                                    `json:"hostname"`
	ServiceDirectoryService string                                    `json:"service_directory_service"`
	ServerCertificates      []ServiceResolversServerCertificatesState `json:"server_certificates"`
}

type ServiceResolversServerCertificatesState struct {
	Issuer                     string   `json:"issuer"`
	NotAfterTime               string   `json:"not_after_time"`
	NotBeforeTime              string   `json:"not_before_time"`
	Parsed                     bool     `json:"parsed"`
	RawDer                     string   `json:"raw_der"`
	SerialNumber               string   `json:"serial_number"`
	Sha256Fingerprint          string   `json:"sha256_fingerprint"`
	Subject                    string   `json:"subject"`
	SubjectAlternativeDnsNames []string `json:"subject_alternative_dns_names"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
