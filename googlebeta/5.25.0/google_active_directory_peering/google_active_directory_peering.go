// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_active_directory_peering

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_active_directory_peering.
type Resource struct {
	Name      string
	Args      Args
	state     *googleActiveDirectoryPeeringState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gadp *Resource) Type() string {
	return "google_active_directory_peering"
}

// LocalName returns the local name for [Resource].
func (gadp *Resource) LocalName() string {
	return gadp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gadp *Resource) Configuration() interface{} {
	return gadp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gadp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gadp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gadp *Resource) Dependencies() terra.Dependencies {
	return gadp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gadp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gadp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gadp *Resource) Attributes() googleActiveDirectoryPeeringAttributes {
	return googleActiveDirectoryPeeringAttributes{ref: terra.ReferenceResource(gadp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gadp *Resource) ImportState(state io.Reader) error {
	gadp.state = &googleActiveDirectoryPeeringState{}
	if err := json.NewDecoder(state).Decode(gadp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gadp.Type(), gadp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gadp *Resource) State() (*googleActiveDirectoryPeeringState, bool) {
	return gadp.state, gadp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gadp *Resource) StateMust() *googleActiveDirectoryPeeringState {
	if gadp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gadp.Type(), gadp.LocalName()))
	}
	return gadp.state
}

// Args contains the configurations for google_active_directory_peering.
type Args struct {
	// AuthorizedNetwork: string, required
	AuthorizedNetwork terra.StringValue `hcl:"authorized_network,attr" validate:"required"`
	// DomainResource: string, required
	DomainResource terra.StringValue `hcl:"domain_resource,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// PeeringId: string, required
	PeeringId terra.StringValue `hcl:"peering_id,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// StatusMessage: string, optional
	StatusMessage terra.StringValue `hcl:"status_message,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleActiveDirectoryPeeringAttributes struct {
	ref terra.Reference
}

// AuthorizedNetwork returns a reference to field authorized_network of google_active_directory_peering.
func (gadp googleActiveDirectoryPeeringAttributes) AuthorizedNetwork() terra.StringValue {
	return terra.ReferenceAsString(gadp.ref.Append("authorized_network"))
}

// DomainResource returns a reference to field domain_resource of google_active_directory_peering.
func (gadp googleActiveDirectoryPeeringAttributes) DomainResource() terra.StringValue {
	return terra.ReferenceAsString(gadp.ref.Append("domain_resource"))
}

// EffectiveLabels returns a reference to field effective_labels of google_active_directory_peering.
func (gadp googleActiveDirectoryPeeringAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gadp.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_active_directory_peering.
func (gadp googleActiveDirectoryPeeringAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gadp.ref.Append("id"))
}

// Labels returns a reference to field labels of google_active_directory_peering.
func (gadp googleActiveDirectoryPeeringAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gadp.ref.Append("labels"))
}

// Name returns a reference to field name of google_active_directory_peering.
func (gadp googleActiveDirectoryPeeringAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gadp.ref.Append("name"))
}

// PeeringId returns a reference to field peering_id of google_active_directory_peering.
func (gadp googleActiveDirectoryPeeringAttributes) PeeringId() terra.StringValue {
	return terra.ReferenceAsString(gadp.ref.Append("peering_id"))
}

// Project returns a reference to field project of google_active_directory_peering.
func (gadp googleActiveDirectoryPeeringAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gadp.ref.Append("project"))
}

// Status returns a reference to field status of google_active_directory_peering.
func (gadp googleActiveDirectoryPeeringAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(gadp.ref.Append("status"))
}

// StatusMessage returns a reference to field status_message of google_active_directory_peering.
func (gadp googleActiveDirectoryPeeringAttributes) StatusMessage() terra.StringValue {
	return terra.ReferenceAsString(gadp.ref.Append("status_message"))
}

// TerraformLabels returns a reference to field terraform_labels of google_active_directory_peering.
func (gadp googleActiveDirectoryPeeringAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gadp.ref.Append("terraform_labels"))
}

func (gadp googleActiveDirectoryPeeringAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gadp.ref.Append("timeouts"))
}

type googleActiveDirectoryPeeringState struct {
	AuthorizedNetwork string            `json:"authorized_network"`
	DomainResource    string            `json:"domain_resource"`
	EffectiveLabels   map[string]string `json:"effective_labels"`
	Id                string            `json:"id"`
	Labels            map[string]string `json:"labels"`
	Name              string            `json:"name"`
	PeeringId         string            `json:"peering_id"`
	Project           string            `json:"project"`
	Status            string            `json:"status"`
	StatusMessage     string            `json:"status_message"`
	TerraformLabels   map[string]string `json:"terraform_labels"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
