// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apigee_target_server

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_apigee_target_server.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApigeeTargetServerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gats *Resource) Type() string {
	return "google_apigee_target_server"
}

// LocalName returns the local name for [Resource].
func (gats *Resource) LocalName() string {
	return gats.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gats *Resource) Configuration() interface{} {
	return gats.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gats *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gats)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gats *Resource) Dependencies() terra.Dependencies {
	return gats.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gats *Resource) LifecycleManagement() *terra.Lifecycle {
	return gats.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gats *Resource) Attributes() googleApigeeTargetServerAttributes {
	return googleApigeeTargetServerAttributes{ref: terra.ReferenceResource(gats)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gats *Resource) ImportState(state io.Reader) error {
	gats.state = &googleApigeeTargetServerState{}
	if err := json.NewDecoder(state).Decode(gats.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gats.Type(), gats.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gats *Resource) State() (*googleApigeeTargetServerState, bool) {
	return gats.state, gats.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gats *Resource) StateMust() *googleApigeeTargetServerState {
	if gats.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gats.Type(), gats.LocalName()))
	}
	return gats.state
}

// Args contains the configurations for google_apigee_target_server.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnvId: string, required
	EnvId terra.StringValue `hcl:"env_id,attr" validate:"required"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsEnabled: bool, optional
	IsEnabled terra.BoolValue `hcl:"is_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// SSlInfo: optional
	SSlInfo *SSlInfo `hcl:"s_sl_info,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApigeeTargetServerAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_apigee_target_server.
func (gats googleApigeeTargetServerAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gats.ref.Append("description"))
}

// EnvId returns a reference to field env_id of google_apigee_target_server.
func (gats googleApigeeTargetServerAttributes) EnvId() terra.StringValue {
	return terra.ReferenceAsString(gats.ref.Append("env_id"))
}

// Host returns a reference to field host of google_apigee_target_server.
func (gats googleApigeeTargetServerAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(gats.ref.Append("host"))
}

// Id returns a reference to field id of google_apigee_target_server.
func (gats googleApigeeTargetServerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gats.ref.Append("id"))
}

// IsEnabled returns a reference to field is_enabled of google_apigee_target_server.
func (gats googleApigeeTargetServerAttributes) IsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(gats.ref.Append("is_enabled"))
}

// Name returns a reference to field name of google_apigee_target_server.
func (gats googleApigeeTargetServerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gats.ref.Append("name"))
}

// Port returns a reference to field port of google_apigee_target_server.
func (gats googleApigeeTargetServerAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(gats.ref.Append("port"))
}

// Protocol returns a reference to field protocol of google_apigee_target_server.
func (gats googleApigeeTargetServerAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(gats.ref.Append("protocol"))
}

func (gats googleApigeeTargetServerAttributes) SSlInfo() terra.ListValue[SSlInfoAttributes] {
	return terra.ReferenceAsList[SSlInfoAttributes](gats.ref.Append("s_sl_info"))
}

func (gats googleApigeeTargetServerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gats.ref.Append("timeouts"))
}

type googleApigeeTargetServerState struct {
	Description string         `json:"description"`
	EnvId       string         `json:"env_id"`
	Host        string         `json:"host"`
	Id          string         `json:"id"`
	IsEnabled   bool           `json:"is_enabled"`
	Name        string         `json:"name"`
	Port        float64        `json:"port"`
	Protocol    string         `json:"protocol"`
	SSlInfo     []SSlInfoState `json:"s_sl_info"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
