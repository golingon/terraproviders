// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_org_policy_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DryRunSpec struct {
	// InheritFromParent: bool, optional
	InheritFromParent terra.BoolValue `hcl:"inherit_from_parent,attr"`
	// Reset: bool, optional
	Reset terra.BoolValue `hcl:"reset,attr"`
	// DryRunSpecRules: min=0
	Rules []DryRunSpecRules `hcl:"rules,block" validate:"min=0"`
}

type DryRunSpecRules struct {
	// AllowAll: string, optional
	AllowAll terra.StringValue `hcl:"allow_all,attr"`
	// DenyAll: string, optional
	DenyAll terra.StringValue `hcl:"deny_all,attr"`
	// Enforce: string, optional
	Enforce terra.StringValue `hcl:"enforce,attr"`
	// DryRunSpecRulesCondition: optional
	Condition *DryRunSpecRulesCondition `hcl:"condition,block"`
	// DryRunSpecRulesValues: optional
	Values *DryRunSpecRulesValues `hcl:"values,block"`
}

type DryRunSpecRulesCondition struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Expression: string, optional
	Expression terra.StringValue `hcl:"expression,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Title: string, optional
	Title terra.StringValue `hcl:"title,attr"`
}

type DryRunSpecRulesValues struct {
	// AllowedValues: list of string, optional
	AllowedValues terra.ListValue[terra.StringValue] `hcl:"allowed_values,attr"`
	// DeniedValues: list of string, optional
	DeniedValues terra.ListValue[terra.StringValue] `hcl:"denied_values,attr"`
}

type Spec struct {
	// InheritFromParent: bool, optional
	InheritFromParent terra.BoolValue `hcl:"inherit_from_parent,attr"`
	// Reset: bool, optional
	Reset terra.BoolValue `hcl:"reset,attr"`
	// SpecRules: min=0
	Rules []SpecRules `hcl:"rules,block" validate:"min=0"`
}

type SpecRules struct {
	// AllowAll: string, optional
	AllowAll terra.StringValue `hcl:"allow_all,attr"`
	// DenyAll: string, optional
	DenyAll terra.StringValue `hcl:"deny_all,attr"`
	// Enforce: string, optional
	Enforce terra.StringValue `hcl:"enforce,attr"`
	// SpecRulesCondition: optional
	Condition *SpecRulesCondition `hcl:"condition,block"`
	// SpecRulesValues: optional
	Values *SpecRulesValues `hcl:"values,block"`
}

type SpecRulesCondition struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Expression: string, optional
	Expression terra.StringValue `hcl:"expression,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Title: string, optional
	Title terra.StringValue `hcl:"title,attr"`
}

type SpecRulesValues struct {
	// AllowedValues: list of string, optional
	AllowedValues terra.ListValue[terra.StringValue] `hcl:"allowed_values,attr"`
	// DeniedValues: list of string, optional
	DeniedValues terra.ListValue[terra.StringValue] `hcl:"denied_values,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DryRunSpecAttributes struct {
	ref terra.Reference
}

func (drs DryRunSpecAttributes) InternalRef() (terra.Reference, error) {
	return drs.ref, nil
}

func (drs DryRunSpecAttributes) InternalWithRef(ref terra.Reference) DryRunSpecAttributes {
	return DryRunSpecAttributes{ref: ref}
}

func (drs DryRunSpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return drs.ref.InternalTokens()
}

func (drs DryRunSpecAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(drs.ref.Append("etag"))
}

func (drs DryRunSpecAttributes) InheritFromParent() terra.BoolValue {
	return terra.ReferenceAsBool(drs.ref.Append("inherit_from_parent"))
}

func (drs DryRunSpecAttributes) Reset() terra.BoolValue {
	return terra.ReferenceAsBool(drs.ref.Append("reset"))
}

func (drs DryRunSpecAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(drs.ref.Append("update_time"))
}

func (drs DryRunSpecAttributes) Rules() terra.ListValue[DryRunSpecRulesAttributes] {
	return terra.ReferenceAsList[DryRunSpecRulesAttributes](drs.ref.Append("rules"))
}

type DryRunSpecRulesAttributes struct {
	ref terra.Reference
}

func (r DryRunSpecRulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DryRunSpecRulesAttributes) InternalWithRef(ref terra.Reference) DryRunSpecRulesAttributes {
	return DryRunSpecRulesAttributes{ref: ref}
}

func (r DryRunSpecRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DryRunSpecRulesAttributes) AllowAll() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("allow_all"))
}

func (r DryRunSpecRulesAttributes) DenyAll() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("deny_all"))
}

func (r DryRunSpecRulesAttributes) Enforce() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("enforce"))
}

func (r DryRunSpecRulesAttributes) Condition() terra.ListValue[DryRunSpecRulesConditionAttributes] {
	return terra.ReferenceAsList[DryRunSpecRulesConditionAttributes](r.ref.Append("condition"))
}

func (r DryRunSpecRulesAttributes) Values() terra.ListValue[DryRunSpecRulesValuesAttributes] {
	return terra.ReferenceAsList[DryRunSpecRulesValuesAttributes](r.ref.Append("values"))
}

type DryRunSpecRulesConditionAttributes struct {
	ref terra.Reference
}

func (c DryRunSpecRulesConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DryRunSpecRulesConditionAttributes) InternalWithRef(ref terra.Reference) DryRunSpecRulesConditionAttributes {
	return DryRunSpecRulesConditionAttributes{ref: ref}
}

func (c DryRunSpecRulesConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DryRunSpecRulesConditionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("description"))
}

func (c DryRunSpecRulesConditionAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("expression"))
}

func (c DryRunSpecRulesConditionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("location"))
}

func (c DryRunSpecRulesConditionAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("title"))
}

type DryRunSpecRulesValuesAttributes struct {
	ref terra.Reference
}

func (v DryRunSpecRulesValuesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v DryRunSpecRulesValuesAttributes) InternalWithRef(ref terra.Reference) DryRunSpecRulesValuesAttributes {
	return DryRunSpecRulesValuesAttributes{ref: ref}
}

func (v DryRunSpecRulesValuesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v DryRunSpecRulesValuesAttributes) AllowedValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("allowed_values"))
}

func (v DryRunSpecRulesValuesAttributes) DeniedValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("denied_values"))
}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("etag"))
}

func (s SpecAttributes) InheritFromParent() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("inherit_from_parent"))
}

func (s SpecAttributes) Reset() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("reset"))
}

func (s SpecAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("update_time"))
}

func (s SpecAttributes) Rules() terra.ListValue[SpecRulesAttributes] {
	return terra.ReferenceAsList[SpecRulesAttributes](s.ref.Append("rules"))
}

type SpecRulesAttributes struct {
	ref terra.Reference
}

func (r SpecRulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r SpecRulesAttributes) InternalWithRef(ref terra.Reference) SpecRulesAttributes {
	return SpecRulesAttributes{ref: ref}
}

func (r SpecRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r SpecRulesAttributes) AllowAll() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("allow_all"))
}

func (r SpecRulesAttributes) DenyAll() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("deny_all"))
}

func (r SpecRulesAttributes) Enforce() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("enforce"))
}

func (r SpecRulesAttributes) Condition() terra.ListValue[SpecRulesConditionAttributes] {
	return terra.ReferenceAsList[SpecRulesConditionAttributes](r.ref.Append("condition"))
}

func (r SpecRulesAttributes) Values() terra.ListValue[SpecRulesValuesAttributes] {
	return terra.ReferenceAsList[SpecRulesValuesAttributes](r.ref.Append("values"))
}

type SpecRulesConditionAttributes struct {
	ref terra.Reference
}

func (c SpecRulesConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c SpecRulesConditionAttributes) InternalWithRef(ref terra.Reference) SpecRulesConditionAttributes {
	return SpecRulesConditionAttributes{ref: ref}
}

func (c SpecRulesConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c SpecRulesConditionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("description"))
}

func (c SpecRulesConditionAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("expression"))
}

func (c SpecRulesConditionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("location"))
}

func (c SpecRulesConditionAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("title"))
}

type SpecRulesValuesAttributes struct {
	ref terra.Reference
}

func (v SpecRulesValuesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v SpecRulesValuesAttributes) InternalWithRef(ref terra.Reference) SpecRulesValuesAttributes {
	return SpecRulesValuesAttributes{ref: ref}
}

func (v SpecRulesValuesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v SpecRulesValuesAttributes) AllowedValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("allowed_values"))
}

func (v SpecRulesValuesAttributes) DeniedValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("denied_values"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DryRunSpecState struct {
	Etag              string                 `json:"etag"`
	InheritFromParent bool                   `json:"inherit_from_parent"`
	Reset             bool                   `json:"reset"`
	UpdateTime        string                 `json:"update_time"`
	Rules             []DryRunSpecRulesState `json:"rules"`
}

type DryRunSpecRulesState struct {
	AllowAll  string                          `json:"allow_all"`
	DenyAll   string                          `json:"deny_all"`
	Enforce   string                          `json:"enforce"`
	Condition []DryRunSpecRulesConditionState `json:"condition"`
	Values    []DryRunSpecRulesValuesState    `json:"values"`
}

type DryRunSpecRulesConditionState struct {
	Description string `json:"description"`
	Expression  string `json:"expression"`
	Location    string `json:"location"`
	Title       string `json:"title"`
}

type DryRunSpecRulesValuesState struct {
	AllowedValues []string `json:"allowed_values"`
	DeniedValues  []string `json:"denied_values"`
}

type SpecState struct {
	Etag              string           `json:"etag"`
	InheritFromParent bool             `json:"inherit_from_parent"`
	Reset             bool             `json:"reset"`
	UpdateTime        string           `json:"update_time"`
	Rules             []SpecRulesState `json:"rules"`
}

type SpecRulesState struct {
	AllowAll  string                    `json:"allow_all"`
	DenyAll   string                    `json:"deny_all"`
	Enforce   string                    `json:"enforce"`
	Condition []SpecRulesConditionState `json:"condition"`
	Values    []SpecRulesValuesState    `json:"values"`
}

type SpecRulesConditionState struct {
	Description string `json:"description"`
	Expression  string `json:"expression"`
	Location    string `json:"location"`
	Title       string `json:"title"`
}

type SpecRulesValuesState struct {
	AllowedValues []string `json:"allowed_values"`
	DeniedValues  []string `json:"denied_values"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
