// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_org_policy_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_org_policy_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleOrgPolicyPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gopp *Resource) Type() string {
	return "google_org_policy_policy"
}

// LocalName returns the local name for [Resource].
func (gopp *Resource) LocalName() string {
	return gopp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gopp *Resource) Configuration() interface{} {
	return gopp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gopp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gopp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gopp *Resource) Dependencies() terra.Dependencies {
	return gopp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gopp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gopp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gopp *Resource) Attributes() googleOrgPolicyPolicyAttributes {
	return googleOrgPolicyPolicyAttributes{ref: terra.ReferenceResource(gopp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gopp *Resource) ImportState(state io.Reader) error {
	gopp.state = &googleOrgPolicyPolicyState{}
	if err := json.NewDecoder(state).Decode(gopp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gopp.Type(), gopp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gopp *Resource) State() (*googleOrgPolicyPolicyState, bool) {
	return gopp.state, gopp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gopp *Resource) StateMust() *googleOrgPolicyPolicyState {
	if gopp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gopp.Type(), gopp.LocalName()))
	}
	return gopp.state
}

// Args contains the configurations for google_org_policy_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// DryRunSpec: optional
	DryRunSpec *DryRunSpec `hcl:"dry_run_spec,block"`
	// Spec: optional
	Spec *Spec `hcl:"spec,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleOrgPolicyPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_org_policy_policy.
func (gopp googleOrgPolicyPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gopp.ref.Append("etag"))
}

// Id returns a reference to field id of google_org_policy_policy.
func (gopp googleOrgPolicyPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gopp.ref.Append("id"))
}

// Name returns a reference to field name of google_org_policy_policy.
func (gopp googleOrgPolicyPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gopp.ref.Append("name"))
}

// Parent returns a reference to field parent of google_org_policy_policy.
func (gopp googleOrgPolicyPolicyAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gopp.ref.Append("parent"))
}

func (gopp googleOrgPolicyPolicyAttributes) DryRunSpec() terra.ListValue[DryRunSpecAttributes] {
	return terra.ReferenceAsList[DryRunSpecAttributes](gopp.ref.Append("dry_run_spec"))
}

func (gopp googleOrgPolicyPolicyAttributes) Spec() terra.ListValue[SpecAttributes] {
	return terra.ReferenceAsList[SpecAttributes](gopp.ref.Append("spec"))
}

func (gopp googleOrgPolicyPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gopp.ref.Append("timeouts"))
}

type googleOrgPolicyPolicyState struct {
	Etag       string            `json:"etag"`
	Id         string            `json:"id"`
	Name       string            `json:"name"`
	Parent     string            `json:"parent"`
	DryRunSpec []DryRunSpecState `json:"dry_run_spec"`
	Spec       []SpecState       `json:"spec"`
	Timeouts   *TimeoutsState    `json:"timeouts"`
}
