// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_recaptcha_enterprise_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_recaptcha_enterprise_key.
type Resource struct {
	Name      string
	Args      Args
	state     *googleRecaptchaEnterpriseKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (grek *Resource) Type() string {
	return "google_recaptcha_enterprise_key"
}

// LocalName returns the local name for [Resource].
func (grek *Resource) LocalName() string {
	return grek.Name
}

// Configuration returns the configuration (args) for [Resource].
func (grek *Resource) Configuration() interface{} {
	return grek.Args
}

// DependOn is used for other resources to depend on [Resource].
func (grek *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(grek)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (grek *Resource) Dependencies() terra.Dependencies {
	return grek.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (grek *Resource) LifecycleManagement() *terra.Lifecycle {
	return grek.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (grek *Resource) Attributes() googleRecaptchaEnterpriseKeyAttributes {
	return googleRecaptchaEnterpriseKeyAttributes{ref: terra.ReferenceResource(grek)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (grek *Resource) ImportState(state io.Reader) error {
	grek.state = &googleRecaptchaEnterpriseKeyState{}
	if err := json.NewDecoder(state).Decode(grek.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", grek.Type(), grek.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (grek *Resource) State() (*googleRecaptchaEnterpriseKeyState, bool) {
	return grek.state, grek.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (grek *Resource) StateMust() *googleRecaptchaEnterpriseKeyState {
	if grek.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", grek.Type(), grek.LocalName()))
	}
	return grek.state
}

// Args contains the configurations for google_recaptcha_enterprise_key.
type Args struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// AndroidSettings: optional
	AndroidSettings *AndroidSettings `hcl:"android_settings,block"`
	// IosSettings: optional
	IosSettings *IosSettings `hcl:"ios_settings,block"`
	// TestingOptions: optional
	TestingOptions *TestingOptions `hcl:"testing_options,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// WafSettings: optional
	WafSettings *WafSettings `hcl:"waf_settings,block"`
	// WebSettings: optional
	WebSettings *WebSettings `hcl:"web_settings,block"`
}

type googleRecaptchaEnterpriseKeyAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_recaptcha_enterprise_key.
func (grek googleRecaptchaEnterpriseKeyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(grek.ref.Append("create_time"))
}

// DisplayName returns a reference to field display_name of google_recaptcha_enterprise_key.
func (grek googleRecaptchaEnterpriseKeyAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(grek.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_recaptcha_enterprise_key.
func (grek googleRecaptchaEnterpriseKeyAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](grek.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_recaptcha_enterprise_key.
func (grek googleRecaptchaEnterpriseKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(grek.ref.Append("id"))
}

// Labels returns a reference to field labels of google_recaptcha_enterprise_key.
func (grek googleRecaptchaEnterpriseKeyAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](grek.ref.Append("labels"))
}

// Name returns a reference to field name of google_recaptcha_enterprise_key.
func (grek googleRecaptchaEnterpriseKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(grek.ref.Append("name"))
}

// Project returns a reference to field project of google_recaptcha_enterprise_key.
func (grek googleRecaptchaEnterpriseKeyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(grek.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_recaptcha_enterprise_key.
func (grek googleRecaptchaEnterpriseKeyAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](grek.ref.Append("terraform_labels"))
}

func (grek googleRecaptchaEnterpriseKeyAttributes) AndroidSettings() terra.ListValue[AndroidSettingsAttributes] {
	return terra.ReferenceAsList[AndroidSettingsAttributes](grek.ref.Append("android_settings"))
}

func (grek googleRecaptchaEnterpriseKeyAttributes) IosSettings() terra.ListValue[IosSettingsAttributes] {
	return terra.ReferenceAsList[IosSettingsAttributes](grek.ref.Append("ios_settings"))
}

func (grek googleRecaptchaEnterpriseKeyAttributes) TestingOptions() terra.ListValue[TestingOptionsAttributes] {
	return terra.ReferenceAsList[TestingOptionsAttributes](grek.ref.Append("testing_options"))
}

func (grek googleRecaptchaEnterpriseKeyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](grek.ref.Append("timeouts"))
}

func (grek googleRecaptchaEnterpriseKeyAttributes) WafSettings() terra.ListValue[WafSettingsAttributes] {
	return terra.ReferenceAsList[WafSettingsAttributes](grek.ref.Append("waf_settings"))
}

func (grek googleRecaptchaEnterpriseKeyAttributes) WebSettings() terra.ListValue[WebSettingsAttributes] {
	return terra.ReferenceAsList[WebSettingsAttributes](grek.ref.Append("web_settings"))
}

type googleRecaptchaEnterpriseKeyState struct {
	CreateTime      string                 `json:"create_time"`
	DisplayName     string                 `json:"display_name"`
	EffectiveLabels map[string]string      `json:"effective_labels"`
	Id              string                 `json:"id"`
	Labels          map[string]string      `json:"labels"`
	Name            string                 `json:"name"`
	Project         string                 `json:"project"`
	TerraformLabels map[string]string      `json:"terraform_labels"`
	AndroidSettings []AndroidSettingsState `json:"android_settings"`
	IosSettings     []IosSettingsState     `json:"ios_settings"`
	TestingOptions  []TestingOptionsState  `json:"testing_options"`
	Timeouts        *TimeoutsState         `json:"timeouts"`
	WafSettings     []WafSettingsState     `json:"waf_settings"`
	WebSettings     []WebSettingsState     `json:"web_settings"`
}
