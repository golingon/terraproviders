// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_backup_dr_management_server

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_backup_dr_management_server.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBackupDrManagementServerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbdms *Resource) Type() string {
	return "google_backup_dr_management_server"
}

// LocalName returns the local name for [Resource].
func (gbdms *Resource) LocalName() string {
	return gbdms.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbdms *Resource) Configuration() interface{} {
	return gbdms.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbdms *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbdms)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbdms *Resource) Dependencies() terra.Dependencies {
	return gbdms.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbdms *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbdms.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbdms *Resource) Attributes() googleBackupDrManagementServerAttributes {
	return googleBackupDrManagementServerAttributes{ref: terra.ReferenceResource(gbdms)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbdms *Resource) ImportState(state io.Reader) error {
	gbdms.state = &googleBackupDrManagementServerState{}
	if err := json.NewDecoder(state).Decode(gbdms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbdms.Type(), gbdms.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbdms *Resource) State() (*googleBackupDrManagementServerState, bool) {
	return gbdms.state, gbdms.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbdms *Resource) StateMust() *googleBackupDrManagementServerState {
	if gbdms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbdms.Type(), gbdms.LocalName()))
	}
	return gbdms.state
}

// Args contains the configurations for google_backup_dr_management_server.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Networks: min=1
	Networks []Networks `hcl:"networks,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBackupDrManagementServerAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_backup_dr_management_server.
func (gbdms googleBackupDrManagementServerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbdms.ref.Append("id"))
}

// Location returns a reference to field location of google_backup_dr_management_server.
func (gbdms googleBackupDrManagementServerAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbdms.ref.Append("location"))
}

// Name returns a reference to field name of google_backup_dr_management_server.
func (gbdms googleBackupDrManagementServerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbdms.ref.Append("name"))
}

// Oauth2ClientId returns a reference to field oauth2_client_id of google_backup_dr_management_server.
func (gbdms googleBackupDrManagementServerAttributes) Oauth2ClientId() terra.StringValue {
	return terra.ReferenceAsString(gbdms.ref.Append("oauth2_client_id"))
}

// Project returns a reference to field project of google_backup_dr_management_server.
func (gbdms googleBackupDrManagementServerAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbdms.ref.Append("project"))
}

// Type returns a reference to field type of google_backup_dr_management_server.
func (gbdms googleBackupDrManagementServerAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gbdms.ref.Append("type"))
}

func (gbdms googleBackupDrManagementServerAttributes) ManagementUri() terra.ListValue[ManagementUriAttributes] {
	return terra.ReferenceAsList[ManagementUriAttributes](gbdms.ref.Append("management_uri"))
}

func (gbdms googleBackupDrManagementServerAttributes) Networks() terra.ListValue[NetworksAttributes] {
	return terra.ReferenceAsList[NetworksAttributes](gbdms.ref.Append("networks"))
}

func (gbdms googleBackupDrManagementServerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbdms.ref.Append("timeouts"))
}

type googleBackupDrManagementServerState struct {
	Id             string               `json:"id"`
	Location       string               `json:"location"`
	Name           string               `json:"name"`
	Oauth2ClientId string               `json:"oauth2_client_id"`
	Project        string               `json:"project"`
	Type           string               `json:"type"`
	ManagementUri  []ManagementUriState `json:"management_uri"`
	Networks       []NetworksState      `json:"networks"`
	Timeouts       *TimeoutsState       `json:"timeouts"`
}
