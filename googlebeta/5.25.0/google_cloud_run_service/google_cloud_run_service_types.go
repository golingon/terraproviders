// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloud_run_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Metadata struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}

type Template struct {
	// TemplateMetadata: optional
	Metadata *TemplateMetadata `hcl:"metadata,block"`
	// TemplateSpec: optional
	Spec *TemplateSpec `hcl:"spec,block"`
}

type TemplateMetadata struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}

type TemplateSpec struct {
	// ContainerConcurrency: number, optional
	ContainerConcurrency terra.NumberValue `hcl:"container_concurrency,attr"`
	// ServiceAccountName: string, optional
	ServiceAccountName terra.StringValue `hcl:"service_account_name,attr"`
	// TimeoutSeconds: number, optional
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// TemplateSpecContainers: min=0
	Containers []TemplateSpecContainers `hcl:"containers,block" validate:"min=0"`
	// TemplateSpecVolumes: min=0
	Volumes []TemplateSpecVolumes `hcl:"volumes,block" validate:"min=0"`
}

type TemplateSpecContainers struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Command: list of string, optional
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// WorkingDir: string, optional
	WorkingDir terra.StringValue `hcl:"working_dir,attr"`
	// TemplateSpecContainersEnv: min=0
	Env []TemplateSpecContainersEnv `hcl:"env,block" validate:"min=0"`
	// TemplateSpecContainersEnvFrom: min=0
	EnvFrom []TemplateSpecContainersEnvFrom `hcl:"env_from,block" validate:"min=0"`
	// TemplateSpecContainersLivenessProbe: optional
	LivenessProbe *TemplateSpecContainersLivenessProbe `hcl:"liveness_probe,block"`
	// TemplateSpecContainersPorts: min=0
	Ports []TemplateSpecContainersPorts `hcl:"ports,block" validate:"min=0"`
	// TemplateSpecContainersResources: optional
	Resources *TemplateSpecContainersResources `hcl:"resources,block"`
	// TemplateSpecContainersStartupProbe: optional
	StartupProbe *TemplateSpecContainersStartupProbe `hcl:"startup_probe,block"`
	// TemplateSpecContainersVolumeMounts: min=0
	VolumeMounts []TemplateSpecContainersVolumeMounts `hcl:"volume_mounts,block" validate:"min=0"`
}

type TemplateSpecContainersEnv struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
	// TemplateSpec1Ea42B41: optional
	ValueFrom *TemplateSpec1Ea42B41 `hcl:"value_from,block"`
}

type TemplateSpec1Ea42B41 struct {
	// TemplateSpecEe7Fd6E1: required
	SecretKeyRef *TemplateSpecEe7Fd6E1 `hcl:"secret_key_ref,block" validate:"required"`
}

type TemplateSpecEe7Fd6E1 struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type TemplateSpecContainersEnvFrom struct {
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// TemplateSpec364D790C: optional
	ConfigMapRef *TemplateSpec364D790C `hcl:"config_map_ref,block"`
	// TemplateSpec1532Eb36: optional
	SecretRef *TemplateSpec1532Eb36 `hcl:"secret_ref,block"`
}

type TemplateSpec364D790C struct {
	// Optional: bool, optional
	Optional terra.BoolValue `hcl:"optional,attr"`
	// TemplateSpecF5F9B7D9: optional
	LocalObjectReference *TemplateSpecF5F9B7D9 `hcl:"local_object_reference,block"`
}

type TemplateSpecF5F9B7D9 struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type TemplateSpec1532Eb36 struct {
	// Optional: bool, optional
	Optional terra.BoolValue `hcl:"optional,attr"`
	// TemplateSpecF134D3F7: optional
	LocalObjectReference *TemplateSpecF134D3F7 `hcl:"local_object_reference,block"`
}

type TemplateSpecF134D3F7 struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type TemplateSpecContainersLivenessProbe struct {
	// FailureThreshold: number, optional
	FailureThreshold terra.NumberValue `hcl:"failure_threshold,attr"`
	// InitialDelaySeconds: number, optional
	InitialDelaySeconds terra.NumberValue `hcl:"initial_delay_seconds,attr"`
	// PeriodSeconds: number, optional
	PeriodSeconds terra.NumberValue `hcl:"period_seconds,attr"`
	// TimeoutSeconds: number, optional
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// TemplateSpec7Eb28A1F: optional
	Grpc *TemplateSpec7Eb28A1F `hcl:"grpc,block"`
	// TemplateSpecEd9D52Fe: optional
	HttpGet *TemplateSpecEd9D52Fe `hcl:"http_get,block"`
}

type TemplateSpec7Eb28A1F struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
}

type TemplateSpecEd9D52Fe struct {
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// TemplateSpec043B4C66: min=0
	HttpHeaders []TemplateSpec043B4C66 `hcl:"http_headers,block" validate:"min=0"`
}

type TemplateSpec043B4C66 struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type TemplateSpecContainersPorts struct {
	// ContainerPort: number, optional
	ContainerPort terra.NumberValue `hcl:"container_port,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
}

type TemplateSpecContainersResources struct {
	// Limits: map of string, optional
	Limits terra.MapValue[terra.StringValue] `hcl:"limits,attr"`
	// Requests: map of string, optional
	Requests terra.MapValue[terra.StringValue] `hcl:"requests,attr"`
}

type TemplateSpecContainersStartupProbe struct {
	// FailureThreshold: number, optional
	FailureThreshold terra.NumberValue `hcl:"failure_threshold,attr"`
	// InitialDelaySeconds: number, optional
	InitialDelaySeconds terra.NumberValue `hcl:"initial_delay_seconds,attr"`
	// PeriodSeconds: number, optional
	PeriodSeconds terra.NumberValue `hcl:"period_seconds,attr"`
	// TimeoutSeconds: number, optional
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// TemplateSpecA50Df3C6: optional
	Grpc *TemplateSpecA50Df3C6 `hcl:"grpc,block"`
	// TemplateSpec46Ff3E99: optional
	HttpGet *TemplateSpec46Ff3E99 `hcl:"http_get,block"`
	// TemplateSpec21E69F43: optional
	TcpSocket *TemplateSpec21E69F43 `hcl:"tcp_socket,block"`
}

type TemplateSpecA50Df3C6 struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
}

type TemplateSpec46Ff3E99 struct {
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// TemplateSpec2A4Ec41B: min=0
	HttpHeaders []TemplateSpec2A4Ec41B `hcl:"http_headers,block" validate:"min=0"`
}

type TemplateSpec2A4Ec41B struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type TemplateSpec21E69F43 struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
}

type TemplateSpecContainersVolumeMounts struct {
	// MountPath: string, required
	MountPath terra.StringValue `hcl:"mount_path,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type TemplateSpecVolumes struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TemplateSpecVolumesCsi: optional
	Csi *TemplateSpecVolumesCsi `hcl:"csi,block"`
	// TemplateSpecVolumesEmptyDir: optional
	EmptyDir *TemplateSpecVolumesEmptyDir `hcl:"empty_dir,block"`
	// TemplateSpecVolumesSecret: optional
	Secret *TemplateSpecVolumesSecret `hcl:"secret,block"`
}

type TemplateSpecVolumesCsi struct {
	// Driver: string, required
	Driver terra.StringValue `hcl:"driver,attr" validate:"required"`
	// ReadOnly: bool, optional
	ReadOnly terra.BoolValue `hcl:"read_only,attr"`
	// VolumeAttributes: map of string, optional
	VolumeAttributes terra.MapValue[terra.StringValue] `hcl:"volume_attributes,attr"`
}

type TemplateSpecVolumesEmptyDir struct {
	// Medium: string, optional
	Medium terra.StringValue `hcl:"medium,attr"`
	// SizeLimit: string, optional
	SizeLimit terra.StringValue `hcl:"size_limit,attr"`
}

type TemplateSpecVolumesSecret struct {
	// DefaultMode: number, optional
	DefaultMode terra.NumberValue `hcl:"default_mode,attr"`
	// SecretName: string, required
	SecretName terra.StringValue `hcl:"secret_name,attr" validate:"required"`
	// TemplateSpecF0A964Dc: min=0
	Items []TemplateSpecF0A964Dc `hcl:"items,block" validate:"min=0"`
}

type TemplateSpecF0A964Dc struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Mode: number, optional
	Mode terra.NumberValue `hcl:"mode,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Traffic struct {
	// LatestRevision: bool, optional
	LatestRevision terra.BoolValue `hcl:"latest_revision,attr"`
	// Percent: number, required
	Percent terra.NumberValue `hcl:"percent,attr" validate:"required"`
	// RevisionName: string, optional
	RevisionName terra.StringValue `hcl:"revision_name,attr"`
	// Tag: string, optional
	Tag terra.StringValue `hcl:"tag,attr"`
}

type StatusAttributes struct {
	ref terra.Reference
}

func (s StatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StatusAttributes) InternalWithRef(ref terra.Reference) StatusAttributes {
	return StatusAttributes{ref: ref}
}

func (s StatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StatusAttributes) LatestCreatedRevisionName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("latest_created_revision_name"))
}

func (s StatusAttributes) LatestReadyRevisionName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("latest_ready_revision_name"))
}

func (s StatusAttributes) ObservedGeneration() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("observed_generation"))
}

func (s StatusAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("url"))
}

func (s StatusAttributes) Conditions() terra.ListValue[StatusConditionsAttributes] {
	return terra.ReferenceAsList[StatusConditionsAttributes](s.ref.Append("conditions"))
}

func (s StatusAttributes) Traffic() terra.ListValue[StatusTrafficAttributes] {
	return terra.ReferenceAsList[StatusTrafficAttributes](s.ref.Append("traffic"))
}

type StatusConditionsAttributes struct {
	ref terra.Reference
}

func (c StatusConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c StatusConditionsAttributes) InternalWithRef(ref terra.Reference) StatusConditionsAttributes {
	return StatusConditionsAttributes{ref: ref}
}

func (c StatusConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c StatusConditionsAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("message"))
}

func (c StatusConditionsAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("reason"))
}

func (c StatusConditionsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("status"))
}

func (c StatusConditionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type StatusTrafficAttributes struct {
	ref terra.Reference
}

func (t StatusTrafficAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t StatusTrafficAttributes) InternalWithRef(ref terra.Reference) StatusTrafficAttributes {
	return StatusTrafficAttributes{ref: ref}
}

func (t StatusTrafficAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t StatusTrafficAttributes) LatestRevision() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("latest_revision"))
}

func (t StatusTrafficAttributes) Percent() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("percent"))
}

func (t StatusTrafficAttributes) RevisionName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("revision_name"))
}

func (t StatusTrafficAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("tag"))
}

func (t StatusTrafficAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("url"))
}

type MetadataAttributes struct {
	ref terra.Reference
}

func (m MetadataAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MetadataAttributes) InternalWithRef(ref terra.Reference) MetadataAttributes {
	return MetadataAttributes{ref: ref}
}

func (m MetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MetadataAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("annotations"))
}

func (m MetadataAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("effective_annotations"))
}

func (m MetadataAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("effective_labels"))
}

func (m MetadataAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("generation"))
}

func (m MetadataAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("labels"))
}

func (m MetadataAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("namespace"))
}

func (m MetadataAttributes) ResourceVersion() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("resource_version"))
}

func (m MetadataAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("self_link"))
}

func (m MetadataAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("terraform_labels"))
}

func (m MetadataAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("uid"))
}

type TemplateAttributes struct {
	ref terra.Reference
}

func (t TemplateAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TemplateAttributes) InternalWithRef(ref terra.Reference) TemplateAttributes {
	return TemplateAttributes{ref: ref}
}

func (t TemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TemplateAttributes) Metadata() terra.ListValue[TemplateMetadataAttributes] {
	return terra.ReferenceAsList[TemplateMetadataAttributes](t.ref.Append("metadata"))
}

func (t TemplateAttributes) Spec() terra.ListValue[TemplateSpecAttributes] {
	return terra.ReferenceAsList[TemplateSpecAttributes](t.ref.Append("spec"))
}

type TemplateMetadataAttributes struct {
	ref terra.Reference
}

func (m TemplateMetadataAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m TemplateMetadataAttributes) InternalWithRef(ref terra.Reference) TemplateMetadataAttributes {
	return TemplateMetadataAttributes{ref: ref}
}

func (m TemplateMetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m TemplateMetadataAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("annotations"))
}

func (m TemplateMetadataAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("generation"))
}

func (m TemplateMetadataAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("labels"))
}

func (m TemplateMetadataAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("name"))
}

func (m TemplateMetadataAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("namespace"))
}

func (m TemplateMetadataAttributes) ResourceVersion() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("resource_version"))
}

func (m TemplateMetadataAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("self_link"))
}

func (m TemplateMetadataAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("uid"))
}

type TemplateSpecAttributes struct {
	ref terra.Reference
}

func (s TemplateSpecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s TemplateSpecAttributes) InternalWithRef(ref terra.Reference) TemplateSpecAttributes {
	return TemplateSpecAttributes{ref: ref}
}

func (s TemplateSpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s TemplateSpecAttributes) ContainerConcurrency() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("container_concurrency"))
}

func (s TemplateSpecAttributes) ServiceAccountName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("service_account_name"))
}

func (s TemplateSpecAttributes) ServingState() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("serving_state"))
}

func (s TemplateSpecAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("timeout_seconds"))
}

func (s TemplateSpecAttributes) Containers() terra.ListValue[TemplateSpecContainersAttributes] {
	return terra.ReferenceAsList[TemplateSpecContainersAttributes](s.ref.Append("containers"))
}

func (s TemplateSpecAttributes) Volumes() terra.ListValue[TemplateSpecVolumesAttributes] {
	return terra.ReferenceAsList[TemplateSpecVolumesAttributes](s.ref.Append("volumes"))
}

type TemplateSpecContainersAttributes struct {
	ref terra.Reference
}

func (c TemplateSpecContainersAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c TemplateSpecContainersAttributes) InternalWithRef(ref terra.Reference) TemplateSpecContainersAttributes {
	return TemplateSpecContainersAttributes{ref: ref}
}

func (c TemplateSpecContainersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c TemplateSpecContainersAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("args"))
}

func (c TemplateSpecContainersAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("command"))
}

func (c TemplateSpecContainersAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c TemplateSpecContainersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c TemplateSpecContainersAttributes) WorkingDir() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("working_dir"))
}

func (c TemplateSpecContainersAttributes) Env() terra.SetValue[TemplateSpecContainersEnvAttributes] {
	return terra.ReferenceAsSet[TemplateSpecContainersEnvAttributes](c.ref.Append("env"))
}

func (c TemplateSpecContainersAttributes) EnvFrom() terra.ListValue[TemplateSpecContainersEnvFromAttributes] {
	return terra.ReferenceAsList[TemplateSpecContainersEnvFromAttributes](c.ref.Append("env_from"))
}

func (c TemplateSpecContainersAttributes) LivenessProbe() terra.ListValue[TemplateSpecContainersLivenessProbeAttributes] {
	return terra.ReferenceAsList[TemplateSpecContainersLivenessProbeAttributes](c.ref.Append("liveness_probe"))
}

func (c TemplateSpecContainersAttributes) Ports() terra.ListValue[TemplateSpecContainersPortsAttributes] {
	return terra.ReferenceAsList[TemplateSpecContainersPortsAttributes](c.ref.Append("ports"))
}

func (c TemplateSpecContainersAttributes) Resources() terra.ListValue[TemplateSpecContainersResourcesAttributes] {
	return terra.ReferenceAsList[TemplateSpecContainersResourcesAttributes](c.ref.Append("resources"))
}

func (c TemplateSpecContainersAttributes) StartupProbe() terra.ListValue[TemplateSpecContainersStartupProbeAttributes] {
	return terra.ReferenceAsList[TemplateSpecContainersStartupProbeAttributes](c.ref.Append("startup_probe"))
}

func (c TemplateSpecContainersAttributes) VolumeMounts() terra.ListValue[TemplateSpecContainersVolumeMountsAttributes] {
	return terra.ReferenceAsList[TemplateSpecContainersVolumeMountsAttributes](c.ref.Append("volume_mounts"))
}

type TemplateSpecContainersEnvAttributes struct {
	ref terra.Reference
}

func (e TemplateSpecContainersEnvAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e TemplateSpecContainersEnvAttributes) InternalWithRef(ref terra.Reference) TemplateSpecContainersEnvAttributes {
	return TemplateSpecContainersEnvAttributes{ref: ref}
}

func (e TemplateSpecContainersEnvAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e TemplateSpecContainersEnvAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e TemplateSpecContainersEnvAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

func (e TemplateSpecContainersEnvAttributes) ValueFrom() terra.ListValue[TemplateSpec1Ea42B41Attributes] {
	return terra.ReferenceAsList[TemplateSpec1Ea42B41Attributes](e.ref.Append("value_from"))
}

type TemplateSpec1Ea42B41Attributes struct {
	ref terra.Reference
}

func (vf TemplateSpec1Ea42B41Attributes) InternalRef() (terra.Reference, error) {
	return vf.ref, nil
}

func (vf TemplateSpec1Ea42B41Attributes) InternalWithRef(ref terra.Reference) TemplateSpec1Ea42B41Attributes {
	return TemplateSpec1Ea42B41Attributes{ref: ref}
}

func (vf TemplateSpec1Ea42B41Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return vf.ref.InternalTokens()
}

func (vf TemplateSpec1Ea42B41Attributes) SecretKeyRef() terra.ListValue[TemplateSpecEe7Fd6E1Attributes] {
	return terra.ReferenceAsList[TemplateSpecEe7Fd6E1Attributes](vf.ref.Append("secret_key_ref"))
}

type TemplateSpecEe7Fd6E1Attributes struct {
	ref terra.Reference
}

func (skr TemplateSpecEe7Fd6E1Attributes) InternalRef() (terra.Reference, error) {
	return skr.ref, nil
}

func (skr TemplateSpecEe7Fd6E1Attributes) InternalWithRef(ref terra.Reference) TemplateSpecEe7Fd6E1Attributes {
	return TemplateSpecEe7Fd6E1Attributes{ref: ref}
}

func (skr TemplateSpecEe7Fd6E1Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return skr.ref.InternalTokens()
}

func (skr TemplateSpecEe7Fd6E1Attributes) Key() terra.StringValue {
	return terra.ReferenceAsString(skr.ref.Append("key"))
}

func (skr TemplateSpecEe7Fd6E1Attributes) Name() terra.StringValue {
	return terra.ReferenceAsString(skr.ref.Append("name"))
}

type TemplateSpecContainersEnvFromAttributes struct {
	ref terra.Reference
}

func (ef TemplateSpecContainersEnvFromAttributes) InternalRef() (terra.Reference, error) {
	return ef.ref, nil
}

func (ef TemplateSpecContainersEnvFromAttributes) InternalWithRef(ref terra.Reference) TemplateSpecContainersEnvFromAttributes {
	return TemplateSpecContainersEnvFromAttributes{ref: ref}
}

func (ef TemplateSpecContainersEnvFromAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ef.ref.InternalTokens()
}

func (ef TemplateSpecContainersEnvFromAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("prefix"))
}

func (ef TemplateSpecContainersEnvFromAttributes) ConfigMapRef() terra.ListValue[TemplateSpec364D790CAttributes] {
	return terra.ReferenceAsList[TemplateSpec364D790CAttributes](ef.ref.Append("config_map_ref"))
}

func (ef TemplateSpecContainersEnvFromAttributes) SecretRef() terra.ListValue[TemplateSpec1532Eb36Attributes] {
	return terra.ReferenceAsList[TemplateSpec1532Eb36Attributes](ef.ref.Append("secret_ref"))
}

type TemplateSpec364D790CAttributes struct {
	ref terra.Reference
}

func (cmr TemplateSpec364D790CAttributes) InternalRef() (terra.Reference, error) {
	return cmr.ref, nil
}

func (cmr TemplateSpec364D790CAttributes) InternalWithRef(ref terra.Reference) TemplateSpec364D790CAttributes {
	return TemplateSpec364D790CAttributes{ref: ref}
}

func (cmr TemplateSpec364D790CAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cmr.ref.InternalTokens()
}

func (cmr TemplateSpec364D790CAttributes) Optional() terra.BoolValue {
	return terra.ReferenceAsBool(cmr.ref.Append("optional"))
}

func (cmr TemplateSpec364D790CAttributes) LocalObjectReference() terra.ListValue[TemplateSpecF5F9B7D9Attributes] {
	return terra.ReferenceAsList[TemplateSpecF5F9B7D9Attributes](cmr.ref.Append("local_object_reference"))
}

type TemplateSpecF5F9B7D9Attributes struct {
	ref terra.Reference
}

func (lor TemplateSpecF5F9B7D9Attributes) InternalRef() (terra.Reference, error) {
	return lor.ref, nil
}

func (lor TemplateSpecF5F9B7D9Attributes) InternalWithRef(ref terra.Reference) TemplateSpecF5F9B7D9Attributes {
	return TemplateSpecF5F9B7D9Attributes{ref: ref}
}

func (lor TemplateSpecF5F9B7D9Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return lor.ref.InternalTokens()
}

func (lor TemplateSpecF5F9B7D9Attributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lor.ref.Append("name"))
}

type TemplateSpec1532Eb36Attributes struct {
	ref terra.Reference
}

func (sr TemplateSpec1532Eb36Attributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr TemplateSpec1532Eb36Attributes) InternalWithRef(ref terra.Reference) TemplateSpec1532Eb36Attributes {
	return TemplateSpec1532Eb36Attributes{ref: ref}
}

func (sr TemplateSpec1532Eb36Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr TemplateSpec1532Eb36Attributes) Optional() terra.BoolValue {
	return terra.ReferenceAsBool(sr.ref.Append("optional"))
}

func (sr TemplateSpec1532Eb36Attributes) LocalObjectReference() terra.ListValue[TemplateSpecF134D3F7Attributes] {
	return terra.ReferenceAsList[TemplateSpecF134D3F7Attributes](sr.ref.Append("local_object_reference"))
}

type TemplateSpecF134D3F7Attributes struct {
	ref terra.Reference
}

func (lor TemplateSpecF134D3F7Attributes) InternalRef() (terra.Reference, error) {
	return lor.ref, nil
}

func (lor TemplateSpecF134D3F7Attributes) InternalWithRef(ref terra.Reference) TemplateSpecF134D3F7Attributes {
	return TemplateSpecF134D3F7Attributes{ref: ref}
}

func (lor TemplateSpecF134D3F7Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return lor.ref.InternalTokens()
}

func (lor TemplateSpecF134D3F7Attributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lor.ref.Append("name"))
}

type TemplateSpecContainersLivenessProbeAttributes struct {
	ref terra.Reference
}

func (lp TemplateSpecContainersLivenessProbeAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp TemplateSpecContainersLivenessProbeAttributes) InternalWithRef(ref terra.Reference) TemplateSpecContainersLivenessProbeAttributes {
	return TemplateSpecContainersLivenessProbeAttributes{ref: ref}
}

func (lp TemplateSpecContainersLivenessProbeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp TemplateSpecContainersLivenessProbeAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("failure_threshold"))
}

func (lp TemplateSpecContainersLivenessProbeAttributes) InitialDelaySeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("initial_delay_seconds"))
}

func (lp TemplateSpecContainersLivenessProbeAttributes) PeriodSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("period_seconds"))
}

func (lp TemplateSpecContainersLivenessProbeAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("timeout_seconds"))
}

func (lp TemplateSpecContainersLivenessProbeAttributes) Grpc() terra.ListValue[TemplateSpec7Eb28A1FAttributes] {
	return terra.ReferenceAsList[TemplateSpec7Eb28A1FAttributes](lp.ref.Append("grpc"))
}

func (lp TemplateSpecContainersLivenessProbeAttributes) HttpGet() terra.ListValue[TemplateSpecEd9D52FeAttributes] {
	return terra.ReferenceAsList[TemplateSpecEd9D52FeAttributes](lp.ref.Append("http_get"))
}

type TemplateSpec7Eb28A1FAttributes struct {
	ref terra.Reference
}

func (g TemplateSpec7Eb28A1FAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g TemplateSpec7Eb28A1FAttributes) InternalWithRef(ref terra.Reference) TemplateSpec7Eb28A1FAttributes {
	return TemplateSpec7Eb28A1FAttributes{ref: ref}
}

func (g TemplateSpec7Eb28A1FAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g TemplateSpec7Eb28A1FAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("port"))
}

func (g TemplateSpec7Eb28A1FAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("service"))
}

type TemplateSpecEd9D52FeAttributes struct {
	ref terra.Reference
}

func (hg TemplateSpecEd9D52FeAttributes) InternalRef() (terra.Reference, error) {
	return hg.ref, nil
}

func (hg TemplateSpecEd9D52FeAttributes) InternalWithRef(ref terra.Reference) TemplateSpecEd9D52FeAttributes {
	return TemplateSpecEd9D52FeAttributes{ref: ref}
}

func (hg TemplateSpecEd9D52FeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hg.ref.InternalTokens()
}

func (hg TemplateSpecEd9D52FeAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hg.ref.Append("path"))
}

func (hg TemplateSpecEd9D52FeAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(hg.ref.Append("port"))
}

func (hg TemplateSpecEd9D52FeAttributes) HttpHeaders() terra.ListValue[TemplateSpec043B4C66Attributes] {
	return terra.ReferenceAsList[TemplateSpec043B4C66Attributes](hg.ref.Append("http_headers"))
}

type TemplateSpec043B4C66Attributes struct {
	ref terra.Reference
}

func (hh TemplateSpec043B4C66Attributes) InternalRef() (terra.Reference, error) {
	return hh.ref, nil
}

func (hh TemplateSpec043B4C66Attributes) InternalWithRef(ref terra.Reference) TemplateSpec043B4C66Attributes {
	return TemplateSpec043B4C66Attributes{ref: ref}
}

func (hh TemplateSpec043B4C66Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return hh.ref.InternalTokens()
}

func (hh TemplateSpec043B4C66Attributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("name"))
}

func (hh TemplateSpec043B4C66Attributes) Value() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("value"))
}

type TemplateSpecContainersPortsAttributes struct {
	ref terra.Reference
}

func (p TemplateSpecContainersPortsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p TemplateSpecContainersPortsAttributes) InternalWithRef(ref terra.Reference) TemplateSpecContainersPortsAttributes {
	return TemplateSpecContainersPortsAttributes{ref: ref}
}

func (p TemplateSpecContainersPortsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p TemplateSpecContainersPortsAttributes) ContainerPort() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("container_port"))
}

func (p TemplateSpecContainersPortsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p TemplateSpecContainersPortsAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("protocol"))
}

type TemplateSpecContainersResourcesAttributes struct {
	ref terra.Reference
}

func (r TemplateSpecContainersResourcesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r TemplateSpecContainersResourcesAttributes) InternalWithRef(ref terra.Reference) TemplateSpecContainersResourcesAttributes {
	return TemplateSpecContainersResourcesAttributes{ref: ref}
}

func (r TemplateSpecContainersResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r TemplateSpecContainersResourcesAttributes) Limits() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("limits"))
}

func (r TemplateSpecContainersResourcesAttributes) Requests() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("requests"))
}

type TemplateSpecContainersStartupProbeAttributes struct {
	ref terra.Reference
}

func (sp TemplateSpecContainersStartupProbeAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp TemplateSpecContainersStartupProbeAttributes) InternalWithRef(ref terra.Reference) TemplateSpecContainersStartupProbeAttributes {
	return TemplateSpecContainersStartupProbeAttributes{ref: ref}
}

func (sp TemplateSpecContainersStartupProbeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp TemplateSpecContainersStartupProbeAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("failure_threshold"))
}

func (sp TemplateSpecContainersStartupProbeAttributes) InitialDelaySeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("initial_delay_seconds"))
}

func (sp TemplateSpecContainersStartupProbeAttributes) PeriodSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("period_seconds"))
}

func (sp TemplateSpecContainersStartupProbeAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("timeout_seconds"))
}

func (sp TemplateSpecContainersStartupProbeAttributes) Grpc() terra.ListValue[TemplateSpecA50Df3C6Attributes] {
	return terra.ReferenceAsList[TemplateSpecA50Df3C6Attributes](sp.ref.Append("grpc"))
}

func (sp TemplateSpecContainersStartupProbeAttributes) HttpGet() terra.ListValue[TemplateSpec46Ff3E99Attributes] {
	return terra.ReferenceAsList[TemplateSpec46Ff3E99Attributes](sp.ref.Append("http_get"))
}

func (sp TemplateSpecContainersStartupProbeAttributes) TcpSocket() terra.ListValue[TemplateSpec21E69F43Attributes] {
	return terra.ReferenceAsList[TemplateSpec21E69F43Attributes](sp.ref.Append("tcp_socket"))
}

type TemplateSpecA50Df3C6Attributes struct {
	ref terra.Reference
}

func (g TemplateSpecA50Df3C6Attributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g TemplateSpecA50Df3C6Attributes) InternalWithRef(ref terra.Reference) TemplateSpecA50Df3C6Attributes {
	return TemplateSpecA50Df3C6Attributes{ref: ref}
}

func (g TemplateSpecA50Df3C6Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g TemplateSpecA50Df3C6Attributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("port"))
}

func (g TemplateSpecA50Df3C6Attributes) Service() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("service"))
}

type TemplateSpec46Ff3E99Attributes struct {
	ref terra.Reference
}

func (hg TemplateSpec46Ff3E99Attributes) InternalRef() (terra.Reference, error) {
	return hg.ref, nil
}

func (hg TemplateSpec46Ff3E99Attributes) InternalWithRef(ref terra.Reference) TemplateSpec46Ff3E99Attributes {
	return TemplateSpec46Ff3E99Attributes{ref: ref}
}

func (hg TemplateSpec46Ff3E99Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return hg.ref.InternalTokens()
}

func (hg TemplateSpec46Ff3E99Attributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hg.ref.Append("path"))
}

func (hg TemplateSpec46Ff3E99Attributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(hg.ref.Append("port"))
}

func (hg TemplateSpec46Ff3E99Attributes) HttpHeaders() terra.ListValue[TemplateSpec2A4Ec41BAttributes] {
	return terra.ReferenceAsList[TemplateSpec2A4Ec41BAttributes](hg.ref.Append("http_headers"))
}

type TemplateSpec2A4Ec41BAttributes struct {
	ref terra.Reference
}

func (hh TemplateSpec2A4Ec41BAttributes) InternalRef() (terra.Reference, error) {
	return hh.ref, nil
}

func (hh TemplateSpec2A4Ec41BAttributes) InternalWithRef(ref terra.Reference) TemplateSpec2A4Ec41BAttributes {
	return TemplateSpec2A4Ec41BAttributes{ref: ref}
}

func (hh TemplateSpec2A4Ec41BAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hh.ref.InternalTokens()
}

func (hh TemplateSpec2A4Ec41BAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("name"))
}

func (hh TemplateSpec2A4Ec41BAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("value"))
}

type TemplateSpec21E69F43Attributes struct {
	ref terra.Reference
}

func (ts TemplateSpec21E69F43Attributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TemplateSpec21E69F43Attributes) InternalWithRef(ref terra.Reference) TemplateSpec21E69F43Attributes {
	return TemplateSpec21E69F43Attributes{ref: ref}
}

func (ts TemplateSpec21E69F43Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TemplateSpec21E69F43Attributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("port"))
}

type TemplateSpecContainersVolumeMountsAttributes struct {
	ref terra.Reference
}

func (vm TemplateSpecContainersVolumeMountsAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm TemplateSpecContainersVolumeMountsAttributes) InternalWithRef(ref terra.Reference) TemplateSpecContainersVolumeMountsAttributes {
	return TemplateSpecContainersVolumeMountsAttributes{ref: ref}
}

func (vm TemplateSpecContainersVolumeMountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm TemplateSpecContainersVolumeMountsAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("mount_path"))
}

func (vm TemplateSpecContainersVolumeMountsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("name"))
}

type TemplateSpecVolumesAttributes struct {
	ref terra.Reference
}

func (v TemplateSpecVolumesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v TemplateSpecVolumesAttributes) InternalWithRef(ref terra.Reference) TemplateSpecVolumesAttributes {
	return TemplateSpecVolumesAttributes{ref: ref}
}

func (v TemplateSpecVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v TemplateSpecVolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v TemplateSpecVolumesAttributes) Csi() terra.ListValue[TemplateSpecVolumesCsiAttributes] {
	return terra.ReferenceAsList[TemplateSpecVolumesCsiAttributes](v.ref.Append("csi"))
}

func (v TemplateSpecVolumesAttributes) EmptyDir() terra.ListValue[TemplateSpecVolumesEmptyDirAttributes] {
	return terra.ReferenceAsList[TemplateSpecVolumesEmptyDirAttributes](v.ref.Append("empty_dir"))
}

func (v TemplateSpecVolumesAttributes) Secret() terra.ListValue[TemplateSpecVolumesSecretAttributes] {
	return terra.ReferenceAsList[TemplateSpecVolumesSecretAttributes](v.ref.Append("secret"))
}

type TemplateSpecVolumesCsiAttributes struct {
	ref terra.Reference
}

func (c TemplateSpecVolumesCsiAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c TemplateSpecVolumesCsiAttributes) InternalWithRef(ref terra.Reference) TemplateSpecVolumesCsiAttributes {
	return TemplateSpecVolumesCsiAttributes{ref: ref}
}

func (c TemplateSpecVolumesCsiAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c TemplateSpecVolumesCsiAttributes) Driver() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("driver"))
}

func (c TemplateSpecVolumesCsiAttributes) ReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("read_only"))
}

func (c TemplateSpecVolumesCsiAttributes) VolumeAttributes() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("volume_attributes"))
}

type TemplateSpecVolumesEmptyDirAttributes struct {
	ref terra.Reference
}

func (ed TemplateSpecVolumesEmptyDirAttributes) InternalRef() (terra.Reference, error) {
	return ed.ref, nil
}

func (ed TemplateSpecVolumesEmptyDirAttributes) InternalWithRef(ref terra.Reference) TemplateSpecVolumesEmptyDirAttributes {
	return TemplateSpecVolumesEmptyDirAttributes{ref: ref}
}

func (ed TemplateSpecVolumesEmptyDirAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ed.ref.InternalTokens()
}

func (ed TemplateSpecVolumesEmptyDirAttributes) Medium() terra.StringValue {
	return terra.ReferenceAsString(ed.ref.Append("medium"))
}

func (ed TemplateSpecVolumesEmptyDirAttributes) SizeLimit() terra.StringValue {
	return terra.ReferenceAsString(ed.ref.Append("size_limit"))
}

type TemplateSpecVolumesSecretAttributes struct {
	ref terra.Reference
}

func (s TemplateSpecVolumesSecretAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s TemplateSpecVolumesSecretAttributes) InternalWithRef(ref terra.Reference) TemplateSpecVolumesSecretAttributes {
	return TemplateSpecVolumesSecretAttributes{ref: ref}
}

func (s TemplateSpecVolumesSecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s TemplateSpecVolumesSecretAttributes) DefaultMode() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("default_mode"))
}

func (s TemplateSpecVolumesSecretAttributes) SecretName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret_name"))
}

func (s TemplateSpecVolumesSecretAttributes) Items() terra.ListValue[TemplateSpecF0A964DcAttributes] {
	return terra.ReferenceAsList[TemplateSpecF0A964DcAttributes](s.ref.Append("items"))
}

type TemplateSpecF0A964DcAttributes struct {
	ref terra.Reference
}

func (i TemplateSpecF0A964DcAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i TemplateSpecF0A964DcAttributes) InternalWithRef(ref terra.Reference) TemplateSpecF0A964DcAttributes {
	return TemplateSpecF0A964DcAttributes{ref: ref}
}

func (i TemplateSpecF0A964DcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i TemplateSpecF0A964DcAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("key"))
}

func (i TemplateSpecF0A964DcAttributes) Mode() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("mode"))
}

func (i TemplateSpecF0A964DcAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("path"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TrafficAttributes struct {
	ref terra.Reference
}

func (t TrafficAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TrafficAttributes) InternalWithRef(ref terra.Reference) TrafficAttributes {
	return TrafficAttributes{ref: ref}
}

func (t TrafficAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TrafficAttributes) LatestRevision() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("latest_revision"))
}

func (t TrafficAttributes) Percent() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("percent"))
}

func (t TrafficAttributes) RevisionName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("revision_name"))
}

func (t TrafficAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("tag"))
}

func (t TrafficAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("url"))
}

type StatusState struct {
	LatestCreatedRevisionName string                  `json:"latest_created_revision_name"`
	LatestReadyRevisionName   string                  `json:"latest_ready_revision_name"`
	ObservedGeneration        float64                 `json:"observed_generation"`
	Url                       string                  `json:"url"`
	Conditions                []StatusConditionsState `json:"conditions"`
	Traffic                   []StatusTrafficState    `json:"traffic"`
}

type StatusConditionsState struct {
	Message string `json:"message"`
	Reason  string `json:"reason"`
	Status  string `json:"status"`
	Type    string `json:"type"`
}

type StatusTrafficState struct {
	LatestRevision bool    `json:"latest_revision"`
	Percent        float64 `json:"percent"`
	RevisionName   string  `json:"revision_name"`
	Tag            string  `json:"tag"`
	Url            string  `json:"url"`
}

type MetadataState struct {
	Annotations          map[string]string `json:"annotations"`
	EffectiveAnnotations map[string]string `json:"effective_annotations"`
	EffectiveLabels      map[string]string `json:"effective_labels"`
	Generation           float64           `json:"generation"`
	Labels               map[string]string `json:"labels"`
	Namespace            string            `json:"namespace"`
	ResourceVersion      string            `json:"resource_version"`
	SelfLink             string            `json:"self_link"`
	TerraformLabels      map[string]string `json:"terraform_labels"`
	Uid                  string            `json:"uid"`
}

type TemplateState struct {
	Metadata []TemplateMetadataState `json:"metadata"`
	Spec     []TemplateSpecState     `json:"spec"`
}

type TemplateMetadataState struct {
	Annotations     map[string]string `json:"annotations"`
	Generation      float64           `json:"generation"`
	Labels          map[string]string `json:"labels"`
	Name            string            `json:"name"`
	Namespace       string            `json:"namespace"`
	ResourceVersion string            `json:"resource_version"`
	SelfLink        string            `json:"self_link"`
	Uid             string            `json:"uid"`
}

type TemplateSpecState struct {
	ContainerConcurrency float64                       `json:"container_concurrency"`
	ServiceAccountName   string                        `json:"service_account_name"`
	ServingState         string                        `json:"serving_state"`
	TimeoutSeconds       float64                       `json:"timeout_seconds"`
	Containers           []TemplateSpecContainersState `json:"containers"`
	Volumes              []TemplateSpecVolumesState    `json:"volumes"`
}

type TemplateSpecContainersState struct {
	Args          []string                                   `json:"args"`
	Command       []string                                   `json:"command"`
	Image         string                                     `json:"image"`
	Name          string                                     `json:"name"`
	WorkingDir    string                                     `json:"working_dir"`
	Env           []TemplateSpecContainersEnvState           `json:"env"`
	EnvFrom       []TemplateSpecContainersEnvFromState       `json:"env_from"`
	LivenessProbe []TemplateSpecContainersLivenessProbeState `json:"liveness_probe"`
	Ports         []TemplateSpecContainersPortsState         `json:"ports"`
	Resources     []TemplateSpecContainersResourcesState     `json:"resources"`
	StartupProbe  []TemplateSpecContainersStartupProbeState  `json:"startup_probe"`
	VolumeMounts  []TemplateSpecContainersVolumeMountsState  `json:"volume_mounts"`
}

type TemplateSpecContainersEnvState struct {
	Name      string                      `json:"name"`
	Value     string                      `json:"value"`
	ValueFrom []TemplateSpec1Ea42B41State `json:"value_from"`
}

type TemplateSpec1Ea42B41State struct {
	SecretKeyRef []TemplateSpecEe7Fd6E1State `json:"secret_key_ref"`
}

type TemplateSpecEe7Fd6E1State struct {
	Key  string `json:"key"`
	Name string `json:"name"`
}

type TemplateSpecContainersEnvFromState struct {
	Prefix       string                      `json:"prefix"`
	ConfigMapRef []TemplateSpec364D790CState `json:"config_map_ref"`
	SecretRef    []TemplateSpec1532Eb36State `json:"secret_ref"`
}

type TemplateSpec364D790CState struct {
	Optional             bool                        `json:"optional"`
	LocalObjectReference []TemplateSpecF5F9B7D9State `json:"local_object_reference"`
}

type TemplateSpecF5F9B7D9State struct {
	Name string `json:"name"`
}

type TemplateSpec1532Eb36State struct {
	Optional             bool                        `json:"optional"`
	LocalObjectReference []TemplateSpecF134D3F7State `json:"local_object_reference"`
}

type TemplateSpecF134D3F7State struct {
	Name string `json:"name"`
}

type TemplateSpecContainersLivenessProbeState struct {
	FailureThreshold    float64                     `json:"failure_threshold"`
	InitialDelaySeconds float64                     `json:"initial_delay_seconds"`
	PeriodSeconds       float64                     `json:"period_seconds"`
	TimeoutSeconds      float64                     `json:"timeout_seconds"`
	Grpc                []TemplateSpec7Eb28A1FState `json:"grpc"`
	HttpGet             []TemplateSpecEd9D52FeState `json:"http_get"`
}

type TemplateSpec7Eb28A1FState struct {
	Port    float64 `json:"port"`
	Service string  `json:"service"`
}

type TemplateSpecEd9D52FeState struct {
	Path        string                      `json:"path"`
	Port        float64                     `json:"port"`
	HttpHeaders []TemplateSpec043B4C66State `json:"http_headers"`
}

type TemplateSpec043B4C66State struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TemplateSpecContainersPortsState struct {
	ContainerPort float64 `json:"container_port"`
	Name          string  `json:"name"`
	Protocol      string  `json:"protocol"`
}

type TemplateSpecContainersResourcesState struct {
	Limits   map[string]string `json:"limits"`
	Requests map[string]string `json:"requests"`
}

type TemplateSpecContainersStartupProbeState struct {
	FailureThreshold    float64                     `json:"failure_threshold"`
	InitialDelaySeconds float64                     `json:"initial_delay_seconds"`
	PeriodSeconds       float64                     `json:"period_seconds"`
	TimeoutSeconds      float64                     `json:"timeout_seconds"`
	Grpc                []TemplateSpecA50Df3C6State `json:"grpc"`
	HttpGet             []TemplateSpec46Ff3E99State `json:"http_get"`
	TcpSocket           []TemplateSpec21E69F43State `json:"tcp_socket"`
}

type TemplateSpecA50Df3C6State struct {
	Port    float64 `json:"port"`
	Service string  `json:"service"`
}

type TemplateSpec46Ff3E99State struct {
	Path        string                      `json:"path"`
	Port        float64                     `json:"port"`
	HttpHeaders []TemplateSpec2A4Ec41BState `json:"http_headers"`
}

type TemplateSpec2A4Ec41BState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TemplateSpec21E69F43State struct {
	Port float64 `json:"port"`
}

type TemplateSpecContainersVolumeMountsState struct {
	MountPath string `json:"mount_path"`
	Name      string `json:"name"`
}

type TemplateSpecVolumesState struct {
	Name     string                             `json:"name"`
	Csi      []TemplateSpecVolumesCsiState      `json:"csi"`
	EmptyDir []TemplateSpecVolumesEmptyDirState `json:"empty_dir"`
	Secret   []TemplateSpecVolumesSecretState   `json:"secret"`
}

type TemplateSpecVolumesCsiState struct {
	Driver           string            `json:"driver"`
	ReadOnly         bool              `json:"read_only"`
	VolumeAttributes map[string]string `json:"volume_attributes"`
}

type TemplateSpecVolumesEmptyDirState struct {
	Medium    string `json:"medium"`
	SizeLimit string `json:"size_limit"`
}

type TemplateSpecVolumesSecretState struct {
	DefaultMode float64                     `json:"default_mode"`
	SecretName  string                      `json:"secret_name"`
	Items       []TemplateSpecF0A964DcState `json:"items"`
}

type TemplateSpecF0A964DcState struct {
	Key  string  `json:"key"`
	Mode float64 `json:"mode"`
	Path string  `json:"path"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TrafficState struct {
	LatestRevision bool    `json:"latest_revision"`
	Percent        float64 `json:"percent"`
	RevisionName   string  `json:"revision_name"`
	Tag            string  `json:"tag"`
	Url            string  `json:"url"`
}
