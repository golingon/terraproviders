// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_container_node_pool

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Autoscaling struct {
	// LocationPolicy: string, optional
	LocationPolicy terra.StringValue `hcl:"location_policy,attr"`
	// MaxNodeCount: number, optional
	MaxNodeCount terra.NumberValue `hcl:"max_node_count,attr"`
	// MinNodeCount: number, optional
	MinNodeCount terra.NumberValue `hcl:"min_node_count,attr"`
	// TotalMaxNodeCount: number, optional
	TotalMaxNodeCount terra.NumberValue `hcl:"total_max_node_count,attr"`
	// TotalMinNodeCount: number, optional
	TotalMinNodeCount terra.NumberValue `hcl:"total_min_node_count,attr"`
}

type Management struct {
	// AutoRepair: bool, optional
	AutoRepair terra.BoolValue `hcl:"auto_repair,attr"`
	// AutoUpgrade: bool, optional
	AutoUpgrade terra.BoolValue `hcl:"auto_upgrade,attr"`
}

type NetworkConfig struct {
	// CreatePodRange: bool, optional
	CreatePodRange terra.BoolValue `hcl:"create_pod_range,attr"`
	// EnablePrivateNodes: bool, optional
	EnablePrivateNodes terra.BoolValue `hcl:"enable_private_nodes,attr"`
	// PodIpv4CidrBlock: string, optional
	PodIpv4CidrBlock terra.StringValue `hcl:"pod_ipv4_cidr_block,attr"`
	// PodRange: string, optional
	PodRange terra.StringValue `hcl:"pod_range,attr"`
	// NetworkConfigAdditionalNodeNetworkConfigs: min=0
	AdditionalNodeNetworkConfigs []NetworkConfigAdditionalNodeNetworkConfigs `hcl:"additional_node_network_configs,block" validate:"min=0"`
	// NetworkConfigAdditionalPodNetworkConfigs: min=0
	AdditionalPodNetworkConfigs []NetworkConfigAdditionalPodNetworkConfigs `hcl:"additional_pod_network_configs,block" validate:"min=0"`
	// NetworkConfigNetworkPerformanceConfig: optional
	NetworkPerformanceConfig *NetworkConfigNetworkPerformanceConfig `hcl:"network_performance_config,block"`
	// NetworkConfigPodCidrOverprovisionConfig: optional
	PodCidrOverprovisionConfig *NetworkConfigPodCidrOverprovisionConfig `hcl:"pod_cidr_overprovision_config,block"`
}

type NetworkConfigAdditionalNodeNetworkConfigs struct {
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
}

type NetworkConfigAdditionalPodNetworkConfigs struct {
	// MaxPodsPerNode: number, optional
	MaxPodsPerNode terra.NumberValue `hcl:"max_pods_per_node,attr"`
	// SecondaryPodRange: string, optional
	SecondaryPodRange terra.StringValue `hcl:"secondary_pod_range,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
}

type NetworkConfigNetworkPerformanceConfig struct {
	// TotalEgressBandwidthTier: string, required
	TotalEgressBandwidthTier terra.StringValue `hcl:"total_egress_bandwidth_tier,attr" validate:"required"`
}

type NetworkConfigPodCidrOverprovisionConfig struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type NodeConfig struct {
	// BootDiskKmsKey: string, optional
	BootDiskKmsKey terra.StringValue `hcl:"boot_disk_kms_key,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// DiskType: string, optional
	DiskType terra.StringValue `hcl:"disk_type,attr"`
	// EnableConfidentialStorage: bool, optional
	EnableConfidentialStorage terra.BoolValue `hcl:"enable_confidential_storage,attr"`
	// ImageType: string, optional
	ImageType terra.StringValue `hcl:"image_type,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LocalSsdCount: number, optional
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr"`
	// LoggingVariant: string, optional
	LoggingVariant terra.StringValue `hcl:"logging_variant,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NodeGroup: string, optional
	NodeGroup terra.StringValue `hcl:"node_group,attr"`
	// OauthScopes: set of string, optional
	OauthScopes terra.SetValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
	// Preemptible: bool, optional
	Preemptible terra.BoolValue `hcl:"preemptible,attr"`
	// ResourceLabels: map of string, optional
	ResourceLabels terra.MapValue[terra.StringValue] `hcl:"resource_labels,attr"`
	// ResourceManagerTags: map of string, optional
	ResourceManagerTags terra.MapValue[terra.StringValue] `hcl:"resource_manager_tags,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// Spot: bool, optional
	Spot terra.BoolValue `hcl:"spot,attr"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
	// NodeConfigGuestAccelerator: min=0
	GuestAccelerator []NodeConfigGuestAccelerator `hcl:"guest_accelerator,block" validate:"min=0"`
	// NodeConfigAdvancedMachineFeatures: optional
	AdvancedMachineFeatures *NodeConfigAdvancedMachineFeatures `hcl:"advanced_machine_features,block"`
	// NodeConfigConfidentialNodes: optional
	ConfidentialNodes *NodeConfigConfidentialNodes `hcl:"confidential_nodes,block"`
	// NodeConfigEphemeralStorageConfig: optional
	EphemeralStorageConfig *NodeConfigEphemeralStorageConfig `hcl:"ephemeral_storage_config,block"`
	// NodeConfigEphemeralStorageLocalSsdConfig: optional
	EphemeralStorageLocalSsdConfig *NodeConfigEphemeralStorageLocalSsdConfig `hcl:"ephemeral_storage_local_ssd_config,block"`
	// NodeConfigFastSocket: optional
	FastSocket *NodeConfigFastSocket `hcl:"fast_socket,block"`
	// NodeConfigGcfsConfig: optional
	GcfsConfig *NodeConfigGcfsConfig `hcl:"gcfs_config,block"`
	// NodeConfigGvnic: optional
	Gvnic *NodeConfigGvnic `hcl:"gvnic,block"`
	// NodeConfigHostMaintenancePolicy: optional
	HostMaintenancePolicy *NodeConfigHostMaintenancePolicy `hcl:"host_maintenance_policy,block"`
	// NodeConfigKubeletConfig: optional
	KubeletConfig *NodeConfigKubeletConfig `hcl:"kubelet_config,block"`
	// NodeConfigLinuxNodeConfig: optional
	LinuxNodeConfig *NodeConfigLinuxNodeConfig `hcl:"linux_node_config,block"`
	// NodeConfigLocalNvmeSsdBlockConfig: optional
	LocalNvmeSsdBlockConfig *NodeConfigLocalNvmeSsdBlockConfig `hcl:"local_nvme_ssd_block_config,block"`
	// NodeConfigReservationAffinity: optional
	ReservationAffinity *NodeConfigReservationAffinity `hcl:"reservation_affinity,block"`
	// NodeConfigSandboxConfig: optional
	SandboxConfig *NodeConfigSandboxConfig `hcl:"sandbox_config,block"`
	// NodeConfigShieldedInstanceConfig: optional
	ShieldedInstanceConfig *NodeConfigShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
	// NodeConfigSoleTenantConfig: optional
	SoleTenantConfig *NodeConfigSoleTenantConfig `hcl:"sole_tenant_config,block"`
	// NodeConfigTaint: min=0
	Taint []NodeConfigTaint `hcl:"taint,block" validate:"min=0"`
	// NodeConfigWorkloadMetadataConfig: optional
	WorkloadMetadataConfig *NodeConfigWorkloadMetadataConfig `hcl:"workload_metadata_config,block"`
}

type NodeConfigGuestAccelerator struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// GpuPartitionSize: string, optional
	GpuPartitionSize terra.StringValue `hcl:"gpu_partition_size,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// NodeConfigGuestAcceleratorGpuDriverInstallationConfig: min=0
	GpuDriverInstallationConfig []NodeConfigGuestAcceleratorGpuDriverInstallationConfig `hcl:"gpu_driver_installation_config,block" validate:"min=0"`
	// NodeConfigGuestAcceleratorGpuSharingConfig: min=0
	GpuSharingConfig []NodeConfigGuestAcceleratorGpuSharingConfig `hcl:"gpu_sharing_config,block" validate:"min=0"`
}

type NodeConfigGuestAcceleratorGpuDriverInstallationConfig struct {
	// GpuDriverVersion: string, optional
	GpuDriverVersion terra.StringValue `hcl:"gpu_driver_version,attr"`
}

type NodeConfigGuestAcceleratorGpuSharingConfig struct {
	// GpuSharingStrategy: string, optional
	GpuSharingStrategy terra.StringValue `hcl:"gpu_sharing_strategy,attr"`
	// MaxSharedClientsPerGpu: number, optional
	MaxSharedClientsPerGpu terra.NumberValue `hcl:"max_shared_clients_per_gpu,attr"`
}

type NodeConfigAdvancedMachineFeatures struct {
	// ThreadsPerCore: number, required
	ThreadsPerCore terra.NumberValue `hcl:"threads_per_core,attr" validate:"required"`
}

type NodeConfigConfidentialNodes struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodeConfigEphemeralStorageConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodeConfigEphemeralStorageLocalSsdConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodeConfigFastSocket struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodeConfigGcfsConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodeConfigGvnic struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodeConfigHostMaintenancePolicy struct {
	// MaintenanceInterval: string, required
	MaintenanceInterval terra.StringValue `hcl:"maintenance_interval,attr" validate:"required"`
}

type NodeConfigKubeletConfig struct {
	// CpuCfsQuota: bool, optional
	CpuCfsQuota terra.BoolValue `hcl:"cpu_cfs_quota,attr"`
	// CpuCfsQuotaPeriod: string, optional
	CpuCfsQuotaPeriod terra.StringValue `hcl:"cpu_cfs_quota_period,attr"`
	// CpuManagerPolicy: string, required
	CpuManagerPolicy terra.StringValue `hcl:"cpu_manager_policy,attr" validate:"required"`
	// PodPidsLimit: number, optional
	PodPidsLimit terra.NumberValue `hcl:"pod_pids_limit,attr"`
}

type NodeConfigLinuxNodeConfig struct {
	// CgroupMode: string, optional
	CgroupMode terra.StringValue `hcl:"cgroup_mode,attr"`
	// Sysctls: map of string, optional
	Sysctls terra.MapValue[terra.StringValue] `hcl:"sysctls,attr"`
}

type NodeConfigLocalNvmeSsdBlockConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodeConfigReservationAffinity struct {
	// ConsumeReservationType: string, required
	ConsumeReservationType terra.StringValue `hcl:"consume_reservation_type,attr" validate:"required"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type NodeConfigSandboxConfig struct {
	// SandboxType: string, required
	SandboxType terra.StringValue `hcl:"sandbox_type,attr" validate:"required"`
}

type NodeConfigShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
}

type NodeConfigSoleTenantConfig struct {
	// NodeConfigSoleTenantConfigNodeAffinity: min=1
	NodeAffinity []NodeConfigSoleTenantConfigNodeAffinity `hcl:"node_affinity,block" validate:"min=1"`
}

type NodeConfigSoleTenantConfigNodeAffinity struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type NodeConfigTaint struct {
	// Effect: string, required
	Effect terra.StringValue `hcl:"effect,attr" validate:"required"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type NodeConfigWorkloadMetadataConfig struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type PlacementPolicy struct {
	// PolicyName: string, optional
	PolicyName terra.StringValue `hcl:"policy_name,attr"`
	// TpuTopology: string, optional
	TpuTopology terra.StringValue `hcl:"tpu_topology,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type QueuedProvisioning struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type UpgradeSettings struct {
	// MaxSurge: number, optional
	MaxSurge terra.NumberValue `hcl:"max_surge,attr"`
	// MaxUnavailable: number, optional
	MaxUnavailable terra.NumberValue `hcl:"max_unavailable,attr"`
	// Strategy: string, optional
	Strategy terra.StringValue `hcl:"strategy,attr"`
	// UpgradeSettingsBlueGreenSettings: optional
	BlueGreenSettings *UpgradeSettingsBlueGreenSettings `hcl:"blue_green_settings,block"`
}

type UpgradeSettingsBlueGreenSettings struct {
	// NodePoolSoakDuration: string, optional
	NodePoolSoakDuration terra.StringValue `hcl:"node_pool_soak_duration,attr"`
	// UpgradeSettingsBlueGreenSettingsStandardRolloutPolicy: required
	StandardRolloutPolicy *UpgradeSettingsBlueGreenSettingsStandardRolloutPolicy `hcl:"standard_rollout_policy,block" validate:"required"`
}

type UpgradeSettingsBlueGreenSettingsStandardRolloutPolicy struct {
	// BatchNodeCount: number, optional
	BatchNodeCount terra.NumberValue `hcl:"batch_node_count,attr"`
	// BatchPercentage: number, optional
	BatchPercentage terra.NumberValue `hcl:"batch_percentage,attr"`
	// BatchSoakDuration: string, optional
	BatchSoakDuration terra.StringValue `hcl:"batch_soak_duration,attr"`
}

type AutoscalingAttributes struct {
	ref terra.Reference
}

func (a AutoscalingAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AutoscalingAttributes) InternalWithRef(ref terra.Reference) AutoscalingAttributes {
	return AutoscalingAttributes{ref: ref}
}

func (a AutoscalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AutoscalingAttributes) LocationPolicy() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("location_policy"))
}

func (a AutoscalingAttributes) MaxNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("max_node_count"))
}

func (a AutoscalingAttributes) MinNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("min_node_count"))
}

func (a AutoscalingAttributes) TotalMaxNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("total_max_node_count"))
}

func (a AutoscalingAttributes) TotalMinNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("total_min_node_count"))
}

type ManagementAttributes struct {
	ref terra.Reference
}

func (m ManagementAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m ManagementAttributes) InternalWithRef(ref terra.Reference) ManagementAttributes {
	return ManagementAttributes{ref: ref}
}

func (m ManagementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m ManagementAttributes) AutoRepair() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("auto_repair"))
}

func (m ManagementAttributes) AutoUpgrade() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("auto_upgrade"))
}

type NetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAttributes {
	return NetworkConfigAttributes{ref: ref}
}

func (nc NetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigAttributes) CreatePodRange() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("create_pod_range"))
}

func (nc NetworkConfigAttributes) EnablePrivateNodes() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("enable_private_nodes"))
}

func (nc NetworkConfigAttributes) PodIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("pod_ipv4_cidr_block"))
}

func (nc NetworkConfigAttributes) PodRange() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("pod_range"))
}

func (nc NetworkConfigAttributes) AdditionalNodeNetworkConfigs() terra.ListValue[NetworkConfigAdditionalNodeNetworkConfigsAttributes] {
	return terra.ReferenceAsList[NetworkConfigAdditionalNodeNetworkConfigsAttributes](nc.ref.Append("additional_node_network_configs"))
}

func (nc NetworkConfigAttributes) AdditionalPodNetworkConfigs() terra.ListValue[NetworkConfigAdditionalPodNetworkConfigsAttributes] {
	return terra.ReferenceAsList[NetworkConfigAdditionalPodNetworkConfigsAttributes](nc.ref.Append("additional_pod_network_configs"))
}

func (nc NetworkConfigAttributes) NetworkPerformanceConfig() terra.ListValue[NetworkConfigNetworkPerformanceConfigAttributes] {
	return terra.ReferenceAsList[NetworkConfigNetworkPerformanceConfigAttributes](nc.ref.Append("network_performance_config"))
}

func (nc NetworkConfigAttributes) PodCidrOverprovisionConfig() terra.ListValue[NetworkConfigPodCidrOverprovisionConfigAttributes] {
	return terra.ReferenceAsList[NetworkConfigPodCidrOverprovisionConfigAttributes](nc.ref.Append("pod_cidr_overprovision_config"))
}

type NetworkConfigAdditionalNodeNetworkConfigsAttributes struct {
	ref terra.Reference
}

func (annc NetworkConfigAdditionalNodeNetworkConfigsAttributes) InternalRef() (terra.Reference, error) {
	return annc.ref, nil
}

func (annc NetworkConfigAdditionalNodeNetworkConfigsAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAdditionalNodeNetworkConfigsAttributes {
	return NetworkConfigAdditionalNodeNetworkConfigsAttributes{ref: ref}
}

func (annc NetworkConfigAdditionalNodeNetworkConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return annc.ref.InternalTokens()
}

func (annc NetworkConfigAdditionalNodeNetworkConfigsAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(annc.ref.Append("network"))
}

func (annc NetworkConfigAdditionalNodeNetworkConfigsAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(annc.ref.Append("subnetwork"))
}

type NetworkConfigAdditionalPodNetworkConfigsAttributes struct {
	ref terra.Reference
}

func (apnc NetworkConfigAdditionalPodNetworkConfigsAttributes) InternalRef() (terra.Reference, error) {
	return apnc.ref, nil
}

func (apnc NetworkConfigAdditionalPodNetworkConfigsAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAdditionalPodNetworkConfigsAttributes {
	return NetworkConfigAdditionalPodNetworkConfigsAttributes{ref: ref}
}

func (apnc NetworkConfigAdditionalPodNetworkConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return apnc.ref.InternalTokens()
}

func (apnc NetworkConfigAdditionalPodNetworkConfigsAttributes) MaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(apnc.ref.Append("max_pods_per_node"))
}

func (apnc NetworkConfigAdditionalPodNetworkConfigsAttributes) SecondaryPodRange() terra.StringValue {
	return terra.ReferenceAsString(apnc.ref.Append("secondary_pod_range"))
}

func (apnc NetworkConfigAdditionalPodNetworkConfigsAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(apnc.ref.Append("subnetwork"))
}

type NetworkConfigNetworkPerformanceConfigAttributes struct {
	ref terra.Reference
}

func (npc NetworkConfigNetworkPerformanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return npc.ref, nil
}

func (npc NetworkConfigNetworkPerformanceConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigNetworkPerformanceConfigAttributes {
	return NetworkConfigNetworkPerformanceConfigAttributes{ref: ref}
}

func (npc NetworkConfigNetworkPerformanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npc.ref.InternalTokens()
}

func (npc NetworkConfigNetworkPerformanceConfigAttributes) TotalEgressBandwidthTier() terra.StringValue {
	return terra.ReferenceAsString(npc.ref.Append("total_egress_bandwidth_tier"))
}

type NetworkConfigPodCidrOverprovisionConfigAttributes struct {
	ref terra.Reference
}

func (pcoc NetworkConfigPodCidrOverprovisionConfigAttributes) InternalRef() (terra.Reference, error) {
	return pcoc.ref, nil
}

func (pcoc NetworkConfigPodCidrOverprovisionConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigPodCidrOverprovisionConfigAttributes {
	return NetworkConfigPodCidrOverprovisionConfigAttributes{ref: ref}
}

func (pcoc NetworkConfigPodCidrOverprovisionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pcoc.ref.InternalTokens()
}

func (pcoc NetworkConfigPodCidrOverprovisionConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(pcoc.ref.Append("disabled"))
}

type NodeConfigAttributes struct {
	ref terra.Reference
}

func (nc NodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigAttributes {
	return NodeConfigAttributes{ref: ref}
}

func (nc NodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NodeConfigAttributes) BootDiskKmsKey() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("boot_disk_kms_key"))
}

func (nc NodeConfigAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("disk_size_gb"))
}

func (nc NodeConfigAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("disk_type"))
}

func (nc NodeConfigAttributes) EnableConfidentialStorage() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("enable_confidential_storage"))
}

func (nc NodeConfigAttributes) ImageType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("image_type"))
}

func (nc NodeConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("labels"))
}

func (nc NodeConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("local_ssd_count"))
}

func (nc NodeConfigAttributes) LoggingVariant() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("logging_variant"))
}

func (nc NodeConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("machine_type"))
}

func (nc NodeConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("metadata"))
}

func (nc NodeConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("min_cpu_platform"))
}

func (nc NodeConfigAttributes) NodeGroup() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("node_group"))
}

func (nc NodeConfigAttributes) OauthScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("oauth_scopes"))
}

func (nc NodeConfigAttributes) Preemptible() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("preemptible"))
}

func (nc NodeConfigAttributes) ResourceLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("resource_labels"))
}

func (nc NodeConfigAttributes) ResourceManagerTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("resource_manager_tags"))
}

func (nc NodeConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("service_account"))
}

func (nc NodeConfigAttributes) Spot() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("spot"))
}

func (nc NodeConfigAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("tags"))
}

func (nc NodeConfigAttributes) EffectiveTaints() terra.ListValue[NodeConfigEffectiveTaintsAttributes] {
	return terra.ReferenceAsList[NodeConfigEffectiveTaintsAttributes](nc.ref.Append("effective_taints"))
}

func (nc NodeConfigAttributes) GuestAccelerator() terra.ListValue[NodeConfigGuestAcceleratorAttributes] {
	return terra.ReferenceAsList[NodeConfigGuestAcceleratorAttributes](nc.ref.Append("guest_accelerator"))
}

func (nc NodeConfigAttributes) AdvancedMachineFeatures() terra.ListValue[NodeConfigAdvancedMachineFeaturesAttributes] {
	return terra.ReferenceAsList[NodeConfigAdvancedMachineFeaturesAttributes](nc.ref.Append("advanced_machine_features"))
}

func (nc NodeConfigAttributes) ConfidentialNodes() terra.ListValue[NodeConfigConfidentialNodesAttributes] {
	return terra.ReferenceAsList[NodeConfigConfidentialNodesAttributes](nc.ref.Append("confidential_nodes"))
}

func (nc NodeConfigAttributes) EphemeralStorageConfig() terra.ListValue[NodeConfigEphemeralStorageConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigEphemeralStorageConfigAttributes](nc.ref.Append("ephemeral_storage_config"))
}

func (nc NodeConfigAttributes) EphemeralStorageLocalSsdConfig() terra.ListValue[NodeConfigEphemeralStorageLocalSsdConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigEphemeralStorageLocalSsdConfigAttributes](nc.ref.Append("ephemeral_storage_local_ssd_config"))
}

func (nc NodeConfigAttributes) FastSocket() terra.ListValue[NodeConfigFastSocketAttributes] {
	return terra.ReferenceAsList[NodeConfigFastSocketAttributes](nc.ref.Append("fast_socket"))
}

func (nc NodeConfigAttributes) GcfsConfig() terra.ListValue[NodeConfigGcfsConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigGcfsConfigAttributes](nc.ref.Append("gcfs_config"))
}

func (nc NodeConfigAttributes) Gvnic() terra.ListValue[NodeConfigGvnicAttributes] {
	return terra.ReferenceAsList[NodeConfigGvnicAttributes](nc.ref.Append("gvnic"))
}

func (nc NodeConfigAttributes) HostMaintenancePolicy() terra.ListValue[NodeConfigHostMaintenancePolicyAttributes] {
	return terra.ReferenceAsList[NodeConfigHostMaintenancePolicyAttributes](nc.ref.Append("host_maintenance_policy"))
}

func (nc NodeConfigAttributes) KubeletConfig() terra.ListValue[NodeConfigKubeletConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigKubeletConfigAttributes](nc.ref.Append("kubelet_config"))
}

func (nc NodeConfigAttributes) LinuxNodeConfig() terra.ListValue[NodeConfigLinuxNodeConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigLinuxNodeConfigAttributes](nc.ref.Append("linux_node_config"))
}

func (nc NodeConfigAttributes) LocalNvmeSsdBlockConfig() terra.ListValue[NodeConfigLocalNvmeSsdBlockConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigLocalNvmeSsdBlockConfigAttributes](nc.ref.Append("local_nvme_ssd_block_config"))
}

func (nc NodeConfigAttributes) ReservationAffinity() terra.ListValue[NodeConfigReservationAffinityAttributes] {
	return terra.ReferenceAsList[NodeConfigReservationAffinityAttributes](nc.ref.Append("reservation_affinity"))
}

func (nc NodeConfigAttributes) SandboxConfig() terra.ListValue[NodeConfigSandboxConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigSandboxConfigAttributes](nc.ref.Append("sandbox_config"))
}

func (nc NodeConfigAttributes) ShieldedInstanceConfig() terra.ListValue[NodeConfigShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigShieldedInstanceConfigAttributes](nc.ref.Append("shielded_instance_config"))
}

func (nc NodeConfigAttributes) SoleTenantConfig() terra.ListValue[NodeConfigSoleTenantConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigSoleTenantConfigAttributes](nc.ref.Append("sole_tenant_config"))
}

func (nc NodeConfigAttributes) Taint() terra.ListValue[NodeConfigTaintAttributes] {
	return terra.ReferenceAsList[NodeConfigTaintAttributes](nc.ref.Append("taint"))
}

func (nc NodeConfigAttributes) WorkloadMetadataConfig() terra.ListValue[NodeConfigWorkloadMetadataConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigWorkloadMetadataConfigAttributes](nc.ref.Append("workload_metadata_config"))
}

type NodeConfigEffectiveTaintsAttributes struct {
	ref terra.Reference
}

func (et NodeConfigEffectiveTaintsAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et NodeConfigEffectiveTaintsAttributes) InternalWithRef(ref terra.Reference) NodeConfigEffectiveTaintsAttributes {
	return NodeConfigEffectiveTaintsAttributes{ref: ref}
}

func (et NodeConfigEffectiveTaintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et NodeConfigEffectiveTaintsAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("effect"))
}

func (et NodeConfigEffectiveTaintsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("key"))
}

func (et NodeConfigEffectiveTaintsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("value"))
}

type NodeConfigGuestAcceleratorAttributes struct {
	ref terra.Reference
}

func (ga NodeConfigGuestAcceleratorAttributes) InternalRef() (terra.Reference, error) {
	return ga.ref, nil
}

func (ga NodeConfigGuestAcceleratorAttributes) InternalWithRef(ref terra.Reference) NodeConfigGuestAcceleratorAttributes {
	return NodeConfigGuestAcceleratorAttributes{ref: ref}
}

func (ga NodeConfigGuestAcceleratorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ga.ref.InternalTokens()
}

func (ga NodeConfigGuestAcceleratorAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(ga.ref.Append("count"))
}

func (ga NodeConfigGuestAcceleratorAttributes) GpuPartitionSize() terra.StringValue {
	return terra.ReferenceAsString(ga.ref.Append("gpu_partition_size"))
}

func (ga NodeConfigGuestAcceleratorAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ga.ref.Append("type"))
}

func (ga NodeConfigGuestAcceleratorAttributes) GpuDriverInstallationConfig() terra.ListValue[NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes](ga.ref.Append("gpu_driver_installation_config"))
}

func (ga NodeConfigGuestAcceleratorAttributes) GpuSharingConfig() terra.ListValue[NodeConfigGuestAcceleratorGpuSharingConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigGuestAcceleratorGpuSharingConfigAttributes](ga.ref.Append("gpu_sharing_config"))
}

type NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes struct {
	ref terra.Reference
}

func (gdic NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalRef() (terra.Reference, error) {
	return gdic.ref, nil
}

func (gdic NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes {
	return NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes{ref: ref}
}

func (gdic NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gdic.ref.InternalTokens()
}

func (gdic NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) GpuDriverVersion() terra.StringValue {
	return terra.ReferenceAsString(gdic.ref.Append("gpu_driver_version"))
}

type NodeConfigGuestAcceleratorGpuSharingConfigAttributes struct {
	ref terra.Reference
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalRef() (terra.Reference, error) {
	return gsc.ref, nil
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigGuestAcceleratorGpuSharingConfigAttributes {
	return NodeConfigGuestAcceleratorGpuSharingConfigAttributes{ref: ref}
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gsc.ref.InternalTokens()
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) GpuSharingStrategy() terra.StringValue {
	return terra.ReferenceAsString(gsc.ref.Append("gpu_sharing_strategy"))
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) MaxSharedClientsPerGpu() terra.NumberValue {
	return terra.ReferenceAsNumber(gsc.ref.Append("max_shared_clients_per_gpu"))
}

type NodeConfigAdvancedMachineFeaturesAttributes struct {
	ref terra.Reference
}

func (amf NodeConfigAdvancedMachineFeaturesAttributes) InternalRef() (terra.Reference, error) {
	return amf.ref, nil
}

func (amf NodeConfigAdvancedMachineFeaturesAttributes) InternalWithRef(ref terra.Reference) NodeConfigAdvancedMachineFeaturesAttributes {
	return NodeConfigAdvancedMachineFeaturesAttributes{ref: ref}
}

func (amf NodeConfigAdvancedMachineFeaturesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return amf.ref.InternalTokens()
}

func (amf NodeConfigAdvancedMachineFeaturesAttributes) ThreadsPerCore() terra.NumberValue {
	return terra.ReferenceAsNumber(amf.ref.Append("threads_per_core"))
}

type NodeConfigConfidentialNodesAttributes struct {
	ref terra.Reference
}

func (cn NodeConfigConfidentialNodesAttributes) InternalRef() (terra.Reference, error) {
	return cn.ref, nil
}

func (cn NodeConfigConfidentialNodesAttributes) InternalWithRef(ref terra.Reference) NodeConfigConfidentialNodesAttributes {
	return NodeConfigConfidentialNodesAttributes{ref: ref}
}

func (cn NodeConfigConfidentialNodesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cn.ref.InternalTokens()
}

func (cn NodeConfigConfidentialNodesAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cn.ref.Append("enabled"))
}

type NodeConfigEphemeralStorageConfigAttributes struct {
	ref terra.Reference
}

func (esc NodeConfigEphemeralStorageConfigAttributes) InternalRef() (terra.Reference, error) {
	return esc.ref, nil
}

func (esc NodeConfigEphemeralStorageConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigEphemeralStorageConfigAttributes {
	return NodeConfigEphemeralStorageConfigAttributes{ref: ref}
}

func (esc NodeConfigEphemeralStorageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return esc.ref.InternalTokens()
}

func (esc NodeConfigEphemeralStorageConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(esc.ref.Append("local_ssd_count"))
}

type NodeConfigEphemeralStorageLocalSsdConfigAttributes struct {
	ref terra.Reference
}

func (eslsc NodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalRef() (terra.Reference, error) {
	return eslsc.ref, nil
}

func (eslsc NodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigEphemeralStorageLocalSsdConfigAttributes {
	return NodeConfigEphemeralStorageLocalSsdConfigAttributes{ref: ref}
}

func (eslsc NodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eslsc.ref.InternalTokens()
}

func (eslsc NodeConfigEphemeralStorageLocalSsdConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(eslsc.ref.Append("local_ssd_count"))
}

type NodeConfigFastSocketAttributes struct {
	ref terra.Reference
}

func (fs NodeConfigFastSocketAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs NodeConfigFastSocketAttributes) InternalWithRef(ref terra.Reference) NodeConfigFastSocketAttributes {
	return NodeConfigFastSocketAttributes{ref: ref}
}

func (fs NodeConfigFastSocketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs NodeConfigFastSocketAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(fs.ref.Append("enabled"))
}

type NodeConfigGcfsConfigAttributes struct {
	ref terra.Reference
}

func (gc NodeConfigGcfsConfigAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc NodeConfigGcfsConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigGcfsConfigAttributes {
	return NodeConfigGcfsConfigAttributes{ref: ref}
}

func (gc NodeConfigGcfsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc NodeConfigGcfsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gc.ref.Append("enabled"))
}

type NodeConfigGvnicAttributes struct {
	ref terra.Reference
}

func (g NodeConfigGvnicAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g NodeConfigGvnicAttributes) InternalWithRef(ref terra.Reference) NodeConfigGvnicAttributes {
	return NodeConfigGvnicAttributes{ref: ref}
}

func (g NodeConfigGvnicAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g NodeConfigGvnicAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("enabled"))
}

type NodeConfigHostMaintenancePolicyAttributes struct {
	ref terra.Reference
}

func (hmp NodeConfigHostMaintenancePolicyAttributes) InternalRef() (terra.Reference, error) {
	return hmp.ref, nil
}

func (hmp NodeConfigHostMaintenancePolicyAttributes) InternalWithRef(ref terra.Reference) NodeConfigHostMaintenancePolicyAttributes {
	return NodeConfigHostMaintenancePolicyAttributes{ref: ref}
}

func (hmp NodeConfigHostMaintenancePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hmp.ref.InternalTokens()
}

func (hmp NodeConfigHostMaintenancePolicyAttributes) MaintenanceInterval() terra.StringValue {
	return terra.ReferenceAsString(hmp.ref.Append("maintenance_interval"))
}

type NodeConfigKubeletConfigAttributes struct {
	ref terra.Reference
}

func (kc NodeConfigKubeletConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc NodeConfigKubeletConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigKubeletConfigAttributes {
	return NodeConfigKubeletConfigAttributes{ref: ref}
}

func (kc NodeConfigKubeletConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc NodeConfigKubeletConfigAttributes) CpuCfsQuota() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("cpu_cfs_quota"))
}

func (kc NodeConfigKubeletConfigAttributes) CpuCfsQuotaPeriod() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cpu_cfs_quota_period"))
}

func (kc NodeConfigKubeletConfigAttributes) CpuManagerPolicy() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cpu_manager_policy"))
}

func (kc NodeConfigKubeletConfigAttributes) PodPidsLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("pod_pids_limit"))
}

type NodeConfigLinuxNodeConfigAttributes struct {
	ref terra.Reference
}

func (lnc NodeConfigLinuxNodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnc.ref, nil
}

func (lnc NodeConfigLinuxNodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigLinuxNodeConfigAttributes {
	return NodeConfigLinuxNodeConfigAttributes{ref: ref}
}

func (lnc NodeConfigLinuxNodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnc.ref.InternalTokens()
}

func (lnc NodeConfigLinuxNodeConfigAttributes) CgroupMode() terra.StringValue {
	return terra.ReferenceAsString(lnc.ref.Append("cgroup_mode"))
}

func (lnc NodeConfigLinuxNodeConfigAttributes) Sysctls() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lnc.ref.Append("sysctls"))
}

type NodeConfigLocalNvmeSsdBlockConfigAttributes struct {
	ref terra.Reference
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnsbc.ref, nil
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigLocalNvmeSsdBlockConfigAttributes {
	return NodeConfigLocalNvmeSsdBlockConfigAttributes{ref: ref}
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnsbc.ref.InternalTokens()
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(lnsbc.ref.Append("local_ssd_count"))
}

type NodeConfigReservationAffinityAttributes struct {
	ref terra.Reference
}

func (ra NodeConfigReservationAffinityAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra NodeConfigReservationAffinityAttributes) InternalWithRef(ref terra.Reference) NodeConfigReservationAffinityAttributes {
	return NodeConfigReservationAffinityAttributes{ref: ref}
}

func (ra NodeConfigReservationAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra NodeConfigReservationAffinityAttributes) ConsumeReservationType() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("consume_reservation_type"))
}

func (ra NodeConfigReservationAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("key"))
}

func (ra NodeConfigReservationAffinityAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ra.ref.Append("values"))
}

type NodeConfigSandboxConfigAttributes struct {
	ref terra.Reference
}

func (sc NodeConfigSandboxConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc NodeConfigSandboxConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigSandboxConfigAttributes {
	return NodeConfigSandboxConfigAttributes{ref: ref}
}

func (sc NodeConfigSandboxConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc NodeConfigSandboxConfigAttributes) SandboxType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("sandbox_type"))
}

type NodeConfigShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic NodeConfigShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic NodeConfigShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigShieldedInstanceConfigAttributes {
	return NodeConfigShieldedInstanceConfigAttributes{ref: ref}
}

func (sic NodeConfigShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic NodeConfigShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic NodeConfigShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

type NodeConfigSoleTenantConfigAttributes struct {
	ref terra.Reference
}

func (stc NodeConfigSoleTenantConfigAttributes) InternalRef() (terra.Reference, error) {
	return stc.ref, nil
}

func (stc NodeConfigSoleTenantConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigSoleTenantConfigAttributes {
	return NodeConfigSoleTenantConfigAttributes{ref: ref}
}

func (stc NodeConfigSoleTenantConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return stc.ref.InternalTokens()
}

func (stc NodeConfigSoleTenantConfigAttributes) NodeAffinity() terra.SetValue[NodeConfigSoleTenantConfigNodeAffinityAttributes] {
	return terra.ReferenceAsSet[NodeConfigSoleTenantConfigNodeAffinityAttributes](stc.ref.Append("node_affinity"))
}

type NodeConfigSoleTenantConfigNodeAffinityAttributes struct {
	ref terra.Reference
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) InternalRef() (terra.Reference, error) {
	return na.ref, nil
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) InternalWithRef(ref terra.Reference) NodeConfigSoleTenantConfigNodeAffinityAttributes {
	return NodeConfigSoleTenantConfigNodeAffinityAttributes{ref: ref}
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return na.ref.InternalTokens()
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("key"))
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("operator"))
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](na.ref.Append("values"))
}

type NodeConfigTaintAttributes struct {
	ref terra.Reference
}

func (t NodeConfigTaintAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t NodeConfigTaintAttributes) InternalWithRef(ref terra.Reference) NodeConfigTaintAttributes {
	return NodeConfigTaintAttributes{ref: ref}
}

func (t NodeConfigTaintAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t NodeConfigTaintAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("effect"))
}

func (t NodeConfigTaintAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t NodeConfigTaintAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type NodeConfigWorkloadMetadataConfigAttributes struct {
	ref terra.Reference
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) InternalRef() (terra.Reference, error) {
	return wmc.ref, nil
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigWorkloadMetadataConfigAttributes {
	return NodeConfigWorkloadMetadataConfigAttributes{ref: ref}
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wmc.ref.InternalTokens()
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(wmc.ref.Append("mode"))
}

type PlacementPolicyAttributes struct {
	ref terra.Reference
}

func (pp PlacementPolicyAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp PlacementPolicyAttributes) InternalWithRef(ref terra.Reference) PlacementPolicyAttributes {
	return PlacementPolicyAttributes{ref: ref}
}

func (pp PlacementPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp PlacementPolicyAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("policy_name"))
}

func (pp PlacementPolicyAttributes) TpuTopology() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("tpu_topology"))
}

func (pp PlacementPolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("type"))
}

type QueuedProvisioningAttributes struct {
	ref terra.Reference
}

func (qp QueuedProvisioningAttributes) InternalRef() (terra.Reference, error) {
	return qp.ref, nil
}

func (qp QueuedProvisioningAttributes) InternalWithRef(ref terra.Reference) QueuedProvisioningAttributes {
	return QueuedProvisioningAttributes{ref: ref}
}

func (qp QueuedProvisioningAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qp.ref.InternalTokens()
}

func (qp QueuedProvisioningAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(qp.ref.Append("enabled"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type UpgradeSettingsAttributes struct {
	ref terra.Reference
}

func (us UpgradeSettingsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us UpgradeSettingsAttributes) InternalWithRef(ref terra.Reference) UpgradeSettingsAttributes {
	return UpgradeSettingsAttributes{ref: ref}
}

func (us UpgradeSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us UpgradeSettingsAttributes) MaxSurge() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("max_surge"))
}

func (us UpgradeSettingsAttributes) MaxUnavailable() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("max_unavailable"))
}

func (us UpgradeSettingsAttributes) Strategy() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("strategy"))
}

func (us UpgradeSettingsAttributes) BlueGreenSettings() terra.ListValue[UpgradeSettingsBlueGreenSettingsAttributes] {
	return terra.ReferenceAsList[UpgradeSettingsBlueGreenSettingsAttributes](us.ref.Append("blue_green_settings"))
}

type UpgradeSettingsBlueGreenSettingsAttributes struct {
	ref terra.Reference
}

func (bgs UpgradeSettingsBlueGreenSettingsAttributes) InternalRef() (terra.Reference, error) {
	return bgs.ref, nil
}

func (bgs UpgradeSettingsBlueGreenSettingsAttributes) InternalWithRef(ref terra.Reference) UpgradeSettingsBlueGreenSettingsAttributes {
	return UpgradeSettingsBlueGreenSettingsAttributes{ref: ref}
}

func (bgs UpgradeSettingsBlueGreenSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bgs.ref.InternalTokens()
}

func (bgs UpgradeSettingsBlueGreenSettingsAttributes) NodePoolSoakDuration() terra.StringValue {
	return terra.ReferenceAsString(bgs.ref.Append("node_pool_soak_duration"))
}

func (bgs UpgradeSettingsBlueGreenSettingsAttributes) StandardRolloutPolicy() terra.ListValue[UpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes] {
	return terra.ReferenceAsList[UpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes](bgs.ref.Append("standard_rollout_policy"))
}

type UpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes struct {
	ref terra.Reference
}

func (srp UpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalRef() (terra.Reference, error) {
	return srp.ref, nil
}

func (srp UpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalWithRef(ref terra.Reference) UpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes {
	return UpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes{ref: ref}
}

func (srp UpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return srp.ref.InternalTokens()
}

func (srp UpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(srp.ref.Append("batch_node_count"))
}

func (srp UpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(srp.ref.Append("batch_percentage"))
}

func (srp UpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchSoakDuration() terra.StringValue {
	return terra.ReferenceAsString(srp.ref.Append("batch_soak_duration"))
}

type AutoscalingState struct {
	LocationPolicy    string  `json:"location_policy"`
	MaxNodeCount      float64 `json:"max_node_count"`
	MinNodeCount      float64 `json:"min_node_count"`
	TotalMaxNodeCount float64 `json:"total_max_node_count"`
	TotalMinNodeCount float64 `json:"total_min_node_count"`
}

type ManagementState struct {
	AutoRepair  bool `json:"auto_repair"`
	AutoUpgrade bool `json:"auto_upgrade"`
}

type NetworkConfigState struct {
	CreatePodRange               bool                                             `json:"create_pod_range"`
	EnablePrivateNodes           bool                                             `json:"enable_private_nodes"`
	PodIpv4CidrBlock             string                                           `json:"pod_ipv4_cidr_block"`
	PodRange                     string                                           `json:"pod_range"`
	AdditionalNodeNetworkConfigs []NetworkConfigAdditionalNodeNetworkConfigsState `json:"additional_node_network_configs"`
	AdditionalPodNetworkConfigs  []NetworkConfigAdditionalPodNetworkConfigsState  `json:"additional_pod_network_configs"`
	NetworkPerformanceConfig     []NetworkConfigNetworkPerformanceConfigState     `json:"network_performance_config"`
	PodCidrOverprovisionConfig   []NetworkConfigPodCidrOverprovisionConfigState   `json:"pod_cidr_overprovision_config"`
}

type NetworkConfigAdditionalNodeNetworkConfigsState struct {
	Network    string `json:"network"`
	Subnetwork string `json:"subnetwork"`
}

type NetworkConfigAdditionalPodNetworkConfigsState struct {
	MaxPodsPerNode    float64 `json:"max_pods_per_node"`
	SecondaryPodRange string  `json:"secondary_pod_range"`
	Subnetwork        string  `json:"subnetwork"`
}

type NetworkConfigNetworkPerformanceConfigState struct {
	TotalEgressBandwidthTier string `json:"total_egress_bandwidth_tier"`
}

type NetworkConfigPodCidrOverprovisionConfigState struct {
	Disabled bool `json:"disabled"`
}

type NodeConfigState struct {
	BootDiskKmsKey                 string                                          `json:"boot_disk_kms_key"`
	DiskSizeGb                     float64                                         `json:"disk_size_gb"`
	DiskType                       string                                          `json:"disk_type"`
	EnableConfidentialStorage      bool                                            `json:"enable_confidential_storage"`
	ImageType                      string                                          `json:"image_type"`
	Labels                         map[string]string                               `json:"labels"`
	LocalSsdCount                  float64                                         `json:"local_ssd_count"`
	LoggingVariant                 string                                          `json:"logging_variant"`
	MachineType                    string                                          `json:"machine_type"`
	Metadata                       map[string]string                               `json:"metadata"`
	MinCpuPlatform                 string                                          `json:"min_cpu_platform"`
	NodeGroup                      string                                          `json:"node_group"`
	OauthScopes                    []string                                        `json:"oauth_scopes"`
	Preemptible                    bool                                            `json:"preemptible"`
	ResourceLabels                 map[string]string                               `json:"resource_labels"`
	ResourceManagerTags            map[string]string                               `json:"resource_manager_tags"`
	ServiceAccount                 string                                          `json:"service_account"`
	Spot                           bool                                            `json:"spot"`
	Tags                           []string                                        `json:"tags"`
	EffectiveTaints                []NodeConfigEffectiveTaintsState                `json:"effective_taints"`
	GuestAccelerator               []NodeConfigGuestAcceleratorState               `json:"guest_accelerator"`
	AdvancedMachineFeatures        []NodeConfigAdvancedMachineFeaturesState        `json:"advanced_machine_features"`
	ConfidentialNodes              []NodeConfigConfidentialNodesState              `json:"confidential_nodes"`
	EphemeralStorageConfig         []NodeConfigEphemeralStorageConfigState         `json:"ephemeral_storage_config"`
	EphemeralStorageLocalSsdConfig []NodeConfigEphemeralStorageLocalSsdConfigState `json:"ephemeral_storage_local_ssd_config"`
	FastSocket                     []NodeConfigFastSocketState                     `json:"fast_socket"`
	GcfsConfig                     []NodeConfigGcfsConfigState                     `json:"gcfs_config"`
	Gvnic                          []NodeConfigGvnicState                          `json:"gvnic"`
	HostMaintenancePolicy          []NodeConfigHostMaintenancePolicyState          `json:"host_maintenance_policy"`
	KubeletConfig                  []NodeConfigKubeletConfigState                  `json:"kubelet_config"`
	LinuxNodeConfig                []NodeConfigLinuxNodeConfigState                `json:"linux_node_config"`
	LocalNvmeSsdBlockConfig        []NodeConfigLocalNvmeSsdBlockConfigState        `json:"local_nvme_ssd_block_config"`
	ReservationAffinity            []NodeConfigReservationAffinityState            `json:"reservation_affinity"`
	SandboxConfig                  []NodeConfigSandboxConfigState                  `json:"sandbox_config"`
	ShieldedInstanceConfig         []NodeConfigShieldedInstanceConfigState         `json:"shielded_instance_config"`
	SoleTenantConfig               []NodeConfigSoleTenantConfigState               `json:"sole_tenant_config"`
	Taint                          []NodeConfigTaintState                          `json:"taint"`
	WorkloadMetadataConfig         []NodeConfigWorkloadMetadataConfigState         `json:"workload_metadata_config"`
}

type NodeConfigEffectiveTaintsState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type NodeConfigGuestAcceleratorState struct {
	Count                       float64                                                      `json:"count"`
	GpuPartitionSize            string                                                       `json:"gpu_partition_size"`
	Type                        string                                                       `json:"type"`
	GpuDriverInstallationConfig []NodeConfigGuestAcceleratorGpuDriverInstallationConfigState `json:"gpu_driver_installation_config"`
	GpuSharingConfig            []NodeConfigGuestAcceleratorGpuSharingConfigState            `json:"gpu_sharing_config"`
}

type NodeConfigGuestAcceleratorGpuDriverInstallationConfigState struct {
	GpuDriverVersion string `json:"gpu_driver_version"`
}

type NodeConfigGuestAcceleratorGpuSharingConfigState struct {
	GpuSharingStrategy     string  `json:"gpu_sharing_strategy"`
	MaxSharedClientsPerGpu float64 `json:"max_shared_clients_per_gpu"`
}

type NodeConfigAdvancedMachineFeaturesState struct {
	ThreadsPerCore float64 `json:"threads_per_core"`
}

type NodeConfigConfidentialNodesState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigEphemeralStorageConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodeConfigEphemeralStorageLocalSsdConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodeConfigFastSocketState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigGcfsConfigState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigGvnicState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigHostMaintenancePolicyState struct {
	MaintenanceInterval string `json:"maintenance_interval"`
}

type NodeConfigKubeletConfigState struct {
	CpuCfsQuota       bool    `json:"cpu_cfs_quota"`
	CpuCfsQuotaPeriod string  `json:"cpu_cfs_quota_period"`
	CpuManagerPolicy  string  `json:"cpu_manager_policy"`
	PodPidsLimit      float64 `json:"pod_pids_limit"`
}

type NodeConfigLinuxNodeConfigState struct {
	CgroupMode string            `json:"cgroup_mode"`
	Sysctls    map[string]string `json:"sysctls"`
}

type NodeConfigLocalNvmeSsdBlockConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodeConfigReservationAffinityState struct {
	ConsumeReservationType string   `json:"consume_reservation_type"`
	Key                    string   `json:"key"`
	Values                 []string `json:"values"`
}

type NodeConfigSandboxConfigState struct {
	SandboxType string `json:"sandbox_type"`
}

type NodeConfigShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
}

type NodeConfigSoleTenantConfigState struct {
	NodeAffinity []NodeConfigSoleTenantConfigNodeAffinityState `json:"node_affinity"`
}

type NodeConfigSoleTenantConfigNodeAffinityState struct {
	Key      string   `json:"key"`
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type NodeConfigTaintState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type NodeConfigWorkloadMetadataConfigState struct {
	Mode string `json:"mode"`
}

type PlacementPolicyState struct {
	PolicyName  string `json:"policy_name"`
	TpuTopology string `json:"tpu_topology"`
	Type        string `json:"type"`
}

type QueuedProvisioningState struct {
	Enabled bool `json:"enabled"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type UpgradeSettingsState struct {
	MaxSurge          float64                                 `json:"max_surge"`
	MaxUnavailable    float64                                 `json:"max_unavailable"`
	Strategy          string                                  `json:"strategy"`
	BlueGreenSettings []UpgradeSettingsBlueGreenSettingsState `json:"blue_green_settings"`
}

type UpgradeSettingsBlueGreenSettingsState struct {
	NodePoolSoakDuration  string                                                       `json:"node_pool_soak_duration"`
	StandardRolloutPolicy []UpgradeSettingsBlueGreenSettingsStandardRolloutPolicyState `json:"standard_rollout_policy"`
}

type UpgradeSettingsBlueGreenSettingsStandardRolloutPolicyState struct {
	BatchNodeCount    float64 `json:"batch_node_count"`
	BatchPercentage   float64 `json:"batch_percentage"`
	BatchSoakDuration string  `json:"batch_soak_duration"`
}
