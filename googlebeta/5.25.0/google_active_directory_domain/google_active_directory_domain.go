// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_active_directory_domain

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_active_directory_domain.
type Resource struct {
	Name      string
	Args      Args
	state     *googleActiveDirectoryDomainState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gadd *Resource) Type() string {
	return "google_active_directory_domain"
}

// LocalName returns the local name for [Resource].
func (gadd *Resource) LocalName() string {
	return gadd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gadd *Resource) Configuration() interface{} {
	return gadd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gadd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gadd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gadd *Resource) Dependencies() terra.Dependencies {
	return gadd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gadd *Resource) LifecycleManagement() *terra.Lifecycle {
	return gadd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gadd *Resource) Attributes() googleActiveDirectoryDomainAttributes {
	return googleActiveDirectoryDomainAttributes{ref: terra.ReferenceResource(gadd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gadd *Resource) ImportState(state io.Reader) error {
	gadd.state = &googleActiveDirectoryDomainState{}
	if err := json.NewDecoder(state).Decode(gadd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gadd.Type(), gadd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gadd *Resource) State() (*googleActiveDirectoryDomainState, bool) {
	return gadd.state, gadd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gadd *Resource) StateMust() *googleActiveDirectoryDomainState {
	if gadd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gadd.Type(), gadd.LocalName()))
	}
	return gadd.state
}

// Args contains the configurations for google_active_directory_domain.
type Args struct {
	// Admin: string, optional
	Admin terra.StringValue `hcl:"admin,attr"`
	// AuthorizedNetworks: set of string, optional
	AuthorizedNetworks terra.SetValue[terra.StringValue] `hcl:"authorized_networks,attr"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Locations: list of string, required
	Locations terra.ListValue[terra.StringValue] `hcl:"locations,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ReservedIpRange: string, required
	ReservedIpRange terra.StringValue `hcl:"reserved_ip_range,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleActiveDirectoryDomainAttributes struct {
	ref terra.Reference
}

// Admin returns a reference to field admin of google_active_directory_domain.
func (gadd googleActiveDirectoryDomainAttributes) Admin() terra.StringValue {
	return terra.ReferenceAsString(gadd.ref.Append("admin"))
}

// AuthorizedNetworks returns a reference to field authorized_networks of google_active_directory_domain.
func (gadd googleActiveDirectoryDomainAttributes) AuthorizedNetworks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gadd.ref.Append("authorized_networks"))
}

// DomainName returns a reference to field domain_name of google_active_directory_domain.
func (gadd googleActiveDirectoryDomainAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(gadd.ref.Append("domain_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_active_directory_domain.
func (gadd googleActiveDirectoryDomainAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gadd.ref.Append("effective_labels"))
}

// Fqdn returns a reference to field fqdn of google_active_directory_domain.
func (gadd googleActiveDirectoryDomainAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(gadd.ref.Append("fqdn"))
}

// Id returns a reference to field id of google_active_directory_domain.
func (gadd googleActiveDirectoryDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gadd.ref.Append("id"))
}

// Labels returns a reference to field labels of google_active_directory_domain.
func (gadd googleActiveDirectoryDomainAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gadd.ref.Append("labels"))
}

// Locations returns a reference to field locations of google_active_directory_domain.
func (gadd googleActiveDirectoryDomainAttributes) Locations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gadd.ref.Append("locations"))
}

// Name returns a reference to field name of google_active_directory_domain.
func (gadd googleActiveDirectoryDomainAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gadd.ref.Append("name"))
}

// Project returns a reference to field project of google_active_directory_domain.
func (gadd googleActiveDirectoryDomainAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gadd.ref.Append("project"))
}

// ReservedIpRange returns a reference to field reserved_ip_range of google_active_directory_domain.
func (gadd googleActiveDirectoryDomainAttributes) ReservedIpRange() terra.StringValue {
	return terra.ReferenceAsString(gadd.ref.Append("reserved_ip_range"))
}

// TerraformLabels returns a reference to field terraform_labels of google_active_directory_domain.
func (gadd googleActiveDirectoryDomainAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gadd.ref.Append("terraform_labels"))
}

func (gadd googleActiveDirectoryDomainAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gadd.ref.Append("timeouts"))
}

type googleActiveDirectoryDomainState struct {
	Admin              string            `json:"admin"`
	AuthorizedNetworks []string          `json:"authorized_networks"`
	DomainName         string            `json:"domain_name"`
	EffectiveLabels    map[string]string `json:"effective_labels"`
	Fqdn               string            `json:"fqdn"`
	Id                 string            `json:"id"`
	Labels             map[string]string `json:"labels"`
	Locations          []string          `json:"locations"`
	Name               string            `json:"name"`
	Project            string            `json:"project"`
	ReservedIpRange    string            `json:"reserved_ip_range"`
	TerraformLabels    map[string]string `json:"terraform_labels"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
