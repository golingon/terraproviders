// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firebase_app_check_play_integrity_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firebase_app_check_play_integrity_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirebaseAppCheckPlayIntegrityConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfacpic *Resource) Type() string {
	return "google_firebase_app_check_play_integrity_config"
}

// LocalName returns the local name for [Resource].
func (gfacpic *Resource) LocalName() string {
	return gfacpic.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfacpic *Resource) Configuration() interface{} {
	return gfacpic.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfacpic *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfacpic)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfacpic *Resource) Dependencies() terra.Dependencies {
	return gfacpic.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfacpic *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfacpic.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfacpic *Resource) Attributes() googleFirebaseAppCheckPlayIntegrityConfigAttributes {
	return googleFirebaseAppCheckPlayIntegrityConfigAttributes{ref: terra.ReferenceResource(gfacpic)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfacpic *Resource) ImportState(state io.Reader) error {
	gfacpic.state = &googleFirebaseAppCheckPlayIntegrityConfigState{}
	if err := json.NewDecoder(state).Decode(gfacpic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfacpic.Type(), gfacpic.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfacpic *Resource) State() (*googleFirebaseAppCheckPlayIntegrityConfigState, bool) {
	return gfacpic.state, gfacpic.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfacpic *Resource) StateMust() *googleFirebaseAppCheckPlayIntegrityConfigState {
	if gfacpic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfacpic.Type(), gfacpic.LocalName()))
	}
	return gfacpic.state
}

// Args contains the configurations for google_firebase_app_check_play_integrity_config.
type Args struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TokenTtl: string, optional
	TokenTtl terra.StringValue `hcl:"token_ttl,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirebaseAppCheckPlayIntegrityConfigAttributes struct {
	ref terra.Reference
}

// AppId returns a reference to field app_id of google_firebase_app_check_play_integrity_config.
func (gfacpic googleFirebaseAppCheckPlayIntegrityConfigAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(gfacpic.ref.Append("app_id"))
}

// Id returns a reference to field id of google_firebase_app_check_play_integrity_config.
func (gfacpic googleFirebaseAppCheckPlayIntegrityConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfacpic.ref.Append("id"))
}

// Name returns a reference to field name of google_firebase_app_check_play_integrity_config.
func (gfacpic googleFirebaseAppCheckPlayIntegrityConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfacpic.ref.Append("name"))
}

// Project returns a reference to field project of google_firebase_app_check_play_integrity_config.
func (gfacpic googleFirebaseAppCheckPlayIntegrityConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfacpic.ref.Append("project"))
}

// TokenTtl returns a reference to field token_ttl of google_firebase_app_check_play_integrity_config.
func (gfacpic googleFirebaseAppCheckPlayIntegrityConfigAttributes) TokenTtl() terra.StringValue {
	return terra.ReferenceAsString(gfacpic.ref.Append("token_ttl"))
}

func (gfacpic googleFirebaseAppCheckPlayIntegrityConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfacpic.ref.Append("timeouts"))
}

type googleFirebaseAppCheckPlayIntegrityConfigState struct {
	AppId    string         `json:"app_id"`
	Id       string         `json:"id"`
	Name     string         `json:"name"`
	Project  string         `json:"project"`
	TokenTtl string         `json:"token_ttl"`
	Timeouts *TimeoutsState `json:"timeouts"`
}
