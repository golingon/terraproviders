// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_logging_folder_exclusion

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_logging_folder_exclusion.
type Resource struct {
	Name      string
	Args      Args
	state     *googleLoggingFolderExclusionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (glfe *Resource) Type() string {
	return "google_logging_folder_exclusion"
}

// LocalName returns the local name for [Resource].
func (glfe *Resource) LocalName() string {
	return glfe.Name
}

// Configuration returns the configuration (args) for [Resource].
func (glfe *Resource) Configuration() interface{} {
	return glfe.Args
}

// DependOn is used for other resources to depend on [Resource].
func (glfe *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(glfe)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (glfe *Resource) Dependencies() terra.Dependencies {
	return glfe.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (glfe *Resource) LifecycleManagement() *terra.Lifecycle {
	return glfe.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (glfe *Resource) Attributes() googleLoggingFolderExclusionAttributes {
	return googleLoggingFolderExclusionAttributes{ref: terra.ReferenceResource(glfe)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (glfe *Resource) ImportState(state io.Reader) error {
	glfe.state = &googleLoggingFolderExclusionState{}
	if err := json.NewDecoder(state).Decode(glfe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", glfe.Type(), glfe.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (glfe *Resource) State() (*googleLoggingFolderExclusionState, bool) {
	return glfe.state, glfe.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (glfe *Resource) StateMust() *googleLoggingFolderExclusionState {
	if glfe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", glfe.Type(), glfe.LocalName()))
	}
	return glfe.state
}

// Args contains the configurations for google_logging_folder_exclusion.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// Filter: string, required
	Filter terra.StringValue `hcl:"filter,attr" validate:"required"`
	// Folder: string, required
	Folder terra.StringValue `hcl:"folder,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type googleLoggingFolderExclusionAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_logging_folder_exclusion.
func (glfe googleLoggingFolderExclusionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(glfe.ref.Append("description"))
}

// Disabled returns a reference to field disabled of google_logging_folder_exclusion.
func (glfe googleLoggingFolderExclusionAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(glfe.ref.Append("disabled"))
}

// Filter returns a reference to field filter of google_logging_folder_exclusion.
func (glfe googleLoggingFolderExclusionAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(glfe.ref.Append("filter"))
}

// Folder returns a reference to field folder of google_logging_folder_exclusion.
func (glfe googleLoggingFolderExclusionAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(glfe.ref.Append("folder"))
}

// Id returns a reference to field id of google_logging_folder_exclusion.
func (glfe googleLoggingFolderExclusionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(glfe.ref.Append("id"))
}

// Name returns a reference to field name of google_logging_folder_exclusion.
func (glfe googleLoggingFolderExclusionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(glfe.ref.Append("name"))
}

type googleLoggingFolderExclusionState struct {
	Description string `json:"description"`
	Disabled    bool   `json:"disabled"`
	Filter      string `json:"filter"`
	Folder      string `json:"folder"`
	Id          string `json:"id"`
	Name        string `json:"name"`
}
