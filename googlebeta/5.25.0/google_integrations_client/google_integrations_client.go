// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_integrations_client

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_integrations_client.
type Resource struct {
	Name      string
	Args      Args
	state     *googleIntegrationsClientState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gic *Resource) Type() string {
	return "google_integrations_client"
}

// LocalName returns the local name for [Resource].
func (gic *Resource) LocalName() string {
	return gic.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gic *Resource) Configuration() interface{} {
	return gic.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gic *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gic)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gic *Resource) Dependencies() terra.Dependencies {
	return gic.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gic *Resource) LifecycleManagement() *terra.Lifecycle {
	return gic.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gic *Resource) Attributes() googleIntegrationsClientAttributes {
	return googleIntegrationsClientAttributes{ref: terra.ReferenceResource(gic)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gic *Resource) ImportState(state io.Reader) error {
	gic.state = &googleIntegrationsClientState{}
	if err := json.NewDecoder(state).Decode(gic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gic.Type(), gic.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gic *Resource) State() (*googleIntegrationsClientState, bool) {
	return gic.state, gic.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gic *Resource) StateMust() *googleIntegrationsClientState {
	if gic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gic.Type(), gic.LocalName()))
	}
	return gic.state
}

// Args contains the configurations for google_integrations_client.
type Args struct {
	// CreateSampleWorkflows: bool, optional
	CreateSampleWorkflows terra.BoolValue `hcl:"create_sample_workflows,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ProvisionGmek: bool, optional
	ProvisionGmek terra.BoolValue `hcl:"provision_gmek,attr"`
	// RunAsServiceAccount: string, optional
	RunAsServiceAccount terra.StringValue `hcl:"run_as_service_account,attr"`
	// CloudKmsConfig: optional
	CloudKmsConfig *CloudKmsConfig `hcl:"cloud_kms_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleIntegrationsClientAttributes struct {
	ref terra.Reference
}

// CreateSampleWorkflows returns a reference to field create_sample_workflows of google_integrations_client.
func (gic googleIntegrationsClientAttributes) CreateSampleWorkflows() terra.BoolValue {
	return terra.ReferenceAsBool(gic.ref.Append("create_sample_workflows"))
}

// Id returns a reference to field id of google_integrations_client.
func (gic googleIntegrationsClientAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("id"))
}

// Location returns a reference to field location of google_integrations_client.
func (gic googleIntegrationsClientAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("location"))
}

// Project returns a reference to field project of google_integrations_client.
func (gic googleIntegrationsClientAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("project"))
}

// ProvisionGmek returns a reference to field provision_gmek of google_integrations_client.
func (gic googleIntegrationsClientAttributes) ProvisionGmek() terra.BoolValue {
	return terra.ReferenceAsBool(gic.ref.Append("provision_gmek"))
}

// RunAsServiceAccount returns a reference to field run_as_service_account of google_integrations_client.
func (gic googleIntegrationsClientAttributes) RunAsServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("run_as_service_account"))
}

func (gic googleIntegrationsClientAttributes) CloudKmsConfig() terra.ListValue[CloudKmsConfigAttributes] {
	return terra.ReferenceAsList[CloudKmsConfigAttributes](gic.ref.Append("cloud_kms_config"))
}

func (gic googleIntegrationsClientAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gic.ref.Append("timeouts"))
}

type googleIntegrationsClientState struct {
	CreateSampleWorkflows bool                  `json:"create_sample_workflows"`
	Id                    string                `json:"id"`
	Location              string                `json:"location"`
	Project               string                `json:"project"`
	ProvisionGmek         bool                  `json:"provision_gmek"`
	RunAsServiceAccount   string                `json:"run_as_service_account"`
	CloudKmsConfig        []CloudKmsConfigState `json:"cloud_kms_config"`
	Timeouts              *TimeoutsState        `json:"timeouts"`
}
