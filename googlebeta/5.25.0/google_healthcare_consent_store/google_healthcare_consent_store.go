// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_healthcare_consent_store

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_healthcare_consent_store.
type Resource struct {
	Name      string
	Args      Args
	state     *googleHealthcareConsentStoreState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ghcs *Resource) Type() string {
	return "google_healthcare_consent_store"
}

// LocalName returns the local name for [Resource].
func (ghcs *Resource) LocalName() string {
	return ghcs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ghcs *Resource) Configuration() interface{} {
	return ghcs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ghcs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ghcs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ghcs *Resource) Dependencies() terra.Dependencies {
	return ghcs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ghcs *Resource) LifecycleManagement() *terra.Lifecycle {
	return ghcs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ghcs *Resource) Attributes() googleHealthcareConsentStoreAttributes {
	return googleHealthcareConsentStoreAttributes{ref: terra.ReferenceResource(ghcs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ghcs *Resource) ImportState(state io.Reader) error {
	ghcs.state = &googleHealthcareConsentStoreState{}
	if err := json.NewDecoder(state).Decode(ghcs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ghcs.Type(), ghcs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ghcs *Resource) State() (*googleHealthcareConsentStoreState, bool) {
	return ghcs.state, ghcs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ghcs *Resource) StateMust() *googleHealthcareConsentStoreState {
	if ghcs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ghcs.Type(), ghcs.LocalName()))
	}
	return ghcs.state
}

// Args contains the configurations for google_healthcare_consent_store.
type Args struct {
	// Dataset: string, required
	Dataset terra.StringValue `hcl:"dataset,attr" validate:"required"`
	// DefaultConsentTtl: string, optional
	DefaultConsentTtl terra.StringValue `hcl:"default_consent_ttl,attr"`
	// EnableConsentCreateOnUpdate: bool, optional
	EnableConsentCreateOnUpdate terra.BoolValue `hcl:"enable_consent_create_on_update,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleHealthcareConsentStoreAttributes struct {
	ref terra.Reference
}

// Dataset returns a reference to field dataset of google_healthcare_consent_store.
func (ghcs googleHealthcareConsentStoreAttributes) Dataset() terra.StringValue {
	return terra.ReferenceAsString(ghcs.ref.Append("dataset"))
}

// DefaultConsentTtl returns a reference to field default_consent_ttl of google_healthcare_consent_store.
func (ghcs googleHealthcareConsentStoreAttributes) DefaultConsentTtl() terra.StringValue {
	return terra.ReferenceAsString(ghcs.ref.Append("default_consent_ttl"))
}

// EffectiveLabels returns a reference to field effective_labels of google_healthcare_consent_store.
func (ghcs googleHealthcareConsentStoreAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghcs.ref.Append("effective_labels"))
}

// EnableConsentCreateOnUpdate returns a reference to field enable_consent_create_on_update of google_healthcare_consent_store.
func (ghcs googleHealthcareConsentStoreAttributes) EnableConsentCreateOnUpdate() terra.BoolValue {
	return terra.ReferenceAsBool(ghcs.ref.Append("enable_consent_create_on_update"))
}

// Id returns a reference to field id of google_healthcare_consent_store.
func (ghcs googleHealthcareConsentStoreAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ghcs.ref.Append("id"))
}

// Labels returns a reference to field labels of google_healthcare_consent_store.
func (ghcs googleHealthcareConsentStoreAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghcs.ref.Append("labels"))
}

// Name returns a reference to field name of google_healthcare_consent_store.
func (ghcs googleHealthcareConsentStoreAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ghcs.ref.Append("name"))
}

// TerraformLabels returns a reference to field terraform_labels of google_healthcare_consent_store.
func (ghcs googleHealthcareConsentStoreAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghcs.ref.Append("terraform_labels"))
}

func (ghcs googleHealthcareConsentStoreAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ghcs.ref.Append("timeouts"))
}

type googleHealthcareConsentStoreState struct {
	Dataset                     string            `json:"dataset"`
	DefaultConsentTtl           string            `json:"default_consent_ttl"`
	EffectiveLabels             map[string]string `json:"effective_labels"`
	EnableConsentCreateOnUpdate bool              `json:"enable_consent_create_on_update"`
	Id                          string            `json:"id"`
	Labels                      map[string]string `json:"labels"`
	Name                        string            `json:"name"`
	TerraformLabels             map[string]string `json:"terraform_labels"`
	Timeouts                    *TimeoutsState    `json:"timeouts"`
}
