// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_os_config_patch_deployment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type InstanceFilter struct {
	// All: bool, optional
	All terra.BoolValue `hcl:"all,attr"`
	// InstanceNamePrefixes: list of string, optional
	InstanceNamePrefixes terra.ListValue[terra.StringValue] `hcl:"instance_name_prefixes,attr"`
	// Instances: list of string, optional
	Instances terra.ListValue[terra.StringValue] `hcl:"instances,attr"`
	// Zones: list of string, optional
	Zones terra.ListValue[terra.StringValue] `hcl:"zones,attr"`
	// InstanceFilterGroupLabels: min=0
	GroupLabels []InstanceFilterGroupLabels `hcl:"group_labels,block" validate:"min=0"`
}

type InstanceFilterGroupLabels struct {
	// Labels: map of string, required
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr" validate:"required"`
}

type OneTimeSchedule struct {
	// ExecuteTime: string, required
	ExecuteTime terra.StringValue `hcl:"execute_time,attr" validate:"required"`
}

type PatchConfig struct {
	// MigInstancesAllowed: bool, optional
	MigInstancesAllowed terra.BoolValue `hcl:"mig_instances_allowed,attr"`
	// RebootConfig: string, optional
	RebootConfig terra.StringValue `hcl:"reboot_config,attr"`
	// PatchConfigApt: optional
	Apt *PatchConfigApt `hcl:"apt,block"`
	// PatchConfigGoo: optional
	Goo *PatchConfigGoo `hcl:"goo,block"`
	// PatchConfigPostStep: optional
	PostStep *PatchConfigPostStep `hcl:"post_step,block"`
	// PatchConfigPreStep: optional
	PreStep *PatchConfigPreStep `hcl:"pre_step,block"`
	// PatchConfigWindowsUpdate: optional
	WindowsUpdate *PatchConfigWindowsUpdate `hcl:"windows_update,block"`
	// PatchConfigYum: optional
	Yum *PatchConfigYum `hcl:"yum,block"`
	// PatchConfigZypper: optional
	Zypper *PatchConfigZypper `hcl:"zypper,block"`
}

type PatchConfigApt struct {
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// ExclusivePackages: list of string, optional
	ExclusivePackages terra.ListValue[terra.StringValue] `hcl:"exclusive_packages,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type PatchConfigGoo struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type PatchConfigPostStep struct {
	// PatchConfigPostStepLinuxExecStepConfig: optional
	LinuxExecStepConfig *PatchConfigPostStepLinuxExecStepConfig `hcl:"linux_exec_step_config,block"`
	// PatchConfigPostStepWindowsExecStepConfig: optional
	WindowsExecStepConfig *PatchConfigPostStepWindowsExecStepConfig `hcl:"windows_exec_step_config,block"`
}

type PatchConfigPostStepLinuxExecStepConfig struct {
	// AllowedSuccessCodes: list of number, optional
	AllowedSuccessCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_success_codes,attr"`
	// Interpreter: string, optional
	Interpreter terra.StringValue `hcl:"interpreter,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// PatchConfigPostStepLinuxExecStepConfigGcsObject: optional
	GcsObject *PatchConfigPostStepLinuxExecStepConfigGcsObject `hcl:"gcs_object,block"`
}

type PatchConfigPostStepLinuxExecStepConfigGcsObject struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// GenerationNumber: string, required
	GenerationNumber terra.StringValue `hcl:"generation_number,attr" validate:"required"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type PatchConfigPostStepWindowsExecStepConfig struct {
	// AllowedSuccessCodes: list of number, optional
	AllowedSuccessCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_success_codes,attr"`
	// Interpreter: string, optional
	Interpreter terra.StringValue `hcl:"interpreter,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// PatchConfigPostStepWindowsExecStepConfigGcsObject: optional
	GcsObject *PatchConfigPostStepWindowsExecStepConfigGcsObject `hcl:"gcs_object,block"`
}

type PatchConfigPostStepWindowsExecStepConfigGcsObject struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// GenerationNumber: string, required
	GenerationNumber terra.StringValue `hcl:"generation_number,attr" validate:"required"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type PatchConfigPreStep struct {
	// PatchConfigPreStepLinuxExecStepConfig: optional
	LinuxExecStepConfig *PatchConfigPreStepLinuxExecStepConfig `hcl:"linux_exec_step_config,block"`
	// PatchConfigPreStepWindowsExecStepConfig: optional
	WindowsExecStepConfig *PatchConfigPreStepWindowsExecStepConfig `hcl:"windows_exec_step_config,block"`
}

type PatchConfigPreStepLinuxExecStepConfig struct {
	// AllowedSuccessCodes: list of number, optional
	AllowedSuccessCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_success_codes,attr"`
	// Interpreter: string, optional
	Interpreter terra.StringValue `hcl:"interpreter,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// PatchConfigPreStepLinuxExecStepConfigGcsObject: optional
	GcsObject *PatchConfigPreStepLinuxExecStepConfigGcsObject `hcl:"gcs_object,block"`
}

type PatchConfigPreStepLinuxExecStepConfigGcsObject struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// GenerationNumber: string, required
	GenerationNumber terra.StringValue `hcl:"generation_number,attr" validate:"required"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type PatchConfigPreStepWindowsExecStepConfig struct {
	// AllowedSuccessCodes: list of number, optional
	AllowedSuccessCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_success_codes,attr"`
	// Interpreter: string, optional
	Interpreter terra.StringValue `hcl:"interpreter,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// PatchConfigPreStepWindowsExecStepConfigGcsObject: optional
	GcsObject *PatchConfigPreStepWindowsExecStepConfigGcsObject `hcl:"gcs_object,block"`
}

type PatchConfigPreStepWindowsExecStepConfigGcsObject struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// GenerationNumber: string, required
	GenerationNumber terra.StringValue `hcl:"generation_number,attr" validate:"required"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type PatchConfigWindowsUpdate struct {
	// Classifications: list of string, optional
	Classifications terra.ListValue[terra.StringValue] `hcl:"classifications,attr"`
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// ExclusivePatches: list of string, optional
	ExclusivePatches terra.ListValue[terra.StringValue] `hcl:"exclusive_patches,attr"`
}

type PatchConfigYum struct {
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// ExclusivePackages: list of string, optional
	ExclusivePackages terra.ListValue[terra.StringValue] `hcl:"exclusive_packages,attr"`
	// Minimal: bool, optional
	Minimal terra.BoolValue `hcl:"minimal,attr"`
	// Security: bool, optional
	Security terra.BoolValue `hcl:"security,attr"`
}

type PatchConfigZypper struct {
	// Categories: list of string, optional
	Categories terra.ListValue[terra.StringValue] `hcl:"categories,attr"`
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// ExclusivePatches: list of string, optional
	ExclusivePatches terra.ListValue[terra.StringValue] `hcl:"exclusive_patches,attr"`
	// Severities: list of string, optional
	Severities terra.ListValue[terra.StringValue] `hcl:"severities,attr"`
	// WithOptional: bool, optional
	WithOptional terra.BoolValue `hcl:"with_optional,attr"`
	// WithUpdate: bool, optional
	WithUpdate terra.BoolValue `hcl:"with_update,attr"`
}

type RecurringSchedule struct {
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// RecurringScheduleMonthly: optional
	Monthly *RecurringScheduleMonthly `hcl:"monthly,block"`
	// RecurringScheduleTimeOfDay: required
	TimeOfDay *RecurringScheduleTimeOfDay `hcl:"time_of_day,block" validate:"required"`
	// RecurringScheduleTimeZone: required
	TimeZone *RecurringScheduleTimeZone `hcl:"time_zone,block" validate:"required"`
	// RecurringScheduleWeekly: optional
	Weekly *RecurringScheduleWeekly `hcl:"weekly,block"`
}

type RecurringScheduleMonthly struct {
	// MonthDay: number, optional
	MonthDay terra.NumberValue `hcl:"month_day,attr"`
	// RecurringScheduleMonthlyWeekDayOfMonth: optional
	WeekDayOfMonth *RecurringScheduleMonthlyWeekDayOfMonth `hcl:"week_day_of_month,block"`
}

type RecurringScheduleMonthlyWeekDayOfMonth struct {
	// DayOfWeek: string, required
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr" validate:"required"`
	// DayOffset: number, optional
	DayOffset terra.NumberValue `hcl:"day_offset,attr"`
	// WeekOrdinal: number, required
	WeekOrdinal terra.NumberValue `hcl:"week_ordinal,attr" validate:"required"`
}

type RecurringScheduleTimeOfDay struct {
	// Hours: number, optional
	Hours terra.NumberValue `hcl:"hours,attr"`
	// Minutes: number, optional
	Minutes terra.NumberValue `hcl:"minutes,attr"`
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: number, optional
	Seconds terra.NumberValue `hcl:"seconds,attr"`
}

type RecurringScheduleTimeZone struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type RecurringScheduleWeekly struct {
	// DayOfWeek: string, required
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr" validate:"required"`
}

type Rollout struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
	// RolloutDisruptionBudget: required
	DisruptionBudget *RolloutDisruptionBudget `hcl:"disruption_budget,block" validate:"required"`
}

type RolloutDisruptionBudget struct {
	// Fixed: number, optional
	Fixed terra.NumberValue `hcl:"fixed,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type InstanceFilterAttributes struct {
	ref terra.Reference
}

func (_if InstanceFilterAttributes) InternalRef() (terra.Reference, error) {
	return _if.ref, nil
}

func (_if InstanceFilterAttributes) InternalWithRef(ref terra.Reference) InstanceFilterAttributes {
	return InstanceFilterAttributes{ref: ref}
}

func (_if InstanceFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _if.ref.InternalTokens()
}

func (_if InstanceFilterAttributes) All() terra.BoolValue {
	return terra.ReferenceAsBool(_if.ref.Append("all"))
}

func (_if InstanceFilterAttributes) InstanceNamePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](_if.ref.Append("instance_name_prefixes"))
}

func (_if InstanceFilterAttributes) Instances() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](_if.ref.Append("instances"))
}

func (_if InstanceFilterAttributes) Zones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](_if.ref.Append("zones"))
}

func (_if InstanceFilterAttributes) GroupLabels() terra.ListValue[InstanceFilterGroupLabelsAttributes] {
	return terra.ReferenceAsList[InstanceFilterGroupLabelsAttributes](_if.ref.Append("group_labels"))
}

type InstanceFilterGroupLabelsAttributes struct {
	ref terra.Reference
}

func (gl InstanceFilterGroupLabelsAttributes) InternalRef() (terra.Reference, error) {
	return gl.ref, nil
}

func (gl InstanceFilterGroupLabelsAttributes) InternalWithRef(ref terra.Reference) InstanceFilterGroupLabelsAttributes {
	return InstanceFilterGroupLabelsAttributes{ref: ref}
}

func (gl InstanceFilterGroupLabelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gl.ref.InternalTokens()
}

func (gl InstanceFilterGroupLabelsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gl.ref.Append("labels"))
}

type OneTimeScheduleAttributes struct {
	ref terra.Reference
}

func (ots OneTimeScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ots.ref, nil
}

func (ots OneTimeScheduleAttributes) InternalWithRef(ref terra.Reference) OneTimeScheduleAttributes {
	return OneTimeScheduleAttributes{ref: ref}
}

func (ots OneTimeScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ots.ref.InternalTokens()
}

func (ots OneTimeScheduleAttributes) ExecuteTime() terra.StringValue {
	return terra.ReferenceAsString(ots.ref.Append("execute_time"))
}

type PatchConfigAttributes struct {
	ref terra.Reference
}

func (pc PatchConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PatchConfigAttributes) InternalWithRef(ref terra.Reference) PatchConfigAttributes {
	return PatchConfigAttributes{ref: ref}
}

func (pc PatchConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PatchConfigAttributes) MigInstancesAllowed() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("mig_instances_allowed"))
}

func (pc PatchConfigAttributes) RebootConfig() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("reboot_config"))
}

func (pc PatchConfigAttributes) Apt() terra.ListValue[PatchConfigAptAttributes] {
	return terra.ReferenceAsList[PatchConfigAptAttributes](pc.ref.Append("apt"))
}

func (pc PatchConfigAttributes) Goo() terra.ListValue[PatchConfigGooAttributes] {
	return terra.ReferenceAsList[PatchConfigGooAttributes](pc.ref.Append("goo"))
}

func (pc PatchConfigAttributes) PostStep() terra.ListValue[PatchConfigPostStepAttributes] {
	return terra.ReferenceAsList[PatchConfigPostStepAttributes](pc.ref.Append("post_step"))
}

func (pc PatchConfigAttributes) PreStep() terra.ListValue[PatchConfigPreStepAttributes] {
	return terra.ReferenceAsList[PatchConfigPreStepAttributes](pc.ref.Append("pre_step"))
}

func (pc PatchConfigAttributes) WindowsUpdate() terra.ListValue[PatchConfigWindowsUpdateAttributes] {
	return terra.ReferenceAsList[PatchConfigWindowsUpdateAttributes](pc.ref.Append("windows_update"))
}

func (pc PatchConfigAttributes) Yum() terra.ListValue[PatchConfigYumAttributes] {
	return terra.ReferenceAsList[PatchConfigYumAttributes](pc.ref.Append("yum"))
}

func (pc PatchConfigAttributes) Zypper() terra.ListValue[PatchConfigZypperAttributes] {
	return terra.ReferenceAsList[PatchConfigZypperAttributes](pc.ref.Append("zypper"))
}

type PatchConfigAptAttributes struct {
	ref terra.Reference
}

func (a PatchConfigAptAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a PatchConfigAptAttributes) InternalWithRef(ref terra.Reference) PatchConfigAptAttributes {
	return PatchConfigAptAttributes{ref: ref}
}

func (a PatchConfigAptAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a PatchConfigAptAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("excludes"))
}

func (a PatchConfigAptAttributes) ExclusivePackages() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("exclusive_packages"))
}

func (a PatchConfigAptAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

type PatchConfigGooAttributes struct {
	ref terra.Reference
}

func (g PatchConfigGooAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g PatchConfigGooAttributes) InternalWithRef(ref terra.Reference) PatchConfigGooAttributes {
	return PatchConfigGooAttributes{ref: ref}
}

func (g PatchConfigGooAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g PatchConfigGooAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("enabled"))
}

type PatchConfigPostStepAttributes struct {
	ref terra.Reference
}

func (ps PatchConfigPostStepAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps PatchConfigPostStepAttributes) InternalWithRef(ref terra.Reference) PatchConfigPostStepAttributes {
	return PatchConfigPostStepAttributes{ref: ref}
}

func (ps PatchConfigPostStepAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps PatchConfigPostStepAttributes) LinuxExecStepConfig() terra.ListValue[PatchConfigPostStepLinuxExecStepConfigAttributes] {
	return terra.ReferenceAsList[PatchConfigPostStepLinuxExecStepConfigAttributes](ps.ref.Append("linux_exec_step_config"))
}

func (ps PatchConfigPostStepAttributes) WindowsExecStepConfig() terra.ListValue[PatchConfigPostStepWindowsExecStepConfigAttributes] {
	return terra.ReferenceAsList[PatchConfigPostStepWindowsExecStepConfigAttributes](ps.ref.Append("windows_exec_step_config"))
}

type PatchConfigPostStepLinuxExecStepConfigAttributes struct {
	ref terra.Reference
}

func (lesc PatchConfigPostStepLinuxExecStepConfigAttributes) InternalRef() (terra.Reference, error) {
	return lesc.ref, nil
}

func (lesc PatchConfigPostStepLinuxExecStepConfigAttributes) InternalWithRef(ref terra.Reference) PatchConfigPostStepLinuxExecStepConfigAttributes {
	return PatchConfigPostStepLinuxExecStepConfigAttributes{ref: ref}
}

func (lesc PatchConfigPostStepLinuxExecStepConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lesc.ref.InternalTokens()
}

func (lesc PatchConfigPostStepLinuxExecStepConfigAttributes) AllowedSuccessCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](lesc.ref.Append("allowed_success_codes"))
}

func (lesc PatchConfigPostStepLinuxExecStepConfigAttributes) Interpreter() terra.StringValue {
	return terra.ReferenceAsString(lesc.ref.Append("interpreter"))
}

func (lesc PatchConfigPostStepLinuxExecStepConfigAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(lesc.ref.Append("local_path"))
}

func (lesc PatchConfigPostStepLinuxExecStepConfigAttributes) GcsObject() terra.ListValue[PatchConfigPostStepLinuxExecStepConfigGcsObjectAttributes] {
	return terra.ReferenceAsList[PatchConfigPostStepLinuxExecStepConfigGcsObjectAttributes](lesc.ref.Append("gcs_object"))
}

type PatchConfigPostStepLinuxExecStepConfigGcsObjectAttributes struct {
	ref terra.Reference
}

func (_go PatchConfigPostStepLinuxExecStepConfigGcsObjectAttributes) InternalRef() (terra.Reference, error) {
	return _go.ref, nil
}

func (_go PatchConfigPostStepLinuxExecStepConfigGcsObjectAttributes) InternalWithRef(ref terra.Reference) PatchConfigPostStepLinuxExecStepConfigGcsObjectAttributes {
	return PatchConfigPostStepLinuxExecStepConfigGcsObjectAttributes{ref: ref}
}

func (_go PatchConfigPostStepLinuxExecStepConfigGcsObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _go.ref.InternalTokens()
}

func (_go PatchConfigPostStepLinuxExecStepConfigGcsObjectAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("bucket"))
}

func (_go PatchConfigPostStepLinuxExecStepConfigGcsObjectAttributes) GenerationNumber() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("generation_number"))
}

func (_go PatchConfigPostStepLinuxExecStepConfigGcsObjectAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("object"))
}

type PatchConfigPostStepWindowsExecStepConfigAttributes struct {
	ref terra.Reference
}

func (wesc PatchConfigPostStepWindowsExecStepConfigAttributes) InternalRef() (terra.Reference, error) {
	return wesc.ref, nil
}

func (wesc PatchConfigPostStepWindowsExecStepConfigAttributes) InternalWithRef(ref terra.Reference) PatchConfigPostStepWindowsExecStepConfigAttributes {
	return PatchConfigPostStepWindowsExecStepConfigAttributes{ref: ref}
}

func (wesc PatchConfigPostStepWindowsExecStepConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wesc.ref.InternalTokens()
}

func (wesc PatchConfigPostStepWindowsExecStepConfigAttributes) AllowedSuccessCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](wesc.ref.Append("allowed_success_codes"))
}

func (wesc PatchConfigPostStepWindowsExecStepConfigAttributes) Interpreter() terra.StringValue {
	return terra.ReferenceAsString(wesc.ref.Append("interpreter"))
}

func (wesc PatchConfigPostStepWindowsExecStepConfigAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(wesc.ref.Append("local_path"))
}

func (wesc PatchConfigPostStepWindowsExecStepConfigAttributes) GcsObject() terra.ListValue[PatchConfigPostStepWindowsExecStepConfigGcsObjectAttributes] {
	return terra.ReferenceAsList[PatchConfigPostStepWindowsExecStepConfigGcsObjectAttributes](wesc.ref.Append("gcs_object"))
}

type PatchConfigPostStepWindowsExecStepConfigGcsObjectAttributes struct {
	ref terra.Reference
}

func (_go PatchConfigPostStepWindowsExecStepConfigGcsObjectAttributes) InternalRef() (terra.Reference, error) {
	return _go.ref, nil
}

func (_go PatchConfigPostStepWindowsExecStepConfigGcsObjectAttributes) InternalWithRef(ref terra.Reference) PatchConfigPostStepWindowsExecStepConfigGcsObjectAttributes {
	return PatchConfigPostStepWindowsExecStepConfigGcsObjectAttributes{ref: ref}
}

func (_go PatchConfigPostStepWindowsExecStepConfigGcsObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _go.ref.InternalTokens()
}

func (_go PatchConfigPostStepWindowsExecStepConfigGcsObjectAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("bucket"))
}

func (_go PatchConfigPostStepWindowsExecStepConfigGcsObjectAttributes) GenerationNumber() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("generation_number"))
}

func (_go PatchConfigPostStepWindowsExecStepConfigGcsObjectAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("object"))
}

type PatchConfigPreStepAttributes struct {
	ref terra.Reference
}

func (ps PatchConfigPreStepAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps PatchConfigPreStepAttributes) InternalWithRef(ref terra.Reference) PatchConfigPreStepAttributes {
	return PatchConfigPreStepAttributes{ref: ref}
}

func (ps PatchConfigPreStepAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps PatchConfigPreStepAttributes) LinuxExecStepConfig() terra.ListValue[PatchConfigPreStepLinuxExecStepConfigAttributes] {
	return terra.ReferenceAsList[PatchConfigPreStepLinuxExecStepConfigAttributes](ps.ref.Append("linux_exec_step_config"))
}

func (ps PatchConfigPreStepAttributes) WindowsExecStepConfig() terra.ListValue[PatchConfigPreStepWindowsExecStepConfigAttributes] {
	return terra.ReferenceAsList[PatchConfigPreStepWindowsExecStepConfigAttributes](ps.ref.Append("windows_exec_step_config"))
}

type PatchConfigPreStepLinuxExecStepConfigAttributes struct {
	ref terra.Reference
}

func (lesc PatchConfigPreStepLinuxExecStepConfigAttributes) InternalRef() (terra.Reference, error) {
	return lesc.ref, nil
}

func (lesc PatchConfigPreStepLinuxExecStepConfigAttributes) InternalWithRef(ref terra.Reference) PatchConfigPreStepLinuxExecStepConfigAttributes {
	return PatchConfigPreStepLinuxExecStepConfigAttributes{ref: ref}
}

func (lesc PatchConfigPreStepLinuxExecStepConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lesc.ref.InternalTokens()
}

func (lesc PatchConfigPreStepLinuxExecStepConfigAttributes) AllowedSuccessCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](lesc.ref.Append("allowed_success_codes"))
}

func (lesc PatchConfigPreStepLinuxExecStepConfigAttributes) Interpreter() terra.StringValue {
	return terra.ReferenceAsString(lesc.ref.Append("interpreter"))
}

func (lesc PatchConfigPreStepLinuxExecStepConfigAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(lesc.ref.Append("local_path"))
}

func (lesc PatchConfigPreStepLinuxExecStepConfigAttributes) GcsObject() terra.ListValue[PatchConfigPreStepLinuxExecStepConfigGcsObjectAttributes] {
	return terra.ReferenceAsList[PatchConfigPreStepLinuxExecStepConfigGcsObjectAttributes](lesc.ref.Append("gcs_object"))
}

type PatchConfigPreStepLinuxExecStepConfigGcsObjectAttributes struct {
	ref terra.Reference
}

func (_go PatchConfigPreStepLinuxExecStepConfigGcsObjectAttributes) InternalRef() (terra.Reference, error) {
	return _go.ref, nil
}

func (_go PatchConfigPreStepLinuxExecStepConfigGcsObjectAttributes) InternalWithRef(ref terra.Reference) PatchConfigPreStepLinuxExecStepConfigGcsObjectAttributes {
	return PatchConfigPreStepLinuxExecStepConfigGcsObjectAttributes{ref: ref}
}

func (_go PatchConfigPreStepLinuxExecStepConfigGcsObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _go.ref.InternalTokens()
}

func (_go PatchConfigPreStepLinuxExecStepConfigGcsObjectAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("bucket"))
}

func (_go PatchConfigPreStepLinuxExecStepConfigGcsObjectAttributes) GenerationNumber() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("generation_number"))
}

func (_go PatchConfigPreStepLinuxExecStepConfigGcsObjectAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("object"))
}

type PatchConfigPreStepWindowsExecStepConfigAttributes struct {
	ref terra.Reference
}

func (wesc PatchConfigPreStepWindowsExecStepConfigAttributes) InternalRef() (terra.Reference, error) {
	return wesc.ref, nil
}

func (wesc PatchConfigPreStepWindowsExecStepConfigAttributes) InternalWithRef(ref terra.Reference) PatchConfigPreStepWindowsExecStepConfigAttributes {
	return PatchConfigPreStepWindowsExecStepConfigAttributes{ref: ref}
}

func (wesc PatchConfigPreStepWindowsExecStepConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wesc.ref.InternalTokens()
}

func (wesc PatchConfigPreStepWindowsExecStepConfigAttributes) AllowedSuccessCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](wesc.ref.Append("allowed_success_codes"))
}

func (wesc PatchConfigPreStepWindowsExecStepConfigAttributes) Interpreter() terra.StringValue {
	return terra.ReferenceAsString(wesc.ref.Append("interpreter"))
}

func (wesc PatchConfigPreStepWindowsExecStepConfigAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(wesc.ref.Append("local_path"))
}

func (wesc PatchConfigPreStepWindowsExecStepConfigAttributes) GcsObject() terra.ListValue[PatchConfigPreStepWindowsExecStepConfigGcsObjectAttributes] {
	return terra.ReferenceAsList[PatchConfigPreStepWindowsExecStepConfigGcsObjectAttributes](wesc.ref.Append("gcs_object"))
}

type PatchConfigPreStepWindowsExecStepConfigGcsObjectAttributes struct {
	ref terra.Reference
}

func (_go PatchConfigPreStepWindowsExecStepConfigGcsObjectAttributes) InternalRef() (terra.Reference, error) {
	return _go.ref, nil
}

func (_go PatchConfigPreStepWindowsExecStepConfigGcsObjectAttributes) InternalWithRef(ref terra.Reference) PatchConfigPreStepWindowsExecStepConfigGcsObjectAttributes {
	return PatchConfigPreStepWindowsExecStepConfigGcsObjectAttributes{ref: ref}
}

func (_go PatchConfigPreStepWindowsExecStepConfigGcsObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _go.ref.InternalTokens()
}

func (_go PatchConfigPreStepWindowsExecStepConfigGcsObjectAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("bucket"))
}

func (_go PatchConfigPreStepWindowsExecStepConfigGcsObjectAttributes) GenerationNumber() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("generation_number"))
}

func (_go PatchConfigPreStepWindowsExecStepConfigGcsObjectAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(_go.ref.Append("object"))
}

type PatchConfigWindowsUpdateAttributes struct {
	ref terra.Reference
}

func (wu PatchConfigWindowsUpdateAttributes) InternalRef() (terra.Reference, error) {
	return wu.ref, nil
}

func (wu PatchConfigWindowsUpdateAttributes) InternalWithRef(ref terra.Reference) PatchConfigWindowsUpdateAttributes {
	return PatchConfigWindowsUpdateAttributes{ref: ref}
}

func (wu PatchConfigWindowsUpdateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wu.ref.InternalTokens()
}

func (wu PatchConfigWindowsUpdateAttributes) Classifications() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wu.ref.Append("classifications"))
}

func (wu PatchConfigWindowsUpdateAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wu.ref.Append("excludes"))
}

func (wu PatchConfigWindowsUpdateAttributes) ExclusivePatches() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wu.ref.Append("exclusive_patches"))
}

type PatchConfigYumAttributes struct {
	ref terra.Reference
}

func (y PatchConfigYumAttributes) InternalRef() (terra.Reference, error) {
	return y.ref, nil
}

func (y PatchConfigYumAttributes) InternalWithRef(ref terra.Reference) PatchConfigYumAttributes {
	return PatchConfigYumAttributes{ref: ref}
}

func (y PatchConfigYumAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return y.ref.InternalTokens()
}

func (y PatchConfigYumAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](y.ref.Append("excludes"))
}

func (y PatchConfigYumAttributes) ExclusivePackages() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](y.ref.Append("exclusive_packages"))
}

func (y PatchConfigYumAttributes) Minimal() terra.BoolValue {
	return terra.ReferenceAsBool(y.ref.Append("minimal"))
}

func (y PatchConfigYumAttributes) Security() terra.BoolValue {
	return terra.ReferenceAsBool(y.ref.Append("security"))
}

type PatchConfigZypperAttributes struct {
	ref terra.Reference
}

func (z PatchConfigZypperAttributes) InternalRef() (terra.Reference, error) {
	return z.ref, nil
}

func (z PatchConfigZypperAttributes) InternalWithRef(ref terra.Reference) PatchConfigZypperAttributes {
	return PatchConfigZypperAttributes{ref: ref}
}

func (z PatchConfigZypperAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return z.ref.InternalTokens()
}

func (z PatchConfigZypperAttributes) Categories() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](z.ref.Append("categories"))
}

func (z PatchConfigZypperAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](z.ref.Append("excludes"))
}

func (z PatchConfigZypperAttributes) ExclusivePatches() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](z.ref.Append("exclusive_patches"))
}

func (z PatchConfigZypperAttributes) Severities() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](z.ref.Append("severities"))
}

func (z PatchConfigZypperAttributes) WithOptional() terra.BoolValue {
	return terra.ReferenceAsBool(z.ref.Append("with_optional"))
}

func (z PatchConfigZypperAttributes) WithUpdate() terra.BoolValue {
	return terra.ReferenceAsBool(z.ref.Append("with_update"))
}

type RecurringScheduleAttributes struct {
	ref terra.Reference
}

func (rs RecurringScheduleAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RecurringScheduleAttributes) InternalWithRef(ref terra.Reference) RecurringScheduleAttributes {
	return RecurringScheduleAttributes{ref: ref}
}

func (rs RecurringScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RecurringScheduleAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("end_time"))
}

func (rs RecurringScheduleAttributes) LastExecuteTime() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("last_execute_time"))
}

func (rs RecurringScheduleAttributes) NextExecuteTime() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("next_execute_time"))
}

func (rs RecurringScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("start_time"))
}

func (rs RecurringScheduleAttributes) Monthly() terra.ListValue[RecurringScheduleMonthlyAttributes] {
	return terra.ReferenceAsList[RecurringScheduleMonthlyAttributes](rs.ref.Append("monthly"))
}

func (rs RecurringScheduleAttributes) TimeOfDay() terra.ListValue[RecurringScheduleTimeOfDayAttributes] {
	return terra.ReferenceAsList[RecurringScheduleTimeOfDayAttributes](rs.ref.Append("time_of_day"))
}

func (rs RecurringScheduleAttributes) TimeZone() terra.ListValue[RecurringScheduleTimeZoneAttributes] {
	return terra.ReferenceAsList[RecurringScheduleTimeZoneAttributes](rs.ref.Append("time_zone"))
}

func (rs RecurringScheduleAttributes) Weekly() terra.ListValue[RecurringScheduleWeeklyAttributes] {
	return terra.ReferenceAsList[RecurringScheduleWeeklyAttributes](rs.ref.Append("weekly"))
}

type RecurringScheduleMonthlyAttributes struct {
	ref terra.Reference
}

func (m RecurringScheduleMonthlyAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m RecurringScheduleMonthlyAttributes) InternalWithRef(ref terra.Reference) RecurringScheduleMonthlyAttributes {
	return RecurringScheduleMonthlyAttributes{ref: ref}
}

func (m RecurringScheduleMonthlyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m RecurringScheduleMonthlyAttributes) MonthDay() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("month_day"))
}

func (m RecurringScheduleMonthlyAttributes) WeekDayOfMonth() terra.ListValue[RecurringScheduleMonthlyWeekDayOfMonthAttributes] {
	return terra.ReferenceAsList[RecurringScheduleMonthlyWeekDayOfMonthAttributes](m.ref.Append("week_day_of_month"))
}

type RecurringScheduleMonthlyWeekDayOfMonthAttributes struct {
	ref terra.Reference
}

func (wdom RecurringScheduleMonthlyWeekDayOfMonthAttributes) InternalRef() (terra.Reference, error) {
	return wdom.ref, nil
}

func (wdom RecurringScheduleMonthlyWeekDayOfMonthAttributes) InternalWithRef(ref terra.Reference) RecurringScheduleMonthlyWeekDayOfMonthAttributes {
	return RecurringScheduleMonthlyWeekDayOfMonthAttributes{ref: ref}
}

func (wdom RecurringScheduleMonthlyWeekDayOfMonthAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wdom.ref.InternalTokens()
}

func (wdom RecurringScheduleMonthlyWeekDayOfMonthAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(wdom.ref.Append("day_of_week"))
}

func (wdom RecurringScheduleMonthlyWeekDayOfMonthAttributes) DayOffset() terra.NumberValue {
	return terra.ReferenceAsNumber(wdom.ref.Append("day_offset"))
}

func (wdom RecurringScheduleMonthlyWeekDayOfMonthAttributes) WeekOrdinal() terra.NumberValue {
	return terra.ReferenceAsNumber(wdom.ref.Append("week_ordinal"))
}

type RecurringScheduleTimeOfDayAttributes struct {
	ref terra.Reference
}

func (tod RecurringScheduleTimeOfDayAttributes) InternalRef() (terra.Reference, error) {
	return tod.ref, nil
}

func (tod RecurringScheduleTimeOfDayAttributes) InternalWithRef(ref terra.Reference) RecurringScheduleTimeOfDayAttributes {
	return RecurringScheduleTimeOfDayAttributes{ref: ref}
}

func (tod RecurringScheduleTimeOfDayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tod.ref.InternalTokens()
}

func (tod RecurringScheduleTimeOfDayAttributes) Hours() terra.NumberValue {
	return terra.ReferenceAsNumber(tod.ref.Append("hours"))
}

func (tod RecurringScheduleTimeOfDayAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(tod.ref.Append("minutes"))
}

func (tod RecurringScheduleTimeOfDayAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(tod.ref.Append("nanos"))
}

func (tod RecurringScheduleTimeOfDayAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceAsNumber(tod.ref.Append("seconds"))
}

type RecurringScheduleTimeZoneAttributes struct {
	ref terra.Reference
}

func (tz RecurringScheduleTimeZoneAttributes) InternalRef() (terra.Reference, error) {
	return tz.ref, nil
}

func (tz RecurringScheduleTimeZoneAttributes) InternalWithRef(ref terra.Reference) RecurringScheduleTimeZoneAttributes {
	return RecurringScheduleTimeZoneAttributes{ref: ref}
}

func (tz RecurringScheduleTimeZoneAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tz.ref.InternalTokens()
}

func (tz RecurringScheduleTimeZoneAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tz.ref.Append("id"))
}

func (tz RecurringScheduleTimeZoneAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(tz.ref.Append("version"))
}

type RecurringScheduleWeeklyAttributes struct {
	ref terra.Reference
}

func (w RecurringScheduleWeeklyAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w RecurringScheduleWeeklyAttributes) InternalWithRef(ref terra.Reference) RecurringScheduleWeeklyAttributes {
	return RecurringScheduleWeeklyAttributes{ref: ref}
}

func (w RecurringScheduleWeeklyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w RecurringScheduleWeeklyAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("day_of_week"))
}

type RolloutAttributes struct {
	ref terra.Reference
}

func (r RolloutAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RolloutAttributes) InternalWithRef(ref terra.Reference) RolloutAttributes {
	return RolloutAttributes{ref: ref}
}

func (r RolloutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RolloutAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("mode"))
}

func (r RolloutAttributes) DisruptionBudget() terra.ListValue[RolloutDisruptionBudgetAttributes] {
	return terra.ReferenceAsList[RolloutDisruptionBudgetAttributes](r.ref.Append("disruption_budget"))
}

type RolloutDisruptionBudgetAttributes struct {
	ref terra.Reference
}

func (db RolloutDisruptionBudgetAttributes) InternalRef() (terra.Reference, error) {
	return db.ref, nil
}

func (db RolloutDisruptionBudgetAttributes) InternalWithRef(ref terra.Reference) RolloutDisruptionBudgetAttributes {
	return RolloutDisruptionBudgetAttributes{ref: ref}
}

func (db RolloutDisruptionBudgetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return db.ref.InternalTokens()
}

func (db RolloutDisruptionBudgetAttributes) Fixed() terra.NumberValue {
	return terra.ReferenceAsNumber(db.ref.Append("fixed"))
}

func (db RolloutDisruptionBudgetAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(db.ref.Append("percentage"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type InstanceFilterState struct {
	All                  bool                             `json:"all"`
	InstanceNamePrefixes []string                         `json:"instance_name_prefixes"`
	Instances            []string                         `json:"instances"`
	Zones                []string                         `json:"zones"`
	GroupLabels          []InstanceFilterGroupLabelsState `json:"group_labels"`
}

type InstanceFilterGroupLabelsState struct {
	Labels map[string]string `json:"labels"`
}

type OneTimeScheduleState struct {
	ExecuteTime string `json:"execute_time"`
}

type PatchConfigState struct {
	MigInstancesAllowed bool                            `json:"mig_instances_allowed"`
	RebootConfig        string                          `json:"reboot_config"`
	Apt                 []PatchConfigAptState           `json:"apt"`
	Goo                 []PatchConfigGooState           `json:"goo"`
	PostStep            []PatchConfigPostStepState      `json:"post_step"`
	PreStep             []PatchConfigPreStepState       `json:"pre_step"`
	WindowsUpdate       []PatchConfigWindowsUpdateState `json:"windows_update"`
	Yum                 []PatchConfigYumState           `json:"yum"`
	Zypper              []PatchConfigZypperState        `json:"zypper"`
}

type PatchConfigAptState struct {
	Excludes          []string `json:"excludes"`
	ExclusivePackages []string `json:"exclusive_packages"`
	Type              string   `json:"type"`
}

type PatchConfigGooState struct {
	Enabled bool `json:"enabled"`
}

type PatchConfigPostStepState struct {
	LinuxExecStepConfig   []PatchConfigPostStepLinuxExecStepConfigState   `json:"linux_exec_step_config"`
	WindowsExecStepConfig []PatchConfigPostStepWindowsExecStepConfigState `json:"windows_exec_step_config"`
}

type PatchConfigPostStepLinuxExecStepConfigState struct {
	AllowedSuccessCodes []float64                                              `json:"allowed_success_codes"`
	Interpreter         string                                                 `json:"interpreter"`
	LocalPath           string                                                 `json:"local_path"`
	GcsObject           []PatchConfigPostStepLinuxExecStepConfigGcsObjectState `json:"gcs_object"`
}

type PatchConfigPostStepLinuxExecStepConfigGcsObjectState struct {
	Bucket           string `json:"bucket"`
	GenerationNumber string `json:"generation_number"`
	Object           string `json:"object"`
}

type PatchConfigPostStepWindowsExecStepConfigState struct {
	AllowedSuccessCodes []float64                                                `json:"allowed_success_codes"`
	Interpreter         string                                                   `json:"interpreter"`
	LocalPath           string                                                   `json:"local_path"`
	GcsObject           []PatchConfigPostStepWindowsExecStepConfigGcsObjectState `json:"gcs_object"`
}

type PatchConfigPostStepWindowsExecStepConfigGcsObjectState struct {
	Bucket           string `json:"bucket"`
	GenerationNumber string `json:"generation_number"`
	Object           string `json:"object"`
}

type PatchConfigPreStepState struct {
	LinuxExecStepConfig   []PatchConfigPreStepLinuxExecStepConfigState   `json:"linux_exec_step_config"`
	WindowsExecStepConfig []PatchConfigPreStepWindowsExecStepConfigState `json:"windows_exec_step_config"`
}

type PatchConfigPreStepLinuxExecStepConfigState struct {
	AllowedSuccessCodes []float64                                             `json:"allowed_success_codes"`
	Interpreter         string                                                `json:"interpreter"`
	LocalPath           string                                                `json:"local_path"`
	GcsObject           []PatchConfigPreStepLinuxExecStepConfigGcsObjectState `json:"gcs_object"`
}

type PatchConfigPreStepLinuxExecStepConfigGcsObjectState struct {
	Bucket           string `json:"bucket"`
	GenerationNumber string `json:"generation_number"`
	Object           string `json:"object"`
}

type PatchConfigPreStepWindowsExecStepConfigState struct {
	AllowedSuccessCodes []float64                                               `json:"allowed_success_codes"`
	Interpreter         string                                                  `json:"interpreter"`
	LocalPath           string                                                  `json:"local_path"`
	GcsObject           []PatchConfigPreStepWindowsExecStepConfigGcsObjectState `json:"gcs_object"`
}

type PatchConfigPreStepWindowsExecStepConfigGcsObjectState struct {
	Bucket           string `json:"bucket"`
	GenerationNumber string `json:"generation_number"`
	Object           string `json:"object"`
}

type PatchConfigWindowsUpdateState struct {
	Classifications  []string `json:"classifications"`
	Excludes         []string `json:"excludes"`
	ExclusivePatches []string `json:"exclusive_patches"`
}

type PatchConfigYumState struct {
	Excludes          []string `json:"excludes"`
	ExclusivePackages []string `json:"exclusive_packages"`
	Minimal           bool     `json:"minimal"`
	Security          bool     `json:"security"`
}

type PatchConfigZypperState struct {
	Categories       []string `json:"categories"`
	Excludes         []string `json:"excludes"`
	ExclusivePatches []string `json:"exclusive_patches"`
	Severities       []string `json:"severities"`
	WithOptional     bool     `json:"with_optional"`
	WithUpdate       bool     `json:"with_update"`
}

type RecurringScheduleState struct {
	EndTime         string                            `json:"end_time"`
	LastExecuteTime string                            `json:"last_execute_time"`
	NextExecuteTime string                            `json:"next_execute_time"`
	StartTime       string                            `json:"start_time"`
	Monthly         []RecurringScheduleMonthlyState   `json:"monthly"`
	TimeOfDay       []RecurringScheduleTimeOfDayState `json:"time_of_day"`
	TimeZone        []RecurringScheduleTimeZoneState  `json:"time_zone"`
	Weekly          []RecurringScheduleWeeklyState    `json:"weekly"`
}

type RecurringScheduleMonthlyState struct {
	MonthDay       float64                                       `json:"month_day"`
	WeekDayOfMonth []RecurringScheduleMonthlyWeekDayOfMonthState `json:"week_day_of_month"`
}

type RecurringScheduleMonthlyWeekDayOfMonthState struct {
	DayOfWeek   string  `json:"day_of_week"`
	DayOffset   float64 `json:"day_offset"`
	WeekOrdinal float64 `json:"week_ordinal"`
}

type RecurringScheduleTimeOfDayState struct {
	Hours   float64 `json:"hours"`
	Minutes float64 `json:"minutes"`
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type RecurringScheduleTimeZoneState struct {
	Id      string `json:"id"`
	Version string `json:"version"`
}

type RecurringScheduleWeeklyState struct {
	DayOfWeek string `json:"day_of_week"`
}

type RolloutState struct {
	Mode             string                         `json:"mode"`
	DisruptionBudget []RolloutDisruptionBudgetState `json:"disruption_budget"`
}

type RolloutDisruptionBudgetState struct {
	Fixed      float64 `json:"fixed"`
	Percentage float64 `json:"percentage"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
