// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_storage_bucket_object

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CustomerEncryption struct {
	// EncryptionAlgorithm: string, optional
	EncryptionAlgorithm terra.StringValue `hcl:"encryption_algorithm,attr"`
	// EncryptionKey: string, required
	EncryptionKey terra.StringValue `hcl:"encryption_key,attr" validate:"required"`
}

type Retention struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
	// RetainUntilTime: string, required
	RetainUntilTime terra.StringValue `hcl:"retain_until_time,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CustomerEncryptionAttributes struct {
	ref terra.Reference
}

func (ce CustomerEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return ce.ref, nil
}

func (ce CustomerEncryptionAttributes) InternalWithRef(ref terra.Reference) CustomerEncryptionAttributes {
	return CustomerEncryptionAttributes{ref: ref}
}

func (ce CustomerEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ce.ref.InternalTokens()
}

func (ce CustomerEncryptionAttributes) EncryptionAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(ce.ref.Append("encryption_algorithm"))
}

func (ce CustomerEncryptionAttributes) EncryptionKey() terra.StringValue {
	return terra.ReferenceAsString(ce.ref.Append("encryption_key"))
}

type RetentionAttributes struct {
	ref terra.Reference
}

func (r RetentionAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RetentionAttributes) InternalWithRef(ref terra.Reference) RetentionAttributes {
	return RetentionAttributes{ref: ref}
}

func (r RetentionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RetentionAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("mode"))
}

func (r RetentionAttributes) RetainUntilTime() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("retain_until_time"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CustomerEncryptionState struct {
	EncryptionAlgorithm string `json:"encryption_algorithm"`
	EncryptionKey       string `json:"encryption_key"`
}

type RetentionState struct {
	Mode            string `json:"mode"`
	RetainUntilTime string `json:"retain_until_time"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
