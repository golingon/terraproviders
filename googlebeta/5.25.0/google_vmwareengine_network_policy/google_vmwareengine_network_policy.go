// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_vmwareengine_network_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_vmwareengine_network_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleVmwareengineNetworkPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gvnp *Resource) Type() string {
	return "google_vmwareengine_network_policy"
}

// LocalName returns the local name for [Resource].
func (gvnp *Resource) LocalName() string {
	return gvnp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gvnp *Resource) Configuration() interface{} {
	return gvnp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gvnp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gvnp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gvnp *Resource) Dependencies() terra.Dependencies {
	return gvnp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gvnp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gvnp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gvnp *Resource) Attributes() googleVmwareengineNetworkPolicyAttributes {
	return googleVmwareengineNetworkPolicyAttributes{ref: terra.ReferenceResource(gvnp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gvnp *Resource) ImportState(state io.Reader) error {
	gvnp.state = &googleVmwareengineNetworkPolicyState{}
	if err := json.NewDecoder(state).Decode(gvnp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gvnp.Type(), gvnp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gvnp *Resource) State() (*googleVmwareengineNetworkPolicyState, bool) {
	return gvnp.state, gvnp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gvnp *Resource) StateMust() *googleVmwareengineNetworkPolicyState {
	if gvnp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gvnp.Type(), gvnp.LocalName()))
	}
	return gvnp.state
}

// Args contains the configurations for google_vmwareengine_network_policy.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EdgeServicesCidr: string, required
	EdgeServicesCidr terra.StringValue `hcl:"edge_services_cidr,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// VmwareEngineNetwork: string, required
	VmwareEngineNetwork terra.StringValue `hcl:"vmware_engine_network,attr" validate:"required"`
	// ExternalIp: optional
	ExternalIp *ExternalIp `hcl:"external_ip,block"`
	// InternetAccess: optional
	InternetAccess *InternetAccess `hcl:"internet_access,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleVmwareengineNetworkPolicyAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_vmwareengine_network_policy.
func (gvnp googleVmwareengineNetworkPolicyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("create_time"))
}

// Description returns a reference to field description of google_vmwareengine_network_policy.
func (gvnp googleVmwareengineNetworkPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("description"))
}

// EdgeServicesCidr returns a reference to field edge_services_cidr of google_vmwareengine_network_policy.
func (gvnp googleVmwareengineNetworkPolicyAttributes) EdgeServicesCidr() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("edge_services_cidr"))
}

// Id returns a reference to field id of google_vmwareengine_network_policy.
func (gvnp googleVmwareengineNetworkPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("id"))
}

// Location returns a reference to field location of google_vmwareengine_network_policy.
func (gvnp googleVmwareengineNetworkPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("location"))
}

// Name returns a reference to field name of google_vmwareengine_network_policy.
func (gvnp googleVmwareengineNetworkPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("name"))
}

// Project returns a reference to field project of google_vmwareengine_network_policy.
func (gvnp googleVmwareengineNetworkPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("project"))
}

// Uid returns a reference to field uid of google_vmwareengine_network_policy.
func (gvnp googleVmwareengineNetworkPolicyAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_vmwareengine_network_policy.
func (gvnp googleVmwareengineNetworkPolicyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("update_time"))
}

// VmwareEngineNetwork returns a reference to field vmware_engine_network of google_vmwareengine_network_policy.
func (gvnp googleVmwareengineNetworkPolicyAttributes) VmwareEngineNetwork() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("vmware_engine_network"))
}

// VmwareEngineNetworkCanonical returns a reference to field vmware_engine_network_canonical of google_vmwareengine_network_policy.
func (gvnp googleVmwareengineNetworkPolicyAttributes) VmwareEngineNetworkCanonical() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("vmware_engine_network_canonical"))
}

func (gvnp googleVmwareengineNetworkPolicyAttributes) ExternalIp() terra.ListValue[ExternalIpAttributes] {
	return terra.ReferenceAsList[ExternalIpAttributes](gvnp.ref.Append("external_ip"))
}

func (gvnp googleVmwareengineNetworkPolicyAttributes) InternetAccess() terra.ListValue[InternetAccessAttributes] {
	return terra.ReferenceAsList[InternetAccessAttributes](gvnp.ref.Append("internet_access"))
}

func (gvnp googleVmwareengineNetworkPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gvnp.ref.Append("timeouts"))
}

type googleVmwareengineNetworkPolicyState struct {
	CreateTime                   string                `json:"create_time"`
	Description                  string                `json:"description"`
	EdgeServicesCidr             string                `json:"edge_services_cidr"`
	Id                           string                `json:"id"`
	Location                     string                `json:"location"`
	Name                         string                `json:"name"`
	Project                      string                `json:"project"`
	Uid                          string                `json:"uid"`
	UpdateTime                   string                `json:"update_time"`
	VmwareEngineNetwork          string                `json:"vmware_engine_network"`
	VmwareEngineNetworkCanonical string                `json:"vmware_engine_network_canonical"`
	ExternalIp                   []ExternalIpState     `json:"external_ip"`
	InternetAccess               []InternetAccessState `json:"internet_access"`
	Timeouts                     *TimeoutsState        `json:"timeouts"`
}
