// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_logging_organization_sink

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_logging_organization_sink.
type Resource struct {
	Name      string
	Args      Args
	state     *googleLoggingOrganizationSinkState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (glos *Resource) Type() string {
	return "google_logging_organization_sink"
}

// LocalName returns the local name for [Resource].
func (glos *Resource) LocalName() string {
	return glos.Name
}

// Configuration returns the configuration (args) for [Resource].
func (glos *Resource) Configuration() interface{} {
	return glos.Args
}

// DependOn is used for other resources to depend on [Resource].
func (glos *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(glos)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (glos *Resource) Dependencies() terra.Dependencies {
	return glos.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (glos *Resource) LifecycleManagement() *terra.Lifecycle {
	return glos.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (glos *Resource) Attributes() googleLoggingOrganizationSinkAttributes {
	return googleLoggingOrganizationSinkAttributes{ref: terra.ReferenceResource(glos)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (glos *Resource) ImportState(state io.Reader) error {
	glos.state = &googleLoggingOrganizationSinkState{}
	if err := json.NewDecoder(state).Decode(glos.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", glos.Type(), glos.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (glos *Resource) State() (*googleLoggingOrganizationSinkState, bool) {
	return glos.state, glos.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (glos *Resource) StateMust() *googleLoggingOrganizationSinkState {
	if glos.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", glos.Type(), glos.LocalName()))
	}
	return glos.state
}

// Args contains the configurations for google_logging_organization_sink.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// Filter: string, optional
	Filter terra.StringValue `hcl:"filter,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IncludeChildren: bool, optional
	IncludeChildren terra.BoolValue `hcl:"include_children,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OrgId: string, required
	OrgId terra.StringValue `hcl:"org_id,attr" validate:"required"`
	// BigqueryOptions: optional
	BigqueryOptions *BigqueryOptions `hcl:"bigquery_options,block"`
	// Exclusions: min=0
	Exclusions []Exclusions `hcl:"exclusions,block" validate:"min=0"`
}

type googleLoggingOrganizationSinkAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_logging_organization_sink.
func (glos googleLoggingOrganizationSinkAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(glos.ref.Append("description"))
}

// Destination returns a reference to field destination of google_logging_organization_sink.
func (glos googleLoggingOrganizationSinkAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(glos.ref.Append("destination"))
}

// Disabled returns a reference to field disabled of google_logging_organization_sink.
func (glos googleLoggingOrganizationSinkAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(glos.ref.Append("disabled"))
}

// Filter returns a reference to field filter of google_logging_organization_sink.
func (glos googleLoggingOrganizationSinkAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(glos.ref.Append("filter"))
}

// Id returns a reference to field id of google_logging_organization_sink.
func (glos googleLoggingOrganizationSinkAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(glos.ref.Append("id"))
}

// IncludeChildren returns a reference to field include_children of google_logging_organization_sink.
func (glos googleLoggingOrganizationSinkAttributes) IncludeChildren() terra.BoolValue {
	return terra.ReferenceAsBool(glos.ref.Append("include_children"))
}

// Name returns a reference to field name of google_logging_organization_sink.
func (glos googleLoggingOrganizationSinkAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(glos.ref.Append("name"))
}

// OrgId returns a reference to field org_id of google_logging_organization_sink.
func (glos googleLoggingOrganizationSinkAttributes) OrgId() terra.StringValue {
	return terra.ReferenceAsString(glos.ref.Append("org_id"))
}

// WriterIdentity returns a reference to field writer_identity of google_logging_organization_sink.
func (glos googleLoggingOrganizationSinkAttributes) WriterIdentity() terra.StringValue {
	return terra.ReferenceAsString(glos.ref.Append("writer_identity"))
}

func (glos googleLoggingOrganizationSinkAttributes) BigqueryOptions() terra.ListValue[BigqueryOptionsAttributes] {
	return terra.ReferenceAsList[BigqueryOptionsAttributes](glos.ref.Append("bigquery_options"))
}

func (glos googleLoggingOrganizationSinkAttributes) Exclusions() terra.ListValue[ExclusionsAttributes] {
	return terra.ReferenceAsList[ExclusionsAttributes](glos.ref.Append("exclusions"))
}

type googleLoggingOrganizationSinkState struct {
	Description     string                 `json:"description"`
	Destination     string                 `json:"destination"`
	Disabled        bool                   `json:"disabled"`
	Filter          string                 `json:"filter"`
	Id              string                 `json:"id"`
	IncludeChildren bool                   `json:"include_children"`
	Name            string                 `json:"name"`
	OrgId           string                 `json:"org_id"`
	WriterIdentity  string                 `json:"writer_identity"`
	BigqueryOptions []BigqueryOptionsState `json:"bigquery_options"`
	Exclusions      []ExclusionsState      `json:"exclusions"`
}
