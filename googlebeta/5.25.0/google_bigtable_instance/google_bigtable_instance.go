// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigtable_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigtable_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigtableInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbi *Resource) Type() string {
	return "google_bigtable_instance"
}

// LocalName returns the local name for [Resource].
func (gbi *Resource) LocalName() string {
	return gbi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbi *Resource) Configuration() interface{} {
	return gbi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbi *Resource) Dependencies() terra.Dependencies {
	return gbi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbi *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbi *Resource) Attributes() googleBigtableInstanceAttributes {
	return googleBigtableInstanceAttributes{ref: terra.ReferenceResource(gbi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbi *Resource) ImportState(state io.Reader) error {
	gbi.state = &googleBigtableInstanceState{}
	if err := json.NewDecoder(state).Decode(gbi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbi.Type(), gbi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbi *Resource) State() (*googleBigtableInstanceState, bool) {
	return gbi.state, gbi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbi *Resource) StateMust() *googleBigtableInstanceState {
	if gbi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbi.Type(), gbi.LocalName()))
	}
	return gbi.state
}

// Args contains the configurations for google_bigtable_instance.
type Args struct {
	// DeletionProtection: bool, optional
	DeletionProtection terra.BoolValue `hcl:"deletion_protection,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceType: string, optional
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Cluster: min=0
	Cluster []Cluster `hcl:"cluster,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBigtableInstanceAttributes struct {
	ref terra.Reference
}

// DeletionProtection returns a reference to field deletion_protection of google_bigtable_instance.
func (gbi googleBigtableInstanceAttributes) DeletionProtection() terra.BoolValue {
	return terra.ReferenceAsBool(gbi.ref.Append("deletion_protection"))
}

// DisplayName returns a reference to field display_name of google_bigtable_instance.
func (gbi googleBigtableInstanceAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gbi.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_bigtable_instance.
func (gbi googleBigtableInstanceAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbi.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_bigtable_instance.
func (gbi googleBigtableInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbi.ref.Append("id"))
}

// InstanceType returns a reference to field instance_type of google_bigtable_instance.
func (gbi googleBigtableInstanceAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(gbi.ref.Append("instance_type"))
}

// Labels returns a reference to field labels of google_bigtable_instance.
func (gbi googleBigtableInstanceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbi.ref.Append("labels"))
}

// Name returns a reference to field name of google_bigtable_instance.
func (gbi googleBigtableInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbi.ref.Append("name"))
}

// Project returns a reference to field project of google_bigtable_instance.
func (gbi googleBigtableInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbi.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_bigtable_instance.
func (gbi googleBigtableInstanceAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbi.ref.Append("terraform_labels"))
}

func (gbi googleBigtableInstanceAttributes) Cluster() terra.ListValue[ClusterAttributes] {
	return terra.ReferenceAsList[ClusterAttributes](gbi.ref.Append("cluster"))
}

func (gbi googleBigtableInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbi.ref.Append("timeouts"))
}

type googleBigtableInstanceState struct {
	DeletionProtection bool              `json:"deletion_protection"`
	DisplayName        string            `json:"display_name"`
	EffectiveLabels    map[string]string `json:"effective_labels"`
	Id                 string            `json:"id"`
	InstanceType       string            `json:"instance_type"`
	Labels             map[string]string `json:"labels"`
	Name               string            `json:"name"`
	Project            string            `json:"project"`
	TerraformLabels    map[string]string `json:"terraform_labels"`
	Cluster            []ClusterState    `json:"cluster"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
