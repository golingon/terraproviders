// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigtable_gc_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigtable_gc_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigtableGcPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbgp *Resource) Type() string {
	return "google_bigtable_gc_policy"
}

// LocalName returns the local name for [Resource].
func (gbgp *Resource) LocalName() string {
	return gbgp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbgp *Resource) Configuration() interface{} {
	return gbgp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbgp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbgp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbgp *Resource) Dependencies() terra.Dependencies {
	return gbgp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbgp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbgp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbgp *Resource) Attributes() googleBigtableGcPolicyAttributes {
	return googleBigtableGcPolicyAttributes{ref: terra.ReferenceResource(gbgp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbgp *Resource) ImportState(state io.Reader) error {
	gbgp.state = &googleBigtableGcPolicyState{}
	if err := json.NewDecoder(state).Decode(gbgp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbgp.Type(), gbgp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbgp *Resource) State() (*googleBigtableGcPolicyState, bool) {
	return gbgp.state, gbgp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbgp *Resource) StateMust() *googleBigtableGcPolicyState {
	if gbgp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbgp.Type(), gbgp.LocalName()))
	}
	return gbgp.state
}

// Args contains the configurations for google_bigtable_gc_policy.
type Args struct {
	// ColumnFamily: string, required
	ColumnFamily terra.StringValue `hcl:"column_family,attr" validate:"required"`
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// GcRules: string, optional
	GcRules terra.StringValue `hcl:"gc_rules,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceName: string, required
	InstanceName terra.StringValue `hcl:"instance_name,attr" validate:"required"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Table: string, required
	Table terra.StringValue `hcl:"table,attr" validate:"required"`
	// MaxAge: optional
	MaxAge *MaxAge `hcl:"max_age,block"`
	// MaxVersion: min=0
	MaxVersion []MaxVersion `hcl:"max_version,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBigtableGcPolicyAttributes struct {
	ref terra.Reference
}

// ColumnFamily returns a reference to field column_family of google_bigtable_gc_policy.
func (gbgp googleBigtableGcPolicyAttributes) ColumnFamily() terra.StringValue {
	return terra.ReferenceAsString(gbgp.ref.Append("column_family"))
}

// DeletionPolicy returns a reference to field deletion_policy of google_bigtable_gc_policy.
func (gbgp googleBigtableGcPolicyAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(gbgp.ref.Append("deletion_policy"))
}

// GcRules returns a reference to field gc_rules of google_bigtable_gc_policy.
func (gbgp googleBigtableGcPolicyAttributes) GcRules() terra.StringValue {
	return terra.ReferenceAsString(gbgp.ref.Append("gc_rules"))
}

// Id returns a reference to field id of google_bigtable_gc_policy.
func (gbgp googleBigtableGcPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbgp.ref.Append("id"))
}

// InstanceName returns a reference to field instance_name of google_bigtable_gc_policy.
func (gbgp googleBigtableGcPolicyAttributes) InstanceName() terra.StringValue {
	return terra.ReferenceAsString(gbgp.ref.Append("instance_name"))
}

// Mode returns a reference to field mode of google_bigtable_gc_policy.
func (gbgp googleBigtableGcPolicyAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(gbgp.ref.Append("mode"))
}

// Project returns a reference to field project of google_bigtable_gc_policy.
func (gbgp googleBigtableGcPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbgp.ref.Append("project"))
}

// Table returns a reference to field table of google_bigtable_gc_policy.
func (gbgp googleBigtableGcPolicyAttributes) Table() terra.StringValue {
	return terra.ReferenceAsString(gbgp.ref.Append("table"))
}

func (gbgp googleBigtableGcPolicyAttributes) MaxAge() terra.ListValue[MaxAgeAttributes] {
	return terra.ReferenceAsList[MaxAgeAttributes](gbgp.ref.Append("max_age"))
}

func (gbgp googleBigtableGcPolicyAttributes) MaxVersion() terra.ListValue[MaxVersionAttributes] {
	return terra.ReferenceAsList[MaxVersionAttributes](gbgp.ref.Append("max_version"))
}

func (gbgp googleBigtableGcPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbgp.ref.Append("timeouts"))
}

type googleBigtableGcPolicyState struct {
	ColumnFamily   string            `json:"column_family"`
	DeletionPolicy string            `json:"deletion_policy"`
	GcRules        string            `json:"gc_rules"`
	Id             string            `json:"id"`
	InstanceName   string            `json:"instance_name"`
	Mode           string            `json:"mode"`
	Project        string            `json:"project"`
	Table          string            `json:"table"`
	MaxAge         []MaxAgeState     `json:"max_age"`
	MaxVersion     []MaxVersionState `json:"max_version"`
	Timeouts       *TimeoutsState    `json:"timeouts"`
}
