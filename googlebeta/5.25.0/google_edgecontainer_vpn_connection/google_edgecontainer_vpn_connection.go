// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_edgecontainer_vpn_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_edgecontainer_vpn_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *googleEdgecontainerVpnConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gevc *Resource) Type() string {
	return "google_edgecontainer_vpn_connection"
}

// LocalName returns the local name for [Resource].
func (gevc *Resource) LocalName() string {
	return gevc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gevc *Resource) Configuration() interface{} {
	return gevc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gevc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gevc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gevc *Resource) Dependencies() terra.Dependencies {
	return gevc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gevc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gevc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gevc *Resource) Attributes() googleEdgecontainerVpnConnectionAttributes {
	return googleEdgecontainerVpnConnectionAttributes{ref: terra.ReferenceResource(gevc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gevc *Resource) ImportState(state io.Reader) error {
	gevc.state = &googleEdgecontainerVpnConnectionState{}
	if err := json.NewDecoder(state).Decode(gevc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gevc.Type(), gevc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gevc *Resource) State() (*googleEdgecontainerVpnConnectionState, bool) {
	return gevc.state, gevc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gevc *Resource) StateMust() *googleEdgecontainerVpnConnectionState {
	if gevc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gevc.Type(), gevc.LocalName()))
	}
	return gevc.state
}

// Args contains the configurations for google_edgecontainer_vpn_connection.
type Args struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// EnableHighAvailability: bool, optional
	EnableHighAvailability terra.BoolValue `hcl:"enable_high_availability,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NatGatewayIp: string, optional
	NatGatewayIp terra.StringValue `hcl:"nat_gateway_ip,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Router: string, optional
	Router terra.StringValue `hcl:"router,attr"`
	// Vpc: string, optional
	Vpc terra.StringValue `hcl:"vpc,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcProject: optional
	VpcProject *VpcProject `hcl:"vpc_project,block"`
}

type googleEdgecontainerVpnConnectionAttributes struct {
	ref terra.Reference
}

// Cluster returns a reference to field cluster of google_edgecontainer_vpn_connection.
func (gevc googleEdgecontainerVpnConnectionAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(gevc.ref.Append("cluster"))
}

// CreateTime returns a reference to field create_time of google_edgecontainer_vpn_connection.
func (gevc googleEdgecontainerVpnConnectionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gevc.ref.Append("create_time"))
}

// EffectiveLabels returns a reference to field effective_labels of google_edgecontainer_vpn_connection.
func (gevc googleEdgecontainerVpnConnectionAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gevc.ref.Append("effective_labels"))
}

// EnableHighAvailability returns a reference to field enable_high_availability of google_edgecontainer_vpn_connection.
func (gevc googleEdgecontainerVpnConnectionAttributes) EnableHighAvailability() terra.BoolValue {
	return terra.ReferenceAsBool(gevc.ref.Append("enable_high_availability"))
}

// Id returns a reference to field id of google_edgecontainer_vpn_connection.
func (gevc googleEdgecontainerVpnConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gevc.ref.Append("id"))
}

// Labels returns a reference to field labels of google_edgecontainer_vpn_connection.
func (gevc googleEdgecontainerVpnConnectionAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gevc.ref.Append("labels"))
}

// Location returns a reference to field location of google_edgecontainer_vpn_connection.
func (gevc googleEdgecontainerVpnConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gevc.ref.Append("location"))
}

// Name returns a reference to field name of google_edgecontainer_vpn_connection.
func (gevc googleEdgecontainerVpnConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gevc.ref.Append("name"))
}

// NatGatewayIp returns a reference to field nat_gateway_ip of google_edgecontainer_vpn_connection.
func (gevc googleEdgecontainerVpnConnectionAttributes) NatGatewayIp() terra.StringValue {
	return terra.ReferenceAsString(gevc.ref.Append("nat_gateway_ip"))
}

// Project returns a reference to field project of google_edgecontainer_vpn_connection.
func (gevc googleEdgecontainerVpnConnectionAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gevc.ref.Append("project"))
}

// Router returns a reference to field router of google_edgecontainer_vpn_connection.
func (gevc googleEdgecontainerVpnConnectionAttributes) Router() terra.StringValue {
	return terra.ReferenceAsString(gevc.ref.Append("router"))
}

// TerraformLabels returns a reference to field terraform_labels of google_edgecontainer_vpn_connection.
func (gevc googleEdgecontainerVpnConnectionAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gevc.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_edgecontainer_vpn_connection.
func (gevc googleEdgecontainerVpnConnectionAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gevc.ref.Append("update_time"))
}

// Vpc returns a reference to field vpc of google_edgecontainer_vpn_connection.
func (gevc googleEdgecontainerVpnConnectionAttributes) Vpc() terra.StringValue {
	return terra.ReferenceAsString(gevc.ref.Append("vpc"))
}

func (gevc googleEdgecontainerVpnConnectionAttributes) Details() terra.ListValue[DetailsAttributes] {
	return terra.ReferenceAsList[DetailsAttributes](gevc.ref.Append("details"))
}

func (gevc googleEdgecontainerVpnConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gevc.ref.Append("timeouts"))
}

func (gevc googleEdgecontainerVpnConnectionAttributes) VpcProject() terra.ListValue[VpcProjectAttributes] {
	return terra.ReferenceAsList[VpcProjectAttributes](gevc.ref.Append("vpc_project"))
}

type googleEdgecontainerVpnConnectionState struct {
	Cluster                string            `json:"cluster"`
	CreateTime             string            `json:"create_time"`
	EffectiveLabels        map[string]string `json:"effective_labels"`
	EnableHighAvailability bool              `json:"enable_high_availability"`
	Id                     string            `json:"id"`
	Labels                 map[string]string `json:"labels"`
	Location               string            `json:"location"`
	Name                   string            `json:"name"`
	NatGatewayIp           string            `json:"nat_gateway_ip"`
	Project                string            `json:"project"`
	Router                 string            `json:"router"`
	TerraformLabels        map[string]string `json:"terraform_labels"`
	UpdateTime             string            `json:"update_time"`
	Vpc                    string            `json:"vpc"`
	Details                []DetailsState    `json:"details"`
	Timeouts               *TimeoutsState    `json:"timeouts"`
	VpcProject             []VpcProjectState `json:"vpc_project"`
}
