// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_backend_bucket

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataCdnPolicyAttributes struct {
	ref terra.Reference
}

func (cp DataCdnPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp DataCdnPolicyAttributes) InternalWithRef(ref terra.Reference) DataCdnPolicyAttributes {
	return DataCdnPolicyAttributes{ref: ref}
}

func (cp DataCdnPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp DataCdnPolicyAttributes) CacheMode() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("cache_mode"))
}

func (cp DataCdnPolicyAttributes) ClientTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("client_ttl"))
}

func (cp DataCdnPolicyAttributes) DefaultTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("default_ttl"))
}

func (cp DataCdnPolicyAttributes) MaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("max_ttl"))
}

func (cp DataCdnPolicyAttributes) NegativeCaching() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("negative_caching"))
}

func (cp DataCdnPolicyAttributes) RequestCoalescing() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("request_coalescing"))
}

func (cp DataCdnPolicyAttributes) ServeWhileStale() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("serve_while_stale"))
}

func (cp DataCdnPolicyAttributes) SignedUrlCacheMaxAgeSec() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("signed_url_cache_max_age_sec"))
}

func (cp DataCdnPolicyAttributes) BypassCacheOnRequestHeaders() terra.ListValue[DataCdnPolicyBypassCacheOnRequestHeadersAttributes] {
	return terra.ReferenceAsList[DataCdnPolicyBypassCacheOnRequestHeadersAttributes](cp.ref.Append("bypass_cache_on_request_headers"))
}

func (cp DataCdnPolicyAttributes) CacheKeyPolicy() terra.ListValue[DataCdnPolicyCacheKeyPolicyAttributes] {
	return terra.ReferenceAsList[DataCdnPolicyCacheKeyPolicyAttributes](cp.ref.Append("cache_key_policy"))
}

func (cp DataCdnPolicyAttributes) NegativeCachingPolicy() terra.ListValue[DataCdnPolicyNegativeCachingPolicyAttributes] {
	return terra.ReferenceAsList[DataCdnPolicyNegativeCachingPolicyAttributes](cp.ref.Append("negative_caching_policy"))
}

type DataCdnPolicyBypassCacheOnRequestHeadersAttributes struct {
	ref terra.Reference
}

func (bcorh DataCdnPolicyBypassCacheOnRequestHeadersAttributes) InternalRef() (terra.Reference, error) {
	return bcorh.ref, nil
}

func (bcorh DataCdnPolicyBypassCacheOnRequestHeadersAttributes) InternalWithRef(ref terra.Reference) DataCdnPolicyBypassCacheOnRequestHeadersAttributes {
	return DataCdnPolicyBypassCacheOnRequestHeadersAttributes{ref: ref}
}

func (bcorh DataCdnPolicyBypassCacheOnRequestHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bcorh.ref.InternalTokens()
}

func (bcorh DataCdnPolicyBypassCacheOnRequestHeadersAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(bcorh.ref.Append("header_name"))
}

type DataCdnPolicyCacheKeyPolicyAttributes struct {
	ref terra.Reference
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ckp.ref, nil
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) InternalWithRef(ref terra.Reference) DataCdnPolicyCacheKeyPolicyAttributes {
	return DataCdnPolicyCacheKeyPolicyAttributes{ref: ref}
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ckp.ref.InternalTokens()
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) IncludeHttpHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ckp.ref.Append("include_http_headers"))
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) QueryStringWhitelist() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ckp.ref.Append("query_string_whitelist"))
}

type DataCdnPolicyNegativeCachingPolicyAttributes struct {
	ref terra.Reference
}

func (ncp DataCdnPolicyNegativeCachingPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ncp.ref, nil
}

func (ncp DataCdnPolicyNegativeCachingPolicyAttributes) InternalWithRef(ref terra.Reference) DataCdnPolicyNegativeCachingPolicyAttributes {
	return DataCdnPolicyNegativeCachingPolicyAttributes{ref: ref}
}

func (ncp DataCdnPolicyNegativeCachingPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ncp.ref.InternalTokens()
}

func (ncp DataCdnPolicyNegativeCachingPolicyAttributes) Code() terra.NumberValue {
	return terra.ReferenceAsNumber(ncp.ref.Append("code"))
}

func (ncp DataCdnPolicyNegativeCachingPolicyAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(ncp.ref.Append("ttl"))
}

type DataCdnPolicyState struct {
	CacheMode                   string                                          `json:"cache_mode"`
	ClientTtl                   float64                                         `json:"client_ttl"`
	DefaultTtl                  float64                                         `json:"default_ttl"`
	MaxTtl                      float64                                         `json:"max_ttl"`
	NegativeCaching             bool                                            `json:"negative_caching"`
	RequestCoalescing           bool                                            `json:"request_coalescing"`
	ServeWhileStale             float64                                         `json:"serve_while_stale"`
	SignedUrlCacheMaxAgeSec     float64                                         `json:"signed_url_cache_max_age_sec"`
	BypassCacheOnRequestHeaders []DataCdnPolicyBypassCacheOnRequestHeadersState `json:"bypass_cache_on_request_headers"`
	CacheKeyPolicy              []DataCdnPolicyCacheKeyPolicyState              `json:"cache_key_policy"`
	NegativeCachingPolicy       []DataCdnPolicyNegativeCachingPolicyState       `json:"negative_caching_policy"`
}

type DataCdnPolicyBypassCacheOnRequestHeadersState struct {
	HeaderName string `json:"header_name"`
}

type DataCdnPolicyCacheKeyPolicyState struct {
	IncludeHttpHeaders   []string `json:"include_http_headers"`
	QueryStringWhitelist []string `json:"query_string_whitelist"`
}

type DataCdnPolicyNegativeCachingPolicyState struct {
	Code float64 `json:"code"`
	Ttl  float64 `json:"ttl"`
}
