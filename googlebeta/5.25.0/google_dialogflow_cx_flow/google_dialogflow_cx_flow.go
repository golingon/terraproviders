// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dialogflow_cx_flow

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dialogflow_cx_flow.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDialogflowCxFlowState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdcf *Resource) Type() string {
	return "google_dialogflow_cx_flow"
}

// LocalName returns the local name for [Resource].
func (gdcf *Resource) LocalName() string {
	return gdcf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdcf *Resource) Configuration() interface{} {
	return gdcf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdcf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdcf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdcf *Resource) Dependencies() terra.Dependencies {
	return gdcf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdcf *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdcf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdcf *Resource) Attributes() googleDialogflowCxFlowAttributes {
	return googleDialogflowCxFlowAttributes{ref: terra.ReferenceResource(gdcf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdcf *Resource) ImportState(state io.Reader) error {
	gdcf.state = &googleDialogflowCxFlowState{}
	if err := json.NewDecoder(state).Decode(gdcf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdcf.Type(), gdcf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdcf *Resource) State() (*googleDialogflowCxFlowState, bool) {
	return gdcf.state, gdcf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdcf *Resource) StateMust() *googleDialogflowCxFlowState {
	if gdcf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdcf.Type(), gdcf.LocalName()))
	}
	return gdcf.state
}

// Args contains the configurations for google_dialogflow_cx_flow.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsDefaultStartFlow: bool, optional
	IsDefaultStartFlow terra.BoolValue `hcl:"is_default_start_flow,attr"`
	// LanguageCode: string, optional
	LanguageCode terra.StringValue `hcl:"language_code,attr"`
	// Parent: string, optional
	Parent terra.StringValue `hcl:"parent,attr"`
	// TransitionRouteGroups: list of string, optional
	TransitionRouteGroups terra.ListValue[terra.StringValue] `hcl:"transition_route_groups,attr"`
	// AdvancedSettings: optional
	AdvancedSettings *AdvancedSettings `hcl:"advanced_settings,block"`
	// EventHandlers: min=0
	EventHandlers []EventHandlers `hcl:"event_handlers,block" validate:"min=0"`
	// NluSettings: optional
	NluSettings *NluSettings `hcl:"nlu_settings,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// TransitionRoutes: min=0
	TransitionRoutes []TransitionRoutes `hcl:"transition_routes,block" validate:"min=0"`
}

type googleDialogflowCxFlowAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_dialogflow_cx_flow.
func (gdcf googleDialogflowCxFlowAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdcf.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_dialogflow_cx_flow.
func (gdcf googleDialogflowCxFlowAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdcf.ref.Append("display_name"))
}

// Id returns a reference to field id of google_dialogflow_cx_flow.
func (gdcf googleDialogflowCxFlowAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdcf.ref.Append("id"))
}

// IsDefaultStartFlow returns a reference to field is_default_start_flow of google_dialogflow_cx_flow.
func (gdcf googleDialogflowCxFlowAttributes) IsDefaultStartFlow() terra.BoolValue {
	return terra.ReferenceAsBool(gdcf.ref.Append("is_default_start_flow"))
}

// LanguageCode returns a reference to field language_code of google_dialogflow_cx_flow.
func (gdcf googleDialogflowCxFlowAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(gdcf.ref.Append("language_code"))
}

// Name returns a reference to field name of google_dialogflow_cx_flow.
func (gdcf googleDialogflowCxFlowAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdcf.ref.Append("name"))
}

// Parent returns a reference to field parent of google_dialogflow_cx_flow.
func (gdcf googleDialogflowCxFlowAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gdcf.ref.Append("parent"))
}

// TransitionRouteGroups returns a reference to field transition_route_groups of google_dialogflow_cx_flow.
func (gdcf googleDialogflowCxFlowAttributes) TransitionRouteGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gdcf.ref.Append("transition_route_groups"))
}

func (gdcf googleDialogflowCxFlowAttributes) AdvancedSettings() terra.ListValue[AdvancedSettingsAttributes] {
	return terra.ReferenceAsList[AdvancedSettingsAttributes](gdcf.ref.Append("advanced_settings"))
}

func (gdcf googleDialogflowCxFlowAttributes) EventHandlers() terra.ListValue[EventHandlersAttributes] {
	return terra.ReferenceAsList[EventHandlersAttributes](gdcf.ref.Append("event_handlers"))
}

func (gdcf googleDialogflowCxFlowAttributes) NluSettings() terra.ListValue[NluSettingsAttributes] {
	return terra.ReferenceAsList[NluSettingsAttributes](gdcf.ref.Append("nlu_settings"))
}

func (gdcf googleDialogflowCxFlowAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdcf.ref.Append("timeouts"))
}

func (gdcf googleDialogflowCxFlowAttributes) TransitionRoutes() terra.ListValue[TransitionRoutesAttributes] {
	return terra.ReferenceAsList[TransitionRoutesAttributes](gdcf.ref.Append("transition_routes"))
}

type googleDialogflowCxFlowState struct {
	Description           string                  `json:"description"`
	DisplayName           string                  `json:"display_name"`
	Id                    string                  `json:"id"`
	IsDefaultStartFlow    bool                    `json:"is_default_start_flow"`
	LanguageCode          string                  `json:"language_code"`
	Name                  string                  `json:"name"`
	Parent                string                  `json:"parent"`
	TransitionRouteGroups []string                `json:"transition_route_groups"`
	AdvancedSettings      []AdvancedSettingsState `json:"advanced_settings"`
	EventHandlers         []EventHandlersState    `json:"event_handlers"`
	NluSettings           []NluSettingsState      `json:"nlu_settings"`
	Timeouts              *TimeoutsState          `json:"timeouts"`
	TransitionRoutes      []TransitionRoutesState `json:"transition_routes"`
}
