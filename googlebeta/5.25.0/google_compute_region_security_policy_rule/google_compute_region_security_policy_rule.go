// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_region_security_policy_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_region_security_policy_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeRegionSecurityPolicyRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcrspr *Resource) Type() string {
	return "google_compute_region_security_policy_rule"
}

// LocalName returns the local name for [Resource].
func (gcrspr *Resource) LocalName() string {
	return gcrspr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcrspr *Resource) Configuration() interface{} {
	return gcrspr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcrspr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcrspr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcrspr *Resource) Dependencies() terra.Dependencies {
	return gcrspr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcrspr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcrspr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcrspr *Resource) Attributes() googleComputeRegionSecurityPolicyRuleAttributes {
	return googleComputeRegionSecurityPolicyRuleAttributes{ref: terra.ReferenceResource(gcrspr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcrspr *Resource) ImportState(state io.Reader) error {
	gcrspr.state = &googleComputeRegionSecurityPolicyRuleState{}
	if err := json.NewDecoder(state).Decode(gcrspr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcrspr.Type(), gcrspr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcrspr *Resource) State() (*googleComputeRegionSecurityPolicyRuleState, bool) {
	return gcrspr.state, gcrspr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcrspr *Resource) StateMust() *googleComputeRegionSecurityPolicyRuleState {
	if gcrspr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcrspr.Type(), gcrspr.LocalName()))
	}
	return gcrspr.state
}

// Args contains the configurations for google_compute_region_security_policy_rule.
type Args struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Preview: bool, optional
	Preview terra.BoolValue `hcl:"preview,attr"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, required
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
	// SecurityPolicy: string, required
	SecurityPolicy terra.StringValue `hcl:"security_policy,attr" validate:"required"`
	// Match: optional
	Match *Match `hcl:"match,block"`
	// NetworkMatch: optional
	NetworkMatch *NetworkMatch `hcl:"network_match,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeRegionSecurityPolicyRuleAttributes struct {
	ref terra.Reference
}

// Action returns a reference to field action of google_compute_region_security_policy_rule.
func (gcrspr googleComputeRegionSecurityPolicyRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(gcrspr.ref.Append("action"))
}

// Description returns a reference to field description of google_compute_region_security_policy_rule.
func (gcrspr googleComputeRegionSecurityPolicyRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcrspr.ref.Append("description"))
}

// Id returns a reference to field id of google_compute_region_security_policy_rule.
func (gcrspr googleComputeRegionSecurityPolicyRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcrspr.ref.Append("id"))
}

// Preview returns a reference to field preview of google_compute_region_security_policy_rule.
func (gcrspr googleComputeRegionSecurityPolicyRuleAttributes) Preview() terra.BoolValue {
	return terra.ReferenceAsBool(gcrspr.ref.Append("preview"))
}

// Priority returns a reference to field priority of google_compute_region_security_policy_rule.
func (gcrspr googleComputeRegionSecurityPolicyRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(gcrspr.ref.Append("priority"))
}

// Project returns a reference to field project of google_compute_region_security_policy_rule.
func (gcrspr googleComputeRegionSecurityPolicyRuleAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcrspr.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_region_security_policy_rule.
func (gcrspr googleComputeRegionSecurityPolicyRuleAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcrspr.ref.Append("region"))
}

// SecurityPolicy returns a reference to field security_policy of google_compute_region_security_policy_rule.
func (gcrspr googleComputeRegionSecurityPolicyRuleAttributes) SecurityPolicy() terra.StringValue {
	return terra.ReferenceAsString(gcrspr.ref.Append("security_policy"))
}

func (gcrspr googleComputeRegionSecurityPolicyRuleAttributes) Match() terra.ListValue[MatchAttributes] {
	return terra.ReferenceAsList[MatchAttributes](gcrspr.ref.Append("match"))
}

func (gcrspr googleComputeRegionSecurityPolicyRuleAttributes) NetworkMatch() terra.ListValue[NetworkMatchAttributes] {
	return terra.ReferenceAsList[NetworkMatchAttributes](gcrspr.ref.Append("network_match"))
}

func (gcrspr googleComputeRegionSecurityPolicyRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcrspr.ref.Append("timeouts"))
}

type googleComputeRegionSecurityPolicyRuleState struct {
	Action         string              `json:"action"`
	Description    string              `json:"description"`
	Id             string              `json:"id"`
	Preview        bool                `json:"preview"`
	Priority       float64             `json:"priority"`
	Project        string              `json:"project"`
	Region         string              `json:"region"`
	SecurityPolicy string              `json:"security_policy"`
	Match          []MatchState        `json:"match"`
	NetworkMatch   []NetworkMatchState `json:"network_match"`
	Timeouts       *TimeoutsState      `json:"timeouts"`
}
