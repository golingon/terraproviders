// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_biglake_catalog

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_biglake_catalog.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBiglakeCatalogState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbc *Resource) Type() string {
	return "google_biglake_catalog"
}

// LocalName returns the local name for [Resource].
func (gbc *Resource) LocalName() string {
	return gbc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbc *Resource) Configuration() interface{} {
	return gbc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbc *Resource) Dependencies() terra.Dependencies {
	return gbc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbc *Resource) Attributes() googleBiglakeCatalogAttributes {
	return googleBiglakeCatalogAttributes{ref: terra.ReferenceResource(gbc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbc *Resource) ImportState(state io.Reader) error {
	gbc.state = &googleBiglakeCatalogState{}
	if err := json.NewDecoder(state).Decode(gbc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbc.Type(), gbc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbc *Resource) State() (*googleBiglakeCatalogState, bool) {
	return gbc.state, gbc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbc *Resource) StateMust() *googleBiglakeCatalogState {
	if gbc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbc.Type(), gbc.LocalName()))
	}
	return gbc.state
}

// Args contains the configurations for google_biglake_catalog.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBiglakeCatalogAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_biglake_catalog.
func (gbc googleBiglakeCatalogAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_biglake_catalog.
func (gbc googleBiglakeCatalogAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("delete_time"))
}

// ExpireTime returns a reference to field expire_time of google_biglake_catalog.
func (gbc googleBiglakeCatalogAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("expire_time"))
}

// Id returns a reference to field id of google_biglake_catalog.
func (gbc googleBiglakeCatalogAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("id"))
}

// Location returns a reference to field location of google_biglake_catalog.
func (gbc googleBiglakeCatalogAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("location"))
}

// Name returns a reference to field name of google_biglake_catalog.
func (gbc googleBiglakeCatalogAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("name"))
}

// Project returns a reference to field project of google_biglake_catalog.
func (gbc googleBiglakeCatalogAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("project"))
}

// UpdateTime returns a reference to field update_time of google_biglake_catalog.
func (gbc googleBiglakeCatalogAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("update_time"))
}

func (gbc googleBiglakeCatalogAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbc.ref.Append("timeouts"))
}

type googleBiglakeCatalogState struct {
	CreateTime string         `json:"create_time"`
	DeleteTime string         `json:"delete_time"`
	ExpireTime string         `json:"expire_time"`
	Id         string         `json:"id"`
	Location   string         `json:"location"`
	Name       string         `json:"name"`
	Project    string         `json:"project"`
	UpdateTime string         `json:"update_time"`
	Timeouts   *TimeoutsState `json:"timeouts"`
}
