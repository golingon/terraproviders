// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_blockchain_node_engine_blockchain_nodes

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_blockchain_node_engine_blockchain_nodes.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBlockchainNodeEngineBlockchainNodesState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbnebn *Resource) Type() string {
	return "google_blockchain_node_engine_blockchain_nodes"
}

// LocalName returns the local name for [Resource].
func (gbnebn *Resource) LocalName() string {
	return gbnebn.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbnebn *Resource) Configuration() interface{} {
	return gbnebn.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbnebn *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbnebn)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbnebn *Resource) Dependencies() terra.Dependencies {
	return gbnebn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbnebn *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbnebn.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbnebn *Resource) Attributes() googleBlockchainNodeEngineBlockchainNodesAttributes {
	return googleBlockchainNodeEngineBlockchainNodesAttributes{ref: terra.ReferenceResource(gbnebn)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbnebn *Resource) ImportState(state io.Reader) error {
	gbnebn.state = &googleBlockchainNodeEngineBlockchainNodesState{}
	if err := json.NewDecoder(state).Decode(gbnebn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbnebn.Type(), gbnebn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbnebn *Resource) State() (*googleBlockchainNodeEngineBlockchainNodesState, bool) {
	return gbnebn.state, gbnebn.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbnebn *Resource) StateMust() *googleBlockchainNodeEngineBlockchainNodesState {
	if gbnebn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbnebn.Type(), gbnebn.LocalName()))
	}
	return gbnebn.state
}

// Args contains the configurations for google_blockchain_node_engine_blockchain_nodes.
type Args struct {
	// BlockchainNodeId: string, required
	BlockchainNodeId terra.StringValue `hcl:"blockchain_node_id,attr" validate:"required"`
	// BlockchainType: string, optional
	BlockchainType terra.StringValue `hcl:"blockchain_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// EthereumDetails: optional
	EthereumDetails *EthereumDetails `hcl:"ethereum_details,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBlockchainNodeEngineBlockchainNodesAttributes struct {
	ref terra.Reference
}

// BlockchainNodeId returns a reference to field blockchain_node_id of google_blockchain_node_engine_blockchain_nodes.
func (gbnebn googleBlockchainNodeEngineBlockchainNodesAttributes) BlockchainNodeId() terra.StringValue {
	return terra.ReferenceAsString(gbnebn.ref.Append("blockchain_node_id"))
}

// BlockchainType returns a reference to field blockchain_type of google_blockchain_node_engine_blockchain_nodes.
func (gbnebn googleBlockchainNodeEngineBlockchainNodesAttributes) BlockchainType() terra.StringValue {
	return terra.ReferenceAsString(gbnebn.ref.Append("blockchain_type"))
}

// CreateTime returns a reference to field create_time of google_blockchain_node_engine_blockchain_nodes.
func (gbnebn googleBlockchainNodeEngineBlockchainNodesAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gbnebn.ref.Append("create_time"))
}

// EffectiveLabels returns a reference to field effective_labels of google_blockchain_node_engine_blockchain_nodes.
func (gbnebn googleBlockchainNodeEngineBlockchainNodesAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbnebn.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_blockchain_node_engine_blockchain_nodes.
func (gbnebn googleBlockchainNodeEngineBlockchainNodesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbnebn.ref.Append("id"))
}

// Labels returns a reference to field labels of google_blockchain_node_engine_blockchain_nodes.
func (gbnebn googleBlockchainNodeEngineBlockchainNodesAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbnebn.ref.Append("labels"))
}

// Location returns a reference to field location of google_blockchain_node_engine_blockchain_nodes.
func (gbnebn googleBlockchainNodeEngineBlockchainNodesAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbnebn.ref.Append("location"))
}

// Name returns a reference to field name of google_blockchain_node_engine_blockchain_nodes.
func (gbnebn googleBlockchainNodeEngineBlockchainNodesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbnebn.ref.Append("name"))
}

// Project returns a reference to field project of google_blockchain_node_engine_blockchain_nodes.
func (gbnebn googleBlockchainNodeEngineBlockchainNodesAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbnebn.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_blockchain_node_engine_blockchain_nodes.
func (gbnebn googleBlockchainNodeEngineBlockchainNodesAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbnebn.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_blockchain_node_engine_blockchain_nodes.
func (gbnebn googleBlockchainNodeEngineBlockchainNodesAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gbnebn.ref.Append("update_time"))
}

func (gbnebn googleBlockchainNodeEngineBlockchainNodesAttributes) ConnectionInfo() terra.ListValue[ConnectionInfoAttributes] {
	return terra.ReferenceAsList[ConnectionInfoAttributes](gbnebn.ref.Append("connection_info"))
}

func (gbnebn googleBlockchainNodeEngineBlockchainNodesAttributes) EthereumDetails() terra.ListValue[EthereumDetailsAttributes] {
	return terra.ReferenceAsList[EthereumDetailsAttributes](gbnebn.ref.Append("ethereum_details"))
}

func (gbnebn googleBlockchainNodeEngineBlockchainNodesAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbnebn.ref.Append("timeouts"))
}

type googleBlockchainNodeEngineBlockchainNodesState struct {
	BlockchainNodeId string                 `json:"blockchain_node_id"`
	BlockchainType   string                 `json:"blockchain_type"`
	CreateTime       string                 `json:"create_time"`
	EffectiveLabels  map[string]string      `json:"effective_labels"`
	Id               string                 `json:"id"`
	Labels           map[string]string      `json:"labels"`
	Location         string                 `json:"location"`
	Name             string                 `json:"name"`
	Project          string                 `json:"project"`
	TerraformLabels  map[string]string      `json:"terraform_labels"`
	UpdateTime       string                 `json:"update_time"`
	ConnectionInfo   []ConnectionInfoState  `json:"connection_info"`
	EthereumDetails  []EthereumDetailsState `json:"ethereum_details"`
	Timeouts         *TimeoutsState         `json:"timeouts"`
}
