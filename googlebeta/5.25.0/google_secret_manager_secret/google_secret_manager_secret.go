// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_secret_manager_secret

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_secret_manager_secret.
type Resource struct {
	Name      string
	Args      Args
	state     *googleSecretManagerSecretState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsms *Resource) Type() string {
	return "google_secret_manager_secret"
}

// LocalName returns the local name for [Resource].
func (gsms *Resource) LocalName() string {
	return gsms.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsms *Resource) Configuration() interface{} {
	return gsms.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsms *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsms)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsms *Resource) Dependencies() terra.Dependencies {
	return gsms.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsms *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsms.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsms *Resource) Attributes() googleSecretManagerSecretAttributes {
	return googleSecretManagerSecretAttributes{ref: terra.ReferenceResource(gsms)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsms *Resource) ImportState(state io.Reader) error {
	gsms.state = &googleSecretManagerSecretState{}
	if err := json.NewDecoder(state).Decode(gsms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsms.Type(), gsms.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsms *Resource) State() (*googleSecretManagerSecretState, bool) {
	return gsms.state, gsms.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsms *Resource) StateMust() *googleSecretManagerSecretState {
	if gsms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsms.Type(), gsms.LocalName()))
	}
	return gsms.state
}

// Args contains the configurations for google_secret_manager_secret.
type Args struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// ExpireTime: string, optional
	ExpireTime terra.StringValue `hcl:"expire_time,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SecretId: string, required
	SecretId terra.StringValue `hcl:"secret_id,attr" validate:"required"`
	// Ttl: string, optional
	Ttl terra.StringValue `hcl:"ttl,attr"`
	// VersionAliases: map of string, optional
	VersionAliases terra.MapValue[terra.StringValue] `hcl:"version_aliases,attr"`
	// Replication: required
	Replication *Replication `hcl:"replication,block" validate:"required"`
	// Rotation: optional
	Rotation *Rotation `hcl:"rotation,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Topics: min=0
	Topics []Topics `hcl:"topics,block" validate:"min=0"`
}

type googleSecretManagerSecretAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_secret_manager_secret.
func (gsms googleSecretManagerSecretAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsms.ref.Append("annotations"))
}

// CreateTime returns a reference to field create_time of google_secret_manager_secret.
func (gsms googleSecretManagerSecretAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gsms.ref.Append("create_time"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_secret_manager_secret.
func (gsms googleSecretManagerSecretAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsms.ref.Append("effective_annotations"))
}

// EffectiveLabels returns a reference to field effective_labels of google_secret_manager_secret.
func (gsms googleSecretManagerSecretAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsms.ref.Append("effective_labels"))
}

// ExpireTime returns a reference to field expire_time of google_secret_manager_secret.
func (gsms googleSecretManagerSecretAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(gsms.ref.Append("expire_time"))
}

// Id returns a reference to field id of google_secret_manager_secret.
func (gsms googleSecretManagerSecretAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsms.ref.Append("id"))
}

// Labels returns a reference to field labels of google_secret_manager_secret.
func (gsms googleSecretManagerSecretAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsms.ref.Append("labels"))
}

// Name returns a reference to field name of google_secret_manager_secret.
func (gsms googleSecretManagerSecretAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsms.ref.Append("name"))
}

// Project returns a reference to field project of google_secret_manager_secret.
func (gsms googleSecretManagerSecretAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gsms.ref.Append("project"))
}

// SecretId returns a reference to field secret_id of google_secret_manager_secret.
func (gsms googleSecretManagerSecretAttributes) SecretId() terra.StringValue {
	return terra.ReferenceAsString(gsms.ref.Append("secret_id"))
}

// TerraformLabels returns a reference to field terraform_labels of google_secret_manager_secret.
func (gsms googleSecretManagerSecretAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsms.ref.Append("terraform_labels"))
}

// Ttl returns a reference to field ttl of google_secret_manager_secret.
func (gsms googleSecretManagerSecretAttributes) Ttl() terra.StringValue {
	return terra.ReferenceAsString(gsms.ref.Append("ttl"))
}

// VersionAliases returns a reference to field version_aliases of google_secret_manager_secret.
func (gsms googleSecretManagerSecretAttributes) VersionAliases() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsms.ref.Append("version_aliases"))
}

func (gsms googleSecretManagerSecretAttributes) Replication() terra.ListValue[ReplicationAttributes] {
	return terra.ReferenceAsList[ReplicationAttributes](gsms.ref.Append("replication"))
}

func (gsms googleSecretManagerSecretAttributes) Rotation() terra.ListValue[RotationAttributes] {
	return terra.ReferenceAsList[RotationAttributes](gsms.ref.Append("rotation"))
}

func (gsms googleSecretManagerSecretAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsms.ref.Append("timeouts"))
}

func (gsms googleSecretManagerSecretAttributes) Topics() terra.ListValue[TopicsAttributes] {
	return terra.ReferenceAsList[TopicsAttributes](gsms.ref.Append("topics"))
}

type googleSecretManagerSecretState struct {
	Annotations          map[string]string  `json:"annotations"`
	CreateTime           string             `json:"create_time"`
	EffectiveAnnotations map[string]string  `json:"effective_annotations"`
	EffectiveLabels      map[string]string  `json:"effective_labels"`
	ExpireTime           string             `json:"expire_time"`
	Id                   string             `json:"id"`
	Labels               map[string]string  `json:"labels"`
	Name                 string             `json:"name"`
	Project              string             `json:"project"`
	SecretId             string             `json:"secret_id"`
	TerraformLabels      map[string]string  `json:"terraform_labels"`
	Ttl                  string             `json:"ttl"`
	VersionAliases       map[string]string  `json:"version_aliases"`
	Replication          []ReplicationState `json:"replication"`
	Rotation             []RotationState    `json:"rotation"`
	Timeouts             *TimeoutsState     `json:"timeouts"`
	Topics               []TopicsState      `json:"topics"`
}
