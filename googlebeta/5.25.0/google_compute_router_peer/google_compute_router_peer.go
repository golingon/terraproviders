// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_router_peer

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_router_peer.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeRouterPeerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcrp *Resource) Type() string {
	return "google_compute_router_peer"
}

// LocalName returns the local name for [Resource].
func (gcrp *Resource) LocalName() string {
	return gcrp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcrp *Resource) Configuration() interface{} {
	return gcrp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcrp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcrp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcrp *Resource) Dependencies() terra.Dependencies {
	return gcrp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcrp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcrp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcrp *Resource) Attributes() googleComputeRouterPeerAttributes {
	return googleComputeRouterPeerAttributes{ref: terra.ReferenceResource(gcrp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcrp *Resource) ImportState(state io.Reader) error {
	gcrp.state = &googleComputeRouterPeerState{}
	if err := json.NewDecoder(state).Decode(gcrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcrp.Type(), gcrp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcrp *Resource) State() (*googleComputeRouterPeerState, bool) {
	return gcrp.state, gcrp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcrp *Resource) StateMust() *googleComputeRouterPeerState {
	if gcrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcrp.Type(), gcrp.LocalName()))
	}
	return gcrp.state
}

// Args contains the configurations for google_compute_router_peer.
type Args struct {
	// AdvertiseMode: string, optional
	AdvertiseMode terra.StringValue `hcl:"advertise_mode,attr"`
	// AdvertisedGroups: list of string, optional
	AdvertisedGroups terra.ListValue[terra.StringValue] `hcl:"advertised_groups,attr"`
	// AdvertisedRoutePriority: number, optional
	AdvertisedRoutePriority terra.NumberValue `hcl:"advertised_route_priority,attr"`
	// Enable: bool, optional
	Enable terra.BoolValue `hcl:"enable,attr"`
	// EnableIpv4: bool, optional
	EnableIpv4 terra.BoolValue `hcl:"enable_ipv4,attr"`
	// EnableIpv6: bool, optional
	EnableIpv6 terra.BoolValue `hcl:"enable_ipv6,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Interface: string, required
	Interface terra.StringValue `hcl:"interface,attr" validate:"required"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Ipv4NexthopAddress: string, optional
	Ipv4NexthopAddress terra.StringValue `hcl:"ipv4_nexthop_address,attr"`
	// Ipv6NexthopAddress: string, optional
	Ipv6NexthopAddress terra.StringValue `hcl:"ipv6_nexthop_address,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PeerAsn: number, required
	PeerAsn terra.NumberValue `hcl:"peer_asn,attr" validate:"required"`
	// PeerIpAddress: string, optional
	PeerIpAddress terra.StringValue `hcl:"peer_ip_address,attr"`
	// PeerIpv4NexthopAddress: string, optional
	PeerIpv4NexthopAddress terra.StringValue `hcl:"peer_ipv4_nexthop_address,attr"`
	// PeerIpv6NexthopAddress: string, optional
	PeerIpv6NexthopAddress terra.StringValue `hcl:"peer_ipv6_nexthop_address,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Router: string, required
	Router terra.StringValue `hcl:"router,attr" validate:"required"`
	// RouterApplianceInstance: string, optional
	RouterApplianceInstance terra.StringValue `hcl:"router_appliance_instance,attr"`
	// AdvertisedIpRanges: min=0
	AdvertisedIpRanges []AdvertisedIpRanges `hcl:"advertised_ip_ranges,block" validate:"min=0"`
	// Bfd: optional
	Bfd *Bfd `hcl:"bfd,block"`
	// Md5AuthenticationKey: optional
	Md5AuthenticationKey *Md5AuthenticationKey `hcl:"md5_authentication_key,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeRouterPeerAttributes struct {
	ref terra.Reference
}

// AdvertiseMode returns a reference to field advertise_mode of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) AdvertiseMode() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("advertise_mode"))
}

// AdvertisedGroups returns a reference to field advertised_groups of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) AdvertisedGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcrp.ref.Append("advertised_groups"))
}

// AdvertisedRoutePriority returns a reference to field advertised_route_priority of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) AdvertisedRoutePriority() terra.NumberValue {
	return terra.ReferenceAsNumber(gcrp.ref.Append("advertised_route_priority"))
}

// Enable returns a reference to field enable of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(gcrp.ref.Append("enable"))
}

// EnableIpv4 returns a reference to field enable_ipv4 of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) EnableIpv4() terra.BoolValue {
	return terra.ReferenceAsBool(gcrp.ref.Append("enable_ipv4"))
}

// EnableIpv6 returns a reference to field enable_ipv6 of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) EnableIpv6() terra.BoolValue {
	return terra.ReferenceAsBool(gcrp.ref.Append("enable_ipv6"))
}

// Id returns a reference to field id of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("id"))
}

// Interface returns a reference to field interface of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) Interface() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("interface"))
}

// IpAddress returns a reference to field ip_address of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("ip_address"))
}

// Ipv4NexthopAddress returns a reference to field ipv4_nexthop_address of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) Ipv4NexthopAddress() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("ipv4_nexthop_address"))
}

// Ipv6NexthopAddress returns a reference to field ipv6_nexthop_address of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) Ipv6NexthopAddress() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("ipv6_nexthop_address"))
}

// ManagementType returns a reference to field management_type of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) ManagementType() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("management_type"))
}

// Name returns a reference to field name of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("name"))
}

// PeerAsn returns a reference to field peer_asn of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) PeerAsn() terra.NumberValue {
	return terra.ReferenceAsNumber(gcrp.ref.Append("peer_asn"))
}

// PeerIpAddress returns a reference to field peer_ip_address of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) PeerIpAddress() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("peer_ip_address"))
}

// PeerIpv4NexthopAddress returns a reference to field peer_ipv4_nexthop_address of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) PeerIpv4NexthopAddress() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("peer_ipv4_nexthop_address"))
}

// PeerIpv6NexthopAddress returns a reference to field peer_ipv6_nexthop_address of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) PeerIpv6NexthopAddress() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("peer_ipv6_nexthop_address"))
}

// Project returns a reference to field project of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("region"))
}

// Router returns a reference to field router of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) Router() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("router"))
}

// RouterApplianceInstance returns a reference to field router_appliance_instance of google_compute_router_peer.
func (gcrp googleComputeRouterPeerAttributes) RouterApplianceInstance() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("router_appliance_instance"))
}

func (gcrp googleComputeRouterPeerAttributes) AdvertisedIpRanges() terra.ListValue[AdvertisedIpRangesAttributes] {
	return terra.ReferenceAsList[AdvertisedIpRangesAttributes](gcrp.ref.Append("advertised_ip_ranges"))
}

func (gcrp googleComputeRouterPeerAttributes) Bfd() terra.ListValue[BfdAttributes] {
	return terra.ReferenceAsList[BfdAttributes](gcrp.ref.Append("bfd"))
}

func (gcrp googleComputeRouterPeerAttributes) Md5AuthenticationKey() terra.ListValue[Md5AuthenticationKeyAttributes] {
	return terra.ReferenceAsList[Md5AuthenticationKeyAttributes](gcrp.ref.Append("md5_authentication_key"))
}

func (gcrp googleComputeRouterPeerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcrp.ref.Append("timeouts"))
}

type googleComputeRouterPeerState struct {
	AdvertiseMode           string                      `json:"advertise_mode"`
	AdvertisedGroups        []string                    `json:"advertised_groups"`
	AdvertisedRoutePriority float64                     `json:"advertised_route_priority"`
	Enable                  bool                        `json:"enable"`
	EnableIpv4              bool                        `json:"enable_ipv4"`
	EnableIpv6              bool                        `json:"enable_ipv6"`
	Id                      string                      `json:"id"`
	Interface               string                      `json:"interface"`
	IpAddress               string                      `json:"ip_address"`
	Ipv4NexthopAddress      string                      `json:"ipv4_nexthop_address"`
	Ipv6NexthopAddress      string                      `json:"ipv6_nexthop_address"`
	ManagementType          string                      `json:"management_type"`
	Name                    string                      `json:"name"`
	PeerAsn                 float64                     `json:"peer_asn"`
	PeerIpAddress           string                      `json:"peer_ip_address"`
	PeerIpv4NexthopAddress  string                      `json:"peer_ipv4_nexthop_address"`
	PeerIpv6NexthopAddress  string                      `json:"peer_ipv6_nexthop_address"`
	Project                 string                      `json:"project"`
	Region                  string                      `json:"region"`
	Router                  string                      `json:"router"`
	RouterApplianceInstance string                      `json:"router_appliance_instance"`
	AdvertisedIpRanges      []AdvertisedIpRangesState   `json:"advertised_ip_ranges"`
	Bfd                     []BfdState                  `json:"bfd"`
	Md5AuthenticationKey    []Md5AuthenticationKeyState `json:"md5_authentication_key"`
	Timeouts                *TimeoutsState              `json:"timeouts"`
}
