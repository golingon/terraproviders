// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_service_directory_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_service_directory_service.
type Resource struct {
	Name      string
	Args      Args
	state     *googleServiceDirectoryServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsds *Resource) Type() string {
	return "google_service_directory_service"
}

// LocalName returns the local name for [Resource].
func (gsds *Resource) LocalName() string {
	return gsds.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsds *Resource) Configuration() interface{} {
	return gsds.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsds *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsds)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsds *Resource) Dependencies() terra.Dependencies {
	return gsds.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsds *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsds.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsds *Resource) Attributes() googleServiceDirectoryServiceAttributes {
	return googleServiceDirectoryServiceAttributes{ref: terra.ReferenceResource(gsds)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsds *Resource) ImportState(state io.Reader) error {
	gsds.state = &googleServiceDirectoryServiceState{}
	if err := json.NewDecoder(state).Decode(gsds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsds.Type(), gsds.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsds *Resource) State() (*googleServiceDirectoryServiceState, bool) {
	return gsds.state, gsds.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsds *Resource) StateMust() *googleServiceDirectoryServiceState {
	if gsds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsds.Type(), gsds.LocalName()))
	}
	return gsds.state
}

// Args contains the configurations for google_service_directory_service.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Namespace: string, required
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
	// ServiceId: string, required
	ServiceId terra.StringValue `hcl:"service_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleServiceDirectoryServiceAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_service_directory_service.
func (gsds googleServiceDirectoryServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsds.ref.Append("id"))
}

// Metadata returns a reference to field metadata of google_service_directory_service.
func (gsds googleServiceDirectoryServiceAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsds.ref.Append("metadata"))
}

// Name returns a reference to field name of google_service_directory_service.
func (gsds googleServiceDirectoryServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsds.ref.Append("name"))
}

// Namespace returns a reference to field namespace of google_service_directory_service.
func (gsds googleServiceDirectoryServiceAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(gsds.ref.Append("namespace"))
}

// ServiceId returns a reference to field service_id of google_service_directory_service.
func (gsds googleServiceDirectoryServiceAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceAsString(gsds.ref.Append("service_id"))
}

func (gsds googleServiceDirectoryServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsds.ref.Append("timeouts"))
}

type googleServiceDirectoryServiceState struct {
	Id        string            `json:"id"`
	Metadata  map[string]string `json:"metadata"`
	Name      string            `json:"name"`
	Namespace string            `json:"namespace"`
	ServiceId string            `json:"service_id"`
	Timeouts  *TimeoutsState    `json:"timeouts"`
}
