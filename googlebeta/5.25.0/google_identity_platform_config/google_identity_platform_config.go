// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_identity_platform_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_identity_platform_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleIdentityPlatformConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gipc *Resource) Type() string {
	return "google_identity_platform_config"
}

// LocalName returns the local name for [Resource].
func (gipc *Resource) LocalName() string {
	return gipc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gipc *Resource) Configuration() interface{} {
	return gipc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gipc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gipc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gipc *Resource) Dependencies() terra.Dependencies {
	return gipc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gipc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gipc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gipc *Resource) Attributes() googleIdentityPlatformConfigAttributes {
	return googleIdentityPlatformConfigAttributes{ref: terra.ReferenceResource(gipc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gipc *Resource) ImportState(state io.Reader) error {
	gipc.state = &googleIdentityPlatformConfigState{}
	if err := json.NewDecoder(state).Decode(gipc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gipc.Type(), gipc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gipc *Resource) State() (*googleIdentityPlatformConfigState, bool) {
	return gipc.state, gipc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gipc *Resource) StateMust() *googleIdentityPlatformConfigState {
	if gipc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gipc.Type(), gipc.LocalName()))
	}
	return gipc.state
}

// Args contains the configurations for google_identity_platform_config.
type Args struct {
	// AuthorizedDomains: list of string, optional
	AuthorizedDomains terra.ListValue[terra.StringValue] `hcl:"authorized_domains,attr"`
	// AutodeleteAnonymousUsers: bool, optional
	AutodeleteAnonymousUsers terra.BoolValue `hcl:"autodelete_anonymous_users,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// BlockingFunctions: optional
	BlockingFunctions *BlockingFunctions `hcl:"blocking_functions,block"`
	// Client: optional
	Client *Client `hcl:"client,block"`
	// Mfa: optional
	Mfa *Mfa `hcl:"mfa,block"`
	// Monitoring: optional
	Monitoring *Monitoring `hcl:"monitoring,block"`
	// MultiTenant: optional
	MultiTenant *MultiTenant `hcl:"multi_tenant,block"`
	// Quota: optional
	Quota *Quota `hcl:"quota,block"`
	// SignIn: optional
	SignIn *SignIn `hcl:"sign_in,block"`
	// SmsRegionConfig: optional
	SmsRegionConfig *SmsRegionConfig `hcl:"sms_region_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleIdentityPlatformConfigAttributes struct {
	ref terra.Reference
}

// AuthorizedDomains returns a reference to field authorized_domains of google_identity_platform_config.
func (gipc googleIdentityPlatformConfigAttributes) AuthorizedDomains() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gipc.ref.Append("authorized_domains"))
}

// AutodeleteAnonymousUsers returns a reference to field autodelete_anonymous_users of google_identity_platform_config.
func (gipc googleIdentityPlatformConfigAttributes) AutodeleteAnonymousUsers() terra.BoolValue {
	return terra.ReferenceAsBool(gipc.ref.Append("autodelete_anonymous_users"))
}

// Id returns a reference to field id of google_identity_platform_config.
func (gipc googleIdentityPlatformConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gipc.ref.Append("id"))
}

// Name returns a reference to field name of google_identity_platform_config.
func (gipc googleIdentityPlatformConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gipc.ref.Append("name"))
}

// Project returns a reference to field project of google_identity_platform_config.
func (gipc googleIdentityPlatformConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gipc.ref.Append("project"))
}

func (gipc googleIdentityPlatformConfigAttributes) BlockingFunctions() terra.ListValue[BlockingFunctionsAttributes] {
	return terra.ReferenceAsList[BlockingFunctionsAttributes](gipc.ref.Append("blocking_functions"))
}

func (gipc googleIdentityPlatformConfigAttributes) Client() terra.ListValue[ClientAttributes] {
	return terra.ReferenceAsList[ClientAttributes](gipc.ref.Append("client"))
}

func (gipc googleIdentityPlatformConfigAttributes) Mfa() terra.ListValue[MfaAttributes] {
	return terra.ReferenceAsList[MfaAttributes](gipc.ref.Append("mfa"))
}

func (gipc googleIdentityPlatformConfigAttributes) Monitoring() terra.ListValue[MonitoringAttributes] {
	return terra.ReferenceAsList[MonitoringAttributes](gipc.ref.Append("monitoring"))
}

func (gipc googleIdentityPlatformConfigAttributes) MultiTenant() terra.ListValue[MultiTenantAttributes] {
	return terra.ReferenceAsList[MultiTenantAttributes](gipc.ref.Append("multi_tenant"))
}

func (gipc googleIdentityPlatformConfigAttributes) Quota() terra.ListValue[QuotaAttributes] {
	return terra.ReferenceAsList[QuotaAttributes](gipc.ref.Append("quota"))
}

func (gipc googleIdentityPlatformConfigAttributes) SignIn() terra.ListValue[SignInAttributes] {
	return terra.ReferenceAsList[SignInAttributes](gipc.ref.Append("sign_in"))
}

func (gipc googleIdentityPlatformConfigAttributes) SmsRegionConfig() terra.ListValue[SmsRegionConfigAttributes] {
	return terra.ReferenceAsList[SmsRegionConfigAttributes](gipc.ref.Append("sms_region_config"))
}

func (gipc googleIdentityPlatformConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gipc.ref.Append("timeouts"))
}

type googleIdentityPlatformConfigState struct {
	AuthorizedDomains        []string                 `json:"authorized_domains"`
	AutodeleteAnonymousUsers bool                     `json:"autodelete_anonymous_users"`
	Id                       string                   `json:"id"`
	Name                     string                   `json:"name"`
	Project                  string                   `json:"project"`
	BlockingFunctions        []BlockingFunctionsState `json:"blocking_functions"`
	Client                   []ClientState            `json:"client"`
	Mfa                      []MfaState               `json:"mfa"`
	Monitoring               []MonitoringState        `json:"monitoring"`
	MultiTenant              []MultiTenantState       `json:"multi_tenant"`
	Quota                    []QuotaState             `json:"quota"`
	SignIn                   []SignInState            `json:"sign_in"`
	SmsRegionConfig          []SmsRegionConfigState   `json:"sms_region_config"`
	Timeouts                 *TimeoutsState           `json:"timeouts"`
}
