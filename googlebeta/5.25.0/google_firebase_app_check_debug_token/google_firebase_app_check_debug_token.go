// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firebase_app_check_debug_token

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firebase_app_check_debug_token.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirebaseAppCheckDebugTokenState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfacdt *Resource) Type() string {
	return "google_firebase_app_check_debug_token"
}

// LocalName returns the local name for [Resource].
func (gfacdt *Resource) LocalName() string {
	return gfacdt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfacdt *Resource) Configuration() interface{} {
	return gfacdt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfacdt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfacdt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfacdt *Resource) Dependencies() terra.Dependencies {
	return gfacdt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfacdt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfacdt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfacdt *Resource) Attributes() googleFirebaseAppCheckDebugTokenAttributes {
	return googleFirebaseAppCheckDebugTokenAttributes{ref: terra.ReferenceResource(gfacdt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfacdt *Resource) ImportState(state io.Reader) error {
	gfacdt.state = &googleFirebaseAppCheckDebugTokenState{}
	if err := json.NewDecoder(state).Decode(gfacdt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfacdt.Type(), gfacdt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfacdt *Resource) State() (*googleFirebaseAppCheckDebugTokenState, bool) {
	return gfacdt.state, gfacdt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfacdt *Resource) StateMust() *googleFirebaseAppCheckDebugTokenState {
	if gfacdt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfacdt.Type(), gfacdt.LocalName()))
	}
	return gfacdt.state
}

// Args contains the configurations for google_firebase_app_check_debug_token.
type Args struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Token: string, required
	Token terra.StringValue `hcl:"token,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirebaseAppCheckDebugTokenAttributes struct {
	ref terra.Reference
}

// AppId returns a reference to field app_id of google_firebase_app_check_debug_token.
func (gfacdt googleFirebaseAppCheckDebugTokenAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(gfacdt.ref.Append("app_id"))
}

// DebugTokenId returns a reference to field debug_token_id of google_firebase_app_check_debug_token.
func (gfacdt googleFirebaseAppCheckDebugTokenAttributes) DebugTokenId() terra.StringValue {
	return terra.ReferenceAsString(gfacdt.ref.Append("debug_token_id"))
}

// DisplayName returns a reference to field display_name of google_firebase_app_check_debug_token.
func (gfacdt googleFirebaseAppCheckDebugTokenAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gfacdt.ref.Append("display_name"))
}

// Id returns a reference to field id of google_firebase_app_check_debug_token.
func (gfacdt googleFirebaseAppCheckDebugTokenAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfacdt.ref.Append("id"))
}

// Project returns a reference to field project of google_firebase_app_check_debug_token.
func (gfacdt googleFirebaseAppCheckDebugTokenAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfacdt.ref.Append("project"))
}

// Token returns a reference to field token of google_firebase_app_check_debug_token.
func (gfacdt googleFirebaseAppCheckDebugTokenAttributes) Token() terra.StringValue {
	return terra.ReferenceAsString(gfacdt.ref.Append("token"))
}

func (gfacdt googleFirebaseAppCheckDebugTokenAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfacdt.ref.Append("timeouts"))
}

type googleFirebaseAppCheckDebugTokenState struct {
	AppId        string         `json:"app_id"`
	DebugTokenId string         `json:"debug_token_id"`
	DisplayName  string         `json:"display_name"`
	Id           string         `json:"id"`
	Project      string         `json:"project"`
	Token        string         `json:"token"`
	Timeouts     *TimeoutsState `json:"timeouts"`
}
