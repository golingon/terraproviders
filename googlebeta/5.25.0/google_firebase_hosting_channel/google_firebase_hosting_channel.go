// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firebase_hosting_channel

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firebase_hosting_channel.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirebaseHostingChannelState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfhc *Resource) Type() string {
	return "google_firebase_hosting_channel"
}

// LocalName returns the local name for [Resource].
func (gfhc *Resource) LocalName() string {
	return gfhc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfhc *Resource) Configuration() interface{} {
	return gfhc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfhc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfhc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfhc *Resource) Dependencies() terra.Dependencies {
	return gfhc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfhc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfhc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfhc *Resource) Attributes() googleFirebaseHostingChannelAttributes {
	return googleFirebaseHostingChannelAttributes{ref: terra.ReferenceResource(gfhc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfhc *Resource) ImportState(state io.Reader) error {
	gfhc.state = &googleFirebaseHostingChannelState{}
	if err := json.NewDecoder(state).Decode(gfhc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfhc.Type(), gfhc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfhc *Resource) State() (*googleFirebaseHostingChannelState, bool) {
	return gfhc.state, gfhc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfhc *Resource) StateMust() *googleFirebaseHostingChannelState {
	if gfhc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfhc.Type(), gfhc.LocalName()))
	}
	return gfhc.state
}

// Args contains the configurations for google_firebase_hosting_channel.
type Args struct {
	// ChannelId: string, required
	ChannelId terra.StringValue `hcl:"channel_id,attr" validate:"required"`
	// ExpireTime: string, optional
	ExpireTime terra.StringValue `hcl:"expire_time,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// RetainedReleaseCount: number, optional
	RetainedReleaseCount terra.NumberValue `hcl:"retained_release_count,attr"`
	// SiteId: string, required
	SiteId terra.StringValue `hcl:"site_id,attr" validate:"required"`
	// Ttl: string, optional
	Ttl terra.StringValue `hcl:"ttl,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirebaseHostingChannelAttributes struct {
	ref terra.Reference
}

// ChannelId returns a reference to field channel_id of google_firebase_hosting_channel.
func (gfhc googleFirebaseHostingChannelAttributes) ChannelId() terra.StringValue {
	return terra.ReferenceAsString(gfhc.ref.Append("channel_id"))
}

// EffectiveLabels returns a reference to field effective_labels of google_firebase_hosting_channel.
func (gfhc googleFirebaseHostingChannelAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gfhc.ref.Append("effective_labels"))
}

// ExpireTime returns a reference to field expire_time of google_firebase_hosting_channel.
func (gfhc googleFirebaseHostingChannelAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(gfhc.ref.Append("expire_time"))
}

// Id returns a reference to field id of google_firebase_hosting_channel.
func (gfhc googleFirebaseHostingChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfhc.ref.Append("id"))
}

// Labels returns a reference to field labels of google_firebase_hosting_channel.
func (gfhc googleFirebaseHostingChannelAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gfhc.ref.Append("labels"))
}

// Name returns a reference to field name of google_firebase_hosting_channel.
func (gfhc googleFirebaseHostingChannelAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfhc.ref.Append("name"))
}

// RetainedReleaseCount returns a reference to field retained_release_count of google_firebase_hosting_channel.
func (gfhc googleFirebaseHostingChannelAttributes) RetainedReleaseCount() terra.NumberValue {
	return terra.ReferenceAsNumber(gfhc.ref.Append("retained_release_count"))
}

// SiteId returns a reference to field site_id of google_firebase_hosting_channel.
func (gfhc googleFirebaseHostingChannelAttributes) SiteId() terra.StringValue {
	return terra.ReferenceAsString(gfhc.ref.Append("site_id"))
}

// TerraformLabels returns a reference to field terraform_labels of google_firebase_hosting_channel.
func (gfhc googleFirebaseHostingChannelAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gfhc.ref.Append("terraform_labels"))
}

// Ttl returns a reference to field ttl of google_firebase_hosting_channel.
func (gfhc googleFirebaseHostingChannelAttributes) Ttl() terra.StringValue {
	return terra.ReferenceAsString(gfhc.ref.Append("ttl"))
}

func (gfhc googleFirebaseHostingChannelAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfhc.ref.Append("timeouts"))
}

type googleFirebaseHostingChannelState struct {
	ChannelId            string            `json:"channel_id"`
	EffectiveLabels      map[string]string `json:"effective_labels"`
	ExpireTime           string            `json:"expire_time"`
	Id                   string            `json:"id"`
	Labels               map[string]string `json:"labels"`
	Name                 string            `json:"name"`
	RetainedReleaseCount float64           `json:"retained_release_count"`
	SiteId               string            `json:"site_id"`
	TerraformLabels      map[string]string `json:"terraform_labels"`
	Ttl                  string            `json:"ttl"`
	Timeouts             *TimeoutsState    `json:"timeouts"`
}
