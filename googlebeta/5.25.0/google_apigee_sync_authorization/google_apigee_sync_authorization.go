// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apigee_sync_authorization

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_apigee_sync_authorization.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApigeeSyncAuthorizationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gasa *Resource) Type() string {
	return "google_apigee_sync_authorization"
}

// LocalName returns the local name for [Resource].
func (gasa *Resource) LocalName() string {
	return gasa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gasa *Resource) Configuration() interface{} {
	return gasa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gasa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gasa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gasa *Resource) Dependencies() terra.Dependencies {
	return gasa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gasa *Resource) LifecycleManagement() *terra.Lifecycle {
	return gasa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gasa *Resource) Attributes() googleApigeeSyncAuthorizationAttributes {
	return googleApigeeSyncAuthorizationAttributes{ref: terra.ReferenceResource(gasa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gasa *Resource) ImportState(state io.Reader) error {
	gasa.state = &googleApigeeSyncAuthorizationState{}
	if err := json.NewDecoder(state).Decode(gasa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gasa.Type(), gasa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gasa *Resource) State() (*googleApigeeSyncAuthorizationState, bool) {
	return gasa.state, gasa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gasa *Resource) StateMust() *googleApigeeSyncAuthorizationState {
	if gasa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gasa.Type(), gasa.LocalName()))
	}
	return gasa.state
}

// Args contains the configurations for google_apigee_sync_authorization.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Identities: list of string, required
	Identities terra.ListValue[terra.StringValue] `hcl:"identities,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApigeeSyncAuthorizationAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_apigee_sync_authorization.
func (gasa googleApigeeSyncAuthorizationAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gasa.ref.Append("etag"))
}

// Id returns a reference to field id of google_apigee_sync_authorization.
func (gasa googleApigeeSyncAuthorizationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gasa.ref.Append("id"))
}

// Identities returns a reference to field identities of google_apigee_sync_authorization.
func (gasa googleApigeeSyncAuthorizationAttributes) Identities() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gasa.ref.Append("identities"))
}

// Name returns a reference to field name of google_apigee_sync_authorization.
func (gasa googleApigeeSyncAuthorizationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gasa.ref.Append("name"))
}

func (gasa googleApigeeSyncAuthorizationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gasa.ref.Append("timeouts"))
}

type googleApigeeSyncAuthorizationState struct {
	Etag       string         `json:"etag"`
	Id         string         `json:"id"`
	Identities []string       `json:"identities"`
	Name       string         `json:"name"`
	Timeouts   *TimeoutsState `json:"timeouts"`
}
