// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apigee_env_references

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_apigee_env_references.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApigeeEnvReferencesState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gaer *Resource) Type() string {
	return "google_apigee_env_references"
}

// LocalName returns the local name for [Resource].
func (gaer *Resource) LocalName() string {
	return gaer.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gaer *Resource) Configuration() interface{} {
	return gaer.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gaer *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gaer)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gaer *Resource) Dependencies() terra.Dependencies {
	return gaer.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gaer *Resource) LifecycleManagement() *terra.Lifecycle {
	return gaer.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gaer *Resource) Attributes() googleApigeeEnvReferencesAttributes {
	return googleApigeeEnvReferencesAttributes{ref: terra.ReferenceResource(gaer)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gaer *Resource) ImportState(state io.Reader) error {
	gaer.state = &googleApigeeEnvReferencesState{}
	if err := json.NewDecoder(state).Decode(gaer.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gaer.Type(), gaer.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gaer *Resource) State() (*googleApigeeEnvReferencesState, bool) {
	return gaer.state, gaer.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gaer *Resource) StateMust() *googleApigeeEnvReferencesState {
	if gaer.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gaer.Type(), gaer.LocalName()))
	}
	return gaer.state
}

// Args contains the configurations for google_apigee_env_references.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnvId: string, required
	EnvId terra.StringValue `hcl:"env_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Refers: string, required
	Refers terra.StringValue `hcl:"refers,attr" validate:"required"`
	// ResourceType: string, required
	ResourceType terra.StringValue `hcl:"resource_type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApigeeEnvReferencesAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_apigee_env_references.
func (gaer googleApigeeEnvReferencesAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gaer.ref.Append("description"))
}

// EnvId returns a reference to field env_id of google_apigee_env_references.
func (gaer googleApigeeEnvReferencesAttributes) EnvId() terra.StringValue {
	return terra.ReferenceAsString(gaer.ref.Append("env_id"))
}

// Id returns a reference to field id of google_apigee_env_references.
func (gaer googleApigeeEnvReferencesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gaer.ref.Append("id"))
}

// Name returns a reference to field name of google_apigee_env_references.
func (gaer googleApigeeEnvReferencesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gaer.ref.Append("name"))
}

// Refers returns a reference to field refers of google_apigee_env_references.
func (gaer googleApigeeEnvReferencesAttributes) Refers() terra.StringValue {
	return terra.ReferenceAsString(gaer.ref.Append("refers"))
}

// ResourceType returns a reference to field resource_type of google_apigee_env_references.
func (gaer googleApigeeEnvReferencesAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(gaer.ref.Append("resource_type"))
}

func (gaer googleApigeeEnvReferencesAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gaer.ref.Append("timeouts"))
}

type googleApigeeEnvReferencesState struct {
	Description  string         `json:"description"`
	EnvId        string         `json:"env_id"`
	Id           string         `json:"id"`
	Name         string         `json:"name"`
	Refers       string         `json:"refers"`
	ResourceType string         `json:"resource_type"`
	Timeouts     *TimeoutsState `json:"timeouts"`
}
