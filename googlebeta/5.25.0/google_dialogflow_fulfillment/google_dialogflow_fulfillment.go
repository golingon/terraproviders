// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dialogflow_fulfillment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dialogflow_fulfillment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDialogflowFulfillmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdf *Resource) Type() string {
	return "google_dialogflow_fulfillment"
}

// LocalName returns the local name for [Resource].
func (gdf *Resource) LocalName() string {
	return gdf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdf *Resource) Configuration() interface{} {
	return gdf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdf *Resource) Dependencies() terra.Dependencies {
	return gdf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdf *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdf *Resource) Attributes() googleDialogflowFulfillmentAttributes {
	return googleDialogflowFulfillmentAttributes{ref: terra.ReferenceResource(gdf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdf *Resource) ImportState(state io.Reader) error {
	gdf.state = &googleDialogflowFulfillmentState{}
	if err := json.NewDecoder(state).Decode(gdf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdf.Type(), gdf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdf *Resource) State() (*googleDialogflowFulfillmentState, bool) {
	return gdf.state, gdf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdf *Resource) StateMust() *googleDialogflowFulfillmentState {
	if gdf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdf.Type(), gdf.LocalName()))
	}
	return gdf.state
}

// Args contains the configurations for google_dialogflow_fulfillment.
type Args struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Features: min=0
	Features []Features `hcl:"features,block" validate:"min=0"`
	// GenericWebService: optional
	GenericWebService *GenericWebService `hcl:"generic_web_service,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDialogflowFulfillmentAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of google_dialogflow_fulfillment.
func (gdf googleDialogflowFulfillmentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdf.ref.Append("display_name"))
}

// Enabled returns a reference to field enabled of google_dialogflow_fulfillment.
func (gdf googleDialogflowFulfillmentAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gdf.ref.Append("enabled"))
}

// Id returns a reference to field id of google_dialogflow_fulfillment.
func (gdf googleDialogflowFulfillmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdf.ref.Append("id"))
}

// Name returns a reference to field name of google_dialogflow_fulfillment.
func (gdf googleDialogflowFulfillmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdf.ref.Append("name"))
}

// Project returns a reference to field project of google_dialogflow_fulfillment.
func (gdf googleDialogflowFulfillmentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdf.ref.Append("project"))
}

func (gdf googleDialogflowFulfillmentAttributes) Features() terra.ListValue[FeaturesAttributes] {
	return terra.ReferenceAsList[FeaturesAttributes](gdf.ref.Append("features"))
}

func (gdf googleDialogflowFulfillmentAttributes) GenericWebService() terra.ListValue[GenericWebServiceAttributes] {
	return terra.ReferenceAsList[GenericWebServiceAttributes](gdf.ref.Append("generic_web_service"))
}

func (gdf googleDialogflowFulfillmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdf.ref.Append("timeouts"))
}

type googleDialogflowFulfillmentState struct {
	DisplayName       string                   `json:"display_name"`
	Enabled           bool                     `json:"enabled"`
	Id                string                   `json:"id"`
	Name              string                   `json:"name"`
	Project           string                   `json:"project"`
	Features          []FeaturesState          `json:"features"`
	GenericWebService []GenericWebServiceState `json:"generic_web_service"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
