// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataproc_metastore_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dataproc_metastore_service.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataprocMetastoreServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdms *Resource) Type() string {
	return "google_dataproc_metastore_service"
}

// LocalName returns the local name for [Resource].
func (gdms *Resource) LocalName() string {
	return gdms.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdms *Resource) Configuration() interface{} {
	return gdms.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdms *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdms)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdms *Resource) Dependencies() terra.Dependencies {
	return gdms.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdms *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdms.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdms *Resource) Attributes() googleDataprocMetastoreServiceAttributes {
	return googleDataprocMetastoreServiceAttributes{ref: terra.ReferenceResource(gdms)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdms *Resource) ImportState(state io.Reader) error {
	gdms.state = &googleDataprocMetastoreServiceState{}
	if err := json.NewDecoder(state).Decode(gdms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdms.Type(), gdms.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdms *Resource) State() (*googleDataprocMetastoreServiceState, bool) {
	return gdms.state, gdms.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdms *Resource) StateMust() *googleDataprocMetastoreServiceState {
	if gdms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdms.Type(), gdms.LocalName()))
	}
	return gdms.state
}

// Args contains the configurations for google_dataproc_metastore_service.
type Args struct {
	// DatabaseType: string, optional
	DatabaseType terra.StringValue `hcl:"database_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ReleaseChannel: string, optional
	ReleaseChannel terra.StringValue `hcl:"release_channel,attr"`
	// ServiceId: string, required
	ServiceId terra.StringValue `hcl:"service_id,attr" validate:"required"`
	// Tier: string, optional
	Tier terra.StringValue `hcl:"tier,attr"`
	// EncryptionConfig: optional
	EncryptionConfig *EncryptionConfig `hcl:"encryption_config,block"`
	// HiveMetastoreConfig: optional
	HiveMetastoreConfig *HiveMetastoreConfig `hcl:"hive_metastore_config,block"`
	// MaintenanceWindow: optional
	MaintenanceWindow *MaintenanceWindow `hcl:"maintenance_window,block"`
	// MetadataIntegration: optional
	MetadataIntegration *MetadataIntegration `hcl:"metadata_integration,block"`
	// NetworkConfig: optional
	NetworkConfig *NetworkConfig `hcl:"network_config,block"`
	// ScalingConfig: optional
	ScalingConfig *ScalingConfig `hcl:"scaling_config,block"`
	// ScheduledBackup: optional
	ScheduledBackup *ScheduledBackup `hcl:"scheduled_backup,block"`
	// TelemetryConfig: optional
	TelemetryConfig *TelemetryConfig `hcl:"telemetry_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDataprocMetastoreServiceAttributes struct {
	ref terra.Reference
}

// ArtifactGcsUri returns a reference to field artifact_gcs_uri of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) ArtifactGcsUri() terra.StringValue {
	return terra.ReferenceAsString(gdms.ref.Append("artifact_gcs_uri"))
}

// DatabaseType returns a reference to field database_type of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) DatabaseType() terra.StringValue {
	return terra.ReferenceAsString(gdms.ref.Append("database_type"))
}

// EffectiveLabels returns a reference to field effective_labels of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdms.ref.Append("effective_labels"))
}

// EndpointUri returns a reference to field endpoint_uri of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) EndpointUri() terra.StringValue {
	return terra.ReferenceAsString(gdms.ref.Append("endpoint_uri"))
}

// Id returns a reference to field id of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdms.ref.Append("id"))
}

// Labels returns a reference to field labels of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdms.ref.Append("labels"))
}

// Location returns a reference to field location of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gdms.ref.Append("location"))
}

// Name returns a reference to field name of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdms.ref.Append("name"))
}

// Network returns a reference to field network of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gdms.ref.Append("network"))
}

// Port returns a reference to field port of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(gdms.ref.Append("port"))
}

// Project returns a reference to field project of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdms.ref.Append("project"))
}

// ReleaseChannel returns a reference to field release_channel of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) ReleaseChannel() terra.StringValue {
	return terra.ReferenceAsString(gdms.ref.Append("release_channel"))
}

// ServiceId returns a reference to field service_id of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceAsString(gdms.ref.Append("service_id"))
}

// State returns a reference to field state of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gdms.ref.Append("state"))
}

// StateMessage returns a reference to field state_message of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) StateMessage() terra.StringValue {
	return terra.ReferenceAsString(gdms.ref.Append("state_message"))
}

// TerraformLabels returns a reference to field terraform_labels of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdms.ref.Append("terraform_labels"))
}

// Tier returns a reference to field tier of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(gdms.ref.Append("tier"))
}

// Uid returns a reference to field uid of google_dataproc_metastore_service.
func (gdms googleDataprocMetastoreServiceAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gdms.ref.Append("uid"))
}

func (gdms googleDataprocMetastoreServiceAttributes) EncryptionConfig() terra.ListValue[EncryptionConfigAttributes] {
	return terra.ReferenceAsList[EncryptionConfigAttributes](gdms.ref.Append("encryption_config"))
}

func (gdms googleDataprocMetastoreServiceAttributes) HiveMetastoreConfig() terra.ListValue[HiveMetastoreConfigAttributes] {
	return terra.ReferenceAsList[HiveMetastoreConfigAttributes](gdms.ref.Append("hive_metastore_config"))
}

func (gdms googleDataprocMetastoreServiceAttributes) MaintenanceWindow() terra.ListValue[MaintenanceWindowAttributes] {
	return terra.ReferenceAsList[MaintenanceWindowAttributes](gdms.ref.Append("maintenance_window"))
}

func (gdms googleDataprocMetastoreServiceAttributes) MetadataIntegration() terra.ListValue[MetadataIntegrationAttributes] {
	return terra.ReferenceAsList[MetadataIntegrationAttributes](gdms.ref.Append("metadata_integration"))
}

func (gdms googleDataprocMetastoreServiceAttributes) NetworkConfig() terra.ListValue[NetworkConfigAttributes] {
	return terra.ReferenceAsList[NetworkConfigAttributes](gdms.ref.Append("network_config"))
}

func (gdms googleDataprocMetastoreServiceAttributes) ScalingConfig() terra.ListValue[ScalingConfigAttributes] {
	return terra.ReferenceAsList[ScalingConfigAttributes](gdms.ref.Append("scaling_config"))
}

func (gdms googleDataprocMetastoreServiceAttributes) ScheduledBackup() terra.ListValue[ScheduledBackupAttributes] {
	return terra.ReferenceAsList[ScheduledBackupAttributes](gdms.ref.Append("scheduled_backup"))
}

func (gdms googleDataprocMetastoreServiceAttributes) TelemetryConfig() terra.ListValue[TelemetryConfigAttributes] {
	return terra.ReferenceAsList[TelemetryConfigAttributes](gdms.ref.Append("telemetry_config"))
}

func (gdms googleDataprocMetastoreServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdms.ref.Append("timeouts"))
}

type googleDataprocMetastoreServiceState struct {
	ArtifactGcsUri      string                     `json:"artifact_gcs_uri"`
	DatabaseType        string                     `json:"database_type"`
	EffectiveLabels     map[string]string          `json:"effective_labels"`
	EndpointUri         string                     `json:"endpoint_uri"`
	Id                  string                     `json:"id"`
	Labels              map[string]string          `json:"labels"`
	Location            string                     `json:"location"`
	Name                string                     `json:"name"`
	Network             string                     `json:"network"`
	Port                float64                    `json:"port"`
	Project             string                     `json:"project"`
	ReleaseChannel      string                     `json:"release_channel"`
	ServiceId           string                     `json:"service_id"`
	State               string                     `json:"state"`
	StateMessage        string                     `json:"state_message"`
	TerraformLabels     map[string]string          `json:"terraform_labels"`
	Tier                string                     `json:"tier"`
	Uid                 string                     `json:"uid"`
	EncryptionConfig    []EncryptionConfigState    `json:"encryption_config"`
	HiveMetastoreConfig []HiveMetastoreConfigState `json:"hive_metastore_config"`
	MaintenanceWindow   []MaintenanceWindowState   `json:"maintenance_window"`
	MetadataIntegration []MetadataIntegrationState `json:"metadata_integration"`
	NetworkConfig       []NetworkConfigState       `json:"network_config"`
	ScalingConfig       []ScalingConfigState       `json:"scaling_config"`
	ScheduledBackup     []ScheduledBackupState     `json:"scheduled_backup"`
	TelemetryConfig     []TelemetryConfigState     `json:"telemetry_config"`
	Timeouts            *TimeoutsState             `json:"timeouts"`
}
