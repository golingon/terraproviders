// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_reservation_assignment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_reservation_assignment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryReservationAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbra *Resource) Type() string {
	return "google_bigquery_reservation_assignment"
}

// LocalName returns the local name for [Resource].
func (gbra *Resource) LocalName() string {
	return gbra.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbra *Resource) Configuration() interface{} {
	return gbra.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbra *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbra)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbra *Resource) Dependencies() terra.Dependencies {
	return gbra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbra *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbra.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbra *Resource) Attributes() googleBigqueryReservationAssignmentAttributes {
	return googleBigqueryReservationAssignmentAttributes{ref: terra.ReferenceResource(gbra)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbra *Resource) ImportState(state io.Reader) error {
	gbra.state = &googleBigqueryReservationAssignmentState{}
	if err := json.NewDecoder(state).Decode(gbra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbra.Type(), gbra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbra *Resource) State() (*googleBigqueryReservationAssignmentState, bool) {
	return gbra.state, gbra.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbra *Resource) StateMust() *googleBigqueryReservationAssignmentState {
	if gbra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbra.Type(), gbra.LocalName()))
	}
	return gbra.state
}

// Args contains the configurations for google_bigquery_reservation_assignment.
type Args struct {
	// Assignee: string, required
	Assignee terra.StringValue `hcl:"assignee,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// JobType: string, required
	JobType terra.StringValue `hcl:"job_type,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Reservation: string, required
	Reservation terra.StringValue `hcl:"reservation,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBigqueryReservationAssignmentAttributes struct {
	ref terra.Reference
}

// Assignee returns a reference to field assignee of google_bigquery_reservation_assignment.
func (gbra googleBigqueryReservationAssignmentAttributes) Assignee() terra.StringValue {
	return terra.ReferenceAsString(gbra.ref.Append("assignee"))
}

// Id returns a reference to field id of google_bigquery_reservation_assignment.
func (gbra googleBigqueryReservationAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbra.ref.Append("id"))
}

// JobType returns a reference to field job_type of google_bigquery_reservation_assignment.
func (gbra googleBigqueryReservationAssignmentAttributes) JobType() terra.StringValue {
	return terra.ReferenceAsString(gbra.ref.Append("job_type"))
}

// Location returns a reference to field location of google_bigquery_reservation_assignment.
func (gbra googleBigqueryReservationAssignmentAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbra.ref.Append("location"))
}

// Name returns a reference to field name of google_bigquery_reservation_assignment.
func (gbra googleBigqueryReservationAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbra.ref.Append("name"))
}

// Project returns a reference to field project of google_bigquery_reservation_assignment.
func (gbra googleBigqueryReservationAssignmentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbra.ref.Append("project"))
}

// Reservation returns a reference to field reservation of google_bigquery_reservation_assignment.
func (gbra googleBigqueryReservationAssignmentAttributes) Reservation() terra.StringValue {
	return terra.ReferenceAsString(gbra.ref.Append("reservation"))
}

// State returns a reference to field state of google_bigquery_reservation_assignment.
func (gbra googleBigqueryReservationAssignmentAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gbra.ref.Append("state"))
}

func (gbra googleBigqueryReservationAssignmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbra.ref.Append("timeouts"))
}

type googleBigqueryReservationAssignmentState struct {
	Assignee    string         `json:"assignee"`
	Id          string         `json:"id"`
	JobType     string         `json:"job_type"`
	Location    string         `json:"location"`
	Name        string         `json:"name"`
	Project     string         `json:"project"`
	Reservation string         `json:"reservation"`
	State       string         `json:"state"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
