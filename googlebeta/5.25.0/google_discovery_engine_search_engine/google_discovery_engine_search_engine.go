// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_discovery_engine_search_engine

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_discovery_engine_search_engine.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDiscoveryEngineSearchEngineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdese *Resource) Type() string {
	return "google_discovery_engine_search_engine"
}

// LocalName returns the local name for [Resource].
func (gdese *Resource) LocalName() string {
	return gdese.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdese *Resource) Configuration() interface{} {
	return gdese.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdese *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdese)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdese *Resource) Dependencies() terra.Dependencies {
	return gdese.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdese *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdese.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdese *Resource) Attributes() googleDiscoveryEngineSearchEngineAttributes {
	return googleDiscoveryEngineSearchEngineAttributes{ref: terra.ReferenceResource(gdese)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdese *Resource) ImportState(state io.Reader) error {
	gdese.state = &googleDiscoveryEngineSearchEngineState{}
	if err := json.NewDecoder(state).Decode(gdese.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdese.Type(), gdese.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdese *Resource) State() (*googleDiscoveryEngineSearchEngineState, bool) {
	return gdese.state, gdese.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdese *Resource) StateMust() *googleDiscoveryEngineSearchEngineState {
	if gdese.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdese.Type(), gdese.LocalName()))
	}
	return gdese.state
}

// Args contains the configurations for google_discovery_engine_search_engine.
type Args struct {
	// CollectionId: string, required
	CollectionId terra.StringValue `hcl:"collection_id,attr" validate:"required"`
	// DataStoreIds: list of string, required
	DataStoreIds terra.ListValue[terra.StringValue] `hcl:"data_store_ids,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// EngineId: string, required
	EngineId terra.StringValue `hcl:"engine_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IndustryVertical: string, optional
	IndustryVertical terra.StringValue `hcl:"industry_vertical,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// CommonConfig: optional
	CommonConfig *CommonConfig `hcl:"common_config,block"`
	// SearchEngineConfig: required
	SearchEngineConfig *SearchEngineConfig `hcl:"search_engine_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDiscoveryEngineSearchEngineAttributes struct {
	ref terra.Reference
}

// CollectionId returns a reference to field collection_id of google_discovery_engine_search_engine.
func (gdese googleDiscoveryEngineSearchEngineAttributes) CollectionId() terra.StringValue {
	return terra.ReferenceAsString(gdese.ref.Append("collection_id"))
}

// CreateTime returns a reference to field create_time of google_discovery_engine_search_engine.
func (gdese googleDiscoveryEngineSearchEngineAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gdese.ref.Append("create_time"))
}

// DataStoreIds returns a reference to field data_store_ids of google_discovery_engine_search_engine.
func (gdese googleDiscoveryEngineSearchEngineAttributes) DataStoreIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gdese.ref.Append("data_store_ids"))
}

// DisplayName returns a reference to field display_name of google_discovery_engine_search_engine.
func (gdese googleDiscoveryEngineSearchEngineAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdese.ref.Append("display_name"))
}

// EngineId returns a reference to field engine_id of google_discovery_engine_search_engine.
func (gdese googleDiscoveryEngineSearchEngineAttributes) EngineId() terra.StringValue {
	return terra.ReferenceAsString(gdese.ref.Append("engine_id"))
}

// Id returns a reference to field id of google_discovery_engine_search_engine.
func (gdese googleDiscoveryEngineSearchEngineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdese.ref.Append("id"))
}

// IndustryVertical returns a reference to field industry_vertical of google_discovery_engine_search_engine.
func (gdese googleDiscoveryEngineSearchEngineAttributes) IndustryVertical() terra.StringValue {
	return terra.ReferenceAsString(gdese.ref.Append("industry_vertical"))
}

// Location returns a reference to field location of google_discovery_engine_search_engine.
func (gdese googleDiscoveryEngineSearchEngineAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gdese.ref.Append("location"))
}

// Name returns a reference to field name of google_discovery_engine_search_engine.
func (gdese googleDiscoveryEngineSearchEngineAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdese.ref.Append("name"))
}

// Project returns a reference to field project of google_discovery_engine_search_engine.
func (gdese googleDiscoveryEngineSearchEngineAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdese.ref.Append("project"))
}

// UpdateTime returns a reference to field update_time of google_discovery_engine_search_engine.
func (gdese googleDiscoveryEngineSearchEngineAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gdese.ref.Append("update_time"))
}

func (gdese googleDiscoveryEngineSearchEngineAttributes) CommonConfig() terra.ListValue[CommonConfigAttributes] {
	return terra.ReferenceAsList[CommonConfigAttributes](gdese.ref.Append("common_config"))
}

func (gdese googleDiscoveryEngineSearchEngineAttributes) SearchEngineConfig() terra.ListValue[SearchEngineConfigAttributes] {
	return terra.ReferenceAsList[SearchEngineConfigAttributes](gdese.ref.Append("search_engine_config"))
}

func (gdese googleDiscoveryEngineSearchEngineAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdese.ref.Append("timeouts"))
}

type googleDiscoveryEngineSearchEngineState struct {
	CollectionId       string                    `json:"collection_id"`
	CreateTime         string                    `json:"create_time"`
	DataStoreIds       []string                  `json:"data_store_ids"`
	DisplayName        string                    `json:"display_name"`
	EngineId           string                    `json:"engine_id"`
	Id                 string                    `json:"id"`
	IndustryVertical   string                    `json:"industry_vertical"`
	Location           string                    `json:"location"`
	Name               string                    `json:"name"`
	Project            string                    `json:"project"`
	UpdateTime         string                    `json:"update_time"`
	CommonConfig       []CommonConfigState       `json:"common_config"`
	SearchEngineConfig []SearchEngineConfigState `json:"search_engine_config"`
	Timeouts           *TimeoutsState            `json:"timeouts"`
}
