// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firebase_hosting_release

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firebase_hosting_release.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirebaseHostingReleaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfhr *Resource) Type() string {
	return "google_firebase_hosting_release"
}

// LocalName returns the local name for [Resource].
func (gfhr *Resource) LocalName() string {
	return gfhr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfhr *Resource) Configuration() interface{} {
	return gfhr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfhr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfhr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfhr *Resource) Dependencies() terra.Dependencies {
	return gfhr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfhr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfhr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfhr *Resource) Attributes() googleFirebaseHostingReleaseAttributes {
	return googleFirebaseHostingReleaseAttributes{ref: terra.ReferenceResource(gfhr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfhr *Resource) ImportState(state io.Reader) error {
	gfhr.state = &googleFirebaseHostingReleaseState{}
	if err := json.NewDecoder(state).Decode(gfhr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfhr.Type(), gfhr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfhr *Resource) State() (*googleFirebaseHostingReleaseState, bool) {
	return gfhr.state, gfhr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfhr *Resource) StateMust() *googleFirebaseHostingReleaseState {
	if gfhr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfhr.Type(), gfhr.LocalName()))
	}
	return gfhr.state
}

// Args contains the configurations for google_firebase_hosting_release.
type Args struct {
	// ChannelId: string, optional
	ChannelId terra.StringValue `hcl:"channel_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Message: string, optional
	Message terra.StringValue `hcl:"message,attr"`
	// SiteId: string, required
	SiteId terra.StringValue `hcl:"site_id,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// VersionName: string, optional
	VersionName terra.StringValue `hcl:"version_name,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirebaseHostingReleaseAttributes struct {
	ref terra.Reference
}

// ChannelId returns a reference to field channel_id of google_firebase_hosting_release.
func (gfhr googleFirebaseHostingReleaseAttributes) ChannelId() terra.StringValue {
	return terra.ReferenceAsString(gfhr.ref.Append("channel_id"))
}

// Id returns a reference to field id of google_firebase_hosting_release.
func (gfhr googleFirebaseHostingReleaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfhr.ref.Append("id"))
}

// Message returns a reference to field message of google_firebase_hosting_release.
func (gfhr googleFirebaseHostingReleaseAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(gfhr.ref.Append("message"))
}

// Name returns a reference to field name of google_firebase_hosting_release.
func (gfhr googleFirebaseHostingReleaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfhr.ref.Append("name"))
}

// ReleaseId returns a reference to field release_id of google_firebase_hosting_release.
func (gfhr googleFirebaseHostingReleaseAttributes) ReleaseId() terra.StringValue {
	return terra.ReferenceAsString(gfhr.ref.Append("release_id"))
}

// SiteId returns a reference to field site_id of google_firebase_hosting_release.
func (gfhr googleFirebaseHostingReleaseAttributes) SiteId() terra.StringValue {
	return terra.ReferenceAsString(gfhr.ref.Append("site_id"))
}

// Type returns a reference to field type of google_firebase_hosting_release.
func (gfhr googleFirebaseHostingReleaseAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gfhr.ref.Append("type"))
}

// VersionName returns a reference to field version_name of google_firebase_hosting_release.
func (gfhr googleFirebaseHostingReleaseAttributes) VersionName() terra.StringValue {
	return terra.ReferenceAsString(gfhr.ref.Append("version_name"))
}

func (gfhr googleFirebaseHostingReleaseAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfhr.ref.Append("timeouts"))
}

type googleFirebaseHostingReleaseState struct {
	ChannelId   string         `json:"channel_id"`
	Id          string         `json:"id"`
	Message     string         `json:"message"`
	Name        string         `json:"name"`
	ReleaseId   string         `json:"release_id"`
	SiteId      string         `json:"site_id"`
	Type        string         `json:"type"`
	VersionName string         `json:"version_name"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
