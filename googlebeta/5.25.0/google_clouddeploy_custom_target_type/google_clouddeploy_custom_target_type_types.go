// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_clouddeploy_custom_target_type

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CustomActions struct {
	// DeployAction: string, required
	DeployAction terra.StringValue `hcl:"deploy_action,attr" validate:"required"`
	// RenderAction: string, optional
	RenderAction terra.StringValue `hcl:"render_action,attr"`
	// CustomActionsIncludeSkaffoldModules: min=0
	IncludeSkaffoldModules []CustomActionsIncludeSkaffoldModules `hcl:"include_skaffold_modules,block" validate:"min=0"`
}

type CustomActionsIncludeSkaffoldModules struct {
	// Configs: list of string, optional
	Configs terra.ListValue[terra.StringValue] `hcl:"configs,attr"`
	// CustomActionsIncludeSkaffoldModulesGit: optional
	Git *CustomActionsIncludeSkaffoldModulesGit `hcl:"git,block"`
	// CustomActionsIncludeSkaffoldModulesGoogleCloudStorage: optional
	GoogleCloudStorage *CustomActionsIncludeSkaffoldModulesGoogleCloudStorage `hcl:"google_cloud_storage,block"`
}

type CustomActionsIncludeSkaffoldModulesGit struct {
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Ref: string, optional
	Ref terra.StringValue `hcl:"ref,attr"`
	// Repo: string, required
	Repo terra.StringValue `hcl:"repo,attr" validate:"required"`
}

type CustomActionsIncludeSkaffoldModulesGoogleCloudStorage struct {
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CustomActionsAttributes struct {
	ref terra.Reference
}

func (ca CustomActionsAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca CustomActionsAttributes) InternalWithRef(ref terra.Reference) CustomActionsAttributes {
	return CustomActionsAttributes{ref: ref}
}

func (ca CustomActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca CustomActionsAttributes) DeployAction() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("deploy_action"))
}

func (ca CustomActionsAttributes) RenderAction() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("render_action"))
}

func (ca CustomActionsAttributes) IncludeSkaffoldModules() terra.ListValue[CustomActionsIncludeSkaffoldModulesAttributes] {
	return terra.ReferenceAsList[CustomActionsIncludeSkaffoldModulesAttributes](ca.ref.Append("include_skaffold_modules"))
}

type CustomActionsIncludeSkaffoldModulesAttributes struct {
	ref terra.Reference
}

func (ism CustomActionsIncludeSkaffoldModulesAttributes) InternalRef() (terra.Reference, error) {
	return ism.ref, nil
}

func (ism CustomActionsIncludeSkaffoldModulesAttributes) InternalWithRef(ref terra.Reference) CustomActionsIncludeSkaffoldModulesAttributes {
	return CustomActionsIncludeSkaffoldModulesAttributes{ref: ref}
}

func (ism CustomActionsIncludeSkaffoldModulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ism.ref.InternalTokens()
}

func (ism CustomActionsIncludeSkaffoldModulesAttributes) Configs() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ism.ref.Append("configs"))
}

func (ism CustomActionsIncludeSkaffoldModulesAttributes) Git() terra.ListValue[CustomActionsIncludeSkaffoldModulesGitAttributes] {
	return terra.ReferenceAsList[CustomActionsIncludeSkaffoldModulesGitAttributes](ism.ref.Append("git"))
}

func (ism CustomActionsIncludeSkaffoldModulesAttributes) GoogleCloudStorage() terra.ListValue[CustomActionsIncludeSkaffoldModulesGoogleCloudStorageAttributes] {
	return terra.ReferenceAsList[CustomActionsIncludeSkaffoldModulesGoogleCloudStorageAttributes](ism.ref.Append("google_cloud_storage"))
}

type CustomActionsIncludeSkaffoldModulesGitAttributes struct {
	ref terra.Reference
}

func (g CustomActionsIncludeSkaffoldModulesGitAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g CustomActionsIncludeSkaffoldModulesGitAttributes) InternalWithRef(ref terra.Reference) CustomActionsIncludeSkaffoldModulesGitAttributes {
	return CustomActionsIncludeSkaffoldModulesGitAttributes{ref: ref}
}

func (g CustomActionsIncludeSkaffoldModulesGitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g CustomActionsIncludeSkaffoldModulesGitAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("path"))
}

func (g CustomActionsIncludeSkaffoldModulesGitAttributes) Ref() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("ref"))
}

func (g CustomActionsIncludeSkaffoldModulesGitAttributes) Repo() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("repo"))
}

type CustomActionsIncludeSkaffoldModulesGoogleCloudStorageAttributes struct {
	ref terra.Reference
}

func (gcs CustomActionsIncludeSkaffoldModulesGoogleCloudStorageAttributes) InternalRef() (terra.Reference, error) {
	return gcs.ref, nil
}

func (gcs CustomActionsIncludeSkaffoldModulesGoogleCloudStorageAttributes) InternalWithRef(ref terra.Reference) CustomActionsIncludeSkaffoldModulesGoogleCloudStorageAttributes {
	return CustomActionsIncludeSkaffoldModulesGoogleCloudStorageAttributes{ref: ref}
}

func (gcs CustomActionsIncludeSkaffoldModulesGoogleCloudStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gcs.ref.InternalTokens()
}

func (gcs CustomActionsIncludeSkaffoldModulesGoogleCloudStorageAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("path"))
}

func (gcs CustomActionsIncludeSkaffoldModulesGoogleCloudStorageAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("source"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CustomActionsState struct {
	DeployAction           string                                     `json:"deploy_action"`
	RenderAction           string                                     `json:"render_action"`
	IncludeSkaffoldModules []CustomActionsIncludeSkaffoldModulesState `json:"include_skaffold_modules"`
}

type CustomActionsIncludeSkaffoldModulesState struct {
	Configs            []string                                                     `json:"configs"`
	Git                []CustomActionsIncludeSkaffoldModulesGitState                `json:"git"`
	GoogleCloudStorage []CustomActionsIncludeSkaffoldModulesGoogleCloudStorageState `json:"google_cloud_storage"`
}

type CustomActionsIncludeSkaffoldModulesGitState struct {
	Path string `json:"path"`
	Ref  string `json:"ref"`
	Repo string `json:"repo"`
}

type CustomActionsIncludeSkaffoldModulesGoogleCloudStorageState struct {
	Path   string `json:"path"`
	Source string `json:"source"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
