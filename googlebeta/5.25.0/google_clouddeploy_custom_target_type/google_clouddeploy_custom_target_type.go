// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_clouddeploy_custom_target_type

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_clouddeploy_custom_target_type.
type Resource struct {
	Name      string
	Args      Args
	state     *googleClouddeployCustomTargetTypeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcctt *Resource) Type() string {
	return "google_clouddeploy_custom_target_type"
}

// LocalName returns the local name for [Resource].
func (gcctt *Resource) LocalName() string {
	return gcctt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcctt *Resource) Configuration() interface{} {
	return gcctt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcctt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcctt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcctt *Resource) Dependencies() terra.Dependencies {
	return gcctt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcctt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcctt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcctt *Resource) Attributes() googleClouddeployCustomTargetTypeAttributes {
	return googleClouddeployCustomTargetTypeAttributes{ref: terra.ReferenceResource(gcctt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcctt *Resource) ImportState(state io.Reader) error {
	gcctt.state = &googleClouddeployCustomTargetTypeState{}
	if err := json.NewDecoder(state).Decode(gcctt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcctt.Type(), gcctt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcctt *Resource) State() (*googleClouddeployCustomTargetTypeState, bool) {
	return gcctt.state, gcctt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcctt *Resource) StateMust() *googleClouddeployCustomTargetTypeState {
	if gcctt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcctt.Type(), gcctt.LocalName()))
	}
	return gcctt.state
}

// Args contains the configurations for google_clouddeploy_custom_target_type.
type Args struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// CustomActions: optional
	CustomActions *CustomActions `hcl:"custom_actions,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleClouddeployCustomTargetTypeAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcctt.ref.Append("annotations"))
}

// CreateTime returns a reference to field create_time of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcctt.ref.Append("create_time"))
}

// CustomTargetTypeId returns a reference to field custom_target_type_id of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) CustomTargetTypeId() terra.StringValue {
	return terra.ReferenceAsString(gcctt.ref.Append("custom_target_type_id"))
}

// Description returns a reference to field description of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcctt.ref.Append("description"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcctt.ref.Append("effective_annotations"))
}

// EffectiveLabels returns a reference to field effective_labels of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcctt.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gcctt.ref.Append("etag"))
}

// Id returns a reference to field id of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcctt.ref.Append("id"))
}

// Labels returns a reference to field labels of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcctt.ref.Append("labels"))
}

// Location returns a reference to field location of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcctt.ref.Append("location"))
}

// Name returns a reference to field name of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcctt.ref.Append("name"))
}

// Project returns a reference to field project of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcctt.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcctt.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gcctt.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_clouddeploy_custom_target_type.
func (gcctt googleClouddeployCustomTargetTypeAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gcctt.ref.Append("update_time"))
}

func (gcctt googleClouddeployCustomTargetTypeAttributes) CustomActions() terra.ListValue[CustomActionsAttributes] {
	return terra.ReferenceAsList[CustomActionsAttributes](gcctt.ref.Append("custom_actions"))
}

func (gcctt googleClouddeployCustomTargetTypeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcctt.ref.Append("timeouts"))
}

type googleClouddeployCustomTargetTypeState struct {
	Annotations          map[string]string    `json:"annotations"`
	CreateTime           string               `json:"create_time"`
	CustomTargetTypeId   string               `json:"custom_target_type_id"`
	Description          string               `json:"description"`
	EffectiveAnnotations map[string]string    `json:"effective_annotations"`
	EffectiveLabels      map[string]string    `json:"effective_labels"`
	Etag                 string               `json:"etag"`
	Id                   string               `json:"id"`
	Labels               map[string]string    `json:"labels"`
	Location             string               `json:"location"`
	Name                 string               `json:"name"`
	Project              string               `json:"project"`
	TerraformLabels      map[string]string    `json:"terraform_labels"`
	Uid                  string               `json:"uid"`
	UpdateTime           string               `json:"update_time"`
	CustomActions        []CustomActionsState `json:"custom_actions"`
	Timeouts             *TimeoutsState       `json:"timeouts"`
}
