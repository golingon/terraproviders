// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_security_scanner_scan_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_security_scanner_scan_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleSecurityScannerScanConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsssc *Resource) Type() string {
	return "google_security_scanner_scan_config"
}

// LocalName returns the local name for [Resource].
func (gsssc *Resource) LocalName() string {
	return gsssc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsssc *Resource) Configuration() interface{} {
	return gsssc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsssc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsssc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsssc *Resource) Dependencies() terra.Dependencies {
	return gsssc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsssc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsssc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsssc *Resource) Attributes() googleSecurityScannerScanConfigAttributes {
	return googleSecurityScannerScanConfigAttributes{ref: terra.ReferenceResource(gsssc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsssc *Resource) ImportState(state io.Reader) error {
	gsssc.state = &googleSecurityScannerScanConfigState{}
	if err := json.NewDecoder(state).Decode(gsssc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsssc.Type(), gsssc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsssc *Resource) State() (*googleSecurityScannerScanConfigState, bool) {
	return gsssc.state, gsssc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsssc *Resource) StateMust() *googleSecurityScannerScanConfigState {
	if gsssc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsssc.Type(), gsssc.LocalName()))
	}
	return gsssc.state
}

// Args contains the configurations for google_security_scanner_scan_config.
type Args struct {
	// BlacklistPatterns: list of string, optional
	BlacklistPatterns terra.ListValue[terra.StringValue] `hcl:"blacklist_patterns,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// ExportToSecurityCommandCenter: string, optional
	ExportToSecurityCommandCenter terra.StringValue `hcl:"export_to_security_command_center,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxQps: number, optional
	MaxQps terra.NumberValue `hcl:"max_qps,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// StartingUrls: list of string, required
	StartingUrls terra.ListValue[terra.StringValue] `hcl:"starting_urls,attr" validate:"required"`
	// TargetPlatforms: list of string, optional
	TargetPlatforms terra.ListValue[terra.StringValue] `hcl:"target_platforms,attr"`
	// UserAgent: string, optional
	UserAgent terra.StringValue `hcl:"user_agent,attr"`
	// Authentication: optional
	Authentication *Authentication `hcl:"authentication,block"`
	// Schedule: optional
	Schedule *Schedule `hcl:"schedule,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleSecurityScannerScanConfigAttributes struct {
	ref terra.Reference
}

// BlacklistPatterns returns a reference to field blacklist_patterns of google_security_scanner_scan_config.
func (gsssc googleSecurityScannerScanConfigAttributes) BlacklistPatterns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gsssc.ref.Append("blacklist_patterns"))
}

// DisplayName returns a reference to field display_name of google_security_scanner_scan_config.
func (gsssc googleSecurityScannerScanConfigAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gsssc.ref.Append("display_name"))
}

// ExportToSecurityCommandCenter returns a reference to field export_to_security_command_center of google_security_scanner_scan_config.
func (gsssc googleSecurityScannerScanConfigAttributes) ExportToSecurityCommandCenter() terra.StringValue {
	return terra.ReferenceAsString(gsssc.ref.Append("export_to_security_command_center"))
}

// Id returns a reference to field id of google_security_scanner_scan_config.
func (gsssc googleSecurityScannerScanConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsssc.ref.Append("id"))
}

// MaxQps returns a reference to field max_qps of google_security_scanner_scan_config.
func (gsssc googleSecurityScannerScanConfigAttributes) MaxQps() terra.NumberValue {
	return terra.ReferenceAsNumber(gsssc.ref.Append("max_qps"))
}

// Name returns a reference to field name of google_security_scanner_scan_config.
func (gsssc googleSecurityScannerScanConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsssc.ref.Append("name"))
}

// Project returns a reference to field project of google_security_scanner_scan_config.
func (gsssc googleSecurityScannerScanConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gsssc.ref.Append("project"))
}

// StartingUrls returns a reference to field starting_urls of google_security_scanner_scan_config.
func (gsssc googleSecurityScannerScanConfigAttributes) StartingUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gsssc.ref.Append("starting_urls"))
}

// TargetPlatforms returns a reference to field target_platforms of google_security_scanner_scan_config.
func (gsssc googleSecurityScannerScanConfigAttributes) TargetPlatforms() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gsssc.ref.Append("target_platforms"))
}

// UserAgent returns a reference to field user_agent of google_security_scanner_scan_config.
func (gsssc googleSecurityScannerScanConfigAttributes) UserAgent() terra.StringValue {
	return terra.ReferenceAsString(gsssc.ref.Append("user_agent"))
}

func (gsssc googleSecurityScannerScanConfigAttributes) Authentication() terra.ListValue[AuthenticationAttributes] {
	return terra.ReferenceAsList[AuthenticationAttributes](gsssc.ref.Append("authentication"))
}

func (gsssc googleSecurityScannerScanConfigAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](gsssc.ref.Append("schedule"))
}

func (gsssc googleSecurityScannerScanConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsssc.ref.Append("timeouts"))
}

type googleSecurityScannerScanConfigState struct {
	BlacklistPatterns             []string              `json:"blacklist_patterns"`
	DisplayName                   string                `json:"display_name"`
	ExportToSecurityCommandCenter string                `json:"export_to_security_command_center"`
	Id                            string                `json:"id"`
	MaxQps                        float64               `json:"max_qps"`
	Name                          string                `json:"name"`
	Project                       string                `json:"project"`
	StartingUrls                  []string              `json:"starting_urls"`
	TargetPlatforms               []string              `json:"target_platforms"`
	UserAgent                     string                `json:"user_agent"`
	Authentication                []AuthenticationState `json:"authentication"`
	Schedule                      []ScheduleState       `json:"schedule"`
	Timeouts                      *TimeoutsState        `json:"timeouts"`
}
