// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_pubsub_lite_subscription

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_pubsub_lite_subscription.
type Resource struct {
	Name      string
	Args      Args
	state     *googlePubsubLiteSubscriptionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gpls *Resource) Type() string {
	return "google_pubsub_lite_subscription"
}

// LocalName returns the local name for [Resource].
func (gpls *Resource) LocalName() string {
	return gpls.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gpls *Resource) Configuration() interface{} {
	return gpls.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gpls *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gpls)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gpls *Resource) Dependencies() terra.Dependencies {
	return gpls.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gpls *Resource) LifecycleManagement() *terra.Lifecycle {
	return gpls.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gpls *Resource) Attributes() googlePubsubLiteSubscriptionAttributes {
	return googlePubsubLiteSubscriptionAttributes{ref: terra.ReferenceResource(gpls)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gpls *Resource) ImportState(state io.Reader) error {
	gpls.state = &googlePubsubLiteSubscriptionState{}
	if err := json.NewDecoder(state).Decode(gpls.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gpls.Type(), gpls.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gpls *Resource) State() (*googlePubsubLiteSubscriptionState, bool) {
	return gpls.state, gpls.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gpls *Resource) StateMust() *googlePubsubLiteSubscriptionState {
	if gpls.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gpls.Type(), gpls.LocalName()))
	}
	return gpls.state
}

// Args contains the configurations for google_pubsub_lite_subscription.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// DeliveryConfig: optional
	DeliveryConfig *DeliveryConfig `hcl:"delivery_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googlePubsubLiteSubscriptionAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_pubsub_lite_subscription.
func (gpls googlePubsubLiteSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gpls.ref.Append("id"))
}

// Name returns a reference to field name of google_pubsub_lite_subscription.
func (gpls googlePubsubLiteSubscriptionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gpls.ref.Append("name"))
}

// Project returns a reference to field project of google_pubsub_lite_subscription.
func (gpls googlePubsubLiteSubscriptionAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gpls.ref.Append("project"))
}

// Region returns a reference to field region of google_pubsub_lite_subscription.
func (gpls googlePubsubLiteSubscriptionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gpls.ref.Append("region"))
}

// Topic returns a reference to field topic of google_pubsub_lite_subscription.
func (gpls googlePubsubLiteSubscriptionAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(gpls.ref.Append("topic"))
}

// Zone returns a reference to field zone of google_pubsub_lite_subscription.
func (gpls googlePubsubLiteSubscriptionAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gpls.ref.Append("zone"))
}

func (gpls googlePubsubLiteSubscriptionAttributes) DeliveryConfig() terra.ListValue[DeliveryConfigAttributes] {
	return terra.ReferenceAsList[DeliveryConfigAttributes](gpls.ref.Append("delivery_config"))
}

func (gpls googlePubsubLiteSubscriptionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gpls.ref.Append("timeouts"))
}

type googlePubsubLiteSubscriptionState struct {
	Id             string                `json:"id"`
	Name           string                `json:"name"`
	Project        string                `json:"project"`
	Region         string                `json:"region"`
	Topic          string                `json:"topic"`
	Zone           string                `json:"zone"`
	DeliveryConfig []DeliveryConfigState `json:"delivery_config"`
	Timeouts       *TimeoutsState        `json:"timeouts"`
}
