// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_instance_group_manager

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataAllInstancesConfigAttributes struct {
	ref terra.Reference
}

func (aic DataAllInstancesConfigAttributes) InternalRef() (terra.Reference, error) {
	return aic.ref, nil
}

func (aic DataAllInstancesConfigAttributes) InternalWithRef(ref terra.Reference) DataAllInstancesConfigAttributes {
	return DataAllInstancesConfigAttributes{ref: ref}
}

func (aic DataAllInstancesConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aic.ref.InternalTokens()
}

func (aic DataAllInstancesConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aic.ref.Append("labels"))
}

func (aic DataAllInstancesConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aic.ref.Append("metadata"))
}

type DataAutoHealingPoliciesAttributes struct {
	ref terra.Reference
}

func (ahp DataAutoHealingPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return ahp.ref, nil
}

func (ahp DataAutoHealingPoliciesAttributes) InternalWithRef(ref terra.Reference) DataAutoHealingPoliciesAttributes {
	return DataAutoHealingPoliciesAttributes{ref: ref}
}

func (ahp DataAutoHealingPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ahp.ref.InternalTokens()
}

func (ahp DataAutoHealingPoliciesAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(ahp.ref.Append("health_check"))
}

func (ahp DataAutoHealingPoliciesAttributes) InitialDelaySec() terra.NumberValue {
	return terra.ReferenceAsNumber(ahp.ref.Append("initial_delay_sec"))
}

type DataInstanceLifecyclePolicyAttributes struct {
	ref terra.Reference
}

func (ilp DataInstanceLifecyclePolicyAttributes) InternalRef() (terra.Reference, error) {
	return ilp.ref, nil
}

func (ilp DataInstanceLifecyclePolicyAttributes) InternalWithRef(ref terra.Reference) DataInstanceLifecyclePolicyAttributes {
	return DataInstanceLifecyclePolicyAttributes{ref: ref}
}

func (ilp DataInstanceLifecyclePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ilp.ref.InternalTokens()
}

func (ilp DataInstanceLifecyclePolicyAttributes) DefaultActionOnFailure() terra.StringValue {
	return terra.ReferenceAsString(ilp.ref.Append("default_action_on_failure"))
}

func (ilp DataInstanceLifecyclePolicyAttributes) ForceUpdateOnRepair() terra.StringValue {
	return terra.ReferenceAsString(ilp.ref.Append("force_update_on_repair"))
}

type DataNamedPortAttributes struct {
	ref terra.Reference
}

func (np DataNamedPortAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np DataNamedPortAttributes) InternalWithRef(ref terra.Reference) DataNamedPortAttributes {
	return DataNamedPortAttributes{ref: ref}
}

func (np DataNamedPortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np DataNamedPortAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("name"))
}

func (np DataNamedPortAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("port"))
}

type DataStatefulDiskAttributes struct {
	ref terra.Reference
}

func (sd DataStatefulDiskAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd DataStatefulDiskAttributes) InternalWithRef(ref terra.Reference) DataStatefulDiskAttributes {
	return DataStatefulDiskAttributes{ref: ref}
}

func (sd DataStatefulDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd DataStatefulDiskAttributes) DeleteRule() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("delete_rule"))
}

func (sd DataStatefulDiskAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("device_name"))
}

type DataStatefulExternalIpAttributes struct {
	ref terra.Reference
}

func (sei DataStatefulExternalIpAttributes) InternalRef() (terra.Reference, error) {
	return sei.ref, nil
}

func (sei DataStatefulExternalIpAttributes) InternalWithRef(ref terra.Reference) DataStatefulExternalIpAttributes {
	return DataStatefulExternalIpAttributes{ref: ref}
}

func (sei DataStatefulExternalIpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sei.ref.InternalTokens()
}

func (sei DataStatefulExternalIpAttributes) DeleteRule() terra.StringValue {
	return terra.ReferenceAsString(sei.ref.Append("delete_rule"))
}

func (sei DataStatefulExternalIpAttributes) InterfaceName() terra.StringValue {
	return terra.ReferenceAsString(sei.ref.Append("interface_name"))
}

type DataStatefulInternalIpAttributes struct {
	ref terra.Reference
}

func (sii DataStatefulInternalIpAttributes) InternalRef() (terra.Reference, error) {
	return sii.ref, nil
}

func (sii DataStatefulInternalIpAttributes) InternalWithRef(ref terra.Reference) DataStatefulInternalIpAttributes {
	return DataStatefulInternalIpAttributes{ref: ref}
}

func (sii DataStatefulInternalIpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sii.ref.InternalTokens()
}

func (sii DataStatefulInternalIpAttributes) DeleteRule() terra.StringValue {
	return terra.ReferenceAsString(sii.ref.Append("delete_rule"))
}

func (sii DataStatefulInternalIpAttributes) InterfaceName() terra.StringValue {
	return terra.ReferenceAsString(sii.ref.Append("interface_name"))
}

type DataStatusAttributes struct {
	ref terra.Reference
}

func (s DataStatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataStatusAttributes) InternalWithRef(ref terra.Reference) DataStatusAttributes {
	return DataStatusAttributes{ref: ref}
}

func (s DataStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataStatusAttributes) IsStable() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("is_stable"))
}

func (s DataStatusAttributes) AllInstancesConfig() terra.ListValue[DataStatusAllInstancesConfigAttributes] {
	return terra.ReferenceAsList[DataStatusAllInstancesConfigAttributes](s.ref.Append("all_instances_config"))
}

func (s DataStatusAttributes) Stateful() terra.ListValue[DataStatusStatefulAttributes] {
	return terra.ReferenceAsList[DataStatusStatefulAttributes](s.ref.Append("stateful"))
}

func (s DataStatusAttributes) VersionTarget() terra.ListValue[DataStatusVersionTargetAttributes] {
	return terra.ReferenceAsList[DataStatusVersionTargetAttributes](s.ref.Append("version_target"))
}

type DataStatusAllInstancesConfigAttributes struct {
	ref terra.Reference
}

func (aic DataStatusAllInstancesConfigAttributes) InternalRef() (terra.Reference, error) {
	return aic.ref, nil
}

func (aic DataStatusAllInstancesConfigAttributes) InternalWithRef(ref terra.Reference) DataStatusAllInstancesConfigAttributes {
	return DataStatusAllInstancesConfigAttributes{ref: ref}
}

func (aic DataStatusAllInstancesConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aic.ref.InternalTokens()
}

func (aic DataStatusAllInstancesConfigAttributes) CurrentRevision() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("current_revision"))
}

func (aic DataStatusAllInstancesConfigAttributes) Effective() terra.BoolValue {
	return terra.ReferenceAsBool(aic.ref.Append("effective"))
}

type DataStatusStatefulAttributes struct {
	ref terra.Reference
}

func (s DataStatusStatefulAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataStatusStatefulAttributes) InternalWithRef(ref terra.Reference) DataStatusStatefulAttributes {
	return DataStatusStatefulAttributes{ref: ref}
}

func (s DataStatusStatefulAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataStatusStatefulAttributes) HasStatefulConfig() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("has_stateful_config"))
}

func (s DataStatusStatefulAttributes) PerInstanceConfigs() terra.ListValue[DataStatusStatefulPerInstanceConfigsAttributes] {
	return terra.ReferenceAsList[DataStatusStatefulPerInstanceConfigsAttributes](s.ref.Append("per_instance_configs"))
}

type DataStatusStatefulPerInstanceConfigsAttributes struct {
	ref terra.Reference
}

func (pic DataStatusStatefulPerInstanceConfigsAttributes) InternalRef() (terra.Reference, error) {
	return pic.ref, nil
}

func (pic DataStatusStatefulPerInstanceConfigsAttributes) InternalWithRef(ref terra.Reference) DataStatusStatefulPerInstanceConfigsAttributes {
	return DataStatusStatefulPerInstanceConfigsAttributes{ref: ref}
}

func (pic DataStatusStatefulPerInstanceConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pic.ref.InternalTokens()
}

func (pic DataStatusStatefulPerInstanceConfigsAttributes) AllEffective() terra.BoolValue {
	return terra.ReferenceAsBool(pic.ref.Append("all_effective"))
}

type DataStatusVersionTargetAttributes struct {
	ref terra.Reference
}

func (vt DataStatusVersionTargetAttributes) InternalRef() (terra.Reference, error) {
	return vt.ref, nil
}

func (vt DataStatusVersionTargetAttributes) InternalWithRef(ref terra.Reference) DataStatusVersionTargetAttributes {
	return DataStatusVersionTargetAttributes{ref: ref}
}

func (vt DataStatusVersionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vt.ref.InternalTokens()
}

func (vt DataStatusVersionTargetAttributes) IsReached() terra.BoolValue {
	return terra.ReferenceAsBool(vt.ref.Append("is_reached"))
}

type DataUpdatePolicyAttributes struct {
	ref terra.Reference
}

func (up DataUpdatePolicyAttributes) InternalRef() (terra.Reference, error) {
	return up.ref, nil
}

func (up DataUpdatePolicyAttributes) InternalWithRef(ref terra.Reference) DataUpdatePolicyAttributes {
	return DataUpdatePolicyAttributes{ref: ref}
}

func (up DataUpdatePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return up.ref.InternalTokens()
}

func (up DataUpdatePolicyAttributes) MaxSurgeFixed() terra.NumberValue {
	return terra.ReferenceAsNumber(up.ref.Append("max_surge_fixed"))
}

func (up DataUpdatePolicyAttributes) MaxSurgePercent() terra.NumberValue {
	return terra.ReferenceAsNumber(up.ref.Append("max_surge_percent"))
}

func (up DataUpdatePolicyAttributes) MaxUnavailableFixed() terra.NumberValue {
	return terra.ReferenceAsNumber(up.ref.Append("max_unavailable_fixed"))
}

func (up DataUpdatePolicyAttributes) MaxUnavailablePercent() terra.NumberValue {
	return terra.ReferenceAsNumber(up.ref.Append("max_unavailable_percent"))
}

func (up DataUpdatePolicyAttributes) MinReadySec() terra.NumberValue {
	return terra.ReferenceAsNumber(up.ref.Append("min_ready_sec"))
}

func (up DataUpdatePolicyAttributes) MinimalAction() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("minimal_action"))
}

func (up DataUpdatePolicyAttributes) MostDisruptiveAllowedAction() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("most_disruptive_allowed_action"))
}

func (up DataUpdatePolicyAttributes) ReplacementMethod() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("replacement_method"))
}

func (up DataUpdatePolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("type"))
}

type DataVersionAttributes struct {
	ref terra.Reference
}

func (v DataVersionAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v DataVersionAttributes) InternalWithRef(ref terra.Reference) DataVersionAttributes {
	return DataVersionAttributes{ref: ref}
}

func (v DataVersionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v DataVersionAttributes) InstanceTemplate() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("instance_template"))
}

func (v DataVersionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v DataVersionAttributes) TargetSize() terra.ListValue[DataVersionTargetSizeAttributes] {
	return terra.ReferenceAsList[DataVersionTargetSizeAttributes](v.ref.Append("target_size"))
}

type DataVersionTargetSizeAttributes struct {
	ref terra.Reference
}

func (ts DataVersionTargetSizeAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts DataVersionTargetSizeAttributes) InternalWithRef(ref terra.Reference) DataVersionTargetSizeAttributes {
	return DataVersionTargetSizeAttributes{ref: ref}
}

func (ts DataVersionTargetSizeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts DataVersionTargetSizeAttributes) Fixed() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("fixed"))
}

func (ts DataVersionTargetSizeAttributes) Percent() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("percent"))
}

type DataAllInstancesConfigState struct {
	Labels   map[string]string `json:"labels"`
	Metadata map[string]string `json:"metadata"`
}

type DataAutoHealingPoliciesState struct {
	HealthCheck     string  `json:"health_check"`
	InitialDelaySec float64 `json:"initial_delay_sec"`
}

type DataInstanceLifecyclePolicyState struct {
	DefaultActionOnFailure string `json:"default_action_on_failure"`
	ForceUpdateOnRepair    string `json:"force_update_on_repair"`
}

type DataNamedPortState struct {
	Name string  `json:"name"`
	Port float64 `json:"port"`
}

type DataStatefulDiskState struct {
	DeleteRule string `json:"delete_rule"`
	DeviceName string `json:"device_name"`
}

type DataStatefulExternalIpState struct {
	DeleteRule    string `json:"delete_rule"`
	InterfaceName string `json:"interface_name"`
}

type DataStatefulInternalIpState struct {
	DeleteRule    string `json:"delete_rule"`
	InterfaceName string `json:"interface_name"`
}

type DataStatusState struct {
	IsStable           bool                                `json:"is_stable"`
	AllInstancesConfig []DataStatusAllInstancesConfigState `json:"all_instances_config"`
	Stateful           []DataStatusStatefulState           `json:"stateful"`
	VersionTarget      []DataStatusVersionTargetState      `json:"version_target"`
}

type DataStatusAllInstancesConfigState struct {
	CurrentRevision string `json:"current_revision"`
	Effective       bool   `json:"effective"`
}

type DataStatusStatefulState struct {
	HasStatefulConfig  bool                                        `json:"has_stateful_config"`
	PerInstanceConfigs []DataStatusStatefulPerInstanceConfigsState `json:"per_instance_configs"`
}

type DataStatusStatefulPerInstanceConfigsState struct {
	AllEffective bool `json:"all_effective"`
}

type DataStatusVersionTargetState struct {
	IsReached bool `json:"is_reached"`
}

type DataUpdatePolicyState struct {
	MaxSurgeFixed               float64 `json:"max_surge_fixed"`
	MaxSurgePercent             float64 `json:"max_surge_percent"`
	MaxUnavailableFixed         float64 `json:"max_unavailable_fixed"`
	MaxUnavailablePercent       float64 `json:"max_unavailable_percent"`
	MinReadySec                 float64 `json:"min_ready_sec"`
	MinimalAction               string  `json:"minimal_action"`
	MostDisruptiveAllowedAction string  `json:"most_disruptive_allowed_action"`
	ReplacementMethod           string  `json:"replacement_method"`
	Type                        string  `json:"type"`
}

type DataVersionState struct {
	InstanceTemplate string                       `json:"instance_template"`
	Name             string                       `json:"name"`
	TargetSize       []DataVersionTargetSizeState `json:"target_size"`
}

type DataVersionTargetSizeState struct {
	Fixed   float64 `json:"fixed"`
	Percent float64 `json:"percent"`
}
