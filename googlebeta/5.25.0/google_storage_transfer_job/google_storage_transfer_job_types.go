// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_storage_transfer_job

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EventStream struct {
	// EventStreamExpirationTime: string, optional
	EventStreamExpirationTime terra.StringValue `hcl:"event_stream_expiration_time,attr"`
	// EventStreamStartTime: string, optional
	EventStreamStartTime terra.StringValue `hcl:"event_stream_start_time,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type NotificationConfig struct {
	// EventTypes: set of string, optional
	EventTypes terra.SetValue[terra.StringValue] `hcl:"event_types,attr"`
	// PayloadFormat: string, required
	PayloadFormat terra.StringValue `hcl:"payload_format,attr" validate:"required"`
	// PubsubTopic: string, required
	PubsubTopic terra.StringValue `hcl:"pubsub_topic,attr" validate:"required"`
}

type Schedule struct {
	// RepeatInterval: string, optional
	RepeatInterval terra.StringValue `hcl:"repeat_interval,attr"`
	// ScheduleScheduleEndDate: optional
	ScheduleEndDate *ScheduleScheduleEndDate `hcl:"schedule_end_date,block"`
	// ScheduleScheduleStartDate: required
	ScheduleStartDate *ScheduleScheduleStartDate `hcl:"schedule_start_date,block" validate:"required"`
	// ScheduleStartTimeOfDay: optional
	StartTimeOfDay *ScheduleStartTimeOfDay `hcl:"start_time_of_day,block"`
}

type ScheduleScheduleEndDate struct {
	// Day: number, required
	Day terra.NumberValue `hcl:"day,attr" validate:"required"`
	// Month: number, required
	Month terra.NumberValue `hcl:"month,attr" validate:"required"`
	// Year: number, required
	Year terra.NumberValue `hcl:"year,attr" validate:"required"`
}

type ScheduleScheduleStartDate struct {
	// Day: number, required
	Day terra.NumberValue `hcl:"day,attr" validate:"required"`
	// Month: number, required
	Month terra.NumberValue `hcl:"month,attr" validate:"required"`
	// Year: number, required
	Year terra.NumberValue `hcl:"year,attr" validate:"required"`
}

type ScheduleStartTimeOfDay struct {
	// Hours: number, required
	Hours terra.NumberValue `hcl:"hours,attr" validate:"required"`
	// Minutes: number, required
	Minutes terra.NumberValue `hcl:"minutes,attr" validate:"required"`
	// Nanos: number, required
	Nanos terra.NumberValue `hcl:"nanos,attr" validate:"required"`
	// Seconds: number, required
	Seconds terra.NumberValue `hcl:"seconds,attr" validate:"required"`
}

type TransferSpec struct {
	// SinkAgentPoolName: string, optional
	SinkAgentPoolName terra.StringValue `hcl:"sink_agent_pool_name,attr"`
	// SourceAgentPoolName: string, optional
	SourceAgentPoolName terra.StringValue `hcl:"source_agent_pool_name,attr"`
	// TransferSpecAwsS3DataSource: optional
	AwsS3DataSource *TransferSpecAwsS3DataSource `hcl:"aws_s3_data_source,block"`
	// TransferSpecAzureBlobStorageDataSource: optional
	AzureBlobStorageDataSource *TransferSpecAzureBlobStorageDataSource `hcl:"azure_blob_storage_data_source,block"`
	// TransferSpecGcsDataSink: optional
	GcsDataSink *TransferSpecGcsDataSink `hcl:"gcs_data_sink,block"`
	// TransferSpecGcsDataSource: optional
	GcsDataSource *TransferSpecGcsDataSource `hcl:"gcs_data_source,block"`
	// TransferSpecHttpDataSource: optional
	HttpDataSource *TransferSpecHttpDataSource `hcl:"http_data_source,block"`
	// TransferSpecObjectConditions: optional
	ObjectConditions *TransferSpecObjectConditions `hcl:"object_conditions,block"`
	// TransferSpecPosixDataSink: optional
	PosixDataSink *TransferSpecPosixDataSink `hcl:"posix_data_sink,block"`
	// TransferSpecPosixDataSource: optional
	PosixDataSource *TransferSpecPosixDataSource `hcl:"posix_data_source,block"`
	// TransferSpecTransferOptions: optional
	TransferOptions *TransferSpecTransferOptions `hcl:"transfer_options,block"`
}

type TransferSpecAwsS3DataSource struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// TransferSpecAwsS3DataSourceAwsAccessKey: optional
	AwsAccessKey *TransferSpecAwsS3DataSourceAwsAccessKey `hcl:"aws_access_key,block"`
}

type TransferSpecAwsS3DataSourceAwsAccessKey struct {
	// AccessKeyId: string, required
	AccessKeyId terra.StringValue `hcl:"access_key_id,attr" validate:"required"`
	// SecretAccessKey: string, required
	SecretAccessKey terra.StringValue `hcl:"secret_access_key,attr" validate:"required"`
}

type TransferSpecAzureBlobStorageDataSource struct {
	// Container: string, required
	Container terra.StringValue `hcl:"container,attr" validate:"required"`
	// CredentialsSecret: string, optional
	CredentialsSecret terra.StringValue `hcl:"credentials_secret,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// StorageAccount: string, required
	StorageAccount terra.StringValue `hcl:"storage_account,attr" validate:"required"`
	// TransferSpecAzureBlobStorageDataSourceAzureCredentials: optional
	AzureCredentials *TransferSpecAzureBlobStorageDataSourceAzureCredentials `hcl:"azure_credentials,block"`
}

type TransferSpecAzureBlobStorageDataSourceAzureCredentials struct {
	// SasToken: string, required
	SasToken terra.StringValue `hcl:"sas_token,attr" validate:"required"`
}

type TransferSpecGcsDataSink struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
}

type TransferSpecGcsDataSource struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
}

type TransferSpecHttpDataSource struct {
	// ListUrl: string, required
	ListUrl terra.StringValue `hcl:"list_url,attr" validate:"required"`
}

type TransferSpecObjectConditions struct {
	// ExcludePrefixes: list of string, optional
	ExcludePrefixes terra.ListValue[terra.StringValue] `hcl:"exclude_prefixes,attr"`
	// IncludePrefixes: list of string, optional
	IncludePrefixes terra.ListValue[terra.StringValue] `hcl:"include_prefixes,attr"`
	// LastModifiedBefore: string, optional
	LastModifiedBefore terra.StringValue `hcl:"last_modified_before,attr"`
	// LastModifiedSince: string, optional
	LastModifiedSince terra.StringValue `hcl:"last_modified_since,attr"`
	// MaxTimeElapsedSinceLastModification: string, optional
	MaxTimeElapsedSinceLastModification terra.StringValue `hcl:"max_time_elapsed_since_last_modification,attr"`
	// MinTimeElapsedSinceLastModification: string, optional
	MinTimeElapsedSinceLastModification terra.StringValue `hcl:"min_time_elapsed_since_last_modification,attr"`
}

type TransferSpecPosixDataSink struct {
	// RootDirectory: string, required
	RootDirectory terra.StringValue `hcl:"root_directory,attr" validate:"required"`
}

type TransferSpecPosixDataSource struct {
	// RootDirectory: string, required
	RootDirectory terra.StringValue `hcl:"root_directory,attr" validate:"required"`
}

type TransferSpecTransferOptions struct {
	// DeleteObjectsFromSourceAfterTransfer: bool, optional
	DeleteObjectsFromSourceAfterTransfer terra.BoolValue `hcl:"delete_objects_from_source_after_transfer,attr"`
	// DeleteObjectsUniqueInSink: bool, optional
	DeleteObjectsUniqueInSink terra.BoolValue `hcl:"delete_objects_unique_in_sink,attr"`
	// OverwriteObjectsAlreadyExistingInSink: bool, optional
	OverwriteObjectsAlreadyExistingInSink terra.BoolValue `hcl:"overwrite_objects_already_existing_in_sink,attr"`
	// OverwriteWhen: string, optional
	OverwriteWhen terra.StringValue `hcl:"overwrite_when,attr"`
}

type EventStreamAttributes struct {
	ref terra.Reference
}

func (es EventStreamAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es EventStreamAttributes) InternalWithRef(ref terra.Reference) EventStreamAttributes {
	return EventStreamAttributes{ref: ref}
}

func (es EventStreamAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es EventStreamAttributes) EventStreamExpirationTime() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("event_stream_expiration_time"))
}

func (es EventStreamAttributes) EventStreamStartTime() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("event_stream_start_time"))
}

func (es EventStreamAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("name"))
}

type NotificationConfigAttributes struct {
	ref terra.Reference
}

func (nc NotificationConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NotificationConfigAttributes) InternalWithRef(ref terra.Reference) NotificationConfigAttributes {
	return NotificationConfigAttributes{ref: ref}
}

func (nc NotificationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NotificationConfigAttributes) EventTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("event_types"))
}

func (nc NotificationConfigAttributes) PayloadFormat() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("payload_format"))
}

func (nc NotificationConfigAttributes) PubsubTopic() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("pubsub_topic"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) RepeatInterval() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("repeat_interval"))
}

func (s ScheduleAttributes) ScheduleEndDate() terra.ListValue[ScheduleScheduleEndDateAttributes] {
	return terra.ReferenceAsList[ScheduleScheduleEndDateAttributes](s.ref.Append("schedule_end_date"))
}

func (s ScheduleAttributes) ScheduleStartDate() terra.ListValue[ScheduleScheduleStartDateAttributes] {
	return terra.ReferenceAsList[ScheduleScheduleStartDateAttributes](s.ref.Append("schedule_start_date"))
}

func (s ScheduleAttributes) StartTimeOfDay() terra.ListValue[ScheduleStartTimeOfDayAttributes] {
	return terra.ReferenceAsList[ScheduleStartTimeOfDayAttributes](s.ref.Append("start_time_of_day"))
}

type ScheduleScheduleEndDateAttributes struct {
	ref terra.Reference
}

func (sed ScheduleScheduleEndDateAttributes) InternalRef() (terra.Reference, error) {
	return sed.ref, nil
}

func (sed ScheduleScheduleEndDateAttributes) InternalWithRef(ref terra.Reference) ScheduleScheduleEndDateAttributes {
	return ScheduleScheduleEndDateAttributes{ref: ref}
}

func (sed ScheduleScheduleEndDateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sed.ref.InternalTokens()
}

func (sed ScheduleScheduleEndDateAttributes) Day() terra.NumberValue {
	return terra.ReferenceAsNumber(sed.ref.Append("day"))
}

func (sed ScheduleScheduleEndDateAttributes) Month() terra.NumberValue {
	return terra.ReferenceAsNumber(sed.ref.Append("month"))
}

func (sed ScheduleScheduleEndDateAttributes) Year() terra.NumberValue {
	return terra.ReferenceAsNumber(sed.ref.Append("year"))
}

type ScheduleScheduleStartDateAttributes struct {
	ref terra.Reference
}

func (ssd ScheduleScheduleStartDateAttributes) InternalRef() (terra.Reference, error) {
	return ssd.ref, nil
}

func (ssd ScheduleScheduleStartDateAttributes) InternalWithRef(ref terra.Reference) ScheduleScheduleStartDateAttributes {
	return ScheduleScheduleStartDateAttributes{ref: ref}
}

func (ssd ScheduleScheduleStartDateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssd.ref.InternalTokens()
}

func (ssd ScheduleScheduleStartDateAttributes) Day() terra.NumberValue {
	return terra.ReferenceAsNumber(ssd.ref.Append("day"))
}

func (ssd ScheduleScheduleStartDateAttributes) Month() terra.NumberValue {
	return terra.ReferenceAsNumber(ssd.ref.Append("month"))
}

func (ssd ScheduleScheduleStartDateAttributes) Year() terra.NumberValue {
	return terra.ReferenceAsNumber(ssd.ref.Append("year"))
}

type ScheduleStartTimeOfDayAttributes struct {
	ref terra.Reference
}

func (stod ScheduleStartTimeOfDayAttributes) InternalRef() (terra.Reference, error) {
	return stod.ref, nil
}

func (stod ScheduleStartTimeOfDayAttributes) InternalWithRef(ref terra.Reference) ScheduleStartTimeOfDayAttributes {
	return ScheduleStartTimeOfDayAttributes{ref: ref}
}

func (stod ScheduleStartTimeOfDayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return stod.ref.InternalTokens()
}

func (stod ScheduleStartTimeOfDayAttributes) Hours() terra.NumberValue {
	return terra.ReferenceAsNumber(stod.ref.Append("hours"))
}

func (stod ScheduleStartTimeOfDayAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(stod.ref.Append("minutes"))
}

func (stod ScheduleStartTimeOfDayAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(stod.ref.Append("nanos"))
}

func (stod ScheduleStartTimeOfDayAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceAsNumber(stod.ref.Append("seconds"))
}

type TransferSpecAttributes struct {
	ref terra.Reference
}

func (ts TransferSpecAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TransferSpecAttributes) InternalWithRef(ref terra.Reference) TransferSpecAttributes {
	return TransferSpecAttributes{ref: ref}
}

func (ts TransferSpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TransferSpecAttributes) SinkAgentPoolName() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("sink_agent_pool_name"))
}

func (ts TransferSpecAttributes) SourceAgentPoolName() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("source_agent_pool_name"))
}

func (ts TransferSpecAttributes) AwsS3DataSource() terra.ListValue[TransferSpecAwsS3DataSourceAttributes] {
	return terra.ReferenceAsList[TransferSpecAwsS3DataSourceAttributes](ts.ref.Append("aws_s3_data_source"))
}

func (ts TransferSpecAttributes) AzureBlobStorageDataSource() terra.ListValue[TransferSpecAzureBlobStorageDataSourceAttributes] {
	return terra.ReferenceAsList[TransferSpecAzureBlobStorageDataSourceAttributes](ts.ref.Append("azure_blob_storage_data_source"))
}

func (ts TransferSpecAttributes) GcsDataSink() terra.ListValue[TransferSpecGcsDataSinkAttributes] {
	return terra.ReferenceAsList[TransferSpecGcsDataSinkAttributes](ts.ref.Append("gcs_data_sink"))
}

func (ts TransferSpecAttributes) GcsDataSource() terra.ListValue[TransferSpecGcsDataSourceAttributes] {
	return terra.ReferenceAsList[TransferSpecGcsDataSourceAttributes](ts.ref.Append("gcs_data_source"))
}

func (ts TransferSpecAttributes) HttpDataSource() terra.ListValue[TransferSpecHttpDataSourceAttributes] {
	return terra.ReferenceAsList[TransferSpecHttpDataSourceAttributes](ts.ref.Append("http_data_source"))
}

func (ts TransferSpecAttributes) ObjectConditions() terra.ListValue[TransferSpecObjectConditionsAttributes] {
	return terra.ReferenceAsList[TransferSpecObjectConditionsAttributes](ts.ref.Append("object_conditions"))
}

func (ts TransferSpecAttributes) PosixDataSink() terra.ListValue[TransferSpecPosixDataSinkAttributes] {
	return terra.ReferenceAsList[TransferSpecPosixDataSinkAttributes](ts.ref.Append("posix_data_sink"))
}

func (ts TransferSpecAttributes) PosixDataSource() terra.ListValue[TransferSpecPosixDataSourceAttributes] {
	return terra.ReferenceAsList[TransferSpecPosixDataSourceAttributes](ts.ref.Append("posix_data_source"))
}

func (ts TransferSpecAttributes) TransferOptions() terra.ListValue[TransferSpecTransferOptionsAttributes] {
	return terra.ReferenceAsList[TransferSpecTransferOptionsAttributes](ts.ref.Append("transfer_options"))
}

type TransferSpecAwsS3DataSourceAttributes struct {
	ref terra.Reference
}

func (asds TransferSpecAwsS3DataSourceAttributes) InternalRef() (terra.Reference, error) {
	return asds.ref, nil
}

func (asds TransferSpecAwsS3DataSourceAttributes) InternalWithRef(ref terra.Reference) TransferSpecAwsS3DataSourceAttributes {
	return TransferSpecAwsS3DataSourceAttributes{ref: ref}
}

func (asds TransferSpecAwsS3DataSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asds.ref.InternalTokens()
}

func (asds TransferSpecAwsS3DataSourceAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(asds.ref.Append("bucket_name"))
}

func (asds TransferSpecAwsS3DataSourceAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(asds.ref.Append("path"))
}

func (asds TransferSpecAwsS3DataSourceAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(asds.ref.Append("role_arn"))
}

func (asds TransferSpecAwsS3DataSourceAttributes) AwsAccessKey() terra.ListValue[TransferSpecAwsS3DataSourceAwsAccessKeyAttributes] {
	return terra.ReferenceAsList[TransferSpecAwsS3DataSourceAwsAccessKeyAttributes](asds.ref.Append("aws_access_key"))
}

type TransferSpecAwsS3DataSourceAwsAccessKeyAttributes struct {
	ref terra.Reference
}

func (aak TransferSpecAwsS3DataSourceAwsAccessKeyAttributes) InternalRef() (terra.Reference, error) {
	return aak.ref, nil
}

func (aak TransferSpecAwsS3DataSourceAwsAccessKeyAttributes) InternalWithRef(ref terra.Reference) TransferSpecAwsS3DataSourceAwsAccessKeyAttributes {
	return TransferSpecAwsS3DataSourceAwsAccessKeyAttributes{ref: ref}
}

func (aak TransferSpecAwsS3DataSourceAwsAccessKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aak.ref.InternalTokens()
}

func (aak TransferSpecAwsS3DataSourceAwsAccessKeyAttributes) AccessKeyId() terra.StringValue {
	return terra.ReferenceAsString(aak.ref.Append("access_key_id"))
}

func (aak TransferSpecAwsS3DataSourceAwsAccessKeyAttributes) SecretAccessKey() terra.StringValue {
	return terra.ReferenceAsString(aak.ref.Append("secret_access_key"))
}

type TransferSpecAzureBlobStorageDataSourceAttributes struct {
	ref terra.Reference
}

func (absds TransferSpecAzureBlobStorageDataSourceAttributes) InternalRef() (terra.Reference, error) {
	return absds.ref, nil
}

func (absds TransferSpecAzureBlobStorageDataSourceAttributes) InternalWithRef(ref terra.Reference) TransferSpecAzureBlobStorageDataSourceAttributes {
	return TransferSpecAzureBlobStorageDataSourceAttributes{ref: ref}
}

func (absds TransferSpecAzureBlobStorageDataSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return absds.ref.InternalTokens()
}

func (absds TransferSpecAzureBlobStorageDataSourceAttributes) Container() terra.StringValue {
	return terra.ReferenceAsString(absds.ref.Append("container"))
}

func (absds TransferSpecAzureBlobStorageDataSourceAttributes) CredentialsSecret() terra.StringValue {
	return terra.ReferenceAsString(absds.ref.Append("credentials_secret"))
}

func (absds TransferSpecAzureBlobStorageDataSourceAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(absds.ref.Append("path"))
}

func (absds TransferSpecAzureBlobStorageDataSourceAttributes) StorageAccount() terra.StringValue {
	return terra.ReferenceAsString(absds.ref.Append("storage_account"))
}

func (absds TransferSpecAzureBlobStorageDataSourceAttributes) AzureCredentials() terra.ListValue[TransferSpecAzureBlobStorageDataSourceAzureCredentialsAttributes] {
	return terra.ReferenceAsList[TransferSpecAzureBlobStorageDataSourceAzureCredentialsAttributes](absds.ref.Append("azure_credentials"))
}

type TransferSpecAzureBlobStorageDataSourceAzureCredentialsAttributes struct {
	ref terra.Reference
}

func (ac TransferSpecAzureBlobStorageDataSourceAzureCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac TransferSpecAzureBlobStorageDataSourceAzureCredentialsAttributes) InternalWithRef(ref terra.Reference) TransferSpecAzureBlobStorageDataSourceAzureCredentialsAttributes {
	return TransferSpecAzureBlobStorageDataSourceAzureCredentialsAttributes{ref: ref}
}

func (ac TransferSpecAzureBlobStorageDataSourceAzureCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac TransferSpecAzureBlobStorageDataSourceAzureCredentialsAttributes) SasToken() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("sas_token"))
}

type TransferSpecGcsDataSinkAttributes struct {
	ref terra.Reference
}

func (gds TransferSpecGcsDataSinkAttributes) InternalRef() (terra.Reference, error) {
	return gds.ref, nil
}

func (gds TransferSpecGcsDataSinkAttributes) InternalWithRef(ref terra.Reference) TransferSpecGcsDataSinkAttributes {
	return TransferSpecGcsDataSinkAttributes{ref: ref}
}

func (gds TransferSpecGcsDataSinkAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gds.ref.InternalTokens()
}

func (gds TransferSpecGcsDataSinkAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(gds.ref.Append("bucket_name"))
}

func (gds TransferSpecGcsDataSinkAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(gds.ref.Append("path"))
}

type TransferSpecGcsDataSourceAttributes struct {
	ref terra.Reference
}

func (gds TransferSpecGcsDataSourceAttributes) InternalRef() (terra.Reference, error) {
	return gds.ref, nil
}

func (gds TransferSpecGcsDataSourceAttributes) InternalWithRef(ref terra.Reference) TransferSpecGcsDataSourceAttributes {
	return TransferSpecGcsDataSourceAttributes{ref: ref}
}

func (gds TransferSpecGcsDataSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gds.ref.InternalTokens()
}

func (gds TransferSpecGcsDataSourceAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(gds.ref.Append("bucket_name"))
}

func (gds TransferSpecGcsDataSourceAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(gds.ref.Append("path"))
}

type TransferSpecHttpDataSourceAttributes struct {
	ref terra.Reference
}

func (hds TransferSpecHttpDataSourceAttributes) InternalRef() (terra.Reference, error) {
	return hds.ref, nil
}

func (hds TransferSpecHttpDataSourceAttributes) InternalWithRef(ref terra.Reference) TransferSpecHttpDataSourceAttributes {
	return TransferSpecHttpDataSourceAttributes{ref: ref}
}

func (hds TransferSpecHttpDataSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hds.ref.InternalTokens()
}

func (hds TransferSpecHttpDataSourceAttributes) ListUrl() terra.StringValue {
	return terra.ReferenceAsString(hds.ref.Append("list_url"))
}

type TransferSpecObjectConditionsAttributes struct {
	ref terra.Reference
}

func (oc TransferSpecObjectConditionsAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc TransferSpecObjectConditionsAttributes) InternalWithRef(ref terra.Reference) TransferSpecObjectConditionsAttributes {
	return TransferSpecObjectConditionsAttributes{ref: ref}
}

func (oc TransferSpecObjectConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc TransferSpecObjectConditionsAttributes) ExcludePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](oc.ref.Append("exclude_prefixes"))
}

func (oc TransferSpecObjectConditionsAttributes) IncludePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](oc.ref.Append("include_prefixes"))
}

func (oc TransferSpecObjectConditionsAttributes) LastModifiedBefore() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("last_modified_before"))
}

func (oc TransferSpecObjectConditionsAttributes) LastModifiedSince() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("last_modified_since"))
}

func (oc TransferSpecObjectConditionsAttributes) MaxTimeElapsedSinceLastModification() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("max_time_elapsed_since_last_modification"))
}

func (oc TransferSpecObjectConditionsAttributes) MinTimeElapsedSinceLastModification() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("min_time_elapsed_since_last_modification"))
}

type TransferSpecPosixDataSinkAttributes struct {
	ref terra.Reference
}

func (pds TransferSpecPosixDataSinkAttributes) InternalRef() (terra.Reference, error) {
	return pds.ref, nil
}

func (pds TransferSpecPosixDataSinkAttributes) InternalWithRef(ref terra.Reference) TransferSpecPosixDataSinkAttributes {
	return TransferSpecPosixDataSinkAttributes{ref: ref}
}

func (pds TransferSpecPosixDataSinkAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pds.ref.InternalTokens()
}

func (pds TransferSpecPosixDataSinkAttributes) RootDirectory() terra.StringValue {
	return terra.ReferenceAsString(pds.ref.Append("root_directory"))
}

type TransferSpecPosixDataSourceAttributes struct {
	ref terra.Reference
}

func (pds TransferSpecPosixDataSourceAttributes) InternalRef() (terra.Reference, error) {
	return pds.ref, nil
}

func (pds TransferSpecPosixDataSourceAttributes) InternalWithRef(ref terra.Reference) TransferSpecPosixDataSourceAttributes {
	return TransferSpecPosixDataSourceAttributes{ref: ref}
}

func (pds TransferSpecPosixDataSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pds.ref.InternalTokens()
}

func (pds TransferSpecPosixDataSourceAttributes) RootDirectory() terra.StringValue {
	return terra.ReferenceAsString(pds.ref.Append("root_directory"))
}

type TransferSpecTransferOptionsAttributes struct {
	ref terra.Reference
}

func (to TransferSpecTransferOptionsAttributes) InternalRef() (terra.Reference, error) {
	return to.ref, nil
}

func (to TransferSpecTransferOptionsAttributes) InternalWithRef(ref terra.Reference) TransferSpecTransferOptionsAttributes {
	return TransferSpecTransferOptionsAttributes{ref: ref}
}

func (to TransferSpecTransferOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return to.ref.InternalTokens()
}

func (to TransferSpecTransferOptionsAttributes) DeleteObjectsFromSourceAfterTransfer() terra.BoolValue {
	return terra.ReferenceAsBool(to.ref.Append("delete_objects_from_source_after_transfer"))
}

func (to TransferSpecTransferOptionsAttributes) DeleteObjectsUniqueInSink() terra.BoolValue {
	return terra.ReferenceAsBool(to.ref.Append("delete_objects_unique_in_sink"))
}

func (to TransferSpecTransferOptionsAttributes) OverwriteObjectsAlreadyExistingInSink() terra.BoolValue {
	return terra.ReferenceAsBool(to.ref.Append("overwrite_objects_already_existing_in_sink"))
}

func (to TransferSpecTransferOptionsAttributes) OverwriteWhen() terra.StringValue {
	return terra.ReferenceAsString(to.ref.Append("overwrite_when"))
}

type EventStreamState struct {
	EventStreamExpirationTime string `json:"event_stream_expiration_time"`
	EventStreamStartTime      string `json:"event_stream_start_time"`
	Name                      string `json:"name"`
}

type NotificationConfigState struct {
	EventTypes    []string `json:"event_types"`
	PayloadFormat string   `json:"payload_format"`
	PubsubTopic   string   `json:"pubsub_topic"`
}

type ScheduleState struct {
	RepeatInterval    string                           `json:"repeat_interval"`
	ScheduleEndDate   []ScheduleScheduleEndDateState   `json:"schedule_end_date"`
	ScheduleStartDate []ScheduleScheduleStartDateState `json:"schedule_start_date"`
	StartTimeOfDay    []ScheduleStartTimeOfDayState    `json:"start_time_of_day"`
}

type ScheduleScheduleEndDateState struct {
	Day   float64 `json:"day"`
	Month float64 `json:"month"`
	Year  float64 `json:"year"`
}

type ScheduleScheduleStartDateState struct {
	Day   float64 `json:"day"`
	Month float64 `json:"month"`
	Year  float64 `json:"year"`
}

type ScheduleStartTimeOfDayState struct {
	Hours   float64 `json:"hours"`
	Minutes float64 `json:"minutes"`
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type TransferSpecState struct {
	SinkAgentPoolName          string                                        `json:"sink_agent_pool_name"`
	SourceAgentPoolName        string                                        `json:"source_agent_pool_name"`
	AwsS3DataSource            []TransferSpecAwsS3DataSourceState            `json:"aws_s3_data_source"`
	AzureBlobStorageDataSource []TransferSpecAzureBlobStorageDataSourceState `json:"azure_blob_storage_data_source"`
	GcsDataSink                []TransferSpecGcsDataSinkState                `json:"gcs_data_sink"`
	GcsDataSource              []TransferSpecGcsDataSourceState              `json:"gcs_data_source"`
	HttpDataSource             []TransferSpecHttpDataSourceState             `json:"http_data_source"`
	ObjectConditions           []TransferSpecObjectConditionsState           `json:"object_conditions"`
	PosixDataSink              []TransferSpecPosixDataSinkState              `json:"posix_data_sink"`
	PosixDataSource            []TransferSpecPosixDataSourceState            `json:"posix_data_source"`
	TransferOptions            []TransferSpecTransferOptionsState            `json:"transfer_options"`
}

type TransferSpecAwsS3DataSourceState struct {
	BucketName   string                                         `json:"bucket_name"`
	Path         string                                         `json:"path"`
	RoleArn      string                                         `json:"role_arn"`
	AwsAccessKey []TransferSpecAwsS3DataSourceAwsAccessKeyState `json:"aws_access_key"`
}

type TransferSpecAwsS3DataSourceAwsAccessKeyState struct {
	AccessKeyId     string `json:"access_key_id"`
	SecretAccessKey string `json:"secret_access_key"`
}

type TransferSpecAzureBlobStorageDataSourceState struct {
	Container         string                                                        `json:"container"`
	CredentialsSecret string                                                        `json:"credentials_secret"`
	Path              string                                                        `json:"path"`
	StorageAccount    string                                                        `json:"storage_account"`
	AzureCredentials  []TransferSpecAzureBlobStorageDataSourceAzureCredentialsState `json:"azure_credentials"`
}

type TransferSpecAzureBlobStorageDataSourceAzureCredentialsState struct {
	SasToken string `json:"sas_token"`
}

type TransferSpecGcsDataSinkState struct {
	BucketName string `json:"bucket_name"`
	Path       string `json:"path"`
}

type TransferSpecGcsDataSourceState struct {
	BucketName string `json:"bucket_name"`
	Path       string `json:"path"`
}

type TransferSpecHttpDataSourceState struct {
	ListUrl string `json:"list_url"`
}

type TransferSpecObjectConditionsState struct {
	ExcludePrefixes                     []string `json:"exclude_prefixes"`
	IncludePrefixes                     []string `json:"include_prefixes"`
	LastModifiedBefore                  string   `json:"last_modified_before"`
	LastModifiedSince                   string   `json:"last_modified_since"`
	MaxTimeElapsedSinceLastModification string   `json:"max_time_elapsed_since_last_modification"`
	MinTimeElapsedSinceLastModification string   `json:"min_time_elapsed_since_last_modification"`
}

type TransferSpecPosixDataSinkState struct {
	RootDirectory string `json:"root_directory"`
}

type TransferSpecPosixDataSourceState struct {
	RootDirectory string `json:"root_directory"`
}

type TransferSpecTransferOptionsState struct {
	DeleteObjectsFromSourceAfterTransfer  bool   `json:"delete_objects_from_source_after_transfer"`
	DeleteObjectsUniqueInSink             bool   `json:"delete_objects_unique_in_sink"`
	OverwriteObjectsAlreadyExistingInSink bool   `json:"overwrite_objects_already_existing_in_sink"`
	OverwriteWhen                         string `json:"overwrite_when"`
}
