// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_vmwareengine_network

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_vmwareengine_network.
type Resource struct {
	Name      string
	Args      Args
	state     *googleVmwareengineNetworkState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gvn *Resource) Type() string {
	return "google_vmwareengine_network"
}

// LocalName returns the local name for [Resource].
func (gvn *Resource) LocalName() string {
	return gvn.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gvn *Resource) Configuration() interface{} {
	return gvn.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gvn *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gvn)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gvn *Resource) Dependencies() terra.Dependencies {
	return gvn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gvn *Resource) LifecycleManagement() *terra.Lifecycle {
	return gvn.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gvn *Resource) Attributes() googleVmwareengineNetworkAttributes {
	return googleVmwareengineNetworkAttributes{ref: terra.ReferenceResource(gvn)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gvn *Resource) ImportState(state io.Reader) error {
	gvn.state = &googleVmwareengineNetworkState{}
	if err := json.NewDecoder(state).Decode(gvn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gvn.Type(), gvn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gvn *Resource) State() (*googleVmwareengineNetworkState, bool) {
	return gvn.state, gvn.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gvn *Resource) StateMust() *googleVmwareengineNetworkState {
	if gvn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gvn.Type(), gvn.LocalName()))
	}
	return gvn.state
}

// Args contains the configurations for google_vmwareengine_network.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleVmwareengineNetworkAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_vmwareengine_network.
func (gvn googleVmwareengineNetworkAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gvn.ref.Append("description"))
}

// Id returns a reference to field id of google_vmwareengine_network.
func (gvn googleVmwareengineNetworkAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gvn.ref.Append("id"))
}

// Location returns a reference to field location of google_vmwareengine_network.
func (gvn googleVmwareengineNetworkAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gvn.ref.Append("location"))
}

// Name returns a reference to field name of google_vmwareengine_network.
func (gvn googleVmwareengineNetworkAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gvn.ref.Append("name"))
}

// Project returns a reference to field project of google_vmwareengine_network.
func (gvn googleVmwareengineNetworkAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gvn.ref.Append("project"))
}

// State returns a reference to field state of google_vmwareengine_network.
func (gvn googleVmwareengineNetworkAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gvn.ref.Append("state"))
}

// Type returns a reference to field type of google_vmwareengine_network.
func (gvn googleVmwareengineNetworkAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gvn.ref.Append("type"))
}

// Uid returns a reference to field uid of google_vmwareengine_network.
func (gvn googleVmwareengineNetworkAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gvn.ref.Append("uid"))
}

func (gvn googleVmwareengineNetworkAttributes) VpcNetworks() terra.ListValue[VpcNetworksAttributes] {
	return terra.ReferenceAsList[VpcNetworksAttributes](gvn.ref.Append("vpc_networks"))
}

func (gvn googleVmwareengineNetworkAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gvn.ref.Append("timeouts"))
}

type googleVmwareengineNetworkState struct {
	Description string             `json:"description"`
	Id          string             `json:"id"`
	Location    string             `json:"location"`
	Name        string             `json:"name"`
	Project     string             `json:"project"`
	State       string             `json:"state"`
	Type        string             `json:"type"`
	Uid         string             `json:"uid"`
	VpcNetworks []VpcNetworksState `json:"vpc_networks"`
	Timeouts    *TimeoutsState     `json:"timeouts"`
}
