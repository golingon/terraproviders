// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloudbuildv2_repository

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_cloudbuildv2_repository.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCloudbuildv2RepositoryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcr *Resource) Type() string {
	return "google_cloudbuildv2_repository"
}

// LocalName returns the local name for [Resource].
func (gcr *Resource) LocalName() string {
	return gcr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcr *Resource) Configuration() interface{} {
	return gcr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcr *Resource) Dependencies() terra.Dependencies {
	return gcr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcr *Resource) Attributes() googleCloudbuildv2RepositoryAttributes {
	return googleCloudbuildv2RepositoryAttributes{ref: terra.ReferenceResource(gcr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcr *Resource) ImportState(state io.Reader) error {
	gcr.state = &googleCloudbuildv2RepositoryState{}
	if err := json.NewDecoder(state).Decode(gcr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcr.Type(), gcr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcr *Resource) State() (*googleCloudbuildv2RepositoryState, bool) {
	return gcr.state, gcr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcr *Resource) StateMust() *googleCloudbuildv2RepositoryState {
	if gcr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcr.Type(), gcr.LocalName()))
	}
	return gcr.state
}

// Args contains the configurations for google_cloudbuildv2_repository.
type Args struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParentConnection: string, required
	ParentConnection terra.StringValue `hcl:"parent_connection,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RemoteUri: string, required
	RemoteUri terra.StringValue `hcl:"remote_uri,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleCloudbuildv2RepositoryAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_cloudbuildv2_repository.
func (gcr googleCloudbuildv2RepositoryAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcr.ref.Append("annotations"))
}

// CreateTime returns a reference to field create_time of google_cloudbuildv2_repository.
func (gcr googleCloudbuildv2RepositoryAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("create_time"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_cloudbuildv2_repository.
func (gcr googleCloudbuildv2RepositoryAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcr.ref.Append("effective_annotations"))
}

// Etag returns a reference to field etag of google_cloudbuildv2_repository.
func (gcr googleCloudbuildv2RepositoryAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("etag"))
}

// Id returns a reference to field id of google_cloudbuildv2_repository.
func (gcr googleCloudbuildv2RepositoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("id"))
}

// Location returns a reference to field location of google_cloudbuildv2_repository.
func (gcr googleCloudbuildv2RepositoryAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("location"))
}

// Name returns a reference to field name of google_cloudbuildv2_repository.
func (gcr googleCloudbuildv2RepositoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("name"))
}

// ParentConnection returns a reference to field parent_connection of google_cloudbuildv2_repository.
func (gcr googleCloudbuildv2RepositoryAttributes) ParentConnection() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("parent_connection"))
}

// Project returns a reference to field project of google_cloudbuildv2_repository.
func (gcr googleCloudbuildv2RepositoryAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("project"))
}

// RemoteUri returns a reference to field remote_uri of google_cloudbuildv2_repository.
func (gcr googleCloudbuildv2RepositoryAttributes) RemoteUri() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("remote_uri"))
}

// UpdateTime returns a reference to field update_time of google_cloudbuildv2_repository.
func (gcr googleCloudbuildv2RepositoryAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("update_time"))
}

func (gcr googleCloudbuildv2RepositoryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcr.ref.Append("timeouts"))
}

type googleCloudbuildv2RepositoryState struct {
	Annotations          map[string]string `json:"annotations"`
	CreateTime           string            `json:"create_time"`
	EffectiveAnnotations map[string]string `json:"effective_annotations"`
	Etag                 string            `json:"etag"`
	Id                   string            `json:"id"`
	Location             string            `json:"location"`
	Name                 string            `json:"name"`
	ParentConnection     string            `json:"parent_connection"`
	Project              string            `json:"project"`
	RemoteUri            string            `json:"remote_uri"`
	UpdateTime           string            `json:"update_time"`
	Timeouts             *TimeoutsState    `json:"timeouts"`
}
