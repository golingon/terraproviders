// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_access_context_manager_access_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_access_context_manager_access_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleAccessContextManagerAccessPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gacmap *Resource) Type() string {
	return "google_access_context_manager_access_policy"
}

// LocalName returns the local name for [Resource].
func (gacmap *Resource) LocalName() string {
	return gacmap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gacmap *Resource) Configuration() interface{} {
	return gacmap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gacmap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gacmap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gacmap *Resource) Dependencies() terra.Dependencies {
	return gacmap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gacmap *Resource) LifecycleManagement() *terra.Lifecycle {
	return gacmap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gacmap *Resource) Attributes() googleAccessContextManagerAccessPolicyAttributes {
	return googleAccessContextManagerAccessPolicyAttributes{ref: terra.ReferenceResource(gacmap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gacmap *Resource) ImportState(state io.Reader) error {
	gacmap.state = &googleAccessContextManagerAccessPolicyState{}
	if err := json.NewDecoder(state).Decode(gacmap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gacmap.Type(), gacmap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gacmap *Resource) State() (*googleAccessContextManagerAccessPolicyState, bool) {
	return gacmap.state, gacmap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gacmap *Resource) StateMust() *googleAccessContextManagerAccessPolicyState {
	if gacmap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gacmap.Type(), gacmap.LocalName()))
	}
	return gacmap.state
}

// Args contains the configurations for google_access_context_manager_access_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// Scopes: list of string, optional
	Scopes terra.ListValue[terra.StringValue] `hcl:"scopes,attr"`
	// Title: string, required
	Title terra.StringValue `hcl:"title,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleAccessContextManagerAccessPolicyAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_access_context_manager_access_policy.
func (gacmap googleAccessContextManagerAccessPolicyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gacmap.ref.Append("create_time"))
}

// Id returns a reference to field id of google_access_context_manager_access_policy.
func (gacmap googleAccessContextManagerAccessPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gacmap.ref.Append("id"))
}

// Name returns a reference to field name of google_access_context_manager_access_policy.
func (gacmap googleAccessContextManagerAccessPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gacmap.ref.Append("name"))
}

// Parent returns a reference to field parent of google_access_context_manager_access_policy.
func (gacmap googleAccessContextManagerAccessPolicyAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gacmap.ref.Append("parent"))
}

// Scopes returns a reference to field scopes of google_access_context_manager_access_policy.
func (gacmap googleAccessContextManagerAccessPolicyAttributes) Scopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gacmap.ref.Append("scopes"))
}

// Title returns a reference to field title of google_access_context_manager_access_policy.
func (gacmap googleAccessContextManagerAccessPolicyAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(gacmap.ref.Append("title"))
}

// UpdateTime returns a reference to field update_time of google_access_context_manager_access_policy.
func (gacmap googleAccessContextManagerAccessPolicyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gacmap.ref.Append("update_time"))
}

func (gacmap googleAccessContextManagerAccessPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gacmap.ref.Append("timeouts"))
}

type googleAccessContextManagerAccessPolicyState struct {
	CreateTime string         `json:"create_time"`
	Id         string         `json:"id"`
	Name       string         `json:"name"`
	Parent     string         `json:"parent"`
	Scopes     []string       `json:"scopes"`
	Title      string         `json:"title"`
	UpdateTime string         `json:"update_time"`
	Timeouts   *TimeoutsState `json:"timeouts"`
}
