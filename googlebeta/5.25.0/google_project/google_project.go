// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_project

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_project.
type Resource struct {
	Name      string
	Args      Args
	state     *googleProjectState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gp *Resource) Type() string {
	return "google_project"
}

// LocalName returns the local name for [Resource].
func (gp *Resource) LocalName() string {
	return gp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gp *Resource) Configuration() interface{} {
	return gp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gp *Resource) Dependencies() terra.Dependencies {
	return gp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gp *Resource) Attributes() googleProjectAttributes {
	return googleProjectAttributes{ref: terra.ReferenceResource(gp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gp *Resource) ImportState(state io.Reader) error {
	gp.state = &googleProjectState{}
	if err := json.NewDecoder(state).Decode(gp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gp.Type(), gp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gp *Resource) State() (*googleProjectState, bool) {
	return gp.state, gp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gp *Resource) StateMust() *googleProjectState {
	if gp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gp.Type(), gp.LocalName()))
	}
	return gp.state
}

// Args contains the configurations for google_project.
type Args struct {
	// AutoCreateNetwork: bool, optional
	AutoCreateNetwork terra.BoolValue `hcl:"auto_create_network,attr"`
	// BillingAccount: string, optional
	BillingAccount terra.StringValue `hcl:"billing_account,attr"`
	// FolderId: string, optional
	FolderId terra.StringValue `hcl:"folder_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OrgId: string, optional
	OrgId terra.StringValue `hcl:"org_id,attr"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// SkipDelete: bool, optional
	SkipDelete terra.BoolValue `hcl:"skip_delete,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleProjectAttributes struct {
	ref terra.Reference
}

// AutoCreateNetwork returns a reference to field auto_create_network of google_project.
func (gp googleProjectAttributes) AutoCreateNetwork() terra.BoolValue {
	return terra.ReferenceAsBool(gp.ref.Append("auto_create_network"))
}

// BillingAccount returns a reference to field billing_account of google_project.
func (gp googleProjectAttributes) BillingAccount() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("billing_account"))
}

// EffectiveLabels returns a reference to field effective_labels of google_project.
func (gp googleProjectAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gp.ref.Append("effective_labels"))
}

// FolderId returns a reference to field folder_id of google_project.
func (gp googleProjectAttributes) FolderId() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("folder_id"))
}

// Id returns a reference to field id of google_project.
func (gp googleProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("id"))
}

// Labels returns a reference to field labels of google_project.
func (gp googleProjectAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gp.ref.Append("labels"))
}

// Name returns a reference to field name of google_project.
func (gp googleProjectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("name"))
}

// Number returns a reference to field number of google_project.
func (gp googleProjectAttributes) Number() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("number"))
}

// OrgId returns a reference to field org_id of google_project.
func (gp googleProjectAttributes) OrgId() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("org_id"))
}

// ProjectId returns a reference to field project_id of google_project.
func (gp googleProjectAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("project_id"))
}

// SkipDelete returns a reference to field skip_delete of google_project.
func (gp googleProjectAttributes) SkipDelete() terra.BoolValue {
	return terra.ReferenceAsBool(gp.ref.Append("skip_delete"))
}

// TerraformLabels returns a reference to field terraform_labels of google_project.
func (gp googleProjectAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gp.ref.Append("terraform_labels"))
}

func (gp googleProjectAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gp.ref.Append("timeouts"))
}

type googleProjectState struct {
	AutoCreateNetwork bool              `json:"auto_create_network"`
	BillingAccount    string            `json:"billing_account"`
	EffectiveLabels   map[string]string `json:"effective_labels"`
	FolderId          string            `json:"folder_id"`
	Id                string            `json:"id"`
	Labels            map[string]string `json:"labels"`
	Name              string            `json:"name"`
	Number            string            `json:"number"`
	OrgId             string            `json:"org_id"`
	ProjectId         string            `json:"project_id"`
	SkipDelete        bool              `json:"skip_delete"`
	TerraformLabels   map[string]string `json:"terraform_labels"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
