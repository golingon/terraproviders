// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_project

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource google_project.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (gp *DataSource) DataSource() string {
	return "google_project"
}

// LocalName returns the local name for [DataSource].
func (gp *DataSource) LocalName() string {
	return gp.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (gp *DataSource) Configuration() interface{} {
	return gp.Args
}

// Attributes returns the attributes for [DataSource].
func (gp *DataSource) Attributes() dataGoogleProjectAttributes {
	return dataGoogleProjectAttributes{ref: terra.ReferenceDataSource(gp)}
}

// DataArgs contains the configurations for google_project.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProjectId: string, optional
	ProjectId terra.StringValue `hcl:"project_id,attr"`
}

type dataGoogleProjectAttributes struct {
	ref terra.Reference
}

// AutoCreateNetwork returns a reference to field auto_create_network of google_project.
func (gp dataGoogleProjectAttributes) AutoCreateNetwork() terra.BoolValue {
	return terra.ReferenceAsBool(gp.ref.Append("auto_create_network"))
}

// BillingAccount returns a reference to field billing_account of google_project.
func (gp dataGoogleProjectAttributes) BillingAccount() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("billing_account"))
}

// EffectiveLabels returns a reference to field effective_labels of google_project.
func (gp dataGoogleProjectAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gp.ref.Append("effective_labels"))
}

// FolderId returns a reference to field folder_id of google_project.
func (gp dataGoogleProjectAttributes) FolderId() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("folder_id"))
}

// Id returns a reference to field id of google_project.
func (gp dataGoogleProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("id"))
}

// Labels returns a reference to field labels of google_project.
func (gp dataGoogleProjectAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gp.ref.Append("labels"))
}

// Name returns a reference to field name of google_project.
func (gp dataGoogleProjectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("name"))
}

// Number returns a reference to field number of google_project.
func (gp dataGoogleProjectAttributes) Number() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("number"))
}

// OrgId returns a reference to field org_id of google_project.
func (gp dataGoogleProjectAttributes) OrgId() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("org_id"))
}

// ProjectId returns a reference to field project_id of google_project.
func (gp dataGoogleProjectAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("project_id"))
}

// SkipDelete returns a reference to field skip_delete of google_project.
func (gp dataGoogleProjectAttributes) SkipDelete() terra.BoolValue {
	return terra.ReferenceAsBool(gp.ref.Append("skip_delete"))
}

// TerraformLabels returns a reference to field terraform_labels of google_project.
func (gp dataGoogleProjectAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gp.ref.Append("terraform_labels"))
}
