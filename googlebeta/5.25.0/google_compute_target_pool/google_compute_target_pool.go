// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_target_pool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_target_pool.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeTargetPoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gctp *Resource) Type() string {
	return "google_compute_target_pool"
}

// LocalName returns the local name for [Resource].
func (gctp *Resource) LocalName() string {
	return gctp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gctp *Resource) Configuration() interface{} {
	return gctp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gctp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gctp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gctp *Resource) Dependencies() terra.Dependencies {
	return gctp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gctp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gctp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gctp *Resource) Attributes() googleComputeTargetPoolAttributes {
	return googleComputeTargetPoolAttributes{ref: terra.ReferenceResource(gctp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gctp *Resource) ImportState(state io.Reader) error {
	gctp.state = &googleComputeTargetPoolState{}
	if err := json.NewDecoder(state).Decode(gctp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gctp.Type(), gctp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gctp *Resource) State() (*googleComputeTargetPoolState, bool) {
	return gctp.state, gctp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gctp *Resource) StateMust() *googleComputeTargetPoolState {
	if gctp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gctp.Type(), gctp.LocalName()))
	}
	return gctp.state
}

// Args contains the configurations for google_compute_target_pool.
type Args struct {
	// BackupPool: string, optional
	BackupPool terra.StringValue `hcl:"backup_pool,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FailoverRatio: number, optional
	FailoverRatio terra.NumberValue `hcl:"failover_ratio,attr"`
	// HealthChecks: list of string, optional
	HealthChecks terra.ListValue[terra.StringValue] `hcl:"health_checks,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instances: set of string, optional
	Instances terra.SetValue[terra.StringValue] `hcl:"instances,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// SecurityPolicy: string, optional
	SecurityPolicy terra.StringValue `hcl:"security_policy,attr"`
	// SessionAffinity: string, optional
	SessionAffinity terra.StringValue `hcl:"session_affinity,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeTargetPoolAttributes struct {
	ref terra.Reference
}

// BackupPool returns a reference to field backup_pool of google_compute_target_pool.
func (gctp googleComputeTargetPoolAttributes) BackupPool() terra.StringValue {
	return terra.ReferenceAsString(gctp.ref.Append("backup_pool"))
}

// Description returns a reference to field description of google_compute_target_pool.
func (gctp googleComputeTargetPoolAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gctp.ref.Append("description"))
}

// FailoverRatio returns a reference to field failover_ratio of google_compute_target_pool.
func (gctp googleComputeTargetPoolAttributes) FailoverRatio() terra.NumberValue {
	return terra.ReferenceAsNumber(gctp.ref.Append("failover_ratio"))
}

// HealthChecks returns a reference to field health_checks of google_compute_target_pool.
func (gctp googleComputeTargetPoolAttributes) HealthChecks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gctp.ref.Append("health_checks"))
}

// Id returns a reference to field id of google_compute_target_pool.
func (gctp googleComputeTargetPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gctp.ref.Append("id"))
}

// Instances returns a reference to field instances of google_compute_target_pool.
func (gctp googleComputeTargetPoolAttributes) Instances() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gctp.ref.Append("instances"))
}

// Name returns a reference to field name of google_compute_target_pool.
func (gctp googleComputeTargetPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gctp.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_target_pool.
func (gctp googleComputeTargetPoolAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gctp.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_target_pool.
func (gctp googleComputeTargetPoolAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gctp.ref.Append("region"))
}

// SecurityPolicy returns a reference to field security_policy of google_compute_target_pool.
func (gctp googleComputeTargetPoolAttributes) SecurityPolicy() terra.StringValue {
	return terra.ReferenceAsString(gctp.ref.Append("security_policy"))
}

// SelfLink returns a reference to field self_link of google_compute_target_pool.
func (gctp googleComputeTargetPoolAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gctp.ref.Append("self_link"))
}

// SessionAffinity returns a reference to field session_affinity of google_compute_target_pool.
func (gctp googleComputeTargetPoolAttributes) SessionAffinity() terra.StringValue {
	return terra.ReferenceAsString(gctp.ref.Append("session_affinity"))
}

func (gctp googleComputeTargetPoolAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gctp.ref.Append("timeouts"))
}

type googleComputeTargetPoolState struct {
	BackupPool      string         `json:"backup_pool"`
	Description     string         `json:"description"`
	FailoverRatio   float64        `json:"failover_ratio"`
	HealthChecks    []string       `json:"health_checks"`
	Id              string         `json:"id"`
	Instances       []string       `json:"instances"`
	Name            string         `json:"name"`
	Project         string         `json:"project"`
	Region          string         `json:"region"`
	SecurityPolicy  string         `json:"security_policy"`
	SelfLink        string         `json:"self_link"`
	SessionAffinity string         `json:"session_affinity"`
	Timeouts        *TimeoutsState `json:"timeouts"`
}
