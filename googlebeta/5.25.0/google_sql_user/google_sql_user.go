// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_sql_user

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_sql_user.
type Resource struct {
	Name      string
	Args      Args
	state     *googleSqlUserState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsu *Resource) Type() string {
	return "google_sql_user"
}

// LocalName returns the local name for [Resource].
func (gsu *Resource) LocalName() string {
	return gsu.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsu *Resource) Configuration() interface{} {
	return gsu.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsu *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsu)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsu *Resource) Dependencies() terra.Dependencies {
	return gsu.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsu *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsu.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsu *Resource) Attributes() googleSqlUserAttributes {
	return googleSqlUserAttributes{ref: terra.ReferenceResource(gsu)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsu *Resource) ImportState(state io.Reader) error {
	gsu.state = &googleSqlUserState{}
	if err := json.NewDecoder(state).Decode(gsu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsu.Type(), gsu.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsu *Resource) State() (*googleSqlUserState, bool) {
	return gsu.state, gsu.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsu *Resource) StateMust() *googleSqlUserState {
	if gsu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsu.Type(), gsu.LocalName()))
	}
	return gsu.state
}

// Args contains the configurations for google_sql_user.
type Args struct {
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// Host: string, optional
	Host terra.StringValue `hcl:"host,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// PasswordPolicy: optional
	PasswordPolicy *PasswordPolicy `hcl:"password_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleSqlUserAttributes struct {
	ref terra.Reference
}

// DeletionPolicy returns a reference to field deletion_policy of google_sql_user.
func (gsu googleSqlUserAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(gsu.ref.Append("deletion_policy"))
}

// Host returns a reference to field host of google_sql_user.
func (gsu googleSqlUserAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(gsu.ref.Append("host"))
}

// Id returns a reference to field id of google_sql_user.
func (gsu googleSqlUserAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsu.ref.Append("id"))
}

// Instance returns a reference to field instance of google_sql_user.
func (gsu googleSqlUserAttributes) Instance() terra.StringValue {
	return terra.ReferenceAsString(gsu.ref.Append("instance"))
}

// Name returns a reference to field name of google_sql_user.
func (gsu googleSqlUserAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsu.ref.Append("name"))
}

// Password returns a reference to field password of google_sql_user.
func (gsu googleSqlUserAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(gsu.ref.Append("password"))
}

// Project returns a reference to field project of google_sql_user.
func (gsu googleSqlUserAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gsu.ref.Append("project"))
}

// Type returns a reference to field type of google_sql_user.
func (gsu googleSqlUserAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gsu.ref.Append("type"))
}

func (gsu googleSqlUserAttributes) SqlServerUserDetails() terra.ListValue[SqlServerUserDetailsAttributes] {
	return terra.ReferenceAsList[SqlServerUserDetailsAttributes](gsu.ref.Append("sql_server_user_details"))
}

func (gsu googleSqlUserAttributes) PasswordPolicy() terra.ListValue[PasswordPolicyAttributes] {
	return terra.ReferenceAsList[PasswordPolicyAttributes](gsu.ref.Append("password_policy"))
}

func (gsu googleSqlUserAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsu.ref.Append("timeouts"))
}

type googleSqlUserState struct {
	DeletionPolicy       string                      `json:"deletion_policy"`
	Host                 string                      `json:"host"`
	Id                   string                      `json:"id"`
	Instance             string                      `json:"instance"`
	Name                 string                      `json:"name"`
	Password             string                      `json:"password"`
	Project              string                      `json:"project"`
	Type                 string                      `json:"type"`
	SqlServerUserDetails []SqlServerUserDetailsState `json:"sql_server_user_details"`
	PasswordPolicy       []PasswordPolicyState       `json:"password_policy"`
	Timeouts             *TimeoutsState              `json:"timeouts"`
}
