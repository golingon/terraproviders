// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_kms_key_ring_import_job

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type AttestationAttributes struct {
	ref terra.Reference
}

func (a AttestationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AttestationAttributes) InternalWithRef(ref terra.Reference) AttestationAttributes {
	return AttestationAttributes{ref: ref}
}

func (a AttestationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AttestationAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("content"))
}

func (a AttestationAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("format"))
}

type PublicKeyAttributes struct {
	ref terra.Reference
}

func (pk PublicKeyAttributes) InternalRef() (terra.Reference, error) {
	return pk.ref, nil
}

func (pk PublicKeyAttributes) InternalWithRef(ref terra.Reference) PublicKeyAttributes {
	return PublicKeyAttributes{ref: ref}
}

func (pk PublicKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pk.ref.InternalTokens()
}

func (pk PublicKeyAttributes) Pem() terra.StringValue {
	return terra.ReferenceAsString(pk.ref.Append("pem"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type AttestationState struct {
	Content string `json:"content"`
	Format  string `json:"format"`
}

type PublicKeyState struct {
	Pem string `json:"pem"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
