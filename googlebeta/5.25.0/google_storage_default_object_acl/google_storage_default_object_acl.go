// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_storage_default_object_acl

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_storage_default_object_acl.
type Resource struct {
	Name      string
	Args      Args
	state     *googleStorageDefaultObjectAclState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsdoa *Resource) Type() string {
	return "google_storage_default_object_acl"
}

// LocalName returns the local name for [Resource].
func (gsdoa *Resource) LocalName() string {
	return gsdoa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsdoa *Resource) Configuration() interface{} {
	return gsdoa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsdoa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsdoa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsdoa *Resource) Dependencies() terra.Dependencies {
	return gsdoa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsdoa *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsdoa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsdoa *Resource) Attributes() googleStorageDefaultObjectAclAttributes {
	return googleStorageDefaultObjectAclAttributes{ref: terra.ReferenceResource(gsdoa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsdoa *Resource) ImportState(state io.Reader) error {
	gsdoa.state = &googleStorageDefaultObjectAclState{}
	if err := json.NewDecoder(state).Decode(gsdoa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsdoa.Type(), gsdoa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsdoa *Resource) State() (*googleStorageDefaultObjectAclState, bool) {
	return gsdoa.state, gsdoa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsdoa *Resource) StateMust() *googleStorageDefaultObjectAclState {
	if gsdoa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsdoa.Type(), gsdoa.LocalName()))
	}
	return gsdoa.state
}

// Args contains the configurations for google_storage_default_object_acl.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RoleEntity: set of string, optional
	RoleEntity terra.SetValue[terra.StringValue] `hcl:"role_entity,attr"`
}

type googleStorageDefaultObjectAclAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of google_storage_default_object_acl.
func (gsdoa googleStorageDefaultObjectAclAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(gsdoa.ref.Append("bucket"))
}

// Id returns a reference to field id of google_storage_default_object_acl.
func (gsdoa googleStorageDefaultObjectAclAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsdoa.ref.Append("id"))
}

// RoleEntity returns a reference to field role_entity of google_storage_default_object_acl.
func (gsdoa googleStorageDefaultObjectAclAttributes) RoleEntity() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gsdoa.ref.Append("role_entity"))
}

type googleStorageDefaultObjectAclState struct {
	Bucket     string   `json:"bucket"`
	Id         string   `json:"id"`
	RoleEntity []string `json:"role_entity"`
}
