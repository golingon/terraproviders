// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_os_config_os_policy_assignment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_os_config_os_policy_assignment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleOsConfigOsPolicyAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gocopa *Resource) Type() string {
	return "google_os_config_os_policy_assignment"
}

// LocalName returns the local name for [Resource].
func (gocopa *Resource) LocalName() string {
	return gocopa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gocopa *Resource) Configuration() interface{} {
	return gocopa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gocopa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gocopa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gocopa *Resource) Dependencies() terra.Dependencies {
	return gocopa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gocopa *Resource) LifecycleManagement() *terra.Lifecycle {
	return gocopa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gocopa *Resource) Attributes() googleOsConfigOsPolicyAssignmentAttributes {
	return googleOsConfigOsPolicyAssignmentAttributes{ref: terra.ReferenceResource(gocopa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gocopa *Resource) ImportState(state io.Reader) error {
	gocopa.state = &googleOsConfigOsPolicyAssignmentState{}
	if err := json.NewDecoder(state).Decode(gocopa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gocopa.Type(), gocopa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gocopa *Resource) State() (*googleOsConfigOsPolicyAssignmentState, bool) {
	return gocopa.state, gocopa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gocopa *Resource) StateMust() *googleOsConfigOsPolicyAssignmentState {
	if gocopa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gocopa.Type(), gocopa.LocalName()))
	}
	return gocopa.state
}

// Args contains the configurations for google_os_config_os_policy_assignment.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SkipAwaitRollout: bool, optional
	SkipAwaitRollout terra.BoolValue `hcl:"skip_await_rollout,attr"`
	// InstanceFilter: required
	InstanceFilter *InstanceFilter `hcl:"instance_filter,block" validate:"required"`
	// OsPolicies: min=1
	OsPolicies []OsPolicies `hcl:"os_policies,block" validate:"min=1"`
	// Rollout: required
	Rollout *Rollout `hcl:"rollout,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleOsConfigOsPolicyAssignmentAttributes struct {
	ref terra.Reference
}

// Baseline returns a reference to field baseline of google_os_config_os_policy_assignment.
func (gocopa googleOsConfigOsPolicyAssignmentAttributes) Baseline() terra.BoolValue {
	return terra.ReferenceAsBool(gocopa.ref.Append("baseline"))
}

// Deleted returns a reference to field deleted of google_os_config_os_policy_assignment.
func (gocopa googleOsConfigOsPolicyAssignmentAttributes) Deleted() terra.BoolValue {
	return terra.ReferenceAsBool(gocopa.ref.Append("deleted"))
}

// Description returns a reference to field description of google_os_config_os_policy_assignment.
func (gocopa googleOsConfigOsPolicyAssignmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gocopa.ref.Append("description"))
}

// Etag returns a reference to field etag of google_os_config_os_policy_assignment.
func (gocopa googleOsConfigOsPolicyAssignmentAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gocopa.ref.Append("etag"))
}

// Id returns a reference to field id of google_os_config_os_policy_assignment.
func (gocopa googleOsConfigOsPolicyAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gocopa.ref.Append("id"))
}

// Location returns a reference to field location of google_os_config_os_policy_assignment.
func (gocopa googleOsConfigOsPolicyAssignmentAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gocopa.ref.Append("location"))
}

// Name returns a reference to field name of google_os_config_os_policy_assignment.
func (gocopa googleOsConfigOsPolicyAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gocopa.ref.Append("name"))
}

// Project returns a reference to field project of google_os_config_os_policy_assignment.
func (gocopa googleOsConfigOsPolicyAssignmentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gocopa.ref.Append("project"))
}

// Reconciling returns a reference to field reconciling of google_os_config_os_policy_assignment.
func (gocopa googleOsConfigOsPolicyAssignmentAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceAsBool(gocopa.ref.Append("reconciling"))
}

// RevisionCreateTime returns a reference to field revision_create_time of google_os_config_os_policy_assignment.
func (gocopa googleOsConfigOsPolicyAssignmentAttributes) RevisionCreateTime() terra.StringValue {
	return terra.ReferenceAsString(gocopa.ref.Append("revision_create_time"))
}

// RevisionId returns a reference to field revision_id of google_os_config_os_policy_assignment.
func (gocopa googleOsConfigOsPolicyAssignmentAttributes) RevisionId() terra.StringValue {
	return terra.ReferenceAsString(gocopa.ref.Append("revision_id"))
}

// RolloutState returns a reference to field rollout_state of google_os_config_os_policy_assignment.
func (gocopa googleOsConfigOsPolicyAssignmentAttributes) RolloutState() terra.StringValue {
	return terra.ReferenceAsString(gocopa.ref.Append("rollout_state"))
}

// SkipAwaitRollout returns a reference to field skip_await_rollout of google_os_config_os_policy_assignment.
func (gocopa googleOsConfigOsPolicyAssignmentAttributes) SkipAwaitRollout() terra.BoolValue {
	return terra.ReferenceAsBool(gocopa.ref.Append("skip_await_rollout"))
}

// Uid returns a reference to field uid of google_os_config_os_policy_assignment.
func (gocopa googleOsConfigOsPolicyAssignmentAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gocopa.ref.Append("uid"))
}

func (gocopa googleOsConfigOsPolicyAssignmentAttributes) InstanceFilter() terra.ListValue[InstanceFilterAttributes] {
	return terra.ReferenceAsList[InstanceFilterAttributes](gocopa.ref.Append("instance_filter"))
}

func (gocopa googleOsConfigOsPolicyAssignmentAttributes) OsPolicies() terra.ListValue[OsPoliciesAttributes] {
	return terra.ReferenceAsList[OsPoliciesAttributes](gocopa.ref.Append("os_policies"))
}

func (gocopa googleOsConfigOsPolicyAssignmentAttributes) Rollout() terra.ListValue[RolloutAttributes] {
	return terra.ReferenceAsList[RolloutAttributes](gocopa.ref.Append("rollout"))
}

func (gocopa googleOsConfigOsPolicyAssignmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gocopa.ref.Append("timeouts"))
}

type googleOsConfigOsPolicyAssignmentState struct {
	Baseline           bool                  `json:"baseline"`
	Deleted            bool                  `json:"deleted"`
	Description        string                `json:"description"`
	Etag               string                `json:"etag"`
	Id                 string                `json:"id"`
	Location           string                `json:"location"`
	Name               string                `json:"name"`
	Project            string                `json:"project"`
	Reconciling        bool                  `json:"reconciling"`
	RevisionCreateTime string                `json:"revision_create_time"`
	RevisionId         string                `json:"revision_id"`
	RolloutState       string                `json:"rollout_state"`
	SkipAwaitRollout   bool                  `json:"skip_await_rollout"`
	Uid                string                `json:"uid"`
	InstanceFilter     []InstanceFilterState `json:"instance_filter"`
	OsPolicies         []OsPoliciesState     `json:"os_policies"`
	Rollout            []RolloutState        `json:"rollout"`
	Timeouts           *TimeoutsState        `json:"timeouts"`
}
