// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_service_directory_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_service_directory_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *googleServiceDirectoryEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsde *Resource) Type() string {
	return "google_service_directory_endpoint"
}

// LocalName returns the local name for [Resource].
func (gsde *Resource) LocalName() string {
	return gsde.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsde *Resource) Configuration() interface{} {
	return gsde.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsde *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsde)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsde *Resource) Dependencies() terra.Dependencies {
	return gsde.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsde *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsde.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsde *Resource) Attributes() googleServiceDirectoryEndpointAttributes {
	return googleServiceDirectoryEndpointAttributes{ref: terra.ReferenceResource(gsde)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsde *Resource) ImportState(state io.Reader) error {
	gsde.state = &googleServiceDirectoryEndpointState{}
	if err := json.NewDecoder(state).Decode(gsde.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsde.Type(), gsde.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsde *Resource) State() (*googleServiceDirectoryEndpointState, bool) {
	return gsde.state, gsde.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsde *Resource) StateMust() *googleServiceDirectoryEndpointState {
	if gsde.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsde.Type(), gsde.LocalName()))
	}
	return gsde.state
}

// Args contains the configurations for google_service_directory_endpoint.
type Args struct {
	// Address: string, optional
	Address terra.StringValue `hcl:"address,attr"`
	// EndpointId: string, required
	EndpointId terra.StringValue `hcl:"endpoint_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleServiceDirectoryEndpointAttributes struct {
	ref terra.Reference
}

// Address returns a reference to field address of google_service_directory_endpoint.
func (gsde googleServiceDirectoryEndpointAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(gsde.ref.Append("address"))
}

// EndpointId returns a reference to field endpoint_id of google_service_directory_endpoint.
func (gsde googleServiceDirectoryEndpointAttributes) EndpointId() terra.StringValue {
	return terra.ReferenceAsString(gsde.ref.Append("endpoint_id"))
}

// Id returns a reference to field id of google_service_directory_endpoint.
func (gsde googleServiceDirectoryEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsde.ref.Append("id"))
}

// Metadata returns a reference to field metadata of google_service_directory_endpoint.
func (gsde googleServiceDirectoryEndpointAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsde.ref.Append("metadata"))
}

// Name returns a reference to field name of google_service_directory_endpoint.
func (gsde googleServiceDirectoryEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsde.ref.Append("name"))
}

// Network returns a reference to field network of google_service_directory_endpoint.
func (gsde googleServiceDirectoryEndpointAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gsde.ref.Append("network"))
}

// Port returns a reference to field port of google_service_directory_endpoint.
func (gsde googleServiceDirectoryEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(gsde.ref.Append("port"))
}

// Service returns a reference to field service of google_service_directory_endpoint.
func (gsde googleServiceDirectoryEndpointAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(gsde.ref.Append("service"))
}

func (gsde googleServiceDirectoryEndpointAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsde.ref.Append("timeouts"))
}

type googleServiceDirectoryEndpointState struct {
	Address    string            `json:"address"`
	EndpointId string            `json:"endpoint_id"`
	Id         string            `json:"id"`
	Metadata   map[string]string `json:"metadata"`
	Name       string            `json:"name"`
	Network    string            `json:"network"`
	Port       float64           `json:"port"`
	Service    string            `json:"service"`
	Timeouts   *TimeoutsState    `json:"timeouts"`
}
