// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_api_gateway_gateway

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_api_gateway_gateway.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApiGatewayGatewayState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gagg *Resource) Type() string {
	return "google_api_gateway_gateway"
}

// LocalName returns the local name for [Resource].
func (gagg *Resource) LocalName() string {
	return gagg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gagg *Resource) Configuration() interface{} {
	return gagg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gagg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gagg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gagg *Resource) Dependencies() terra.Dependencies {
	return gagg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gagg *Resource) LifecycleManagement() *terra.Lifecycle {
	return gagg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gagg *Resource) Attributes() googleApiGatewayGatewayAttributes {
	return googleApiGatewayGatewayAttributes{ref: terra.ReferenceResource(gagg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gagg *Resource) ImportState(state io.Reader) error {
	gagg.state = &googleApiGatewayGatewayState{}
	if err := json.NewDecoder(state).Decode(gagg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gagg.Type(), gagg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gagg *Resource) State() (*googleApiGatewayGatewayState, bool) {
	return gagg.state, gagg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gagg *Resource) StateMust() *googleApiGatewayGatewayState {
	if gagg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gagg.Type(), gagg.LocalName()))
	}
	return gagg.state
}

// Args contains the configurations for google_api_gateway_gateway.
type Args struct {
	// ApiConfig: string, required
	ApiConfig terra.StringValue `hcl:"api_config,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// GatewayId: string, required
	GatewayId terra.StringValue `hcl:"gateway_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApiGatewayGatewayAttributes struct {
	ref terra.Reference
}

// ApiConfig returns a reference to field api_config of google_api_gateway_gateway.
func (gagg googleApiGatewayGatewayAttributes) ApiConfig() terra.StringValue {
	return terra.ReferenceAsString(gagg.ref.Append("api_config"))
}

// DefaultHostname returns a reference to field default_hostname of google_api_gateway_gateway.
func (gagg googleApiGatewayGatewayAttributes) DefaultHostname() terra.StringValue {
	return terra.ReferenceAsString(gagg.ref.Append("default_hostname"))
}

// DisplayName returns a reference to field display_name of google_api_gateway_gateway.
func (gagg googleApiGatewayGatewayAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gagg.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_api_gateway_gateway.
func (gagg googleApiGatewayGatewayAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gagg.ref.Append("effective_labels"))
}

// GatewayId returns a reference to field gateway_id of google_api_gateway_gateway.
func (gagg googleApiGatewayGatewayAttributes) GatewayId() terra.StringValue {
	return terra.ReferenceAsString(gagg.ref.Append("gateway_id"))
}

// Id returns a reference to field id of google_api_gateway_gateway.
func (gagg googleApiGatewayGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gagg.ref.Append("id"))
}

// Labels returns a reference to field labels of google_api_gateway_gateway.
func (gagg googleApiGatewayGatewayAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gagg.ref.Append("labels"))
}

// Name returns a reference to field name of google_api_gateway_gateway.
func (gagg googleApiGatewayGatewayAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gagg.ref.Append("name"))
}

// Project returns a reference to field project of google_api_gateway_gateway.
func (gagg googleApiGatewayGatewayAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gagg.ref.Append("project"))
}

// Region returns a reference to field region of google_api_gateway_gateway.
func (gagg googleApiGatewayGatewayAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gagg.ref.Append("region"))
}

// TerraformLabels returns a reference to field terraform_labels of google_api_gateway_gateway.
func (gagg googleApiGatewayGatewayAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gagg.ref.Append("terraform_labels"))
}

func (gagg googleApiGatewayGatewayAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gagg.ref.Append("timeouts"))
}

type googleApiGatewayGatewayState struct {
	ApiConfig       string            `json:"api_config"`
	DefaultHostname string            `json:"default_hostname"`
	DisplayName     string            `json:"display_name"`
	EffectiveLabels map[string]string `json:"effective_labels"`
	GatewayId       string            `json:"gateway_id"`
	Id              string            `json:"id"`
	Labels          map[string]string `json:"labels"`
	Name            string            `json:"name"`
	Project         string            `json:"project"`
	Region          string            `json:"region"`
	TerraformLabels map[string]string `json:"terraform_labels"`
	Timeouts        *TimeoutsState    `json:"timeouts"`
}
