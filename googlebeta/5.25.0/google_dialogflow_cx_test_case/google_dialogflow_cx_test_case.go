// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dialogflow_cx_test_case

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dialogflow_cx_test_case.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDialogflowCxTestCaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdctc *Resource) Type() string {
	return "google_dialogflow_cx_test_case"
}

// LocalName returns the local name for [Resource].
func (gdctc *Resource) LocalName() string {
	return gdctc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdctc *Resource) Configuration() interface{} {
	return gdctc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdctc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdctc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdctc *Resource) Dependencies() terra.Dependencies {
	return gdctc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdctc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdctc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdctc *Resource) Attributes() googleDialogflowCxTestCaseAttributes {
	return googleDialogflowCxTestCaseAttributes{ref: terra.ReferenceResource(gdctc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdctc *Resource) ImportState(state io.Reader) error {
	gdctc.state = &googleDialogflowCxTestCaseState{}
	if err := json.NewDecoder(state).Decode(gdctc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdctc.Type(), gdctc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdctc *Resource) State() (*googleDialogflowCxTestCaseState, bool) {
	return gdctc.state, gdctc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdctc *Resource) StateMust() *googleDialogflowCxTestCaseState {
	if gdctc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdctc.Type(), gdctc.LocalName()))
	}
	return gdctc.state
}

// Args contains the configurations for google_dialogflow_cx_test_case.
type Args struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Notes: string, optional
	Notes terra.StringValue `hcl:"notes,attr"`
	// Parent: string, optional
	Parent terra.StringValue `hcl:"parent,attr"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
	// TestCaseConversationTurns: min=0
	TestCaseConversationTurns []TestCaseConversationTurns `hcl:"test_case_conversation_turns,block" validate:"min=0"`
	// TestConfig: optional
	TestConfig *TestConfig `hcl:"test_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDialogflowCxTestCaseAttributes struct {
	ref terra.Reference
}

// CreationTime returns a reference to field creation_time of google_dialogflow_cx_test_case.
func (gdctc googleDialogflowCxTestCaseAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(gdctc.ref.Append("creation_time"))
}

// DisplayName returns a reference to field display_name of google_dialogflow_cx_test_case.
func (gdctc googleDialogflowCxTestCaseAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdctc.ref.Append("display_name"))
}

// Id returns a reference to field id of google_dialogflow_cx_test_case.
func (gdctc googleDialogflowCxTestCaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdctc.ref.Append("id"))
}

// Name returns a reference to field name of google_dialogflow_cx_test_case.
func (gdctc googleDialogflowCxTestCaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdctc.ref.Append("name"))
}

// Notes returns a reference to field notes of google_dialogflow_cx_test_case.
func (gdctc googleDialogflowCxTestCaseAttributes) Notes() terra.StringValue {
	return terra.ReferenceAsString(gdctc.ref.Append("notes"))
}

// Parent returns a reference to field parent of google_dialogflow_cx_test_case.
func (gdctc googleDialogflowCxTestCaseAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gdctc.ref.Append("parent"))
}

// Tags returns a reference to field tags of google_dialogflow_cx_test_case.
func (gdctc googleDialogflowCxTestCaseAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gdctc.ref.Append("tags"))
}

func (gdctc googleDialogflowCxTestCaseAttributes) LastTestResult() terra.ListValue[LastTestResultAttributes] {
	return terra.ReferenceAsList[LastTestResultAttributes](gdctc.ref.Append("last_test_result"))
}

func (gdctc googleDialogflowCxTestCaseAttributes) TestCaseConversationTurns() terra.ListValue[TestCaseConversationTurnsAttributes] {
	return terra.ReferenceAsList[TestCaseConversationTurnsAttributes](gdctc.ref.Append("test_case_conversation_turns"))
}

func (gdctc googleDialogflowCxTestCaseAttributes) TestConfig() terra.ListValue[TestConfigAttributes] {
	return terra.ReferenceAsList[TestConfigAttributes](gdctc.ref.Append("test_config"))
}

func (gdctc googleDialogflowCxTestCaseAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdctc.ref.Append("timeouts"))
}

type googleDialogflowCxTestCaseState struct {
	CreationTime              string                           `json:"creation_time"`
	DisplayName               string                           `json:"display_name"`
	Id                        string                           `json:"id"`
	Name                      string                           `json:"name"`
	Notes                     string                           `json:"notes"`
	Parent                    string                           `json:"parent"`
	Tags                      []string                         `json:"tags"`
	LastTestResult            []LastTestResultState            `json:"last_test_result"`
	TestCaseConversationTurns []TestCaseConversationTurnsState `json:"test_case_conversation_turns"`
	TestConfig                []TestConfigState                `json:"test_config"`
	Timeouts                  *TimeoutsState                   `json:"timeouts"`
}
