// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_ml_engine_model

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_ml_engine_model.
type Resource struct {
	Name      string
	Args      Args
	state     *googleMlEngineModelState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gmem *Resource) Type() string {
	return "google_ml_engine_model"
}

// LocalName returns the local name for [Resource].
func (gmem *Resource) LocalName() string {
	return gmem.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gmem *Resource) Configuration() interface{} {
	return gmem.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gmem *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gmem)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gmem *Resource) Dependencies() terra.Dependencies {
	return gmem.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gmem *Resource) LifecycleManagement() *terra.Lifecycle {
	return gmem.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gmem *Resource) Attributes() googleMlEngineModelAttributes {
	return googleMlEngineModelAttributes{ref: terra.ReferenceResource(gmem)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gmem *Resource) ImportState(state io.Reader) error {
	gmem.state = &googleMlEngineModelState{}
	if err := json.NewDecoder(state).Decode(gmem.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gmem.Type(), gmem.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gmem *Resource) State() (*googleMlEngineModelState, bool) {
	return gmem.state, gmem.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gmem *Resource) StateMust() *googleMlEngineModelState {
	if gmem.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gmem.Type(), gmem.LocalName()))
	}
	return gmem.state
}

// Args contains the configurations for google_ml_engine_model.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OnlinePredictionConsoleLogging: bool, optional
	OnlinePredictionConsoleLogging terra.BoolValue `hcl:"online_prediction_console_logging,attr"`
	// OnlinePredictionLogging: bool, optional
	OnlinePredictionLogging terra.BoolValue `hcl:"online_prediction_logging,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Regions: list of string, optional
	Regions terra.ListValue[terra.StringValue] `hcl:"regions,attr"`
	// DefaultVersion: optional
	DefaultVersion *DefaultVersion `hcl:"default_version,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleMlEngineModelAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_ml_engine_model.
func (gmem googleMlEngineModelAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gmem.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_ml_engine_model.
func (gmem googleMlEngineModelAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gmem.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_ml_engine_model.
func (gmem googleMlEngineModelAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gmem.ref.Append("id"))
}

// Labels returns a reference to field labels of google_ml_engine_model.
func (gmem googleMlEngineModelAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gmem.ref.Append("labels"))
}

// Name returns a reference to field name of google_ml_engine_model.
func (gmem googleMlEngineModelAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gmem.ref.Append("name"))
}

// OnlinePredictionConsoleLogging returns a reference to field online_prediction_console_logging of google_ml_engine_model.
func (gmem googleMlEngineModelAttributes) OnlinePredictionConsoleLogging() terra.BoolValue {
	return terra.ReferenceAsBool(gmem.ref.Append("online_prediction_console_logging"))
}

// OnlinePredictionLogging returns a reference to field online_prediction_logging of google_ml_engine_model.
func (gmem googleMlEngineModelAttributes) OnlinePredictionLogging() terra.BoolValue {
	return terra.ReferenceAsBool(gmem.ref.Append("online_prediction_logging"))
}

// Project returns a reference to field project of google_ml_engine_model.
func (gmem googleMlEngineModelAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gmem.ref.Append("project"))
}

// Regions returns a reference to field regions of google_ml_engine_model.
func (gmem googleMlEngineModelAttributes) Regions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gmem.ref.Append("regions"))
}

// TerraformLabels returns a reference to field terraform_labels of google_ml_engine_model.
func (gmem googleMlEngineModelAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gmem.ref.Append("terraform_labels"))
}

func (gmem googleMlEngineModelAttributes) DefaultVersion() terra.ListValue[DefaultVersionAttributes] {
	return terra.ReferenceAsList[DefaultVersionAttributes](gmem.ref.Append("default_version"))
}

func (gmem googleMlEngineModelAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gmem.ref.Append("timeouts"))
}

type googleMlEngineModelState struct {
	Description                    string                `json:"description"`
	EffectiveLabels                map[string]string     `json:"effective_labels"`
	Id                             string                `json:"id"`
	Labels                         map[string]string     `json:"labels"`
	Name                           string                `json:"name"`
	OnlinePredictionConsoleLogging bool                  `json:"online_prediction_console_logging"`
	OnlinePredictionLogging        bool                  `json:"online_prediction_logging"`
	Project                        string                `json:"project"`
	Regions                        []string              `json:"regions"`
	TerraformLabels                map[string]string     `json:"terraform_labels"`
	DefaultVersion                 []DefaultVersionState `json:"default_version"`
	Timeouts                       *TimeoutsState        `json:"timeouts"`
}
