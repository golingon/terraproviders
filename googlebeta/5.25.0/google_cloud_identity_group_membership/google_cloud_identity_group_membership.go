// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloud_identity_group_membership

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_cloud_identity_group_membership.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCloudIdentityGroupMembershipState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcigm *Resource) Type() string {
	return "google_cloud_identity_group_membership"
}

// LocalName returns the local name for [Resource].
func (gcigm *Resource) LocalName() string {
	return gcigm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcigm *Resource) Configuration() interface{} {
	return gcigm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcigm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcigm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcigm *Resource) Dependencies() terra.Dependencies {
	return gcigm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcigm *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcigm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcigm *Resource) Attributes() googleCloudIdentityGroupMembershipAttributes {
	return googleCloudIdentityGroupMembershipAttributes{ref: terra.ReferenceResource(gcigm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcigm *Resource) ImportState(state io.Reader) error {
	gcigm.state = &googleCloudIdentityGroupMembershipState{}
	if err := json.NewDecoder(state).Decode(gcigm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcigm.Type(), gcigm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcigm *Resource) State() (*googleCloudIdentityGroupMembershipState, bool) {
	return gcigm.state, gcigm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcigm *Resource) StateMust() *googleCloudIdentityGroupMembershipState {
	if gcigm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcigm.Type(), gcigm.LocalName()))
	}
	return gcigm.state
}

// Args contains the configurations for google_cloud_identity_group_membership.
type Args struct {
	// Group: string, required
	Group terra.StringValue `hcl:"group,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MemberKey: optional
	MemberKey *MemberKey `hcl:"member_key,block"`
	// PreferredMemberKey: optional
	PreferredMemberKey *PreferredMemberKey `hcl:"preferred_member_key,block"`
	// Roles: min=1
	Roles []Roles `hcl:"roles,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleCloudIdentityGroupMembershipAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_cloud_identity_group_membership.
func (gcigm googleCloudIdentityGroupMembershipAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("create_time"))
}

// Group returns a reference to field group of google_cloud_identity_group_membership.
func (gcigm googleCloudIdentityGroupMembershipAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("group"))
}

// Id returns a reference to field id of google_cloud_identity_group_membership.
func (gcigm googleCloudIdentityGroupMembershipAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("id"))
}

// Name returns a reference to field name of google_cloud_identity_group_membership.
func (gcigm googleCloudIdentityGroupMembershipAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("name"))
}

// Type returns a reference to field type of google_cloud_identity_group_membership.
func (gcigm googleCloudIdentityGroupMembershipAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("type"))
}

// UpdateTime returns a reference to field update_time of google_cloud_identity_group_membership.
func (gcigm googleCloudIdentityGroupMembershipAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("update_time"))
}

func (gcigm googleCloudIdentityGroupMembershipAttributes) MemberKey() terra.ListValue[MemberKeyAttributes] {
	return terra.ReferenceAsList[MemberKeyAttributes](gcigm.ref.Append("member_key"))
}

func (gcigm googleCloudIdentityGroupMembershipAttributes) PreferredMemberKey() terra.ListValue[PreferredMemberKeyAttributes] {
	return terra.ReferenceAsList[PreferredMemberKeyAttributes](gcigm.ref.Append("preferred_member_key"))
}

func (gcigm googleCloudIdentityGroupMembershipAttributes) Roles() terra.SetValue[RolesAttributes] {
	return terra.ReferenceAsSet[RolesAttributes](gcigm.ref.Append("roles"))
}

func (gcigm googleCloudIdentityGroupMembershipAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcigm.ref.Append("timeouts"))
}

type googleCloudIdentityGroupMembershipState struct {
	CreateTime         string                    `json:"create_time"`
	Group              string                    `json:"group"`
	Id                 string                    `json:"id"`
	Name               string                    `json:"name"`
	Type               string                    `json:"type"`
	UpdateTime         string                    `json:"update_time"`
	MemberKey          []MemberKeyState          `json:"member_key"`
	PreferredMemberKey []PreferredMemberKeyState `json:"preferred_member_key"`
	Roles              []RolesState              `json:"roles"`
	Timeouts           *TimeoutsState            `json:"timeouts"`
}
