// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_node_template

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_node_template.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeNodeTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcnt *Resource) Type() string {
	return "google_compute_node_template"
}

// LocalName returns the local name for [Resource].
func (gcnt *Resource) LocalName() string {
	return gcnt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcnt *Resource) Configuration() interface{} {
	return gcnt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcnt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcnt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcnt *Resource) Dependencies() terra.Dependencies {
	return gcnt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcnt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcnt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcnt *Resource) Attributes() googleComputeNodeTemplateAttributes {
	return googleComputeNodeTemplateAttributes{ref: terra.ReferenceResource(gcnt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcnt *Resource) ImportState(state io.Reader) error {
	gcnt.state = &googleComputeNodeTemplateState{}
	if err := json.NewDecoder(state).Decode(gcnt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcnt.Type(), gcnt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcnt *Resource) State() (*googleComputeNodeTemplateState, bool) {
	return gcnt.state, gcnt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcnt *Resource) StateMust() *googleComputeNodeTemplateState {
	if gcnt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcnt.Type(), gcnt.LocalName()))
	}
	return gcnt.state
}

// Args contains the configurations for google_compute_node_template.
type Args struct {
	// CpuOvercommitType: string, optional
	CpuOvercommitType terra.StringValue `hcl:"cpu_overcommit_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NodeAffinityLabels: map of string, optional
	NodeAffinityLabels terra.MapValue[terra.StringValue] `hcl:"node_affinity_labels,attr"`
	// NodeType: string, optional
	NodeType terra.StringValue `hcl:"node_type,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// NodeTypeFlexibility: optional
	NodeTypeFlexibility *NodeTypeFlexibility `hcl:"node_type_flexibility,block"`
	// ServerBinding: optional
	ServerBinding *ServerBinding `hcl:"server_binding,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeNodeTemplateAttributes struct {
	ref terra.Reference
}

// CpuOvercommitType returns a reference to field cpu_overcommit_type of google_compute_node_template.
func (gcnt googleComputeNodeTemplateAttributes) CpuOvercommitType() terra.StringValue {
	return terra.ReferenceAsString(gcnt.ref.Append("cpu_overcommit_type"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_node_template.
func (gcnt googleComputeNodeTemplateAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcnt.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_node_template.
func (gcnt googleComputeNodeTemplateAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcnt.ref.Append("description"))
}

// Id returns a reference to field id of google_compute_node_template.
func (gcnt googleComputeNodeTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcnt.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_node_template.
func (gcnt googleComputeNodeTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcnt.ref.Append("name"))
}

// NodeAffinityLabels returns a reference to field node_affinity_labels of google_compute_node_template.
func (gcnt googleComputeNodeTemplateAttributes) NodeAffinityLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcnt.ref.Append("node_affinity_labels"))
}

// NodeType returns a reference to field node_type of google_compute_node_template.
func (gcnt googleComputeNodeTemplateAttributes) NodeType() terra.StringValue {
	return terra.ReferenceAsString(gcnt.ref.Append("node_type"))
}

// Project returns a reference to field project of google_compute_node_template.
func (gcnt googleComputeNodeTemplateAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcnt.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_node_template.
func (gcnt googleComputeNodeTemplateAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcnt.ref.Append("region"))
}

// SelfLink returns a reference to field self_link of google_compute_node_template.
func (gcnt googleComputeNodeTemplateAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcnt.ref.Append("self_link"))
}

func (gcnt googleComputeNodeTemplateAttributes) NodeTypeFlexibility() terra.ListValue[NodeTypeFlexibilityAttributes] {
	return terra.ReferenceAsList[NodeTypeFlexibilityAttributes](gcnt.ref.Append("node_type_flexibility"))
}

func (gcnt googleComputeNodeTemplateAttributes) ServerBinding() terra.ListValue[ServerBindingAttributes] {
	return terra.ReferenceAsList[ServerBindingAttributes](gcnt.ref.Append("server_binding"))
}

func (gcnt googleComputeNodeTemplateAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcnt.ref.Append("timeouts"))
}

type googleComputeNodeTemplateState struct {
	CpuOvercommitType   string                     `json:"cpu_overcommit_type"`
	CreationTimestamp   string                     `json:"creation_timestamp"`
	Description         string                     `json:"description"`
	Id                  string                     `json:"id"`
	Name                string                     `json:"name"`
	NodeAffinityLabels  map[string]string          `json:"node_affinity_labels"`
	NodeType            string                     `json:"node_type"`
	Project             string                     `json:"project"`
	Region              string                     `json:"region"`
	SelfLink            string                     `json:"self_link"`
	NodeTypeFlexibility []NodeTypeFlexibilityState `json:"node_type_flexibility"`
	ServerBinding       []ServerBindingState       `json:"server_binding"`
	Timeouts            *TimeoutsState             `json:"timeouts"`
}
