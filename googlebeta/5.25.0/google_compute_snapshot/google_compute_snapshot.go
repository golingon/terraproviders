// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_snapshot

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_snapshot.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeSnapshotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcs *Resource) Type() string {
	return "google_compute_snapshot"
}

// LocalName returns the local name for [Resource].
func (gcs *Resource) LocalName() string {
	return gcs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcs *Resource) Configuration() interface{} {
	return gcs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcs *Resource) Dependencies() terra.Dependencies {
	return gcs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcs *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcs *Resource) Attributes() googleComputeSnapshotAttributes {
	return googleComputeSnapshotAttributes{ref: terra.ReferenceResource(gcs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcs *Resource) ImportState(state io.Reader) error {
	gcs.state = &googleComputeSnapshotState{}
	if err := json.NewDecoder(state).Decode(gcs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcs.Type(), gcs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcs *Resource) State() (*googleComputeSnapshotState, bool) {
	return gcs.state, gcs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcs *Resource) StateMust() *googleComputeSnapshotState {
	if gcs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcs.Type(), gcs.LocalName()))
	}
	return gcs.state
}

// Args contains the configurations for google_compute_snapshot.
type Args struct {
	// ChainName: string, optional
	ChainName terra.StringValue `hcl:"chain_name,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SourceDisk: string, required
	SourceDisk terra.StringValue `hcl:"source_disk,attr" validate:"required"`
	// StorageLocations: list of string, optional
	StorageLocations terra.ListValue[terra.StringValue] `hcl:"storage_locations,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// SnapshotEncryptionKey: optional
	SnapshotEncryptionKey *SnapshotEncryptionKey `hcl:"snapshot_encryption_key,block"`
	// SourceDiskEncryptionKey: optional
	SourceDiskEncryptionKey *SourceDiskEncryptionKey `hcl:"source_disk_encryption_key,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeSnapshotAttributes struct {
	ref terra.Reference
}

// ChainName returns a reference to field chain_name of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) ChainName() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("chain_name"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("description"))
}

// DiskSizeGb returns a reference to field disk_size_gb of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(gcs.ref.Append("disk_size_gb"))
}

// EffectiveLabels returns a reference to field effective_labels of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcs.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("id"))
}

// LabelFingerprint returns a reference to field label_fingerprint of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) LabelFingerprint() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("label_fingerprint"))
}

// Labels returns a reference to field labels of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcs.ref.Append("labels"))
}

// Licenses returns a reference to field licenses of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) Licenses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcs.ref.Append("licenses"))
}

// Name returns a reference to field name of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("self_link"))
}

// SnapshotId returns a reference to field snapshot_id of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) SnapshotId() terra.NumberValue {
	return terra.ReferenceAsNumber(gcs.ref.Append("snapshot_id"))
}

// SourceDisk returns a reference to field source_disk of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) SourceDisk() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("source_disk"))
}

// StorageBytes returns a reference to field storage_bytes of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) StorageBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(gcs.ref.Append("storage_bytes"))
}

// StorageLocations returns a reference to field storage_locations of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) StorageLocations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcs.ref.Append("storage_locations"))
}

// TerraformLabels returns a reference to field terraform_labels of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcs.ref.Append("terraform_labels"))
}

// Zone returns a reference to field zone of google_compute_snapshot.
func (gcs googleComputeSnapshotAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("zone"))
}

func (gcs googleComputeSnapshotAttributes) SnapshotEncryptionKey() terra.ListValue[SnapshotEncryptionKeyAttributes] {
	return terra.ReferenceAsList[SnapshotEncryptionKeyAttributes](gcs.ref.Append("snapshot_encryption_key"))
}

func (gcs googleComputeSnapshotAttributes) SourceDiskEncryptionKey() terra.ListValue[SourceDiskEncryptionKeyAttributes] {
	return terra.ReferenceAsList[SourceDiskEncryptionKeyAttributes](gcs.ref.Append("source_disk_encryption_key"))
}

func (gcs googleComputeSnapshotAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcs.ref.Append("timeouts"))
}

type googleComputeSnapshotState struct {
	ChainName               string                         `json:"chain_name"`
	CreationTimestamp       string                         `json:"creation_timestamp"`
	Description             string                         `json:"description"`
	DiskSizeGb              float64                        `json:"disk_size_gb"`
	EffectiveLabels         map[string]string              `json:"effective_labels"`
	Id                      string                         `json:"id"`
	LabelFingerprint        string                         `json:"label_fingerprint"`
	Labels                  map[string]string              `json:"labels"`
	Licenses                []string                       `json:"licenses"`
	Name                    string                         `json:"name"`
	Project                 string                         `json:"project"`
	SelfLink                string                         `json:"self_link"`
	SnapshotId              float64                        `json:"snapshot_id"`
	SourceDisk              string                         `json:"source_disk"`
	StorageBytes            float64                        `json:"storage_bytes"`
	StorageLocations        []string                       `json:"storage_locations"`
	TerraformLabels         map[string]string              `json:"terraform_labels"`
	Zone                    string                         `json:"zone"`
	SnapshotEncryptionKey   []SnapshotEncryptionKeyState   `json:"snapshot_encryption_key"`
	SourceDiskEncryptionKey []SourceDiskEncryptionKeyState `json:"source_disk_encryption_key"`
	Timeouts                *TimeoutsState                 `json:"timeouts"`
}
