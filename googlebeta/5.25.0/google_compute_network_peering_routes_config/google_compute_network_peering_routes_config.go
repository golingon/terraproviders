// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_network_peering_routes_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_network_peering_routes_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeNetworkPeeringRoutesConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcnprc *Resource) Type() string {
	return "google_compute_network_peering_routes_config"
}

// LocalName returns the local name for [Resource].
func (gcnprc *Resource) LocalName() string {
	return gcnprc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcnprc *Resource) Configuration() interface{} {
	return gcnprc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcnprc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcnprc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcnprc *Resource) Dependencies() terra.Dependencies {
	return gcnprc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcnprc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcnprc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcnprc *Resource) Attributes() googleComputeNetworkPeeringRoutesConfigAttributes {
	return googleComputeNetworkPeeringRoutesConfigAttributes{ref: terra.ReferenceResource(gcnprc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcnprc *Resource) ImportState(state io.Reader) error {
	gcnprc.state = &googleComputeNetworkPeeringRoutesConfigState{}
	if err := json.NewDecoder(state).Decode(gcnprc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcnprc.Type(), gcnprc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcnprc *Resource) State() (*googleComputeNetworkPeeringRoutesConfigState, bool) {
	return gcnprc.state, gcnprc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcnprc *Resource) StateMust() *googleComputeNetworkPeeringRoutesConfigState {
	if gcnprc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcnprc.Type(), gcnprc.LocalName()))
	}
	return gcnprc.state
}

// Args contains the configurations for google_compute_network_peering_routes_config.
type Args struct {
	// ExportCustomRoutes: bool, required
	ExportCustomRoutes terra.BoolValue `hcl:"export_custom_routes,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImportCustomRoutes: bool, required
	ImportCustomRoutes terra.BoolValue `hcl:"import_custom_routes,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Peering: string, required
	Peering terra.StringValue `hcl:"peering,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeNetworkPeeringRoutesConfigAttributes struct {
	ref terra.Reference
}

// ExportCustomRoutes returns a reference to field export_custom_routes of google_compute_network_peering_routes_config.
func (gcnprc googleComputeNetworkPeeringRoutesConfigAttributes) ExportCustomRoutes() terra.BoolValue {
	return terra.ReferenceAsBool(gcnprc.ref.Append("export_custom_routes"))
}

// Id returns a reference to field id of google_compute_network_peering_routes_config.
func (gcnprc googleComputeNetworkPeeringRoutesConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcnprc.ref.Append("id"))
}

// ImportCustomRoutes returns a reference to field import_custom_routes of google_compute_network_peering_routes_config.
func (gcnprc googleComputeNetworkPeeringRoutesConfigAttributes) ImportCustomRoutes() terra.BoolValue {
	return terra.ReferenceAsBool(gcnprc.ref.Append("import_custom_routes"))
}

// Network returns a reference to field network of google_compute_network_peering_routes_config.
func (gcnprc googleComputeNetworkPeeringRoutesConfigAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gcnprc.ref.Append("network"))
}

// Peering returns a reference to field peering of google_compute_network_peering_routes_config.
func (gcnprc googleComputeNetworkPeeringRoutesConfigAttributes) Peering() terra.StringValue {
	return terra.ReferenceAsString(gcnprc.ref.Append("peering"))
}

// Project returns a reference to field project of google_compute_network_peering_routes_config.
func (gcnprc googleComputeNetworkPeeringRoutesConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcnprc.ref.Append("project"))
}

func (gcnprc googleComputeNetworkPeeringRoutesConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcnprc.ref.Append("timeouts"))
}

type googleComputeNetworkPeeringRoutesConfigState struct {
	ExportCustomRoutes bool           `json:"export_custom_routes"`
	Id                 string         `json:"id"`
	ImportCustomRoutes bool           `json:"import_custom_routes"`
	Network            string         `json:"network"`
	Peering            string         `json:"peering"`
	Project            string         `json:"project"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
