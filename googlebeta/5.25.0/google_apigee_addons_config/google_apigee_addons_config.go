// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apigee_addons_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_apigee_addons_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApigeeAddonsConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gaac *Resource) Type() string {
	return "google_apigee_addons_config"
}

// LocalName returns the local name for [Resource].
func (gaac *Resource) LocalName() string {
	return gaac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gaac *Resource) Configuration() interface{} {
	return gaac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gaac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gaac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gaac *Resource) Dependencies() terra.Dependencies {
	return gaac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gaac *Resource) LifecycleManagement() *terra.Lifecycle {
	return gaac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gaac *Resource) Attributes() googleApigeeAddonsConfigAttributes {
	return googleApigeeAddonsConfigAttributes{ref: terra.ReferenceResource(gaac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gaac *Resource) ImportState(state io.Reader) error {
	gaac.state = &googleApigeeAddonsConfigState{}
	if err := json.NewDecoder(state).Decode(gaac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gaac.Type(), gaac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gaac *Resource) State() (*googleApigeeAddonsConfigState, bool) {
	return gaac.state, gaac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gaac *Resource) StateMust() *googleApigeeAddonsConfigState {
	if gaac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gaac.Type(), gaac.LocalName()))
	}
	return gaac.state
}

// Args contains the configurations for google_apigee_addons_config.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Org: string, required
	Org terra.StringValue `hcl:"org,attr" validate:"required"`
	// AddonsConfig: optional
	AddonsConfig *AddonsConfig `hcl:"addons_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApigeeAddonsConfigAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_apigee_addons_config.
func (gaac googleApigeeAddonsConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gaac.ref.Append("id"))
}

// Org returns a reference to field org of google_apigee_addons_config.
func (gaac googleApigeeAddonsConfigAttributes) Org() terra.StringValue {
	return terra.ReferenceAsString(gaac.ref.Append("org"))
}

func (gaac googleApigeeAddonsConfigAttributes) AddonsConfig() terra.ListValue[AddonsConfigAttributes] {
	return terra.ReferenceAsList[AddonsConfigAttributes](gaac.ref.Append("addons_config"))
}

func (gaac googleApigeeAddonsConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gaac.ref.Append("timeouts"))
}

type googleApigeeAddonsConfigState struct {
	Id           string              `json:"id"`
	Org          string              `json:"org"`
	AddonsConfig []AddonsConfigState `json:"addons_config"`
	Timeouts     *TimeoutsState      `json:"timeouts"`
}
