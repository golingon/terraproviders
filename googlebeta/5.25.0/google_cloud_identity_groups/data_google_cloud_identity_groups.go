// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloud_identity_groups

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource google_cloud_identity_groups.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (gcig *DataSource) DataSource() string {
	return "google_cloud_identity_groups"
}

// LocalName returns the local name for [DataSource].
func (gcig *DataSource) LocalName() string {
	return gcig.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (gcig *DataSource) Configuration() interface{} {
	return gcig.Args
}

// Attributes returns the attributes for [DataSource].
func (gcig *DataSource) Attributes() dataGoogleCloudIdentityGroupsAttributes {
	return dataGoogleCloudIdentityGroupsAttributes{ref: terra.ReferenceDataSource(gcig)}
}

// DataArgs contains the configurations for google_cloud_identity_groups.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
}

type dataGoogleCloudIdentityGroupsAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_cloud_identity_groups.
func (gcig dataGoogleCloudIdentityGroupsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("id"))
}

// Parent returns a reference to field parent of google_cloud_identity_groups.
func (gcig dataGoogleCloudIdentityGroupsAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("parent"))
}

func (gcig dataGoogleCloudIdentityGroupsAttributes) Groups() terra.ListValue[DataGroupsAttributes] {
	return terra.ReferenceAsList[DataGroupsAttributes](gcig.ref.Append("groups"))
}
