// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_pubsub_topic

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource google_pubsub_topic.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (gpt *DataSource) DataSource() string {
	return "google_pubsub_topic"
}

// LocalName returns the local name for [DataSource].
func (gpt *DataSource) LocalName() string {
	return gpt.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (gpt *DataSource) Configuration() interface{} {
	return gpt.Args
}

// Attributes returns the attributes for [DataSource].
func (gpt *DataSource) Attributes() dataGooglePubsubTopicAttributes {
	return dataGooglePubsubTopicAttributes{ref: terra.ReferenceDataSource(gpt)}
}

// DataArgs contains the configurations for google_pubsub_topic.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}

type dataGooglePubsubTopicAttributes struct {
	ref terra.Reference
}

// EffectiveLabels returns a reference to field effective_labels of google_pubsub_topic.
func (gpt dataGooglePubsubTopicAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpt.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_pubsub_topic.
func (gpt dataGooglePubsubTopicAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gpt.ref.Append("id"))
}

// KmsKeyName returns a reference to field kms_key_name of google_pubsub_topic.
func (gpt dataGooglePubsubTopicAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(gpt.ref.Append("kms_key_name"))
}

// Labels returns a reference to field labels of google_pubsub_topic.
func (gpt dataGooglePubsubTopicAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpt.ref.Append("labels"))
}

// MessageRetentionDuration returns a reference to field message_retention_duration of google_pubsub_topic.
func (gpt dataGooglePubsubTopicAttributes) MessageRetentionDuration() terra.StringValue {
	return terra.ReferenceAsString(gpt.ref.Append("message_retention_duration"))
}

// Name returns a reference to field name of google_pubsub_topic.
func (gpt dataGooglePubsubTopicAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gpt.ref.Append("name"))
}

// Project returns a reference to field project of google_pubsub_topic.
func (gpt dataGooglePubsubTopicAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gpt.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_pubsub_topic.
func (gpt dataGooglePubsubTopicAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpt.ref.Append("terraform_labels"))
}

func (gpt dataGooglePubsubTopicAttributes) IngestionDataSourceSettings() terra.ListValue[DataIngestionDataSourceSettingsAttributes] {
	return terra.ReferenceAsList[DataIngestionDataSourceSettingsAttributes](gpt.ref.Append("ingestion_data_source_settings"))
}

func (gpt dataGooglePubsubTopicAttributes) MessageStoragePolicy() terra.ListValue[DataMessageStoragePolicyAttributes] {
	return terra.ReferenceAsList[DataMessageStoragePolicyAttributes](gpt.ref.Append("message_storage_policy"))
}

func (gpt dataGooglePubsubTopicAttributes) SchemaSettings() terra.ListValue[DataSchemaSettingsAttributes] {
	return terra.ReferenceAsList[DataSchemaSettingsAttributes](gpt.ref.Append("schema_settings"))
}
