// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_privateca_ca_pool

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type IssuancePolicy struct {
	// MaximumLifetime: string, optional
	MaximumLifetime terra.StringValue `hcl:"maximum_lifetime,attr"`
	// IssuancePolicyAllowedIssuanceModes: optional
	AllowedIssuanceModes *IssuancePolicyAllowedIssuanceModes `hcl:"allowed_issuance_modes,block"`
	// IssuancePolicyAllowedKeyTypes: min=0
	AllowedKeyTypes []IssuancePolicyAllowedKeyTypes `hcl:"allowed_key_types,block" validate:"min=0"`
	// IssuancePolicyBaselineValues: optional
	BaselineValues *IssuancePolicyBaselineValues `hcl:"baseline_values,block"`
	// IssuancePolicyIdentityConstraints: optional
	IdentityConstraints *IssuancePolicyIdentityConstraints `hcl:"identity_constraints,block"`
}

type IssuancePolicyAllowedIssuanceModes struct {
	// AllowConfigBasedIssuance: bool, required
	AllowConfigBasedIssuance terra.BoolValue `hcl:"allow_config_based_issuance,attr" validate:"required"`
	// AllowCsrBasedIssuance: bool, required
	AllowCsrBasedIssuance terra.BoolValue `hcl:"allow_csr_based_issuance,attr" validate:"required"`
}

type IssuancePolicyAllowedKeyTypes struct {
	// IssuancePolicyAllowedKeyTypesEllipticCurve: optional
	EllipticCurve *IssuancePolicyAllowedKeyTypesEllipticCurve `hcl:"elliptic_curve,block"`
	// IssuancePolicyAllowedKeyTypesRsa: optional
	Rsa *IssuancePolicyAllowedKeyTypesRsa `hcl:"rsa,block"`
}

type IssuancePolicyAllowedKeyTypesEllipticCurve struct {
	// SignatureAlgorithm: string, required
	SignatureAlgorithm terra.StringValue `hcl:"signature_algorithm,attr" validate:"required"`
}

type IssuancePolicyAllowedKeyTypesRsa struct {
	// MaxModulusSize: string, optional
	MaxModulusSize terra.StringValue `hcl:"max_modulus_size,attr"`
	// MinModulusSize: string, optional
	MinModulusSize terra.StringValue `hcl:"min_modulus_size,attr"`
}

type IssuancePolicyBaselineValues struct {
	// AiaOcspServers: list of string, optional
	AiaOcspServers terra.ListValue[terra.StringValue] `hcl:"aia_ocsp_servers,attr"`
	// IssuancePolicyBaselineValuesAdditionalExtensions: min=0
	AdditionalExtensions []IssuancePolicyBaselineValuesAdditionalExtensions `hcl:"additional_extensions,block" validate:"min=0"`
	// IssuancePolicyBaselineValuesCaOptions: required
	CaOptions *IssuancePolicyBaselineValuesCaOptions `hcl:"ca_options,block" validate:"required"`
	// IssuancePolicyBaselineValuesKeyUsage: required
	KeyUsage *IssuancePolicyBaselineValuesKeyUsage `hcl:"key_usage,block" validate:"required"`
	// IssuancePolicyBaselineValuesNameConstraints: optional
	NameConstraints *IssuancePolicyBaselineValuesNameConstraints `hcl:"name_constraints,block"`
	// IssuancePolicyBaselineValuesPolicyIds: min=0
	PolicyIds []IssuancePolicyBaselineValuesPolicyIds `hcl:"policy_ids,block" validate:"min=0"`
}

type IssuancePolicyBaselineValuesAdditionalExtensions struct {
	// Critical: bool, required
	Critical terra.BoolValue `hcl:"critical,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// IssuancePolicyBaselineValuesAdditionalExtensionsObjectId: required
	ObjectId *IssuancePolicyBaselineValuesAdditionalExtensionsObjectId `hcl:"object_id,block" validate:"required"`
}

type IssuancePolicyBaselineValuesAdditionalExtensionsObjectId struct {
	// ObjectIdPath: list of number, required
	ObjectIdPath terra.ListValue[terra.NumberValue] `hcl:"object_id_path,attr" validate:"required"`
}

type IssuancePolicyBaselineValuesCaOptions struct {
	// IsCa: bool, optional
	IsCa terra.BoolValue `hcl:"is_ca,attr"`
	// MaxIssuerPathLength: number, optional
	MaxIssuerPathLength terra.NumberValue `hcl:"max_issuer_path_length,attr"`
	// NonCa: bool, optional
	NonCa terra.BoolValue `hcl:"non_ca,attr"`
	// ZeroMaxIssuerPathLength: bool, optional
	ZeroMaxIssuerPathLength terra.BoolValue `hcl:"zero_max_issuer_path_length,attr"`
}

type IssuancePolicyBaselineValuesKeyUsage struct {
	// IssuancePolicyBaselineValuesKeyUsageBaseKeyUsage: required
	BaseKeyUsage *IssuancePolicyBaselineValuesKeyUsageBaseKeyUsage `hcl:"base_key_usage,block" validate:"required"`
	// IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage: required
	ExtendedKeyUsage *IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage `hcl:"extended_key_usage,block" validate:"required"`
	// IssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages: min=0
	UnknownExtendedKeyUsages []IssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages `hcl:"unknown_extended_key_usages,block" validate:"min=0"`
}

type IssuancePolicyBaselineValuesKeyUsageBaseKeyUsage struct {
	// CertSign: bool, optional
	CertSign terra.BoolValue `hcl:"cert_sign,attr"`
	// ContentCommitment: bool, optional
	ContentCommitment terra.BoolValue `hcl:"content_commitment,attr"`
	// CrlSign: bool, optional
	CrlSign terra.BoolValue `hcl:"crl_sign,attr"`
	// DataEncipherment: bool, optional
	DataEncipherment terra.BoolValue `hcl:"data_encipherment,attr"`
	// DecipherOnly: bool, optional
	DecipherOnly terra.BoolValue `hcl:"decipher_only,attr"`
	// DigitalSignature: bool, optional
	DigitalSignature terra.BoolValue `hcl:"digital_signature,attr"`
	// EncipherOnly: bool, optional
	EncipherOnly terra.BoolValue `hcl:"encipher_only,attr"`
	// KeyAgreement: bool, optional
	KeyAgreement terra.BoolValue `hcl:"key_agreement,attr"`
	// KeyEncipherment: bool, optional
	KeyEncipherment terra.BoolValue `hcl:"key_encipherment,attr"`
}

type IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage struct {
	// ClientAuth: bool, optional
	ClientAuth terra.BoolValue `hcl:"client_auth,attr"`
	// CodeSigning: bool, optional
	CodeSigning terra.BoolValue `hcl:"code_signing,attr"`
	// EmailProtection: bool, optional
	EmailProtection terra.BoolValue `hcl:"email_protection,attr"`
	// OcspSigning: bool, optional
	OcspSigning terra.BoolValue `hcl:"ocsp_signing,attr"`
	// ServerAuth: bool, optional
	ServerAuth terra.BoolValue `hcl:"server_auth,attr"`
	// TimeStamping: bool, optional
	TimeStamping terra.BoolValue `hcl:"time_stamping,attr"`
}

type IssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages struct {
	// ObjectIdPath: list of number, required
	ObjectIdPath terra.ListValue[terra.NumberValue] `hcl:"object_id_path,attr" validate:"required"`
}

type IssuancePolicyBaselineValuesNameConstraints struct {
	// Critical: bool, required
	Critical terra.BoolValue `hcl:"critical,attr" validate:"required"`
	// ExcludedDnsNames: list of string, optional
	ExcludedDnsNames terra.ListValue[terra.StringValue] `hcl:"excluded_dns_names,attr"`
	// ExcludedEmailAddresses: list of string, optional
	ExcludedEmailAddresses terra.ListValue[terra.StringValue] `hcl:"excluded_email_addresses,attr"`
	// ExcludedIpRanges: list of string, optional
	ExcludedIpRanges terra.ListValue[terra.StringValue] `hcl:"excluded_ip_ranges,attr"`
	// ExcludedUris: list of string, optional
	ExcludedUris terra.ListValue[terra.StringValue] `hcl:"excluded_uris,attr"`
	// PermittedDnsNames: list of string, optional
	PermittedDnsNames terra.ListValue[terra.StringValue] `hcl:"permitted_dns_names,attr"`
	// PermittedEmailAddresses: list of string, optional
	PermittedEmailAddresses terra.ListValue[terra.StringValue] `hcl:"permitted_email_addresses,attr"`
	// PermittedIpRanges: list of string, optional
	PermittedIpRanges terra.ListValue[terra.StringValue] `hcl:"permitted_ip_ranges,attr"`
	// PermittedUris: list of string, optional
	PermittedUris terra.ListValue[terra.StringValue] `hcl:"permitted_uris,attr"`
}

type IssuancePolicyBaselineValuesPolicyIds struct {
	// ObjectIdPath: list of number, required
	ObjectIdPath terra.ListValue[terra.NumberValue] `hcl:"object_id_path,attr" validate:"required"`
}

type IssuancePolicyIdentityConstraints struct {
	// AllowSubjectAltNamesPassthrough: bool, required
	AllowSubjectAltNamesPassthrough terra.BoolValue `hcl:"allow_subject_alt_names_passthrough,attr" validate:"required"`
	// AllowSubjectPassthrough: bool, required
	AllowSubjectPassthrough terra.BoolValue `hcl:"allow_subject_passthrough,attr" validate:"required"`
	// IssuancePolicyIdentityConstraintsCelExpression: optional
	CelExpression *IssuancePolicyIdentityConstraintsCelExpression `hcl:"cel_expression,block"`
}

type IssuancePolicyIdentityConstraintsCelExpression struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Expression: string, required
	Expression terra.StringValue `hcl:"expression,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Title: string, optional
	Title terra.StringValue `hcl:"title,attr"`
}

type PublishingOptions struct {
	// EncodingFormat: string, optional
	EncodingFormat terra.StringValue `hcl:"encoding_format,attr"`
	// PublishCaCert: bool, required
	PublishCaCert terra.BoolValue `hcl:"publish_ca_cert,attr" validate:"required"`
	// PublishCrl: bool, required
	PublishCrl terra.BoolValue `hcl:"publish_crl,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type IssuancePolicyAttributes struct {
	ref terra.Reference
}

func (ip IssuancePolicyAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip IssuancePolicyAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyAttributes {
	return IssuancePolicyAttributes{ref: ref}
}

func (ip IssuancePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip IssuancePolicyAttributes) MaximumLifetime() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("maximum_lifetime"))
}

func (ip IssuancePolicyAttributes) AllowedIssuanceModes() terra.ListValue[IssuancePolicyAllowedIssuanceModesAttributes] {
	return terra.ReferenceAsList[IssuancePolicyAllowedIssuanceModesAttributes](ip.ref.Append("allowed_issuance_modes"))
}

func (ip IssuancePolicyAttributes) AllowedKeyTypes() terra.ListValue[IssuancePolicyAllowedKeyTypesAttributes] {
	return terra.ReferenceAsList[IssuancePolicyAllowedKeyTypesAttributes](ip.ref.Append("allowed_key_types"))
}

func (ip IssuancePolicyAttributes) BaselineValues() terra.ListValue[IssuancePolicyBaselineValuesAttributes] {
	return terra.ReferenceAsList[IssuancePolicyBaselineValuesAttributes](ip.ref.Append("baseline_values"))
}

func (ip IssuancePolicyAttributes) IdentityConstraints() terra.ListValue[IssuancePolicyIdentityConstraintsAttributes] {
	return terra.ReferenceAsList[IssuancePolicyIdentityConstraintsAttributes](ip.ref.Append("identity_constraints"))
}

type IssuancePolicyAllowedIssuanceModesAttributes struct {
	ref terra.Reference
}

func (aim IssuancePolicyAllowedIssuanceModesAttributes) InternalRef() (terra.Reference, error) {
	return aim.ref, nil
}

func (aim IssuancePolicyAllowedIssuanceModesAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyAllowedIssuanceModesAttributes {
	return IssuancePolicyAllowedIssuanceModesAttributes{ref: ref}
}

func (aim IssuancePolicyAllowedIssuanceModesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aim.ref.InternalTokens()
}

func (aim IssuancePolicyAllowedIssuanceModesAttributes) AllowConfigBasedIssuance() terra.BoolValue {
	return terra.ReferenceAsBool(aim.ref.Append("allow_config_based_issuance"))
}

func (aim IssuancePolicyAllowedIssuanceModesAttributes) AllowCsrBasedIssuance() terra.BoolValue {
	return terra.ReferenceAsBool(aim.ref.Append("allow_csr_based_issuance"))
}

type IssuancePolicyAllowedKeyTypesAttributes struct {
	ref terra.Reference
}

func (akt IssuancePolicyAllowedKeyTypesAttributes) InternalRef() (terra.Reference, error) {
	return akt.ref, nil
}

func (akt IssuancePolicyAllowedKeyTypesAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyAllowedKeyTypesAttributes {
	return IssuancePolicyAllowedKeyTypesAttributes{ref: ref}
}

func (akt IssuancePolicyAllowedKeyTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return akt.ref.InternalTokens()
}

func (akt IssuancePolicyAllowedKeyTypesAttributes) EllipticCurve() terra.ListValue[IssuancePolicyAllowedKeyTypesEllipticCurveAttributes] {
	return terra.ReferenceAsList[IssuancePolicyAllowedKeyTypesEllipticCurveAttributes](akt.ref.Append("elliptic_curve"))
}

func (akt IssuancePolicyAllowedKeyTypesAttributes) Rsa() terra.ListValue[IssuancePolicyAllowedKeyTypesRsaAttributes] {
	return terra.ReferenceAsList[IssuancePolicyAllowedKeyTypesRsaAttributes](akt.ref.Append("rsa"))
}

type IssuancePolicyAllowedKeyTypesEllipticCurveAttributes struct {
	ref terra.Reference
}

func (ec IssuancePolicyAllowedKeyTypesEllipticCurveAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec IssuancePolicyAllowedKeyTypesEllipticCurveAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyAllowedKeyTypesEllipticCurveAttributes {
	return IssuancePolicyAllowedKeyTypesEllipticCurveAttributes{ref: ref}
}

func (ec IssuancePolicyAllowedKeyTypesEllipticCurveAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec IssuancePolicyAllowedKeyTypesEllipticCurveAttributes) SignatureAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("signature_algorithm"))
}

type IssuancePolicyAllowedKeyTypesRsaAttributes struct {
	ref terra.Reference
}

func (r IssuancePolicyAllowedKeyTypesRsaAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r IssuancePolicyAllowedKeyTypesRsaAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyAllowedKeyTypesRsaAttributes {
	return IssuancePolicyAllowedKeyTypesRsaAttributes{ref: ref}
}

func (r IssuancePolicyAllowedKeyTypesRsaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r IssuancePolicyAllowedKeyTypesRsaAttributes) MaxModulusSize() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("max_modulus_size"))
}

func (r IssuancePolicyAllowedKeyTypesRsaAttributes) MinModulusSize() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("min_modulus_size"))
}

type IssuancePolicyBaselineValuesAttributes struct {
	ref terra.Reference
}

func (bv IssuancePolicyBaselineValuesAttributes) InternalRef() (terra.Reference, error) {
	return bv.ref, nil
}

func (bv IssuancePolicyBaselineValuesAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyBaselineValuesAttributes {
	return IssuancePolicyBaselineValuesAttributes{ref: ref}
}

func (bv IssuancePolicyBaselineValuesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bv.ref.InternalTokens()
}

func (bv IssuancePolicyBaselineValuesAttributes) AiaOcspServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](bv.ref.Append("aia_ocsp_servers"))
}

func (bv IssuancePolicyBaselineValuesAttributes) AdditionalExtensions() terra.ListValue[IssuancePolicyBaselineValuesAdditionalExtensionsAttributes] {
	return terra.ReferenceAsList[IssuancePolicyBaselineValuesAdditionalExtensionsAttributes](bv.ref.Append("additional_extensions"))
}

func (bv IssuancePolicyBaselineValuesAttributes) CaOptions() terra.ListValue[IssuancePolicyBaselineValuesCaOptionsAttributes] {
	return terra.ReferenceAsList[IssuancePolicyBaselineValuesCaOptionsAttributes](bv.ref.Append("ca_options"))
}

func (bv IssuancePolicyBaselineValuesAttributes) KeyUsage() terra.ListValue[IssuancePolicyBaselineValuesKeyUsageAttributes] {
	return terra.ReferenceAsList[IssuancePolicyBaselineValuesKeyUsageAttributes](bv.ref.Append("key_usage"))
}

func (bv IssuancePolicyBaselineValuesAttributes) NameConstraints() terra.ListValue[IssuancePolicyBaselineValuesNameConstraintsAttributes] {
	return terra.ReferenceAsList[IssuancePolicyBaselineValuesNameConstraintsAttributes](bv.ref.Append("name_constraints"))
}

func (bv IssuancePolicyBaselineValuesAttributes) PolicyIds() terra.ListValue[IssuancePolicyBaselineValuesPolicyIdsAttributes] {
	return terra.ReferenceAsList[IssuancePolicyBaselineValuesPolicyIdsAttributes](bv.ref.Append("policy_ids"))
}

type IssuancePolicyBaselineValuesAdditionalExtensionsAttributes struct {
	ref terra.Reference
}

func (ae IssuancePolicyBaselineValuesAdditionalExtensionsAttributes) InternalRef() (terra.Reference, error) {
	return ae.ref, nil
}

func (ae IssuancePolicyBaselineValuesAdditionalExtensionsAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyBaselineValuesAdditionalExtensionsAttributes {
	return IssuancePolicyBaselineValuesAdditionalExtensionsAttributes{ref: ref}
}

func (ae IssuancePolicyBaselineValuesAdditionalExtensionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ae.ref.InternalTokens()
}

func (ae IssuancePolicyBaselineValuesAdditionalExtensionsAttributes) Critical() terra.BoolValue {
	return terra.ReferenceAsBool(ae.ref.Append("critical"))
}

func (ae IssuancePolicyBaselineValuesAdditionalExtensionsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("value"))
}

func (ae IssuancePolicyBaselineValuesAdditionalExtensionsAttributes) ObjectId() terra.ListValue[IssuancePolicyBaselineValuesAdditionalExtensionsObjectIdAttributes] {
	return terra.ReferenceAsList[IssuancePolicyBaselineValuesAdditionalExtensionsObjectIdAttributes](ae.ref.Append("object_id"))
}

type IssuancePolicyBaselineValuesAdditionalExtensionsObjectIdAttributes struct {
	ref terra.Reference
}

func (oi IssuancePolicyBaselineValuesAdditionalExtensionsObjectIdAttributes) InternalRef() (terra.Reference, error) {
	return oi.ref, nil
}

func (oi IssuancePolicyBaselineValuesAdditionalExtensionsObjectIdAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyBaselineValuesAdditionalExtensionsObjectIdAttributes {
	return IssuancePolicyBaselineValuesAdditionalExtensionsObjectIdAttributes{ref: ref}
}

func (oi IssuancePolicyBaselineValuesAdditionalExtensionsObjectIdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oi.ref.InternalTokens()
}

func (oi IssuancePolicyBaselineValuesAdditionalExtensionsObjectIdAttributes) ObjectIdPath() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](oi.ref.Append("object_id_path"))
}

type IssuancePolicyBaselineValuesCaOptionsAttributes struct {
	ref terra.Reference
}

func (co IssuancePolicyBaselineValuesCaOptionsAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co IssuancePolicyBaselineValuesCaOptionsAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyBaselineValuesCaOptionsAttributes {
	return IssuancePolicyBaselineValuesCaOptionsAttributes{ref: ref}
}

func (co IssuancePolicyBaselineValuesCaOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co IssuancePolicyBaselineValuesCaOptionsAttributes) IsCa() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("is_ca"))
}

func (co IssuancePolicyBaselineValuesCaOptionsAttributes) MaxIssuerPathLength() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("max_issuer_path_length"))
}

func (co IssuancePolicyBaselineValuesCaOptionsAttributes) NonCa() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("non_ca"))
}

func (co IssuancePolicyBaselineValuesCaOptionsAttributes) ZeroMaxIssuerPathLength() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("zero_max_issuer_path_length"))
}

type IssuancePolicyBaselineValuesKeyUsageAttributes struct {
	ref terra.Reference
}

func (ku IssuancePolicyBaselineValuesKeyUsageAttributes) InternalRef() (terra.Reference, error) {
	return ku.ref, nil
}

func (ku IssuancePolicyBaselineValuesKeyUsageAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyBaselineValuesKeyUsageAttributes {
	return IssuancePolicyBaselineValuesKeyUsageAttributes{ref: ref}
}

func (ku IssuancePolicyBaselineValuesKeyUsageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ku.ref.InternalTokens()
}

func (ku IssuancePolicyBaselineValuesKeyUsageAttributes) BaseKeyUsage() terra.ListValue[IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes] {
	return terra.ReferenceAsList[IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes](ku.ref.Append("base_key_usage"))
}

func (ku IssuancePolicyBaselineValuesKeyUsageAttributes) ExtendedKeyUsage() terra.ListValue[IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageAttributes] {
	return terra.ReferenceAsList[IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageAttributes](ku.ref.Append("extended_key_usage"))
}

func (ku IssuancePolicyBaselineValuesKeyUsageAttributes) UnknownExtendedKeyUsages() terra.ListValue[IssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesAttributes] {
	return terra.ReferenceAsList[IssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesAttributes](ku.ref.Append("unknown_extended_key_usages"))
}

type IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes struct {
	ref terra.Reference
}

func (bku IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes) InternalRef() (terra.Reference, error) {
	return bku.ref, nil
}

func (bku IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes {
	return IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes{ref: ref}
}

func (bku IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bku.ref.InternalTokens()
}

func (bku IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes) CertSign() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("cert_sign"))
}

func (bku IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes) ContentCommitment() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("content_commitment"))
}

func (bku IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes) CrlSign() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("crl_sign"))
}

func (bku IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes) DataEncipherment() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("data_encipherment"))
}

func (bku IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes) DecipherOnly() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("decipher_only"))
}

func (bku IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes) DigitalSignature() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("digital_signature"))
}

func (bku IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes) EncipherOnly() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("encipher_only"))
}

func (bku IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes) KeyAgreement() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("key_agreement"))
}

func (bku IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageAttributes) KeyEncipherment() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("key_encipherment"))
}

type IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageAttributes struct {
	ref terra.Reference
}

func (eku IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageAttributes) InternalRef() (terra.Reference, error) {
	return eku.ref, nil
}

func (eku IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageAttributes {
	return IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageAttributes{ref: ref}
}

func (eku IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eku.ref.InternalTokens()
}

func (eku IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageAttributes) ClientAuth() terra.BoolValue {
	return terra.ReferenceAsBool(eku.ref.Append("client_auth"))
}

func (eku IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageAttributes) CodeSigning() terra.BoolValue {
	return terra.ReferenceAsBool(eku.ref.Append("code_signing"))
}

func (eku IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageAttributes) EmailProtection() terra.BoolValue {
	return terra.ReferenceAsBool(eku.ref.Append("email_protection"))
}

func (eku IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageAttributes) OcspSigning() terra.BoolValue {
	return terra.ReferenceAsBool(eku.ref.Append("ocsp_signing"))
}

func (eku IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageAttributes) ServerAuth() terra.BoolValue {
	return terra.ReferenceAsBool(eku.ref.Append("server_auth"))
}

func (eku IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageAttributes) TimeStamping() terra.BoolValue {
	return terra.ReferenceAsBool(eku.ref.Append("time_stamping"))
}

type IssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesAttributes struct {
	ref terra.Reference
}

func (ueku IssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesAttributes) InternalRef() (terra.Reference, error) {
	return ueku.ref, nil
}

func (ueku IssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesAttributes {
	return IssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesAttributes{ref: ref}
}

func (ueku IssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ueku.ref.InternalTokens()
}

func (ueku IssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesAttributes) ObjectIdPath() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](ueku.ref.Append("object_id_path"))
}

type IssuancePolicyBaselineValuesNameConstraintsAttributes struct {
	ref terra.Reference
}

func (nc IssuancePolicyBaselineValuesNameConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc IssuancePolicyBaselineValuesNameConstraintsAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyBaselineValuesNameConstraintsAttributes {
	return IssuancePolicyBaselineValuesNameConstraintsAttributes{ref: ref}
}

func (nc IssuancePolicyBaselineValuesNameConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc IssuancePolicyBaselineValuesNameConstraintsAttributes) Critical() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("critical"))
}

func (nc IssuancePolicyBaselineValuesNameConstraintsAttributes) ExcludedDnsNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("excluded_dns_names"))
}

func (nc IssuancePolicyBaselineValuesNameConstraintsAttributes) ExcludedEmailAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("excluded_email_addresses"))
}

func (nc IssuancePolicyBaselineValuesNameConstraintsAttributes) ExcludedIpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("excluded_ip_ranges"))
}

func (nc IssuancePolicyBaselineValuesNameConstraintsAttributes) ExcludedUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("excluded_uris"))
}

func (nc IssuancePolicyBaselineValuesNameConstraintsAttributes) PermittedDnsNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("permitted_dns_names"))
}

func (nc IssuancePolicyBaselineValuesNameConstraintsAttributes) PermittedEmailAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("permitted_email_addresses"))
}

func (nc IssuancePolicyBaselineValuesNameConstraintsAttributes) PermittedIpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("permitted_ip_ranges"))
}

func (nc IssuancePolicyBaselineValuesNameConstraintsAttributes) PermittedUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("permitted_uris"))
}

type IssuancePolicyBaselineValuesPolicyIdsAttributes struct {
	ref terra.Reference
}

func (pi IssuancePolicyBaselineValuesPolicyIdsAttributes) InternalRef() (terra.Reference, error) {
	return pi.ref, nil
}

func (pi IssuancePolicyBaselineValuesPolicyIdsAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyBaselineValuesPolicyIdsAttributes {
	return IssuancePolicyBaselineValuesPolicyIdsAttributes{ref: ref}
}

func (pi IssuancePolicyBaselineValuesPolicyIdsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pi.ref.InternalTokens()
}

func (pi IssuancePolicyBaselineValuesPolicyIdsAttributes) ObjectIdPath() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](pi.ref.Append("object_id_path"))
}

type IssuancePolicyIdentityConstraintsAttributes struct {
	ref terra.Reference
}

func (ic IssuancePolicyIdentityConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic IssuancePolicyIdentityConstraintsAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyIdentityConstraintsAttributes {
	return IssuancePolicyIdentityConstraintsAttributes{ref: ref}
}

func (ic IssuancePolicyIdentityConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic IssuancePolicyIdentityConstraintsAttributes) AllowSubjectAltNamesPassthrough() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("allow_subject_alt_names_passthrough"))
}

func (ic IssuancePolicyIdentityConstraintsAttributes) AllowSubjectPassthrough() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("allow_subject_passthrough"))
}

func (ic IssuancePolicyIdentityConstraintsAttributes) CelExpression() terra.ListValue[IssuancePolicyIdentityConstraintsCelExpressionAttributes] {
	return terra.ReferenceAsList[IssuancePolicyIdentityConstraintsCelExpressionAttributes](ic.ref.Append("cel_expression"))
}

type IssuancePolicyIdentityConstraintsCelExpressionAttributes struct {
	ref terra.Reference
}

func (ce IssuancePolicyIdentityConstraintsCelExpressionAttributes) InternalRef() (terra.Reference, error) {
	return ce.ref, nil
}

func (ce IssuancePolicyIdentityConstraintsCelExpressionAttributes) InternalWithRef(ref terra.Reference) IssuancePolicyIdentityConstraintsCelExpressionAttributes {
	return IssuancePolicyIdentityConstraintsCelExpressionAttributes{ref: ref}
}

func (ce IssuancePolicyIdentityConstraintsCelExpressionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ce.ref.InternalTokens()
}

func (ce IssuancePolicyIdentityConstraintsCelExpressionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ce.ref.Append("description"))
}

func (ce IssuancePolicyIdentityConstraintsCelExpressionAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(ce.ref.Append("expression"))
}

func (ce IssuancePolicyIdentityConstraintsCelExpressionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ce.ref.Append("location"))
}

func (ce IssuancePolicyIdentityConstraintsCelExpressionAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(ce.ref.Append("title"))
}

type PublishingOptionsAttributes struct {
	ref terra.Reference
}

func (po PublishingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return po.ref, nil
}

func (po PublishingOptionsAttributes) InternalWithRef(ref terra.Reference) PublishingOptionsAttributes {
	return PublishingOptionsAttributes{ref: ref}
}

func (po PublishingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return po.ref.InternalTokens()
}

func (po PublishingOptionsAttributes) EncodingFormat() terra.StringValue {
	return terra.ReferenceAsString(po.ref.Append("encoding_format"))
}

func (po PublishingOptionsAttributes) PublishCaCert() terra.BoolValue {
	return terra.ReferenceAsBool(po.ref.Append("publish_ca_cert"))
}

func (po PublishingOptionsAttributes) PublishCrl() terra.BoolValue {
	return terra.ReferenceAsBool(po.ref.Append("publish_crl"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type IssuancePolicyState struct {
	MaximumLifetime      string                                    `json:"maximum_lifetime"`
	AllowedIssuanceModes []IssuancePolicyAllowedIssuanceModesState `json:"allowed_issuance_modes"`
	AllowedKeyTypes      []IssuancePolicyAllowedKeyTypesState      `json:"allowed_key_types"`
	BaselineValues       []IssuancePolicyBaselineValuesState       `json:"baseline_values"`
	IdentityConstraints  []IssuancePolicyIdentityConstraintsState  `json:"identity_constraints"`
}

type IssuancePolicyAllowedIssuanceModesState struct {
	AllowConfigBasedIssuance bool `json:"allow_config_based_issuance"`
	AllowCsrBasedIssuance    bool `json:"allow_csr_based_issuance"`
}

type IssuancePolicyAllowedKeyTypesState struct {
	EllipticCurve []IssuancePolicyAllowedKeyTypesEllipticCurveState `json:"elliptic_curve"`
	Rsa           []IssuancePolicyAllowedKeyTypesRsaState           `json:"rsa"`
}

type IssuancePolicyAllowedKeyTypesEllipticCurveState struct {
	SignatureAlgorithm string `json:"signature_algorithm"`
}

type IssuancePolicyAllowedKeyTypesRsaState struct {
	MaxModulusSize string `json:"max_modulus_size"`
	MinModulusSize string `json:"min_modulus_size"`
}

type IssuancePolicyBaselineValuesState struct {
	AiaOcspServers       []string                                                `json:"aia_ocsp_servers"`
	AdditionalExtensions []IssuancePolicyBaselineValuesAdditionalExtensionsState `json:"additional_extensions"`
	CaOptions            []IssuancePolicyBaselineValuesCaOptionsState            `json:"ca_options"`
	KeyUsage             []IssuancePolicyBaselineValuesKeyUsageState             `json:"key_usage"`
	NameConstraints      []IssuancePolicyBaselineValuesNameConstraintsState      `json:"name_constraints"`
	PolicyIds            []IssuancePolicyBaselineValuesPolicyIdsState            `json:"policy_ids"`
}

type IssuancePolicyBaselineValuesAdditionalExtensionsState struct {
	Critical bool                                                            `json:"critical"`
	Value    string                                                          `json:"value"`
	ObjectId []IssuancePolicyBaselineValuesAdditionalExtensionsObjectIdState `json:"object_id"`
}

type IssuancePolicyBaselineValuesAdditionalExtensionsObjectIdState struct {
	ObjectIdPath []float64 `json:"object_id_path"`
}

type IssuancePolicyBaselineValuesCaOptionsState struct {
	IsCa                    bool    `json:"is_ca"`
	MaxIssuerPathLength     float64 `json:"max_issuer_path_length"`
	NonCa                   bool    `json:"non_ca"`
	ZeroMaxIssuerPathLength bool    `json:"zero_max_issuer_path_length"`
}

type IssuancePolicyBaselineValuesKeyUsageState struct {
	BaseKeyUsage             []IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageState             `json:"base_key_usage"`
	ExtendedKeyUsage         []IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageState         `json:"extended_key_usage"`
	UnknownExtendedKeyUsages []IssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesState `json:"unknown_extended_key_usages"`
}

type IssuancePolicyBaselineValuesKeyUsageBaseKeyUsageState struct {
	CertSign          bool `json:"cert_sign"`
	ContentCommitment bool `json:"content_commitment"`
	CrlSign           bool `json:"crl_sign"`
	DataEncipherment  bool `json:"data_encipherment"`
	DecipherOnly      bool `json:"decipher_only"`
	DigitalSignature  bool `json:"digital_signature"`
	EncipherOnly      bool `json:"encipher_only"`
	KeyAgreement      bool `json:"key_agreement"`
	KeyEncipherment   bool `json:"key_encipherment"`
}

type IssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageState struct {
	ClientAuth      bool `json:"client_auth"`
	CodeSigning     bool `json:"code_signing"`
	EmailProtection bool `json:"email_protection"`
	OcspSigning     bool `json:"ocsp_signing"`
	ServerAuth      bool `json:"server_auth"`
	TimeStamping    bool `json:"time_stamping"`
}

type IssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesState struct {
	ObjectIdPath []float64 `json:"object_id_path"`
}

type IssuancePolicyBaselineValuesNameConstraintsState struct {
	Critical                bool     `json:"critical"`
	ExcludedDnsNames        []string `json:"excluded_dns_names"`
	ExcludedEmailAddresses  []string `json:"excluded_email_addresses"`
	ExcludedIpRanges        []string `json:"excluded_ip_ranges"`
	ExcludedUris            []string `json:"excluded_uris"`
	PermittedDnsNames       []string `json:"permitted_dns_names"`
	PermittedEmailAddresses []string `json:"permitted_email_addresses"`
	PermittedIpRanges       []string `json:"permitted_ip_ranges"`
	PermittedUris           []string `json:"permitted_uris"`
}

type IssuancePolicyBaselineValuesPolicyIdsState struct {
	ObjectIdPath []float64 `json:"object_id_path"`
}

type IssuancePolicyIdentityConstraintsState struct {
	AllowSubjectAltNamesPassthrough bool                                                  `json:"allow_subject_alt_names_passthrough"`
	AllowSubjectPassthrough         bool                                                  `json:"allow_subject_passthrough"`
	CelExpression                   []IssuancePolicyIdentityConstraintsCelExpressionState `json:"cel_expression"`
}

type IssuancePolicyIdentityConstraintsCelExpressionState struct {
	Description string `json:"description"`
	Expression  string `json:"expression"`
	Location    string `json:"location"`
	Title       string `json:"title"`
}

type PublishingOptionsState struct {
	EncodingFormat string `json:"encoding_format"`
	PublishCaCert  bool   `json:"publish_ca_cert"`
	PublishCrl     bool   `json:"publish_crl"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
