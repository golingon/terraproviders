// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_privateca_ca_pool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_privateca_ca_pool.
type Resource struct {
	Name      string
	Args      Args
	state     *googlePrivatecaCaPoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gpcp *Resource) Type() string {
	return "google_privateca_ca_pool"
}

// LocalName returns the local name for [Resource].
func (gpcp *Resource) LocalName() string {
	return gpcp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gpcp *Resource) Configuration() interface{} {
	return gpcp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gpcp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gpcp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gpcp *Resource) Dependencies() terra.Dependencies {
	return gpcp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gpcp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gpcp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gpcp *Resource) Attributes() googlePrivatecaCaPoolAttributes {
	return googlePrivatecaCaPoolAttributes{ref: terra.ReferenceResource(gpcp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gpcp *Resource) ImportState(state io.Reader) error {
	gpcp.state = &googlePrivatecaCaPoolState{}
	if err := json.NewDecoder(state).Decode(gpcp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gpcp.Type(), gpcp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gpcp *Resource) State() (*googlePrivatecaCaPoolState, bool) {
	return gpcp.state, gpcp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gpcp *Resource) StateMust() *googlePrivatecaCaPoolState {
	if gpcp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gpcp.Type(), gpcp.LocalName()))
	}
	return gpcp.state
}

// Args contains the configurations for google_privateca_ca_pool.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Tier: string, required
	Tier terra.StringValue `hcl:"tier,attr" validate:"required"`
	// IssuancePolicy: optional
	IssuancePolicy *IssuancePolicy `hcl:"issuance_policy,block"`
	// PublishingOptions: optional
	PublishingOptions *PublishingOptions `hcl:"publishing_options,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googlePrivatecaCaPoolAttributes struct {
	ref terra.Reference
}

// EffectiveLabels returns a reference to field effective_labels of google_privateca_ca_pool.
func (gpcp googlePrivatecaCaPoolAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpcp.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_privateca_ca_pool.
func (gpcp googlePrivatecaCaPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gpcp.ref.Append("id"))
}

// Labels returns a reference to field labels of google_privateca_ca_pool.
func (gpcp googlePrivatecaCaPoolAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpcp.ref.Append("labels"))
}

// Location returns a reference to field location of google_privateca_ca_pool.
func (gpcp googlePrivatecaCaPoolAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gpcp.ref.Append("location"))
}

// Name returns a reference to field name of google_privateca_ca_pool.
func (gpcp googlePrivatecaCaPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gpcp.ref.Append("name"))
}

// Project returns a reference to field project of google_privateca_ca_pool.
func (gpcp googlePrivatecaCaPoolAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gpcp.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_privateca_ca_pool.
func (gpcp googlePrivatecaCaPoolAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpcp.ref.Append("terraform_labels"))
}

// Tier returns a reference to field tier of google_privateca_ca_pool.
func (gpcp googlePrivatecaCaPoolAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(gpcp.ref.Append("tier"))
}

func (gpcp googlePrivatecaCaPoolAttributes) IssuancePolicy() terra.ListValue[IssuancePolicyAttributes] {
	return terra.ReferenceAsList[IssuancePolicyAttributes](gpcp.ref.Append("issuance_policy"))
}

func (gpcp googlePrivatecaCaPoolAttributes) PublishingOptions() terra.ListValue[PublishingOptionsAttributes] {
	return terra.ReferenceAsList[PublishingOptionsAttributes](gpcp.ref.Append("publishing_options"))
}

func (gpcp googlePrivatecaCaPoolAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gpcp.ref.Append("timeouts"))
}

type googlePrivatecaCaPoolState struct {
	EffectiveLabels   map[string]string        `json:"effective_labels"`
	Id                string                   `json:"id"`
	Labels            map[string]string        `json:"labels"`
	Location          string                   `json:"location"`
	Name              string                   `json:"name"`
	Project           string                   `json:"project"`
	TerraformLabels   map[string]string        `json:"terraform_labels"`
	Tier              string                   `json:"tier"`
	IssuancePolicy    []IssuancePolicyState    `json:"issuance_policy"`
	PublishingOptions []PublishingOptionsState `json:"publishing_options"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
