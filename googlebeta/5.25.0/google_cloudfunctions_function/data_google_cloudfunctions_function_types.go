// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloudfunctions_function

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataEventTriggerAttributes struct {
	ref terra.Reference
}

func (et DataEventTriggerAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et DataEventTriggerAttributes) InternalWithRef(ref terra.Reference) DataEventTriggerAttributes {
	return DataEventTriggerAttributes{ref: ref}
}

func (et DataEventTriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et DataEventTriggerAttributes) EventType() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("event_type"))
}

func (et DataEventTriggerAttributes) Resource() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("resource"))
}

func (et DataEventTriggerAttributes) FailurePolicy() terra.ListValue[DataEventTriggerFailurePolicyAttributes] {
	return terra.ReferenceAsList[DataEventTriggerFailurePolicyAttributes](et.ref.Append("failure_policy"))
}

type DataEventTriggerFailurePolicyAttributes struct {
	ref terra.Reference
}

func (fp DataEventTriggerFailurePolicyAttributes) InternalRef() (terra.Reference, error) {
	return fp.ref, nil
}

func (fp DataEventTriggerFailurePolicyAttributes) InternalWithRef(ref terra.Reference) DataEventTriggerFailurePolicyAttributes {
	return DataEventTriggerFailurePolicyAttributes{ref: ref}
}

func (fp DataEventTriggerFailurePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fp.ref.InternalTokens()
}

func (fp DataEventTriggerFailurePolicyAttributes) Retry() terra.BoolValue {
	return terra.ReferenceAsBool(fp.ref.Append("retry"))
}

type DataSecretEnvironmentVariablesAttributes struct {
	ref terra.Reference
}

func (sev DataSecretEnvironmentVariablesAttributes) InternalRef() (terra.Reference, error) {
	return sev.ref, nil
}

func (sev DataSecretEnvironmentVariablesAttributes) InternalWithRef(ref terra.Reference) DataSecretEnvironmentVariablesAttributes {
	return DataSecretEnvironmentVariablesAttributes{ref: ref}
}

func (sev DataSecretEnvironmentVariablesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sev.ref.InternalTokens()
}

func (sev DataSecretEnvironmentVariablesAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(sev.ref.Append("key"))
}

func (sev DataSecretEnvironmentVariablesAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(sev.ref.Append("project_id"))
}

func (sev DataSecretEnvironmentVariablesAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(sev.ref.Append("secret"))
}

func (sev DataSecretEnvironmentVariablesAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(sev.ref.Append("version"))
}

type DataSecretVolumesAttributes struct {
	ref terra.Reference
}

func (sv DataSecretVolumesAttributes) InternalRef() (terra.Reference, error) {
	return sv.ref, nil
}

func (sv DataSecretVolumesAttributes) InternalWithRef(ref terra.Reference) DataSecretVolumesAttributes {
	return DataSecretVolumesAttributes{ref: ref}
}

func (sv DataSecretVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sv.ref.InternalTokens()
}

func (sv DataSecretVolumesAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(sv.ref.Append("mount_path"))
}

func (sv DataSecretVolumesAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(sv.ref.Append("project_id"))
}

func (sv DataSecretVolumesAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(sv.ref.Append("secret"))
}

func (sv DataSecretVolumesAttributes) Versions() terra.ListValue[DataSecretVolumesVersionsAttributes] {
	return terra.ReferenceAsList[DataSecretVolumesVersionsAttributes](sv.ref.Append("versions"))
}

type DataSecretVolumesVersionsAttributes struct {
	ref terra.Reference
}

func (v DataSecretVolumesVersionsAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v DataSecretVolumesVersionsAttributes) InternalWithRef(ref terra.Reference) DataSecretVolumesVersionsAttributes {
	return DataSecretVolumesVersionsAttributes{ref: ref}
}

func (v DataSecretVolumesVersionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v DataSecretVolumesVersionsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("path"))
}

func (v DataSecretVolumesVersionsAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("version"))
}

type DataSourceRepositoryAttributes struct {
	ref terra.Reference
}

func (sr DataSourceRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr DataSourceRepositoryAttributes) InternalWithRef(ref terra.Reference) DataSourceRepositoryAttributes {
	return DataSourceRepositoryAttributes{ref: ref}
}

func (sr DataSourceRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr DataSourceRepositoryAttributes) DeployedUrl() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("deployed_url"))
}

func (sr DataSourceRepositoryAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("url"))
}

type DataEventTriggerState struct {
	EventType     string                               `json:"event_type"`
	Resource      string                               `json:"resource"`
	FailurePolicy []DataEventTriggerFailurePolicyState `json:"failure_policy"`
}

type DataEventTriggerFailurePolicyState struct {
	Retry bool `json:"retry"`
}

type DataSecretEnvironmentVariablesState struct {
	Key       string `json:"key"`
	ProjectId string `json:"project_id"`
	Secret    string `json:"secret"`
	Version   string `json:"version"`
}

type DataSecretVolumesState struct {
	MountPath string                           `json:"mount_path"`
	ProjectId string                           `json:"project_id"`
	Secret    string                           `json:"secret"`
	Versions  []DataSecretVolumesVersionsState `json:"versions"`
}

type DataSecretVolumesVersionsState struct {
	Path    string `json:"path"`
	Version string `json:"version"`
}

type DataSourceRepositoryState struct {
	DeployedUrl string `json:"deployed_url"`
	Url         string `json:"url"`
}
