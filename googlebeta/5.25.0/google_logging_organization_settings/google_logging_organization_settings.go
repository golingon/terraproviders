// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_logging_organization_settings

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_logging_organization_settings.
type Resource struct {
	Name      string
	Args      Args
	state     *googleLoggingOrganizationSettingsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (glos *Resource) Type() string {
	return "google_logging_organization_settings"
}

// LocalName returns the local name for [Resource].
func (glos *Resource) LocalName() string {
	return glos.Name
}

// Configuration returns the configuration (args) for [Resource].
func (glos *Resource) Configuration() interface{} {
	return glos.Args
}

// DependOn is used for other resources to depend on [Resource].
func (glos *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(glos)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (glos *Resource) Dependencies() terra.Dependencies {
	return glos.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (glos *Resource) LifecycleManagement() *terra.Lifecycle {
	return glos.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (glos *Resource) Attributes() googleLoggingOrganizationSettingsAttributes {
	return googleLoggingOrganizationSettingsAttributes{ref: terra.ReferenceResource(glos)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (glos *Resource) ImportState(state io.Reader) error {
	glos.state = &googleLoggingOrganizationSettingsState{}
	if err := json.NewDecoder(state).Decode(glos.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", glos.Type(), glos.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (glos *Resource) State() (*googleLoggingOrganizationSettingsState, bool) {
	return glos.state, glos.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (glos *Resource) StateMust() *googleLoggingOrganizationSettingsState {
	if glos.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", glos.Type(), glos.LocalName()))
	}
	return glos.state
}

// Args contains the configurations for google_logging_organization_settings.
type Args struct {
	// DisableDefaultSink: bool, optional
	DisableDefaultSink terra.BoolValue `hcl:"disable_default_sink,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// Organization: string, required
	Organization terra.StringValue `hcl:"organization,attr" validate:"required"`
	// StorageLocation: string, optional
	StorageLocation terra.StringValue `hcl:"storage_location,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleLoggingOrganizationSettingsAttributes struct {
	ref terra.Reference
}

// DisableDefaultSink returns a reference to field disable_default_sink of google_logging_organization_settings.
func (glos googleLoggingOrganizationSettingsAttributes) DisableDefaultSink() terra.BoolValue {
	return terra.ReferenceAsBool(glos.ref.Append("disable_default_sink"))
}

// Id returns a reference to field id of google_logging_organization_settings.
func (glos googleLoggingOrganizationSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(glos.ref.Append("id"))
}

// KmsKeyName returns a reference to field kms_key_name of google_logging_organization_settings.
func (glos googleLoggingOrganizationSettingsAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(glos.ref.Append("kms_key_name"))
}

// KmsServiceAccountId returns a reference to field kms_service_account_id of google_logging_organization_settings.
func (glos googleLoggingOrganizationSettingsAttributes) KmsServiceAccountId() terra.StringValue {
	return terra.ReferenceAsString(glos.ref.Append("kms_service_account_id"))
}

// LoggingServiceAccountId returns a reference to field logging_service_account_id of google_logging_organization_settings.
func (glos googleLoggingOrganizationSettingsAttributes) LoggingServiceAccountId() terra.StringValue {
	return terra.ReferenceAsString(glos.ref.Append("logging_service_account_id"))
}

// Name returns a reference to field name of google_logging_organization_settings.
func (glos googleLoggingOrganizationSettingsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(glos.ref.Append("name"))
}

// Organization returns a reference to field organization of google_logging_organization_settings.
func (glos googleLoggingOrganizationSettingsAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(glos.ref.Append("organization"))
}

// StorageLocation returns a reference to field storage_location of google_logging_organization_settings.
func (glos googleLoggingOrganizationSettingsAttributes) StorageLocation() terra.StringValue {
	return terra.ReferenceAsString(glos.ref.Append("storage_location"))
}

func (glos googleLoggingOrganizationSettingsAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](glos.ref.Append("timeouts"))
}

type googleLoggingOrganizationSettingsState struct {
	DisableDefaultSink      bool           `json:"disable_default_sink"`
	Id                      string         `json:"id"`
	KmsKeyName              string         `json:"kms_key_name"`
	KmsServiceAccountId     string         `json:"kms_service_account_id"`
	LoggingServiceAccountId string         `json:"logging_service_account_id"`
	Name                    string         `json:"name"`
	Organization            string         `json:"organization"`
	StorageLocation         string         `json:"storage_location"`
	Timeouts                *TimeoutsState `json:"timeouts"`
}
