// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataform_repository_release_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dataform_repository_release_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataformRepositoryReleaseConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdrrc *Resource) Type() string {
	return "google_dataform_repository_release_config"
}

// LocalName returns the local name for [Resource].
func (gdrrc *Resource) LocalName() string {
	return gdrrc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdrrc *Resource) Configuration() interface{} {
	return gdrrc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdrrc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdrrc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdrrc *Resource) Dependencies() terra.Dependencies {
	return gdrrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdrrc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdrrc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdrrc *Resource) Attributes() googleDataformRepositoryReleaseConfigAttributes {
	return googleDataformRepositoryReleaseConfigAttributes{ref: terra.ReferenceResource(gdrrc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdrrc *Resource) ImportState(state io.Reader) error {
	gdrrc.state = &googleDataformRepositoryReleaseConfigState{}
	if err := json.NewDecoder(state).Decode(gdrrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdrrc.Type(), gdrrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdrrc *Resource) State() (*googleDataformRepositoryReleaseConfigState, bool) {
	return gdrrc.state, gdrrc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdrrc *Resource) StateMust() *googleDataformRepositoryReleaseConfigState {
	if gdrrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdrrc.Type(), gdrrc.LocalName()))
	}
	return gdrrc.state
}

// Args contains the configurations for google_dataform_repository_release_config.
type Args struct {
	// CronSchedule: string, optional
	CronSchedule terra.StringValue `hcl:"cron_schedule,attr"`
	// GitCommitish: string, required
	GitCommitish terra.StringValue `hcl:"git_commitish,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Repository: string, optional
	Repository terra.StringValue `hcl:"repository,attr"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
	// CodeCompilationConfig: optional
	CodeCompilationConfig *CodeCompilationConfig `hcl:"code_compilation_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDataformRepositoryReleaseConfigAttributes struct {
	ref terra.Reference
}

// CronSchedule returns a reference to field cron_schedule of google_dataform_repository_release_config.
func (gdrrc googleDataformRepositoryReleaseConfigAttributes) CronSchedule() terra.StringValue {
	return terra.ReferenceAsString(gdrrc.ref.Append("cron_schedule"))
}

// GitCommitish returns a reference to field git_commitish of google_dataform_repository_release_config.
func (gdrrc googleDataformRepositoryReleaseConfigAttributes) GitCommitish() terra.StringValue {
	return terra.ReferenceAsString(gdrrc.ref.Append("git_commitish"))
}

// Id returns a reference to field id of google_dataform_repository_release_config.
func (gdrrc googleDataformRepositoryReleaseConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdrrc.ref.Append("id"))
}

// Name returns a reference to field name of google_dataform_repository_release_config.
func (gdrrc googleDataformRepositoryReleaseConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdrrc.ref.Append("name"))
}

// Project returns a reference to field project of google_dataform_repository_release_config.
func (gdrrc googleDataformRepositoryReleaseConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdrrc.ref.Append("project"))
}

// Region returns a reference to field region of google_dataform_repository_release_config.
func (gdrrc googleDataformRepositoryReleaseConfigAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gdrrc.ref.Append("region"))
}

// Repository returns a reference to field repository of google_dataform_repository_release_config.
func (gdrrc googleDataformRepositoryReleaseConfigAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(gdrrc.ref.Append("repository"))
}

// TimeZone returns a reference to field time_zone of google_dataform_repository_release_config.
func (gdrrc googleDataformRepositoryReleaseConfigAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(gdrrc.ref.Append("time_zone"))
}

func (gdrrc googleDataformRepositoryReleaseConfigAttributes) RecentScheduledReleaseRecords() terra.ListValue[RecentScheduledReleaseRecordsAttributes] {
	return terra.ReferenceAsList[RecentScheduledReleaseRecordsAttributes](gdrrc.ref.Append("recent_scheduled_release_records"))
}

func (gdrrc googleDataformRepositoryReleaseConfigAttributes) CodeCompilationConfig() terra.ListValue[CodeCompilationConfigAttributes] {
	return terra.ReferenceAsList[CodeCompilationConfigAttributes](gdrrc.ref.Append("code_compilation_config"))
}

func (gdrrc googleDataformRepositoryReleaseConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdrrc.ref.Append("timeouts"))
}

type googleDataformRepositoryReleaseConfigState struct {
	CronSchedule                  string                               `json:"cron_schedule"`
	GitCommitish                  string                               `json:"git_commitish"`
	Id                            string                               `json:"id"`
	Name                          string                               `json:"name"`
	Project                       string                               `json:"project"`
	Region                        string                               `json:"region"`
	Repository                    string                               `json:"repository"`
	TimeZone                      string                               `json:"time_zone"`
	RecentScheduledReleaseRecords []RecentScheduledReleaseRecordsState `json:"recent_scheduled_release_records"`
	CodeCompilationConfig         []CodeCompilationConfigState         `json:"code_compilation_config"`
	Timeouts                      *TimeoutsState                       `json:"timeouts"`
}
