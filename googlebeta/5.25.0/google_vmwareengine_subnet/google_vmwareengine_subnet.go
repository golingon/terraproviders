// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_vmwareengine_subnet

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_vmwareengine_subnet.
type Resource struct {
	Name      string
	Args      Args
	state     *googleVmwareengineSubnetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gvs *Resource) Type() string {
	return "google_vmwareengine_subnet"
}

// LocalName returns the local name for [Resource].
func (gvs *Resource) LocalName() string {
	return gvs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gvs *Resource) Configuration() interface{} {
	return gvs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gvs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gvs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gvs *Resource) Dependencies() terra.Dependencies {
	return gvs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gvs *Resource) LifecycleManagement() *terra.Lifecycle {
	return gvs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gvs *Resource) Attributes() googleVmwareengineSubnetAttributes {
	return googleVmwareengineSubnetAttributes{ref: terra.ReferenceResource(gvs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gvs *Resource) ImportState(state io.Reader) error {
	gvs.state = &googleVmwareengineSubnetState{}
	if err := json.NewDecoder(state).Decode(gvs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gvs.Type(), gvs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gvs *Resource) State() (*googleVmwareengineSubnetState, bool) {
	return gvs.state, gvs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gvs *Resource) StateMust() *googleVmwareengineSubnetState {
	if gvs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gvs.Type(), gvs.LocalName()))
	}
	return gvs.state
}

// Args contains the configurations for google_vmwareengine_subnet.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpCidrRange: string, required
	IpCidrRange terra.StringValue `hcl:"ip_cidr_range,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleVmwareengineSubnetAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_vmwareengine_subnet.
func (gvs googleVmwareengineSubnetAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gvs.ref.Append("create_time"))
}

// GatewayId returns a reference to field gateway_id of google_vmwareengine_subnet.
func (gvs googleVmwareengineSubnetAttributes) GatewayId() terra.StringValue {
	return terra.ReferenceAsString(gvs.ref.Append("gateway_id"))
}

// GatewayIp returns a reference to field gateway_ip of google_vmwareengine_subnet.
func (gvs googleVmwareengineSubnetAttributes) GatewayIp() terra.StringValue {
	return terra.ReferenceAsString(gvs.ref.Append("gateway_ip"))
}

// Id returns a reference to field id of google_vmwareengine_subnet.
func (gvs googleVmwareengineSubnetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gvs.ref.Append("id"))
}

// IpCidrRange returns a reference to field ip_cidr_range of google_vmwareengine_subnet.
func (gvs googleVmwareengineSubnetAttributes) IpCidrRange() terra.StringValue {
	return terra.ReferenceAsString(gvs.ref.Append("ip_cidr_range"))
}

// Name returns a reference to field name of google_vmwareengine_subnet.
func (gvs googleVmwareengineSubnetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gvs.ref.Append("name"))
}

// Parent returns a reference to field parent of google_vmwareengine_subnet.
func (gvs googleVmwareengineSubnetAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gvs.ref.Append("parent"))
}

// StandardConfig returns a reference to field standard_config of google_vmwareengine_subnet.
func (gvs googleVmwareengineSubnetAttributes) StandardConfig() terra.BoolValue {
	return terra.ReferenceAsBool(gvs.ref.Append("standard_config"))
}

// State returns a reference to field state of google_vmwareengine_subnet.
func (gvs googleVmwareengineSubnetAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gvs.ref.Append("state"))
}

// Type returns a reference to field type of google_vmwareengine_subnet.
func (gvs googleVmwareengineSubnetAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gvs.ref.Append("type"))
}

// Uid returns a reference to field uid of google_vmwareengine_subnet.
func (gvs googleVmwareengineSubnetAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gvs.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_vmwareengine_subnet.
func (gvs googleVmwareengineSubnetAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gvs.ref.Append("update_time"))
}

// VlanId returns a reference to field vlan_id of google_vmwareengine_subnet.
func (gvs googleVmwareengineSubnetAttributes) VlanId() terra.NumberValue {
	return terra.ReferenceAsNumber(gvs.ref.Append("vlan_id"))
}

func (gvs googleVmwareengineSubnetAttributes) DhcpAddressRanges() terra.ListValue[DhcpAddressRangesAttributes] {
	return terra.ReferenceAsList[DhcpAddressRangesAttributes](gvs.ref.Append("dhcp_address_ranges"))
}

func (gvs googleVmwareengineSubnetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gvs.ref.Append("timeouts"))
}

type googleVmwareengineSubnetState struct {
	CreateTime        string                   `json:"create_time"`
	GatewayId         string                   `json:"gateway_id"`
	GatewayIp         string                   `json:"gateway_ip"`
	Id                string                   `json:"id"`
	IpCidrRange       string                   `json:"ip_cidr_range"`
	Name              string                   `json:"name"`
	Parent            string                   `json:"parent"`
	StandardConfig    bool                     `json:"standard_config"`
	State             string                   `json:"state"`
	Type              string                   `json:"type"`
	Uid               string                   `json:"uid"`
	UpdateTime        string                   `json:"update_time"`
	VlanId            float64                  `json:"vlan_id"`
	DhcpAddressRanges []DhcpAddressRangesState `json:"dhcp_address_ranges"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
