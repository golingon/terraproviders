// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_pubsub_lite_reservation

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_pubsub_lite_reservation.
type Resource struct {
	Name      string
	Args      Args
	state     *googlePubsubLiteReservationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gplr *Resource) Type() string {
	return "google_pubsub_lite_reservation"
}

// LocalName returns the local name for [Resource].
func (gplr *Resource) LocalName() string {
	return gplr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gplr *Resource) Configuration() interface{} {
	return gplr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gplr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gplr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gplr *Resource) Dependencies() terra.Dependencies {
	return gplr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gplr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gplr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gplr *Resource) Attributes() googlePubsubLiteReservationAttributes {
	return googlePubsubLiteReservationAttributes{ref: terra.ReferenceResource(gplr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gplr *Resource) ImportState(state io.Reader) error {
	gplr.state = &googlePubsubLiteReservationState{}
	if err := json.NewDecoder(state).Decode(gplr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gplr.Type(), gplr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gplr *Resource) State() (*googlePubsubLiteReservationState, bool) {
	return gplr.state, gplr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gplr *Resource) StateMust() *googlePubsubLiteReservationState {
	if gplr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gplr.Type(), gplr.LocalName()))
	}
	return gplr.state
}

// Args contains the configurations for google_pubsub_lite_reservation.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ThroughputCapacity: number, required
	ThroughputCapacity terra.NumberValue `hcl:"throughput_capacity,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googlePubsubLiteReservationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_pubsub_lite_reservation.
func (gplr googlePubsubLiteReservationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gplr.ref.Append("id"))
}

// Name returns a reference to field name of google_pubsub_lite_reservation.
func (gplr googlePubsubLiteReservationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gplr.ref.Append("name"))
}

// Project returns a reference to field project of google_pubsub_lite_reservation.
func (gplr googlePubsubLiteReservationAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gplr.ref.Append("project"))
}

// Region returns a reference to field region of google_pubsub_lite_reservation.
func (gplr googlePubsubLiteReservationAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gplr.ref.Append("region"))
}

// ThroughputCapacity returns a reference to field throughput_capacity of google_pubsub_lite_reservation.
func (gplr googlePubsubLiteReservationAttributes) ThroughputCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(gplr.ref.Append("throughput_capacity"))
}

func (gplr googlePubsubLiteReservationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gplr.ref.Append("timeouts"))
}

type googlePubsubLiteReservationState struct {
	Id                 string         `json:"id"`
	Name               string         `json:"name"`
	Project            string         `json:"project"`
	Region             string         `json:"region"`
	ThroughputCapacity float64        `json:"throughput_capacity"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
