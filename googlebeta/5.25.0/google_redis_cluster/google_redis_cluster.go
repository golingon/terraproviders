// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_redis_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_redis_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *googleRedisClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (grc *Resource) Type() string {
	return "google_redis_cluster"
}

// LocalName returns the local name for [Resource].
func (grc *Resource) LocalName() string {
	return grc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (grc *Resource) Configuration() interface{} {
	return grc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (grc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(grc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (grc *Resource) Dependencies() terra.Dependencies {
	return grc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (grc *Resource) LifecycleManagement() *terra.Lifecycle {
	return grc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (grc *Resource) Attributes() googleRedisClusterAttributes {
	return googleRedisClusterAttributes{ref: terra.ReferenceResource(grc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (grc *Resource) ImportState(state io.Reader) error {
	grc.state = &googleRedisClusterState{}
	if err := json.NewDecoder(state).Decode(grc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", grc.Type(), grc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (grc *Resource) State() (*googleRedisClusterState, bool) {
	return grc.state, grc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (grc *Resource) StateMust() *googleRedisClusterState {
	if grc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", grc.Type(), grc.LocalName()))
	}
	return grc.state
}

// Args contains the configurations for google_redis_cluster.
type Args struct {
	// AuthorizationMode: string, optional
	AuthorizationMode terra.StringValue `hcl:"authorization_mode,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NodeType: string, optional
	NodeType terra.StringValue `hcl:"node_type,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ReplicaCount: number, optional
	ReplicaCount terra.NumberValue `hcl:"replica_count,attr"`
	// ShardCount: number, required
	ShardCount terra.NumberValue `hcl:"shard_count,attr" validate:"required"`
	// TransitEncryptionMode: string, optional
	TransitEncryptionMode terra.StringValue `hcl:"transit_encryption_mode,attr"`
	// PscConfigs: min=1
	PscConfigs []PscConfigs `hcl:"psc_configs,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleRedisClusterAttributes struct {
	ref terra.Reference
}

// AuthorizationMode returns a reference to field authorization_mode of google_redis_cluster.
func (grc googleRedisClusterAttributes) AuthorizationMode() terra.StringValue {
	return terra.ReferenceAsString(grc.ref.Append("authorization_mode"))
}

// CreateTime returns a reference to field create_time of google_redis_cluster.
func (grc googleRedisClusterAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(grc.ref.Append("create_time"))
}

// Id returns a reference to field id of google_redis_cluster.
func (grc googleRedisClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(grc.ref.Append("id"))
}

// Name returns a reference to field name of google_redis_cluster.
func (grc googleRedisClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(grc.ref.Append("name"))
}

// NodeType returns a reference to field node_type of google_redis_cluster.
func (grc googleRedisClusterAttributes) NodeType() terra.StringValue {
	return terra.ReferenceAsString(grc.ref.Append("node_type"))
}

// PreciseSizeGb returns a reference to field precise_size_gb of google_redis_cluster.
func (grc googleRedisClusterAttributes) PreciseSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(grc.ref.Append("precise_size_gb"))
}

// Project returns a reference to field project of google_redis_cluster.
func (grc googleRedisClusterAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(grc.ref.Append("project"))
}

// Region returns a reference to field region of google_redis_cluster.
func (grc googleRedisClusterAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(grc.ref.Append("region"))
}

// ReplicaCount returns a reference to field replica_count of google_redis_cluster.
func (grc googleRedisClusterAttributes) ReplicaCount() terra.NumberValue {
	return terra.ReferenceAsNumber(grc.ref.Append("replica_count"))
}

// ShardCount returns a reference to field shard_count of google_redis_cluster.
func (grc googleRedisClusterAttributes) ShardCount() terra.NumberValue {
	return terra.ReferenceAsNumber(grc.ref.Append("shard_count"))
}

// SizeGb returns a reference to field size_gb of google_redis_cluster.
func (grc googleRedisClusterAttributes) SizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(grc.ref.Append("size_gb"))
}

// State returns a reference to field state of google_redis_cluster.
func (grc googleRedisClusterAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(grc.ref.Append("state"))
}

// TransitEncryptionMode returns a reference to field transit_encryption_mode of google_redis_cluster.
func (grc googleRedisClusterAttributes) TransitEncryptionMode() terra.StringValue {
	return terra.ReferenceAsString(grc.ref.Append("transit_encryption_mode"))
}

// Uid returns a reference to field uid of google_redis_cluster.
func (grc googleRedisClusterAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(grc.ref.Append("uid"))
}

func (grc googleRedisClusterAttributes) DiscoveryEndpoints() terra.ListValue[DiscoveryEndpointsAttributes] {
	return terra.ReferenceAsList[DiscoveryEndpointsAttributes](grc.ref.Append("discovery_endpoints"))
}

func (grc googleRedisClusterAttributes) PscConnections() terra.ListValue[PscConnectionsAttributes] {
	return terra.ReferenceAsList[PscConnectionsAttributes](grc.ref.Append("psc_connections"))
}

func (grc googleRedisClusterAttributes) StateInfo() terra.ListValue[StateInfoAttributes] {
	return terra.ReferenceAsList[StateInfoAttributes](grc.ref.Append("state_info"))
}

func (grc googleRedisClusterAttributes) PscConfigs() terra.ListValue[PscConfigsAttributes] {
	return terra.ReferenceAsList[PscConfigsAttributes](grc.ref.Append("psc_configs"))
}

func (grc googleRedisClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](grc.ref.Append("timeouts"))
}

type googleRedisClusterState struct {
	AuthorizationMode     string                    `json:"authorization_mode"`
	CreateTime            string                    `json:"create_time"`
	Id                    string                    `json:"id"`
	Name                  string                    `json:"name"`
	NodeType              string                    `json:"node_type"`
	PreciseSizeGb         float64                   `json:"precise_size_gb"`
	Project               string                    `json:"project"`
	Region                string                    `json:"region"`
	ReplicaCount          float64                   `json:"replica_count"`
	ShardCount            float64                   `json:"shard_count"`
	SizeGb                float64                   `json:"size_gb"`
	State                 string                    `json:"state"`
	TransitEncryptionMode string                    `json:"transit_encryption_mode"`
	Uid                   string                    `json:"uid"`
	DiscoveryEndpoints    []DiscoveryEndpointsState `json:"discovery_endpoints"`
	PscConnections        []PscConnectionsState     `json:"psc_connections"`
	StateInfo             []StateInfoState          `json:"state_info"`
	PscConfigs            []PscConfigsState         `json:"psc_configs"`
	Timeouts              *TimeoutsState            `json:"timeouts"`
}
