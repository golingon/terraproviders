// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigtable_table

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigtable_table.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigtableTableState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbt *Resource) Type() string {
	return "google_bigtable_table"
}

// LocalName returns the local name for [Resource].
func (gbt *Resource) LocalName() string {
	return gbt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbt *Resource) Configuration() interface{} {
	return gbt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbt *Resource) Dependencies() terra.Dependencies {
	return gbt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbt *Resource) Attributes() googleBigtableTableAttributes {
	return googleBigtableTableAttributes{ref: terra.ReferenceResource(gbt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbt *Resource) ImportState(state io.Reader) error {
	gbt.state = &googleBigtableTableState{}
	if err := json.NewDecoder(state).Decode(gbt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbt.Type(), gbt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbt *Resource) State() (*googleBigtableTableState, bool) {
	return gbt.state, gbt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbt *Resource) StateMust() *googleBigtableTableState {
	if gbt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbt.Type(), gbt.LocalName()))
	}
	return gbt.state
}

// Args contains the configurations for google_bigtable_table.
type Args struct {
	// ChangeStreamRetention: string, optional
	ChangeStreamRetention terra.StringValue `hcl:"change_stream_retention,attr"`
	// DeletionProtection: string, optional
	DeletionProtection terra.StringValue `hcl:"deletion_protection,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceName: string, required
	InstanceName terra.StringValue `hcl:"instance_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SplitKeys: list of string, optional
	SplitKeys terra.ListValue[terra.StringValue] `hcl:"split_keys,attr"`
	// ColumnFamily: min=0
	ColumnFamily []ColumnFamily `hcl:"column_family,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBigtableTableAttributes struct {
	ref terra.Reference
}

// ChangeStreamRetention returns a reference to field change_stream_retention of google_bigtable_table.
func (gbt googleBigtableTableAttributes) ChangeStreamRetention() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("change_stream_retention"))
}

// DeletionProtection returns a reference to field deletion_protection of google_bigtable_table.
func (gbt googleBigtableTableAttributes) DeletionProtection() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("deletion_protection"))
}

// Id returns a reference to field id of google_bigtable_table.
func (gbt googleBigtableTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("id"))
}

// InstanceName returns a reference to field instance_name of google_bigtable_table.
func (gbt googleBigtableTableAttributes) InstanceName() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("instance_name"))
}

// Name returns a reference to field name of google_bigtable_table.
func (gbt googleBigtableTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("name"))
}

// Project returns a reference to field project of google_bigtable_table.
func (gbt googleBigtableTableAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("project"))
}

// SplitKeys returns a reference to field split_keys of google_bigtable_table.
func (gbt googleBigtableTableAttributes) SplitKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gbt.ref.Append("split_keys"))
}

func (gbt googleBigtableTableAttributes) ColumnFamily() terra.SetValue[ColumnFamilyAttributes] {
	return terra.ReferenceAsSet[ColumnFamilyAttributes](gbt.ref.Append("column_family"))
}

func (gbt googleBigtableTableAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbt.ref.Append("timeouts"))
}

type googleBigtableTableState struct {
	ChangeStreamRetention string              `json:"change_stream_retention"`
	DeletionProtection    string              `json:"deletion_protection"`
	Id                    string              `json:"id"`
	InstanceName          string              `json:"instance_name"`
	Name                  string              `json:"name"`
	Project               string              `json:"project"`
	SplitKeys             []string            `json:"split_keys"`
	ColumnFamily          []ColumnFamilyState `json:"column_family"`
	Timeouts              *TimeoutsState      `json:"timeouts"`
}
