// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_analytics_hub_listing

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_analytics_hub_listing.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryAnalyticsHubListingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbahl *Resource) Type() string {
	return "google_bigquery_analytics_hub_listing"
}

// LocalName returns the local name for [Resource].
func (gbahl *Resource) LocalName() string {
	return gbahl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbahl *Resource) Configuration() interface{} {
	return gbahl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbahl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbahl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbahl *Resource) Dependencies() terra.Dependencies {
	return gbahl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbahl *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbahl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbahl *Resource) Attributes() googleBigqueryAnalyticsHubListingAttributes {
	return googleBigqueryAnalyticsHubListingAttributes{ref: terra.ReferenceResource(gbahl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbahl *Resource) ImportState(state io.Reader) error {
	gbahl.state = &googleBigqueryAnalyticsHubListingState{}
	if err := json.NewDecoder(state).Decode(gbahl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbahl.Type(), gbahl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbahl *Resource) State() (*googleBigqueryAnalyticsHubListingState, bool) {
	return gbahl.state, gbahl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbahl *Resource) StateMust() *googleBigqueryAnalyticsHubListingState {
	if gbahl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbahl.Type(), gbahl.LocalName()))
	}
	return gbahl.state
}

// Args contains the configurations for google_bigquery_analytics_hub_listing.
type Args struct {
	// Categories: list of string, optional
	Categories terra.ListValue[terra.StringValue] `hcl:"categories,attr"`
	// DataExchangeId: string, required
	DataExchangeId terra.StringValue `hcl:"data_exchange_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Documentation: string, optional
	Documentation terra.StringValue `hcl:"documentation,attr"`
	// Icon: string, optional
	Icon terra.StringValue `hcl:"icon,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListingId: string, required
	ListingId terra.StringValue `hcl:"listing_id,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// PrimaryContact: string, optional
	PrimaryContact terra.StringValue `hcl:"primary_contact,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RequestAccess: string, optional
	RequestAccess terra.StringValue `hcl:"request_access,attr"`
	// BigqueryDataset: required
	BigqueryDataset *BigqueryDataset `hcl:"bigquery_dataset,block" validate:"required"`
	// DataProvider: optional
	DataProvider *DataProvider `hcl:"data_provider,block"`
	// Publisher: optional
	Publisher *Publisher `hcl:"publisher,block"`
	// RestrictedExportConfig: optional
	RestrictedExportConfig *RestrictedExportConfig `hcl:"restricted_export_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBigqueryAnalyticsHubListingAttributes struct {
	ref terra.Reference
}

// Categories returns a reference to field categories of google_bigquery_analytics_hub_listing.
func (gbahl googleBigqueryAnalyticsHubListingAttributes) Categories() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gbahl.ref.Append("categories"))
}

// DataExchangeId returns a reference to field data_exchange_id of google_bigquery_analytics_hub_listing.
func (gbahl googleBigqueryAnalyticsHubListingAttributes) DataExchangeId() terra.StringValue {
	return terra.ReferenceAsString(gbahl.ref.Append("data_exchange_id"))
}

// Description returns a reference to field description of google_bigquery_analytics_hub_listing.
func (gbahl googleBigqueryAnalyticsHubListingAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gbahl.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_bigquery_analytics_hub_listing.
func (gbahl googleBigqueryAnalyticsHubListingAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gbahl.ref.Append("display_name"))
}

// Documentation returns a reference to field documentation of google_bigquery_analytics_hub_listing.
func (gbahl googleBigqueryAnalyticsHubListingAttributes) Documentation() terra.StringValue {
	return terra.ReferenceAsString(gbahl.ref.Append("documentation"))
}

// Icon returns a reference to field icon of google_bigquery_analytics_hub_listing.
func (gbahl googleBigqueryAnalyticsHubListingAttributes) Icon() terra.StringValue {
	return terra.ReferenceAsString(gbahl.ref.Append("icon"))
}

// Id returns a reference to field id of google_bigquery_analytics_hub_listing.
func (gbahl googleBigqueryAnalyticsHubListingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbahl.ref.Append("id"))
}

// ListingId returns a reference to field listing_id of google_bigquery_analytics_hub_listing.
func (gbahl googleBigqueryAnalyticsHubListingAttributes) ListingId() terra.StringValue {
	return terra.ReferenceAsString(gbahl.ref.Append("listing_id"))
}

// Location returns a reference to field location of google_bigquery_analytics_hub_listing.
func (gbahl googleBigqueryAnalyticsHubListingAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbahl.ref.Append("location"))
}

// Name returns a reference to field name of google_bigquery_analytics_hub_listing.
func (gbahl googleBigqueryAnalyticsHubListingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbahl.ref.Append("name"))
}

// PrimaryContact returns a reference to field primary_contact of google_bigquery_analytics_hub_listing.
func (gbahl googleBigqueryAnalyticsHubListingAttributes) PrimaryContact() terra.StringValue {
	return terra.ReferenceAsString(gbahl.ref.Append("primary_contact"))
}

// Project returns a reference to field project of google_bigquery_analytics_hub_listing.
func (gbahl googleBigqueryAnalyticsHubListingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbahl.ref.Append("project"))
}

// RequestAccess returns a reference to field request_access of google_bigquery_analytics_hub_listing.
func (gbahl googleBigqueryAnalyticsHubListingAttributes) RequestAccess() terra.StringValue {
	return terra.ReferenceAsString(gbahl.ref.Append("request_access"))
}

func (gbahl googleBigqueryAnalyticsHubListingAttributes) BigqueryDataset() terra.ListValue[BigqueryDatasetAttributes] {
	return terra.ReferenceAsList[BigqueryDatasetAttributes](gbahl.ref.Append("bigquery_dataset"))
}

func (gbahl googleBigqueryAnalyticsHubListingAttributes) DataProvider() terra.ListValue[DataProviderAttributes] {
	return terra.ReferenceAsList[DataProviderAttributes](gbahl.ref.Append("data_provider"))
}

func (gbahl googleBigqueryAnalyticsHubListingAttributes) Publisher() terra.ListValue[PublisherAttributes] {
	return terra.ReferenceAsList[PublisherAttributes](gbahl.ref.Append("publisher"))
}

func (gbahl googleBigqueryAnalyticsHubListingAttributes) RestrictedExportConfig() terra.ListValue[RestrictedExportConfigAttributes] {
	return terra.ReferenceAsList[RestrictedExportConfigAttributes](gbahl.ref.Append("restricted_export_config"))
}

func (gbahl googleBigqueryAnalyticsHubListingAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbahl.ref.Append("timeouts"))
}

type googleBigqueryAnalyticsHubListingState struct {
	Categories             []string                      `json:"categories"`
	DataExchangeId         string                        `json:"data_exchange_id"`
	Description            string                        `json:"description"`
	DisplayName            string                        `json:"display_name"`
	Documentation          string                        `json:"documentation"`
	Icon                   string                        `json:"icon"`
	Id                     string                        `json:"id"`
	ListingId              string                        `json:"listing_id"`
	Location               string                        `json:"location"`
	Name                   string                        `json:"name"`
	PrimaryContact         string                        `json:"primary_contact"`
	Project                string                        `json:"project"`
	RequestAccess          string                        `json:"request_access"`
	BigqueryDataset        []BigqueryDatasetState        `json:"bigquery_dataset"`
	DataProvider           []DataProviderState           `json:"data_provider"`
	Publisher              []PublisherState              `json:"publisher"`
	RestrictedExportConfig []RestrictedExportConfigState `json:"restricted_export_config"`
	Timeouts               *TimeoutsState                `json:"timeouts"`
}
