// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_vmwareengine_network_peering

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_vmwareengine_network_peering.
type Resource struct {
	Name      string
	Args      Args
	state     *googleVmwareengineNetworkPeeringState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gvnp *Resource) Type() string {
	return "google_vmwareengine_network_peering"
}

// LocalName returns the local name for [Resource].
func (gvnp *Resource) LocalName() string {
	return gvnp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gvnp *Resource) Configuration() interface{} {
	return gvnp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gvnp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gvnp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gvnp *Resource) Dependencies() terra.Dependencies {
	return gvnp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gvnp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gvnp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gvnp *Resource) Attributes() googleVmwareengineNetworkPeeringAttributes {
	return googleVmwareengineNetworkPeeringAttributes{ref: terra.ReferenceResource(gvnp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gvnp *Resource) ImportState(state io.Reader) error {
	gvnp.state = &googleVmwareengineNetworkPeeringState{}
	if err := json.NewDecoder(state).Decode(gvnp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gvnp.Type(), gvnp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gvnp *Resource) State() (*googleVmwareengineNetworkPeeringState, bool) {
	return gvnp.state, gvnp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gvnp *Resource) StateMust() *googleVmwareengineNetworkPeeringState {
	if gvnp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gvnp.Type(), gvnp.LocalName()))
	}
	return gvnp.state
}

// Args contains the configurations for google_vmwareengine_network_peering.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExportCustomRoutes: bool, optional
	ExportCustomRoutes terra.BoolValue `hcl:"export_custom_routes,attr"`
	// ExportCustomRoutesWithPublicIp: bool, optional
	ExportCustomRoutesWithPublicIp terra.BoolValue `hcl:"export_custom_routes_with_public_ip,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImportCustomRoutes: bool, optional
	ImportCustomRoutes terra.BoolValue `hcl:"import_custom_routes,attr"`
	// ImportCustomRoutesWithPublicIp: bool, optional
	ImportCustomRoutesWithPublicIp terra.BoolValue `hcl:"import_custom_routes_with_public_ip,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PeerNetwork: string, required
	PeerNetwork terra.StringValue `hcl:"peer_network,attr" validate:"required"`
	// PeerNetworkType: string, required
	PeerNetworkType terra.StringValue `hcl:"peer_network_type,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// VmwareEngineNetwork: string, required
	VmwareEngineNetwork terra.StringValue `hcl:"vmware_engine_network,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleVmwareengineNetworkPeeringAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("create_time"))
}

// Description returns a reference to field description of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("description"))
}

// ExportCustomRoutes returns a reference to field export_custom_routes of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) ExportCustomRoutes() terra.BoolValue {
	return terra.ReferenceAsBool(gvnp.ref.Append("export_custom_routes"))
}

// ExportCustomRoutesWithPublicIp returns a reference to field export_custom_routes_with_public_ip of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) ExportCustomRoutesWithPublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(gvnp.ref.Append("export_custom_routes_with_public_ip"))
}

// Id returns a reference to field id of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("id"))
}

// ImportCustomRoutes returns a reference to field import_custom_routes of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) ImportCustomRoutes() terra.BoolValue {
	return terra.ReferenceAsBool(gvnp.ref.Append("import_custom_routes"))
}

// ImportCustomRoutesWithPublicIp returns a reference to field import_custom_routes_with_public_ip of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) ImportCustomRoutesWithPublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(gvnp.ref.Append("import_custom_routes_with_public_ip"))
}

// Name returns a reference to field name of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("name"))
}

// PeerNetwork returns a reference to field peer_network of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) PeerNetwork() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("peer_network"))
}

// PeerNetworkType returns a reference to field peer_network_type of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) PeerNetworkType() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("peer_network_type"))
}

// Project returns a reference to field project of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("project"))
}

// State returns a reference to field state of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("state"))
}

// StateDetails returns a reference to field state_details of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) StateDetails() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("state_details"))
}

// Uid returns a reference to field uid of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("update_time"))
}

// VmwareEngineNetwork returns a reference to field vmware_engine_network of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) VmwareEngineNetwork() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("vmware_engine_network"))
}

// VmwareEngineNetworkCanonical returns a reference to field vmware_engine_network_canonical of google_vmwareengine_network_peering.
func (gvnp googleVmwareengineNetworkPeeringAttributes) VmwareEngineNetworkCanonical() terra.StringValue {
	return terra.ReferenceAsString(gvnp.ref.Append("vmware_engine_network_canonical"))
}

func (gvnp googleVmwareengineNetworkPeeringAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gvnp.ref.Append("timeouts"))
}

type googleVmwareengineNetworkPeeringState struct {
	CreateTime                     string         `json:"create_time"`
	Description                    string         `json:"description"`
	ExportCustomRoutes             bool           `json:"export_custom_routes"`
	ExportCustomRoutesWithPublicIp bool           `json:"export_custom_routes_with_public_ip"`
	Id                             string         `json:"id"`
	ImportCustomRoutes             bool           `json:"import_custom_routes"`
	ImportCustomRoutesWithPublicIp bool           `json:"import_custom_routes_with_public_ip"`
	Name                           string         `json:"name"`
	PeerNetwork                    string         `json:"peer_network"`
	PeerNetworkType                string         `json:"peer_network_type"`
	Project                        string         `json:"project"`
	State                          string         `json:"state"`
	StateDetails                   string         `json:"state_details"`
	Uid                            string         `json:"uid"`
	UpdateTime                     string         `json:"update_time"`
	VmwareEngineNetwork            string         `json:"vmware_engine_network"`
	VmwareEngineNetworkCanonical   string         `json:"vmware_engine_network_canonical"`
	Timeouts                       *TimeoutsState `json:"timeouts"`
}
