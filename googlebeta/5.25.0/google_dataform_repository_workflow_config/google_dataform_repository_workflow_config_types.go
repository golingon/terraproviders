// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataform_repository_workflow_config

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type InvocationConfig struct {
	// FullyRefreshIncrementalTablesEnabled: bool, optional
	FullyRefreshIncrementalTablesEnabled terra.BoolValue `hcl:"fully_refresh_incremental_tables_enabled,attr"`
	// IncludedTags: list of string, optional
	IncludedTags terra.ListValue[terra.StringValue] `hcl:"included_tags,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// TransitiveDependenciesIncluded: bool, optional
	TransitiveDependenciesIncluded terra.BoolValue `hcl:"transitive_dependencies_included,attr"`
	// TransitiveDependentsIncluded: bool, optional
	TransitiveDependentsIncluded terra.BoolValue `hcl:"transitive_dependents_included,attr"`
	// InvocationConfigIncludedTargets: min=0
	IncludedTargets []InvocationConfigIncludedTargets `hcl:"included_targets,block" validate:"min=0"`
}

type InvocationConfigIncludedTargets struct {
	// Database: string, optional
	Database terra.StringValue `hcl:"database,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RecentScheduledExecutionRecordsAttributes struct {
	ref terra.Reference
}

func (rser RecentScheduledExecutionRecordsAttributes) InternalRef() (terra.Reference, error) {
	return rser.ref, nil
}

func (rser RecentScheduledExecutionRecordsAttributes) InternalWithRef(ref terra.Reference) RecentScheduledExecutionRecordsAttributes {
	return RecentScheduledExecutionRecordsAttributes{ref: ref}
}

func (rser RecentScheduledExecutionRecordsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rser.ref.InternalTokens()
}

func (rser RecentScheduledExecutionRecordsAttributes) ExecutionTime() terra.StringValue {
	return terra.ReferenceAsString(rser.ref.Append("execution_time"))
}

func (rser RecentScheduledExecutionRecordsAttributes) WorkflowInvocation() terra.StringValue {
	return terra.ReferenceAsString(rser.ref.Append("workflow_invocation"))
}

func (rser RecentScheduledExecutionRecordsAttributes) ErrorStatus() terra.ListValue[RecentScheduledExecutionRecordsErrorStatusAttributes] {
	return terra.ReferenceAsList[RecentScheduledExecutionRecordsErrorStatusAttributes](rser.ref.Append("error_status"))
}

type RecentScheduledExecutionRecordsErrorStatusAttributes struct {
	ref terra.Reference
}

func (es RecentScheduledExecutionRecordsErrorStatusAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es RecentScheduledExecutionRecordsErrorStatusAttributes) InternalWithRef(ref terra.Reference) RecentScheduledExecutionRecordsErrorStatusAttributes {
	return RecentScheduledExecutionRecordsErrorStatusAttributes{ref: ref}
}

func (es RecentScheduledExecutionRecordsErrorStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es RecentScheduledExecutionRecordsErrorStatusAttributes) Code() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("code"))
}

func (es RecentScheduledExecutionRecordsErrorStatusAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("message"))
}

type InvocationConfigAttributes struct {
	ref terra.Reference
}

func (ic InvocationConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic InvocationConfigAttributes) InternalWithRef(ref terra.Reference) InvocationConfigAttributes {
	return InvocationConfigAttributes{ref: ref}
}

func (ic InvocationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic InvocationConfigAttributes) FullyRefreshIncrementalTablesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("fully_refresh_incremental_tables_enabled"))
}

func (ic InvocationConfigAttributes) IncludedTags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ic.ref.Append("included_tags"))
}

func (ic InvocationConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("service_account"))
}

func (ic InvocationConfigAttributes) TransitiveDependenciesIncluded() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("transitive_dependencies_included"))
}

func (ic InvocationConfigAttributes) TransitiveDependentsIncluded() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("transitive_dependents_included"))
}

func (ic InvocationConfigAttributes) IncludedTargets() terra.ListValue[InvocationConfigIncludedTargetsAttributes] {
	return terra.ReferenceAsList[InvocationConfigIncludedTargetsAttributes](ic.ref.Append("included_targets"))
}

type InvocationConfigIncludedTargetsAttributes struct {
	ref terra.Reference
}

func (it InvocationConfigIncludedTargetsAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it InvocationConfigIncludedTargetsAttributes) InternalWithRef(ref terra.Reference) InvocationConfigIncludedTargetsAttributes {
	return InvocationConfigIncludedTargetsAttributes{ref: ref}
}

func (it InvocationConfigIncludedTargetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it InvocationConfigIncludedTargetsAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("database"))
}

func (it InvocationConfigIncludedTargetsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("name"))
}

func (it InvocationConfigIncludedTargetsAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("schema"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RecentScheduledExecutionRecordsState struct {
	ExecutionTime      string                                            `json:"execution_time"`
	WorkflowInvocation string                                            `json:"workflow_invocation"`
	ErrorStatus        []RecentScheduledExecutionRecordsErrorStatusState `json:"error_status"`
}

type RecentScheduledExecutionRecordsErrorStatusState struct {
	Code    float64 `json:"code"`
	Message string  `json:"message"`
}

type InvocationConfigState struct {
	FullyRefreshIncrementalTablesEnabled bool                                   `json:"fully_refresh_incremental_tables_enabled"`
	IncludedTags                         []string                               `json:"included_tags"`
	ServiceAccount                       string                                 `json:"service_account"`
	TransitiveDependenciesIncluded       bool                                   `json:"transitive_dependencies_included"`
	TransitiveDependentsIncluded         bool                                   `json:"transitive_dependents_included"`
	IncludedTargets                      []InvocationConfigIncludedTargetsState `json:"included_targets"`
}

type InvocationConfigIncludedTargetsState struct {
	Database string `json:"database"`
	Name     string `json:"name"`
	Schema   string `json:"schema"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
