// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_data_catalog_entry

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_data_catalog_entry.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataCatalogEntryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdce *Resource) Type() string {
	return "google_data_catalog_entry"
}

// LocalName returns the local name for [Resource].
func (gdce *Resource) LocalName() string {
	return gdce.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdce *Resource) Configuration() interface{} {
	return gdce.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdce *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdce)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdce *Resource) Dependencies() terra.Dependencies {
	return gdce.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdce *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdce.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdce *Resource) Attributes() googleDataCatalogEntryAttributes {
	return googleDataCatalogEntryAttributes{ref: terra.ReferenceResource(gdce)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdce *Resource) ImportState(state io.Reader) error {
	gdce.state = &googleDataCatalogEntryState{}
	if err := json.NewDecoder(state).Decode(gdce.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdce.Type(), gdce.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdce *Resource) State() (*googleDataCatalogEntryState, bool) {
	return gdce.state, gdce.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdce *Resource) StateMust() *googleDataCatalogEntryState {
	if gdce.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdce.Type(), gdce.LocalName()))
	}
	return gdce.state
}

// Args contains the configurations for google_data_catalog_entry.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// EntryGroup: string, required
	EntryGroup terra.StringValue `hcl:"entry_group,attr" validate:"required"`
	// EntryId: string, required
	EntryId terra.StringValue `hcl:"entry_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkedResource: string, optional
	LinkedResource terra.StringValue `hcl:"linked_resource,attr"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// UserSpecifiedSystem: string, optional
	UserSpecifiedSystem terra.StringValue `hcl:"user_specified_system,attr"`
	// UserSpecifiedType: string, optional
	UserSpecifiedType terra.StringValue `hcl:"user_specified_type,attr"`
	// GcsFilesetSpec: optional
	GcsFilesetSpec *GcsFilesetSpec `hcl:"gcs_fileset_spec,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDataCatalogEntryAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_data_catalog_entry.
func (gdce googleDataCatalogEntryAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdce.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_data_catalog_entry.
func (gdce googleDataCatalogEntryAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdce.ref.Append("display_name"))
}

// EntryGroup returns a reference to field entry_group of google_data_catalog_entry.
func (gdce googleDataCatalogEntryAttributes) EntryGroup() terra.StringValue {
	return terra.ReferenceAsString(gdce.ref.Append("entry_group"))
}

// EntryId returns a reference to field entry_id of google_data_catalog_entry.
func (gdce googleDataCatalogEntryAttributes) EntryId() terra.StringValue {
	return terra.ReferenceAsString(gdce.ref.Append("entry_id"))
}

// Id returns a reference to field id of google_data_catalog_entry.
func (gdce googleDataCatalogEntryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdce.ref.Append("id"))
}

// IntegratedSystem returns a reference to field integrated_system of google_data_catalog_entry.
func (gdce googleDataCatalogEntryAttributes) IntegratedSystem() terra.StringValue {
	return terra.ReferenceAsString(gdce.ref.Append("integrated_system"))
}

// LinkedResource returns a reference to field linked_resource of google_data_catalog_entry.
func (gdce googleDataCatalogEntryAttributes) LinkedResource() terra.StringValue {
	return terra.ReferenceAsString(gdce.ref.Append("linked_resource"))
}

// Name returns a reference to field name of google_data_catalog_entry.
func (gdce googleDataCatalogEntryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdce.ref.Append("name"))
}

// Schema returns a reference to field schema of google_data_catalog_entry.
func (gdce googleDataCatalogEntryAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(gdce.ref.Append("schema"))
}

// Type returns a reference to field type of google_data_catalog_entry.
func (gdce googleDataCatalogEntryAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gdce.ref.Append("type"))
}

// UserSpecifiedSystem returns a reference to field user_specified_system of google_data_catalog_entry.
func (gdce googleDataCatalogEntryAttributes) UserSpecifiedSystem() terra.StringValue {
	return terra.ReferenceAsString(gdce.ref.Append("user_specified_system"))
}

// UserSpecifiedType returns a reference to field user_specified_type of google_data_catalog_entry.
func (gdce googleDataCatalogEntryAttributes) UserSpecifiedType() terra.StringValue {
	return terra.ReferenceAsString(gdce.ref.Append("user_specified_type"))
}

func (gdce googleDataCatalogEntryAttributes) BigqueryDateShardedSpec() terra.ListValue[BigqueryDateShardedSpecAttributes] {
	return terra.ReferenceAsList[BigqueryDateShardedSpecAttributes](gdce.ref.Append("bigquery_date_sharded_spec"))
}

func (gdce googleDataCatalogEntryAttributes) BigqueryTableSpec() terra.ListValue[BigqueryTableSpecAttributes] {
	return terra.ReferenceAsList[BigqueryTableSpecAttributes](gdce.ref.Append("bigquery_table_spec"))
}

func (gdce googleDataCatalogEntryAttributes) GcsFilesetSpec() terra.ListValue[GcsFilesetSpecAttributes] {
	return terra.ReferenceAsList[GcsFilesetSpecAttributes](gdce.ref.Append("gcs_fileset_spec"))
}

func (gdce googleDataCatalogEntryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdce.ref.Append("timeouts"))
}

type googleDataCatalogEntryState struct {
	Description             string                         `json:"description"`
	DisplayName             string                         `json:"display_name"`
	EntryGroup              string                         `json:"entry_group"`
	EntryId                 string                         `json:"entry_id"`
	Id                      string                         `json:"id"`
	IntegratedSystem        string                         `json:"integrated_system"`
	LinkedResource          string                         `json:"linked_resource"`
	Name                    string                         `json:"name"`
	Schema                  string                         `json:"schema"`
	Type                    string                         `json:"type"`
	UserSpecifiedSystem     string                         `json:"user_specified_system"`
	UserSpecifiedType       string                         `json:"user_specified_type"`
	BigqueryDateShardedSpec []BigqueryDateShardedSpecState `json:"bigquery_date_sharded_spec"`
	BigqueryTableSpec       []BigqueryTableSpecState       `json:"bigquery_table_spec"`
	GcsFilesetSpec          []GcsFilesetSpecState          `json:"gcs_fileset_spec"`
	Timeouts                *TimeoutsState                 `json:"timeouts"`
}
