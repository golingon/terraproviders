// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_storage_insights_report_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_storage_insights_report_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleStorageInsightsReportConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsirc *Resource) Type() string {
	return "google_storage_insights_report_config"
}

// LocalName returns the local name for [Resource].
func (gsirc *Resource) LocalName() string {
	return gsirc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsirc *Resource) Configuration() interface{} {
	return gsirc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsirc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsirc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsirc *Resource) Dependencies() terra.Dependencies {
	return gsirc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsirc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsirc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsirc *Resource) Attributes() googleStorageInsightsReportConfigAttributes {
	return googleStorageInsightsReportConfigAttributes{ref: terra.ReferenceResource(gsirc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsirc *Resource) ImportState(state io.Reader) error {
	gsirc.state = &googleStorageInsightsReportConfigState{}
	if err := json.NewDecoder(state).Decode(gsirc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsirc.Type(), gsirc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsirc *Resource) State() (*googleStorageInsightsReportConfigState, bool) {
	return gsirc.state, gsirc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsirc *Resource) StateMust() *googleStorageInsightsReportConfigState {
	if gsirc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsirc.Type(), gsirc.LocalName()))
	}
	return gsirc.state
}

// Args contains the configurations for google_storage_insights_report_config.
type Args struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// CsvOptions: required
	CsvOptions *CsvOptions `hcl:"csv_options,block" validate:"required"`
	// FrequencyOptions: optional
	FrequencyOptions *FrequencyOptions `hcl:"frequency_options,block"`
	// ObjectMetadataReportOptions: optional
	ObjectMetadataReportOptions *ObjectMetadataReportOptions `hcl:"object_metadata_report_options,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleStorageInsightsReportConfigAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of google_storage_insights_report_config.
func (gsirc googleStorageInsightsReportConfigAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gsirc.ref.Append("display_name"))
}

// Id returns a reference to field id of google_storage_insights_report_config.
func (gsirc googleStorageInsightsReportConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsirc.ref.Append("id"))
}

// Location returns a reference to field location of google_storage_insights_report_config.
func (gsirc googleStorageInsightsReportConfigAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gsirc.ref.Append("location"))
}

// Name returns a reference to field name of google_storage_insights_report_config.
func (gsirc googleStorageInsightsReportConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsirc.ref.Append("name"))
}

// Project returns a reference to field project of google_storage_insights_report_config.
func (gsirc googleStorageInsightsReportConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gsirc.ref.Append("project"))
}

func (gsirc googleStorageInsightsReportConfigAttributes) CsvOptions() terra.ListValue[CsvOptionsAttributes] {
	return terra.ReferenceAsList[CsvOptionsAttributes](gsirc.ref.Append("csv_options"))
}

func (gsirc googleStorageInsightsReportConfigAttributes) FrequencyOptions() terra.ListValue[FrequencyOptionsAttributes] {
	return terra.ReferenceAsList[FrequencyOptionsAttributes](gsirc.ref.Append("frequency_options"))
}

func (gsirc googleStorageInsightsReportConfigAttributes) ObjectMetadataReportOptions() terra.ListValue[ObjectMetadataReportOptionsAttributes] {
	return terra.ReferenceAsList[ObjectMetadataReportOptionsAttributes](gsirc.ref.Append("object_metadata_report_options"))
}

func (gsirc googleStorageInsightsReportConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsirc.ref.Append("timeouts"))
}

type googleStorageInsightsReportConfigState struct {
	DisplayName                 string                             `json:"display_name"`
	Id                          string                             `json:"id"`
	Location                    string                             `json:"location"`
	Name                        string                             `json:"name"`
	Project                     string                             `json:"project"`
	CsvOptions                  []CsvOptionsState                  `json:"csv_options"`
	FrequencyOptions            []FrequencyOptionsState            `json:"frequency_options"`
	ObjectMetadataReportOptions []ObjectMetadataReportOptionsState `json:"object_metadata_report_options"`
	Timeouts                    *TimeoutsState                     `json:"timeouts"`
}
