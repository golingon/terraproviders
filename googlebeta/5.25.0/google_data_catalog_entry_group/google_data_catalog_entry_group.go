// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_data_catalog_entry_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_data_catalog_entry_group.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataCatalogEntryGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdceg *Resource) Type() string {
	return "google_data_catalog_entry_group"
}

// LocalName returns the local name for [Resource].
func (gdceg *Resource) LocalName() string {
	return gdceg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdceg *Resource) Configuration() interface{} {
	return gdceg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdceg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdceg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdceg *Resource) Dependencies() terra.Dependencies {
	return gdceg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdceg *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdceg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdceg *Resource) Attributes() googleDataCatalogEntryGroupAttributes {
	return googleDataCatalogEntryGroupAttributes{ref: terra.ReferenceResource(gdceg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdceg *Resource) ImportState(state io.Reader) error {
	gdceg.state = &googleDataCatalogEntryGroupState{}
	if err := json.NewDecoder(state).Decode(gdceg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdceg.Type(), gdceg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdceg *Resource) State() (*googleDataCatalogEntryGroupState, bool) {
	return gdceg.state, gdceg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdceg *Resource) StateMust() *googleDataCatalogEntryGroupState {
	if gdceg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdceg.Type(), gdceg.LocalName()))
	}
	return gdceg.state
}

// Args contains the configurations for google_data_catalog_entry_group.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// EntryGroupId: string, required
	EntryGroupId terra.StringValue `hcl:"entry_group_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDataCatalogEntryGroupAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_data_catalog_entry_group.
func (gdceg googleDataCatalogEntryGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdceg.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_data_catalog_entry_group.
func (gdceg googleDataCatalogEntryGroupAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdceg.ref.Append("display_name"))
}

// EntryGroupId returns a reference to field entry_group_id of google_data_catalog_entry_group.
func (gdceg googleDataCatalogEntryGroupAttributes) EntryGroupId() terra.StringValue {
	return terra.ReferenceAsString(gdceg.ref.Append("entry_group_id"))
}

// Id returns a reference to field id of google_data_catalog_entry_group.
func (gdceg googleDataCatalogEntryGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdceg.ref.Append("id"))
}

// Name returns a reference to field name of google_data_catalog_entry_group.
func (gdceg googleDataCatalogEntryGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdceg.ref.Append("name"))
}

// Project returns a reference to field project of google_data_catalog_entry_group.
func (gdceg googleDataCatalogEntryGroupAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdceg.ref.Append("project"))
}

// Region returns a reference to field region of google_data_catalog_entry_group.
func (gdceg googleDataCatalogEntryGroupAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gdceg.ref.Append("region"))
}

func (gdceg googleDataCatalogEntryGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdceg.ref.Append("timeouts"))
}

type googleDataCatalogEntryGroupState struct {
	Description  string         `json:"description"`
	DisplayName  string         `json:"display_name"`
	EntryGroupId string         `json:"entry_group_id"`
	Id           string         `json:"id"`
	Name         string         `json:"name"`
	Project      string         `json:"project"`
	Region       string         `json:"region"`
	Timeouts     *TimeoutsState `json:"timeouts"`
}
