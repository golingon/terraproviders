// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_firewall_policy_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_firewall_policy_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeFirewallPolicyRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcfpr *Resource) Type() string {
	return "google_compute_firewall_policy_rule"
}

// LocalName returns the local name for [Resource].
func (gcfpr *Resource) LocalName() string {
	return gcfpr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcfpr *Resource) Configuration() interface{} {
	return gcfpr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcfpr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcfpr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcfpr *Resource) Dependencies() terra.Dependencies {
	return gcfpr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcfpr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcfpr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcfpr *Resource) Attributes() googleComputeFirewallPolicyRuleAttributes {
	return googleComputeFirewallPolicyRuleAttributes{ref: terra.ReferenceResource(gcfpr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcfpr *Resource) ImportState(state io.Reader) error {
	gcfpr.state = &googleComputeFirewallPolicyRuleState{}
	if err := json.NewDecoder(state).Decode(gcfpr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcfpr.Type(), gcfpr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcfpr *Resource) State() (*googleComputeFirewallPolicyRuleState, bool) {
	return gcfpr.state, gcfpr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcfpr *Resource) StateMust() *googleComputeFirewallPolicyRuleState {
	if gcfpr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcfpr.Type(), gcfpr.LocalName()))
	}
	return gcfpr.state
}

// Args contains the configurations for google_compute_firewall_policy_rule.
type Args struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Direction: string, required
	Direction terra.StringValue `hcl:"direction,attr" validate:"required"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// EnableLogging: bool, optional
	EnableLogging terra.BoolValue `hcl:"enable_logging,attr"`
	// FirewallPolicy: string, required
	FirewallPolicy terra.StringValue `hcl:"firewall_policy,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// TargetResources: list of string, optional
	TargetResources terra.ListValue[terra.StringValue] `hcl:"target_resources,attr"`
	// TargetServiceAccounts: list of string, optional
	TargetServiceAccounts terra.ListValue[terra.StringValue] `hcl:"target_service_accounts,attr"`
	// Match: required
	Match *Match `hcl:"match,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeFirewallPolicyRuleAttributes struct {
	ref terra.Reference
}

// Action returns a reference to field action of google_compute_firewall_policy_rule.
func (gcfpr googleComputeFirewallPolicyRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(gcfpr.ref.Append("action"))
}

// Description returns a reference to field description of google_compute_firewall_policy_rule.
func (gcfpr googleComputeFirewallPolicyRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcfpr.ref.Append("description"))
}

// Direction returns a reference to field direction of google_compute_firewall_policy_rule.
func (gcfpr googleComputeFirewallPolicyRuleAttributes) Direction() terra.StringValue {
	return terra.ReferenceAsString(gcfpr.ref.Append("direction"))
}

// Disabled returns a reference to field disabled of google_compute_firewall_policy_rule.
func (gcfpr googleComputeFirewallPolicyRuleAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(gcfpr.ref.Append("disabled"))
}

// EnableLogging returns a reference to field enable_logging of google_compute_firewall_policy_rule.
func (gcfpr googleComputeFirewallPolicyRuleAttributes) EnableLogging() terra.BoolValue {
	return terra.ReferenceAsBool(gcfpr.ref.Append("enable_logging"))
}

// FirewallPolicy returns a reference to field firewall_policy of google_compute_firewall_policy_rule.
func (gcfpr googleComputeFirewallPolicyRuleAttributes) FirewallPolicy() terra.StringValue {
	return terra.ReferenceAsString(gcfpr.ref.Append("firewall_policy"))
}

// Id returns a reference to field id of google_compute_firewall_policy_rule.
func (gcfpr googleComputeFirewallPolicyRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcfpr.ref.Append("id"))
}

// Kind returns a reference to field kind of google_compute_firewall_policy_rule.
func (gcfpr googleComputeFirewallPolicyRuleAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(gcfpr.ref.Append("kind"))
}

// Priority returns a reference to field priority of google_compute_firewall_policy_rule.
func (gcfpr googleComputeFirewallPolicyRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(gcfpr.ref.Append("priority"))
}

// RuleTupleCount returns a reference to field rule_tuple_count of google_compute_firewall_policy_rule.
func (gcfpr googleComputeFirewallPolicyRuleAttributes) RuleTupleCount() terra.NumberValue {
	return terra.ReferenceAsNumber(gcfpr.ref.Append("rule_tuple_count"))
}

// TargetResources returns a reference to field target_resources of google_compute_firewall_policy_rule.
func (gcfpr googleComputeFirewallPolicyRuleAttributes) TargetResources() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcfpr.ref.Append("target_resources"))
}

// TargetServiceAccounts returns a reference to field target_service_accounts of google_compute_firewall_policy_rule.
func (gcfpr googleComputeFirewallPolicyRuleAttributes) TargetServiceAccounts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcfpr.ref.Append("target_service_accounts"))
}

func (gcfpr googleComputeFirewallPolicyRuleAttributes) Match() terra.ListValue[MatchAttributes] {
	return terra.ReferenceAsList[MatchAttributes](gcfpr.ref.Append("match"))
}

func (gcfpr googleComputeFirewallPolicyRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcfpr.ref.Append("timeouts"))
}

type googleComputeFirewallPolicyRuleState struct {
	Action                string         `json:"action"`
	Description           string         `json:"description"`
	Direction             string         `json:"direction"`
	Disabled              bool           `json:"disabled"`
	EnableLogging         bool           `json:"enable_logging"`
	FirewallPolicy        string         `json:"firewall_policy"`
	Id                    string         `json:"id"`
	Kind                  string         `json:"kind"`
	Priority              float64        `json:"priority"`
	RuleTupleCount        float64        `json:"rule_tuple_count"`
	TargetResources       []string       `json:"target_resources"`
	TargetServiceAccounts []string       `json:"target_service_accounts"`
	Match                 []MatchState   `json:"match"`
	Timeouts              *TimeoutsState `json:"timeouts"`
}
