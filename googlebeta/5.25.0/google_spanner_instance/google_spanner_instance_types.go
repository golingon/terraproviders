// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_spanner_instance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AutoscalingConfig struct {
	// AutoscalingConfigAutoscalingLimits: optional
	AutoscalingLimits *AutoscalingConfigAutoscalingLimits `hcl:"autoscaling_limits,block"`
	// AutoscalingConfigAutoscalingTargets: optional
	AutoscalingTargets *AutoscalingConfigAutoscalingTargets `hcl:"autoscaling_targets,block"`
}

type AutoscalingConfigAutoscalingLimits struct {
	// MaxNodes: number, optional
	MaxNodes terra.NumberValue `hcl:"max_nodes,attr"`
	// MaxProcessingUnits: number, optional
	MaxProcessingUnits terra.NumberValue `hcl:"max_processing_units,attr"`
	// MinNodes: number, optional
	MinNodes terra.NumberValue `hcl:"min_nodes,attr"`
	// MinProcessingUnits: number, optional
	MinProcessingUnits terra.NumberValue `hcl:"min_processing_units,attr"`
}

type AutoscalingConfigAutoscalingTargets struct {
	// HighPriorityCpuUtilizationPercent: number, optional
	HighPriorityCpuUtilizationPercent terra.NumberValue `hcl:"high_priority_cpu_utilization_percent,attr"`
	// StorageUtilizationPercent: number, optional
	StorageUtilizationPercent terra.NumberValue `hcl:"storage_utilization_percent,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AutoscalingConfigAttributes struct {
	ref terra.Reference
}

func (ac AutoscalingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AutoscalingConfigAttributes) InternalWithRef(ref terra.Reference) AutoscalingConfigAttributes {
	return AutoscalingConfigAttributes{ref: ref}
}

func (ac AutoscalingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AutoscalingConfigAttributes) AutoscalingLimits() terra.ListValue[AutoscalingConfigAutoscalingLimitsAttributes] {
	return terra.ReferenceAsList[AutoscalingConfigAutoscalingLimitsAttributes](ac.ref.Append("autoscaling_limits"))
}

func (ac AutoscalingConfigAttributes) AutoscalingTargets() terra.ListValue[AutoscalingConfigAutoscalingTargetsAttributes] {
	return terra.ReferenceAsList[AutoscalingConfigAutoscalingTargetsAttributes](ac.ref.Append("autoscaling_targets"))
}

type AutoscalingConfigAutoscalingLimitsAttributes struct {
	ref terra.Reference
}

func (al AutoscalingConfigAutoscalingLimitsAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al AutoscalingConfigAutoscalingLimitsAttributes) InternalWithRef(ref terra.Reference) AutoscalingConfigAutoscalingLimitsAttributes {
	return AutoscalingConfigAutoscalingLimitsAttributes{ref: ref}
}

func (al AutoscalingConfigAutoscalingLimitsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al AutoscalingConfigAutoscalingLimitsAttributes) MaxNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(al.ref.Append("max_nodes"))
}

func (al AutoscalingConfigAutoscalingLimitsAttributes) MaxProcessingUnits() terra.NumberValue {
	return terra.ReferenceAsNumber(al.ref.Append("max_processing_units"))
}

func (al AutoscalingConfigAutoscalingLimitsAttributes) MinNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(al.ref.Append("min_nodes"))
}

func (al AutoscalingConfigAutoscalingLimitsAttributes) MinProcessingUnits() terra.NumberValue {
	return terra.ReferenceAsNumber(al.ref.Append("min_processing_units"))
}

type AutoscalingConfigAutoscalingTargetsAttributes struct {
	ref terra.Reference
}

func (at AutoscalingConfigAutoscalingTargetsAttributes) InternalRef() (terra.Reference, error) {
	return at.ref, nil
}

func (at AutoscalingConfigAutoscalingTargetsAttributes) InternalWithRef(ref terra.Reference) AutoscalingConfigAutoscalingTargetsAttributes {
	return AutoscalingConfigAutoscalingTargetsAttributes{ref: ref}
}

func (at AutoscalingConfigAutoscalingTargetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return at.ref.InternalTokens()
}

func (at AutoscalingConfigAutoscalingTargetsAttributes) HighPriorityCpuUtilizationPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(at.ref.Append("high_priority_cpu_utilization_percent"))
}

func (at AutoscalingConfigAutoscalingTargetsAttributes) StorageUtilizationPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(at.ref.Append("storage_utilization_percent"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AutoscalingConfigState struct {
	AutoscalingLimits  []AutoscalingConfigAutoscalingLimitsState  `json:"autoscaling_limits"`
	AutoscalingTargets []AutoscalingConfigAutoscalingTargetsState `json:"autoscaling_targets"`
}

type AutoscalingConfigAutoscalingLimitsState struct {
	MaxNodes           float64 `json:"max_nodes"`
	MaxProcessingUnits float64 `json:"max_processing_units"`
	MinNodes           float64 `json:"min_nodes"`
	MinProcessingUnits float64 `json:"min_processing_units"`
}

type AutoscalingConfigAutoscalingTargetsState struct {
	HighPriorityCpuUtilizationPercent float64 `json:"high_priority_cpu_utilization_percent"`
	StorageUtilizationPercent         float64 `json:"storage_utilization_percent"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
