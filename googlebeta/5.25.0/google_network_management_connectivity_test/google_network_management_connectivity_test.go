// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_network_management_connectivity_test

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_network_management_connectivity_test.
type Resource struct {
	Name      string
	Args      Args
	state     *googleNetworkManagementConnectivityTestState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gnmct *Resource) Type() string {
	return "google_network_management_connectivity_test"
}

// LocalName returns the local name for [Resource].
func (gnmct *Resource) LocalName() string {
	return gnmct.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gnmct *Resource) Configuration() interface{} {
	return gnmct.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gnmct *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gnmct)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gnmct *Resource) Dependencies() terra.Dependencies {
	return gnmct.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gnmct *Resource) LifecycleManagement() *terra.Lifecycle {
	return gnmct.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gnmct *Resource) Attributes() googleNetworkManagementConnectivityTestAttributes {
	return googleNetworkManagementConnectivityTestAttributes{ref: terra.ReferenceResource(gnmct)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gnmct *Resource) ImportState(state io.Reader) error {
	gnmct.state = &googleNetworkManagementConnectivityTestState{}
	if err := json.NewDecoder(state).Decode(gnmct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gnmct.Type(), gnmct.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gnmct *Resource) State() (*googleNetworkManagementConnectivityTestState, bool) {
	return gnmct.state, gnmct.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gnmct *Resource) StateMust() *googleNetworkManagementConnectivityTestState {
	if gnmct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gnmct.Type(), gnmct.LocalName()))
	}
	return gnmct.state
}

// Args contains the configurations for google_network_management_connectivity_test.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// RelatedProjects: list of string, optional
	RelatedProjects terra.ListValue[terra.StringValue] `hcl:"related_projects,attr"`
	// Destination: required
	Destination *Destination `hcl:"destination,block" validate:"required"`
	// Source: required
	Source *Source `hcl:"source,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleNetworkManagementConnectivityTestAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_network_management_connectivity_test.
func (gnmct googleNetworkManagementConnectivityTestAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gnmct.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_network_management_connectivity_test.
func (gnmct googleNetworkManagementConnectivityTestAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnmct.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_network_management_connectivity_test.
func (gnmct googleNetworkManagementConnectivityTestAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gnmct.ref.Append("id"))
}

// Labels returns a reference to field labels of google_network_management_connectivity_test.
func (gnmct googleNetworkManagementConnectivityTestAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnmct.ref.Append("labels"))
}

// Name returns a reference to field name of google_network_management_connectivity_test.
func (gnmct googleNetworkManagementConnectivityTestAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gnmct.ref.Append("name"))
}

// Project returns a reference to field project of google_network_management_connectivity_test.
func (gnmct googleNetworkManagementConnectivityTestAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gnmct.ref.Append("project"))
}

// Protocol returns a reference to field protocol of google_network_management_connectivity_test.
func (gnmct googleNetworkManagementConnectivityTestAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(gnmct.ref.Append("protocol"))
}

// RelatedProjects returns a reference to field related_projects of google_network_management_connectivity_test.
func (gnmct googleNetworkManagementConnectivityTestAttributes) RelatedProjects() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gnmct.ref.Append("related_projects"))
}

// TerraformLabels returns a reference to field terraform_labels of google_network_management_connectivity_test.
func (gnmct googleNetworkManagementConnectivityTestAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnmct.ref.Append("terraform_labels"))
}

func (gnmct googleNetworkManagementConnectivityTestAttributes) Destination() terra.ListValue[DestinationAttributes] {
	return terra.ReferenceAsList[DestinationAttributes](gnmct.ref.Append("destination"))
}

func (gnmct googleNetworkManagementConnectivityTestAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](gnmct.ref.Append("source"))
}

func (gnmct googleNetworkManagementConnectivityTestAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gnmct.ref.Append("timeouts"))
}

type googleNetworkManagementConnectivityTestState struct {
	Description     string             `json:"description"`
	EffectiveLabels map[string]string  `json:"effective_labels"`
	Id              string             `json:"id"`
	Labels          map[string]string  `json:"labels"`
	Name            string             `json:"name"`
	Project         string             `json:"project"`
	Protocol        string             `json:"protocol"`
	RelatedProjects []string           `json:"related_projects"`
	TerraformLabels map[string]string  `json:"terraform_labels"`
	Destination     []DestinationState `json:"destination"`
	Source          []SourceState      `json:"source"`
	Timeouts        *TimeoutsState     `json:"timeouts"`
}
