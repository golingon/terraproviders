// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_active_directory_domain_trust

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_active_directory_domain_trust.
type Resource struct {
	Name      string
	Args      Args
	state     *googleActiveDirectoryDomainTrustState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gaddt *Resource) Type() string {
	return "google_active_directory_domain_trust"
}

// LocalName returns the local name for [Resource].
func (gaddt *Resource) LocalName() string {
	return gaddt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gaddt *Resource) Configuration() interface{} {
	return gaddt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gaddt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gaddt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gaddt *Resource) Dependencies() terra.Dependencies {
	return gaddt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gaddt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gaddt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gaddt *Resource) Attributes() googleActiveDirectoryDomainTrustAttributes {
	return googleActiveDirectoryDomainTrustAttributes{ref: terra.ReferenceResource(gaddt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gaddt *Resource) ImportState(state io.Reader) error {
	gaddt.state = &googleActiveDirectoryDomainTrustState{}
	if err := json.NewDecoder(state).Decode(gaddt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gaddt.Type(), gaddt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gaddt *Resource) State() (*googleActiveDirectoryDomainTrustState, bool) {
	return gaddt.state, gaddt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gaddt *Resource) StateMust() *googleActiveDirectoryDomainTrustState {
	if gaddt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gaddt.Type(), gaddt.LocalName()))
	}
	return gaddt.state
}

// Args contains the configurations for google_active_directory_domain_trust.
type Args struct {
	// Domain: string, required
	Domain terra.StringValue `hcl:"domain,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SelectiveAuthentication: bool, optional
	SelectiveAuthentication terra.BoolValue `hcl:"selective_authentication,attr"`
	// TargetDnsIpAddresses: set of string, required
	TargetDnsIpAddresses terra.SetValue[terra.StringValue] `hcl:"target_dns_ip_addresses,attr" validate:"required"`
	// TargetDomainName: string, required
	TargetDomainName terra.StringValue `hcl:"target_domain_name,attr" validate:"required"`
	// TrustDirection: string, required
	TrustDirection terra.StringValue `hcl:"trust_direction,attr" validate:"required"`
	// TrustHandshakeSecret: string, required
	TrustHandshakeSecret terra.StringValue `hcl:"trust_handshake_secret,attr" validate:"required"`
	// TrustType: string, required
	TrustType terra.StringValue `hcl:"trust_type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleActiveDirectoryDomainTrustAttributes struct {
	ref terra.Reference
}

// Domain returns a reference to field domain of google_active_directory_domain_trust.
func (gaddt googleActiveDirectoryDomainTrustAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(gaddt.ref.Append("domain"))
}

// Id returns a reference to field id of google_active_directory_domain_trust.
func (gaddt googleActiveDirectoryDomainTrustAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gaddt.ref.Append("id"))
}

// Project returns a reference to field project of google_active_directory_domain_trust.
func (gaddt googleActiveDirectoryDomainTrustAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gaddt.ref.Append("project"))
}

// SelectiveAuthentication returns a reference to field selective_authentication of google_active_directory_domain_trust.
func (gaddt googleActiveDirectoryDomainTrustAttributes) SelectiveAuthentication() terra.BoolValue {
	return terra.ReferenceAsBool(gaddt.ref.Append("selective_authentication"))
}

// TargetDnsIpAddresses returns a reference to field target_dns_ip_addresses of google_active_directory_domain_trust.
func (gaddt googleActiveDirectoryDomainTrustAttributes) TargetDnsIpAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gaddt.ref.Append("target_dns_ip_addresses"))
}

// TargetDomainName returns a reference to field target_domain_name of google_active_directory_domain_trust.
func (gaddt googleActiveDirectoryDomainTrustAttributes) TargetDomainName() terra.StringValue {
	return terra.ReferenceAsString(gaddt.ref.Append("target_domain_name"))
}

// TrustDirection returns a reference to field trust_direction of google_active_directory_domain_trust.
func (gaddt googleActiveDirectoryDomainTrustAttributes) TrustDirection() terra.StringValue {
	return terra.ReferenceAsString(gaddt.ref.Append("trust_direction"))
}

// TrustHandshakeSecret returns a reference to field trust_handshake_secret of google_active_directory_domain_trust.
func (gaddt googleActiveDirectoryDomainTrustAttributes) TrustHandshakeSecret() terra.StringValue {
	return terra.ReferenceAsString(gaddt.ref.Append("trust_handshake_secret"))
}

// TrustType returns a reference to field trust_type of google_active_directory_domain_trust.
func (gaddt googleActiveDirectoryDomainTrustAttributes) TrustType() terra.StringValue {
	return terra.ReferenceAsString(gaddt.ref.Append("trust_type"))
}

func (gaddt googleActiveDirectoryDomainTrustAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gaddt.ref.Append("timeouts"))
}

type googleActiveDirectoryDomainTrustState struct {
	Domain                  string         `json:"domain"`
	Id                      string         `json:"id"`
	Project                 string         `json:"project"`
	SelectiveAuthentication bool           `json:"selective_authentication"`
	TargetDnsIpAddresses    []string       `json:"target_dns_ip_addresses"`
	TargetDomainName        string         `json:"target_domain_name"`
	TrustDirection          string         `json:"trust_direction"`
	TrustHandshakeSecret    string         `json:"trust_handshake_secret"`
	TrustType               string         `json:"trust_type"`
	Timeouts                *TimeoutsState `json:"timeouts"`
}
