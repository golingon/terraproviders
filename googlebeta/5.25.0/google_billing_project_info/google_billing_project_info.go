// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_billing_project_info

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_billing_project_info.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBillingProjectInfoState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbpi *Resource) Type() string {
	return "google_billing_project_info"
}

// LocalName returns the local name for [Resource].
func (gbpi *Resource) LocalName() string {
	return gbpi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbpi *Resource) Configuration() interface{} {
	return gbpi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbpi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbpi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbpi *Resource) Dependencies() terra.Dependencies {
	return gbpi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbpi *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbpi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbpi *Resource) Attributes() googleBillingProjectInfoAttributes {
	return googleBillingProjectInfoAttributes{ref: terra.ReferenceResource(gbpi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbpi *Resource) ImportState(state io.Reader) error {
	gbpi.state = &googleBillingProjectInfoState{}
	if err := json.NewDecoder(state).Decode(gbpi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbpi.Type(), gbpi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbpi *Resource) State() (*googleBillingProjectInfoState, bool) {
	return gbpi.state, gbpi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbpi *Resource) StateMust() *googleBillingProjectInfoState {
	if gbpi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbpi.Type(), gbpi.LocalName()))
	}
	return gbpi.state
}

// Args contains the configurations for google_billing_project_info.
type Args struct {
	// BillingAccount: string, required
	BillingAccount terra.StringValue `hcl:"billing_account,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBillingProjectInfoAttributes struct {
	ref terra.Reference
}

// BillingAccount returns a reference to field billing_account of google_billing_project_info.
func (gbpi googleBillingProjectInfoAttributes) BillingAccount() terra.StringValue {
	return terra.ReferenceAsString(gbpi.ref.Append("billing_account"))
}

// Id returns a reference to field id of google_billing_project_info.
func (gbpi googleBillingProjectInfoAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbpi.ref.Append("id"))
}

// Project returns a reference to field project of google_billing_project_info.
func (gbpi googleBillingProjectInfoAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbpi.ref.Append("project"))
}

func (gbpi googleBillingProjectInfoAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbpi.ref.Append("timeouts"))
}

type googleBillingProjectInfoState struct {
	BillingAccount string         `json:"billing_account"`
	Id             string         `json:"id"`
	Project        string         `json:"project"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
