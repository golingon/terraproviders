// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_instance_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_instance_group.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeInstanceGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcig *Resource) Type() string {
	return "google_compute_instance_group"
}

// LocalName returns the local name for [Resource].
func (gcig *Resource) LocalName() string {
	return gcig.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcig *Resource) Configuration() interface{} {
	return gcig.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcig *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcig)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcig *Resource) Dependencies() terra.Dependencies {
	return gcig.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcig *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcig.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcig *Resource) Attributes() googleComputeInstanceGroupAttributes {
	return googleComputeInstanceGroupAttributes{ref: terra.ReferenceResource(gcig)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcig *Resource) ImportState(state io.Reader) error {
	gcig.state = &googleComputeInstanceGroupState{}
	if err := json.NewDecoder(state).Decode(gcig.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcig.Type(), gcig.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcig *Resource) State() (*googleComputeInstanceGroupState, bool) {
	return gcig.state, gcig.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcig *Resource) StateMust() *googleComputeInstanceGroupState {
	if gcig.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcig.Type(), gcig.LocalName()))
	}
	return gcig.state
}

// Args contains the configurations for google_compute_instance_group.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instances: set of string, optional
	Instances terra.SetValue[terra.StringValue] `hcl:"instances,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// NamedPort: min=0
	NamedPort []NamedPort `hcl:"named_port,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeInstanceGroupAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_compute_instance_group.
func (gcig googleComputeInstanceGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("description"))
}

// Id returns a reference to field id of google_compute_instance_group.
func (gcig googleComputeInstanceGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("id"))
}

// Instances returns a reference to field instances of google_compute_instance_group.
func (gcig googleComputeInstanceGroupAttributes) Instances() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gcig.ref.Append("instances"))
}

// Name returns a reference to field name of google_compute_instance_group.
func (gcig googleComputeInstanceGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("name"))
}

// Network returns a reference to field network of google_compute_instance_group.
func (gcig googleComputeInstanceGroupAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("network"))
}

// Project returns a reference to field project of google_compute_instance_group.
func (gcig googleComputeInstanceGroupAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_compute_instance_group.
func (gcig googleComputeInstanceGroupAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("self_link"))
}

// Size returns a reference to field size of google_compute_instance_group.
func (gcig googleComputeInstanceGroupAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(gcig.ref.Append("size"))
}

// Zone returns a reference to field zone of google_compute_instance_group.
func (gcig googleComputeInstanceGroupAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("zone"))
}

func (gcig googleComputeInstanceGroupAttributes) NamedPort() terra.ListValue[NamedPortAttributes] {
	return terra.ReferenceAsList[NamedPortAttributes](gcig.ref.Append("named_port"))
}

func (gcig googleComputeInstanceGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcig.ref.Append("timeouts"))
}

type googleComputeInstanceGroupState struct {
	Description string           `json:"description"`
	Id          string           `json:"id"`
	Instances   []string         `json:"instances"`
	Name        string           `json:"name"`
	Network     string           `json:"network"`
	Project     string           `json:"project"`
	SelfLink    string           `json:"self_link"`
	Size        float64          `json:"size"`
	Zone        string           `json:"zone"`
	NamedPort   []NamedPortState `json:"named_port"`
	Timeouts    *TimeoutsState   `json:"timeouts"`
}
