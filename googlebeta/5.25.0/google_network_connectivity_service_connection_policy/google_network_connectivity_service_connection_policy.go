// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_network_connectivity_service_connection_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_network_connectivity_service_connection_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleNetworkConnectivityServiceConnectionPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gncscp *Resource) Type() string {
	return "google_network_connectivity_service_connection_policy"
}

// LocalName returns the local name for [Resource].
func (gncscp *Resource) LocalName() string {
	return gncscp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gncscp *Resource) Configuration() interface{} {
	return gncscp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gncscp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gncscp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gncscp *Resource) Dependencies() terra.Dependencies {
	return gncscp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gncscp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gncscp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gncscp *Resource) Attributes() googleNetworkConnectivityServiceConnectionPolicyAttributes {
	return googleNetworkConnectivityServiceConnectionPolicyAttributes{ref: terra.ReferenceResource(gncscp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gncscp *Resource) ImportState(state io.Reader) error {
	gncscp.state = &googleNetworkConnectivityServiceConnectionPolicyState{}
	if err := json.NewDecoder(state).Decode(gncscp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gncscp.Type(), gncscp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gncscp *Resource) State() (*googleNetworkConnectivityServiceConnectionPolicyState, bool) {
	return gncscp.state, gncscp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gncscp *Resource) StateMust() *googleNetworkConnectivityServiceConnectionPolicyState {
	if gncscp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gncscp.Type(), gncscp.LocalName()))
	}
	return gncscp.state
}

// Args contains the configurations for google_network_connectivity_service_connection_policy.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceClass: string, required
	ServiceClass terra.StringValue `hcl:"service_class,attr" validate:"required"`
	// PscConfig: optional
	PscConfig *PscConfig `hcl:"psc_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleNetworkConnectivityServiceConnectionPolicyAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_network_connectivity_service_connection_policy.
func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gncscp.ref.Append("create_time"))
}

// Description returns a reference to field description of google_network_connectivity_service_connection_policy.
func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gncscp.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_network_connectivity_service_connection_policy.
func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gncscp.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_network_connectivity_service_connection_policy.
func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gncscp.ref.Append("etag"))
}

// Id returns a reference to field id of google_network_connectivity_service_connection_policy.
func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gncscp.ref.Append("id"))
}

// Infrastructure returns a reference to field infrastructure of google_network_connectivity_service_connection_policy.
func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) Infrastructure() terra.StringValue {
	return terra.ReferenceAsString(gncscp.ref.Append("infrastructure"))
}

// Labels returns a reference to field labels of google_network_connectivity_service_connection_policy.
func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gncscp.ref.Append("labels"))
}

// Location returns a reference to field location of google_network_connectivity_service_connection_policy.
func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gncscp.ref.Append("location"))
}

// Name returns a reference to field name of google_network_connectivity_service_connection_policy.
func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gncscp.ref.Append("name"))
}

// Network returns a reference to field network of google_network_connectivity_service_connection_policy.
func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gncscp.ref.Append("network"))
}

// Project returns a reference to field project of google_network_connectivity_service_connection_policy.
func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gncscp.ref.Append("project"))
}

// ServiceClass returns a reference to field service_class of google_network_connectivity_service_connection_policy.
func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) ServiceClass() terra.StringValue {
	return terra.ReferenceAsString(gncscp.ref.Append("service_class"))
}

// TerraformLabels returns a reference to field terraform_labels of google_network_connectivity_service_connection_policy.
func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gncscp.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_network_connectivity_service_connection_policy.
func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gncscp.ref.Append("update_time"))
}

func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) PscConnections() terra.ListValue[PscConnectionsAttributes] {
	return terra.ReferenceAsList[PscConnectionsAttributes](gncscp.ref.Append("psc_connections"))
}

func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) PscConfig() terra.ListValue[PscConfigAttributes] {
	return terra.ReferenceAsList[PscConfigAttributes](gncscp.ref.Append("psc_config"))
}

func (gncscp googleNetworkConnectivityServiceConnectionPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gncscp.ref.Append("timeouts"))
}

type googleNetworkConnectivityServiceConnectionPolicyState struct {
	CreateTime      string                `json:"create_time"`
	Description     string                `json:"description"`
	EffectiveLabels map[string]string     `json:"effective_labels"`
	Etag            string                `json:"etag"`
	Id              string                `json:"id"`
	Infrastructure  string                `json:"infrastructure"`
	Labels          map[string]string     `json:"labels"`
	Location        string                `json:"location"`
	Name            string                `json:"name"`
	Network         string                `json:"network"`
	Project         string                `json:"project"`
	ServiceClass    string                `json:"service_class"`
	TerraformLabels map[string]string     `json:"terraform_labels"`
	UpdateTime      string                `json:"update_time"`
	PscConnections  []PscConnectionsState `json:"psc_connections"`
	PscConfig       []PscConfigState      `json:"psc_config"`
	Timeouts        *TimeoutsState        `json:"timeouts"`
}
