// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbc *Resource) Type() string {
	return "google_bigquery_connection"
}

// LocalName returns the local name for [Resource].
func (gbc *Resource) LocalName() string {
	return gbc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbc *Resource) Configuration() interface{} {
	return gbc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbc *Resource) Dependencies() terra.Dependencies {
	return gbc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbc *Resource) Attributes() googleBigqueryConnectionAttributes {
	return googleBigqueryConnectionAttributes{ref: terra.ReferenceResource(gbc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbc *Resource) ImportState(state io.Reader) error {
	gbc.state = &googleBigqueryConnectionState{}
	if err := json.NewDecoder(state).Decode(gbc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbc.Type(), gbc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbc *Resource) State() (*googleBigqueryConnectionState, bool) {
	return gbc.state, gbc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbc *Resource) StateMust() *googleBigqueryConnectionState {
	if gbc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbc.Type(), gbc.LocalName()))
	}
	return gbc.state
}

// Args contains the configurations for google_bigquery_connection.
type Args struct {
	// ConnectionId: string, optional
	ConnectionId terra.StringValue `hcl:"connection_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FriendlyName: string, optional
	FriendlyName terra.StringValue `hcl:"friendly_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Aws: optional
	Aws *Aws `hcl:"aws,block"`
	// Azure: optional
	Azure *Azure `hcl:"azure,block"`
	// CloudResource: optional
	CloudResource *CloudResource `hcl:"cloud_resource,block"`
	// CloudSpanner: optional
	CloudSpanner *CloudSpanner `hcl:"cloud_spanner,block"`
	// CloudSql: optional
	CloudSql *CloudSql `hcl:"cloud_sql,block"`
	// Spark: optional
	Spark *Spark `hcl:"spark,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBigqueryConnectionAttributes struct {
	ref terra.Reference
}

// ConnectionId returns a reference to field connection_id of google_bigquery_connection.
func (gbc googleBigqueryConnectionAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("connection_id"))
}

// Description returns a reference to field description of google_bigquery_connection.
func (gbc googleBigqueryConnectionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("description"))
}

// FriendlyName returns a reference to field friendly_name of google_bigquery_connection.
func (gbc googleBigqueryConnectionAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("friendly_name"))
}

// HasCredential returns a reference to field has_credential of google_bigquery_connection.
func (gbc googleBigqueryConnectionAttributes) HasCredential() terra.BoolValue {
	return terra.ReferenceAsBool(gbc.ref.Append("has_credential"))
}

// Id returns a reference to field id of google_bigquery_connection.
func (gbc googleBigqueryConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("id"))
}

// Location returns a reference to field location of google_bigquery_connection.
func (gbc googleBigqueryConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("location"))
}

// Name returns a reference to field name of google_bigquery_connection.
func (gbc googleBigqueryConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("name"))
}

// Project returns a reference to field project of google_bigquery_connection.
func (gbc googleBigqueryConnectionAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbc.ref.Append("project"))
}

func (gbc googleBigqueryConnectionAttributes) Aws() terra.ListValue[AwsAttributes] {
	return terra.ReferenceAsList[AwsAttributes](gbc.ref.Append("aws"))
}

func (gbc googleBigqueryConnectionAttributes) Azure() terra.ListValue[AzureAttributes] {
	return terra.ReferenceAsList[AzureAttributes](gbc.ref.Append("azure"))
}

func (gbc googleBigqueryConnectionAttributes) CloudResource() terra.ListValue[CloudResourceAttributes] {
	return terra.ReferenceAsList[CloudResourceAttributes](gbc.ref.Append("cloud_resource"))
}

func (gbc googleBigqueryConnectionAttributes) CloudSpanner() terra.ListValue[CloudSpannerAttributes] {
	return terra.ReferenceAsList[CloudSpannerAttributes](gbc.ref.Append("cloud_spanner"))
}

func (gbc googleBigqueryConnectionAttributes) CloudSql() terra.ListValue[CloudSqlAttributes] {
	return terra.ReferenceAsList[CloudSqlAttributes](gbc.ref.Append("cloud_sql"))
}

func (gbc googleBigqueryConnectionAttributes) Spark() terra.ListValue[SparkAttributes] {
	return terra.ReferenceAsList[SparkAttributes](gbc.ref.Append("spark"))
}

func (gbc googleBigqueryConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbc.ref.Append("timeouts"))
}

type googleBigqueryConnectionState struct {
	ConnectionId  string               `json:"connection_id"`
	Description   string               `json:"description"`
	FriendlyName  string               `json:"friendly_name"`
	HasCredential bool                 `json:"has_credential"`
	Id            string               `json:"id"`
	Location      string               `json:"location"`
	Name          string               `json:"name"`
	Project       string               `json:"project"`
	Aws           []AwsState           `json:"aws"`
	Azure         []AzureState         `json:"azure"`
	CloudResource []CloudResourceState `json:"cloud_resource"`
	CloudSpanner  []CloudSpannerState  `json:"cloud_spanner"`
	CloudSql      []CloudSqlState      `json:"cloud_sql"`
	Spark         []SparkState         `json:"spark"`
	Timeouts      *TimeoutsState       `json:"timeouts"`
}
