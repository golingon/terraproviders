// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_monitoring_dashboard

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_monitoring_dashboard.
type Resource struct {
	Name      string
	Args      Args
	state     *googleMonitoringDashboardState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gmd *Resource) Type() string {
	return "google_monitoring_dashboard"
}

// LocalName returns the local name for [Resource].
func (gmd *Resource) LocalName() string {
	return gmd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gmd *Resource) Configuration() interface{} {
	return gmd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gmd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gmd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gmd *Resource) Dependencies() terra.Dependencies {
	return gmd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gmd *Resource) LifecycleManagement() *terra.Lifecycle {
	return gmd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gmd *Resource) Attributes() googleMonitoringDashboardAttributes {
	return googleMonitoringDashboardAttributes{ref: terra.ReferenceResource(gmd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gmd *Resource) ImportState(state io.Reader) error {
	gmd.state = &googleMonitoringDashboardState{}
	if err := json.NewDecoder(state).Decode(gmd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gmd.Type(), gmd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gmd *Resource) State() (*googleMonitoringDashboardState, bool) {
	return gmd.state, gmd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gmd *Resource) StateMust() *googleMonitoringDashboardState {
	if gmd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gmd.Type(), gmd.LocalName()))
	}
	return gmd.state
}

// Args contains the configurations for google_monitoring_dashboard.
type Args struct {
	// DashboardJson: string, required
	DashboardJson terra.StringValue `hcl:"dashboard_json,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleMonitoringDashboardAttributes struct {
	ref terra.Reference
}

// DashboardJson returns a reference to field dashboard_json of google_monitoring_dashboard.
func (gmd googleMonitoringDashboardAttributes) DashboardJson() terra.StringValue {
	return terra.ReferenceAsString(gmd.ref.Append("dashboard_json"))
}

// Id returns a reference to field id of google_monitoring_dashboard.
func (gmd googleMonitoringDashboardAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gmd.ref.Append("id"))
}

// Project returns a reference to field project of google_monitoring_dashboard.
func (gmd googleMonitoringDashboardAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gmd.ref.Append("project"))
}

func (gmd googleMonitoringDashboardAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gmd.ref.Append("timeouts"))
}

type googleMonitoringDashboardState struct {
	DashboardJson string         `json:"dashboard_json"`
	Id            string         `json:"id"`
	Project       string         `json:"project"`
	Timeouts      *TimeoutsState `json:"timeouts"`
}
