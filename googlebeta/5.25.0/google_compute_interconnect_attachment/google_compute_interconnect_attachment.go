// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_interconnect_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_interconnect_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeInterconnectAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcia *Resource) Type() string {
	return "google_compute_interconnect_attachment"
}

// LocalName returns the local name for [Resource].
func (gcia *Resource) LocalName() string {
	return gcia.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcia *Resource) Configuration() interface{} {
	return gcia.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcia *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcia)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcia *Resource) Dependencies() terra.Dependencies {
	return gcia.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcia *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcia.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcia *Resource) Attributes() googleComputeInterconnectAttachmentAttributes {
	return googleComputeInterconnectAttachmentAttributes{ref: terra.ReferenceResource(gcia)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcia *Resource) ImportState(state io.Reader) error {
	gcia.state = &googleComputeInterconnectAttachmentState{}
	if err := json.NewDecoder(state).Decode(gcia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcia.Type(), gcia.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcia *Resource) State() (*googleComputeInterconnectAttachmentState, bool) {
	return gcia.state, gcia.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcia *Resource) StateMust() *googleComputeInterconnectAttachmentState {
	if gcia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcia.Type(), gcia.LocalName()))
	}
	return gcia.state
}

// Args contains the configurations for google_compute_interconnect_attachment.
type Args struct {
	// AdminEnabled: bool, optional
	AdminEnabled terra.BoolValue `hcl:"admin_enabled,attr"`
	// Bandwidth: string, optional
	Bandwidth terra.StringValue `hcl:"bandwidth,attr"`
	// CandidateSubnets: list of string, optional
	CandidateSubnets terra.ListValue[terra.StringValue] `hcl:"candidate_subnets,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EdgeAvailabilityDomain: string, optional
	EdgeAvailabilityDomain terra.StringValue `hcl:"edge_availability_domain,attr"`
	// Encryption: string, optional
	Encryption terra.StringValue `hcl:"encryption,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Interconnect: string, optional
	Interconnect terra.StringValue `hcl:"interconnect,attr"`
	// IpsecInternalAddresses: list of string, optional
	IpsecInternalAddresses terra.ListValue[terra.StringValue] `hcl:"ipsec_internal_addresses,attr"`
	// Mtu: string, optional
	Mtu terra.StringValue `hcl:"mtu,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Router: string, required
	Router terra.StringValue `hcl:"router,attr" validate:"required"`
	// StackType: string, optional
	StackType terra.StringValue `hcl:"stack_type,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// VlanTag8021Q: number, optional
	VlanTag8021Q terra.NumberValue `hcl:"vlan_tag8021q,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeInterconnectAttachmentAttributes struct {
	ref terra.Reference
}

// AdminEnabled returns a reference to field admin_enabled of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) AdminEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(gcia.ref.Append("admin_enabled"))
}

// Bandwidth returns a reference to field bandwidth of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) Bandwidth() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("bandwidth"))
}

// CandidateSubnets returns a reference to field candidate_subnets of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) CandidateSubnets() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcia.ref.Append("candidate_subnets"))
}

// CloudRouterIpAddress returns a reference to field cloud_router_ip_address of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) CloudRouterIpAddress() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("cloud_router_ip_address"))
}

// CloudRouterIpv6Address returns a reference to field cloud_router_ipv6_address of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) CloudRouterIpv6Address() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("cloud_router_ipv6_address"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("creation_timestamp"))
}

// CustomerRouterIpAddress returns a reference to field customer_router_ip_address of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) CustomerRouterIpAddress() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("customer_router_ip_address"))
}

// CustomerRouterIpv6Address returns a reference to field customer_router_ipv6_address of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) CustomerRouterIpv6Address() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("customer_router_ipv6_address"))
}

// Description returns a reference to field description of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("description"))
}

// EdgeAvailabilityDomain returns a reference to field edge_availability_domain of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) EdgeAvailabilityDomain() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("edge_availability_domain"))
}

// Encryption returns a reference to field encryption of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) Encryption() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("encryption"))
}

// GoogleReferenceId returns a reference to field google_reference_id of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) GoogleReferenceId() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("google_reference_id"))
}

// Id returns a reference to field id of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("id"))
}

// Interconnect returns a reference to field interconnect of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) Interconnect() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("interconnect"))
}

// IpsecInternalAddresses returns a reference to field ipsec_internal_addresses of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) IpsecInternalAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcia.ref.Append("ipsec_internal_addresses"))
}

// Mtu returns a reference to field mtu of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) Mtu() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("mtu"))
}

// Name returns a reference to field name of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("name"))
}

// PairingKey returns a reference to field pairing_key of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) PairingKey() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("pairing_key"))
}

// PartnerAsn returns a reference to field partner_asn of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) PartnerAsn() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("partner_asn"))
}

// Project returns a reference to field project of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("region"))
}

// Router returns a reference to field router of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) Router() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("router"))
}

// SelfLink returns a reference to field self_link of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("self_link"))
}

// StackType returns a reference to field stack_type of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) StackType() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("stack_type"))
}

// State returns a reference to field state of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("state"))
}

// Type returns a reference to field type of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gcia.ref.Append("type"))
}

// VlanTag8021Q returns a reference to field vlan_tag8021q of google_compute_interconnect_attachment.
func (gcia googleComputeInterconnectAttachmentAttributes) VlanTag8021Q() terra.NumberValue {
	return terra.ReferenceAsNumber(gcia.ref.Append("vlan_tag8021q"))
}

func (gcia googleComputeInterconnectAttachmentAttributes) PrivateInterconnectInfo() terra.ListValue[PrivateInterconnectInfoAttributes] {
	return terra.ReferenceAsList[PrivateInterconnectInfoAttributes](gcia.ref.Append("private_interconnect_info"))
}

func (gcia googleComputeInterconnectAttachmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcia.ref.Append("timeouts"))
}

type googleComputeInterconnectAttachmentState struct {
	AdminEnabled              bool                           `json:"admin_enabled"`
	Bandwidth                 string                         `json:"bandwidth"`
	CandidateSubnets          []string                       `json:"candidate_subnets"`
	CloudRouterIpAddress      string                         `json:"cloud_router_ip_address"`
	CloudRouterIpv6Address    string                         `json:"cloud_router_ipv6_address"`
	CreationTimestamp         string                         `json:"creation_timestamp"`
	CustomerRouterIpAddress   string                         `json:"customer_router_ip_address"`
	CustomerRouterIpv6Address string                         `json:"customer_router_ipv6_address"`
	Description               string                         `json:"description"`
	EdgeAvailabilityDomain    string                         `json:"edge_availability_domain"`
	Encryption                string                         `json:"encryption"`
	GoogleReferenceId         string                         `json:"google_reference_id"`
	Id                        string                         `json:"id"`
	Interconnect              string                         `json:"interconnect"`
	IpsecInternalAddresses    []string                       `json:"ipsec_internal_addresses"`
	Mtu                       string                         `json:"mtu"`
	Name                      string                         `json:"name"`
	PairingKey                string                         `json:"pairing_key"`
	PartnerAsn                string                         `json:"partner_asn"`
	Project                   string                         `json:"project"`
	Region                    string                         `json:"region"`
	Router                    string                         `json:"router"`
	SelfLink                  string                         `json:"self_link"`
	StackType                 string                         `json:"stack_type"`
	State                     string                         `json:"state"`
	Type                      string                         `json:"type"`
	VlanTag8021Q              float64                        `json:"vlan_tag8021q"`
	PrivateInterconnectInfo   []PrivateInterconnectInfoState `json:"private_interconnect_info"`
	Timeouts                  *TimeoutsState                 `json:"timeouts"`
}
