// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_integration_connectors_connection

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AuthConfig struct {
	// AuthKey: string, optional
	AuthKey terra.StringValue `hcl:"auth_key,attr"`
	// AuthType: string, required
	AuthType terra.StringValue `hcl:"auth_type,attr" validate:"required"`
	// AuthConfigAdditionalVariable: min=0
	AdditionalVariable []AuthConfigAdditionalVariable `hcl:"additional_variable,block" validate:"min=0"`
	// AuthConfigOauth2AuthCodeFlow: optional
	Oauth2AuthCodeFlow *AuthConfigOauth2AuthCodeFlow `hcl:"oauth2_auth_code_flow,block"`
	// AuthConfigOauth2ClientCredentials: optional
	Oauth2ClientCredentials *AuthConfigOauth2ClientCredentials `hcl:"oauth2_client_credentials,block"`
	// AuthConfigOauth2JwtBearer: optional
	Oauth2JwtBearer *AuthConfigOauth2JwtBearer `hcl:"oauth2_jwt_bearer,block"`
	// AuthConfigSshPublicKey: optional
	SshPublicKey *AuthConfigSshPublicKey `hcl:"ssh_public_key,block"`
	// AuthConfigUserPassword: optional
	UserPassword *AuthConfigUserPassword `hcl:"user_password,block"`
}

type AuthConfigAdditionalVariable struct {
	// BooleanValue: bool, optional
	BooleanValue terra.BoolValue `hcl:"boolean_value,attr"`
	// IntegerValue: number, optional
	IntegerValue terra.NumberValue `hcl:"integer_value,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// StringValue: string, optional
	StringValue terra.StringValue `hcl:"string_value,attr"`
	// AuthConfigAdditionalVariableEncryptionKeyValue: optional
	EncryptionKeyValue *AuthConfigAdditionalVariableEncryptionKeyValue `hcl:"encryption_key_value,block"`
	// AuthConfigAdditionalVariableSecretValue: optional
	SecretValue *AuthConfigAdditionalVariableSecretValue `hcl:"secret_value,block"`
}

type AuthConfigAdditionalVariableEncryptionKeyValue struct {
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type AuthConfigAdditionalVariableSecretValue struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type AuthConfigOauth2AuthCodeFlow struct {
	// AuthUri: string, optional
	AuthUri terra.StringValue `hcl:"auth_uri,attr"`
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// EnablePkce: bool, optional
	EnablePkce terra.BoolValue `hcl:"enable_pkce,attr"`
	// Scopes: list of string, optional
	Scopes terra.ListValue[terra.StringValue] `hcl:"scopes,attr"`
	// AuthConfigOauth2AuthCodeFlowClientSecret: optional
	ClientSecret *AuthConfigOauth2AuthCodeFlowClientSecret `hcl:"client_secret,block"`
}

type AuthConfigOauth2AuthCodeFlowClientSecret struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type AuthConfigOauth2ClientCredentials struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// AuthConfigOauth2ClientCredentialsClientSecret: optional
	ClientSecret *AuthConfigOauth2ClientCredentialsClientSecret `hcl:"client_secret,block"`
}

type AuthConfigOauth2ClientCredentialsClientSecret struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type AuthConfigOauth2JwtBearer struct {
	// AuthConfigOauth2JwtBearerClientKey: optional
	ClientKey *AuthConfigOauth2JwtBearerClientKey `hcl:"client_key,block"`
	// AuthConfigOauth2JwtBearerJwtClaims: optional
	JwtClaims *AuthConfigOauth2JwtBearerJwtClaims `hcl:"jwt_claims,block"`
}

type AuthConfigOauth2JwtBearerClientKey struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type AuthConfigOauth2JwtBearerJwtClaims struct {
	// Audience: string, optional
	Audience terra.StringValue `hcl:"audience,attr"`
	// Issuer: string, optional
	Issuer terra.StringValue `hcl:"issuer,attr"`
	// Subject: string, optional
	Subject terra.StringValue `hcl:"subject,attr"`
}

type AuthConfigSshPublicKey struct {
	// CertType: string, optional
	CertType terra.StringValue `hcl:"cert_type,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// AuthConfigSshPublicKeySshClientCert: optional
	SshClientCert *AuthConfigSshPublicKeySshClientCert `hcl:"ssh_client_cert,block"`
	// AuthConfigSshPublicKeySshClientCertPass: optional
	SshClientCertPass *AuthConfigSshPublicKeySshClientCertPass `hcl:"ssh_client_cert_pass,block"`
}

type AuthConfigSshPublicKeySshClientCert struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type AuthConfigSshPublicKeySshClientCertPass struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type AuthConfigUserPassword struct {
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// AuthConfigUserPasswordPassword: optional
	Password *AuthConfigUserPasswordPassword `hcl:"password,block"`
}

type AuthConfigUserPasswordPassword struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type ConfigVariable struct {
	// BooleanValue: bool, optional
	BooleanValue terra.BoolValue `hcl:"boolean_value,attr"`
	// IntegerValue: number, optional
	IntegerValue terra.NumberValue `hcl:"integer_value,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// StringValue: string, optional
	StringValue terra.StringValue `hcl:"string_value,attr"`
	// ConfigVariableEncryptionKeyValue: optional
	EncryptionKeyValue *ConfigVariableEncryptionKeyValue `hcl:"encryption_key_value,block"`
	// ConfigVariableSecretValue: optional
	SecretValue *ConfigVariableSecretValue `hcl:"secret_value,block"`
}

type ConfigVariableEncryptionKeyValue struct {
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ConfigVariableSecretValue struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type DestinationConfig struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// DestinationConfigDestination: min=0
	Destination []DestinationConfigDestination `hcl:"destination,block" validate:"min=0"`
}

type DestinationConfigDestination struct {
	// Host: string, optional
	Host terra.StringValue `hcl:"host,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// ServiceAttachment: string, optional
	ServiceAttachment terra.StringValue `hcl:"service_attachment,attr"`
}

type EventingConfig struct {
	// EnrichmentEnabled: bool, optional
	EnrichmentEnabled terra.BoolValue `hcl:"enrichment_enabled,attr"`
	// EventingConfigAdditionalVariable: min=0
	AdditionalVariable []EventingConfigAdditionalVariable `hcl:"additional_variable,block" validate:"min=0"`
	// EventingConfigAuthConfig: optional
	AuthConfig *EventingConfigAuthConfig `hcl:"auth_config,block"`
	// EventingConfigRegistrationDestinationConfig: required
	RegistrationDestinationConfig *EventingConfigRegistrationDestinationConfig `hcl:"registration_destination_config,block" validate:"required"`
}

type EventingConfigAdditionalVariable struct {
	// BooleanValue: bool, optional
	BooleanValue terra.BoolValue `hcl:"boolean_value,attr"`
	// IntegerValue: number, optional
	IntegerValue terra.NumberValue `hcl:"integer_value,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// StringValue: string, optional
	StringValue terra.StringValue `hcl:"string_value,attr"`
	// EventingConfigAdditionalVariableEncryptionKeyValue: optional
	EncryptionKeyValue *EventingConfigAdditionalVariableEncryptionKeyValue `hcl:"encryption_key_value,block"`
	// EventingConfigAdditionalVariableSecretValue: optional
	SecretValue *EventingConfigAdditionalVariableSecretValue `hcl:"secret_value,block"`
}

type EventingConfigAdditionalVariableEncryptionKeyValue struct {
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type EventingConfigAdditionalVariableSecretValue struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type EventingConfigAuthConfig struct {
	// AuthKey: string, optional
	AuthKey terra.StringValue `hcl:"auth_key,attr"`
	// AuthType: string, required
	AuthType terra.StringValue `hcl:"auth_type,attr" validate:"required"`
	// EventingConfigAuthConfigAdditionalVariable: min=0
	AdditionalVariable []EventingConfigAuthConfigAdditionalVariable `hcl:"additional_variable,block" validate:"min=0"`
	// EventingConfigAuthConfigUserPassword: required
	UserPassword *EventingConfigAuthConfigUserPassword `hcl:"user_password,block" validate:"required"`
}

type EventingConfigAuthConfigAdditionalVariable struct {
	// BooleanValue: bool, optional
	BooleanValue terra.BoolValue `hcl:"boolean_value,attr"`
	// IntegerValue: number, optional
	IntegerValue terra.NumberValue `hcl:"integer_value,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// StringValue: string, optional
	StringValue terra.StringValue `hcl:"string_value,attr"`
	// EventingConfigAuthConfigAdditionalVariableEncryptionKeyValue: optional
	EncryptionKeyValue *EventingConfigAuthConfigAdditionalVariableEncryptionKeyValue `hcl:"encryption_key_value,block"`
	// EventingConfigAuthConfigAdditionalVariableSecretValue: optional
	SecretValue *EventingConfigAuthConfigAdditionalVariableSecretValue `hcl:"secret_value,block"`
}

type EventingConfigAuthConfigAdditionalVariableEncryptionKeyValue struct {
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type EventingConfigAuthConfigAdditionalVariableSecretValue struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type EventingConfigAuthConfigUserPassword struct {
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// EventingConfigAuthConfigUserPasswordPassword: optional
	Password *EventingConfigAuthConfigUserPasswordPassword `hcl:"password,block"`
}

type EventingConfigAuthConfigUserPasswordPassword struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type EventingConfigRegistrationDestinationConfig struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// EventingConfigRegistrationDestinationConfigDestination: min=0
	Destination []EventingConfigRegistrationDestinationConfigDestination `hcl:"destination,block" validate:"min=0"`
}

type EventingConfigRegistrationDestinationConfigDestination struct {
	// Host: string, optional
	Host terra.StringValue `hcl:"host,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// ServiceAttachment: string, optional
	ServiceAttachment terra.StringValue `hcl:"service_attachment,attr"`
}

type LockConfig struct {
	// Locked: bool, required
	Locked terra.BoolValue `hcl:"locked,attr" validate:"required"`
	// Reason: string, optional
	Reason terra.StringValue `hcl:"reason,attr"`
}

type LogConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodeConfig struct {
	// MaxNodeCount: number, optional
	MaxNodeCount terra.NumberValue `hcl:"max_node_count,attr"`
	// MinNodeCount: number, optional
	MinNodeCount terra.NumberValue `hcl:"min_node_count,attr"`
}

type SslConfig struct {
	// ClientCertType: string, optional
	ClientCertType terra.StringValue `hcl:"client_cert_type,attr"`
	// ServerCertType: string, optional
	ServerCertType terra.StringValue `hcl:"server_cert_type,attr"`
	// TrustModel: string, optional
	TrustModel terra.StringValue `hcl:"trust_model,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// UseSsl: bool, optional
	UseSsl terra.BoolValue `hcl:"use_ssl,attr"`
	// SslConfigAdditionalVariable: min=0
	AdditionalVariable []SslConfigAdditionalVariable `hcl:"additional_variable,block" validate:"min=0"`
	// SslConfigClientCertificate: optional
	ClientCertificate *SslConfigClientCertificate `hcl:"client_certificate,block"`
	// SslConfigClientPrivateKey: optional
	ClientPrivateKey *SslConfigClientPrivateKey `hcl:"client_private_key,block"`
	// SslConfigClientPrivateKeyPass: optional
	ClientPrivateKeyPass *SslConfigClientPrivateKeyPass `hcl:"client_private_key_pass,block"`
	// SslConfigPrivateServerCertificate: optional
	PrivateServerCertificate *SslConfigPrivateServerCertificate `hcl:"private_server_certificate,block"`
}

type SslConfigAdditionalVariable struct {
	// BooleanValue: bool, optional
	BooleanValue terra.BoolValue `hcl:"boolean_value,attr"`
	// IntegerValue: number, optional
	IntegerValue terra.NumberValue `hcl:"integer_value,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// StringValue: string, optional
	StringValue terra.StringValue `hcl:"string_value,attr"`
	// SslConfigAdditionalVariableEncryptionKeyValue: optional
	EncryptionKeyValue *SslConfigAdditionalVariableEncryptionKeyValue `hcl:"encryption_key_value,block"`
	// SslConfigAdditionalVariableSecretValue: optional
	SecretValue *SslConfigAdditionalVariableSecretValue `hcl:"secret_value,block"`
}

type SslConfigAdditionalVariableEncryptionKeyValue struct {
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type SslConfigAdditionalVariableSecretValue struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type SslConfigClientCertificate struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type SslConfigClientPrivateKey struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type SslConfigClientPrivateKeyPass struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type SslConfigPrivateServerCertificate struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConnectorVersionInfraConfigAttributes struct {
	ref terra.Reference
}

func (cvic ConnectorVersionInfraConfigAttributes) InternalRef() (terra.Reference, error) {
	return cvic.ref, nil
}

func (cvic ConnectorVersionInfraConfigAttributes) InternalWithRef(ref terra.Reference) ConnectorVersionInfraConfigAttributes {
	return ConnectorVersionInfraConfigAttributes{ref: ref}
}

func (cvic ConnectorVersionInfraConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cvic.ref.InternalTokens()
}

func (cvic ConnectorVersionInfraConfigAttributes) RatelimitThreshold() terra.StringValue {
	return terra.ReferenceAsString(cvic.ref.Append("ratelimit_threshold"))
}

type EventingRuntimeDataAttributes struct {
	ref terra.Reference
}

func (erd EventingRuntimeDataAttributes) InternalRef() (terra.Reference, error) {
	return erd.ref, nil
}

func (erd EventingRuntimeDataAttributes) InternalWithRef(ref terra.Reference) EventingRuntimeDataAttributes {
	return EventingRuntimeDataAttributes{ref: ref}
}

func (erd EventingRuntimeDataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return erd.ref.InternalTokens()
}

func (erd EventingRuntimeDataAttributes) EventsListenerEndpoint() terra.StringValue {
	return terra.ReferenceAsString(erd.ref.Append("events_listener_endpoint"))
}

func (erd EventingRuntimeDataAttributes) Status() terra.ListValue[EventingRuntimeDataStatusAttributes] {
	return terra.ReferenceAsList[EventingRuntimeDataStatusAttributes](erd.ref.Append("status"))
}

type EventingRuntimeDataStatusAttributes struct {
	ref terra.Reference
}

func (s EventingRuntimeDataStatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s EventingRuntimeDataStatusAttributes) InternalWithRef(ref terra.Reference) EventingRuntimeDataStatusAttributes {
	return EventingRuntimeDataStatusAttributes{ref: ref}
}

func (s EventingRuntimeDataStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s EventingRuntimeDataStatusAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("description"))
}

func (s EventingRuntimeDataStatusAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("state"))
}

type StatusAttributes struct {
	ref terra.Reference
}

func (s StatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StatusAttributes) InternalWithRef(ref terra.Reference) StatusAttributes {
	return StatusAttributes{ref: ref}
}

func (s StatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StatusAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("description"))
}

func (s StatusAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("state"))
}

func (s StatusAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("status"))
}

type AuthConfigAttributes struct {
	ref terra.Reference
}

func (ac AuthConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AuthConfigAttributes) InternalWithRef(ref terra.Reference) AuthConfigAttributes {
	return AuthConfigAttributes{ref: ref}
}

func (ac AuthConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AuthConfigAttributes) AuthKey() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("auth_key"))
}

func (ac AuthConfigAttributes) AuthType() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("auth_type"))
}

func (ac AuthConfigAttributes) AdditionalVariable() terra.ListValue[AuthConfigAdditionalVariableAttributes] {
	return terra.ReferenceAsList[AuthConfigAdditionalVariableAttributes](ac.ref.Append("additional_variable"))
}

func (ac AuthConfigAttributes) Oauth2AuthCodeFlow() terra.ListValue[AuthConfigOauth2AuthCodeFlowAttributes] {
	return terra.ReferenceAsList[AuthConfigOauth2AuthCodeFlowAttributes](ac.ref.Append("oauth2_auth_code_flow"))
}

func (ac AuthConfigAttributes) Oauth2ClientCredentials() terra.ListValue[AuthConfigOauth2ClientCredentialsAttributes] {
	return terra.ReferenceAsList[AuthConfigOauth2ClientCredentialsAttributes](ac.ref.Append("oauth2_client_credentials"))
}

func (ac AuthConfigAttributes) Oauth2JwtBearer() terra.ListValue[AuthConfigOauth2JwtBearerAttributes] {
	return terra.ReferenceAsList[AuthConfigOauth2JwtBearerAttributes](ac.ref.Append("oauth2_jwt_bearer"))
}

func (ac AuthConfigAttributes) SshPublicKey() terra.ListValue[AuthConfigSshPublicKeyAttributes] {
	return terra.ReferenceAsList[AuthConfigSshPublicKeyAttributes](ac.ref.Append("ssh_public_key"))
}

func (ac AuthConfigAttributes) UserPassword() terra.ListValue[AuthConfigUserPasswordAttributes] {
	return terra.ReferenceAsList[AuthConfigUserPasswordAttributes](ac.ref.Append("user_password"))
}

type AuthConfigAdditionalVariableAttributes struct {
	ref terra.Reference
}

func (av AuthConfigAdditionalVariableAttributes) InternalRef() (terra.Reference, error) {
	return av.ref, nil
}

func (av AuthConfigAdditionalVariableAttributes) InternalWithRef(ref terra.Reference) AuthConfigAdditionalVariableAttributes {
	return AuthConfigAdditionalVariableAttributes{ref: ref}
}

func (av AuthConfigAdditionalVariableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return av.ref.InternalTokens()
}

func (av AuthConfigAdditionalVariableAttributes) BooleanValue() terra.BoolValue {
	return terra.ReferenceAsBool(av.ref.Append("boolean_value"))
}

func (av AuthConfigAdditionalVariableAttributes) IntegerValue() terra.NumberValue {
	return terra.ReferenceAsNumber(av.ref.Append("integer_value"))
}

func (av AuthConfigAdditionalVariableAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("key"))
}

func (av AuthConfigAdditionalVariableAttributes) StringValue() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("string_value"))
}

func (av AuthConfigAdditionalVariableAttributes) EncryptionKeyValue() terra.ListValue[AuthConfigAdditionalVariableEncryptionKeyValueAttributes] {
	return terra.ReferenceAsList[AuthConfigAdditionalVariableEncryptionKeyValueAttributes](av.ref.Append("encryption_key_value"))
}

func (av AuthConfigAdditionalVariableAttributes) SecretValue() terra.ListValue[AuthConfigAdditionalVariableSecretValueAttributes] {
	return terra.ReferenceAsList[AuthConfigAdditionalVariableSecretValueAttributes](av.ref.Append("secret_value"))
}

type AuthConfigAdditionalVariableEncryptionKeyValueAttributes struct {
	ref terra.Reference
}

func (ekv AuthConfigAdditionalVariableEncryptionKeyValueAttributes) InternalRef() (terra.Reference, error) {
	return ekv.ref, nil
}

func (ekv AuthConfigAdditionalVariableEncryptionKeyValueAttributes) InternalWithRef(ref terra.Reference) AuthConfigAdditionalVariableEncryptionKeyValueAttributes {
	return AuthConfigAdditionalVariableEncryptionKeyValueAttributes{ref: ref}
}

func (ekv AuthConfigAdditionalVariableEncryptionKeyValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ekv.ref.InternalTokens()
}

func (ekv AuthConfigAdditionalVariableEncryptionKeyValueAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(ekv.ref.Append("kms_key_name"))
}

func (ekv AuthConfigAdditionalVariableEncryptionKeyValueAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ekv.ref.Append("type"))
}

type AuthConfigAdditionalVariableSecretValueAttributes struct {
	ref terra.Reference
}

func (sv AuthConfigAdditionalVariableSecretValueAttributes) InternalRef() (terra.Reference, error) {
	return sv.ref, nil
}

func (sv AuthConfigAdditionalVariableSecretValueAttributes) InternalWithRef(ref terra.Reference) AuthConfigAdditionalVariableSecretValueAttributes {
	return AuthConfigAdditionalVariableSecretValueAttributes{ref: ref}
}

func (sv AuthConfigAdditionalVariableSecretValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sv.ref.InternalTokens()
}

func (sv AuthConfigAdditionalVariableSecretValueAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(sv.ref.Append("secret_version"))
}

type AuthConfigOauth2AuthCodeFlowAttributes struct {
	ref terra.Reference
}

func (oacf AuthConfigOauth2AuthCodeFlowAttributes) InternalRef() (terra.Reference, error) {
	return oacf.ref, nil
}

func (oacf AuthConfigOauth2AuthCodeFlowAttributes) InternalWithRef(ref terra.Reference) AuthConfigOauth2AuthCodeFlowAttributes {
	return AuthConfigOauth2AuthCodeFlowAttributes{ref: ref}
}

func (oacf AuthConfigOauth2AuthCodeFlowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oacf.ref.InternalTokens()
}

func (oacf AuthConfigOauth2AuthCodeFlowAttributes) AuthUri() terra.StringValue {
	return terra.ReferenceAsString(oacf.ref.Append("auth_uri"))
}

func (oacf AuthConfigOauth2AuthCodeFlowAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(oacf.ref.Append("client_id"))
}

func (oacf AuthConfigOauth2AuthCodeFlowAttributes) EnablePkce() terra.BoolValue {
	return terra.ReferenceAsBool(oacf.ref.Append("enable_pkce"))
}

func (oacf AuthConfigOauth2AuthCodeFlowAttributes) Scopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](oacf.ref.Append("scopes"))
}

func (oacf AuthConfigOauth2AuthCodeFlowAttributes) ClientSecret() terra.ListValue[AuthConfigOauth2AuthCodeFlowClientSecretAttributes] {
	return terra.ReferenceAsList[AuthConfigOauth2AuthCodeFlowClientSecretAttributes](oacf.ref.Append("client_secret"))
}

type AuthConfigOauth2AuthCodeFlowClientSecretAttributes struct {
	ref terra.Reference
}

func (cs AuthConfigOauth2AuthCodeFlowClientSecretAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs AuthConfigOauth2AuthCodeFlowClientSecretAttributes) InternalWithRef(ref terra.Reference) AuthConfigOauth2AuthCodeFlowClientSecretAttributes {
	return AuthConfigOauth2AuthCodeFlowClientSecretAttributes{ref: ref}
}

func (cs AuthConfigOauth2AuthCodeFlowClientSecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs AuthConfigOauth2AuthCodeFlowClientSecretAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("secret_version"))
}

type AuthConfigOauth2ClientCredentialsAttributes struct {
	ref terra.Reference
}

func (occ AuthConfigOauth2ClientCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return occ.ref, nil
}

func (occ AuthConfigOauth2ClientCredentialsAttributes) InternalWithRef(ref terra.Reference) AuthConfigOauth2ClientCredentialsAttributes {
	return AuthConfigOauth2ClientCredentialsAttributes{ref: ref}
}

func (occ AuthConfigOauth2ClientCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return occ.ref.InternalTokens()
}

func (occ AuthConfigOauth2ClientCredentialsAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(occ.ref.Append("client_id"))
}

func (occ AuthConfigOauth2ClientCredentialsAttributes) ClientSecret() terra.ListValue[AuthConfigOauth2ClientCredentialsClientSecretAttributes] {
	return terra.ReferenceAsList[AuthConfigOauth2ClientCredentialsClientSecretAttributes](occ.ref.Append("client_secret"))
}

type AuthConfigOauth2ClientCredentialsClientSecretAttributes struct {
	ref terra.Reference
}

func (cs AuthConfigOauth2ClientCredentialsClientSecretAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs AuthConfigOauth2ClientCredentialsClientSecretAttributes) InternalWithRef(ref terra.Reference) AuthConfigOauth2ClientCredentialsClientSecretAttributes {
	return AuthConfigOauth2ClientCredentialsClientSecretAttributes{ref: ref}
}

func (cs AuthConfigOauth2ClientCredentialsClientSecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs AuthConfigOauth2ClientCredentialsClientSecretAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("secret_version"))
}

type AuthConfigOauth2JwtBearerAttributes struct {
	ref terra.Reference
}

func (ojb AuthConfigOauth2JwtBearerAttributes) InternalRef() (terra.Reference, error) {
	return ojb.ref, nil
}

func (ojb AuthConfigOauth2JwtBearerAttributes) InternalWithRef(ref terra.Reference) AuthConfigOauth2JwtBearerAttributes {
	return AuthConfigOauth2JwtBearerAttributes{ref: ref}
}

func (ojb AuthConfigOauth2JwtBearerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ojb.ref.InternalTokens()
}

func (ojb AuthConfigOauth2JwtBearerAttributes) ClientKey() terra.ListValue[AuthConfigOauth2JwtBearerClientKeyAttributes] {
	return terra.ReferenceAsList[AuthConfigOauth2JwtBearerClientKeyAttributes](ojb.ref.Append("client_key"))
}

func (ojb AuthConfigOauth2JwtBearerAttributes) JwtClaims() terra.ListValue[AuthConfigOauth2JwtBearerJwtClaimsAttributes] {
	return terra.ReferenceAsList[AuthConfigOauth2JwtBearerJwtClaimsAttributes](ojb.ref.Append("jwt_claims"))
}

type AuthConfigOauth2JwtBearerClientKeyAttributes struct {
	ref terra.Reference
}

func (ck AuthConfigOauth2JwtBearerClientKeyAttributes) InternalRef() (terra.Reference, error) {
	return ck.ref, nil
}

func (ck AuthConfigOauth2JwtBearerClientKeyAttributes) InternalWithRef(ref terra.Reference) AuthConfigOauth2JwtBearerClientKeyAttributes {
	return AuthConfigOauth2JwtBearerClientKeyAttributes{ref: ref}
}

func (ck AuthConfigOauth2JwtBearerClientKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ck.ref.InternalTokens()
}

func (ck AuthConfigOauth2JwtBearerClientKeyAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(ck.ref.Append("secret_version"))
}

type AuthConfigOauth2JwtBearerJwtClaimsAttributes struct {
	ref terra.Reference
}

func (jc AuthConfigOauth2JwtBearerJwtClaimsAttributes) InternalRef() (terra.Reference, error) {
	return jc.ref, nil
}

func (jc AuthConfigOauth2JwtBearerJwtClaimsAttributes) InternalWithRef(ref terra.Reference) AuthConfigOauth2JwtBearerJwtClaimsAttributes {
	return AuthConfigOauth2JwtBearerJwtClaimsAttributes{ref: ref}
}

func (jc AuthConfigOauth2JwtBearerJwtClaimsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jc.ref.InternalTokens()
}

func (jc AuthConfigOauth2JwtBearerJwtClaimsAttributes) Audience() terra.StringValue {
	return terra.ReferenceAsString(jc.ref.Append("audience"))
}

func (jc AuthConfigOauth2JwtBearerJwtClaimsAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(jc.ref.Append("issuer"))
}

func (jc AuthConfigOauth2JwtBearerJwtClaimsAttributes) Subject() terra.StringValue {
	return terra.ReferenceAsString(jc.ref.Append("subject"))
}

type AuthConfigSshPublicKeyAttributes struct {
	ref terra.Reference
}

func (spk AuthConfigSshPublicKeyAttributes) InternalRef() (terra.Reference, error) {
	return spk.ref, nil
}

func (spk AuthConfigSshPublicKeyAttributes) InternalWithRef(ref terra.Reference) AuthConfigSshPublicKeyAttributes {
	return AuthConfigSshPublicKeyAttributes{ref: ref}
}

func (spk AuthConfigSshPublicKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spk.ref.InternalTokens()
}

func (spk AuthConfigSshPublicKeyAttributes) CertType() terra.StringValue {
	return terra.ReferenceAsString(spk.ref.Append("cert_type"))
}

func (spk AuthConfigSshPublicKeyAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(spk.ref.Append("username"))
}

func (spk AuthConfigSshPublicKeyAttributes) SshClientCert() terra.ListValue[AuthConfigSshPublicKeySshClientCertAttributes] {
	return terra.ReferenceAsList[AuthConfigSshPublicKeySshClientCertAttributes](spk.ref.Append("ssh_client_cert"))
}

func (spk AuthConfigSshPublicKeyAttributes) SshClientCertPass() terra.ListValue[AuthConfigSshPublicKeySshClientCertPassAttributes] {
	return terra.ReferenceAsList[AuthConfigSshPublicKeySshClientCertPassAttributes](spk.ref.Append("ssh_client_cert_pass"))
}

type AuthConfigSshPublicKeySshClientCertAttributes struct {
	ref terra.Reference
}

func (scc AuthConfigSshPublicKeySshClientCertAttributes) InternalRef() (terra.Reference, error) {
	return scc.ref, nil
}

func (scc AuthConfigSshPublicKeySshClientCertAttributes) InternalWithRef(ref terra.Reference) AuthConfigSshPublicKeySshClientCertAttributes {
	return AuthConfigSshPublicKeySshClientCertAttributes{ref: ref}
}

func (scc AuthConfigSshPublicKeySshClientCertAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return scc.ref.InternalTokens()
}

func (scc AuthConfigSshPublicKeySshClientCertAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("secret_version"))
}

type AuthConfigSshPublicKeySshClientCertPassAttributes struct {
	ref terra.Reference
}

func (sccp AuthConfigSshPublicKeySshClientCertPassAttributes) InternalRef() (terra.Reference, error) {
	return sccp.ref, nil
}

func (sccp AuthConfigSshPublicKeySshClientCertPassAttributes) InternalWithRef(ref terra.Reference) AuthConfigSshPublicKeySshClientCertPassAttributes {
	return AuthConfigSshPublicKeySshClientCertPassAttributes{ref: ref}
}

func (sccp AuthConfigSshPublicKeySshClientCertPassAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sccp.ref.InternalTokens()
}

func (sccp AuthConfigSshPublicKeySshClientCertPassAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(sccp.ref.Append("secret_version"))
}

type AuthConfigUserPasswordAttributes struct {
	ref terra.Reference
}

func (up AuthConfigUserPasswordAttributes) InternalRef() (terra.Reference, error) {
	return up.ref, nil
}

func (up AuthConfigUserPasswordAttributes) InternalWithRef(ref terra.Reference) AuthConfigUserPasswordAttributes {
	return AuthConfigUserPasswordAttributes{ref: ref}
}

func (up AuthConfigUserPasswordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return up.ref.InternalTokens()
}

func (up AuthConfigUserPasswordAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("username"))
}

func (up AuthConfigUserPasswordAttributes) Password() terra.ListValue[AuthConfigUserPasswordPasswordAttributes] {
	return terra.ReferenceAsList[AuthConfigUserPasswordPasswordAttributes](up.ref.Append("password"))
}

type AuthConfigUserPasswordPasswordAttributes struct {
	ref terra.Reference
}

func (p AuthConfigUserPasswordPasswordAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p AuthConfigUserPasswordPasswordAttributes) InternalWithRef(ref terra.Reference) AuthConfigUserPasswordPasswordAttributes {
	return AuthConfigUserPasswordPasswordAttributes{ref: ref}
}

func (p AuthConfigUserPasswordPasswordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p AuthConfigUserPasswordPasswordAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("secret_version"))
}

type ConfigVariableAttributes struct {
	ref terra.Reference
}

func (cv ConfigVariableAttributes) InternalRef() (terra.Reference, error) {
	return cv.ref, nil
}

func (cv ConfigVariableAttributes) InternalWithRef(ref terra.Reference) ConfigVariableAttributes {
	return ConfigVariableAttributes{ref: ref}
}

func (cv ConfigVariableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cv.ref.InternalTokens()
}

func (cv ConfigVariableAttributes) BooleanValue() terra.BoolValue {
	return terra.ReferenceAsBool(cv.ref.Append("boolean_value"))
}

func (cv ConfigVariableAttributes) IntegerValue() terra.NumberValue {
	return terra.ReferenceAsNumber(cv.ref.Append("integer_value"))
}

func (cv ConfigVariableAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cv.ref.Append("key"))
}

func (cv ConfigVariableAttributes) StringValue() terra.StringValue {
	return terra.ReferenceAsString(cv.ref.Append("string_value"))
}

func (cv ConfigVariableAttributes) EncryptionKeyValue() terra.ListValue[ConfigVariableEncryptionKeyValueAttributes] {
	return terra.ReferenceAsList[ConfigVariableEncryptionKeyValueAttributes](cv.ref.Append("encryption_key_value"))
}

func (cv ConfigVariableAttributes) SecretValue() terra.ListValue[ConfigVariableSecretValueAttributes] {
	return terra.ReferenceAsList[ConfigVariableSecretValueAttributes](cv.ref.Append("secret_value"))
}

type ConfigVariableEncryptionKeyValueAttributes struct {
	ref terra.Reference
}

func (ekv ConfigVariableEncryptionKeyValueAttributes) InternalRef() (terra.Reference, error) {
	return ekv.ref, nil
}

func (ekv ConfigVariableEncryptionKeyValueAttributes) InternalWithRef(ref terra.Reference) ConfigVariableEncryptionKeyValueAttributes {
	return ConfigVariableEncryptionKeyValueAttributes{ref: ref}
}

func (ekv ConfigVariableEncryptionKeyValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ekv.ref.InternalTokens()
}

func (ekv ConfigVariableEncryptionKeyValueAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(ekv.ref.Append("kms_key_name"))
}

func (ekv ConfigVariableEncryptionKeyValueAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ekv.ref.Append("type"))
}

type ConfigVariableSecretValueAttributes struct {
	ref terra.Reference
}

func (sv ConfigVariableSecretValueAttributes) InternalRef() (terra.Reference, error) {
	return sv.ref, nil
}

func (sv ConfigVariableSecretValueAttributes) InternalWithRef(ref terra.Reference) ConfigVariableSecretValueAttributes {
	return ConfigVariableSecretValueAttributes{ref: ref}
}

func (sv ConfigVariableSecretValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sv.ref.InternalTokens()
}

func (sv ConfigVariableSecretValueAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(sv.ref.Append("secret_version"))
}

type DestinationConfigAttributes struct {
	ref terra.Reference
}

func (dc DestinationConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DestinationConfigAttributes) InternalWithRef(ref terra.Reference) DestinationConfigAttributes {
	return DestinationConfigAttributes{ref: ref}
}

func (dc DestinationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DestinationConfigAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("key"))
}

func (dc DestinationConfigAttributes) Destination() terra.ListValue[DestinationConfigDestinationAttributes] {
	return terra.ReferenceAsList[DestinationConfigDestinationAttributes](dc.ref.Append("destination"))
}

type DestinationConfigDestinationAttributes struct {
	ref terra.Reference
}

func (d DestinationConfigDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DestinationConfigDestinationAttributes) InternalWithRef(ref terra.Reference) DestinationConfigDestinationAttributes {
	return DestinationConfigDestinationAttributes{ref: ref}
}

func (d DestinationConfigDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DestinationConfigDestinationAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("host"))
}

func (d DestinationConfigDestinationAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("port"))
}

func (d DestinationConfigDestinationAttributes) ServiceAttachment() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("service_attachment"))
}

type EventingConfigAttributes struct {
	ref terra.Reference
}

func (ec EventingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EventingConfigAttributes) InternalWithRef(ref terra.Reference) EventingConfigAttributes {
	return EventingConfigAttributes{ref: ref}
}

func (ec EventingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EventingConfigAttributes) EnrichmentEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ec.ref.Append("enrichment_enabled"))
}

func (ec EventingConfigAttributes) AdditionalVariable() terra.ListValue[EventingConfigAdditionalVariableAttributes] {
	return terra.ReferenceAsList[EventingConfigAdditionalVariableAttributes](ec.ref.Append("additional_variable"))
}

func (ec EventingConfigAttributes) AuthConfig() terra.ListValue[EventingConfigAuthConfigAttributes] {
	return terra.ReferenceAsList[EventingConfigAuthConfigAttributes](ec.ref.Append("auth_config"))
}

func (ec EventingConfigAttributes) RegistrationDestinationConfig() terra.ListValue[EventingConfigRegistrationDestinationConfigAttributes] {
	return terra.ReferenceAsList[EventingConfigRegistrationDestinationConfigAttributes](ec.ref.Append("registration_destination_config"))
}

type EventingConfigAdditionalVariableAttributes struct {
	ref terra.Reference
}

func (av EventingConfigAdditionalVariableAttributes) InternalRef() (terra.Reference, error) {
	return av.ref, nil
}

func (av EventingConfigAdditionalVariableAttributes) InternalWithRef(ref terra.Reference) EventingConfigAdditionalVariableAttributes {
	return EventingConfigAdditionalVariableAttributes{ref: ref}
}

func (av EventingConfigAdditionalVariableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return av.ref.InternalTokens()
}

func (av EventingConfigAdditionalVariableAttributes) BooleanValue() terra.BoolValue {
	return terra.ReferenceAsBool(av.ref.Append("boolean_value"))
}

func (av EventingConfigAdditionalVariableAttributes) IntegerValue() terra.NumberValue {
	return terra.ReferenceAsNumber(av.ref.Append("integer_value"))
}

func (av EventingConfigAdditionalVariableAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("key"))
}

func (av EventingConfigAdditionalVariableAttributes) StringValue() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("string_value"))
}

func (av EventingConfigAdditionalVariableAttributes) EncryptionKeyValue() terra.ListValue[EventingConfigAdditionalVariableEncryptionKeyValueAttributes] {
	return terra.ReferenceAsList[EventingConfigAdditionalVariableEncryptionKeyValueAttributes](av.ref.Append("encryption_key_value"))
}

func (av EventingConfigAdditionalVariableAttributes) SecretValue() terra.ListValue[EventingConfigAdditionalVariableSecretValueAttributes] {
	return terra.ReferenceAsList[EventingConfigAdditionalVariableSecretValueAttributes](av.ref.Append("secret_value"))
}

type EventingConfigAdditionalVariableEncryptionKeyValueAttributes struct {
	ref terra.Reference
}

func (ekv EventingConfigAdditionalVariableEncryptionKeyValueAttributes) InternalRef() (terra.Reference, error) {
	return ekv.ref, nil
}

func (ekv EventingConfigAdditionalVariableEncryptionKeyValueAttributes) InternalWithRef(ref terra.Reference) EventingConfigAdditionalVariableEncryptionKeyValueAttributes {
	return EventingConfigAdditionalVariableEncryptionKeyValueAttributes{ref: ref}
}

func (ekv EventingConfigAdditionalVariableEncryptionKeyValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ekv.ref.InternalTokens()
}

func (ekv EventingConfigAdditionalVariableEncryptionKeyValueAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(ekv.ref.Append("kms_key_name"))
}

func (ekv EventingConfigAdditionalVariableEncryptionKeyValueAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ekv.ref.Append("type"))
}

type EventingConfigAdditionalVariableSecretValueAttributes struct {
	ref terra.Reference
}

func (sv EventingConfigAdditionalVariableSecretValueAttributes) InternalRef() (terra.Reference, error) {
	return sv.ref, nil
}

func (sv EventingConfigAdditionalVariableSecretValueAttributes) InternalWithRef(ref terra.Reference) EventingConfigAdditionalVariableSecretValueAttributes {
	return EventingConfigAdditionalVariableSecretValueAttributes{ref: ref}
}

func (sv EventingConfigAdditionalVariableSecretValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sv.ref.InternalTokens()
}

func (sv EventingConfigAdditionalVariableSecretValueAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(sv.ref.Append("secret_version"))
}

type EventingConfigAuthConfigAttributes struct {
	ref terra.Reference
}

func (ac EventingConfigAuthConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac EventingConfigAuthConfigAttributes) InternalWithRef(ref terra.Reference) EventingConfigAuthConfigAttributes {
	return EventingConfigAuthConfigAttributes{ref: ref}
}

func (ac EventingConfigAuthConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac EventingConfigAuthConfigAttributes) AuthKey() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("auth_key"))
}

func (ac EventingConfigAuthConfigAttributes) AuthType() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("auth_type"))
}

func (ac EventingConfigAuthConfigAttributes) AdditionalVariable() terra.ListValue[EventingConfigAuthConfigAdditionalVariableAttributes] {
	return terra.ReferenceAsList[EventingConfigAuthConfigAdditionalVariableAttributes](ac.ref.Append("additional_variable"))
}

func (ac EventingConfigAuthConfigAttributes) UserPassword() terra.ListValue[EventingConfigAuthConfigUserPasswordAttributes] {
	return terra.ReferenceAsList[EventingConfigAuthConfigUserPasswordAttributes](ac.ref.Append("user_password"))
}

type EventingConfigAuthConfigAdditionalVariableAttributes struct {
	ref terra.Reference
}

func (av EventingConfigAuthConfigAdditionalVariableAttributes) InternalRef() (terra.Reference, error) {
	return av.ref, nil
}

func (av EventingConfigAuthConfigAdditionalVariableAttributes) InternalWithRef(ref terra.Reference) EventingConfigAuthConfigAdditionalVariableAttributes {
	return EventingConfigAuthConfigAdditionalVariableAttributes{ref: ref}
}

func (av EventingConfigAuthConfigAdditionalVariableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return av.ref.InternalTokens()
}

func (av EventingConfigAuthConfigAdditionalVariableAttributes) BooleanValue() terra.BoolValue {
	return terra.ReferenceAsBool(av.ref.Append("boolean_value"))
}

func (av EventingConfigAuthConfigAdditionalVariableAttributes) IntegerValue() terra.NumberValue {
	return terra.ReferenceAsNumber(av.ref.Append("integer_value"))
}

func (av EventingConfigAuthConfigAdditionalVariableAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("key"))
}

func (av EventingConfigAuthConfigAdditionalVariableAttributes) StringValue() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("string_value"))
}

func (av EventingConfigAuthConfigAdditionalVariableAttributes) EncryptionKeyValue() terra.ListValue[EventingConfigAuthConfigAdditionalVariableEncryptionKeyValueAttributes] {
	return terra.ReferenceAsList[EventingConfigAuthConfigAdditionalVariableEncryptionKeyValueAttributes](av.ref.Append("encryption_key_value"))
}

func (av EventingConfigAuthConfigAdditionalVariableAttributes) SecretValue() terra.ListValue[EventingConfigAuthConfigAdditionalVariableSecretValueAttributes] {
	return terra.ReferenceAsList[EventingConfigAuthConfigAdditionalVariableSecretValueAttributes](av.ref.Append("secret_value"))
}

type EventingConfigAuthConfigAdditionalVariableEncryptionKeyValueAttributes struct {
	ref terra.Reference
}

func (ekv EventingConfigAuthConfigAdditionalVariableEncryptionKeyValueAttributes) InternalRef() (terra.Reference, error) {
	return ekv.ref, nil
}

func (ekv EventingConfigAuthConfigAdditionalVariableEncryptionKeyValueAttributes) InternalWithRef(ref terra.Reference) EventingConfigAuthConfigAdditionalVariableEncryptionKeyValueAttributes {
	return EventingConfigAuthConfigAdditionalVariableEncryptionKeyValueAttributes{ref: ref}
}

func (ekv EventingConfigAuthConfigAdditionalVariableEncryptionKeyValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ekv.ref.InternalTokens()
}

func (ekv EventingConfigAuthConfigAdditionalVariableEncryptionKeyValueAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(ekv.ref.Append("kms_key_name"))
}

func (ekv EventingConfigAuthConfigAdditionalVariableEncryptionKeyValueAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ekv.ref.Append("type"))
}

type EventingConfigAuthConfigAdditionalVariableSecretValueAttributes struct {
	ref terra.Reference
}

func (sv EventingConfigAuthConfigAdditionalVariableSecretValueAttributes) InternalRef() (terra.Reference, error) {
	return sv.ref, nil
}

func (sv EventingConfigAuthConfigAdditionalVariableSecretValueAttributes) InternalWithRef(ref terra.Reference) EventingConfigAuthConfigAdditionalVariableSecretValueAttributes {
	return EventingConfigAuthConfigAdditionalVariableSecretValueAttributes{ref: ref}
}

func (sv EventingConfigAuthConfigAdditionalVariableSecretValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sv.ref.InternalTokens()
}

func (sv EventingConfigAuthConfigAdditionalVariableSecretValueAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(sv.ref.Append("secret_version"))
}

type EventingConfigAuthConfigUserPasswordAttributes struct {
	ref terra.Reference
}

func (up EventingConfigAuthConfigUserPasswordAttributes) InternalRef() (terra.Reference, error) {
	return up.ref, nil
}

func (up EventingConfigAuthConfigUserPasswordAttributes) InternalWithRef(ref terra.Reference) EventingConfigAuthConfigUserPasswordAttributes {
	return EventingConfigAuthConfigUserPasswordAttributes{ref: ref}
}

func (up EventingConfigAuthConfigUserPasswordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return up.ref.InternalTokens()
}

func (up EventingConfigAuthConfigUserPasswordAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("username"))
}

func (up EventingConfigAuthConfigUserPasswordAttributes) Password() terra.ListValue[EventingConfigAuthConfigUserPasswordPasswordAttributes] {
	return terra.ReferenceAsList[EventingConfigAuthConfigUserPasswordPasswordAttributes](up.ref.Append("password"))
}

type EventingConfigAuthConfigUserPasswordPasswordAttributes struct {
	ref terra.Reference
}

func (p EventingConfigAuthConfigUserPasswordPasswordAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p EventingConfigAuthConfigUserPasswordPasswordAttributes) InternalWithRef(ref terra.Reference) EventingConfigAuthConfigUserPasswordPasswordAttributes {
	return EventingConfigAuthConfigUserPasswordPasswordAttributes{ref: ref}
}

func (p EventingConfigAuthConfigUserPasswordPasswordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p EventingConfigAuthConfigUserPasswordPasswordAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("secret_version"))
}

type EventingConfigRegistrationDestinationConfigAttributes struct {
	ref terra.Reference
}

func (rdc EventingConfigRegistrationDestinationConfigAttributes) InternalRef() (terra.Reference, error) {
	return rdc.ref, nil
}

func (rdc EventingConfigRegistrationDestinationConfigAttributes) InternalWithRef(ref terra.Reference) EventingConfigRegistrationDestinationConfigAttributes {
	return EventingConfigRegistrationDestinationConfigAttributes{ref: ref}
}

func (rdc EventingConfigRegistrationDestinationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rdc.ref.InternalTokens()
}

func (rdc EventingConfigRegistrationDestinationConfigAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(rdc.ref.Append("key"))
}

func (rdc EventingConfigRegistrationDestinationConfigAttributes) Destination() terra.ListValue[EventingConfigRegistrationDestinationConfigDestinationAttributes] {
	return terra.ReferenceAsList[EventingConfigRegistrationDestinationConfigDestinationAttributes](rdc.ref.Append("destination"))
}

type EventingConfigRegistrationDestinationConfigDestinationAttributes struct {
	ref terra.Reference
}

func (d EventingConfigRegistrationDestinationConfigDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d EventingConfigRegistrationDestinationConfigDestinationAttributes) InternalWithRef(ref terra.Reference) EventingConfigRegistrationDestinationConfigDestinationAttributes {
	return EventingConfigRegistrationDestinationConfigDestinationAttributes{ref: ref}
}

func (d EventingConfigRegistrationDestinationConfigDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d EventingConfigRegistrationDestinationConfigDestinationAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("host"))
}

func (d EventingConfigRegistrationDestinationConfigDestinationAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("port"))
}

func (d EventingConfigRegistrationDestinationConfigDestinationAttributes) ServiceAttachment() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("service_attachment"))
}

type LockConfigAttributes struct {
	ref terra.Reference
}

func (lc LockConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LockConfigAttributes) InternalWithRef(ref terra.Reference) LockConfigAttributes {
	return LockConfigAttributes{ref: ref}
}

func (lc LockConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LockConfigAttributes) Locked() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("locked"))
}

func (lc LockConfigAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("reason"))
}

type LogConfigAttributes struct {
	ref terra.Reference
}

func (lc LogConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LogConfigAttributes) InternalWithRef(ref terra.Reference) LogConfigAttributes {
	return LogConfigAttributes{ref: ref}
}

func (lc LogConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LogConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("enabled"))
}

type NodeConfigAttributes struct {
	ref terra.Reference
}

func (nc NodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigAttributes {
	return NodeConfigAttributes{ref: ref}
}

func (nc NodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NodeConfigAttributes) MaxNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("max_node_count"))
}

func (nc NodeConfigAttributes) MinNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("min_node_count"))
}

type SslConfigAttributes struct {
	ref terra.Reference
}

func (sc SslConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SslConfigAttributes) InternalWithRef(ref terra.Reference) SslConfigAttributes {
	return SslConfigAttributes{ref: ref}
}

func (sc SslConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SslConfigAttributes) ClientCertType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("client_cert_type"))
}

func (sc SslConfigAttributes) ServerCertType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("server_cert_type"))
}

func (sc SslConfigAttributes) TrustModel() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("trust_model"))
}

func (sc SslConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("type"))
}

func (sc SslConfigAttributes) UseSsl() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("use_ssl"))
}

func (sc SslConfigAttributes) AdditionalVariable() terra.ListValue[SslConfigAdditionalVariableAttributes] {
	return terra.ReferenceAsList[SslConfigAdditionalVariableAttributes](sc.ref.Append("additional_variable"))
}

func (sc SslConfigAttributes) ClientCertificate() terra.ListValue[SslConfigClientCertificateAttributes] {
	return terra.ReferenceAsList[SslConfigClientCertificateAttributes](sc.ref.Append("client_certificate"))
}

func (sc SslConfigAttributes) ClientPrivateKey() terra.ListValue[SslConfigClientPrivateKeyAttributes] {
	return terra.ReferenceAsList[SslConfigClientPrivateKeyAttributes](sc.ref.Append("client_private_key"))
}

func (sc SslConfigAttributes) ClientPrivateKeyPass() terra.ListValue[SslConfigClientPrivateKeyPassAttributes] {
	return terra.ReferenceAsList[SslConfigClientPrivateKeyPassAttributes](sc.ref.Append("client_private_key_pass"))
}

func (sc SslConfigAttributes) PrivateServerCertificate() terra.ListValue[SslConfigPrivateServerCertificateAttributes] {
	return terra.ReferenceAsList[SslConfigPrivateServerCertificateAttributes](sc.ref.Append("private_server_certificate"))
}

type SslConfigAdditionalVariableAttributes struct {
	ref terra.Reference
}

func (av SslConfigAdditionalVariableAttributes) InternalRef() (terra.Reference, error) {
	return av.ref, nil
}

func (av SslConfigAdditionalVariableAttributes) InternalWithRef(ref terra.Reference) SslConfigAdditionalVariableAttributes {
	return SslConfigAdditionalVariableAttributes{ref: ref}
}

func (av SslConfigAdditionalVariableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return av.ref.InternalTokens()
}

func (av SslConfigAdditionalVariableAttributes) BooleanValue() terra.BoolValue {
	return terra.ReferenceAsBool(av.ref.Append("boolean_value"))
}

func (av SslConfigAdditionalVariableAttributes) IntegerValue() terra.NumberValue {
	return terra.ReferenceAsNumber(av.ref.Append("integer_value"))
}

func (av SslConfigAdditionalVariableAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("key"))
}

func (av SslConfigAdditionalVariableAttributes) StringValue() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("string_value"))
}

func (av SslConfigAdditionalVariableAttributes) EncryptionKeyValue() terra.ListValue[SslConfigAdditionalVariableEncryptionKeyValueAttributes] {
	return terra.ReferenceAsList[SslConfigAdditionalVariableEncryptionKeyValueAttributes](av.ref.Append("encryption_key_value"))
}

func (av SslConfigAdditionalVariableAttributes) SecretValue() terra.ListValue[SslConfigAdditionalVariableSecretValueAttributes] {
	return terra.ReferenceAsList[SslConfigAdditionalVariableSecretValueAttributes](av.ref.Append("secret_value"))
}

type SslConfigAdditionalVariableEncryptionKeyValueAttributes struct {
	ref terra.Reference
}

func (ekv SslConfigAdditionalVariableEncryptionKeyValueAttributes) InternalRef() (terra.Reference, error) {
	return ekv.ref, nil
}

func (ekv SslConfigAdditionalVariableEncryptionKeyValueAttributes) InternalWithRef(ref terra.Reference) SslConfigAdditionalVariableEncryptionKeyValueAttributes {
	return SslConfigAdditionalVariableEncryptionKeyValueAttributes{ref: ref}
}

func (ekv SslConfigAdditionalVariableEncryptionKeyValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ekv.ref.InternalTokens()
}

func (ekv SslConfigAdditionalVariableEncryptionKeyValueAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(ekv.ref.Append("kms_key_name"))
}

func (ekv SslConfigAdditionalVariableEncryptionKeyValueAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ekv.ref.Append("type"))
}

type SslConfigAdditionalVariableSecretValueAttributes struct {
	ref terra.Reference
}

func (sv SslConfigAdditionalVariableSecretValueAttributes) InternalRef() (terra.Reference, error) {
	return sv.ref, nil
}

func (sv SslConfigAdditionalVariableSecretValueAttributes) InternalWithRef(ref terra.Reference) SslConfigAdditionalVariableSecretValueAttributes {
	return SslConfigAdditionalVariableSecretValueAttributes{ref: ref}
}

func (sv SslConfigAdditionalVariableSecretValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sv.ref.InternalTokens()
}

func (sv SslConfigAdditionalVariableSecretValueAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(sv.ref.Append("secret_version"))
}

type SslConfigClientCertificateAttributes struct {
	ref terra.Reference
}

func (cc SslConfigClientCertificateAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc SslConfigClientCertificateAttributes) InternalWithRef(ref terra.Reference) SslConfigClientCertificateAttributes {
	return SslConfigClientCertificateAttributes{ref: ref}
}

func (cc SslConfigClientCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc SslConfigClientCertificateAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("secret_version"))
}

type SslConfigClientPrivateKeyAttributes struct {
	ref terra.Reference
}

func (cpk SslConfigClientPrivateKeyAttributes) InternalRef() (terra.Reference, error) {
	return cpk.ref, nil
}

func (cpk SslConfigClientPrivateKeyAttributes) InternalWithRef(ref terra.Reference) SslConfigClientPrivateKeyAttributes {
	return SslConfigClientPrivateKeyAttributes{ref: ref}
}

func (cpk SslConfigClientPrivateKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpk.ref.InternalTokens()
}

func (cpk SslConfigClientPrivateKeyAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(cpk.ref.Append("secret_version"))
}

type SslConfigClientPrivateKeyPassAttributes struct {
	ref terra.Reference
}

func (cpkp SslConfigClientPrivateKeyPassAttributes) InternalRef() (terra.Reference, error) {
	return cpkp.ref, nil
}

func (cpkp SslConfigClientPrivateKeyPassAttributes) InternalWithRef(ref terra.Reference) SslConfigClientPrivateKeyPassAttributes {
	return SslConfigClientPrivateKeyPassAttributes{ref: ref}
}

func (cpkp SslConfigClientPrivateKeyPassAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpkp.ref.InternalTokens()
}

func (cpkp SslConfigClientPrivateKeyPassAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(cpkp.ref.Append("secret_version"))
}

type SslConfigPrivateServerCertificateAttributes struct {
	ref terra.Reference
}

func (psc SslConfigPrivateServerCertificateAttributes) InternalRef() (terra.Reference, error) {
	return psc.ref, nil
}

func (psc SslConfigPrivateServerCertificateAttributes) InternalWithRef(ref terra.Reference) SslConfigPrivateServerCertificateAttributes {
	return SslConfigPrivateServerCertificateAttributes{ref: ref}
}

func (psc SslConfigPrivateServerCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return psc.ref.InternalTokens()
}

func (psc SslConfigPrivateServerCertificateAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(psc.ref.Append("secret_version"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConnectorVersionInfraConfigState struct {
	RatelimitThreshold string `json:"ratelimit_threshold"`
}

type EventingRuntimeDataState struct {
	EventsListenerEndpoint string                           `json:"events_listener_endpoint"`
	Status                 []EventingRuntimeDataStatusState `json:"status"`
}

type EventingRuntimeDataStatusState struct {
	Description string `json:"description"`
	State       string `json:"state"`
}

type StatusState struct {
	Description string `json:"description"`
	State       string `json:"state"`
	Status      string `json:"status"`
}

type AuthConfigState struct {
	AuthKey                 string                                   `json:"auth_key"`
	AuthType                string                                   `json:"auth_type"`
	AdditionalVariable      []AuthConfigAdditionalVariableState      `json:"additional_variable"`
	Oauth2AuthCodeFlow      []AuthConfigOauth2AuthCodeFlowState      `json:"oauth2_auth_code_flow"`
	Oauth2ClientCredentials []AuthConfigOauth2ClientCredentialsState `json:"oauth2_client_credentials"`
	Oauth2JwtBearer         []AuthConfigOauth2JwtBearerState         `json:"oauth2_jwt_bearer"`
	SshPublicKey            []AuthConfigSshPublicKeyState            `json:"ssh_public_key"`
	UserPassword            []AuthConfigUserPasswordState            `json:"user_password"`
}

type AuthConfigAdditionalVariableState struct {
	BooleanValue       bool                                                  `json:"boolean_value"`
	IntegerValue       float64                                               `json:"integer_value"`
	Key                string                                                `json:"key"`
	StringValue        string                                                `json:"string_value"`
	EncryptionKeyValue []AuthConfigAdditionalVariableEncryptionKeyValueState `json:"encryption_key_value"`
	SecretValue        []AuthConfigAdditionalVariableSecretValueState        `json:"secret_value"`
}

type AuthConfigAdditionalVariableEncryptionKeyValueState struct {
	KmsKeyName string `json:"kms_key_name"`
	Type       string `json:"type"`
}

type AuthConfigAdditionalVariableSecretValueState struct {
	SecretVersion string `json:"secret_version"`
}

type AuthConfigOauth2AuthCodeFlowState struct {
	AuthUri      string                                          `json:"auth_uri"`
	ClientId     string                                          `json:"client_id"`
	EnablePkce   bool                                            `json:"enable_pkce"`
	Scopes       []string                                        `json:"scopes"`
	ClientSecret []AuthConfigOauth2AuthCodeFlowClientSecretState `json:"client_secret"`
}

type AuthConfigOauth2AuthCodeFlowClientSecretState struct {
	SecretVersion string `json:"secret_version"`
}

type AuthConfigOauth2ClientCredentialsState struct {
	ClientId     string                                               `json:"client_id"`
	ClientSecret []AuthConfigOauth2ClientCredentialsClientSecretState `json:"client_secret"`
}

type AuthConfigOauth2ClientCredentialsClientSecretState struct {
	SecretVersion string `json:"secret_version"`
}

type AuthConfigOauth2JwtBearerState struct {
	ClientKey []AuthConfigOauth2JwtBearerClientKeyState `json:"client_key"`
	JwtClaims []AuthConfigOauth2JwtBearerJwtClaimsState `json:"jwt_claims"`
}

type AuthConfigOauth2JwtBearerClientKeyState struct {
	SecretVersion string `json:"secret_version"`
}

type AuthConfigOauth2JwtBearerJwtClaimsState struct {
	Audience string `json:"audience"`
	Issuer   string `json:"issuer"`
	Subject  string `json:"subject"`
}

type AuthConfigSshPublicKeyState struct {
	CertType          string                                         `json:"cert_type"`
	Username          string                                         `json:"username"`
	SshClientCert     []AuthConfigSshPublicKeySshClientCertState     `json:"ssh_client_cert"`
	SshClientCertPass []AuthConfigSshPublicKeySshClientCertPassState `json:"ssh_client_cert_pass"`
}

type AuthConfigSshPublicKeySshClientCertState struct {
	SecretVersion string `json:"secret_version"`
}

type AuthConfigSshPublicKeySshClientCertPassState struct {
	SecretVersion string `json:"secret_version"`
}

type AuthConfigUserPasswordState struct {
	Username string                                `json:"username"`
	Password []AuthConfigUserPasswordPasswordState `json:"password"`
}

type AuthConfigUserPasswordPasswordState struct {
	SecretVersion string `json:"secret_version"`
}

type ConfigVariableState struct {
	BooleanValue       bool                                    `json:"boolean_value"`
	IntegerValue       float64                                 `json:"integer_value"`
	Key                string                                  `json:"key"`
	StringValue        string                                  `json:"string_value"`
	EncryptionKeyValue []ConfigVariableEncryptionKeyValueState `json:"encryption_key_value"`
	SecretValue        []ConfigVariableSecretValueState        `json:"secret_value"`
}

type ConfigVariableEncryptionKeyValueState struct {
	KmsKeyName string `json:"kms_key_name"`
	Type       string `json:"type"`
}

type ConfigVariableSecretValueState struct {
	SecretVersion string `json:"secret_version"`
}

type DestinationConfigState struct {
	Key         string                              `json:"key"`
	Destination []DestinationConfigDestinationState `json:"destination"`
}

type DestinationConfigDestinationState struct {
	Host              string  `json:"host"`
	Port              float64 `json:"port"`
	ServiceAttachment string  `json:"service_attachment"`
}

type EventingConfigState struct {
	EnrichmentEnabled             bool                                               `json:"enrichment_enabled"`
	AdditionalVariable            []EventingConfigAdditionalVariableState            `json:"additional_variable"`
	AuthConfig                    []EventingConfigAuthConfigState                    `json:"auth_config"`
	RegistrationDestinationConfig []EventingConfigRegistrationDestinationConfigState `json:"registration_destination_config"`
}

type EventingConfigAdditionalVariableState struct {
	BooleanValue       bool                                                      `json:"boolean_value"`
	IntegerValue       float64                                                   `json:"integer_value"`
	Key                string                                                    `json:"key"`
	StringValue        string                                                    `json:"string_value"`
	EncryptionKeyValue []EventingConfigAdditionalVariableEncryptionKeyValueState `json:"encryption_key_value"`
	SecretValue        []EventingConfigAdditionalVariableSecretValueState        `json:"secret_value"`
}

type EventingConfigAdditionalVariableEncryptionKeyValueState struct {
	KmsKeyName string `json:"kms_key_name"`
	Type       string `json:"type"`
}

type EventingConfigAdditionalVariableSecretValueState struct {
	SecretVersion string `json:"secret_version"`
}

type EventingConfigAuthConfigState struct {
	AuthKey            string                                            `json:"auth_key"`
	AuthType           string                                            `json:"auth_type"`
	AdditionalVariable []EventingConfigAuthConfigAdditionalVariableState `json:"additional_variable"`
	UserPassword       []EventingConfigAuthConfigUserPasswordState       `json:"user_password"`
}

type EventingConfigAuthConfigAdditionalVariableState struct {
	BooleanValue       bool                                                                `json:"boolean_value"`
	IntegerValue       float64                                                             `json:"integer_value"`
	Key                string                                                              `json:"key"`
	StringValue        string                                                              `json:"string_value"`
	EncryptionKeyValue []EventingConfigAuthConfigAdditionalVariableEncryptionKeyValueState `json:"encryption_key_value"`
	SecretValue        []EventingConfigAuthConfigAdditionalVariableSecretValueState        `json:"secret_value"`
}

type EventingConfigAuthConfigAdditionalVariableEncryptionKeyValueState struct {
	KmsKeyName string `json:"kms_key_name"`
	Type       string `json:"type"`
}

type EventingConfigAuthConfigAdditionalVariableSecretValueState struct {
	SecretVersion string `json:"secret_version"`
}

type EventingConfigAuthConfigUserPasswordState struct {
	Username string                                              `json:"username"`
	Password []EventingConfigAuthConfigUserPasswordPasswordState `json:"password"`
}

type EventingConfigAuthConfigUserPasswordPasswordState struct {
	SecretVersion string `json:"secret_version"`
}

type EventingConfigRegistrationDestinationConfigState struct {
	Key         string                                                        `json:"key"`
	Destination []EventingConfigRegistrationDestinationConfigDestinationState `json:"destination"`
}

type EventingConfigRegistrationDestinationConfigDestinationState struct {
	Host              string  `json:"host"`
	Port              float64 `json:"port"`
	ServiceAttachment string  `json:"service_attachment"`
}

type LockConfigState struct {
	Locked bool   `json:"locked"`
	Reason string `json:"reason"`
}

type LogConfigState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigState struct {
	MaxNodeCount float64 `json:"max_node_count"`
	MinNodeCount float64 `json:"min_node_count"`
}

type SslConfigState struct {
	ClientCertType           string                                   `json:"client_cert_type"`
	ServerCertType           string                                   `json:"server_cert_type"`
	TrustModel               string                                   `json:"trust_model"`
	Type                     string                                   `json:"type"`
	UseSsl                   bool                                     `json:"use_ssl"`
	AdditionalVariable       []SslConfigAdditionalVariableState       `json:"additional_variable"`
	ClientCertificate        []SslConfigClientCertificateState        `json:"client_certificate"`
	ClientPrivateKey         []SslConfigClientPrivateKeyState         `json:"client_private_key"`
	ClientPrivateKeyPass     []SslConfigClientPrivateKeyPassState     `json:"client_private_key_pass"`
	PrivateServerCertificate []SslConfigPrivateServerCertificateState `json:"private_server_certificate"`
}

type SslConfigAdditionalVariableState struct {
	BooleanValue       bool                                                 `json:"boolean_value"`
	IntegerValue       float64                                              `json:"integer_value"`
	Key                string                                               `json:"key"`
	StringValue        string                                               `json:"string_value"`
	EncryptionKeyValue []SslConfigAdditionalVariableEncryptionKeyValueState `json:"encryption_key_value"`
	SecretValue        []SslConfigAdditionalVariableSecretValueState        `json:"secret_value"`
}

type SslConfigAdditionalVariableEncryptionKeyValueState struct {
	KmsKeyName string `json:"kms_key_name"`
	Type       string `json:"type"`
}

type SslConfigAdditionalVariableSecretValueState struct {
	SecretVersion string `json:"secret_version"`
}

type SslConfigClientCertificateState struct {
	SecretVersion string `json:"secret_version"`
}

type SslConfigClientPrivateKeyState struct {
	SecretVersion string `json:"secret_version"`
}

type SslConfigClientPrivateKeyPassState struct {
	SecretVersion string `json:"secret_version"`
}

type SslConfigPrivateServerCertificateState struct {
	SecretVersion string `json:"secret_version"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
