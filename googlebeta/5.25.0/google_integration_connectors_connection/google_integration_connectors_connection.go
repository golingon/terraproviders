// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_integration_connectors_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_integration_connectors_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *googleIntegrationConnectorsConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gicc *Resource) Type() string {
	return "google_integration_connectors_connection"
}

// LocalName returns the local name for [Resource].
func (gicc *Resource) LocalName() string {
	return gicc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gicc *Resource) Configuration() interface{} {
	return gicc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gicc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gicc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gicc *Resource) Dependencies() terra.Dependencies {
	return gicc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gicc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gicc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gicc *Resource) Attributes() googleIntegrationConnectorsConnectionAttributes {
	return googleIntegrationConnectorsConnectionAttributes{ref: terra.ReferenceResource(gicc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gicc *Resource) ImportState(state io.Reader) error {
	gicc.state = &googleIntegrationConnectorsConnectionState{}
	if err := json.NewDecoder(state).Decode(gicc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gicc.Type(), gicc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gicc *Resource) State() (*googleIntegrationConnectorsConnectionState, bool) {
	return gicc.state, gicc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gicc *Resource) StateMust() *googleIntegrationConnectorsConnectionState {
	if gicc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gicc.Type(), gicc.LocalName()))
	}
	return gicc.state
}

// Args contains the configurations for google_integration_connectors_connection.
type Args struct {
	// ConnectorVersion: string, required
	ConnectorVersion terra.StringValue `hcl:"connector_version,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EventingEnablementType: string, optional
	EventingEnablementType terra.StringValue `hcl:"eventing_enablement_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// Suspended: bool, optional
	Suspended terra.BoolValue `hcl:"suspended,attr"`
	// AuthConfig: optional
	AuthConfig *AuthConfig `hcl:"auth_config,block"`
	// ConfigVariable: min=0
	ConfigVariable []ConfigVariable `hcl:"config_variable,block" validate:"min=0"`
	// DestinationConfig: min=0
	DestinationConfig []DestinationConfig `hcl:"destination_config,block" validate:"min=0"`
	// EventingConfig: optional
	EventingConfig *EventingConfig `hcl:"eventing_config,block"`
	// LockConfig: optional
	LockConfig *LockConfig `hcl:"lock_config,block"`
	// LogConfig: optional
	LogConfig *LogConfig `hcl:"log_config,block"`
	// NodeConfig: optional
	NodeConfig *NodeConfig `hcl:"node_config,block"`
	// SslConfig: optional
	SslConfig *SslConfig `hcl:"ssl_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleIntegrationConnectorsConnectionAttributes struct {
	ref terra.Reference
}

// ConnectionRevision returns a reference to field connection_revision of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) ConnectionRevision() terra.StringValue {
	return terra.ReferenceAsString(gicc.ref.Append("connection_revision"))
}

// ConnectorVersion returns a reference to field connector_version of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) ConnectorVersion() terra.StringValue {
	return terra.ReferenceAsString(gicc.ref.Append("connector_version"))
}

// ConnectorVersionLaunchStage returns a reference to field connector_version_launch_stage of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) ConnectorVersionLaunchStage() terra.StringValue {
	return terra.ReferenceAsString(gicc.ref.Append("connector_version_launch_stage"))
}

// CreateTime returns a reference to field create_time of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gicc.ref.Append("create_time"))
}

// Description returns a reference to field description of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gicc.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gicc.ref.Append("effective_labels"))
}

// EventingEnablementType returns a reference to field eventing_enablement_type of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) EventingEnablementType() terra.StringValue {
	return terra.ReferenceAsString(gicc.ref.Append("eventing_enablement_type"))
}

// Id returns a reference to field id of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gicc.ref.Append("id"))
}

// Labels returns a reference to field labels of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gicc.ref.Append("labels"))
}

// Location returns a reference to field location of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gicc.ref.Append("location"))
}

// Name returns a reference to field name of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gicc.ref.Append("name"))
}

// Project returns a reference to field project of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gicc.ref.Append("project"))
}

// ServiceAccount returns a reference to field service_account of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(gicc.ref.Append("service_account"))
}

// ServiceDirectory returns a reference to field service_directory of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) ServiceDirectory() terra.StringValue {
	return terra.ReferenceAsString(gicc.ref.Append("service_directory"))
}

// SubscriptionType returns a reference to field subscription_type of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) SubscriptionType() terra.StringValue {
	return terra.ReferenceAsString(gicc.ref.Append("subscription_type"))
}

// Suspended returns a reference to field suspended of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) Suspended() terra.BoolValue {
	return terra.ReferenceAsBool(gicc.ref.Append("suspended"))
}

// TerraformLabels returns a reference to field terraform_labels of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gicc.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_integration_connectors_connection.
func (gicc googleIntegrationConnectorsConnectionAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gicc.ref.Append("update_time"))
}

func (gicc googleIntegrationConnectorsConnectionAttributes) ConnectorVersionInfraConfig() terra.ListValue[ConnectorVersionInfraConfigAttributes] {
	return terra.ReferenceAsList[ConnectorVersionInfraConfigAttributes](gicc.ref.Append("connector_version_infra_config"))
}

func (gicc googleIntegrationConnectorsConnectionAttributes) EventingRuntimeData() terra.ListValue[EventingRuntimeDataAttributes] {
	return terra.ReferenceAsList[EventingRuntimeDataAttributes](gicc.ref.Append("eventing_runtime_data"))
}

func (gicc googleIntegrationConnectorsConnectionAttributes) Status() terra.ListValue[StatusAttributes] {
	return terra.ReferenceAsList[StatusAttributes](gicc.ref.Append("status"))
}

func (gicc googleIntegrationConnectorsConnectionAttributes) AuthConfig() terra.ListValue[AuthConfigAttributes] {
	return terra.ReferenceAsList[AuthConfigAttributes](gicc.ref.Append("auth_config"))
}

func (gicc googleIntegrationConnectorsConnectionAttributes) ConfigVariable() terra.ListValue[ConfigVariableAttributes] {
	return terra.ReferenceAsList[ConfigVariableAttributes](gicc.ref.Append("config_variable"))
}

func (gicc googleIntegrationConnectorsConnectionAttributes) DestinationConfig() terra.ListValue[DestinationConfigAttributes] {
	return terra.ReferenceAsList[DestinationConfigAttributes](gicc.ref.Append("destination_config"))
}

func (gicc googleIntegrationConnectorsConnectionAttributes) EventingConfig() terra.ListValue[EventingConfigAttributes] {
	return terra.ReferenceAsList[EventingConfigAttributes](gicc.ref.Append("eventing_config"))
}

func (gicc googleIntegrationConnectorsConnectionAttributes) LockConfig() terra.ListValue[LockConfigAttributes] {
	return terra.ReferenceAsList[LockConfigAttributes](gicc.ref.Append("lock_config"))
}

func (gicc googleIntegrationConnectorsConnectionAttributes) LogConfig() terra.ListValue[LogConfigAttributes] {
	return terra.ReferenceAsList[LogConfigAttributes](gicc.ref.Append("log_config"))
}

func (gicc googleIntegrationConnectorsConnectionAttributes) NodeConfig() terra.ListValue[NodeConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigAttributes](gicc.ref.Append("node_config"))
}

func (gicc googleIntegrationConnectorsConnectionAttributes) SslConfig() terra.ListValue[SslConfigAttributes] {
	return terra.ReferenceAsList[SslConfigAttributes](gicc.ref.Append("ssl_config"))
}

func (gicc googleIntegrationConnectorsConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gicc.ref.Append("timeouts"))
}

type googleIntegrationConnectorsConnectionState struct {
	ConnectionRevision          string                             `json:"connection_revision"`
	ConnectorVersion            string                             `json:"connector_version"`
	ConnectorVersionLaunchStage string                             `json:"connector_version_launch_stage"`
	CreateTime                  string                             `json:"create_time"`
	Description                 string                             `json:"description"`
	EffectiveLabels             map[string]string                  `json:"effective_labels"`
	EventingEnablementType      string                             `json:"eventing_enablement_type"`
	Id                          string                             `json:"id"`
	Labels                      map[string]string                  `json:"labels"`
	Location                    string                             `json:"location"`
	Name                        string                             `json:"name"`
	Project                     string                             `json:"project"`
	ServiceAccount              string                             `json:"service_account"`
	ServiceDirectory            string                             `json:"service_directory"`
	SubscriptionType            string                             `json:"subscription_type"`
	Suspended                   bool                               `json:"suspended"`
	TerraformLabels             map[string]string                  `json:"terraform_labels"`
	UpdateTime                  string                             `json:"update_time"`
	ConnectorVersionInfraConfig []ConnectorVersionInfraConfigState `json:"connector_version_infra_config"`
	EventingRuntimeData         []EventingRuntimeDataState         `json:"eventing_runtime_data"`
	Status                      []StatusState                      `json:"status"`
	AuthConfig                  []AuthConfigState                  `json:"auth_config"`
	ConfigVariable              []ConfigVariableState              `json:"config_variable"`
	DestinationConfig           []DestinationConfigState           `json:"destination_config"`
	EventingConfig              []EventingConfigState              `json:"eventing_config"`
	LockConfig                  []LockConfigState                  `json:"lock_config"`
	LogConfig                   []LogConfigState                   `json:"log_config"`
	NodeConfig                  []NodeConfigState                  `json:"node_config"`
	SslConfig                   []SslConfigState                   `json:"ssl_config"`
	Timeouts                    *TimeoutsState                     `json:"timeouts"`
}
