// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_eventarc_channel

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_eventarc_channel.
type Resource struct {
	Name      string
	Args      Args
	state     *googleEventarcChannelState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gec *Resource) Type() string {
	return "google_eventarc_channel"
}

// LocalName returns the local name for [Resource].
func (gec *Resource) LocalName() string {
	return gec.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gec *Resource) Configuration() interface{} {
	return gec.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gec *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gec)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gec *Resource) Dependencies() terra.Dependencies {
	return gec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gec *Resource) LifecycleManagement() *terra.Lifecycle {
	return gec.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gec *Resource) Attributes() googleEventarcChannelAttributes {
	return googleEventarcChannelAttributes{ref: terra.ReferenceResource(gec)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gec *Resource) ImportState(state io.Reader) error {
	gec.state = &googleEventarcChannelState{}
	if err := json.NewDecoder(state).Decode(gec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gec.Type(), gec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gec *Resource) State() (*googleEventarcChannelState, bool) {
	return gec.state, gec.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gec *Resource) StateMust() *googleEventarcChannelState {
	if gec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gec.Type(), gec.LocalName()))
	}
	return gec.state
}

// Args contains the configurations for google_eventarc_channel.
type Args struct {
	// CryptoKeyName: string, optional
	CryptoKeyName terra.StringValue `hcl:"crypto_key_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ThirdPartyProvider: string, optional
	ThirdPartyProvider terra.StringValue `hcl:"third_party_provider,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleEventarcChannelAttributes struct {
	ref terra.Reference
}

// ActivationToken returns a reference to field activation_token of google_eventarc_channel.
func (gec googleEventarcChannelAttributes) ActivationToken() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("activation_token"))
}

// CreateTime returns a reference to field create_time of google_eventarc_channel.
func (gec googleEventarcChannelAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("create_time"))
}

// CryptoKeyName returns a reference to field crypto_key_name of google_eventarc_channel.
func (gec googleEventarcChannelAttributes) CryptoKeyName() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("crypto_key_name"))
}

// Id returns a reference to field id of google_eventarc_channel.
func (gec googleEventarcChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("id"))
}

// Location returns a reference to field location of google_eventarc_channel.
func (gec googleEventarcChannelAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("location"))
}

// Name returns a reference to field name of google_eventarc_channel.
func (gec googleEventarcChannelAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("name"))
}

// Project returns a reference to field project of google_eventarc_channel.
func (gec googleEventarcChannelAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("project"))
}

// PubsubTopic returns a reference to field pubsub_topic of google_eventarc_channel.
func (gec googleEventarcChannelAttributes) PubsubTopic() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("pubsub_topic"))
}

// State returns a reference to field state of google_eventarc_channel.
func (gec googleEventarcChannelAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("state"))
}

// ThirdPartyProvider returns a reference to field third_party_provider of google_eventarc_channel.
func (gec googleEventarcChannelAttributes) ThirdPartyProvider() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("third_party_provider"))
}

// Uid returns a reference to field uid of google_eventarc_channel.
func (gec googleEventarcChannelAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_eventarc_channel.
func (gec googleEventarcChannelAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("update_time"))
}

func (gec googleEventarcChannelAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gec.ref.Append("timeouts"))
}

type googleEventarcChannelState struct {
	ActivationToken    string         `json:"activation_token"`
	CreateTime         string         `json:"create_time"`
	CryptoKeyName      string         `json:"crypto_key_name"`
	Id                 string         `json:"id"`
	Location           string         `json:"location"`
	Name               string         `json:"name"`
	Project            string         `json:"project"`
	PubsubTopic        string         `json:"pubsub_topic"`
	State              string         `json:"state"`
	ThirdPartyProvider string         `json:"third_party_provider"`
	Uid                string         `json:"uid"`
	UpdateTime         string         `json:"update_time"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
