// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apphub_workload

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_apphub_workload.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApphubWorkloadState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gaw *Resource) Type() string {
	return "google_apphub_workload"
}

// LocalName returns the local name for [Resource].
func (gaw *Resource) LocalName() string {
	return gaw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gaw *Resource) Configuration() interface{} {
	return gaw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gaw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gaw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gaw *Resource) Dependencies() terra.Dependencies {
	return gaw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gaw *Resource) LifecycleManagement() *terra.Lifecycle {
	return gaw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gaw *Resource) Attributes() googleApphubWorkloadAttributes {
	return googleApphubWorkloadAttributes{ref: terra.ReferenceResource(gaw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gaw *Resource) ImportState(state io.Reader) error {
	gaw.state = &googleApphubWorkloadState{}
	if err := json.NewDecoder(state).Decode(gaw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gaw.Type(), gaw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gaw *Resource) State() (*googleApphubWorkloadState, bool) {
	return gaw.state, gaw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gaw *Resource) StateMust() *googleApphubWorkloadState {
	if gaw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gaw.Type(), gaw.LocalName()))
	}
	return gaw.state
}

// Args contains the configurations for google_apphub_workload.
type Args struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DiscoveredWorkload: string, required
	DiscoveredWorkload terra.StringValue `hcl:"discovered_workload,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// WorkloadId: string, required
	WorkloadId terra.StringValue `hcl:"workload_id,attr" validate:"required"`
	// Attributes: optional
	Attributes *Attributes `hcl:"attributes,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApphubWorkloadAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of google_apphub_workload.
func (gaw googleApphubWorkloadAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(gaw.ref.Append("application_id"))
}

// CreateTime returns a reference to field create_time of google_apphub_workload.
func (gaw googleApphubWorkloadAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gaw.ref.Append("create_time"))
}

// Description returns a reference to field description of google_apphub_workload.
func (gaw googleApphubWorkloadAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gaw.ref.Append("description"))
}

// DiscoveredWorkload returns a reference to field discovered_workload of google_apphub_workload.
func (gaw googleApphubWorkloadAttributes) DiscoveredWorkload() terra.StringValue {
	return terra.ReferenceAsString(gaw.ref.Append("discovered_workload"))
}

// DisplayName returns a reference to field display_name of google_apphub_workload.
func (gaw googleApphubWorkloadAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gaw.ref.Append("display_name"))
}

// Id returns a reference to field id of google_apphub_workload.
func (gaw googleApphubWorkloadAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gaw.ref.Append("id"))
}

// Location returns a reference to field location of google_apphub_workload.
func (gaw googleApphubWorkloadAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gaw.ref.Append("location"))
}

// Name returns a reference to field name of google_apphub_workload.
func (gaw googleApphubWorkloadAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gaw.ref.Append("name"))
}

// Project returns a reference to field project of google_apphub_workload.
func (gaw googleApphubWorkloadAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gaw.ref.Append("project"))
}

// State returns a reference to field state of google_apphub_workload.
func (gaw googleApphubWorkloadAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gaw.ref.Append("state"))
}

// Uid returns a reference to field uid of google_apphub_workload.
func (gaw googleApphubWorkloadAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gaw.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_apphub_workload.
func (gaw googleApphubWorkloadAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gaw.ref.Append("update_time"))
}

// WorkloadId returns a reference to field workload_id of google_apphub_workload.
func (gaw googleApphubWorkloadAttributes) WorkloadId() terra.StringValue {
	return terra.ReferenceAsString(gaw.ref.Append("workload_id"))
}

func (gaw googleApphubWorkloadAttributes) WorkloadProperties() terra.ListValue[WorkloadPropertiesAttributes] {
	return terra.ReferenceAsList[WorkloadPropertiesAttributes](gaw.ref.Append("workload_properties"))
}

func (gaw googleApphubWorkloadAttributes) WorkloadReference() terra.ListValue[WorkloadReferenceAttributes] {
	return terra.ReferenceAsList[WorkloadReferenceAttributes](gaw.ref.Append("workload_reference"))
}

func (gaw googleApphubWorkloadAttributes) Attributes() terra.ListValue[AttributesAttributes] {
	return terra.ReferenceAsList[AttributesAttributes](gaw.ref.Append("attributes"))
}

func (gaw googleApphubWorkloadAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gaw.ref.Append("timeouts"))
}

type googleApphubWorkloadState struct {
	ApplicationId      string                    `json:"application_id"`
	CreateTime         string                    `json:"create_time"`
	Description        string                    `json:"description"`
	DiscoveredWorkload string                    `json:"discovered_workload"`
	DisplayName        string                    `json:"display_name"`
	Id                 string                    `json:"id"`
	Location           string                    `json:"location"`
	Name               string                    `json:"name"`
	Project            string                    `json:"project"`
	State              string                    `json:"state"`
	Uid                string                    `json:"uid"`
	UpdateTime         string                    `json:"update_time"`
	WorkloadId         string                    `json:"workload_id"`
	WorkloadProperties []WorkloadPropertiesState `json:"workload_properties"`
	WorkloadReference  []WorkloadReferenceState  `json:"workload_reference"`
	Attributes         []AttributesState         `json:"attributes"`
	Timeouts           *TimeoutsState            `json:"timeouts"`
}
