// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_sql_ssl_cert

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_sql_ssl_cert.
type Resource struct {
	Name      string
	Args      Args
	state     *googleSqlSslCertState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gssc *Resource) Type() string {
	return "google_sql_ssl_cert"
}

// LocalName returns the local name for [Resource].
func (gssc *Resource) LocalName() string {
	return gssc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gssc *Resource) Configuration() interface{} {
	return gssc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gssc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gssc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gssc *Resource) Dependencies() terra.Dependencies {
	return gssc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gssc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gssc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gssc *Resource) Attributes() googleSqlSslCertAttributes {
	return googleSqlSslCertAttributes{ref: terra.ReferenceResource(gssc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gssc *Resource) ImportState(state io.Reader) error {
	gssc.state = &googleSqlSslCertState{}
	if err := json.NewDecoder(state).Decode(gssc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gssc.Type(), gssc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gssc *Resource) State() (*googleSqlSslCertState, bool) {
	return gssc.state, gssc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gssc *Resource) StateMust() *googleSqlSslCertState {
	if gssc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gssc.Type(), gssc.LocalName()))
	}
	return gssc.state
}

// Args contains the configurations for google_sql_ssl_cert.
type Args struct {
	// CommonName: string, required
	CommonName terra.StringValue `hcl:"common_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleSqlSslCertAttributes struct {
	ref terra.Reference
}

// Cert returns a reference to field cert of google_sql_ssl_cert.
func (gssc googleSqlSslCertAttributes) Cert() terra.StringValue {
	return terra.ReferenceAsString(gssc.ref.Append("cert"))
}

// CertSerialNumber returns a reference to field cert_serial_number of google_sql_ssl_cert.
func (gssc googleSqlSslCertAttributes) CertSerialNumber() terra.StringValue {
	return terra.ReferenceAsString(gssc.ref.Append("cert_serial_number"))
}

// CommonName returns a reference to field common_name of google_sql_ssl_cert.
func (gssc googleSqlSslCertAttributes) CommonName() terra.StringValue {
	return terra.ReferenceAsString(gssc.ref.Append("common_name"))
}

// CreateTime returns a reference to field create_time of google_sql_ssl_cert.
func (gssc googleSqlSslCertAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gssc.ref.Append("create_time"))
}

// ExpirationTime returns a reference to field expiration_time of google_sql_ssl_cert.
func (gssc googleSqlSslCertAttributes) ExpirationTime() terra.StringValue {
	return terra.ReferenceAsString(gssc.ref.Append("expiration_time"))
}

// Id returns a reference to field id of google_sql_ssl_cert.
func (gssc googleSqlSslCertAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gssc.ref.Append("id"))
}

// Instance returns a reference to field instance of google_sql_ssl_cert.
func (gssc googleSqlSslCertAttributes) Instance() terra.StringValue {
	return terra.ReferenceAsString(gssc.ref.Append("instance"))
}

// PrivateKey returns a reference to field private_key of google_sql_ssl_cert.
func (gssc googleSqlSslCertAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(gssc.ref.Append("private_key"))
}

// Project returns a reference to field project of google_sql_ssl_cert.
func (gssc googleSqlSslCertAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gssc.ref.Append("project"))
}

// ServerCaCert returns a reference to field server_ca_cert of google_sql_ssl_cert.
func (gssc googleSqlSslCertAttributes) ServerCaCert() terra.StringValue {
	return terra.ReferenceAsString(gssc.ref.Append("server_ca_cert"))
}

// Sha1Fingerprint returns a reference to field sha1_fingerprint of google_sql_ssl_cert.
func (gssc googleSqlSslCertAttributes) Sha1Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(gssc.ref.Append("sha1_fingerprint"))
}

func (gssc googleSqlSslCertAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gssc.ref.Append("timeouts"))
}

type googleSqlSslCertState struct {
	Cert             string         `json:"cert"`
	CertSerialNumber string         `json:"cert_serial_number"`
	CommonName       string         `json:"common_name"`
	CreateTime       string         `json:"create_time"`
	ExpirationTime   string         `json:"expiration_time"`
	Id               string         `json:"id"`
	Instance         string         `json:"instance"`
	PrivateKey       string         `json:"private_key"`
	Project          string         `json:"project"`
	ServerCaCert     string         `json:"server_ca_cert"`
	Sha1Fingerprint  string         `json:"sha1_fingerprint"`
	Timeouts         *TimeoutsState `json:"timeouts"`
}
