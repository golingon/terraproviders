// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_forwarding_rules

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataRulesAttributes struct {
	ref terra.Reference
}

func (r DataRulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataRulesAttributes) InternalWithRef(ref terra.Reference) DataRulesAttributes {
	return DataRulesAttributes{ref: ref}
}

func (r DataRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataRulesAttributes) AllPorts() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("all_ports"))
}

func (r DataRulesAttributes) AllowGlobalAccess() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("allow_global_access"))
}

func (r DataRulesAttributes) AllowPscGlobalAccess() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("allow_psc_global_access"))
}

func (r DataRulesAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("backend_service"))
}

func (r DataRulesAttributes) BaseForwardingRule() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("base_forwarding_rule"))
}

func (r DataRulesAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("creation_timestamp"))
}

func (r DataRulesAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("description"))
}

func (r DataRulesAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("effective_labels"))
}

func (r DataRulesAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("ip_address"))
}

func (r DataRulesAttributes) IpProtocol() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("ip_protocol"))
}

func (r DataRulesAttributes) IpVersion() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("ip_version"))
}

func (r DataRulesAttributes) IsMirroringCollector() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("is_mirroring_collector"))
}

func (r DataRulesAttributes) LabelFingerprint() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("label_fingerprint"))
}

func (r DataRulesAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("labels"))
}

func (r DataRulesAttributes) LoadBalancingScheme() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("load_balancing_scheme"))
}

func (r DataRulesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

func (r DataRulesAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("network"))
}

func (r DataRulesAttributes) NetworkTier() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("network_tier"))
}

func (r DataRulesAttributes) NoAutomateDnsZone() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("no_automate_dns_zone"))
}

func (r DataRulesAttributes) PortRange() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("port_range"))
}

func (r DataRulesAttributes) Ports() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](r.ref.Append("ports"))
}

func (r DataRulesAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("project"))
}

func (r DataRulesAttributes) PscConnectionId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("psc_connection_id"))
}

func (r DataRulesAttributes) PscConnectionStatus() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("psc_connection_status"))
}

func (r DataRulesAttributes) RecreateClosedPsc() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("recreate_closed_psc"))
}

func (r DataRulesAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("region"))
}

func (r DataRulesAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("self_link"))
}

func (r DataRulesAttributes) ServiceLabel() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("service_label"))
}

func (r DataRulesAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("service_name"))
}

func (r DataRulesAttributes) SourceIpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](r.ref.Append("source_ip_ranges"))
}

func (r DataRulesAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("subnetwork"))
}

func (r DataRulesAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("target"))
}

func (r DataRulesAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("terraform_labels"))
}

func (r DataRulesAttributes) ServiceDirectoryRegistrations() terra.ListValue[DataRulesServiceDirectoryRegistrationsAttributes] {
	return terra.ReferenceAsList[DataRulesServiceDirectoryRegistrationsAttributes](r.ref.Append("service_directory_registrations"))
}

type DataRulesServiceDirectoryRegistrationsAttributes struct {
	ref terra.Reference
}

func (sdr DataRulesServiceDirectoryRegistrationsAttributes) InternalRef() (terra.Reference, error) {
	return sdr.ref, nil
}

func (sdr DataRulesServiceDirectoryRegistrationsAttributes) InternalWithRef(ref terra.Reference) DataRulesServiceDirectoryRegistrationsAttributes {
	return DataRulesServiceDirectoryRegistrationsAttributes{ref: ref}
}

func (sdr DataRulesServiceDirectoryRegistrationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sdr.ref.InternalTokens()
}

func (sdr DataRulesServiceDirectoryRegistrationsAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(sdr.ref.Append("namespace"))
}

func (sdr DataRulesServiceDirectoryRegistrationsAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(sdr.ref.Append("service"))
}

type DataRulesState struct {
	AllPorts                      bool                                          `json:"all_ports"`
	AllowGlobalAccess             bool                                          `json:"allow_global_access"`
	AllowPscGlobalAccess          bool                                          `json:"allow_psc_global_access"`
	BackendService                string                                        `json:"backend_service"`
	BaseForwardingRule            string                                        `json:"base_forwarding_rule"`
	CreationTimestamp             string                                        `json:"creation_timestamp"`
	Description                   string                                        `json:"description"`
	EffectiveLabels               map[string]string                             `json:"effective_labels"`
	IpAddress                     string                                        `json:"ip_address"`
	IpProtocol                    string                                        `json:"ip_protocol"`
	IpVersion                     string                                        `json:"ip_version"`
	IsMirroringCollector          bool                                          `json:"is_mirroring_collector"`
	LabelFingerprint              string                                        `json:"label_fingerprint"`
	Labels                        map[string]string                             `json:"labels"`
	LoadBalancingScheme           string                                        `json:"load_balancing_scheme"`
	Name                          string                                        `json:"name"`
	Network                       string                                        `json:"network"`
	NetworkTier                   string                                        `json:"network_tier"`
	NoAutomateDnsZone             bool                                          `json:"no_automate_dns_zone"`
	PortRange                     string                                        `json:"port_range"`
	Ports                         []string                                      `json:"ports"`
	Project                       string                                        `json:"project"`
	PscConnectionId               string                                        `json:"psc_connection_id"`
	PscConnectionStatus           string                                        `json:"psc_connection_status"`
	RecreateClosedPsc             bool                                          `json:"recreate_closed_psc"`
	Region                        string                                        `json:"region"`
	SelfLink                      string                                        `json:"self_link"`
	ServiceLabel                  string                                        `json:"service_label"`
	ServiceName                   string                                        `json:"service_name"`
	SourceIpRanges                []string                                      `json:"source_ip_ranges"`
	Subnetwork                    string                                        `json:"subnetwork"`
	Target                        string                                        `json:"target"`
	TerraformLabels               map[string]string                             `json:"terraform_labels"`
	ServiceDirectoryRegistrations []DataRulesServiceDirectoryRegistrationsState `json:"service_directory_registrations"`
}

type DataRulesServiceDirectoryRegistrationsState struct {
	Namespace string `json:"namespace"`
	Service   string `json:"service"`
}
