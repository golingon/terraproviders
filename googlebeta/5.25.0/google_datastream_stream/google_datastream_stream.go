// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_datastream_stream

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_datastream_stream.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDatastreamStreamState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gds *Resource) Type() string {
	return "google_datastream_stream"
}

// LocalName returns the local name for [Resource].
func (gds *Resource) LocalName() string {
	return gds.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gds *Resource) Configuration() interface{} {
	return gds.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gds *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gds)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gds *Resource) Dependencies() terra.Dependencies {
	return gds.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gds *Resource) LifecycleManagement() *terra.Lifecycle {
	return gds.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gds *Resource) Attributes() googleDatastreamStreamAttributes {
	return googleDatastreamStreamAttributes{ref: terra.ReferenceResource(gds)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gds *Resource) ImportState(state io.Reader) error {
	gds.state = &googleDatastreamStreamState{}
	if err := json.NewDecoder(state).Decode(gds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gds.Type(), gds.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gds *Resource) State() (*googleDatastreamStreamState, bool) {
	return gds.state, gds.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gds *Resource) StateMust() *googleDatastreamStreamState {
	if gds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gds.Type(), gds.LocalName()))
	}
	return gds.state
}

// Args contains the configurations for google_datastream_stream.
type Args struct {
	// CustomerManagedEncryptionKey: string, optional
	CustomerManagedEncryptionKey terra.StringValue `hcl:"customer_managed_encryption_key,attr"`
	// DesiredState: string, optional
	DesiredState terra.StringValue `hcl:"desired_state,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// StreamId: string, required
	StreamId terra.StringValue `hcl:"stream_id,attr" validate:"required"`
	// BackfillAll: optional
	BackfillAll *BackfillAll `hcl:"backfill_all,block"`
	// BackfillNone: optional
	BackfillNone *BackfillNone `hcl:"backfill_none,block"`
	// DestinationConfig: required
	DestinationConfig *DestinationConfig `hcl:"destination_config,block" validate:"required"`
	// SourceConfig: required
	SourceConfig *SourceConfig `hcl:"source_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDatastreamStreamAttributes struct {
	ref terra.Reference
}

// CustomerManagedEncryptionKey returns a reference to field customer_managed_encryption_key of google_datastream_stream.
func (gds googleDatastreamStreamAttributes) CustomerManagedEncryptionKey() terra.StringValue {
	return terra.ReferenceAsString(gds.ref.Append("customer_managed_encryption_key"))
}

// DesiredState returns a reference to field desired_state of google_datastream_stream.
func (gds googleDatastreamStreamAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceAsString(gds.ref.Append("desired_state"))
}

// DisplayName returns a reference to field display_name of google_datastream_stream.
func (gds googleDatastreamStreamAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gds.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_datastream_stream.
func (gds googleDatastreamStreamAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gds.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_datastream_stream.
func (gds googleDatastreamStreamAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gds.ref.Append("id"))
}

// Labels returns a reference to field labels of google_datastream_stream.
func (gds googleDatastreamStreamAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gds.ref.Append("labels"))
}

// Location returns a reference to field location of google_datastream_stream.
func (gds googleDatastreamStreamAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gds.ref.Append("location"))
}

// Name returns a reference to field name of google_datastream_stream.
func (gds googleDatastreamStreamAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gds.ref.Append("name"))
}

// Project returns a reference to field project of google_datastream_stream.
func (gds googleDatastreamStreamAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gds.ref.Append("project"))
}

// State returns a reference to field state of google_datastream_stream.
func (gds googleDatastreamStreamAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gds.ref.Append("state"))
}

// StreamId returns a reference to field stream_id of google_datastream_stream.
func (gds googleDatastreamStreamAttributes) StreamId() terra.StringValue {
	return terra.ReferenceAsString(gds.ref.Append("stream_id"))
}

// TerraformLabels returns a reference to field terraform_labels of google_datastream_stream.
func (gds googleDatastreamStreamAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gds.ref.Append("terraform_labels"))
}

func (gds googleDatastreamStreamAttributes) BackfillAll() terra.ListValue[BackfillAllAttributes] {
	return terra.ReferenceAsList[BackfillAllAttributes](gds.ref.Append("backfill_all"))
}

func (gds googleDatastreamStreamAttributes) BackfillNone() terra.ListValue[BackfillNoneAttributes] {
	return terra.ReferenceAsList[BackfillNoneAttributes](gds.ref.Append("backfill_none"))
}

func (gds googleDatastreamStreamAttributes) DestinationConfig() terra.ListValue[DestinationConfigAttributes] {
	return terra.ReferenceAsList[DestinationConfigAttributes](gds.ref.Append("destination_config"))
}

func (gds googleDatastreamStreamAttributes) SourceConfig() terra.ListValue[SourceConfigAttributes] {
	return terra.ReferenceAsList[SourceConfigAttributes](gds.ref.Append("source_config"))
}

func (gds googleDatastreamStreamAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gds.ref.Append("timeouts"))
}

type googleDatastreamStreamState struct {
	CustomerManagedEncryptionKey string                   `json:"customer_managed_encryption_key"`
	DesiredState                 string                   `json:"desired_state"`
	DisplayName                  string                   `json:"display_name"`
	EffectiveLabels              map[string]string        `json:"effective_labels"`
	Id                           string                   `json:"id"`
	Labels                       map[string]string        `json:"labels"`
	Location                     string                   `json:"location"`
	Name                         string                   `json:"name"`
	Project                      string                   `json:"project"`
	State                        string                   `json:"state"`
	StreamId                     string                   `json:"stream_id"`
	TerraformLabels              map[string]string        `json:"terraform_labels"`
	BackfillAll                  []BackfillAllState       `json:"backfill_all"`
	BackfillNone                 []BackfillNoneState      `json:"backfill_none"`
	DestinationConfig            []DestinationConfigState `json:"destination_config"`
	SourceConfig                 []SourceConfigState      `json:"source_config"`
	Timeouts                     *TimeoutsState           `json:"timeouts"`
}
