// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_binary_authorization_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_binary_authorization_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBinaryAuthorizationPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbap *Resource) Type() string {
	return "google_binary_authorization_policy"
}

// LocalName returns the local name for [Resource].
func (gbap *Resource) LocalName() string {
	return gbap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbap *Resource) Configuration() interface{} {
	return gbap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbap *Resource) Dependencies() terra.Dependencies {
	return gbap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbap *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbap *Resource) Attributes() googleBinaryAuthorizationPolicyAttributes {
	return googleBinaryAuthorizationPolicyAttributes{ref: terra.ReferenceResource(gbap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbap *Resource) ImportState(state io.Reader) error {
	gbap.state = &googleBinaryAuthorizationPolicyState{}
	if err := json.NewDecoder(state).Decode(gbap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbap.Type(), gbap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbap *Resource) State() (*googleBinaryAuthorizationPolicyState, bool) {
	return gbap.state, gbap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbap *Resource) StateMust() *googleBinaryAuthorizationPolicyState {
	if gbap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbap.Type(), gbap.LocalName()))
	}
	return gbap.state
}

// Args contains the configurations for google_binary_authorization_policy.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GlobalPolicyEvaluationMode: string, optional
	GlobalPolicyEvaluationMode terra.StringValue `hcl:"global_policy_evaluation_mode,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// AdmissionWhitelistPatterns: min=0
	AdmissionWhitelistPatterns []AdmissionWhitelistPatterns `hcl:"admission_whitelist_patterns,block" validate:"min=0"`
	// ClusterAdmissionRules: min=0
	ClusterAdmissionRules []ClusterAdmissionRules `hcl:"cluster_admission_rules,block" validate:"min=0"`
	// DefaultAdmissionRule: required
	DefaultAdmissionRule *DefaultAdmissionRule `hcl:"default_admission_rule,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBinaryAuthorizationPolicyAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_binary_authorization_policy.
func (gbap googleBinaryAuthorizationPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gbap.ref.Append("description"))
}

// GlobalPolicyEvaluationMode returns a reference to field global_policy_evaluation_mode of google_binary_authorization_policy.
func (gbap googleBinaryAuthorizationPolicyAttributes) GlobalPolicyEvaluationMode() terra.StringValue {
	return terra.ReferenceAsString(gbap.ref.Append("global_policy_evaluation_mode"))
}

// Id returns a reference to field id of google_binary_authorization_policy.
func (gbap googleBinaryAuthorizationPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbap.ref.Append("id"))
}

// Project returns a reference to field project of google_binary_authorization_policy.
func (gbap googleBinaryAuthorizationPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbap.ref.Append("project"))
}

func (gbap googleBinaryAuthorizationPolicyAttributes) AdmissionWhitelistPatterns() terra.ListValue[AdmissionWhitelistPatternsAttributes] {
	return terra.ReferenceAsList[AdmissionWhitelistPatternsAttributes](gbap.ref.Append("admission_whitelist_patterns"))
}

func (gbap googleBinaryAuthorizationPolicyAttributes) ClusterAdmissionRules() terra.SetValue[ClusterAdmissionRulesAttributes] {
	return terra.ReferenceAsSet[ClusterAdmissionRulesAttributes](gbap.ref.Append("cluster_admission_rules"))
}

func (gbap googleBinaryAuthorizationPolicyAttributes) DefaultAdmissionRule() terra.ListValue[DefaultAdmissionRuleAttributes] {
	return terra.ReferenceAsList[DefaultAdmissionRuleAttributes](gbap.ref.Append("default_admission_rule"))
}

func (gbap googleBinaryAuthorizationPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbap.ref.Append("timeouts"))
}

type googleBinaryAuthorizationPolicyState struct {
	Description                string                            `json:"description"`
	GlobalPolicyEvaluationMode string                            `json:"global_policy_evaluation_mode"`
	Id                         string                            `json:"id"`
	Project                    string                            `json:"project"`
	AdmissionWhitelistPatterns []AdmissionWhitelistPatternsState `json:"admission_whitelist_patterns"`
	ClusterAdmissionRules      []ClusterAdmissionRulesState      `json:"cluster_admission_rules"`
	DefaultAdmissionRule       []DefaultAdmissionRuleState       `json:"default_admission_rule"`
	Timeouts                   *TimeoutsState                    `json:"timeouts"`
}
