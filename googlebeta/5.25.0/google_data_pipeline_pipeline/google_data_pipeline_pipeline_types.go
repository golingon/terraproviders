// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_data_pipeline_pipeline

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ScheduleInfo struct {
	// Schedule: string, optional
	Schedule terra.StringValue `hcl:"schedule,attr"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Workload struct {
	// WorkloadDataflowFlexTemplateRequest: optional
	DataflowFlexTemplateRequest *WorkloadDataflowFlexTemplateRequest `hcl:"dataflow_flex_template_request,block"`
	// WorkloadDataflowLaunchTemplateRequest: optional
	DataflowLaunchTemplateRequest *WorkloadDataflowLaunchTemplateRequest `hcl:"dataflow_launch_template_request,block"`
}

type WorkloadDataflowFlexTemplateRequest struct {
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// ValidateOnly: bool, optional
	ValidateOnly terra.BoolValue `hcl:"validate_only,attr"`
	// WorkloadDataflowFlexTemplateRequestLaunchParameter: required
	LaunchParameter *WorkloadDataflowFlexTemplateRequestLaunchParameter `hcl:"launch_parameter,block" validate:"required"`
}

type WorkloadDataflowFlexTemplateRequestLaunchParameter struct {
	// ContainerSpecGcsPath: string, optional
	ContainerSpecGcsPath terra.StringValue `hcl:"container_spec_gcs_path,attr"`
	// JobName: string, required
	JobName terra.StringValue `hcl:"job_name,attr" validate:"required"`
	// LaunchOptions: map of string, optional
	LaunchOptions terra.MapValue[terra.StringValue] `hcl:"launch_options,attr"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// TransformNameMappings: map of string, optional
	TransformNameMappings terra.MapValue[terra.StringValue] `hcl:"transform_name_mappings,attr"`
	// Update: bool, optional
	Update terra.BoolValue `hcl:"update,attr"`
	// WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironment: optional
	Environment *WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironment `hcl:"environment,block"`
}

type WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironment struct {
	// AdditionalExperiments: list of string, optional
	AdditionalExperiments terra.ListValue[terra.StringValue] `hcl:"additional_experiments,attr"`
	// AdditionalUserLabels: map of string, optional
	AdditionalUserLabels terra.MapValue[terra.StringValue] `hcl:"additional_user_labels,attr"`
	// EnableStreamingEngine: bool, optional
	EnableStreamingEngine terra.BoolValue `hcl:"enable_streaming_engine,attr"`
	// FlexrsGoal: string, optional
	FlexrsGoal terra.StringValue `hcl:"flexrs_goal,attr"`
	// IpConfiguration: string, optional
	IpConfiguration terra.StringValue `hcl:"ip_configuration,attr"`
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MaxWorkers: number, optional
	MaxWorkers terra.NumberValue `hcl:"max_workers,attr"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// NumWorkers: number, optional
	NumWorkers terra.NumberValue `hcl:"num_workers,attr"`
	// ServiceAccountEmail: string, optional
	ServiceAccountEmail terra.StringValue `hcl:"service_account_email,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// TempLocation: string, optional
	TempLocation terra.StringValue `hcl:"temp_location,attr"`
	// WorkerRegion: string, optional
	WorkerRegion terra.StringValue `hcl:"worker_region,attr"`
	// WorkerZone: string, optional
	WorkerZone terra.StringValue `hcl:"worker_zone,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
}

type WorkloadDataflowLaunchTemplateRequest struct {
	// GcsPath: string, optional
	GcsPath terra.StringValue `hcl:"gcs_path,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// ValidateOnly: bool, optional
	ValidateOnly terra.BoolValue `hcl:"validate_only,attr"`
	// WorkloadDataflowLaunchTemplateRequestLaunchParameters: optional
	LaunchParameters *WorkloadDataflowLaunchTemplateRequestLaunchParameters `hcl:"launch_parameters,block"`
}

type WorkloadDataflowLaunchTemplateRequestLaunchParameters struct {
	// JobName: string, required
	JobName terra.StringValue `hcl:"job_name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// TransformNameMapping: map of string, optional
	TransformNameMapping terra.MapValue[terra.StringValue] `hcl:"transform_name_mapping,attr"`
	// Update: bool, optional
	Update terra.BoolValue `hcl:"update,attr"`
	// WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironment: optional
	Environment *WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironment `hcl:"environment,block"`
}

type WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironment struct {
	// AdditionalExperiments: list of string, optional
	AdditionalExperiments terra.ListValue[terra.StringValue] `hcl:"additional_experiments,attr"`
	// AdditionalUserLabels: map of string, optional
	AdditionalUserLabels terra.MapValue[terra.StringValue] `hcl:"additional_user_labels,attr"`
	// BypassTempDirValidation: bool, optional
	BypassTempDirValidation terra.BoolValue `hcl:"bypass_temp_dir_validation,attr"`
	// EnableStreamingEngine: bool, optional
	EnableStreamingEngine terra.BoolValue `hcl:"enable_streaming_engine,attr"`
	// IpConfiguration: string, optional
	IpConfiguration terra.StringValue `hcl:"ip_configuration,attr"`
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MaxWorkers: number, optional
	MaxWorkers terra.NumberValue `hcl:"max_workers,attr"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// NumWorkers: number, optional
	NumWorkers terra.NumberValue `hcl:"num_workers,attr"`
	// ServiceAccountEmail: string, optional
	ServiceAccountEmail terra.StringValue `hcl:"service_account_email,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// TempLocation: string, optional
	TempLocation terra.StringValue `hcl:"temp_location,attr"`
	// WorkerRegion: string, optional
	WorkerRegion terra.StringValue `hcl:"worker_region,attr"`
	// WorkerZone: string, optional
	WorkerZone terra.StringValue `hcl:"worker_zone,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
}

type ScheduleInfoAttributes struct {
	ref terra.Reference
}

func (si ScheduleInfoAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si ScheduleInfoAttributes) InternalWithRef(ref terra.Reference) ScheduleInfoAttributes {
	return ScheduleInfoAttributes{ref: ref}
}

func (si ScheduleInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si ScheduleInfoAttributes) NextJobTime() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("next_job_time"))
}

func (si ScheduleInfoAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("schedule"))
}

func (si ScheduleInfoAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("time_zone"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type WorkloadAttributes struct {
	ref terra.Reference
}

func (w WorkloadAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w WorkloadAttributes) InternalWithRef(ref terra.Reference) WorkloadAttributes {
	return WorkloadAttributes{ref: ref}
}

func (w WorkloadAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w WorkloadAttributes) DataflowFlexTemplateRequest() terra.ListValue[WorkloadDataflowFlexTemplateRequestAttributes] {
	return terra.ReferenceAsList[WorkloadDataflowFlexTemplateRequestAttributes](w.ref.Append("dataflow_flex_template_request"))
}

func (w WorkloadAttributes) DataflowLaunchTemplateRequest() terra.ListValue[WorkloadDataflowLaunchTemplateRequestAttributes] {
	return terra.ReferenceAsList[WorkloadDataflowLaunchTemplateRequestAttributes](w.ref.Append("dataflow_launch_template_request"))
}

type WorkloadDataflowFlexTemplateRequestAttributes struct {
	ref terra.Reference
}

func (dftr WorkloadDataflowFlexTemplateRequestAttributes) InternalRef() (terra.Reference, error) {
	return dftr.ref, nil
}

func (dftr WorkloadDataflowFlexTemplateRequestAttributes) InternalWithRef(ref terra.Reference) WorkloadDataflowFlexTemplateRequestAttributes {
	return WorkloadDataflowFlexTemplateRequestAttributes{ref: ref}
}

func (dftr WorkloadDataflowFlexTemplateRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dftr.ref.InternalTokens()
}

func (dftr WorkloadDataflowFlexTemplateRequestAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(dftr.ref.Append("location"))
}

func (dftr WorkloadDataflowFlexTemplateRequestAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(dftr.ref.Append("project_id"))
}

func (dftr WorkloadDataflowFlexTemplateRequestAttributes) ValidateOnly() terra.BoolValue {
	return terra.ReferenceAsBool(dftr.ref.Append("validate_only"))
}

func (dftr WorkloadDataflowFlexTemplateRequestAttributes) LaunchParameter() terra.ListValue[WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes] {
	return terra.ReferenceAsList[WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes](dftr.ref.Append("launch_parameter"))
}

type WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes struct {
	ref terra.Reference
}

func (lp WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes) InternalWithRef(ref terra.Reference) WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes {
	return WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes{ref: ref}
}

func (lp WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes) ContainerSpecGcsPath() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("container_spec_gcs_path"))
}

func (lp WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes) JobName() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("job_name"))
}

func (lp WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes) LaunchOptions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lp.ref.Append("launch_options"))
}

func (lp WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lp.ref.Append("parameters"))
}

func (lp WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes) TransformNameMappings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lp.ref.Append("transform_name_mappings"))
}

func (lp WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes) Update() terra.BoolValue {
	return terra.ReferenceAsBool(lp.ref.Append("update"))
}

func (lp WorkloadDataflowFlexTemplateRequestLaunchParameterAttributes) Environment() terra.ListValue[WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes] {
	return terra.ReferenceAsList[WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes](lp.ref.Append("environment"))
}

type WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes struct {
	ref terra.Reference
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) InternalWithRef(ref terra.Reference) WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes {
	return WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes{ref: ref}
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) AdditionalExperiments() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("additional_experiments"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) AdditionalUserLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](e.ref.Append("additional_user_labels"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) EnableStreamingEngine() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("enable_streaming_engine"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) FlexrsGoal() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("flexrs_goal"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) IpConfiguration() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ip_configuration"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kms_key_name"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("machine_type"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) MaxWorkers() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("max_workers"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("network"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) NumWorkers() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("num_workers"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("service_account_email"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("subnetwork"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) TempLocation() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("temp_location"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) WorkerRegion() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("worker_region"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) WorkerZone() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("worker_zone"))
}

func (e WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("zone"))
}

type WorkloadDataflowLaunchTemplateRequestAttributes struct {
	ref terra.Reference
}

func (dltr WorkloadDataflowLaunchTemplateRequestAttributes) InternalRef() (terra.Reference, error) {
	return dltr.ref, nil
}

func (dltr WorkloadDataflowLaunchTemplateRequestAttributes) InternalWithRef(ref terra.Reference) WorkloadDataflowLaunchTemplateRequestAttributes {
	return WorkloadDataflowLaunchTemplateRequestAttributes{ref: ref}
}

func (dltr WorkloadDataflowLaunchTemplateRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dltr.ref.InternalTokens()
}

func (dltr WorkloadDataflowLaunchTemplateRequestAttributes) GcsPath() terra.StringValue {
	return terra.ReferenceAsString(dltr.ref.Append("gcs_path"))
}

func (dltr WorkloadDataflowLaunchTemplateRequestAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(dltr.ref.Append("location"))
}

func (dltr WorkloadDataflowLaunchTemplateRequestAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(dltr.ref.Append("project_id"))
}

func (dltr WorkloadDataflowLaunchTemplateRequestAttributes) ValidateOnly() terra.BoolValue {
	return terra.ReferenceAsBool(dltr.ref.Append("validate_only"))
}

func (dltr WorkloadDataflowLaunchTemplateRequestAttributes) LaunchParameters() terra.ListValue[WorkloadDataflowLaunchTemplateRequestLaunchParametersAttributes] {
	return terra.ReferenceAsList[WorkloadDataflowLaunchTemplateRequestLaunchParametersAttributes](dltr.ref.Append("launch_parameters"))
}

type WorkloadDataflowLaunchTemplateRequestLaunchParametersAttributes struct {
	ref terra.Reference
}

func (lp WorkloadDataflowLaunchTemplateRequestLaunchParametersAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp WorkloadDataflowLaunchTemplateRequestLaunchParametersAttributes) InternalWithRef(ref terra.Reference) WorkloadDataflowLaunchTemplateRequestLaunchParametersAttributes {
	return WorkloadDataflowLaunchTemplateRequestLaunchParametersAttributes{ref: ref}
}

func (lp WorkloadDataflowLaunchTemplateRequestLaunchParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp WorkloadDataflowLaunchTemplateRequestLaunchParametersAttributes) JobName() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("job_name"))
}

func (lp WorkloadDataflowLaunchTemplateRequestLaunchParametersAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lp.ref.Append("parameters"))
}

func (lp WorkloadDataflowLaunchTemplateRequestLaunchParametersAttributes) TransformNameMapping() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lp.ref.Append("transform_name_mapping"))
}

func (lp WorkloadDataflowLaunchTemplateRequestLaunchParametersAttributes) Update() terra.BoolValue {
	return terra.ReferenceAsBool(lp.ref.Append("update"))
}

func (lp WorkloadDataflowLaunchTemplateRequestLaunchParametersAttributes) Environment() terra.ListValue[WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes] {
	return terra.ReferenceAsList[WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes](lp.ref.Append("environment"))
}

type WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes struct {
	ref terra.Reference
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) InternalWithRef(ref terra.Reference) WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes {
	return WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes{ref: ref}
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) AdditionalExperiments() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("additional_experiments"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) AdditionalUserLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](e.ref.Append("additional_user_labels"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) BypassTempDirValidation() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("bypass_temp_dir_validation"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) EnableStreamingEngine() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("enable_streaming_engine"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) IpConfiguration() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ip_configuration"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kms_key_name"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("machine_type"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) MaxWorkers() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("max_workers"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("network"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) NumWorkers() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("num_workers"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("service_account_email"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("subnetwork"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) TempLocation() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("temp_location"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) WorkerRegion() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("worker_region"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) WorkerZone() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("worker_zone"))
}

func (e WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("zone"))
}

type ScheduleInfoState struct {
	NextJobTime string `json:"next_job_time"`
	Schedule    string `json:"schedule"`
	TimeZone    string `json:"time_zone"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type WorkloadState struct {
	DataflowFlexTemplateRequest   []WorkloadDataflowFlexTemplateRequestState   `json:"dataflow_flex_template_request"`
	DataflowLaunchTemplateRequest []WorkloadDataflowLaunchTemplateRequestState `json:"dataflow_launch_template_request"`
}

type WorkloadDataflowFlexTemplateRequestState struct {
	Location        string                                                    `json:"location"`
	ProjectId       string                                                    `json:"project_id"`
	ValidateOnly    bool                                                      `json:"validate_only"`
	LaunchParameter []WorkloadDataflowFlexTemplateRequestLaunchParameterState `json:"launch_parameter"`
}

type WorkloadDataflowFlexTemplateRequestLaunchParameterState struct {
	ContainerSpecGcsPath  string                                                               `json:"container_spec_gcs_path"`
	JobName               string                                                               `json:"job_name"`
	LaunchOptions         map[string]string                                                    `json:"launch_options"`
	Parameters            map[string]string                                                    `json:"parameters"`
	TransformNameMappings map[string]string                                                    `json:"transform_name_mappings"`
	Update                bool                                                                 `json:"update"`
	Environment           []WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentState `json:"environment"`
}

type WorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentState struct {
	AdditionalExperiments []string          `json:"additional_experiments"`
	AdditionalUserLabels  map[string]string `json:"additional_user_labels"`
	EnableStreamingEngine bool              `json:"enable_streaming_engine"`
	FlexrsGoal            string            `json:"flexrs_goal"`
	IpConfiguration       string            `json:"ip_configuration"`
	KmsKeyName            string            `json:"kms_key_name"`
	MachineType           string            `json:"machine_type"`
	MaxWorkers            float64           `json:"max_workers"`
	Network               string            `json:"network"`
	NumWorkers            float64           `json:"num_workers"`
	ServiceAccountEmail   string            `json:"service_account_email"`
	Subnetwork            string            `json:"subnetwork"`
	TempLocation          string            `json:"temp_location"`
	WorkerRegion          string            `json:"worker_region"`
	WorkerZone            string            `json:"worker_zone"`
	Zone                  string            `json:"zone"`
}

type WorkloadDataflowLaunchTemplateRequestState struct {
	GcsPath          string                                                       `json:"gcs_path"`
	Location         string                                                       `json:"location"`
	ProjectId        string                                                       `json:"project_id"`
	ValidateOnly     bool                                                         `json:"validate_only"`
	LaunchParameters []WorkloadDataflowLaunchTemplateRequestLaunchParametersState `json:"launch_parameters"`
}

type WorkloadDataflowLaunchTemplateRequestLaunchParametersState struct {
	JobName              string                                                                  `json:"job_name"`
	Parameters           map[string]string                                                       `json:"parameters"`
	TransformNameMapping map[string]string                                                       `json:"transform_name_mapping"`
	Update               bool                                                                    `json:"update"`
	Environment          []WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentState `json:"environment"`
}

type WorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentState struct {
	AdditionalExperiments   []string          `json:"additional_experiments"`
	AdditionalUserLabels    map[string]string `json:"additional_user_labels"`
	BypassTempDirValidation bool              `json:"bypass_temp_dir_validation"`
	EnableStreamingEngine   bool              `json:"enable_streaming_engine"`
	IpConfiguration         string            `json:"ip_configuration"`
	KmsKeyName              string            `json:"kms_key_name"`
	MachineType             string            `json:"machine_type"`
	MaxWorkers              float64           `json:"max_workers"`
	Network                 string            `json:"network"`
	NumWorkers              float64           `json:"num_workers"`
	ServiceAccountEmail     string            `json:"service_account_email"`
	Subnetwork              string            `json:"subnetwork"`
	TempLocation            string            `json:"temp_location"`
	WorkerRegion            string            `json:"worker_region"`
	WorkerZone              string            `json:"worker_zone"`
	Zone                    string            `json:"zone"`
}
