// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firebase_database_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firebase_database_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirebaseDatabaseInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfdi *Resource) Type() string {
	return "google_firebase_database_instance"
}

// LocalName returns the local name for [Resource].
func (gfdi *Resource) LocalName() string {
	return gfdi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfdi *Resource) Configuration() interface{} {
	return gfdi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfdi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfdi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfdi *Resource) Dependencies() terra.Dependencies {
	return gfdi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfdi *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfdi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfdi *Resource) Attributes() googleFirebaseDatabaseInstanceAttributes {
	return googleFirebaseDatabaseInstanceAttributes{ref: terra.ReferenceResource(gfdi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfdi *Resource) ImportState(state io.Reader) error {
	gfdi.state = &googleFirebaseDatabaseInstanceState{}
	if err := json.NewDecoder(state).Decode(gfdi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfdi.Type(), gfdi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfdi *Resource) State() (*googleFirebaseDatabaseInstanceState, bool) {
	return gfdi.state, gfdi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfdi *Resource) StateMust() *googleFirebaseDatabaseInstanceState {
	if gfdi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfdi.Type(), gfdi.LocalName()))
	}
	return gfdi.state
}

// Args contains the configurations for google_firebase_database_instance.
type Args struct {
	// DesiredState: string, optional
	DesiredState terra.StringValue `hcl:"desired_state,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, required
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirebaseDatabaseInstanceAttributes struct {
	ref terra.Reference
}

// DatabaseUrl returns a reference to field database_url of google_firebase_database_instance.
func (gfdi googleFirebaseDatabaseInstanceAttributes) DatabaseUrl() terra.StringValue {
	return terra.ReferenceAsString(gfdi.ref.Append("database_url"))
}

// DesiredState returns a reference to field desired_state of google_firebase_database_instance.
func (gfdi googleFirebaseDatabaseInstanceAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceAsString(gfdi.ref.Append("desired_state"))
}

// Id returns a reference to field id of google_firebase_database_instance.
func (gfdi googleFirebaseDatabaseInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfdi.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of google_firebase_database_instance.
func (gfdi googleFirebaseDatabaseInstanceAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(gfdi.ref.Append("instance_id"))
}

// Name returns a reference to field name of google_firebase_database_instance.
func (gfdi googleFirebaseDatabaseInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfdi.ref.Append("name"))
}

// Project returns a reference to field project of google_firebase_database_instance.
func (gfdi googleFirebaseDatabaseInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfdi.ref.Append("project"))
}

// Region returns a reference to field region of google_firebase_database_instance.
func (gfdi googleFirebaseDatabaseInstanceAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gfdi.ref.Append("region"))
}

// State returns a reference to field state of google_firebase_database_instance.
func (gfdi googleFirebaseDatabaseInstanceAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gfdi.ref.Append("state"))
}

// Type returns a reference to field type of google_firebase_database_instance.
func (gfdi googleFirebaseDatabaseInstanceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gfdi.ref.Append("type"))
}

func (gfdi googleFirebaseDatabaseInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfdi.ref.Append("timeouts"))
}

type googleFirebaseDatabaseInstanceState struct {
	DatabaseUrl  string         `json:"database_url"`
	DesiredState string         `json:"desired_state"`
	Id           string         `json:"id"`
	InstanceId   string         `json:"instance_id"`
	Name         string         `json:"name"`
	Project      string         `json:"project"`
	Region       string         `json:"region"`
	State        string         `json:"state"`
	Type         string         `json:"type"`
	Timeouts     *TimeoutsState `json:"timeouts"`
}
