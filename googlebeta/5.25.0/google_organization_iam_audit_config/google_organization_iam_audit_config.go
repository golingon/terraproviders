// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_organization_iam_audit_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_organization_iam_audit_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleOrganizationIamAuditConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (goiac *Resource) Type() string {
	return "google_organization_iam_audit_config"
}

// LocalName returns the local name for [Resource].
func (goiac *Resource) LocalName() string {
	return goiac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (goiac *Resource) Configuration() interface{} {
	return goiac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (goiac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(goiac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (goiac *Resource) Dependencies() terra.Dependencies {
	return goiac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (goiac *Resource) LifecycleManagement() *terra.Lifecycle {
	return goiac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (goiac *Resource) Attributes() googleOrganizationIamAuditConfigAttributes {
	return googleOrganizationIamAuditConfigAttributes{ref: terra.ReferenceResource(goiac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (goiac *Resource) ImportState(state io.Reader) error {
	goiac.state = &googleOrganizationIamAuditConfigState{}
	if err := json.NewDecoder(state).Decode(goiac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", goiac.Type(), goiac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (goiac *Resource) State() (*googleOrganizationIamAuditConfigState, bool) {
	return goiac.state, goiac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (goiac *Resource) StateMust() *googleOrganizationIamAuditConfigState {
	if goiac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", goiac.Type(), goiac.LocalName()))
	}
	return goiac.state
}

// Args contains the configurations for google_organization_iam_audit_config.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OrgId: string, required
	OrgId terra.StringValue `hcl:"org_id,attr" validate:"required"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// AuditLogConfig: min=1
	AuditLogConfig []AuditLogConfig `hcl:"audit_log_config,block" validate:"min=1"`
}

type googleOrganizationIamAuditConfigAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_organization_iam_audit_config.
func (goiac googleOrganizationIamAuditConfigAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(goiac.ref.Append("etag"))
}

// Id returns a reference to field id of google_organization_iam_audit_config.
func (goiac googleOrganizationIamAuditConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(goiac.ref.Append("id"))
}

// OrgId returns a reference to field org_id of google_organization_iam_audit_config.
func (goiac googleOrganizationIamAuditConfigAttributes) OrgId() terra.StringValue {
	return terra.ReferenceAsString(goiac.ref.Append("org_id"))
}

// Service returns a reference to field service of google_organization_iam_audit_config.
func (goiac googleOrganizationIamAuditConfigAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(goiac.ref.Append("service"))
}

func (goiac googleOrganizationIamAuditConfigAttributes) AuditLogConfig() terra.SetValue[AuditLogConfigAttributes] {
	return terra.ReferenceAsSet[AuditLogConfigAttributes](goiac.ref.Append("audit_log_config"))
}

type googleOrganizationIamAuditConfigState struct {
	Etag           string                `json:"etag"`
	Id             string                `json:"id"`
	OrgId          string                `json:"org_id"`
	Service        string                `json:"service"`
	AuditLogConfig []AuditLogConfigState `json:"audit_log_config"`
}
