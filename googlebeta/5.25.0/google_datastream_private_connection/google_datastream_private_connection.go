// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_datastream_private_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_datastream_private_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDatastreamPrivateConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdpc *Resource) Type() string {
	return "google_datastream_private_connection"
}

// LocalName returns the local name for [Resource].
func (gdpc *Resource) LocalName() string {
	return gdpc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdpc *Resource) Configuration() interface{} {
	return gdpc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdpc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdpc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdpc *Resource) Dependencies() terra.Dependencies {
	return gdpc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdpc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdpc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdpc *Resource) Attributes() googleDatastreamPrivateConnectionAttributes {
	return googleDatastreamPrivateConnectionAttributes{ref: terra.ReferenceResource(gdpc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdpc *Resource) ImportState(state io.Reader) error {
	gdpc.state = &googleDatastreamPrivateConnectionState{}
	if err := json.NewDecoder(state).Decode(gdpc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdpc.Type(), gdpc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdpc *Resource) State() (*googleDatastreamPrivateConnectionState, bool) {
	return gdpc.state, gdpc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdpc *Resource) StateMust() *googleDatastreamPrivateConnectionState {
	if gdpc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdpc.Type(), gdpc.LocalName()))
	}
	return gdpc.state
}

// Args contains the configurations for google_datastream_private_connection.
type Args struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// PrivateConnectionId: string, required
	PrivateConnectionId terra.StringValue `hcl:"private_connection_id,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcPeeringConfig: required
	VpcPeeringConfig *VpcPeeringConfig `hcl:"vpc_peering_config,block" validate:"required"`
}

type googleDatastreamPrivateConnectionAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of google_datastream_private_connection.
func (gdpc googleDatastreamPrivateConnectionAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdpc.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_datastream_private_connection.
func (gdpc googleDatastreamPrivateConnectionAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdpc.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_datastream_private_connection.
func (gdpc googleDatastreamPrivateConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdpc.ref.Append("id"))
}

// Labels returns a reference to field labels of google_datastream_private_connection.
func (gdpc googleDatastreamPrivateConnectionAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdpc.ref.Append("labels"))
}

// Location returns a reference to field location of google_datastream_private_connection.
func (gdpc googleDatastreamPrivateConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gdpc.ref.Append("location"))
}

// Name returns a reference to field name of google_datastream_private_connection.
func (gdpc googleDatastreamPrivateConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdpc.ref.Append("name"))
}

// PrivateConnectionId returns a reference to field private_connection_id of google_datastream_private_connection.
func (gdpc googleDatastreamPrivateConnectionAttributes) PrivateConnectionId() terra.StringValue {
	return terra.ReferenceAsString(gdpc.ref.Append("private_connection_id"))
}

// Project returns a reference to field project of google_datastream_private_connection.
func (gdpc googleDatastreamPrivateConnectionAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdpc.ref.Append("project"))
}

// State returns a reference to field state of google_datastream_private_connection.
func (gdpc googleDatastreamPrivateConnectionAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gdpc.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_datastream_private_connection.
func (gdpc googleDatastreamPrivateConnectionAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdpc.ref.Append("terraform_labels"))
}

func (gdpc googleDatastreamPrivateConnectionAttributes) Error() terra.ListValue[ErrorAttributes] {
	return terra.ReferenceAsList[ErrorAttributes](gdpc.ref.Append("error"))
}

func (gdpc googleDatastreamPrivateConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdpc.ref.Append("timeouts"))
}

func (gdpc googleDatastreamPrivateConnectionAttributes) VpcPeeringConfig() terra.ListValue[VpcPeeringConfigAttributes] {
	return terra.ReferenceAsList[VpcPeeringConfigAttributes](gdpc.ref.Append("vpc_peering_config"))
}

type googleDatastreamPrivateConnectionState struct {
	DisplayName         string                  `json:"display_name"`
	EffectiveLabels     map[string]string       `json:"effective_labels"`
	Id                  string                  `json:"id"`
	Labels              map[string]string       `json:"labels"`
	Location            string                  `json:"location"`
	Name                string                  `json:"name"`
	PrivateConnectionId string                  `json:"private_connection_id"`
	Project             string                  `json:"project"`
	State               string                  `json:"state"`
	TerraformLabels     map[string]string       `json:"terraform_labels"`
	Error               []ErrorState            `json:"error"`
	Timeouts            *TimeoutsState          `json:"timeouts"`
	VpcPeeringConfig    []VpcPeeringConfigState `json:"vpc_peering_config"`
}
