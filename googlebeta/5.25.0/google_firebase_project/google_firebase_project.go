// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firebase_project

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firebase_project.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirebaseProjectState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfp *Resource) Type() string {
	return "google_firebase_project"
}

// LocalName returns the local name for [Resource].
func (gfp *Resource) LocalName() string {
	return gfp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfp *Resource) Configuration() interface{} {
	return gfp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfp *Resource) Dependencies() terra.Dependencies {
	return gfp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfp *Resource) Attributes() googleFirebaseProjectAttributes {
	return googleFirebaseProjectAttributes{ref: terra.ReferenceResource(gfp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfp *Resource) ImportState(state io.Reader) error {
	gfp.state = &googleFirebaseProjectState{}
	if err := json.NewDecoder(state).Decode(gfp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfp.Type(), gfp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfp *Resource) State() (*googleFirebaseProjectState, bool) {
	return gfp.state, gfp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfp *Resource) StateMust() *googleFirebaseProjectState {
	if gfp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfp.Type(), gfp.LocalName()))
	}
	return gfp.state
}

// Args contains the configurations for google_firebase_project.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirebaseProjectAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of google_firebase_project.
func (gfp googleFirebaseProjectAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gfp.ref.Append("display_name"))
}

// Id returns a reference to field id of google_firebase_project.
func (gfp googleFirebaseProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfp.ref.Append("id"))
}

// Project returns a reference to field project of google_firebase_project.
func (gfp googleFirebaseProjectAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfp.ref.Append("project"))
}

// ProjectNumber returns a reference to field project_number of google_firebase_project.
func (gfp googleFirebaseProjectAttributes) ProjectNumber() terra.StringValue {
	return terra.ReferenceAsString(gfp.ref.Append("project_number"))
}

func (gfp googleFirebaseProjectAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfp.ref.Append("timeouts"))
}

type googleFirebaseProjectState struct {
	DisplayName   string         `json:"display_name"`
	Id            string         `json:"id"`
	Project       string         `json:"project"`
	ProjectNumber string         `json:"project_number"`
	Timeouts      *TimeoutsState `json:"timeouts"`
}
