// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_network_services_http_route

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rules struct {
	// RulesAction: optional
	Action *RulesAction `hcl:"action,block"`
	// RulesMatches: min=0
	Matches []RulesMatches `hcl:"matches,block" validate:"min=0"`
}

type RulesAction struct {
	// Timeout: string, optional
	Timeout terra.StringValue `hcl:"timeout,attr"`
	// RulesActionCorsPolicy: optional
	CorsPolicy *RulesActionCorsPolicy `hcl:"cors_policy,block"`
	// RulesActionDestinations: min=0
	Destinations []RulesActionDestinations `hcl:"destinations,block" validate:"min=0"`
	// RulesActionFaultInjectionPolicy: optional
	FaultInjectionPolicy *RulesActionFaultInjectionPolicy `hcl:"fault_injection_policy,block"`
	// RulesActionRedirect: optional
	Redirect *RulesActionRedirect `hcl:"redirect,block"`
	// RulesActionRequestHeaderModifier: optional
	RequestHeaderModifier *RulesActionRequestHeaderModifier `hcl:"request_header_modifier,block"`
	// RulesActionRequestMirrorPolicy: optional
	RequestMirrorPolicy *RulesActionRequestMirrorPolicy `hcl:"request_mirror_policy,block"`
	// RulesActionResponseHeaderModifier: optional
	ResponseHeaderModifier *RulesActionResponseHeaderModifier `hcl:"response_header_modifier,block"`
	// RulesActionRetryPolicy: optional
	RetryPolicy *RulesActionRetryPolicy `hcl:"retry_policy,block"`
	// RulesActionUrlRewrite: optional
	UrlRewrite *RulesActionUrlRewrite `hcl:"url_rewrite,block"`
}

type RulesActionCorsPolicy struct {
	// AllowCredentials: bool, optional
	AllowCredentials terra.BoolValue `hcl:"allow_credentials,attr"`
	// AllowHeaders: list of string, optional
	AllowHeaders terra.ListValue[terra.StringValue] `hcl:"allow_headers,attr"`
	// AllowMethods: list of string, optional
	AllowMethods terra.ListValue[terra.StringValue] `hcl:"allow_methods,attr"`
	// AllowOriginRegexes: list of string, optional
	AllowOriginRegexes terra.ListValue[terra.StringValue] `hcl:"allow_origin_regexes,attr"`
	// AllowOrigins: list of string, optional
	AllowOrigins terra.ListValue[terra.StringValue] `hcl:"allow_origins,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// ExposeHeaders: list of string, optional
	ExposeHeaders terra.ListValue[terra.StringValue] `hcl:"expose_headers,attr"`
	// MaxAge: string, optional
	MaxAge terra.StringValue `hcl:"max_age,attr"`
}

type RulesActionDestinations struct {
	// ServiceName: string, optional
	ServiceName terra.StringValue `hcl:"service_name,attr"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type RulesActionFaultInjectionPolicy struct {
	// RulesActionFaultInjectionPolicyAbort: optional
	Abort *RulesActionFaultInjectionPolicyAbort `hcl:"abort,block"`
	// RulesActionFaultInjectionPolicyDelay: optional
	Delay *RulesActionFaultInjectionPolicyDelay `hcl:"delay,block"`
}

type RulesActionFaultInjectionPolicyAbort struct {
	// HttpStatus: number, optional
	HttpStatus terra.NumberValue `hcl:"http_status,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type RulesActionFaultInjectionPolicyDelay struct {
	// FixedDelay: string, optional
	FixedDelay terra.StringValue `hcl:"fixed_delay,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type RulesActionRedirect struct {
	// HostRedirect: string, optional
	HostRedirect terra.StringValue `hcl:"host_redirect,attr"`
	// HttpsRedirect: bool, optional
	HttpsRedirect terra.BoolValue `hcl:"https_redirect,attr"`
	// PathRedirect: string, optional
	PathRedirect terra.StringValue `hcl:"path_redirect,attr"`
	// PortRedirect: number, optional
	PortRedirect terra.NumberValue `hcl:"port_redirect,attr"`
	// PrefixRewrite: string, optional
	PrefixRewrite terra.StringValue `hcl:"prefix_rewrite,attr"`
	// ResponseCode: string, optional
	ResponseCode terra.StringValue `hcl:"response_code,attr"`
	// StripQuery: bool, optional
	StripQuery terra.BoolValue `hcl:"strip_query,attr"`
}

type RulesActionRequestHeaderModifier struct {
	// Add: map of string, optional
	Add terra.MapValue[terra.StringValue] `hcl:"add,attr"`
	// Remove: list of string, optional
	Remove terra.ListValue[terra.StringValue] `hcl:"remove,attr"`
	// Set: map of string, optional
	Set terra.MapValue[terra.StringValue] `hcl:"set,attr"`
}

type RulesActionRequestMirrorPolicy struct {
	// RulesActionRequestMirrorPolicyDestination: optional
	Destination *RulesActionRequestMirrorPolicyDestination `hcl:"destination,block"`
}

type RulesActionRequestMirrorPolicyDestination struct {
	// ServiceName: string, optional
	ServiceName terra.StringValue `hcl:"service_name,attr"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type RulesActionResponseHeaderModifier struct {
	// Add: map of string, optional
	Add terra.MapValue[terra.StringValue] `hcl:"add,attr"`
	// Remove: list of string, optional
	Remove terra.ListValue[terra.StringValue] `hcl:"remove,attr"`
	// Set: map of string, optional
	Set terra.MapValue[terra.StringValue] `hcl:"set,attr"`
}

type RulesActionRetryPolicy struct {
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// PerTryTimeout: string, optional
	PerTryTimeout terra.StringValue `hcl:"per_try_timeout,attr"`
	// RetryConditions: list of string, optional
	RetryConditions terra.ListValue[terra.StringValue] `hcl:"retry_conditions,attr"`
}

type RulesActionUrlRewrite struct {
	// HostRewrite: string, optional
	HostRewrite terra.StringValue `hcl:"host_rewrite,attr"`
	// PathPrefixRewrite: string, optional
	PathPrefixRewrite terra.StringValue `hcl:"path_prefix_rewrite,attr"`
}

type RulesMatches struct {
	// FullPathMatch: string, optional
	FullPathMatch terra.StringValue `hcl:"full_path_match,attr"`
	// IgnoreCase: bool, optional
	IgnoreCase terra.BoolValue `hcl:"ignore_case,attr"`
	// PrefixMatch: string, optional
	PrefixMatch terra.StringValue `hcl:"prefix_match,attr"`
	// RegexMatch: string, optional
	RegexMatch terra.StringValue `hcl:"regex_match,attr"`
	// RulesMatchesHeaders: min=0
	Headers []RulesMatchesHeaders `hcl:"headers,block" validate:"min=0"`
	// RulesMatchesQueryParameters: min=0
	QueryParameters []RulesMatchesQueryParameters `hcl:"query_parameters,block" validate:"min=0"`
}

type RulesMatchesHeaders struct {
	// ExactMatch: string, optional
	ExactMatch terra.StringValue `hcl:"exact_match,attr"`
	// Header: string, optional
	Header terra.StringValue `hcl:"header,attr"`
	// InvertMatch: bool, optional
	InvertMatch terra.BoolValue `hcl:"invert_match,attr"`
	// PrefixMatch: string, optional
	PrefixMatch terra.StringValue `hcl:"prefix_match,attr"`
	// PresentMatch: bool, optional
	PresentMatch terra.BoolValue `hcl:"present_match,attr"`
	// RegexMatch: string, optional
	RegexMatch terra.StringValue `hcl:"regex_match,attr"`
	// SuffixMatch: string, optional
	SuffixMatch terra.StringValue `hcl:"suffix_match,attr"`
	// RulesMatchesHeadersRangeMatch: optional
	RangeMatch *RulesMatchesHeadersRangeMatch `hcl:"range_match,block"`
}

type RulesMatchesHeadersRangeMatch struct {
	// End: number, required
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Start: number, required
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type RulesMatchesQueryParameters struct {
	// ExactMatch: string, optional
	ExactMatch terra.StringValue `hcl:"exact_match,attr"`
	// PresentMatch: bool, optional
	PresentMatch terra.BoolValue `hcl:"present_match,attr"`
	// QueryParameter: string, optional
	QueryParameter terra.StringValue `hcl:"query_parameter,attr"`
	// RegexMatch: string, optional
	RegexMatch terra.StringValue `hcl:"regex_match,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RulesAttributes struct {
	ref terra.Reference
}

func (r RulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RulesAttributes) InternalWithRef(ref terra.Reference) RulesAttributes {
	return RulesAttributes{ref: ref}
}

func (r RulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RulesAttributes) Action() terra.ListValue[RulesActionAttributes] {
	return terra.ReferenceAsList[RulesActionAttributes](r.ref.Append("action"))
}

func (r RulesAttributes) Matches() terra.ListValue[RulesMatchesAttributes] {
	return terra.ReferenceAsList[RulesMatchesAttributes](r.ref.Append("matches"))
}

type RulesActionAttributes struct {
	ref terra.Reference
}

func (a RulesActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a RulesActionAttributes) InternalWithRef(ref terra.Reference) RulesActionAttributes {
	return RulesActionAttributes{ref: ref}
}

func (a RulesActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a RulesActionAttributes) Timeout() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("timeout"))
}

func (a RulesActionAttributes) CorsPolicy() terra.ListValue[RulesActionCorsPolicyAttributes] {
	return terra.ReferenceAsList[RulesActionCorsPolicyAttributes](a.ref.Append("cors_policy"))
}

func (a RulesActionAttributes) Destinations() terra.ListValue[RulesActionDestinationsAttributes] {
	return terra.ReferenceAsList[RulesActionDestinationsAttributes](a.ref.Append("destinations"))
}

func (a RulesActionAttributes) FaultInjectionPolicy() terra.ListValue[RulesActionFaultInjectionPolicyAttributes] {
	return terra.ReferenceAsList[RulesActionFaultInjectionPolicyAttributes](a.ref.Append("fault_injection_policy"))
}

func (a RulesActionAttributes) Redirect() terra.ListValue[RulesActionRedirectAttributes] {
	return terra.ReferenceAsList[RulesActionRedirectAttributes](a.ref.Append("redirect"))
}

func (a RulesActionAttributes) RequestHeaderModifier() terra.ListValue[RulesActionRequestHeaderModifierAttributes] {
	return terra.ReferenceAsList[RulesActionRequestHeaderModifierAttributes](a.ref.Append("request_header_modifier"))
}

func (a RulesActionAttributes) RequestMirrorPolicy() terra.ListValue[RulesActionRequestMirrorPolicyAttributes] {
	return terra.ReferenceAsList[RulesActionRequestMirrorPolicyAttributes](a.ref.Append("request_mirror_policy"))
}

func (a RulesActionAttributes) ResponseHeaderModifier() terra.ListValue[RulesActionResponseHeaderModifierAttributes] {
	return terra.ReferenceAsList[RulesActionResponseHeaderModifierAttributes](a.ref.Append("response_header_modifier"))
}

func (a RulesActionAttributes) RetryPolicy() terra.ListValue[RulesActionRetryPolicyAttributes] {
	return terra.ReferenceAsList[RulesActionRetryPolicyAttributes](a.ref.Append("retry_policy"))
}

func (a RulesActionAttributes) UrlRewrite() terra.ListValue[RulesActionUrlRewriteAttributes] {
	return terra.ReferenceAsList[RulesActionUrlRewriteAttributes](a.ref.Append("url_rewrite"))
}

type RulesActionCorsPolicyAttributes struct {
	ref terra.Reference
}

func (cp RulesActionCorsPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp RulesActionCorsPolicyAttributes) InternalWithRef(ref terra.Reference) RulesActionCorsPolicyAttributes {
	return RulesActionCorsPolicyAttributes{ref: ref}
}

func (cp RulesActionCorsPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp RulesActionCorsPolicyAttributes) AllowCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("allow_credentials"))
}

func (cp RulesActionCorsPolicyAttributes) AllowHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_headers"))
}

func (cp RulesActionCorsPolicyAttributes) AllowMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_methods"))
}

func (cp RulesActionCorsPolicyAttributes) AllowOriginRegexes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origin_regexes"))
}

func (cp RulesActionCorsPolicyAttributes) AllowOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origins"))
}

func (cp RulesActionCorsPolicyAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("disabled"))
}

func (cp RulesActionCorsPolicyAttributes) ExposeHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("expose_headers"))
}

func (cp RulesActionCorsPolicyAttributes) MaxAge() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("max_age"))
}

type RulesActionDestinationsAttributes struct {
	ref terra.Reference
}

func (d RulesActionDestinationsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d RulesActionDestinationsAttributes) InternalWithRef(ref terra.Reference) RulesActionDestinationsAttributes {
	return RulesActionDestinationsAttributes{ref: ref}
}

func (d RulesActionDestinationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d RulesActionDestinationsAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("service_name"))
}

func (d RulesActionDestinationsAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("weight"))
}

type RulesActionFaultInjectionPolicyAttributes struct {
	ref terra.Reference
}

func (fip RulesActionFaultInjectionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return fip.ref, nil
}

func (fip RulesActionFaultInjectionPolicyAttributes) InternalWithRef(ref terra.Reference) RulesActionFaultInjectionPolicyAttributes {
	return RulesActionFaultInjectionPolicyAttributes{ref: ref}
}

func (fip RulesActionFaultInjectionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fip.ref.InternalTokens()
}

func (fip RulesActionFaultInjectionPolicyAttributes) Abort() terra.ListValue[RulesActionFaultInjectionPolicyAbortAttributes] {
	return terra.ReferenceAsList[RulesActionFaultInjectionPolicyAbortAttributes](fip.ref.Append("abort"))
}

func (fip RulesActionFaultInjectionPolicyAttributes) Delay() terra.ListValue[RulesActionFaultInjectionPolicyDelayAttributes] {
	return terra.ReferenceAsList[RulesActionFaultInjectionPolicyDelayAttributes](fip.ref.Append("delay"))
}

type RulesActionFaultInjectionPolicyAbortAttributes struct {
	ref terra.Reference
}

func (a RulesActionFaultInjectionPolicyAbortAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a RulesActionFaultInjectionPolicyAbortAttributes) InternalWithRef(ref terra.Reference) RulesActionFaultInjectionPolicyAbortAttributes {
	return RulesActionFaultInjectionPolicyAbortAttributes{ref: ref}
}

func (a RulesActionFaultInjectionPolicyAbortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a RulesActionFaultInjectionPolicyAbortAttributes) HttpStatus() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("http_status"))
}

func (a RulesActionFaultInjectionPolicyAbortAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("percentage"))
}

type RulesActionFaultInjectionPolicyDelayAttributes struct {
	ref terra.Reference
}

func (d RulesActionFaultInjectionPolicyDelayAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d RulesActionFaultInjectionPolicyDelayAttributes) InternalWithRef(ref terra.Reference) RulesActionFaultInjectionPolicyDelayAttributes {
	return RulesActionFaultInjectionPolicyDelayAttributes{ref: ref}
}

func (d RulesActionFaultInjectionPolicyDelayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d RulesActionFaultInjectionPolicyDelayAttributes) FixedDelay() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("fixed_delay"))
}

func (d RulesActionFaultInjectionPolicyDelayAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("percentage"))
}

type RulesActionRedirectAttributes struct {
	ref terra.Reference
}

func (r RulesActionRedirectAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RulesActionRedirectAttributes) InternalWithRef(ref terra.Reference) RulesActionRedirectAttributes {
	return RulesActionRedirectAttributes{ref: ref}
}

func (r RulesActionRedirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RulesActionRedirectAttributes) HostRedirect() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("host_redirect"))
}

func (r RulesActionRedirectAttributes) HttpsRedirect() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("https_redirect"))
}

func (r RulesActionRedirectAttributes) PathRedirect() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("path_redirect"))
}

func (r RulesActionRedirectAttributes) PortRedirect() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("port_redirect"))
}

func (r RulesActionRedirectAttributes) PrefixRewrite() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("prefix_rewrite"))
}

func (r RulesActionRedirectAttributes) ResponseCode() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("response_code"))
}

func (r RulesActionRedirectAttributes) StripQuery() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("strip_query"))
}

type RulesActionRequestHeaderModifierAttributes struct {
	ref terra.Reference
}

func (rhm RulesActionRequestHeaderModifierAttributes) InternalRef() (terra.Reference, error) {
	return rhm.ref, nil
}

func (rhm RulesActionRequestHeaderModifierAttributes) InternalWithRef(ref terra.Reference) RulesActionRequestHeaderModifierAttributes {
	return RulesActionRequestHeaderModifierAttributes{ref: ref}
}

func (rhm RulesActionRequestHeaderModifierAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhm.ref.InternalTokens()
}

func (rhm RulesActionRequestHeaderModifierAttributes) Add() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rhm.ref.Append("add"))
}

func (rhm RulesActionRequestHeaderModifierAttributes) Remove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rhm.ref.Append("remove"))
}

func (rhm RulesActionRequestHeaderModifierAttributes) Set() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rhm.ref.Append("set"))
}

type RulesActionRequestMirrorPolicyAttributes struct {
	ref terra.Reference
}

func (rmp RulesActionRequestMirrorPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rmp.ref, nil
}

func (rmp RulesActionRequestMirrorPolicyAttributes) InternalWithRef(ref terra.Reference) RulesActionRequestMirrorPolicyAttributes {
	return RulesActionRequestMirrorPolicyAttributes{ref: ref}
}

func (rmp RulesActionRequestMirrorPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rmp.ref.InternalTokens()
}

func (rmp RulesActionRequestMirrorPolicyAttributes) Destination() terra.ListValue[RulesActionRequestMirrorPolicyDestinationAttributes] {
	return terra.ReferenceAsList[RulesActionRequestMirrorPolicyDestinationAttributes](rmp.ref.Append("destination"))
}

type RulesActionRequestMirrorPolicyDestinationAttributes struct {
	ref terra.Reference
}

func (d RulesActionRequestMirrorPolicyDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d RulesActionRequestMirrorPolicyDestinationAttributes) InternalWithRef(ref terra.Reference) RulesActionRequestMirrorPolicyDestinationAttributes {
	return RulesActionRequestMirrorPolicyDestinationAttributes{ref: ref}
}

func (d RulesActionRequestMirrorPolicyDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d RulesActionRequestMirrorPolicyDestinationAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("service_name"))
}

func (d RulesActionRequestMirrorPolicyDestinationAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("weight"))
}

type RulesActionResponseHeaderModifierAttributes struct {
	ref terra.Reference
}

func (rhm RulesActionResponseHeaderModifierAttributes) InternalRef() (terra.Reference, error) {
	return rhm.ref, nil
}

func (rhm RulesActionResponseHeaderModifierAttributes) InternalWithRef(ref terra.Reference) RulesActionResponseHeaderModifierAttributes {
	return RulesActionResponseHeaderModifierAttributes{ref: ref}
}

func (rhm RulesActionResponseHeaderModifierAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhm.ref.InternalTokens()
}

func (rhm RulesActionResponseHeaderModifierAttributes) Add() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rhm.ref.Append("add"))
}

func (rhm RulesActionResponseHeaderModifierAttributes) Remove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rhm.ref.Append("remove"))
}

func (rhm RulesActionResponseHeaderModifierAttributes) Set() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rhm.ref.Append("set"))
}

type RulesActionRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp RulesActionRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RulesActionRetryPolicyAttributes) InternalWithRef(ref terra.Reference) RulesActionRetryPolicyAttributes {
	return RulesActionRetryPolicyAttributes{ref: ref}
}

func (rp RulesActionRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RulesActionRetryPolicyAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("num_retries"))
}

func (rp RulesActionRetryPolicyAttributes) PerTryTimeout() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("per_try_timeout"))
}

func (rp RulesActionRetryPolicyAttributes) RetryConditions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rp.ref.Append("retry_conditions"))
}

type RulesActionUrlRewriteAttributes struct {
	ref terra.Reference
}

func (ur RulesActionUrlRewriteAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur RulesActionUrlRewriteAttributes) InternalWithRef(ref terra.Reference) RulesActionUrlRewriteAttributes {
	return RulesActionUrlRewriteAttributes{ref: ref}
}

func (ur RulesActionUrlRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur RulesActionUrlRewriteAttributes) HostRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_rewrite"))
}

func (ur RulesActionUrlRewriteAttributes) PathPrefixRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_prefix_rewrite"))
}

type RulesMatchesAttributes struct {
	ref terra.Reference
}

func (m RulesMatchesAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m RulesMatchesAttributes) InternalWithRef(ref terra.Reference) RulesMatchesAttributes {
	return RulesMatchesAttributes{ref: ref}
}

func (m RulesMatchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m RulesMatchesAttributes) FullPathMatch() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("full_path_match"))
}

func (m RulesMatchesAttributes) IgnoreCase() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("ignore_case"))
}

func (m RulesMatchesAttributes) PrefixMatch() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix_match"))
}

func (m RulesMatchesAttributes) RegexMatch() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("regex_match"))
}

func (m RulesMatchesAttributes) Headers() terra.ListValue[RulesMatchesHeadersAttributes] {
	return terra.ReferenceAsList[RulesMatchesHeadersAttributes](m.ref.Append("headers"))
}

func (m RulesMatchesAttributes) QueryParameters() terra.ListValue[RulesMatchesQueryParametersAttributes] {
	return terra.ReferenceAsList[RulesMatchesQueryParametersAttributes](m.ref.Append("query_parameters"))
}

type RulesMatchesHeadersAttributes struct {
	ref terra.Reference
}

func (h RulesMatchesHeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h RulesMatchesHeadersAttributes) InternalWithRef(ref terra.Reference) RulesMatchesHeadersAttributes {
	return RulesMatchesHeadersAttributes{ref: ref}
}

func (h RulesMatchesHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h RulesMatchesHeadersAttributes) ExactMatch() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("exact_match"))
}

func (h RulesMatchesHeadersAttributes) Header() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("header"))
}

func (h RulesMatchesHeadersAttributes) InvertMatch() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("invert_match"))
}

func (h RulesMatchesHeadersAttributes) PrefixMatch() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("prefix_match"))
}

func (h RulesMatchesHeadersAttributes) PresentMatch() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("present_match"))
}

func (h RulesMatchesHeadersAttributes) RegexMatch() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("regex_match"))
}

func (h RulesMatchesHeadersAttributes) SuffixMatch() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("suffix_match"))
}

func (h RulesMatchesHeadersAttributes) RangeMatch() terra.ListValue[RulesMatchesHeadersRangeMatchAttributes] {
	return terra.ReferenceAsList[RulesMatchesHeadersRangeMatchAttributes](h.ref.Append("range_match"))
}

type RulesMatchesHeadersRangeMatchAttributes struct {
	ref terra.Reference
}

func (rm RulesMatchesHeadersRangeMatchAttributes) InternalRef() (terra.Reference, error) {
	return rm.ref, nil
}

func (rm RulesMatchesHeadersRangeMatchAttributes) InternalWithRef(ref terra.Reference) RulesMatchesHeadersRangeMatchAttributes {
	return RulesMatchesHeadersRangeMatchAttributes{ref: ref}
}

func (rm RulesMatchesHeadersRangeMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rm.ref.InternalTokens()
}

func (rm RulesMatchesHeadersRangeMatchAttributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(rm.ref.Append("end"))
}

func (rm RulesMatchesHeadersRangeMatchAttributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(rm.ref.Append("start"))
}

type RulesMatchesQueryParametersAttributes struct {
	ref terra.Reference
}

func (qp RulesMatchesQueryParametersAttributes) InternalRef() (terra.Reference, error) {
	return qp.ref, nil
}

func (qp RulesMatchesQueryParametersAttributes) InternalWithRef(ref terra.Reference) RulesMatchesQueryParametersAttributes {
	return RulesMatchesQueryParametersAttributes{ref: ref}
}

func (qp RulesMatchesQueryParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qp.ref.InternalTokens()
}

func (qp RulesMatchesQueryParametersAttributes) ExactMatch() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("exact_match"))
}

func (qp RulesMatchesQueryParametersAttributes) PresentMatch() terra.BoolValue {
	return terra.ReferenceAsBool(qp.ref.Append("present_match"))
}

func (qp RulesMatchesQueryParametersAttributes) QueryParameter() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("query_parameter"))
}

func (qp RulesMatchesQueryParametersAttributes) RegexMatch() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("regex_match"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RulesState struct {
	Action  []RulesActionState  `json:"action"`
	Matches []RulesMatchesState `json:"matches"`
}

type RulesActionState struct {
	Timeout                string                                   `json:"timeout"`
	CorsPolicy             []RulesActionCorsPolicyState             `json:"cors_policy"`
	Destinations           []RulesActionDestinationsState           `json:"destinations"`
	FaultInjectionPolicy   []RulesActionFaultInjectionPolicyState   `json:"fault_injection_policy"`
	Redirect               []RulesActionRedirectState               `json:"redirect"`
	RequestHeaderModifier  []RulesActionRequestHeaderModifierState  `json:"request_header_modifier"`
	RequestMirrorPolicy    []RulesActionRequestMirrorPolicyState    `json:"request_mirror_policy"`
	ResponseHeaderModifier []RulesActionResponseHeaderModifierState `json:"response_header_modifier"`
	RetryPolicy            []RulesActionRetryPolicyState            `json:"retry_policy"`
	UrlRewrite             []RulesActionUrlRewriteState             `json:"url_rewrite"`
}

type RulesActionCorsPolicyState struct {
	AllowCredentials   bool     `json:"allow_credentials"`
	AllowHeaders       []string `json:"allow_headers"`
	AllowMethods       []string `json:"allow_methods"`
	AllowOriginRegexes []string `json:"allow_origin_regexes"`
	AllowOrigins       []string `json:"allow_origins"`
	Disabled           bool     `json:"disabled"`
	ExposeHeaders      []string `json:"expose_headers"`
	MaxAge             string   `json:"max_age"`
}

type RulesActionDestinationsState struct {
	ServiceName string  `json:"service_name"`
	Weight      float64 `json:"weight"`
}

type RulesActionFaultInjectionPolicyState struct {
	Abort []RulesActionFaultInjectionPolicyAbortState `json:"abort"`
	Delay []RulesActionFaultInjectionPolicyDelayState `json:"delay"`
}

type RulesActionFaultInjectionPolicyAbortState struct {
	HttpStatus float64 `json:"http_status"`
	Percentage float64 `json:"percentage"`
}

type RulesActionFaultInjectionPolicyDelayState struct {
	FixedDelay string  `json:"fixed_delay"`
	Percentage float64 `json:"percentage"`
}

type RulesActionRedirectState struct {
	HostRedirect  string  `json:"host_redirect"`
	HttpsRedirect bool    `json:"https_redirect"`
	PathRedirect  string  `json:"path_redirect"`
	PortRedirect  float64 `json:"port_redirect"`
	PrefixRewrite string  `json:"prefix_rewrite"`
	ResponseCode  string  `json:"response_code"`
	StripQuery    bool    `json:"strip_query"`
}

type RulesActionRequestHeaderModifierState struct {
	Add    map[string]string `json:"add"`
	Remove []string          `json:"remove"`
	Set    map[string]string `json:"set"`
}

type RulesActionRequestMirrorPolicyState struct {
	Destination []RulesActionRequestMirrorPolicyDestinationState `json:"destination"`
}

type RulesActionRequestMirrorPolicyDestinationState struct {
	ServiceName string  `json:"service_name"`
	Weight      float64 `json:"weight"`
}

type RulesActionResponseHeaderModifierState struct {
	Add    map[string]string `json:"add"`
	Remove []string          `json:"remove"`
	Set    map[string]string `json:"set"`
}

type RulesActionRetryPolicyState struct {
	NumRetries      float64  `json:"num_retries"`
	PerTryTimeout   string   `json:"per_try_timeout"`
	RetryConditions []string `json:"retry_conditions"`
}

type RulesActionUrlRewriteState struct {
	HostRewrite       string `json:"host_rewrite"`
	PathPrefixRewrite string `json:"path_prefix_rewrite"`
}

type RulesMatchesState struct {
	FullPathMatch   string                             `json:"full_path_match"`
	IgnoreCase      bool                               `json:"ignore_case"`
	PrefixMatch     string                             `json:"prefix_match"`
	RegexMatch      string                             `json:"regex_match"`
	Headers         []RulesMatchesHeadersState         `json:"headers"`
	QueryParameters []RulesMatchesQueryParametersState `json:"query_parameters"`
}

type RulesMatchesHeadersState struct {
	ExactMatch   string                               `json:"exact_match"`
	Header       string                               `json:"header"`
	InvertMatch  bool                                 `json:"invert_match"`
	PrefixMatch  string                               `json:"prefix_match"`
	PresentMatch bool                                 `json:"present_match"`
	RegexMatch   string                               `json:"regex_match"`
	SuffixMatch  string                               `json:"suffix_match"`
	RangeMatch   []RulesMatchesHeadersRangeMatchState `json:"range_match"`
}

type RulesMatchesHeadersRangeMatchState struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type RulesMatchesQueryParametersState struct {
	ExactMatch     string `json:"exact_match"`
	PresentMatch   bool   `json:"present_match"`
	QueryParameter string `json:"query_parameter"`
	RegexMatch     string `json:"regex_match"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
