// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_resource_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataDiskConsistencyGroupPolicyAttributes struct {
	ref terra.Reference
}

func (dcgp DataDiskConsistencyGroupPolicyAttributes) InternalRef() (terra.Reference, error) {
	return dcgp.ref, nil
}

func (dcgp DataDiskConsistencyGroupPolicyAttributes) InternalWithRef(ref terra.Reference) DataDiskConsistencyGroupPolicyAttributes {
	return DataDiskConsistencyGroupPolicyAttributes{ref: ref}
}

func (dcgp DataDiskConsistencyGroupPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcgp.ref.InternalTokens()
}

func (dcgp DataDiskConsistencyGroupPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dcgp.ref.Append("enabled"))
}

type DataGroupPlacementPolicyAttributes struct {
	ref terra.Reference
}

func (gpp DataGroupPlacementPolicyAttributes) InternalRef() (terra.Reference, error) {
	return gpp.ref, nil
}

func (gpp DataGroupPlacementPolicyAttributes) InternalWithRef(ref terra.Reference) DataGroupPlacementPolicyAttributes {
	return DataGroupPlacementPolicyAttributes{ref: ref}
}

func (gpp DataGroupPlacementPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gpp.ref.InternalTokens()
}

func (gpp DataGroupPlacementPolicyAttributes) AvailabilityDomainCount() terra.NumberValue {
	return terra.ReferenceAsNumber(gpp.ref.Append("availability_domain_count"))
}

func (gpp DataGroupPlacementPolicyAttributes) Collocation() terra.StringValue {
	return terra.ReferenceAsString(gpp.ref.Append("collocation"))
}

func (gpp DataGroupPlacementPolicyAttributes) MaxDistance() terra.NumberValue {
	return terra.ReferenceAsNumber(gpp.ref.Append("max_distance"))
}

func (gpp DataGroupPlacementPolicyAttributes) VmCount() terra.NumberValue {
	return terra.ReferenceAsNumber(gpp.ref.Append("vm_count"))
}

type DataInstanceSchedulePolicyAttributes struct {
	ref terra.Reference
}

func (isp DataInstanceSchedulePolicyAttributes) InternalRef() (terra.Reference, error) {
	return isp.ref, nil
}

func (isp DataInstanceSchedulePolicyAttributes) InternalWithRef(ref terra.Reference) DataInstanceSchedulePolicyAttributes {
	return DataInstanceSchedulePolicyAttributes{ref: ref}
}

func (isp DataInstanceSchedulePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return isp.ref.InternalTokens()
}

func (isp DataInstanceSchedulePolicyAttributes) ExpirationTime() terra.StringValue {
	return terra.ReferenceAsString(isp.ref.Append("expiration_time"))
}

func (isp DataInstanceSchedulePolicyAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(isp.ref.Append("start_time"))
}

func (isp DataInstanceSchedulePolicyAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(isp.ref.Append("time_zone"))
}

func (isp DataInstanceSchedulePolicyAttributes) VmStartSchedule() terra.ListValue[DataInstanceSchedulePolicyVmStartScheduleAttributes] {
	return terra.ReferenceAsList[DataInstanceSchedulePolicyVmStartScheduleAttributes](isp.ref.Append("vm_start_schedule"))
}

func (isp DataInstanceSchedulePolicyAttributes) VmStopSchedule() terra.ListValue[DataInstanceSchedulePolicyVmStopScheduleAttributes] {
	return terra.ReferenceAsList[DataInstanceSchedulePolicyVmStopScheduleAttributes](isp.ref.Append("vm_stop_schedule"))
}

type DataInstanceSchedulePolicyVmStartScheduleAttributes struct {
	ref terra.Reference
}

func (vss DataInstanceSchedulePolicyVmStartScheduleAttributes) InternalRef() (terra.Reference, error) {
	return vss.ref, nil
}

func (vss DataInstanceSchedulePolicyVmStartScheduleAttributes) InternalWithRef(ref terra.Reference) DataInstanceSchedulePolicyVmStartScheduleAttributes {
	return DataInstanceSchedulePolicyVmStartScheduleAttributes{ref: ref}
}

func (vss DataInstanceSchedulePolicyVmStartScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vss.ref.InternalTokens()
}

func (vss DataInstanceSchedulePolicyVmStartScheduleAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(vss.ref.Append("schedule"))
}

type DataInstanceSchedulePolicyVmStopScheduleAttributes struct {
	ref terra.Reference
}

func (vss DataInstanceSchedulePolicyVmStopScheduleAttributes) InternalRef() (terra.Reference, error) {
	return vss.ref, nil
}

func (vss DataInstanceSchedulePolicyVmStopScheduleAttributes) InternalWithRef(ref terra.Reference) DataInstanceSchedulePolicyVmStopScheduleAttributes {
	return DataInstanceSchedulePolicyVmStopScheduleAttributes{ref: ref}
}

func (vss DataInstanceSchedulePolicyVmStopScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vss.ref.InternalTokens()
}

func (vss DataInstanceSchedulePolicyVmStopScheduleAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(vss.ref.Append("schedule"))
}

type DataSnapshotSchedulePolicyAttributes struct {
	ref terra.Reference
}

func (ssp DataSnapshotSchedulePolicyAttributes) InternalRef() (terra.Reference, error) {
	return ssp.ref, nil
}

func (ssp DataSnapshotSchedulePolicyAttributes) InternalWithRef(ref terra.Reference) DataSnapshotSchedulePolicyAttributes {
	return DataSnapshotSchedulePolicyAttributes{ref: ref}
}

func (ssp DataSnapshotSchedulePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssp.ref.InternalTokens()
}

func (ssp DataSnapshotSchedulePolicyAttributes) RetentionPolicy() terra.ListValue[DataSnapshotSchedulePolicyRetentionPolicyAttributes] {
	return terra.ReferenceAsList[DataSnapshotSchedulePolicyRetentionPolicyAttributes](ssp.ref.Append("retention_policy"))
}

func (ssp DataSnapshotSchedulePolicyAttributes) Schedule() terra.ListValue[DataSnapshotSchedulePolicyScheduleAttributes] {
	return terra.ReferenceAsList[DataSnapshotSchedulePolicyScheduleAttributes](ssp.ref.Append("schedule"))
}

func (ssp DataSnapshotSchedulePolicyAttributes) SnapshotProperties() terra.ListValue[DataSnapshotSchedulePolicySnapshotPropertiesAttributes] {
	return terra.ReferenceAsList[DataSnapshotSchedulePolicySnapshotPropertiesAttributes](ssp.ref.Append("snapshot_properties"))
}

type DataSnapshotSchedulePolicyRetentionPolicyAttributes struct {
	ref terra.Reference
}

func (rp DataSnapshotSchedulePolicyRetentionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp DataSnapshotSchedulePolicyRetentionPolicyAttributes) InternalWithRef(ref terra.Reference) DataSnapshotSchedulePolicyRetentionPolicyAttributes {
	return DataSnapshotSchedulePolicyRetentionPolicyAttributes{ref: ref}
}

func (rp DataSnapshotSchedulePolicyRetentionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp DataSnapshotSchedulePolicyRetentionPolicyAttributes) MaxRetentionDays() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("max_retention_days"))
}

func (rp DataSnapshotSchedulePolicyRetentionPolicyAttributes) OnSourceDiskDelete() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("on_source_disk_delete"))
}

type DataSnapshotSchedulePolicyScheduleAttributes struct {
	ref terra.Reference
}

func (s DataSnapshotSchedulePolicyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataSnapshotSchedulePolicyScheduleAttributes) InternalWithRef(ref terra.Reference) DataSnapshotSchedulePolicyScheduleAttributes {
	return DataSnapshotSchedulePolicyScheduleAttributes{ref: ref}
}

func (s DataSnapshotSchedulePolicyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataSnapshotSchedulePolicyScheduleAttributes) DailySchedule() terra.ListValue[DataSnapshotSchedulePolicyScheduleDailyScheduleAttributes] {
	return terra.ReferenceAsList[DataSnapshotSchedulePolicyScheduleDailyScheduleAttributes](s.ref.Append("daily_schedule"))
}

func (s DataSnapshotSchedulePolicyScheduleAttributes) HourlySchedule() terra.ListValue[DataSnapshotSchedulePolicyScheduleHourlyScheduleAttributes] {
	return terra.ReferenceAsList[DataSnapshotSchedulePolicyScheduleHourlyScheduleAttributes](s.ref.Append("hourly_schedule"))
}

func (s DataSnapshotSchedulePolicyScheduleAttributes) WeeklySchedule() terra.ListValue[DataSnapshotSchedulePolicyScheduleWeeklyScheduleAttributes] {
	return terra.ReferenceAsList[DataSnapshotSchedulePolicyScheduleWeeklyScheduleAttributes](s.ref.Append("weekly_schedule"))
}

type DataSnapshotSchedulePolicyScheduleDailyScheduleAttributes struct {
	ref terra.Reference
}

func (ds DataSnapshotSchedulePolicyScheduleDailyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DataSnapshotSchedulePolicyScheduleDailyScheduleAttributes) InternalWithRef(ref terra.Reference) DataSnapshotSchedulePolicyScheduleDailyScheduleAttributes {
	return DataSnapshotSchedulePolicyScheduleDailyScheduleAttributes{ref: ref}
}

func (ds DataSnapshotSchedulePolicyScheduleDailyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DataSnapshotSchedulePolicyScheduleDailyScheduleAttributes) DaysInCycle() terra.NumberValue {
	return terra.ReferenceAsNumber(ds.ref.Append("days_in_cycle"))
}

func (ds DataSnapshotSchedulePolicyScheduleDailyScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("start_time"))
}

type DataSnapshotSchedulePolicyScheduleHourlyScheduleAttributes struct {
	ref terra.Reference
}

func (hs DataSnapshotSchedulePolicyScheduleHourlyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return hs.ref, nil
}

func (hs DataSnapshotSchedulePolicyScheduleHourlyScheduleAttributes) InternalWithRef(ref terra.Reference) DataSnapshotSchedulePolicyScheduleHourlyScheduleAttributes {
	return DataSnapshotSchedulePolicyScheduleHourlyScheduleAttributes{ref: ref}
}

func (hs DataSnapshotSchedulePolicyScheduleHourlyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hs.ref.InternalTokens()
}

func (hs DataSnapshotSchedulePolicyScheduleHourlyScheduleAttributes) HoursInCycle() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("hours_in_cycle"))
}

func (hs DataSnapshotSchedulePolicyScheduleHourlyScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("start_time"))
}

type DataSnapshotSchedulePolicyScheduleWeeklyScheduleAttributes struct {
	ref terra.Reference
}

func (ws DataSnapshotSchedulePolicyScheduleWeeklyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ws.ref, nil
}

func (ws DataSnapshotSchedulePolicyScheduleWeeklyScheduleAttributes) InternalWithRef(ref terra.Reference) DataSnapshotSchedulePolicyScheduleWeeklyScheduleAttributes {
	return DataSnapshotSchedulePolicyScheduleWeeklyScheduleAttributes{ref: ref}
}

func (ws DataSnapshotSchedulePolicyScheduleWeeklyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ws.ref.InternalTokens()
}

func (ws DataSnapshotSchedulePolicyScheduleWeeklyScheduleAttributes) DayOfWeeks() terra.SetValue[DataSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes] {
	return terra.ReferenceAsSet[DataSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes](ws.ref.Append("day_of_weeks"))
}

type DataSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes struct {
	ref terra.Reference
}

func (dow DataSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes) InternalRef() (terra.Reference, error) {
	return dow.ref, nil
}

func (dow DataSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes) InternalWithRef(ref terra.Reference) DataSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes {
	return DataSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes{ref: ref}
}

func (dow DataSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dow.ref.InternalTokens()
}

func (dow DataSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes) Day() terra.StringValue {
	return terra.ReferenceAsString(dow.ref.Append("day"))
}

func (dow DataSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(dow.ref.Append("start_time"))
}

type DataSnapshotSchedulePolicySnapshotPropertiesAttributes struct {
	ref terra.Reference
}

func (sp DataSnapshotSchedulePolicySnapshotPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp DataSnapshotSchedulePolicySnapshotPropertiesAttributes) InternalWithRef(ref terra.Reference) DataSnapshotSchedulePolicySnapshotPropertiesAttributes {
	return DataSnapshotSchedulePolicySnapshotPropertiesAttributes{ref: ref}
}

func (sp DataSnapshotSchedulePolicySnapshotPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp DataSnapshotSchedulePolicySnapshotPropertiesAttributes) ChainName() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("chain_name"))
}

func (sp DataSnapshotSchedulePolicySnapshotPropertiesAttributes) GuestFlush() terra.BoolValue {
	return terra.ReferenceAsBool(sp.ref.Append("guest_flush"))
}

func (sp DataSnapshotSchedulePolicySnapshotPropertiesAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sp.ref.Append("labels"))
}

func (sp DataSnapshotSchedulePolicySnapshotPropertiesAttributes) StorageLocations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sp.ref.Append("storage_locations"))
}

type DataDiskConsistencyGroupPolicyState struct {
	Enabled bool `json:"enabled"`
}

type DataGroupPlacementPolicyState struct {
	AvailabilityDomainCount float64 `json:"availability_domain_count"`
	Collocation             string  `json:"collocation"`
	MaxDistance             float64 `json:"max_distance"`
	VmCount                 float64 `json:"vm_count"`
}

type DataInstanceSchedulePolicyState struct {
	ExpirationTime  string                                           `json:"expiration_time"`
	StartTime       string                                           `json:"start_time"`
	TimeZone        string                                           `json:"time_zone"`
	VmStartSchedule []DataInstanceSchedulePolicyVmStartScheduleState `json:"vm_start_schedule"`
	VmStopSchedule  []DataInstanceSchedulePolicyVmStopScheduleState  `json:"vm_stop_schedule"`
}

type DataInstanceSchedulePolicyVmStartScheduleState struct {
	Schedule string `json:"schedule"`
}

type DataInstanceSchedulePolicyVmStopScheduleState struct {
	Schedule string `json:"schedule"`
}

type DataSnapshotSchedulePolicyState struct {
	RetentionPolicy    []DataSnapshotSchedulePolicyRetentionPolicyState    `json:"retention_policy"`
	Schedule           []DataSnapshotSchedulePolicyScheduleState           `json:"schedule"`
	SnapshotProperties []DataSnapshotSchedulePolicySnapshotPropertiesState `json:"snapshot_properties"`
}

type DataSnapshotSchedulePolicyRetentionPolicyState struct {
	MaxRetentionDays   float64 `json:"max_retention_days"`
	OnSourceDiskDelete string  `json:"on_source_disk_delete"`
}

type DataSnapshotSchedulePolicyScheduleState struct {
	DailySchedule  []DataSnapshotSchedulePolicyScheduleDailyScheduleState  `json:"daily_schedule"`
	HourlySchedule []DataSnapshotSchedulePolicyScheduleHourlyScheduleState `json:"hourly_schedule"`
	WeeklySchedule []DataSnapshotSchedulePolicyScheduleWeeklyScheduleState `json:"weekly_schedule"`
}

type DataSnapshotSchedulePolicyScheduleDailyScheduleState struct {
	DaysInCycle float64 `json:"days_in_cycle"`
	StartTime   string  `json:"start_time"`
}

type DataSnapshotSchedulePolicyScheduleHourlyScheduleState struct {
	HoursInCycle float64 `json:"hours_in_cycle"`
	StartTime    string  `json:"start_time"`
}

type DataSnapshotSchedulePolicyScheduleWeeklyScheduleState struct {
	DayOfWeeks []DataSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksState `json:"day_of_weeks"`
}

type DataSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksState struct {
	Day       string `json:"day"`
	StartTime string `json:"start_time"`
}

type DataSnapshotSchedulePolicySnapshotPropertiesState struct {
	ChainName        string            `json:"chain_name"`
	GuestFlush       bool              `json:"guest_flush"`
	Labels           map[string]string `json:"labels"`
	StorageLocations []string          `json:"storage_locations"`
}
