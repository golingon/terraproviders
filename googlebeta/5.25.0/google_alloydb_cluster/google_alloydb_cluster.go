// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_alloydb_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_alloydb_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *googleAlloydbClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gac *Resource) Type() string {
	return "google_alloydb_cluster"
}

// LocalName returns the local name for [Resource].
func (gac *Resource) LocalName() string {
	return gac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gac *Resource) Configuration() interface{} {
	return gac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gac *Resource) Dependencies() terra.Dependencies {
	return gac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gac *Resource) LifecycleManagement() *terra.Lifecycle {
	return gac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gac *Resource) Attributes() googleAlloydbClusterAttributes {
	return googleAlloydbClusterAttributes{ref: terra.ReferenceResource(gac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gac *Resource) ImportState(state io.Reader) error {
	gac.state = &googleAlloydbClusterState{}
	if err := json.NewDecoder(state).Decode(gac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gac.Type(), gac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gac *Resource) State() (*googleAlloydbClusterState, bool) {
	return gac.state, gac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gac *Resource) StateMust() *googleAlloydbClusterState {
	if gac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gac.Type(), gac.LocalName()))
	}
	return gac.state
}

// Args contains the configurations for google_alloydb_cluster.
type Args struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// ClusterType: string, optional
	ClusterType terra.StringValue `hcl:"cluster_type,attr"`
	// DatabaseVersion: string, optional
	DatabaseVersion terra.StringValue `hcl:"database_version,attr"`
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Etag: string, optional
	Etag terra.StringValue `hcl:"etag,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// AutomatedBackupPolicy: optional
	AutomatedBackupPolicy *AutomatedBackupPolicy `hcl:"automated_backup_policy,block"`
	// ContinuousBackupConfig: optional
	ContinuousBackupConfig *ContinuousBackupConfig `hcl:"continuous_backup_config,block"`
	// EncryptionConfig: optional
	EncryptionConfig *EncryptionConfig `hcl:"encryption_config,block"`
	// InitialUser: optional
	InitialUser *InitialUser `hcl:"initial_user,block"`
	// NetworkConfig: optional
	NetworkConfig *NetworkConfig `hcl:"network_config,block"`
	// RestoreBackupSource: optional
	RestoreBackupSource *RestoreBackupSource `hcl:"restore_backup_source,block"`
	// RestoreContinuousBackupSource: optional
	RestoreContinuousBackupSource *RestoreContinuousBackupSource `hcl:"restore_continuous_backup_source,block"`
	// SecondaryConfig: optional
	SecondaryConfig *SecondaryConfig `hcl:"secondary_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleAlloydbClusterAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gac.ref.Append("annotations"))
}

// ClusterId returns a reference to field cluster_id of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("cluster_id"))
}

// ClusterType returns a reference to field cluster_type of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) ClusterType() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("cluster_type"))
}

// DatabaseVersion returns a reference to field database_version of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) DatabaseVersion() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("database_version"))
}

// DeletionPolicy returns a reference to field deletion_policy of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("deletion_policy"))
}

// DisplayName returns a reference to field display_name of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("display_name"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gac.ref.Append("effective_annotations"))
}

// EffectiveLabels returns a reference to field effective_labels of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gac.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("etag"))
}

// Id returns a reference to field id of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("id"))
}

// Labels returns a reference to field labels of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gac.ref.Append("labels"))
}

// Location returns a reference to field location of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("location"))
}

// Name returns a reference to field name of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("name"))
}

// Network returns a reference to field network of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("network"))
}

// Project returns a reference to field project of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("project"))
}

// Reconciling returns a reference to field reconciling of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceAsBool(gac.ref.Append("reconciling"))
}

// State returns a reference to field state of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gac.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_alloydb_cluster.
func (gac googleAlloydbClusterAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("uid"))
}

func (gac googleAlloydbClusterAttributes) BackupSource() terra.ListValue[BackupSourceAttributes] {
	return terra.ReferenceAsList[BackupSourceAttributes](gac.ref.Append("backup_source"))
}

func (gac googleAlloydbClusterAttributes) ContinuousBackupInfo() terra.ListValue[ContinuousBackupInfoAttributes] {
	return terra.ReferenceAsList[ContinuousBackupInfoAttributes](gac.ref.Append("continuous_backup_info"))
}

func (gac googleAlloydbClusterAttributes) EncryptionInfo() terra.ListValue[EncryptionInfoAttributes] {
	return terra.ReferenceAsList[EncryptionInfoAttributes](gac.ref.Append("encryption_info"))
}

func (gac googleAlloydbClusterAttributes) MigrationSource() terra.ListValue[MigrationSourceAttributes] {
	return terra.ReferenceAsList[MigrationSourceAttributes](gac.ref.Append("migration_source"))
}

func (gac googleAlloydbClusterAttributes) AutomatedBackupPolicy() terra.ListValue[AutomatedBackupPolicyAttributes] {
	return terra.ReferenceAsList[AutomatedBackupPolicyAttributes](gac.ref.Append("automated_backup_policy"))
}

func (gac googleAlloydbClusterAttributes) ContinuousBackupConfig() terra.ListValue[ContinuousBackupConfigAttributes] {
	return terra.ReferenceAsList[ContinuousBackupConfigAttributes](gac.ref.Append("continuous_backup_config"))
}

func (gac googleAlloydbClusterAttributes) EncryptionConfig() terra.ListValue[EncryptionConfigAttributes] {
	return terra.ReferenceAsList[EncryptionConfigAttributes](gac.ref.Append("encryption_config"))
}

func (gac googleAlloydbClusterAttributes) InitialUser() terra.ListValue[InitialUserAttributes] {
	return terra.ReferenceAsList[InitialUserAttributes](gac.ref.Append("initial_user"))
}

func (gac googleAlloydbClusterAttributes) NetworkConfig() terra.ListValue[NetworkConfigAttributes] {
	return terra.ReferenceAsList[NetworkConfigAttributes](gac.ref.Append("network_config"))
}

func (gac googleAlloydbClusterAttributes) RestoreBackupSource() terra.ListValue[RestoreBackupSourceAttributes] {
	return terra.ReferenceAsList[RestoreBackupSourceAttributes](gac.ref.Append("restore_backup_source"))
}

func (gac googleAlloydbClusterAttributes) RestoreContinuousBackupSource() terra.ListValue[RestoreContinuousBackupSourceAttributes] {
	return terra.ReferenceAsList[RestoreContinuousBackupSourceAttributes](gac.ref.Append("restore_continuous_backup_source"))
}

func (gac googleAlloydbClusterAttributes) SecondaryConfig() terra.ListValue[SecondaryConfigAttributes] {
	return terra.ReferenceAsList[SecondaryConfigAttributes](gac.ref.Append("secondary_config"))
}

func (gac googleAlloydbClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gac.ref.Append("timeouts"))
}

type googleAlloydbClusterState struct {
	Annotations                   map[string]string                    `json:"annotations"`
	ClusterId                     string                               `json:"cluster_id"`
	ClusterType                   string                               `json:"cluster_type"`
	DatabaseVersion               string                               `json:"database_version"`
	DeletionPolicy                string                               `json:"deletion_policy"`
	DisplayName                   string                               `json:"display_name"`
	EffectiveAnnotations          map[string]string                    `json:"effective_annotations"`
	EffectiveLabels               map[string]string                    `json:"effective_labels"`
	Etag                          string                               `json:"etag"`
	Id                            string                               `json:"id"`
	Labels                        map[string]string                    `json:"labels"`
	Location                      string                               `json:"location"`
	Name                          string                               `json:"name"`
	Network                       string                               `json:"network"`
	Project                       string                               `json:"project"`
	Reconciling                   bool                                 `json:"reconciling"`
	State                         string                               `json:"state"`
	TerraformLabels               map[string]string                    `json:"terraform_labels"`
	Uid                           string                               `json:"uid"`
	BackupSource                  []BackupSourceState                  `json:"backup_source"`
	ContinuousBackupInfo          []ContinuousBackupInfoState          `json:"continuous_backup_info"`
	EncryptionInfo                []EncryptionInfoState                `json:"encryption_info"`
	MigrationSource               []MigrationSourceState               `json:"migration_source"`
	AutomatedBackupPolicy         []AutomatedBackupPolicyState         `json:"automated_backup_policy"`
	ContinuousBackupConfig        []ContinuousBackupConfigState        `json:"continuous_backup_config"`
	EncryptionConfig              []EncryptionConfigState              `json:"encryption_config"`
	InitialUser                   []InitialUserState                   `json:"initial_user"`
	NetworkConfig                 []NetworkConfigState                 `json:"network_config"`
	RestoreBackupSource           []RestoreBackupSourceState           `json:"restore_backup_source"`
	RestoreContinuousBackupSource []RestoreContinuousBackupSourceState `json:"restore_continuous_backup_source"`
	SecondaryConfig               []SecondaryConfigState               `json:"secondary_config"`
	Timeouts                      *TimeoutsState                       `json:"timeouts"`
}
