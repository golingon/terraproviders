// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataproc_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ClusterConfig struct {
	// StagingBucket: string, optional
	StagingBucket terra.StringValue `hcl:"staging_bucket,attr"`
	// TempBucket: string, optional
	TempBucket terra.StringValue `hcl:"temp_bucket,attr"`
	// ClusterConfigAutoscalingConfig: optional
	AutoscalingConfig *ClusterConfigAutoscalingConfig `hcl:"autoscaling_config,block"`
	// ClusterConfigAuxiliaryNodeGroups: min=0
	AuxiliaryNodeGroups []ClusterConfigAuxiliaryNodeGroups `hcl:"auxiliary_node_groups,block" validate:"min=0"`
	// ClusterConfigDataprocMetricConfig: optional
	DataprocMetricConfig *ClusterConfigDataprocMetricConfig `hcl:"dataproc_metric_config,block"`
	// ClusterConfigEncryptionConfig: optional
	EncryptionConfig *ClusterConfigEncryptionConfig `hcl:"encryption_config,block"`
	// ClusterConfigEndpointConfig: optional
	EndpointConfig *ClusterConfigEndpointConfig `hcl:"endpoint_config,block"`
	// ClusterConfigGceClusterConfig: optional
	GceClusterConfig *ClusterConfigGceClusterConfig `hcl:"gce_cluster_config,block"`
	// ClusterConfigInitializationAction: min=0
	InitializationAction []ClusterConfigInitializationAction `hcl:"initialization_action,block" validate:"min=0"`
	// ClusterConfigLifecycleConfig: optional
	LifecycleConfig *ClusterConfigLifecycleConfig `hcl:"lifecycle_config,block"`
	// ClusterConfigMasterConfig: optional
	MasterConfig *ClusterConfigMasterConfig `hcl:"master_config,block"`
	// ClusterConfigMetastoreConfig: optional
	MetastoreConfig *ClusterConfigMetastoreConfig `hcl:"metastore_config,block"`
	// ClusterConfigPreemptibleWorkerConfig: optional
	PreemptibleWorkerConfig *ClusterConfigPreemptibleWorkerConfig `hcl:"preemptible_worker_config,block"`
	// ClusterConfigSecurityConfig: optional
	SecurityConfig *ClusterConfigSecurityConfig `hcl:"security_config,block"`
	// ClusterConfigSoftwareConfig: optional
	SoftwareConfig *ClusterConfigSoftwareConfig `hcl:"software_config,block"`
	// ClusterConfigWorkerConfig: optional
	WorkerConfig *ClusterConfigWorkerConfig `hcl:"worker_config,block"`
}

type ClusterConfigAutoscalingConfig struct {
	// PolicyUri: string, required
	PolicyUri terra.StringValue `hcl:"policy_uri,attr" validate:"required"`
}

type ClusterConfigAuxiliaryNodeGroups struct {
	// NodeGroupId: string, optional
	NodeGroupId terra.StringValue `hcl:"node_group_id,attr"`
	// ClusterConfigAuxiliaryNodeGroupsNodeGroup: min=1
	NodeGroup []ClusterConfigAuxiliaryNodeGroupsNodeGroup `hcl:"node_group,block" validate:"min=1"`
}

type ClusterConfigAuxiliaryNodeGroupsNodeGroup struct {
	// Roles: list of string, required
	Roles terra.ListValue[terra.StringValue] `hcl:"roles,attr" validate:"required"`
	// ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfig: optional
	NodeGroupConfig *ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfig `hcl:"node_group_config,block"`
}

type ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfig struct {
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NumInstances: number, optional
	NumInstances terra.NumberValue `hcl:"num_instances,attr"`
	// ClusterConfigAuxiliaryNodeGroups5Cb8513C: min=0
	Accelerators []ClusterConfigAuxiliaryNodeGroups5Cb8513C `hcl:"accelerators,block" validate:"min=0"`
	// ClusterConfigAuxiliaryNodeGroupsBc9Adbc6: optional
	DiskConfig *ClusterConfigAuxiliaryNodeGroupsBc9Adbc6 `hcl:"disk_config,block"`
}

type ClusterConfigAuxiliaryNodeGroups5Cb8513C struct {
	// AcceleratorCount: number, required
	AcceleratorCount terra.NumberValue `hcl:"accelerator_count,attr" validate:"required"`
	// AcceleratorType: string, required
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr" validate:"required"`
}

type ClusterConfigAuxiliaryNodeGroupsBc9Adbc6 struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// BootDiskType: string, optional
	BootDiskType terra.StringValue `hcl:"boot_disk_type,attr"`
	// NumLocalSsds: number, optional
	NumLocalSsds terra.NumberValue `hcl:"num_local_ssds,attr"`
}

type ClusterConfigDataprocMetricConfig struct {
	// ClusterConfigDataprocMetricConfigMetrics: min=1
	Metrics []ClusterConfigDataprocMetricConfigMetrics `hcl:"metrics,block" validate:"min=1"`
}

type ClusterConfigDataprocMetricConfigMetrics struct {
	// MetricOverrides: set of string, optional
	MetricOverrides terra.SetValue[terra.StringValue] `hcl:"metric_overrides,attr"`
	// MetricSource: string, required
	MetricSource terra.StringValue `hcl:"metric_source,attr" validate:"required"`
}

type ClusterConfigEncryptionConfig struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type ClusterConfigEndpointConfig struct {
	// EnableHttpPortAccess: bool, required
	EnableHttpPortAccess terra.BoolValue `hcl:"enable_http_port_access,attr" validate:"required"`
}

type ClusterConfigGceClusterConfig struct {
	// InternalIpOnly: bool, optional
	InternalIpOnly terra.BoolValue `hcl:"internal_ip_only,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// ServiceAccountScopes: set of string, optional
	ServiceAccountScopes terra.SetValue[terra.StringValue] `hcl:"service_account_scopes,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// Tags: set of string, optional
	Tags terra.SetValue[terra.StringValue] `hcl:"tags,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// ClusterConfigGceClusterConfigNodeGroupAffinity: optional
	NodeGroupAffinity *ClusterConfigGceClusterConfigNodeGroupAffinity `hcl:"node_group_affinity,block"`
	// ClusterConfigGceClusterConfigReservationAffinity: optional
	ReservationAffinity *ClusterConfigGceClusterConfigReservationAffinity `hcl:"reservation_affinity,block"`
	// ClusterConfigGceClusterConfigShieldedInstanceConfig: optional
	ShieldedInstanceConfig *ClusterConfigGceClusterConfigShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
}

type ClusterConfigGceClusterConfigNodeGroupAffinity struct {
	// NodeGroupUri: string, required
	NodeGroupUri terra.StringValue `hcl:"node_group_uri,attr" validate:"required"`
}

type ClusterConfigGceClusterConfigReservationAffinity struct {
	// ConsumeReservationType: string, optional
	ConsumeReservationType terra.StringValue `hcl:"consume_reservation_type,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ClusterConfigGceClusterConfigShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
	// EnableVtpm: bool, optional
	EnableVtpm terra.BoolValue `hcl:"enable_vtpm,attr"`
}

type ClusterConfigInitializationAction struct {
	// Script: string, required
	Script terra.StringValue `hcl:"script,attr" validate:"required"`
	// TimeoutSec: number, optional
	TimeoutSec terra.NumberValue `hcl:"timeout_sec,attr"`
}

type ClusterConfigLifecycleConfig struct {
	// AutoDeleteTime: string, optional
	AutoDeleteTime terra.StringValue `hcl:"auto_delete_time,attr"`
	// IdleDeleteTtl: string, optional
	IdleDeleteTtl terra.StringValue `hcl:"idle_delete_ttl,attr"`
}

type ClusterConfigMasterConfig struct {
	// ImageUri: string, optional
	ImageUri terra.StringValue `hcl:"image_uri,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NumInstances: number, optional
	NumInstances terra.NumberValue `hcl:"num_instances,attr"`
	// ClusterConfigMasterConfigAccelerators: min=0
	Accelerators []ClusterConfigMasterConfigAccelerators `hcl:"accelerators,block" validate:"min=0"`
	// ClusterConfigMasterConfigDiskConfig: optional
	DiskConfig *ClusterConfigMasterConfigDiskConfig `hcl:"disk_config,block"`
}

type ClusterConfigMasterConfigAccelerators struct {
	// AcceleratorCount: number, required
	AcceleratorCount terra.NumberValue `hcl:"accelerator_count,attr" validate:"required"`
	// AcceleratorType: string, required
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr" validate:"required"`
}

type ClusterConfigMasterConfigDiskConfig struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// BootDiskType: string, optional
	BootDiskType terra.StringValue `hcl:"boot_disk_type,attr"`
	// NumLocalSsds: number, optional
	NumLocalSsds terra.NumberValue `hcl:"num_local_ssds,attr"`
}

type ClusterConfigMetastoreConfig struct {
	// DataprocMetastoreService: string, required
	DataprocMetastoreService terra.StringValue `hcl:"dataproc_metastore_service,attr" validate:"required"`
}

type ClusterConfigPreemptibleWorkerConfig struct {
	// NumInstances: number, optional
	NumInstances terra.NumberValue `hcl:"num_instances,attr"`
	// Preemptibility: string, optional
	Preemptibility terra.StringValue `hcl:"preemptibility,attr"`
	// ClusterConfigPreemptibleWorkerConfigDiskConfig: optional
	DiskConfig *ClusterConfigPreemptibleWorkerConfigDiskConfig `hcl:"disk_config,block"`
	// ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicy: optional
	InstanceFlexibilityPolicy *ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicy `hcl:"instance_flexibility_policy,block"`
}

type ClusterConfigPreemptibleWorkerConfigDiskConfig struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// BootDiskType: string, optional
	BootDiskType terra.StringValue `hcl:"boot_disk_type,attr"`
	// NumLocalSsds: number, optional
	NumLocalSsds terra.NumberValue `hcl:"num_local_ssds,attr"`
}

type ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicy struct {
	// ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionList: min=0
	InstanceSelectionList []ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionList `hcl:"instance_selection_list,block" validate:"min=0"`
}

type ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionList struct {
	// MachineTypes: list of string, optional
	MachineTypes terra.ListValue[terra.StringValue] `hcl:"machine_types,attr"`
	// Rank: number, optional
	Rank terra.NumberValue `hcl:"rank,attr"`
}

type ClusterConfigSecurityConfig struct {
	// ClusterConfigSecurityConfigKerberosConfig: required
	KerberosConfig *ClusterConfigSecurityConfigKerberosConfig `hcl:"kerberos_config,block" validate:"required"`
}

type ClusterConfigSecurityConfigKerberosConfig struct {
	// CrossRealmTrustAdminServer: string, optional
	CrossRealmTrustAdminServer terra.StringValue `hcl:"cross_realm_trust_admin_server,attr"`
	// CrossRealmTrustKdc: string, optional
	CrossRealmTrustKdc terra.StringValue `hcl:"cross_realm_trust_kdc,attr"`
	// CrossRealmTrustRealm: string, optional
	CrossRealmTrustRealm terra.StringValue `hcl:"cross_realm_trust_realm,attr"`
	// CrossRealmTrustSharedPasswordUri: string, optional
	CrossRealmTrustSharedPasswordUri terra.StringValue `hcl:"cross_realm_trust_shared_password_uri,attr"`
	// EnableKerberos: bool, optional
	EnableKerberos terra.BoolValue `hcl:"enable_kerberos,attr"`
	// KdcDbKeyUri: string, optional
	KdcDbKeyUri terra.StringValue `hcl:"kdc_db_key_uri,attr"`
	// KeyPasswordUri: string, optional
	KeyPasswordUri terra.StringValue `hcl:"key_password_uri,attr"`
	// KeystorePasswordUri: string, optional
	KeystorePasswordUri terra.StringValue `hcl:"keystore_password_uri,attr"`
	// KeystoreUri: string, optional
	KeystoreUri terra.StringValue `hcl:"keystore_uri,attr"`
	// KmsKeyUri: string, required
	KmsKeyUri terra.StringValue `hcl:"kms_key_uri,attr" validate:"required"`
	// Realm: string, optional
	Realm terra.StringValue `hcl:"realm,attr"`
	// RootPrincipalPasswordUri: string, required
	RootPrincipalPasswordUri terra.StringValue `hcl:"root_principal_password_uri,attr" validate:"required"`
	// TgtLifetimeHours: number, optional
	TgtLifetimeHours terra.NumberValue `hcl:"tgt_lifetime_hours,attr"`
	// TruststorePasswordUri: string, optional
	TruststorePasswordUri terra.StringValue `hcl:"truststore_password_uri,attr"`
	// TruststoreUri: string, optional
	TruststoreUri terra.StringValue `hcl:"truststore_uri,attr"`
}

type ClusterConfigSoftwareConfig struct {
	// ImageVersion: string, optional
	ImageVersion terra.StringValue `hcl:"image_version,attr"`
	// OptionalComponents: set of string, optional
	OptionalComponents terra.SetValue[terra.StringValue] `hcl:"optional_components,attr"`
	// OverrideProperties: map of string, optional
	OverrideProperties terra.MapValue[terra.StringValue] `hcl:"override_properties,attr"`
}

type ClusterConfigWorkerConfig struct {
	// ImageUri: string, optional
	ImageUri terra.StringValue `hcl:"image_uri,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// MinNumInstances: number, optional
	MinNumInstances terra.NumberValue `hcl:"min_num_instances,attr"`
	// NumInstances: number, optional
	NumInstances terra.NumberValue `hcl:"num_instances,attr"`
	// ClusterConfigWorkerConfigAccelerators: min=0
	Accelerators []ClusterConfigWorkerConfigAccelerators `hcl:"accelerators,block" validate:"min=0"`
	// ClusterConfigWorkerConfigDiskConfig: optional
	DiskConfig *ClusterConfigWorkerConfigDiskConfig `hcl:"disk_config,block"`
}

type ClusterConfigWorkerConfigAccelerators struct {
	// AcceleratorCount: number, required
	AcceleratorCount terra.NumberValue `hcl:"accelerator_count,attr" validate:"required"`
	// AcceleratorType: string, required
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr" validate:"required"`
}

type ClusterConfigWorkerConfigDiskConfig struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// BootDiskType: string, optional
	BootDiskType terra.StringValue `hcl:"boot_disk_type,attr"`
	// NumLocalSsds: number, optional
	NumLocalSsds terra.NumberValue `hcl:"num_local_ssds,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VirtualClusterConfig struct {
	// StagingBucket: string, optional
	StagingBucket terra.StringValue `hcl:"staging_bucket,attr"`
	// VirtualClusterConfigAuxiliaryServicesConfig: optional
	AuxiliaryServicesConfig *VirtualClusterConfigAuxiliaryServicesConfig `hcl:"auxiliary_services_config,block"`
	// VirtualClusterConfigKubernetesClusterConfig: optional
	KubernetesClusterConfig *VirtualClusterConfigKubernetesClusterConfig `hcl:"kubernetes_cluster_config,block"`
}

type VirtualClusterConfigAuxiliaryServicesConfig struct {
	// VirtualClusterConfigAuxiliaryServicesConfigMetastoreConfig: optional
	MetastoreConfig *VirtualClusterConfigAuxiliaryServicesConfigMetastoreConfig `hcl:"metastore_config,block"`
	// VirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfig: optional
	SparkHistoryServerConfig *VirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfig `hcl:"spark_history_server_config,block"`
}

type VirtualClusterConfigAuxiliaryServicesConfigMetastoreConfig struct {
	// DataprocMetastoreService: string, optional
	DataprocMetastoreService terra.StringValue `hcl:"dataproc_metastore_service,attr"`
}

type VirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfig struct {
	// DataprocCluster: string, optional
	DataprocCluster terra.StringValue `hcl:"dataproc_cluster,attr"`
}

type VirtualClusterConfigKubernetesClusterConfig struct {
	// KubernetesNamespace: string, optional
	KubernetesNamespace terra.StringValue `hcl:"kubernetes_namespace,attr"`
	// VirtualClusterConfigKubernetesClusterConfigGkeClusterConfig: required
	GkeClusterConfig *VirtualClusterConfigKubernetesClusterConfigGkeClusterConfig `hcl:"gke_cluster_config,block" validate:"required"`
	// VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfig: required
	KubernetesSoftwareConfig *VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfig `hcl:"kubernetes_software_config,block" validate:"required"`
}

type VirtualClusterConfigKubernetesClusterConfigGkeClusterConfig struct {
	// GkeClusterTarget: string, optional
	GkeClusterTarget terra.StringValue `hcl:"gke_cluster_target,attr"`
	// VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTarget: min=0
	NodePoolTarget []VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTarget `hcl:"node_pool_target,block" validate:"min=0"`
}

type VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTarget struct {
	// NodePool: string, required
	NodePool terra.StringValue `hcl:"node_pool,attr" validate:"required"`
	// Roles: set of string, required
	Roles terra.SetValue[terra.StringValue] `hcl:"roles,attr" validate:"required"`
	// VirtualClusterConfigKubernetesClusterConfigEb047906: optional
	NodePoolConfig *VirtualClusterConfigKubernetesClusterConfigEb047906 `hcl:"node_pool_config,block"`
}

type VirtualClusterConfigKubernetesClusterConfigEb047906 struct {
	// Locations: set of string, required
	Locations terra.SetValue[terra.StringValue] `hcl:"locations,attr" validate:"required"`
	// VirtualClusterConfigKubernetesClusterConfigD9B06Fc7: optional
	Autoscaling *VirtualClusterConfigKubernetesClusterConfigD9B06Fc7 `hcl:"autoscaling,block"`
	// VirtualClusterConfigKubernetesClusterConfig8452D313: optional
	Config *VirtualClusterConfigKubernetesClusterConfig8452D313 `hcl:"config,block"`
}

type VirtualClusterConfigKubernetesClusterConfigD9B06Fc7 struct {
	// MaxNodeCount: number, optional
	MaxNodeCount terra.NumberValue `hcl:"max_node_count,attr"`
	// MinNodeCount: number, optional
	MinNodeCount terra.NumberValue `hcl:"min_node_count,attr"`
}

type VirtualClusterConfigKubernetesClusterConfig8452D313 struct {
	// LocalSsdCount: number, optional
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// Preemptible: bool, optional
	Preemptible terra.BoolValue `hcl:"preemptible,attr"`
	// Spot: bool, optional
	Spot terra.BoolValue `hcl:"spot,attr"`
}

type VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfig struct {
	// ComponentVersion: map of string, required
	ComponentVersion terra.MapValue[terra.StringValue] `hcl:"component_version,attr" validate:"required"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type ClusterConfigAttributes struct {
	ref terra.Reference
}

func (cc ClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ClusterConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigAttributes {
	return ClusterConfigAttributes{ref: ref}
}

func (cc ClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ClusterConfigAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("bucket"))
}

func (cc ClusterConfigAttributes) StagingBucket() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("staging_bucket"))
}

func (cc ClusterConfigAttributes) TempBucket() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("temp_bucket"))
}

func (cc ClusterConfigAttributes) AutoscalingConfig() terra.ListValue[ClusterConfigAutoscalingConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigAutoscalingConfigAttributes](cc.ref.Append("autoscaling_config"))
}

func (cc ClusterConfigAttributes) AuxiliaryNodeGroups() terra.ListValue[ClusterConfigAuxiliaryNodeGroupsAttributes] {
	return terra.ReferenceAsList[ClusterConfigAuxiliaryNodeGroupsAttributes](cc.ref.Append("auxiliary_node_groups"))
}

func (cc ClusterConfigAttributes) DataprocMetricConfig() terra.ListValue[ClusterConfigDataprocMetricConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigDataprocMetricConfigAttributes](cc.ref.Append("dataproc_metric_config"))
}

func (cc ClusterConfigAttributes) EncryptionConfig() terra.ListValue[ClusterConfigEncryptionConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigEncryptionConfigAttributes](cc.ref.Append("encryption_config"))
}

func (cc ClusterConfigAttributes) EndpointConfig() terra.ListValue[ClusterConfigEndpointConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigEndpointConfigAttributes](cc.ref.Append("endpoint_config"))
}

func (cc ClusterConfigAttributes) GceClusterConfig() terra.ListValue[ClusterConfigGceClusterConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigGceClusterConfigAttributes](cc.ref.Append("gce_cluster_config"))
}

func (cc ClusterConfigAttributes) InitializationAction() terra.ListValue[ClusterConfigInitializationActionAttributes] {
	return terra.ReferenceAsList[ClusterConfigInitializationActionAttributes](cc.ref.Append("initialization_action"))
}

func (cc ClusterConfigAttributes) LifecycleConfig() terra.ListValue[ClusterConfigLifecycleConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigLifecycleConfigAttributes](cc.ref.Append("lifecycle_config"))
}

func (cc ClusterConfigAttributes) MasterConfig() terra.ListValue[ClusterConfigMasterConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigMasterConfigAttributes](cc.ref.Append("master_config"))
}

func (cc ClusterConfigAttributes) MetastoreConfig() terra.ListValue[ClusterConfigMetastoreConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigMetastoreConfigAttributes](cc.ref.Append("metastore_config"))
}

func (cc ClusterConfigAttributes) PreemptibleWorkerConfig() terra.ListValue[ClusterConfigPreemptibleWorkerConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigPreemptibleWorkerConfigAttributes](cc.ref.Append("preemptible_worker_config"))
}

func (cc ClusterConfigAttributes) SecurityConfig() terra.ListValue[ClusterConfigSecurityConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigSecurityConfigAttributes](cc.ref.Append("security_config"))
}

func (cc ClusterConfigAttributes) SoftwareConfig() terra.ListValue[ClusterConfigSoftwareConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigSoftwareConfigAttributes](cc.ref.Append("software_config"))
}

func (cc ClusterConfigAttributes) WorkerConfig() terra.ListValue[ClusterConfigWorkerConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigWorkerConfigAttributes](cc.ref.Append("worker_config"))
}

type ClusterConfigAutoscalingConfigAttributes struct {
	ref terra.Reference
}

func (ac ClusterConfigAutoscalingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac ClusterConfigAutoscalingConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigAutoscalingConfigAttributes {
	return ClusterConfigAutoscalingConfigAttributes{ref: ref}
}

func (ac ClusterConfigAutoscalingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac ClusterConfigAutoscalingConfigAttributes) PolicyUri() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("policy_uri"))
}

type ClusterConfigAuxiliaryNodeGroupsAttributes struct {
	ref terra.Reference
}

func (ang ClusterConfigAuxiliaryNodeGroupsAttributes) InternalRef() (terra.Reference, error) {
	return ang.ref, nil
}

func (ang ClusterConfigAuxiliaryNodeGroupsAttributes) InternalWithRef(ref terra.Reference) ClusterConfigAuxiliaryNodeGroupsAttributes {
	return ClusterConfigAuxiliaryNodeGroupsAttributes{ref: ref}
}

func (ang ClusterConfigAuxiliaryNodeGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ang.ref.InternalTokens()
}

func (ang ClusterConfigAuxiliaryNodeGroupsAttributes) NodeGroupId() terra.StringValue {
	return terra.ReferenceAsString(ang.ref.Append("node_group_id"))
}

func (ang ClusterConfigAuxiliaryNodeGroupsAttributes) NodeGroup() terra.ListValue[ClusterConfigAuxiliaryNodeGroupsNodeGroupAttributes] {
	return terra.ReferenceAsList[ClusterConfigAuxiliaryNodeGroupsNodeGroupAttributes](ang.ref.Append("node_group"))
}

type ClusterConfigAuxiliaryNodeGroupsNodeGroupAttributes struct {
	ref terra.Reference
}

func (ng ClusterConfigAuxiliaryNodeGroupsNodeGroupAttributes) InternalRef() (terra.Reference, error) {
	return ng.ref, nil
}

func (ng ClusterConfigAuxiliaryNodeGroupsNodeGroupAttributes) InternalWithRef(ref terra.Reference) ClusterConfigAuxiliaryNodeGroupsNodeGroupAttributes {
	return ClusterConfigAuxiliaryNodeGroupsNodeGroupAttributes{ref: ref}
}

func (ng ClusterConfigAuxiliaryNodeGroupsNodeGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ng.ref.InternalTokens()
}

func (ng ClusterConfigAuxiliaryNodeGroupsNodeGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ng.ref.Append("name"))
}

func (ng ClusterConfigAuxiliaryNodeGroupsNodeGroupAttributes) Roles() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ng.ref.Append("roles"))
}

func (ng ClusterConfigAuxiliaryNodeGroupsNodeGroupAttributes) NodeGroupConfig() terra.ListValue[ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAttributes](ng.ref.Append("node_group_config"))
}

type ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAttributes struct {
	ref terra.Reference
}

func (ngc ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAttributes) InternalRef() (terra.Reference, error) {
	return ngc.ref, nil
}

func (ngc ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAttributes {
	return ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAttributes{ref: ref}
}

func (ngc ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ngc.ref.InternalTokens()
}

func (ngc ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAttributes) InstanceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ngc.ref.Append("instance_names"))
}

func (ngc ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(ngc.ref.Append("machine_type"))
}

func (ngc ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(ngc.ref.Append("min_cpu_platform"))
}

func (ngc ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAttributes) NumInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(ngc.ref.Append("num_instances"))
}

func (ngc ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAttributes) Accelerators() terra.SetValue[ClusterConfigAuxiliaryNodeGroups5Cb8513CAttributes] {
	return terra.ReferenceAsSet[ClusterConfigAuxiliaryNodeGroups5Cb8513CAttributes](ngc.ref.Append("accelerators"))
}

func (ngc ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAttributes) DiskConfig() terra.ListValue[ClusterConfigAuxiliaryNodeGroupsBc9Adbc6Attributes] {
	return terra.ReferenceAsList[ClusterConfigAuxiliaryNodeGroupsBc9Adbc6Attributes](ngc.ref.Append("disk_config"))
}

type ClusterConfigAuxiliaryNodeGroups5Cb8513CAttributes struct {
	ref terra.Reference
}

func (a ClusterConfigAuxiliaryNodeGroups5Cb8513CAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ClusterConfigAuxiliaryNodeGroups5Cb8513CAttributes) InternalWithRef(ref terra.Reference) ClusterConfigAuxiliaryNodeGroups5Cb8513CAttributes {
	return ClusterConfigAuxiliaryNodeGroups5Cb8513CAttributes{ref: ref}
}

func (a ClusterConfigAuxiliaryNodeGroups5Cb8513CAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ClusterConfigAuxiliaryNodeGroups5Cb8513CAttributes) AcceleratorCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("accelerator_count"))
}

func (a ClusterConfigAuxiliaryNodeGroups5Cb8513CAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("accelerator_type"))
}

type ClusterConfigAuxiliaryNodeGroupsBc9Adbc6Attributes struct {
	ref terra.Reference
}

func (dc ClusterConfigAuxiliaryNodeGroupsBc9Adbc6Attributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc ClusterConfigAuxiliaryNodeGroupsBc9Adbc6Attributes) InternalWithRef(ref terra.Reference) ClusterConfigAuxiliaryNodeGroupsBc9Adbc6Attributes {
	return ClusterConfigAuxiliaryNodeGroupsBc9Adbc6Attributes{ref: ref}
}

func (dc ClusterConfigAuxiliaryNodeGroupsBc9Adbc6Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc ClusterConfigAuxiliaryNodeGroupsBc9Adbc6Attributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("boot_disk_size_gb"))
}

func (dc ClusterConfigAuxiliaryNodeGroupsBc9Adbc6Attributes) BootDiskType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("boot_disk_type"))
}

func (dc ClusterConfigAuxiliaryNodeGroupsBc9Adbc6Attributes) NumLocalSsds() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("num_local_ssds"))
}

type ClusterConfigDataprocMetricConfigAttributes struct {
	ref terra.Reference
}

func (dmc ClusterConfigDataprocMetricConfigAttributes) InternalRef() (terra.Reference, error) {
	return dmc.ref, nil
}

func (dmc ClusterConfigDataprocMetricConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigDataprocMetricConfigAttributes {
	return ClusterConfigDataprocMetricConfigAttributes{ref: ref}
}

func (dmc ClusterConfigDataprocMetricConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dmc.ref.InternalTokens()
}

func (dmc ClusterConfigDataprocMetricConfigAttributes) Metrics() terra.ListValue[ClusterConfigDataprocMetricConfigMetricsAttributes] {
	return terra.ReferenceAsList[ClusterConfigDataprocMetricConfigMetricsAttributes](dmc.ref.Append("metrics"))
}

type ClusterConfigDataprocMetricConfigMetricsAttributes struct {
	ref terra.Reference
}

func (m ClusterConfigDataprocMetricConfigMetricsAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m ClusterConfigDataprocMetricConfigMetricsAttributes) InternalWithRef(ref terra.Reference) ClusterConfigDataprocMetricConfigMetricsAttributes {
	return ClusterConfigDataprocMetricConfigMetricsAttributes{ref: ref}
}

func (m ClusterConfigDataprocMetricConfigMetricsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m ClusterConfigDataprocMetricConfigMetricsAttributes) MetricOverrides() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](m.ref.Append("metric_overrides"))
}

func (m ClusterConfigDataprocMetricConfigMetricsAttributes) MetricSource() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("metric_source"))
}

type ClusterConfigEncryptionConfigAttributes struct {
	ref terra.Reference
}

func (ec ClusterConfigEncryptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec ClusterConfigEncryptionConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigEncryptionConfigAttributes {
	return ClusterConfigEncryptionConfigAttributes{ref: ref}
}

func (ec ClusterConfigEncryptionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec ClusterConfigEncryptionConfigAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key_name"))
}

type ClusterConfigEndpointConfigAttributes struct {
	ref terra.Reference
}

func (ec ClusterConfigEndpointConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec ClusterConfigEndpointConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigEndpointConfigAttributes {
	return ClusterConfigEndpointConfigAttributes{ref: ref}
}

func (ec ClusterConfigEndpointConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec ClusterConfigEndpointConfigAttributes) EnableHttpPortAccess() terra.BoolValue {
	return terra.ReferenceAsBool(ec.ref.Append("enable_http_port_access"))
}

func (ec ClusterConfigEndpointConfigAttributes) HttpPorts() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ec.ref.Append("http_ports"))
}

type ClusterConfigGceClusterConfigAttributes struct {
	ref terra.Reference
}

func (gcc ClusterConfigGceClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return gcc.ref, nil
}

func (gcc ClusterConfigGceClusterConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigGceClusterConfigAttributes {
	return ClusterConfigGceClusterConfigAttributes{ref: ref}
}

func (gcc ClusterConfigGceClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gcc.ref.InternalTokens()
}

func (gcc ClusterConfigGceClusterConfigAttributes) InternalIpOnly() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("internal_ip_only"))
}

func (gcc ClusterConfigGceClusterConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcc.ref.Append("metadata"))
}

func (gcc ClusterConfigGceClusterConfigAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("network"))
}

func (gcc ClusterConfigGceClusterConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("service_account"))
}

func (gcc ClusterConfigGceClusterConfigAttributes) ServiceAccountScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gcc.ref.Append("service_account_scopes"))
}

func (gcc ClusterConfigGceClusterConfigAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("subnetwork"))
}

func (gcc ClusterConfigGceClusterConfigAttributes) Tags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gcc.ref.Append("tags"))
}

func (gcc ClusterConfigGceClusterConfigAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("zone"))
}

func (gcc ClusterConfigGceClusterConfigAttributes) NodeGroupAffinity() terra.ListValue[ClusterConfigGceClusterConfigNodeGroupAffinityAttributes] {
	return terra.ReferenceAsList[ClusterConfigGceClusterConfigNodeGroupAffinityAttributes](gcc.ref.Append("node_group_affinity"))
}

func (gcc ClusterConfigGceClusterConfigAttributes) ReservationAffinity() terra.ListValue[ClusterConfigGceClusterConfigReservationAffinityAttributes] {
	return terra.ReferenceAsList[ClusterConfigGceClusterConfigReservationAffinityAttributes](gcc.ref.Append("reservation_affinity"))
}

func (gcc ClusterConfigGceClusterConfigAttributes) ShieldedInstanceConfig() terra.ListValue[ClusterConfigGceClusterConfigShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigGceClusterConfigShieldedInstanceConfigAttributes](gcc.ref.Append("shielded_instance_config"))
}

type ClusterConfigGceClusterConfigNodeGroupAffinityAttributes struct {
	ref terra.Reference
}

func (nga ClusterConfigGceClusterConfigNodeGroupAffinityAttributes) InternalRef() (terra.Reference, error) {
	return nga.ref, nil
}

func (nga ClusterConfigGceClusterConfigNodeGroupAffinityAttributes) InternalWithRef(ref terra.Reference) ClusterConfigGceClusterConfigNodeGroupAffinityAttributes {
	return ClusterConfigGceClusterConfigNodeGroupAffinityAttributes{ref: ref}
}

func (nga ClusterConfigGceClusterConfigNodeGroupAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nga.ref.InternalTokens()
}

func (nga ClusterConfigGceClusterConfigNodeGroupAffinityAttributes) NodeGroupUri() terra.StringValue {
	return terra.ReferenceAsString(nga.ref.Append("node_group_uri"))
}

type ClusterConfigGceClusterConfigReservationAffinityAttributes struct {
	ref terra.Reference
}

func (ra ClusterConfigGceClusterConfigReservationAffinityAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra ClusterConfigGceClusterConfigReservationAffinityAttributes) InternalWithRef(ref terra.Reference) ClusterConfigGceClusterConfigReservationAffinityAttributes {
	return ClusterConfigGceClusterConfigReservationAffinityAttributes{ref: ref}
}

func (ra ClusterConfigGceClusterConfigReservationAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra ClusterConfigGceClusterConfigReservationAffinityAttributes) ConsumeReservationType() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("consume_reservation_type"))
}

func (ra ClusterConfigGceClusterConfigReservationAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("key"))
}

func (ra ClusterConfigGceClusterConfigReservationAffinityAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ra.ref.Append("values"))
}

type ClusterConfigGceClusterConfigShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic ClusterConfigGceClusterConfigShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic ClusterConfigGceClusterConfigShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigGceClusterConfigShieldedInstanceConfigAttributes {
	return ClusterConfigGceClusterConfigShieldedInstanceConfigAttributes{ref: ref}
}

func (sic ClusterConfigGceClusterConfigShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic ClusterConfigGceClusterConfigShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic ClusterConfigGceClusterConfigShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

func (sic ClusterConfigGceClusterConfigShieldedInstanceConfigAttributes) EnableVtpm() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_vtpm"))
}

type ClusterConfigInitializationActionAttributes struct {
	ref terra.Reference
}

func (ia ClusterConfigInitializationActionAttributes) InternalRef() (terra.Reference, error) {
	return ia.ref, nil
}

func (ia ClusterConfigInitializationActionAttributes) InternalWithRef(ref terra.Reference) ClusterConfigInitializationActionAttributes {
	return ClusterConfigInitializationActionAttributes{ref: ref}
}

func (ia ClusterConfigInitializationActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ia.ref.InternalTokens()
}

func (ia ClusterConfigInitializationActionAttributes) Script() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("script"))
}

func (ia ClusterConfigInitializationActionAttributes) TimeoutSec() terra.NumberValue {
	return terra.ReferenceAsNumber(ia.ref.Append("timeout_sec"))
}

type ClusterConfigLifecycleConfigAttributes struct {
	ref terra.Reference
}

func (lc ClusterConfigLifecycleConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc ClusterConfigLifecycleConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigLifecycleConfigAttributes {
	return ClusterConfigLifecycleConfigAttributes{ref: ref}
}

func (lc ClusterConfigLifecycleConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc ClusterConfigLifecycleConfigAttributes) AutoDeleteTime() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("auto_delete_time"))
}

func (lc ClusterConfigLifecycleConfigAttributes) IdleDeleteTtl() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("idle_delete_ttl"))
}

func (lc ClusterConfigLifecycleConfigAttributes) IdleStartTime() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("idle_start_time"))
}

type ClusterConfigMasterConfigAttributes struct {
	ref terra.Reference
}

func (mc ClusterConfigMasterConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc ClusterConfigMasterConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigMasterConfigAttributes {
	return ClusterConfigMasterConfigAttributes{ref: ref}
}

func (mc ClusterConfigMasterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc ClusterConfigMasterConfigAttributes) ImageUri() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("image_uri"))
}

func (mc ClusterConfigMasterConfigAttributes) InstanceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("instance_names"))
}

func (mc ClusterConfigMasterConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("machine_type"))
}

func (mc ClusterConfigMasterConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("min_cpu_platform"))
}

func (mc ClusterConfigMasterConfigAttributes) NumInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("num_instances"))
}

func (mc ClusterConfigMasterConfigAttributes) Accelerators() terra.SetValue[ClusterConfigMasterConfigAcceleratorsAttributes] {
	return terra.ReferenceAsSet[ClusterConfigMasterConfigAcceleratorsAttributes](mc.ref.Append("accelerators"))
}

func (mc ClusterConfigMasterConfigAttributes) DiskConfig() terra.ListValue[ClusterConfigMasterConfigDiskConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigMasterConfigDiskConfigAttributes](mc.ref.Append("disk_config"))
}

type ClusterConfigMasterConfigAcceleratorsAttributes struct {
	ref terra.Reference
}

func (a ClusterConfigMasterConfigAcceleratorsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ClusterConfigMasterConfigAcceleratorsAttributes) InternalWithRef(ref terra.Reference) ClusterConfigMasterConfigAcceleratorsAttributes {
	return ClusterConfigMasterConfigAcceleratorsAttributes{ref: ref}
}

func (a ClusterConfigMasterConfigAcceleratorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ClusterConfigMasterConfigAcceleratorsAttributes) AcceleratorCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("accelerator_count"))
}

func (a ClusterConfigMasterConfigAcceleratorsAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("accelerator_type"))
}

type ClusterConfigMasterConfigDiskConfigAttributes struct {
	ref terra.Reference
}

func (dc ClusterConfigMasterConfigDiskConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc ClusterConfigMasterConfigDiskConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigMasterConfigDiskConfigAttributes {
	return ClusterConfigMasterConfigDiskConfigAttributes{ref: ref}
}

func (dc ClusterConfigMasterConfigDiskConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc ClusterConfigMasterConfigDiskConfigAttributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("boot_disk_size_gb"))
}

func (dc ClusterConfigMasterConfigDiskConfigAttributes) BootDiskType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("boot_disk_type"))
}

func (dc ClusterConfigMasterConfigDiskConfigAttributes) NumLocalSsds() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("num_local_ssds"))
}

type ClusterConfigMetastoreConfigAttributes struct {
	ref terra.Reference
}

func (mc ClusterConfigMetastoreConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc ClusterConfigMetastoreConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigMetastoreConfigAttributes {
	return ClusterConfigMetastoreConfigAttributes{ref: ref}
}

func (mc ClusterConfigMetastoreConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc ClusterConfigMetastoreConfigAttributes) DataprocMetastoreService() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("dataproc_metastore_service"))
}

type ClusterConfigPreemptibleWorkerConfigAttributes struct {
	ref terra.Reference
}

func (pwc ClusterConfigPreemptibleWorkerConfigAttributes) InternalRef() (terra.Reference, error) {
	return pwc.ref, nil
}

func (pwc ClusterConfigPreemptibleWorkerConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigPreemptibleWorkerConfigAttributes {
	return ClusterConfigPreemptibleWorkerConfigAttributes{ref: ref}
}

func (pwc ClusterConfigPreemptibleWorkerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pwc.ref.InternalTokens()
}

func (pwc ClusterConfigPreemptibleWorkerConfigAttributes) InstanceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pwc.ref.Append("instance_names"))
}

func (pwc ClusterConfigPreemptibleWorkerConfigAttributes) NumInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(pwc.ref.Append("num_instances"))
}

func (pwc ClusterConfigPreemptibleWorkerConfigAttributes) Preemptibility() terra.StringValue {
	return terra.ReferenceAsString(pwc.ref.Append("preemptibility"))
}

func (pwc ClusterConfigPreemptibleWorkerConfigAttributes) DiskConfig() terra.ListValue[ClusterConfigPreemptibleWorkerConfigDiskConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigPreemptibleWorkerConfigDiskConfigAttributes](pwc.ref.Append("disk_config"))
}

func (pwc ClusterConfigPreemptibleWorkerConfigAttributes) InstanceFlexibilityPolicy() terra.ListValue[ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyAttributes] {
	return terra.ReferenceAsList[ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyAttributes](pwc.ref.Append("instance_flexibility_policy"))
}

type ClusterConfigPreemptibleWorkerConfigDiskConfigAttributes struct {
	ref terra.Reference
}

func (dc ClusterConfigPreemptibleWorkerConfigDiskConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc ClusterConfigPreemptibleWorkerConfigDiskConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigPreemptibleWorkerConfigDiskConfigAttributes {
	return ClusterConfigPreemptibleWorkerConfigDiskConfigAttributes{ref: ref}
}

func (dc ClusterConfigPreemptibleWorkerConfigDiskConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc ClusterConfigPreemptibleWorkerConfigDiskConfigAttributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("boot_disk_size_gb"))
}

func (dc ClusterConfigPreemptibleWorkerConfigDiskConfigAttributes) BootDiskType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("boot_disk_type"))
}

func (dc ClusterConfigPreemptibleWorkerConfigDiskConfigAttributes) NumLocalSsds() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("num_local_ssds"))
}

type ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyAttributes struct {
	ref terra.Reference
}

func (ifp ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ifp.ref, nil
}

func (ifp ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyAttributes) InternalWithRef(ref terra.Reference) ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyAttributes {
	return ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyAttributes{ref: ref}
}

func (ifp ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ifp.ref.InternalTokens()
}

func (ifp ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyAttributes) InstanceSelectionResults() terra.ListValue[ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsAttributes] {
	return terra.ReferenceAsList[ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsAttributes](ifp.ref.Append("instance_selection_results"))
}

func (ifp ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyAttributes) InstanceSelectionList() terra.ListValue[ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListAttributes] {
	return terra.ReferenceAsList[ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListAttributes](ifp.ref.Append("instance_selection_list"))
}

type ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsAttributes struct {
	ref terra.Reference
}

func (isr ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsAttributes) InternalRef() (terra.Reference, error) {
	return isr.ref, nil
}

func (isr ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsAttributes) InternalWithRef(ref terra.Reference) ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsAttributes {
	return ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsAttributes{ref: ref}
}

func (isr ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return isr.ref.InternalTokens()
}

func (isr ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(isr.ref.Append("machine_type"))
}

func (isr ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsAttributes) VmCount() terra.NumberValue {
	return terra.ReferenceAsNumber(isr.ref.Append("vm_count"))
}

type ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListAttributes struct {
	ref terra.Reference
}

func (isl ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListAttributes) InternalRef() (terra.Reference, error) {
	return isl.ref, nil
}

func (isl ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListAttributes) InternalWithRef(ref terra.Reference) ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListAttributes {
	return ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListAttributes{ref: ref}
}

func (isl ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return isl.ref.InternalTokens()
}

func (isl ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListAttributes) MachineTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](isl.ref.Append("machine_types"))
}

func (isl ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListAttributes) Rank() terra.NumberValue {
	return terra.ReferenceAsNumber(isl.ref.Append("rank"))
}

type ClusterConfigSecurityConfigAttributes struct {
	ref terra.Reference
}

func (sc ClusterConfigSecurityConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc ClusterConfigSecurityConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigSecurityConfigAttributes {
	return ClusterConfigSecurityConfigAttributes{ref: ref}
}

func (sc ClusterConfigSecurityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc ClusterConfigSecurityConfigAttributes) KerberosConfig() terra.ListValue[ClusterConfigSecurityConfigKerberosConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigSecurityConfigKerberosConfigAttributes](sc.ref.Append("kerberos_config"))
}

type ClusterConfigSecurityConfigKerberosConfigAttributes struct {
	ref terra.Reference
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigSecurityConfigKerberosConfigAttributes {
	return ClusterConfigSecurityConfigKerberosConfigAttributes{ref: ref}
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) CrossRealmTrustAdminServer() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_admin_server"))
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) CrossRealmTrustKdc() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_kdc"))
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) CrossRealmTrustRealm() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_realm"))
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) CrossRealmTrustSharedPasswordUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_shared_password_uri"))
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) EnableKerberos() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("enable_kerberos"))
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) KdcDbKeyUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("kdc_db_key_uri"))
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) KeyPasswordUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("key_password_uri"))
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) KeystorePasswordUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("keystore_password_uri"))
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) KeystoreUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("keystore_uri"))
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) KmsKeyUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("kms_key_uri"))
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) Realm() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("realm"))
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) RootPrincipalPasswordUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("root_principal_password_uri"))
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) TgtLifetimeHours() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("tgt_lifetime_hours"))
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) TruststorePasswordUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("truststore_password_uri"))
}

func (kc ClusterConfigSecurityConfigKerberosConfigAttributes) TruststoreUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("truststore_uri"))
}

type ClusterConfigSoftwareConfigAttributes struct {
	ref terra.Reference
}

func (sc ClusterConfigSoftwareConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc ClusterConfigSoftwareConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigSoftwareConfigAttributes {
	return ClusterConfigSoftwareConfigAttributes{ref: ref}
}

func (sc ClusterConfigSoftwareConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc ClusterConfigSoftwareConfigAttributes) ImageVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("image_version"))
}

func (sc ClusterConfigSoftwareConfigAttributes) OptionalComponents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sc.ref.Append("optional_components"))
}

func (sc ClusterConfigSoftwareConfigAttributes) OverrideProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sc.ref.Append("override_properties"))
}

func (sc ClusterConfigSoftwareConfigAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sc.ref.Append("properties"))
}

type ClusterConfigWorkerConfigAttributes struct {
	ref terra.Reference
}

func (wc ClusterConfigWorkerConfigAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc ClusterConfigWorkerConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigWorkerConfigAttributes {
	return ClusterConfigWorkerConfigAttributes{ref: ref}
}

func (wc ClusterConfigWorkerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc ClusterConfigWorkerConfigAttributes) ImageUri() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("image_uri"))
}

func (wc ClusterConfigWorkerConfigAttributes) InstanceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wc.ref.Append("instance_names"))
}

func (wc ClusterConfigWorkerConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("machine_type"))
}

func (wc ClusterConfigWorkerConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("min_cpu_platform"))
}

func (wc ClusterConfigWorkerConfigAttributes) MinNumInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(wc.ref.Append("min_num_instances"))
}

func (wc ClusterConfigWorkerConfigAttributes) NumInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(wc.ref.Append("num_instances"))
}

func (wc ClusterConfigWorkerConfigAttributes) Accelerators() terra.SetValue[ClusterConfigWorkerConfigAcceleratorsAttributes] {
	return terra.ReferenceAsSet[ClusterConfigWorkerConfigAcceleratorsAttributes](wc.ref.Append("accelerators"))
}

func (wc ClusterConfigWorkerConfigAttributes) DiskConfig() terra.ListValue[ClusterConfigWorkerConfigDiskConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigWorkerConfigDiskConfigAttributes](wc.ref.Append("disk_config"))
}

type ClusterConfigWorkerConfigAcceleratorsAttributes struct {
	ref terra.Reference
}

func (a ClusterConfigWorkerConfigAcceleratorsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ClusterConfigWorkerConfigAcceleratorsAttributes) InternalWithRef(ref terra.Reference) ClusterConfigWorkerConfigAcceleratorsAttributes {
	return ClusterConfigWorkerConfigAcceleratorsAttributes{ref: ref}
}

func (a ClusterConfigWorkerConfigAcceleratorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ClusterConfigWorkerConfigAcceleratorsAttributes) AcceleratorCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("accelerator_count"))
}

func (a ClusterConfigWorkerConfigAcceleratorsAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("accelerator_type"))
}

type ClusterConfigWorkerConfigDiskConfigAttributes struct {
	ref terra.Reference
}

func (dc ClusterConfigWorkerConfigDiskConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc ClusterConfigWorkerConfigDiskConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigWorkerConfigDiskConfigAttributes {
	return ClusterConfigWorkerConfigDiskConfigAttributes{ref: ref}
}

func (dc ClusterConfigWorkerConfigDiskConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc ClusterConfigWorkerConfigDiskConfigAttributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("boot_disk_size_gb"))
}

func (dc ClusterConfigWorkerConfigDiskConfigAttributes) BootDiskType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("boot_disk_type"))
}

func (dc ClusterConfigWorkerConfigDiskConfigAttributes) NumLocalSsds() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("num_local_ssds"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VirtualClusterConfigAttributes struct {
	ref terra.Reference
}

func (vcc VirtualClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return vcc.ref, nil
}

func (vcc VirtualClusterConfigAttributes) InternalWithRef(ref terra.Reference) VirtualClusterConfigAttributes {
	return VirtualClusterConfigAttributes{ref: ref}
}

func (vcc VirtualClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vcc.ref.InternalTokens()
}

func (vcc VirtualClusterConfigAttributes) StagingBucket() terra.StringValue {
	return terra.ReferenceAsString(vcc.ref.Append("staging_bucket"))
}

func (vcc VirtualClusterConfigAttributes) AuxiliaryServicesConfig() terra.ListValue[VirtualClusterConfigAuxiliaryServicesConfigAttributes] {
	return terra.ReferenceAsList[VirtualClusterConfigAuxiliaryServicesConfigAttributes](vcc.ref.Append("auxiliary_services_config"))
}

func (vcc VirtualClusterConfigAttributes) KubernetesClusterConfig() terra.ListValue[VirtualClusterConfigKubernetesClusterConfigAttributes] {
	return terra.ReferenceAsList[VirtualClusterConfigKubernetesClusterConfigAttributes](vcc.ref.Append("kubernetes_cluster_config"))
}

type VirtualClusterConfigAuxiliaryServicesConfigAttributes struct {
	ref terra.Reference
}

func (asc VirtualClusterConfigAuxiliaryServicesConfigAttributes) InternalRef() (terra.Reference, error) {
	return asc.ref, nil
}

func (asc VirtualClusterConfigAuxiliaryServicesConfigAttributes) InternalWithRef(ref terra.Reference) VirtualClusterConfigAuxiliaryServicesConfigAttributes {
	return VirtualClusterConfigAuxiliaryServicesConfigAttributes{ref: ref}
}

func (asc VirtualClusterConfigAuxiliaryServicesConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asc.ref.InternalTokens()
}

func (asc VirtualClusterConfigAuxiliaryServicesConfigAttributes) MetastoreConfig() terra.ListValue[VirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigAttributes] {
	return terra.ReferenceAsList[VirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigAttributes](asc.ref.Append("metastore_config"))
}

func (asc VirtualClusterConfigAuxiliaryServicesConfigAttributes) SparkHistoryServerConfig() terra.ListValue[VirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigAttributes] {
	return terra.ReferenceAsList[VirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigAttributes](asc.ref.Append("spark_history_server_config"))
}

type VirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigAttributes struct {
	ref terra.Reference
}

func (mc VirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc VirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigAttributes) InternalWithRef(ref terra.Reference) VirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigAttributes {
	return VirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigAttributes{ref: ref}
}

func (mc VirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc VirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigAttributes) DataprocMetastoreService() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("dataproc_metastore_service"))
}

type VirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigAttributes struct {
	ref terra.Reference
}

func (shsc VirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigAttributes) InternalRef() (terra.Reference, error) {
	return shsc.ref, nil
}

func (shsc VirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigAttributes) InternalWithRef(ref terra.Reference) VirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigAttributes {
	return VirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigAttributes{ref: ref}
}

func (shsc VirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return shsc.ref.InternalTokens()
}

func (shsc VirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigAttributes) DataprocCluster() terra.StringValue {
	return terra.ReferenceAsString(shsc.ref.Append("dataproc_cluster"))
}

type VirtualClusterConfigKubernetesClusterConfigAttributes struct {
	ref terra.Reference
}

func (kcc VirtualClusterConfigKubernetesClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return kcc.ref, nil
}

func (kcc VirtualClusterConfigKubernetesClusterConfigAttributes) InternalWithRef(ref terra.Reference) VirtualClusterConfigKubernetesClusterConfigAttributes {
	return VirtualClusterConfigKubernetesClusterConfigAttributes{ref: ref}
}

func (kcc VirtualClusterConfigKubernetesClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kcc.ref.InternalTokens()
}

func (kcc VirtualClusterConfigKubernetesClusterConfigAttributes) KubernetesNamespace() terra.StringValue {
	return terra.ReferenceAsString(kcc.ref.Append("kubernetes_namespace"))
}

func (kcc VirtualClusterConfigKubernetesClusterConfigAttributes) GkeClusterConfig() terra.ListValue[VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigAttributes] {
	return terra.ReferenceAsList[VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigAttributes](kcc.ref.Append("gke_cluster_config"))
}

func (kcc VirtualClusterConfigKubernetesClusterConfigAttributes) KubernetesSoftwareConfig() terra.ListValue[VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigAttributes] {
	return terra.ReferenceAsList[VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigAttributes](kcc.ref.Append("kubernetes_software_config"))
}

type VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigAttributes struct {
	ref terra.Reference
}

func (gcc VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return gcc.ref, nil
}

func (gcc VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigAttributes) InternalWithRef(ref terra.Reference) VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigAttributes {
	return VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigAttributes{ref: ref}
}

func (gcc VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gcc.ref.InternalTokens()
}

func (gcc VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigAttributes) GkeClusterTarget() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("gke_cluster_target"))
}

func (gcc VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigAttributes) NodePoolTarget() terra.ListValue[VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetAttributes] {
	return terra.ReferenceAsList[VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetAttributes](gcc.ref.Append("node_pool_target"))
}

type VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetAttributes struct {
	ref terra.Reference
}

func (npt VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetAttributes) InternalRef() (terra.Reference, error) {
	return npt.ref, nil
}

func (npt VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetAttributes) InternalWithRef(ref terra.Reference) VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetAttributes {
	return VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetAttributes{ref: ref}
}

func (npt VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npt.ref.InternalTokens()
}

func (npt VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetAttributes) NodePool() terra.StringValue {
	return terra.ReferenceAsString(npt.ref.Append("node_pool"))
}

func (npt VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetAttributes) Roles() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](npt.ref.Append("roles"))
}

func (npt VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetAttributes) NodePoolConfig() terra.ListValue[VirtualClusterConfigKubernetesClusterConfigEb047906Attributes] {
	return terra.ReferenceAsList[VirtualClusterConfigKubernetesClusterConfigEb047906Attributes](npt.ref.Append("node_pool_config"))
}

type VirtualClusterConfigKubernetesClusterConfigEb047906Attributes struct {
	ref terra.Reference
}

func (npc VirtualClusterConfigKubernetesClusterConfigEb047906Attributes) InternalRef() (terra.Reference, error) {
	return npc.ref, nil
}

func (npc VirtualClusterConfigKubernetesClusterConfigEb047906Attributes) InternalWithRef(ref terra.Reference) VirtualClusterConfigKubernetesClusterConfigEb047906Attributes {
	return VirtualClusterConfigKubernetesClusterConfigEb047906Attributes{ref: ref}
}

func (npc VirtualClusterConfigKubernetesClusterConfigEb047906Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return npc.ref.InternalTokens()
}

func (npc VirtualClusterConfigKubernetesClusterConfigEb047906Attributes) Locations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](npc.ref.Append("locations"))
}

func (npc VirtualClusterConfigKubernetesClusterConfigEb047906Attributes) Autoscaling() terra.ListValue[VirtualClusterConfigKubernetesClusterConfigD9B06Fc7Attributes] {
	return terra.ReferenceAsList[VirtualClusterConfigKubernetesClusterConfigD9B06Fc7Attributes](npc.ref.Append("autoscaling"))
}

func (npc VirtualClusterConfigKubernetesClusterConfigEb047906Attributes) Config() terra.ListValue[VirtualClusterConfigKubernetesClusterConfig8452D313Attributes] {
	return terra.ReferenceAsList[VirtualClusterConfigKubernetesClusterConfig8452D313Attributes](npc.ref.Append("config"))
}

type VirtualClusterConfigKubernetesClusterConfigD9B06Fc7Attributes struct {
	ref terra.Reference
}

func (a VirtualClusterConfigKubernetesClusterConfigD9B06Fc7Attributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a VirtualClusterConfigKubernetesClusterConfigD9B06Fc7Attributes) InternalWithRef(ref terra.Reference) VirtualClusterConfigKubernetesClusterConfigD9B06Fc7Attributes {
	return VirtualClusterConfigKubernetesClusterConfigD9B06Fc7Attributes{ref: ref}
}

func (a VirtualClusterConfigKubernetesClusterConfigD9B06Fc7Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a VirtualClusterConfigKubernetesClusterConfigD9B06Fc7Attributes) MaxNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("max_node_count"))
}

func (a VirtualClusterConfigKubernetesClusterConfigD9B06Fc7Attributes) MinNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("min_node_count"))
}

type VirtualClusterConfigKubernetesClusterConfig8452D313Attributes struct {
	ref terra.Reference
}

func (c VirtualClusterConfigKubernetesClusterConfig8452D313Attributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c VirtualClusterConfigKubernetesClusterConfig8452D313Attributes) InternalWithRef(ref terra.Reference) VirtualClusterConfigKubernetesClusterConfig8452D313Attributes {
	return VirtualClusterConfigKubernetesClusterConfig8452D313Attributes{ref: ref}
}

func (c VirtualClusterConfigKubernetesClusterConfig8452D313Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c VirtualClusterConfigKubernetesClusterConfig8452D313Attributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("local_ssd_count"))
}

func (c VirtualClusterConfigKubernetesClusterConfig8452D313Attributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("machine_type"))
}

func (c VirtualClusterConfigKubernetesClusterConfig8452D313Attributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("min_cpu_platform"))
}

func (c VirtualClusterConfigKubernetesClusterConfig8452D313Attributes) Preemptible() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("preemptible"))
}

func (c VirtualClusterConfigKubernetesClusterConfig8452D313Attributes) Spot() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("spot"))
}

type VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigAttributes struct {
	ref terra.Reference
}

func (ksc VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigAttributes) InternalRef() (terra.Reference, error) {
	return ksc.ref, nil
}

func (ksc VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigAttributes) InternalWithRef(ref terra.Reference) VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigAttributes {
	return VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigAttributes{ref: ref}
}

func (ksc VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ksc.ref.InternalTokens()
}

func (ksc VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigAttributes) ComponentVersion() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ksc.ref.Append("component_version"))
}

func (ksc VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ksc.ref.Append("properties"))
}

type ClusterConfigState struct {
	Bucket                  string                                      `json:"bucket"`
	StagingBucket           string                                      `json:"staging_bucket"`
	TempBucket              string                                      `json:"temp_bucket"`
	AutoscalingConfig       []ClusterConfigAutoscalingConfigState       `json:"autoscaling_config"`
	AuxiliaryNodeGroups     []ClusterConfigAuxiliaryNodeGroupsState     `json:"auxiliary_node_groups"`
	DataprocMetricConfig    []ClusterConfigDataprocMetricConfigState    `json:"dataproc_metric_config"`
	EncryptionConfig        []ClusterConfigEncryptionConfigState        `json:"encryption_config"`
	EndpointConfig          []ClusterConfigEndpointConfigState          `json:"endpoint_config"`
	GceClusterConfig        []ClusterConfigGceClusterConfigState        `json:"gce_cluster_config"`
	InitializationAction    []ClusterConfigInitializationActionState    `json:"initialization_action"`
	LifecycleConfig         []ClusterConfigLifecycleConfigState         `json:"lifecycle_config"`
	MasterConfig            []ClusterConfigMasterConfigState            `json:"master_config"`
	MetastoreConfig         []ClusterConfigMetastoreConfigState         `json:"metastore_config"`
	PreemptibleWorkerConfig []ClusterConfigPreemptibleWorkerConfigState `json:"preemptible_worker_config"`
	SecurityConfig          []ClusterConfigSecurityConfigState          `json:"security_config"`
	SoftwareConfig          []ClusterConfigSoftwareConfigState          `json:"software_config"`
	WorkerConfig            []ClusterConfigWorkerConfigState            `json:"worker_config"`
}

type ClusterConfigAutoscalingConfigState struct {
	PolicyUri string `json:"policy_uri"`
}

type ClusterConfigAuxiliaryNodeGroupsState struct {
	NodeGroupId string                                           `json:"node_group_id"`
	NodeGroup   []ClusterConfigAuxiliaryNodeGroupsNodeGroupState `json:"node_group"`
}

type ClusterConfigAuxiliaryNodeGroupsNodeGroupState struct {
	Name            string                                                          `json:"name"`
	Roles           []string                                                        `json:"roles"`
	NodeGroupConfig []ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigState `json:"node_group_config"`
}

type ClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigState struct {
	InstanceNames  []string                                        `json:"instance_names"`
	MachineType    string                                          `json:"machine_type"`
	MinCpuPlatform string                                          `json:"min_cpu_platform"`
	NumInstances   float64                                         `json:"num_instances"`
	Accelerators   []ClusterConfigAuxiliaryNodeGroups5Cb8513CState `json:"accelerators"`
	DiskConfig     []ClusterConfigAuxiliaryNodeGroupsBc9Adbc6State `json:"disk_config"`
}

type ClusterConfigAuxiliaryNodeGroups5Cb8513CState struct {
	AcceleratorCount float64 `json:"accelerator_count"`
	AcceleratorType  string  `json:"accelerator_type"`
}

type ClusterConfigAuxiliaryNodeGroupsBc9Adbc6State struct {
	BootDiskSizeGb float64 `json:"boot_disk_size_gb"`
	BootDiskType   string  `json:"boot_disk_type"`
	NumLocalSsds   float64 `json:"num_local_ssds"`
}

type ClusterConfigDataprocMetricConfigState struct {
	Metrics []ClusterConfigDataprocMetricConfigMetricsState `json:"metrics"`
}

type ClusterConfigDataprocMetricConfigMetricsState struct {
	MetricOverrides []string `json:"metric_overrides"`
	MetricSource    string   `json:"metric_source"`
}

type ClusterConfigEncryptionConfigState struct {
	KmsKeyName string `json:"kms_key_name"`
}

type ClusterConfigEndpointConfigState struct {
	EnableHttpPortAccess bool              `json:"enable_http_port_access"`
	HttpPorts            map[string]string `json:"http_ports"`
}

type ClusterConfigGceClusterConfigState struct {
	InternalIpOnly         bool                                                       `json:"internal_ip_only"`
	Metadata               map[string]string                                          `json:"metadata"`
	Network                string                                                     `json:"network"`
	ServiceAccount         string                                                     `json:"service_account"`
	ServiceAccountScopes   []string                                                   `json:"service_account_scopes"`
	Subnetwork             string                                                     `json:"subnetwork"`
	Tags                   []string                                                   `json:"tags"`
	Zone                   string                                                     `json:"zone"`
	NodeGroupAffinity      []ClusterConfigGceClusterConfigNodeGroupAffinityState      `json:"node_group_affinity"`
	ReservationAffinity    []ClusterConfigGceClusterConfigReservationAffinityState    `json:"reservation_affinity"`
	ShieldedInstanceConfig []ClusterConfigGceClusterConfigShieldedInstanceConfigState `json:"shielded_instance_config"`
}

type ClusterConfigGceClusterConfigNodeGroupAffinityState struct {
	NodeGroupUri string `json:"node_group_uri"`
}

type ClusterConfigGceClusterConfigReservationAffinityState struct {
	ConsumeReservationType string   `json:"consume_reservation_type"`
	Key                    string   `json:"key"`
	Values                 []string `json:"values"`
}

type ClusterConfigGceClusterConfigShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
	EnableVtpm                bool `json:"enable_vtpm"`
}

type ClusterConfigInitializationActionState struct {
	Script     string  `json:"script"`
	TimeoutSec float64 `json:"timeout_sec"`
}

type ClusterConfigLifecycleConfigState struct {
	AutoDeleteTime string `json:"auto_delete_time"`
	IdleDeleteTtl  string `json:"idle_delete_ttl"`
	IdleStartTime  string `json:"idle_start_time"`
}

type ClusterConfigMasterConfigState struct {
	ImageUri       string                                       `json:"image_uri"`
	InstanceNames  []string                                     `json:"instance_names"`
	MachineType    string                                       `json:"machine_type"`
	MinCpuPlatform string                                       `json:"min_cpu_platform"`
	NumInstances   float64                                      `json:"num_instances"`
	Accelerators   []ClusterConfigMasterConfigAcceleratorsState `json:"accelerators"`
	DiskConfig     []ClusterConfigMasterConfigDiskConfigState   `json:"disk_config"`
}

type ClusterConfigMasterConfigAcceleratorsState struct {
	AcceleratorCount float64 `json:"accelerator_count"`
	AcceleratorType  string  `json:"accelerator_type"`
}

type ClusterConfigMasterConfigDiskConfigState struct {
	BootDiskSizeGb float64 `json:"boot_disk_size_gb"`
	BootDiskType   string  `json:"boot_disk_type"`
	NumLocalSsds   float64 `json:"num_local_ssds"`
}

type ClusterConfigMetastoreConfigState struct {
	DataprocMetastoreService string `json:"dataproc_metastore_service"`
}

type ClusterConfigPreemptibleWorkerConfigState struct {
	InstanceNames             []string                                                             `json:"instance_names"`
	NumInstances              float64                                                              `json:"num_instances"`
	Preemptibility            string                                                               `json:"preemptibility"`
	DiskConfig                []ClusterConfigPreemptibleWorkerConfigDiskConfigState                `json:"disk_config"`
	InstanceFlexibilityPolicy []ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyState `json:"instance_flexibility_policy"`
}

type ClusterConfigPreemptibleWorkerConfigDiskConfigState struct {
	BootDiskSizeGb float64 `json:"boot_disk_size_gb"`
	BootDiskType   string  `json:"boot_disk_type"`
	NumLocalSsds   float64 `json:"num_local_ssds"`
}

type ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyState struct {
	InstanceSelectionResults []ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsState `json:"instance_selection_results"`
	InstanceSelectionList    []ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListState    `json:"instance_selection_list"`
}

type ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsState struct {
	MachineType string  `json:"machine_type"`
	VmCount     float64 `json:"vm_count"`
}

type ClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListState struct {
	MachineTypes []string `json:"machine_types"`
	Rank         float64  `json:"rank"`
}

type ClusterConfigSecurityConfigState struct {
	KerberosConfig []ClusterConfigSecurityConfigKerberosConfigState `json:"kerberos_config"`
}

type ClusterConfigSecurityConfigKerberosConfigState struct {
	CrossRealmTrustAdminServer       string  `json:"cross_realm_trust_admin_server"`
	CrossRealmTrustKdc               string  `json:"cross_realm_trust_kdc"`
	CrossRealmTrustRealm             string  `json:"cross_realm_trust_realm"`
	CrossRealmTrustSharedPasswordUri string  `json:"cross_realm_trust_shared_password_uri"`
	EnableKerberos                   bool    `json:"enable_kerberos"`
	KdcDbKeyUri                      string  `json:"kdc_db_key_uri"`
	KeyPasswordUri                   string  `json:"key_password_uri"`
	KeystorePasswordUri              string  `json:"keystore_password_uri"`
	KeystoreUri                      string  `json:"keystore_uri"`
	KmsKeyUri                        string  `json:"kms_key_uri"`
	Realm                            string  `json:"realm"`
	RootPrincipalPasswordUri         string  `json:"root_principal_password_uri"`
	TgtLifetimeHours                 float64 `json:"tgt_lifetime_hours"`
	TruststorePasswordUri            string  `json:"truststore_password_uri"`
	TruststoreUri                    string  `json:"truststore_uri"`
}

type ClusterConfigSoftwareConfigState struct {
	ImageVersion       string            `json:"image_version"`
	OptionalComponents []string          `json:"optional_components"`
	OverrideProperties map[string]string `json:"override_properties"`
	Properties         map[string]string `json:"properties"`
}

type ClusterConfigWorkerConfigState struct {
	ImageUri        string                                       `json:"image_uri"`
	InstanceNames   []string                                     `json:"instance_names"`
	MachineType     string                                       `json:"machine_type"`
	MinCpuPlatform  string                                       `json:"min_cpu_platform"`
	MinNumInstances float64                                      `json:"min_num_instances"`
	NumInstances    float64                                      `json:"num_instances"`
	Accelerators    []ClusterConfigWorkerConfigAcceleratorsState `json:"accelerators"`
	DiskConfig      []ClusterConfigWorkerConfigDiskConfigState   `json:"disk_config"`
}

type ClusterConfigWorkerConfigAcceleratorsState struct {
	AcceleratorCount float64 `json:"accelerator_count"`
	AcceleratorType  string  `json:"accelerator_type"`
}

type ClusterConfigWorkerConfigDiskConfigState struct {
	BootDiskSizeGb float64 `json:"boot_disk_size_gb"`
	BootDiskType   string  `json:"boot_disk_type"`
	NumLocalSsds   float64 `json:"num_local_ssds"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VirtualClusterConfigState struct {
	StagingBucket           string                                             `json:"staging_bucket"`
	AuxiliaryServicesConfig []VirtualClusterConfigAuxiliaryServicesConfigState `json:"auxiliary_services_config"`
	KubernetesClusterConfig []VirtualClusterConfigKubernetesClusterConfigState `json:"kubernetes_cluster_config"`
}

type VirtualClusterConfigAuxiliaryServicesConfigState struct {
	MetastoreConfig          []VirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigState          `json:"metastore_config"`
	SparkHistoryServerConfig []VirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigState `json:"spark_history_server_config"`
}

type VirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigState struct {
	DataprocMetastoreService string `json:"dataproc_metastore_service"`
}

type VirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigState struct {
	DataprocCluster string `json:"dataproc_cluster"`
}

type VirtualClusterConfigKubernetesClusterConfigState struct {
	KubernetesNamespace      string                                                                     `json:"kubernetes_namespace"`
	GkeClusterConfig         []VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigState         `json:"gke_cluster_config"`
	KubernetesSoftwareConfig []VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigState `json:"kubernetes_software_config"`
}

type VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigState struct {
	GkeClusterTarget string                                                                           `json:"gke_cluster_target"`
	NodePoolTarget   []VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetState `json:"node_pool_target"`
}

type VirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetState struct {
	NodePool       string                                                     `json:"node_pool"`
	Roles          []string                                                   `json:"roles"`
	NodePoolConfig []VirtualClusterConfigKubernetesClusterConfigEb047906State `json:"node_pool_config"`
}

type VirtualClusterConfigKubernetesClusterConfigEb047906State struct {
	Locations   []string                                                   `json:"locations"`
	Autoscaling []VirtualClusterConfigKubernetesClusterConfigD9B06Fc7State `json:"autoscaling"`
	Config      []VirtualClusterConfigKubernetesClusterConfig8452D313State `json:"config"`
}

type VirtualClusterConfigKubernetesClusterConfigD9B06Fc7State struct {
	MaxNodeCount float64 `json:"max_node_count"`
	MinNodeCount float64 `json:"min_node_count"`
}

type VirtualClusterConfigKubernetesClusterConfig8452D313State struct {
	LocalSsdCount  float64 `json:"local_ssd_count"`
	MachineType    string  `json:"machine_type"`
	MinCpuPlatform string  `json:"min_cpu_platform"`
	Preemptible    bool    `json:"preemptible"`
	Spot           bool    `json:"spot"`
}

type VirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigState struct {
	ComponentVersion map[string]string `json:"component_version"`
	Properties       map[string]string `json:"properties"`
}
