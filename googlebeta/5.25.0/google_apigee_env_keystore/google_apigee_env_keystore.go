// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apigee_env_keystore

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_apigee_env_keystore.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApigeeEnvKeystoreState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gaek *Resource) Type() string {
	return "google_apigee_env_keystore"
}

// LocalName returns the local name for [Resource].
func (gaek *Resource) LocalName() string {
	return gaek.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gaek *Resource) Configuration() interface{} {
	return gaek.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gaek *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gaek)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gaek *Resource) Dependencies() terra.Dependencies {
	return gaek.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gaek *Resource) LifecycleManagement() *terra.Lifecycle {
	return gaek.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gaek *Resource) Attributes() googleApigeeEnvKeystoreAttributes {
	return googleApigeeEnvKeystoreAttributes{ref: terra.ReferenceResource(gaek)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gaek *Resource) ImportState(state io.Reader) error {
	gaek.state = &googleApigeeEnvKeystoreState{}
	if err := json.NewDecoder(state).Decode(gaek.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gaek.Type(), gaek.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gaek *Resource) State() (*googleApigeeEnvKeystoreState, bool) {
	return gaek.state, gaek.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gaek *Resource) StateMust() *googleApigeeEnvKeystoreState {
	if gaek.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gaek.Type(), gaek.LocalName()))
	}
	return gaek.state
}

// Args contains the configurations for google_apigee_env_keystore.
type Args struct {
	// EnvId: string, required
	EnvId terra.StringValue `hcl:"env_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApigeeEnvKeystoreAttributes struct {
	ref terra.Reference
}

// Aliases returns a reference to field aliases of google_apigee_env_keystore.
func (gaek googleApigeeEnvKeystoreAttributes) Aliases() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gaek.ref.Append("aliases"))
}

// EnvId returns a reference to field env_id of google_apigee_env_keystore.
func (gaek googleApigeeEnvKeystoreAttributes) EnvId() terra.StringValue {
	return terra.ReferenceAsString(gaek.ref.Append("env_id"))
}

// Id returns a reference to field id of google_apigee_env_keystore.
func (gaek googleApigeeEnvKeystoreAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gaek.ref.Append("id"))
}

// Name returns a reference to field name of google_apigee_env_keystore.
func (gaek googleApigeeEnvKeystoreAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gaek.ref.Append("name"))
}

func (gaek googleApigeeEnvKeystoreAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gaek.ref.Append("timeouts"))
}

type googleApigeeEnvKeystoreState struct {
	Aliases  []string       `json:"aliases"`
	EnvId    string         `json:"env_id"`
	Id       string         `json:"id"`
	Name     string         `json:"name"`
	Timeouts *TimeoutsState `json:"timeouts"`
}
