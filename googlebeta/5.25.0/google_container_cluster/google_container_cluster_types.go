// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_container_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AddonsConfig struct {
	// AddonsConfigCloudrunConfig: optional
	CloudrunConfig *AddonsConfigCloudrunConfig `hcl:"cloudrun_config,block"`
	// AddonsConfigConfigConnectorConfig: optional
	ConfigConnectorConfig *AddonsConfigConfigConnectorConfig `hcl:"config_connector_config,block"`
	// AddonsConfigDnsCacheConfig: optional
	DnsCacheConfig *AddonsConfigDnsCacheConfig `hcl:"dns_cache_config,block"`
	// AddonsConfigGcePersistentDiskCsiDriverConfig: optional
	GcePersistentDiskCsiDriverConfig *AddonsConfigGcePersistentDiskCsiDriverConfig `hcl:"gce_persistent_disk_csi_driver_config,block"`
	// AddonsConfigGcpFilestoreCsiDriverConfig: optional
	GcpFilestoreCsiDriverConfig *AddonsConfigGcpFilestoreCsiDriverConfig `hcl:"gcp_filestore_csi_driver_config,block"`
	// AddonsConfigGcsFuseCsiDriverConfig: optional
	GcsFuseCsiDriverConfig *AddonsConfigGcsFuseCsiDriverConfig `hcl:"gcs_fuse_csi_driver_config,block"`
	// AddonsConfigGkeBackupAgentConfig: optional
	GkeBackupAgentConfig *AddonsConfigGkeBackupAgentConfig `hcl:"gke_backup_agent_config,block"`
	// AddonsConfigHorizontalPodAutoscaling: optional
	HorizontalPodAutoscaling *AddonsConfigHorizontalPodAutoscaling `hcl:"horizontal_pod_autoscaling,block"`
	// AddonsConfigHttpLoadBalancing: optional
	HttpLoadBalancing *AddonsConfigHttpLoadBalancing `hcl:"http_load_balancing,block"`
	// AddonsConfigIstioConfig: optional
	IstioConfig *AddonsConfigIstioConfig `hcl:"istio_config,block"`
	// AddonsConfigKalmConfig: optional
	KalmConfig *AddonsConfigKalmConfig `hcl:"kalm_config,block"`
	// AddonsConfigNetworkPolicyConfig: optional
	NetworkPolicyConfig *AddonsConfigNetworkPolicyConfig `hcl:"network_policy_config,block"`
	// AddonsConfigStatefulHaConfig: optional
	StatefulHaConfig *AddonsConfigStatefulHaConfig `hcl:"stateful_ha_config,block"`
}

type AddonsConfigCloudrunConfig struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
	// LoadBalancerType: string, optional
	LoadBalancerType terra.StringValue `hcl:"load_balancer_type,attr"`
}

type AddonsConfigConfigConnectorConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type AddonsConfigDnsCacheConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type AddonsConfigGcePersistentDiskCsiDriverConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type AddonsConfigGcpFilestoreCsiDriverConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type AddonsConfigGcsFuseCsiDriverConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type AddonsConfigGkeBackupAgentConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type AddonsConfigHorizontalPodAutoscaling struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type AddonsConfigHttpLoadBalancing struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type AddonsConfigIstioConfig struct {
	// Auth: string, optional
	Auth terra.StringValue `hcl:"auth,attr"`
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type AddonsConfigKalmConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type AddonsConfigNetworkPolicyConfig struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type AddonsConfigStatefulHaConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type AuthenticatorGroupsConfig struct {
	// SecurityGroup: string, required
	SecurityGroup terra.StringValue `hcl:"security_group,attr" validate:"required"`
}

type BinaryAuthorization struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// EvaluationMode: string, optional
	EvaluationMode terra.StringValue `hcl:"evaluation_mode,attr"`
}

type ClusterAutoscaling struct {
	// AutoscalingProfile: string, optional
	AutoscalingProfile terra.StringValue `hcl:"autoscaling_profile,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// ClusterAutoscalingAutoProvisioningDefaults: optional
	AutoProvisioningDefaults *ClusterAutoscalingAutoProvisioningDefaults `hcl:"auto_provisioning_defaults,block"`
	// ClusterAutoscalingResourceLimits: min=0
	ResourceLimits []ClusterAutoscalingResourceLimits `hcl:"resource_limits,block" validate:"min=0"`
}

type ClusterAutoscalingAutoProvisioningDefaults struct {
	// BootDiskKmsKey: string, optional
	BootDiskKmsKey terra.StringValue `hcl:"boot_disk_kms_key,attr"`
	// DiskSize: number, optional
	DiskSize terra.NumberValue `hcl:"disk_size,attr"`
	// DiskType: string, optional
	DiskType terra.StringValue `hcl:"disk_type,attr"`
	// ImageType: string, optional
	ImageType terra.StringValue `hcl:"image_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// OauthScopes: list of string, optional
	OauthScopes terra.ListValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// ClusterAutoscalingAutoProvisioningDefaultsManagement: optional
	Management *ClusterAutoscalingAutoProvisioningDefaultsManagement `hcl:"management,block"`
	// ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig: optional
	ShieldedInstanceConfig *ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
	// ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings: optional
	UpgradeSettings *ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings `hcl:"upgrade_settings,block"`
}

type ClusterAutoscalingAutoProvisioningDefaultsManagement struct {
	// AutoRepair: bool, optional
	AutoRepair terra.BoolValue `hcl:"auto_repair,attr"`
	// AutoUpgrade: bool, optional
	AutoUpgrade terra.BoolValue `hcl:"auto_upgrade,attr"`
}

type ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
}

type ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings struct {
	// MaxSurge: number, optional
	MaxSurge terra.NumberValue `hcl:"max_surge,attr"`
	// MaxUnavailable: number, optional
	MaxUnavailable terra.NumberValue `hcl:"max_unavailable,attr"`
	// Strategy: string, optional
	Strategy terra.StringValue `hcl:"strategy,attr"`
	// ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings: optional
	BlueGreenSettings *ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings `hcl:"blue_green_settings,block"`
}

type ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings struct {
	// NodePoolSoakDuration: string, optional
	NodePoolSoakDuration terra.StringValue `hcl:"node_pool_soak_duration,attr"`
	// ClusterAutoscalingAutoProvisioningDefaultsF08F146E: optional
	StandardRolloutPolicy *ClusterAutoscalingAutoProvisioningDefaultsF08F146E `hcl:"standard_rollout_policy,block"`
}

type ClusterAutoscalingAutoProvisioningDefaultsF08F146E struct {
	// BatchNodeCount: number, optional
	BatchNodeCount terra.NumberValue `hcl:"batch_node_count,attr"`
	// BatchPercentage: number, optional
	BatchPercentage terra.NumberValue `hcl:"batch_percentage,attr"`
	// BatchSoakDuration: string, optional
	BatchSoakDuration terra.StringValue `hcl:"batch_soak_duration,attr"`
}

type ClusterAutoscalingResourceLimits struct {
	// Maximum: number, optional
	Maximum terra.NumberValue `hcl:"maximum,attr"`
	// Minimum: number, optional
	Minimum terra.NumberValue `hcl:"minimum,attr"`
	// ResourceType: string, required
	ResourceType terra.StringValue `hcl:"resource_type,attr" validate:"required"`
}

type ClusterTelemetry struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ConfidentialNodes struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type CostManagementConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type DatabaseEncryption struct {
	// KeyName: string, optional
	KeyName terra.StringValue `hcl:"key_name,attr"`
	// State: string, required
	State terra.StringValue `hcl:"state,attr" validate:"required"`
}

type DefaultSnatStatus struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type DnsConfig struct {
	// ClusterDns: string, optional
	ClusterDns terra.StringValue `hcl:"cluster_dns,attr"`
	// ClusterDnsDomain: string, optional
	ClusterDnsDomain terra.StringValue `hcl:"cluster_dns_domain,attr"`
	// ClusterDnsScope: string, optional
	ClusterDnsScope terra.StringValue `hcl:"cluster_dns_scope,attr"`
}

type EnableK8SBetaApis struct {
	// EnabledApis: set of string, required
	EnabledApis terra.SetValue[terra.StringValue] `hcl:"enabled_apis,attr" validate:"required"`
}

type Fleet struct {
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}

type GatewayApiConfig struct {
	// Channel: string, required
	Channel terra.StringValue `hcl:"channel,attr" validate:"required"`
}

type IdentityServiceConfig struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type IpAllocationPolicy struct {
	// ClusterIpv4CidrBlock: string, optional
	ClusterIpv4CidrBlock terra.StringValue `hcl:"cluster_ipv4_cidr_block,attr"`
	// ClusterSecondaryRangeName: string, optional
	ClusterSecondaryRangeName terra.StringValue `hcl:"cluster_secondary_range_name,attr"`
	// ServicesIpv4CidrBlock: string, optional
	ServicesIpv4CidrBlock terra.StringValue `hcl:"services_ipv4_cidr_block,attr"`
	// ServicesSecondaryRangeName: string, optional
	ServicesSecondaryRangeName terra.StringValue `hcl:"services_secondary_range_name,attr"`
	// StackType: string, optional
	StackType terra.StringValue `hcl:"stack_type,attr"`
	// IpAllocationPolicyAdditionalPodRangesConfig: optional
	AdditionalPodRangesConfig *IpAllocationPolicyAdditionalPodRangesConfig `hcl:"additional_pod_ranges_config,block"`
	// IpAllocationPolicyPodCidrOverprovisionConfig: optional
	PodCidrOverprovisionConfig *IpAllocationPolicyPodCidrOverprovisionConfig `hcl:"pod_cidr_overprovision_config,block"`
}

type IpAllocationPolicyAdditionalPodRangesConfig struct {
	// PodRangeNames: set of string, required
	PodRangeNames terra.SetValue[terra.StringValue] `hcl:"pod_range_names,attr" validate:"required"`
}

type IpAllocationPolicyPodCidrOverprovisionConfig struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type LoggingConfig struct {
	// EnableComponents: list of string, required
	EnableComponents terra.ListValue[terra.StringValue] `hcl:"enable_components,attr" validate:"required"`
}

type MaintenancePolicy struct {
	// MaintenancePolicyDailyMaintenanceWindow: optional
	DailyMaintenanceWindow *MaintenancePolicyDailyMaintenanceWindow `hcl:"daily_maintenance_window,block"`
	// MaintenancePolicyMaintenanceExclusion: min=0,max=20
	MaintenanceExclusion []MaintenancePolicyMaintenanceExclusion `hcl:"maintenance_exclusion,block" validate:"min=0,max=20"`
	// MaintenancePolicyRecurringWindow: optional
	RecurringWindow *MaintenancePolicyRecurringWindow `hcl:"recurring_window,block"`
}

type MaintenancePolicyDailyMaintenanceWindow struct {
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
}

type MaintenancePolicyMaintenanceExclusion struct {
	// EndTime: string, required
	EndTime terra.StringValue `hcl:"end_time,attr" validate:"required"`
	// ExclusionName: string, required
	ExclusionName terra.StringValue `hcl:"exclusion_name,attr" validate:"required"`
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
	// MaintenancePolicyMaintenanceExclusionExclusionOptions: optional
	ExclusionOptions *MaintenancePolicyMaintenanceExclusionExclusionOptions `hcl:"exclusion_options,block"`
}

type MaintenancePolicyMaintenanceExclusionExclusionOptions struct {
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
}

type MaintenancePolicyRecurringWindow struct {
	// EndTime: string, required
	EndTime terra.StringValue `hcl:"end_time,attr" validate:"required"`
	// Recurrence: string, required
	Recurrence terra.StringValue `hcl:"recurrence,attr" validate:"required"`
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
}

type MasterAuth struct {
	// MasterAuthClientCertificateConfig: required
	ClientCertificateConfig *MasterAuthClientCertificateConfig `hcl:"client_certificate_config,block" validate:"required"`
}

type MasterAuthClientCertificateConfig struct {
	// IssueClientCertificate: bool, required
	IssueClientCertificate terra.BoolValue `hcl:"issue_client_certificate,attr" validate:"required"`
}

type MasterAuthorizedNetworksConfig struct {
	// GcpPublicCidrsAccessEnabled: bool, optional
	GcpPublicCidrsAccessEnabled terra.BoolValue `hcl:"gcp_public_cidrs_access_enabled,attr"`
	// MasterAuthorizedNetworksConfigCidrBlocks: min=0
	CidrBlocks []MasterAuthorizedNetworksConfigCidrBlocks `hcl:"cidr_blocks,block" validate:"min=0"`
}

type MasterAuthorizedNetworksConfigCidrBlocks struct {
	// CidrBlock: string, required
	CidrBlock terra.StringValue `hcl:"cidr_block,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
}

type MeshCertificates struct {
	// EnableCertificates: bool, required
	EnableCertificates terra.BoolValue `hcl:"enable_certificates,attr" validate:"required"`
}

type MonitoringConfig struct {
	// EnableComponents: list of string, optional
	EnableComponents terra.ListValue[terra.StringValue] `hcl:"enable_components,attr"`
	// MonitoringConfigAdvancedDatapathObservabilityConfig: optional
	AdvancedDatapathObservabilityConfig *MonitoringConfigAdvancedDatapathObservabilityConfig `hcl:"advanced_datapath_observability_config,block"`
	// MonitoringConfigManagedPrometheus: optional
	ManagedPrometheus *MonitoringConfigManagedPrometheus `hcl:"managed_prometheus,block"`
}

type MonitoringConfigAdvancedDatapathObservabilityConfig struct {
	// EnableMetrics: bool, required
	EnableMetrics terra.BoolValue `hcl:"enable_metrics,attr" validate:"required"`
	// EnableRelay: bool, optional
	EnableRelay terra.BoolValue `hcl:"enable_relay,attr"`
	// RelayMode: string, optional
	RelayMode terra.StringValue `hcl:"relay_mode,attr"`
}

type MonitoringConfigManagedPrometheus struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NetworkPolicy struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Provider: string, optional
	Provider terra.StringValue `hcl:"provider,attr"`
}

type NodeConfig struct {
	// BootDiskKmsKey: string, optional
	BootDiskKmsKey terra.StringValue `hcl:"boot_disk_kms_key,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// DiskType: string, optional
	DiskType terra.StringValue `hcl:"disk_type,attr"`
	// EnableConfidentialStorage: bool, optional
	EnableConfidentialStorage terra.BoolValue `hcl:"enable_confidential_storage,attr"`
	// ImageType: string, optional
	ImageType terra.StringValue `hcl:"image_type,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LocalSsdCount: number, optional
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr"`
	// LoggingVariant: string, optional
	LoggingVariant terra.StringValue `hcl:"logging_variant,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NodeGroup: string, optional
	NodeGroup terra.StringValue `hcl:"node_group,attr"`
	// OauthScopes: set of string, optional
	OauthScopes terra.SetValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
	// Preemptible: bool, optional
	Preemptible terra.BoolValue `hcl:"preemptible,attr"`
	// ResourceLabels: map of string, optional
	ResourceLabels terra.MapValue[terra.StringValue] `hcl:"resource_labels,attr"`
	// ResourceManagerTags: map of string, optional
	ResourceManagerTags terra.MapValue[terra.StringValue] `hcl:"resource_manager_tags,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// Spot: bool, optional
	Spot terra.BoolValue `hcl:"spot,attr"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
	// NodeConfigGuestAccelerator: min=0
	GuestAccelerator []NodeConfigGuestAccelerator `hcl:"guest_accelerator,block" validate:"min=0"`
	// NodeConfigAdvancedMachineFeatures: optional
	AdvancedMachineFeatures *NodeConfigAdvancedMachineFeatures `hcl:"advanced_machine_features,block"`
	// NodeConfigConfidentialNodes: optional
	ConfidentialNodes *NodeConfigConfidentialNodes `hcl:"confidential_nodes,block"`
	// NodeConfigEphemeralStorageConfig: optional
	EphemeralStorageConfig *NodeConfigEphemeralStorageConfig `hcl:"ephemeral_storage_config,block"`
	// NodeConfigEphemeralStorageLocalSsdConfig: optional
	EphemeralStorageLocalSsdConfig *NodeConfigEphemeralStorageLocalSsdConfig `hcl:"ephemeral_storage_local_ssd_config,block"`
	// NodeConfigFastSocket: optional
	FastSocket *NodeConfigFastSocket `hcl:"fast_socket,block"`
	// NodeConfigGcfsConfig: optional
	GcfsConfig *NodeConfigGcfsConfig `hcl:"gcfs_config,block"`
	// NodeConfigGvnic: optional
	Gvnic *NodeConfigGvnic `hcl:"gvnic,block"`
	// NodeConfigHostMaintenancePolicy: optional
	HostMaintenancePolicy *NodeConfigHostMaintenancePolicy `hcl:"host_maintenance_policy,block"`
	// NodeConfigKubeletConfig: optional
	KubeletConfig *NodeConfigKubeletConfig `hcl:"kubelet_config,block"`
	// NodeConfigLinuxNodeConfig: optional
	LinuxNodeConfig *NodeConfigLinuxNodeConfig `hcl:"linux_node_config,block"`
	// NodeConfigLocalNvmeSsdBlockConfig: optional
	LocalNvmeSsdBlockConfig *NodeConfigLocalNvmeSsdBlockConfig `hcl:"local_nvme_ssd_block_config,block"`
	// NodeConfigReservationAffinity: optional
	ReservationAffinity *NodeConfigReservationAffinity `hcl:"reservation_affinity,block"`
	// NodeConfigSandboxConfig: optional
	SandboxConfig *NodeConfigSandboxConfig `hcl:"sandbox_config,block"`
	// NodeConfigShieldedInstanceConfig: optional
	ShieldedInstanceConfig *NodeConfigShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
	// NodeConfigSoleTenantConfig: optional
	SoleTenantConfig *NodeConfigSoleTenantConfig `hcl:"sole_tenant_config,block"`
	// NodeConfigTaint: min=0
	Taint []NodeConfigTaint `hcl:"taint,block" validate:"min=0"`
	// NodeConfigWorkloadMetadataConfig: optional
	WorkloadMetadataConfig *NodeConfigWorkloadMetadataConfig `hcl:"workload_metadata_config,block"`
}

type NodeConfigGuestAccelerator struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// GpuPartitionSize: string, optional
	GpuPartitionSize terra.StringValue `hcl:"gpu_partition_size,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// NodeConfigGuestAcceleratorGpuDriverInstallationConfig: min=0
	GpuDriverInstallationConfig []NodeConfigGuestAcceleratorGpuDriverInstallationConfig `hcl:"gpu_driver_installation_config,block" validate:"min=0"`
	// NodeConfigGuestAcceleratorGpuSharingConfig: min=0
	GpuSharingConfig []NodeConfigGuestAcceleratorGpuSharingConfig `hcl:"gpu_sharing_config,block" validate:"min=0"`
}

type NodeConfigGuestAcceleratorGpuDriverInstallationConfig struct {
	// GpuDriverVersion: string, optional
	GpuDriverVersion terra.StringValue `hcl:"gpu_driver_version,attr"`
}

type NodeConfigGuestAcceleratorGpuSharingConfig struct {
	// GpuSharingStrategy: string, optional
	GpuSharingStrategy terra.StringValue `hcl:"gpu_sharing_strategy,attr"`
	// MaxSharedClientsPerGpu: number, optional
	MaxSharedClientsPerGpu terra.NumberValue `hcl:"max_shared_clients_per_gpu,attr"`
}

type NodeConfigAdvancedMachineFeatures struct {
	// ThreadsPerCore: number, required
	ThreadsPerCore terra.NumberValue `hcl:"threads_per_core,attr" validate:"required"`
}

type NodeConfigConfidentialNodes struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodeConfigEphemeralStorageConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodeConfigEphemeralStorageLocalSsdConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodeConfigFastSocket struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodeConfigGcfsConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodeConfigGvnic struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodeConfigHostMaintenancePolicy struct {
	// MaintenanceInterval: string, required
	MaintenanceInterval terra.StringValue `hcl:"maintenance_interval,attr" validate:"required"`
}

type NodeConfigKubeletConfig struct {
	// CpuCfsQuota: bool, optional
	CpuCfsQuota terra.BoolValue `hcl:"cpu_cfs_quota,attr"`
	// CpuCfsQuotaPeriod: string, optional
	CpuCfsQuotaPeriod terra.StringValue `hcl:"cpu_cfs_quota_period,attr"`
	// CpuManagerPolicy: string, required
	CpuManagerPolicy terra.StringValue `hcl:"cpu_manager_policy,attr" validate:"required"`
	// PodPidsLimit: number, optional
	PodPidsLimit terra.NumberValue `hcl:"pod_pids_limit,attr"`
}

type NodeConfigLinuxNodeConfig struct {
	// CgroupMode: string, optional
	CgroupMode terra.StringValue `hcl:"cgroup_mode,attr"`
	// Sysctls: map of string, optional
	Sysctls terra.MapValue[terra.StringValue] `hcl:"sysctls,attr"`
}

type NodeConfigLocalNvmeSsdBlockConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodeConfigReservationAffinity struct {
	// ConsumeReservationType: string, required
	ConsumeReservationType terra.StringValue `hcl:"consume_reservation_type,attr" validate:"required"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type NodeConfigSandboxConfig struct {
	// SandboxType: string, required
	SandboxType terra.StringValue `hcl:"sandbox_type,attr" validate:"required"`
}

type NodeConfigShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
}

type NodeConfigSoleTenantConfig struct {
	// NodeConfigSoleTenantConfigNodeAffinity: min=1
	NodeAffinity []NodeConfigSoleTenantConfigNodeAffinity `hcl:"node_affinity,block" validate:"min=1"`
}

type NodeConfigSoleTenantConfigNodeAffinity struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type NodeConfigTaint struct {
	// Effect: string, required
	Effect terra.StringValue `hcl:"effect,attr" validate:"required"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type NodeConfigWorkloadMetadataConfig struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type NodePool struct {
	// InitialNodeCount: number, optional
	InitialNodeCount terra.NumberValue `hcl:"initial_node_count,attr"`
	// MaxPodsPerNode: number, optional
	MaxPodsPerNode terra.NumberValue `hcl:"max_pods_per_node,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// NodeCount: number, optional
	NodeCount terra.NumberValue `hcl:"node_count,attr"`
	// NodeLocations: set of string, optional
	NodeLocations terra.SetValue[terra.StringValue] `hcl:"node_locations,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// NodePoolAutoscaling: optional
	Autoscaling *NodePoolAutoscaling `hcl:"autoscaling,block"`
	// NodePoolManagement: optional
	Management *NodePoolManagement `hcl:"management,block"`
	// NodePoolNetworkConfig: optional
	NetworkConfig *NodePoolNetworkConfig `hcl:"network_config,block"`
	// NodePoolNodeConfig: optional
	NodeConfig *NodePoolNodeConfig `hcl:"node_config,block"`
	// NodePoolPlacementPolicy: optional
	PlacementPolicy *NodePoolPlacementPolicy `hcl:"placement_policy,block"`
	// NodePoolQueuedProvisioning: optional
	QueuedProvisioning *NodePoolQueuedProvisioning `hcl:"queued_provisioning,block"`
	// NodePoolUpgradeSettings: optional
	UpgradeSettings *NodePoolUpgradeSettings `hcl:"upgrade_settings,block"`
}

type NodePoolAutoscaling struct {
	// LocationPolicy: string, optional
	LocationPolicy terra.StringValue `hcl:"location_policy,attr"`
	// MaxNodeCount: number, optional
	MaxNodeCount terra.NumberValue `hcl:"max_node_count,attr"`
	// MinNodeCount: number, optional
	MinNodeCount terra.NumberValue `hcl:"min_node_count,attr"`
	// TotalMaxNodeCount: number, optional
	TotalMaxNodeCount terra.NumberValue `hcl:"total_max_node_count,attr"`
	// TotalMinNodeCount: number, optional
	TotalMinNodeCount terra.NumberValue `hcl:"total_min_node_count,attr"`
}

type NodePoolManagement struct {
	// AutoRepair: bool, optional
	AutoRepair terra.BoolValue `hcl:"auto_repair,attr"`
	// AutoUpgrade: bool, optional
	AutoUpgrade terra.BoolValue `hcl:"auto_upgrade,attr"`
}

type NodePoolNetworkConfig struct {
	// CreatePodRange: bool, optional
	CreatePodRange terra.BoolValue `hcl:"create_pod_range,attr"`
	// EnablePrivateNodes: bool, optional
	EnablePrivateNodes terra.BoolValue `hcl:"enable_private_nodes,attr"`
	// PodIpv4CidrBlock: string, optional
	PodIpv4CidrBlock terra.StringValue `hcl:"pod_ipv4_cidr_block,attr"`
	// PodRange: string, optional
	PodRange terra.StringValue `hcl:"pod_range,attr"`
	// NodePoolNetworkConfigAdditionalNodeNetworkConfigs: min=0
	AdditionalNodeNetworkConfigs []NodePoolNetworkConfigAdditionalNodeNetworkConfigs `hcl:"additional_node_network_configs,block" validate:"min=0"`
	// NodePoolNetworkConfigAdditionalPodNetworkConfigs: min=0
	AdditionalPodNetworkConfigs []NodePoolNetworkConfigAdditionalPodNetworkConfigs `hcl:"additional_pod_network_configs,block" validate:"min=0"`
	// NodePoolNetworkConfigNetworkPerformanceConfig: optional
	NetworkPerformanceConfig *NodePoolNetworkConfigNetworkPerformanceConfig `hcl:"network_performance_config,block"`
	// NodePoolNetworkConfigPodCidrOverprovisionConfig: optional
	PodCidrOverprovisionConfig *NodePoolNetworkConfigPodCidrOverprovisionConfig `hcl:"pod_cidr_overprovision_config,block"`
}

type NodePoolNetworkConfigAdditionalNodeNetworkConfigs struct {
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
}

type NodePoolNetworkConfigAdditionalPodNetworkConfigs struct {
	// MaxPodsPerNode: number, optional
	MaxPodsPerNode terra.NumberValue `hcl:"max_pods_per_node,attr"`
	// SecondaryPodRange: string, optional
	SecondaryPodRange terra.StringValue `hcl:"secondary_pod_range,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
}

type NodePoolNetworkConfigNetworkPerformanceConfig struct {
	// TotalEgressBandwidthTier: string, required
	TotalEgressBandwidthTier terra.StringValue `hcl:"total_egress_bandwidth_tier,attr" validate:"required"`
}

type NodePoolNetworkConfigPodCidrOverprovisionConfig struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type NodePoolNodeConfig struct {
	// BootDiskKmsKey: string, optional
	BootDiskKmsKey terra.StringValue `hcl:"boot_disk_kms_key,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// DiskType: string, optional
	DiskType terra.StringValue `hcl:"disk_type,attr"`
	// EnableConfidentialStorage: bool, optional
	EnableConfidentialStorage terra.BoolValue `hcl:"enable_confidential_storage,attr"`
	// ImageType: string, optional
	ImageType terra.StringValue `hcl:"image_type,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LocalSsdCount: number, optional
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr"`
	// LoggingVariant: string, optional
	LoggingVariant terra.StringValue `hcl:"logging_variant,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NodeGroup: string, optional
	NodeGroup terra.StringValue `hcl:"node_group,attr"`
	// OauthScopes: set of string, optional
	OauthScopes terra.SetValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
	// Preemptible: bool, optional
	Preemptible terra.BoolValue `hcl:"preemptible,attr"`
	// ResourceLabels: map of string, optional
	ResourceLabels terra.MapValue[terra.StringValue] `hcl:"resource_labels,attr"`
	// ResourceManagerTags: map of string, optional
	ResourceManagerTags terra.MapValue[terra.StringValue] `hcl:"resource_manager_tags,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// Spot: bool, optional
	Spot terra.BoolValue `hcl:"spot,attr"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
	// NodePoolNodeConfigGuestAccelerator: min=0
	GuestAccelerator []NodePoolNodeConfigGuestAccelerator `hcl:"guest_accelerator,block" validate:"min=0"`
	// NodePoolNodeConfigAdvancedMachineFeatures: optional
	AdvancedMachineFeatures *NodePoolNodeConfigAdvancedMachineFeatures `hcl:"advanced_machine_features,block"`
	// NodePoolNodeConfigConfidentialNodes: optional
	ConfidentialNodes *NodePoolNodeConfigConfidentialNodes `hcl:"confidential_nodes,block"`
	// NodePoolNodeConfigEphemeralStorageConfig: optional
	EphemeralStorageConfig *NodePoolNodeConfigEphemeralStorageConfig `hcl:"ephemeral_storage_config,block"`
	// NodePoolNodeConfigEphemeralStorageLocalSsdConfig: optional
	EphemeralStorageLocalSsdConfig *NodePoolNodeConfigEphemeralStorageLocalSsdConfig `hcl:"ephemeral_storage_local_ssd_config,block"`
	// NodePoolNodeConfigFastSocket: optional
	FastSocket *NodePoolNodeConfigFastSocket `hcl:"fast_socket,block"`
	// NodePoolNodeConfigGcfsConfig: optional
	GcfsConfig *NodePoolNodeConfigGcfsConfig `hcl:"gcfs_config,block"`
	// NodePoolNodeConfigGvnic: optional
	Gvnic *NodePoolNodeConfigGvnic `hcl:"gvnic,block"`
	// NodePoolNodeConfigHostMaintenancePolicy: optional
	HostMaintenancePolicy *NodePoolNodeConfigHostMaintenancePolicy `hcl:"host_maintenance_policy,block"`
	// NodePoolNodeConfigKubeletConfig: optional
	KubeletConfig *NodePoolNodeConfigKubeletConfig `hcl:"kubelet_config,block"`
	// NodePoolNodeConfigLinuxNodeConfig: optional
	LinuxNodeConfig *NodePoolNodeConfigLinuxNodeConfig `hcl:"linux_node_config,block"`
	// NodePoolNodeConfigLocalNvmeSsdBlockConfig: optional
	LocalNvmeSsdBlockConfig *NodePoolNodeConfigLocalNvmeSsdBlockConfig `hcl:"local_nvme_ssd_block_config,block"`
	// NodePoolNodeConfigReservationAffinity: optional
	ReservationAffinity *NodePoolNodeConfigReservationAffinity `hcl:"reservation_affinity,block"`
	// NodePoolNodeConfigSandboxConfig: optional
	SandboxConfig *NodePoolNodeConfigSandboxConfig `hcl:"sandbox_config,block"`
	// NodePoolNodeConfigShieldedInstanceConfig: optional
	ShieldedInstanceConfig *NodePoolNodeConfigShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
	// NodePoolNodeConfigSoleTenantConfig: optional
	SoleTenantConfig *NodePoolNodeConfigSoleTenantConfig `hcl:"sole_tenant_config,block"`
	// NodePoolNodeConfigTaint: min=0
	Taint []NodePoolNodeConfigTaint `hcl:"taint,block" validate:"min=0"`
	// NodePoolNodeConfigWorkloadMetadataConfig: optional
	WorkloadMetadataConfig *NodePoolNodeConfigWorkloadMetadataConfig `hcl:"workload_metadata_config,block"`
}

type NodePoolNodeConfigGuestAccelerator struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// GpuPartitionSize: string, optional
	GpuPartitionSize terra.StringValue `hcl:"gpu_partition_size,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig: min=0
	GpuDriverInstallationConfig []NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig `hcl:"gpu_driver_installation_config,block" validate:"min=0"`
	// NodePoolNodeConfigGuestAcceleratorGpuSharingConfig: min=0
	GpuSharingConfig []NodePoolNodeConfigGuestAcceleratorGpuSharingConfig `hcl:"gpu_sharing_config,block" validate:"min=0"`
}

type NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig struct {
	// GpuDriverVersion: string, optional
	GpuDriverVersion terra.StringValue `hcl:"gpu_driver_version,attr"`
}

type NodePoolNodeConfigGuestAcceleratorGpuSharingConfig struct {
	// GpuSharingStrategy: string, optional
	GpuSharingStrategy terra.StringValue `hcl:"gpu_sharing_strategy,attr"`
	// MaxSharedClientsPerGpu: number, optional
	MaxSharedClientsPerGpu terra.NumberValue `hcl:"max_shared_clients_per_gpu,attr"`
}

type NodePoolNodeConfigAdvancedMachineFeatures struct {
	// ThreadsPerCore: number, required
	ThreadsPerCore terra.NumberValue `hcl:"threads_per_core,attr" validate:"required"`
}

type NodePoolNodeConfigConfidentialNodes struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodePoolNodeConfigEphemeralStorageConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodePoolNodeConfigEphemeralStorageLocalSsdConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodePoolNodeConfigFastSocket struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodePoolNodeConfigGcfsConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodePoolNodeConfigGvnic struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodePoolNodeConfigHostMaintenancePolicy struct {
	// MaintenanceInterval: string, required
	MaintenanceInterval terra.StringValue `hcl:"maintenance_interval,attr" validate:"required"`
}

type NodePoolNodeConfigKubeletConfig struct {
	// CpuCfsQuota: bool, optional
	CpuCfsQuota terra.BoolValue `hcl:"cpu_cfs_quota,attr"`
	// CpuCfsQuotaPeriod: string, optional
	CpuCfsQuotaPeriod terra.StringValue `hcl:"cpu_cfs_quota_period,attr"`
	// CpuManagerPolicy: string, required
	CpuManagerPolicy terra.StringValue `hcl:"cpu_manager_policy,attr" validate:"required"`
	// PodPidsLimit: number, optional
	PodPidsLimit terra.NumberValue `hcl:"pod_pids_limit,attr"`
}

type NodePoolNodeConfigLinuxNodeConfig struct {
	// CgroupMode: string, optional
	CgroupMode terra.StringValue `hcl:"cgroup_mode,attr"`
	// Sysctls: map of string, optional
	Sysctls terra.MapValue[terra.StringValue] `hcl:"sysctls,attr"`
}

type NodePoolNodeConfigLocalNvmeSsdBlockConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodePoolNodeConfigReservationAffinity struct {
	// ConsumeReservationType: string, required
	ConsumeReservationType terra.StringValue `hcl:"consume_reservation_type,attr" validate:"required"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type NodePoolNodeConfigSandboxConfig struct {
	// SandboxType: string, required
	SandboxType terra.StringValue `hcl:"sandbox_type,attr" validate:"required"`
}

type NodePoolNodeConfigShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
}

type NodePoolNodeConfigSoleTenantConfig struct {
	// NodePoolNodeConfigSoleTenantConfigNodeAffinity: min=1
	NodeAffinity []NodePoolNodeConfigSoleTenantConfigNodeAffinity `hcl:"node_affinity,block" validate:"min=1"`
}

type NodePoolNodeConfigSoleTenantConfigNodeAffinity struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type NodePoolNodeConfigTaint struct {
	// Effect: string, required
	Effect terra.StringValue `hcl:"effect,attr" validate:"required"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type NodePoolNodeConfigWorkloadMetadataConfig struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type NodePoolPlacementPolicy struct {
	// PolicyName: string, optional
	PolicyName terra.StringValue `hcl:"policy_name,attr"`
	// TpuTopology: string, optional
	TpuTopology terra.StringValue `hcl:"tpu_topology,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type NodePoolQueuedProvisioning struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodePoolUpgradeSettings struct {
	// MaxSurge: number, optional
	MaxSurge terra.NumberValue `hcl:"max_surge,attr"`
	// MaxUnavailable: number, optional
	MaxUnavailable terra.NumberValue `hcl:"max_unavailable,attr"`
	// Strategy: string, optional
	Strategy terra.StringValue `hcl:"strategy,attr"`
	// NodePoolUpgradeSettingsBlueGreenSettings: optional
	BlueGreenSettings *NodePoolUpgradeSettingsBlueGreenSettings `hcl:"blue_green_settings,block"`
}

type NodePoolUpgradeSettingsBlueGreenSettings struct {
	// NodePoolSoakDuration: string, optional
	NodePoolSoakDuration terra.StringValue `hcl:"node_pool_soak_duration,attr"`
	// NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy: required
	StandardRolloutPolicy *NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy `hcl:"standard_rollout_policy,block" validate:"required"`
}

type NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy struct {
	// BatchNodeCount: number, optional
	BatchNodeCount terra.NumberValue `hcl:"batch_node_count,attr"`
	// BatchPercentage: number, optional
	BatchPercentage terra.NumberValue `hcl:"batch_percentage,attr"`
	// BatchSoakDuration: string, optional
	BatchSoakDuration terra.StringValue `hcl:"batch_soak_duration,attr"`
}

type NodePoolAutoConfig struct {
	// ResourceManagerTags: map of string, optional
	ResourceManagerTags terra.MapValue[terra.StringValue] `hcl:"resource_manager_tags,attr"`
	// NodePoolAutoConfigNetworkTags: optional
	NetworkTags *NodePoolAutoConfigNetworkTags `hcl:"network_tags,block"`
}

type NodePoolAutoConfigNetworkTags struct {
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
}

type NodePoolDefaults struct {
	// NodePoolDefaultsNodeConfigDefaults: optional
	NodeConfigDefaults *NodePoolDefaultsNodeConfigDefaults `hcl:"node_config_defaults,block"`
}

type NodePoolDefaultsNodeConfigDefaults struct {
	// LoggingVariant: string, optional
	LoggingVariant terra.StringValue `hcl:"logging_variant,attr"`
	// NodePoolDefaultsNodeConfigDefaultsGcfsConfig: optional
	GcfsConfig *NodePoolDefaultsNodeConfigDefaultsGcfsConfig `hcl:"gcfs_config,block"`
}

type NodePoolDefaultsNodeConfigDefaultsGcfsConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NotificationConfig struct {
	// NotificationConfigPubsub: required
	Pubsub *NotificationConfigPubsub `hcl:"pubsub,block" validate:"required"`
}

type NotificationConfigPubsub struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Topic: string, optional
	Topic terra.StringValue `hcl:"topic,attr"`
	// NotificationConfigPubsubFilter: optional
	Filter *NotificationConfigPubsubFilter `hcl:"filter,block"`
}

type NotificationConfigPubsubFilter struct {
	// EventType: list of string, required
	EventType terra.ListValue[terra.StringValue] `hcl:"event_type,attr" validate:"required"`
}

type PodSecurityPolicyConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type PrivateClusterConfig struct {
	// EnablePrivateEndpoint: bool, optional
	EnablePrivateEndpoint terra.BoolValue `hcl:"enable_private_endpoint,attr"`
	// EnablePrivateNodes: bool, optional
	EnablePrivateNodes terra.BoolValue `hcl:"enable_private_nodes,attr"`
	// MasterIpv4CidrBlock: string, optional
	MasterIpv4CidrBlock terra.StringValue `hcl:"master_ipv4_cidr_block,attr"`
	// PrivateEndpointSubnetwork: string, optional
	PrivateEndpointSubnetwork terra.StringValue `hcl:"private_endpoint_subnetwork,attr"`
	// PrivateClusterConfigMasterGlobalAccessConfig: optional
	MasterGlobalAccessConfig *PrivateClusterConfigMasterGlobalAccessConfig `hcl:"master_global_access_config,block"`
}

type PrivateClusterConfigMasterGlobalAccessConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type ProtectConfig struct {
	// WorkloadVulnerabilityMode: string, optional
	WorkloadVulnerabilityMode terra.StringValue `hcl:"workload_vulnerability_mode,attr"`
	// ProtectConfigWorkloadConfig: optional
	WorkloadConfig *ProtectConfigWorkloadConfig `hcl:"workload_config,block"`
}

type ProtectConfigWorkloadConfig struct {
	// AuditMode: string, required
	AuditMode terra.StringValue `hcl:"audit_mode,attr" validate:"required"`
}

type ReleaseChannel struct {
	// Channel: string, required
	Channel terra.StringValue `hcl:"channel,attr" validate:"required"`
}

type ResourceUsageExportConfig struct {
	// EnableNetworkEgressMetering: bool, optional
	EnableNetworkEgressMetering terra.BoolValue `hcl:"enable_network_egress_metering,attr"`
	// EnableResourceConsumptionMetering: bool, optional
	EnableResourceConsumptionMetering terra.BoolValue `hcl:"enable_resource_consumption_metering,attr"`
	// ResourceUsageExportConfigBigqueryDestination: required
	BigqueryDestination *ResourceUsageExportConfigBigqueryDestination `hcl:"bigquery_destination,block" validate:"required"`
}

type ResourceUsageExportConfigBigqueryDestination struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
}

type SecurityPostureConfig struct {
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// VulnerabilityMode: string, optional
	VulnerabilityMode terra.StringValue `hcl:"vulnerability_mode,attr"`
}

type ServiceExternalIpsConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type TpuConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// UseServiceNetworking: bool, optional
	UseServiceNetworking terra.BoolValue `hcl:"use_service_networking,attr"`
}

type VerticalPodAutoscaling struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type WorkloadAltsConfig struct {
	// EnableAlts: bool, required
	EnableAlts terra.BoolValue `hcl:"enable_alts,attr" validate:"required"`
}

type WorkloadIdentityConfig struct {
	// WorkloadPool: string, optional
	WorkloadPool terra.StringValue `hcl:"workload_pool,attr"`
}

type AddonsConfigAttributes struct {
	ref terra.Reference
}

func (ac AddonsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AddonsConfigAttributes) InternalWithRef(ref terra.Reference) AddonsConfigAttributes {
	return AddonsConfigAttributes{ref: ref}
}

func (ac AddonsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AddonsConfigAttributes) CloudrunConfig() terra.ListValue[AddonsConfigCloudrunConfigAttributes] {
	return terra.ReferenceAsList[AddonsConfigCloudrunConfigAttributes](ac.ref.Append("cloudrun_config"))
}

func (ac AddonsConfigAttributes) ConfigConnectorConfig() terra.ListValue[AddonsConfigConfigConnectorConfigAttributes] {
	return terra.ReferenceAsList[AddonsConfigConfigConnectorConfigAttributes](ac.ref.Append("config_connector_config"))
}

func (ac AddonsConfigAttributes) DnsCacheConfig() terra.ListValue[AddonsConfigDnsCacheConfigAttributes] {
	return terra.ReferenceAsList[AddonsConfigDnsCacheConfigAttributes](ac.ref.Append("dns_cache_config"))
}

func (ac AddonsConfigAttributes) GcePersistentDiskCsiDriverConfig() terra.ListValue[AddonsConfigGcePersistentDiskCsiDriverConfigAttributes] {
	return terra.ReferenceAsList[AddonsConfigGcePersistentDiskCsiDriverConfigAttributes](ac.ref.Append("gce_persistent_disk_csi_driver_config"))
}

func (ac AddonsConfigAttributes) GcpFilestoreCsiDriverConfig() terra.ListValue[AddonsConfigGcpFilestoreCsiDriverConfigAttributes] {
	return terra.ReferenceAsList[AddonsConfigGcpFilestoreCsiDriverConfigAttributes](ac.ref.Append("gcp_filestore_csi_driver_config"))
}

func (ac AddonsConfigAttributes) GcsFuseCsiDriverConfig() terra.ListValue[AddonsConfigGcsFuseCsiDriverConfigAttributes] {
	return terra.ReferenceAsList[AddonsConfigGcsFuseCsiDriverConfigAttributes](ac.ref.Append("gcs_fuse_csi_driver_config"))
}

func (ac AddonsConfigAttributes) GkeBackupAgentConfig() terra.ListValue[AddonsConfigGkeBackupAgentConfigAttributes] {
	return terra.ReferenceAsList[AddonsConfigGkeBackupAgentConfigAttributes](ac.ref.Append("gke_backup_agent_config"))
}

func (ac AddonsConfigAttributes) HorizontalPodAutoscaling() terra.ListValue[AddonsConfigHorizontalPodAutoscalingAttributes] {
	return terra.ReferenceAsList[AddonsConfigHorizontalPodAutoscalingAttributes](ac.ref.Append("horizontal_pod_autoscaling"))
}

func (ac AddonsConfigAttributes) HttpLoadBalancing() terra.ListValue[AddonsConfigHttpLoadBalancingAttributes] {
	return terra.ReferenceAsList[AddonsConfigHttpLoadBalancingAttributes](ac.ref.Append("http_load_balancing"))
}

func (ac AddonsConfigAttributes) IstioConfig() terra.ListValue[AddonsConfigIstioConfigAttributes] {
	return terra.ReferenceAsList[AddonsConfigIstioConfigAttributes](ac.ref.Append("istio_config"))
}

func (ac AddonsConfigAttributes) KalmConfig() terra.ListValue[AddonsConfigKalmConfigAttributes] {
	return terra.ReferenceAsList[AddonsConfigKalmConfigAttributes](ac.ref.Append("kalm_config"))
}

func (ac AddonsConfigAttributes) NetworkPolicyConfig() terra.ListValue[AddonsConfigNetworkPolicyConfigAttributes] {
	return terra.ReferenceAsList[AddonsConfigNetworkPolicyConfigAttributes](ac.ref.Append("network_policy_config"))
}

func (ac AddonsConfigAttributes) StatefulHaConfig() terra.ListValue[AddonsConfigStatefulHaConfigAttributes] {
	return terra.ReferenceAsList[AddonsConfigStatefulHaConfigAttributes](ac.ref.Append("stateful_ha_config"))
}

type AddonsConfigCloudrunConfigAttributes struct {
	ref terra.Reference
}

func (cc AddonsConfigCloudrunConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc AddonsConfigCloudrunConfigAttributes) InternalWithRef(ref terra.Reference) AddonsConfigCloudrunConfigAttributes {
	return AddonsConfigCloudrunConfigAttributes{ref: ref}
}

func (cc AddonsConfigCloudrunConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc AddonsConfigCloudrunConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("disabled"))
}

func (cc AddonsConfigCloudrunConfigAttributes) LoadBalancerType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("load_balancer_type"))
}

type AddonsConfigConfigConnectorConfigAttributes struct {
	ref terra.Reference
}

func (ccc AddonsConfigConfigConnectorConfigAttributes) InternalRef() (terra.Reference, error) {
	return ccc.ref, nil
}

func (ccc AddonsConfigConfigConnectorConfigAttributes) InternalWithRef(ref terra.Reference) AddonsConfigConfigConnectorConfigAttributes {
	return AddonsConfigConfigConnectorConfigAttributes{ref: ref}
}

func (ccc AddonsConfigConfigConnectorConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccc.ref.InternalTokens()
}

func (ccc AddonsConfigConfigConnectorConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ccc.ref.Append("enabled"))
}

type AddonsConfigDnsCacheConfigAttributes struct {
	ref terra.Reference
}

func (dcc AddonsConfigDnsCacheConfigAttributes) InternalRef() (terra.Reference, error) {
	return dcc.ref, nil
}

func (dcc AddonsConfigDnsCacheConfigAttributes) InternalWithRef(ref terra.Reference) AddonsConfigDnsCacheConfigAttributes {
	return AddonsConfigDnsCacheConfigAttributes{ref: ref}
}

func (dcc AddonsConfigDnsCacheConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcc.ref.InternalTokens()
}

func (dcc AddonsConfigDnsCacheConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dcc.ref.Append("enabled"))
}

type AddonsConfigGcePersistentDiskCsiDriverConfigAttributes struct {
	ref terra.Reference
}

func (gpdcdc AddonsConfigGcePersistentDiskCsiDriverConfigAttributes) InternalRef() (terra.Reference, error) {
	return gpdcdc.ref, nil
}

func (gpdcdc AddonsConfigGcePersistentDiskCsiDriverConfigAttributes) InternalWithRef(ref terra.Reference) AddonsConfigGcePersistentDiskCsiDriverConfigAttributes {
	return AddonsConfigGcePersistentDiskCsiDriverConfigAttributes{ref: ref}
}

func (gpdcdc AddonsConfigGcePersistentDiskCsiDriverConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gpdcdc.ref.InternalTokens()
}

func (gpdcdc AddonsConfigGcePersistentDiskCsiDriverConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gpdcdc.ref.Append("enabled"))
}

type AddonsConfigGcpFilestoreCsiDriverConfigAttributes struct {
	ref terra.Reference
}

func (gfcdc AddonsConfigGcpFilestoreCsiDriverConfigAttributes) InternalRef() (terra.Reference, error) {
	return gfcdc.ref, nil
}

func (gfcdc AddonsConfigGcpFilestoreCsiDriverConfigAttributes) InternalWithRef(ref terra.Reference) AddonsConfigGcpFilestoreCsiDriverConfigAttributes {
	return AddonsConfigGcpFilestoreCsiDriverConfigAttributes{ref: ref}
}

func (gfcdc AddonsConfigGcpFilestoreCsiDriverConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gfcdc.ref.InternalTokens()
}

func (gfcdc AddonsConfigGcpFilestoreCsiDriverConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gfcdc.ref.Append("enabled"))
}

type AddonsConfigGcsFuseCsiDriverConfigAttributes struct {
	ref terra.Reference
}

func (gfcdc AddonsConfigGcsFuseCsiDriverConfigAttributes) InternalRef() (terra.Reference, error) {
	return gfcdc.ref, nil
}

func (gfcdc AddonsConfigGcsFuseCsiDriverConfigAttributes) InternalWithRef(ref terra.Reference) AddonsConfigGcsFuseCsiDriverConfigAttributes {
	return AddonsConfigGcsFuseCsiDriverConfigAttributes{ref: ref}
}

func (gfcdc AddonsConfigGcsFuseCsiDriverConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gfcdc.ref.InternalTokens()
}

func (gfcdc AddonsConfigGcsFuseCsiDriverConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gfcdc.ref.Append("enabled"))
}

type AddonsConfigGkeBackupAgentConfigAttributes struct {
	ref terra.Reference
}

func (gbac AddonsConfigGkeBackupAgentConfigAttributes) InternalRef() (terra.Reference, error) {
	return gbac.ref, nil
}

func (gbac AddonsConfigGkeBackupAgentConfigAttributes) InternalWithRef(ref terra.Reference) AddonsConfigGkeBackupAgentConfigAttributes {
	return AddonsConfigGkeBackupAgentConfigAttributes{ref: ref}
}

func (gbac AddonsConfigGkeBackupAgentConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gbac.ref.InternalTokens()
}

func (gbac AddonsConfigGkeBackupAgentConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gbac.ref.Append("enabled"))
}

type AddonsConfigHorizontalPodAutoscalingAttributes struct {
	ref terra.Reference
}

func (hpa AddonsConfigHorizontalPodAutoscalingAttributes) InternalRef() (terra.Reference, error) {
	return hpa.ref, nil
}

func (hpa AddonsConfigHorizontalPodAutoscalingAttributes) InternalWithRef(ref terra.Reference) AddonsConfigHorizontalPodAutoscalingAttributes {
	return AddonsConfigHorizontalPodAutoscalingAttributes{ref: ref}
}

func (hpa AddonsConfigHorizontalPodAutoscalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hpa.ref.InternalTokens()
}

func (hpa AddonsConfigHorizontalPodAutoscalingAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(hpa.ref.Append("disabled"))
}

type AddonsConfigHttpLoadBalancingAttributes struct {
	ref terra.Reference
}

func (hlb AddonsConfigHttpLoadBalancingAttributes) InternalRef() (terra.Reference, error) {
	return hlb.ref, nil
}

func (hlb AddonsConfigHttpLoadBalancingAttributes) InternalWithRef(ref terra.Reference) AddonsConfigHttpLoadBalancingAttributes {
	return AddonsConfigHttpLoadBalancingAttributes{ref: ref}
}

func (hlb AddonsConfigHttpLoadBalancingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hlb.ref.InternalTokens()
}

func (hlb AddonsConfigHttpLoadBalancingAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(hlb.ref.Append("disabled"))
}

type AddonsConfigIstioConfigAttributes struct {
	ref terra.Reference
}

func (ic AddonsConfigIstioConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic AddonsConfigIstioConfigAttributes) InternalWithRef(ref terra.Reference) AddonsConfigIstioConfigAttributes {
	return AddonsConfigIstioConfigAttributes{ref: ref}
}

func (ic AddonsConfigIstioConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic AddonsConfigIstioConfigAttributes) Auth() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("auth"))
}

func (ic AddonsConfigIstioConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("disabled"))
}

type AddonsConfigKalmConfigAttributes struct {
	ref terra.Reference
}

func (kc AddonsConfigKalmConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc AddonsConfigKalmConfigAttributes) InternalWithRef(ref terra.Reference) AddonsConfigKalmConfigAttributes {
	return AddonsConfigKalmConfigAttributes{ref: ref}
}

func (kc AddonsConfigKalmConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc AddonsConfigKalmConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("enabled"))
}

type AddonsConfigNetworkPolicyConfigAttributes struct {
	ref terra.Reference
}

func (npc AddonsConfigNetworkPolicyConfigAttributes) InternalRef() (terra.Reference, error) {
	return npc.ref, nil
}

func (npc AddonsConfigNetworkPolicyConfigAttributes) InternalWithRef(ref terra.Reference) AddonsConfigNetworkPolicyConfigAttributes {
	return AddonsConfigNetworkPolicyConfigAttributes{ref: ref}
}

func (npc AddonsConfigNetworkPolicyConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npc.ref.InternalTokens()
}

func (npc AddonsConfigNetworkPolicyConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(npc.ref.Append("disabled"))
}

type AddonsConfigStatefulHaConfigAttributes struct {
	ref terra.Reference
}

func (shc AddonsConfigStatefulHaConfigAttributes) InternalRef() (terra.Reference, error) {
	return shc.ref, nil
}

func (shc AddonsConfigStatefulHaConfigAttributes) InternalWithRef(ref terra.Reference) AddonsConfigStatefulHaConfigAttributes {
	return AddonsConfigStatefulHaConfigAttributes{ref: ref}
}

func (shc AddonsConfigStatefulHaConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return shc.ref.InternalTokens()
}

func (shc AddonsConfigStatefulHaConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(shc.ref.Append("enabled"))
}

type AuthenticatorGroupsConfigAttributes struct {
	ref terra.Reference
}

func (agc AuthenticatorGroupsConfigAttributes) InternalRef() (terra.Reference, error) {
	return agc.ref, nil
}

func (agc AuthenticatorGroupsConfigAttributes) InternalWithRef(ref terra.Reference) AuthenticatorGroupsConfigAttributes {
	return AuthenticatorGroupsConfigAttributes{ref: ref}
}

func (agc AuthenticatorGroupsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return agc.ref.InternalTokens()
}

func (agc AuthenticatorGroupsConfigAttributes) SecurityGroup() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("security_group"))
}

type BinaryAuthorizationAttributes struct {
	ref terra.Reference
}

func (ba BinaryAuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return ba.ref, nil
}

func (ba BinaryAuthorizationAttributes) InternalWithRef(ref terra.Reference) BinaryAuthorizationAttributes {
	return BinaryAuthorizationAttributes{ref: ref}
}

func (ba BinaryAuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ba.ref.InternalTokens()
}

func (ba BinaryAuthorizationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ba.ref.Append("enabled"))
}

func (ba BinaryAuthorizationAttributes) EvaluationMode() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("evaluation_mode"))
}

type ClusterAutoscalingAttributes struct {
	ref terra.Reference
}

func (ca ClusterAutoscalingAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca ClusterAutoscalingAttributes) InternalWithRef(ref terra.Reference) ClusterAutoscalingAttributes {
	return ClusterAutoscalingAttributes{ref: ref}
}

func (ca ClusterAutoscalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca ClusterAutoscalingAttributes) AutoscalingProfile() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("autoscaling_profile"))
}

func (ca ClusterAutoscalingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ca.ref.Append("enabled"))
}

func (ca ClusterAutoscalingAttributes) AutoProvisioningDefaults() terra.ListValue[ClusterAutoscalingAutoProvisioningDefaultsAttributes] {
	return terra.ReferenceAsList[ClusterAutoscalingAutoProvisioningDefaultsAttributes](ca.ref.Append("auto_provisioning_defaults"))
}

func (ca ClusterAutoscalingAttributes) ResourceLimits() terra.ListValue[ClusterAutoscalingResourceLimitsAttributes] {
	return terra.ReferenceAsList[ClusterAutoscalingResourceLimitsAttributes](ca.ref.Append("resource_limits"))
}

type ClusterAutoscalingAutoProvisioningDefaultsAttributes struct {
	ref terra.Reference
}

func (apd ClusterAutoscalingAutoProvisioningDefaultsAttributes) InternalRef() (terra.Reference, error) {
	return apd.ref, nil
}

func (apd ClusterAutoscalingAutoProvisioningDefaultsAttributes) InternalWithRef(ref terra.Reference) ClusterAutoscalingAutoProvisioningDefaultsAttributes {
	return ClusterAutoscalingAutoProvisioningDefaultsAttributes{ref: ref}
}

func (apd ClusterAutoscalingAutoProvisioningDefaultsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return apd.ref.InternalTokens()
}

func (apd ClusterAutoscalingAutoProvisioningDefaultsAttributes) BootDiskKmsKey() terra.StringValue {
	return terra.ReferenceAsString(apd.ref.Append("boot_disk_kms_key"))
}

func (apd ClusterAutoscalingAutoProvisioningDefaultsAttributes) DiskSize() terra.NumberValue {
	return terra.ReferenceAsNumber(apd.ref.Append("disk_size"))
}

func (apd ClusterAutoscalingAutoProvisioningDefaultsAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(apd.ref.Append("disk_type"))
}

func (apd ClusterAutoscalingAutoProvisioningDefaultsAttributes) ImageType() terra.StringValue {
	return terra.ReferenceAsString(apd.ref.Append("image_type"))
}

func (apd ClusterAutoscalingAutoProvisioningDefaultsAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(apd.ref.Append("min_cpu_platform"))
}

func (apd ClusterAutoscalingAutoProvisioningDefaultsAttributes) OauthScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](apd.ref.Append("oauth_scopes"))
}

func (apd ClusterAutoscalingAutoProvisioningDefaultsAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(apd.ref.Append("service_account"))
}

func (apd ClusterAutoscalingAutoProvisioningDefaultsAttributes) Management() terra.ListValue[ClusterAutoscalingAutoProvisioningDefaultsManagementAttributes] {
	return terra.ReferenceAsList[ClusterAutoscalingAutoProvisioningDefaultsManagementAttributes](apd.ref.Append("management"))
}

func (apd ClusterAutoscalingAutoProvisioningDefaultsAttributes) ShieldedInstanceConfig() terra.ListValue[ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigAttributes](apd.ref.Append("shielded_instance_config"))
}

func (apd ClusterAutoscalingAutoProvisioningDefaultsAttributes) UpgradeSettings() terra.ListValue[ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsAttributes] {
	return terra.ReferenceAsList[ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsAttributes](apd.ref.Append("upgrade_settings"))
}

type ClusterAutoscalingAutoProvisioningDefaultsManagementAttributes struct {
	ref terra.Reference
}

func (m ClusterAutoscalingAutoProvisioningDefaultsManagementAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m ClusterAutoscalingAutoProvisioningDefaultsManagementAttributes) InternalWithRef(ref terra.Reference) ClusterAutoscalingAutoProvisioningDefaultsManagementAttributes {
	return ClusterAutoscalingAutoProvisioningDefaultsManagementAttributes{ref: ref}
}

func (m ClusterAutoscalingAutoProvisioningDefaultsManagementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m ClusterAutoscalingAutoProvisioningDefaultsManagementAttributes) AutoRepair() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("auto_repair"))
}

func (m ClusterAutoscalingAutoProvisioningDefaultsManagementAttributes) AutoUpgrade() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("auto_upgrade"))
}

func (m ClusterAutoscalingAutoProvisioningDefaultsManagementAttributes) UpgradeOptions() terra.ListValue[ClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsAttributes] {
	return terra.ReferenceAsList[ClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsAttributes](m.ref.Append("upgrade_options"))
}

type ClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsAttributes struct {
	ref terra.Reference
}

func (uo ClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsAttributes) InternalRef() (terra.Reference, error) {
	return uo.ref, nil
}

func (uo ClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsAttributes) InternalWithRef(ref terra.Reference) ClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsAttributes {
	return ClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsAttributes{ref: ref}
}

func (uo ClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uo.ref.InternalTokens()
}

func (uo ClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsAttributes) AutoUpgradeStartTime() terra.StringValue {
	return terra.ReferenceAsString(uo.ref.Append("auto_upgrade_start_time"))
}

func (uo ClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(uo.ref.Append("description"))
}

type ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigAttributes {
	return ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigAttributes{ref: ref}
}

func (sic ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

type ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsAttributes struct {
	ref terra.Reference
}

func (us ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsAttributes) InternalWithRef(ref terra.Reference) ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsAttributes {
	return ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsAttributes{ref: ref}
}

func (us ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsAttributes) MaxSurge() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("max_surge"))
}

func (us ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsAttributes) MaxUnavailable() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("max_unavailable"))
}

func (us ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsAttributes) Strategy() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("strategy"))
}

func (us ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsAttributes) BlueGreenSettings() terra.ListValue[ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes] {
	return terra.ReferenceAsList[ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes](us.ref.Append("blue_green_settings"))
}

type ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes struct {
	ref terra.Reference
}

func (bgs ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) InternalRef() (terra.Reference, error) {
	return bgs.ref, nil
}

func (bgs ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) InternalWithRef(ref terra.Reference) ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes {
	return ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes{ref: ref}
}

func (bgs ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bgs.ref.InternalTokens()
}

func (bgs ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) NodePoolSoakDuration() terra.StringValue {
	return terra.ReferenceAsString(bgs.ref.Append("node_pool_soak_duration"))
}

func (bgs ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) StandardRolloutPolicy() terra.ListValue[ClusterAutoscalingAutoProvisioningDefaultsF08F146EAttributes] {
	return terra.ReferenceAsList[ClusterAutoscalingAutoProvisioningDefaultsF08F146EAttributes](bgs.ref.Append("standard_rollout_policy"))
}

type ClusterAutoscalingAutoProvisioningDefaultsF08F146EAttributes struct {
	ref terra.Reference
}

func (srp ClusterAutoscalingAutoProvisioningDefaultsF08F146EAttributes) InternalRef() (terra.Reference, error) {
	return srp.ref, nil
}

func (srp ClusterAutoscalingAutoProvisioningDefaultsF08F146EAttributes) InternalWithRef(ref terra.Reference) ClusterAutoscalingAutoProvisioningDefaultsF08F146EAttributes {
	return ClusterAutoscalingAutoProvisioningDefaultsF08F146EAttributes{ref: ref}
}

func (srp ClusterAutoscalingAutoProvisioningDefaultsF08F146EAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return srp.ref.InternalTokens()
}

func (srp ClusterAutoscalingAutoProvisioningDefaultsF08F146EAttributes) BatchNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(srp.ref.Append("batch_node_count"))
}

func (srp ClusterAutoscalingAutoProvisioningDefaultsF08F146EAttributes) BatchPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(srp.ref.Append("batch_percentage"))
}

func (srp ClusterAutoscalingAutoProvisioningDefaultsF08F146EAttributes) BatchSoakDuration() terra.StringValue {
	return terra.ReferenceAsString(srp.ref.Append("batch_soak_duration"))
}

type ClusterAutoscalingResourceLimitsAttributes struct {
	ref terra.Reference
}

func (rl ClusterAutoscalingResourceLimitsAttributes) InternalRef() (terra.Reference, error) {
	return rl.ref, nil
}

func (rl ClusterAutoscalingResourceLimitsAttributes) InternalWithRef(ref terra.Reference) ClusterAutoscalingResourceLimitsAttributes {
	return ClusterAutoscalingResourceLimitsAttributes{ref: ref}
}

func (rl ClusterAutoscalingResourceLimitsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rl.ref.InternalTokens()
}

func (rl ClusterAutoscalingResourceLimitsAttributes) Maximum() terra.NumberValue {
	return terra.ReferenceAsNumber(rl.ref.Append("maximum"))
}

func (rl ClusterAutoscalingResourceLimitsAttributes) Minimum() terra.NumberValue {
	return terra.ReferenceAsNumber(rl.ref.Append("minimum"))
}

func (rl ClusterAutoscalingResourceLimitsAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(rl.ref.Append("resource_type"))
}

type ClusterTelemetryAttributes struct {
	ref terra.Reference
}

func (ct ClusterTelemetryAttributes) InternalRef() (terra.Reference, error) {
	return ct.ref, nil
}

func (ct ClusterTelemetryAttributes) InternalWithRef(ref terra.Reference) ClusterTelemetryAttributes {
	return ClusterTelemetryAttributes{ref: ref}
}

func (ct ClusterTelemetryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ct.ref.InternalTokens()
}

func (ct ClusterTelemetryAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("type"))
}

type ConfidentialNodesAttributes struct {
	ref terra.Reference
}

func (cn ConfidentialNodesAttributes) InternalRef() (terra.Reference, error) {
	return cn.ref, nil
}

func (cn ConfidentialNodesAttributes) InternalWithRef(ref terra.Reference) ConfidentialNodesAttributes {
	return ConfidentialNodesAttributes{ref: ref}
}

func (cn ConfidentialNodesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cn.ref.InternalTokens()
}

func (cn ConfidentialNodesAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cn.ref.Append("enabled"))
}

type CostManagementConfigAttributes struct {
	ref terra.Reference
}

func (cmc CostManagementConfigAttributes) InternalRef() (terra.Reference, error) {
	return cmc.ref, nil
}

func (cmc CostManagementConfigAttributes) InternalWithRef(ref terra.Reference) CostManagementConfigAttributes {
	return CostManagementConfigAttributes{ref: ref}
}

func (cmc CostManagementConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cmc.ref.InternalTokens()
}

func (cmc CostManagementConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cmc.ref.Append("enabled"))
}

type DatabaseEncryptionAttributes struct {
	ref terra.Reference
}

func (de DatabaseEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de DatabaseEncryptionAttributes) InternalWithRef(ref terra.Reference) DatabaseEncryptionAttributes {
	return DatabaseEncryptionAttributes{ref: ref}
}

func (de DatabaseEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de DatabaseEncryptionAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("key_name"))
}

func (de DatabaseEncryptionAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("state"))
}

type DefaultSnatStatusAttributes struct {
	ref terra.Reference
}

func (dss DefaultSnatStatusAttributes) InternalRef() (terra.Reference, error) {
	return dss.ref, nil
}

func (dss DefaultSnatStatusAttributes) InternalWithRef(ref terra.Reference) DefaultSnatStatusAttributes {
	return DefaultSnatStatusAttributes{ref: ref}
}

func (dss DefaultSnatStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dss.ref.InternalTokens()
}

func (dss DefaultSnatStatusAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(dss.ref.Append("disabled"))
}

type DnsConfigAttributes struct {
	ref terra.Reference
}

func (dc DnsConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DnsConfigAttributes) InternalWithRef(ref terra.Reference) DnsConfigAttributes {
	return DnsConfigAttributes{ref: ref}
}

func (dc DnsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DnsConfigAttributes) ClusterDns() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("cluster_dns"))
}

func (dc DnsConfigAttributes) ClusterDnsDomain() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("cluster_dns_domain"))
}

func (dc DnsConfigAttributes) ClusterDnsScope() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("cluster_dns_scope"))
}

type EnableK8SBetaApisAttributes struct {
	ref terra.Reference
}

func (ekba EnableK8SBetaApisAttributes) InternalRef() (terra.Reference, error) {
	return ekba.ref, nil
}

func (ekba EnableK8SBetaApisAttributes) InternalWithRef(ref terra.Reference) EnableK8SBetaApisAttributes {
	return EnableK8SBetaApisAttributes{ref: ref}
}

func (ekba EnableK8SBetaApisAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ekba.ref.InternalTokens()
}

func (ekba EnableK8SBetaApisAttributes) EnabledApis() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ekba.ref.Append("enabled_apis"))
}

type FleetAttributes struct {
	ref terra.Reference
}

func (f FleetAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FleetAttributes) InternalWithRef(ref terra.Reference) FleetAttributes {
	return FleetAttributes{ref: ref}
}

func (f FleetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FleetAttributes) Membership() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("membership"))
}

func (f FleetAttributes) MembershipId() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("membership_id"))
}

func (f FleetAttributes) MembershipLocation() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("membership_location"))
}

func (f FleetAttributes) PreRegistered() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("pre_registered"))
}

func (f FleetAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("project"))
}

type GatewayApiConfigAttributes struct {
	ref terra.Reference
}

func (gac GatewayApiConfigAttributes) InternalRef() (terra.Reference, error) {
	return gac.ref, nil
}

func (gac GatewayApiConfigAttributes) InternalWithRef(ref terra.Reference) GatewayApiConfigAttributes {
	return GatewayApiConfigAttributes{ref: ref}
}

func (gac GatewayApiConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gac.ref.InternalTokens()
}

func (gac GatewayApiConfigAttributes) Channel() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("channel"))
}

type IdentityServiceConfigAttributes struct {
	ref terra.Reference
}

func (isc IdentityServiceConfigAttributes) InternalRef() (terra.Reference, error) {
	return isc.ref, nil
}

func (isc IdentityServiceConfigAttributes) InternalWithRef(ref terra.Reference) IdentityServiceConfigAttributes {
	return IdentityServiceConfigAttributes{ref: ref}
}

func (isc IdentityServiceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return isc.ref.InternalTokens()
}

func (isc IdentityServiceConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(isc.ref.Append("enabled"))
}

type IpAllocationPolicyAttributes struct {
	ref terra.Reference
}

func (iap IpAllocationPolicyAttributes) InternalRef() (terra.Reference, error) {
	return iap.ref, nil
}

func (iap IpAllocationPolicyAttributes) InternalWithRef(ref terra.Reference) IpAllocationPolicyAttributes {
	return IpAllocationPolicyAttributes{ref: ref}
}

func (iap IpAllocationPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iap.ref.InternalTokens()
}

func (iap IpAllocationPolicyAttributes) ClusterIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("cluster_ipv4_cidr_block"))
}

func (iap IpAllocationPolicyAttributes) ClusterSecondaryRangeName() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("cluster_secondary_range_name"))
}

func (iap IpAllocationPolicyAttributes) ServicesIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("services_ipv4_cidr_block"))
}

func (iap IpAllocationPolicyAttributes) ServicesSecondaryRangeName() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("services_secondary_range_name"))
}

func (iap IpAllocationPolicyAttributes) StackType() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("stack_type"))
}

func (iap IpAllocationPolicyAttributes) AdditionalPodRangesConfig() terra.ListValue[IpAllocationPolicyAdditionalPodRangesConfigAttributes] {
	return terra.ReferenceAsList[IpAllocationPolicyAdditionalPodRangesConfigAttributes](iap.ref.Append("additional_pod_ranges_config"))
}

func (iap IpAllocationPolicyAttributes) PodCidrOverprovisionConfig() terra.ListValue[IpAllocationPolicyPodCidrOverprovisionConfigAttributes] {
	return terra.ReferenceAsList[IpAllocationPolicyPodCidrOverprovisionConfigAttributes](iap.ref.Append("pod_cidr_overprovision_config"))
}

type IpAllocationPolicyAdditionalPodRangesConfigAttributes struct {
	ref terra.Reference
}

func (aprc IpAllocationPolicyAdditionalPodRangesConfigAttributes) InternalRef() (terra.Reference, error) {
	return aprc.ref, nil
}

func (aprc IpAllocationPolicyAdditionalPodRangesConfigAttributes) InternalWithRef(ref terra.Reference) IpAllocationPolicyAdditionalPodRangesConfigAttributes {
	return IpAllocationPolicyAdditionalPodRangesConfigAttributes{ref: ref}
}

func (aprc IpAllocationPolicyAdditionalPodRangesConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aprc.ref.InternalTokens()
}

func (aprc IpAllocationPolicyAdditionalPodRangesConfigAttributes) PodRangeNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aprc.ref.Append("pod_range_names"))
}

type IpAllocationPolicyPodCidrOverprovisionConfigAttributes struct {
	ref terra.Reference
}

func (pcoc IpAllocationPolicyPodCidrOverprovisionConfigAttributes) InternalRef() (terra.Reference, error) {
	return pcoc.ref, nil
}

func (pcoc IpAllocationPolicyPodCidrOverprovisionConfigAttributes) InternalWithRef(ref terra.Reference) IpAllocationPolicyPodCidrOverprovisionConfigAttributes {
	return IpAllocationPolicyPodCidrOverprovisionConfigAttributes{ref: ref}
}

func (pcoc IpAllocationPolicyPodCidrOverprovisionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pcoc.ref.InternalTokens()
}

func (pcoc IpAllocationPolicyPodCidrOverprovisionConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(pcoc.ref.Append("disabled"))
}

type LoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc LoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LoggingConfigAttributes) InternalWithRef(ref terra.Reference) LoggingConfigAttributes {
	return LoggingConfigAttributes{ref: ref}
}

func (lc LoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LoggingConfigAttributes) EnableComponents() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lc.ref.Append("enable_components"))
}

type MaintenancePolicyAttributes struct {
	ref terra.Reference
}

func (mp MaintenancePolicyAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp MaintenancePolicyAttributes) InternalWithRef(ref terra.Reference) MaintenancePolicyAttributes {
	return MaintenancePolicyAttributes{ref: ref}
}

func (mp MaintenancePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp MaintenancePolicyAttributes) DailyMaintenanceWindow() terra.ListValue[MaintenancePolicyDailyMaintenanceWindowAttributes] {
	return terra.ReferenceAsList[MaintenancePolicyDailyMaintenanceWindowAttributes](mp.ref.Append("daily_maintenance_window"))
}

func (mp MaintenancePolicyAttributes) MaintenanceExclusion() terra.SetValue[MaintenancePolicyMaintenanceExclusionAttributes] {
	return terra.ReferenceAsSet[MaintenancePolicyMaintenanceExclusionAttributes](mp.ref.Append("maintenance_exclusion"))
}

func (mp MaintenancePolicyAttributes) RecurringWindow() terra.ListValue[MaintenancePolicyRecurringWindowAttributes] {
	return terra.ReferenceAsList[MaintenancePolicyRecurringWindowAttributes](mp.ref.Append("recurring_window"))
}

type MaintenancePolicyDailyMaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (dmw MaintenancePolicyDailyMaintenanceWindowAttributes) InternalRef() (terra.Reference, error) {
	return dmw.ref, nil
}

func (dmw MaintenancePolicyDailyMaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) MaintenancePolicyDailyMaintenanceWindowAttributes {
	return MaintenancePolicyDailyMaintenanceWindowAttributes{ref: ref}
}

func (dmw MaintenancePolicyDailyMaintenanceWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dmw.ref.InternalTokens()
}

func (dmw MaintenancePolicyDailyMaintenanceWindowAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(dmw.ref.Append("duration"))
}

func (dmw MaintenancePolicyDailyMaintenanceWindowAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(dmw.ref.Append("start_time"))
}

type MaintenancePolicyMaintenanceExclusionAttributes struct {
	ref terra.Reference
}

func (me MaintenancePolicyMaintenanceExclusionAttributes) InternalRef() (terra.Reference, error) {
	return me.ref, nil
}

func (me MaintenancePolicyMaintenanceExclusionAttributes) InternalWithRef(ref terra.Reference) MaintenancePolicyMaintenanceExclusionAttributes {
	return MaintenancePolicyMaintenanceExclusionAttributes{ref: ref}
}

func (me MaintenancePolicyMaintenanceExclusionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return me.ref.InternalTokens()
}

func (me MaintenancePolicyMaintenanceExclusionAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("end_time"))
}

func (me MaintenancePolicyMaintenanceExclusionAttributes) ExclusionName() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("exclusion_name"))
}

func (me MaintenancePolicyMaintenanceExclusionAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("start_time"))
}

func (me MaintenancePolicyMaintenanceExclusionAttributes) ExclusionOptions() terra.ListValue[MaintenancePolicyMaintenanceExclusionExclusionOptionsAttributes] {
	return terra.ReferenceAsList[MaintenancePolicyMaintenanceExclusionExclusionOptionsAttributes](me.ref.Append("exclusion_options"))
}

type MaintenancePolicyMaintenanceExclusionExclusionOptionsAttributes struct {
	ref terra.Reference
}

func (eo MaintenancePolicyMaintenanceExclusionExclusionOptionsAttributes) InternalRef() (terra.Reference, error) {
	return eo.ref, nil
}

func (eo MaintenancePolicyMaintenanceExclusionExclusionOptionsAttributes) InternalWithRef(ref terra.Reference) MaintenancePolicyMaintenanceExclusionExclusionOptionsAttributes {
	return MaintenancePolicyMaintenanceExclusionExclusionOptionsAttributes{ref: ref}
}

func (eo MaintenancePolicyMaintenanceExclusionExclusionOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eo.ref.InternalTokens()
}

func (eo MaintenancePolicyMaintenanceExclusionExclusionOptionsAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(eo.ref.Append("scope"))
}

type MaintenancePolicyRecurringWindowAttributes struct {
	ref terra.Reference
}

func (rw MaintenancePolicyRecurringWindowAttributes) InternalRef() (terra.Reference, error) {
	return rw.ref, nil
}

func (rw MaintenancePolicyRecurringWindowAttributes) InternalWithRef(ref terra.Reference) MaintenancePolicyRecurringWindowAttributes {
	return MaintenancePolicyRecurringWindowAttributes{ref: ref}
}

func (rw MaintenancePolicyRecurringWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rw.ref.InternalTokens()
}

func (rw MaintenancePolicyRecurringWindowAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(rw.ref.Append("end_time"))
}

func (rw MaintenancePolicyRecurringWindowAttributes) Recurrence() terra.StringValue {
	return terra.ReferenceAsString(rw.ref.Append("recurrence"))
}

func (rw MaintenancePolicyRecurringWindowAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(rw.ref.Append("start_time"))
}

type MasterAuthAttributes struct {
	ref terra.Reference
}

func (ma MasterAuthAttributes) InternalRef() (terra.Reference, error) {
	return ma.ref, nil
}

func (ma MasterAuthAttributes) InternalWithRef(ref terra.Reference) MasterAuthAttributes {
	return MasterAuthAttributes{ref: ref}
}

func (ma MasterAuthAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ma.ref.InternalTokens()
}

func (ma MasterAuthAttributes) ClientCertificate() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("client_certificate"))
}

func (ma MasterAuthAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("client_key"))
}

func (ma MasterAuthAttributes) ClusterCaCertificate() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("cluster_ca_certificate"))
}

func (ma MasterAuthAttributes) ClientCertificateConfig() terra.ListValue[MasterAuthClientCertificateConfigAttributes] {
	return terra.ReferenceAsList[MasterAuthClientCertificateConfigAttributes](ma.ref.Append("client_certificate_config"))
}

type MasterAuthClientCertificateConfigAttributes struct {
	ref terra.Reference
}

func (ccc MasterAuthClientCertificateConfigAttributes) InternalRef() (terra.Reference, error) {
	return ccc.ref, nil
}

func (ccc MasterAuthClientCertificateConfigAttributes) InternalWithRef(ref terra.Reference) MasterAuthClientCertificateConfigAttributes {
	return MasterAuthClientCertificateConfigAttributes{ref: ref}
}

func (ccc MasterAuthClientCertificateConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccc.ref.InternalTokens()
}

func (ccc MasterAuthClientCertificateConfigAttributes) IssueClientCertificate() terra.BoolValue {
	return terra.ReferenceAsBool(ccc.ref.Append("issue_client_certificate"))
}

type MasterAuthorizedNetworksConfigAttributes struct {
	ref terra.Reference
}

func (manc MasterAuthorizedNetworksConfigAttributes) InternalRef() (terra.Reference, error) {
	return manc.ref, nil
}

func (manc MasterAuthorizedNetworksConfigAttributes) InternalWithRef(ref terra.Reference) MasterAuthorizedNetworksConfigAttributes {
	return MasterAuthorizedNetworksConfigAttributes{ref: ref}
}

func (manc MasterAuthorizedNetworksConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return manc.ref.InternalTokens()
}

func (manc MasterAuthorizedNetworksConfigAttributes) GcpPublicCidrsAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(manc.ref.Append("gcp_public_cidrs_access_enabled"))
}

func (manc MasterAuthorizedNetworksConfigAttributes) CidrBlocks() terra.SetValue[MasterAuthorizedNetworksConfigCidrBlocksAttributes] {
	return terra.ReferenceAsSet[MasterAuthorizedNetworksConfigCidrBlocksAttributes](manc.ref.Append("cidr_blocks"))
}

type MasterAuthorizedNetworksConfigCidrBlocksAttributes struct {
	ref terra.Reference
}

func (cb MasterAuthorizedNetworksConfigCidrBlocksAttributes) InternalRef() (terra.Reference, error) {
	return cb.ref, nil
}

func (cb MasterAuthorizedNetworksConfigCidrBlocksAttributes) InternalWithRef(ref terra.Reference) MasterAuthorizedNetworksConfigCidrBlocksAttributes {
	return MasterAuthorizedNetworksConfigCidrBlocksAttributes{ref: ref}
}

func (cb MasterAuthorizedNetworksConfigCidrBlocksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cb.ref.InternalTokens()
}

func (cb MasterAuthorizedNetworksConfigCidrBlocksAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(cb.ref.Append("cidr_block"))
}

func (cb MasterAuthorizedNetworksConfigCidrBlocksAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(cb.ref.Append("display_name"))
}

type MeshCertificatesAttributes struct {
	ref terra.Reference
}

func (mc MeshCertificatesAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MeshCertificatesAttributes) InternalWithRef(ref terra.Reference) MeshCertificatesAttributes {
	return MeshCertificatesAttributes{ref: ref}
}

func (mc MeshCertificatesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MeshCertificatesAttributes) EnableCertificates() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("enable_certificates"))
}

type MonitoringConfigAttributes struct {
	ref terra.Reference
}

func (mc MonitoringConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MonitoringConfigAttributes) InternalWithRef(ref terra.Reference) MonitoringConfigAttributes {
	return MonitoringConfigAttributes{ref: ref}
}

func (mc MonitoringConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MonitoringConfigAttributes) EnableComponents() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("enable_components"))
}

func (mc MonitoringConfigAttributes) AdvancedDatapathObservabilityConfig() terra.ListValue[MonitoringConfigAdvancedDatapathObservabilityConfigAttributes] {
	return terra.ReferenceAsList[MonitoringConfigAdvancedDatapathObservabilityConfigAttributes](mc.ref.Append("advanced_datapath_observability_config"))
}

func (mc MonitoringConfigAttributes) ManagedPrometheus() terra.ListValue[MonitoringConfigManagedPrometheusAttributes] {
	return terra.ReferenceAsList[MonitoringConfigManagedPrometheusAttributes](mc.ref.Append("managed_prometheus"))
}

type MonitoringConfigAdvancedDatapathObservabilityConfigAttributes struct {
	ref terra.Reference
}

func (adoc MonitoringConfigAdvancedDatapathObservabilityConfigAttributes) InternalRef() (terra.Reference, error) {
	return adoc.ref, nil
}

func (adoc MonitoringConfigAdvancedDatapathObservabilityConfigAttributes) InternalWithRef(ref terra.Reference) MonitoringConfigAdvancedDatapathObservabilityConfigAttributes {
	return MonitoringConfigAdvancedDatapathObservabilityConfigAttributes{ref: ref}
}

func (adoc MonitoringConfigAdvancedDatapathObservabilityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return adoc.ref.InternalTokens()
}

func (adoc MonitoringConfigAdvancedDatapathObservabilityConfigAttributes) EnableMetrics() terra.BoolValue {
	return terra.ReferenceAsBool(adoc.ref.Append("enable_metrics"))
}

func (adoc MonitoringConfigAdvancedDatapathObservabilityConfigAttributes) EnableRelay() terra.BoolValue {
	return terra.ReferenceAsBool(adoc.ref.Append("enable_relay"))
}

func (adoc MonitoringConfigAdvancedDatapathObservabilityConfigAttributes) RelayMode() terra.StringValue {
	return terra.ReferenceAsString(adoc.ref.Append("relay_mode"))
}

type MonitoringConfigManagedPrometheusAttributes struct {
	ref terra.Reference
}

func (mp MonitoringConfigManagedPrometheusAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp MonitoringConfigManagedPrometheusAttributes) InternalWithRef(ref terra.Reference) MonitoringConfigManagedPrometheusAttributes {
	return MonitoringConfigManagedPrometheusAttributes{ref: ref}
}

func (mp MonitoringConfigManagedPrometheusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp MonitoringConfigManagedPrometheusAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(mp.ref.Append("enabled"))
}

type NetworkPolicyAttributes struct {
	ref terra.Reference
}

func (np NetworkPolicyAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np NetworkPolicyAttributes) InternalWithRef(ref terra.Reference) NetworkPolicyAttributes {
	return NetworkPolicyAttributes{ref: ref}
}

func (np NetworkPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np NetworkPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(np.ref.Append("enabled"))
}

func (np NetworkPolicyAttributes) Provider() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("provider"))
}

type NodeConfigAttributes struct {
	ref terra.Reference
}

func (nc NodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigAttributes {
	return NodeConfigAttributes{ref: ref}
}

func (nc NodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NodeConfigAttributes) BootDiskKmsKey() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("boot_disk_kms_key"))
}

func (nc NodeConfigAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("disk_size_gb"))
}

func (nc NodeConfigAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("disk_type"))
}

func (nc NodeConfigAttributes) EnableConfidentialStorage() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("enable_confidential_storage"))
}

func (nc NodeConfigAttributes) ImageType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("image_type"))
}

func (nc NodeConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("labels"))
}

func (nc NodeConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("local_ssd_count"))
}

func (nc NodeConfigAttributes) LoggingVariant() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("logging_variant"))
}

func (nc NodeConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("machine_type"))
}

func (nc NodeConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("metadata"))
}

func (nc NodeConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("min_cpu_platform"))
}

func (nc NodeConfigAttributes) NodeGroup() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("node_group"))
}

func (nc NodeConfigAttributes) OauthScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("oauth_scopes"))
}

func (nc NodeConfigAttributes) Preemptible() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("preemptible"))
}

func (nc NodeConfigAttributes) ResourceLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("resource_labels"))
}

func (nc NodeConfigAttributes) ResourceManagerTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("resource_manager_tags"))
}

func (nc NodeConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("service_account"))
}

func (nc NodeConfigAttributes) Spot() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("spot"))
}

func (nc NodeConfigAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("tags"))
}

func (nc NodeConfigAttributes) EffectiveTaints() terra.ListValue[NodeConfigEffectiveTaintsAttributes] {
	return terra.ReferenceAsList[NodeConfigEffectiveTaintsAttributes](nc.ref.Append("effective_taints"))
}

func (nc NodeConfigAttributes) GuestAccelerator() terra.ListValue[NodeConfigGuestAcceleratorAttributes] {
	return terra.ReferenceAsList[NodeConfigGuestAcceleratorAttributes](nc.ref.Append("guest_accelerator"))
}

func (nc NodeConfigAttributes) AdvancedMachineFeatures() terra.ListValue[NodeConfigAdvancedMachineFeaturesAttributes] {
	return terra.ReferenceAsList[NodeConfigAdvancedMachineFeaturesAttributes](nc.ref.Append("advanced_machine_features"))
}

func (nc NodeConfigAttributes) ConfidentialNodes() terra.ListValue[NodeConfigConfidentialNodesAttributes] {
	return terra.ReferenceAsList[NodeConfigConfidentialNodesAttributes](nc.ref.Append("confidential_nodes"))
}

func (nc NodeConfigAttributes) EphemeralStorageConfig() terra.ListValue[NodeConfigEphemeralStorageConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigEphemeralStorageConfigAttributes](nc.ref.Append("ephemeral_storage_config"))
}

func (nc NodeConfigAttributes) EphemeralStorageLocalSsdConfig() terra.ListValue[NodeConfigEphemeralStorageLocalSsdConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigEphemeralStorageLocalSsdConfigAttributes](nc.ref.Append("ephemeral_storage_local_ssd_config"))
}

func (nc NodeConfigAttributes) FastSocket() terra.ListValue[NodeConfigFastSocketAttributes] {
	return terra.ReferenceAsList[NodeConfigFastSocketAttributes](nc.ref.Append("fast_socket"))
}

func (nc NodeConfigAttributes) GcfsConfig() terra.ListValue[NodeConfigGcfsConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigGcfsConfigAttributes](nc.ref.Append("gcfs_config"))
}

func (nc NodeConfigAttributes) Gvnic() terra.ListValue[NodeConfigGvnicAttributes] {
	return terra.ReferenceAsList[NodeConfigGvnicAttributes](nc.ref.Append("gvnic"))
}

func (nc NodeConfigAttributes) HostMaintenancePolicy() terra.ListValue[NodeConfigHostMaintenancePolicyAttributes] {
	return terra.ReferenceAsList[NodeConfigHostMaintenancePolicyAttributes](nc.ref.Append("host_maintenance_policy"))
}

func (nc NodeConfigAttributes) KubeletConfig() terra.ListValue[NodeConfigKubeletConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigKubeletConfigAttributes](nc.ref.Append("kubelet_config"))
}

func (nc NodeConfigAttributes) LinuxNodeConfig() terra.ListValue[NodeConfigLinuxNodeConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigLinuxNodeConfigAttributes](nc.ref.Append("linux_node_config"))
}

func (nc NodeConfigAttributes) LocalNvmeSsdBlockConfig() terra.ListValue[NodeConfigLocalNvmeSsdBlockConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigLocalNvmeSsdBlockConfigAttributes](nc.ref.Append("local_nvme_ssd_block_config"))
}

func (nc NodeConfigAttributes) ReservationAffinity() terra.ListValue[NodeConfigReservationAffinityAttributes] {
	return terra.ReferenceAsList[NodeConfigReservationAffinityAttributes](nc.ref.Append("reservation_affinity"))
}

func (nc NodeConfigAttributes) SandboxConfig() terra.ListValue[NodeConfigSandboxConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigSandboxConfigAttributes](nc.ref.Append("sandbox_config"))
}

func (nc NodeConfigAttributes) ShieldedInstanceConfig() terra.ListValue[NodeConfigShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigShieldedInstanceConfigAttributes](nc.ref.Append("shielded_instance_config"))
}

func (nc NodeConfigAttributes) SoleTenantConfig() terra.ListValue[NodeConfigSoleTenantConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigSoleTenantConfigAttributes](nc.ref.Append("sole_tenant_config"))
}

func (nc NodeConfigAttributes) Taint() terra.ListValue[NodeConfigTaintAttributes] {
	return terra.ReferenceAsList[NodeConfigTaintAttributes](nc.ref.Append("taint"))
}

func (nc NodeConfigAttributes) WorkloadMetadataConfig() terra.ListValue[NodeConfigWorkloadMetadataConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigWorkloadMetadataConfigAttributes](nc.ref.Append("workload_metadata_config"))
}

type NodeConfigEffectiveTaintsAttributes struct {
	ref terra.Reference
}

func (et NodeConfigEffectiveTaintsAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et NodeConfigEffectiveTaintsAttributes) InternalWithRef(ref terra.Reference) NodeConfigEffectiveTaintsAttributes {
	return NodeConfigEffectiveTaintsAttributes{ref: ref}
}

func (et NodeConfigEffectiveTaintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et NodeConfigEffectiveTaintsAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("effect"))
}

func (et NodeConfigEffectiveTaintsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("key"))
}

func (et NodeConfigEffectiveTaintsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("value"))
}

type NodeConfigGuestAcceleratorAttributes struct {
	ref terra.Reference
}

func (ga NodeConfigGuestAcceleratorAttributes) InternalRef() (terra.Reference, error) {
	return ga.ref, nil
}

func (ga NodeConfigGuestAcceleratorAttributes) InternalWithRef(ref terra.Reference) NodeConfigGuestAcceleratorAttributes {
	return NodeConfigGuestAcceleratorAttributes{ref: ref}
}

func (ga NodeConfigGuestAcceleratorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ga.ref.InternalTokens()
}

func (ga NodeConfigGuestAcceleratorAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(ga.ref.Append("count"))
}

func (ga NodeConfigGuestAcceleratorAttributes) GpuPartitionSize() terra.StringValue {
	return terra.ReferenceAsString(ga.ref.Append("gpu_partition_size"))
}

func (ga NodeConfigGuestAcceleratorAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ga.ref.Append("type"))
}

func (ga NodeConfigGuestAcceleratorAttributes) GpuDriverInstallationConfig() terra.ListValue[NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes](ga.ref.Append("gpu_driver_installation_config"))
}

func (ga NodeConfigGuestAcceleratorAttributes) GpuSharingConfig() terra.ListValue[NodeConfigGuestAcceleratorGpuSharingConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigGuestAcceleratorGpuSharingConfigAttributes](ga.ref.Append("gpu_sharing_config"))
}

type NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes struct {
	ref terra.Reference
}

func (gdic NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalRef() (terra.Reference, error) {
	return gdic.ref, nil
}

func (gdic NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes {
	return NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes{ref: ref}
}

func (gdic NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gdic.ref.InternalTokens()
}

func (gdic NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) GpuDriverVersion() terra.StringValue {
	return terra.ReferenceAsString(gdic.ref.Append("gpu_driver_version"))
}

type NodeConfigGuestAcceleratorGpuSharingConfigAttributes struct {
	ref terra.Reference
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalRef() (terra.Reference, error) {
	return gsc.ref, nil
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigGuestAcceleratorGpuSharingConfigAttributes {
	return NodeConfigGuestAcceleratorGpuSharingConfigAttributes{ref: ref}
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gsc.ref.InternalTokens()
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) GpuSharingStrategy() terra.StringValue {
	return terra.ReferenceAsString(gsc.ref.Append("gpu_sharing_strategy"))
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) MaxSharedClientsPerGpu() terra.NumberValue {
	return terra.ReferenceAsNumber(gsc.ref.Append("max_shared_clients_per_gpu"))
}

type NodeConfigAdvancedMachineFeaturesAttributes struct {
	ref terra.Reference
}

func (amf NodeConfigAdvancedMachineFeaturesAttributes) InternalRef() (terra.Reference, error) {
	return amf.ref, nil
}

func (amf NodeConfigAdvancedMachineFeaturesAttributes) InternalWithRef(ref terra.Reference) NodeConfigAdvancedMachineFeaturesAttributes {
	return NodeConfigAdvancedMachineFeaturesAttributes{ref: ref}
}

func (amf NodeConfigAdvancedMachineFeaturesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return amf.ref.InternalTokens()
}

func (amf NodeConfigAdvancedMachineFeaturesAttributes) ThreadsPerCore() terra.NumberValue {
	return terra.ReferenceAsNumber(amf.ref.Append("threads_per_core"))
}

type NodeConfigConfidentialNodesAttributes struct {
	ref terra.Reference
}

func (cn NodeConfigConfidentialNodesAttributes) InternalRef() (terra.Reference, error) {
	return cn.ref, nil
}

func (cn NodeConfigConfidentialNodesAttributes) InternalWithRef(ref terra.Reference) NodeConfigConfidentialNodesAttributes {
	return NodeConfigConfidentialNodesAttributes{ref: ref}
}

func (cn NodeConfigConfidentialNodesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cn.ref.InternalTokens()
}

func (cn NodeConfigConfidentialNodesAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cn.ref.Append("enabled"))
}

type NodeConfigEphemeralStorageConfigAttributes struct {
	ref terra.Reference
}

func (esc NodeConfigEphemeralStorageConfigAttributes) InternalRef() (terra.Reference, error) {
	return esc.ref, nil
}

func (esc NodeConfigEphemeralStorageConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigEphemeralStorageConfigAttributes {
	return NodeConfigEphemeralStorageConfigAttributes{ref: ref}
}

func (esc NodeConfigEphemeralStorageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return esc.ref.InternalTokens()
}

func (esc NodeConfigEphemeralStorageConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(esc.ref.Append("local_ssd_count"))
}

type NodeConfigEphemeralStorageLocalSsdConfigAttributes struct {
	ref terra.Reference
}

func (eslsc NodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalRef() (terra.Reference, error) {
	return eslsc.ref, nil
}

func (eslsc NodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigEphemeralStorageLocalSsdConfigAttributes {
	return NodeConfigEphemeralStorageLocalSsdConfigAttributes{ref: ref}
}

func (eslsc NodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eslsc.ref.InternalTokens()
}

func (eslsc NodeConfigEphemeralStorageLocalSsdConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(eslsc.ref.Append("local_ssd_count"))
}

type NodeConfigFastSocketAttributes struct {
	ref terra.Reference
}

func (fs NodeConfigFastSocketAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs NodeConfigFastSocketAttributes) InternalWithRef(ref terra.Reference) NodeConfigFastSocketAttributes {
	return NodeConfigFastSocketAttributes{ref: ref}
}

func (fs NodeConfigFastSocketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs NodeConfigFastSocketAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(fs.ref.Append("enabled"))
}

type NodeConfigGcfsConfigAttributes struct {
	ref terra.Reference
}

func (gc NodeConfigGcfsConfigAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc NodeConfigGcfsConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigGcfsConfigAttributes {
	return NodeConfigGcfsConfigAttributes{ref: ref}
}

func (gc NodeConfigGcfsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc NodeConfigGcfsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gc.ref.Append("enabled"))
}

type NodeConfigGvnicAttributes struct {
	ref terra.Reference
}

func (g NodeConfigGvnicAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g NodeConfigGvnicAttributes) InternalWithRef(ref terra.Reference) NodeConfigGvnicAttributes {
	return NodeConfigGvnicAttributes{ref: ref}
}

func (g NodeConfigGvnicAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g NodeConfigGvnicAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("enabled"))
}

type NodeConfigHostMaintenancePolicyAttributes struct {
	ref terra.Reference
}

func (hmp NodeConfigHostMaintenancePolicyAttributes) InternalRef() (terra.Reference, error) {
	return hmp.ref, nil
}

func (hmp NodeConfigHostMaintenancePolicyAttributes) InternalWithRef(ref terra.Reference) NodeConfigHostMaintenancePolicyAttributes {
	return NodeConfigHostMaintenancePolicyAttributes{ref: ref}
}

func (hmp NodeConfigHostMaintenancePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hmp.ref.InternalTokens()
}

func (hmp NodeConfigHostMaintenancePolicyAttributes) MaintenanceInterval() terra.StringValue {
	return terra.ReferenceAsString(hmp.ref.Append("maintenance_interval"))
}

type NodeConfigKubeletConfigAttributes struct {
	ref terra.Reference
}

func (kc NodeConfigKubeletConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc NodeConfigKubeletConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigKubeletConfigAttributes {
	return NodeConfigKubeletConfigAttributes{ref: ref}
}

func (kc NodeConfigKubeletConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc NodeConfigKubeletConfigAttributes) CpuCfsQuota() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("cpu_cfs_quota"))
}

func (kc NodeConfigKubeletConfigAttributes) CpuCfsQuotaPeriod() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cpu_cfs_quota_period"))
}

func (kc NodeConfigKubeletConfigAttributes) CpuManagerPolicy() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cpu_manager_policy"))
}

func (kc NodeConfigKubeletConfigAttributes) PodPidsLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("pod_pids_limit"))
}

type NodeConfigLinuxNodeConfigAttributes struct {
	ref terra.Reference
}

func (lnc NodeConfigLinuxNodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnc.ref, nil
}

func (lnc NodeConfigLinuxNodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigLinuxNodeConfigAttributes {
	return NodeConfigLinuxNodeConfigAttributes{ref: ref}
}

func (lnc NodeConfigLinuxNodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnc.ref.InternalTokens()
}

func (lnc NodeConfigLinuxNodeConfigAttributes) CgroupMode() terra.StringValue {
	return terra.ReferenceAsString(lnc.ref.Append("cgroup_mode"))
}

func (lnc NodeConfigLinuxNodeConfigAttributes) Sysctls() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lnc.ref.Append("sysctls"))
}

type NodeConfigLocalNvmeSsdBlockConfigAttributes struct {
	ref terra.Reference
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnsbc.ref, nil
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigLocalNvmeSsdBlockConfigAttributes {
	return NodeConfigLocalNvmeSsdBlockConfigAttributes{ref: ref}
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnsbc.ref.InternalTokens()
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(lnsbc.ref.Append("local_ssd_count"))
}

type NodeConfigReservationAffinityAttributes struct {
	ref terra.Reference
}

func (ra NodeConfigReservationAffinityAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra NodeConfigReservationAffinityAttributes) InternalWithRef(ref terra.Reference) NodeConfigReservationAffinityAttributes {
	return NodeConfigReservationAffinityAttributes{ref: ref}
}

func (ra NodeConfigReservationAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra NodeConfigReservationAffinityAttributes) ConsumeReservationType() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("consume_reservation_type"))
}

func (ra NodeConfigReservationAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("key"))
}

func (ra NodeConfigReservationAffinityAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ra.ref.Append("values"))
}

type NodeConfigSandboxConfigAttributes struct {
	ref terra.Reference
}

func (sc NodeConfigSandboxConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc NodeConfigSandboxConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigSandboxConfigAttributes {
	return NodeConfigSandboxConfigAttributes{ref: ref}
}

func (sc NodeConfigSandboxConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc NodeConfigSandboxConfigAttributes) SandboxType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("sandbox_type"))
}

type NodeConfigShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic NodeConfigShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic NodeConfigShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigShieldedInstanceConfigAttributes {
	return NodeConfigShieldedInstanceConfigAttributes{ref: ref}
}

func (sic NodeConfigShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic NodeConfigShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic NodeConfigShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

type NodeConfigSoleTenantConfigAttributes struct {
	ref terra.Reference
}

func (stc NodeConfigSoleTenantConfigAttributes) InternalRef() (terra.Reference, error) {
	return stc.ref, nil
}

func (stc NodeConfigSoleTenantConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigSoleTenantConfigAttributes {
	return NodeConfigSoleTenantConfigAttributes{ref: ref}
}

func (stc NodeConfigSoleTenantConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return stc.ref.InternalTokens()
}

func (stc NodeConfigSoleTenantConfigAttributes) NodeAffinity() terra.SetValue[NodeConfigSoleTenantConfigNodeAffinityAttributes] {
	return terra.ReferenceAsSet[NodeConfigSoleTenantConfigNodeAffinityAttributes](stc.ref.Append("node_affinity"))
}

type NodeConfigSoleTenantConfigNodeAffinityAttributes struct {
	ref terra.Reference
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) InternalRef() (terra.Reference, error) {
	return na.ref, nil
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) InternalWithRef(ref terra.Reference) NodeConfigSoleTenantConfigNodeAffinityAttributes {
	return NodeConfigSoleTenantConfigNodeAffinityAttributes{ref: ref}
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return na.ref.InternalTokens()
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("key"))
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("operator"))
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](na.ref.Append("values"))
}

type NodeConfigTaintAttributes struct {
	ref terra.Reference
}

func (t NodeConfigTaintAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t NodeConfigTaintAttributes) InternalWithRef(ref terra.Reference) NodeConfigTaintAttributes {
	return NodeConfigTaintAttributes{ref: ref}
}

func (t NodeConfigTaintAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t NodeConfigTaintAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("effect"))
}

func (t NodeConfigTaintAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t NodeConfigTaintAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type NodeConfigWorkloadMetadataConfigAttributes struct {
	ref terra.Reference
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) InternalRef() (terra.Reference, error) {
	return wmc.ref, nil
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigWorkloadMetadataConfigAttributes {
	return NodeConfigWorkloadMetadataConfigAttributes{ref: ref}
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wmc.ref.InternalTokens()
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(wmc.ref.Append("mode"))
}

type NodePoolAttributes struct {
	ref terra.Reference
}

func (np NodePoolAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np NodePoolAttributes) InternalWithRef(ref terra.Reference) NodePoolAttributes {
	return NodePoolAttributes{ref: ref}
}

func (np NodePoolAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np NodePoolAttributes) InitialNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("initial_node_count"))
}

func (np NodePoolAttributes) InstanceGroupUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](np.ref.Append("instance_group_urls"))
}

func (np NodePoolAttributes) ManagedInstanceGroupUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](np.ref.Append("managed_instance_group_urls"))
}

func (np NodePoolAttributes) MaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("max_pods_per_node"))
}

func (np NodePoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("name"))
}

func (np NodePoolAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("name_prefix"))
}

func (np NodePoolAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("node_count"))
}

func (np NodePoolAttributes) NodeLocations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](np.ref.Append("node_locations"))
}

func (np NodePoolAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("version"))
}

func (np NodePoolAttributes) Autoscaling() terra.ListValue[NodePoolAutoscalingAttributes] {
	return terra.ReferenceAsList[NodePoolAutoscalingAttributes](np.ref.Append("autoscaling"))
}

func (np NodePoolAttributes) Management() terra.ListValue[NodePoolManagementAttributes] {
	return terra.ReferenceAsList[NodePoolManagementAttributes](np.ref.Append("management"))
}

func (np NodePoolAttributes) NetworkConfig() terra.ListValue[NodePoolNetworkConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNetworkConfigAttributes](np.ref.Append("network_config"))
}

func (np NodePoolAttributes) NodeConfig() terra.ListValue[NodePoolNodeConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigAttributes](np.ref.Append("node_config"))
}

func (np NodePoolAttributes) PlacementPolicy() terra.ListValue[NodePoolPlacementPolicyAttributes] {
	return terra.ReferenceAsList[NodePoolPlacementPolicyAttributes](np.ref.Append("placement_policy"))
}

func (np NodePoolAttributes) QueuedProvisioning() terra.ListValue[NodePoolQueuedProvisioningAttributes] {
	return terra.ReferenceAsList[NodePoolQueuedProvisioningAttributes](np.ref.Append("queued_provisioning"))
}

func (np NodePoolAttributes) UpgradeSettings() terra.ListValue[NodePoolUpgradeSettingsAttributes] {
	return terra.ReferenceAsList[NodePoolUpgradeSettingsAttributes](np.ref.Append("upgrade_settings"))
}

type NodePoolAutoscalingAttributes struct {
	ref terra.Reference
}

func (a NodePoolAutoscalingAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a NodePoolAutoscalingAttributes) InternalWithRef(ref terra.Reference) NodePoolAutoscalingAttributes {
	return NodePoolAutoscalingAttributes{ref: ref}
}

func (a NodePoolAutoscalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a NodePoolAutoscalingAttributes) LocationPolicy() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("location_policy"))
}

func (a NodePoolAutoscalingAttributes) MaxNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("max_node_count"))
}

func (a NodePoolAutoscalingAttributes) MinNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("min_node_count"))
}

func (a NodePoolAutoscalingAttributes) TotalMaxNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("total_max_node_count"))
}

func (a NodePoolAutoscalingAttributes) TotalMinNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("total_min_node_count"))
}

type NodePoolManagementAttributes struct {
	ref terra.Reference
}

func (m NodePoolManagementAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m NodePoolManagementAttributes) InternalWithRef(ref terra.Reference) NodePoolManagementAttributes {
	return NodePoolManagementAttributes{ref: ref}
}

func (m NodePoolManagementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m NodePoolManagementAttributes) AutoRepair() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("auto_repair"))
}

func (m NodePoolManagementAttributes) AutoUpgrade() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("auto_upgrade"))
}

type NodePoolNetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc NodePoolNetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NodePoolNetworkConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNetworkConfigAttributes {
	return NodePoolNetworkConfigAttributes{ref: ref}
}

func (nc NodePoolNetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NodePoolNetworkConfigAttributes) CreatePodRange() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("create_pod_range"))
}

func (nc NodePoolNetworkConfigAttributes) EnablePrivateNodes() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("enable_private_nodes"))
}

func (nc NodePoolNetworkConfigAttributes) PodIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("pod_ipv4_cidr_block"))
}

func (nc NodePoolNetworkConfigAttributes) PodRange() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("pod_range"))
}

func (nc NodePoolNetworkConfigAttributes) AdditionalNodeNetworkConfigs() terra.ListValue[NodePoolNetworkConfigAdditionalNodeNetworkConfigsAttributes] {
	return terra.ReferenceAsList[NodePoolNetworkConfigAdditionalNodeNetworkConfigsAttributes](nc.ref.Append("additional_node_network_configs"))
}

func (nc NodePoolNetworkConfigAttributes) AdditionalPodNetworkConfigs() terra.ListValue[NodePoolNetworkConfigAdditionalPodNetworkConfigsAttributes] {
	return terra.ReferenceAsList[NodePoolNetworkConfigAdditionalPodNetworkConfigsAttributes](nc.ref.Append("additional_pod_network_configs"))
}

func (nc NodePoolNetworkConfigAttributes) NetworkPerformanceConfig() terra.ListValue[NodePoolNetworkConfigNetworkPerformanceConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNetworkConfigNetworkPerformanceConfigAttributes](nc.ref.Append("network_performance_config"))
}

func (nc NodePoolNetworkConfigAttributes) PodCidrOverprovisionConfig() terra.ListValue[NodePoolNetworkConfigPodCidrOverprovisionConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNetworkConfigPodCidrOverprovisionConfigAttributes](nc.ref.Append("pod_cidr_overprovision_config"))
}

type NodePoolNetworkConfigAdditionalNodeNetworkConfigsAttributes struct {
	ref terra.Reference
}

func (annc NodePoolNetworkConfigAdditionalNodeNetworkConfigsAttributes) InternalRef() (terra.Reference, error) {
	return annc.ref, nil
}

func (annc NodePoolNetworkConfigAdditionalNodeNetworkConfigsAttributes) InternalWithRef(ref terra.Reference) NodePoolNetworkConfigAdditionalNodeNetworkConfigsAttributes {
	return NodePoolNetworkConfigAdditionalNodeNetworkConfigsAttributes{ref: ref}
}

func (annc NodePoolNetworkConfigAdditionalNodeNetworkConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return annc.ref.InternalTokens()
}

func (annc NodePoolNetworkConfigAdditionalNodeNetworkConfigsAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(annc.ref.Append("network"))
}

func (annc NodePoolNetworkConfigAdditionalNodeNetworkConfigsAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(annc.ref.Append("subnetwork"))
}

type NodePoolNetworkConfigAdditionalPodNetworkConfigsAttributes struct {
	ref terra.Reference
}

func (apnc NodePoolNetworkConfigAdditionalPodNetworkConfigsAttributes) InternalRef() (terra.Reference, error) {
	return apnc.ref, nil
}

func (apnc NodePoolNetworkConfigAdditionalPodNetworkConfigsAttributes) InternalWithRef(ref terra.Reference) NodePoolNetworkConfigAdditionalPodNetworkConfigsAttributes {
	return NodePoolNetworkConfigAdditionalPodNetworkConfigsAttributes{ref: ref}
}

func (apnc NodePoolNetworkConfigAdditionalPodNetworkConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return apnc.ref.InternalTokens()
}

func (apnc NodePoolNetworkConfigAdditionalPodNetworkConfigsAttributes) MaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(apnc.ref.Append("max_pods_per_node"))
}

func (apnc NodePoolNetworkConfigAdditionalPodNetworkConfigsAttributes) SecondaryPodRange() terra.StringValue {
	return terra.ReferenceAsString(apnc.ref.Append("secondary_pod_range"))
}

func (apnc NodePoolNetworkConfigAdditionalPodNetworkConfigsAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(apnc.ref.Append("subnetwork"))
}

type NodePoolNetworkConfigNetworkPerformanceConfigAttributes struct {
	ref terra.Reference
}

func (npc NodePoolNetworkConfigNetworkPerformanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return npc.ref, nil
}

func (npc NodePoolNetworkConfigNetworkPerformanceConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNetworkConfigNetworkPerformanceConfigAttributes {
	return NodePoolNetworkConfigNetworkPerformanceConfigAttributes{ref: ref}
}

func (npc NodePoolNetworkConfigNetworkPerformanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npc.ref.InternalTokens()
}

func (npc NodePoolNetworkConfigNetworkPerformanceConfigAttributes) TotalEgressBandwidthTier() terra.StringValue {
	return terra.ReferenceAsString(npc.ref.Append("total_egress_bandwidth_tier"))
}

type NodePoolNetworkConfigPodCidrOverprovisionConfigAttributes struct {
	ref terra.Reference
}

func (pcoc NodePoolNetworkConfigPodCidrOverprovisionConfigAttributes) InternalRef() (terra.Reference, error) {
	return pcoc.ref, nil
}

func (pcoc NodePoolNetworkConfigPodCidrOverprovisionConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNetworkConfigPodCidrOverprovisionConfigAttributes {
	return NodePoolNetworkConfigPodCidrOverprovisionConfigAttributes{ref: ref}
}

func (pcoc NodePoolNetworkConfigPodCidrOverprovisionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pcoc.ref.InternalTokens()
}

func (pcoc NodePoolNetworkConfigPodCidrOverprovisionConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(pcoc.ref.Append("disabled"))
}

type NodePoolNodeConfigAttributes struct {
	ref terra.Reference
}

func (nc NodePoolNodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NodePoolNodeConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigAttributes {
	return NodePoolNodeConfigAttributes{ref: ref}
}

func (nc NodePoolNodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NodePoolNodeConfigAttributes) BootDiskKmsKey() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("boot_disk_kms_key"))
}

func (nc NodePoolNodeConfigAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("disk_size_gb"))
}

func (nc NodePoolNodeConfigAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("disk_type"))
}

func (nc NodePoolNodeConfigAttributes) EnableConfidentialStorage() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("enable_confidential_storage"))
}

func (nc NodePoolNodeConfigAttributes) ImageType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("image_type"))
}

func (nc NodePoolNodeConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("labels"))
}

func (nc NodePoolNodeConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("local_ssd_count"))
}

func (nc NodePoolNodeConfigAttributes) LoggingVariant() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("logging_variant"))
}

func (nc NodePoolNodeConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("machine_type"))
}

func (nc NodePoolNodeConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("metadata"))
}

func (nc NodePoolNodeConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("min_cpu_platform"))
}

func (nc NodePoolNodeConfigAttributes) NodeGroup() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("node_group"))
}

func (nc NodePoolNodeConfigAttributes) OauthScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("oauth_scopes"))
}

func (nc NodePoolNodeConfigAttributes) Preemptible() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("preemptible"))
}

func (nc NodePoolNodeConfigAttributes) ResourceLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("resource_labels"))
}

func (nc NodePoolNodeConfigAttributes) ResourceManagerTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("resource_manager_tags"))
}

func (nc NodePoolNodeConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("service_account"))
}

func (nc NodePoolNodeConfigAttributes) Spot() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("spot"))
}

func (nc NodePoolNodeConfigAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("tags"))
}

func (nc NodePoolNodeConfigAttributes) EffectiveTaints() terra.ListValue[NodePoolNodeConfigEffectiveTaintsAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigEffectiveTaintsAttributes](nc.ref.Append("effective_taints"))
}

func (nc NodePoolNodeConfigAttributes) GuestAccelerator() terra.ListValue[NodePoolNodeConfigGuestAcceleratorAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigGuestAcceleratorAttributes](nc.ref.Append("guest_accelerator"))
}

func (nc NodePoolNodeConfigAttributes) AdvancedMachineFeatures() terra.ListValue[NodePoolNodeConfigAdvancedMachineFeaturesAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigAdvancedMachineFeaturesAttributes](nc.ref.Append("advanced_machine_features"))
}

func (nc NodePoolNodeConfigAttributes) ConfidentialNodes() terra.ListValue[NodePoolNodeConfigConfidentialNodesAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigConfidentialNodesAttributes](nc.ref.Append("confidential_nodes"))
}

func (nc NodePoolNodeConfigAttributes) EphemeralStorageConfig() terra.ListValue[NodePoolNodeConfigEphemeralStorageConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigEphemeralStorageConfigAttributes](nc.ref.Append("ephemeral_storage_config"))
}

func (nc NodePoolNodeConfigAttributes) EphemeralStorageLocalSsdConfig() terra.ListValue[NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes](nc.ref.Append("ephemeral_storage_local_ssd_config"))
}

func (nc NodePoolNodeConfigAttributes) FastSocket() terra.ListValue[NodePoolNodeConfigFastSocketAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigFastSocketAttributes](nc.ref.Append("fast_socket"))
}

func (nc NodePoolNodeConfigAttributes) GcfsConfig() terra.ListValue[NodePoolNodeConfigGcfsConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigGcfsConfigAttributes](nc.ref.Append("gcfs_config"))
}

func (nc NodePoolNodeConfigAttributes) Gvnic() terra.ListValue[NodePoolNodeConfigGvnicAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigGvnicAttributes](nc.ref.Append("gvnic"))
}

func (nc NodePoolNodeConfigAttributes) HostMaintenancePolicy() terra.ListValue[NodePoolNodeConfigHostMaintenancePolicyAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigHostMaintenancePolicyAttributes](nc.ref.Append("host_maintenance_policy"))
}

func (nc NodePoolNodeConfigAttributes) KubeletConfig() terra.ListValue[NodePoolNodeConfigKubeletConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigKubeletConfigAttributes](nc.ref.Append("kubelet_config"))
}

func (nc NodePoolNodeConfigAttributes) LinuxNodeConfig() terra.ListValue[NodePoolNodeConfigLinuxNodeConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigLinuxNodeConfigAttributes](nc.ref.Append("linux_node_config"))
}

func (nc NodePoolNodeConfigAttributes) LocalNvmeSsdBlockConfig() terra.ListValue[NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes](nc.ref.Append("local_nvme_ssd_block_config"))
}

func (nc NodePoolNodeConfigAttributes) ReservationAffinity() terra.ListValue[NodePoolNodeConfigReservationAffinityAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigReservationAffinityAttributes](nc.ref.Append("reservation_affinity"))
}

func (nc NodePoolNodeConfigAttributes) SandboxConfig() terra.ListValue[NodePoolNodeConfigSandboxConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigSandboxConfigAttributes](nc.ref.Append("sandbox_config"))
}

func (nc NodePoolNodeConfigAttributes) ShieldedInstanceConfig() terra.ListValue[NodePoolNodeConfigShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigShieldedInstanceConfigAttributes](nc.ref.Append("shielded_instance_config"))
}

func (nc NodePoolNodeConfigAttributes) SoleTenantConfig() terra.ListValue[NodePoolNodeConfigSoleTenantConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigSoleTenantConfigAttributes](nc.ref.Append("sole_tenant_config"))
}

func (nc NodePoolNodeConfigAttributes) Taint() terra.ListValue[NodePoolNodeConfigTaintAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigTaintAttributes](nc.ref.Append("taint"))
}

func (nc NodePoolNodeConfigAttributes) WorkloadMetadataConfig() terra.ListValue[NodePoolNodeConfigWorkloadMetadataConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigWorkloadMetadataConfigAttributes](nc.ref.Append("workload_metadata_config"))
}

type NodePoolNodeConfigEffectiveTaintsAttributes struct {
	ref terra.Reference
}

func (et NodePoolNodeConfigEffectiveTaintsAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et NodePoolNodeConfigEffectiveTaintsAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigEffectiveTaintsAttributes {
	return NodePoolNodeConfigEffectiveTaintsAttributes{ref: ref}
}

func (et NodePoolNodeConfigEffectiveTaintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et NodePoolNodeConfigEffectiveTaintsAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("effect"))
}

func (et NodePoolNodeConfigEffectiveTaintsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("key"))
}

func (et NodePoolNodeConfigEffectiveTaintsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("value"))
}

type NodePoolNodeConfigGuestAcceleratorAttributes struct {
	ref terra.Reference
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) InternalRef() (terra.Reference, error) {
	return ga.ref, nil
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigGuestAcceleratorAttributes {
	return NodePoolNodeConfigGuestAcceleratorAttributes{ref: ref}
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ga.ref.InternalTokens()
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(ga.ref.Append("count"))
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) GpuPartitionSize() terra.StringValue {
	return terra.ReferenceAsString(ga.ref.Append("gpu_partition_size"))
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ga.ref.Append("type"))
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) GpuDriverInstallationConfig() terra.ListValue[NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes](ga.ref.Append("gpu_driver_installation_config"))
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) GpuSharingConfig() terra.ListValue[NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes](ga.ref.Append("gpu_sharing_config"))
}

type NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes struct {
	ref terra.Reference
}

func (gdic NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalRef() (terra.Reference, error) {
	return gdic.ref, nil
}

func (gdic NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes {
	return NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes{ref: ref}
}

func (gdic NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gdic.ref.InternalTokens()
}

func (gdic NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) GpuDriverVersion() terra.StringValue {
	return terra.ReferenceAsString(gdic.ref.Append("gpu_driver_version"))
}

type NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes struct {
	ref terra.Reference
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalRef() (terra.Reference, error) {
	return gsc.ref, nil
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes {
	return NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes{ref: ref}
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gsc.ref.InternalTokens()
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) GpuSharingStrategy() terra.StringValue {
	return terra.ReferenceAsString(gsc.ref.Append("gpu_sharing_strategy"))
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) MaxSharedClientsPerGpu() terra.NumberValue {
	return terra.ReferenceAsNumber(gsc.ref.Append("max_shared_clients_per_gpu"))
}

type NodePoolNodeConfigAdvancedMachineFeaturesAttributes struct {
	ref terra.Reference
}

func (amf NodePoolNodeConfigAdvancedMachineFeaturesAttributes) InternalRef() (terra.Reference, error) {
	return amf.ref, nil
}

func (amf NodePoolNodeConfigAdvancedMachineFeaturesAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigAdvancedMachineFeaturesAttributes {
	return NodePoolNodeConfigAdvancedMachineFeaturesAttributes{ref: ref}
}

func (amf NodePoolNodeConfigAdvancedMachineFeaturesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return amf.ref.InternalTokens()
}

func (amf NodePoolNodeConfigAdvancedMachineFeaturesAttributes) ThreadsPerCore() terra.NumberValue {
	return terra.ReferenceAsNumber(amf.ref.Append("threads_per_core"))
}

type NodePoolNodeConfigConfidentialNodesAttributes struct {
	ref terra.Reference
}

func (cn NodePoolNodeConfigConfidentialNodesAttributes) InternalRef() (terra.Reference, error) {
	return cn.ref, nil
}

func (cn NodePoolNodeConfigConfidentialNodesAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigConfidentialNodesAttributes {
	return NodePoolNodeConfigConfidentialNodesAttributes{ref: ref}
}

func (cn NodePoolNodeConfigConfidentialNodesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cn.ref.InternalTokens()
}

func (cn NodePoolNodeConfigConfidentialNodesAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cn.ref.Append("enabled"))
}

type NodePoolNodeConfigEphemeralStorageConfigAttributes struct {
	ref terra.Reference
}

func (esc NodePoolNodeConfigEphemeralStorageConfigAttributes) InternalRef() (terra.Reference, error) {
	return esc.ref, nil
}

func (esc NodePoolNodeConfigEphemeralStorageConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigEphemeralStorageConfigAttributes {
	return NodePoolNodeConfigEphemeralStorageConfigAttributes{ref: ref}
}

func (esc NodePoolNodeConfigEphemeralStorageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return esc.ref.InternalTokens()
}

func (esc NodePoolNodeConfigEphemeralStorageConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(esc.ref.Append("local_ssd_count"))
}

type NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes struct {
	ref terra.Reference
}

func (eslsc NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalRef() (terra.Reference, error) {
	return eslsc.ref, nil
}

func (eslsc NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes {
	return NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes{ref: ref}
}

func (eslsc NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eslsc.ref.InternalTokens()
}

func (eslsc NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(eslsc.ref.Append("local_ssd_count"))
}

type NodePoolNodeConfigFastSocketAttributes struct {
	ref terra.Reference
}

func (fs NodePoolNodeConfigFastSocketAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs NodePoolNodeConfigFastSocketAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigFastSocketAttributes {
	return NodePoolNodeConfigFastSocketAttributes{ref: ref}
}

func (fs NodePoolNodeConfigFastSocketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs NodePoolNodeConfigFastSocketAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(fs.ref.Append("enabled"))
}

type NodePoolNodeConfigGcfsConfigAttributes struct {
	ref terra.Reference
}

func (gc NodePoolNodeConfigGcfsConfigAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc NodePoolNodeConfigGcfsConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigGcfsConfigAttributes {
	return NodePoolNodeConfigGcfsConfigAttributes{ref: ref}
}

func (gc NodePoolNodeConfigGcfsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc NodePoolNodeConfigGcfsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gc.ref.Append("enabled"))
}

type NodePoolNodeConfigGvnicAttributes struct {
	ref terra.Reference
}

func (g NodePoolNodeConfigGvnicAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g NodePoolNodeConfigGvnicAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigGvnicAttributes {
	return NodePoolNodeConfigGvnicAttributes{ref: ref}
}

func (g NodePoolNodeConfigGvnicAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g NodePoolNodeConfigGvnicAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("enabled"))
}

type NodePoolNodeConfigHostMaintenancePolicyAttributes struct {
	ref terra.Reference
}

func (hmp NodePoolNodeConfigHostMaintenancePolicyAttributes) InternalRef() (terra.Reference, error) {
	return hmp.ref, nil
}

func (hmp NodePoolNodeConfigHostMaintenancePolicyAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigHostMaintenancePolicyAttributes {
	return NodePoolNodeConfigHostMaintenancePolicyAttributes{ref: ref}
}

func (hmp NodePoolNodeConfigHostMaintenancePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hmp.ref.InternalTokens()
}

func (hmp NodePoolNodeConfigHostMaintenancePolicyAttributes) MaintenanceInterval() terra.StringValue {
	return terra.ReferenceAsString(hmp.ref.Append("maintenance_interval"))
}

type NodePoolNodeConfigKubeletConfigAttributes struct {
	ref terra.Reference
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigKubeletConfigAttributes {
	return NodePoolNodeConfigKubeletConfigAttributes{ref: ref}
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) CpuCfsQuota() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("cpu_cfs_quota"))
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) CpuCfsQuotaPeriod() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cpu_cfs_quota_period"))
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) CpuManagerPolicy() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cpu_manager_policy"))
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) PodPidsLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("pod_pids_limit"))
}

type NodePoolNodeConfigLinuxNodeConfigAttributes struct {
	ref terra.Reference
}

func (lnc NodePoolNodeConfigLinuxNodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnc.ref, nil
}

func (lnc NodePoolNodeConfigLinuxNodeConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigLinuxNodeConfigAttributes {
	return NodePoolNodeConfigLinuxNodeConfigAttributes{ref: ref}
}

func (lnc NodePoolNodeConfigLinuxNodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnc.ref.InternalTokens()
}

func (lnc NodePoolNodeConfigLinuxNodeConfigAttributes) CgroupMode() terra.StringValue {
	return terra.ReferenceAsString(lnc.ref.Append("cgroup_mode"))
}

func (lnc NodePoolNodeConfigLinuxNodeConfigAttributes) Sysctls() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lnc.ref.Append("sysctls"))
}

type NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes struct {
	ref terra.Reference
}

func (lnsbc NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnsbc.ref, nil
}

func (lnsbc NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes {
	return NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes{ref: ref}
}

func (lnsbc NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnsbc.ref.InternalTokens()
}

func (lnsbc NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(lnsbc.ref.Append("local_ssd_count"))
}

type NodePoolNodeConfigReservationAffinityAttributes struct {
	ref terra.Reference
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigReservationAffinityAttributes {
	return NodePoolNodeConfigReservationAffinityAttributes{ref: ref}
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) ConsumeReservationType() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("consume_reservation_type"))
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("key"))
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ra.ref.Append("values"))
}

type NodePoolNodeConfigSandboxConfigAttributes struct {
	ref terra.Reference
}

func (sc NodePoolNodeConfigSandboxConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc NodePoolNodeConfigSandboxConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigSandboxConfigAttributes {
	return NodePoolNodeConfigSandboxConfigAttributes{ref: ref}
}

func (sc NodePoolNodeConfigSandboxConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc NodePoolNodeConfigSandboxConfigAttributes) SandboxType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("sandbox_type"))
}

type NodePoolNodeConfigShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigShieldedInstanceConfigAttributes {
	return NodePoolNodeConfigShieldedInstanceConfigAttributes{ref: ref}
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

type NodePoolNodeConfigSoleTenantConfigAttributes struct {
	ref terra.Reference
}

func (stc NodePoolNodeConfigSoleTenantConfigAttributes) InternalRef() (terra.Reference, error) {
	return stc.ref, nil
}

func (stc NodePoolNodeConfigSoleTenantConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigSoleTenantConfigAttributes {
	return NodePoolNodeConfigSoleTenantConfigAttributes{ref: ref}
}

func (stc NodePoolNodeConfigSoleTenantConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return stc.ref.InternalTokens()
}

func (stc NodePoolNodeConfigSoleTenantConfigAttributes) NodeAffinity() terra.SetValue[NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes] {
	return terra.ReferenceAsSet[NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes](stc.ref.Append("node_affinity"))
}

type NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes struct {
	ref terra.Reference
}

func (na NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes) InternalRef() (terra.Reference, error) {
	return na.ref, nil
}

func (na NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes {
	return NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes{ref: ref}
}

func (na NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return na.ref.InternalTokens()
}

func (na NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("key"))
}

func (na NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("operator"))
}

func (na NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](na.ref.Append("values"))
}

type NodePoolNodeConfigTaintAttributes struct {
	ref terra.Reference
}

func (t NodePoolNodeConfigTaintAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t NodePoolNodeConfigTaintAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigTaintAttributes {
	return NodePoolNodeConfigTaintAttributes{ref: ref}
}

func (t NodePoolNodeConfigTaintAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t NodePoolNodeConfigTaintAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("effect"))
}

func (t NodePoolNodeConfigTaintAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t NodePoolNodeConfigTaintAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type NodePoolNodeConfigWorkloadMetadataConfigAttributes struct {
	ref terra.Reference
}

func (wmc NodePoolNodeConfigWorkloadMetadataConfigAttributes) InternalRef() (terra.Reference, error) {
	return wmc.ref, nil
}

func (wmc NodePoolNodeConfigWorkloadMetadataConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigWorkloadMetadataConfigAttributes {
	return NodePoolNodeConfigWorkloadMetadataConfigAttributes{ref: ref}
}

func (wmc NodePoolNodeConfigWorkloadMetadataConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wmc.ref.InternalTokens()
}

func (wmc NodePoolNodeConfigWorkloadMetadataConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(wmc.ref.Append("mode"))
}

type NodePoolPlacementPolicyAttributes struct {
	ref terra.Reference
}

func (pp NodePoolPlacementPolicyAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp NodePoolPlacementPolicyAttributes) InternalWithRef(ref terra.Reference) NodePoolPlacementPolicyAttributes {
	return NodePoolPlacementPolicyAttributes{ref: ref}
}

func (pp NodePoolPlacementPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp NodePoolPlacementPolicyAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("policy_name"))
}

func (pp NodePoolPlacementPolicyAttributes) TpuTopology() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("tpu_topology"))
}

func (pp NodePoolPlacementPolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("type"))
}

type NodePoolQueuedProvisioningAttributes struct {
	ref terra.Reference
}

func (qp NodePoolQueuedProvisioningAttributes) InternalRef() (terra.Reference, error) {
	return qp.ref, nil
}

func (qp NodePoolQueuedProvisioningAttributes) InternalWithRef(ref terra.Reference) NodePoolQueuedProvisioningAttributes {
	return NodePoolQueuedProvisioningAttributes{ref: ref}
}

func (qp NodePoolQueuedProvisioningAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qp.ref.InternalTokens()
}

func (qp NodePoolQueuedProvisioningAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(qp.ref.Append("enabled"))
}

type NodePoolUpgradeSettingsAttributes struct {
	ref terra.Reference
}

func (us NodePoolUpgradeSettingsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us NodePoolUpgradeSettingsAttributes) InternalWithRef(ref terra.Reference) NodePoolUpgradeSettingsAttributes {
	return NodePoolUpgradeSettingsAttributes{ref: ref}
}

func (us NodePoolUpgradeSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us NodePoolUpgradeSettingsAttributes) MaxSurge() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("max_surge"))
}

func (us NodePoolUpgradeSettingsAttributes) MaxUnavailable() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("max_unavailable"))
}

func (us NodePoolUpgradeSettingsAttributes) Strategy() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("strategy"))
}

func (us NodePoolUpgradeSettingsAttributes) BlueGreenSettings() terra.ListValue[NodePoolUpgradeSettingsBlueGreenSettingsAttributes] {
	return terra.ReferenceAsList[NodePoolUpgradeSettingsBlueGreenSettingsAttributes](us.ref.Append("blue_green_settings"))
}

type NodePoolUpgradeSettingsBlueGreenSettingsAttributes struct {
	ref terra.Reference
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) InternalRef() (terra.Reference, error) {
	return bgs.ref, nil
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) InternalWithRef(ref terra.Reference) NodePoolUpgradeSettingsBlueGreenSettingsAttributes {
	return NodePoolUpgradeSettingsBlueGreenSettingsAttributes{ref: ref}
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bgs.ref.InternalTokens()
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) NodePoolSoakDuration() terra.StringValue {
	return terra.ReferenceAsString(bgs.ref.Append("node_pool_soak_duration"))
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) StandardRolloutPolicy() terra.ListValue[NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes] {
	return terra.ReferenceAsList[NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes](bgs.ref.Append("standard_rollout_policy"))
}

type NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes struct {
	ref terra.Reference
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalRef() (terra.Reference, error) {
	return srp.ref, nil
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalWithRef(ref terra.Reference) NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes {
	return NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes{ref: ref}
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return srp.ref.InternalTokens()
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(srp.ref.Append("batch_node_count"))
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(srp.ref.Append("batch_percentage"))
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchSoakDuration() terra.StringValue {
	return terra.ReferenceAsString(srp.ref.Append("batch_soak_duration"))
}

type NodePoolAutoConfigAttributes struct {
	ref terra.Reference
}

func (npac NodePoolAutoConfigAttributes) InternalRef() (terra.Reference, error) {
	return npac.ref, nil
}

func (npac NodePoolAutoConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolAutoConfigAttributes {
	return NodePoolAutoConfigAttributes{ref: ref}
}

func (npac NodePoolAutoConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npac.ref.InternalTokens()
}

func (npac NodePoolAutoConfigAttributes) ResourceManagerTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](npac.ref.Append("resource_manager_tags"))
}

func (npac NodePoolAutoConfigAttributes) NetworkTags() terra.ListValue[NodePoolAutoConfigNetworkTagsAttributes] {
	return terra.ReferenceAsList[NodePoolAutoConfigNetworkTagsAttributes](npac.ref.Append("network_tags"))
}

type NodePoolAutoConfigNetworkTagsAttributes struct {
	ref terra.Reference
}

func (nt NodePoolAutoConfigNetworkTagsAttributes) InternalRef() (terra.Reference, error) {
	return nt.ref, nil
}

func (nt NodePoolAutoConfigNetworkTagsAttributes) InternalWithRef(ref terra.Reference) NodePoolAutoConfigNetworkTagsAttributes {
	return NodePoolAutoConfigNetworkTagsAttributes{ref: ref}
}

func (nt NodePoolAutoConfigNetworkTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nt.ref.InternalTokens()
}

func (nt NodePoolAutoConfigNetworkTagsAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nt.ref.Append("tags"))
}

type NodePoolDefaultsAttributes struct {
	ref terra.Reference
}

func (npd NodePoolDefaultsAttributes) InternalRef() (terra.Reference, error) {
	return npd.ref, nil
}

func (npd NodePoolDefaultsAttributes) InternalWithRef(ref terra.Reference) NodePoolDefaultsAttributes {
	return NodePoolDefaultsAttributes{ref: ref}
}

func (npd NodePoolDefaultsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npd.ref.InternalTokens()
}

func (npd NodePoolDefaultsAttributes) NodeConfigDefaults() terra.ListValue[NodePoolDefaultsNodeConfigDefaultsAttributes] {
	return terra.ReferenceAsList[NodePoolDefaultsNodeConfigDefaultsAttributes](npd.ref.Append("node_config_defaults"))
}

type NodePoolDefaultsNodeConfigDefaultsAttributes struct {
	ref terra.Reference
}

func (ncd NodePoolDefaultsNodeConfigDefaultsAttributes) InternalRef() (terra.Reference, error) {
	return ncd.ref, nil
}

func (ncd NodePoolDefaultsNodeConfigDefaultsAttributes) InternalWithRef(ref terra.Reference) NodePoolDefaultsNodeConfigDefaultsAttributes {
	return NodePoolDefaultsNodeConfigDefaultsAttributes{ref: ref}
}

func (ncd NodePoolDefaultsNodeConfigDefaultsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ncd.ref.InternalTokens()
}

func (ncd NodePoolDefaultsNodeConfigDefaultsAttributes) LoggingVariant() terra.StringValue {
	return terra.ReferenceAsString(ncd.ref.Append("logging_variant"))
}

func (ncd NodePoolDefaultsNodeConfigDefaultsAttributes) GcfsConfig() terra.ListValue[NodePoolDefaultsNodeConfigDefaultsGcfsConfigAttributes] {
	return terra.ReferenceAsList[NodePoolDefaultsNodeConfigDefaultsGcfsConfigAttributes](ncd.ref.Append("gcfs_config"))
}

type NodePoolDefaultsNodeConfigDefaultsGcfsConfigAttributes struct {
	ref terra.Reference
}

func (gc NodePoolDefaultsNodeConfigDefaultsGcfsConfigAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc NodePoolDefaultsNodeConfigDefaultsGcfsConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolDefaultsNodeConfigDefaultsGcfsConfigAttributes {
	return NodePoolDefaultsNodeConfigDefaultsGcfsConfigAttributes{ref: ref}
}

func (gc NodePoolDefaultsNodeConfigDefaultsGcfsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc NodePoolDefaultsNodeConfigDefaultsGcfsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gc.ref.Append("enabled"))
}

type NotificationConfigAttributes struct {
	ref terra.Reference
}

func (nc NotificationConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NotificationConfigAttributes) InternalWithRef(ref terra.Reference) NotificationConfigAttributes {
	return NotificationConfigAttributes{ref: ref}
}

func (nc NotificationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NotificationConfigAttributes) Pubsub() terra.ListValue[NotificationConfigPubsubAttributes] {
	return terra.ReferenceAsList[NotificationConfigPubsubAttributes](nc.ref.Append("pubsub"))
}

type NotificationConfigPubsubAttributes struct {
	ref terra.Reference
}

func (p NotificationConfigPubsubAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p NotificationConfigPubsubAttributes) InternalWithRef(ref terra.Reference) NotificationConfigPubsubAttributes {
	return NotificationConfigPubsubAttributes{ref: ref}
}

func (p NotificationConfigPubsubAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p NotificationConfigPubsubAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("enabled"))
}

func (p NotificationConfigPubsubAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("topic"))
}

func (p NotificationConfigPubsubAttributes) Filter() terra.ListValue[NotificationConfigPubsubFilterAttributes] {
	return terra.ReferenceAsList[NotificationConfigPubsubFilterAttributes](p.ref.Append("filter"))
}

type NotificationConfigPubsubFilterAttributes struct {
	ref terra.Reference
}

func (f NotificationConfigPubsubFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f NotificationConfigPubsubFilterAttributes) InternalWithRef(ref terra.Reference) NotificationConfigPubsubFilterAttributes {
	return NotificationConfigPubsubFilterAttributes{ref: ref}
}

func (f NotificationConfigPubsubFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f NotificationConfigPubsubFilterAttributes) EventType() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](f.ref.Append("event_type"))
}

type PodSecurityPolicyConfigAttributes struct {
	ref terra.Reference
}

func (pspc PodSecurityPolicyConfigAttributes) InternalRef() (terra.Reference, error) {
	return pspc.ref, nil
}

func (pspc PodSecurityPolicyConfigAttributes) InternalWithRef(ref terra.Reference) PodSecurityPolicyConfigAttributes {
	return PodSecurityPolicyConfigAttributes{ref: ref}
}

func (pspc PodSecurityPolicyConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pspc.ref.InternalTokens()
}

func (pspc PodSecurityPolicyConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pspc.ref.Append("enabled"))
}

type PrivateClusterConfigAttributes struct {
	ref terra.Reference
}

func (pcc PrivateClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return pcc.ref, nil
}

func (pcc PrivateClusterConfigAttributes) InternalWithRef(ref terra.Reference) PrivateClusterConfigAttributes {
	return PrivateClusterConfigAttributes{ref: ref}
}

func (pcc PrivateClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pcc.ref.InternalTokens()
}

func (pcc PrivateClusterConfigAttributes) EnablePrivateEndpoint() terra.BoolValue {
	return terra.ReferenceAsBool(pcc.ref.Append("enable_private_endpoint"))
}

func (pcc PrivateClusterConfigAttributes) EnablePrivateNodes() terra.BoolValue {
	return terra.ReferenceAsBool(pcc.ref.Append("enable_private_nodes"))
}

func (pcc PrivateClusterConfigAttributes) MasterIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(pcc.ref.Append("master_ipv4_cidr_block"))
}

func (pcc PrivateClusterConfigAttributes) PeeringName() terra.StringValue {
	return terra.ReferenceAsString(pcc.ref.Append("peering_name"))
}

func (pcc PrivateClusterConfigAttributes) PrivateEndpoint() terra.StringValue {
	return terra.ReferenceAsString(pcc.ref.Append("private_endpoint"))
}

func (pcc PrivateClusterConfigAttributes) PrivateEndpointSubnetwork() terra.StringValue {
	return terra.ReferenceAsString(pcc.ref.Append("private_endpoint_subnetwork"))
}

func (pcc PrivateClusterConfigAttributes) PublicEndpoint() terra.StringValue {
	return terra.ReferenceAsString(pcc.ref.Append("public_endpoint"))
}

func (pcc PrivateClusterConfigAttributes) MasterGlobalAccessConfig() terra.ListValue[PrivateClusterConfigMasterGlobalAccessConfigAttributes] {
	return terra.ReferenceAsList[PrivateClusterConfigMasterGlobalAccessConfigAttributes](pcc.ref.Append("master_global_access_config"))
}

type PrivateClusterConfigMasterGlobalAccessConfigAttributes struct {
	ref terra.Reference
}

func (mgac PrivateClusterConfigMasterGlobalAccessConfigAttributes) InternalRef() (terra.Reference, error) {
	return mgac.ref, nil
}

func (mgac PrivateClusterConfigMasterGlobalAccessConfigAttributes) InternalWithRef(ref terra.Reference) PrivateClusterConfigMasterGlobalAccessConfigAttributes {
	return PrivateClusterConfigMasterGlobalAccessConfigAttributes{ref: ref}
}

func (mgac PrivateClusterConfigMasterGlobalAccessConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mgac.ref.InternalTokens()
}

func (mgac PrivateClusterConfigMasterGlobalAccessConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(mgac.ref.Append("enabled"))
}

type ProtectConfigAttributes struct {
	ref terra.Reference
}

func (pc ProtectConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc ProtectConfigAttributes) InternalWithRef(ref terra.Reference) ProtectConfigAttributes {
	return ProtectConfigAttributes{ref: ref}
}

func (pc ProtectConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc ProtectConfigAttributes) WorkloadVulnerabilityMode() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("workload_vulnerability_mode"))
}

func (pc ProtectConfigAttributes) WorkloadConfig() terra.ListValue[ProtectConfigWorkloadConfigAttributes] {
	return terra.ReferenceAsList[ProtectConfigWorkloadConfigAttributes](pc.ref.Append("workload_config"))
}

type ProtectConfigWorkloadConfigAttributes struct {
	ref terra.Reference
}

func (wc ProtectConfigWorkloadConfigAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc ProtectConfigWorkloadConfigAttributes) InternalWithRef(ref terra.Reference) ProtectConfigWorkloadConfigAttributes {
	return ProtectConfigWorkloadConfigAttributes{ref: ref}
}

func (wc ProtectConfigWorkloadConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc ProtectConfigWorkloadConfigAttributes) AuditMode() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("audit_mode"))
}

type ReleaseChannelAttributes struct {
	ref terra.Reference
}

func (rc ReleaseChannelAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc ReleaseChannelAttributes) InternalWithRef(ref terra.Reference) ReleaseChannelAttributes {
	return ReleaseChannelAttributes{ref: ref}
}

func (rc ReleaseChannelAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc ReleaseChannelAttributes) Channel() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("channel"))
}

type ResourceUsageExportConfigAttributes struct {
	ref terra.Reference
}

func (ruec ResourceUsageExportConfigAttributes) InternalRef() (terra.Reference, error) {
	return ruec.ref, nil
}

func (ruec ResourceUsageExportConfigAttributes) InternalWithRef(ref terra.Reference) ResourceUsageExportConfigAttributes {
	return ResourceUsageExportConfigAttributes{ref: ref}
}

func (ruec ResourceUsageExportConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ruec.ref.InternalTokens()
}

func (ruec ResourceUsageExportConfigAttributes) EnableNetworkEgressMetering() terra.BoolValue {
	return terra.ReferenceAsBool(ruec.ref.Append("enable_network_egress_metering"))
}

func (ruec ResourceUsageExportConfigAttributes) EnableResourceConsumptionMetering() terra.BoolValue {
	return terra.ReferenceAsBool(ruec.ref.Append("enable_resource_consumption_metering"))
}

func (ruec ResourceUsageExportConfigAttributes) BigqueryDestination() terra.ListValue[ResourceUsageExportConfigBigqueryDestinationAttributes] {
	return terra.ReferenceAsList[ResourceUsageExportConfigBigqueryDestinationAttributes](ruec.ref.Append("bigquery_destination"))
}

type ResourceUsageExportConfigBigqueryDestinationAttributes struct {
	ref terra.Reference
}

func (bd ResourceUsageExportConfigBigqueryDestinationAttributes) InternalRef() (terra.Reference, error) {
	return bd.ref, nil
}

func (bd ResourceUsageExportConfigBigqueryDestinationAttributes) InternalWithRef(ref terra.Reference) ResourceUsageExportConfigBigqueryDestinationAttributes {
	return ResourceUsageExportConfigBigqueryDestinationAttributes{ref: ref}
}

func (bd ResourceUsageExportConfigBigqueryDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bd.ref.InternalTokens()
}

func (bd ResourceUsageExportConfigBigqueryDestinationAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("dataset_id"))
}

type SecurityPostureConfigAttributes struct {
	ref terra.Reference
}

func (spc SecurityPostureConfigAttributes) InternalRef() (terra.Reference, error) {
	return spc.ref, nil
}

func (spc SecurityPostureConfigAttributes) InternalWithRef(ref terra.Reference) SecurityPostureConfigAttributes {
	return SecurityPostureConfigAttributes{ref: ref}
}

func (spc SecurityPostureConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spc.ref.InternalTokens()
}

func (spc SecurityPostureConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(spc.ref.Append("mode"))
}

func (spc SecurityPostureConfigAttributes) VulnerabilityMode() terra.StringValue {
	return terra.ReferenceAsString(spc.ref.Append("vulnerability_mode"))
}

type ServiceExternalIpsConfigAttributes struct {
	ref terra.Reference
}

func (seic ServiceExternalIpsConfigAttributes) InternalRef() (terra.Reference, error) {
	return seic.ref, nil
}

func (seic ServiceExternalIpsConfigAttributes) InternalWithRef(ref terra.Reference) ServiceExternalIpsConfigAttributes {
	return ServiceExternalIpsConfigAttributes{ref: ref}
}

func (seic ServiceExternalIpsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return seic.ref.InternalTokens()
}

func (seic ServiceExternalIpsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(seic.ref.Append("enabled"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TpuConfigAttributes struct {
	ref terra.Reference
}

func (tc TpuConfigAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TpuConfigAttributes) InternalWithRef(ref terra.Reference) TpuConfigAttributes {
	return TpuConfigAttributes{ref: ref}
}

func (tc TpuConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TpuConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(tc.ref.Append("enabled"))
}

func (tc TpuConfigAttributes) Ipv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("ipv4_cidr_block"))
}

func (tc TpuConfigAttributes) UseServiceNetworking() terra.BoolValue {
	return terra.ReferenceAsBool(tc.ref.Append("use_service_networking"))
}

type VerticalPodAutoscalingAttributes struct {
	ref terra.Reference
}

func (vpa VerticalPodAutoscalingAttributes) InternalRef() (terra.Reference, error) {
	return vpa.ref, nil
}

func (vpa VerticalPodAutoscalingAttributes) InternalWithRef(ref terra.Reference) VerticalPodAutoscalingAttributes {
	return VerticalPodAutoscalingAttributes{ref: ref}
}

func (vpa VerticalPodAutoscalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vpa.ref.InternalTokens()
}

func (vpa VerticalPodAutoscalingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(vpa.ref.Append("enabled"))
}

type WorkloadAltsConfigAttributes struct {
	ref terra.Reference
}

func (wac WorkloadAltsConfigAttributes) InternalRef() (terra.Reference, error) {
	return wac.ref, nil
}

func (wac WorkloadAltsConfigAttributes) InternalWithRef(ref terra.Reference) WorkloadAltsConfigAttributes {
	return WorkloadAltsConfigAttributes{ref: ref}
}

func (wac WorkloadAltsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wac.ref.InternalTokens()
}

func (wac WorkloadAltsConfigAttributes) EnableAlts() terra.BoolValue {
	return terra.ReferenceAsBool(wac.ref.Append("enable_alts"))
}

type WorkloadIdentityConfigAttributes struct {
	ref terra.Reference
}

func (wic WorkloadIdentityConfigAttributes) InternalRef() (terra.Reference, error) {
	return wic.ref, nil
}

func (wic WorkloadIdentityConfigAttributes) InternalWithRef(ref terra.Reference) WorkloadIdentityConfigAttributes {
	return WorkloadIdentityConfigAttributes{ref: ref}
}

func (wic WorkloadIdentityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wic.ref.InternalTokens()
}

func (wic WorkloadIdentityConfigAttributes) WorkloadPool() terra.StringValue {
	return terra.ReferenceAsString(wic.ref.Append("workload_pool"))
}

type AddonsConfigState struct {
	CloudrunConfig                   []AddonsConfigCloudrunConfigState                   `json:"cloudrun_config"`
	ConfigConnectorConfig            []AddonsConfigConfigConnectorConfigState            `json:"config_connector_config"`
	DnsCacheConfig                   []AddonsConfigDnsCacheConfigState                   `json:"dns_cache_config"`
	GcePersistentDiskCsiDriverConfig []AddonsConfigGcePersistentDiskCsiDriverConfigState `json:"gce_persistent_disk_csi_driver_config"`
	GcpFilestoreCsiDriverConfig      []AddonsConfigGcpFilestoreCsiDriverConfigState      `json:"gcp_filestore_csi_driver_config"`
	GcsFuseCsiDriverConfig           []AddonsConfigGcsFuseCsiDriverConfigState           `json:"gcs_fuse_csi_driver_config"`
	GkeBackupAgentConfig             []AddonsConfigGkeBackupAgentConfigState             `json:"gke_backup_agent_config"`
	HorizontalPodAutoscaling         []AddonsConfigHorizontalPodAutoscalingState         `json:"horizontal_pod_autoscaling"`
	HttpLoadBalancing                []AddonsConfigHttpLoadBalancingState                `json:"http_load_balancing"`
	IstioConfig                      []AddonsConfigIstioConfigState                      `json:"istio_config"`
	KalmConfig                       []AddonsConfigKalmConfigState                       `json:"kalm_config"`
	NetworkPolicyConfig              []AddonsConfigNetworkPolicyConfigState              `json:"network_policy_config"`
	StatefulHaConfig                 []AddonsConfigStatefulHaConfigState                 `json:"stateful_ha_config"`
}

type AddonsConfigCloudrunConfigState struct {
	Disabled         bool   `json:"disabled"`
	LoadBalancerType string `json:"load_balancer_type"`
}

type AddonsConfigConfigConnectorConfigState struct {
	Enabled bool `json:"enabled"`
}

type AddonsConfigDnsCacheConfigState struct {
	Enabled bool `json:"enabled"`
}

type AddonsConfigGcePersistentDiskCsiDriverConfigState struct {
	Enabled bool `json:"enabled"`
}

type AddonsConfigGcpFilestoreCsiDriverConfigState struct {
	Enabled bool `json:"enabled"`
}

type AddonsConfigGcsFuseCsiDriverConfigState struct {
	Enabled bool `json:"enabled"`
}

type AddonsConfigGkeBackupAgentConfigState struct {
	Enabled bool `json:"enabled"`
}

type AddonsConfigHorizontalPodAutoscalingState struct {
	Disabled bool `json:"disabled"`
}

type AddonsConfigHttpLoadBalancingState struct {
	Disabled bool `json:"disabled"`
}

type AddonsConfigIstioConfigState struct {
	Auth     string `json:"auth"`
	Disabled bool   `json:"disabled"`
}

type AddonsConfigKalmConfigState struct {
	Enabled bool `json:"enabled"`
}

type AddonsConfigNetworkPolicyConfigState struct {
	Disabled bool `json:"disabled"`
}

type AddonsConfigStatefulHaConfigState struct {
	Enabled bool `json:"enabled"`
}

type AuthenticatorGroupsConfigState struct {
	SecurityGroup string `json:"security_group"`
}

type BinaryAuthorizationState struct {
	Enabled        bool   `json:"enabled"`
	EvaluationMode string `json:"evaluation_mode"`
}

type ClusterAutoscalingState struct {
	AutoscalingProfile       string                                            `json:"autoscaling_profile"`
	Enabled                  bool                                              `json:"enabled"`
	AutoProvisioningDefaults []ClusterAutoscalingAutoProvisioningDefaultsState `json:"auto_provisioning_defaults"`
	ResourceLimits           []ClusterAutoscalingResourceLimitsState           `json:"resource_limits"`
}

type ClusterAutoscalingAutoProvisioningDefaultsState struct {
	BootDiskKmsKey         string                                                                  `json:"boot_disk_kms_key"`
	DiskSize               float64                                                                 `json:"disk_size"`
	DiskType               string                                                                  `json:"disk_type"`
	ImageType              string                                                                  `json:"image_type"`
	MinCpuPlatform         string                                                                  `json:"min_cpu_platform"`
	OauthScopes            []string                                                                `json:"oauth_scopes"`
	ServiceAccount         string                                                                  `json:"service_account"`
	Management             []ClusterAutoscalingAutoProvisioningDefaultsManagementState             `json:"management"`
	ShieldedInstanceConfig []ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigState `json:"shielded_instance_config"`
	UpgradeSettings        []ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsState        `json:"upgrade_settings"`
}

type ClusterAutoscalingAutoProvisioningDefaultsManagementState struct {
	AutoRepair     bool                                                                      `json:"auto_repair"`
	AutoUpgrade    bool                                                                      `json:"auto_upgrade"`
	UpgradeOptions []ClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsState `json:"upgrade_options"`
}

type ClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsState struct {
	AutoUpgradeStartTime string `json:"auto_upgrade_start_time"`
	Description          string `json:"description"`
}

type ClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
}

type ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsState struct {
	MaxSurge          float64                                                                           `json:"max_surge"`
	MaxUnavailable    float64                                                                           `json:"max_unavailable"`
	Strategy          string                                                                            `json:"strategy"`
	BlueGreenSettings []ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsState `json:"blue_green_settings"`
}

type ClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsState struct {
	NodePoolSoakDuration  string                                                    `json:"node_pool_soak_duration"`
	StandardRolloutPolicy []ClusterAutoscalingAutoProvisioningDefaultsF08F146EState `json:"standard_rollout_policy"`
}

type ClusterAutoscalingAutoProvisioningDefaultsF08F146EState struct {
	BatchNodeCount    float64 `json:"batch_node_count"`
	BatchPercentage   float64 `json:"batch_percentage"`
	BatchSoakDuration string  `json:"batch_soak_duration"`
}

type ClusterAutoscalingResourceLimitsState struct {
	Maximum      float64 `json:"maximum"`
	Minimum      float64 `json:"minimum"`
	ResourceType string  `json:"resource_type"`
}

type ClusterTelemetryState struct {
	Type string `json:"type"`
}

type ConfidentialNodesState struct {
	Enabled bool `json:"enabled"`
}

type CostManagementConfigState struct {
	Enabled bool `json:"enabled"`
}

type DatabaseEncryptionState struct {
	KeyName string `json:"key_name"`
	State   string `json:"state"`
}

type DefaultSnatStatusState struct {
	Disabled bool `json:"disabled"`
}

type DnsConfigState struct {
	ClusterDns       string `json:"cluster_dns"`
	ClusterDnsDomain string `json:"cluster_dns_domain"`
	ClusterDnsScope  string `json:"cluster_dns_scope"`
}

type EnableK8SBetaApisState struct {
	EnabledApis []string `json:"enabled_apis"`
}

type FleetState struct {
	Membership         string `json:"membership"`
	MembershipId       string `json:"membership_id"`
	MembershipLocation string `json:"membership_location"`
	PreRegistered      bool   `json:"pre_registered"`
	Project            string `json:"project"`
}

type GatewayApiConfigState struct {
	Channel string `json:"channel"`
}

type IdentityServiceConfigState struct {
	Enabled bool `json:"enabled"`
}

type IpAllocationPolicyState struct {
	ClusterIpv4CidrBlock       string                                              `json:"cluster_ipv4_cidr_block"`
	ClusterSecondaryRangeName  string                                              `json:"cluster_secondary_range_name"`
	ServicesIpv4CidrBlock      string                                              `json:"services_ipv4_cidr_block"`
	ServicesSecondaryRangeName string                                              `json:"services_secondary_range_name"`
	StackType                  string                                              `json:"stack_type"`
	AdditionalPodRangesConfig  []IpAllocationPolicyAdditionalPodRangesConfigState  `json:"additional_pod_ranges_config"`
	PodCidrOverprovisionConfig []IpAllocationPolicyPodCidrOverprovisionConfigState `json:"pod_cidr_overprovision_config"`
}

type IpAllocationPolicyAdditionalPodRangesConfigState struct {
	PodRangeNames []string `json:"pod_range_names"`
}

type IpAllocationPolicyPodCidrOverprovisionConfigState struct {
	Disabled bool `json:"disabled"`
}

type LoggingConfigState struct {
	EnableComponents []string `json:"enable_components"`
}

type MaintenancePolicyState struct {
	DailyMaintenanceWindow []MaintenancePolicyDailyMaintenanceWindowState `json:"daily_maintenance_window"`
	MaintenanceExclusion   []MaintenancePolicyMaintenanceExclusionState   `json:"maintenance_exclusion"`
	RecurringWindow        []MaintenancePolicyRecurringWindowState        `json:"recurring_window"`
}

type MaintenancePolicyDailyMaintenanceWindowState struct {
	Duration  string `json:"duration"`
	StartTime string `json:"start_time"`
}

type MaintenancePolicyMaintenanceExclusionState struct {
	EndTime          string                                                       `json:"end_time"`
	ExclusionName    string                                                       `json:"exclusion_name"`
	StartTime        string                                                       `json:"start_time"`
	ExclusionOptions []MaintenancePolicyMaintenanceExclusionExclusionOptionsState `json:"exclusion_options"`
}

type MaintenancePolicyMaintenanceExclusionExclusionOptionsState struct {
	Scope string `json:"scope"`
}

type MaintenancePolicyRecurringWindowState struct {
	EndTime    string `json:"end_time"`
	Recurrence string `json:"recurrence"`
	StartTime  string `json:"start_time"`
}

type MasterAuthState struct {
	ClientCertificate       string                                   `json:"client_certificate"`
	ClientKey               string                                   `json:"client_key"`
	ClusterCaCertificate    string                                   `json:"cluster_ca_certificate"`
	ClientCertificateConfig []MasterAuthClientCertificateConfigState `json:"client_certificate_config"`
}

type MasterAuthClientCertificateConfigState struct {
	IssueClientCertificate bool `json:"issue_client_certificate"`
}

type MasterAuthorizedNetworksConfigState struct {
	GcpPublicCidrsAccessEnabled bool                                            `json:"gcp_public_cidrs_access_enabled"`
	CidrBlocks                  []MasterAuthorizedNetworksConfigCidrBlocksState `json:"cidr_blocks"`
}

type MasterAuthorizedNetworksConfigCidrBlocksState struct {
	CidrBlock   string `json:"cidr_block"`
	DisplayName string `json:"display_name"`
}

type MeshCertificatesState struct {
	EnableCertificates bool `json:"enable_certificates"`
}

type MonitoringConfigState struct {
	EnableComponents                    []string                                                   `json:"enable_components"`
	AdvancedDatapathObservabilityConfig []MonitoringConfigAdvancedDatapathObservabilityConfigState `json:"advanced_datapath_observability_config"`
	ManagedPrometheus                   []MonitoringConfigManagedPrometheusState                   `json:"managed_prometheus"`
}

type MonitoringConfigAdvancedDatapathObservabilityConfigState struct {
	EnableMetrics bool   `json:"enable_metrics"`
	EnableRelay   bool   `json:"enable_relay"`
	RelayMode     string `json:"relay_mode"`
}

type MonitoringConfigManagedPrometheusState struct {
	Enabled bool `json:"enabled"`
}

type NetworkPolicyState struct {
	Enabled  bool   `json:"enabled"`
	Provider string `json:"provider"`
}

type NodeConfigState struct {
	BootDiskKmsKey                 string                                          `json:"boot_disk_kms_key"`
	DiskSizeGb                     float64                                         `json:"disk_size_gb"`
	DiskType                       string                                          `json:"disk_type"`
	EnableConfidentialStorage      bool                                            `json:"enable_confidential_storage"`
	ImageType                      string                                          `json:"image_type"`
	Labels                         map[string]string                               `json:"labels"`
	LocalSsdCount                  float64                                         `json:"local_ssd_count"`
	LoggingVariant                 string                                          `json:"logging_variant"`
	MachineType                    string                                          `json:"machine_type"`
	Metadata                       map[string]string                               `json:"metadata"`
	MinCpuPlatform                 string                                          `json:"min_cpu_platform"`
	NodeGroup                      string                                          `json:"node_group"`
	OauthScopes                    []string                                        `json:"oauth_scopes"`
	Preemptible                    bool                                            `json:"preemptible"`
	ResourceLabels                 map[string]string                               `json:"resource_labels"`
	ResourceManagerTags            map[string]string                               `json:"resource_manager_tags"`
	ServiceAccount                 string                                          `json:"service_account"`
	Spot                           bool                                            `json:"spot"`
	Tags                           []string                                        `json:"tags"`
	EffectiveTaints                []NodeConfigEffectiveTaintsState                `json:"effective_taints"`
	GuestAccelerator               []NodeConfigGuestAcceleratorState               `json:"guest_accelerator"`
	AdvancedMachineFeatures        []NodeConfigAdvancedMachineFeaturesState        `json:"advanced_machine_features"`
	ConfidentialNodes              []NodeConfigConfidentialNodesState              `json:"confidential_nodes"`
	EphemeralStorageConfig         []NodeConfigEphemeralStorageConfigState         `json:"ephemeral_storage_config"`
	EphemeralStorageLocalSsdConfig []NodeConfigEphemeralStorageLocalSsdConfigState `json:"ephemeral_storage_local_ssd_config"`
	FastSocket                     []NodeConfigFastSocketState                     `json:"fast_socket"`
	GcfsConfig                     []NodeConfigGcfsConfigState                     `json:"gcfs_config"`
	Gvnic                          []NodeConfigGvnicState                          `json:"gvnic"`
	HostMaintenancePolicy          []NodeConfigHostMaintenancePolicyState          `json:"host_maintenance_policy"`
	KubeletConfig                  []NodeConfigKubeletConfigState                  `json:"kubelet_config"`
	LinuxNodeConfig                []NodeConfigLinuxNodeConfigState                `json:"linux_node_config"`
	LocalNvmeSsdBlockConfig        []NodeConfigLocalNvmeSsdBlockConfigState        `json:"local_nvme_ssd_block_config"`
	ReservationAffinity            []NodeConfigReservationAffinityState            `json:"reservation_affinity"`
	SandboxConfig                  []NodeConfigSandboxConfigState                  `json:"sandbox_config"`
	ShieldedInstanceConfig         []NodeConfigShieldedInstanceConfigState         `json:"shielded_instance_config"`
	SoleTenantConfig               []NodeConfigSoleTenantConfigState               `json:"sole_tenant_config"`
	Taint                          []NodeConfigTaintState                          `json:"taint"`
	WorkloadMetadataConfig         []NodeConfigWorkloadMetadataConfigState         `json:"workload_metadata_config"`
}

type NodeConfigEffectiveTaintsState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type NodeConfigGuestAcceleratorState struct {
	Count                       float64                                                      `json:"count"`
	GpuPartitionSize            string                                                       `json:"gpu_partition_size"`
	Type                        string                                                       `json:"type"`
	GpuDriverInstallationConfig []NodeConfigGuestAcceleratorGpuDriverInstallationConfigState `json:"gpu_driver_installation_config"`
	GpuSharingConfig            []NodeConfigGuestAcceleratorGpuSharingConfigState            `json:"gpu_sharing_config"`
}

type NodeConfigGuestAcceleratorGpuDriverInstallationConfigState struct {
	GpuDriverVersion string `json:"gpu_driver_version"`
}

type NodeConfigGuestAcceleratorGpuSharingConfigState struct {
	GpuSharingStrategy     string  `json:"gpu_sharing_strategy"`
	MaxSharedClientsPerGpu float64 `json:"max_shared_clients_per_gpu"`
}

type NodeConfigAdvancedMachineFeaturesState struct {
	ThreadsPerCore float64 `json:"threads_per_core"`
}

type NodeConfigConfidentialNodesState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigEphemeralStorageConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodeConfigEphemeralStorageLocalSsdConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodeConfigFastSocketState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigGcfsConfigState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigGvnicState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigHostMaintenancePolicyState struct {
	MaintenanceInterval string `json:"maintenance_interval"`
}

type NodeConfigKubeletConfigState struct {
	CpuCfsQuota       bool    `json:"cpu_cfs_quota"`
	CpuCfsQuotaPeriod string  `json:"cpu_cfs_quota_period"`
	CpuManagerPolicy  string  `json:"cpu_manager_policy"`
	PodPidsLimit      float64 `json:"pod_pids_limit"`
}

type NodeConfigLinuxNodeConfigState struct {
	CgroupMode string            `json:"cgroup_mode"`
	Sysctls    map[string]string `json:"sysctls"`
}

type NodeConfigLocalNvmeSsdBlockConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodeConfigReservationAffinityState struct {
	ConsumeReservationType string   `json:"consume_reservation_type"`
	Key                    string   `json:"key"`
	Values                 []string `json:"values"`
}

type NodeConfigSandboxConfigState struct {
	SandboxType string `json:"sandbox_type"`
}

type NodeConfigShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
}

type NodeConfigSoleTenantConfigState struct {
	NodeAffinity []NodeConfigSoleTenantConfigNodeAffinityState `json:"node_affinity"`
}

type NodeConfigSoleTenantConfigNodeAffinityState struct {
	Key      string   `json:"key"`
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type NodeConfigTaintState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type NodeConfigWorkloadMetadataConfigState struct {
	Mode string `json:"mode"`
}

type NodePoolState struct {
	InitialNodeCount         float64                           `json:"initial_node_count"`
	InstanceGroupUrls        []string                          `json:"instance_group_urls"`
	ManagedInstanceGroupUrls []string                          `json:"managed_instance_group_urls"`
	MaxPodsPerNode           float64                           `json:"max_pods_per_node"`
	Name                     string                            `json:"name"`
	NamePrefix               string                            `json:"name_prefix"`
	NodeCount                float64                           `json:"node_count"`
	NodeLocations            []string                          `json:"node_locations"`
	Version                  string                            `json:"version"`
	Autoscaling              []NodePoolAutoscalingState        `json:"autoscaling"`
	Management               []NodePoolManagementState         `json:"management"`
	NetworkConfig            []NodePoolNetworkConfigState      `json:"network_config"`
	NodeConfig               []NodePoolNodeConfigState         `json:"node_config"`
	PlacementPolicy          []NodePoolPlacementPolicyState    `json:"placement_policy"`
	QueuedProvisioning       []NodePoolQueuedProvisioningState `json:"queued_provisioning"`
	UpgradeSettings          []NodePoolUpgradeSettingsState    `json:"upgrade_settings"`
}

type NodePoolAutoscalingState struct {
	LocationPolicy    string  `json:"location_policy"`
	MaxNodeCount      float64 `json:"max_node_count"`
	MinNodeCount      float64 `json:"min_node_count"`
	TotalMaxNodeCount float64 `json:"total_max_node_count"`
	TotalMinNodeCount float64 `json:"total_min_node_count"`
}

type NodePoolManagementState struct {
	AutoRepair  bool `json:"auto_repair"`
	AutoUpgrade bool `json:"auto_upgrade"`
}

type NodePoolNetworkConfigState struct {
	CreatePodRange               bool                                                     `json:"create_pod_range"`
	EnablePrivateNodes           bool                                                     `json:"enable_private_nodes"`
	PodIpv4CidrBlock             string                                                   `json:"pod_ipv4_cidr_block"`
	PodRange                     string                                                   `json:"pod_range"`
	AdditionalNodeNetworkConfigs []NodePoolNetworkConfigAdditionalNodeNetworkConfigsState `json:"additional_node_network_configs"`
	AdditionalPodNetworkConfigs  []NodePoolNetworkConfigAdditionalPodNetworkConfigsState  `json:"additional_pod_network_configs"`
	NetworkPerformanceConfig     []NodePoolNetworkConfigNetworkPerformanceConfigState     `json:"network_performance_config"`
	PodCidrOverprovisionConfig   []NodePoolNetworkConfigPodCidrOverprovisionConfigState   `json:"pod_cidr_overprovision_config"`
}

type NodePoolNetworkConfigAdditionalNodeNetworkConfigsState struct {
	Network    string `json:"network"`
	Subnetwork string `json:"subnetwork"`
}

type NodePoolNetworkConfigAdditionalPodNetworkConfigsState struct {
	MaxPodsPerNode    float64 `json:"max_pods_per_node"`
	SecondaryPodRange string  `json:"secondary_pod_range"`
	Subnetwork        string  `json:"subnetwork"`
}

type NodePoolNetworkConfigNetworkPerformanceConfigState struct {
	TotalEgressBandwidthTier string `json:"total_egress_bandwidth_tier"`
}

type NodePoolNetworkConfigPodCidrOverprovisionConfigState struct {
	Disabled bool `json:"disabled"`
}

type NodePoolNodeConfigState struct {
	BootDiskKmsKey                 string                                                  `json:"boot_disk_kms_key"`
	DiskSizeGb                     float64                                                 `json:"disk_size_gb"`
	DiskType                       string                                                  `json:"disk_type"`
	EnableConfidentialStorage      bool                                                    `json:"enable_confidential_storage"`
	ImageType                      string                                                  `json:"image_type"`
	Labels                         map[string]string                                       `json:"labels"`
	LocalSsdCount                  float64                                                 `json:"local_ssd_count"`
	LoggingVariant                 string                                                  `json:"logging_variant"`
	MachineType                    string                                                  `json:"machine_type"`
	Metadata                       map[string]string                                       `json:"metadata"`
	MinCpuPlatform                 string                                                  `json:"min_cpu_platform"`
	NodeGroup                      string                                                  `json:"node_group"`
	OauthScopes                    []string                                                `json:"oauth_scopes"`
	Preemptible                    bool                                                    `json:"preemptible"`
	ResourceLabels                 map[string]string                                       `json:"resource_labels"`
	ResourceManagerTags            map[string]string                                       `json:"resource_manager_tags"`
	ServiceAccount                 string                                                  `json:"service_account"`
	Spot                           bool                                                    `json:"spot"`
	Tags                           []string                                                `json:"tags"`
	EffectiveTaints                []NodePoolNodeConfigEffectiveTaintsState                `json:"effective_taints"`
	GuestAccelerator               []NodePoolNodeConfigGuestAcceleratorState               `json:"guest_accelerator"`
	AdvancedMachineFeatures        []NodePoolNodeConfigAdvancedMachineFeaturesState        `json:"advanced_machine_features"`
	ConfidentialNodes              []NodePoolNodeConfigConfidentialNodesState              `json:"confidential_nodes"`
	EphemeralStorageConfig         []NodePoolNodeConfigEphemeralStorageConfigState         `json:"ephemeral_storage_config"`
	EphemeralStorageLocalSsdConfig []NodePoolNodeConfigEphemeralStorageLocalSsdConfigState `json:"ephemeral_storage_local_ssd_config"`
	FastSocket                     []NodePoolNodeConfigFastSocketState                     `json:"fast_socket"`
	GcfsConfig                     []NodePoolNodeConfigGcfsConfigState                     `json:"gcfs_config"`
	Gvnic                          []NodePoolNodeConfigGvnicState                          `json:"gvnic"`
	HostMaintenancePolicy          []NodePoolNodeConfigHostMaintenancePolicyState          `json:"host_maintenance_policy"`
	KubeletConfig                  []NodePoolNodeConfigKubeletConfigState                  `json:"kubelet_config"`
	LinuxNodeConfig                []NodePoolNodeConfigLinuxNodeConfigState                `json:"linux_node_config"`
	LocalNvmeSsdBlockConfig        []NodePoolNodeConfigLocalNvmeSsdBlockConfigState        `json:"local_nvme_ssd_block_config"`
	ReservationAffinity            []NodePoolNodeConfigReservationAffinityState            `json:"reservation_affinity"`
	SandboxConfig                  []NodePoolNodeConfigSandboxConfigState                  `json:"sandbox_config"`
	ShieldedInstanceConfig         []NodePoolNodeConfigShieldedInstanceConfigState         `json:"shielded_instance_config"`
	SoleTenantConfig               []NodePoolNodeConfigSoleTenantConfigState               `json:"sole_tenant_config"`
	Taint                          []NodePoolNodeConfigTaintState                          `json:"taint"`
	WorkloadMetadataConfig         []NodePoolNodeConfigWorkloadMetadataConfigState         `json:"workload_metadata_config"`
}

type NodePoolNodeConfigEffectiveTaintsState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type NodePoolNodeConfigGuestAcceleratorState struct {
	Count                       float64                                                              `json:"count"`
	GpuPartitionSize            string                                                               `json:"gpu_partition_size"`
	Type                        string                                                               `json:"type"`
	GpuDriverInstallationConfig []NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigState `json:"gpu_driver_installation_config"`
	GpuSharingConfig            []NodePoolNodeConfigGuestAcceleratorGpuSharingConfigState            `json:"gpu_sharing_config"`
}

type NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigState struct {
	GpuDriverVersion string `json:"gpu_driver_version"`
}

type NodePoolNodeConfigGuestAcceleratorGpuSharingConfigState struct {
	GpuSharingStrategy     string  `json:"gpu_sharing_strategy"`
	MaxSharedClientsPerGpu float64 `json:"max_shared_clients_per_gpu"`
}

type NodePoolNodeConfigAdvancedMachineFeaturesState struct {
	ThreadsPerCore float64 `json:"threads_per_core"`
}

type NodePoolNodeConfigConfidentialNodesState struct {
	Enabled bool `json:"enabled"`
}

type NodePoolNodeConfigEphemeralStorageConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodePoolNodeConfigEphemeralStorageLocalSsdConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodePoolNodeConfigFastSocketState struct {
	Enabled bool `json:"enabled"`
}

type NodePoolNodeConfigGcfsConfigState struct {
	Enabled bool `json:"enabled"`
}

type NodePoolNodeConfigGvnicState struct {
	Enabled bool `json:"enabled"`
}

type NodePoolNodeConfigHostMaintenancePolicyState struct {
	MaintenanceInterval string `json:"maintenance_interval"`
}

type NodePoolNodeConfigKubeletConfigState struct {
	CpuCfsQuota       bool    `json:"cpu_cfs_quota"`
	CpuCfsQuotaPeriod string  `json:"cpu_cfs_quota_period"`
	CpuManagerPolicy  string  `json:"cpu_manager_policy"`
	PodPidsLimit      float64 `json:"pod_pids_limit"`
}

type NodePoolNodeConfigLinuxNodeConfigState struct {
	CgroupMode string            `json:"cgroup_mode"`
	Sysctls    map[string]string `json:"sysctls"`
}

type NodePoolNodeConfigLocalNvmeSsdBlockConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodePoolNodeConfigReservationAffinityState struct {
	ConsumeReservationType string   `json:"consume_reservation_type"`
	Key                    string   `json:"key"`
	Values                 []string `json:"values"`
}

type NodePoolNodeConfigSandboxConfigState struct {
	SandboxType string `json:"sandbox_type"`
}

type NodePoolNodeConfigShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
}

type NodePoolNodeConfigSoleTenantConfigState struct {
	NodeAffinity []NodePoolNodeConfigSoleTenantConfigNodeAffinityState `json:"node_affinity"`
}

type NodePoolNodeConfigSoleTenantConfigNodeAffinityState struct {
	Key      string   `json:"key"`
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type NodePoolNodeConfigTaintState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type NodePoolNodeConfigWorkloadMetadataConfigState struct {
	Mode string `json:"mode"`
}

type NodePoolPlacementPolicyState struct {
	PolicyName  string `json:"policy_name"`
	TpuTopology string `json:"tpu_topology"`
	Type        string `json:"type"`
}

type NodePoolQueuedProvisioningState struct {
	Enabled bool `json:"enabled"`
}

type NodePoolUpgradeSettingsState struct {
	MaxSurge          float64                                         `json:"max_surge"`
	MaxUnavailable    float64                                         `json:"max_unavailable"`
	Strategy          string                                          `json:"strategy"`
	BlueGreenSettings []NodePoolUpgradeSettingsBlueGreenSettingsState `json:"blue_green_settings"`
}

type NodePoolUpgradeSettingsBlueGreenSettingsState struct {
	NodePoolSoakDuration  string                                                               `json:"node_pool_soak_duration"`
	StandardRolloutPolicy []NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyState `json:"standard_rollout_policy"`
}

type NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyState struct {
	BatchNodeCount    float64 `json:"batch_node_count"`
	BatchPercentage   float64 `json:"batch_percentage"`
	BatchSoakDuration string  `json:"batch_soak_duration"`
}

type NodePoolAutoConfigState struct {
	ResourceManagerTags map[string]string                    `json:"resource_manager_tags"`
	NetworkTags         []NodePoolAutoConfigNetworkTagsState `json:"network_tags"`
}

type NodePoolAutoConfigNetworkTagsState struct {
	Tags []string `json:"tags"`
}

type NodePoolDefaultsState struct {
	NodeConfigDefaults []NodePoolDefaultsNodeConfigDefaultsState `json:"node_config_defaults"`
}

type NodePoolDefaultsNodeConfigDefaultsState struct {
	LoggingVariant string                                              `json:"logging_variant"`
	GcfsConfig     []NodePoolDefaultsNodeConfigDefaultsGcfsConfigState `json:"gcfs_config"`
}

type NodePoolDefaultsNodeConfigDefaultsGcfsConfigState struct {
	Enabled bool `json:"enabled"`
}

type NotificationConfigState struct {
	Pubsub []NotificationConfigPubsubState `json:"pubsub"`
}

type NotificationConfigPubsubState struct {
	Enabled bool                                  `json:"enabled"`
	Topic   string                                `json:"topic"`
	Filter  []NotificationConfigPubsubFilterState `json:"filter"`
}

type NotificationConfigPubsubFilterState struct {
	EventType []string `json:"event_type"`
}

type PodSecurityPolicyConfigState struct {
	Enabled bool `json:"enabled"`
}

type PrivateClusterConfigState struct {
	EnablePrivateEndpoint     bool                                                `json:"enable_private_endpoint"`
	EnablePrivateNodes        bool                                                `json:"enable_private_nodes"`
	MasterIpv4CidrBlock       string                                              `json:"master_ipv4_cidr_block"`
	PeeringName               string                                              `json:"peering_name"`
	PrivateEndpoint           string                                              `json:"private_endpoint"`
	PrivateEndpointSubnetwork string                                              `json:"private_endpoint_subnetwork"`
	PublicEndpoint            string                                              `json:"public_endpoint"`
	MasterGlobalAccessConfig  []PrivateClusterConfigMasterGlobalAccessConfigState `json:"master_global_access_config"`
}

type PrivateClusterConfigMasterGlobalAccessConfigState struct {
	Enabled bool `json:"enabled"`
}

type ProtectConfigState struct {
	WorkloadVulnerabilityMode string                             `json:"workload_vulnerability_mode"`
	WorkloadConfig            []ProtectConfigWorkloadConfigState `json:"workload_config"`
}

type ProtectConfigWorkloadConfigState struct {
	AuditMode string `json:"audit_mode"`
}

type ReleaseChannelState struct {
	Channel string `json:"channel"`
}

type ResourceUsageExportConfigState struct {
	EnableNetworkEgressMetering       bool                                                `json:"enable_network_egress_metering"`
	EnableResourceConsumptionMetering bool                                                `json:"enable_resource_consumption_metering"`
	BigqueryDestination               []ResourceUsageExportConfigBigqueryDestinationState `json:"bigquery_destination"`
}

type ResourceUsageExportConfigBigqueryDestinationState struct {
	DatasetId string `json:"dataset_id"`
}

type SecurityPostureConfigState struct {
	Mode              string `json:"mode"`
	VulnerabilityMode string `json:"vulnerability_mode"`
}

type ServiceExternalIpsConfigState struct {
	Enabled bool `json:"enabled"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type TpuConfigState struct {
	Enabled              bool   `json:"enabled"`
	Ipv4CidrBlock        string `json:"ipv4_cidr_block"`
	UseServiceNetworking bool   `json:"use_service_networking"`
}

type VerticalPodAutoscalingState struct {
	Enabled bool `json:"enabled"`
}

type WorkloadAltsConfigState struct {
	EnableAlts bool `json:"enable_alts"`
}

type WorkloadIdentityConfigState struct {
	WorkloadPool string `json:"workload_pool"`
}
