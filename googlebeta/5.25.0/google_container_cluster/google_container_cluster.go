// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_container_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_container_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *googleContainerClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcc *Resource) Type() string {
	return "google_container_cluster"
}

// LocalName returns the local name for [Resource].
func (gcc *Resource) LocalName() string {
	return gcc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcc *Resource) Configuration() interface{} {
	return gcc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcc *Resource) Dependencies() terra.Dependencies {
	return gcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcc *Resource) Attributes() googleContainerClusterAttributes {
	return googleContainerClusterAttributes{ref: terra.ReferenceResource(gcc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcc *Resource) ImportState(state io.Reader) error {
	gcc.state = &googleContainerClusterState{}
	if err := json.NewDecoder(state).Decode(gcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcc.Type(), gcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcc *Resource) State() (*googleContainerClusterState, bool) {
	return gcc.state, gcc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcc *Resource) StateMust() *googleContainerClusterState {
	if gcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcc.Type(), gcc.LocalName()))
	}
	return gcc.state
}

// Args contains the configurations for google_container_cluster.
type Args struct {
	// AllowNetAdmin: bool, optional
	AllowNetAdmin terra.BoolValue `hcl:"allow_net_admin,attr"`
	// ClusterIpv4Cidr: string, optional
	ClusterIpv4Cidr terra.StringValue `hcl:"cluster_ipv4_cidr,attr"`
	// DatapathProvider: string, optional
	DatapathProvider terra.StringValue `hcl:"datapath_provider,attr"`
	// DefaultMaxPodsPerNode: number, optional
	DefaultMaxPodsPerNode terra.NumberValue `hcl:"default_max_pods_per_node,attr"`
	// DeletionProtection: bool, optional
	DeletionProtection terra.BoolValue `hcl:"deletion_protection,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnableAutopilot: bool, optional
	EnableAutopilot terra.BoolValue `hcl:"enable_autopilot,attr"`
	// EnableCiliumClusterwideNetworkPolicy: bool, optional
	EnableCiliumClusterwideNetworkPolicy terra.BoolValue `hcl:"enable_cilium_clusterwide_network_policy,attr"`
	// EnableFqdnNetworkPolicy: bool, optional
	EnableFqdnNetworkPolicy terra.BoolValue `hcl:"enable_fqdn_network_policy,attr"`
	// EnableIntranodeVisibility: bool, optional
	EnableIntranodeVisibility terra.BoolValue `hcl:"enable_intranode_visibility,attr"`
	// EnableKubernetesAlpha: bool, optional
	EnableKubernetesAlpha terra.BoolValue `hcl:"enable_kubernetes_alpha,attr"`
	// EnableL4IlbSubsetting: bool, optional
	EnableL4IlbSubsetting terra.BoolValue `hcl:"enable_l4_ilb_subsetting,attr"`
	// EnableLegacyAbac: bool, optional
	EnableLegacyAbac terra.BoolValue `hcl:"enable_legacy_abac,attr"`
	// EnableMultiNetworking: bool, optional
	EnableMultiNetworking terra.BoolValue `hcl:"enable_multi_networking,attr"`
	// EnableShieldedNodes: bool, optional
	EnableShieldedNodes terra.BoolValue `hcl:"enable_shielded_nodes,attr"`
	// EnableTpu: bool, optional
	EnableTpu terra.BoolValue `hcl:"enable_tpu,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InitialNodeCount: number, optional
	InitialNodeCount terra.NumberValue `hcl:"initial_node_count,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// LoggingService: string, optional
	LoggingService terra.StringValue `hcl:"logging_service,attr"`
	// MinMasterVersion: string, optional
	MinMasterVersion terra.StringValue `hcl:"min_master_version,attr"`
	// MonitoringService: string, optional
	MonitoringService terra.StringValue `hcl:"monitoring_service,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// NetworkingMode: string, optional
	NetworkingMode terra.StringValue `hcl:"networking_mode,attr"`
	// NodeLocations: set of string, optional
	NodeLocations terra.SetValue[terra.StringValue] `hcl:"node_locations,attr"`
	// NodeVersion: string, optional
	NodeVersion terra.StringValue `hcl:"node_version,attr"`
	// PrivateIpv6GoogleAccess: string, optional
	PrivateIpv6GoogleAccess terra.StringValue `hcl:"private_ipv6_google_access,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RemoveDefaultNodePool: bool, optional
	RemoveDefaultNodePool terra.BoolValue `hcl:"remove_default_node_pool,attr"`
	// ResourceLabels: map of string, optional
	ResourceLabels terra.MapValue[terra.StringValue] `hcl:"resource_labels,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// AddonsConfig: optional
	AddonsConfig *AddonsConfig `hcl:"addons_config,block"`
	// AuthenticatorGroupsConfig: optional
	AuthenticatorGroupsConfig *AuthenticatorGroupsConfig `hcl:"authenticator_groups_config,block"`
	// BinaryAuthorization: optional
	BinaryAuthorization *BinaryAuthorization `hcl:"binary_authorization,block"`
	// ClusterAutoscaling: optional
	ClusterAutoscaling *ClusterAutoscaling `hcl:"cluster_autoscaling,block"`
	// ClusterTelemetry: optional
	ClusterTelemetry *ClusterTelemetry `hcl:"cluster_telemetry,block"`
	// ConfidentialNodes: optional
	ConfidentialNodes *ConfidentialNodes `hcl:"confidential_nodes,block"`
	// CostManagementConfig: optional
	CostManagementConfig *CostManagementConfig `hcl:"cost_management_config,block"`
	// DatabaseEncryption: optional
	DatabaseEncryption *DatabaseEncryption `hcl:"database_encryption,block"`
	// DefaultSnatStatus: optional
	DefaultSnatStatus *DefaultSnatStatus `hcl:"default_snat_status,block"`
	// DnsConfig: optional
	DnsConfig *DnsConfig `hcl:"dns_config,block"`
	// EnableK8SBetaApis: optional
	EnableK8SBetaApis *EnableK8SBetaApis `hcl:"enable_k8s_beta_apis,block"`
	// Fleet: optional
	Fleet *Fleet `hcl:"fleet,block"`
	// GatewayApiConfig: optional
	GatewayApiConfig *GatewayApiConfig `hcl:"gateway_api_config,block"`
	// IdentityServiceConfig: optional
	IdentityServiceConfig *IdentityServiceConfig `hcl:"identity_service_config,block"`
	// IpAllocationPolicy: optional
	IpAllocationPolicy *IpAllocationPolicy `hcl:"ip_allocation_policy,block"`
	// LoggingConfig: optional
	LoggingConfig *LoggingConfig `hcl:"logging_config,block"`
	// MaintenancePolicy: optional
	MaintenancePolicy *MaintenancePolicy `hcl:"maintenance_policy,block"`
	// MasterAuth: optional
	MasterAuth *MasterAuth `hcl:"master_auth,block"`
	// MasterAuthorizedNetworksConfig: optional
	MasterAuthorizedNetworksConfig *MasterAuthorizedNetworksConfig `hcl:"master_authorized_networks_config,block"`
	// MeshCertificates: optional
	MeshCertificates *MeshCertificates `hcl:"mesh_certificates,block"`
	// MonitoringConfig: optional
	MonitoringConfig *MonitoringConfig `hcl:"monitoring_config,block"`
	// NetworkPolicy: optional
	NetworkPolicy *NetworkPolicy `hcl:"network_policy,block"`
	// NodeConfig: optional
	NodeConfig *NodeConfig `hcl:"node_config,block"`
	// NodePool: min=0
	NodePool []NodePool `hcl:"node_pool,block" validate:"min=0"`
	// NodePoolAutoConfig: optional
	NodePoolAutoConfig *NodePoolAutoConfig `hcl:"node_pool_auto_config,block"`
	// NodePoolDefaults: optional
	NodePoolDefaults *NodePoolDefaults `hcl:"node_pool_defaults,block"`
	// NotificationConfig: optional
	NotificationConfig *NotificationConfig `hcl:"notification_config,block"`
	// PodSecurityPolicyConfig: optional
	PodSecurityPolicyConfig *PodSecurityPolicyConfig `hcl:"pod_security_policy_config,block"`
	// PrivateClusterConfig: optional
	PrivateClusterConfig *PrivateClusterConfig `hcl:"private_cluster_config,block"`
	// ProtectConfig: optional
	ProtectConfig *ProtectConfig `hcl:"protect_config,block"`
	// ReleaseChannel: optional
	ReleaseChannel *ReleaseChannel `hcl:"release_channel,block"`
	// ResourceUsageExportConfig: optional
	ResourceUsageExportConfig *ResourceUsageExportConfig `hcl:"resource_usage_export_config,block"`
	// SecurityPostureConfig: optional
	SecurityPostureConfig *SecurityPostureConfig `hcl:"security_posture_config,block"`
	// ServiceExternalIpsConfig: optional
	ServiceExternalIpsConfig *ServiceExternalIpsConfig `hcl:"service_external_ips_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// TpuConfig: optional
	TpuConfig *TpuConfig `hcl:"tpu_config,block"`
	// VerticalPodAutoscaling: optional
	VerticalPodAutoscaling *VerticalPodAutoscaling `hcl:"vertical_pod_autoscaling,block"`
	// WorkloadAltsConfig: optional
	WorkloadAltsConfig *WorkloadAltsConfig `hcl:"workload_alts_config,block"`
	// WorkloadIdentityConfig: optional
	WorkloadIdentityConfig *WorkloadIdentityConfig `hcl:"workload_identity_config,block"`
}

type googleContainerClusterAttributes struct {
	ref terra.Reference
}

// AllowNetAdmin returns a reference to field allow_net_admin of google_container_cluster.
func (gcc googleContainerClusterAttributes) AllowNetAdmin() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("allow_net_admin"))
}

// ClusterIpv4Cidr returns a reference to field cluster_ipv4_cidr of google_container_cluster.
func (gcc googleContainerClusterAttributes) ClusterIpv4Cidr() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("cluster_ipv4_cidr"))
}

// DatapathProvider returns a reference to field datapath_provider of google_container_cluster.
func (gcc googleContainerClusterAttributes) DatapathProvider() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("datapath_provider"))
}

// DefaultMaxPodsPerNode returns a reference to field default_max_pods_per_node of google_container_cluster.
func (gcc googleContainerClusterAttributes) DefaultMaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(gcc.ref.Append("default_max_pods_per_node"))
}

// DeletionProtection returns a reference to field deletion_protection of google_container_cluster.
func (gcc googleContainerClusterAttributes) DeletionProtection() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("deletion_protection"))
}

// Description returns a reference to field description of google_container_cluster.
func (gcc googleContainerClusterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("description"))
}

// EnableAutopilot returns a reference to field enable_autopilot of google_container_cluster.
func (gcc googleContainerClusterAttributes) EnableAutopilot() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("enable_autopilot"))
}

// EnableCiliumClusterwideNetworkPolicy returns a reference to field enable_cilium_clusterwide_network_policy of google_container_cluster.
func (gcc googleContainerClusterAttributes) EnableCiliumClusterwideNetworkPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("enable_cilium_clusterwide_network_policy"))
}

// EnableFqdnNetworkPolicy returns a reference to field enable_fqdn_network_policy of google_container_cluster.
func (gcc googleContainerClusterAttributes) EnableFqdnNetworkPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("enable_fqdn_network_policy"))
}

// EnableIntranodeVisibility returns a reference to field enable_intranode_visibility of google_container_cluster.
func (gcc googleContainerClusterAttributes) EnableIntranodeVisibility() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("enable_intranode_visibility"))
}

// EnableKubernetesAlpha returns a reference to field enable_kubernetes_alpha of google_container_cluster.
func (gcc googleContainerClusterAttributes) EnableKubernetesAlpha() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("enable_kubernetes_alpha"))
}

// EnableL4IlbSubsetting returns a reference to field enable_l4_ilb_subsetting of google_container_cluster.
func (gcc googleContainerClusterAttributes) EnableL4IlbSubsetting() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("enable_l4_ilb_subsetting"))
}

// EnableLegacyAbac returns a reference to field enable_legacy_abac of google_container_cluster.
func (gcc googleContainerClusterAttributes) EnableLegacyAbac() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("enable_legacy_abac"))
}

// EnableMultiNetworking returns a reference to field enable_multi_networking of google_container_cluster.
func (gcc googleContainerClusterAttributes) EnableMultiNetworking() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("enable_multi_networking"))
}

// EnableShieldedNodes returns a reference to field enable_shielded_nodes of google_container_cluster.
func (gcc googleContainerClusterAttributes) EnableShieldedNodes() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("enable_shielded_nodes"))
}

// EnableTpu returns a reference to field enable_tpu of google_container_cluster.
func (gcc googleContainerClusterAttributes) EnableTpu() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("enable_tpu"))
}

// Endpoint returns a reference to field endpoint of google_container_cluster.
func (gcc googleContainerClusterAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("endpoint"))
}

// Id returns a reference to field id of google_container_cluster.
func (gcc googleContainerClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("id"))
}

// InitialNodeCount returns a reference to field initial_node_count of google_container_cluster.
func (gcc googleContainerClusterAttributes) InitialNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(gcc.ref.Append("initial_node_count"))
}

// LabelFingerprint returns a reference to field label_fingerprint of google_container_cluster.
func (gcc googleContainerClusterAttributes) LabelFingerprint() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("label_fingerprint"))
}

// Location returns a reference to field location of google_container_cluster.
func (gcc googleContainerClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("location"))
}

// LoggingService returns a reference to field logging_service of google_container_cluster.
func (gcc googleContainerClusterAttributes) LoggingService() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("logging_service"))
}

// MasterVersion returns a reference to field master_version of google_container_cluster.
func (gcc googleContainerClusterAttributes) MasterVersion() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("master_version"))
}

// MinMasterVersion returns a reference to field min_master_version of google_container_cluster.
func (gcc googleContainerClusterAttributes) MinMasterVersion() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("min_master_version"))
}

// MonitoringService returns a reference to field monitoring_service of google_container_cluster.
func (gcc googleContainerClusterAttributes) MonitoringService() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("monitoring_service"))
}

// Name returns a reference to field name of google_container_cluster.
func (gcc googleContainerClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("name"))
}

// Network returns a reference to field network of google_container_cluster.
func (gcc googleContainerClusterAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("network"))
}

// NetworkingMode returns a reference to field networking_mode of google_container_cluster.
func (gcc googleContainerClusterAttributes) NetworkingMode() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("networking_mode"))
}

// NodeLocations returns a reference to field node_locations of google_container_cluster.
func (gcc googleContainerClusterAttributes) NodeLocations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gcc.ref.Append("node_locations"))
}

// NodeVersion returns a reference to field node_version of google_container_cluster.
func (gcc googleContainerClusterAttributes) NodeVersion() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("node_version"))
}

// Operation returns a reference to field operation of google_container_cluster.
func (gcc googleContainerClusterAttributes) Operation() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("operation"))
}

// PrivateIpv6GoogleAccess returns a reference to field private_ipv6_google_access of google_container_cluster.
func (gcc googleContainerClusterAttributes) PrivateIpv6GoogleAccess() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("private_ipv6_google_access"))
}

// Project returns a reference to field project of google_container_cluster.
func (gcc googleContainerClusterAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("project"))
}

// RemoveDefaultNodePool returns a reference to field remove_default_node_pool of google_container_cluster.
func (gcc googleContainerClusterAttributes) RemoveDefaultNodePool() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("remove_default_node_pool"))
}

// ResourceLabels returns a reference to field resource_labels of google_container_cluster.
func (gcc googleContainerClusterAttributes) ResourceLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcc.ref.Append("resource_labels"))
}

// SelfLink returns a reference to field self_link of google_container_cluster.
func (gcc googleContainerClusterAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("self_link"))
}

// ServicesIpv4Cidr returns a reference to field services_ipv4_cidr of google_container_cluster.
func (gcc googleContainerClusterAttributes) ServicesIpv4Cidr() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("services_ipv4_cidr"))
}

// Subnetwork returns a reference to field subnetwork of google_container_cluster.
func (gcc googleContainerClusterAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("subnetwork"))
}

// TpuIpv4CidrBlock returns a reference to field tpu_ipv4_cidr_block of google_container_cluster.
func (gcc googleContainerClusterAttributes) TpuIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("tpu_ipv4_cidr_block"))
}

func (gcc googleContainerClusterAttributes) AddonsConfig() terra.ListValue[AddonsConfigAttributes] {
	return terra.ReferenceAsList[AddonsConfigAttributes](gcc.ref.Append("addons_config"))
}

func (gcc googleContainerClusterAttributes) AuthenticatorGroupsConfig() terra.ListValue[AuthenticatorGroupsConfigAttributes] {
	return terra.ReferenceAsList[AuthenticatorGroupsConfigAttributes](gcc.ref.Append("authenticator_groups_config"))
}

func (gcc googleContainerClusterAttributes) BinaryAuthorization() terra.ListValue[BinaryAuthorizationAttributes] {
	return terra.ReferenceAsList[BinaryAuthorizationAttributes](gcc.ref.Append("binary_authorization"))
}

func (gcc googleContainerClusterAttributes) ClusterAutoscaling() terra.ListValue[ClusterAutoscalingAttributes] {
	return terra.ReferenceAsList[ClusterAutoscalingAttributes](gcc.ref.Append("cluster_autoscaling"))
}

func (gcc googleContainerClusterAttributes) ClusterTelemetry() terra.ListValue[ClusterTelemetryAttributes] {
	return terra.ReferenceAsList[ClusterTelemetryAttributes](gcc.ref.Append("cluster_telemetry"))
}

func (gcc googleContainerClusterAttributes) ConfidentialNodes() terra.ListValue[ConfidentialNodesAttributes] {
	return terra.ReferenceAsList[ConfidentialNodesAttributes](gcc.ref.Append("confidential_nodes"))
}

func (gcc googleContainerClusterAttributes) CostManagementConfig() terra.ListValue[CostManagementConfigAttributes] {
	return terra.ReferenceAsList[CostManagementConfigAttributes](gcc.ref.Append("cost_management_config"))
}

func (gcc googleContainerClusterAttributes) DatabaseEncryption() terra.ListValue[DatabaseEncryptionAttributes] {
	return terra.ReferenceAsList[DatabaseEncryptionAttributes](gcc.ref.Append("database_encryption"))
}

func (gcc googleContainerClusterAttributes) DefaultSnatStatus() terra.ListValue[DefaultSnatStatusAttributes] {
	return terra.ReferenceAsList[DefaultSnatStatusAttributes](gcc.ref.Append("default_snat_status"))
}

func (gcc googleContainerClusterAttributes) DnsConfig() terra.ListValue[DnsConfigAttributes] {
	return terra.ReferenceAsList[DnsConfigAttributes](gcc.ref.Append("dns_config"))
}

func (gcc googleContainerClusterAttributes) EnableK8SBetaApis() terra.ListValue[EnableK8SBetaApisAttributes] {
	return terra.ReferenceAsList[EnableK8SBetaApisAttributes](gcc.ref.Append("enable_k8s_beta_apis"))
}

func (gcc googleContainerClusterAttributes) Fleet() terra.ListValue[FleetAttributes] {
	return terra.ReferenceAsList[FleetAttributes](gcc.ref.Append("fleet"))
}

func (gcc googleContainerClusterAttributes) GatewayApiConfig() terra.ListValue[GatewayApiConfigAttributes] {
	return terra.ReferenceAsList[GatewayApiConfigAttributes](gcc.ref.Append("gateway_api_config"))
}

func (gcc googleContainerClusterAttributes) IdentityServiceConfig() terra.ListValue[IdentityServiceConfigAttributes] {
	return terra.ReferenceAsList[IdentityServiceConfigAttributes](gcc.ref.Append("identity_service_config"))
}

func (gcc googleContainerClusterAttributes) IpAllocationPolicy() terra.ListValue[IpAllocationPolicyAttributes] {
	return terra.ReferenceAsList[IpAllocationPolicyAttributes](gcc.ref.Append("ip_allocation_policy"))
}

func (gcc googleContainerClusterAttributes) LoggingConfig() terra.ListValue[LoggingConfigAttributes] {
	return terra.ReferenceAsList[LoggingConfigAttributes](gcc.ref.Append("logging_config"))
}

func (gcc googleContainerClusterAttributes) MaintenancePolicy() terra.ListValue[MaintenancePolicyAttributes] {
	return terra.ReferenceAsList[MaintenancePolicyAttributes](gcc.ref.Append("maintenance_policy"))
}

func (gcc googleContainerClusterAttributes) MasterAuth() terra.ListValue[MasterAuthAttributes] {
	return terra.ReferenceAsList[MasterAuthAttributes](gcc.ref.Append("master_auth"))
}

func (gcc googleContainerClusterAttributes) MasterAuthorizedNetworksConfig() terra.ListValue[MasterAuthorizedNetworksConfigAttributes] {
	return terra.ReferenceAsList[MasterAuthorizedNetworksConfigAttributes](gcc.ref.Append("master_authorized_networks_config"))
}

func (gcc googleContainerClusterAttributes) MeshCertificates() terra.ListValue[MeshCertificatesAttributes] {
	return terra.ReferenceAsList[MeshCertificatesAttributes](gcc.ref.Append("mesh_certificates"))
}

func (gcc googleContainerClusterAttributes) MonitoringConfig() terra.ListValue[MonitoringConfigAttributes] {
	return terra.ReferenceAsList[MonitoringConfigAttributes](gcc.ref.Append("monitoring_config"))
}

func (gcc googleContainerClusterAttributes) NetworkPolicy() terra.ListValue[NetworkPolicyAttributes] {
	return terra.ReferenceAsList[NetworkPolicyAttributes](gcc.ref.Append("network_policy"))
}

func (gcc googleContainerClusterAttributes) NodeConfig() terra.ListValue[NodeConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigAttributes](gcc.ref.Append("node_config"))
}

func (gcc googleContainerClusterAttributes) NodePool() terra.ListValue[NodePoolAttributes] {
	return terra.ReferenceAsList[NodePoolAttributes](gcc.ref.Append("node_pool"))
}

func (gcc googleContainerClusterAttributes) NodePoolAutoConfig() terra.ListValue[NodePoolAutoConfigAttributes] {
	return terra.ReferenceAsList[NodePoolAutoConfigAttributes](gcc.ref.Append("node_pool_auto_config"))
}

func (gcc googleContainerClusterAttributes) NodePoolDefaults() terra.ListValue[NodePoolDefaultsAttributes] {
	return terra.ReferenceAsList[NodePoolDefaultsAttributes](gcc.ref.Append("node_pool_defaults"))
}

func (gcc googleContainerClusterAttributes) NotificationConfig() terra.ListValue[NotificationConfigAttributes] {
	return terra.ReferenceAsList[NotificationConfigAttributes](gcc.ref.Append("notification_config"))
}

func (gcc googleContainerClusterAttributes) PodSecurityPolicyConfig() terra.ListValue[PodSecurityPolicyConfigAttributes] {
	return terra.ReferenceAsList[PodSecurityPolicyConfigAttributes](gcc.ref.Append("pod_security_policy_config"))
}

func (gcc googleContainerClusterAttributes) PrivateClusterConfig() terra.ListValue[PrivateClusterConfigAttributes] {
	return terra.ReferenceAsList[PrivateClusterConfigAttributes](gcc.ref.Append("private_cluster_config"))
}

func (gcc googleContainerClusterAttributes) ProtectConfig() terra.ListValue[ProtectConfigAttributes] {
	return terra.ReferenceAsList[ProtectConfigAttributes](gcc.ref.Append("protect_config"))
}

func (gcc googleContainerClusterAttributes) ReleaseChannel() terra.ListValue[ReleaseChannelAttributes] {
	return terra.ReferenceAsList[ReleaseChannelAttributes](gcc.ref.Append("release_channel"))
}

func (gcc googleContainerClusterAttributes) ResourceUsageExportConfig() terra.ListValue[ResourceUsageExportConfigAttributes] {
	return terra.ReferenceAsList[ResourceUsageExportConfigAttributes](gcc.ref.Append("resource_usage_export_config"))
}

func (gcc googleContainerClusterAttributes) SecurityPostureConfig() terra.ListValue[SecurityPostureConfigAttributes] {
	return terra.ReferenceAsList[SecurityPostureConfigAttributes](gcc.ref.Append("security_posture_config"))
}

func (gcc googleContainerClusterAttributes) ServiceExternalIpsConfig() terra.ListValue[ServiceExternalIpsConfigAttributes] {
	return terra.ReferenceAsList[ServiceExternalIpsConfigAttributes](gcc.ref.Append("service_external_ips_config"))
}

func (gcc googleContainerClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcc.ref.Append("timeouts"))
}

func (gcc googleContainerClusterAttributes) TpuConfig() terra.ListValue[TpuConfigAttributes] {
	return terra.ReferenceAsList[TpuConfigAttributes](gcc.ref.Append("tpu_config"))
}

func (gcc googleContainerClusterAttributes) VerticalPodAutoscaling() terra.ListValue[VerticalPodAutoscalingAttributes] {
	return terra.ReferenceAsList[VerticalPodAutoscalingAttributes](gcc.ref.Append("vertical_pod_autoscaling"))
}

func (gcc googleContainerClusterAttributes) WorkloadAltsConfig() terra.ListValue[WorkloadAltsConfigAttributes] {
	return terra.ReferenceAsList[WorkloadAltsConfigAttributes](gcc.ref.Append("workload_alts_config"))
}

func (gcc googleContainerClusterAttributes) WorkloadIdentityConfig() terra.ListValue[WorkloadIdentityConfigAttributes] {
	return terra.ReferenceAsList[WorkloadIdentityConfigAttributes](gcc.ref.Append("workload_identity_config"))
}

type googleContainerClusterState struct {
	AllowNetAdmin                        bool                                  `json:"allow_net_admin"`
	ClusterIpv4Cidr                      string                                `json:"cluster_ipv4_cidr"`
	DatapathProvider                     string                                `json:"datapath_provider"`
	DefaultMaxPodsPerNode                float64                               `json:"default_max_pods_per_node"`
	DeletionProtection                   bool                                  `json:"deletion_protection"`
	Description                          string                                `json:"description"`
	EnableAutopilot                      bool                                  `json:"enable_autopilot"`
	EnableCiliumClusterwideNetworkPolicy bool                                  `json:"enable_cilium_clusterwide_network_policy"`
	EnableFqdnNetworkPolicy              bool                                  `json:"enable_fqdn_network_policy"`
	EnableIntranodeVisibility            bool                                  `json:"enable_intranode_visibility"`
	EnableKubernetesAlpha                bool                                  `json:"enable_kubernetes_alpha"`
	EnableL4IlbSubsetting                bool                                  `json:"enable_l4_ilb_subsetting"`
	EnableLegacyAbac                     bool                                  `json:"enable_legacy_abac"`
	EnableMultiNetworking                bool                                  `json:"enable_multi_networking"`
	EnableShieldedNodes                  bool                                  `json:"enable_shielded_nodes"`
	EnableTpu                            bool                                  `json:"enable_tpu"`
	Endpoint                             string                                `json:"endpoint"`
	Id                                   string                                `json:"id"`
	InitialNodeCount                     float64                               `json:"initial_node_count"`
	LabelFingerprint                     string                                `json:"label_fingerprint"`
	Location                             string                                `json:"location"`
	LoggingService                       string                                `json:"logging_service"`
	MasterVersion                        string                                `json:"master_version"`
	MinMasterVersion                     string                                `json:"min_master_version"`
	MonitoringService                    string                                `json:"monitoring_service"`
	Name                                 string                                `json:"name"`
	Network                              string                                `json:"network"`
	NetworkingMode                       string                                `json:"networking_mode"`
	NodeLocations                        []string                              `json:"node_locations"`
	NodeVersion                          string                                `json:"node_version"`
	Operation                            string                                `json:"operation"`
	PrivateIpv6GoogleAccess              string                                `json:"private_ipv6_google_access"`
	Project                              string                                `json:"project"`
	RemoveDefaultNodePool                bool                                  `json:"remove_default_node_pool"`
	ResourceLabels                       map[string]string                     `json:"resource_labels"`
	SelfLink                             string                                `json:"self_link"`
	ServicesIpv4Cidr                     string                                `json:"services_ipv4_cidr"`
	Subnetwork                           string                                `json:"subnetwork"`
	TpuIpv4CidrBlock                     string                                `json:"tpu_ipv4_cidr_block"`
	AddonsConfig                         []AddonsConfigState                   `json:"addons_config"`
	AuthenticatorGroupsConfig            []AuthenticatorGroupsConfigState      `json:"authenticator_groups_config"`
	BinaryAuthorization                  []BinaryAuthorizationState            `json:"binary_authorization"`
	ClusterAutoscaling                   []ClusterAutoscalingState             `json:"cluster_autoscaling"`
	ClusterTelemetry                     []ClusterTelemetryState               `json:"cluster_telemetry"`
	ConfidentialNodes                    []ConfidentialNodesState              `json:"confidential_nodes"`
	CostManagementConfig                 []CostManagementConfigState           `json:"cost_management_config"`
	DatabaseEncryption                   []DatabaseEncryptionState             `json:"database_encryption"`
	DefaultSnatStatus                    []DefaultSnatStatusState              `json:"default_snat_status"`
	DnsConfig                            []DnsConfigState                      `json:"dns_config"`
	EnableK8SBetaApis                    []EnableK8SBetaApisState              `json:"enable_k8s_beta_apis"`
	Fleet                                []FleetState                          `json:"fleet"`
	GatewayApiConfig                     []GatewayApiConfigState               `json:"gateway_api_config"`
	IdentityServiceConfig                []IdentityServiceConfigState          `json:"identity_service_config"`
	IpAllocationPolicy                   []IpAllocationPolicyState             `json:"ip_allocation_policy"`
	LoggingConfig                        []LoggingConfigState                  `json:"logging_config"`
	MaintenancePolicy                    []MaintenancePolicyState              `json:"maintenance_policy"`
	MasterAuth                           []MasterAuthState                     `json:"master_auth"`
	MasterAuthorizedNetworksConfig       []MasterAuthorizedNetworksConfigState `json:"master_authorized_networks_config"`
	MeshCertificates                     []MeshCertificatesState               `json:"mesh_certificates"`
	MonitoringConfig                     []MonitoringConfigState               `json:"monitoring_config"`
	NetworkPolicy                        []NetworkPolicyState                  `json:"network_policy"`
	NodeConfig                           []NodeConfigState                     `json:"node_config"`
	NodePool                             []NodePoolState                       `json:"node_pool"`
	NodePoolAutoConfig                   []NodePoolAutoConfigState             `json:"node_pool_auto_config"`
	NodePoolDefaults                     []NodePoolDefaultsState               `json:"node_pool_defaults"`
	NotificationConfig                   []NotificationConfigState             `json:"notification_config"`
	PodSecurityPolicyConfig              []PodSecurityPolicyConfigState        `json:"pod_security_policy_config"`
	PrivateClusterConfig                 []PrivateClusterConfigState           `json:"private_cluster_config"`
	ProtectConfig                        []ProtectConfigState                  `json:"protect_config"`
	ReleaseChannel                       []ReleaseChannelState                 `json:"release_channel"`
	ResourceUsageExportConfig            []ResourceUsageExportConfigState      `json:"resource_usage_export_config"`
	SecurityPostureConfig                []SecurityPostureConfigState          `json:"security_posture_config"`
	ServiceExternalIpsConfig             []ServiceExternalIpsConfigState       `json:"service_external_ips_config"`
	Timeouts                             *TimeoutsState                        `json:"timeouts"`
	TpuConfig                            []TpuConfigState                      `json:"tpu_config"`
	VerticalPodAutoscaling               []VerticalPodAutoscalingState         `json:"vertical_pod_autoscaling"`
	WorkloadAltsConfig                   []WorkloadAltsConfigState             `json:"workload_alts_config"`
	WorkloadIdentityConfig               []WorkloadIdentityConfigState         `json:"workload_identity_config"`
}
