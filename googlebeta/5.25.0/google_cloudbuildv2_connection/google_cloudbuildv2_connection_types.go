// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloudbuildv2_connection

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type GithubConfig struct {
	// AppInstallationId: number, optional
	AppInstallationId terra.NumberValue `hcl:"app_installation_id,attr"`
	// GithubConfigAuthorizerCredential: optional
	AuthorizerCredential *GithubConfigAuthorizerCredential `hcl:"authorizer_credential,block"`
}

type GithubConfigAuthorizerCredential struct {
	// OauthTokenSecretVersion: string, optional
	OauthTokenSecretVersion terra.StringValue `hcl:"oauth_token_secret_version,attr"`
}

type GithubEnterpriseConfig struct {
	// AppId: number, optional
	AppId terra.NumberValue `hcl:"app_id,attr"`
	// AppInstallationId: number, optional
	AppInstallationId terra.NumberValue `hcl:"app_installation_id,attr"`
	// AppSlug: string, optional
	AppSlug terra.StringValue `hcl:"app_slug,attr"`
	// HostUri: string, required
	HostUri terra.StringValue `hcl:"host_uri,attr" validate:"required"`
	// PrivateKeySecretVersion: string, optional
	PrivateKeySecretVersion terra.StringValue `hcl:"private_key_secret_version,attr"`
	// SslCa: string, optional
	SslCa terra.StringValue `hcl:"ssl_ca,attr"`
	// WebhookSecretSecretVersion: string, optional
	WebhookSecretSecretVersion terra.StringValue `hcl:"webhook_secret_secret_version,attr"`
	// GithubEnterpriseConfigServiceDirectoryConfig: optional
	ServiceDirectoryConfig *GithubEnterpriseConfigServiceDirectoryConfig `hcl:"service_directory_config,block"`
}

type GithubEnterpriseConfigServiceDirectoryConfig struct {
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
}

type GitlabConfig struct {
	// HostUri: string, optional
	HostUri terra.StringValue `hcl:"host_uri,attr"`
	// SslCa: string, optional
	SslCa terra.StringValue `hcl:"ssl_ca,attr"`
	// WebhookSecretSecretVersion: string, required
	WebhookSecretSecretVersion terra.StringValue `hcl:"webhook_secret_secret_version,attr" validate:"required"`
	// GitlabConfigAuthorizerCredential: required
	AuthorizerCredential *GitlabConfigAuthorizerCredential `hcl:"authorizer_credential,block" validate:"required"`
	// GitlabConfigReadAuthorizerCredential: required
	ReadAuthorizerCredential *GitlabConfigReadAuthorizerCredential `hcl:"read_authorizer_credential,block" validate:"required"`
	// GitlabConfigServiceDirectoryConfig: optional
	ServiceDirectoryConfig *GitlabConfigServiceDirectoryConfig `hcl:"service_directory_config,block"`
}

type GitlabConfigAuthorizerCredential struct {
	// UserTokenSecretVersion: string, required
	UserTokenSecretVersion terra.StringValue `hcl:"user_token_secret_version,attr" validate:"required"`
}

type GitlabConfigReadAuthorizerCredential struct {
	// UserTokenSecretVersion: string, required
	UserTokenSecretVersion terra.StringValue `hcl:"user_token_secret_version,attr" validate:"required"`
}

type GitlabConfigServiceDirectoryConfig struct {
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type InstallationStateAttributes struct {
	ref terra.Reference
}

func (is InstallationStateAttributes) InternalRef() (terra.Reference, error) {
	return is.ref, nil
}

func (is InstallationStateAttributes) InternalWithRef(ref terra.Reference) InstallationStateAttributes {
	return InstallationStateAttributes{ref: ref}
}

func (is InstallationStateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return is.ref.InternalTokens()
}

func (is InstallationStateAttributes) ActionUri() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("action_uri"))
}

func (is InstallationStateAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("message"))
}

func (is InstallationStateAttributes) Stage() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("stage"))
}

type GithubConfigAttributes struct {
	ref terra.Reference
}

func (gc GithubConfigAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc GithubConfigAttributes) InternalWithRef(ref terra.Reference) GithubConfigAttributes {
	return GithubConfigAttributes{ref: ref}
}

func (gc GithubConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc GithubConfigAttributes) AppInstallationId() terra.NumberValue {
	return terra.ReferenceAsNumber(gc.ref.Append("app_installation_id"))
}

func (gc GithubConfigAttributes) AuthorizerCredential() terra.ListValue[GithubConfigAuthorizerCredentialAttributes] {
	return terra.ReferenceAsList[GithubConfigAuthorizerCredentialAttributes](gc.ref.Append("authorizer_credential"))
}

type GithubConfigAuthorizerCredentialAttributes struct {
	ref terra.Reference
}

func (ac GithubConfigAuthorizerCredentialAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac GithubConfigAuthorizerCredentialAttributes) InternalWithRef(ref terra.Reference) GithubConfigAuthorizerCredentialAttributes {
	return GithubConfigAuthorizerCredentialAttributes{ref: ref}
}

func (ac GithubConfigAuthorizerCredentialAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac GithubConfigAuthorizerCredentialAttributes) OauthTokenSecretVersion() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("oauth_token_secret_version"))
}

func (ac GithubConfigAuthorizerCredentialAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("username"))
}

type GithubEnterpriseConfigAttributes struct {
	ref terra.Reference
}

func (gec GithubEnterpriseConfigAttributes) InternalRef() (terra.Reference, error) {
	return gec.ref, nil
}

func (gec GithubEnterpriseConfigAttributes) InternalWithRef(ref terra.Reference) GithubEnterpriseConfigAttributes {
	return GithubEnterpriseConfigAttributes{ref: ref}
}

func (gec GithubEnterpriseConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gec.ref.InternalTokens()
}

func (gec GithubEnterpriseConfigAttributes) AppId() terra.NumberValue {
	return terra.ReferenceAsNumber(gec.ref.Append("app_id"))
}

func (gec GithubEnterpriseConfigAttributes) AppInstallationId() terra.NumberValue {
	return terra.ReferenceAsNumber(gec.ref.Append("app_installation_id"))
}

func (gec GithubEnterpriseConfigAttributes) AppSlug() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("app_slug"))
}

func (gec GithubEnterpriseConfigAttributes) HostUri() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("host_uri"))
}

func (gec GithubEnterpriseConfigAttributes) PrivateKeySecretVersion() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("private_key_secret_version"))
}

func (gec GithubEnterpriseConfigAttributes) SslCa() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("ssl_ca"))
}

func (gec GithubEnterpriseConfigAttributes) WebhookSecretSecretVersion() terra.StringValue {
	return terra.ReferenceAsString(gec.ref.Append("webhook_secret_secret_version"))
}

func (gec GithubEnterpriseConfigAttributes) ServiceDirectoryConfig() terra.ListValue[GithubEnterpriseConfigServiceDirectoryConfigAttributes] {
	return terra.ReferenceAsList[GithubEnterpriseConfigServiceDirectoryConfigAttributes](gec.ref.Append("service_directory_config"))
}

type GithubEnterpriseConfigServiceDirectoryConfigAttributes struct {
	ref terra.Reference
}

func (sdc GithubEnterpriseConfigServiceDirectoryConfigAttributes) InternalRef() (terra.Reference, error) {
	return sdc.ref, nil
}

func (sdc GithubEnterpriseConfigServiceDirectoryConfigAttributes) InternalWithRef(ref terra.Reference) GithubEnterpriseConfigServiceDirectoryConfigAttributes {
	return GithubEnterpriseConfigServiceDirectoryConfigAttributes{ref: ref}
}

func (sdc GithubEnterpriseConfigServiceDirectoryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sdc.ref.InternalTokens()
}

func (sdc GithubEnterpriseConfigServiceDirectoryConfigAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(sdc.ref.Append("service"))
}

type GitlabConfigAttributes struct {
	ref terra.Reference
}

func (gc GitlabConfigAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc GitlabConfigAttributes) InternalWithRef(ref terra.Reference) GitlabConfigAttributes {
	return GitlabConfigAttributes{ref: ref}
}

func (gc GitlabConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc GitlabConfigAttributes) HostUri() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("host_uri"))
}

func (gc GitlabConfigAttributes) ServerVersion() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("server_version"))
}

func (gc GitlabConfigAttributes) SslCa() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("ssl_ca"))
}

func (gc GitlabConfigAttributes) WebhookSecretSecretVersion() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("webhook_secret_secret_version"))
}

func (gc GitlabConfigAttributes) AuthorizerCredential() terra.ListValue[GitlabConfigAuthorizerCredentialAttributes] {
	return terra.ReferenceAsList[GitlabConfigAuthorizerCredentialAttributes](gc.ref.Append("authorizer_credential"))
}

func (gc GitlabConfigAttributes) ReadAuthorizerCredential() terra.ListValue[GitlabConfigReadAuthorizerCredentialAttributes] {
	return terra.ReferenceAsList[GitlabConfigReadAuthorizerCredentialAttributes](gc.ref.Append("read_authorizer_credential"))
}

func (gc GitlabConfigAttributes) ServiceDirectoryConfig() terra.ListValue[GitlabConfigServiceDirectoryConfigAttributes] {
	return terra.ReferenceAsList[GitlabConfigServiceDirectoryConfigAttributes](gc.ref.Append("service_directory_config"))
}

type GitlabConfigAuthorizerCredentialAttributes struct {
	ref terra.Reference
}

func (ac GitlabConfigAuthorizerCredentialAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac GitlabConfigAuthorizerCredentialAttributes) InternalWithRef(ref terra.Reference) GitlabConfigAuthorizerCredentialAttributes {
	return GitlabConfigAuthorizerCredentialAttributes{ref: ref}
}

func (ac GitlabConfigAuthorizerCredentialAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac GitlabConfigAuthorizerCredentialAttributes) UserTokenSecretVersion() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("user_token_secret_version"))
}

func (ac GitlabConfigAuthorizerCredentialAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("username"))
}

type GitlabConfigReadAuthorizerCredentialAttributes struct {
	ref terra.Reference
}

func (rac GitlabConfigReadAuthorizerCredentialAttributes) InternalRef() (terra.Reference, error) {
	return rac.ref, nil
}

func (rac GitlabConfigReadAuthorizerCredentialAttributes) InternalWithRef(ref terra.Reference) GitlabConfigReadAuthorizerCredentialAttributes {
	return GitlabConfigReadAuthorizerCredentialAttributes{ref: ref}
}

func (rac GitlabConfigReadAuthorizerCredentialAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rac.ref.InternalTokens()
}

func (rac GitlabConfigReadAuthorizerCredentialAttributes) UserTokenSecretVersion() terra.StringValue {
	return terra.ReferenceAsString(rac.ref.Append("user_token_secret_version"))
}

func (rac GitlabConfigReadAuthorizerCredentialAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(rac.ref.Append("username"))
}

type GitlabConfigServiceDirectoryConfigAttributes struct {
	ref terra.Reference
}

func (sdc GitlabConfigServiceDirectoryConfigAttributes) InternalRef() (terra.Reference, error) {
	return sdc.ref, nil
}

func (sdc GitlabConfigServiceDirectoryConfigAttributes) InternalWithRef(ref terra.Reference) GitlabConfigServiceDirectoryConfigAttributes {
	return GitlabConfigServiceDirectoryConfigAttributes{ref: ref}
}

func (sdc GitlabConfigServiceDirectoryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sdc.ref.InternalTokens()
}

func (sdc GitlabConfigServiceDirectoryConfigAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(sdc.ref.Append("service"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type InstallationStateState struct {
	ActionUri string `json:"action_uri"`
	Message   string `json:"message"`
	Stage     string `json:"stage"`
}

type GithubConfigState struct {
	AppInstallationId    float64                                 `json:"app_installation_id"`
	AuthorizerCredential []GithubConfigAuthorizerCredentialState `json:"authorizer_credential"`
}

type GithubConfigAuthorizerCredentialState struct {
	OauthTokenSecretVersion string `json:"oauth_token_secret_version"`
	Username                string `json:"username"`
}

type GithubEnterpriseConfigState struct {
	AppId                      float64                                             `json:"app_id"`
	AppInstallationId          float64                                             `json:"app_installation_id"`
	AppSlug                    string                                              `json:"app_slug"`
	HostUri                    string                                              `json:"host_uri"`
	PrivateKeySecretVersion    string                                              `json:"private_key_secret_version"`
	SslCa                      string                                              `json:"ssl_ca"`
	WebhookSecretSecretVersion string                                              `json:"webhook_secret_secret_version"`
	ServiceDirectoryConfig     []GithubEnterpriseConfigServiceDirectoryConfigState `json:"service_directory_config"`
}

type GithubEnterpriseConfigServiceDirectoryConfigState struct {
	Service string `json:"service"`
}

type GitlabConfigState struct {
	HostUri                    string                                      `json:"host_uri"`
	ServerVersion              string                                      `json:"server_version"`
	SslCa                      string                                      `json:"ssl_ca"`
	WebhookSecretSecretVersion string                                      `json:"webhook_secret_secret_version"`
	AuthorizerCredential       []GitlabConfigAuthorizerCredentialState     `json:"authorizer_credential"`
	ReadAuthorizerCredential   []GitlabConfigReadAuthorizerCredentialState `json:"read_authorizer_credential"`
	ServiceDirectoryConfig     []GitlabConfigServiceDirectoryConfigState   `json:"service_directory_config"`
}

type GitlabConfigAuthorizerCredentialState struct {
	UserTokenSecretVersion string `json:"user_token_secret_version"`
	Username               string `json:"username"`
}

type GitlabConfigReadAuthorizerCredentialState struct {
	UserTokenSecretVersion string `json:"user_token_secret_version"`
	Username               string `json:"username"`
}

type GitlabConfigServiceDirectoryConfigState struct {
	Service string `json:"service"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
