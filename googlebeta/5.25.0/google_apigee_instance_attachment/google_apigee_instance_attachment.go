// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apigee_instance_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_apigee_instance_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApigeeInstanceAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gaia *Resource) Type() string {
	return "google_apigee_instance_attachment"
}

// LocalName returns the local name for [Resource].
func (gaia *Resource) LocalName() string {
	return gaia.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gaia *Resource) Configuration() interface{} {
	return gaia.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gaia *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gaia)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gaia *Resource) Dependencies() terra.Dependencies {
	return gaia.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gaia *Resource) LifecycleManagement() *terra.Lifecycle {
	return gaia.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gaia *Resource) Attributes() googleApigeeInstanceAttachmentAttributes {
	return googleApigeeInstanceAttachmentAttributes{ref: terra.ReferenceResource(gaia)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gaia *Resource) ImportState(state io.Reader) error {
	gaia.state = &googleApigeeInstanceAttachmentState{}
	if err := json.NewDecoder(state).Decode(gaia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gaia.Type(), gaia.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gaia *Resource) State() (*googleApigeeInstanceAttachmentState, bool) {
	return gaia.state, gaia.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gaia *Resource) StateMust() *googleApigeeInstanceAttachmentState {
	if gaia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gaia.Type(), gaia.LocalName()))
	}
	return gaia.state
}

// Args contains the configurations for google_apigee_instance_attachment.
type Args struct {
	// Environment: string, required
	Environment terra.StringValue `hcl:"environment,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApigeeInstanceAttachmentAttributes struct {
	ref terra.Reference
}

// Environment returns a reference to field environment of google_apigee_instance_attachment.
func (gaia googleApigeeInstanceAttachmentAttributes) Environment() terra.StringValue {
	return terra.ReferenceAsString(gaia.ref.Append("environment"))
}

// Id returns a reference to field id of google_apigee_instance_attachment.
func (gaia googleApigeeInstanceAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gaia.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of google_apigee_instance_attachment.
func (gaia googleApigeeInstanceAttachmentAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(gaia.ref.Append("instance_id"))
}

// Name returns a reference to field name of google_apigee_instance_attachment.
func (gaia googleApigeeInstanceAttachmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gaia.ref.Append("name"))
}

func (gaia googleApigeeInstanceAttachmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gaia.ref.Append("timeouts"))
}

type googleApigeeInstanceAttachmentState struct {
	Environment string         `json:"environment"`
	Id          string         `json:"id"`
	InstanceId  string         `json:"instance_id"`
	Name        string         `json:"name"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
