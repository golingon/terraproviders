// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_network_services_tls_route

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rules struct {
	// RulesAction: required
	Action *RulesAction `hcl:"action,block" validate:"required"`
	// RulesMatches: min=1
	Matches []RulesMatches `hcl:"matches,block" validate:"min=1"`
}

type RulesAction struct {
	// RulesActionDestinations: min=0
	Destinations []RulesActionDestinations `hcl:"destinations,block" validate:"min=0"`
}

type RulesActionDestinations struct {
	// ServiceName: string, optional
	ServiceName terra.StringValue `hcl:"service_name,attr"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type RulesMatches struct {
	// Alpn: list of string, optional
	Alpn terra.ListValue[terra.StringValue] `hcl:"alpn,attr"`
	// SniHost: list of string, optional
	SniHost terra.ListValue[terra.StringValue] `hcl:"sni_host,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RulesAttributes struct {
	ref terra.Reference
}

func (r RulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RulesAttributes) InternalWithRef(ref terra.Reference) RulesAttributes {
	return RulesAttributes{ref: ref}
}

func (r RulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RulesAttributes) Action() terra.ListValue[RulesActionAttributes] {
	return terra.ReferenceAsList[RulesActionAttributes](r.ref.Append("action"))
}

func (r RulesAttributes) Matches() terra.ListValue[RulesMatchesAttributes] {
	return terra.ReferenceAsList[RulesMatchesAttributes](r.ref.Append("matches"))
}

type RulesActionAttributes struct {
	ref terra.Reference
}

func (a RulesActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a RulesActionAttributes) InternalWithRef(ref terra.Reference) RulesActionAttributes {
	return RulesActionAttributes{ref: ref}
}

func (a RulesActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a RulesActionAttributes) Destinations() terra.ListValue[RulesActionDestinationsAttributes] {
	return terra.ReferenceAsList[RulesActionDestinationsAttributes](a.ref.Append("destinations"))
}

type RulesActionDestinationsAttributes struct {
	ref terra.Reference
}

func (d RulesActionDestinationsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d RulesActionDestinationsAttributes) InternalWithRef(ref terra.Reference) RulesActionDestinationsAttributes {
	return RulesActionDestinationsAttributes{ref: ref}
}

func (d RulesActionDestinationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d RulesActionDestinationsAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("service_name"))
}

func (d RulesActionDestinationsAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("weight"))
}

type RulesMatchesAttributes struct {
	ref terra.Reference
}

func (m RulesMatchesAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m RulesMatchesAttributes) InternalWithRef(ref terra.Reference) RulesMatchesAttributes {
	return RulesMatchesAttributes{ref: ref}
}

func (m RulesMatchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m RulesMatchesAttributes) Alpn() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("alpn"))
}

func (m RulesMatchesAttributes) SniHost() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("sni_host"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RulesState struct {
	Action  []RulesActionState  `json:"action"`
	Matches []RulesMatchesState `json:"matches"`
}

type RulesActionState struct {
	Destinations []RulesActionDestinationsState `json:"destinations"`
}

type RulesActionDestinationsState struct {
	ServiceName string  `json:"service_name"`
	Weight      float64 `json:"weight"`
}

type RulesMatchesState struct {
	Alpn    []string `json:"alpn"`
	SniHost []string `json:"sni_host"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
