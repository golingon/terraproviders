// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_notebooks_runtime

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_notebooks_runtime.
type Resource struct {
	Name      string
	Args      Args
	state     *googleNotebooksRuntimeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gnr *Resource) Type() string {
	return "google_notebooks_runtime"
}

// LocalName returns the local name for [Resource].
func (gnr *Resource) LocalName() string {
	return gnr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gnr *Resource) Configuration() interface{} {
	return gnr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gnr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gnr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gnr *Resource) Dependencies() terra.Dependencies {
	return gnr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gnr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gnr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gnr *Resource) Attributes() googleNotebooksRuntimeAttributes {
	return googleNotebooksRuntimeAttributes{ref: terra.ReferenceResource(gnr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gnr *Resource) ImportState(state io.Reader) error {
	gnr.state = &googleNotebooksRuntimeState{}
	if err := json.NewDecoder(state).Decode(gnr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gnr.Type(), gnr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gnr *Resource) State() (*googleNotebooksRuntimeState, bool) {
	return gnr.state, gnr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gnr *Resource) StateMust() *googleNotebooksRuntimeState {
	if gnr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gnr.Type(), gnr.LocalName()))
	}
	return gnr.state
}

// Args contains the configurations for google_notebooks_runtime.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// AccessConfig: optional
	AccessConfig *AccessConfig `hcl:"access_config,block"`
	// SoftwareConfig: optional
	SoftwareConfig *SoftwareConfig `hcl:"software_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VirtualMachine: optional
	VirtualMachine *VirtualMachine `hcl:"virtual_machine,block"`
}

type googleNotebooksRuntimeAttributes struct {
	ref terra.Reference
}

// EffectiveLabels returns a reference to field effective_labels of google_notebooks_runtime.
func (gnr googleNotebooksRuntimeAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnr.ref.Append("effective_labels"))
}

// HealthState returns a reference to field health_state of google_notebooks_runtime.
func (gnr googleNotebooksRuntimeAttributes) HealthState() terra.StringValue {
	return terra.ReferenceAsString(gnr.ref.Append("health_state"))
}

// Id returns a reference to field id of google_notebooks_runtime.
func (gnr googleNotebooksRuntimeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gnr.ref.Append("id"))
}

// Labels returns a reference to field labels of google_notebooks_runtime.
func (gnr googleNotebooksRuntimeAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnr.ref.Append("labels"))
}

// Location returns a reference to field location of google_notebooks_runtime.
func (gnr googleNotebooksRuntimeAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gnr.ref.Append("location"))
}

// Name returns a reference to field name of google_notebooks_runtime.
func (gnr googleNotebooksRuntimeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gnr.ref.Append("name"))
}

// Project returns a reference to field project of google_notebooks_runtime.
func (gnr googleNotebooksRuntimeAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gnr.ref.Append("project"))
}

// State returns a reference to field state of google_notebooks_runtime.
func (gnr googleNotebooksRuntimeAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gnr.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_notebooks_runtime.
func (gnr googleNotebooksRuntimeAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnr.ref.Append("terraform_labels"))
}

func (gnr googleNotebooksRuntimeAttributes) Metrics() terra.ListValue[MetricsAttributes] {
	return terra.ReferenceAsList[MetricsAttributes](gnr.ref.Append("metrics"))
}

func (gnr googleNotebooksRuntimeAttributes) AccessConfig() terra.ListValue[AccessConfigAttributes] {
	return terra.ReferenceAsList[AccessConfigAttributes](gnr.ref.Append("access_config"))
}

func (gnr googleNotebooksRuntimeAttributes) SoftwareConfig() terra.ListValue[SoftwareConfigAttributes] {
	return terra.ReferenceAsList[SoftwareConfigAttributes](gnr.ref.Append("software_config"))
}

func (gnr googleNotebooksRuntimeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gnr.ref.Append("timeouts"))
}

func (gnr googleNotebooksRuntimeAttributes) VirtualMachine() terra.ListValue[VirtualMachineAttributes] {
	return terra.ReferenceAsList[VirtualMachineAttributes](gnr.ref.Append("virtual_machine"))
}

type googleNotebooksRuntimeState struct {
	EffectiveLabels map[string]string     `json:"effective_labels"`
	HealthState     string                `json:"health_state"`
	Id              string                `json:"id"`
	Labels          map[string]string     `json:"labels"`
	Location        string                `json:"location"`
	Name            string                `json:"name"`
	Project         string                `json:"project"`
	State           string                `json:"state"`
	TerraformLabels map[string]string     `json:"terraform_labels"`
	Metrics         []MetricsState        `json:"metrics"`
	AccessConfig    []AccessConfigState   `json:"access_config"`
	SoftwareConfig  []SoftwareConfigState `json:"software_config"`
	Timeouts        *TimeoutsState        `json:"timeouts"`
	VirtualMachine  []VirtualMachineState `json:"virtual_machine"`
}
