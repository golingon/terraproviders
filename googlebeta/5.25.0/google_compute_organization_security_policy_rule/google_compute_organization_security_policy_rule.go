// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_organization_security_policy_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_organization_security_policy_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeOrganizationSecurityPolicyRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcospr *Resource) Type() string {
	return "google_compute_organization_security_policy_rule"
}

// LocalName returns the local name for [Resource].
func (gcospr *Resource) LocalName() string {
	return gcospr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcospr *Resource) Configuration() interface{} {
	return gcospr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcospr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcospr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcospr *Resource) Dependencies() terra.Dependencies {
	return gcospr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcospr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcospr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcospr *Resource) Attributes() googleComputeOrganizationSecurityPolicyRuleAttributes {
	return googleComputeOrganizationSecurityPolicyRuleAttributes{ref: terra.ReferenceResource(gcospr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcospr *Resource) ImportState(state io.Reader) error {
	gcospr.state = &googleComputeOrganizationSecurityPolicyRuleState{}
	if err := json.NewDecoder(state).Decode(gcospr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcospr.Type(), gcospr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcospr *Resource) State() (*googleComputeOrganizationSecurityPolicyRuleState, bool) {
	return gcospr.state, gcospr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcospr *Resource) StateMust() *googleComputeOrganizationSecurityPolicyRuleState {
	if gcospr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcospr.Type(), gcospr.LocalName()))
	}
	return gcospr.state
}

// Args contains the configurations for google_compute_organization_security_policy_rule.
type Args struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Direction: string, optional
	Direction terra.StringValue `hcl:"direction,attr"`
	// EnableLogging: bool, optional
	EnableLogging terra.BoolValue `hcl:"enable_logging,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyId: string, required
	PolicyId terra.StringValue `hcl:"policy_id,attr" validate:"required"`
	// Preview: bool, optional
	Preview terra.BoolValue `hcl:"preview,attr"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// TargetResources: list of string, optional
	TargetResources terra.ListValue[terra.StringValue] `hcl:"target_resources,attr"`
	// TargetServiceAccounts: list of string, optional
	TargetServiceAccounts terra.ListValue[terra.StringValue] `hcl:"target_service_accounts,attr"`
	// Match: required
	Match *Match `hcl:"match,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeOrganizationSecurityPolicyRuleAttributes struct {
	ref terra.Reference
}

// Action returns a reference to field action of google_compute_organization_security_policy_rule.
func (gcospr googleComputeOrganizationSecurityPolicyRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(gcospr.ref.Append("action"))
}

// Description returns a reference to field description of google_compute_organization_security_policy_rule.
func (gcospr googleComputeOrganizationSecurityPolicyRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcospr.ref.Append("description"))
}

// Direction returns a reference to field direction of google_compute_organization_security_policy_rule.
func (gcospr googleComputeOrganizationSecurityPolicyRuleAttributes) Direction() terra.StringValue {
	return terra.ReferenceAsString(gcospr.ref.Append("direction"))
}

// EnableLogging returns a reference to field enable_logging of google_compute_organization_security_policy_rule.
func (gcospr googleComputeOrganizationSecurityPolicyRuleAttributes) EnableLogging() terra.BoolValue {
	return terra.ReferenceAsBool(gcospr.ref.Append("enable_logging"))
}

// Id returns a reference to field id of google_compute_organization_security_policy_rule.
func (gcospr googleComputeOrganizationSecurityPolicyRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcospr.ref.Append("id"))
}

// PolicyId returns a reference to field policy_id of google_compute_organization_security_policy_rule.
func (gcospr googleComputeOrganizationSecurityPolicyRuleAttributes) PolicyId() terra.StringValue {
	return terra.ReferenceAsString(gcospr.ref.Append("policy_id"))
}

// Preview returns a reference to field preview of google_compute_organization_security_policy_rule.
func (gcospr googleComputeOrganizationSecurityPolicyRuleAttributes) Preview() terra.BoolValue {
	return terra.ReferenceAsBool(gcospr.ref.Append("preview"))
}

// Priority returns a reference to field priority of google_compute_organization_security_policy_rule.
func (gcospr googleComputeOrganizationSecurityPolicyRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(gcospr.ref.Append("priority"))
}

// TargetResources returns a reference to field target_resources of google_compute_organization_security_policy_rule.
func (gcospr googleComputeOrganizationSecurityPolicyRuleAttributes) TargetResources() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcospr.ref.Append("target_resources"))
}

// TargetServiceAccounts returns a reference to field target_service_accounts of google_compute_organization_security_policy_rule.
func (gcospr googleComputeOrganizationSecurityPolicyRuleAttributes) TargetServiceAccounts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcospr.ref.Append("target_service_accounts"))
}

func (gcospr googleComputeOrganizationSecurityPolicyRuleAttributes) Match() terra.ListValue[MatchAttributes] {
	return terra.ReferenceAsList[MatchAttributes](gcospr.ref.Append("match"))
}

func (gcospr googleComputeOrganizationSecurityPolicyRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcospr.ref.Append("timeouts"))
}

type googleComputeOrganizationSecurityPolicyRuleState struct {
	Action                string         `json:"action"`
	Description           string         `json:"description"`
	Direction             string         `json:"direction"`
	EnableLogging         bool           `json:"enable_logging"`
	Id                    string         `json:"id"`
	PolicyId              string         `json:"policy_id"`
	Preview               bool           `json:"preview"`
	Priority              float64        `json:"priority"`
	TargetResources       []string       `json:"target_resources"`
	TargetServiceAccounts []string       `json:"target_service_accounts"`
	Match                 []MatchState   `json:"match"`
	Timeouts              *TimeoutsState `json:"timeouts"`
}
