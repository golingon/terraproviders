// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_service_networking_peered_dns_domain

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_service_networking_peered_dns_domain.
type Resource struct {
	Name      string
	Args      Args
	state     *googleServiceNetworkingPeeredDnsDomainState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsnpdd *Resource) Type() string {
	return "google_service_networking_peered_dns_domain"
}

// LocalName returns the local name for [Resource].
func (gsnpdd *Resource) LocalName() string {
	return gsnpdd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsnpdd *Resource) Configuration() interface{} {
	return gsnpdd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsnpdd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsnpdd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsnpdd *Resource) Dependencies() terra.Dependencies {
	return gsnpdd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsnpdd *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsnpdd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsnpdd *Resource) Attributes() googleServiceNetworkingPeeredDnsDomainAttributes {
	return googleServiceNetworkingPeeredDnsDomainAttributes{ref: terra.ReferenceResource(gsnpdd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsnpdd *Resource) ImportState(state io.Reader) error {
	gsnpdd.state = &googleServiceNetworkingPeeredDnsDomainState{}
	if err := json.NewDecoder(state).Decode(gsnpdd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsnpdd.Type(), gsnpdd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsnpdd *Resource) State() (*googleServiceNetworkingPeeredDnsDomainState, bool) {
	return gsnpdd.state, gsnpdd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsnpdd *Resource) StateMust() *googleServiceNetworkingPeeredDnsDomainState {
	if gsnpdd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsnpdd.Type(), gsnpdd.LocalName()))
	}
	return gsnpdd.state
}

// Args contains the configurations for google_service_networking_peered_dns_domain.
type Args struct {
	// DnsSuffix: string, required
	DnsSuffix terra.StringValue `hcl:"dns_suffix,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleServiceNetworkingPeeredDnsDomainAttributes struct {
	ref terra.Reference
}

// DnsSuffix returns a reference to field dns_suffix of google_service_networking_peered_dns_domain.
func (gsnpdd googleServiceNetworkingPeeredDnsDomainAttributes) DnsSuffix() terra.StringValue {
	return terra.ReferenceAsString(gsnpdd.ref.Append("dns_suffix"))
}

// Id returns a reference to field id of google_service_networking_peered_dns_domain.
func (gsnpdd googleServiceNetworkingPeeredDnsDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsnpdd.ref.Append("id"))
}

// Name returns a reference to field name of google_service_networking_peered_dns_domain.
func (gsnpdd googleServiceNetworkingPeeredDnsDomainAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsnpdd.ref.Append("name"))
}

// Network returns a reference to field network of google_service_networking_peered_dns_domain.
func (gsnpdd googleServiceNetworkingPeeredDnsDomainAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gsnpdd.ref.Append("network"))
}

// Parent returns a reference to field parent of google_service_networking_peered_dns_domain.
func (gsnpdd googleServiceNetworkingPeeredDnsDomainAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gsnpdd.ref.Append("parent"))
}

// Project returns a reference to field project of google_service_networking_peered_dns_domain.
func (gsnpdd googleServiceNetworkingPeeredDnsDomainAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gsnpdd.ref.Append("project"))
}

// Service returns a reference to field service of google_service_networking_peered_dns_domain.
func (gsnpdd googleServiceNetworkingPeeredDnsDomainAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(gsnpdd.ref.Append("service"))
}

func (gsnpdd googleServiceNetworkingPeeredDnsDomainAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsnpdd.ref.Append("timeouts"))
}

type googleServiceNetworkingPeeredDnsDomainState struct {
	DnsSuffix string         `json:"dns_suffix"`
	Id        string         `json:"id"`
	Name      string         `json:"name"`
	Network   string         `json:"network"`
	Parent    string         `json:"parent"`
	Project   string         `json:"project"`
	Service   string         `json:"service"`
	Timeouts  *TimeoutsState `json:"timeouts"`
}
