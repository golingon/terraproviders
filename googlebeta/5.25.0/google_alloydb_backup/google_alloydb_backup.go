// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_alloydb_backup

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_alloydb_backup.
type Resource struct {
	Name      string
	Args      Args
	state     *googleAlloydbBackupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gab *Resource) Type() string {
	return "google_alloydb_backup"
}

// LocalName returns the local name for [Resource].
func (gab *Resource) LocalName() string {
	return gab.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gab *Resource) Configuration() interface{} {
	return gab.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gab *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gab)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gab *Resource) Dependencies() terra.Dependencies {
	return gab.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gab *Resource) LifecycleManagement() *terra.Lifecycle {
	return gab.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gab *Resource) Attributes() googleAlloydbBackupAttributes {
	return googleAlloydbBackupAttributes{ref: terra.ReferenceResource(gab)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gab *Resource) ImportState(state io.Reader) error {
	gab.state = &googleAlloydbBackupState{}
	if err := json.NewDecoder(state).Decode(gab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gab.Type(), gab.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gab *Resource) State() (*googleAlloydbBackupState, bool) {
	return gab.state, gab.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gab *Resource) StateMust() *googleAlloydbBackupState {
	if gab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gab.Type(), gab.LocalName()))
	}
	return gab.state
}

// Args contains the configurations for google_alloydb_backup.
type Args struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// BackupId: string, required
	BackupId terra.StringValue `hcl:"backup_id,attr" validate:"required"`
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// EncryptionConfig: optional
	EncryptionConfig *EncryptionConfig `hcl:"encryption_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleAlloydbBackupAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gab.ref.Append("annotations"))
}

// BackupId returns a reference to field backup_id of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) BackupId() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("backup_id"))
}

// ClusterName returns a reference to field cluster_name of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("cluster_name"))
}

// ClusterUid returns a reference to field cluster_uid of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) ClusterUid() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("cluster_uid"))
}

// CreateTime returns a reference to field create_time of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("delete_time"))
}

// Description returns a reference to field description of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("display_name"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gab.ref.Append("effective_annotations"))
}

// EffectiveLabels returns a reference to field effective_labels of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gab.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("etag"))
}

// ExpiryTime returns a reference to field expiry_time of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) ExpiryTime() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("expiry_time"))
}

// Id returns a reference to field id of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("id"))
}

// Labels returns a reference to field labels of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gab.ref.Append("labels"))
}

// Location returns a reference to field location of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("location"))
}

// Name returns a reference to field name of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("name"))
}

// Project returns a reference to field project of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("project"))
}

// Reconciling returns a reference to field reconciling of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceAsBool(gab.ref.Append("reconciling"))
}

// SizeBytes returns a reference to field size_bytes of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) SizeBytes() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("size_bytes"))
}

// State returns a reference to field state of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gab.ref.Append("terraform_labels"))
}

// Type returns a reference to field type of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("type"))
}

// Uid returns a reference to field uid of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_alloydb_backup.
func (gab googleAlloydbBackupAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gab.ref.Append("update_time"))
}

func (gab googleAlloydbBackupAttributes) EncryptionInfo() terra.ListValue[EncryptionInfoAttributes] {
	return terra.ReferenceAsList[EncryptionInfoAttributes](gab.ref.Append("encryption_info"))
}

func (gab googleAlloydbBackupAttributes) ExpiryQuantity() terra.ListValue[ExpiryQuantityAttributes] {
	return terra.ReferenceAsList[ExpiryQuantityAttributes](gab.ref.Append("expiry_quantity"))
}

func (gab googleAlloydbBackupAttributes) EncryptionConfig() terra.ListValue[EncryptionConfigAttributes] {
	return terra.ReferenceAsList[EncryptionConfigAttributes](gab.ref.Append("encryption_config"))
}

func (gab googleAlloydbBackupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gab.ref.Append("timeouts"))
}

type googleAlloydbBackupState struct {
	Annotations          map[string]string       `json:"annotations"`
	BackupId             string                  `json:"backup_id"`
	ClusterName          string                  `json:"cluster_name"`
	ClusterUid           string                  `json:"cluster_uid"`
	CreateTime           string                  `json:"create_time"`
	DeleteTime           string                  `json:"delete_time"`
	Description          string                  `json:"description"`
	DisplayName          string                  `json:"display_name"`
	EffectiveAnnotations map[string]string       `json:"effective_annotations"`
	EffectiveLabels      map[string]string       `json:"effective_labels"`
	Etag                 string                  `json:"etag"`
	ExpiryTime           string                  `json:"expiry_time"`
	Id                   string                  `json:"id"`
	Labels               map[string]string       `json:"labels"`
	Location             string                  `json:"location"`
	Name                 string                  `json:"name"`
	Project              string                  `json:"project"`
	Reconciling          bool                    `json:"reconciling"`
	SizeBytes            string                  `json:"size_bytes"`
	State                string                  `json:"state"`
	TerraformLabels      map[string]string       `json:"terraform_labels"`
	Type                 string                  `json:"type"`
	Uid                  string                  `json:"uid"`
	UpdateTime           string                  `json:"update_time"`
	EncryptionInfo       []EncryptionInfoState   `json:"encryption_info"`
	ExpiryQuantity       []ExpiryQuantityState   `json:"expiry_quantity"`
	EncryptionConfig     []EncryptionConfigState `json:"encryption_config"`
	Timeouts             *TimeoutsState          `json:"timeouts"`
}
