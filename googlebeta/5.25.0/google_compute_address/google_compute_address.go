// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_address

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_address.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeAddressState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gca *Resource) Type() string {
	return "google_compute_address"
}

// LocalName returns the local name for [Resource].
func (gca *Resource) LocalName() string {
	return gca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gca *Resource) Configuration() interface{} {
	return gca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gca *Resource) Dependencies() terra.Dependencies {
	return gca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gca *Resource) LifecycleManagement() *terra.Lifecycle {
	return gca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gca *Resource) Attributes() googleComputeAddressAttributes {
	return googleComputeAddressAttributes{ref: terra.ReferenceResource(gca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gca *Resource) ImportState(state io.Reader) error {
	gca.state = &googleComputeAddressState{}
	if err := json.NewDecoder(state).Decode(gca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gca.Type(), gca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gca *Resource) State() (*googleComputeAddressState, bool) {
	return gca.state, gca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gca *Resource) StateMust() *googleComputeAddressState {
	if gca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gca.Type(), gca.LocalName()))
	}
	return gca.state
}

// Args contains the configurations for google_compute_address.
type Args struct {
	// Address: string, optional
	Address terra.StringValue `hcl:"address,attr"`
	// AddressType: string, optional
	AddressType terra.StringValue `hcl:"address_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpVersion: string, optional
	IpVersion terra.StringValue `hcl:"ip_version,attr"`
	// Ipv6EndpointType: string, optional
	Ipv6EndpointType terra.StringValue `hcl:"ipv6_endpoint_type,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// NetworkTier: string, optional
	NetworkTier terra.StringValue `hcl:"network_tier,attr"`
	// PrefixLength: number, optional
	PrefixLength terra.NumberValue `hcl:"prefix_length,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Purpose: string, optional
	Purpose terra.StringValue `hcl:"purpose,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeAddressAttributes struct {
	ref terra.Reference
}

// Address returns a reference to field address of google_compute_address.
func (gca googleComputeAddressAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("address"))
}

// AddressType returns a reference to field address_type of google_compute_address.
func (gca googleComputeAddressAttributes) AddressType() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("address_type"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_address.
func (gca googleComputeAddressAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_address.
func (gca googleComputeAddressAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_compute_address.
func (gca googleComputeAddressAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gca.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_compute_address.
func (gca googleComputeAddressAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("id"))
}

// IpVersion returns a reference to field ip_version of google_compute_address.
func (gca googleComputeAddressAttributes) IpVersion() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("ip_version"))
}

// Ipv6EndpointType returns a reference to field ipv6_endpoint_type of google_compute_address.
func (gca googleComputeAddressAttributes) Ipv6EndpointType() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("ipv6_endpoint_type"))
}

// LabelFingerprint returns a reference to field label_fingerprint of google_compute_address.
func (gca googleComputeAddressAttributes) LabelFingerprint() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("label_fingerprint"))
}

// Labels returns a reference to field labels of google_compute_address.
func (gca googleComputeAddressAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gca.ref.Append("labels"))
}

// Name returns a reference to field name of google_compute_address.
func (gca googleComputeAddressAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("name"))
}

// Network returns a reference to field network of google_compute_address.
func (gca googleComputeAddressAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("network"))
}

// NetworkTier returns a reference to field network_tier of google_compute_address.
func (gca googleComputeAddressAttributes) NetworkTier() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("network_tier"))
}

// PrefixLength returns a reference to field prefix_length of google_compute_address.
func (gca googleComputeAddressAttributes) PrefixLength() terra.NumberValue {
	return terra.ReferenceAsNumber(gca.ref.Append("prefix_length"))
}

// Project returns a reference to field project of google_compute_address.
func (gca googleComputeAddressAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("project"))
}

// Purpose returns a reference to field purpose of google_compute_address.
func (gca googleComputeAddressAttributes) Purpose() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("purpose"))
}

// Region returns a reference to field region of google_compute_address.
func (gca googleComputeAddressAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("region"))
}

// SelfLink returns a reference to field self_link of google_compute_address.
func (gca googleComputeAddressAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("self_link"))
}

// Subnetwork returns a reference to field subnetwork of google_compute_address.
func (gca googleComputeAddressAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("subnetwork"))
}

// TerraformLabels returns a reference to field terraform_labels of google_compute_address.
func (gca googleComputeAddressAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gca.ref.Append("terraform_labels"))
}

// Users returns a reference to field users of google_compute_address.
func (gca googleComputeAddressAttributes) Users() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gca.ref.Append("users"))
}

func (gca googleComputeAddressAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gca.ref.Append("timeouts"))
}

type googleComputeAddressState struct {
	Address           string            `json:"address"`
	AddressType       string            `json:"address_type"`
	CreationTimestamp string            `json:"creation_timestamp"`
	Description       string            `json:"description"`
	EffectiveLabels   map[string]string `json:"effective_labels"`
	Id                string            `json:"id"`
	IpVersion         string            `json:"ip_version"`
	Ipv6EndpointType  string            `json:"ipv6_endpoint_type"`
	LabelFingerprint  string            `json:"label_fingerprint"`
	Labels            map[string]string `json:"labels"`
	Name              string            `json:"name"`
	Network           string            `json:"network"`
	NetworkTier       string            `json:"network_tier"`
	PrefixLength      float64           `json:"prefix_length"`
	Project           string            `json:"project"`
	Purpose           string            `json:"purpose"`
	Region            string            `json:"region"`
	SelfLink          string            `json:"self_link"`
	Subnetwork        string            `json:"subnetwork"`
	TerraformLabels   map[string]string `json:"terraform_labels"`
	Users             []string          `json:"users"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
