// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dns_record_set

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type RoutingPolicy struct {
	// EnableGeoFencing: bool, optional
	EnableGeoFencing terra.BoolValue `hcl:"enable_geo_fencing,attr"`
	// RoutingPolicyGeo: min=0
	Geo []RoutingPolicyGeo `hcl:"geo,block" validate:"min=0"`
	// RoutingPolicyPrimaryBackup: optional
	PrimaryBackup *RoutingPolicyPrimaryBackup `hcl:"primary_backup,block"`
	// RoutingPolicyWrr: min=0
	Wrr []RoutingPolicyWrr `hcl:"wrr,block" validate:"min=0"`
}

type RoutingPolicyGeo struct {
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Rrdatas: list of string, optional
	Rrdatas terra.ListValue[terra.StringValue] `hcl:"rrdatas,attr"`
	// RoutingPolicyGeoHealthCheckedTargets: optional
	HealthCheckedTargets *RoutingPolicyGeoHealthCheckedTargets `hcl:"health_checked_targets,block"`
}

type RoutingPolicyGeoHealthCheckedTargets struct {
	// RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancers: min=1
	InternalLoadBalancers []RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancers `hcl:"internal_load_balancers,block" validate:"min=1"`
}

type RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancers struct {
	// IpAddress: string, required
	IpAddress terra.StringValue `hcl:"ip_address,attr" validate:"required"`
	// IpProtocol: string, required
	IpProtocol terra.StringValue `hcl:"ip_protocol,attr" validate:"required"`
	// LoadBalancerType: string, required
	LoadBalancerType terra.StringValue `hcl:"load_balancer_type,attr" validate:"required"`
	// NetworkUrl: string, required
	NetworkUrl terra.StringValue `hcl:"network_url,attr" validate:"required"`
	// Port: string, required
	Port terra.StringValue `hcl:"port,attr" validate:"required"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
}

type RoutingPolicyPrimaryBackup struct {
	// EnableGeoFencingForBackups: bool, optional
	EnableGeoFencingForBackups terra.BoolValue `hcl:"enable_geo_fencing_for_backups,attr"`
	// TrickleRatio: number, optional
	TrickleRatio terra.NumberValue `hcl:"trickle_ratio,attr"`
	// RoutingPolicyPrimaryBackupBackupGeo: min=1
	BackupGeo []RoutingPolicyPrimaryBackupBackupGeo `hcl:"backup_geo,block" validate:"min=1"`
	// RoutingPolicyPrimaryBackupPrimary: required
	Primary *RoutingPolicyPrimaryBackupPrimary `hcl:"primary,block" validate:"required"`
}

type RoutingPolicyPrimaryBackupBackupGeo struct {
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Rrdatas: list of string, optional
	Rrdatas terra.ListValue[terra.StringValue] `hcl:"rrdatas,attr"`
	// RoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargets: optional
	HealthCheckedTargets *RoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargets `hcl:"health_checked_targets,block"`
}

type RoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargets struct {
	// RoutingPolicyPrimaryBackup4A32A4Ad: min=1
	InternalLoadBalancers []RoutingPolicyPrimaryBackup4A32A4Ad `hcl:"internal_load_balancers,block" validate:"min=1"`
}

type RoutingPolicyPrimaryBackup4A32A4Ad struct {
	// IpAddress: string, required
	IpAddress terra.StringValue `hcl:"ip_address,attr" validate:"required"`
	// IpProtocol: string, required
	IpProtocol terra.StringValue `hcl:"ip_protocol,attr" validate:"required"`
	// LoadBalancerType: string, required
	LoadBalancerType terra.StringValue `hcl:"load_balancer_type,attr" validate:"required"`
	// NetworkUrl: string, required
	NetworkUrl terra.StringValue `hcl:"network_url,attr" validate:"required"`
	// Port: string, required
	Port terra.StringValue `hcl:"port,attr" validate:"required"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
}

type RoutingPolicyPrimaryBackupPrimary struct {
	// RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancers: min=1
	InternalLoadBalancers []RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancers `hcl:"internal_load_balancers,block" validate:"min=1"`
}

type RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancers struct {
	// IpAddress: string, required
	IpAddress terra.StringValue `hcl:"ip_address,attr" validate:"required"`
	// IpProtocol: string, required
	IpProtocol terra.StringValue `hcl:"ip_protocol,attr" validate:"required"`
	// LoadBalancerType: string, required
	LoadBalancerType terra.StringValue `hcl:"load_balancer_type,attr" validate:"required"`
	// NetworkUrl: string, required
	NetworkUrl terra.StringValue `hcl:"network_url,attr" validate:"required"`
	// Port: string, required
	Port terra.StringValue `hcl:"port,attr" validate:"required"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
}

type RoutingPolicyWrr struct {
	// Rrdatas: list of string, optional
	Rrdatas terra.ListValue[terra.StringValue] `hcl:"rrdatas,attr"`
	// Weight: number, required
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
	// RoutingPolicyWrrHealthCheckedTargets: optional
	HealthCheckedTargets *RoutingPolicyWrrHealthCheckedTargets `hcl:"health_checked_targets,block"`
}

type RoutingPolicyWrrHealthCheckedTargets struct {
	// RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancers: min=1
	InternalLoadBalancers []RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancers `hcl:"internal_load_balancers,block" validate:"min=1"`
}

type RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancers struct {
	// IpAddress: string, required
	IpAddress terra.StringValue `hcl:"ip_address,attr" validate:"required"`
	// IpProtocol: string, required
	IpProtocol terra.StringValue `hcl:"ip_protocol,attr" validate:"required"`
	// LoadBalancerType: string, required
	LoadBalancerType terra.StringValue `hcl:"load_balancer_type,attr" validate:"required"`
	// NetworkUrl: string, required
	NetworkUrl terra.StringValue `hcl:"network_url,attr" validate:"required"`
	// Port: string, required
	Port terra.StringValue `hcl:"port,attr" validate:"required"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
}

type RoutingPolicyAttributes struct {
	ref terra.Reference
}

func (rp RoutingPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RoutingPolicyAttributes) InternalWithRef(ref terra.Reference) RoutingPolicyAttributes {
	return RoutingPolicyAttributes{ref: ref}
}

func (rp RoutingPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RoutingPolicyAttributes) EnableGeoFencing() terra.BoolValue {
	return terra.ReferenceAsBool(rp.ref.Append("enable_geo_fencing"))
}

func (rp RoutingPolicyAttributes) Geo() terra.ListValue[RoutingPolicyGeoAttributes] {
	return terra.ReferenceAsList[RoutingPolicyGeoAttributes](rp.ref.Append("geo"))
}

func (rp RoutingPolicyAttributes) PrimaryBackup() terra.ListValue[RoutingPolicyPrimaryBackupAttributes] {
	return terra.ReferenceAsList[RoutingPolicyPrimaryBackupAttributes](rp.ref.Append("primary_backup"))
}

func (rp RoutingPolicyAttributes) Wrr() terra.ListValue[RoutingPolicyWrrAttributes] {
	return terra.ReferenceAsList[RoutingPolicyWrrAttributes](rp.ref.Append("wrr"))
}

type RoutingPolicyGeoAttributes struct {
	ref terra.Reference
}

func (g RoutingPolicyGeoAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g RoutingPolicyGeoAttributes) InternalWithRef(ref terra.Reference) RoutingPolicyGeoAttributes {
	return RoutingPolicyGeoAttributes{ref: ref}
}

func (g RoutingPolicyGeoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g RoutingPolicyGeoAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("location"))
}

func (g RoutingPolicyGeoAttributes) Rrdatas() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](g.ref.Append("rrdatas"))
}

func (g RoutingPolicyGeoAttributes) HealthCheckedTargets() terra.ListValue[RoutingPolicyGeoHealthCheckedTargetsAttributes] {
	return terra.ReferenceAsList[RoutingPolicyGeoHealthCheckedTargetsAttributes](g.ref.Append("health_checked_targets"))
}

type RoutingPolicyGeoHealthCheckedTargetsAttributes struct {
	ref terra.Reference
}

func (hct RoutingPolicyGeoHealthCheckedTargetsAttributes) InternalRef() (terra.Reference, error) {
	return hct.ref, nil
}

func (hct RoutingPolicyGeoHealthCheckedTargetsAttributes) InternalWithRef(ref terra.Reference) RoutingPolicyGeoHealthCheckedTargetsAttributes {
	return RoutingPolicyGeoHealthCheckedTargetsAttributes{ref: ref}
}

func (hct RoutingPolicyGeoHealthCheckedTargetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hct.ref.InternalTokens()
}

func (hct RoutingPolicyGeoHealthCheckedTargetsAttributes) InternalLoadBalancers() terra.ListValue[RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes] {
	return terra.ReferenceAsList[RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes](hct.ref.Append("internal_load_balancers"))
}

type RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes struct {
	ref terra.Reference
}

func (ilb RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes) InternalRef() (terra.Reference, error) {
	return ilb.ref, nil
}

func (ilb RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes) InternalWithRef(ref terra.Reference) RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes {
	return RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes{ref: ref}
}

func (ilb RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ilb.ref.InternalTokens()
}

func (ilb RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("ip_address"))
}

func (ilb RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes) IpProtocol() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("ip_protocol"))
}

func (ilb RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes) LoadBalancerType() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("load_balancer_type"))
}

func (ilb RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes) NetworkUrl() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("network_url"))
}

func (ilb RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes) Port() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("port"))
}

func (ilb RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("project"))
}

func (ilb RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("region"))
}

type RoutingPolicyPrimaryBackupAttributes struct {
	ref terra.Reference
}

func (pb RoutingPolicyPrimaryBackupAttributes) InternalRef() (terra.Reference, error) {
	return pb.ref, nil
}

func (pb RoutingPolicyPrimaryBackupAttributes) InternalWithRef(ref terra.Reference) RoutingPolicyPrimaryBackupAttributes {
	return RoutingPolicyPrimaryBackupAttributes{ref: ref}
}

func (pb RoutingPolicyPrimaryBackupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pb.ref.InternalTokens()
}

func (pb RoutingPolicyPrimaryBackupAttributes) EnableGeoFencingForBackups() terra.BoolValue {
	return terra.ReferenceAsBool(pb.ref.Append("enable_geo_fencing_for_backups"))
}

func (pb RoutingPolicyPrimaryBackupAttributes) TrickleRatio() terra.NumberValue {
	return terra.ReferenceAsNumber(pb.ref.Append("trickle_ratio"))
}

func (pb RoutingPolicyPrimaryBackupAttributes) BackupGeo() terra.ListValue[RoutingPolicyPrimaryBackupBackupGeoAttributes] {
	return terra.ReferenceAsList[RoutingPolicyPrimaryBackupBackupGeoAttributes](pb.ref.Append("backup_geo"))
}

func (pb RoutingPolicyPrimaryBackupAttributes) Primary() terra.ListValue[RoutingPolicyPrimaryBackupPrimaryAttributes] {
	return terra.ReferenceAsList[RoutingPolicyPrimaryBackupPrimaryAttributes](pb.ref.Append("primary"))
}

type RoutingPolicyPrimaryBackupBackupGeoAttributes struct {
	ref terra.Reference
}

func (bg RoutingPolicyPrimaryBackupBackupGeoAttributes) InternalRef() (terra.Reference, error) {
	return bg.ref, nil
}

func (bg RoutingPolicyPrimaryBackupBackupGeoAttributes) InternalWithRef(ref terra.Reference) RoutingPolicyPrimaryBackupBackupGeoAttributes {
	return RoutingPolicyPrimaryBackupBackupGeoAttributes{ref: ref}
}

func (bg RoutingPolicyPrimaryBackupBackupGeoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bg.ref.InternalTokens()
}

func (bg RoutingPolicyPrimaryBackupBackupGeoAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(bg.ref.Append("location"))
}

func (bg RoutingPolicyPrimaryBackupBackupGeoAttributes) Rrdatas() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](bg.ref.Append("rrdatas"))
}

func (bg RoutingPolicyPrimaryBackupBackupGeoAttributes) HealthCheckedTargets() terra.ListValue[RoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsAttributes] {
	return terra.ReferenceAsList[RoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsAttributes](bg.ref.Append("health_checked_targets"))
}

type RoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsAttributes struct {
	ref terra.Reference
}

func (hct RoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsAttributes) InternalRef() (terra.Reference, error) {
	return hct.ref, nil
}

func (hct RoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsAttributes) InternalWithRef(ref terra.Reference) RoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsAttributes {
	return RoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsAttributes{ref: ref}
}

func (hct RoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hct.ref.InternalTokens()
}

func (hct RoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsAttributes) InternalLoadBalancers() terra.ListValue[RoutingPolicyPrimaryBackup4A32A4AdAttributes] {
	return terra.ReferenceAsList[RoutingPolicyPrimaryBackup4A32A4AdAttributes](hct.ref.Append("internal_load_balancers"))
}

type RoutingPolicyPrimaryBackup4A32A4AdAttributes struct {
	ref terra.Reference
}

func (ilb RoutingPolicyPrimaryBackup4A32A4AdAttributes) InternalRef() (terra.Reference, error) {
	return ilb.ref, nil
}

func (ilb RoutingPolicyPrimaryBackup4A32A4AdAttributes) InternalWithRef(ref terra.Reference) RoutingPolicyPrimaryBackup4A32A4AdAttributes {
	return RoutingPolicyPrimaryBackup4A32A4AdAttributes{ref: ref}
}

func (ilb RoutingPolicyPrimaryBackup4A32A4AdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ilb.ref.InternalTokens()
}

func (ilb RoutingPolicyPrimaryBackup4A32A4AdAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("ip_address"))
}

func (ilb RoutingPolicyPrimaryBackup4A32A4AdAttributes) IpProtocol() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("ip_protocol"))
}

func (ilb RoutingPolicyPrimaryBackup4A32A4AdAttributes) LoadBalancerType() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("load_balancer_type"))
}

func (ilb RoutingPolicyPrimaryBackup4A32A4AdAttributes) NetworkUrl() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("network_url"))
}

func (ilb RoutingPolicyPrimaryBackup4A32A4AdAttributes) Port() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("port"))
}

func (ilb RoutingPolicyPrimaryBackup4A32A4AdAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("project"))
}

func (ilb RoutingPolicyPrimaryBackup4A32A4AdAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("region"))
}

type RoutingPolicyPrimaryBackupPrimaryAttributes struct {
	ref terra.Reference
}

func (p RoutingPolicyPrimaryBackupPrimaryAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p RoutingPolicyPrimaryBackupPrimaryAttributes) InternalWithRef(ref terra.Reference) RoutingPolicyPrimaryBackupPrimaryAttributes {
	return RoutingPolicyPrimaryBackupPrimaryAttributes{ref: ref}
}

func (p RoutingPolicyPrimaryBackupPrimaryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p RoutingPolicyPrimaryBackupPrimaryAttributes) InternalLoadBalancers() terra.ListValue[RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes] {
	return terra.ReferenceAsList[RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes](p.ref.Append("internal_load_balancers"))
}

type RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes struct {
	ref terra.Reference
}

func (ilb RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes) InternalRef() (terra.Reference, error) {
	return ilb.ref, nil
}

func (ilb RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes) InternalWithRef(ref terra.Reference) RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes {
	return RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes{ref: ref}
}

func (ilb RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ilb.ref.InternalTokens()
}

func (ilb RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("ip_address"))
}

func (ilb RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes) IpProtocol() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("ip_protocol"))
}

func (ilb RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes) LoadBalancerType() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("load_balancer_type"))
}

func (ilb RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes) NetworkUrl() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("network_url"))
}

func (ilb RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes) Port() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("port"))
}

func (ilb RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("project"))
}

func (ilb RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("region"))
}

type RoutingPolicyWrrAttributes struct {
	ref terra.Reference
}

func (w RoutingPolicyWrrAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w RoutingPolicyWrrAttributes) InternalWithRef(ref terra.Reference) RoutingPolicyWrrAttributes {
	return RoutingPolicyWrrAttributes{ref: ref}
}

func (w RoutingPolicyWrrAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w RoutingPolicyWrrAttributes) Rrdatas() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](w.ref.Append("rrdatas"))
}

func (w RoutingPolicyWrrAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(w.ref.Append("weight"))
}

func (w RoutingPolicyWrrAttributes) HealthCheckedTargets() terra.ListValue[RoutingPolicyWrrHealthCheckedTargetsAttributes] {
	return terra.ReferenceAsList[RoutingPolicyWrrHealthCheckedTargetsAttributes](w.ref.Append("health_checked_targets"))
}

type RoutingPolicyWrrHealthCheckedTargetsAttributes struct {
	ref terra.Reference
}

func (hct RoutingPolicyWrrHealthCheckedTargetsAttributes) InternalRef() (terra.Reference, error) {
	return hct.ref, nil
}

func (hct RoutingPolicyWrrHealthCheckedTargetsAttributes) InternalWithRef(ref terra.Reference) RoutingPolicyWrrHealthCheckedTargetsAttributes {
	return RoutingPolicyWrrHealthCheckedTargetsAttributes{ref: ref}
}

func (hct RoutingPolicyWrrHealthCheckedTargetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hct.ref.InternalTokens()
}

func (hct RoutingPolicyWrrHealthCheckedTargetsAttributes) InternalLoadBalancers() terra.ListValue[RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes] {
	return terra.ReferenceAsList[RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes](hct.ref.Append("internal_load_balancers"))
}

type RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes struct {
	ref terra.Reference
}

func (ilb RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes) InternalRef() (terra.Reference, error) {
	return ilb.ref, nil
}

func (ilb RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes) InternalWithRef(ref terra.Reference) RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes {
	return RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes{ref: ref}
}

func (ilb RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ilb.ref.InternalTokens()
}

func (ilb RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("ip_address"))
}

func (ilb RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes) IpProtocol() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("ip_protocol"))
}

func (ilb RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes) LoadBalancerType() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("load_balancer_type"))
}

func (ilb RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes) NetworkUrl() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("network_url"))
}

func (ilb RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes) Port() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("port"))
}

func (ilb RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("project"))
}

func (ilb RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(ilb.ref.Append("region"))
}

type RoutingPolicyState struct {
	EnableGeoFencing bool                              `json:"enable_geo_fencing"`
	Geo              []RoutingPolicyGeoState           `json:"geo"`
	PrimaryBackup    []RoutingPolicyPrimaryBackupState `json:"primary_backup"`
	Wrr              []RoutingPolicyWrrState           `json:"wrr"`
}

type RoutingPolicyGeoState struct {
	Location             string                                      `json:"location"`
	Rrdatas              []string                                    `json:"rrdatas"`
	HealthCheckedTargets []RoutingPolicyGeoHealthCheckedTargetsState `json:"health_checked_targets"`
}

type RoutingPolicyGeoHealthCheckedTargetsState struct {
	InternalLoadBalancers []RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersState `json:"internal_load_balancers"`
}

type RoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersState struct {
	IpAddress        string `json:"ip_address"`
	IpProtocol       string `json:"ip_protocol"`
	LoadBalancerType string `json:"load_balancer_type"`
	NetworkUrl       string `json:"network_url"`
	Port             string `json:"port"`
	Project          string `json:"project"`
	Region           string `json:"region"`
}

type RoutingPolicyPrimaryBackupState struct {
	EnableGeoFencingForBackups bool                                       `json:"enable_geo_fencing_for_backups"`
	TrickleRatio               float64                                    `json:"trickle_ratio"`
	BackupGeo                  []RoutingPolicyPrimaryBackupBackupGeoState `json:"backup_geo"`
	Primary                    []RoutingPolicyPrimaryBackupPrimaryState   `json:"primary"`
}

type RoutingPolicyPrimaryBackupBackupGeoState struct {
	Location             string                                                         `json:"location"`
	Rrdatas              []string                                                       `json:"rrdatas"`
	HealthCheckedTargets []RoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsState `json:"health_checked_targets"`
}

type RoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsState struct {
	InternalLoadBalancers []RoutingPolicyPrimaryBackup4A32A4AdState `json:"internal_load_balancers"`
}

type RoutingPolicyPrimaryBackup4A32A4AdState struct {
	IpAddress        string `json:"ip_address"`
	IpProtocol       string `json:"ip_protocol"`
	LoadBalancerType string `json:"load_balancer_type"`
	NetworkUrl       string `json:"network_url"`
	Port             string `json:"port"`
	Project          string `json:"project"`
	Region           string `json:"region"`
}

type RoutingPolicyPrimaryBackupPrimaryState struct {
	InternalLoadBalancers []RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersState `json:"internal_load_balancers"`
}

type RoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersState struct {
	IpAddress        string `json:"ip_address"`
	IpProtocol       string `json:"ip_protocol"`
	LoadBalancerType string `json:"load_balancer_type"`
	NetworkUrl       string `json:"network_url"`
	Port             string `json:"port"`
	Project          string `json:"project"`
	Region           string `json:"region"`
}

type RoutingPolicyWrrState struct {
	Rrdatas              []string                                    `json:"rrdatas"`
	Weight               float64                                     `json:"weight"`
	HealthCheckedTargets []RoutingPolicyWrrHealthCheckedTargetsState `json:"health_checked_targets"`
}

type RoutingPolicyWrrHealthCheckedTargetsState struct {
	InternalLoadBalancers []RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersState `json:"internal_load_balancers"`
}

type RoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersState struct {
	IpAddress        string `json:"ip_address"`
	IpProtocol       string `json:"ip_protocol"`
	LoadBalancerType string `json:"load_balancer_type"`
	NetworkUrl       string `json:"network_url"`
	Port             string `json:"port"`
	Project          string `json:"project"`
	Region           string `json:"region"`
}
