// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_logging_organization_bucket_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_logging_organization_bucket_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleLoggingOrganizationBucketConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (globc *Resource) Type() string {
	return "google_logging_organization_bucket_config"
}

// LocalName returns the local name for [Resource].
func (globc *Resource) LocalName() string {
	return globc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (globc *Resource) Configuration() interface{} {
	return globc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (globc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(globc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (globc *Resource) Dependencies() terra.Dependencies {
	return globc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (globc *Resource) LifecycleManagement() *terra.Lifecycle {
	return globc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (globc *Resource) Attributes() googleLoggingOrganizationBucketConfigAttributes {
	return googleLoggingOrganizationBucketConfigAttributes{ref: terra.ReferenceResource(globc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (globc *Resource) ImportState(state io.Reader) error {
	globc.state = &googleLoggingOrganizationBucketConfigState{}
	if err := json.NewDecoder(state).Decode(globc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", globc.Type(), globc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (globc *Resource) State() (*googleLoggingOrganizationBucketConfigState, bool) {
	return globc.state, globc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (globc *Resource) StateMust() *googleLoggingOrganizationBucketConfigState {
	if globc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", globc.Type(), globc.LocalName()))
	}
	return globc.state
}

// Args contains the configurations for google_logging_organization_bucket_config.
type Args struct {
	// BucketId: string, required
	BucketId terra.StringValue `hcl:"bucket_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Organization: string, required
	Organization terra.StringValue `hcl:"organization,attr" validate:"required"`
	// RetentionDays: number, optional
	RetentionDays terra.NumberValue `hcl:"retention_days,attr"`
	// CmekSettings: optional
	CmekSettings *CmekSettings `hcl:"cmek_settings,block"`
	// IndexConfigs: min=0,max=20
	IndexConfigs []IndexConfigs `hcl:"index_configs,block" validate:"min=0,max=20"`
}

type googleLoggingOrganizationBucketConfigAttributes struct {
	ref terra.Reference
}

// BucketId returns a reference to field bucket_id of google_logging_organization_bucket_config.
func (globc googleLoggingOrganizationBucketConfigAttributes) BucketId() terra.StringValue {
	return terra.ReferenceAsString(globc.ref.Append("bucket_id"))
}

// Description returns a reference to field description of google_logging_organization_bucket_config.
func (globc googleLoggingOrganizationBucketConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(globc.ref.Append("description"))
}

// Id returns a reference to field id of google_logging_organization_bucket_config.
func (globc googleLoggingOrganizationBucketConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(globc.ref.Append("id"))
}

// LifecycleState returns a reference to field lifecycle_state of google_logging_organization_bucket_config.
func (globc googleLoggingOrganizationBucketConfigAttributes) LifecycleState() terra.StringValue {
	return terra.ReferenceAsString(globc.ref.Append("lifecycle_state"))
}

// Location returns a reference to field location of google_logging_organization_bucket_config.
func (globc googleLoggingOrganizationBucketConfigAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(globc.ref.Append("location"))
}

// Name returns a reference to field name of google_logging_organization_bucket_config.
func (globc googleLoggingOrganizationBucketConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(globc.ref.Append("name"))
}

// Organization returns a reference to field organization of google_logging_organization_bucket_config.
func (globc googleLoggingOrganizationBucketConfigAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(globc.ref.Append("organization"))
}

// RetentionDays returns a reference to field retention_days of google_logging_organization_bucket_config.
func (globc googleLoggingOrganizationBucketConfigAttributes) RetentionDays() terra.NumberValue {
	return terra.ReferenceAsNumber(globc.ref.Append("retention_days"))
}

func (globc googleLoggingOrganizationBucketConfigAttributes) CmekSettings() terra.ListValue[CmekSettingsAttributes] {
	return terra.ReferenceAsList[CmekSettingsAttributes](globc.ref.Append("cmek_settings"))
}

func (globc googleLoggingOrganizationBucketConfigAttributes) IndexConfigs() terra.SetValue[IndexConfigsAttributes] {
	return terra.ReferenceAsSet[IndexConfigsAttributes](globc.ref.Append("index_configs"))
}

type googleLoggingOrganizationBucketConfigState struct {
	BucketId       string              `json:"bucket_id"`
	Description    string              `json:"description"`
	Id             string              `json:"id"`
	LifecycleState string              `json:"lifecycle_state"`
	Location       string              `json:"location"`
	Name           string              `json:"name"`
	Organization   string              `json:"organization"`
	RetentionDays  float64             `json:"retention_days"`
	CmekSettings   []CmekSettingsState `json:"cmek_settings"`
	IndexConfigs   []IndexConfigsState `json:"index_configs"`
}
