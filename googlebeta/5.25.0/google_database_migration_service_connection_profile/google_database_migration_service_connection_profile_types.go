// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_database_migration_service_connection_profile

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Alloydb struct {
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// AlloydbSettings: optional
	Settings *AlloydbSettings `hcl:"settings,block"`
}

type AlloydbSettings struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// VpcNetwork: string, required
	VpcNetwork terra.StringValue `hcl:"vpc_network,attr" validate:"required"`
	// AlloydbSettingsInitialUser: required
	InitialUser *AlloydbSettingsInitialUser `hcl:"initial_user,block" validate:"required"`
	// AlloydbSettingsPrimaryInstanceSettings: optional
	PrimaryInstanceSettings *AlloydbSettingsPrimaryInstanceSettings `hcl:"primary_instance_settings,block"`
}

type AlloydbSettingsInitialUser struct {
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// User: string, required
	User terra.StringValue `hcl:"user,attr" validate:"required"`
}

type AlloydbSettingsPrimaryInstanceSettings struct {
	// DatabaseFlags: map of string, optional
	DatabaseFlags terra.MapValue[terra.StringValue] `hcl:"database_flags,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// AlloydbSettingsPrimaryInstanceSettingsMachineConfig: required
	MachineConfig *AlloydbSettingsPrimaryInstanceSettingsMachineConfig `hcl:"machine_config,block" validate:"required"`
}

type AlloydbSettingsPrimaryInstanceSettingsMachineConfig struct {
	// CpuCount: number, required
	CpuCount terra.NumberValue `hcl:"cpu_count,attr" validate:"required"`
}

type Cloudsql struct {
	// CloudsqlSettings: optional
	Settings *CloudsqlSettings `hcl:"settings,block"`
}

type CloudsqlSettings struct {
	// ActivationPolicy: string, optional
	ActivationPolicy terra.StringValue `hcl:"activation_policy,attr"`
	// AutoStorageIncrease: bool, optional
	AutoStorageIncrease terra.BoolValue `hcl:"auto_storage_increase,attr"`
	// CmekKeyName: string, optional
	CmekKeyName terra.StringValue `hcl:"cmek_key_name,attr"`
	// Collation: string, optional
	Collation terra.StringValue `hcl:"collation,attr"`
	// DataDiskSizeGb: string, optional
	DataDiskSizeGb terra.StringValue `hcl:"data_disk_size_gb,attr"`
	// DataDiskType: string, optional
	DataDiskType terra.StringValue `hcl:"data_disk_type,attr"`
	// DatabaseFlags: map of string, optional
	DatabaseFlags terra.MapValue[terra.StringValue] `hcl:"database_flags,attr"`
	// DatabaseVersion: string, optional
	DatabaseVersion terra.StringValue `hcl:"database_version,attr"`
	// Edition: string, optional
	Edition terra.StringValue `hcl:"edition,attr"`
	// RootPassword: string, optional
	RootPassword terra.StringValue `hcl:"root_password,attr"`
	// SourceId: string, required
	SourceId terra.StringValue `hcl:"source_id,attr" validate:"required"`
	// StorageAutoResizeLimit: string, optional
	StorageAutoResizeLimit terra.StringValue `hcl:"storage_auto_resize_limit,attr"`
	// Tier: string, optional
	Tier terra.StringValue `hcl:"tier,attr"`
	// UserLabels: map of string, optional
	UserLabels terra.MapValue[terra.StringValue] `hcl:"user_labels,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// CloudsqlSettingsIpConfig: optional
	IpConfig *CloudsqlSettingsIpConfig `hcl:"ip_config,block"`
}

type CloudsqlSettingsIpConfig struct {
	// EnableIpv4: bool, optional
	EnableIpv4 terra.BoolValue `hcl:"enable_ipv4,attr"`
	// PrivateNetwork: string, optional
	PrivateNetwork terra.StringValue `hcl:"private_network,attr"`
	// RequireSsl: bool, optional
	RequireSsl terra.BoolValue `hcl:"require_ssl,attr"`
	// CloudsqlSettingsIpConfigAuthorizedNetworks: min=0
	AuthorizedNetworks []CloudsqlSettingsIpConfigAuthorizedNetworks `hcl:"authorized_networks,block" validate:"min=0"`
}

type CloudsqlSettingsIpConfigAuthorizedNetworks struct {
	// ExpireTime: string, optional
	ExpireTime terra.StringValue `hcl:"expire_time,attr"`
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// Ttl: string, optional
	Ttl terra.StringValue `hcl:"ttl,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Mysql struct {
	// CloudSqlId: string, optional
	CloudSqlId terra.StringValue `hcl:"cloud_sql_id,attr"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// MysqlSsl: optional
	Ssl *MysqlSsl `hcl:"ssl,block"`
}

type MysqlSsl struct {
	// CaCertificate: string, required
	CaCertificate terra.StringValue `hcl:"ca_certificate,attr" validate:"required"`
	// ClientCertificate: string, optional
	ClientCertificate terra.StringValue `hcl:"client_certificate,attr"`
	// ClientKey: string, optional
	ClientKey terra.StringValue `hcl:"client_key,attr"`
}

type Oracle struct {
	// DatabaseService: string, required
	DatabaseService terra.StringValue `hcl:"database_service,attr" validate:"required"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// OracleForwardSshConnectivity: optional
	ForwardSshConnectivity *OracleForwardSshConnectivity `hcl:"forward_ssh_connectivity,block"`
	// OraclePrivateConnectivity: optional
	PrivateConnectivity *OraclePrivateConnectivity `hcl:"private_connectivity,block"`
	// OracleSsl: optional
	Ssl *OracleSsl `hcl:"ssl,block"`
	// OracleStaticServiceIpConnectivity: optional
	StaticServiceIpConnectivity *OracleStaticServiceIpConnectivity `hcl:"static_service_ip_connectivity,block"`
}

type OracleForwardSshConnectivity struct {
	// Hostname: string, required
	Hostname terra.StringValue `hcl:"hostname,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// PrivateKey: string, optional
	PrivateKey terra.StringValue `hcl:"private_key,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type OraclePrivateConnectivity struct {
	// PrivateConnection: string, required
	PrivateConnection terra.StringValue `hcl:"private_connection,attr" validate:"required"`
}

type OracleSsl struct {
	// CaCertificate: string, required
	CaCertificate terra.StringValue `hcl:"ca_certificate,attr" validate:"required"`
	// ClientCertificate: string, optional
	ClientCertificate terra.StringValue `hcl:"client_certificate,attr"`
	// ClientKey: string, optional
	ClientKey terra.StringValue `hcl:"client_key,attr"`
}

type OracleStaticServiceIpConnectivity struct{}

type Postgresql struct {
	// CloudSqlId: string, optional
	CloudSqlId terra.StringValue `hcl:"cloud_sql_id,attr"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// PostgresqlSsl: optional
	Ssl *PostgresqlSsl `hcl:"ssl,block"`
}

type PostgresqlSsl struct {
	// CaCertificate: string, required
	CaCertificate terra.StringValue `hcl:"ca_certificate,attr" validate:"required"`
	// ClientCertificate: string, optional
	ClientCertificate terra.StringValue `hcl:"client_certificate,attr"`
	// ClientKey: string, optional
	ClientKey terra.StringValue `hcl:"client_key,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ErrorAttributes struct {
	ref terra.Reference
}

func (e ErrorAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ErrorAttributes) InternalWithRef(ref terra.Reference) ErrorAttributes {
	return ErrorAttributes{ref: ref}
}

func (e ErrorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ErrorAttributes) Code() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("code"))
}

func (e ErrorAttributes) Details() terra.ListValue[terra.MapValue[terra.StringValue]] {
	return terra.ReferenceAsList[terra.MapValue[terra.StringValue]](e.ref.Append("details"))
}

func (e ErrorAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("message"))
}

type AlloydbAttributes struct {
	ref terra.Reference
}

func (a AlloydbAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AlloydbAttributes) InternalWithRef(ref terra.Reference) AlloydbAttributes {
	return AlloydbAttributes{ref: ref}
}

func (a AlloydbAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AlloydbAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("cluster_id"))
}

func (a AlloydbAttributes) Settings() terra.ListValue[AlloydbSettingsAttributes] {
	return terra.ReferenceAsList[AlloydbSettingsAttributes](a.ref.Append("settings"))
}

type AlloydbSettingsAttributes struct {
	ref terra.Reference
}

func (s AlloydbSettingsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s AlloydbSettingsAttributes) InternalWithRef(ref terra.Reference) AlloydbSettingsAttributes {
	return AlloydbSettingsAttributes{ref: ref}
}

func (s AlloydbSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s AlloydbSettingsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("labels"))
}

func (s AlloydbSettingsAttributes) VpcNetwork() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("vpc_network"))
}

func (s AlloydbSettingsAttributes) InitialUser() terra.ListValue[AlloydbSettingsInitialUserAttributes] {
	return terra.ReferenceAsList[AlloydbSettingsInitialUserAttributes](s.ref.Append("initial_user"))
}

func (s AlloydbSettingsAttributes) PrimaryInstanceSettings() terra.ListValue[AlloydbSettingsPrimaryInstanceSettingsAttributes] {
	return terra.ReferenceAsList[AlloydbSettingsPrimaryInstanceSettingsAttributes](s.ref.Append("primary_instance_settings"))
}

type AlloydbSettingsInitialUserAttributes struct {
	ref terra.Reference
}

func (iu AlloydbSettingsInitialUserAttributes) InternalRef() (terra.Reference, error) {
	return iu.ref, nil
}

func (iu AlloydbSettingsInitialUserAttributes) InternalWithRef(ref terra.Reference) AlloydbSettingsInitialUserAttributes {
	return AlloydbSettingsInitialUserAttributes{ref: ref}
}

func (iu AlloydbSettingsInitialUserAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iu.ref.InternalTokens()
}

func (iu AlloydbSettingsInitialUserAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(iu.ref.Append("password"))
}

func (iu AlloydbSettingsInitialUserAttributes) PasswordSet() terra.BoolValue {
	return terra.ReferenceAsBool(iu.ref.Append("password_set"))
}

func (iu AlloydbSettingsInitialUserAttributes) User() terra.StringValue {
	return terra.ReferenceAsString(iu.ref.Append("user"))
}

type AlloydbSettingsPrimaryInstanceSettingsAttributes struct {
	ref terra.Reference
}

func (pis AlloydbSettingsPrimaryInstanceSettingsAttributes) InternalRef() (terra.Reference, error) {
	return pis.ref, nil
}

func (pis AlloydbSettingsPrimaryInstanceSettingsAttributes) InternalWithRef(ref terra.Reference) AlloydbSettingsPrimaryInstanceSettingsAttributes {
	return AlloydbSettingsPrimaryInstanceSettingsAttributes{ref: ref}
}

func (pis AlloydbSettingsPrimaryInstanceSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pis.ref.InternalTokens()
}

func (pis AlloydbSettingsPrimaryInstanceSettingsAttributes) DatabaseFlags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pis.ref.Append("database_flags"))
}

func (pis AlloydbSettingsPrimaryInstanceSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pis.ref.Append("id"))
}

func (pis AlloydbSettingsPrimaryInstanceSettingsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pis.ref.Append("labels"))
}

func (pis AlloydbSettingsPrimaryInstanceSettingsAttributes) PrivateIp() terra.StringValue {
	return terra.ReferenceAsString(pis.ref.Append("private_ip"))
}

func (pis AlloydbSettingsPrimaryInstanceSettingsAttributes) MachineConfig() terra.ListValue[AlloydbSettingsPrimaryInstanceSettingsMachineConfigAttributes] {
	return terra.ReferenceAsList[AlloydbSettingsPrimaryInstanceSettingsMachineConfigAttributes](pis.ref.Append("machine_config"))
}

type AlloydbSettingsPrimaryInstanceSettingsMachineConfigAttributes struct {
	ref terra.Reference
}

func (mc AlloydbSettingsPrimaryInstanceSettingsMachineConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc AlloydbSettingsPrimaryInstanceSettingsMachineConfigAttributes) InternalWithRef(ref terra.Reference) AlloydbSettingsPrimaryInstanceSettingsMachineConfigAttributes {
	return AlloydbSettingsPrimaryInstanceSettingsMachineConfigAttributes{ref: ref}
}

func (mc AlloydbSettingsPrimaryInstanceSettingsMachineConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc AlloydbSettingsPrimaryInstanceSettingsMachineConfigAttributes) CpuCount() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("cpu_count"))
}

type CloudsqlAttributes struct {
	ref terra.Reference
}

func (c CloudsqlAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CloudsqlAttributes) InternalWithRef(ref terra.Reference) CloudsqlAttributes {
	return CloudsqlAttributes{ref: ref}
}

func (c CloudsqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CloudsqlAttributes) CloudSqlId() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("cloud_sql_id"))
}

func (c CloudsqlAttributes) PrivateIp() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("private_ip"))
}

func (c CloudsqlAttributes) PublicIp() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("public_ip"))
}

func (c CloudsqlAttributes) Settings() terra.ListValue[CloudsqlSettingsAttributes] {
	return terra.ReferenceAsList[CloudsqlSettingsAttributes](c.ref.Append("settings"))
}

type CloudsqlSettingsAttributes struct {
	ref terra.Reference
}

func (s CloudsqlSettingsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s CloudsqlSettingsAttributes) InternalWithRef(ref terra.Reference) CloudsqlSettingsAttributes {
	return CloudsqlSettingsAttributes{ref: ref}
}

func (s CloudsqlSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s CloudsqlSettingsAttributes) ActivationPolicy() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("activation_policy"))
}

func (s CloudsqlSettingsAttributes) AutoStorageIncrease() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("auto_storage_increase"))
}

func (s CloudsqlSettingsAttributes) CmekKeyName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("cmek_key_name"))
}

func (s CloudsqlSettingsAttributes) Collation() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("collation"))
}

func (s CloudsqlSettingsAttributes) DataDiskSizeGb() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("data_disk_size_gb"))
}

func (s CloudsqlSettingsAttributes) DataDiskType() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("data_disk_type"))
}

func (s CloudsqlSettingsAttributes) DatabaseFlags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("database_flags"))
}

func (s CloudsqlSettingsAttributes) DatabaseVersion() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("database_version"))
}

func (s CloudsqlSettingsAttributes) Edition() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("edition"))
}

func (s CloudsqlSettingsAttributes) RootPassword() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("root_password"))
}

func (s CloudsqlSettingsAttributes) RootPasswordSet() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("root_password_set"))
}

func (s CloudsqlSettingsAttributes) SourceId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("source_id"))
}

func (s CloudsqlSettingsAttributes) StorageAutoResizeLimit() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("storage_auto_resize_limit"))
}

func (s CloudsqlSettingsAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("tier"))
}

func (s CloudsqlSettingsAttributes) UserLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("user_labels"))
}

func (s CloudsqlSettingsAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("zone"))
}

func (s CloudsqlSettingsAttributes) IpConfig() terra.ListValue[CloudsqlSettingsIpConfigAttributes] {
	return terra.ReferenceAsList[CloudsqlSettingsIpConfigAttributes](s.ref.Append("ip_config"))
}

type CloudsqlSettingsIpConfigAttributes struct {
	ref terra.Reference
}

func (ic CloudsqlSettingsIpConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic CloudsqlSettingsIpConfigAttributes) InternalWithRef(ref terra.Reference) CloudsqlSettingsIpConfigAttributes {
	return CloudsqlSettingsIpConfigAttributes{ref: ref}
}

func (ic CloudsqlSettingsIpConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic CloudsqlSettingsIpConfigAttributes) EnableIpv4() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("enable_ipv4"))
}

func (ic CloudsqlSettingsIpConfigAttributes) PrivateNetwork() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("private_network"))
}

func (ic CloudsqlSettingsIpConfigAttributes) RequireSsl() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("require_ssl"))
}

func (ic CloudsqlSettingsIpConfigAttributes) AuthorizedNetworks() terra.ListValue[CloudsqlSettingsIpConfigAuthorizedNetworksAttributes] {
	return terra.ReferenceAsList[CloudsqlSettingsIpConfigAuthorizedNetworksAttributes](ic.ref.Append("authorized_networks"))
}

type CloudsqlSettingsIpConfigAuthorizedNetworksAttributes struct {
	ref terra.Reference
}

func (an CloudsqlSettingsIpConfigAuthorizedNetworksAttributes) InternalRef() (terra.Reference, error) {
	return an.ref, nil
}

func (an CloudsqlSettingsIpConfigAuthorizedNetworksAttributes) InternalWithRef(ref terra.Reference) CloudsqlSettingsIpConfigAuthorizedNetworksAttributes {
	return CloudsqlSettingsIpConfigAuthorizedNetworksAttributes{ref: ref}
}

func (an CloudsqlSettingsIpConfigAuthorizedNetworksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return an.ref.InternalTokens()
}

func (an CloudsqlSettingsIpConfigAuthorizedNetworksAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(an.ref.Append("expire_time"))
}

func (an CloudsqlSettingsIpConfigAuthorizedNetworksAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(an.ref.Append("label"))
}

func (an CloudsqlSettingsIpConfigAuthorizedNetworksAttributes) Ttl() terra.StringValue {
	return terra.ReferenceAsString(an.ref.Append("ttl"))
}

func (an CloudsqlSettingsIpConfigAuthorizedNetworksAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(an.ref.Append("value"))
}

type MysqlAttributes struct {
	ref terra.Reference
}

func (m MysqlAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MysqlAttributes) InternalWithRef(ref terra.Reference) MysqlAttributes {
	return MysqlAttributes{ref: ref}
}

func (m MysqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MysqlAttributes) CloudSqlId() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("cloud_sql_id"))
}

func (m MysqlAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("host"))
}

func (m MysqlAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("password"))
}

func (m MysqlAttributes) PasswordSet() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("password_set"))
}

func (m MysqlAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m MysqlAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("username"))
}

func (m MysqlAttributes) Ssl() terra.ListValue[MysqlSslAttributes] {
	return terra.ReferenceAsList[MysqlSslAttributes](m.ref.Append("ssl"))
}

type MysqlSslAttributes struct {
	ref terra.Reference
}

func (s MysqlSslAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s MysqlSslAttributes) InternalWithRef(ref terra.Reference) MysqlSslAttributes {
	return MysqlSslAttributes{ref: ref}
}

func (s MysqlSslAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s MysqlSslAttributes) CaCertificate() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("ca_certificate"))
}

func (s MysqlSslAttributes) ClientCertificate() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("client_certificate"))
}

func (s MysqlSslAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("client_key"))
}

func (s MysqlSslAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("type"))
}

type OracleAttributes struct {
	ref terra.Reference
}

func (o OracleAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OracleAttributes) InternalWithRef(ref terra.Reference) OracleAttributes {
	return OracleAttributes{ref: ref}
}

func (o OracleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o OracleAttributes) DatabaseService() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("database_service"))
}

func (o OracleAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("host"))
}

func (o OracleAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("password"))
}

func (o OracleAttributes) PasswordSet() terra.BoolValue {
	return terra.ReferenceAsBool(o.ref.Append("password_set"))
}

func (o OracleAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("port"))
}

func (o OracleAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("username"))
}

func (o OracleAttributes) ForwardSshConnectivity() terra.ListValue[OracleForwardSshConnectivityAttributes] {
	return terra.ReferenceAsList[OracleForwardSshConnectivityAttributes](o.ref.Append("forward_ssh_connectivity"))
}

func (o OracleAttributes) PrivateConnectivity() terra.ListValue[OraclePrivateConnectivityAttributes] {
	return terra.ReferenceAsList[OraclePrivateConnectivityAttributes](o.ref.Append("private_connectivity"))
}

func (o OracleAttributes) Ssl() terra.ListValue[OracleSslAttributes] {
	return terra.ReferenceAsList[OracleSslAttributes](o.ref.Append("ssl"))
}

func (o OracleAttributes) StaticServiceIpConnectivity() terra.ListValue[OracleStaticServiceIpConnectivityAttributes] {
	return terra.ReferenceAsList[OracleStaticServiceIpConnectivityAttributes](o.ref.Append("static_service_ip_connectivity"))
}

type OracleForwardSshConnectivityAttributes struct {
	ref terra.Reference
}

func (fsc OracleForwardSshConnectivityAttributes) InternalRef() (terra.Reference, error) {
	return fsc.ref, nil
}

func (fsc OracleForwardSshConnectivityAttributes) InternalWithRef(ref terra.Reference) OracleForwardSshConnectivityAttributes {
	return OracleForwardSshConnectivityAttributes{ref: ref}
}

func (fsc OracleForwardSshConnectivityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fsc.ref.InternalTokens()
}

func (fsc OracleForwardSshConnectivityAttributes) Hostname() terra.StringValue {
	return terra.ReferenceAsString(fsc.ref.Append("hostname"))
}

func (fsc OracleForwardSshConnectivityAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(fsc.ref.Append("password"))
}

func (fsc OracleForwardSshConnectivityAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(fsc.ref.Append("port"))
}

func (fsc OracleForwardSshConnectivityAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(fsc.ref.Append("private_key"))
}

func (fsc OracleForwardSshConnectivityAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(fsc.ref.Append("username"))
}

type OraclePrivateConnectivityAttributes struct {
	ref terra.Reference
}

func (pc OraclePrivateConnectivityAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc OraclePrivateConnectivityAttributes) InternalWithRef(ref terra.Reference) OraclePrivateConnectivityAttributes {
	return OraclePrivateConnectivityAttributes{ref: ref}
}

func (pc OraclePrivateConnectivityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc OraclePrivateConnectivityAttributes) PrivateConnection() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("private_connection"))
}

type OracleSslAttributes struct {
	ref terra.Reference
}

func (s OracleSslAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s OracleSslAttributes) InternalWithRef(ref terra.Reference) OracleSslAttributes {
	return OracleSslAttributes{ref: ref}
}

func (s OracleSslAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s OracleSslAttributes) CaCertificate() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("ca_certificate"))
}

func (s OracleSslAttributes) ClientCertificate() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("client_certificate"))
}

func (s OracleSslAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("client_key"))
}

func (s OracleSslAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("type"))
}

type OracleStaticServiceIpConnectivityAttributes struct {
	ref terra.Reference
}

func (ssic OracleStaticServiceIpConnectivityAttributes) InternalRef() (terra.Reference, error) {
	return ssic.ref, nil
}

func (ssic OracleStaticServiceIpConnectivityAttributes) InternalWithRef(ref terra.Reference) OracleStaticServiceIpConnectivityAttributes {
	return OracleStaticServiceIpConnectivityAttributes{ref: ref}
}

func (ssic OracleStaticServiceIpConnectivityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssic.ref.InternalTokens()
}

type PostgresqlAttributes struct {
	ref terra.Reference
}

func (p PostgresqlAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PostgresqlAttributes) InternalWithRef(ref terra.Reference) PostgresqlAttributes {
	return PostgresqlAttributes{ref: ref}
}

func (p PostgresqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PostgresqlAttributes) CloudSqlId() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("cloud_sql_id"))
}

func (p PostgresqlAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("host"))
}

func (p PostgresqlAttributes) NetworkArchitecture() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("network_architecture"))
}

func (p PostgresqlAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("password"))
}

func (p PostgresqlAttributes) PasswordSet() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("password_set"))
}

func (p PostgresqlAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("port"))
}

func (p PostgresqlAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("username"))
}

func (p PostgresqlAttributes) Ssl() terra.ListValue[PostgresqlSslAttributes] {
	return terra.ReferenceAsList[PostgresqlSslAttributes](p.ref.Append("ssl"))
}

type PostgresqlSslAttributes struct {
	ref terra.Reference
}

func (s PostgresqlSslAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s PostgresqlSslAttributes) InternalWithRef(ref terra.Reference) PostgresqlSslAttributes {
	return PostgresqlSslAttributes{ref: ref}
}

func (s PostgresqlSslAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s PostgresqlSslAttributes) CaCertificate() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("ca_certificate"))
}

func (s PostgresqlSslAttributes) ClientCertificate() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("client_certificate"))
}

func (s PostgresqlSslAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("client_key"))
}

func (s PostgresqlSslAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ErrorState struct {
	Code    float64             `json:"code"`
	Details []map[string]string `json:"details"`
	Message string              `json:"message"`
}

type AlloydbState struct {
	ClusterId string                 `json:"cluster_id"`
	Settings  []AlloydbSettingsState `json:"settings"`
}

type AlloydbSettingsState struct {
	Labels                  map[string]string                             `json:"labels"`
	VpcNetwork              string                                        `json:"vpc_network"`
	InitialUser             []AlloydbSettingsInitialUserState             `json:"initial_user"`
	PrimaryInstanceSettings []AlloydbSettingsPrimaryInstanceSettingsState `json:"primary_instance_settings"`
}

type AlloydbSettingsInitialUserState struct {
	Password    string `json:"password"`
	PasswordSet bool   `json:"password_set"`
	User        string `json:"user"`
}

type AlloydbSettingsPrimaryInstanceSettingsState struct {
	DatabaseFlags map[string]string                                          `json:"database_flags"`
	Id            string                                                     `json:"id"`
	Labels        map[string]string                                          `json:"labels"`
	PrivateIp     string                                                     `json:"private_ip"`
	MachineConfig []AlloydbSettingsPrimaryInstanceSettingsMachineConfigState `json:"machine_config"`
}

type AlloydbSettingsPrimaryInstanceSettingsMachineConfigState struct {
	CpuCount float64 `json:"cpu_count"`
}

type CloudsqlState struct {
	CloudSqlId string                  `json:"cloud_sql_id"`
	PrivateIp  string                  `json:"private_ip"`
	PublicIp   string                  `json:"public_ip"`
	Settings   []CloudsqlSettingsState `json:"settings"`
}

type CloudsqlSettingsState struct {
	ActivationPolicy       string                          `json:"activation_policy"`
	AutoStorageIncrease    bool                            `json:"auto_storage_increase"`
	CmekKeyName            string                          `json:"cmek_key_name"`
	Collation              string                          `json:"collation"`
	DataDiskSizeGb         string                          `json:"data_disk_size_gb"`
	DataDiskType           string                          `json:"data_disk_type"`
	DatabaseFlags          map[string]string               `json:"database_flags"`
	DatabaseVersion        string                          `json:"database_version"`
	Edition                string                          `json:"edition"`
	RootPassword           string                          `json:"root_password"`
	RootPasswordSet        bool                            `json:"root_password_set"`
	SourceId               string                          `json:"source_id"`
	StorageAutoResizeLimit string                          `json:"storage_auto_resize_limit"`
	Tier                   string                          `json:"tier"`
	UserLabels             map[string]string               `json:"user_labels"`
	Zone                   string                          `json:"zone"`
	IpConfig               []CloudsqlSettingsIpConfigState `json:"ip_config"`
}

type CloudsqlSettingsIpConfigState struct {
	EnableIpv4         bool                                              `json:"enable_ipv4"`
	PrivateNetwork     string                                            `json:"private_network"`
	RequireSsl         bool                                              `json:"require_ssl"`
	AuthorizedNetworks []CloudsqlSettingsIpConfigAuthorizedNetworksState `json:"authorized_networks"`
}

type CloudsqlSettingsIpConfigAuthorizedNetworksState struct {
	ExpireTime string `json:"expire_time"`
	Label      string `json:"label"`
	Ttl        string `json:"ttl"`
	Value      string `json:"value"`
}

type MysqlState struct {
	CloudSqlId  string          `json:"cloud_sql_id"`
	Host        string          `json:"host"`
	Password    string          `json:"password"`
	PasswordSet bool            `json:"password_set"`
	Port        float64         `json:"port"`
	Username    string          `json:"username"`
	Ssl         []MysqlSslState `json:"ssl"`
}

type MysqlSslState struct {
	CaCertificate     string `json:"ca_certificate"`
	ClientCertificate string `json:"client_certificate"`
	ClientKey         string `json:"client_key"`
	Type              string `json:"type"`
}

type OracleState struct {
	DatabaseService             string                                   `json:"database_service"`
	Host                        string                                   `json:"host"`
	Password                    string                                   `json:"password"`
	PasswordSet                 bool                                     `json:"password_set"`
	Port                        float64                                  `json:"port"`
	Username                    string                                   `json:"username"`
	ForwardSshConnectivity      []OracleForwardSshConnectivityState      `json:"forward_ssh_connectivity"`
	PrivateConnectivity         []OraclePrivateConnectivityState         `json:"private_connectivity"`
	Ssl                         []OracleSslState                         `json:"ssl"`
	StaticServiceIpConnectivity []OracleStaticServiceIpConnectivityState `json:"static_service_ip_connectivity"`
}

type OracleForwardSshConnectivityState struct {
	Hostname   string  `json:"hostname"`
	Password   string  `json:"password"`
	Port       float64 `json:"port"`
	PrivateKey string  `json:"private_key"`
	Username   string  `json:"username"`
}

type OraclePrivateConnectivityState struct {
	PrivateConnection string `json:"private_connection"`
}

type OracleSslState struct {
	CaCertificate     string `json:"ca_certificate"`
	ClientCertificate string `json:"client_certificate"`
	ClientKey         string `json:"client_key"`
	Type              string `json:"type"`
}

type OracleStaticServiceIpConnectivityState struct{}

type PostgresqlState struct {
	CloudSqlId          string               `json:"cloud_sql_id"`
	Host                string               `json:"host"`
	NetworkArchitecture string               `json:"network_architecture"`
	Password            string               `json:"password"`
	PasswordSet         bool                 `json:"password_set"`
	Port                float64              `json:"port"`
	Username            string               `json:"username"`
	Ssl                 []PostgresqlSslState `json:"ssl"`
}

type PostgresqlSslState struct {
	CaCertificate     string `json:"ca_certificate"`
	ClientCertificate string `json:"client_certificate"`
	ClientKey         string `json:"client_key"`
	Type              string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
