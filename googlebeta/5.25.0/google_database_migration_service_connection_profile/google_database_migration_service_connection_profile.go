// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_database_migration_service_connection_profile

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_database_migration_service_connection_profile.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDatabaseMigrationServiceConnectionProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdmscp *Resource) Type() string {
	return "google_database_migration_service_connection_profile"
}

// LocalName returns the local name for [Resource].
func (gdmscp *Resource) LocalName() string {
	return gdmscp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdmscp *Resource) Configuration() interface{} {
	return gdmscp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdmscp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdmscp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdmscp *Resource) Dependencies() terra.Dependencies {
	return gdmscp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdmscp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdmscp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdmscp *Resource) Attributes() googleDatabaseMigrationServiceConnectionProfileAttributes {
	return googleDatabaseMigrationServiceConnectionProfileAttributes{ref: terra.ReferenceResource(gdmscp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdmscp *Resource) ImportState(state io.Reader) error {
	gdmscp.state = &googleDatabaseMigrationServiceConnectionProfileState{}
	if err := json.NewDecoder(state).Decode(gdmscp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdmscp.Type(), gdmscp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdmscp *Resource) State() (*googleDatabaseMigrationServiceConnectionProfileState, bool) {
	return gdmscp.state, gdmscp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdmscp *Resource) StateMust() *googleDatabaseMigrationServiceConnectionProfileState {
	if gdmscp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdmscp.Type(), gdmscp.LocalName()))
	}
	return gdmscp.state
}

// Args contains the configurations for google_database_migration_service_connection_profile.
type Args struct {
	// ConnectionProfileId: string, required
	ConnectionProfileId terra.StringValue `hcl:"connection_profile_id,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Alloydb: optional
	Alloydb *Alloydb `hcl:"alloydb,block"`
	// Cloudsql: optional
	Cloudsql *Cloudsql `hcl:"cloudsql,block"`
	// Mysql: optional
	Mysql *Mysql `hcl:"mysql,block"`
	// Oracle: optional
	Oracle *Oracle `hcl:"oracle,block"`
	// Postgresql: optional
	Postgresql *Postgresql `hcl:"postgresql,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDatabaseMigrationServiceConnectionProfileAttributes struct {
	ref terra.Reference
}

// ConnectionProfileId returns a reference to field connection_profile_id of google_database_migration_service_connection_profile.
func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) ConnectionProfileId() terra.StringValue {
	return terra.ReferenceAsString(gdmscp.ref.Append("connection_profile_id"))
}

// CreateTime returns a reference to field create_time of google_database_migration_service_connection_profile.
func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gdmscp.ref.Append("create_time"))
}

// Dbprovider returns a reference to field dbprovider of google_database_migration_service_connection_profile.
func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) Dbprovider() terra.StringValue {
	return terra.ReferenceAsString(gdmscp.ref.Append("dbprovider"))
}

// DisplayName returns a reference to field display_name of google_database_migration_service_connection_profile.
func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdmscp.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_database_migration_service_connection_profile.
func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdmscp.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_database_migration_service_connection_profile.
func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdmscp.ref.Append("id"))
}

// Labels returns a reference to field labels of google_database_migration_service_connection_profile.
func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdmscp.ref.Append("labels"))
}

// Location returns a reference to field location of google_database_migration_service_connection_profile.
func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gdmscp.ref.Append("location"))
}

// Name returns a reference to field name of google_database_migration_service_connection_profile.
func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdmscp.ref.Append("name"))
}

// Project returns a reference to field project of google_database_migration_service_connection_profile.
func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdmscp.ref.Append("project"))
}

// State returns a reference to field state of google_database_migration_service_connection_profile.
func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gdmscp.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_database_migration_service_connection_profile.
func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdmscp.ref.Append("terraform_labels"))
}

func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) Error() terra.ListValue[ErrorAttributes] {
	return terra.ReferenceAsList[ErrorAttributes](gdmscp.ref.Append("error"))
}

func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) Alloydb() terra.ListValue[AlloydbAttributes] {
	return terra.ReferenceAsList[AlloydbAttributes](gdmscp.ref.Append("alloydb"))
}

func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) Cloudsql() terra.ListValue[CloudsqlAttributes] {
	return terra.ReferenceAsList[CloudsqlAttributes](gdmscp.ref.Append("cloudsql"))
}

func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) Mysql() terra.ListValue[MysqlAttributes] {
	return terra.ReferenceAsList[MysqlAttributes](gdmscp.ref.Append("mysql"))
}

func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) Oracle() terra.ListValue[OracleAttributes] {
	return terra.ReferenceAsList[OracleAttributes](gdmscp.ref.Append("oracle"))
}

func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) Postgresql() terra.ListValue[PostgresqlAttributes] {
	return terra.ReferenceAsList[PostgresqlAttributes](gdmscp.ref.Append("postgresql"))
}

func (gdmscp googleDatabaseMigrationServiceConnectionProfileAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdmscp.ref.Append("timeouts"))
}

type googleDatabaseMigrationServiceConnectionProfileState struct {
	ConnectionProfileId string            `json:"connection_profile_id"`
	CreateTime          string            `json:"create_time"`
	Dbprovider          string            `json:"dbprovider"`
	DisplayName         string            `json:"display_name"`
	EffectiveLabels     map[string]string `json:"effective_labels"`
	Id                  string            `json:"id"`
	Labels              map[string]string `json:"labels"`
	Location            string            `json:"location"`
	Name                string            `json:"name"`
	Project             string            `json:"project"`
	State               string            `json:"state"`
	TerraformLabels     map[string]string `json:"terraform_labels"`
	Error               []ErrorState      `json:"error"`
	Alloydb             []AlloydbState    `json:"alloydb"`
	Cloudsql            []CloudsqlState   `json:"cloudsql"`
	Mysql               []MysqlState      `json:"mysql"`
	Oracle              []OracleState     `json:"oracle"`
	Postgresql          []PostgresqlState `json:"postgresql"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
