// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_storage_bucket_acl

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_storage_bucket_acl.
type Resource struct {
	Name      string
	Args      Args
	state     *googleStorageBucketAclState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsba *Resource) Type() string {
	return "google_storage_bucket_acl"
}

// LocalName returns the local name for [Resource].
func (gsba *Resource) LocalName() string {
	return gsba.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsba *Resource) Configuration() interface{} {
	return gsba.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsba *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsba)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsba *Resource) Dependencies() terra.Dependencies {
	return gsba.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsba *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsba.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsba *Resource) Attributes() googleStorageBucketAclAttributes {
	return googleStorageBucketAclAttributes{ref: terra.ReferenceResource(gsba)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsba *Resource) ImportState(state io.Reader) error {
	gsba.state = &googleStorageBucketAclState{}
	if err := json.NewDecoder(state).Decode(gsba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsba.Type(), gsba.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsba *Resource) State() (*googleStorageBucketAclState, bool) {
	return gsba.state, gsba.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsba *Resource) StateMust() *googleStorageBucketAclState {
	if gsba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsba.Type(), gsba.LocalName()))
	}
	return gsba.state
}

// Args contains the configurations for google_storage_bucket_acl.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// DefaultAcl: string, optional
	DefaultAcl terra.StringValue `hcl:"default_acl,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PredefinedAcl: string, optional
	PredefinedAcl terra.StringValue `hcl:"predefined_acl,attr"`
	// RoleEntity: list of string, optional
	RoleEntity terra.ListValue[terra.StringValue] `hcl:"role_entity,attr"`
}

type googleStorageBucketAclAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of google_storage_bucket_acl.
func (gsba googleStorageBucketAclAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(gsba.ref.Append("bucket"))
}

// DefaultAcl returns a reference to field default_acl of google_storage_bucket_acl.
func (gsba googleStorageBucketAclAttributes) DefaultAcl() terra.StringValue {
	return terra.ReferenceAsString(gsba.ref.Append("default_acl"))
}

// Id returns a reference to field id of google_storage_bucket_acl.
func (gsba googleStorageBucketAclAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsba.ref.Append("id"))
}

// PredefinedAcl returns a reference to field predefined_acl of google_storage_bucket_acl.
func (gsba googleStorageBucketAclAttributes) PredefinedAcl() terra.StringValue {
	return terra.ReferenceAsString(gsba.ref.Append("predefined_acl"))
}

// RoleEntity returns a reference to field role_entity of google_storage_bucket_acl.
func (gsba googleStorageBucketAclAttributes) RoleEntity() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gsba.ref.Append("role_entity"))
}

type googleStorageBucketAclState struct {
	Bucket        string   `json:"bucket"`
	DefaultAcl    string   `json:"default_acl"`
	Id            string   `json:"id"`
	PredefinedAcl string   `json:"predefined_acl"`
	RoleEntity    []string `json:"role_entity"`
}
