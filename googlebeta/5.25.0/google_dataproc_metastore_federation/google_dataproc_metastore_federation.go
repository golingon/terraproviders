// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataproc_metastore_federation

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dataproc_metastore_federation.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataprocMetastoreFederationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdmf *Resource) Type() string {
	return "google_dataproc_metastore_federation"
}

// LocalName returns the local name for [Resource].
func (gdmf *Resource) LocalName() string {
	return gdmf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdmf *Resource) Configuration() interface{} {
	return gdmf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdmf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdmf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdmf *Resource) Dependencies() terra.Dependencies {
	return gdmf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdmf *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdmf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdmf *Resource) Attributes() googleDataprocMetastoreFederationAttributes {
	return googleDataprocMetastoreFederationAttributes{ref: terra.ReferenceResource(gdmf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdmf *Resource) ImportState(state io.Reader) error {
	gdmf.state = &googleDataprocMetastoreFederationState{}
	if err := json.NewDecoder(state).Decode(gdmf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdmf.Type(), gdmf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdmf *Resource) State() (*googleDataprocMetastoreFederationState, bool) {
	return gdmf.state, gdmf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdmf *Resource) StateMust() *googleDataprocMetastoreFederationState {
	if gdmf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdmf.Type(), gdmf.LocalName()))
	}
	return gdmf.state
}

// Args contains the configurations for google_dataproc_metastore_federation.
type Args struct {
	// FederationId: string, required
	FederationId terra.StringValue `hcl:"federation_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// BackendMetastores: min=1
	BackendMetastores []BackendMetastores `hcl:"backend_metastores,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDataprocMetastoreFederationAttributes struct {
	ref terra.Reference
}

// EffectiveLabels returns a reference to field effective_labels of google_dataproc_metastore_federation.
func (gdmf googleDataprocMetastoreFederationAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdmf.ref.Append("effective_labels"))
}

// EndpointUri returns a reference to field endpoint_uri of google_dataproc_metastore_federation.
func (gdmf googleDataprocMetastoreFederationAttributes) EndpointUri() terra.StringValue {
	return terra.ReferenceAsString(gdmf.ref.Append("endpoint_uri"))
}

// FederationId returns a reference to field federation_id of google_dataproc_metastore_federation.
func (gdmf googleDataprocMetastoreFederationAttributes) FederationId() terra.StringValue {
	return terra.ReferenceAsString(gdmf.ref.Append("federation_id"))
}

// Id returns a reference to field id of google_dataproc_metastore_federation.
func (gdmf googleDataprocMetastoreFederationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdmf.ref.Append("id"))
}

// Labels returns a reference to field labels of google_dataproc_metastore_federation.
func (gdmf googleDataprocMetastoreFederationAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdmf.ref.Append("labels"))
}

// Location returns a reference to field location of google_dataproc_metastore_federation.
func (gdmf googleDataprocMetastoreFederationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gdmf.ref.Append("location"))
}

// Name returns a reference to field name of google_dataproc_metastore_federation.
func (gdmf googleDataprocMetastoreFederationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdmf.ref.Append("name"))
}

// Project returns a reference to field project of google_dataproc_metastore_federation.
func (gdmf googleDataprocMetastoreFederationAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdmf.ref.Append("project"))
}

// State returns a reference to field state of google_dataproc_metastore_federation.
func (gdmf googleDataprocMetastoreFederationAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gdmf.ref.Append("state"))
}

// StateMessage returns a reference to field state_message of google_dataproc_metastore_federation.
func (gdmf googleDataprocMetastoreFederationAttributes) StateMessage() terra.StringValue {
	return terra.ReferenceAsString(gdmf.ref.Append("state_message"))
}

// TerraformLabels returns a reference to field terraform_labels of google_dataproc_metastore_federation.
func (gdmf googleDataprocMetastoreFederationAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdmf.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_dataproc_metastore_federation.
func (gdmf googleDataprocMetastoreFederationAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gdmf.ref.Append("uid"))
}

// Version returns a reference to field version of google_dataproc_metastore_federation.
func (gdmf googleDataprocMetastoreFederationAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(gdmf.ref.Append("version"))
}

func (gdmf googleDataprocMetastoreFederationAttributes) BackendMetastores() terra.SetValue[BackendMetastoresAttributes] {
	return terra.ReferenceAsSet[BackendMetastoresAttributes](gdmf.ref.Append("backend_metastores"))
}

func (gdmf googleDataprocMetastoreFederationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdmf.ref.Append("timeouts"))
}

type googleDataprocMetastoreFederationState struct {
	EffectiveLabels   map[string]string        `json:"effective_labels"`
	EndpointUri       string                   `json:"endpoint_uri"`
	FederationId      string                   `json:"federation_id"`
	Id                string                   `json:"id"`
	Labels            map[string]string        `json:"labels"`
	Location          string                   `json:"location"`
	Name              string                   `json:"name"`
	Project           string                   `json:"project"`
	State             string                   `json:"state"`
	StateMessage      string                   `json:"state_message"`
	TerraformLabels   map[string]string        `json:"terraform_labels"`
	Uid               string                   `json:"uid"`
	Version           string                   `json:"version"`
	BackendMetastores []BackendMetastoresState `json:"backend_metastores"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
