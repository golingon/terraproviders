// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_filestore_instance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataFileSharesAttributes struct {
	ref terra.Reference
}

func (fs DataFileSharesAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs DataFileSharesAttributes) InternalWithRef(ref terra.Reference) DataFileSharesAttributes {
	return DataFileSharesAttributes{ref: ref}
}

func (fs DataFileSharesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs DataFileSharesAttributes) CapacityGb() terra.NumberValue {
	return terra.ReferenceAsNumber(fs.ref.Append("capacity_gb"))
}

func (fs DataFileSharesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("name"))
}

func (fs DataFileSharesAttributes) SourceBackup() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("source_backup"))
}

func (fs DataFileSharesAttributes) NfsExportOptions() terra.ListValue[DataFileSharesNfsExportOptionsAttributes] {
	return terra.ReferenceAsList[DataFileSharesNfsExportOptionsAttributes](fs.ref.Append("nfs_export_options"))
}

type DataFileSharesNfsExportOptionsAttributes struct {
	ref terra.Reference
}

func (neo DataFileSharesNfsExportOptionsAttributes) InternalRef() (terra.Reference, error) {
	return neo.ref, nil
}

func (neo DataFileSharesNfsExportOptionsAttributes) InternalWithRef(ref terra.Reference) DataFileSharesNfsExportOptionsAttributes {
	return DataFileSharesNfsExportOptionsAttributes{ref: ref}
}

func (neo DataFileSharesNfsExportOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return neo.ref.InternalTokens()
}

func (neo DataFileSharesNfsExportOptionsAttributes) AccessMode() terra.StringValue {
	return terra.ReferenceAsString(neo.ref.Append("access_mode"))
}

func (neo DataFileSharesNfsExportOptionsAttributes) AnonGid() terra.NumberValue {
	return terra.ReferenceAsNumber(neo.ref.Append("anon_gid"))
}

func (neo DataFileSharesNfsExportOptionsAttributes) AnonUid() terra.NumberValue {
	return terra.ReferenceAsNumber(neo.ref.Append("anon_uid"))
}

func (neo DataFileSharesNfsExportOptionsAttributes) IpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](neo.ref.Append("ip_ranges"))
}

func (neo DataFileSharesNfsExportOptionsAttributes) SquashMode() terra.StringValue {
	return terra.ReferenceAsString(neo.ref.Append("squash_mode"))
}

type DataNetworksAttributes struct {
	ref terra.Reference
}

func (n DataNetworksAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n DataNetworksAttributes) InternalWithRef(ref terra.Reference) DataNetworksAttributes {
	return DataNetworksAttributes{ref: ref}
}

func (n DataNetworksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n DataNetworksAttributes) ConnectMode() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("connect_mode"))
}

func (n DataNetworksAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("ip_addresses"))
}

func (n DataNetworksAttributes) Modes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("modes"))
}

func (n DataNetworksAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("network"))
}

func (n DataNetworksAttributes) ReservedIpRange() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("reserved_ip_range"))
}

type DataFileSharesState struct {
	CapacityGb       float64                               `json:"capacity_gb"`
	Name             string                                `json:"name"`
	SourceBackup     string                                `json:"source_backup"`
	NfsExportOptions []DataFileSharesNfsExportOptionsState `json:"nfs_export_options"`
}

type DataFileSharesNfsExportOptionsState struct {
	AccessMode string   `json:"access_mode"`
	AnonGid    float64  `json:"anon_gid"`
	AnonUid    float64  `json:"anon_uid"`
	IpRanges   []string `json:"ip_ranges"`
	SquashMode string   `json:"squash_mode"`
}

type DataNetworksState struct {
	ConnectMode     string   `json:"connect_mode"`
	IpAddresses     []string `json:"ip_addresses"`
	Modes           []string `json:"modes"`
	Network         string   `json:"network"`
	ReservedIpRange string   `json:"reserved_ip_range"`
}
