// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_datastore_index

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_datastore_index.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDatastoreIndexState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdi *Resource) Type() string {
	return "google_datastore_index"
}

// LocalName returns the local name for [Resource].
func (gdi *Resource) LocalName() string {
	return gdi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdi *Resource) Configuration() interface{} {
	return gdi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdi *Resource) Dependencies() terra.Dependencies {
	return gdi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdi *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdi *Resource) Attributes() googleDatastoreIndexAttributes {
	return googleDatastoreIndexAttributes{ref: terra.ReferenceResource(gdi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdi *Resource) ImportState(state io.Reader) error {
	gdi.state = &googleDatastoreIndexState{}
	if err := json.NewDecoder(state).Decode(gdi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdi.Type(), gdi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdi *Resource) State() (*googleDatastoreIndexState, bool) {
	return gdi.state, gdi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdi *Resource) StateMust() *googleDatastoreIndexState {
	if gdi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdi.Type(), gdi.LocalName()))
	}
	return gdi.state
}

// Args contains the configurations for google_datastore_index.
type Args struct {
	// Ancestor: string, optional
	Ancestor terra.StringValue `hcl:"ancestor,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, required
	Kind terra.StringValue `hcl:"kind,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Properties: min=0
	Properties []Properties `hcl:"properties,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDatastoreIndexAttributes struct {
	ref terra.Reference
}

// Ancestor returns a reference to field ancestor of google_datastore_index.
func (gdi googleDatastoreIndexAttributes) Ancestor() terra.StringValue {
	return terra.ReferenceAsString(gdi.ref.Append("ancestor"))
}

// Id returns a reference to field id of google_datastore_index.
func (gdi googleDatastoreIndexAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdi.ref.Append("id"))
}

// IndexId returns a reference to field index_id of google_datastore_index.
func (gdi googleDatastoreIndexAttributes) IndexId() terra.StringValue {
	return terra.ReferenceAsString(gdi.ref.Append("index_id"))
}

// Kind returns a reference to field kind of google_datastore_index.
func (gdi googleDatastoreIndexAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(gdi.ref.Append("kind"))
}

// Project returns a reference to field project of google_datastore_index.
func (gdi googleDatastoreIndexAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdi.ref.Append("project"))
}

func (gdi googleDatastoreIndexAttributes) Properties() terra.ListValue[PropertiesAttributes] {
	return terra.ReferenceAsList[PropertiesAttributes](gdi.ref.Append("properties"))
}

func (gdi googleDatastoreIndexAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdi.ref.Append("timeouts"))
}

type googleDatastoreIndexState struct {
	Ancestor   string            `json:"ancestor"`
	Id         string            `json:"id"`
	IndexId    string            `json:"index_id"`
	Kind       string            `json:"kind"`
	Project    string            `json:"project"`
	Properties []PropertiesState `json:"properties"`
	Timeouts   *TimeoutsState    `json:"timeouts"`
}
