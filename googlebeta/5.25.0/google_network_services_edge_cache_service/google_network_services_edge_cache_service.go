// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_network_services_edge_cache_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_network_services_edge_cache_service.
type Resource struct {
	Name      string
	Args      Args
	state     *googleNetworkServicesEdgeCacheServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gnsecs *Resource) Type() string {
	return "google_network_services_edge_cache_service"
}

// LocalName returns the local name for [Resource].
func (gnsecs *Resource) LocalName() string {
	return gnsecs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gnsecs *Resource) Configuration() interface{} {
	return gnsecs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gnsecs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gnsecs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gnsecs *Resource) Dependencies() terra.Dependencies {
	return gnsecs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gnsecs *Resource) LifecycleManagement() *terra.Lifecycle {
	return gnsecs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gnsecs *Resource) Attributes() googleNetworkServicesEdgeCacheServiceAttributes {
	return googleNetworkServicesEdgeCacheServiceAttributes{ref: terra.ReferenceResource(gnsecs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gnsecs *Resource) ImportState(state io.Reader) error {
	gnsecs.state = &googleNetworkServicesEdgeCacheServiceState{}
	if err := json.NewDecoder(state).Decode(gnsecs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gnsecs.Type(), gnsecs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gnsecs *Resource) State() (*googleNetworkServicesEdgeCacheServiceState, bool) {
	return gnsecs.state, gnsecs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gnsecs *Resource) StateMust() *googleNetworkServicesEdgeCacheServiceState {
	if gnsecs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gnsecs.Type(), gnsecs.LocalName()))
	}
	return gnsecs.state
}

// Args contains the configurations for google_network_services_edge_cache_service.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableHttp2: bool, optional
	DisableHttp2 terra.BoolValue `hcl:"disable_http2,attr"`
	// DisableQuic: bool, optional
	DisableQuic terra.BoolValue `hcl:"disable_quic,attr"`
	// EdgeSecurityPolicy: string, optional
	EdgeSecurityPolicy terra.StringValue `hcl:"edge_security_policy,attr"`
	// EdgeSslCertificates: list of string, optional
	EdgeSslCertificates terra.ListValue[terra.StringValue] `hcl:"edge_ssl_certificates,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RequireTls: bool, optional
	RequireTls terra.BoolValue `hcl:"require_tls,attr"`
	// SslPolicy: string, optional
	SslPolicy terra.StringValue `hcl:"ssl_policy,attr"`
	// LogConfig: optional
	LogConfig *LogConfig `hcl:"log_config,block"`
	// Routing: required
	Routing *Routing `hcl:"routing,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleNetworkServicesEdgeCacheServiceAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gnsecs.ref.Append("description"))
}

// DisableHttp2 returns a reference to field disable_http2 of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) DisableHttp2() terra.BoolValue {
	return terra.ReferenceAsBool(gnsecs.ref.Append("disable_http2"))
}

// DisableQuic returns a reference to field disable_quic of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) DisableQuic() terra.BoolValue {
	return terra.ReferenceAsBool(gnsecs.ref.Append("disable_quic"))
}

// EdgeSecurityPolicy returns a reference to field edge_security_policy of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) EdgeSecurityPolicy() terra.StringValue {
	return terra.ReferenceAsString(gnsecs.ref.Append("edge_security_policy"))
}

// EdgeSslCertificates returns a reference to field edge_ssl_certificates of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) EdgeSslCertificates() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gnsecs.ref.Append("edge_ssl_certificates"))
}

// EffectiveLabels returns a reference to field effective_labels of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnsecs.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gnsecs.ref.Append("id"))
}

// Ipv4Addresses returns a reference to field ipv4_addresses of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) Ipv4Addresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gnsecs.ref.Append("ipv4_addresses"))
}

// Ipv6Addresses returns a reference to field ipv6_addresses of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) Ipv6Addresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gnsecs.ref.Append("ipv6_addresses"))
}

// Labels returns a reference to field labels of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnsecs.ref.Append("labels"))
}

// Name returns a reference to field name of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gnsecs.ref.Append("name"))
}

// Project returns a reference to field project of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gnsecs.ref.Append("project"))
}

// RequireTls returns a reference to field require_tls of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) RequireTls() terra.BoolValue {
	return terra.ReferenceAsBool(gnsecs.ref.Append("require_tls"))
}

// SslPolicy returns a reference to field ssl_policy of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) SslPolicy() terra.StringValue {
	return terra.ReferenceAsString(gnsecs.ref.Append("ssl_policy"))
}

// TerraformLabels returns a reference to field terraform_labels of google_network_services_edge_cache_service.
func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnsecs.ref.Append("terraform_labels"))
}

func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) LogConfig() terra.ListValue[LogConfigAttributes] {
	return terra.ReferenceAsList[LogConfigAttributes](gnsecs.ref.Append("log_config"))
}

func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) Routing() terra.ListValue[RoutingAttributes] {
	return terra.ReferenceAsList[RoutingAttributes](gnsecs.ref.Append("routing"))
}

func (gnsecs googleNetworkServicesEdgeCacheServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gnsecs.ref.Append("timeouts"))
}

type googleNetworkServicesEdgeCacheServiceState struct {
	Description         string            `json:"description"`
	DisableHttp2        bool              `json:"disable_http2"`
	DisableQuic         bool              `json:"disable_quic"`
	EdgeSecurityPolicy  string            `json:"edge_security_policy"`
	EdgeSslCertificates []string          `json:"edge_ssl_certificates"`
	EffectiveLabels     map[string]string `json:"effective_labels"`
	Id                  string            `json:"id"`
	Ipv4Addresses       []string          `json:"ipv4_addresses"`
	Ipv6Addresses       []string          `json:"ipv6_addresses"`
	Labels              map[string]string `json:"labels"`
	Name                string            `json:"name"`
	Project             string            `json:"project"`
	RequireTls          bool              `json:"require_tls"`
	SslPolicy           string            `json:"ssl_policy"`
	TerraformLabels     map[string]string `json:"terraform_labels"`
	LogConfig           []LogConfigState  `json:"log_config"`
	Routing             []RoutingState    `json:"routing"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
