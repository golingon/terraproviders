// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloud_ids_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_cloud_ids_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCloudIdsEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcie *Resource) Type() string {
	return "google_cloud_ids_endpoint"
}

// LocalName returns the local name for [Resource].
func (gcie *Resource) LocalName() string {
	return gcie.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcie *Resource) Configuration() interface{} {
	return gcie.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcie *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcie)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcie *Resource) Dependencies() terra.Dependencies {
	return gcie.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcie *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcie.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcie *Resource) Attributes() googleCloudIdsEndpointAttributes {
	return googleCloudIdsEndpointAttributes{ref: terra.ReferenceResource(gcie)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcie *Resource) ImportState(state io.Reader) error {
	gcie.state = &googleCloudIdsEndpointState{}
	if err := json.NewDecoder(state).Decode(gcie.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcie.Type(), gcie.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcie *Resource) State() (*googleCloudIdsEndpointState, bool) {
	return gcie.state, gcie.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcie *Resource) StateMust() *googleCloudIdsEndpointState {
	if gcie.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcie.Type(), gcie.LocalName()))
	}
	return gcie.state
}

// Args contains the configurations for google_cloud_ids_endpoint.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Severity: string, required
	Severity terra.StringValue `hcl:"severity,attr" validate:"required"`
	// ThreatExceptions: list of string, optional
	ThreatExceptions terra.ListValue[terra.StringValue] `hcl:"threat_exceptions,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleCloudIdsEndpointAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_cloud_ids_endpoint.
func (gcie googleCloudIdsEndpointAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcie.ref.Append("create_time"))
}

// Description returns a reference to field description of google_cloud_ids_endpoint.
func (gcie googleCloudIdsEndpointAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcie.ref.Append("description"))
}

// EndpointForwardingRule returns a reference to field endpoint_forwarding_rule of google_cloud_ids_endpoint.
func (gcie googleCloudIdsEndpointAttributes) EndpointForwardingRule() terra.StringValue {
	return terra.ReferenceAsString(gcie.ref.Append("endpoint_forwarding_rule"))
}

// EndpointIp returns a reference to field endpoint_ip of google_cloud_ids_endpoint.
func (gcie googleCloudIdsEndpointAttributes) EndpointIp() terra.StringValue {
	return terra.ReferenceAsString(gcie.ref.Append("endpoint_ip"))
}

// Id returns a reference to field id of google_cloud_ids_endpoint.
func (gcie googleCloudIdsEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcie.ref.Append("id"))
}

// Location returns a reference to field location of google_cloud_ids_endpoint.
func (gcie googleCloudIdsEndpointAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcie.ref.Append("location"))
}

// Name returns a reference to field name of google_cloud_ids_endpoint.
func (gcie googleCloudIdsEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcie.ref.Append("name"))
}

// Network returns a reference to field network of google_cloud_ids_endpoint.
func (gcie googleCloudIdsEndpointAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gcie.ref.Append("network"))
}

// Project returns a reference to field project of google_cloud_ids_endpoint.
func (gcie googleCloudIdsEndpointAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcie.ref.Append("project"))
}

// Severity returns a reference to field severity of google_cloud_ids_endpoint.
func (gcie googleCloudIdsEndpointAttributes) Severity() terra.StringValue {
	return terra.ReferenceAsString(gcie.ref.Append("severity"))
}

// ThreatExceptions returns a reference to field threat_exceptions of google_cloud_ids_endpoint.
func (gcie googleCloudIdsEndpointAttributes) ThreatExceptions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcie.ref.Append("threat_exceptions"))
}

// UpdateTime returns a reference to field update_time of google_cloud_ids_endpoint.
func (gcie googleCloudIdsEndpointAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gcie.ref.Append("update_time"))
}

func (gcie googleCloudIdsEndpointAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcie.ref.Append("timeouts"))
}

type googleCloudIdsEndpointState struct {
	CreateTime             string         `json:"create_time"`
	Description            string         `json:"description"`
	EndpointForwardingRule string         `json:"endpoint_forwarding_rule"`
	EndpointIp             string         `json:"endpoint_ip"`
	Id                     string         `json:"id"`
	Location               string         `json:"location"`
	Name                   string         `json:"name"`
	Network                string         `json:"network"`
	Project                string         `json:"project"`
	Severity               string         `json:"severity"`
	ThreatExceptions       []string       `json:"threat_exceptions"`
	UpdateTime             string         `json:"update_time"`
	Timeouts               *TimeoutsState `json:"timeouts"`
}
