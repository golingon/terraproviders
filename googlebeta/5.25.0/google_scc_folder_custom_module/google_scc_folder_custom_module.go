// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_scc_folder_custom_module

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_scc_folder_custom_module.
type Resource struct {
	Name      string
	Args      Args
	state     *googleSccFolderCustomModuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsfcm *Resource) Type() string {
	return "google_scc_folder_custom_module"
}

// LocalName returns the local name for [Resource].
func (gsfcm *Resource) LocalName() string {
	return gsfcm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsfcm *Resource) Configuration() interface{} {
	return gsfcm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsfcm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsfcm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsfcm *Resource) Dependencies() terra.Dependencies {
	return gsfcm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsfcm *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsfcm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsfcm *Resource) Attributes() googleSccFolderCustomModuleAttributes {
	return googleSccFolderCustomModuleAttributes{ref: terra.ReferenceResource(gsfcm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsfcm *Resource) ImportState(state io.Reader) error {
	gsfcm.state = &googleSccFolderCustomModuleState{}
	if err := json.NewDecoder(state).Decode(gsfcm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsfcm.Type(), gsfcm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsfcm *Resource) State() (*googleSccFolderCustomModuleState, bool) {
	return gsfcm.state, gsfcm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsfcm *Resource) StateMust() *googleSccFolderCustomModuleState {
	if gsfcm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsfcm.Type(), gsfcm.LocalName()))
	}
	return gsfcm.state
}

// Args contains the configurations for google_scc_folder_custom_module.
type Args struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// EnablementState: string, required
	EnablementState terra.StringValue `hcl:"enablement_state,attr" validate:"required"`
	// Folder: string, required
	Folder terra.StringValue `hcl:"folder,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// CustomConfig: required
	CustomConfig *CustomConfig `hcl:"custom_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleSccFolderCustomModuleAttributes struct {
	ref terra.Reference
}

// AncestorModule returns a reference to field ancestor_module of google_scc_folder_custom_module.
func (gsfcm googleSccFolderCustomModuleAttributes) AncestorModule() terra.StringValue {
	return terra.ReferenceAsString(gsfcm.ref.Append("ancestor_module"))
}

// DisplayName returns a reference to field display_name of google_scc_folder_custom_module.
func (gsfcm googleSccFolderCustomModuleAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gsfcm.ref.Append("display_name"))
}

// EnablementState returns a reference to field enablement_state of google_scc_folder_custom_module.
func (gsfcm googleSccFolderCustomModuleAttributes) EnablementState() terra.StringValue {
	return terra.ReferenceAsString(gsfcm.ref.Append("enablement_state"))
}

// Folder returns a reference to field folder of google_scc_folder_custom_module.
func (gsfcm googleSccFolderCustomModuleAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(gsfcm.ref.Append("folder"))
}

// Id returns a reference to field id of google_scc_folder_custom_module.
func (gsfcm googleSccFolderCustomModuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsfcm.ref.Append("id"))
}

// LastEditor returns a reference to field last_editor of google_scc_folder_custom_module.
func (gsfcm googleSccFolderCustomModuleAttributes) LastEditor() terra.StringValue {
	return terra.ReferenceAsString(gsfcm.ref.Append("last_editor"))
}

// Name returns a reference to field name of google_scc_folder_custom_module.
func (gsfcm googleSccFolderCustomModuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsfcm.ref.Append("name"))
}

// UpdateTime returns a reference to field update_time of google_scc_folder_custom_module.
func (gsfcm googleSccFolderCustomModuleAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gsfcm.ref.Append("update_time"))
}

func (gsfcm googleSccFolderCustomModuleAttributes) CustomConfig() terra.ListValue[CustomConfigAttributes] {
	return terra.ReferenceAsList[CustomConfigAttributes](gsfcm.ref.Append("custom_config"))
}

func (gsfcm googleSccFolderCustomModuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsfcm.ref.Append("timeouts"))
}

type googleSccFolderCustomModuleState struct {
	AncestorModule  string              `json:"ancestor_module"`
	DisplayName     string              `json:"display_name"`
	EnablementState string              `json:"enablement_state"`
	Folder          string              `json:"folder"`
	Id              string              `json:"id"`
	LastEditor      string              `json:"last_editor"`
	Name            string              `json:"name"`
	UpdateTime      string              `json:"update_time"`
	CustomConfig    []CustomConfigState `json:"custom_config"`
	Timeouts        *TimeoutsState      `json:"timeouts"`
}
