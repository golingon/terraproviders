// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_tags_tag_keys

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataKeysAttributes struct {
	ref terra.Reference
}

func (k DataKeysAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k DataKeysAttributes) InternalWithRef(ref terra.Reference) DataKeysAttributes {
	return DataKeysAttributes{ref: ref}
}

func (k DataKeysAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k DataKeysAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("create_time"))
}

func (k DataKeysAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("description"))
}

func (k DataKeysAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("name"))
}

func (k DataKeysAttributes) NamespacedName() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("namespaced_name"))
}

func (k DataKeysAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("parent"))
}

func (k DataKeysAttributes) Purpose() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("purpose"))
}

func (k DataKeysAttributes) PurposeData() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](k.ref.Append("purpose_data"))
}

func (k DataKeysAttributes) ShortName() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("short_name"))
}

func (k DataKeysAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("update_time"))
}

type DataKeysState struct {
	CreateTime     string            `json:"create_time"`
	Description    string            `json:"description"`
	Name           string            `json:"name"`
	NamespacedName string            `json:"namespaced_name"`
	Parent         string            `json:"parent"`
	Purpose        string            `json:"purpose"`
	PurposeData    map[string]string `json:"purpose_data"`
	ShortName      string            `json:"short_name"`
	UpdateTime     string            `json:"update_time"`
}
