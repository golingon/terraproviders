// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_route

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_route.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeRouteState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcr *Resource) Type() string {
	return "google_compute_route"
}

// LocalName returns the local name for [Resource].
func (gcr *Resource) LocalName() string {
	return gcr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcr *Resource) Configuration() interface{} {
	return gcr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcr *Resource) Dependencies() terra.Dependencies {
	return gcr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcr *Resource) Attributes() googleComputeRouteAttributes {
	return googleComputeRouteAttributes{ref: terra.ReferenceResource(gcr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcr *Resource) ImportState(state io.Reader) error {
	gcr.state = &googleComputeRouteState{}
	if err := json.NewDecoder(state).Decode(gcr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcr.Type(), gcr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcr *Resource) State() (*googleComputeRouteState, bool) {
	return gcr.state, gcr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcr *Resource) StateMust() *googleComputeRouteState {
	if gcr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcr.Type(), gcr.LocalName()))
	}
	return gcr.state
}

// Args contains the configurations for google_compute_route.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DestRange: string, required
	DestRange terra.StringValue `hcl:"dest_range,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// NextHopGateway: string, optional
	NextHopGateway terra.StringValue `hcl:"next_hop_gateway,attr"`
	// NextHopIlb: string, optional
	NextHopIlb terra.StringValue `hcl:"next_hop_ilb,attr"`
	// NextHopInstance: string, optional
	NextHopInstance terra.StringValue `hcl:"next_hop_instance,attr"`
	// NextHopInstanceZone: string, optional
	NextHopInstanceZone terra.StringValue `hcl:"next_hop_instance_zone,attr"`
	// NextHopIp: string, optional
	NextHopIp terra.StringValue `hcl:"next_hop_ip,attr"`
	// NextHopVpnTunnel: string, optional
	NextHopVpnTunnel terra.StringValue `hcl:"next_hop_vpn_tunnel,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Tags: set of string, optional
	Tags terra.SetValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeRouteAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_compute_route.
func (gcr googleComputeRouteAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("description"))
}

// DestRange returns a reference to field dest_range of google_compute_route.
func (gcr googleComputeRouteAttributes) DestRange() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("dest_range"))
}

// Id returns a reference to field id of google_compute_route.
func (gcr googleComputeRouteAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_route.
func (gcr googleComputeRouteAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("name"))
}

// Network returns a reference to field network of google_compute_route.
func (gcr googleComputeRouteAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("network"))
}

// NextHopGateway returns a reference to field next_hop_gateway of google_compute_route.
func (gcr googleComputeRouteAttributes) NextHopGateway() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("next_hop_gateway"))
}

// NextHopIlb returns a reference to field next_hop_ilb of google_compute_route.
func (gcr googleComputeRouteAttributes) NextHopIlb() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("next_hop_ilb"))
}

// NextHopInstance returns a reference to field next_hop_instance of google_compute_route.
func (gcr googleComputeRouteAttributes) NextHopInstance() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("next_hop_instance"))
}

// NextHopInstanceZone returns a reference to field next_hop_instance_zone of google_compute_route.
func (gcr googleComputeRouteAttributes) NextHopInstanceZone() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("next_hop_instance_zone"))
}

// NextHopIp returns a reference to field next_hop_ip of google_compute_route.
func (gcr googleComputeRouteAttributes) NextHopIp() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("next_hop_ip"))
}

// NextHopNetwork returns a reference to field next_hop_network of google_compute_route.
func (gcr googleComputeRouteAttributes) NextHopNetwork() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("next_hop_network"))
}

// NextHopVpnTunnel returns a reference to field next_hop_vpn_tunnel of google_compute_route.
func (gcr googleComputeRouteAttributes) NextHopVpnTunnel() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("next_hop_vpn_tunnel"))
}

// Priority returns a reference to field priority of google_compute_route.
func (gcr googleComputeRouteAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(gcr.ref.Append("priority"))
}

// Project returns a reference to field project of google_compute_route.
func (gcr googleComputeRouteAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_compute_route.
func (gcr googleComputeRouteAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("self_link"))
}

// Tags returns a reference to field tags of google_compute_route.
func (gcr googleComputeRouteAttributes) Tags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gcr.ref.Append("tags"))
}

func (gcr googleComputeRouteAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcr.ref.Append("timeouts"))
}

type googleComputeRouteState struct {
	Description         string         `json:"description"`
	DestRange           string         `json:"dest_range"`
	Id                  string         `json:"id"`
	Name                string         `json:"name"`
	Network             string         `json:"network"`
	NextHopGateway      string         `json:"next_hop_gateway"`
	NextHopIlb          string         `json:"next_hop_ilb"`
	NextHopInstance     string         `json:"next_hop_instance"`
	NextHopInstanceZone string         `json:"next_hop_instance_zone"`
	NextHopIp           string         `json:"next_hop_ip"`
	NextHopNetwork      string         `json:"next_hop_network"`
	NextHopVpnTunnel    string         `json:"next_hop_vpn_tunnel"`
	Priority            float64        `json:"priority"`
	Project             string         `json:"project"`
	SelfLink            string         `json:"self_link"`
	Tags                []string       `json:"tags"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
