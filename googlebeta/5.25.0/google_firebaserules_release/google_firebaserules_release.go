// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firebaserules_release

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firebaserules_release.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirebaserulesReleaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfr *Resource) Type() string {
	return "google_firebaserules_release"
}

// LocalName returns the local name for [Resource].
func (gfr *Resource) LocalName() string {
	return gfr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfr *Resource) Configuration() interface{} {
	return gfr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfr *Resource) Dependencies() terra.Dependencies {
	return gfr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfr *Resource) Attributes() googleFirebaserulesReleaseAttributes {
	return googleFirebaserulesReleaseAttributes{ref: terra.ReferenceResource(gfr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfr *Resource) ImportState(state io.Reader) error {
	gfr.state = &googleFirebaserulesReleaseState{}
	if err := json.NewDecoder(state).Decode(gfr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfr.Type(), gfr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfr *Resource) State() (*googleFirebaserulesReleaseState, bool) {
	return gfr.state, gfr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfr *Resource) StateMust() *googleFirebaserulesReleaseState {
	if gfr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfr.Type(), gfr.LocalName()))
	}
	return gfr.state
}

// Args contains the configurations for google_firebaserules_release.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RulesetName: string, required
	RulesetName terra.StringValue `hcl:"ruleset_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirebaserulesReleaseAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_firebaserules_release.
func (gfr googleFirebaserulesReleaseAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gfr.ref.Append("create_time"))
}

// Disabled returns a reference to field disabled of google_firebaserules_release.
func (gfr googleFirebaserulesReleaseAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(gfr.ref.Append("disabled"))
}

// Id returns a reference to field id of google_firebaserules_release.
func (gfr googleFirebaserulesReleaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfr.ref.Append("id"))
}

// Name returns a reference to field name of google_firebaserules_release.
func (gfr googleFirebaserulesReleaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfr.ref.Append("name"))
}

// Project returns a reference to field project of google_firebaserules_release.
func (gfr googleFirebaserulesReleaseAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfr.ref.Append("project"))
}

// RulesetName returns a reference to field ruleset_name of google_firebaserules_release.
func (gfr googleFirebaserulesReleaseAttributes) RulesetName() terra.StringValue {
	return terra.ReferenceAsString(gfr.ref.Append("ruleset_name"))
}

// UpdateTime returns a reference to field update_time of google_firebaserules_release.
func (gfr googleFirebaserulesReleaseAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gfr.ref.Append("update_time"))
}

func (gfr googleFirebaserulesReleaseAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfr.ref.Append("timeouts"))
}

type googleFirebaserulesReleaseState struct {
	CreateTime  string         `json:"create_time"`
	Disabled    bool           `json:"disabled"`
	Id          string         `json:"id"`
	Name        string         `json:"name"`
	Project     string         `json:"project"`
	RulesetName string         `json:"ruleset_name"`
	UpdateTime  string         `json:"update_time"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
