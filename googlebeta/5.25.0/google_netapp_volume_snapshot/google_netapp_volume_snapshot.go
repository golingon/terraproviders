// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_netapp_volume_snapshot

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_netapp_volume_snapshot.
type Resource struct {
	Name      string
	Args      Args
	state     *googleNetappVolumeSnapshotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gnvs *Resource) Type() string {
	return "google_netapp_volume_snapshot"
}

// LocalName returns the local name for [Resource].
func (gnvs *Resource) LocalName() string {
	return gnvs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gnvs *Resource) Configuration() interface{} {
	return gnvs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gnvs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gnvs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gnvs *Resource) Dependencies() terra.Dependencies {
	return gnvs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gnvs *Resource) LifecycleManagement() *terra.Lifecycle {
	return gnvs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gnvs *Resource) Attributes() googleNetappVolumeSnapshotAttributes {
	return googleNetappVolumeSnapshotAttributes{ref: terra.ReferenceResource(gnvs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gnvs *Resource) ImportState(state io.Reader) error {
	gnvs.state = &googleNetappVolumeSnapshotState{}
	if err := json.NewDecoder(state).Decode(gnvs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gnvs.Type(), gnvs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gnvs *Resource) State() (*googleNetappVolumeSnapshotState, bool) {
	return gnvs.state, gnvs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gnvs *Resource) StateMust() *googleNetappVolumeSnapshotState {
	if gnvs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gnvs.Type(), gnvs.LocalName()))
	}
	return gnvs.state
}

// Args contains the configurations for google_netapp_volume_snapshot.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// VolumeName: string, required
	VolumeName terra.StringValue `hcl:"volume_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleNetappVolumeSnapshotAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_netapp_volume_snapshot.
func (gnvs googleNetappVolumeSnapshotAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gnvs.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_netapp_volume_snapshot.
func (gnvs googleNetappVolumeSnapshotAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnvs.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_netapp_volume_snapshot.
func (gnvs googleNetappVolumeSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gnvs.ref.Append("id"))
}

// Labels returns a reference to field labels of google_netapp_volume_snapshot.
func (gnvs googleNetappVolumeSnapshotAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnvs.ref.Append("labels"))
}

// Location returns a reference to field location of google_netapp_volume_snapshot.
func (gnvs googleNetappVolumeSnapshotAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gnvs.ref.Append("location"))
}

// Name returns a reference to field name of google_netapp_volume_snapshot.
func (gnvs googleNetappVolumeSnapshotAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gnvs.ref.Append("name"))
}

// Project returns a reference to field project of google_netapp_volume_snapshot.
func (gnvs googleNetappVolumeSnapshotAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gnvs.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_netapp_volume_snapshot.
func (gnvs googleNetappVolumeSnapshotAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnvs.ref.Append("terraform_labels"))
}

// UsedBytes returns a reference to field used_bytes of google_netapp_volume_snapshot.
func (gnvs googleNetappVolumeSnapshotAttributes) UsedBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(gnvs.ref.Append("used_bytes"))
}

// VolumeName returns a reference to field volume_name of google_netapp_volume_snapshot.
func (gnvs googleNetappVolumeSnapshotAttributes) VolumeName() terra.StringValue {
	return terra.ReferenceAsString(gnvs.ref.Append("volume_name"))
}

func (gnvs googleNetappVolumeSnapshotAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gnvs.ref.Append("timeouts"))
}

type googleNetappVolumeSnapshotState struct {
	Description     string            `json:"description"`
	EffectiveLabels map[string]string `json:"effective_labels"`
	Id              string            `json:"id"`
	Labels          map[string]string `json:"labels"`
	Location        string            `json:"location"`
	Name            string            `json:"name"`
	Project         string            `json:"project"`
	TerraformLabels map[string]string `json:"terraform_labels"`
	UsedBytes       float64           `json:"used_bytes"`
	VolumeName      string            `json:"volume_name"`
	Timeouts        *TimeoutsState    `json:"timeouts"`
}
