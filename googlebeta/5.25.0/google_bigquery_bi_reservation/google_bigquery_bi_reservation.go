// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_bi_reservation

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_bi_reservation.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryBiReservationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbbr *Resource) Type() string {
	return "google_bigquery_bi_reservation"
}

// LocalName returns the local name for [Resource].
func (gbbr *Resource) LocalName() string {
	return gbbr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbbr *Resource) Configuration() interface{} {
	return gbbr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbbr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbbr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbbr *Resource) Dependencies() terra.Dependencies {
	return gbbr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbbr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbbr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbbr *Resource) Attributes() googleBigqueryBiReservationAttributes {
	return googleBigqueryBiReservationAttributes{ref: terra.ReferenceResource(gbbr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbbr *Resource) ImportState(state io.Reader) error {
	gbbr.state = &googleBigqueryBiReservationState{}
	if err := json.NewDecoder(state).Decode(gbbr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbbr.Type(), gbbr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbbr *Resource) State() (*googleBigqueryBiReservationState, bool) {
	return gbbr.state, gbbr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbbr *Resource) StateMust() *googleBigqueryBiReservationState {
	if gbbr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbbr.Type(), gbbr.LocalName()))
	}
	return gbbr.state
}

// Args contains the configurations for google_bigquery_bi_reservation.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Size: number, optional
	Size terra.NumberValue `hcl:"size,attr"`
	// PreferredTables: min=0
	PreferredTables []PreferredTables `hcl:"preferred_tables,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBigqueryBiReservationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_bigquery_bi_reservation.
func (gbbr googleBigqueryBiReservationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbbr.ref.Append("id"))
}

// Location returns a reference to field location of google_bigquery_bi_reservation.
func (gbbr googleBigqueryBiReservationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbbr.ref.Append("location"))
}

// Name returns a reference to field name of google_bigquery_bi_reservation.
func (gbbr googleBigqueryBiReservationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbbr.ref.Append("name"))
}

// Project returns a reference to field project of google_bigquery_bi_reservation.
func (gbbr googleBigqueryBiReservationAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbbr.ref.Append("project"))
}

// Size returns a reference to field size of google_bigquery_bi_reservation.
func (gbbr googleBigqueryBiReservationAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(gbbr.ref.Append("size"))
}

// UpdateTime returns a reference to field update_time of google_bigquery_bi_reservation.
func (gbbr googleBigqueryBiReservationAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gbbr.ref.Append("update_time"))
}

func (gbbr googleBigqueryBiReservationAttributes) PreferredTables() terra.ListValue[PreferredTablesAttributes] {
	return terra.ReferenceAsList[PreferredTablesAttributes](gbbr.ref.Append("preferred_tables"))
}

func (gbbr googleBigqueryBiReservationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbbr.ref.Append("timeouts"))
}

type googleBigqueryBiReservationState struct {
	Id              string                 `json:"id"`
	Location        string                 `json:"location"`
	Name            string                 `json:"name"`
	Project         string                 `json:"project"`
	Size            float64                `json:"size"`
	UpdateTime      string                 `json:"update_time"`
	PreferredTables []PreferredTablesState `json:"preferred_tables"`
	Timeouts        *TimeoutsState         `json:"timeouts"`
}
