// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_scc_source

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_scc_source.
type Resource struct {
	Name      string
	Args      Args
	state     *googleSccSourceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gss *Resource) Type() string {
	return "google_scc_source"
}

// LocalName returns the local name for [Resource].
func (gss *Resource) LocalName() string {
	return gss.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gss *Resource) Configuration() interface{} {
	return gss.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gss *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gss)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gss *Resource) Dependencies() terra.Dependencies {
	return gss.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gss *Resource) LifecycleManagement() *terra.Lifecycle {
	return gss.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gss *Resource) Attributes() googleSccSourceAttributes {
	return googleSccSourceAttributes{ref: terra.ReferenceResource(gss)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gss *Resource) ImportState(state io.Reader) error {
	gss.state = &googleSccSourceState{}
	if err := json.NewDecoder(state).Decode(gss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gss.Type(), gss.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gss *Resource) State() (*googleSccSourceState, bool) {
	return gss.state, gss.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gss *Resource) StateMust() *googleSccSourceState {
	if gss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gss.Type(), gss.LocalName()))
	}
	return gss.state
}

// Args contains the configurations for google_scc_source.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Organization: string, required
	Organization terra.StringValue `hcl:"organization,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleSccSourceAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_scc_source.
func (gss googleSccSourceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gss.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_scc_source.
func (gss googleSccSourceAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gss.ref.Append("display_name"))
}

// Id returns a reference to field id of google_scc_source.
func (gss googleSccSourceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gss.ref.Append("id"))
}

// Name returns a reference to field name of google_scc_source.
func (gss googleSccSourceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gss.ref.Append("name"))
}

// Organization returns a reference to field organization of google_scc_source.
func (gss googleSccSourceAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(gss.ref.Append("organization"))
}

func (gss googleSccSourceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gss.ref.Append("timeouts"))
}

type googleSccSourceState struct {
	Description  string         `json:"description"`
	DisplayName  string         `json:"display_name"`
	Id           string         `json:"id"`
	Name         string         `json:"name"`
	Organization string         `json:"organization"`
	Timeouts     *TimeoutsState `json:"timeouts"`
}
