// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_app_engine_application_url_dispatch_rules

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_app_engine_application_url_dispatch_rules.
type Resource struct {
	Name      string
	Args      Args
	state     *googleAppEngineApplicationUrlDispatchRulesState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gaeaudr *Resource) Type() string {
	return "google_app_engine_application_url_dispatch_rules"
}

// LocalName returns the local name for [Resource].
func (gaeaudr *Resource) LocalName() string {
	return gaeaudr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gaeaudr *Resource) Configuration() interface{} {
	return gaeaudr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gaeaudr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gaeaudr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gaeaudr *Resource) Dependencies() terra.Dependencies {
	return gaeaudr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gaeaudr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gaeaudr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gaeaudr *Resource) Attributes() googleAppEngineApplicationUrlDispatchRulesAttributes {
	return googleAppEngineApplicationUrlDispatchRulesAttributes{ref: terra.ReferenceResource(gaeaudr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gaeaudr *Resource) ImportState(state io.Reader) error {
	gaeaudr.state = &googleAppEngineApplicationUrlDispatchRulesState{}
	if err := json.NewDecoder(state).Decode(gaeaudr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gaeaudr.Type(), gaeaudr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gaeaudr *Resource) State() (*googleAppEngineApplicationUrlDispatchRulesState, bool) {
	return gaeaudr.state, gaeaudr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gaeaudr *Resource) StateMust() *googleAppEngineApplicationUrlDispatchRulesState {
	if gaeaudr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gaeaudr.Type(), gaeaudr.LocalName()))
	}
	return gaeaudr.state
}

// Args contains the configurations for google_app_engine_application_url_dispatch_rules.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DispatchRules: min=1
	DispatchRules []DispatchRules `hcl:"dispatch_rules,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleAppEngineApplicationUrlDispatchRulesAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_app_engine_application_url_dispatch_rules.
func (gaeaudr googleAppEngineApplicationUrlDispatchRulesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gaeaudr.ref.Append("id"))
}

// Project returns a reference to field project of google_app_engine_application_url_dispatch_rules.
func (gaeaudr googleAppEngineApplicationUrlDispatchRulesAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gaeaudr.ref.Append("project"))
}

func (gaeaudr googleAppEngineApplicationUrlDispatchRulesAttributes) DispatchRules() terra.ListValue[DispatchRulesAttributes] {
	return terra.ReferenceAsList[DispatchRulesAttributes](gaeaudr.ref.Append("dispatch_rules"))
}

func (gaeaudr googleAppEngineApplicationUrlDispatchRulesAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gaeaudr.ref.Append("timeouts"))
}

type googleAppEngineApplicationUrlDispatchRulesState struct {
	Id            string               `json:"id"`
	Project       string               `json:"project"`
	DispatchRules []DispatchRulesState `json:"dispatch_rules"`
	Timeouts      *TimeoutsState       `json:"timeouts"`
}
