// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firebase_apple_app

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firebase_apple_app.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirebaseAppleAppState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfaa *Resource) Type() string {
	return "google_firebase_apple_app"
}

// LocalName returns the local name for [Resource].
func (gfaa *Resource) LocalName() string {
	return gfaa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfaa *Resource) Configuration() interface{} {
	return gfaa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfaa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfaa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfaa *Resource) Dependencies() terra.Dependencies {
	return gfaa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfaa *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfaa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfaa *Resource) Attributes() googleFirebaseAppleAppAttributes {
	return googleFirebaseAppleAppAttributes{ref: terra.ReferenceResource(gfaa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfaa *Resource) ImportState(state io.Reader) error {
	gfaa.state = &googleFirebaseAppleAppState{}
	if err := json.NewDecoder(state).Decode(gfaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfaa.Type(), gfaa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfaa *Resource) State() (*googleFirebaseAppleAppState, bool) {
	return gfaa.state, gfaa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfaa *Resource) StateMust() *googleFirebaseAppleAppState {
	if gfaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfaa.Type(), gfaa.LocalName()))
	}
	return gfaa.state
}

// Args contains the configurations for google_firebase_apple_app.
type Args struct {
	// ApiKeyId: string, optional
	ApiKeyId terra.StringValue `hcl:"api_key_id,attr"`
	// AppStoreId: string, optional
	AppStoreId terra.StringValue `hcl:"app_store_id,attr"`
	// BundleId: string, required
	BundleId terra.StringValue `hcl:"bundle_id,attr" validate:"required"`
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TeamId: string, optional
	TeamId terra.StringValue `hcl:"team_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirebaseAppleAppAttributes struct {
	ref terra.Reference
}

// ApiKeyId returns a reference to field api_key_id of google_firebase_apple_app.
func (gfaa googleFirebaseAppleAppAttributes) ApiKeyId() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("api_key_id"))
}

// AppId returns a reference to field app_id of google_firebase_apple_app.
func (gfaa googleFirebaseAppleAppAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("app_id"))
}

// AppStoreId returns a reference to field app_store_id of google_firebase_apple_app.
func (gfaa googleFirebaseAppleAppAttributes) AppStoreId() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("app_store_id"))
}

// BundleId returns a reference to field bundle_id of google_firebase_apple_app.
func (gfaa googleFirebaseAppleAppAttributes) BundleId() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("bundle_id"))
}

// DeletionPolicy returns a reference to field deletion_policy of google_firebase_apple_app.
func (gfaa googleFirebaseAppleAppAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("deletion_policy"))
}

// DisplayName returns a reference to field display_name of google_firebase_apple_app.
func (gfaa googleFirebaseAppleAppAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("display_name"))
}

// Id returns a reference to field id of google_firebase_apple_app.
func (gfaa googleFirebaseAppleAppAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("id"))
}

// Name returns a reference to field name of google_firebase_apple_app.
func (gfaa googleFirebaseAppleAppAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("name"))
}

// Project returns a reference to field project of google_firebase_apple_app.
func (gfaa googleFirebaseAppleAppAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("project"))
}

// TeamId returns a reference to field team_id of google_firebase_apple_app.
func (gfaa googleFirebaseAppleAppAttributes) TeamId() terra.StringValue {
	return terra.ReferenceAsString(gfaa.ref.Append("team_id"))
}

func (gfaa googleFirebaseAppleAppAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfaa.ref.Append("timeouts"))
}

type googleFirebaseAppleAppState struct {
	ApiKeyId       string         `json:"api_key_id"`
	AppId          string         `json:"app_id"`
	AppStoreId     string         `json:"app_store_id"`
	BundleId       string         `json:"bundle_id"`
	DeletionPolicy string         `json:"deletion_policy"`
	DisplayName    string         `json:"display_name"`
	Id             string         `json:"id"`
	Name           string         `json:"name"`
	Project        string         `json:"project"`
	TeamId         string         `json:"team_id"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
