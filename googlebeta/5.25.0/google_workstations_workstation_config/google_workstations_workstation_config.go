// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_workstations_workstation_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_workstations_workstation_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleWorkstationsWorkstationConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gwwc *Resource) Type() string {
	return "google_workstations_workstation_config"
}

// LocalName returns the local name for [Resource].
func (gwwc *Resource) LocalName() string {
	return gwwc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gwwc *Resource) Configuration() interface{} {
	return gwwc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gwwc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gwwc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gwwc *Resource) Dependencies() terra.Dependencies {
	return gwwc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gwwc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gwwc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gwwc *Resource) Attributes() googleWorkstationsWorkstationConfigAttributes {
	return googleWorkstationsWorkstationConfigAttributes{ref: terra.ReferenceResource(gwwc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gwwc *Resource) ImportState(state io.Reader) error {
	gwwc.state = &googleWorkstationsWorkstationConfigState{}
	if err := json.NewDecoder(state).Decode(gwwc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gwwc.Type(), gwwc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gwwc *Resource) State() (*googleWorkstationsWorkstationConfigState, bool) {
	return gwwc.state, gwwc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gwwc *Resource) StateMust() *googleWorkstationsWorkstationConfigState {
	if gwwc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gwwc.Type(), gwwc.LocalName()))
	}
	return gwwc.state
}

// Args contains the configurations for google_workstations_workstation_config.
type Args struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// DisableTcpConnections: bool, optional
	DisableTcpConnections terra.BoolValue `hcl:"disable_tcp_connections,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// EnableAuditAgent: bool, optional
	EnableAuditAgent terra.BoolValue `hcl:"enable_audit_agent,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdleTimeout: string, optional
	IdleTimeout terra.StringValue `hcl:"idle_timeout,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ReplicaZones: list of string, optional
	ReplicaZones terra.ListValue[terra.StringValue] `hcl:"replica_zones,attr"`
	// RunningTimeout: string, optional
	RunningTimeout terra.StringValue `hcl:"running_timeout,attr"`
	// WorkstationClusterId: string, required
	WorkstationClusterId terra.StringValue `hcl:"workstation_cluster_id,attr" validate:"required"`
	// WorkstationConfigId: string, required
	WorkstationConfigId terra.StringValue `hcl:"workstation_config_id,attr" validate:"required"`
	// Container: optional
	Container *Container `hcl:"container,block"`
	// EncryptionKey: optional
	EncryptionKey *EncryptionKey `hcl:"encryption_key,block"`
	// EphemeralDirectories: min=0
	EphemeralDirectories []EphemeralDirectories `hcl:"ephemeral_directories,block" validate:"min=0"`
	// Host: optional
	Host *Host `hcl:"host,block"`
	// PersistentDirectories: min=0
	PersistentDirectories []PersistentDirectories `hcl:"persistent_directories,block" validate:"min=0"`
	// ReadinessChecks: min=0
	ReadinessChecks []ReadinessChecks `hcl:"readiness_checks,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleWorkstationsWorkstationConfigAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gwwc.ref.Append("annotations"))
}

// CreateTime returns a reference to field create_time of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("create_time"))
}

// Degraded returns a reference to field degraded of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) Degraded() terra.BoolValue {
	return terra.ReferenceAsBool(gwwc.ref.Append("degraded"))
}

// DisableTcpConnections returns a reference to field disable_tcp_connections of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) DisableTcpConnections() terra.BoolValue {
	return terra.ReferenceAsBool(gwwc.ref.Append("disable_tcp_connections"))
}

// DisplayName returns a reference to field display_name of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("display_name"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gwwc.ref.Append("effective_annotations"))
}

// EffectiveLabels returns a reference to field effective_labels of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gwwc.ref.Append("effective_labels"))
}

// EnableAuditAgent returns a reference to field enable_audit_agent of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) EnableAuditAgent() terra.BoolValue {
	return terra.ReferenceAsBool(gwwc.ref.Append("enable_audit_agent"))
}

// Etag returns a reference to field etag of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("etag"))
}

// Id returns a reference to field id of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("id"))
}

// IdleTimeout returns a reference to field idle_timeout of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) IdleTimeout() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("idle_timeout"))
}

// Labels returns a reference to field labels of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gwwc.ref.Append("labels"))
}

// Location returns a reference to field location of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("location"))
}

// Name returns a reference to field name of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("name"))
}

// Project returns a reference to field project of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("project"))
}

// ReplicaZones returns a reference to field replica_zones of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) ReplicaZones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gwwc.ref.Append("replica_zones"))
}

// RunningTimeout returns a reference to field running_timeout of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) RunningTimeout() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("running_timeout"))
}

// TerraformLabels returns a reference to field terraform_labels of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gwwc.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("uid"))
}

// WorkstationClusterId returns a reference to field workstation_cluster_id of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) WorkstationClusterId() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("workstation_cluster_id"))
}

// WorkstationConfigId returns a reference to field workstation_config_id of google_workstations_workstation_config.
func (gwwc googleWorkstationsWorkstationConfigAttributes) WorkstationConfigId() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("workstation_config_id"))
}

func (gwwc googleWorkstationsWorkstationConfigAttributes) Conditions() terra.ListValue[ConditionsAttributes] {
	return terra.ReferenceAsList[ConditionsAttributes](gwwc.ref.Append("conditions"))
}

func (gwwc googleWorkstationsWorkstationConfigAttributes) Container() terra.ListValue[ContainerAttributes] {
	return terra.ReferenceAsList[ContainerAttributes](gwwc.ref.Append("container"))
}

func (gwwc googleWorkstationsWorkstationConfigAttributes) EncryptionKey() terra.ListValue[EncryptionKeyAttributes] {
	return terra.ReferenceAsList[EncryptionKeyAttributes](gwwc.ref.Append("encryption_key"))
}

func (gwwc googleWorkstationsWorkstationConfigAttributes) EphemeralDirectories() terra.ListValue[EphemeralDirectoriesAttributes] {
	return terra.ReferenceAsList[EphemeralDirectoriesAttributes](gwwc.ref.Append("ephemeral_directories"))
}

func (gwwc googleWorkstationsWorkstationConfigAttributes) Host() terra.ListValue[HostAttributes] {
	return terra.ReferenceAsList[HostAttributes](gwwc.ref.Append("host"))
}

func (gwwc googleWorkstationsWorkstationConfigAttributes) PersistentDirectories() terra.ListValue[PersistentDirectoriesAttributes] {
	return terra.ReferenceAsList[PersistentDirectoriesAttributes](gwwc.ref.Append("persistent_directories"))
}

func (gwwc googleWorkstationsWorkstationConfigAttributes) ReadinessChecks() terra.ListValue[ReadinessChecksAttributes] {
	return terra.ReferenceAsList[ReadinessChecksAttributes](gwwc.ref.Append("readiness_checks"))
}

func (gwwc googleWorkstationsWorkstationConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gwwc.ref.Append("timeouts"))
}

type googleWorkstationsWorkstationConfigState struct {
	Annotations           map[string]string            `json:"annotations"`
	CreateTime            string                       `json:"create_time"`
	Degraded              bool                         `json:"degraded"`
	DisableTcpConnections bool                         `json:"disable_tcp_connections"`
	DisplayName           string                       `json:"display_name"`
	EffectiveAnnotations  map[string]string            `json:"effective_annotations"`
	EffectiveLabels       map[string]string            `json:"effective_labels"`
	EnableAuditAgent      bool                         `json:"enable_audit_agent"`
	Etag                  string                       `json:"etag"`
	Id                    string                       `json:"id"`
	IdleTimeout           string                       `json:"idle_timeout"`
	Labels                map[string]string            `json:"labels"`
	Location              string                       `json:"location"`
	Name                  string                       `json:"name"`
	Project               string                       `json:"project"`
	ReplicaZones          []string                     `json:"replica_zones"`
	RunningTimeout        string                       `json:"running_timeout"`
	TerraformLabels       map[string]string            `json:"terraform_labels"`
	Uid                   string                       `json:"uid"`
	WorkstationClusterId  string                       `json:"workstation_cluster_id"`
	WorkstationConfigId   string                       `json:"workstation_config_id"`
	Conditions            []ConditionsState            `json:"conditions"`
	Container             []ContainerState             `json:"container"`
	EncryptionKey         []EncryptionKeyState         `json:"encryption_key"`
	EphemeralDirectories  []EphemeralDirectoriesState  `json:"ephemeral_directories"`
	Host                  []HostState                  `json:"host"`
	PersistentDirectories []PersistentDirectoriesState `json:"persistent_directories"`
	ReadinessChecks       []ReadinessChecksState       `json:"readiness_checks"`
	Timeouts              *TimeoutsState               `json:"timeouts"`
}
