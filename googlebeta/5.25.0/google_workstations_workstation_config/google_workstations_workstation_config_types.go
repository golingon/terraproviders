// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_workstations_workstation_config

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Container struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Command: list of string, optional
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// Env: map of string, optional
	Env terra.MapValue[terra.StringValue] `hcl:"env,attr"`
	// Image: string, optional
	Image terra.StringValue `hcl:"image,attr"`
	// RunAsUser: number, optional
	RunAsUser terra.NumberValue `hcl:"run_as_user,attr"`
	// WorkingDir: string, optional
	WorkingDir terra.StringValue `hcl:"working_dir,attr"`
}

type EncryptionKey struct {
	// KmsKey: string, required
	KmsKey terra.StringValue `hcl:"kms_key,attr" validate:"required"`
	// KmsKeyServiceAccount: string, required
	KmsKeyServiceAccount terra.StringValue `hcl:"kms_key_service_account,attr" validate:"required"`
}

type EphemeralDirectories struct {
	// MountPath: string, optional
	MountPath terra.StringValue `hcl:"mount_path,attr"`
	// EphemeralDirectoriesGcePd: optional
	GcePd *EphemeralDirectoriesGcePd `hcl:"gce_pd,block"`
}

type EphemeralDirectoriesGcePd struct {
	// DiskType: string, optional
	DiskType terra.StringValue `hcl:"disk_type,attr"`
	// ReadOnly: bool, optional
	ReadOnly terra.BoolValue `hcl:"read_only,attr"`
	// SourceImage: string, optional
	SourceImage terra.StringValue `hcl:"source_image,attr"`
	// SourceSnapshot: string, optional
	SourceSnapshot terra.StringValue `hcl:"source_snapshot,attr"`
}

type Host struct {
	// HostGceInstance: optional
	GceInstance *HostGceInstance `hcl:"gce_instance,block"`
}

type HostGceInstance struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// DisablePublicIpAddresses: bool, optional
	DisablePublicIpAddresses terra.BoolValue `hcl:"disable_public_ip_addresses,attr"`
	// DisableSsh: bool, optional
	DisableSsh terra.BoolValue `hcl:"disable_ssh,attr"`
	// EnableNestedVirtualization: bool, optional
	EnableNestedVirtualization terra.BoolValue `hcl:"enable_nested_virtualization,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// PoolSize: number, optional
	PoolSize terra.NumberValue `hcl:"pool_size,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// ServiceAccountScopes: list of string, optional
	ServiceAccountScopes terra.ListValue[terra.StringValue] `hcl:"service_account_scopes,attr"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
	// HostGceInstanceAccelerators: min=0
	Accelerators []HostGceInstanceAccelerators `hcl:"accelerators,block" validate:"min=0"`
	// HostGceInstanceBoostConfigs: min=0
	BoostConfigs []HostGceInstanceBoostConfigs `hcl:"boost_configs,block" validate:"min=0"`
	// HostGceInstanceConfidentialInstanceConfig: optional
	ConfidentialInstanceConfig *HostGceInstanceConfidentialInstanceConfig `hcl:"confidential_instance_config,block"`
	// HostGceInstanceShieldedInstanceConfig: optional
	ShieldedInstanceConfig *HostGceInstanceShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
}

type HostGceInstanceAccelerators struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type HostGceInstanceBoostConfigs struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// HostGceInstanceBoostConfigsAccelerators: min=0
	Accelerators []HostGceInstanceBoostConfigsAccelerators `hcl:"accelerators,block" validate:"min=0"`
}

type HostGceInstanceBoostConfigsAccelerators struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type HostGceInstanceConfidentialInstanceConfig struct {
	// EnableConfidentialCompute: bool, optional
	EnableConfidentialCompute terra.BoolValue `hcl:"enable_confidential_compute,attr"`
}

type HostGceInstanceShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
	// EnableVtpm: bool, optional
	EnableVtpm terra.BoolValue `hcl:"enable_vtpm,attr"`
}

type PersistentDirectories struct {
	// MountPath: string, optional
	MountPath terra.StringValue `hcl:"mount_path,attr"`
	// PersistentDirectoriesGcePd: optional
	GcePd *PersistentDirectoriesGcePd `hcl:"gce_pd,block"`
}

type PersistentDirectoriesGcePd struct {
	// DiskType: string, optional
	DiskType terra.StringValue `hcl:"disk_type,attr"`
	// FsType: string, optional
	FsType terra.StringValue `hcl:"fs_type,attr"`
	// ReclaimPolicy: string, optional
	ReclaimPolicy terra.StringValue `hcl:"reclaim_policy,attr"`
	// SizeGb: number, optional
	SizeGb terra.NumberValue `hcl:"size_gb,attr"`
	// SourceSnapshot: string, optional
	SourceSnapshot terra.StringValue `hcl:"source_snapshot,attr"`
}

type ReadinessChecks struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) Code() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("code"))
}

func (c ConditionsAttributes) Details() terra.ListValue[terra.MapValue[terra.StringValue]] {
	return terra.ReferenceAsList[terra.MapValue[terra.StringValue]](c.ref.Append("details"))
}

func (c ConditionsAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("message"))
}

type ContainerAttributes struct {
	ref terra.Reference
}

func (c ContainerAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ContainerAttributes) InternalWithRef(ref terra.Reference) ContainerAttributes {
	return ContainerAttributes{ref: ref}
}

func (c ContainerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ContainerAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("args"))
}

func (c ContainerAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("command"))
}

func (c ContainerAttributes) Env() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("env"))
}

func (c ContainerAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c ContainerAttributes) RunAsUser() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("run_as_user"))
}

func (c ContainerAttributes) WorkingDir() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("working_dir"))
}

type EncryptionKeyAttributes struct {
	ref terra.Reference
}

func (ek EncryptionKeyAttributes) InternalRef() (terra.Reference, error) {
	return ek.ref, nil
}

func (ek EncryptionKeyAttributes) InternalWithRef(ref terra.Reference) EncryptionKeyAttributes {
	return EncryptionKeyAttributes{ref: ref}
}

func (ek EncryptionKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ek.ref.InternalTokens()
}

func (ek EncryptionKeyAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(ek.ref.Append("kms_key"))
}

func (ek EncryptionKeyAttributes) KmsKeyServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(ek.ref.Append("kms_key_service_account"))
}

type EphemeralDirectoriesAttributes struct {
	ref terra.Reference
}

func (ed EphemeralDirectoriesAttributes) InternalRef() (terra.Reference, error) {
	return ed.ref, nil
}

func (ed EphemeralDirectoriesAttributes) InternalWithRef(ref terra.Reference) EphemeralDirectoriesAttributes {
	return EphemeralDirectoriesAttributes{ref: ref}
}

func (ed EphemeralDirectoriesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ed.ref.InternalTokens()
}

func (ed EphemeralDirectoriesAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(ed.ref.Append("mount_path"))
}

func (ed EphemeralDirectoriesAttributes) GcePd() terra.ListValue[EphemeralDirectoriesGcePdAttributes] {
	return terra.ReferenceAsList[EphemeralDirectoriesGcePdAttributes](ed.ref.Append("gce_pd"))
}

type EphemeralDirectoriesGcePdAttributes struct {
	ref terra.Reference
}

func (gp EphemeralDirectoriesGcePdAttributes) InternalRef() (terra.Reference, error) {
	return gp.ref, nil
}

func (gp EphemeralDirectoriesGcePdAttributes) InternalWithRef(ref terra.Reference) EphemeralDirectoriesGcePdAttributes {
	return EphemeralDirectoriesGcePdAttributes{ref: ref}
}

func (gp EphemeralDirectoriesGcePdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gp.ref.InternalTokens()
}

func (gp EphemeralDirectoriesGcePdAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("disk_type"))
}

func (gp EphemeralDirectoriesGcePdAttributes) ReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(gp.ref.Append("read_only"))
}

func (gp EphemeralDirectoriesGcePdAttributes) SourceImage() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("source_image"))
}

func (gp EphemeralDirectoriesGcePdAttributes) SourceSnapshot() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("source_snapshot"))
}

type HostAttributes struct {
	ref terra.Reference
}

func (h HostAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HostAttributes) InternalWithRef(ref terra.Reference) HostAttributes {
	return HostAttributes{ref: ref}
}

func (h HostAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HostAttributes) GceInstance() terra.ListValue[HostGceInstanceAttributes] {
	return terra.ReferenceAsList[HostGceInstanceAttributes](h.ref.Append("gce_instance"))
}

type HostGceInstanceAttributes struct {
	ref terra.Reference
}

func (gi HostGceInstanceAttributes) InternalRef() (terra.Reference, error) {
	return gi.ref, nil
}

func (gi HostGceInstanceAttributes) InternalWithRef(ref terra.Reference) HostGceInstanceAttributes {
	return HostGceInstanceAttributes{ref: ref}
}

func (gi HostGceInstanceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gi.ref.InternalTokens()
}

func (gi HostGceInstanceAttributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(gi.ref.Append("boot_disk_size_gb"))
}

func (gi HostGceInstanceAttributes) DisablePublicIpAddresses() terra.BoolValue {
	return terra.ReferenceAsBool(gi.ref.Append("disable_public_ip_addresses"))
}

func (gi HostGceInstanceAttributes) DisableSsh() terra.BoolValue {
	return terra.ReferenceAsBool(gi.ref.Append("disable_ssh"))
}

func (gi HostGceInstanceAttributes) EnableNestedVirtualization() terra.BoolValue {
	return terra.ReferenceAsBool(gi.ref.Append("enable_nested_virtualization"))
}

func (gi HostGceInstanceAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(gi.ref.Append("machine_type"))
}

func (gi HostGceInstanceAttributes) PoolSize() terra.NumberValue {
	return terra.ReferenceAsNumber(gi.ref.Append("pool_size"))
}

func (gi HostGceInstanceAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(gi.ref.Append("service_account"))
}

func (gi HostGceInstanceAttributes) ServiceAccountScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gi.ref.Append("service_account_scopes"))
}

func (gi HostGceInstanceAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gi.ref.Append("tags"))
}

func (gi HostGceInstanceAttributes) Accelerators() terra.ListValue[HostGceInstanceAcceleratorsAttributes] {
	return terra.ReferenceAsList[HostGceInstanceAcceleratorsAttributes](gi.ref.Append("accelerators"))
}

func (gi HostGceInstanceAttributes) BoostConfigs() terra.ListValue[HostGceInstanceBoostConfigsAttributes] {
	return terra.ReferenceAsList[HostGceInstanceBoostConfigsAttributes](gi.ref.Append("boost_configs"))
}

func (gi HostGceInstanceAttributes) ConfidentialInstanceConfig() terra.ListValue[HostGceInstanceConfidentialInstanceConfigAttributes] {
	return terra.ReferenceAsList[HostGceInstanceConfidentialInstanceConfigAttributes](gi.ref.Append("confidential_instance_config"))
}

func (gi HostGceInstanceAttributes) ShieldedInstanceConfig() terra.ListValue[HostGceInstanceShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[HostGceInstanceShieldedInstanceConfigAttributes](gi.ref.Append("shielded_instance_config"))
}

type HostGceInstanceAcceleratorsAttributes struct {
	ref terra.Reference
}

func (a HostGceInstanceAcceleratorsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a HostGceInstanceAcceleratorsAttributes) InternalWithRef(ref terra.Reference) HostGceInstanceAcceleratorsAttributes {
	return HostGceInstanceAcceleratorsAttributes{ref: ref}
}

func (a HostGceInstanceAcceleratorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a HostGceInstanceAcceleratorsAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("count"))
}

func (a HostGceInstanceAcceleratorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

type HostGceInstanceBoostConfigsAttributes struct {
	ref terra.Reference
}

func (bc HostGceInstanceBoostConfigsAttributes) InternalRef() (terra.Reference, error) {
	return bc.ref, nil
}

func (bc HostGceInstanceBoostConfigsAttributes) InternalWithRef(ref terra.Reference) HostGceInstanceBoostConfigsAttributes {
	return HostGceInstanceBoostConfigsAttributes{ref: ref}
}

func (bc HostGceInstanceBoostConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bc.ref.InternalTokens()
}

func (bc HostGceInstanceBoostConfigsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("id"))
}

func (bc HostGceInstanceBoostConfigsAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("machine_type"))
}

func (bc HostGceInstanceBoostConfigsAttributes) Accelerators() terra.ListValue[HostGceInstanceBoostConfigsAcceleratorsAttributes] {
	return terra.ReferenceAsList[HostGceInstanceBoostConfigsAcceleratorsAttributes](bc.ref.Append("accelerators"))
}

type HostGceInstanceBoostConfigsAcceleratorsAttributes struct {
	ref terra.Reference
}

func (a HostGceInstanceBoostConfigsAcceleratorsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a HostGceInstanceBoostConfigsAcceleratorsAttributes) InternalWithRef(ref terra.Reference) HostGceInstanceBoostConfigsAcceleratorsAttributes {
	return HostGceInstanceBoostConfigsAcceleratorsAttributes{ref: ref}
}

func (a HostGceInstanceBoostConfigsAcceleratorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a HostGceInstanceBoostConfigsAcceleratorsAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("count"))
}

func (a HostGceInstanceBoostConfigsAcceleratorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

type HostGceInstanceConfidentialInstanceConfigAttributes struct {
	ref terra.Reference
}

func (cic HostGceInstanceConfidentialInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return cic.ref, nil
}

func (cic HostGceInstanceConfidentialInstanceConfigAttributes) InternalWithRef(ref terra.Reference) HostGceInstanceConfidentialInstanceConfigAttributes {
	return HostGceInstanceConfidentialInstanceConfigAttributes{ref: ref}
}

func (cic HostGceInstanceConfidentialInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cic.ref.InternalTokens()
}

func (cic HostGceInstanceConfidentialInstanceConfigAttributes) EnableConfidentialCompute() terra.BoolValue {
	return terra.ReferenceAsBool(cic.ref.Append("enable_confidential_compute"))
}

type HostGceInstanceShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic HostGceInstanceShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic HostGceInstanceShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) HostGceInstanceShieldedInstanceConfigAttributes {
	return HostGceInstanceShieldedInstanceConfigAttributes{ref: ref}
}

func (sic HostGceInstanceShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic HostGceInstanceShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic HostGceInstanceShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

func (sic HostGceInstanceShieldedInstanceConfigAttributes) EnableVtpm() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_vtpm"))
}

type PersistentDirectoriesAttributes struct {
	ref terra.Reference
}

func (pd PersistentDirectoriesAttributes) InternalRef() (terra.Reference, error) {
	return pd.ref, nil
}

func (pd PersistentDirectoriesAttributes) InternalWithRef(ref terra.Reference) PersistentDirectoriesAttributes {
	return PersistentDirectoriesAttributes{ref: ref}
}

func (pd PersistentDirectoriesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pd.ref.InternalTokens()
}

func (pd PersistentDirectoriesAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(pd.ref.Append("mount_path"))
}

func (pd PersistentDirectoriesAttributes) GcePd() terra.ListValue[PersistentDirectoriesGcePdAttributes] {
	return terra.ReferenceAsList[PersistentDirectoriesGcePdAttributes](pd.ref.Append("gce_pd"))
}

type PersistentDirectoriesGcePdAttributes struct {
	ref terra.Reference
}

func (gp PersistentDirectoriesGcePdAttributes) InternalRef() (terra.Reference, error) {
	return gp.ref, nil
}

func (gp PersistentDirectoriesGcePdAttributes) InternalWithRef(ref terra.Reference) PersistentDirectoriesGcePdAttributes {
	return PersistentDirectoriesGcePdAttributes{ref: ref}
}

func (gp PersistentDirectoriesGcePdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gp.ref.InternalTokens()
}

func (gp PersistentDirectoriesGcePdAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("disk_type"))
}

func (gp PersistentDirectoriesGcePdAttributes) FsType() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("fs_type"))
}

func (gp PersistentDirectoriesGcePdAttributes) ReclaimPolicy() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("reclaim_policy"))
}

func (gp PersistentDirectoriesGcePdAttributes) SizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(gp.ref.Append("size_gb"))
}

func (gp PersistentDirectoriesGcePdAttributes) SourceSnapshot() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("source_snapshot"))
}

type ReadinessChecksAttributes struct {
	ref terra.Reference
}

func (rc ReadinessChecksAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc ReadinessChecksAttributes) InternalWithRef(ref terra.Reference) ReadinessChecksAttributes {
	return ReadinessChecksAttributes{ref: ref}
}

func (rc ReadinessChecksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc ReadinessChecksAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("path"))
}

func (rc ReadinessChecksAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("port"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConditionsState struct {
	Code    float64             `json:"code"`
	Details []map[string]string `json:"details"`
	Message string              `json:"message"`
}

type ContainerState struct {
	Args       []string          `json:"args"`
	Command    []string          `json:"command"`
	Env        map[string]string `json:"env"`
	Image      string            `json:"image"`
	RunAsUser  float64           `json:"run_as_user"`
	WorkingDir string            `json:"working_dir"`
}

type EncryptionKeyState struct {
	KmsKey               string `json:"kms_key"`
	KmsKeyServiceAccount string `json:"kms_key_service_account"`
}

type EphemeralDirectoriesState struct {
	MountPath string                           `json:"mount_path"`
	GcePd     []EphemeralDirectoriesGcePdState `json:"gce_pd"`
}

type EphemeralDirectoriesGcePdState struct {
	DiskType       string `json:"disk_type"`
	ReadOnly       bool   `json:"read_only"`
	SourceImage    string `json:"source_image"`
	SourceSnapshot string `json:"source_snapshot"`
}

type HostState struct {
	GceInstance []HostGceInstanceState `json:"gce_instance"`
}

type HostGceInstanceState struct {
	BootDiskSizeGb             float64                                          `json:"boot_disk_size_gb"`
	DisablePublicIpAddresses   bool                                             `json:"disable_public_ip_addresses"`
	DisableSsh                 bool                                             `json:"disable_ssh"`
	EnableNestedVirtualization bool                                             `json:"enable_nested_virtualization"`
	MachineType                string                                           `json:"machine_type"`
	PoolSize                   float64                                          `json:"pool_size"`
	ServiceAccount             string                                           `json:"service_account"`
	ServiceAccountScopes       []string                                         `json:"service_account_scopes"`
	Tags                       []string                                         `json:"tags"`
	Accelerators               []HostGceInstanceAcceleratorsState               `json:"accelerators"`
	BoostConfigs               []HostGceInstanceBoostConfigsState               `json:"boost_configs"`
	ConfidentialInstanceConfig []HostGceInstanceConfidentialInstanceConfigState `json:"confidential_instance_config"`
	ShieldedInstanceConfig     []HostGceInstanceShieldedInstanceConfigState     `json:"shielded_instance_config"`
}

type HostGceInstanceAcceleratorsState struct {
	Count float64 `json:"count"`
	Type  string  `json:"type"`
}

type HostGceInstanceBoostConfigsState struct {
	Id           string                                         `json:"id"`
	MachineType  string                                         `json:"machine_type"`
	Accelerators []HostGceInstanceBoostConfigsAcceleratorsState `json:"accelerators"`
}

type HostGceInstanceBoostConfigsAcceleratorsState struct {
	Count float64 `json:"count"`
	Type  string  `json:"type"`
}

type HostGceInstanceConfidentialInstanceConfigState struct {
	EnableConfidentialCompute bool `json:"enable_confidential_compute"`
}

type HostGceInstanceShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
	EnableVtpm                bool `json:"enable_vtpm"`
}

type PersistentDirectoriesState struct {
	MountPath string                            `json:"mount_path"`
	GcePd     []PersistentDirectoriesGcePdState `json:"gce_pd"`
}

type PersistentDirectoriesGcePdState struct {
	DiskType       string  `json:"disk_type"`
	FsType         string  `json:"fs_type"`
	ReclaimPolicy  string  `json:"reclaim_policy"`
	SizeGb         float64 `json:"size_gb"`
	SourceSnapshot string  `json:"source_snapshot"`
}

type ReadinessChecksState struct {
	Path string  `json:"path"`
	Port float64 `json:"port"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
