// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dns_managed_zone

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dns_managed_zone.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDnsManagedZoneState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdmz *Resource) Type() string {
	return "google_dns_managed_zone"
}

// LocalName returns the local name for [Resource].
func (gdmz *Resource) LocalName() string {
	return gdmz.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdmz *Resource) Configuration() interface{} {
	return gdmz.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdmz *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdmz)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdmz *Resource) Dependencies() terra.Dependencies {
	return gdmz.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdmz *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdmz.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdmz *Resource) Attributes() googleDnsManagedZoneAttributes {
	return googleDnsManagedZoneAttributes{ref: terra.ReferenceResource(gdmz)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdmz *Resource) ImportState(state io.Reader) error {
	gdmz.state = &googleDnsManagedZoneState{}
	if err := json.NewDecoder(state).Decode(gdmz.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdmz.Type(), gdmz.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdmz *Resource) State() (*googleDnsManagedZoneState, bool) {
	return gdmz.state, gdmz.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdmz *Resource) StateMust() *googleDnsManagedZoneState {
	if gdmz.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdmz.Type(), gdmz.LocalName()))
	}
	return gdmz.state
}

// Args contains the configurations for google_dns_managed_zone.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DnsName: string, required
	DnsName terra.StringValue `hcl:"dns_name,attr" validate:"required"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ReverseLookup: bool, optional
	ReverseLookup terra.BoolValue `hcl:"reverse_lookup,attr"`
	// Visibility: string, optional
	Visibility terra.StringValue `hcl:"visibility,attr"`
	// CloudLoggingConfig: optional
	CloudLoggingConfig *CloudLoggingConfig `hcl:"cloud_logging_config,block"`
	// DnssecConfig: optional
	DnssecConfig *DnssecConfig `hcl:"dnssec_config,block"`
	// ForwardingConfig: optional
	ForwardingConfig *ForwardingConfig `hcl:"forwarding_config,block"`
	// PeeringConfig: optional
	PeeringConfig *PeeringConfig `hcl:"peering_config,block"`
	// PrivateVisibilityConfig: optional
	PrivateVisibilityConfig *PrivateVisibilityConfig `hcl:"private_visibility_config,block"`
	// ServiceDirectoryConfig: optional
	ServiceDirectoryConfig *ServiceDirectoryConfig `hcl:"service_directory_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDnsManagedZoneAttributes struct {
	ref terra.Reference
}

// CreationTime returns a reference to field creation_time of google_dns_managed_zone.
func (gdmz googleDnsManagedZoneAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(gdmz.ref.Append("creation_time"))
}

// Description returns a reference to field description of google_dns_managed_zone.
func (gdmz googleDnsManagedZoneAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdmz.ref.Append("description"))
}

// DnsName returns a reference to field dns_name of google_dns_managed_zone.
func (gdmz googleDnsManagedZoneAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(gdmz.ref.Append("dns_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_dns_managed_zone.
func (gdmz googleDnsManagedZoneAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdmz.ref.Append("effective_labels"))
}

// ForceDestroy returns a reference to field force_destroy of google_dns_managed_zone.
func (gdmz googleDnsManagedZoneAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(gdmz.ref.Append("force_destroy"))
}

// Id returns a reference to field id of google_dns_managed_zone.
func (gdmz googleDnsManagedZoneAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdmz.ref.Append("id"))
}

// Labels returns a reference to field labels of google_dns_managed_zone.
func (gdmz googleDnsManagedZoneAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdmz.ref.Append("labels"))
}

// ManagedZoneId returns a reference to field managed_zone_id of google_dns_managed_zone.
func (gdmz googleDnsManagedZoneAttributes) ManagedZoneId() terra.NumberValue {
	return terra.ReferenceAsNumber(gdmz.ref.Append("managed_zone_id"))
}

// Name returns a reference to field name of google_dns_managed_zone.
func (gdmz googleDnsManagedZoneAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdmz.ref.Append("name"))
}

// NameServers returns a reference to field name_servers of google_dns_managed_zone.
func (gdmz googleDnsManagedZoneAttributes) NameServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gdmz.ref.Append("name_servers"))
}

// Project returns a reference to field project of google_dns_managed_zone.
func (gdmz googleDnsManagedZoneAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdmz.ref.Append("project"))
}

// ReverseLookup returns a reference to field reverse_lookup of google_dns_managed_zone.
func (gdmz googleDnsManagedZoneAttributes) ReverseLookup() terra.BoolValue {
	return terra.ReferenceAsBool(gdmz.ref.Append("reverse_lookup"))
}

// TerraformLabels returns a reference to field terraform_labels of google_dns_managed_zone.
func (gdmz googleDnsManagedZoneAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdmz.ref.Append("terraform_labels"))
}

// Visibility returns a reference to field visibility of google_dns_managed_zone.
func (gdmz googleDnsManagedZoneAttributes) Visibility() terra.StringValue {
	return terra.ReferenceAsString(gdmz.ref.Append("visibility"))
}

func (gdmz googleDnsManagedZoneAttributes) CloudLoggingConfig() terra.ListValue[CloudLoggingConfigAttributes] {
	return terra.ReferenceAsList[CloudLoggingConfigAttributes](gdmz.ref.Append("cloud_logging_config"))
}

func (gdmz googleDnsManagedZoneAttributes) DnssecConfig() terra.ListValue[DnssecConfigAttributes] {
	return terra.ReferenceAsList[DnssecConfigAttributes](gdmz.ref.Append("dnssec_config"))
}

func (gdmz googleDnsManagedZoneAttributes) ForwardingConfig() terra.ListValue[ForwardingConfigAttributes] {
	return terra.ReferenceAsList[ForwardingConfigAttributes](gdmz.ref.Append("forwarding_config"))
}

func (gdmz googleDnsManagedZoneAttributes) PeeringConfig() terra.ListValue[PeeringConfigAttributes] {
	return terra.ReferenceAsList[PeeringConfigAttributes](gdmz.ref.Append("peering_config"))
}

func (gdmz googleDnsManagedZoneAttributes) PrivateVisibilityConfig() terra.ListValue[PrivateVisibilityConfigAttributes] {
	return terra.ReferenceAsList[PrivateVisibilityConfigAttributes](gdmz.ref.Append("private_visibility_config"))
}

func (gdmz googleDnsManagedZoneAttributes) ServiceDirectoryConfig() terra.ListValue[ServiceDirectoryConfigAttributes] {
	return terra.ReferenceAsList[ServiceDirectoryConfigAttributes](gdmz.ref.Append("service_directory_config"))
}

func (gdmz googleDnsManagedZoneAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdmz.ref.Append("timeouts"))
}

type googleDnsManagedZoneState struct {
	CreationTime            string                         `json:"creation_time"`
	Description             string                         `json:"description"`
	DnsName                 string                         `json:"dns_name"`
	EffectiveLabels         map[string]string              `json:"effective_labels"`
	ForceDestroy            bool                           `json:"force_destroy"`
	Id                      string                         `json:"id"`
	Labels                  map[string]string              `json:"labels"`
	ManagedZoneId           float64                        `json:"managed_zone_id"`
	Name                    string                         `json:"name"`
	NameServers             []string                       `json:"name_servers"`
	Project                 string                         `json:"project"`
	ReverseLookup           bool                           `json:"reverse_lookup"`
	TerraformLabels         map[string]string              `json:"terraform_labels"`
	Visibility              string                         `json:"visibility"`
	CloudLoggingConfig      []CloudLoggingConfigState      `json:"cloud_logging_config"`
	DnssecConfig            []DnssecConfigState            `json:"dnssec_config"`
	ForwardingConfig        []ForwardingConfigState        `json:"forwarding_config"`
	PeeringConfig           []PeeringConfigState           `json:"peering_config"`
	PrivateVisibilityConfig []PrivateVisibilityConfigState `json:"private_visibility_config"`
	ServiceDirectoryConfig  []ServiceDirectoryConfigState  `json:"service_directory_config"`
	Timeouts                *TimeoutsState                 `json:"timeouts"`
}
