// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dns_managed_zone

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CloudLoggingConfig struct {
	// EnableLogging: bool, required
	EnableLogging terra.BoolValue `hcl:"enable_logging,attr" validate:"required"`
}

type DnssecConfig struct {
	// Kind: string, optional
	Kind terra.StringValue `hcl:"kind,attr"`
	// NonExistence: string, optional
	NonExistence terra.StringValue `hcl:"non_existence,attr"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// DnssecConfigDefaultKeySpecs: min=0
	DefaultKeySpecs []DnssecConfigDefaultKeySpecs `hcl:"default_key_specs,block" validate:"min=0"`
}

type DnssecConfigDefaultKeySpecs struct {
	// Algorithm: string, optional
	Algorithm terra.StringValue `hcl:"algorithm,attr"`
	// KeyLength: number, optional
	KeyLength terra.NumberValue `hcl:"key_length,attr"`
	// KeyType: string, optional
	KeyType terra.StringValue `hcl:"key_type,attr"`
	// Kind: string, optional
	Kind terra.StringValue `hcl:"kind,attr"`
}

type ForwardingConfig struct {
	// ForwardingConfigTargetNameServers: min=1
	TargetNameServers []ForwardingConfigTargetNameServers `hcl:"target_name_servers,block" validate:"min=1"`
}

type ForwardingConfigTargetNameServers struct {
	// ForwardingPath: string, optional
	ForwardingPath terra.StringValue `hcl:"forwarding_path,attr"`
	// Ipv4Address: string, required
	Ipv4Address terra.StringValue `hcl:"ipv4_address,attr" validate:"required"`
}

type PeeringConfig struct {
	// PeeringConfigTargetNetwork: required
	TargetNetwork *PeeringConfigTargetNetwork `hcl:"target_network,block" validate:"required"`
}

type PeeringConfigTargetNetwork struct {
	// NetworkUrl: string, required
	NetworkUrl terra.StringValue `hcl:"network_url,attr" validate:"required"`
}

type PrivateVisibilityConfig struct {
	// PrivateVisibilityConfigGkeClusters: min=0
	GkeClusters []PrivateVisibilityConfigGkeClusters `hcl:"gke_clusters,block" validate:"min=0"`
	// PrivateVisibilityConfigNetworks: min=0
	Networks []PrivateVisibilityConfigNetworks `hcl:"networks,block" validate:"min=0"`
}

type PrivateVisibilityConfigGkeClusters struct {
	// GkeClusterName: string, required
	GkeClusterName terra.StringValue `hcl:"gke_cluster_name,attr" validate:"required"`
}

type PrivateVisibilityConfigNetworks struct {
	// NetworkUrl: string, required
	NetworkUrl terra.StringValue `hcl:"network_url,attr" validate:"required"`
}

type ServiceDirectoryConfig struct {
	// ServiceDirectoryConfigNamespace: required
	Namespace *ServiceDirectoryConfigNamespace `hcl:"namespace,block" validate:"required"`
}

type ServiceDirectoryConfigNamespace struct {
	// NamespaceUrl: string, required
	NamespaceUrl terra.StringValue `hcl:"namespace_url,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CloudLoggingConfigAttributes struct {
	ref terra.Reference
}

func (clc CloudLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return clc.ref, nil
}

func (clc CloudLoggingConfigAttributes) InternalWithRef(ref terra.Reference) CloudLoggingConfigAttributes {
	return CloudLoggingConfigAttributes{ref: ref}
}

func (clc CloudLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clc.ref.InternalTokens()
}

func (clc CloudLoggingConfigAttributes) EnableLogging() terra.BoolValue {
	return terra.ReferenceAsBool(clc.ref.Append("enable_logging"))
}

type DnssecConfigAttributes struct {
	ref terra.Reference
}

func (dc DnssecConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DnssecConfigAttributes) InternalWithRef(ref terra.Reference) DnssecConfigAttributes {
	return DnssecConfigAttributes{ref: ref}
}

func (dc DnssecConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DnssecConfigAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("kind"))
}

func (dc DnssecConfigAttributes) NonExistence() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("non_existence"))
}

func (dc DnssecConfigAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("state"))
}

func (dc DnssecConfigAttributes) DefaultKeySpecs() terra.ListValue[DnssecConfigDefaultKeySpecsAttributes] {
	return terra.ReferenceAsList[DnssecConfigDefaultKeySpecsAttributes](dc.ref.Append("default_key_specs"))
}

type DnssecConfigDefaultKeySpecsAttributes struct {
	ref terra.Reference
}

func (dks DnssecConfigDefaultKeySpecsAttributes) InternalRef() (terra.Reference, error) {
	return dks.ref, nil
}

func (dks DnssecConfigDefaultKeySpecsAttributes) InternalWithRef(ref terra.Reference) DnssecConfigDefaultKeySpecsAttributes {
	return DnssecConfigDefaultKeySpecsAttributes{ref: ref}
}

func (dks DnssecConfigDefaultKeySpecsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dks.ref.InternalTokens()
}

func (dks DnssecConfigDefaultKeySpecsAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceAsString(dks.ref.Append("algorithm"))
}

func (dks DnssecConfigDefaultKeySpecsAttributes) KeyLength() terra.NumberValue {
	return terra.ReferenceAsNumber(dks.ref.Append("key_length"))
}

func (dks DnssecConfigDefaultKeySpecsAttributes) KeyType() terra.StringValue {
	return terra.ReferenceAsString(dks.ref.Append("key_type"))
}

func (dks DnssecConfigDefaultKeySpecsAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(dks.ref.Append("kind"))
}

type ForwardingConfigAttributes struct {
	ref terra.Reference
}

func (fc ForwardingConfigAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc ForwardingConfigAttributes) InternalWithRef(ref terra.Reference) ForwardingConfigAttributes {
	return ForwardingConfigAttributes{ref: ref}
}

func (fc ForwardingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc ForwardingConfigAttributes) TargetNameServers() terra.SetValue[ForwardingConfigTargetNameServersAttributes] {
	return terra.ReferenceAsSet[ForwardingConfigTargetNameServersAttributes](fc.ref.Append("target_name_servers"))
}

type ForwardingConfigTargetNameServersAttributes struct {
	ref terra.Reference
}

func (tns ForwardingConfigTargetNameServersAttributes) InternalRef() (terra.Reference, error) {
	return tns.ref, nil
}

func (tns ForwardingConfigTargetNameServersAttributes) InternalWithRef(ref terra.Reference) ForwardingConfigTargetNameServersAttributes {
	return ForwardingConfigTargetNameServersAttributes{ref: ref}
}

func (tns ForwardingConfigTargetNameServersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tns.ref.InternalTokens()
}

func (tns ForwardingConfigTargetNameServersAttributes) ForwardingPath() terra.StringValue {
	return terra.ReferenceAsString(tns.ref.Append("forwarding_path"))
}

func (tns ForwardingConfigTargetNameServersAttributes) Ipv4Address() terra.StringValue {
	return terra.ReferenceAsString(tns.ref.Append("ipv4_address"))
}

type PeeringConfigAttributes struct {
	ref terra.Reference
}

func (pc PeeringConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PeeringConfigAttributes) InternalWithRef(ref terra.Reference) PeeringConfigAttributes {
	return PeeringConfigAttributes{ref: ref}
}

func (pc PeeringConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PeeringConfigAttributes) TargetNetwork() terra.ListValue[PeeringConfigTargetNetworkAttributes] {
	return terra.ReferenceAsList[PeeringConfigTargetNetworkAttributes](pc.ref.Append("target_network"))
}

type PeeringConfigTargetNetworkAttributes struct {
	ref terra.Reference
}

func (tn PeeringConfigTargetNetworkAttributes) InternalRef() (terra.Reference, error) {
	return tn.ref, nil
}

func (tn PeeringConfigTargetNetworkAttributes) InternalWithRef(ref terra.Reference) PeeringConfigTargetNetworkAttributes {
	return PeeringConfigTargetNetworkAttributes{ref: ref}
}

func (tn PeeringConfigTargetNetworkAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tn.ref.InternalTokens()
}

func (tn PeeringConfigTargetNetworkAttributes) NetworkUrl() terra.StringValue {
	return terra.ReferenceAsString(tn.ref.Append("network_url"))
}

type PrivateVisibilityConfigAttributes struct {
	ref terra.Reference
}

func (pvc PrivateVisibilityConfigAttributes) InternalRef() (terra.Reference, error) {
	return pvc.ref, nil
}

func (pvc PrivateVisibilityConfigAttributes) InternalWithRef(ref terra.Reference) PrivateVisibilityConfigAttributes {
	return PrivateVisibilityConfigAttributes{ref: ref}
}

func (pvc PrivateVisibilityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pvc.ref.InternalTokens()
}

func (pvc PrivateVisibilityConfigAttributes) GkeClusters() terra.ListValue[PrivateVisibilityConfigGkeClustersAttributes] {
	return terra.ReferenceAsList[PrivateVisibilityConfigGkeClustersAttributes](pvc.ref.Append("gke_clusters"))
}

func (pvc PrivateVisibilityConfigAttributes) Networks() terra.SetValue[PrivateVisibilityConfigNetworksAttributes] {
	return terra.ReferenceAsSet[PrivateVisibilityConfigNetworksAttributes](pvc.ref.Append("networks"))
}

type PrivateVisibilityConfigGkeClustersAttributes struct {
	ref terra.Reference
}

func (gc PrivateVisibilityConfigGkeClustersAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc PrivateVisibilityConfigGkeClustersAttributes) InternalWithRef(ref terra.Reference) PrivateVisibilityConfigGkeClustersAttributes {
	return PrivateVisibilityConfigGkeClustersAttributes{ref: ref}
}

func (gc PrivateVisibilityConfigGkeClustersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc PrivateVisibilityConfigGkeClustersAttributes) GkeClusterName() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("gke_cluster_name"))
}

type PrivateVisibilityConfigNetworksAttributes struct {
	ref terra.Reference
}

func (n PrivateVisibilityConfigNetworksAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n PrivateVisibilityConfigNetworksAttributes) InternalWithRef(ref terra.Reference) PrivateVisibilityConfigNetworksAttributes {
	return PrivateVisibilityConfigNetworksAttributes{ref: ref}
}

func (n PrivateVisibilityConfigNetworksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n PrivateVisibilityConfigNetworksAttributes) NetworkUrl() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("network_url"))
}

type ServiceDirectoryConfigAttributes struct {
	ref terra.Reference
}

func (sdc ServiceDirectoryConfigAttributes) InternalRef() (terra.Reference, error) {
	return sdc.ref, nil
}

func (sdc ServiceDirectoryConfigAttributes) InternalWithRef(ref terra.Reference) ServiceDirectoryConfigAttributes {
	return ServiceDirectoryConfigAttributes{ref: ref}
}

func (sdc ServiceDirectoryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sdc.ref.InternalTokens()
}

func (sdc ServiceDirectoryConfigAttributes) Namespace() terra.ListValue[ServiceDirectoryConfigNamespaceAttributes] {
	return terra.ReferenceAsList[ServiceDirectoryConfigNamespaceAttributes](sdc.ref.Append("namespace"))
}

type ServiceDirectoryConfigNamespaceAttributes struct {
	ref terra.Reference
}

func (n ServiceDirectoryConfigNamespaceAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n ServiceDirectoryConfigNamespaceAttributes) InternalWithRef(ref terra.Reference) ServiceDirectoryConfigNamespaceAttributes {
	return ServiceDirectoryConfigNamespaceAttributes{ref: ref}
}

func (n ServiceDirectoryConfigNamespaceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n ServiceDirectoryConfigNamespaceAttributes) NamespaceUrl() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("namespace_url"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CloudLoggingConfigState struct {
	EnableLogging bool `json:"enable_logging"`
}

type DnssecConfigState struct {
	Kind            string                             `json:"kind"`
	NonExistence    string                             `json:"non_existence"`
	State           string                             `json:"state"`
	DefaultKeySpecs []DnssecConfigDefaultKeySpecsState `json:"default_key_specs"`
}

type DnssecConfigDefaultKeySpecsState struct {
	Algorithm string  `json:"algorithm"`
	KeyLength float64 `json:"key_length"`
	KeyType   string  `json:"key_type"`
	Kind      string  `json:"kind"`
}

type ForwardingConfigState struct {
	TargetNameServers []ForwardingConfigTargetNameServersState `json:"target_name_servers"`
}

type ForwardingConfigTargetNameServersState struct {
	ForwardingPath string `json:"forwarding_path"`
	Ipv4Address    string `json:"ipv4_address"`
}

type PeeringConfigState struct {
	TargetNetwork []PeeringConfigTargetNetworkState `json:"target_network"`
}

type PeeringConfigTargetNetworkState struct {
	NetworkUrl string `json:"network_url"`
}

type PrivateVisibilityConfigState struct {
	GkeClusters []PrivateVisibilityConfigGkeClustersState `json:"gke_clusters"`
	Networks    []PrivateVisibilityConfigNetworksState    `json:"networks"`
}

type PrivateVisibilityConfigGkeClustersState struct {
	GkeClusterName string `json:"gke_cluster_name"`
}

type PrivateVisibilityConfigNetworksState struct {
	NetworkUrl string `json:"network_url"`
}

type ServiceDirectoryConfigState struct {
	Namespace []ServiceDirectoryConfigNamespaceState `json:"namespace"`
}

type ServiceDirectoryConfigNamespaceState struct {
	NamespaceUrl string `json:"namespace_url"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
