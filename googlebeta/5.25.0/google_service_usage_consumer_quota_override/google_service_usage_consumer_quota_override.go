// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_service_usage_consumer_quota_override

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_service_usage_consumer_quota_override.
type Resource struct {
	Name      string
	Args      Args
	state     *googleServiceUsageConsumerQuotaOverrideState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsucqo *Resource) Type() string {
	return "google_service_usage_consumer_quota_override"
}

// LocalName returns the local name for [Resource].
func (gsucqo *Resource) LocalName() string {
	return gsucqo.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsucqo *Resource) Configuration() interface{} {
	return gsucqo.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsucqo *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsucqo)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsucqo *Resource) Dependencies() terra.Dependencies {
	return gsucqo.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsucqo *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsucqo.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsucqo *Resource) Attributes() googleServiceUsageConsumerQuotaOverrideAttributes {
	return googleServiceUsageConsumerQuotaOverrideAttributes{ref: terra.ReferenceResource(gsucqo)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsucqo *Resource) ImportState(state io.Reader) error {
	gsucqo.state = &googleServiceUsageConsumerQuotaOverrideState{}
	if err := json.NewDecoder(state).Decode(gsucqo.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsucqo.Type(), gsucqo.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsucqo *Resource) State() (*googleServiceUsageConsumerQuotaOverrideState, bool) {
	return gsucqo.state, gsucqo.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsucqo *Resource) StateMust() *googleServiceUsageConsumerQuotaOverrideState {
	if gsucqo.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsucqo.Type(), gsucqo.LocalName()))
	}
	return gsucqo.state
}

// Args contains the configurations for google_service_usage_consumer_quota_override.
type Args struct {
	// Dimensions: map of string, optional
	Dimensions terra.MapValue[terra.StringValue] `hcl:"dimensions,attr"`
	// Force: bool, optional
	Force terra.BoolValue `hcl:"force,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Limit: string, required
	Limit terra.StringValue `hcl:"limit,attr" validate:"required"`
	// Metric: string, required
	Metric terra.StringValue `hcl:"metric,attr" validate:"required"`
	// OverrideValue: string, required
	OverrideValue terra.StringValue `hcl:"override_value,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleServiceUsageConsumerQuotaOverrideAttributes struct {
	ref terra.Reference
}

// Dimensions returns a reference to field dimensions of google_service_usage_consumer_quota_override.
func (gsucqo googleServiceUsageConsumerQuotaOverrideAttributes) Dimensions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsucqo.ref.Append("dimensions"))
}

// Force returns a reference to field force of google_service_usage_consumer_quota_override.
func (gsucqo googleServiceUsageConsumerQuotaOverrideAttributes) Force() terra.BoolValue {
	return terra.ReferenceAsBool(gsucqo.ref.Append("force"))
}

// Id returns a reference to field id of google_service_usage_consumer_quota_override.
func (gsucqo googleServiceUsageConsumerQuotaOverrideAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsucqo.ref.Append("id"))
}

// Limit returns a reference to field limit of google_service_usage_consumer_quota_override.
func (gsucqo googleServiceUsageConsumerQuotaOverrideAttributes) Limit() terra.StringValue {
	return terra.ReferenceAsString(gsucqo.ref.Append("limit"))
}

// Metric returns a reference to field metric of google_service_usage_consumer_quota_override.
func (gsucqo googleServiceUsageConsumerQuotaOverrideAttributes) Metric() terra.StringValue {
	return terra.ReferenceAsString(gsucqo.ref.Append("metric"))
}

// Name returns a reference to field name of google_service_usage_consumer_quota_override.
func (gsucqo googleServiceUsageConsumerQuotaOverrideAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsucqo.ref.Append("name"))
}

// OverrideValue returns a reference to field override_value of google_service_usage_consumer_quota_override.
func (gsucqo googleServiceUsageConsumerQuotaOverrideAttributes) OverrideValue() terra.StringValue {
	return terra.ReferenceAsString(gsucqo.ref.Append("override_value"))
}

// Project returns a reference to field project of google_service_usage_consumer_quota_override.
func (gsucqo googleServiceUsageConsumerQuotaOverrideAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gsucqo.ref.Append("project"))
}

// Service returns a reference to field service of google_service_usage_consumer_quota_override.
func (gsucqo googleServiceUsageConsumerQuotaOverrideAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(gsucqo.ref.Append("service"))
}

func (gsucqo googleServiceUsageConsumerQuotaOverrideAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsucqo.ref.Append("timeouts"))
}

type googleServiceUsageConsumerQuotaOverrideState struct {
	Dimensions    map[string]string `json:"dimensions"`
	Force         bool              `json:"force"`
	Id            string            `json:"id"`
	Limit         string            `json:"limit"`
	Metric        string            `json:"metric"`
	Name          string            `json:"name"`
	OverrideValue string            `json:"override_value"`
	Project       string            `json:"project"`
	Service       string            `json:"service"`
	Timeouts      *TimeoutsState    `json:"timeouts"`
}
