// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_network_attachment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type ConnectionEndpointsAttributes struct {
	ref terra.Reference
}

func (ce ConnectionEndpointsAttributes) InternalRef() (terra.Reference, error) {
	return ce.ref, nil
}

func (ce ConnectionEndpointsAttributes) InternalWithRef(ref terra.Reference) ConnectionEndpointsAttributes {
	return ConnectionEndpointsAttributes{ref: ref}
}

func (ce ConnectionEndpointsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ce.ref.InternalTokens()
}

func (ce ConnectionEndpointsAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ce.ref.Append("ip_address"))
}

func (ce ConnectionEndpointsAttributes) ProjectIdOrNum() terra.StringValue {
	return terra.ReferenceAsString(ce.ref.Append("project_id_or_num"))
}

func (ce ConnectionEndpointsAttributes) SecondaryIpCidrRanges() terra.StringValue {
	return terra.ReferenceAsString(ce.ref.Append("secondary_ip_cidr_ranges"))
}

func (ce ConnectionEndpointsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ce.ref.Append("status"))
}

func (ce ConnectionEndpointsAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(ce.ref.Append("subnetwork"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type ConnectionEndpointsState struct {
	IpAddress             string `json:"ip_address"`
	ProjectIdOrNum        string `json:"project_id_or_num"`
	SecondaryIpCidrRanges string `json:"secondary_ip_cidr_ranges"`
	Status                string `json:"status"`
	Subnetwork            string `json:"subnetwork"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
