// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_network_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_network_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeNetworkAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcna *Resource) Type() string {
	return "google_compute_network_attachment"
}

// LocalName returns the local name for [Resource].
func (gcna *Resource) LocalName() string {
	return gcna.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcna *Resource) Configuration() interface{} {
	return gcna.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcna *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcna)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcna *Resource) Dependencies() terra.Dependencies {
	return gcna.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcna *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcna.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcna *Resource) Attributes() googleComputeNetworkAttachmentAttributes {
	return googleComputeNetworkAttachmentAttributes{ref: terra.ReferenceResource(gcna)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcna *Resource) ImportState(state io.Reader) error {
	gcna.state = &googleComputeNetworkAttachmentState{}
	if err := json.NewDecoder(state).Decode(gcna.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcna.Type(), gcna.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcna *Resource) State() (*googleComputeNetworkAttachmentState, bool) {
	return gcna.state, gcna.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcna *Resource) StateMust() *googleComputeNetworkAttachmentState {
	if gcna.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcna.Type(), gcna.LocalName()))
	}
	return gcna.state
}

// Args contains the configurations for google_compute_network_attachment.
type Args struct {
	// ConnectionPreference: string, required
	ConnectionPreference terra.StringValue `hcl:"connection_preference,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProducerAcceptLists: list of string, optional
	ProducerAcceptLists terra.ListValue[terra.StringValue] `hcl:"producer_accept_lists,attr"`
	// ProducerRejectLists: list of string, optional
	ProducerRejectLists terra.ListValue[terra.StringValue] `hcl:"producer_reject_lists,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Subnetworks: list of string, required
	Subnetworks terra.ListValue[terra.StringValue] `hcl:"subnetworks,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeNetworkAttachmentAttributes struct {
	ref terra.Reference
}

// ConnectionPreference returns a reference to field connection_preference of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) ConnectionPreference() terra.StringValue {
	return terra.ReferenceAsString(gcna.ref.Append("connection_preference"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcna.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcna.ref.Append("description"))
}

// Fingerprint returns a reference to field fingerprint of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(gcna.ref.Append("fingerprint"))
}

// Id returns a reference to field id of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcna.ref.Append("id"))
}

// Kind returns a reference to field kind of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(gcna.ref.Append("kind"))
}

// Name returns a reference to field name of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcna.ref.Append("name"))
}

// Network returns a reference to field network of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gcna.ref.Append("network"))
}

// ProducerAcceptLists returns a reference to field producer_accept_lists of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) ProducerAcceptLists() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcna.ref.Append("producer_accept_lists"))
}

// ProducerRejectLists returns a reference to field producer_reject_lists of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) ProducerRejectLists() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcna.ref.Append("producer_reject_lists"))
}

// Project returns a reference to field project of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcna.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcna.ref.Append("region"))
}

// SelfLink returns a reference to field self_link of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcna.ref.Append("self_link"))
}

// SelfLinkWithId returns a reference to field self_link_with_id of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) SelfLinkWithId() terra.StringValue {
	return terra.ReferenceAsString(gcna.ref.Append("self_link_with_id"))
}

// Subnetworks returns a reference to field subnetworks of google_compute_network_attachment.
func (gcna googleComputeNetworkAttachmentAttributes) Subnetworks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcna.ref.Append("subnetworks"))
}

func (gcna googleComputeNetworkAttachmentAttributes) ConnectionEndpoints() terra.ListValue[ConnectionEndpointsAttributes] {
	return terra.ReferenceAsList[ConnectionEndpointsAttributes](gcna.ref.Append("connection_endpoints"))
}

func (gcna googleComputeNetworkAttachmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcna.ref.Append("timeouts"))
}

type googleComputeNetworkAttachmentState struct {
	ConnectionPreference string                     `json:"connection_preference"`
	CreationTimestamp    string                     `json:"creation_timestamp"`
	Description          string                     `json:"description"`
	Fingerprint          string                     `json:"fingerprint"`
	Id                   string                     `json:"id"`
	Kind                 string                     `json:"kind"`
	Name                 string                     `json:"name"`
	Network              string                     `json:"network"`
	ProducerAcceptLists  []string                   `json:"producer_accept_lists"`
	ProducerRejectLists  []string                   `json:"producer_reject_lists"`
	Project              string                     `json:"project"`
	Region               string                     `json:"region"`
	SelfLink             string                     `json:"self_link"`
	SelfLinkWithId       string                     `json:"self_link_with_id"`
	Subnetworks          []string                   `json:"subnetworks"`
	ConnectionEndpoints  []ConnectionEndpointsState `json:"connection_endpoints"`
	Timeouts             *TimeoutsState             `json:"timeouts"`
}
