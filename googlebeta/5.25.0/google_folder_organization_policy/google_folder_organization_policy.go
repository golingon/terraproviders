// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_folder_organization_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_folder_organization_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFolderOrganizationPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfop *Resource) Type() string {
	return "google_folder_organization_policy"
}

// LocalName returns the local name for [Resource].
func (gfop *Resource) LocalName() string {
	return gfop.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfop *Resource) Configuration() interface{} {
	return gfop.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfop *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfop)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfop *Resource) Dependencies() terra.Dependencies {
	return gfop.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfop *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfop.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfop *Resource) Attributes() googleFolderOrganizationPolicyAttributes {
	return googleFolderOrganizationPolicyAttributes{ref: terra.ReferenceResource(gfop)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfop *Resource) ImportState(state io.Reader) error {
	gfop.state = &googleFolderOrganizationPolicyState{}
	if err := json.NewDecoder(state).Decode(gfop.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfop.Type(), gfop.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfop *Resource) State() (*googleFolderOrganizationPolicyState, bool) {
	return gfop.state, gfop.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfop *Resource) StateMust() *googleFolderOrganizationPolicyState {
	if gfop.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfop.Type(), gfop.LocalName()))
	}
	return gfop.state
}

// Args contains the configurations for google_folder_organization_policy.
type Args struct {
	// Constraint: string, required
	Constraint terra.StringValue `hcl:"constraint,attr" validate:"required"`
	// Folder: string, required
	Folder terra.StringValue `hcl:"folder,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Version: number, optional
	Version terra.NumberValue `hcl:"version,attr"`
	// BooleanPolicy: optional
	BooleanPolicy *BooleanPolicy `hcl:"boolean_policy,block"`
	// ListPolicy: optional
	ListPolicy *ListPolicy `hcl:"list_policy,block"`
	// RestorePolicy: optional
	RestorePolicy *RestorePolicy `hcl:"restore_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFolderOrganizationPolicyAttributes struct {
	ref terra.Reference
}

// Constraint returns a reference to field constraint of google_folder_organization_policy.
func (gfop googleFolderOrganizationPolicyAttributes) Constraint() terra.StringValue {
	return terra.ReferenceAsString(gfop.ref.Append("constraint"))
}

// Etag returns a reference to field etag of google_folder_organization_policy.
func (gfop googleFolderOrganizationPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gfop.ref.Append("etag"))
}

// Folder returns a reference to field folder of google_folder_organization_policy.
func (gfop googleFolderOrganizationPolicyAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(gfop.ref.Append("folder"))
}

// Id returns a reference to field id of google_folder_organization_policy.
func (gfop googleFolderOrganizationPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfop.ref.Append("id"))
}

// UpdateTime returns a reference to field update_time of google_folder_organization_policy.
func (gfop googleFolderOrganizationPolicyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gfop.ref.Append("update_time"))
}

// Version returns a reference to field version of google_folder_organization_policy.
func (gfop googleFolderOrganizationPolicyAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(gfop.ref.Append("version"))
}

func (gfop googleFolderOrganizationPolicyAttributes) BooleanPolicy() terra.ListValue[BooleanPolicyAttributes] {
	return terra.ReferenceAsList[BooleanPolicyAttributes](gfop.ref.Append("boolean_policy"))
}

func (gfop googleFolderOrganizationPolicyAttributes) ListPolicy() terra.ListValue[ListPolicyAttributes] {
	return terra.ReferenceAsList[ListPolicyAttributes](gfop.ref.Append("list_policy"))
}

func (gfop googleFolderOrganizationPolicyAttributes) RestorePolicy() terra.ListValue[RestorePolicyAttributes] {
	return terra.ReferenceAsList[RestorePolicyAttributes](gfop.ref.Append("restore_policy"))
}

func (gfop googleFolderOrganizationPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfop.ref.Append("timeouts"))
}

type googleFolderOrganizationPolicyState struct {
	Constraint    string               `json:"constraint"`
	Etag          string               `json:"etag"`
	Folder        string               `json:"folder"`
	Id            string               `json:"id"`
	UpdateTime    string               `json:"update_time"`
	Version       float64              `json:"version"`
	BooleanPolicy []BooleanPolicyState `json:"boolean_policy"`
	ListPolicy    []ListPolicyState    `json:"list_policy"`
	RestorePolicy []RestorePolicyState `json:"restore_policy"`
	Timeouts      *TimeoutsState       `json:"timeouts"`
}
