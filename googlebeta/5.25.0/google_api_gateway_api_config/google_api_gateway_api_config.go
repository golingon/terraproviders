// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_api_gateway_api_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_api_gateway_api_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApiGatewayApiConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gagac *Resource) Type() string {
	return "google_api_gateway_api_config"
}

// LocalName returns the local name for [Resource].
func (gagac *Resource) LocalName() string {
	return gagac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gagac *Resource) Configuration() interface{} {
	return gagac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gagac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gagac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gagac *Resource) Dependencies() terra.Dependencies {
	return gagac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gagac *Resource) LifecycleManagement() *terra.Lifecycle {
	return gagac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gagac *Resource) Attributes() googleApiGatewayApiConfigAttributes {
	return googleApiGatewayApiConfigAttributes{ref: terra.ReferenceResource(gagac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gagac *Resource) ImportState(state io.Reader) error {
	gagac.state = &googleApiGatewayApiConfigState{}
	if err := json.NewDecoder(state).Decode(gagac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gagac.Type(), gagac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gagac *Resource) State() (*googleApiGatewayApiConfigState, bool) {
	return gagac.state, gagac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gagac *Resource) StateMust() *googleApiGatewayApiConfigState {
	if gagac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gagac.Type(), gagac.LocalName()))
	}
	return gagac.state
}

// Args contains the configurations for google_api_gateway_api_config.
type Args struct {
	// Api: string, required
	Api terra.StringValue `hcl:"api,attr" validate:"required"`
	// ApiConfigId: string, optional
	ApiConfigId terra.StringValue `hcl:"api_config_id,attr"`
	// ApiConfigIdPrefix: string, optional
	ApiConfigIdPrefix terra.StringValue `hcl:"api_config_id_prefix,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// GatewayConfig: optional
	GatewayConfig *GatewayConfig `hcl:"gateway_config,block"`
	// GrpcServices: min=0
	GrpcServices []GrpcServices `hcl:"grpc_services,block" validate:"min=0"`
	// ManagedServiceConfigs: min=0
	ManagedServiceConfigs []ManagedServiceConfigs `hcl:"managed_service_configs,block" validate:"min=0"`
	// OpenapiDocuments: min=0
	OpenapiDocuments []OpenapiDocuments `hcl:"openapi_documents,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApiGatewayApiConfigAttributes struct {
	ref terra.Reference
}

// Api returns a reference to field api of google_api_gateway_api_config.
func (gagac googleApiGatewayApiConfigAttributes) Api() terra.StringValue {
	return terra.ReferenceAsString(gagac.ref.Append("api"))
}

// ApiConfigId returns a reference to field api_config_id of google_api_gateway_api_config.
func (gagac googleApiGatewayApiConfigAttributes) ApiConfigId() terra.StringValue {
	return terra.ReferenceAsString(gagac.ref.Append("api_config_id"))
}

// ApiConfigIdPrefix returns a reference to field api_config_id_prefix of google_api_gateway_api_config.
func (gagac googleApiGatewayApiConfigAttributes) ApiConfigIdPrefix() terra.StringValue {
	return terra.ReferenceAsString(gagac.ref.Append("api_config_id_prefix"))
}

// DisplayName returns a reference to field display_name of google_api_gateway_api_config.
func (gagac googleApiGatewayApiConfigAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gagac.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_api_gateway_api_config.
func (gagac googleApiGatewayApiConfigAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gagac.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_api_gateway_api_config.
func (gagac googleApiGatewayApiConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gagac.ref.Append("id"))
}

// Labels returns a reference to field labels of google_api_gateway_api_config.
func (gagac googleApiGatewayApiConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gagac.ref.Append("labels"))
}

// Name returns a reference to field name of google_api_gateway_api_config.
func (gagac googleApiGatewayApiConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gagac.ref.Append("name"))
}

// Project returns a reference to field project of google_api_gateway_api_config.
func (gagac googleApiGatewayApiConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gagac.ref.Append("project"))
}

// ServiceConfigId returns a reference to field service_config_id of google_api_gateway_api_config.
func (gagac googleApiGatewayApiConfigAttributes) ServiceConfigId() terra.StringValue {
	return terra.ReferenceAsString(gagac.ref.Append("service_config_id"))
}

// TerraformLabels returns a reference to field terraform_labels of google_api_gateway_api_config.
func (gagac googleApiGatewayApiConfigAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gagac.ref.Append("terraform_labels"))
}

func (gagac googleApiGatewayApiConfigAttributes) GatewayConfig() terra.ListValue[GatewayConfigAttributes] {
	return terra.ReferenceAsList[GatewayConfigAttributes](gagac.ref.Append("gateway_config"))
}

func (gagac googleApiGatewayApiConfigAttributes) GrpcServices() terra.ListValue[GrpcServicesAttributes] {
	return terra.ReferenceAsList[GrpcServicesAttributes](gagac.ref.Append("grpc_services"))
}

func (gagac googleApiGatewayApiConfigAttributes) ManagedServiceConfigs() terra.ListValue[ManagedServiceConfigsAttributes] {
	return terra.ReferenceAsList[ManagedServiceConfigsAttributes](gagac.ref.Append("managed_service_configs"))
}

func (gagac googleApiGatewayApiConfigAttributes) OpenapiDocuments() terra.ListValue[OpenapiDocumentsAttributes] {
	return terra.ReferenceAsList[OpenapiDocumentsAttributes](gagac.ref.Append("openapi_documents"))
}

func (gagac googleApiGatewayApiConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gagac.ref.Append("timeouts"))
}

type googleApiGatewayApiConfigState struct {
	Api                   string                       `json:"api"`
	ApiConfigId           string                       `json:"api_config_id"`
	ApiConfigIdPrefix     string                       `json:"api_config_id_prefix"`
	DisplayName           string                       `json:"display_name"`
	EffectiveLabels       map[string]string            `json:"effective_labels"`
	Id                    string                       `json:"id"`
	Labels                map[string]string            `json:"labels"`
	Name                  string                       `json:"name"`
	Project               string                       `json:"project"`
	ServiceConfigId       string                       `json:"service_config_id"`
	TerraformLabels       map[string]string            `json:"terraform_labels"`
	GatewayConfig         []GatewayConfigState         `json:"gateway_config"`
	GrpcServices          []GrpcServicesState          `json:"grpc_services"`
	ManagedServiceConfigs []ManagedServiceConfigsState `json:"managed_service_configs"`
	OpenapiDocuments      []OpenapiDocumentsState      `json:"openapi_documents"`
	Timeouts              *TimeoutsState               `json:"timeouts"`
}
