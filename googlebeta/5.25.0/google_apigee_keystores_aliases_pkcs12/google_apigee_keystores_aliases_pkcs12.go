// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apigee_keystores_aliases_pkcs12

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_apigee_keystores_aliases_pkcs12.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApigeeKeystoresAliasesPkcs12State
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gakap *Resource) Type() string {
	return "google_apigee_keystores_aliases_pkcs12"
}

// LocalName returns the local name for [Resource].
func (gakap *Resource) LocalName() string {
	return gakap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gakap *Resource) Configuration() interface{} {
	return gakap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gakap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gakap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gakap *Resource) Dependencies() terra.Dependencies {
	return gakap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gakap *Resource) LifecycleManagement() *terra.Lifecycle {
	return gakap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gakap *Resource) Attributes() googleApigeeKeystoresAliasesPkcs12Attributes {
	return googleApigeeKeystoresAliasesPkcs12Attributes{ref: terra.ReferenceResource(gakap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gakap *Resource) ImportState(state io.Reader) error {
	gakap.state = &googleApigeeKeystoresAliasesPkcs12State{}
	if err := json.NewDecoder(state).Decode(gakap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gakap.Type(), gakap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gakap *Resource) State() (*googleApigeeKeystoresAliasesPkcs12State, bool) {
	return gakap.state, gakap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gakap *Resource) StateMust() *googleApigeeKeystoresAliasesPkcs12State {
	if gakap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gakap.Type(), gakap.LocalName()))
	}
	return gakap.state
}

// Args contains the configurations for google_apigee_keystores_aliases_pkcs12.
type Args struct {
	// Alias: string, required
	Alias terra.StringValue `hcl:"alias,attr" validate:"required"`
	// Environment: string, required
	Environment terra.StringValue `hcl:"environment,attr" validate:"required"`
	// File: string, required
	File terra.StringValue `hcl:"file,attr" validate:"required"`
	// Filehash: string, required
	Filehash terra.StringValue `hcl:"filehash,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Keystore: string, required
	Keystore terra.StringValue `hcl:"keystore,attr" validate:"required"`
	// OrgId: string, required
	OrgId terra.StringValue `hcl:"org_id,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApigeeKeystoresAliasesPkcs12Attributes struct {
	ref terra.Reference
}

// Alias returns a reference to field alias of google_apigee_keystores_aliases_pkcs12.
func (gakap googleApigeeKeystoresAliasesPkcs12Attributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(gakap.ref.Append("alias"))
}

// Environment returns a reference to field environment of google_apigee_keystores_aliases_pkcs12.
func (gakap googleApigeeKeystoresAliasesPkcs12Attributes) Environment() terra.StringValue {
	return terra.ReferenceAsString(gakap.ref.Append("environment"))
}

// File returns a reference to field file of google_apigee_keystores_aliases_pkcs12.
func (gakap googleApigeeKeystoresAliasesPkcs12Attributes) File() terra.StringValue {
	return terra.ReferenceAsString(gakap.ref.Append("file"))
}

// Filehash returns a reference to field filehash of google_apigee_keystores_aliases_pkcs12.
func (gakap googleApigeeKeystoresAliasesPkcs12Attributes) Filehash() terra.StringValue {
	return terra.ReferenceAsString(gakap.ref.Append("filehash"))
}

// Id returns a reference to field id of google_apigee_keystores_aliases_pkcs12.
func (gakap googleApigeeKeystoresAliasesPkcs12Attributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gakap.ref.Append("id"))
}

// Keystore returns a reference to field keystore of google_apigee_keystores_aliases_pkcs12.
func (gakap googleApigeeKeystoresAliasesPkcs12Attributes) Keystore() terra.StringValue {
	return terra.ReferenceAsString(gakap.ref.Append("keystore"))
}

// OrgId returns a reference to field org_id of google_apigee_keystores_aliases_pkcs12.
func (gakap googleApigeeKeystoresAliasesPkcs12Attributes) OrgId() terra.StringValue {
	return terra.ReferenceAsString(gakap.ref.Append("org_id"))
}

// Password returns a reference to field password of google_apigee_keystores_aliases_pkcs12.
func (gakap googleApigeeKeystoresAliasesPkcs12Attributes) Password() terra.StringValue {
	return terra.ReferenceAsString(gakap.ref.Append("password"))
}

// Type returns a reference to field type of google_apigee_keystores_aliases_pkcs12.
func (gakap googleApigeeKeystoresAliasesPkcs12Attributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gakap.ref.Append("type"))
}

func (gakap googleApigeeKeystoresAliasesPkcs12Attributes) CertsInfo() terra.ListValue[CertsInfoAttributes] {
	return terra.ReferenceAsList[CertsInfoAttributes](gakap.ref.Append("certs_info"))
}

func (gakap googleApigeeKeystoresAliasesPkcs12Attributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gakap.ref.Append("timeouts"))
}

type googleApigeeKeystoresAliasesPkcs12State struct {
	Alias       string           `json:"alias"`
	Environment string           `json:"environment"`
	File        string           `json:"file"`
	Filehash    string           `json:"filehash"`
	Id          string           `json:"id"`
	Keystore    string           `json:"keystore"`
	OrgId       string           `json:"org_id"`
	Password    string           `json:"password"`
	Type        string           `json:"type"`
	CertsInfo   []CertsInfoState `json:"certs_info"`
	Timeouts    *TimeoutsState   `json:"timeouts"`
}
