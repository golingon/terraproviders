// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_region_url_map

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_region_url_map.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeRegionUrlMapState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcrum *Resource) Type() string {
	return "google_compute_region_url_map"
}

// LocalName returns the local name for [Resource].
func (gcrum *Resource) LocalName() string {
	return gcrum.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcrum *Resource) Configuration() interface{} {
	return gcrum.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcrum *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcrum)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcrum *Resource) Dependencies() terra.Dependencies {
	return gcrum.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcrum *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcrum.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcrum *Resource) Attributes() googleComputeRegionUrlMapAttributes {
	return googleComputeRegionUrlMapAttributes{ref: terra.ReferenceResource(gcrum)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcrum *Resource) ImportState(state io.Reader) error {
	gcrum.state = &googleComputeRegionUrlMapState{}
	if err := json.NewDecoder(state).Decode(gcrum.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcrum.Type(), gcrum.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcrum *Resource) State() (*googleComputeRegionUrlMapState, bool) {
	return gcrum.state, gcrum.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcrum *Resource) StateMust() *googleComputeRegionUrlMapState {
	if gcrum.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcrum.Type(), gcrum.LocalName()))
	}
	return gcrum.state
}

// Args contains the configurations for google_compute_region_url_map.
type Args struct {
	// DefaultService: string, optional
	DefaultService terra.StringValue `hcl:"default_service,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// DefaultRouteAction: optional
	DefaultRouteAction *DefaultRouteAction `hcl:"default_route_action,block"`
	// DefaultUrlRedirect: optional
	DefaultUrlRedirect *DefaultUrlRedirect `hcl:"default_url_redirect,block"`
	// HostRule: min=0
	HostRule []HostRule `hcl:"host_rule,block" validate:"min=0"`
	// PathMatcher: min=0
	PathMatcher []PathMatcher `hcl:"path_matcher,block" validate:"min=0"`
	// Test: min=0
	Test []Test `hcl:"test,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeRegionUrlMapAttributes struct {
	ref terra.Reference
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_region_url_map.
func (gcrum googleComputeRegionUrlMapAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcrum.ref.Append("creation_timestamp"))
}

// DefaultService returns a reference to field default_service of google_compute_region_url_map.
func (gcrum googleComputeRegionUrlMapAttributes) DefaultService() terra.StringValue {
	return terra.ReferenceAsString(gcrum.ref.Append("default_service"))
}

// Description returns a reference to field description of google_compute_region_url_map.
func (gcrum googleComputeRegionUrlMapAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcrum.ref.Append("description"))
}

// Fingerprint returns a reference to field fingerprint of google_compute_region_url_map.
func (gcrum googleComputeRegionUrlMapAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(gcrum.ref.Append("fingerprint"))
}

// Id returns a reference to field id of google_compute_region_url_map.
func (gcrum googleComputeRegionUrlMapAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcrum.ref.Append("id"))
}

// MapId returns a reference to field map_id of google_compute_region_url_map.
func (gcrum googleComputeRegionUrlMapAttributes) MapId() terra.NumberValue {
	return terra.ReferenceAsNumber(gcrum.ref.Append("map_id"))
}

// Name returns a reference to field name of google_compute_region_url_map.
func (gcrum googleComputeRegionUrlMapAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcrum.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_region_url_map.
func (gcrum googleComputeRegionUrlMapAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcrum.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_region_url_map.
func (gcrum googleComputeRegionUrlMapAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcrum.ref.Append("region"))
}

// SelfLink returns a reference to field self_link of google_compute_region_url_map.
func (gcrum googleComputeRegionUrlMapAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcrum.ref.Append("self_link"))
}

func (gcrum googleComputeRegionUrlMapAttributes) DefaultRouteAction() terra.ListValue[DefaultRouteActionAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionAttributes](gcrum.ref.Append("default_route_action"))
}

func (gcrum googleComputeRegionUrlMapAttributes) DefaultUrlRedirect() terra.ListValue[DefaultUrlRedirectAttributes] {
	return terra.ReferenceAsList[DefaultUrlRedirectAttributes](gcrum.ref.Append("default_url_redirect"))
}

func (gcrum googleComputeRegionUrlMapAttributes) HostRule() terra.SetValue[HostRuleAttributes] {
	return terra.ReferenceAsSet[HostRuleAttributes](gcrum.ref.Append("host_rule"))
}

func (gcrum googleComputeRegionUrlMapAttributes) PathMatcher() terra.ListValue[PathMatcherAttributes] {
	return terra.ReferenceAsList[PathMatcherAttributes](gcrum.ref.Append("path_matcher"))
}

func (gcrum googleComputeRegionUrlMapAttributes) Test() terra.ListValue[TestAttributes] {
	return terra.ReferenceAsList[TestAttributes](gcrum.ref.Append("test"))
}

func (gcrum googleComputeRegionUrlMapAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcrum.ref.Append("timeouts"))
}

type googleComputeRegionUrlMapState struct {
	CreationTimestamp  string                    `json:"creation_timestamp"`
	DefaultService     string                    `json:"default_service"`
	Description        string                    `json:"description"`
	Fingerprint        string                    `json:"fingerprint"`
	Id                 string                    `json:"id"`
	MapId              float64                   `json:"map_id"`
	Name               string                    `json:"name"`
	Project            string                    `json:"project"`
	Region             string                    `json:"region"`
	SelfLink           string                    `json:"self_link"`
	DefaultRouteAction []DefaultRouteActionState `json:"default_route_action"`
	DefaultUrlRedirect []DefaultUrlRedirectState `json:"default_url_redirect"`
	HostRule           []HostRuleState           `json:"host_rule"`
	PathMatcher        []PathMatcherState        `json:"path_matcher"`
	Test               []TestState               `json:"test"`
	Timeouts           *TimeoutsState            `json:"timeouts"`
}
