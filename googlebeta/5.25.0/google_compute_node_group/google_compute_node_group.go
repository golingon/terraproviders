// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_node_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_node_group.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeNodeGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcng *Resource) Type() string {
	return "google_compute_node_group"
}

// LocalName returns the local name for [Resource].
func (gcng *Resource) LocalName() string {
	return gcng.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcng *Resource) Configuration() interface{} {
	return gcng.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcng *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcng)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcng *Resource) Dependencies() terra.Dependencies {
	return gcng.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcng *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcng.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcng *Resource) Attributes() googleComputeNodeGroupAttributes {
	return googleComputeNodeGroupAttributes{ref: terra.ReferenceResource(gcng)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcng *Resource) ImportState(state io.Reader) error {
	gcng.state = &googleComputeNodeGroupState{}
	if err := json.NewDecoder(state).Decode(gcng.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcng.Type(), gcng.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcng *Resource) State() (*googleComputeNodeGroupState, bool) {
	return gcng.state, gcng.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcng *Resource) StateMust() *googleComputeNodeGroupState {
	if gcng.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcng.Type(), gcng.LocalName()))
	}
	return gcng.state
}

// Args contains the configurations for google_compute_node_group.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InitialSize: number, optional
	InitialSize terra.NumberValue `hcl:"initial_size,attr"`
	// MaintenanceInterval: string, optional
	MaintenanceInterval terra.StringValue `hcl:"maintenance_interval,attr"`
	// MaintenancePolicy: string, optional
	MaintenancePolicy terra.StringValue `hcl:"maintenance_policy,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NodeTemplate: string, required
	NodeTemplate terra.StringValue `hcl:"node_template,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// AutoscalingPolicy: optional
	AutoscalingPolicy *AutoscalingPolicy `hcl:"autoscaling_policy,block"`
	// MaintenanceWindow: optional
	MaintenanceWindow *MaintenanceWindow `hcl:"maintenance_window,block"`
	// ShareSettings: optional
	ShareSettings *ShareSettings `hcl:"share_settings,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeNodeGroupAttributes struct {
	ref terra.Reference
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_node_group.
func (gcng googleComputeNodeGroupAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcng.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_node_group.
func (gcng googleComputeNodeGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcng.ref.Append("description"))
}

// Id returns a reference to field id of google_compute_node_group.
func (gcng googleComputeNodeGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcng.ref.Append("id"))
}

// InitialSize returns a reference to field initial_size of google_compute_node_group.
func (gcng googleComputeNodeGroupAttributes) InitialSize() terra.NumberValue {
	return terra.ReferenceAsNumber(gcng.ref.Append("initial_size"))
}

// MaintenanceInterval returns a reference to field maintenance_interval of google_compute_node_group.
func (gcng googleComputeNodeGroupAttributes) MaintenanceInterval() terra.StringValue {
	return terra.ReferenceAsString(gcng.ref.Append("maintenance_interval"))
}

// MaintenancePolicy returns a reference to field maintenance_policy of google_compute_node_group.
func (gcng googleComputeNodeGroupAttributes) MaintenancePolicy() terra.StringValue {
	return terra.ReferenceAsString(gcng.ref.Append("maintenance_policy"))
}

// Name returns a reference to field name of google_compute_node_group.
func (gcng googleComputeNodeGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcng.ref.Append("name"))
}

// NodeTemplate returns a reference to field node_template of google_compute_node_group.
func (gcng googleComputeNodeGroupAttributes) NodeTemplate() terra.StringValue {
	return terra.ReferenceAsString(gcng.ref.Append("node_template"))
}

// Project returns a reference to field project of google_compute_node_group.
func (gcng googleComputeNodeGroupAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcng.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_compute_node_group.
func (gcng googleComputeNodeGroupAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcng.ref.Append("self_link"))
}

// Size returns a reference to field size of google_compute_node_group.
func (gcng googleComputeNodeGroupAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(gcng.ref.Append("size"))
}

// Zone returns a reference to field zone of google_compute_node_group.
func (gcng googleComputeNodeGroupAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gcng.ref.Append("zone"))
}

func (gcng googleComputeNodeGroupAttributes) AutoscalingPolicy() terra.ListValue[AutoscalingPolicyAttributes] {
	return terra.ReferenceAsList[AutoscalingPolicyAttributes](gcng.ref.Append("autoscaling_policy"))
}

func (gcng googleComputeNodeGroupAttributes) MaintenanceWindow() terra.ListValue[MaintenanceWindowAttributes] {
	return terra.ReferenceAsList[MaintenanceWindowAttributes](gcng.ref.Append("maintenance_window"))
}

func (gcng googleComputeNodeGroupAttributes) ShareSettings() terra.ListValue[ShareSettingsAttributes] {
	return terra.ReferenceAsList[ShareSettingsAttributes](gcng.ref.Append("share_settings"))
}

func (gcng googleComputeNodeGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcng.ref.Append("timeouts"))
}

type googleComputeNodeGroupState struct {
	CreationTimestamp   string                   `json:"creation_timestamp"`
	Description         string                   `json:"description"`
	Id                  string                   `json:"id"`
	InitialSize         float64                  `json:"initial_size"`
	MaintenanceInterval string                   `json:"maintenance_interval"`
	MaintenancePolicy   string                   `json:"maintenance_policy"`
	Name                string                   `json:"name"`
	NodeTemplate        string                   `json:"node_template"`
	Project             string                   `json:"project"`
	SelfLink            string                   `json:"self_link"`
	Size                float64                  `json:"size"`
	Zone                string                   `json:"zone"`
	AutoscalingPolicy   []AutoscalingPolicyState `json:"autoscaling_policy"`
	MaintenanceWindow   []MaintenanceWindowState `json:"maintenance_window"`
	ShareSettings       []ShareSettingsState     `json:"share_settings"`
	Timeouts            *TimeoutsState           `json:"timeouts"`
}
