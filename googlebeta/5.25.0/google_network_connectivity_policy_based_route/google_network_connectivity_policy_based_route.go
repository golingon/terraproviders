// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_network_connectivity_policy_based_route

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_network_connectivity_policy_based_route.
type Resource struct {
	Name      string
	Args      Args
	state     *googleNetworkConnectivityPolicyBasedRouteState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gncpbr *Resource) Type() string {
	return "google_network_connectivity_policy_based_route"
}

// LocalName returns the local name for [Resource].
func (gncpbr *Resource) LocalName() string {
	return gncpbr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gncpbr *Resource) Configuration() interface{} {
	return gncpbr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gncpbr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gncpbr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gncpbr *Resource) Dependencies() terra.Dependencies {
	return gncpbr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gncpbr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gncpbr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gncpbr *Resource) Attributes() googleNetworkConnectivityPolicyBasedRouteAttributes {
	return googleNetworkConnectivityPolicyBasedRouteAttributes{ref: terra.ReferenceResource(gncpbr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gncpbr *Resource) ImportState(state io.Reader) error {
	gncpbr.state = &googleNetworkConnectivityPolicyBasedRouteState{}
	if err := json.NewDecoder(state).Decode(gncpbr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gncpbr.Type(), gncpbr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gncpbr *Resource) State() (*googleNetworkConnectivityPolicyBasedRouteState, bool) {
	return gncpbr.state, gncpbr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gncpbr *Resource) StateMust() *googleNetworkConnectivityPolicyBasedRouteState {
	if gncpbr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gncpbr.Type(), gncpbr.LocalName()))
	}
	return gncpbr.state
}

// Args contains the configurations for google_network_connectivity_policy_based_route.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// NextHopIlbIp: string, optional
	NextHopIlbIp terra.StringValue `hcl:"next_hop_ilb_ip,attr"`
	// NextHopOtherRoutes: string, optional
	NextHopOtherRoutes terra.StringValue `hcl:"next_hop_other_routes,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Filter: required
	Filter *Filter `hcl:"filter,block" validate:"required"`
	// InterconnectAttachment: optional
	InterconnectAttachment *InterconnectAttachment `hcl:"interconnect_attachment,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VirtualMachine: optional
	VirtualMachine *VirtualMachine `hcl:"virtual_machine,block"`
}

type googleNetworkConnectivityPolicyBasedRouteAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_network_connectivity_policy_based_route.
func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gncpbr.ref.Append("create_time"))
}

// Description returns a reference to field description of google_network_connectivity_policy_based_route.
func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gncpbr.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_network_connectivity_policy_based_route.
func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gncpbr.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_network_connectivity_policy_based_route.
func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gncpbr.ref.Append("id"))
}

// Kind returns a reference to field kind of google_network_connectivity_policy_based_route.
func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(gncpbr.ref.Append("kind"))
}

// Labels returns a reference to field labels of google_network_connectivity_policy_based_route.
func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gncpbr.ref.Append("labels"))
}

// Name returns a reference to field name of google_network_connectivity_policy_based_route.
func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gncpbr.ref.Append("name"))
}

// Network returns a reference to field network of google_network_connectivity_policy_based_route.
func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gncpbr.ref.Append("network"))
}

// NextHopIlbIp returns a reference to field next_hop_ilb_ip of google_network_connectivity_policy_based_route.
func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) NextHopIlbIp() terra.StringValue {
	return terra.ReferenceAsString(gncpbr.ref.Append("next_hop_ilb_ip"))
}

// NextHopOtherRoutes returns a reference to field next_hop_other_routes of google_network_connectivity_policy_based_route.
func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) NextHopOtherRoutes() terra.StringValue {
	return terra.ReferenceAsString(gncpbr.ref.Append("next_hop_other_routes"))
}

// Priority returns a reference to field priority of google_network_connectivity_policy_based_route.
func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(gncpbr.ref.Append("priority"))
}

// Project returns a reference to field project of google_network_connectivity_policy_based_route.
func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gncpbr.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_network_connectivity_policy_based_route.
func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gncpbr.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_network_connectivity_policy_based_route.
func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gncpbr.ref.Append("update_time"))
}

func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) Warnings() terra.ListValue[WarningsAttributes] {
	return terra.ReferenceAsList[WarningsAttributes](gncpbr.ref.Append("warnings"))
}

func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceAsList[FilterAttributes](gncpbr.ref.Append("filter"))
}

func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) InterconnectAttachment() terra.ListValue[InterconnectAttachmentAttributes] {
	return terra.ReferenceAsList[InterconnectAttachmentAttributes](gncpbr.ref.Append("interconnect_attachment"))
}

func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gncpbr.ref.Append("timeouts"))
}

func (gncpbr googleNetworkConnectivityPolicyBasedRouteAttributes) VirtualMachine() terra.ListValue[VirtualMachineAttributes] {
	return terra.ReferenceAsList[VirtualMachineAttributes](gncpbr.ref.Append("virtual_machine"))
}

type googleNetworkConnectivityPolicyBasedRouteState struct {
	CreateTime             string                        `json:"create_time"`
	Description            string                        `json:"description"`
	EffectiveLabels        map[string]string             `json:"effective_labels"`
	Id                     string                        `json:"id"`
	Kind                   string                        `json:"kind"`
	Labels                 map[string]string             `json:"labels"`
	Name                   string                        `json:"name"`
	Network                string                        `json:"network"`
	NextHopIlbIp           string                        `json:"next_hop_ilb_ip"`
	NextHopOtherRoutes     string                        `json:"next_hop_other_routes"`
	Priority               float64                       `json:"priority"`
	Project                string                        `json:"project"`
	TerraformLabels        map[string]string             `json:"terraform_labels"`
	UpdateTime             string                        `json:"update_time"`
	Warnings               []WarningsState               `json:"warnings"`
	Filter                 []FilterState                 `json:"filter"`
	InterconnectAttachment []InterconnectAttachmentState `json:"interconnect_attachment"`
	Timeouts               *TimeoutsState                `json:"timeouts"`
	VirtualMachine         []VirtualMachineState         `json:"virtual_machine"`
}
