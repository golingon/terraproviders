// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_workstations_workstation

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_workstations_workstation.
type Resource struct {
	Name      string
	Args      Args
	state     *googleWorkstationsWorkstationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gww *Resource) Type() string {
	return "google_workstations_workstation"
}

// LocalName returns the local name for [Resource].
func (gww *Resource) LocalName() string {
	return gww.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gww *Resource) Configuration() interface{} {
	return gww.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gww *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gww)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gww *Resource) Dependencies() terra.Dependencies {
	return gww.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gww *Resource) LifecycleManagement() *terra.Lifecycle {
	return gww.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gww *Resource) Attributes() googleWorkstationsWorkstationAttributes {
	return googleWorkstationsWorkstationAttributes{ref: terra.ReferenceResource(gww)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gww *Resource) ImportState(state io.Reader) error {
	gww.state = &googleWorkstationsWorkstationState{}
	if err := json.NewDecoder(state).Decode(gww.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gww.Type(), gww.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gww *Resource) State() (*googleWorkstationsWorkstationState, bool) {
	return gww.state, gww.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gww *Resource) StateMust() *googleWorkstationsWorkstationState {
	if gww.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gww.Type(), gww.LocalName()))
	}
	return gww.state
}

// Args contains the configurations for google_workstations_workstation.
type Args struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Env: map of string, optional
	Env terra.MapValue[terra.StringValue] `hcl:"env,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// WorkstationClusterId: string, required
	WorkstationClusterId terra.StringValue `hcl:"workstation_cluster_id,attr" validate:"required"`
	// WorkstationConfigId: string, required
	WorkstationConfigId terra.StringValue `hcl:"workstation_config_id,attr" validate:"required"`
	// WorkstationId: string, required
	WorkstationId terra.StringValue `hcl:"workstation_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleWorkstationsWorkstationAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gww.ref.Append("annotations"))
}

// CreateTime returns a reference to field create_time of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("create_time"))
}

// DisplayName returns a reference to field display_name of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("display_name"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gww.ref.Append("effective_annotations"))
}

// EffectiveLabels returns a reference to field effective_labels of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gww.ref.Append("effective_labels"))
}

// Env returns a reference to field env of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) Env() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gww.ref.Append("env"))
}

// Host returns a reference to field host of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("host"))
}

// Id returns a reference to field id of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("id"))
}

// Labels returns a reference to field labels of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gww.ref.Append("labels"))
}

// Location returns a reference to field location of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("location"))
}

// Name returns a reference to field name of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("name"))
}

// Project returns a reference to field project of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("project"))
}

// State returns a reference to field state of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gww.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("uid"))
}

// WorkstationClusterId returns a reference to field workstation_cluster_id of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) WorkstationClusterId() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("workstation_cluster_id"))
}

// WorkstationConfigId returns a reference to field workstation_config_id of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) WorkstationConfigId() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("workstation_config_id"))
}

// WorkstationId returns a reference to field workstation_id of google_workstations_workstation.
func (gww googleWorkstationsWorkstationAttributes) WorkstationId() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("workstation_id"))
}

func (gww googleWorkstationsWorkstationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gww.ref.Append("timeouts"))
}

type googleWorkstationsWorkstationState struct {
	Annotations          map[string]string `json:"annotations"`
	CreateTime           string            `json:"create_time"`
	DisplayName          string            `json:"display_name"`
	EffectiveAnnotations map[string]string `json:"effective_annotations"`
	EffectiveLabels      map[string]string `json:"effective_labels"`
	Env                  map[string]string `json:"env"`
	Host                 string            `json:"host"`
	Id                   string            `json:"id"`
	Labels               map[string]string `json:"labels"`
	Location             string            `json:"location"`
	Name                 string            `json:"name"`
	Project              string            `json:"project"`
	State                string            `json:"state"`
	TerraformLabels      map[string]string `json:"terraform_labels"`
	Uid                  string            `json:"uid"`
	WorkstationClusterId string            `json:"workstation_cluster_id"`
	WorkstationConfigId  string            `json:"workstation_config_id"`
	WorkstationId        string            `json:"workstation_id"`
	Timeouts             *TimeoutsState    `json:"timeouts"`
}
