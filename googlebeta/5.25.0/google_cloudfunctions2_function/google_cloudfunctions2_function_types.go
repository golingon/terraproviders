// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloudfunctions2_function

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BuildConfig struct {
	// DockerRepository: string, optional
	DockerRepository terra.StringValue `hcl:"docker_repository,attr"`
	// EntryPoint: string, optional
	EntryPoint terra.StringValue `hcl:"entry_point,attr"`
	// EnvironmentVariables: map of string, optional
	EnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"environment_variables,attr"`
	// Runtime: string, optional
	Runtime terra.StringValue `hcl:"runtime,attr"`
	// WorkerPool: string, optional
	WorkerPool terra.StringValue `hcl:"worker_pool,attr"`
	// BuildConfigSource: optional
	Source *BuildConfigSource `hcl:"source,block"`
}

type BuildConfigSource struct {
	// BuildConfigSourceRepoSource: optional
	RepoSource *BuildConfigSourceRepoSource `hcl:"repo_source,block"`
	// BuildConfigSourceStorageSource: optional
	StorageSource *BuildConfigSourceStorageSource `hcl:"storage_source,block"`
}

type BuildConfigSourceRepoSource struct {
	// BranchName: string, optional
	BranchName terra.StringValue `hcl:"branch_name,attr"`
	// CommitSha: string, optional
	CommitSha terra.StringValue `hcl:"commit_sha,attr"`
	// Dir: string, optional
	Dir terra.StringValue `hcl:"dir,attr"`
	// InvertRegex: bool, optional
	InvertRegex terra.BoolValue `hcl:"invert_regex,attr"`
	// ProjectId: string, optional
	ProjectId terra.StringValue `hcl:"project_id,attr"`
	// RepoName: string, optional
	RepoName terra.StringValue `hcl:"repo_name,attr"`
	// TagName: string, optional
	TagName terra.StringValue `hcl:"tag_name,attr"`
}

type BuildConfigSourceStorageSource struct {
	// Bucket: string, optional
	Bucket terra.StringValue `hcl:"bucket,attr"`
	// Generation: number, optional
	Generation terra.NumberValue `hcl:"generation,attr"`
	// Object: string, optional
	Object terra.StringValue `hcl:"object,attr"`
}

type EventTrigger struct {
	// EventType: string, optional
	EventType terra.StringValue `hcl:"event_type,attr"`
	// PubsubTopic: string, optional
	PubsubTopic terra.StringValue `hcl:"pubsub_topic,attr"`
	// RetryPolicy: string, optional
	RetryPolicy terra.StringValue `hcl:"retry_policy,attr"`
	// ServiceAccountEmail: string, optional
	ServiceAccountEmail terra.StringValue `hcl:"service_account_email,attr"`
	// TriggerRegion: string, optional
	TriggerRegion terra.StringValue `hcl:"trigger_region,attr"`
	// EventTriggerEventFilters: min=0
	EventFilters []EventTriggerEventFilters `hcl:"event_filters,block" validate:"min=0"`
}

type EventTriggerEventFilters struct {
	// Attribute: string, required
	Attribute terra.StringValue `hcl:"attribute,attr" validate:"required"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ServiceConfig struct {
	// AllTrafficOnLatestRevision: bool, optional
	AllTrafficOnLatestRevision terra.BoolValue `hcl:"all_traffic_on_latest_revision,attr"`
	// AvailableCpu: string, optional
	AvailableCpu terra.StringValue `hcl:"available_cpu,attr"`
	// AvailableMemory: string, optional
	AvailableMemory terra.StringValue `hcl:"available_memory,attr"`
	// EnvironmentVariables: map of string, optional
	EnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"environment_variables,attr"`
	// IngressSettings: string, optional
	IngressSettings terra.StringValue `hcl:"ingress_settings,attr"`
	// MaxInstanceCount: number, optional
	MaxInstanceCount terra.NumberValue `hcl:"max_instance_count,attr"`
	// MaxInstanceRequestConcurrency: number, optional
	MaxInstanceRequestConcurrency terra.NumberValue `hcl:"max_instance_request_concurrency,attr"`
	// MinInstanceCount: number, optional
	MinInstanceCount terra.NumberValue `hcl:"min_instance_count,attr"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
	// ServiceAccountEmail: string, optional
	ServiceAccountEmail terra.StringValue `hcl:"service_account_email,attr"`
	// TimeoutSeconds: number, optional
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// VpcConnector: string, optional
	VpcConnector terra.StringValue `hcl:"vpc_connector,attr"`
	// VpcConnectorEgressSettings: string, optional
	VpcConnectorEgressSettings terra.StringValue `hcl:"vpc_connector_egress_settings,attr"`
	// ServiceConfigSecretEnvironmentVariables: min=0
	SecretEnvironmentVariables []ServiceConfigSecretEnvironmentVariables `hcl:"secret_environment_variables,block" validate:"min=0"`
	// ServiceConfigSecretVolumes: min=0
	SecretVolumes []ServiceConfigSecretVolumes `hcl:"secret_volumes,block" validate:"min=0"`
}

type ServiceConfigSecretEnvironmentVariables struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type ServiceConfigSecretVolumes struct {
	// MountPath: string, required
	MountPath terra.StringValue `hcl:"mount_path,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
	// ServiceConfigSecretVolumesVersions: min=0
	Versions []ServiceConfigSecretVolumesVersions `hcl:"versions,block" validate:"min=0"`
}

type ServiceConfigSecretVolumesVersions struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BuildConfigAttributes struct {
	ref terra.Reference
}

func (bc BuildConfigAttributes) InternalRef() (terra.Reference, error) {
	return bc.ref, nil
}

func (bc BuildConfigAttributes) InternalWithRef(ref terra.Reference) BuildConfigAttributes {
	return BuildConfigAttributes{ref: ref}
}

func (bc BuildConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bc.ref.InternalTokens()
}

func (bc BuildConfigAttributes) Build() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("build"))
}

func (bc BuildConfigAttributes) DockerRepository() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("docker_repository"))
}

func (bc BuildConfigAttributes) EntryPoint() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("entry_point"))
}

func (bc BuildConfigAttributes) EnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](bc.ref.Append("environment_variables"))
}

func (bc BuildConfigAttributes) Runtime() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("runtime"))
}

func (bc BuildConfigAttributes) WorkerPool() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("worker_pool"))
}

func (bc BuildConfigAttributes) Source() terra.ListValue[BuildConfigSourceAttributes] {
	return terra.ReferenceAsList[BuildConfigSourceAttributes](bc.ref.Append("source"))
}

type BuildConfigSourceAttributes struct {
	ref terra.Reference
}

func (s BuildConfigSourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s BuildConfigSourceAttributes) InternalWithRef(ref terra.Reference) BuildConfigSourceAttributes {
	return BuildConfigSourceAttributes{ref: ref}
}

func (s BuildConfigSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s BuildConfigSourceAttributes) RepoSource() terra.ListValue[BuildConfigSourceRepoSourceAttributes] {
	return terra.ReferenceAsList[BuildConfigSourceRepoSourceAttributes](s.ref.Append("repo_source"))
}

func (s BuildConfigSourceAttributes) StorageSource() terra.ListValue[BuildConfigSourceStorageSourceAttributes] {
	return terra.ReferenceAsList[BuildConfigSourceStorageSourceAttributes](s.ref.Append("storage_source"))
}

type BuildConfigSourceRepoSourceAttributes struct {
	ref terra.Reference
}

func (rs BuildConfigSourceRepoSourceAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs BuildConfigSourceRepoSourceAttributes) InternalWithRef(ref terra.Reference) BuildConfigSourceRepoSourceAttributes {
	return BuildConfigSourceRepoSourceAttributes{ref: ref}
}

func (rs BuildConfigSourceRepoSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs BuildConfigSourceRepoSourceAttributes) BranchName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("branch_name"))
}

func (rs BuildConfigSourceRepoSourceAttributes) CommitSha() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("commit_sha"))
}

func (rs BuildConfigSourceRepoSourceAttributes) Dir() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("dir"))
}

func (rs BuildConfigSourceRepoSourceAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(rs.ref.Append("invert_regex"))
}

func (rs BuildConfigSourceRepoSourceAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("project_id"))
}

func (rs BuildConfigSourceRepoSourceAttributes) RepoName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("repo_name"))
}

func (rs BuildConfigSourceRepoSourceAttributes) TagName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("tag_name"))
}

type BuildConfigSourceStorageSourceAttributes struct {
	ref terra.Reference
}

func (ss BuildConfigSourceStorageSourceAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss BuildConfigSourceStorageSourceAttributes) InternalWithRef(ref terra.Reference) BuildConfigSourceStorageSourceAttributes {
	return BuildConfigSourceStorageSourceAttributes{ref: ref}
}

func (ss BuildConfigSourceStorageSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss BuildConfigSourceStorageSourceAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("bucket"))
}

func (ss BuildConfigSourceStorageSourceAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("generation"))
}

func (ss BuildConfigSourceStorageSourceAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("object"))
}

type EventTriggerAttributes struct {
	ref terra.Reference
}

func (et EventTriggerAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et EventTriggerAttributes) InternalWithRef(ref terra.Reference) EventTriggerAttributes {
	return EventTriggerAttributes{ref: ref}
}

func (et EventTriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et EventTriggerAttributes) EventType() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("event_type"))
}

func (et EventTriggerAttributes) PubsubTopic() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("pubsub_topic"))
}

func (et EventTriggerAttributes) RetryPolicy() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("retry_policy"))
}

func (et EventTriggerAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("service_account_email"))
}

func (et EventTriggerAttributes) Trigger() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("trigger"))
}

func (et EventTriggerAttributes) TriggerRegion() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("trigger_region"))
}

func (et EventTriggerAttributes) EventFilters() terra.SetValue[EventTriggerEventFiltersAttributes] {
	return terra.ReferenceAsSet[EventTriggerEventFiltersAttributes](et.ref.Append("event_filters"))
}

type EventTriggerEventFiltersAttributes struct {
	ref terra.Reference
}

func (ef EventTriggerEventFiltersAttributes) InternalRef() (terra.Reference, error) {
	return ef.ref, nil
}

func (ef EventTriggerEventFiltersAttributes) InternalWithRef(ref terra.Reference) EventTriggerEventFiltersAttributes {
	return EventTriggerEventFiltersAttributes{ref: ref}
}

func (ef EventTriggerEventFiltersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ef.ref.InternalTokens()
}

func (ef EventTriggerEventFiltersAttributes) Attribute() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("attribute"))
}

func (ef EventTriggerEventFiltersAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("operator"))
}

func (ef EventTriggerEventFiltersAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("value"))
}

type ServiceConfigAttributes struct {
	ref terra.Reference
}

func (sc ServiceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc ServiceConfigAttributes) InternalWithRef(ref terra.Reference) ServiceConfigAttributes {
	return ServiceConfigAttributes{ref: ref}
}

func (sc ServiceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc ServiceConfigAttributes) AllTrafficOnLatestRevision() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("all_traffic_on_latest_revision"))
}

func (sc ServiceConfigAttributes) AvailableCpu() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("available_cpu"))
}

func (sc ServiceConfigAttributes) AvailableMemory() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("available_memory"))
}

func (sc ServiceConfigAttributes) EnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sc.ref.Append("environment_variables"))
}

func (sc ServiceConfigAttributes) GcfUri() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("gcf_uri"))
}

func (sc ServiceConfigAttributes) IngressSettings() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("ingress_settings"))
}

func (sc ServiceConfigAttributes) MaxInstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("max_instance_count"))
}

func (sc ServiceConfigAttributes) MaxInstanceRequestConcurrency() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("max_instance_request_concurrency"))
}

func (sc ServiceConfigAttributes) MinInstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("min_instance_count"))
}

func (sc ServiceConfigAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("service"))
}

func (sc ServiceConfigAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("service_account_email"))
}

func (sc ServiceConfigAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("timeout_seconds"))
}

func (sc ServiceConfigAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("uri"))
}

func (sc ServiceConfigAttributes) VpcConnector() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("vpc_connector"))
}

func (sc ServiceConfigAttributes) VpcConnectorEgressSettings() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("vpc_connector_egress_settings"))
}

func (sc ServiceConfigAttributes) SecretEnvironmentVariables() terra.ListValue[ServiceConfigSecretEnvironmentVariablesAttributes] {
	return terra.ReferenceAsList[ServiceConfigSecretEnvironmentVariablesAttributes](sc.ref.Append("secret_environment_variables"))
}

func (sc ServiceConfigAttributes) SecretVolumes() terra.ListValue[ServiceConfigSecretVolumesAttributes] {
	return terra.ReferenceAsList[ServiceConfigSecretVolumesAttributes](sc.ref.Append("secret_volumes"))
}

type ServiceConfigSecretEnvironmentVariablesAttributes struct {
	ref terra.Reference
}

func (sev ServiceConfigSecretEnvironmentVariablesAttributes) InternalRef() (terra.Reference, error) {
	return sev.ref, nil
}

func (sev ServiceConfigSecretEnvironmentVariablesAttributes) InternalWithRef(ref terra.Reference) ServiceConfigSecretEnvironmentVariablesAttributes {
	return ServiceConfigSecretEnvironmentVariablesAttributes{ref: ref}
}

func (sev ServiceConfigSecretEnvironmentVariablesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sev.ref.InternalTokens()
}

func (sev ServiceConfigSecretEnvironmentVariablesAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(sev.ref.Append("key"))
}

func (sev ServiceConfigSecretEnvironmentVariablesAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(sev.ref.Append("project_id"))
}

func (sev ServiceConfigSecretEnvironmentVariablesAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(sev.ref.Append("secret"))
}

func (sev ServiceConfigSecretEnvironmentVariablesAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(sev.ref.Append("version"))
}

type ServiceConfigSecretVolumesAttributes struct {
	ref terra.Reference
}

func (sv ServiceConfigSecretVolumesAttributes) InternalRef() (terra.Reference, error) {
	return sv.ref, nil
}

func (sv ServiceConfigSecretVolumesAttributes) InternalWithRef(ref terra.Reference) ServiceConfigSecretVolumesAttributes {
	return ServiceConfigSecretVolumesAttributes{ref: ref}
}

func (sv ServiceConfigSecretVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sv.ref.InternalTokens()
}

func (sv ServiceConfigSecretVolumesAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(sv.ref.Append("mount_path"))
}

func (sv ServiceConfigSecretVolumesAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(sv.ref.Append("project_id"))
}

func (sv ServiceConfigSecretVolumesAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(sv.ref.Append("secret"))
}

func (sv ServiceConfigSecretVolumesAttributes) Versions() terra.ListValue[ServiceConfigSecretVolumesVersionsAttributes] {
	return terra.ReferenceAsList[ServiceConfigSecretVolumesVersionsAttributes](sv.ref.Append("versions"))
}

type ServiceConfigSecretVolumesVersionsAttributes struct {
	ref terra.Reference
}

func (v ServiceConfigSecretVolumesVersionsAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ServiceConfigSecretVolumesVersionsAttributes) InternalWithRef(ref terra.Reference) ServiceConfigSecretVolumesVersionsAttributes {
	return ServiceConfigSecretVolumesVersionsAttributes{ref: ref}
}

func (v ServiceConfigSecretVolumesVersionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ServiceConfigSecretVolumesVersionsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("path"))
}

func (v ServiceConfigSecretVolumesVersionsAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("version"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BuildConfigState struct {
	Build                string                   `json:"build"`
	DockerRepository     string                   `json:"docker_repository"`
	EntryPoint           string                   `json:"entry_point"`
	EnvironmentVariables map[string]string        `json:"environment_variables"`
	Runtime              string                   `json:"runtime"`
	WorkerPool           string                   `json:"worker_pool"`
	Source               []BuildConfigSourceState `json:"source"`
}

type BuildConfigSourceState struct {
	RepoSource    []BuildConfigSourceRepoSourceState    `json:"repo_source"`
	StorageSource []BuildConfigSourceStorageSourceState `json:"storage_source"`
}

type BuildConfigSourceRepoSourceState struct {
	BranchName  string `json:"branch_name"`
	CommitSha   string `json:"commit_sha"`
	Dir         string `json:"dir"`
	InvertRegex bool   `json:"invert_regex"`
	ProjectId   string `json:"project_id"`
	RepoName    string `json:"repo_name"`
	TagName     string `json:"tag_name"`
}

type BuildConfigSourceStorageSourceState struct {
	Bucket     string  `json:"bucket"`
	Generation float64 `json:"generation"`
	Object     string  `json:"object"`
}

type EventTriggerState struct {
	EventType           string                          `json:"event_type"`
	PubsubTopic         string                          `json:"pubsub_topic"`
	RetryPolicy         string                          `json:"retry_policy"`
	ServiceAccountEmail string                          `json:"service_account_email"`
	Trigger             string                          `json:"trigger"`
	TriggerRegion       string                          `json:"trigger_region"`
	EventFilters        []EventTriggerEventFiltersState `json:"event_filters"`
}

type EventTriggerEventFiltersState struct {
	Attribute string `json:"attribute"`
	Operator  string `json:"operator"`
	Value     string `json:"value"`
}

type ServiceConfigState struct {
	AllTrafficOnLatestRevision    bool                                           `json:"all_traffic_on_latest_revision"`
	AvailableCpu                  string                                         `json:"available_cpu"`
	AvailableMemory               string                                         `json:"available_memory"`
	EnvironmentVariables          map[string]string                              `json:"environment_variables"`
	GcfUri                        string                                         `json:"gcf_uri"`
	IngressSettings               string                                         `json:"ingress_settings"`
	MaxInstanceCount              float64                                        `json:"max_instance_count"`
	MaxInstanceRequestConcurrency float64                                        `json:"max_instance_request_concurrency"`
	MinInstanceCount              float64                                        `json:"min_instance_count"`
	Service                       string                                         `json:"service"`
	ServiceAccountEmail           string                                         `json:"service_account_email"`
	TimeoutSeconds                float64                                        `json:"timeout_seconds"`
	Uri                           string                                         `json:"uri"`
	VpcConnector                  string                                         `json:"vpc_connector"`
	VpcConnectorEgressSettings    string                                         `json:"vpc_connector_egress_settings"`
	SecretEnvironmentVariables    []ServiceConfigSecretEnvironmentVariablesState `json:"secret_environment_variables"`
	SecretVolumes                 []ServiceConfigSecretVolumesState              `json:"secret_volumes"`
}

type ServiceConfigSecretEnvironmentVariablesState struct {
	Key       string `json:"key"`
	ProjectId string `json:"project_id"`
	Secret    string `json:"secret"`
	Version   string `json:"version"`
}

type ServiceConfigSecretVolumesState struct {
	MountPath string                                    `json:"mount_path"`
	ProjectId string                                    `json:"project_id"`
	Secret    string                                    `json:"secret"`
	Versions  []ServiceConfigSecretVolumesVersionsState `json:"versions"`
}

type ServiceConfigSecretVolumesVersionsState struct {
	Path    string `json:"path"`
	Version string `json:"version"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
