// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_edgenetwork_subnet

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_edgenetwork_subnet.
type Resource struct {
	Name      string
	Args      Args
	state     *googleEdgenetworkSubnetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ges *Resource) Type() string {
	return "google_edgenetwork_subnet"
}

// LocalName returns the local name for [Resource].
func (ges *Resource) LocalName() string {
	return ges.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ges *Resource) Configuration() interface{} {
	return ges.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ges *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ges)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ges *Resource) Dependencies() terra.Dependencies {
	return ges.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ges *Resource) LifecycleManagement() *terra.Lifecycle {
	return ges.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ges *Resource) Attributes() googleEdgenetworkSubnetAttributes {
	return googleEdgenetworkSubnetAttributes{ref: terra.ReferenceResource(ges)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ges *Resource) ImportState(state io.Reader) error {
	ges.state = &googleEdgenetworkSubnetState{}
	if err := json.NewDecoder(state).Decode(ges.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ges.Type(), ges.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ges *Resource) State() (*googleEdgenetworkSubnetState, bool) {
	return ges.state, ges.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ges *Resource) StateMust() *googleEdgenetworkSubnetState {
	if ges.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ges.Type(), ges.LocalName()))
	}
	return ges.state
}

// Args contains the configurations for google_edgenetwork_subnet.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Ipv4Cidr: list of string, optional
	Ipv4Cidr terra.ListValue[terra.StringValue] `hcl:"ipv4_cidr,attr"`
	// Ipv6Cidr: list of string, optional
	Ipv6Cidr terra.ListValue[terra.StringValue] `hcl:"ipv6_cidr,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// VlanId: number, optional
	VlanId terra.NumberValue `hcl:"vlan_id,attr"`
	// Zone: string, required
	Zone terra.StringValue `hcl:"zone,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleEdgenetworkSubnetAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("create_time"))
}

// Description returns a reference to field description of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("description"))
}

// Id returns a reference to field id of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("id"))
}

// Ipv4Cidr returns a reference to field ipv4_cidr of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) Ipv4Cidr() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ges.ref.Append("ipv4_cidr"))
}

// Ipv6Cidr returns a reference to field ipv6_cidr of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) Ipv6Cidr() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ges.ref.Append("ipv6_cidr"))
}

// Labels returns a reference to field labels of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ges.ref.Append("labels"))
}

// Location returns a reference to field location of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("location"))
}

// Name returns a reference to field name of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("name"))
}

// Network returns a reference to field network of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("network"))
}

// Project returns a reference to field project of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("project"))
}

// State returns a reference to field state of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("state"))
}

// SubnetId returns a reference to field subnet_id of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("subnet_id"))
}

// UpdateTime returns a reference to field update_time of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("update_time"))
}

// VlanId returns a reference to field vlan_id of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) VlanId() terra.NumberValue {
	return terra.ReferenceAsNumber(ges.ref.Append("vlan_id"))
}

// Zone returns a reference to field zone of google_edgenetwork_subnet.
func (ges googleEdgenetworkSubnetAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("zone"))
}

func (ges googleEdgenetworkSubnetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ges.ref.Append("timeouts"))
}

type googleEdgenetworkSubnetState struct {
	CreateTime  string            `json:"create_time"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Ipv4Cidr    []string          `json:"ipv4_cidr"`
	Ipv6Cidr    []string          `json:"ipv6_cidr"`
	Labels      map[string]string `json:"labels"`
	Location    string            `json:"location"`
	Name        string            `json:"name"`
	Network     string            `json:"network"`
	Project     string            `json:"project"`
	State       string            `json:"state"`
	SubnetId    string            `json:"subnet_id"`
	UpdateTime  string            `json:"update_time"`
	VlanId      float64           `json:"vlan_id"`
	Zone        string            `json:"zone"`
	Timeouts    *TimeoutsState    `json:"timeouts"`
}
