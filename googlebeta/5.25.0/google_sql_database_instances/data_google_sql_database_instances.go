// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_sql_database_instances

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource google_sql_database_instances.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (gsdi *DataSource) DataSource() string {
	return "google_sql_database_instances"
}

// LocalName returns the local name for [DataSource].
func (gsdi *DataSource) LocalName() string {
	return gsdi.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (gsdi *DataSource) Configuration() interface{} {
	return gsdi.Args
}

// Attributes returns the attributes for [DataSource].
func (gsdi *DataSource) Attributes() dataGoogleSqlDatabaseInstancesAttributes {
	return dataGoogleSqlDatabaseInstancesAttributes{ref: terra.ReferenceDataSource(gsdi)}
}

// DataArgs contains the configurations for google_sql_database_instances.
type DataArgs struct {
	// DatabaseVersion: string, optional
	DatabaseVersion terra.StringValue `hcl:"database_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// Tier: string, optional
	Tier terra.StringValue `hcl:"tier,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
}

type dataGoogleSqlDatabaseInstancesAttributes struct {
	ref terra.Reference
}

// DatabaseVersion returns a reference to field database_version of google_sql_database_instances.
func (gsdi dataGoogleSqlDatabaseInstancesAttributes) DatabaseVersion() terra.StringValue {
	return terra.ReferenceAsString(gsdi.ref.Append("database_version"))
}

// Id returns a reference to field id of google_sql_database_instances.
func (gsdi dataGoogleSqlDatabaseInstancesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsdi.ref.Append("id"))
}

// Project returns a reference to field project of google_sql_database_instances.
func (gsdi dataGoogleSqlDatabaseInstancesAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gsdi.ref.Append("project"))
}

// Region returns a reference to field region of google_sql_database_instances.
func (gsdi dataGoogleSqlDatabaseInstancesAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gsdi.ref.Append("region"))
}

// State returns a reference to field state of google_sql_database_instances.
func (gsdi dataGoogleSqlDatabaseInstancesAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gsdi.ref.Append("state"))
}

// Tier returns a reference to field tier of google_sql_database_instances.
func (gsdi dataGoogleSqlDatabaseInstancesAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(gsdi.ref.Append("tier"))
}

// Zone returns a reference to field zone of google_sql_database_instances.
func (gsdi dataGoogleSqlDatabaseInstancesAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gsdi.ref.Append("zone"))
}

func (gsdi dataGoogleSqlDatabaseInstancesAttributes) Instances() terra.ListValue[DataInstancesAttributes] {
	return terra.ReferenceAsList[DataInstancesAttributes](gsdi.ref.Append("instances"))
}
