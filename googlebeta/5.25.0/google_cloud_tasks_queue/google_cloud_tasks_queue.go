// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloud_tasks_queue

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_cloud_tasks_queue.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCloudTasksQueueState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gctq *Resource) Type() string {
	return "google_cloud_tasks_queue"
}

// LocalName returns the local name for [Resource].
func (gctq *Resource) LocalName() string {
	return gctq.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gctq *Resource) Configuration() interface{} {
	return gctq.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gctq *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gctq)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gctq *Resource) Dependencies() terra.Dependencies {
	return gctq.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gctq *Resource) LifecycleManagement() *terra.Lifecycle {
	return gctq.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gctq *Resource) Attributes() googleCloudTasksQueueAttributes {
	return googleCloudTasksQueueAttributes{ref: terra.ReferenceResource(gctq)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gctq *Resource) ImportState(state io.Reader) error {
	gctq.state = &googleCloudTasksQueueState{}
	if err := json.NewDecoder(state).Decode(gctq.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gctq.Type(), gctq.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gctq *Resource) State() (*googleCloudTasksQueueState, bool) {
	return gctq.state, gctq.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gctq *Resource) StateMust() *googleCloudTasksQueueState {
	if gctq.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gctq.Type(), gctq.LocalName()))
	}
	return gctq.state
}

// Args contains the configurations for google_cloud_tasks_queue.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// AppEngineRoutingOverride: optional
	AppEngineRoutingOverride *AppEngineRoutingOverride `hcl:"app_engine_routing_override,block"`
	// RateLimits: optional
	RateLimits *RateLimits `hcl:"rate_limits,block"`
	// RetryConfig: optional
	RetryConfig *RetryConfig `hcl:"retry_config,block"`
	// StackdriverLoggingConfig: optional
	StackdriverLoggingConfig *StackdriverLoggingConfig `hcl:"stackdriver_logging_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleCloudTasksQueueAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_cloud_tasks_queue.
func (gctq googleCloudTasksQueueAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gctq.ref.Append("id"))
}

// Location returns a reference to field location of google_cloud_tasks_queue.
func (gctq googleCloudTasksQueueAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gctq.ref.Append("location"))
}

// Name returns a reference to field name of google_cloud_tasks_queue.
func (gctq googleCloudTasksQueueAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gctq.ref.Append("name"))
}

// Project returns a reference to field project of google_cloud_tasks_queue.
func (gctq googleCloudTasksQueueAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gctq.ref.Append("project"))
}

func (gctq googleCloudTasksQueueAttributes) AppEngineRoutingOverride() terra.ListValue[AppEngineRoutingOverrideAttributes] {
	return terra.ReferenceAsList[AppEngineRoutingOverrideAttributes](gctq.ref.Append("app_engine_routing_override"))
}

func (gctq googleCloudTasksQueueAttributes) RateLimits() terra.ListValue[RateLimitsAttributes] {
	return terra.ReferenceAsList[RateLimitsAttributes](gctq.ref.Append("rate_limits"))
}

func (gctq googleCloudTasksQueueAttributes) RetryConfig() terra.ListValue[RetryConfigAttributes] {
	return terra.ReferenceAsList[RetryConfigAttributes](gctq.ref.Append("retry_config"))
}

func (gctq googleCloudTasksQueueAttributes) StackdriverLoggingConfig() terra.ListValue[StackdriverLoggingConfigAttributes] {
	return terra.ReferenceAsList[StackdriverLoggingConfigAttributes](gctq.ref.Append("stackdriver_logging_config"))
}

func (gctq googleCloudTasksQueueAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gctq.ref.Append("timeouts"))
}

type googleCloudTasksQueueState struct {
	Id                       string                          `json:"id"`
	Location                 string                          `json:"location"`
	Name                     string                          `json:"name"`
	Project                  string                          `json:"project"`
	AppEngineRoutingOverride []AppEngineRoutingOverrideState `json:"app_engine_routing_override"`
	RateLimits               []RateLimitsState               `json:"rate_limits"`
	RetryConfig              []RetryConfigState              `json:"retry_config"`
	StackdriverLoggingConfig []StackdriverLoggingConfigState `json:"stackdriver_logging_config"`
	Timeouts                 *TimeoutsState                  `json:"timeouts"`
}
