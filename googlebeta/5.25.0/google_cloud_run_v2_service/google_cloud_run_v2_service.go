// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloud_run_v2_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_cloud_run_v2_service.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCloudRunV2ServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcrvs *Resource) Type() string {
	return "google_cloud_run_v2_service"
}

// LocalName returns the local name for [Resource].
func (gcrvs *Resource) LocalName() string {
	return gcrvs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcrvs *Resource) Configuration() interface{} {
	return gcrvs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcrvs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcrvs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcrvs *Resource) Dependencies() terra.Dependencies {
	return gcrvs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcrvs *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcrvs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcrvs *Resource) Attributes() googleCloudRunV2ServiceAttributes {
	return googleCloudRunV2ServiceAttributes{ref: terra.ReferenceResource(gcrvs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcrvs *Resource) ImportState(state io.Reader) error {
	gcrvs.state = &googleCloudRunV2ServiceState{}
	if err := json.NewDecoder(state).Decode(gcrvs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcrvs.Type(), gcrvs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcrvs *Resource) State() (*googleCloudRunV2ServiceState, bool) {
	return gcrvs.state, gcrvs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcrvs *Resource) StateMust() *googleCloudRunV2ServiceState {
	if gcrvs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcrvs.Type(), gcrvs.LocalName()))
	}
	return gcrvs.state
}

// Args contains the configurations for google_cloud_run_v2_service.
type Args struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// Client: string, optional
	Client terra.StringValue `hcl:"client,attr"`
	// ClientVersion: string, optional
	ClientVersion terra.StringValue `hcl:"client_version,attr"`
	// CustomAudiences: list of string, optional
	CustomAudiences terra.ListValue[terra.StringValue] `hcl:"custom_audiences,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Ingress: string, optional
	Ingress terra.StringValue `hcl:"ingress,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LaunchStage: string, optional
	LaunchStage terra.StringValue `hcl:"launch_stage,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// BinaryAuthorization: optional
	BinaryAuthorization *BinaryAuthorization `hcl:"binary_authorization,block"`
	// Scaling: optional
	Scaling *Scaling `hcl:"scaling,block"`
	// Template: required
	Template *Template `hcl:"template,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Traffic: min=0
	Traffic []Traffic `hcl:"traffic,block" validate:"min=0"`
}

type googleCloudRunV2ServiceAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcrvs.ref.Append("annotations"))
}

// Client returns a reference to field client of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Client() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("client"))
}

// ClientVersion returns a reference to field client_version of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) ClientVersion() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("client_version"))
}

// CreateTime returns a reference to field create_time of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("create_time"))
}

// Creator returns a reference to field creator of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Creator() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("creator"))
}

// CustomAudiences returns a reference to field custom_audiences of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) CustomAudiences() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcrvs.ref.Append("custom_audiences"))
}

// DeleteTime returns a reference to field delete_time of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("delete_time"))
}

// Description returns a reference to field description of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("description"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcrvs.ref.Append("effective_annotations"))
}

// EffectiveLabels returns a reference to field effective_labels of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcrvs.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("etag"))
}

// ExpireTime returns a reference to field expire_time of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("expire_time"))
}

// Generation returns a reference to field generation of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Generation() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("generation"))
}

// Id returns a reference to field id of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("id"))
}

// Ingress returns a reference to field ingress of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Ingress() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("ingress"))
}

// Labels returns a reference to field labels of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcrvs.ref.Append("labels"))
}

// LastModifier returns a reference to field last_modifier of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) LastModifier() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("last_modifier"))
}

// LatestCreatedRevision returns a reference to field latest_created_revision of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) LatestCreatedRevision() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("latest_created_revision"))
}

// LatestReadyRevision returns a reference to field latest_ready_revision of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) LatestReadyRevision() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("latest_ready_revision"))
}

// LaunchStage returns a reference to field launch_stage of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) LaunchStage() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("launch_stage"))
}

// Location returns a reference to field location of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("location"))
}

// Name returns a reference to field name of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("name"))
}

// ObservedGeneration returns a reference to field observed_generation of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) ObservedGeneration() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("observed_generation"))
}

// Project returns a reference to field project of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("project"))
}

// Reconciling returns a reference to field reconciling of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceAsBool(gcrvs.ref.Append("reconciling"))
}

// TerraformLabels returns a reference to field terraform_labels of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcrvs.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("update_time"))
}

// Uri returns a reference to field uri of google_cloud_run_v2_service.
func (gcrvs googleCloudRunV2ServiceAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(gcrvs.ref.Append("uri"))
}

func (gcrvs googleCloudRunV2ServiceAttributes) Conditions() terra.ListValue[ConditionsAttributes] {
	return terra.ReferenceAsList[ConditionsAttributes](gcrvs.ref.Append("conditions"))
}

func (gcrvs googleCloudRunV2ServiceAttributes) TerminalCondition() terra.ListValue[TerminalConditionAttributes] {
	return terra.ReferenceAsList[TerminalConditionAttributes](gcrvs.ref.Append("terminal_condition"))
}

func (gcrvs googleCloudRunV2ServiceAttributes) TrafficStatuses() terra.ListValue[TrafficStatusesAttributes] {
	return terra.ReferenceAsList[TrafficStatusesAttributes](gcrvs.ref.Append("traffic_statuses"))
}

func (gcrvs googleCloudRunV2ServiceAttributes) BinaryAuthorization() terra.ListValue[BinaryAuthorizationAttributes] {
	return terra.ReferenceAsList[BinaryAuthorizationAttributes](gcrvs.ref.Append("binary_authorization"))
}

func (gcrvs googleCloudRunV2ServiceAttributes) Scaling() terra.ListValue[ScalingAttributes] {
	return terra.ReferenceAsList[ScalingAttributes](gcrvs.ref.Append("scaling"))
}

func (gcrvs googleCloudRunV2ServiceAttributes) Template() terra.ListValue[TemplateAttributes] {
	return terra.ReferenceAsList[TemplateAttributes](gcrvs.ref.Append("template"))
}

func (gcrvs googleCloudRunV2ServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcrvs.ref.Append("timeouts"))
}

func (gcrvs googleCloudRunV2ServiceAttributes) Traffic() terra.ListValue[TrafficAttributes] {
	return terra.ReferenceAsList[TrafficAttributes](gcrvs.ref.Append("traffic"))
}

type googleCloudRunV2ServiceState struct {
	Annotations           map[string]string          `json:"annotations"`
	Client                string                     `json:"client"`
	ClientVersion         string                     `json:"client_version"`
	CreateTime            string                     `json:"create_time"`
	Creator               string                     `json:"creator"`
	CustomAudiences       []string                   `json:"custom_audiences"`
	DeleteTime            string                     `json:"delete_time"`
	Description           string                     `json:"description"`
	EffectiveAnnotations  map[string]string          `json:"effective_annotations"`
	EffectiveLabels       map[string]string          `json:"effective_labels"`
	Etag                  string                     `json:"etag"`
	ExpireTime            string                     `json:"expire_time"`
	Generation            string                     `json:"generation"`
	Id                    string                     `json:"id"`
	Ingress               string                     `json:"ingress"`
	Labels                map[string]string          `json:"labels"`
	LastModifier          string                     `json:"last_modifier"`
	LatestCreatedRevision string                     `json:"latest_created_revision"`
	LatestReadyRevision   string                     `json:"latest_ready_revision"`
	LaunchStage           string                     `json:"launch_stage"`
	Location              string                     `json:"location"`
	Name                  string                     `json:"name"`
	ObservedGeneration    string                     `json:"observed_generation"`
	Project               string                     `json:"project"`
	Reconciling           bool                       `json:"reconciling"`
	TerraformLabels       map[string]string          `json:"terraform_labels"`
	Uid                   string                     `json:"uid"`
	UpdateTime            string                     `json:"update_time"`
	Uri                   string                     `json:"uri"`
	Conditions            []ConditionsState          `json:"conditions"`
	TerminalCondition     []TerminalConditionState   `json:"terminal_condition"`
	TrafficStatuses       []TrafficStatusesState     `json:"traffic_statuses"`
	BinaryAuthorization   []BinaryAuthorizationState `json:"binary_authorization"`
	Scaling               []ScalingState             `json:"scaling"`
	Template              []TemplateState            `json:"template"`
	Timeouts              *TimeoutsState             `json:"timeouts"`
	Traffic               []TrafficState             `json:"traffic"`
}
