// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_os_config_guest_policies

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Assignment struct {
	// InstanceNamePrefixes: list of string, optional
	InstanceNamePrefixes terra.ListValue[terra.StringValue] `hcl:"instance_name_prefixes,attr"`
	// Instances: list of string, optional
	Instances terra.ListValue[terra.StringValue] `hcl:"instances,attr"`
	// Zones: list of string, optional
	Zones terra.ListValue[terra.StringValue] `hcl:"zones,attr"`
	// AssignmentGroupLabels: min=0
	GroupLabels []AssignmentGroupLabels `hcl:"group_labels,block" validate:"min=0"`
	// AssignmentOsTypes: min=0
	OsTypes []AssignmentOsTypes `hcl:"os_types,block" validate:"min=0"`
}

type AssignmentGroupLabels struct {
	// Labels: map of string, required
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr" validate:"required"`
}

type AssignmentOsTypes struct {
	// OsArchitecture: string, optional
	OsArchitecture terra.StringValue `hcl:"os_architecture,attr"`
	// OsShortName: string, optional
	OsShortName terra.StringValue `hcl:"os_short_name,attr"`
	// OsVersion: string, optional
	OsVersion terra.StringValue `hcl:"os_version,attr"`
}

type PackageRepositories struct {
	// PackageRepositoriesApt: optional
	Apt *PackageRepositoriesApt `hcl:"apt,block"`
	// PackageRepositoriesGoo: optional
	Goo *PackageRepositoriesGoo `hcl:"goo,block"`
	// PackageRepositoriesYum: optional
	Yum *PackageRepositoriesYum `hcl:"yum,block"`
	// PackageRepositoriesZypper: optional
	Zypper *PackageRepositoriesZypper `hcl:"zypper,block"`
}

type PackageRepositoriesApt struct {
	// ArchiveType: string, optional
	ArchiveType terra.StringValue `hcl:"archive_type,attr"`
	// Components: list of string, required
	Components terra.ListValue[terra.StringValue] `hcl:"components,attr" validate:"required"`
	// Distribution: string, required
	Distribution terra.StringValue `hcl:"distribution,attr" validate:"required"`
	// GpgKey: string, optional
	GpgKey terra.StringValue `hcl:"gpg_key,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type PackageRepositoriesGoo struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type PackageRepositoriesYum struct {
	// BaseUrl: string, required
	BaseUrl terra.StringValue `hcl:"base_url,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// GpgKeys: list of string, optional
	GpgKeys terra.ListValue[terra.StringValue] `hcl:"gpg_keys,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
}

type PackageRepositoriesZypper struct {
	// BaseUrl: string, required
	BaseUrl terra.StringValue `hcl:"base_url,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// GpgKeys: list of string, optional
	GpgKeys terra.ListValue[terra.StringValue] `hcl:"gpg_keys,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
}

type Packages struct {
	// DesiredState: string, optional
	DesiredState terra.StringValue `hcl:"desired_state,attr"`
	// Manager: string, optional
	Manager terra.StringValue `hcl:"manager,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Recipes struct {
	// DesiredState: string, optional
	DesiredState terra.StringValue `hcl:"desired_state,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// RecipesArtifacts: min=0
	Artifacts []RecipesArtifacts `hcl:"artifacts,block" validate:"min=0"`
	// RecipesInstallSteps: min=0
	InstallSteps []RecipesInstallSteps `hcl:"install_steps,block" validate:"min=0"`
	// RecipesUpdateSteps: min=0
	UpdateSteps []RecipesUpdateSteps `hcl:"update_steps,block" validate:"min=0"`
}

type RecipesArtifacts struct {
	// AllowInsecure: bool, optional
	AllowInsecure terra.BoolValue `hcl:"allow_insecure,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// RecipesArtifactsGcs: optional
	Gcs *RecipesArtifactsGcs `hcl:"gcs,block"`
	// RecipesArtifactsRemote: optional
	Remote *RecipesArtifactsRemote `hcl:"remote,block"`
}

type RecipesArtifactsGcs struct {
	// Bucket: string, optional
	Bucket terra.StringValue `hcl:"bucket,attr"`
	// Generation: number, optional
	Generation terra.NumberValue `hcl:"generation,attr"`
	// Object: string, optional
	Object terra.StringValue `hcl:"object,attr"`
}

type RecipesArtifactsRemote struct {
	// CheckSum: string, optional
	CheckSum terra.StringValue `hcl:"check_sum,attr"`
	// Uri: string, optional
	Uri terra.StringValue `hcl:"uri,attr"`
}

type RecipesInstallSteps struct {
	// RecipesInstallStepsArchiveExtraction: optional
	ArchiveExtraction *RecipesInstallStepsArchiveExtraction `hcl:"archive_extraction,block"`
	// RecipesInstallStepsDpkgInstallation: optional
	DpkgInstallation *RecipesInstallStepsDpkgInstallation `hcl:"dpkg_installation,block"`
	// RecipesInstallStepsFileCopy: optional
	FileCopy *RecipesInstallStepsFileCopy `hcl:"file_copy,block"`
	// RecipesInstallStepsFileExec: optional
	FileExec *RecipesInstallStepsFileExec `hcl:"file_exec,block"`
	// RecipesInstallStepsMsiInstallation: optional
	MsiInstallation *RecipesInstallStepsMsiInstallation `hcl:"msi_installation,block"`
	// RecipesInstallStepsRpmInstallation: optional
	RpmInstallation *RecipesInstallStepsRpmInstallation `hcl:"rpm_installation,block"`
	// RecipesInstallStepsScriptRun: optional
	ScriptRun *RecipesInstallStepsScriptRun `hcl:"script_run,block"`
}

type RecipesInstallStepsArchiveExtraction struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
	// Destination: string, optional
	Destination terra.StringValue `hcl:"destination,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type RecipesInstallStepsDpkgInstallation struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
}

type RecipesInstallStepsFileCopy struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// Overwrite: bool, optional
	Overwrite terra.BoolValue `hcl:"overwrite,attr"`
	// Permissions: string, optional
	Permissions terra.StringValue `hcl:"permissions,attr"`
}

type RecipesInstallStepsFileExec struct {
	// AllowedExitCodes: string, optional
	AllowedExitCodes terra.StringValue `hcl:"allowed_exit_codes,attr"`
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// ArtifactId: string, optional
	ArtifactId terra.StringValue `hcl:"artifact_id,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
}

type RecipesInstallStepsMsiInstallation struct {
	// AllowedExitCodes: list of number, optional
	AllowedExitCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_exit_codes,attr"`
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
	// Flags: list of string, optional
	Flags terra.ListValue[terra.StringValue] `hcl:"flags,attr"`
}

type RecipesInstallStepsRpmInstallation struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
}

type RecipesInstallStepsScriptRun struct {
	// AllowedExitCodes: list of number, optional
	AllowedExitCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_exit_codes,attr"`
	// Interpreter: string, optional
	Interpreter terra.StringValue `hcl:"interpreter,attr"`
	// Script: string, required
	Script terra.StringValue `hcl:"script,attr" validate:"required"`
}

type RecipesUpdateSteps struct {
	// RecipesUpdateStepsArchiveExtraction: optional
	ArchiveExtraction *RecipesUpdateStepsArchiveExtraction `hcl:"archive_extraction,block"`
	// RecipesUpdateStepsDpkgInstallation: optional
	DpkgInstallation *RecipesUpdateStepsDpkgInstallation `hcl:"dpkg_installation,block"`
	// RecipesUpdateStepsFileCopy: optional
	FileCopy *RecipesUpdateStepsFileCopy `hcl:"file_copy,block"`
	// RecipesUpdateStepsFileExec: optional
	FileExec *RecipesUpdateStepsFileExec `hcl:"file_exec,block"`
	// RecipesUpdateStepsMsiInstallation: optional
	MsiInstallation *RecipesUpdateStepsMsiInstallation `hcl:"msi_installation,block"`
	// RecipesUpdateStepsRpmInstallation: optional
	RpmInstallation *RecipesUpdateStepsRpmInstallation `hcl:"rpm_installation,block"`
	// RecipesUpdateStepsScriptRun: optional
	ScriptRun *RecipesUpdateStepsScriptRun `hcl:"script_run,block"`
}

type RecipesUpdateStepsArchiveExtraction struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
	// Destination: string, optional
	Destination terra.StringValue `hcl:"destination,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type RecipesUpdateStepsDpkgInstallation struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
}

type RecipesUpdateStepsFileCopy struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// Overwrite: bool, optional
	Overwrite terra.BoolValue `hcl:"overwrite,attr"`
	// Permissions: string, optional
	Permissions terra.StringValue `hcl:"permissions,attr"`
}

type RecipesUpdateStepsFileExec struct {
	// AllowedExitCodes: list of number, optional
	AllowedExitCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_exit_codes,attr"`
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// ArtifactId: string, optional
	ArtifactId terra.StringValue `hcl:"artifact_id,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
}

type RecipesUpdateStepsMsiInstallation struct {
	// AllowedExitCodes: list of number, optional
	AllowedExitCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_exit_codes,attr"`
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
	// Flags: list of string, optional
	Flags terra.ListValue[terra.StringValue] `hcl:"flags,attr"`
}

type RecipesUpdateStepsRpmInstallation struct {
	// ArtifactId: string, required
	ArtifactId terra.StringValue `hcl:"artifact_id,attr" validate:"required"`
}

type RecipesUpdateStepsScriptRun struct {
	// AllowedExitCodes: list of number, optional
	AllowedExitCodes terra.ListValue[terra.NumberValue] `hcl:"allowed_exit_codes,attr"`
	// Interpreter: string, optional
	Interpreter terra.StringValue `hcl:"interpreter,attr"`
	// Script: string, required
	Script terra.StringValue `hcl:"script,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AssignmentAttributes struct {
	ref terra.Reference
}

func (a AssignmentAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AssignmentAttributes) InternalWithRef(ref terra.Reference) AssignmentAttributes {
	return AssignmentAttributes{ref: ref}
}

func (a AssignmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AssignmentAttributes) InstanceNamePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("instance_name_prefixes"))
}

func (a AssignmentAttributes) Instances() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("instances"))
}

func (a AssignmentAttributes) Zones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("zones"))
}

func (a AssignmentAttributes) GroupLabels() terra.ListValue[AssignmentGroupLabelsAttributes] {
	return terra.ReferenceAsList[AssignmentGroupLabelsAttributes](a.ref.Append("group_labels"))
}

func (a AssignmentAttributes) OsTypes() terra.ListValue[AssignmentOsTypesAttributes] {
	return terra.ReferenceAsList[AssignmentOsTypesAttributes](a.ref.Append("os_types"))
}

type AssignmentGroupLabelsAttributes struct {
	ref terra.Reference
}

func (gl AssignmentGroupLabelsAttributes) InternalRef() (terra.Reference, error) {
	return gl.ref, nil
}

func (gl AssignmentGroupLabelsAttributes) InternalWithRef(ref terra.Reference) AssignmentGroupLabelsAttributes {
	return AssignmentGroupLabelsAttributes{ref: ref}
}

func (gl AssignmentGroupLabelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gl.ref.InternalTokens()
}

func (gl AssignmentGroupLabelsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gl.ref.Append("labels"))
}

type AssignmentOsTypesAttributes struct {
	ref terra.Reference
}

func (ot AssignmentOsTypesAttributes) InternalRef() (terra.Reference, error) {
	return ot.ref, nil
}

func (ot AssignmentOsTypesAttributes) InternalWithRef(ref terra.Reference) AssignmentOsTypesAttributes {
	return AssignmentOsTypesAttributes{ref: ref}
}

func (ot AssignmentOsTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ot.ref.InternalTokens()
}

func (ot AssignmentOsTypesAttributes) OsArchitecture() terra.StringValue {
	return terra.ReferenceAsString(ot.ref.Append("os_architecture"))
}

func (ot AssignmentOsTypesAttributes) OsShortName() terra.StringValue {
	return terra.ReferenceAsString(ot.ref.Append("os_short_name"))
}

func (ot AssignmentOsTypesAttributes) OsVersion() terra.StringValue {
	return terra.ReferenceAsString(ot.ref.Append("os_version"))
}

type PackageRepositoriesAttributes struct {
	ref terra.Reference
}

func (pr PackageRepositoriesAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr PackageRepositoriesAttributes) InternalWithRef(ref terra.Reference) PackageRepositoriesAttributes {
	return PackageRepositoriesAttributes{ref: ref}
}

func (pr PackageRepositoriesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr PackageRepositoriesAttributes) Apt() terra.ListValue[PackageRepositoriesAptAttributes] {
	return terra.ReferenceAsList[PackageRepositoriesAptAttributes](pr.ref.Append("apt"))
}

func (pr PackageRepositoriesAttributes) Goo() terra.ListValue[PackageRepositoriesGooAttributes] {
	return terra.ReferenceAsList[PackageRepositoriesGooAttributes](pr.ref.Append("goo"))
}

func (pr PackageRepositoriesAttributes) Yum() terra.ListValue[PackageRepositoriesYumAttributes] {
	return terra.ReferenceAsList[PackageRepositoriesYumAttributes](pr.ref.Append("yum"))
}

func (pr PackageRepositoriesAttributes) Zypper() terra.ListValue[PackageRepositoriesZypperAttributes] {
	return terra.ReferenceAsList[PackageRepositoriesZypperAttributes](pr.ref.Append("zypper"))
}

type PackageRepositoriesAptAttributes struct {
	ref terra.Reference
}

func (a PackageRepositoriesAptAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a PackageRepositoriesAptAttributes) InternalWithRef(ref terra.Reference) PackageRepositoriesAptAttributes {
	return PackageRepositoriesAptAttributes{ref: ref}
}

func (a PackageRepositoriesAptAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a PackageRepositoriesAptAttributes) ArchiveType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("archive_type"))
}

func (a PackageRepositoriesAptAttributes) Components() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("components"))
}

func (a PackageRepositoriesAptAttributes) Distribution() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("distribution"))
}

func (a PackageRepositoriesAptAttributes) GpgKey() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("gpg_key"))
}

func (a PackageRepositoriesAptAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("uri"))
}

type PackageRepositoriesGooAttributes struct {
	ref terra.Reference
}

func (g PackageRepositoriesGooAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g PackageRepositoriesGooAttributes) InternalWithRef(ref terra.Reference) PackageRepositoriesGooAttributes {
	return PackageRepositoriesGooAttributes{ref: ref}
}

func (g PackageRepositoriesGooAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g PackageRepositoriesGooAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("name"))
}

func (g PackageRepositoriesGooAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("url"))
}

type PackageRepositoriesYumAttributes struct {
	ref terra.Reference
}

func (y PackageRepositoriesYumAttributes) InternalRef() (terra.Reference, error) {
	return y.ref, nil
}

func (y PackageRepositoriesYumAttributes) InternalWithRef(ref terra.Reference) PackageRepositoriesYumAttributes {
	return PackageRepositoriesYumAttributes{ref: ref}
}

func (y PackageRepositoriesYumAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return y.ref.InternalTokens()
}

func (y PackageRepositoriesYumAttributes) BaseUrl() terra.StringValue {
	return terra.ReferenceAsString(y.ref.Append("base_url"))
}

func (y PackageRepositoriesYumAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(y.ref.Append("display_name"))
}

func (y PackageRepositoriesYumAttributes) GpgKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](y.ref.Append("gpg_keys"))
}

func (y PackageRepositoriesYumAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(y.ref.Append("id"))
}

type PackageRepositoriesZypperAttributes struct {
	ref terra.Reference
}

func (z PackageRepositoriesZypperAttributes) InternalRef() (terra.Reference, error) {
	return z.ref, nil
}

func (z PackageRepositoriesZypperAttributes) InternalWithRef(ref terra.Reference) PackageRepositoriesZypperAttributes {
	return PackageRepositoriesZypperAttributes{ref: ref}
}

func (z PackageRepositoriesZypperAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return z.ref.InternalTokens()
}

func (z PackageRepositoriesZypperAttributes) BaseUrl() terra.StringValue {
	return terra.ReferenceAsString(z.ref.Append("base_url"))
}

func (z PackageRepositoriesZypperAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(z.ref.Append("display_name"))
}

func (z PackageRepositoriesZypperAttributes) GpgKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](z.ref.Append("gpg_keys"))
}

func (z PackageRepositoriesZypperAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(z.ref.Append("id"))
}

type PackagesAttributes struct {
	ref terra.Reference
}

func (p PackagesAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PackagesAttributes) InternalWithRef(ref terra.Reference) PackagesAttributes {
	return PackagesAttributes{ref: ref}
}

func (p PackagesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PackagesAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("desired_state"))
}

func (p PackagesAttributes) Manager() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("manager"))
}

func (p PackagesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

type RecipesAttributes struct {
	ref terra.Reference
}

func (r RecipesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RecipesAttributes) InternalWithRef(ref terra.Reference) RecipesAttributes {
	return RecipesAttributes{ref: ref}
}

func (r RecipesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RecipesAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("desired_state"))
}

func (r RecipesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

func (r RecipesAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("version"))
}

func (r RecipesAttributes) Artifacts() terra.ListValue[RecipesArtifactsAttributes] {
	return terra.ReferenceAsList[RecipesArtifactsAttributes](r.ref.Append("artifacts"))
}

func (r RecipesAttributes) InstallSteps() terra.ListValue[RecipesInstallStepsAttributes] {
	return terra.ReferenceAsList[RecipesInstallStepsAttributes](r.ref.Append("install_steps"))
}

func (r RecipesAttributes) UpdateSteps() terra.ListValue[RecipesUpdateStepsAttributes] {
	return terra.ReferenceAsList[RecipesUpdateStepsAttributes](r.ref.Append("update_steps"))
}

type RecipesArtifactsAttributes struct {
	ref terra.Reference
}

func (a RecipesArtifactsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a RecipesArtifactsAttributes) InternalWithRef(ref terra.Reference) RecipesArtifactsAttributes {
	return RecipesArtifactsAttributes{ref: ref}
}

func (a RecipesArtifactsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a RecipesArtifactsAttributes) AllowInsecure() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("allow_insecure"))
}

func (a RecipesArtifactsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("id"))
}

func (a RecipesArtifactsAttributes) Gcs() terra.ListValue[RecipesArtifactsGcsAttributes] {
	return terra.ReferenceAsList[RecipesArtifactsGcsAttributes](a.ref.Append("gcs"))
}

func (a RecipesArtifactsAttributes) Remote() terra.ListValue[RecipesArtifactsRemoteAttributes] {
	return terra.ReferenceAsList[RecipesArtifactsRemoteAttributes](a.ref.Append("remote"))
}

type RecipesArtifactsGcsAttributes struct {
	ref terra.Reference
}

func (g RecipesArtifactsGcsAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g RecipesArtifactsGcsAttributes) InternalWithRef(ref terra.Reference) RecipesArtifactsGcsAttributes {
	return RecipesArtifactsGcsAttributes{ref: ref}
}

func (g RecipesArtifactsGcsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g RecipesArtifactsGcsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("bucket"))
}

func (g RecipesArtifactsGcsAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("generation"))
}

func (g RecipesArtifactsGcsAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("object"))
}

type RecipesArtifactsRemoteAttributes struct {
	ref terra.Reference
}

func (r RecipesArtifactsRemoteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RecipesArtifactsRemoteAttributes) InternalWithRef(ref terra.Reference) RecipesArtifactsRemoteAttributes {
	return RecipesArtifactsRemoteAttributes{ref: ref}
}

func (r RecipesArtifactsRemoteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RecipesArtifactsRemoteAttributes) CheckSum() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("check_sum"))
}

func (r RecipesArtifactsRemoteAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("uri"))
}

type RecipesInstallStepsAttributes struct {
	ref terra.Reference
}

func (is RecipesInstallStepsAttributes) InternalRef() (terra.Reference, error) {
	return is.ref, nil
}

func (is RecipesInstallStepsAttributes) InternalWithRef(ref terra.Reference) RecipesInstallStepsAttributes {
	return RecipesInstallStepsAttributes{ref: ref}
}

func (is RecipesInstallStepsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return is.ref.InternalTokens()
}

func (is RecipesInstallStepsAttributes) ArchiveExtraction() terra.ListValue[RecipesInstallStepsArchiveExtractionAttributes] {
	return terra.ReferenceAsList[RecipesInstallStepsArchiveExtractionAttributes](is.ref.Append("archive_extraction"))
}

func (is RecipesInstallStepsAttributes) DpkgInstallation() terra.ListValue[RecipesInstallStepsDpkgInstallationAttributes] {
	return terra.ReferenceAsList[RecipesInstallStepsDpkgInstallationAttributes](is.ref.Append("dpkg_installation"))
}

func (is RecipesInstallStepsAttributes) FileCopy() terra.ListValue[RecipesInstallStepsFileCopyAttributes] {
	return terra.ReferenceAsList[RecipesInstallStepsFileCopyAttributes](is.ref.Append("file_copy"))
}

func (is RecipesInstallStepsAttributes) FileExec() terra.ListValue[RecipesInstallStepsFileExecAttributes] {
	return terra.ReferenceAsList[RecipesInstallStepsFileExecAttributes](is.ref.Append("file_exec"))
}

func (is RecipesInstallStepsAttributes) MsiInstallation() terra.ListValue[RecipesInstallStepsMsiInstallationAttributes] {
	return terra.ReferenceAsList[RecipesInstallStepsMsiInstallationAttributes](is.ref.Append("msi_installation"))
}

func (is RecipesInstallStepsAttributes) RpmInstallation() terra.ListValue[RecipesInstallStepsRpmInstallationAttributes] {
	return terra.ReferenceAsList[RecipesInstallStepsRpmInstallationAttributes](is.ref.Append("rpm_installation"))
}

func (is RecipesInstallStepsAttributes) ScriptRun() terra.ListValue[RecipesInstallStepsScriptRunAttributes] {
	return terra.ReferenceAsList[RecipesInstallStepsScriptRunAttributes](is.ref.Append("script_run"))
}

type RecipesInstallStepsArchiveExtractionAttributes struct {
	ref terra.Reference
}

func (ae RecipesInstallStepsArchiveExtractionAttributes) InternalRef() (terra.Reference, error) {
	return ae.ref, nil
}

func (ae RecipesInstallStepsArchiveExtractionAttributes) InternalWithRef(ref terra.Reference) RecipesInstallStepsArchiveExtractionAttributes {
	return RecipesInstallStepsArchiveExtractionAttributes{ref: ref}
}

func (ae RecipesInstallStepsArchiveExtractionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ae.ref.InternalTokens()
}

func (ae RecipesInstallStepsArchiveExtractionAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("artifact_id"))
}

func (ae RecipesInstallStepsArchiveExtractionAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("destination"))
}

func (ae RecipesInstallStepsArchiveExtractionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("type"))
}

type RecipesInstallStepsDpkgInstallationAttributes struct {
	ref terra.Reference
}

func (di RecipesInstallStepsDpkgInstallationAttributes) InternalRef() (terra.Reference, error) {
	return di.ref, nil
}

func (di RecipesInstallStepsDpkgInstallationAttributes) InternalWithRef(ref terra.Reference) RecipesInstallStepsDpkgInstallationAttributes {
	return RecipesInstallStepsDpkgInstallationAttributes{ref: ref}
}

func (di RecipesInstallStepsDpkgInstallationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return di.ref.InternalTokens()
}

func (di RecipesInstallStepsDpkgInstallationAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(di.ref.Append("artifact_id"))
}

type RecipesInstallStepsFileCopyAttributes struct {
	ref terra.Reference
}

func (fc RecipesInstallStepsFileCopyAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc RecipesInstallStepsFileCopyAttributes) InternalWithRef(ref terra.Reference) RecipesInstallStepsFileCopyAttributes {
	return RecipesInstallStepsFileCopyAttributes{ref: ref}
}

func (fc RecipesInstallStepsFileCopyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc RecipesInstallStepsFileCopyAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("artifact_id"))
}

func (fc RecipesInstallStepsFileCopyAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("destination"))
}

func (fc RecipesInstallStepsFileCopyAttributes) Overwrite() terra.BoolValue {
	return terra.ReferenceAsBool(fc.ref.Append("overwrite"))
}

func (fc RecipesInstallStepsFileCopyAttributes) Permissions() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("permissions"))
}

type RecipesInstallStepsFileExecAttributes struct {
	ref terra.Reference
}

func (fe RecipesInstallStepsFileExecAttributes) InternalRef() (terra.Reference, error) {
	return fe.ref, nil
}

func (fe RecipesInstallStepsFileExecAttributes) InternalWithRef(ref terra.Reference) RecipesInstallStepsFileExecAttributes {
	return RecipesInstallStepsFileExecAttributes{ref: ref}
}

func (fe RecipesInstallStepsFileExecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fe.ref.InternalTokens()
}

func (fe RecipesInstallStepsFileExecAttributes) AllowedExitCodes() terra.StringValue {
	return terra.ReferenceAsString(fe.ref.Append("allowed_exit_codes"))
}

func (fe RecipesInstallStepsFileExecAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fe.ref.Append("args"))
}

func (fe RecipesInstallStepsFileExecAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(fe.ref.Append("artifact_id"))
}

func (fe RecipesInstallStepsFileExecAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(fe.ref.Append("local_path"))
}

type RecipesInstallStepsMsiInstallationAttributes struct {
	ref terra.Reference
}

func (mi RecipesInstallStepsMsiInstallationAttributes) InternalRef() (terra.Reference, error) {
	return mi.ref, nil
}

func (mi RecipesInstallStepsMsiInstallationAttributes) InternalWithRef(ref terra.Reference) RecipesInstallStepsMsiInstallationAttributes {
	return RecipesInstallStepsMsiInstallationAttributes{ref: ref}
}

func (mi RecipesInstallStepsMsiInstallationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mi.ref.InternalTokens()
}

func (mi RecipesInstallStepsMsiInstallationAttributes) AllowedExitCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](mi.ref.Append("allowed_exit_codes"))
}

func (mi RecipesInstallStepsMsiInstallationAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(mi.ref.Append("artifact_id"))
}

func (mi RecipesInstallStepsMsiInstallationAttributes) Flags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mi.ref.Append("flags"))
}

type RecipesInstallStepsRpmInstallationAttributes struct {
	ref terra.Reference
}

func (ri RecipesInstallStepsRpmInstallationAttributes) InternalRef() (terra.Reference, error) {
	return ri.ref, nil
}

func (ri RecipesInstallStepsRpmInstallationAttributes) InternalWithRef(ref terra.Reference) RecipesInstallStepsRpmInstallationAttributes {
	return RecipesInstallStepsRpmInstallationAttributes{ref: ref}
}

func (ri RecipesInstallStepsRpmInstallationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ri.ref.InternalTokens()
}

func (ri RecipesInstallStepsRpmInstallationAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(ri.ref.Append("artifact_id"))
}

type RecipesInstallStepsScriptRunAttributes struct {
	ref terra.Reference
}

func (sr RecipesInstallStepsScriptRunAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr RecipesInstallStepsScriptRunAttributes) InternalWithRef(ref terra.Reference) RecipesInstallStepsScriptRunAttributes {
	return RecipesInstallStepsScriptRunAttributes{ref: ref}
}

func (sr RecipesInstallStepsScriptRunAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr RecipesInstallStepsScriptRunAttributes) AllowedExitCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](sr.ref.Append("allowed_exit_codes"))
}

func (sr RecipesInstallStepsScriptRunAttributes) Interpreter() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("interpreter"))
}

func (sr RecipesInstallStepsScriptRunAttributes) Script() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("script"))
}

type RecipesUpdateStepsAttributes struct {
	ref terra.Reference
}

func (us RecipesUpdateStepsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us RecipesUpdateStepsAttributes) InternalWithRef(ref terra.Reference) RecipesUpdateStepsAttributes {
	return RecipesUpdateStepsAttributes{ref: ref}
}

func (us RecipesUpdateStepsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us RecipesUpdateStepsAttributes) ArchiveExtraction() terra.ListValue[RecipesUpdateStepsArchiveExtractionAttributes] {
	return terra.ReferenceAsList[RecipesUpdateStepsArchiveExtractionAttributes](us.ref.Append("archive_extraction"))
}

func (us RecipesUpdateStepsAttributes) DpkgInstallation() terra.ListValue[RecipesUpdateStepsDpkgInstallationAttributes] {
	return terra.ReferenceAsList[RecipesUpdateStepsDpkgInstallationAttributes](us.ref.Append("dpkg_installation"))
}

func (us RecipesUpdateStepsAttributes) FileCopy() terra.ListValue[RecipesUpdateStepsFileCopyAttributes] {
	return terra.ReferenceAsList[RecipesUpdateStepsFileCopyAttributes](us.ref.Append("file_copy"))
}

func (us RecipesUpdateStepsAttributes) FileExec() terra.ListValue[RecipesUpdateStepsFileExecAttributes] {
	return terra.ReferenceAsList[RecipesUpdateStepsFileExecAttributes](us.ref.Append("file_exec"))
}

func (us RecipesUpdateStepsAttributes) MsiInstallation() terra.ListValue[RecipesUpdateStepsMsiInstallationAttributes] {
	return terra.ReferenceAsList[RecipesUpdateStepsMsiInstallationAttributes](us.ref.Append("msi_installation"))
}

func (us RecipesUpdateStepsAttributes) RpmInstallation() terra.ListValue[RecipesUpdateStepsRpmInstallationAttributes] {
	return terra.ReferenceAsList[RecipesUpdateStepsRpmInstallationAttributes](us.ref.Append("rpm_installation"))
}

func (us RecipesUpdateStepsAttributes) ScriptRun() terra.ListValue[RecipesUpdateStepsScriptRunAttributes] {
	return terra.ReferenceAsList[RecipesUpdateStepsScriptRunAttributes](us.ref.Append("script_run"))
}

type RecipesUpdateStepsArchiveExtractionAttributes struct {
	ref terra.Reference
}

func (ae RecipesUpdateStepsArchiveExtractionAttributes) InternalRef() (terra.Reference, error) {
	return ae.ref, nil
}

func (ae RecipesUpdateStepsArchiveExtractionAttributes) InternalWithRef(ref terra.Reference) RecipesUpdateStepsArchiveExtractionAttributes {
	return RecipesUpdateStepsArchiveExtractionAttributes{ref: ref}
}

func (ae RecipesUpdateStepsArchiveExtractionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ae.ref.InternalTokens()
}

func (ae RecipesUpdateStepsArchiveExtractionAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("artifact_id"))
}

func (ae RecipesUpdateStepsArchiveExtractionAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("destination"))
}

func (ae RecipesUpdateStepsArchiveExtractionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("type"))
}

type RecipesUpdateStepsDpkgInstallationAttributes struct {
	ref terra.Reference
}

func (di RecipesUpdateStepsDpkgInstallationAttributes) InternalRef() (terra.Reference, error) {
	return di.ref, nil
}

func (di RecipesUpdateStepsDpkgInstallationAttributes) InternalWithRef(ref terra.Reference) RecipesUpdateStepsDpkgInstallationAttributes {
	return RecipesUpdateStepsDpkgInstallationAttributes{ref: ref}
}

func (di RecipesUpdateStepsDpkgInstallationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return di.ref.InternalTokens()
}

func (di RecipesUpdateStepsDpkgInstallationAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(di.ref.Append("artifact_id"))
}

type RecipesUpdateStepsFileCopyAttributes struct {
	ref terra.Reference
}

func (fc RecipesUpdateStepsFileCopyAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc RecipesUpdateStepsFileCopyAttributes) InternalWithRef(ref terra.Reference) RecipesUpdateStepsFileCopyAttributes {
	return RecipesUpdateStepsFileCopyAttributes{ref: ref}
}

func (fc RecipesUpdateStepsFileCopyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc RecipesUpdateStepsFileCopyAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("artifact_id"))
}

func (fc RecipesUpdateStepsFileCopyAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("destination"))
}

func (fc RecipesUpdateStepsFileCopyAttributes) Overwrite() terra.BoolValue {
	return terra.ReferenceAsBool(fc.ref.Append("overwrite"))
}

func (fc RecipesUpdateStepsFileCopyAttributes) Permissions() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("permissions"))
}

type RecipesUpdateStepsFileExecAttributes struct {
	ref terra.Reference
}

func (fe RecipesUpdateStepsFileExecAttributes) InternalRef() (terra.Reference, error) {
	return fe.ref, nil
}

func (fe RecipesUpdateStepsFileExecAttributes) InternalWithRef(ref terra.Reference) RecipesUpdateStepsFileExecAttributes {
	return RecipesUpdateStepsFileExecAttributes{ref: ref}
}

func (fe RecipesUpdateStepsFileExecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fe.ref.InternalTokens()
}

func (fe RecipesUpdateStepsFileExecAttributes) AllowedExitCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](fe.ref.Append("allowed_exit_codes"))
}

func (fe RecipesUpdateStepsFileExecAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fe.ref.Append("args"))
}

func (fe RecipesUpdateStepsFileExecAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(fe.ref.Append("artifact_id"))
}

func (fe RecipesUpdateStepsFileExecAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(fe.ref.Append("local_path"))
}

type RecipesUpdateStepsMsiInstallationAttributes struct {
	ref terra.Reference
}

func (mi RecipesUpdateStepsMsiInstallationAttributes) InternalRef() (terra.Reference, error) {
	return mi.ref, nil
}

func (mi RecipesUpdateStepsMsiInstallationAttributes) InternalWithRef(ref terra.Reference) RecipesUpdateStepsMsiInstallationAttributes {
	return RecipesUpdateStepsMsiInstallationAttributes{ref: ref}
}

func (mi RecipesUpdateStepsMsiInstallationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mi.ref.InternalTokens()
}

func (mi RecipesUpdateStepsMsiInstallationAttributes) AllowedExitCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](mi.ref.Append("allowed_exit_codes"))
}

func (mi RecipesUpdateStepsMsiInstallationAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(mi.ref.Append("artifact_id"))
}

func (mi RecipesUpdateStepsMsiInstallationAttributes) Flags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mi.ref.Append("flags"))
}

type RecipesUpdateStepsRpmInstallationAttributes struct {
	ref terra.Reference
}

func (ri RecipesUpdateStepsRpmInstallationAttributes) InternalRef() (terra.Reference, error) {
	return ri.ref, nil
}

func (ri RecipesUpdateStepsRpmInstallationAttributes) InternalWithRef(ref terra.Reference) RecipesUpdateStepsRpmInstallationAttributes {
	return RecipesUpdateStepsRpmInstallationAttributes{ref: ref}
}

func (ri RecipesUpdateStepsRpmInstallationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ri.ref.InternalTokens()
}

func (ri RecipesUpdateStepsRpmInstallationAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(ri.ref.Append("artifact_id"))
}

type RecipesUpdateStepsScriptRunAttributes struct {
	ref terra.Reference
}

func (sr RecipesUpdateStepsScriptRunAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr RecipesUpdateStepsScriptRunAttributes) InternalWithRef(ref terra.Reference) RecipesUpdateStepsScriptRunAttributes {
	return RecipesUpdateStepsScriptRunAttributes{ref: ref}
}

func (sr RecipesUpdateStepsScriptRunAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr RecipesUpdateStepsScriptRunAttributes) AllowedExitCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](sr.ref.Append("allowed_exit_codes"))
}

func (sr RecipesUpdateStepsScriptRunAttributes) Interpreter() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("interpreter"))
}

func (sr RecipesUpdateStepsScriptRunAttributes) Script() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("script"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AssignmentState struct {
	InstanceNamePrefixes []string                     `json:"instance_name_prefixes"`
	Instances            []string                     `json:"instances"`
	Zones                []string                     `json:"zones"`
	GroupLabels          []AssignmentGroupLabelsState `json:"group_labels"`
	OsTypes              []AssignmentOsTypesState     `json:"os_types"`
}

type AssignmentGroupLabelsState struct {
	Labels map[string]string `json:"labels"`
}

type AssignmentOsTypesState struct {
	OsArchitecture string `json:"os_architecture"`
	OsShortName    string `json:"os_short_name"`
	OsVersion      string `json:"os_version"`
}

type PackageRepositoriesState struct {
	Apt    []PackageRepositoriesAptState    `json:"apt"`
	Goo    []PackageRepositoriesGooState    `json:"goo"`
	Yum    []PackageRepositoriesYumState    `json:"yum"`
	Zypper []PackageRepositoriesZypperState `json:"zypper"`
}

type PackageRepositoriesAptState struct {
	ArchiveType  string   `json:"archive_type"`
	Components   []string `json:"components"`
	Distribution string   `json:"distribution"`
	GpgKey       string   `json:"gpg_key"`
	Uri          string   `json:"uri"`
}

type PackageRepositoriesGooState struct {
	Name string `json:"name"`
	Url  string `json:"url"`
}

type PackageRepositoriesYumState struct {
	BaseUrl     string   `json:"base_url"`
	DisplayName string   `json:"display_name"`
	GpgKeys     []string `json:"gpg_keys"`
	Id          string   `json:"id"`
}

type PackageRepositoriesZypperState struct {
	BaseUrl     string   `json:"base_url"`
	DisplayName string   `json:"display_name"`
	GpgKeys     []string `json:"gpg_keys"`
	Id          string   `json:"id"`
}

type PackagesState struct {
	DesiredState string `json:"desired_state"`
	Manager      string `json:"manager"`
	Name         string `json:"name"`
}

type RecipesState struct {
	DesiredState string                     `json:"desired_state"`
	Name         string                     `json:"name"`
	Version      string                     `json:"version"`
	Artifacts    []RecipesArtifactsState    `json:"artifacts"`
	InstallSteps []RecipesInstallStepsState `json:"install_steps"`
	UpdateSteps  []RecipesUpdateStepsState  `json:"update_steps"`
}

type RecipesArtifactsState struct {
	AllowInsecure bool                          `json:"allow_insecure"`
	Id            string                        `json:"id"`
	Gcs           []RecipesArtifactsGcsState    `json:"gcs"`
	Remote        []RecipesArtifactsRemoteState `json:"remote"`
}

type RecipesArtifactsGcsState struct {
	Bucket     string  `json:"bucket"`
	Generation float64 `json:"generation"`
	Object     string  `json:"object"`
}

type RecipesArtifactsRemoteState struct {
	CheckSum string `json:"check_sum"`
	Uri      string `json:"uri"`
}

type RecipesInstallStepsState struct {
	ArchiveExtraction []RecipesInstallStepsArchiveExtractionState `json:"archive_extraction"`
	DpkgInstallation  []RecipesInstallStepsDpkgInstallationState  `json:"dpkg_installation"`
	FileCopy          []RecipesInstallStepsFileCopyState          `json:"file_copy"`
	FileExec          []RecipesInstallStepsFileExecState          `json:"file_exec"`
	MsiInstallation   []RecipesInstallStepsMsiInstallationState   `json:"msi_installation"`
	RpmInstallation   []RecipesInstallStepsRpmInstallationState   `json:"rpm_installation"`
	ScriptRun         []RecipesInstallStepsScriptRunState         `json:"script_run"`
}

type RecipesInstallStepsArchiveExtractionState struct {
	ArtifactId  string `json:"artifact_id"`
	Destination string `json:"destination"`
	Type        string `json:"type"`
}

type RecipesInstallStepsDpkgInstallationState struct {
	ArtifactId string `json:"artifact_id"`
}

type RecipesInstallStepsFileCopyState struct {
	ArtifactId  string `json:"artifact_id"`
	Destination string `json:"destination"`
	Overwrite   bool   `json:"overwrite"`
	Permissions string `json:"permissions"`
}

type RecipesInstallStepsFileExecState struct {
	AllowedExitCodes string   `json:"allowed_exit_codes"`
	Args             []string `json:"args"`
	ArtifactId       string   `json:"artifact_id"`
	LocalPath        string   `json:"local_path"`
}

type RecipesInstallStepsMsiInstallationState struct {
	AllowedExitCodes []float64 `json:"allowed_exit_codes"`
	ArtifactId       string    `json:"artifact_id"`
	Flags            []string  `json:"flags"`
}

type RecipesInstallStepsRpmInstallationState struct {
	ArtifactId string `json:"artifact_id"`
}

type RecipesInstallStepsScriptRunState struct {
	AllowedExitCodes []float64 `json:"allowed_exit_codes"`
	Interpreter      string    `json:"interpreter"`
	Script           string    `json:"script"`
}

type RecipesUpdateStepsState struct {
	ArchiveExtraction []RecipesUpdateStepsArchiveExtractionState `json:"archive_extraction"`
	DpkgInstallation  []RecipesUpdateStepsDpkgInstallationState  `json:"dpkg_installation"`
	FileCopy          []RecipesUpdateStepsFileCopyState          `json:"file_copy"`
	FileExec          []RecipesUpdateStepsFileExecState          `json:"file_exec"`
	MsiInstallation   []RecipesUpdateStepsMsiInstallationState   `json:"msi_installation"`
	RpmInstallation   []RecipesUpdateStepsRpmInstallationState   `json:"rpm_installation"`
	ScriptRun         []RecipesUpdateStepsScriptRunState         `json:"script_run"`
}

type RecipesUpdateStepsArchiveExtractionState struct {
	ArtifactId  string `json:"artifact_id"`
	Destination string `json:"destination"`
	Type        string `json:"type"`
}

type RecipesUpdateStepsDpkgInstallationState struct {
	ArtifactId string `json:"artifact_id"`
}

type RecipesUpdateStepsFileCopyState struct {
	ArtifactId  string `json:"artifact_id"`
	Destination string `json:"destination"`
	Overwrite   bool   `json:"overwrite"`
	Permissions string `json:"permissions"`
}

type RecipesUpdateStepsFileExecState struct {
	AllowedExitCodes []float64 `json:"allowed_exit_codes"`
	Args             []string  `json:"args"`
	ArtifactId       string    `json:"artifact_id"`
	LocalPath        string    `json:"local_path"`
}

type RecipesUpdateStepsMsiInstallationState struct {
	AllowedExitCodes []float64 `json:"allowed_exit_codes"`
	ArtifactId       string    `json:"artifact_id"`
	Flags            []string  `json:"flags"`
}

type RecipesUpdateStepsRpmInstallationState struct {
	ArtifactId string `json:"artifact_id"`
}

type RecipesUpdateStepsScriptRunState struct {
	AllowedExitCodes []float64 `json:"allowed_exit_codes"`
	Interpreter      string    `json:"interpreter"`
	Script           string    `json:"script"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
