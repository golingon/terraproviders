// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_monitoring_notification_channel

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_monitoring_notification_channel.
type Resource struct {
	Name      string
	Args      Args
	state     *googleMonitoringNotificationChannelState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gmnc *Resource) Type() string {
	return "google_monitoring_notification_channel"
}

// LocalName returns the local name for [Resource].
func (gmnc *Resource) LocalName() string {
	return gmnc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gmnc *Resource) Configuration() interface{} {
	return gmnc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gmnc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gmnc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gmnc *Resource) Dependencies() terra.Dependencies {
	return gmnc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gmnc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gmnc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gmnc *Resource) Attributes() googleMonitoringNotificationChannelAttributes {
	return googleMonitoringNotificationChannelAttributes{ref: terra.ReferenceResource(gmnc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gmnc *Resource) ImportState(state io.Reader) error {
	gmnc.state = &googleMonitoringNotificationChannelState{}
	if err := json.NewDecoder(state).Decode(gmnc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gmnc.Type(), gmnc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gmnc *Resource) State() (*googleMonitoringNotificationChannelState, bool) {
	return gmnc.state, gmnc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gmnc *Resource) StateMust() *googleMonitoringNotificationChannelState {
	if gmnc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gmnc.Type(), gmnc.LocalName()))
	}
	return gmnc.state
}

// Args contains the configurations for google_monitoring_notification_channel.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// ForceDelete: bool, optional
	ForceDelete terra.BoolValue `hcl:"force_delete,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// UserLabels: map of string, optional
	UserLabels terra.MapValue[terra.StringValue] `hcl:"user_labels,attr"`
	// SensitiveLabels: optional
	SensitiveLabels *SensitiveLabels `hcl:"sensitive_labels,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleMonitoringNotificationChannelAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_monitoring_notification_channel.
func (gmnc googleMonitoringNotificationChannelAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gmnc.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_monitoring_notification_channel.
func (gmnc googleMonitoringNotificationChannelAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gmnc.ref.Append("display_name"))
}

// Enabled returns a reference to field enabled of google_monitoring_notification_channel.
func (gmnc googleMonitoringNotificationChannelAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gmnc.ref.Append("enabled"))
}

// ForceDelete returns a reference to field force_delete of google_monitoring_notification_channel.
func (gmnc googleMonitoringNotificationChannelAttributes) ForceDelete() terra.BoolValue {
	return terra.ReferenceAsBool(gmnc.ref.Append("force_delete"))
}

// Id returns a reference to field id of google_monitoring_notification_channel.
func (gmnc googleMonitoringNotificationChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gmnc.ref.Append("id"))
}

// Labels returns a reference to field labels of google_monitoring_notification_channel.
func (gmnc googleMonitoringNotificationChannelAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gmnc.ref.Append("labels"))
}

// Name returns a reference to field name of google_monitoring_notification_channel.
func (gmnc googleMonitoringNotificationChannelAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gmnc.ref.Append("name"))
}

// Project returns a reference to field project of google_monitoring_notification_channel.
func (gmnc googleMonitoringNotificationChannelAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gmnc.ref.Append("project"))
}

// Type returns a reference to field type of google_monitoring_notification_channel.
func (gmnc googleMonitoringNotificationChannelAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gmnc.ref.Append("type"))
}

// UserLabels returns a reference to field user_labels of google_monitoring_notification_channel.
func (gmnc googleMonitoringNotificationChannelAttributes) UserLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gmnc.ref.Append("user_labels"))
}

// VerificationStatus returns a reference to field verification_status of google_monitoring_notification_channel.
func (gmnc googleMonitoringNotificationChannelAttributes) VerificationStatus() terra.StringValue {
	return terra.ReferenceAsString(gmnc.ref.Append("verification_status"))
}

func (gmnc googleMonitoringNotificationChannelAttributes) SensitiveLabels() terra.ListValue[SensitiveLabelsAttributes] {
	return terra.ReferenceAsList[SensitiveLabelsAttributes](gmnc.ref.Append("sensitive_labels"))
}

func (gmnc googleMonitoringNotificationChannelAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gmnc.ref.Append("timeouts"))
}

type googleMonitoringNotificationChannelState struct {
	Description        string                 `json:"description"`
	DisplayName        string                 `json:"display_name"`
	Enabled            bool                   `json:"enabled"`
	ForceDelete        bool                   `json:"force_delete"`
	Id                 string                 `json:"id"`
	Labels             map[string]string      `json:"labels"`
	Name               string                 `json:"name"`
	Project            string                 `json:"project"`
	Type               string                 `json:"type"`
	UserLabels         map[string]string      `json:"user_labels"`
	VerificationStatus string                 `json:"verification_status"`
	SensitiveLabels    []SensitiveLabelsState `json:"sensitive_labels"`
	Timeouts           *TimeoutsState         `json:"timeouts"`
}
