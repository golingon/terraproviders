// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_scc_notification_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_scc_notification_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleSccNotificationConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsnc *Resource) Type() string {
	return "google_scc_notification_config"
}

// LocalName returns the local name for [Resource].
func (gsnc *Resource) LocalName() string {
	return gsnc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsnc *Resource) Configuration() interface{} {
	return gsnc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsnc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsnc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsnc *Resource) Dependencies() terra.Dependencies {
	return gsnc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsnc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsnc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsnc *Resource) Attributes() googleSccNotificationConfigAttributes {
	return googleSccNotificationConfigAttributes{ref: terra.ReferenceResource(gsnc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsnc *Resource) ImportState(state io.Reader) error {
	gsnc.state = &googleSccNotificationConfigState{}
	if err := json.NewDecoder(state).Decode(gsnc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsnc.Type(), gsnc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsnc *Resource) State() (*googleSccNotificationConfigState, bool) {
	return gsnc.state, gsnc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsnc *Resource) StateMust() *googleSccNotificationConfigState {
	if gsnc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsnc.Type(), gsnc.LocalName()))
	}
	return gsnc.state
}

// Args contains the configurations for google_scc_notification_config.
type Args struct {
	// ConfigId: string, required
	ConfigId terra.StringValue `hcl:"config_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Organization: string, required
	Organization terra.StringValue `hcl:"organization,attr" validate:"required"`
	// PubsubTopic: string, required
	PubsubTopic terra.StringValue `hcl:"pubsub_topic,attr" validate:"required"`
	// StreamingConfig: required
	StreamingConfig *StreamingConfig `hcl:"streaming_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleSccNotificationConfigAttributes struct {
	ref terra.Reference
}

// ConfigId returns a reference to field config_id of google_scc_notification_config.
func (gsnc googleSccNotificationConfigAttributes) ConfigId() terra.StringValue {
	return terra.ReferenceAsString(gsnc.ref.Append("config_id"))
}

// Description returns a reference to field description of google_scc_notification_config.
func (gsnc googleSccNotificationConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gsnc.ref.Append("description"))
}

// Id returns a reference to field id of google_scc_notification_config.
func (gsnc googleSccNotificationConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsnc.ref.Append("id"))
}

// Name returns a reference to field name of google_scc_notification_config.
func (gsnc googleSccNotificationConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsnc.ref.Append("name"))
}

// Organization returns a reference to field organization of google_scc_notification_config.
func (gsnc googleSccNotificationConfigAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(gsnc.ref.Append("organization"))
}

// PubsubTopic returns a reference to field pubsub_topic of google_scc_notification_config.
func (gsnc googleSccNotificationConfigAttributes) PubsubTopic() terra.StringValue {
	return terra.ReferenceAsString(gsnc.ref.Append("pubsub_topic"))
}

// ServiceAccount returns a reference to field service_account of google_scc_notification_config.
func (gsnc googleSccNotificationConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(gsnc.ref.Append("service_account"))
}

func (gsnc googleSccNotificationConfigAttributes) StreamingConfig() terra.ListValue[StreamingConfigAttributes] {
	return terra.ReferenceAsList[StreamingConfigAttributes](gsnc.ref.Append("streaming_config"))
}

func (gsnc googleSccNotificationConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsnc.ref.Append("timeouts"))
}

type googleSccNotificationConfigState struct {
	ConfigId        string                 `json:"config_id"`
	Description     string                 `json:"description"`
	Id              string                 `json:"id"`
	Name            string                 `json:"name"`
	Organization    string                 `json:"organization"`
	PubsubTopic     string                 `json:"pubsub_topic"`
	ServiceAccount  string                 `json:"service_account"`
	StreamingConfig []StreamingConfigState `json:"streaming_config"`
	Timeouts        *TimeoutsState         `json:"timeouts"`
}
