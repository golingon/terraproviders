// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_vertex_ai_feature_online_store

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_vertex_ai_feature_online_store.
type Resource struct {
	Name      string
	Args      Args
	state     *googleVertexAiFeatureOnlineStoreState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gvafos *Resource) Type() string {
	return "google_vertex_ai_feature_online_store"
}

// LocalName returns the local name for [Resource].
func (gvafos *Resource) LocalName() string {
	return gvafos.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gvafos *Resource) Configuration() interface{} {
	return gvafos.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gvafos *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gvafos)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gvafos *Resource) Dependencies() terra.Dependencies {
	return gvafos.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gvafos *Resource) LifecycleManagement() *terra.Lifecycle {
	return gvafos.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gvafos *Resource) Attributes() googleVertexAiFeatureOnlineStoreAttributes {
	return googleVertexAiFeatureOnlineStoreAttributes{ref: terra.ReferenceResource(gvafos)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gvafos *Resource) ImportState(state io.Reader) error {
	gvafos.state = &googleVertexAiFeatureOnlineStoreState{}
	if err := json.NewDecoder(state).Decode(gvafos.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gvafos.Type(), gvafos.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gvafos *Resource) State() (*googleVertexAiFeatureOnlineStoreState, bool) {
	return gvafos.state, gvafos.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gvafos *Resource) StateMust() *googleVertexAiFeatureOnlineStoreState {
	if gvafos.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gvafos.Type(), gvafos.LocalName()))
	}
	return gvafos.state
}

// Args contains the configurations for google_vertex_ai_feature_online_store.
type Args struct {
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Bigtable: optional
	Bigtable *Bigtable `hcl:"bigtable,block"`
	// DedicatedServingEndpoint: optional
	DedicatedServingEndpoint *DedicatedServingEndpoint `hcl:"dedicated_serving_endpoint,block"`
	// EmbeddingManagement: optional
	EmbeddingManagement *EmbeddingManagement `hcl:"embedding_management,block"`
	// Optimized: optional
	Optimized *Optimized `hcl:"optimized,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleVertexAiFeatureOnlineStoreAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_vertex_ai_feature_online_store.
func (gvafos googleVertexAiFeatureOnlineStoreAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gvafos.ref.Append("create_time"))
}

// EffectiveLabels returns a reference to field effective_labels of google_vertex_ai_feature_online_store.
func (gvafos googleVertexAiFeatureOnlineStoreAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gvafos.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_vertex_ai_feature_online_store.
func (gvafos googleVertexAiFeatureOnlineStoreAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gvafos.ref.Append("etag"))
}

// ForceDestroy returns a reference to field force_destroy of google_vertex_ai_feature_online_store.
func (gvafos googleVertexAiFeatureOnlineStoreAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(gvafos.ref.Append("force_destroy"))
}

// Id returns a reference to field id of google_vertex_ai_feature_online_store.
func (gvafos googleVertexAiFeatureOnlineStoreAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gvafos.ref.Append("id"))
}

// Labels returns a reference to field labels of google_vertex_ai_feature_online_store.
func (gvafos googleVertexAiFeatureOnlineStoreAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gvafos.ref.Append("labels"))
}

// Name returns a reference to field name of google_vertex_ai_feature_online_store.
func (gvafos googleVertexAiFeatureOnlineStoreAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gvafos.ref.Append("name"))
}

// Project returns a reference to field project of google_vertex_ai_feature_online_store.
func (gvafos googleVertexAiFeatureOnlineStoreAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gvafos.ref.Append("project"))
}

// Region returns a reference to field region of google_vertex_ai_feature_online_store.
func (gvafos googleVertexAiFeatureOnlineStoreAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gvafos.ref.Append("region"))
}

// State returns a reference to field state of google_vertex_ai_feature_online_store.
func (gvafos googleVertexAiFeatureOnlineStoreAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gvafos.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_vertex_ai_feature_online_store.
func (gvafos googleVertexAiFeatureOnlineStoreAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gvafos.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_vertex_ai_feature_online_store.
func (gvafos googleVertexAiFeatureOnlineStoreAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gvafos.ref.Append("update_time"))
}

func (gvafos googleVertexAiFeatureOnlineStoreAttributes) Bigtable() terra.ListValue[BigtableAttributes] {
	return terra.ReferenceAsList[BigtableAttributes](gvafos.ref.Append("bigtable"))
}

func (gvafos googleVertexAiFeatureOnlineStoreAttributes) DedicatedServingEndpoint() terra.ListValue[DedicatedServingEndpointAttributes] {
	return terra.ReferenceAsList[DedicatedServingEndpointAttributes](gvafos.ref.Append("dedicated_serving_endpoint"))
}

func (gvafos googleVertexAiFeatureOnlineStoreAttributes) EmbeddingManagement() terra.ListValue[EmbeddingManagementAttributes] {
	return terra.ReferenceAsList[EmbeddingManagementAttributes](gvafos.ref.Append("embedding_management"))
}

func (gvafos googleVertexAiFeatureOnlineStoreAttributes) Optimized() terra.ListValue[OptimizedAttributes] {
	return terra.ReferenceAsList[OptimizedAttributes](gvafos.ref.Append("optimized"))
}

func (gvafos googleVertexAiFeatureOnlineStoreAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gvafos.ref.Append("timeouts"))
}

type googleVertexAiFeatureOnlineStoreState struct {
	CreateTime               string                          `json:"create_time"`
	EffectiveLabels          map[string]string               `json:"effective_labels"`
	Etag                     string                          `json:"etag"`
	ForceDestroy             bool                            `json:"force_destroy"`
	Id                       string                          `json:"id"`
	Labels                   map[string]string               `json:"labels"`
	Name                     string                          `json:"name"`
	Project                  string                          `json:"project"`
	Region                   string                          `json:"region"`
	State                    string                          `json:"state"`
	TerraformLabels          map[string]string               `json:"terraform_labels"`
	UpdateTime               string                          `json:"update_time"`
	Bigtable                 []BigtableState                 `json:"bigtable"`
	DedicatedServingEndpoint []DedicatedServingEndpointState `json:"dedicated_serving_endpoint"`
	EmbeddingManagement      []EmbeddingManagementState      `json:"embedding_management"`
	Optimized                []OptimizedState                `json:"optimized"`
	Timeouts                 *TimeoutsState                  `json:"timeouts"`
}
