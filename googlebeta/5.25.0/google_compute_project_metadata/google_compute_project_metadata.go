// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_project_metadata

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_project_metadata.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeProjectMetadataState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcpm *Resource) Type() string {
	return "google_compute_project_metadata"
}

// LocalName returns the local name for [Resource].
func (gcpm *Resource) LocalName() string {
	return gcpm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcpm *Resource) Configuration() interface{} {
	return gcpm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcpm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcpm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcpm *Resource) Dependencies() terra.Dependencies {
	return gcpm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcpm *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcpm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcpm *Resource) Attributes() googleComputeProjectMetadataAttributes {
	return googleComputeProjectMetadataAttributes{ref: terra.ReferenceResource(gcpm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcpm *Resource) ImportState(state io.Reader) error {
	gcpm.state = &googleComputeProjectMetadataState{}
	if err := json.NewDecoder(state).Decode(gcpm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcpm.Type(), gcpm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcpm *Resource) State() (*googleComputeProjectMetadataState, bool) {
	return gcpm.state, gcpm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcpm *Resource) StateMust() *googleComputeProjectMetadataState {
	if gcpm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcpm.Type(), gcpm.LocalName()))
	}
	return gcpm.state
}

// Args contains the configurations for google_compute_project_metadata.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, required
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeProjectMetadataAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_compute_project_metadata.
func (gcpm googleComputeProjectMetadataAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcpm.ref.Append("id"))
}

// Metadata returns a reference to field metadata of google_compute_project_metadata.
func (gcpm googleComputeProjectMetadataAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcpm.ref.Append("metadata"))
}

// Project returns a reference to field project of google_compute_project_metadata.
func (gcpm googleComputeProjectMetadataAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcpm.ref.Append("project"))
}

func (gcpm googleComputeProjectMetadataAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcpm.ref.Append("timeouts"))
}

type googleComputeProjectMetadataState struct {
	Id       string            `json:"id"`
	Metadata map[string]string `json:"metadata"`
	Project  string            `json:"project"`
	Timeouts *TimeoutsState    `json:"timeouts"`
}
