// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_project_metadata_item

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_project_metadata_item.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeProjectMetadataItemState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcpmi *Resource) Type() string {
	return "google_compute_project_metadata_item"
}

// LocalName returns the local name for [Resource].
func (gcpmi *Resource) LocalName() string {
	return gcpmi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcpmi *Resource) Configuration() interface{} {
	return gcpmi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcpmi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcpmi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcpmi *Resource) Dependencies() terra.Dependencies {
	return gcpmi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcpmi *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcpmi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcpmi *Resource) Attributes() googleComputeProjectMetadataItemAttributes {
	return googleComputeProjectMetadataItemAttributes{ref: terra.ReferenceResource(gcpmi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcpmi *Resource) ImportState(state io.Reader) error {
	gcpmi.state = &googleComputeProjectMetadataItemState{}
	if err := json.NewDecoder(state).Decode(gcpmi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcpmi.Type(), gcpmi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcpmi *Resource) State() (*googleComputeProjectMetadataItemState, bool) {
	return gcpmi.state, gcpmi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcpmi *Resource) StateMust() *googleComputeProjectMetadataItemState {
	if gcpmi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcpmi.Type(), gcpmi.LocalName()))
	}
	return gcpmi.state
}

// Args contains the configurations for google_compute_project_metadata_item.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeProjectMetadataItemAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_compute_project_metadata_item.
func (gcpmi googleComputeProjectMetadataItemAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcpmi.ref.Append("id"))
}

// Key returns a reference to field key of google_compute_project_metadata_item.
func (gcpmi googleComputeProjectMetadataItemAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(gcpmi.ref.Append("key"))
}

// Project returns a reference to field project of google_compute_project_metadata_item.
func (gcpmi googleComputeProjectMetadataItemAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcpmi.ref.Append("project"))
}

// Value returns a reference to field value of google_compute_project_metadata_item.
func (gcpmi googleComputeProjectMetadataItemAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(gcpmi.ref.Append("value"))
}

func (gcpmi googleComputeProjectMetadataItemAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcpmi.ref.Append("timeouts"))
}

type googleComputeProjectMetadataItemState struct {
	Id       string         `json:"id"`
	Key      string         `json:"key"`
	Project  string         `json:"project"`
	Value    string         `json:"value"`
	Timeouts *TimeoutsState `json:"timeouts"`
}
