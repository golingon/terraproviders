// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_app_engine_flexible_app_version

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ApiConfig struct {
	// AuthFailAction: string, optional
	AuthFailAction terra.StringValue `hcl:"auth_fail_action,attr"`
	// Login: string, optional
	Login terra.StringValue `hcl:"login,attr"`
	// Script: string, required
	Script terra.StringValue `hcl:"script,attr" validate:"required"`
	// SecurityLevel: string, optional
	SecurityLevel terra.StringValue `hcl:"security_level,attr"`
	// Url: string, optional
	Url terra.StringValue `hcl:"url,attr"`
}

type AutomaticScaling struct {
	// CoolDownPeriod: string, optional
	CoolDownPeriod terra.StringValue `hcl:"cool_down_period,attr"`
	// MaxConcurrentRequests: number, optional
	MaxConcurrentRequests terra.NumberValue `hcl:"max_concurrent_requests,attr"`
	// MaxIdleInstances: number, optional
	MaxIdleInstances terra.NumberValue `hcl:"max_idle_instances,attr"`
	// MaxPendingLatency: string, optional
	MaxPendingLatency terra.StringValue `hcl:"max_pending_latency,attr"`
	// MaxTotalInstances: number, optional
	MaxTotalInstances terra.NumberValue `hcl:"max_total_instances,attr"`
	// MinIdleInstances: number, optional
	MinIdleInstances terra.NumberValue `hcl:"min_idle_instances,attr"`
	// MinPendingLatency: string, optional
	MinPendingLatency terra.StringValue `hcl:"min_pending_latency,attr"`
	// MinTotalInstances: number, optional
	MinTotalInstances terra.NumberValue `hcl:"min_total_instances,attr"`
	// AutomaticScalingCpuUtilization: required
	CpuUtilization *AutomaticScalingCpuUtilization `hcl:"cpu_utilization,block" validate:"required"`
	// AutomaticScalingDiskUtilization: optional
	DiskUtilization *AutomaticScalingDiskUtilization `hcl:"disk_utilization,block"`
	// AutomaticScalingNetworkUtilization: optional
	NetworkUtilization *AutomaticScalingNetworkUtilization `hcl:"network_utilization,block"`
	// AutomaticScalingRequestUtilization: optional
	RequestUtilization *AutomaticScalingRequestUtilization `hcl:"request_utilization,block"`
}

type AutomaticScalingCpuUtilization struct {
	// AggregationWindowLength: string, optional
	AggregationWindowLength terra.StringValue `hcl:"aggregation_window_length,attr"`
	// TargetUtilization: number, required
	TargetUtilization terra.NumberValue `hcl:"target_utilization,attr" validate:"required"`
}

type AutomaticScalingDiskUtilization struct {
	// TargetReadBytesPerSecond: number, optional
	TargetReadBytesPerSecond terra.NumberValue `hcl:"target_read_bytes_per_second,attr"`
	// TargetReadOpsPerSecond: number, optional
	TargetReadOpsPerSecond terra.NumberValue `hcl:"target_read_ops_per_second,attr"`
	// TargetWriteBytesPerSecond: number, optional
	TargetWriteBytesPerSecond terra.NumberValue `hcl:"target_write_bytes_per_second,attr"`
	// TargetWriteOpsPerSecond: number, optional
	TargetWriteOpsPerSecond terra.NumberValue `hcl:"target_write_ops_per_second,attr"`
}

type AutomaticScalingNetworkUtilization struct {
	// TargetReceivedBytesPerSecond: number, optional
	TargetReceivedBytesPerSecond terra.NumberValue `hcl:"target_received_bytes_per_second,attr"`
	// TargetReceivedPacketsPerSecond: number, optional
	TargetReceivedPacketsPerSecond terra.NumberValue `hcl:"target_received_packets_per_second,attr"`
	// TargetSentBytesPerSecond: number, optional
	TargetSentBytesPerSecond terra.NumberValue `hcl:"target_sent_bytes_per_second,attr"`
	// TargetSentPacketsPerSecond: number, optional
	TargetSentPacketsPerSecond terra.NumberValue `hcl:"target_sent_packets_per_second,attr"`
}

type AutomaticScalingRequestUtilization struct {
	// TargetConcurrentRequests: number, optional
	TargetConcurrentRequests terra.NumberValue `hcl:"target_concurrent_requests,attr"`
	// TargetRequestCountPerSecond: string, optional
	TargetRequestCountPerSecond terra.StringValue `hcl:"target_request_count_per_second,attr"`
}

type Deployment struct {
	// DeploymentCloudBuildOptions: optional
	CloudBuildOptions *DeploymentCloudBuildOptions `hcl:"cloud_build_options,block"`
	// DeploymentContainer: optional
	Container *DeploymentContainer `hcl:"container,block"`
	// DeploymentFiles: min=0
	Files []DeploymentFiles `hcl:"files,block" validate:"min=0"`
	// DeploymentZip: optional
	Zip *DeploymentZip `hcl:"zip,block"`
}

type DeploymentCloudBuildOptions struct {
	// AppYamlPath: string, required
	AppYamlPath terra.StringValue `hcl:"app_yaml_path,attr" validate:"required"`
	// CloudBuildTimeout: string, optional
	CloudBuildTimeout terra.StringValue `hcl:"cloud_build_timeout,attr"`
}

type DeploymentContainer struct {
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
}

type DeploymentFiles struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Sha1Sum: string, optional
	Sha1Sum terra.StringValue `hcl:"sha1_sum,attr"`
	// SourceUrl: string, required
	SourceUrl terra.StringValue `hcl:"source_url,attr" validate:"required"`
}

type DeploymentZip struct {
	// FilesCount: number, optional
	FilesCount terra.NumberValue `hcl:"files_count,attr"`
	// SourceUrl: string, required
	SourceUrl terra.StringValue `hcl:"source_url,attr" validate:"required"`
}

type EndpointsApiService struct {
	// ConfigId: string, optional
	ConfigId terra.StringValue `hcl:"config_id,attr"`
	// DisableTraceSampling: bool, optional
	DisableTraceSampling terra.BoolValue `hcl:"disable_trace_sampling,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RolloutStrategy: string, optional
	RolloutStrategy terra.StringValue `hcl:"rollout_strategy,attr"`
}

type Entrypoint struct {
	// Shell: string, required
	Shell terra.StringValue `hcl:"shell,attr" validate:"required"`
}

type Handlers struct {
	// AuthFailAction: string, optional
	AuthFailAction terra.StringValue `hcl:"auth_fail_action,attr"`
	// Login: string, optional
	Login terra.StringValue `hcl:"login,attr"`
	// RedirectHttpResponseCode: string, optional
	RedirectHttpResponseCode terra.StringValue `hcl:"redirect_http_response_code,attr"`
	// SecurityLevel: string, optional
	SecurityLevel terra.StringValue `hcl:"security_level,attr"`
	// UrlRegex: string, optional
	UrlRegex terra.StringValue `hcl:"url_regex,attr"`
	// HandlersScript: optional
	Script *HandlersScript `hcl:"script,block"`
	// HandlersStaticFiles: optional
	StaticFiles *HandlersStaticFiles `hcl:"static_files,block"`
}

type HandlersScript struct {
	// ScriptPath: string, required
	ScriptPath terra.StringValue `hcl:"script_path,attr" validate:"required"`
}

type HandlersStaticFiles struct {
	// ApplicationReadable: bool, optional
	ApplicationReadable terra.BoolValue `hcl:"application_readable,attr"`
	// Expiration: string, optional
	Expiration terra.StringValue `hcl:"expiration,attr"`
	// HttpHeaders: map of string, optional
	HttpHeaders terra.MapValue[terra.StringValue] `hcl:"http_headers,attr"`
	// MimeType: string, optional
	MimeType terra.StringValue `hcl:"mime_type,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// RequireMatchingFile: bool, optional
	RequireMatchingFile terra.BoolValue `hcl:"require_matching_file,attr"`
	// UploadPathRegex: string, optional
	UploadPathRegex terra.StringValue `hcl:"upload_path_regex,attr"`
}

type LivenessCheck struct {
	// CheckInterval: string, optional
	CheckInterval terra.StringValue `hcl:"check_interval,attr"`
	// FailureThreshold: number, optional
	FailureThreshold terra.NumberValue `hcl:"failure_threshold,attr"`
	// Host: string, optional
	Host terra.StringValue `hcl:"host,attr"`
	// InitialDelay: string, optional
	InitialDelay terra.StringValue `hcl:"initial_delay,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// SuccessThreshold: number, optional
	SuccessThreshold terra.NumberValue `hcl:"success_threshold,attr"`
	// Timeout: string, optional
	Timeout terra.StringValue `hcl:"timeout,attr"`
}

type ManualScaling struct {
	// Instances: number, required
	Instances terra.NumberValue `hcl:"instances,attr" validate:"required"`
}

type Network struct {
	// ForwardedPorts: list of string, optional
	ForwardedPorts terra.ListValue[terra.StringValue] `hcl:"forwarded_ports,attr"`
	// InstanceTag: string, optional
	InstanceTag terra.StringValue `hcl:"instance_tag,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SessionAffinity: bool, optional
	SessionAffinity terra.BoolValue `hcl:"session_affinity,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
}

type ReadinessCheck struct {
	// AppStartTimeout: string, optional
	AppStartTimeout terra.StringValue `hcl:"app_start_timeout,attr"`
	// CheckInterval: string, optional
	CheckInterval terra.StringValue `hcl:"check_interval,attr"`
	// FailureThreshold: number, optional
	FailureThreshold terra.NumberValue `hcl:"failure_threshold,attr"`
	// Host: string, optional
	Host terra.StringValue `hcl:"host,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// SuccessThreshold: number, optional
	SuccessThreshold terra.NumberValue `hcl:"success_threshold,attr"`
	// Timeout: string, optional
	Timeout terra.StringValue `hcl:"timeout,attr"`
}

type Resources struct {
	// Cpu: number, optional
	Cpu terra.NumberValue `hcl:"cpu,attr"`
	// DiskGb: number, optional
	DiskGb terra.NumberValue `hcl:"disk_gb,attr"`
	// MemoryGb: number, optional
	MemoryGb terra.NumberValue `hcl:"memory_gb,attr"`
	// ResourcesVolumes: min=0
	Volumes []ResourcesVolumes `hcl:"volumes,block" validate:"min=0"`
}

type ResourcesVolumes struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SizeGb: number, required
	SizeGb terra.NumberValue `hcl:"size_gb,attr" validate:"required"`
	// VolumeType: string, required
	VolumeType terra.StringValue `hcl:"volume_type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VpcAccessConnector struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type ApiConfigAttributes struct {
	ref terra.Reference
}

func (ac ApiConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac ApiConfigAttributes) InternalWithRef(ref terra.Reference) ApiConfigAttributes {
	return ApiConfigAttributes{ref: ref}
}

func (ac ApiConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac ApiConfigAttributes) AuthFailAction() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("auth_fail_action"))
}

func (ac ApiConfigAttributes) Login() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("login"))
}

func (ac ApiConfigAttributes) Script() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("script"))
}

func (ac ApiConfigAttributes) SecurityLevel() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("security_level"))
}

func (ac ApiConfigAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("url"))
}

type AutomaticScalingAttributes struct {
	ref terra.Reference
}

func (as AutomaticScalingAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AutomaticScalingAttributes) InternalWithRef(ref terra.Reference) AutomaticScalingAttributes {
	return AutomaticScalingAttributes{ref: ref}
}

func (as AutomaticScalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AutomaticScalingAttributes) CoolDownPeriod() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("cool_down_period"))
}

func (as AutomaticScalingAttributes) MaxConcurrentRequests() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("max_concurrent_requests"))
}

func (as AutomaticScalingAttributes) MaxIdleInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("max_idle_instances"))
}

func (as AutomaticScalingAttributes) MaxPendingLatency() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("max_pending_latency"))
}

func (as AutomaticScalingAttributes) MaxTotalInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("max_total_instances"))
}

func (as AutomaticScalingAttributes) MinIdleInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("min_idle_instances"))
}

func (as AutomaticScalingAttributes) MinPendingLatency() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("min_pending_latency"))
}

func (as AutomaticScalingAttributes) MinTotalInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("min_total_instances"))
}

func (as AutomaticScalingAttributes) CpuUtilization() terra.ListValue[AutomaticScalingCpuUtilizationAttributes] {
	return terra.ReferenceAsList[AutomaticScalingCpuUtilizationAttributes](as.ref.Append("cpu_utilization"))
}

func (as AutomaticScalingAttributes) DiskUtilization() terra.ListValue[AutomaticScalingDiskUtilizationAttributes] {
	return terra.ReferenceAsList[AutomaticScalingDiskUtilizationAttributes](as.ref.Append("disk_utilization"))
}

func (as AutomaticScalingAttributes) NetworkUtilization() terra.ListValue[AutomaticScalingNetworkUtilizationAttributes] {
	return terra.ReferenceAsList[AutomaticScalingNetworkUtilizationAttributes](as.ref.Append("network_utilization"))
}

func (as AutomaticScalingAttributes) RequestUtilization() terra.ListValue[AutomaticScalingRequestUtilizationAttributes] {
	return terra.ReferenceAsList[AutomaticScalingRequestUtilizationAttributes](as.ref.Append("request_utilization"))
}

type AutomaticScalingCpuUtilizationAttributes struct {
	ref terra.Reference
}

func (cu AutomaticScalingCpuUtilizationAttributes) InternalRef() (terra.Reference, error) {
	return cu.ref, nil
}

func (cu AutomaticScalingCpuUtilizationAttributes) InternalWithRef(ref terra.Reference) AutomaticScalingCpuUtilizationAttributes {
	return AutomaticScalingCpuUtilizationAttributes{ref: ref}
}

func (cu AutomaticScalingCpuUtilizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cu.ref.InternalTokens()
}

func (cu AutomaticScalingCpuUtilizationAttributes) AggregationWindowLength() terra.StringValue {
	return terra.ReferenceAsString(cu.ref.Append("aggregation_window_length"))
}

func (cu AutomaticScalingCpuUtilizationAttributes) TargetUtilization() terra.NumberValue {
	return terra.ReferenceAsNumber(cu.ref.Append("target_utilization"))
}

type AutomaticScalingDiskUtilizationAttributes struct {
	ref terra.Reference
}

func (du AutomaticScalingDiskUtilizationAttributes) InternalRef() (terra.Reference, error) {
	return du.ref, nil
}

func (du AutomaticScalingDiskUtilizationAttributes) InternalWithRef(ref terra.Reference) AutomaticScalingDiskUtilizationAttributes {
	return AutomaticScalingDiskUtilizationAttributes{ref: ref}
}

func (du AutomaticScalingDiskUtilizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return du.ref.InternalTokens()
}

func (du AutomaticScalingDiskUtilizationAttributes) TargetReadBytesPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(du.ref.Append("target_read_bytes_per_second"))
}

func (du AutomaticScalingDiskUtilizationAttributes) TargetReadOpsPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(du.ref.Append("target_read_ops_per_second"))
}

func (du AutomaticScalingDiskUtilizationAttributes) TargetWriteBytesPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(du.ref.Append("target_write_bytes_per_second"))
}

func (du AutomaticScalingDiskUtilizationAttributes) TargetWriteOpsPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(du.ref.Append("target_write_ops_per_second"))
}

type AutomaticScalingNetworkUtilizationAttributes struct {
	ref terra.Reference
}

func (nu AutomaticScalingNetworkUtilizationAttributes) InternalRef() (terra.Reference, error) {
	return nu.ref, nil
}

func (nu AutomaticScalingNetworkUtilizationAttributes) InternalWithRef(ref terra.Reference) AutomaticScalingNetworkUtilizationAttributes {
	return AutomaticScalingNetworkUtilizationAttributes{ref: ref}
}

func (nu AutomaticScalingNetworkUtilizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nu.ref.InternalTokens()
}

func (nu AutomaticScalingNetworkUtilizationAttributes) TargetReceivedBytesPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(nu.ref.Append("target_received_bytes_per_second"))
}

func (nu AutomaticScalingNetworkUtilizationAttributes) TargetReceivedPacketsPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(nu.ref.Append("target_received_packets_per_second"))
}

func (nu AutomaticScalingNetworkUtilizationAttributes) TargetSentBytesPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(nu.ref.Append("target_sent_bytes_per_second"))
}

func (nu AutomaticScalingNetworkUtilizationAttributes) TargetSentPacketsPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(nu.ref.Append("target_sent_packets_per_second"))
}

type AutomaticScalingRequestUtilizationAttributes struct {
	ref terra.Reference
}

func (ru AutomaticScalingRequestUtilizationAttributes) InternalRef() (terra.Reference, error) {
	return ru.ref, nil
}

func (ru AutomaticScalingRequestUtilizationAttributes) InternalWithRef(ref terra.Reference) AutomaticScalingRequestUtilizationAttributes {
	return AutomaticScalingRequestUtilizationAttributes{ref: ref}
}

func (ru AutomaticScalingRequestUtilizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ru.ref.InternalTokens()
}

func (ru AutomaticScalingRequestUtilizationAttributes) TargetConcurrentRequests() terra.NumberValue {
	return terra.ReferenceAsNumber(ru.ref.Append("target_concurrent_requests"))
}

func (ru AutomaticScalingRequestUtilizationAttributes) TargetRequestCountPerSecond() terra.StringValue {
	return terra.ReferenceAsString(ru.ref.Append("target_request_count_per_second"))
}

type DeploymentAttributes struct {
	ref terra.Reference
}

func (d DeploymentAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DeploymentAttributes) InternalWithRef(ref terra.Reference) DeploymentAttributes {
	return DeploymentAttributes{ref: ref}
}

func (d DeploymentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DeploymentAttributes) CloudBuildOptions() terra.ListValue[DeploymentCloudBuildOptionsAttributes] {
	return terra.ReferenceAsList[DeploymentCloudBuildOptionsAttributes](d.ref.Append("cloud_build_options"))
}

func (d DeploymentAttributes) Container() terra.ListValue[DeploymentContainerAttributes] {
	return terra.ReferenceAsList[DeploymentContainerAttributes](d.ref.Append("container"))
}

func (d DeploymentAttributes) Files() terra.SetValue[DeploymentFilesAttributes] {
	return terra.ReferenceAsSet[DeploymentFilesAttributes](d.ref.Append("files"))
}

func (d DeploymentAttributes) Zip() terra.ListValue[DeploymentZipAttributes] {
	return terra.ReferenceAsList[DeploymentZipAttributes](d.ref.Append("zip"))
}

type DeploymentCloudBuildOptionsAttributes struct {
	ref terra.Reference
}

func (cbo DeploymentCloudBuildOptionsAttributes) InternalRef() (terra.Reference, error) {
	return cbo.ref, nil
}

func (cbo DeploymentCloudBuildOptionsAttributes) InternalWithRef(ref terra.Reference) DeploymentCloudBuildOptionsAttributes {
	return DeploymentCloudBuildOptionsAttributes{ref: ref}
}

func (cbo DeploymentCloudBuildOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cbo.ref.InternalTokens()
}

func (cbo DeploymentCloudBuildOptionsAttributes) AppYamlPath() terra.StringValue {
	return terra.ReferenceAsString(cbo.ref.Append("app_yaml_path"))
}

func (cbo DeploymentCloudBuildOptionsAttributes) CloudBuildTimeout() terra.StringValue {
	return terra.ReferenceAsString(cbo.ref.Append("cloud_build_timeout"))
}

type DeploymentContainerAttributes struct {
	ref terra.Reference
}

func (c DeploymentContainerAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DeploymentContainerAttributes) InternalWithRef(ref terra.Reference) DeploymentContainerAttributes {
	return DeploymentContainerAttributes{ref: ref}
}

func (c DeploymentContainerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DeploymentContainerAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

type DeploymentFilesAttributes struct {
	ref terra.Reference
}

func (f DeploymentFilesAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f DeploymentFilesAttributes) InternalWithRef(ref terra.Reference) DeploymentFilesAttributes {
	return DeploymentFilesAttributes{ref: ref}
}

func (f DeploymentFilesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f DeploymentFilesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("name"))
}

func (f DeploymentFilesAttributes) Sha1Sum() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("sha1_sum"))
}

func (f DeploymentFilesAttributes) SourceUrl() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("source_url"))
}

type DeploymentZipAttributes struct {
	ref terra.Reference
}

func (z DeploymentZipAttributes) InternalRef() (terra.Reference, error) {
	return z.ref, nil
}

func (z DeploymentZipAttributes) InternalWithRef(ref terra.Reference) DeploymentZipAttributes {
	return DeploymentZipAttributes{ref: ref}
}

func (z DeploymentZipAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return z.ref.InternalTokens()
}

func (z DeploymentZipAttributes) FilesCount() terra.NumberValue {
	return terra.ReferenceAsNumber(z.ref.Append("files_count"))
}

func (z DeploymentZipAttributes) SourceUrl() terra.StringValue {
	return terra.ReferenceAsString(z.ref.Append("source_url"))
}

type EndpointsApiServiceAttributes struct {
	ref terra.Reference
}

func (eas EndpointsApiServiceAttributes) InternalRef() (terra.Reference, error) {
	return eas.ref, nil
}

func (eas EndpointsApiServiceAttributes) InternalWithRef(ref terra.Reference) EndpointsApiServiceAttributes {
	return EndpointsApiServiceAttributes{ref: ref}
}

func (eas EndpointsApiServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eas.ref.InternalTokens()
}

func (eas EndpointsApiServiceAttributes) ConfigId() terra.StringValue {
	return terra.ReferenceAsString(eas.ref.Append("config_id"))
}

func (eas EndpointsApiServiceAttributes) DisableTraceSampling() terra.BoolValue {
	return terra.ReferenceAsBool(eas.ref.Append("disable_trace_sampling"))
}

func (eas EndpointsApiServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(eas.ref.Append("name"))
}

func (eas EndpointsApiServiceAttributes) RolloutStrategy() terra.StringValue {
	return terra.ReferenceAsString(eas.ref.Append("rollout_strategy"))
}

type EntrypointAttributes struct {
	ref terra.Reference
}

func (e EntrypointAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EntrypointAttributes) InternalWithRef(ref terra.Reference) EntrypointAttributes {
	return EntrypointAttributes{ref: ref}
}

func (e EntrypointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EntrypointAttributes) Shell() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("shell"))
}

type HandlersAttributes struct {
	ref terra.Reference
}

func (h HandlersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HandlersAttributes) InternalWithRef(ref terra.Reference) HandlersAttributes {
	return HandlersAttributes{ref: ref}
}

func (h HandlersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HandlersAttributes) AuthFailAction() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("auth_fail_action"))
}

func (h HandlersAttributes) Login() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("login"))
}

func (h HandlersAttributes) RedirectHttpResponseCode() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("redirect_http_response_code"))
}

func (h HandlersAttributes) SecurityLevel() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("security_level"))
}

func (h HandlersAttributes) UrlRegex() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("url_regex"))
}

func (h HandlersAttributes) Script() terra.ListValue[HandlersScriptAttributes] {
	return terra.ReferenceAsList[HandlersScriptAttributes](h.ref.Append("script"))
}

func (h HandlersAttributes) StaticFiles() terra.ListValue[HandlersStaticFilesAttributes] {
	return terra.ReferenceAsList[HandlersStaticFilesAttributes](h.ref.Append("static_files"))
}

type HandlersScriptAttributes struct {
	ref terra.Reference
}

func (s HandlersScriptAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s HandlersScriptAttributes) InternalWithRef(ref terra.Reference) HandlersScriptAttributes {
	return HandlersScriptAttributes{ref: ref}
}

func (s HandlersScriptAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s HandlersScriptAttributes) ScriptPath() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("script_path"))
}

type HandlersStaticFilesAttributes struct {
	ref terra.Reference
}

func (sf HandlersStaticFilesAttributes) InternalRef() (terra.Reference, error) {
	return sf.ref, nil
}

func (sf HandlersStaticFilesAttributes) InternalWithRef(ref terra.Reference) HandlersStaticFilesAttributes {
	return HandlersStaticFilesAttributes{ref: ref}
}

func (sf HandlersStaticFilesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sf.ref.InternalTokens()
}

func (sf HandlersStaticFilesAttributes) ApplicationReadable() terra.BoolValue {
	return terra.ReferenceAsBool(sf.ref.Append("application_readable"))
}

func (sf HandlersStaticFilesAttributes) Expiration() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("expiration"))
}

func (sf HandlersStaticFilesAttributes) HttpHeaders() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sf.ref.Append("http_headers"))
}

func (sf HandlersStaticFilesAttributes) MimeType() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("mime_type"))
}

func (sf HandlersStaticFilesAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("path"))
}

func (sf HandlersStaticFilesAttributes) RequireMatchingFile() terra.BoolValue {
	return terra.ReferenceAsBool(sf.ref.Append("require_matching_file"))
}

func (sf HandlersStaticFilesAttributes) UploadPathRegex() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("upload_path_regex"))
}

type LivenessCheckAttributes struct {
	ref terra.Reference
}

func (lc LivenessCheckAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LivenessCheckAttributes) InternalWithRef(ref terra.Reference) LivenessCheckAttributes {
	return LivenessCheckAttributes{ref: ref}
}

func (lc LivenessCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LivenessCheckAttributes) CheckInterval() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("check_interval"))
}

func (lc LivenessCheckAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(lc.ref.Append("failure_threshold"))
}

func (lc LivenessCheckAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("host"))
}

func (lc LivenessCheckAttributes) InitialDelay() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("initial_delay"))
}

func (lc LivenessCheckAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("path"))
}

func (lc LivenessCheckAttributes) SuccessThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(lc.ref.Append("success_threshold"))
}

func (lc LivenessCheckAttributes) Timeout() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("timeout"))
}

type ManualScalingAttributes struct {
	ref terra.Reference
}

func (ms ManualScalingAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms ManualScalingAttributes) InternalWithRef(ref terra.Reference) ManualScalingAttributes {
	return ManualScalingAttributes{ref: ref}
}

func (ms ManualScalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms ManualScalingAttributes) Instances() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("instances"))
}

type NetworkAttributes struct {
	ref terra.Reference
}

func (n NetworkAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NetworkAttributes) InternalWithRef(ref terra.Reference) NetworkAttributes {
	return NetworkAttributes{ref: ref}
}

func (n NetworkAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NetworkAttributes) ForwardedPorts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("forwarded_ports"))
}

func (n NetworkAttributes) InstanceTag() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("instance_tag"))
}

func (n NetworkAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("name"))
}

func (n NetworkAttributes) SessionAffinity() terra.BoolValue {
	return terra.ReferenceAsBool(n.ref.Append("session_affinity"))
}

func (n NetworkAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("subnetwork"))
}

type ReadinessCheckAttributes struct {
	ref terra.Reference
}

func (rc ReadinessCheckAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc ReadinessCheckAttributes) InternalWithRef(ref terra.Reference) ReadinessCheckAttributes {
	return ReadinessCheckAttributes{ref: ref}
}

func (rc ReadinessCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc ReadinessCheckAttributes) AppStartTimeout() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("app_start_timeout"))
}

func (rc ReadinessCheckAttributes) CheckInterval() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("check_interval"))
}

func (rc ReadinessCheckAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("failure_threshold"))
}

func (rc ReadinessCheckAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("host"))
}

func (rc ReadinessCheckAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("path"))
}

func (rc ReadinessCheckAttributes) SuccessThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("success_threshold"))
}

func (rc ReadinessCheckAttributes) Timeout() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("timeout"))
}

type ResourcesAttributes struct {
	ref terra.Reference
}

func (r ResourcesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ResourcesAttributes) InternalWithRef(ref terra.Reference) ResourcesAttributes {
	return ResourcesAttributes{ref: ref}
}

func (r ResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ResourcesAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("cpu"))
}

func (r ResourcesAttributes) DiskGb() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("disk_gb"))
}

func (r ResourcesAttributes) MemoryGb() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("memory_gb"))
}

func (r ResourcesAttributes) Volumes() terra.ListValue[ResourcesVolumesAttributes] {
	return terra.ReferenceAsList[ResourcesVolumesAttributes](r.ref.Append("volumes"))
}

type ResourcesVolumesAttributes struct {
	ref terra.Reference
}

func (v ResourcesVolumesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ResourcesVolumesAttributes) InternalWithRef(ref terra.Reference) ResourcesVolumesAttributes {
	return ResourcesVolumesAttributes{ref: ref}
}

func (v ResourcesVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ResourcesVolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v ResourcesVolumesAttributes) SizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(v.ref.Append("size_gb"))
}

func (v ResourcesVolumesAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("volume_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VpcAccessConnectorAttributes struct {
	ref terra.Reference
}

func (vac VpcAccessConnectorAttributes) InternalRef() (terra.Reference, error) {
	return vac.ref, nil
}

func (vac VpcAccessConnectorAttributes) InternalWithRef(ref terra.Reference) VpcAccessConnectorAttributes {
	return VpcAccessConnectorAttributes{ref: ref}
}

func (vac VpcAccessConnectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vac.ref.InternalTokens()
}

func (vac VpcAccessConnectorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vac.ref.Append("name"))
}

type ApiConfigState struct {
	AuthFailAction string `json:"auth_fail_action"`
	Login          string `json:"login"`
	Script         string `json:"script"`
	SecurityLevel  string `json:"security_level"`
	Url            string `json:"url"`
}

type AutomaticScalingState struct {
	CoolDownPeriod        string                                    `json:"cool_down_period"`
	MaxConcurrentRequests float64                                   `json:"max_concurrent_requests"`
	MaxIdleInstances      float64                                   `json:"max_idle_instances"`
	MaxPendingLatency     string                                    `json:"max_pending_latency"`
	MaxTotalInstances     float64                                   `json:"max_total_instances"`
	MinIdleInstances      float64                                   `json:"min_idle_instances"`
	MinPendingLatency     string                                    `json:"min_pending_latency"`
	MinTotalInstances     float64                                   `json:"min_total_instances"`
	CpuUtilization        []AutomaticScalingCpuUtilizationState     `json:"cpu_utilization"`
	DiskUtilization       []AutomaticScalingDiskUtilizationState    `json:"disk_utilization"`
	NetworkUtilization    []AutomaticScalingNetworkUtilizationState `json:"network_utilization"`
	RequestUtilization    []AutomaticScalingRequestUtilizationState `json:"request_utilization"`
}

type AutomaticScalingCpuUtilizationState struct {
	AggregationWindowLength string  `json:"aggregation_window_length"`
	TargetUtilization       float64 `json:"target_utilization"`
}

type AutomaticScalingDiskUtilizationState struct {
	TargetReadBytesPerSecond  float64 `json:"target_read_bytes_per_second"`
	TargetReadOpsPerSecond    float64 `json:"target_read_ops_per_second"`
	TargetWriteBytesPerSecond float64 `json:"target_write_bytes_per_second"`
	TargetWriteOpsPerSecond   float64 `json:"target_write_ops_per_second"`
}

type AutomaticScalingNetworkUtilizationState struct {
	TargetReceivedBytesPerSecond   float64 `json:"target_received_bytes_per_second"`
	TargetReceivedPacketsPerSecond float64 `json:"target_received_packets_per_second"`
	TargetSentBytesPerSecond       float64 `json:"target_sent_bytes_per_second"`
	TargetSentPacketsPerSecond     float64 `json:"target_sent_packets_per_second"`
}

type AutomaticScalingRequestUtilizationState struct {
	TargetConcurrentRequests    float64 `json:"target_concurrent_requests"`
	TargetRequestCountPerSecond string  `json:"target_request_count_per_second"`
}

type DeploymentState struct {
	CloudBuildOptions []DeploymentCloudBuildOptionsState `json:"cloud_build_options"`
	Container         []DeploymentContainerState         `json:"container"`
	Files             []DeploymentFilesState             `json:"files"`
	Zip               []DeploymentZipState               `json:"zip"`
}

type DeploymentCloudBuildOptionsState struct {
	AppYamlPath       string `json:"app_yaml_path"`
	CloudBuildTimeout string `json:"cloud_build_timeout"`
}

type DeploymentContainerState struct {
	Image string `json:"image"`
}

type DeploymentFilesState struct {
	Name      string `json:"name"`
	Sha1Sum   string `json:"sha1_sum"`
	SourceUrl string `json:"source_url"`
}

type DeploymentZipState struct {
	FilesCount float64 `json:"files_count"`
	SourceUrl  string  `json:"source_url"`
}

type EndpointsApiServiceState struct {
	ConfigId             string `json:"config_id"`
	DisableTraceSampling bool   `json:"disable_trace_sampling"`
	Name                 string `json:"name"`
	RolloutStrategy      string `json:"rollout_strategy"`
}

type EntrypointState struct {
	Shell string `json:"shell"`
}

type HandlersState struct {
	AuthFailAction           string                     `json:"auth_fail_action"`
	Login                    string                     `json:"login"`
	RedirectHttpResponseCode string                     `json:"redirect_http_response_code"`
	SecurityLevel            string                     `json:"security_level"`
	UrlRegex                 string                     `json:"url_regex"`
	Script                   []HandlersScriptState      `json:"script"`
	StaticFiles              []HandlersStaticFilesState `json:"static_files"`
}

type HandlersScriptState struct {
	ScriptPath string `json:"script_path"`
}

type HandlersStaticFilesState struct {
	ApplicationReadable bool              `json:"application_readable"`
	Expiration          string            `json:"expiration"`
	HttpHeaders         map[string]string `json:"http_headers"`
	MimeType            string            `json:"mime_type"`
	Path                string            `json:"path"`
	RequireMatchingFile bool              `json:"require_matching_file"`
	UploadPathRegex     string            `json:"upload_path_regex"`
}

type LivenessCheckState struct {
	CheckInterval    string  `json:"check_interval"`
	FailureThreshold float64 `json:"failure_threshold"`
	Host             string  `json:"host"`
	InitialDelay     string  `json:"initial_delay"`
	Path             string  `json:"path"`
	SuccessThreshold float64 `json:"success_threshold"`
	Timeout          string  `json:"timeout"`
}

type ManualScalingState struct {
	Instances float64 `json:"instances"`
}

type NetworkState struct {
	ForwardedPorts  []string `json:"forwarded_ports"`
	InstanceTag     string   `json:"instance_tag"`
	Name            string   `json:"name"`
	SessionAffinity bool     `json:"session_affinity"`
	Subnetwork      string   `json:"subnetwork"`
}

type ReadinessCheckState struct {
	AppStartTimeout  string  `json:"app_start_timeout"`
	CheckInterval    string  `json:"check_interval"`
	FailureThreshold float64 `json:"failure_threshold"`
	Host             string  `json:"host"`
	Path             string  `json:"path"`
	SuccessThreshold float64 `json:"success_threshold"`
	Timeout          string  `json:"timeout"`
}

type ResourcesState struct {
	Cpu      float64                 `json:"cpu"`
	DiskGb   float64                 `json:"disk_gb"`
	MemoryGb float64                 `json:"memory_gb"`
	Volumes  []ResourcesVolumesState `json:"volumes"`
}

type ResourcesVolumesState struct {
	Name       string  `json:"name"`
	SizeGb     float64 `json:"size_gb"`
	VolumeType string  `json:"volume_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VpcAccessConnectorState struct {
	Name string `json:"name"`
}
