// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_parallelstore_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_parallelstore_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *googleParallelstoreInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gpi *Resource) Type() string {
	return "google_parallelstore_instance"
}

// LocalName returns the local name for [Resource].
func (gpi *Resource) LocalName() string {
	return gpi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gpi *Resource) Configuration() interface{} {
	return gpi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gpi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gpi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gpi *Resource) Dependencies() terra.Dependencies {
	return gpi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gpi *Resource) LifecycleManagement() *terra.Lifecycle {
	return gpi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gpi *Resource) Attributes() googleParallelstoreInstanceAttributes {
	return googleParallelstoreInstanceAttributes{ref: terra.ReferenceResource(gpi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gpi *Resource) ImportState(state io.Reader) error {
	gpi.state = &googleParallelstoreInstanceState{}
	if err := json.NewDecoder(state).Decode(gpi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gpi.Type(), gpi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gpi *Resource) State() (*googleParallelstoreInstanceState, bool) {
	return gpi.state, gpi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gpi *Resource) StateMust() *googleParallelstoreInstanceState {
	if gpi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gpi.Type(), gpi.LocalName()))
	}
	return gpi.state
}

// Args contains the configurations for google_parallelstore_instance.
type Args struct {
	// CapacityGib: string, required
	CapacityGib terra.StringValue `hcl:"capacity_gib,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ReservedIpRange: string, optional
	ReservedIpRange terra.StringValue `hcl:"reserved_ip_range,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleParallelstoreInstanceAttributes struct {
	ref terra.Reference
}

// AccessPoints returns a reference to field access_points of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) AccessPoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gpi.ref.Append("access_points"))
}

// CapacityGib returns a reference to field capacity_gib of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) CapacityGib() terra.StringValue {
	return terra.ReferenceAsString(gpi.ref.Append("capacity_gib"))
}

// CreateTime returns a reference to field create_time of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gpi.ref.Append("create_time"))
}

// DaosVersion returns a reference to field daos_version of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) DaosVersion() terra.StringValue {
	return terra.ReferenceAsString(gpi.ref.Append("daos_version"))
}

// Description returns a reference to field description of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gpi.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpi.ref.Append("effective_labels"))
}

// EffectiveReservedIpRange returns a reference to field effective_reserved_ip_range of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) EffectiveReservedIpRange() terra.StringValue {
	return terra.ReferenceAsString(gpi.ref.Append("effective_reserved_ip_range"))
}

// Id returns a reference to field id of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gpi.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(gpi.ref.Append("instance_id"))
}

// Labels returns a reference to field labels of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpi.ref.Append("labels"))
}

// Location returns a reference to field location of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gpi.ref.Append("location"))
}

// Name returns a reference to field name of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gpi.ref.Append("name"))
}

// Network returns a reference to field network of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gpi.ref.Append("network"))
}

// Project returns a reference to field project of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gpi.ref.Append("project"))
}

// ReservedIpRange returns a reference to field reserved_ip_range of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) ReservedIpRange() terra.StringValue {
	return terra.ReferenceAsString(gpi.ref.Append("reserved_ip_range"))
}

// State returns a reference to field state of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gpi.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpi.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_parallelstore_instance.
func (gpi googleParallelstoreInstanceAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gpi.ref.Append("update_time"))
}

func (gpi googleParallelstoreInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gpi.ref.Append("timeouts"))
}

type googleParallelstoreInstanceState struct {
	AccessPoints             []string          `json:"access_points"`
	CapacityGib              string            `json:"capacity_gib"`
	CreateTime               string            `json:"create_time"`
	DaosVersion              string            `json:"daos_version"`
	Description              string            `json:"description"`
	EffectiveLabels          map[string]string `json:"effective_labels"`
	EffectiveReservedIpRange string            `json:"effective_reserved_ip_range"`
	Id                       string            `json:"id"`
	InstanceId               string            `json:"instance_id"`
	Labels                   map[string]string `json:"labels"`
	Location                 string            `json:"location"`
	Name                     string            `json:"name"`
	Network                  string            `json:"network"`
	Project                  string            `json:"project"`
	ReservedIpRange          string            `json:"reserved_ip_range"`
	State                    string            `json:"state"`
	TerraformLabels          map[string]string `json:"terraform_labels"`
	UpdateTime               string            `json:"update_time"`
	Timeouts                 *TimeoutsState    `json:"timeouts"`
}
