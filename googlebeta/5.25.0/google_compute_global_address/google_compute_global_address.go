// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_global_address

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_global_address.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeGlobalAddressState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcga *Resource) Type() string {
	return "google_compute_global_address"
}

// LocalName returns the local name for [Resource].
func (gcga *Resource) LocalName() string {
	return gcga.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcga *Resource) Configuration() interface{} {
	return gcga.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcga *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcga)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcga *Resource) Dependencies() terra.Dependencies {
	return gcga.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcga *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcga.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcga *Resource) Attributes() googleComputeGlobalAddressAttributes {
	return googleComputeGlobalAddressAttributes{ref: terra.ReferenceResource(gcga)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcga *Resource) ImportState(state io.Reader) error {
	gcga.state = &googleComputeGlobalAddressState{}
	if err := json.NewDecoder(state).Decode(gcga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcga.Type(), gcga.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcga *Resource) State() (*googleComputeGlobalAddressState, bool) {
	return gcga.state, gcga.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcga *Resource) StateMust() *googleComputeGlobalAddressState {
	if gcga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcga.Type(), gcga.LocalName()))
	}
	return gcga.state
}

// Args contains the configurations for google_compute_global_address.
type Args struct {
	// Address: string, optional
	Address terra.StringValue `hcl:"address,attr"`
	// AddressType: string, optional
	AddressType terra.StringValue `hcl:"address_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpVersion: string, optional
	IpVersion terra.StringValue `hcl:"ip_version,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// PrefixLength: number, optional
	PrefixLength terra.NumberValue `hcl:"prefix_length,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Purpose: string, optional
	Purpose terra.StringValue `hcl:"purpose,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeGlobalAddressAttributes struct {
	ref terra.Reference
}

// Address returns a reference to field address of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(gcga.ref.Append("address"))
}

// AddressType returns a reference to field address_type of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) AddressType() terra.StringValue {
	return terra.ReferenceAsString(gcga.ref.Append("address_type"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcga.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcga.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcga.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcga.ref.Append("id"))
}

// IpVersion returns a reference to field ip_version of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) IpVersion() terra.StringValue {
	return terra.ReferenceAsString(gcga.ref.Append("ip_version"))
}

// LabelFingerprint returns a reference to field label_fingerprint of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) LabelFingerprint() terra.StringValue {
	return terra.ReferenceAsString(gcga.ref.Append("label_fingerprint"))
}

// Labels returns a reference to field labels of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcga.ref.Append("labels"))
}

// Name returns a reference to field name of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcga.ref.Append("name"))
}

// Network returns a reference to field network of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gcga.ref.Append("network"))
}

// PrefixLength returns a reference to field prefix_length of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) PrefixLength() terra.NumberValue {
	return terra.ReferenceAsNumber(gcga.ref.Append("prefix_length"))
}

// Project returns a reference to field project of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcga.ref.Append("project"))
}

// Purpose returns a reference to field purpose of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) Purpose() terra.StringValue {
	return terra.ReferenceAsString(gcga.ref.Append("purpose"))
}

// SelfLink returns a reference to field self_link of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcga.ref.Append("self_link"))
}

// TerraformLabels returns a reference to field terraform_labels of google_compute_global_address.
func (gcga googleComputeGlobalAddressAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcga.ref.Append("terraform_labels"))
}

func (gcga googleComputeGlobalAddressAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcga.ref.Append("timeouts"))
}

type googleComputeGlobalAddressState struct {
	Address           string            `json:"address"`
	AddressType       string            `json:"address_type"`
	CreationTimestamp string            `json:"creation_timestamp"`
	Description       string            `json:"description"`
	EffectiveLabels   map[string]string `json:"effective_labels"`
	Id                string            `json:"id"`
	IpVersion         string            `json:"ip_version"`
	LabelFingerprint  string            `json:"label_fingerprint"`
	Labels            map[string]string `json:"labels"`
	Name              string            `json:"name"`
	Network           string            `json:"network"`
	PrefixLength      float64           `json:"prefix_length"`
	Project           string            `json:"project"`
	Purpose           string            `json:"purpose"`
	SelfLink          string            `json:"self_link"`
	TerraformLabels   map[string]string `json:"terraform_labels"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
