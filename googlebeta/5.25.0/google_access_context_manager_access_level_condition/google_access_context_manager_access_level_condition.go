// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_access_context_manager_access_level_condition

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_access_context_manager_access_level_condition.
type Resource struct {
	Name      string
	Args      Args
	state     *googleAccessContextManagerAccessLevelConditionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gacmalc *Resource) Type() string {
	return "google_access_context_manager_access_level_condition"
}

// LocalName returns the local name for [Resource].
func (gacmalc *Resource) LocalName() string {
	return gacmalc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gacmalc *Resource) Configuration() interface{} {
	return gacmalc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gacmalc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gacmalc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gacmalc *Resource) Dependencies() terra.Dependencies {
	return gacmalc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gacmalc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gacmalc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gacmalc *Resource) Attributes() googleAccessContextManagerAccessLevelConditionAttributes {
	return googleAccessContextManagerAccessLevelConditionAttributes{ref: terra.ReferenceResource(gacmalc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gacmalc *Resource) ImportState(state io.Reader) error {
	gacmalc.state = &googleAccessContextManagerAccessLevelConditionState{}
	if err := json.NewDecoder(state).Decode(gacmalc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gacmalc.Type(), gacmalc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gacmalc *Resource) State() (*googleAccessContextManagerAccessLevelConditionState, bool) {
	return gacmalc.state, gacmalc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gacmalc *Resource) StateMust() *googleAccessContextManagerAccessLevelConditionState {
	if gacmalc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gacmalc.Type(), gacmalc.LocalName()))
	}
	return gacmalc.state
}

// Args contains the configurations for google_access_context_manager_access_level_condition.
type Args struct {
	// AccessLevel: string, required
	AccessLevel terra.StringValue `hcl:"access_level,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpSubnetworks: list of string, optional
	IpSubnetworks terra.ListValue[terra.StringValue] `hcl:"ip_subnetworks,attr"`
	// Members: list of string, optional
	Members terra.ListValue[terra.StringValue] `hcl:"members,attr"`
	// Negate: bool, optional
	Negate terra.BoolValue `hcl:"negate,attr"`
	// Regions: list of string, optional
	Regions terra.ListValue[terra.StringValue] `hcl:"regions,attr"`
	// RequiredAccessLevels: list of string, optional
	RequiredAccessLevels terra.ListValue[terra.StringValue] `hcl:"required_access_levels,attr"`
	// DevicePolicy: optional
	DevicePolicy *DevicePolicy `hcl:"device_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcNetworkSources: min=0
	VpcNetworkSources []VpcNetworkSources `hcl:"vpc_network_sources,block" validate:"min=0"`
}

type googleAccessContextManagerAccessLevelConditionAttributes struct {
	ref terra.Reference
}

// AccessLevel returns a reference to field access_level of google_access_context_manager_access_level_condition.
func (gacmalc googleAccessContextManagerAccessLevelConditionAttributes) AccessLevel() terra.StringValue {
	return terra.ReferenceAsString(gacmalc.ref.Append("access_level"))
}

// Id returns a reference to field id of google_access_context_manager_access_level_condition.
func (gacmalc googleAccessContextManagerAccessLevelConditionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gacmalc.ref.Append("id"))
}

// IpSubnetworks returns a reference to field ip_subnetworks of google_access_context_manager_access_level_condition.
func (gacmalc googleAccessContextManagerAccessLevelConditionAttributes) IpSubnetworks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gacmalc.ref.Append("ip_subnetworks"))
}

// Members returns a reference to field members of google_access_context_manager_access_level_condition.
func (gacmalc googleAccessContextManagerAccessLevelConditionAttributes) Members() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gacmalc.ref.Append("members"))
}

// Negate returns a reference to field negate of google_access_context_manager_access_level_condition.
func (gacmalc googleAccessContextManagerAccessLevelConditionAttributes) Negate() terra.BoolValue {
	return terra.ReferenceAsBool(gacmalc.ref.Append("negate"))
}

// Regions returns a reference to field regions of google_access_context_manager_access_level_condition.
func (gacmalc googleAccessContextManagerAccessLevelConditionAttributes) Regions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gacmalc.ref.Append("regions"))
}

// RequiredAccessLevels returns a reference to field required_access_levels of google_access_context_manager_access_level_condition.
func (gacmalc googleAccessContextManagerAccessLevelConditionAttributes) RequiredAccessLevels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gacmalc.ref.Append("required_access_levels"))
}

func (gacmalc googleAccessContextManagerAccessLevelConditionAttributes) DevicePolicy() terra.ListValue[DevicePolicyAttributes] {
	return terra.ReferenceAsList[DevicePolicyAttributes](gacmalc.ref.Append("device_policy"))
}

func (gacmalc googleAccessContextManagerAccessLevelConditionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gacmalc.ref.Append("timeouts"))
}

func (gacmalc googleAccessContextManagerAccessLevelConditionAttributes) VpcNetworkSources() terra.ListValue[VpcNetworkSourcesAttributes] {
	return terra.ReferenceAsList[VpcNetworkSourcesAttributes](gacmalc.ref.Append("vpc_network_sources"))
}

type googleAccessContextManagerAccessLevelConditionState struct {
	AccessLevel          string                   `json:"access_level"`
	Id                   string                   `json:"id"`
	IpSubnetworks        []string                 `json:"ip_subnetworks"`
	Members              []string                 `json:"members"`
	Negate               bool                     `json:"negate"`
	Regions              []string                 `json:"regions"`
	RequiredAccessLevels []string                 `json:"required_access_levels"`
	DevicePolicy         []DevicePolicyState      `json:"device_policy"`
	Timeouts             *TimeoutsState           `json:"timeouts"`
	VpcNetworkSources    []VpcNetworkSourcesState `json:"vpc_network_sources"`
}
