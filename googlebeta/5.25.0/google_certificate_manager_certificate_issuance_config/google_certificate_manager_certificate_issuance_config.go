// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_certificate_manager_certificate_issuance_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_certificate_manager_certificate_issuance_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCertificateManagerCertificateIssuanceConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcmcic *Resource) Type() string {
	return "google_certificate_manager_certificate_issuance_config"
}

// LocalName returns the local name for [Resource].
func (gcmcic *Resource) LocalName() string {
	return gcmcic.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcmcic *Resource) Configuration() interface{} {
	return gcmcic.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcmcic *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcmcic)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcmcic *Resource) Dependencies() terra.Dependencies {
	return gcmcic.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcmcic *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcmcic.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcmcic *Resource) Attributes() googleCertificateManagerCertificateIssuanceConfigAttributes {
	return googleCertificateManagerCertificateIssuanceConfigAttributes{ref: terra.ReferenceResource(gcmcic)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcmcic *Resource) ImportState(state io.Reader) error {
	gcmcic.state = &googleCertificateManagerCertificateIssuanceConfigState{}
	if err := json.NewDecoder(state).Decode(gcmcic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcmcic.Type(), gcmcic.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcmcic *Resource) State() (*googleCertificateManagerCertificateIssuanceConfigState, bool) {
	return gcmcic.state, gcmcic.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcmcic *Resource) StateMust() *googleCertificateManagerCertificateIssuanceConfigState {
	if gcmcic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcmcic.Type(), gcmcic.LocalName()))
	}
	return gcmcic.state
}

// Args contains the configurations for google_certificate_manager_certificate_issuance_config.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyAlgorithm: string, required
	KeyAlgorithm terra.StringValue `hcl:"key_algorithm,attr" validate:"required"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Lifetime: string, required
	Lifetime terra.StringValue `hcl:"lifetime,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RotationWindowPercentage: number, required
	RotationWindowPercentage terra.NumberValue `hcl:"rotation_window_percentage,attr" validate:"required"`
	// CertificateAuthorityConfig: required
	CertificateAuthorityConfig *CertificateAuthorityConfig `hcl:"certificate_authority_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleCertificateManagerCertificateIssuanceConfigAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_certificate_manager_certificate_issuance_config.
func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcmcic.ref.Append("create_time"))
}

// Description returns a reference to field description of google_certificate_manager_certificate_issuance_config.
func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcmcic.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_certificate_manager_certificate_issuance_config.
func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcmcic.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_certificate_manager_certificate_issuance_config.
func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcmcic.ref.Append("id"))
}

// KeyAlgorithm returns a reference to field key_algorithm of google_certificate_manager_certificate_issuance_config.
func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) KeyAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(gcmcic.ref.Append("key_algorithm"))
}

// Labels returns a reference to field labels of google_certificate_manager_certificate_issuance_config.
func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcmcic.ref.Append("labels"))
}

// Lifetime returns a reference to field lifetime of google_certificate_manager_certificate_issuance_config.
func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) Lifetime() terra.StringValue {
	return terra.ReferenceAsString(gcmcic.ref.Append("lifetime"))
}

// Location returns a reference to field location of google_certificate_manager_certificate_issuance_config.
func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcmcic.ref.Append("location"))
}

// Name returns a reference to field name of google_certificate_manager_certificate_issuance_config.
func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcmcic.ref.Append("name"))
}

// Project returns a reference to field project of google_certificate_manager_certificate_issuance_config.
func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcmcic.ref.Append("project"))
}

// RotationWindowPercentage returns a reference to field rotation_window_percentage of google_certificate_manager_certificate_issuance_config.
func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) RotationWindowPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(gcmcic.ref.Append("rotation_window_percentage"))
}

// TerraformLabels returns a reference to field terraform_labels of google_certificate_manager_certificate_issuance_config.
func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcmcic.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_certificate_manager_certificate_issuance_config.
func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gcmcic.ref.Append("update_time"))
}

func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) CertificateAuthorityConfig() terra.ListValue[CertificateAuthorityConfigAttributes] {
	return terra.ReferenceAsList[CertificateAuthorityConfigAttributes](gcmcic.ref.Append("certificate_authority_config"))
}

func (gcmcic googleCertificateManagerCertificateIssuanceConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcmcic.ref.Append("timeouts"))
}

type googleCertificateManagerCertificateIssuanceConfigState struct {
	CreateTime                 string                            `json:"create_time"`
	Description                string                            `json:"description"`
	EffectiveLabels            map[string]string                 `json:"effective_labels"`
	Id                         string                            `json:"id"`
	KeyAlgorithm               string                            `json:"key_algorithm"`
	Labels                     map[string]string                 `json:"labels"`
	Lifetime                   string                            `json:"lifetime"`
	Location                   string                            `json:"location"`
	Name                       string                            `json:"name"`
	Project                    string                            `json:"project"`
	RotationWindowPercentage   float64                           `json:"rotation_window_percentage"`
	TerraformLabels            map[string]string                 `json:"terraform_labels"`
	UpdateTime                 string                            `json:"update_time"`
	CertificateAuthorityConfig []CertificateAuthorityConfigState `json:"certificate_authority_config"`
	Timeouts                   *TimeoutsState                    `json:"timeouts"`
}
