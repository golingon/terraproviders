// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_network_services_edge_cache_origin

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AwsV4Authentication struct {
	// AccessKeyId: string, required
	AccessKeyId terra.StringValue `hcl:"access_key_id,attr" validate:"required"`
	// OriginRegion: string, required
	OriginRegion terra.StringValue `hcl:"origin_region,attr" validate:"required"`
	// SecretAccessKeyVersion: string, required
	SecretAccessKeyVersion terra.StringValue `hcl:"secret_access_key_version,attr" validate:"required"`
}

type OriginOverrideAction struct {
	// OriginOverrideActionHeaderAction: optional
	HeaderAction *OriginOverrideActionHeaderAction `hcl:"header_action,block"`
	// OriginOverrideActionUrlRewrite: optional
	UrlRewrite *OriginOverrideActionUrlRewrite `hcl:"url_rewrite,block"`
}

type OriginOverrideActionHeaderAction struct {
	// OriginOverrideActionHeaderActionRequestHeadersToAdd: min=0,max=25
	RequestHeadersToAdd []OriginOverrideActionHeaderActionRequestHeadersToAdd `hcl:"request_headers_to_add,block" validate:"min=0,max=25"`
}

type OriginOverrideActionHeaderActionRequestHeadersToAdd struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, optional
	Replace terra.BoolValue `hcl:"replace,attr"`
}

type OriginOverrideActionUrlRewrite struct {
	// HostRewrite: string, optional
	HostRewrite terra.StringValue `hcl:"host_rewrite,attr"`
}

type OriginRedirect struct {
	// RedirectConditions: list of string, optional
	RedirectConditions terra.ListValue[terra.StringValue] `hcl:"redirect_conditions,attr"`
}

type Timeout struct {
	// ConnectTimeout: string, optional
	ConnectTimeout terra.StringValue `hcl:"connect_timeout,attr"`
	// MaxAttemptsTimeout: string, optional
	MaxAttemptsTimeout terra.StringValue `hcl:"max_attempts_timeout,attr"`
	// ReadTimeout: string, optional
	ReadTimeout terra.StringValue `hcl:"read_timeout,attr"`
	// ResponseTimeout: string, optional
	ResponseTimeout terra.StringValue `hcl:"response_timeout,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AwsV4AuthenticationAttributes struct {
	ref terra.Reference
}

func (ava AwsV4AuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return ava.ref, nil
}

func (ava AwsV4AuthenticationAttributes) InternalWithRef(ref terra.Reference) AwsV4AuthenticationAttributes {
	return AwsV4AuthenticationAttributes{ref: ref}
}

func (ava AwsV4AuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ava.ref.InternalTokens()
}

func (ava AwsV4AuthenticationAttributes) AccessKeyId() terra.StringValue {
	return terra.ReferenceAsString(ava.ref.Append("access_key_id"))
}

func (ava AwsV4AuthenticationAttributes) OriginRegion() terra.StringValue {
	return terra.ReferenceAsString(ava.ref.Append("origin_region"))
}

func (ava AwsV4AuthenticationAttributes) SecretAccessKeyVersion() terra.StringValue {
	return terra.ReferenceAsString(ava.ref.Append("secret_access_key_version"))
}

type OriginOverrideActionAttributes struct {
	ref terra.Reference
}

func (ooa OriginOverrideActionAttributes) InternalRef() (terra.Reference, error) {
	return ooa.ref, nil
}

func (ooa OriginOverrideActionAttributes) InternalWithRef(ref terra.Reference) OriginOverrideActionAttributes {
	return OriginOverrideActionAttributes{ref: ref}
}

func (ooa OriginOverrideActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ooa.ref.InternalTokens()
}

func (ooa OriginOverrideActionAttributes) HeaderAction() terra.ListValue[OriginOverrideActionHeaderActionAttributes] {
	return terra.ReferenceAsList[OriginOverrideActionHeaderActionAttributes](ooa.ref.Append("header_action"))
}

func (ooa OriginOverrideActionAttributes) UrlRewrite() terra.ListValue[OriginOverrideActionUrlRewriteAttributes] {
	return terra.ReferenceAsList[OriginOverrideActionUrlRewriteAttributes](ooa.ref.Append("url_rewrite"))
}

type OriginOverrideActionHeaderActionAttributes struct {
	ref terra.Reference
}

func (ha OriginOverrideActionHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha OriginOverrideActionHeaderActionAttributes) InternalWithRef(ref terra.Reference) OriginOverrideActionHeaderActionAttributes {
	return OriginOverrideActionHeaderActionAttributes{ref: ref}
}

func (ha OriginOverrideActionHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha OriginOverrideActionHeaderActionAttributes) RequestHeadersToAdd() terra.ListValue[OriginOverrideActionHeaderActionRequestHeadersToAddAttributes] {
	return terra.ReferenceAsList[OriginOverrideActionHeaderActionRequestHeadersToAddAttributes](ha.ref.Append("request_headers_to_add"))
}

type OriginOverrideActionHeaderActionRequestHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta OriginOverrideActionHeaderActionRequestHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta OriginOverrideActionHeaderActionRequestHeadersToAddAttributes) InternalWithRef(ref terra.Reference) OriginOverrideActionHeaderActionRequestHeadersToAddAttributes {
	return OriginOverrideActionHeaderActionRequestHeadersToAddAttributes{ref: ref}
}

func (rhta OriginOverrideActionHeaderActionRequestHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta OriginOverrideActionHeaderActionRequestHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta OriginOverrideActionHeaderActionRequestHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta OriginOverrideActionHeaderActionRequestHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type OriginOverrideActionUrlRewriteAttributes struct {
	ref terra.Reference
}

func (ur OriginOverrideActionUrlRewriteAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur OriginOverrideActionUrlRewriteAttributes) InternalWithRef(ref terra.Reference) OriginOverrideActionUrlRewriteAttributes {
	return OriginOverrideActionUrlRewriteAttributes{ref: ref}
}

func (ur OriginOverrideActionUrlRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur OriginOverrideActionUrlRewriteAttributes) HostRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_rewrite"))
}

type OriginRedirectAttributes struct {
	ref terra.Reference
}

func (or OriginRedirectAttributes) InternalRef() (terra.Reference, error) {
	return or.ref, nil
}

func (or OriginRedirectAttributes) InternalWithRef(ref terra.Reference) OriginRedirectAttributes {
	return OriginRedirectAttributes{ref: ref}
}

func (or OriginRedirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return or.ref.InternalTokens()
}

func (or OriginRedirectAttributes) RedirectConditions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](or.ref.Append("redirect_conditions"))
}

type TimeoutAttributes struct {
	ref terra.Reference
}

func (t TimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutAttributes) InternalWithRef(ref terra.Reference) TimeoutAttributes {
	return TimeoutAttributes{ref: ref}
}

func (t TimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutAttributes) ConnectTimeout() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("connect_timeout"))
}

func (t TimeoutAttributes) MaxAttemptsTimeout() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("max_attempts_timeout"))
}

func (t TimeoutAttributes) ReadTimeout() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read_timeout"))
}

func (t TimeoutAttributes) ResponseTimeout() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("response_timeout"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AwsV4AuthenticationState struct {
	AccessKeyId            string `json:"access_key_id"`
	OriginRegion           string `json:"origin_region"`
	SecretAccessKeyVersion string `json:"secret_access_key_version"`
}

type OriginOverrideActionState struct {
	HeaderAction []OriginOverrideActionHeaderActionState `json:"header_action"`
	UrlRewrite   []OriginOverrideActionUrlRewriteState   `json:"url_rewrite"`
}

type OriginOverrideActionHeaderActionState struct {
	RequestHeadersToAdd []OriginOverrideActionHeaderActionRequestHeadersToAddState `json:"request_headers_to_add"`
}

type OriginOverrideActionHeaderActionRequestHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type OriginOverrideActionUrlRewriteState struct {
	HostRewrite string `json:"host_rewrite"`
}

type OriginRedirectState struct {
	RedirectConditions []string `json:"redirect_conditions"`
}

type TimeoutState struct {
	ConnectTimeout     string `json:"connect_timeout"`
	MaxAttemptsTimeout string `json:"max_attempts_timeout"`
	ReadTimeout        string `json:"read_timeout"`
	ResponseTimeout    string `json:"response_timeout"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
