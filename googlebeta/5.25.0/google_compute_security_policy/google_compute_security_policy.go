// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_security_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_security_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeSecurityPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcsp *Resource) Type() string {
	return "google_compute_security_policy"
}

// LocalName returns the local name for [Resource].
func (gcsp *Resource) LocalName() string {
	return gcsp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcsp *Resource) Configuration() interface{} {
	return gcsp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcsp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcsp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcsp *Resource) Dependencies() terra.Dependencies {
	return gcsp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcsp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcsp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcsp *Resource) Attributes() googleComputeSecurityPolicyAttributes {
	return googleComputeSecurityPolicyAttributes{ref: terra.ReferenceResource(gcsp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcsp *Resource) ImportState(state io.Reader) error {
	gcsp.state = &googleComputeSecurityPolicyState{}
	if err := json.NewDecoder(state).Decode(gcsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcsp.Type(), gcsp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcsp *Resource) State() (*googleComputeSecurityPolicyState, bool) {
	return gcsp.state, gcsp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcsp *Resource) StateMust() *googleComputeSecurityPolicyState {
	if gcsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcsp.Type(), gcsp.LocalName()))
	}
	return gcsp.state
}

// Args contains the configurations for google_compute_security_policy.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// AdaptiveProtectionConfig: optional
	AdaptiveProtectionConfig *AdaptiveProtectionConfig `hcl:"adaptive_protection_config,block"`
	// AdvancedOptionsConfig: optional
	AdvancedOptionsConfig *AdvancedOptionsConfig `hcl:"advanced_options_config,block"`
	// RecaptchaOptionsConfig: optional
	RecaptchaOptionsConfig *RecaptchaOptionsConfig `hcl:"recaptcha_options_config,block"`
	// Rule: min=0
	Rule []Rule `hcl:"rule,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeSecurityPolicyAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_compute_security_policy.
func (gcsp googleComputeSecurityPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcsp.ref.Append("description"))
}

// Fingerprint returns a reference to field fingerprint of google_compute_security_policy.
func (gcsp googleComputeSecurityPolicyAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(gcsp.ref.Append("fingerprint"))
}

// Id returns a reference to field id of google_compute_security_policy.
func (gcsp googleComputeSecurityPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcsp.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_security_policy.
func (gcsp googleComputeSecurityPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcsp.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_security_policy.
func (gcsp googleComputeSecurityPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcsp.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_compute_security_policy.
func (gcsp googleComputeSecurityPolicyAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcsp.ref.Append("self_link"))
}

// Type returns a reference to field type of google_compute_security_policy.
func (gcsp googleComputeSecurityPolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gcsp.ref.Append("type"))
}

func (gcsp googleComputeSecurityPolicyAttributes) AdaptiveProtectionConfig() terra.ListValue[AdaptiveProtectionConfigAttributes] {
	return terra.ReferenceAsList[AdaptiveProtectionConfigAttributes](gcsp.ref.Append("adaptive_protection_config"))
}

func (gcsp googleComputeSecurityPolicyAttributes) AdvancedOptionsConfig() terra.ListValue[AdvancedOptionsConfigAttributes] {
	return terra.ReferenceAsList[AdvancedOptionsConfigAttributes](gcsp.ref.Append("advanced_options_config"))
}

func (gcsp googleComputeSecurityPolicyAttributes) RecaptchaOptionsConfig() terra.ListValue[RecaptchaOptionsConfigAttributes] {
	return terra.ReferenceAsList[RecaptchaOptionsConfigAttributes](gcsp.ref.Append("recaptcha_options_config"))
}

func (gcsp googleComputeSecurityPolicyAttributes) Rule() terra.SetValue[RuleAttributes] {
	return terra.ReferenceAsSet[RuleAttributes](gcsp.ref.Append("rule"))
}

func (gcsp googleComputeSecurityPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcsp.ref.Append("timeouts"))
}

type googleComputeSecurityPolicyState struct {
	Description              string                          `json:"description"`
	Fingerprint              string                          `json:"fingerprint"`
	Id                       string                          `json:"id"`
	Name                     string                          `json:"name"`
	Project                  string                          `json:"project"`
	SelfLink                 string                          `json:"self_link"`
	Type                     string                          `json:"type"`
	AdaptiveProtectionConfig []AdaptiveProtectionConfigState `json:"adaptive_protection_config"`
	AdvancedOptionsConfig    []AdvancedOptionsConfigState    `json:"advanced_options_config"`
	RecaptchaOptionsConfig   []RecaptchaOptionsConfigState   `json:"recaptcha_options_config"`
	Rule                     []RuleState                     `json:"rule"`
	Timeouts                 *TimeoutsState                  `json:"timeouts"`
}
