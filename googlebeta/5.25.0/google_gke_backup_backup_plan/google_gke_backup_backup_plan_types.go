// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_gke_backup_backup_plan

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BackupConfig struct {
	// AllNamespaces: bool, optional
	AllNamespaces terra.BoolValue `hcl:"all_namespaces,attr"`
	// IncludeSecrets: bool, optional
	IncludeSecrets terra.BoolValue `hcl:"include_secrets,attr"`
	// IncludeVolumeData: bool, optional
	IncludeVolumeData terra.BoolValue `hcl:"include_volume_data,attr"`
	// BackupConfigEncryptionKey: optional
	EncryptionKey *BackupConfigEncryptionKey `hcl:"encryption_key,block"`
	// BackupConfigSelectedApplications: optional
	SelectedApplications *BackupConfigSelectedApplications `hcl:"selected_applications,block"`
	// BackupConfigSelectedNamespaces: optional
	SelectedNamespaces *BackupConfigSelectedNamespaces `hcl:"selected_namespaces,block"`
}

type BackupConfigEncryptionKey struct {
	// GcpKmsEncryptionKey: string, required
	GcpKmsEncryptionKey terra.StringValue `hcl:"gcp_kms_encryption_key,attr" validate:"required"`
}

type BackupConfigSelectedApplications struct {
	// BackupConfigSelectedApplicationsNamespacedNames: min=1
	NamespacedNames []BackupConfigSelectedApplicationsNamespacedNames `hcl:"namespaced_names,block" validate:"min=1"`
}

type BackupConfigSelectedApplicationsNamespacedNames struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, required
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
}

type BackupConfigSelectedNamespaces struct {
	// Namespaces: list of string, required
	Namespaces terra.ListValue[terra.StringValue] `hcl:"namespaces,attr" validate:"required"`
}

type BackupSchedule struct {
	// CronSchedule: string, optional
	CronSchedule terra.StringValue `hcl:"cron_schedule,attr"`
	// Paused: bool, optional
	Paused terra.BoolValue `hcl:"paused,attr"`
	// BackupScheduleRpoConfig: optional
	RpoConfig *BackupScheduleRpoConfig `hcl:"rpo_config,block"`
}

type BackupScheduleRpoConfig struct {
	// TargetRpoMinutes: number, required
	TargetRpoMinutes terra.NumberValue `hcl:"target_rpo_minutes,attr" validate:"required"`
	// BackupScheduleRpoConfigExclusionWindows: min=0
	ExclusionWindows []BackupScheduleRpoConfigExclusionWindows `hcl:"exclusion_windows,block" validate:"min=0"`
}

type BackupScheduleRpoConfigExclusionWindows struct {
	// Daily: bool, optional
	Daily terra.BoolValue `hcl:"daily,attr"`
	// Duration: string, required
	Duration terra.StringValue `hcl:"duration,attr" validate:"required"`
	// BackupScheduleRpoConfigExclusionWindowsDaysOfWeek: optional
	DaysOfWeek *BackupScheduleRpoConfigExclusionWindowsDaysOfWeek `hcl:"days_of_week,block"`
	// BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDate: optional
	SingleOccurrenceDate *BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDate `hcl:"single_occurrence_date,block"`
	// BackupScheduleRpoConfigExclusionWindowsStartTime: required
	StartTime *BackupScheduleRpoConfigExclusionWindowsStartTime `hcl:"start_time,block" validate:"required"`
}

type BackupScheduleRpoConfigExclusionWindowsDaysOfWeek struct {
	// DaysOfWeek: list of string, optional
	DaysOfWeek terra.ListValue[terra.StringValue] `hcl:"days_of_week,attr"`
}

type BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDate struct {
	// Day: number, optional
	Day terra.NumberValue `hcl:"day,attr"`
	// Month: number, optional
	Month terra.NumberValue `hcl:"month,attr"`
	// Year: number, optional
	Year terra.NumberValue `hcl:"year,attr"`
}

type BackupScheduleRpoConfigExclusionWindowsStartTime struct {
	// Hours: number, optional
	Hours terra.NumberValue `hcl:"hours,attr"`
	// Minutes: number, optional
	Minutes terra.NumberValue `hcl:"minutes,attr"`
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: number, optional
	Seconds terra.NumberValue `hcl:"seconds,attr"`
}

type RetentionPolicy struct {
	// BackupDeleteLockDays: number, optional
	BackupDeleteLockDays terra.NumberValue `hcl:"backup_delete_lock_days,attr"`
	// BackupRetainDays: number, optional
	BackupRetainDays terra.NumberValue `hcl:"backup_retain_days,attr"`
	// Locked: bool, optional
	Locked terra.BoolValue `hcl:"locked,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BackupConfigAttributes struct {
	ref terra.Reference
}

func (bc BackupConfigAttributes) InternalRef() (terra.Reference, error) {
	return bc.ref, nil
}

func (bc BackupConfigAttributes) InternalWithRef(ref terra.Reference) BackupConfigAttributes {
	return BackupConfigAttributes{ref: ref}
}

func (bc BackupConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bc.ref.InternalTokens()
}

func (bc BackupConfigAttributes) AllNamespaces() terra.BoolValue {
	return terra.ReferenceAsBool(bc.ref.Append("all_namespaces"))
}

func (bc BackupConfigAttributes) IncludeSecrets() terra.BoolValue {
	return terra.ReferenceAsBool(bc.ref.Append("include_secrets"))
}

func (bc BackupConfigAttributes) IncludeVolumeData() terra.BoolValue {
	return terra.ReferenceAsBool(bc.ref.Append("include_volume_data"))
}

func (bc BackupConfigAttributes) EncryptionKey() terra.ListValue[BackupConfigEncryptionKeyAttributes] {
	return terra.ReferenceAsList[BackupConfigEncryptionKeyAttributes](bc.ref.Append("encryption_key"))
}

func (bc BackupConfigAttributes) SelectedApplications() terra.ListValue[BackupConfigSelectedApplicationsAttributes] {
	return terra.ReferenceAsList[BackupConfigSelectedApplicationsAttributes](bc.ref.Append("selected_applications"))
}

func (bc BackupConfigAttributes) SelectedNamespaces() terra.ListValue[BackupConfigSelectedNamespacesAttributes] {
	return terra.ReferenceAsList[BackupConfigSelectedNamespacesAttributes](bc.ref.Append("selected_namespaces"))
}

type BackupConfigEncryptionKeyAttributes struct {
	ref terra.Reference
}

func (ek BackupConfigEncryptionKeyAttributes) InternalRef() (terra.Reference, error) {
	return ek.ref, nil
}

func (ek BackupConfigEncryptionKeyAttributes) InternalWithRef(ref terra.Reference) BackupConfigEncryptionKeyAttributes {
	return BackupConfigEncryptionKeyAttributes{ref: ref}
}

func (ek BackupConfigEncryptionKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ek.ref.InternalTokens()
}

func (ek BackupConfigEncryptionKeyAttributes) GcpKmsEncryptionKey() terra.StringValue {
	return terra.ReferenceAsString(ek.ref.Append("gcp_kms_encryption_key"))
}

type BackupConfigSelectedApplicationsAttributes struct {
	ref terra.Reference
}

func (sa BackupConfigSelectedApplicationsAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa BackupConfigSelectedApplicationsAttributes) InternalWithRef(ref terra.Reference) BackupConfigSelectedApplicationsAttributes {
	return BackupConfigSelectedApplicationsAttributes{ref: ref}
}

func (sa BackupConfigSelectedApplicationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa BackupConfigSelectedApplicationsAttributes) NamespacedNames() terra.ListValue[BackupConfigSelectedApplicationsNamespacedNamesAttributes] {
	return terra.ReferenceAsList[BackupConfigSelectedApplicationsNamespacedNamesAttributes](sa.ref.Append("namespaced_names"))
}

type BackupConfigSelectedApplicationsNamespacedNamesAttributes struct {
	ref terra.Reference
}

func (nn BackupConfigSelectedApplicationsNamespacedNamesAttributes) InternalRef() (terra.Reference, error) {
	return nn.ref, nil
}

func (nn BackupConfigSelectedApplicationsNamespacedNamesAttributes) InternalWithRef(ref terra.Reference) BackupConfigSelectedApplicationsNamespacedNamesAttributes {
	return BackupConfigSelectedApplicationsNamespacedNamesAttributes{ref: ref}
}

func (nn BackupConfigSelectedApplicationsNamespacedNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nn.ref.InternalTokens()
}

func (nn BackupConfigSelectedApplicationsNamespacedNamesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nn.ref.Append("name"))
}

func (nn BackupConfigSelectedApplicationsNamespacedNamesAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(nn.ref.Append("namespace"))
}

type BackupConfigSelectedNamespacesAttributes struct {
	ref terra.Reference
}

func (sn BackupConfigSelectedNamespacesAttributes) InternalRef() (terra.Reference, error) {
	return sn.ref, nil
}

func (sn BackupConfigSelectedNamespacesAttributes) InternalWithRef(ref terra.Reference) BackupConfigSelectedNamespacesAttributes {
	return BackupConfigSelectedNamespacesAttributes{ref: ref}
}

func (sn BackupConfigSelectedNamespacesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sn.ref.InternalTokens()
}

func (sn BackupConfigSelectedNamespacesAttributes) Namespaces() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sn.ref.Append("namespaces"))
}

type BackupScheduleAttributes struct {
	ref terra.Reference
}

func (bs BackupScheduleAttributes) InternalRef() (terra.Reference, error) {
	return bs.ref, nil
}

func (bs BackupScheduleAttributes) InternalWithRef(ref terra.Reference) BackupScheduleAttributes {
	return BackupScheduleAttributes{ref: ref}
}

func (bs BackupScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bs.ref.InternalTokens()
}

func (bs BackupScheduleAttributes) CronSchedule() terra.StringValue {
	return terra.ReferenceAsString(bs.ref.Append("cron_schedule"))
}

func (bs BackupScheduleAttributes) Paused() terra.BoolValue {
	return terra.ReferenceAsBool(bs.ref.Append("paused"))
}

func (bs BackupScheduleAttributes) RpoConfig() terra.ListValue[BackupScheduleRpoConfigAttributes] {
	return terra.ReferenceAsList[BackupScheduleRpoConfigAttributes](bs.ref.Append("rpo_config"))
}

type BackupScheduleRpoConfigAttributes struct {
	ref terra.Reference
}

func (rc BackupScheduleRpoConfigAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc BackupScheduleRpoConfigAttributes) InternalWithRef(ref terra.Reference) BackupScheduleRpoConfigAttributes {
	return BackupScheduleRpoConfigAttributes{ref: ref}
}

func (rc BackupScheduleRpoConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc BackupScheduleRpoConfigAttributes) TargetRpoMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("target_rpo_minutes"))
}

func (rc BackupScheduleRpoConfigAttributes) ExclusionWindows() terra.ListValue[BackupScheduleRpoConfigExclusionWindowsAttributes] {
	return terra.ReferenceAsList[BackupScheduleRpoConfigExclusionWindowsAttributes](rc.ref.Append("exclusion_windows"))
}

type BackupScheduleRpoConfigExclusionWindowsAttributes struct {
	ref terra.Reference
}

func (ew BackupScheduleRpoConfigExclusionWindowsAttributes) InternalRef() (terra.Reference, error) {
	return ew.ref, nil
}

func (ew BackupScheduleRpoConfigExclusionWindowsAttributes) InternalWithRef(ref terra.Reference) BackupScheduleRpoConfigExclusionWindowsAttributes {
	return BackupScheduleRpoConfigExclusionWindowsAttributes{ref: ref}
}

func (ew BackupScheduleRpoConfigExclusionWindowsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ew.ref.InternalTokens()
}

func (ew BackupScheduleRpoConfigExclusionWindowsAttributes) Daily() terra.BoolValue {
	return terra.ReferenceAsBool(ew.ref.Append("daily"))
}

func (ew BackupScheduleRpoConfigExclusionWindowsAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(ew.ref.Append("duration"))
}

func (ew BackupScheduleRpoConfigExclusionWindowsAttributes) DaysOfWeek() terra.ListValue[BackupScheduleRpoConfigExclusionWindowsDaysOfWeekAttributes] {
	return terra.ReferenceAsList[BackupScheduleRpoConfigExclusionWindowsDaysOfWeekAttributes](ew.ref.Append("days_of_week"))
}

func (ew BackupScheduleRpoConfigExclusionWindowsAttributes) SingleOccurrenceDate() terra.ListValue[BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDateAttributes] {
	return terra.ReferenceAsList[BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDateAttributes](ew.ref.Append("single_occurrence_date"))
}

func (ew BackupScheduleRpoConfigExclusionWindowsAttributes) StartTime() terra.ListValue[BackupScheduleRpoConfigExclusionWindowsStartTimeAttributes] {
	return terra.ReferenceAsList[BackupScheduleRpoConfigExclusionWindowsStartTimeAttributes](ew.ref.Append("start_time"))
}

type BackupScheduleRpoConfigExclusionWindowsDaysOfWeekAttributes struct {
	ref terra.Reference
}

func (dow BackupScheduleRpoConfigExclusionWindowsDaysOfWeekAttributes) InternalRef() (terra.Reference, error) {
	return dow.ref, nil
}

func (dow BackupScheduleRpoConfigExclusionWindowsDaysOfWeekAttributes) InternalWithRef(ref terra.Reference) BackupScheduleRpoConfigExclusionWindowsDaysOfWeekAttributes {
	return BackupScheduleRpoConfigExclusionWindowsDaysOfWeekAttributes{ref: ref}
}

func (dow BackupScheduleRpoConfigExclusionWindowsDaysOfWeekAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dow.ref.InternalTokens()
}

func (dow BackupScheduleRpoConfigExclusionWindowsDaysOfWeekAttributes) DaysOfWeek() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dow.ref.Append("days_of_week"))
}

type BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDateAttributes struct {
	ref terra.Reference
}

func (sod BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDateAttributes) InternalRef() (terra.Reference, error) {
	return sod.ref, nil
}

func (sod BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDateAttributes) InternalWithRef(ref terra.Reference) BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDateAttributes {
	return BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDateAttributes{ref: ref}
}

func (sod BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sod.ref.InternalTokens()
}

func (sod BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDateAttributes) Day() terra.NumberValue {
	return terra.ReferenceAsNumber(sod.ref.Append("day"))
}

func (sod BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDateAttributes) Month() terra.NumberValue {
	return terra.ReferenceAsNumber(sod.ref.Append("month"))
}

func (sod BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDateAttributes) Year() terra.NumberValue {
	return terra.ReferenceAsNumber(sod.ref.Append("year"))
}

type BackupScheduleRpoConfigExclusionWindowsStartTimeAttributes struct {
	ref terra.Reference
}

func (st BackupScheduleRpoConfigExclusionWindowsStartTimeAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st BackupScheduleRpoConfigExclusionWindowsStartTimeAttributes) InternalWithRef(ref terra.Reference) BackupScheduleRpoConfigExclusionWindowsStartTimeAttributes {
	return BackupScheduleRpoConfigExclusionWindowsStartTimeAttributes{ref: ref}
}

func (st BackupScheduleRpoConfigExclusionWindowsStartTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st BackupScheduleRpoConfigExclusionWindowsStartTimeAttributes) Hours() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("hours"))
}

func (st BackupScheduleRpoConfigExclusionWindowsStartTimeAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("minutes"))
}

func (st BackupScheduleRpoConfigExclusionWindowsStartTimeAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("nanos"))
}

func (st BackupScheduleRpoConfigExclusionWindowsStartTimeAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("seconds"))
}

type RetentionPolicyAttributes struct {
	ref terra.Reference
}

func (rp RetentionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RetentionPolicyAttributes) InternalWithRef(ref terra.Reference) RetentionPolicyAttributes {
	return RetentionPolicyAttributes{ref: ref}
}

func (rp RetentionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RetentionPolicyAttributes) BackupDeleteLockDays() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("backup_delete_lock_days"))
}

func (rp RetentionPolicyAttributes) BackupRetainDays() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("backup_retain_days"))
}

func (rp RetentionPolicyAttributes) Locked() terra.BoolValue {
	return terra.ReferenceAsBool(rp.ref.Append("locked"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BackupConfigState struct {
	AllNamespaces        bool                                    `json:"all_namespaces"`
	IncludeSecrets       bool                                    `json:"include_secrets"`
	IncludeVolumeData    bool                                    `json:"include_volume_data"`
	EncryptionKey        []BackupConfigEncryptionKeyState        `json:"encryption_key"`
	SelectedApplications []BackupConfigSelectedApplicationsState `json:"selected_applications"`
	SelectedNamespaces   []BackupConfigSelectedNamespacesState   `json:"selected_namespaces"`
}

type BackupConfigEncryptionKeyState struct {
	GcpKmsEncryptionKey string `json:"gcp_kms_encryption_key"`
}

type BackupConfigSelectedApplicationsState struct {
	NamespacedNames []BackupConfigSelectedApplicationsNamespacedNamesState `json:"namespaced_names"`
}

type BackupConfigSelectedApplicationsNamespacedNamesState struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}

type BackupConfigSelectedNamespacesState struct {
	Namespaces []string `json:"namespaces"`
}

type BackupScheduleState struct {
	CronSchedule string                         `json:"cron_schedule"`
	Paused       bool                           `json:"paused"`
	RpoConfig    []BackupScheduleRpoConfigState `json:"rpo_config"`
}

type BackupScheduleRpoConfigState struct {
	TargetRpoMinutes float64                                        `json:"target_rpo_minutes"`
	ExclusionWindows []BackupScheduleRpoConfigExclusionWindowsState `json:"exclusion_windows"`
}

type BackupScheduleRpoConfigExclusionWindowsState struct {
	Daily                bool                                                               `json:"daily"`
	Duration             string                                                             `json:"duration"`
	DaysOfWeek           []BackupScheduleRpoConfigExclusionWindowsDaysOfWeekState           `json:"days_of_week"`
	SingleOccurrenceDate []BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDateState `json:"single_occurrence_date"`
	StartTime            []BackupScheduleRpoConfigExclusionWindowsStartTimeState            `json:"start_time"`
}

type BackupScheduleRpoConfigExclusionWindowsDaysOfWeekState struct {
	DaysOfWeek []string `json:"days_of_week"`
}

type BackupScheduleRpoConfigExclusionWindowsSingleOccurrenceDateState struct {
	Day   float64 `json:"day"`
	Month float64 `json:"month"`
	Year  float64 `json:"year"`
}

type BackupScheduleRpoConfigExclusionWindowsStartTimeState struct {
	Hours   float64 `json:"hours"`
	Minutes float64 `json:"minutes"`
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type RetentionPolicyState struct {
	BackupDeleteLockDays float64 `json:"backup_delete_lock_days"`
	BackupRetainDays     float64 `json:"backup_retain_days"`
	Locked               bool    `json:"locked"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
