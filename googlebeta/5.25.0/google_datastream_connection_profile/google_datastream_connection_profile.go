// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_datastream_connection_profile

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_datastream_connection_profile.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDatastreamConnectionProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdcp *Resource) Type() string {
	return "google_datastream_connection_profile"
}

// LocalName returns the local name for [Resource].
func (gdcp *Resource) LocalName() string {
	return gdcp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdcp *Resource) Configuration() interface{} {
	return gdcp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdcp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdcp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdcp *Resource) Dependencies() terra.Dependencies {
	return gdcp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdcp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdcp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdcp *Resource) Attributes() googleDatastreamConnectionProfileAttributes {
	return googleDatastreamConnectionProfileAttributes{ref: terra.ReferenceResource(gdcp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdcp *Resource) ImportState(state io.Reader) error {
	gdcp.state = &googleDatastreamConnectionProfileState{}
	if err := json.NewDecoder(state).Decode(gdcp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdcp.Type(), gdcp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdcp *Resource) State() (*googleDatastreamConnectionProfileState, bool) {
	return gdcp.state, gdcp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdcp *Resource) StateMust() *googleDatastreamConnectionProfileState {
	if gdcp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdcp.Type(), gdcp.LocalName()))
	}
	return gdcp.state
}

// Args contains the configurations for google_datastream_connection_profile.
type Args struct {
	// ConnectionProfileId: string, required
	ConnectionProfileId terra.StringValue `hcl:"connection_profile_id,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// BigqueryProfile: optional
	BigqueryProfile *BigqueryProfile `hcl:"bigquery_profile,block"`
	// ForwardSshConnectivity: optional
	ForwardSshConnectivity *ForwardSshConnectivity `hcl:"forward_ssh_connectivity,block"`
	// GcsProfile: optional
	GcsProfile *GcsProfile `hcl:"gcs_profile,block"`
	// MysqlProfile: optional
	MysqlProfile *MysqlProfile `hcl:"mysql_profile,block"`
	// OracleProfile: optional
	OracleProfile *OracleProfile `hcl:"oracle_profile,block"`
	// PostgresqlProfile: optional
	PostgresqlProfile *PostgresqlProfile `hcl:"postgresql_profile,block"`
	// PrivateConnectivity: optional
	PrivateConnectivity *PrivateConnectivity `hcl:"private_connectivity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDatastreamConnectionProfileAttributes struct {
	ref terra.Reference
}

// ConnectionProfileId returns a reference to field connection_profile_id of google_datastream_connection_profile.
func (gdcp googleDatastreamConnectionProfileAttributes) ConnectionProfileId() terra.StringValue {
	return terra.ReferenceAsString(gdcp.ref.Append("connection_profile_id"))
}

// DisplayName returns a reference to field display_name of google_datastream_connection_profile.
func (gdcp googleDatastreamConnectionProfileAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdcp.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_datastream_connection_profile.
func (gdcp googleDatastreamConnectionProfileAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdcp.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_datastream_connection_profile.
func (gdcp googleDatastreamConnectionProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdcp.ref.Append("id"))
}

// Labels returns a reference to field labels of google_datastream_connection_profile.
func (gdcp googleDatastreamConnectionProfileAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdcp.ref.Append("labels"))
}

// Location returns a reference to field location of google_datastream_connection_profile.
func (gdcp googleDatastreamConnectionProfileAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gdcp.ref.Append("location"))
}

// Name returns a reference to field name of google_datastream_connection_profile.
func (gdcp googleDatastreamConnectionProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdcp.ref.Append("name"))
}

// Project returns a reference to field project of google_datastream_connection_profile.
func (gdcp googleDatastreamConnectionProfileAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdcp.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_datastream_connection_profile.
func (gdcp googleDatastreamConnectionProfileAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdcp.ref.Append("terraform_labels"))
}

func (gdcp googleDatastreamConnectionProfileAttributes) BigqueryProfile() terra.ListValue[BigqueryProfileAttributes] {
	return terra.ReferenceAsList[BigqueryProfileAttributes](gdcp.ref.Append("bigquery_profile"))
}

func (gdcp googleDatastreamConnectionProfileAttributes) ForwardSshConnectivity() terra.ListValue[ForwardSshConnectivityAttributes] {
	return terra.ReferenceAsList[ForwardSshConnectivityAttributes](gdcp.ref.Append("forward_ssh_connectivity"))
}

func (gdcp googleDatastreamConnectionProfileAttributes) GcsProfile() terra.ListValue[GcsProfileAttributes] {
	return terra.ReferenceAsList[GcsProfileAttributes](gdcp.ref.Append("gcs_profile"))
}

func (gdcp googleDatastreamConnectionProfileAttributes) MysqlProfile() terra.ListValue[MysqlProfileAttributes] {
	return terra.ReferenceAsList[MysqlProfileAttributes](gdcp.ref.Append("mysql_profile"))
}

func (gdcp googleDatastreamConnectionProfileAttributes) OracleProfile() terra.ListValue[OracleProfileAttributes] {
	return terra.ReferenceAsList[OracleProfileAttributes](gdcp.ref.Append("oracle_profile"))
}

func (gdcp googleDatastreamConnectionProfileAttributes) PostgresqlProfile() terra.ListValue[PostgresqlProfileAttributes] {
	return terra.ReferenceAsList[PostgresqlProfileAttributes](gdcp.ref.Append("postgresql_profile"))
}

func (gdcp googleDatastreamConnectionProfileAttributes) PrivateConnectivity() terra.ListValue[PrivateConnectivityAttributes] {
	return terra.ReferenceAsList[PrivateConnectivityAttributes](gdcp.ref.Append("private_connectivity"))
}

func (gdcp googleDatastreamConnectionProfileAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdcp.ref.Append("timeouts"))
}

type googleDatastreamConnectionProfileState struct {
	ConnectionProfileId    string                        `json:"connection_profile_id"`
	DisplayName            string                        `json:"display_name"`
	EffectiveLabels        map[string]string             `json:"effective_labels"`
	Id                     string                        `json:"id"`
	Labels                 map[string]string             `json:"labels"`
	Location               string                        `json:"location"`
	Name                   string                        `json:"name"`
	Project                string                        `json:"project"`
	TerraformLabels        map[string]string             `json:"terraform_labels"`
	BigqueryProfile        []BigqueryProfileState        `json:"bigquery_profile"`
	ForwardSshConnectivity []ForwardSshConnectivityState `json:"forward_ssh_connectivity"`
	GcsProfile             []GcsProfileState             `json:"gcs_profile"`
	MysqlProfile           []MysqlProfileState           `json:"mysql_profile"`
	OracleProfile          []OracleProfileState          `json:"oracle_profile"`
	PostgresqlProfile      []PostgresqlProfileState      `json:"postgresql_profile"`
	PrivateConnectivity    []PrivateConnectivityState    `json:"private_connectivity"`
	Timeouts               *TimeoutsState                `json:"timeouts"`
}
