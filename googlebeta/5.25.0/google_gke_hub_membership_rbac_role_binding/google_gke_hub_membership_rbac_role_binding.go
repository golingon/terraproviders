// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_gke_hub_membership_rbac_role_binding

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_gke_hub_membership_rbac_role_binding.
type Resource struct {
	Name      string
	Args      Args
	state     *googleGkeHubMembershipRbacRoleBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gghmrrb *Resource) Type() string {
	return "google_gke_hub_membership_rbac_role_binding"
}

// LocalName returns the local name for [Resource].
func (gghmrrb *Resource) LocalName() string {
	return gghmrrb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gghmrrb *Resource) Configuration() interface{} {
	return gghmrrb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gghmrrb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gghmrrb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gghmrrb *Resource) Dependencies() terra.Dependencies {
	return gghmrrb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gghmrrb *Resource) LifecycleManagement() *terra.Lifecycle {
	return gghmrrb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gghmrrb *Resource) Attributes() googleGkeHubMembershipRbacRoleBindingAttributes {
	return googleGkeHubMembershipRbacRoleBindingAttributes{ref: terra.ReferenceResource(gghmrrb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gghmrrb *Resource) ImportState(state io.Reader) error {
	gghmrrb.state = &googleGkeHubMembershipRbacRoleBindingState{}
	if err := json.NewDecoder(state).Decode(gghmrrb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gghmrrb.Type(), gghmrrb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gghmrrb *Resource) State() (*googleGkeHubMembershipRbacRoleBindingState, bool) {
	return gghmrrb.state, gghmrrb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gghmrrb *Resource) StateMust() *googleGkeHubMembershipRbacRoleBindingState {
	if gghmrrb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gghmrrb.Type(), gghmrrb.LocalName()))
	}
	return gghmrrb.state
}

// Args contains the configurations for google_gke_hub_membership_rbac_role_binding.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MembershipId: string, required
	MembershipId terra.StringValue `hcl:"membership_id,attr" validate:"required"`
	// MembershipRbacRoleBindingId: string, required
	MembershipRbacRoleBindingId terra.StringValue `hcl:"membership_rbac_role_binding_id,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// User: string, required
	User terra.StringValue `hcl:"user,attr" validate:"required"`
	// Role: required
	Role *Role `hcl:"role,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleGkeHubMembershipRbacRoleBindingAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_gke_hub_membership_rbac_role_binding.
func (gghmrrb googleGkeHubMembershipRbacRoleBindingAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gghmrrb.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_gke_hub_membership_rbac_role_binding.
func (gghmrrb googleGkeHubMembershipRbacRoleBindingAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(gghmrrb.ref.Append("delete_time"))
}

// Id returns a reference to field id of google_gke_hub_membership_rbac_role_binding.
func (gghmrrb googleGkeHubMembershipRbacRoleBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gghmrrb.ref.Append("id"))
}

// Location returns a reference to field location of google_gke_hub_membership_rbac_role_binding.
func (gghmrrb googleGkeHubMembershipRbacRoleBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gghmrrb.ref.Append("location"))
}

// MembershipId returns a reference to field membership_id of google_gke_hub_membership_rbac_role_binding.
func (gghmrrb googleGkeHubMembershipRbacRoleBindingAttributes) MembershipId() terra.StringValue {
	return terra.ReferenceAsString(gghmrrb.ref.Append("membership_id"))
}

// MembershipRbacRoleBindingId returns a reference to field membership_rbac_role_binding_id of google_gke_hub_membership_rbac_role_binding.
func (gghmrrb googleGkeHubMembershipRbacRoleBindingAttributes) MembershipRbacRoleBindingId() terra.StringValue {
	return terra.ReferenceAsString(gghmrrb.ref.Append("membership_rbac_role_binding_id"))
}

// Name returns a reference to field name of google_gke_hub_membership_rbac_role_binding.
func (gghmrrb googleGkeHubMembershipRbacRoleBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gghmrrb.ref.Append("name"))
}

// Project returns a reference to field project of google_gke_hub_membership_rbac_role_binding.
func (gghmrrb googleGkeHubMembershipRbacRoleBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gghmrrb.ref.Append("project"))
}

// Uid returns a reference to field uid of google_gke_hub_membership_rbac_role_binding.
func (gghmrrb googleGkeHubMembershipRbacRoleBindingAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gghmrrb.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_gke_hub_membership_rbac_role_binding.
func (gghmrrb googleGkeHubMembershipRbacRoleBindingAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gghmrrb.ref.Append("update_time"))
}

// User returns a reference to field user of google_gke_hub_membership_rbac_role_binding.
func (gghmrrb googleGkeHubMembershipRbacRoleBindingAttributes) User() terra.StringValue {
	return terra.ReferenceAsString(gghmrrb.ref.Append("user"))
}

func (gghmrrb googleGkeHubMembershipRbacRoleBindingAttributes) State() terra.ListValue[StateAttributes] {
	return terra.ReferenceAsList[StateAttributes](gghmrrb.ref.Append("state"))
}

func (gghmrrb googleGkeHubMembershipRbacRoleBindingAttributes) Role() terra.ListValue[RoleAttributes] {
	return terra.ReferenceAsList[RoleAttributes](gghmrrb.ref.Append("role"))
}

func (gghmrrb googleGkeHubMembershipRbacRoleBindingAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gghmrrb.ref.Append("timeouts"))
}

type googleGkeHubMembershipRbacRoleBindingState struct {
	CreateTime                  string         `json:"create_time"`
	DeleteTime                  string         `json:"delete_time"`
	Id                          string         `json:"id"`
	Location                    string         `json:"location"`
	MembershipId                string         `json:"membership_id"`
	MembershipRbacRoleBindingId string         `json:"membership_rbac_role_binding_id"`
	Name                        string         `json:"name"`
	Project                     string         `json:"project"`
	Uid                         string         `json:"uid"`
	UpdateTime                  string         `json:"update_time"`
	User                        string         `json:"user"`
	State                       []StateState   `json:"state"`
	Role                        []RoleState    `json:"role"`
	Timeouts                    *TimeoutsState `json:"timeouts"`
}
