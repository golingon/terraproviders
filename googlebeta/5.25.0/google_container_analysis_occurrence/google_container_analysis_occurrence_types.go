// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_container_analysis_occurrence

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Attestation struct {
	// SerializedPayload: string, required
	SerializedPayload terra.StringValue `hcl:"serialized_payload,attr" validate:"required"`
	// AttestationSignatures: min=1
	Signatures []AttestationSignatures `hcl:"signatures,block" validate:"min=1"`
}

type AttestationSignatures struct {
	// PublicKeyId: string, required
	PublicKeyId terra.StringValue `hcl:"public_key_id,attr" validate:"required"`
	// Signature: string, optional
	Signature terra.StringValue `hcl:"signature,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AttestationAttributes struct {
	ref terra.Reference
}

func (a AttestationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AttestationAttributes) InternalWithRef(ref terra.Reference) AttestationAttributes {
	return AttestationAttributes{ref: ref}
}

func (a AttestationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AttestationAttributes) SerializedPayload() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("serialized_payload"))
}

func (a AttestationAttributes) Signatures() terra.SetValue[AttestationSignaturesAttributes] {
	return terra.ReferenceAsSet[AttestationSignaturesAttributes](a.ref.Append("signatures"))
}

type AttestationSignaturesAttributes struct {
	ref terra.Reference
}

func (s AttestationSignaturesAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s AttestationSignaturesAttributes) InternalWithRef(ref terra.Reference) AttestationSignaturesAttributes {
	return AttestationSignaturesAttributes{ref: ref}
}

func (s AttestationSignaturesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s AttestationSignaturesAttributes) PublicKeyId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("public_key_id"))
}

func (s AttestationSignaturesAttributes) Signature() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("signature"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AttestationState struct {
	SerializedPayload string                       `json:"serialized_payload"`
	Signatures        []AttestationSignaturesState `json:"signatures"`
}

type AttestationSignaturesState struct {
	PublicKeyId string `json:"public_key_id"`
	Signature   string `json:"signature"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
