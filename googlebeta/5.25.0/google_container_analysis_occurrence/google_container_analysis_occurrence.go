// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_container_analysis_occurrence

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_container_analysis_occurrence.
type Resource struct {
	Name      string
	Args      Args
	state     *googleContainerAnalysisOccurrenceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcao *Resource) Type() string {
	return "google_container_analysis_occurrence"
}

// LocalName returns the local name for [Resource].
func (gcao *Resource) LocalName() string {
	return gcao.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcao *Resource) Configuration() interface{} {
	return gcao.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcao *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcao)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcao *Resource) Dependencies() terra.Dependencies {
	return gcao.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcao *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcao.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcao *Resource) Attributes() googleContainerAnalysisOccurrenceAttributes {
	return googleContainerAnalysisOccurrenceAttributes{ref: terra.ReferenceResource(gcao)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcao *Resource) ImportState(state io.Reader) error {
	gcao.state = &googleContainerAnalysisOccurrenceState{}
	if err := json.NewDecoder(state).Decode(gcao.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcao.Type(), gcao.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcao *Resource) State() (*googleContainerAnalysisOccurrenceState, bool) {
	return gcao.state, gcao.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcao *Resource) StateMust() *googleContainerAnalysisOccurrenceState {
	if gcao.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcao.Type(), gcao.LocalName()))
	}
	return gcao.state
}

// Args contains the configurations for google_container_analysis_occurrence.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NoteName: string, required
	NoteName terra.StringValue `hcl:"note_name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Remediation: string, optional
	Remediation terra.StringValue `hcl:"remediation,attr"`
	// ResourceUri: string, required
	ResourceUri terra.StringValue `hcl:"resource_uri,attr" validate:"required"`
	// Attestation: required
	Attestation *Attestation `hcl:"attestation,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleContainerAnalysisOccurrenceAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_container_analysis_occurrence.
func (gcao googleContainerAnalysisOccurrenceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcao.ref.Append("create_time"))
}

// Id returns a reference to field id of google_container_analysis_occurrence.
func (gcao googleContainerAnalysisOccurrenceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcao.ref.Append("id"))
}

// Kind returns a reference to field kind of google_container_analysis_occurrence.
func (gcao googleContainerAnalysisOccurrenceAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(gcao.ref.Append("kind"))
}

// Name returns a reference to field name of google_container_analysis_occurrence.
func (gcao googleContainerAnalysisOccurrenceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcao.ref.Append("name"))
}

// NoteName returns a reference to field note_name of google_container_analysis_occurrence.
func (gcao googleContainerAnalysisOccurrenceAttributes) NoteName() terra.StringValue {
	return terra.ReferenceAsString(gcao.ref.Append("note_name"))
}

// Project returns a reference to field project of google_container_analysis_occurrence.
func (gcao googleContainerAnalysisOccurrenceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcao.ref.Append("project"))
}

// Remediation returns a reference to field remediation of google_container_analysis_occurrence.
func (gcao googleContainerAnalysisOccurrenceAttributes) Remediation() terra.StringValue {
	return terra.ReferenceAsString(gcao.ref.Append("remediation"))
}

// ResourceUri returns a reference to field resource_uri of google_container_analysis_occurrence.
func (gcao googleContainerAnalysisOccurrenceAttributes) ResourceUri() terra.StringValue {
	return terra.ReferenceAsString(gcao.ref.Append("resource_uri"))
}

// UpdateTime returns a reference to field update_time of google_container_analysis_occurrence.
func (gcao googleContainerAnalysisOccurrenceAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gcao.ref.Append("update_time"))
}

func (gcao googleContainerAnalysisOccurrenceAttributes) Attestation() terra.ListValue[AttestationAttributes] {
	return terra.ReferenceAsList[AttestationAttributes](gcao.ref.Append("attestation"))
}

func (gcao googleContainerAnalysisOccurrenceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcao.ref.Append("timeouts"))
}

type googleContainerAnalysisOccurrenceState struct {
	CreateTime  string             `json:"create_time"`
	Id          string             `json:"id"`
	Kind        string             `json:"kind"`
	Name        string             `json:"name"`
	NoteName    string             `json:"note_name"`
	Project     string             `json:"project"`
	Remediation string             `json:"remediation"`
	ResourceUri string             `json:"resource_uri"`
	UpdateTime  string             `json:"update_time"`
	Attestation []AttestationState `json:"attestation"`
	Timeouts    *TimeoutsState     `json:"timeouts"`
}
