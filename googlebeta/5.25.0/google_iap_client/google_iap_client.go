// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_iap_client

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_iap_client.
type Resource struct {
	Name      string
	Args      Args
	state     *googleIapClientState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gic *Resource) Type() string {
	return "google_iap_client"
}

// LocalName returns the local name for [Resource].
func (gic *Resource) LocalName() string {
	return gic.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gic *Resource) Configuration() interface{} {
	return gic.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gic *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gic)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gic *Resource) Dependencies() terra.Dependencies {
	return gic.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gic *Resource) LifecycleManagement() *terra.Lifecycle {
	return gic.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gic *Resource) Attributes() googleIapClientAttributes {
	return googleIapClientAttributes{ref: terra.ReferenceResource(gic)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gic *Resource) ImportState(state io.Reader) error {
	gic.state = &googleIapClientState{}
	if err := json.NewDecoder(state).Decode(gic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gic.Type(), gic.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gic *Resource) State() (*googleIapClientState, bool) {
	return gic.state, gic.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gic *Resource) StateMust() *googleIapClientState {
	if gic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gic.Type(), gic.LocalName()))
	}
	return gic.state
}

// Args contains the configurations for google_iap_client.
type Args struct {
	// Brand: string, required
	Brand terra.StringValue `hcl:"brand,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleIapClientAttributes struct {
	ref terra.Reference
}

// Brand returns a reference to field brand of google_iap_client.
func (gic googleIapClientAttributes) Brand() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("brand"))
}

// ClientId returns a reference to field client_id of google_iap_client.
func (gic googleIapClientAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("client_id"))
}

// DisplayName returns a reference to field display_name of google_iap_client.
func (gic googleIapClientAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("display_name"))
}

// Id returns a reference to field id of google_iap_client.
func (gic googleIapClientAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("id"))
}

// Secret returns a reference to field secret of google_iap_client.
func (gic googleIapClientAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("secret"))
}

func (gic googleIapClientAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gic.ref.Append("timeouts"))
}

type googleIapClientState struct {
	Brand       string         `json:"brand"`
	ClientId    string         `json:"client_id"`
	DisplayName string         `json:"display_name"`
	Id          string         `json:"id"`
	Secret      string         `json:"secret"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
