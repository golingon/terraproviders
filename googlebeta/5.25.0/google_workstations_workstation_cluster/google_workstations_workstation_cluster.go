// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_workstations_workstation_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_workstations_workstation_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *googleWorkstationsWorkstationClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gwwc *Resource) Type() string {
	return "google_workstations_workstation_cluster"
}

// LocalName returns the local name for [Resource].
func (gwwc *Resource) LocalName() string {
	return gwwc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gwwc *Resource) Configuration() interface{} {
	return gwwc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gwwc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gwwc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gwwc *Resource) Dependencies() terra.Dependencies {
	return gwwc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gwwc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gwwc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gwwc *Resource) Attributes() googleWorkstationsWorkstationClusterAttributes {
	return googleWorkstationsWorkstationClusterAttributes{ref: terra.ReferenceResource(gwwc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gwwc *Resource) ImportState(state io.Reader) error {
	gwwc.state = &googleWorkstationsWorkstationClusterState{}
	if err := json.NewDecoder(state).Decode(gwwc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gwwc.Type(), gwwc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gwwc *Resource) State() (*googleWorkstationsWorkstationClusterState, bool) {
	return gwwc.state, gwwc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gwwc *Resource) StateMust() *googleWorkstationsWorkstationClusterState {
	if gwwc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gwwc.Type(), gwwc.LocalName()))
	}
	return gwwc.state
}

// Args contains the configurations for google_workstations_workstation_cluster.
type Args struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Subnetwork: string, required
	Subnetwork terra.StringValue `hcl:"subnetwork,attr" validate:"required"`
	// WorkstationClusterId: string, required
	WorkstationClusterId terra.StringValue `hcl:"workstation_cluster_id,attr" validate:"required"`
	// DomainConfig: optional
	DomainConfig *DomainConfig `hcl:"domain_config,block"`
	// PrivateClusterConfig: optional
	PrivateClusterConfig *PrivateClusterConfig `hcl:"private_cluster_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleWorkstationsWorkstationClusterAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gwwc.ref.Append("annotations"))
}

// CreateTime returns a reference to field create_time of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("create_time"))
}

// Degraded returns a reference to field degraded of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) Degraded() terra.BoolValue {
	return terra.ReferenceAsBool(gwwc.ref.Append("degraded"))
}

// DisplayName returns a reference to field display_name of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("display_name"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gwwc.ref.Append("effective_annotations"))
}

// EffectiveLabels returns a reference to field effective_labels of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gwwc.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("etag"))
}

// Id returns a reference to field id of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("id"))
}

// Labels returns a reference to field labels of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gwwc.ref.Append("labels"))
}

// Location returns a reference to field location of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("location"))
}

// Name returns a reference to field name of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("name"))
}

// Network returns a reference to field network of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("network"))
}

// Project returns a reference to field project of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("project"))
}

// Subnetwork returns a reference to field subnetwork of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("subnetwork"))
}

// TerraformLabels returns a reference to field terraform_labels of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gwwc.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("uid"))
}

// WorkstationClusterId returns a reference to field workstation_cluster_id of google_workstations_workstation_cluster.
func (gwwc googleWorkstationsWorkstationClusterAttributes) WorkstationClusterId() terra.StringValue {
	return terra.ReferenceAsString(gwwc.ref.Append("workstation_cluster_id"))
}

func (gwwc googleWorkstationsWorkstationClusterAttributes) Conditions() terra.ListValue[ConditionsAttributes] {
	return terra.ReferenceAsList[ConditionsAttributes](gwwc.ref.Append("conditions"))
}

func (gwwc googleWorkstationsWorkstationClusterAttributes) DomainConfig() terra.ListValue[DomainConfigAttributes] {
	return terra.ReferenceAsList[DomainConfigAttributes](gwwc.ref.Append("domain_config"))
}

func (gwwc googleWorkstationsWorkstationClusterAttributes) PrivateClusterConfig() terra.ListValue[PrivateClusterConfigAttributes] {
	return terra.ReferenceAsList[PrivateClusterConfigAttributes](gwwc.ref.Append("private_cluster_config"))
}

func (gwwc googleWorkstationsWorkstationClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gwwc.ref.Append("timeouts"))
}

type googleWorkstationsWorkstationClusterState struct {
	Annotations          map[string]string           `json:"annotations"`
	CreateTime           string                      `json:"create_time"`
	Degraded             bool                        `json:"degraded"`
	DisplayName          string                      `json:"display_name"`
	EffectiveAnnotations map[string]string           `json:"effective_annotations"`
	EffectiveLabels      map[string]string           `json:"effective_labels"`
	Etag                 string                      `json:"etag"`
	Id                   string                      `json:"id"`
	Labels               map[string]string           `json:"labels"`
	Location             string                      `json:"location"`
	Name                 string                      `json:"name"`
	Network              string                      `json:"network"`
	Project              string                      `json:"project"`
	Subnetwork           string                      `json:"subnetwork"`
	TerraformLabels      map[string]string           `json:"terraform_labels"`
	Uid                  string                      `json:"uid"`
	WorkstationClusterId string                      `json:"workstation_cluster_id"`
	Conditions           []ConditionsState           `json:"conditions"`
	DomainConfig         []DomainConfigState         `json:"domain_config"`
	PrivateClusterConfig []PrivateClusterConfigState `json:"private_cluster_config"`
	Timeouts             *TimeoutsState              `json:"timeouts"`
}
