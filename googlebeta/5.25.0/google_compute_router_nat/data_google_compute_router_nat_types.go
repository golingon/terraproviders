// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_router_nat

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataLogConfigAttributes struct {
	ref terra.Reference
}

func (lc DataLogConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc DataLogConfigAttributes) InternalWithRef(ref terra.Reference) DataLogConfigAttributes {
	return DataLogConfigAttributes{ref: ref}
}

func (lc DataLogConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc DataLogConfigAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("enable"))
}

func (lc DataLogConfigAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("filter"))
}

type DataRulesAttributes struct {
	ref terra.Reference
}

func (r DataRulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataRulesAttributes) InternalWithRef(ref terra.Reference) DataRulesAttributes {
	return DataRulesAttributes{ref: ref}
}

func (r DataRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataRulesAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("description"))
}

func (r DataRulesAttributes) Match() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("match"))
}

func (r DataRulesAttributes) RuleNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("rule_number"))
}

func (r DataRulesAttributes) Action() terra.ListValue[DataRulesActionAttributes] {
	return terra.ReferenceAsList[DataRulesActionAttributes](r.ref.Append("action"))
}

type DataRulesActionAttributes struct {
	ref terra.Reference
}

func (a DataRulesActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DataRulesActionAttributes) InternalWithRef(ref terra.Reference) DataRulesActionAttributes {
	return DataRulesActionAttributes{ref: ref}
}

func (a DataRulesActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DataRulesActionAttributes) SourceNatActiveIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](a.ref.Append("source_nat_active_ips"))
}

func (a DataRulesActionAttributes) SourceNatActiveRanges() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](a.ref.Append("source_nat_active_ranges"))
}

func (a DataRulesActionAttributes) SourceNatDrainIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](a.ref.Append("source_nat_drain_ips"))
}

func (a DataRulesActionAttributes) SourceNatDrainRanges() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](a.ref.Append("source_nat_drain_ranges"))
}

type DataSubnetworkAttributes struct {
	ref terra.Reference
}

func (s DataSubnetworkAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataSubnetworkAttributes) InternalWithRef(ref terra.Reference) DataSubnetworkAttributes {
	return DataSubnetworkAttributes{ref: ref}
}

func (s DataSubnetworkAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataSubnetworkAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s DataSubnetworkAttributes) SecondaryIpRangeNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("secondary_ip_range_names"))
}

func (s DataSubnetworkAttributes) SourceIpRangesToNat() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("source_ip_ranges_to_nat"))
}

type DataLogConfigState struct {
	Enable bool   `json:"enable"`
	Filter string `json:"filter"`
}

type DataRulesState struct {
	Description string                 `json:"description"`
	Match       string                 `json:"match"`
	RuleNumber  float64                `json:"rule_number"`
	Action      []DataRulesActionState `json:"action"`
}

type DataRulesActionState struct {
	SourceNatActiveIps    []string `json:"source_nat_active_ips"`
	SourceNatActiveRanges []string `json:"source_nat_active_ranges"`
	SourceNatDrainIps     []string `json:"source_nat_drain_ips"`
	SourceNatDrainRanges  []string `json:"source_nat_drain_ranges"`
}

type DataSubnetworkState struct {
	Name                  string   `json:"name"`
	SecondaryIpRangeNames []string `json:"secondary_ip_range_names"`
	SourceIpRangesToNat   []string `json:"source_ip_ranges_to_nat"`
}
