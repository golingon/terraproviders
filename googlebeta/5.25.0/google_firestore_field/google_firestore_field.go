// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firestore_field

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firestore_field.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirestoreFieldState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gff *Resource) Type() string {
	return "google_firestore_field"
}

// LocalName returns the local name for [Resource].
func (gff *Resource) LocalName() string {
	return gff.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gff *Resource) Configuration() interface{} {
	return gff.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gff *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gff)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gff *Resource) Dependencies() terra.Dependencies {
	return gff.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gff *Resource) LifecycleManagement() *terra.Lifecycle {
	return gff.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gff *Resource) Attributes() googleFirestoreFieldAttributes {
	return googleFirestoreFieldAttributes{ref: terra.ReferenceResource(gff)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gff *Resource) ImportState(state io.Reader) error {
	gff.state = &googleFirestoreFieldState{}
	if err := json.NewDecoder(state).Decode(gff.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gff.Type(), gff.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gff *Resource) State() (*googleFirestoreFieldState, bool) {
	return gff.state, gff.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gff *Resource) StateMust() *googleFirestoreFieldState {
	if gff.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gff.Type(), gff.LocalName()))
	}
	return gff.state
}

// Args contains the configurations for google_firestore_field.
type Args struct {
	// Collection: string, required
	Collection terra.StringValue `hcl:"collection,attr" validate:"required"`
	// Database: string, optional
	Database terra.StringValue `hcl:"database,attr"`
	// Field: string, required
	Field terra.StringValue `hcl:"field,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// IndexConfig: optional
	IndexConfig *IndexConfig `hcl:"index_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// TtlConfig: optional
	TtlConfig *TtlConfig `hcl:"ttl_config,block"`
}

type googleFirestoreFieldAttributes struct {
	ref terra.Reference
}

// Collection returns a reference to field collection of google_firestore_field.
func (gff googleFirestoreFieldAttributes) Collection() terra.StringValue {
	return terra.ReferenceAsString(gff.ref.Append("collection"))
}

// Database returns a reference to field database of google_firestore_field.
func (gff googleFirestoreFieldAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(gff.ref.Append("database"))
}

// Field returns a reference to field field of google_firestore_field.
func (gff googleFirestoreFieldAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(gff.ref.Append("field"))
}

// Id returns a reference to field id of google_firestore_field.
func (gff googleFirestoreFieldAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gff.ref.Append("id"))
}

// Name returns a reference to field name of google_firestore_field.
func (gff googleFirestoreFieldAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gff.ref.Append("name"))
}

// Project returns a reference to field project of google_firestore_field.
func (gff googleFirestoreFieldAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gff.ref.Append("project"))
}

func (gff googleFirestoreFieldAttributes) IndexConfig() terra.ListValue[IndexConfigAttributes] {
	return terra.ReferenceAsList[IndexConfigAttributes](gff.ref.Append("index_config"))
}

func (gff googleFirestoreFieldAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gff.ref.Append("timeouts"))
}

func (gff googleFirestoreFieldAttributes) TtlConfig() terra.ListValue[TtlConfigAttributes] {
	return terra.ReferenceAsList[TtlConfigAttributes](gff.ref.Append("ttl_config"))
}

type googleFirestoreFieldState struct {
	Collection  string             `json:"collection"`
	Database    string             `json:"database"`
	Field       string             `json:"field"`
	Id          string             `json:"id"`
	Name        string             `json:"name"`
	Project     string             `json:"project"`
	IndexConfig []IndexConfigState `json:"index_config"`
	Timeouts    *TimeoutsState     `json:"timeouts"`
	TtlConfig   []TtlConfigState   `json:"ttl_config"`
}
