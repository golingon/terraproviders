// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_tpu_v2_vm

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AcceleratorConfig struct {
	// Topology: string, required
	Topology terra.StringValue `hcl:"topology,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type DataDisks struct {
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// SourceDisk: string, required
	SourceDisk terra.StringValue `hcl:"source_disk,attr" validate:"required"`
}

type NetworkConfig struct {
	// CanIpForward: bool, optional
	CanIpForward terra.BoolValue `hcl:"can_ip_forward,attr"`
	// EnableExternalIps: bool, optional
	EnableExternalIps terra.BoolValue `hcl:"enable_external_ips,attr"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
}

type SchedulingConfig struct {
	// Preemptible: bool, optional
	Preemptible terra.BoolValue `hcl:"preemptible,attr"`
	// Reserved: bool, optional
	Reserved terra.BoolValue `hcl:"reserved,attr"`
}

type ServiceAccount struct {
	// Email: string, optional
	Email terra.StringValue `hcl:"email,attr"`
	// Scope: list of string, optional
	Scope terra.ListValue[terra.StringValue] `hcl:"scope,attr"`
}

type ShieldedInstanceConfig struct {
	// EnableSecureBoot: bool, required
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type NetworkEndpointsAttributes struct {
	ref terra.Reference
}

func (ne NetworkEndpointsAttributes) InternalRef() (terra.Reference, error) {
	return ne.ref, nil
}

func (ne NetworkEndpointsAttributes) InternalWithRef(ref terra.Reference) NetworkEndpointsAttributes {
	return NetworkEndpointsAttributes{ref: ref}
}

func (ne NetworkEndpointsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ne.ref.InternalTokens()
}

func (ne NetworkEndpointsAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ne.ref.Append("ip_address"))
}

func (ne NetworkEndpointsAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ne.ref.Append("port"))
}

func (ne NetworkEndpointsAttributes) AccessConfig() terra.ListValue[NetworkEndpointsAccessConfigAttributes] {
	return terra.ReferenceAsList[NetworkEndpointsAccessConfigAttributes](ne.ref.Append("access_config"))
}

type NetworkEndpointsAccessConfigAttributes struct {
	ref terra.Reference
}

func (ac NetworkEndpointsAccessConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac NetworkEndpointsAccessConfigAttributes) InternalWithRef(ref terra.Reference) NetworkEndpointsAccessConfigAttributes {
	return NetworkEndpointsAccessConfigAttributes{ref: ref}
}

func (ac NetworkEndpointsAccessConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac NetworkEndpointsAccessConfigAttributes) ExternalIp() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("external_ip"))
}

type SymptomsAttributes struct {
	ref terra.Reference
}

func (s SymptomsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SymptomsAttributes) InternalWithRef(ref terra.Reference) SymptomsAttributes {
	return SymptomsAttributes{ref: ref}
}

func (s SymptomsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SymptomsAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("create_time"))
}

func (s SymptomsAttributes) Details() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("details"))
}

func (s SymptomsAttributes) SymptomType() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("symptom_type"))
}

func (s SymptomsAttributes) WorkerId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("worker_id"))
}

type AcceleratorConfigAttributes struct {
	ref terra.Reference
}

func (ac AcceleratorConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AcceleratorConfigAttributes) InternalWithRef(ref terra.Reference) AcceleratorConfigAttributes {
	return AcceleratorConfigAttributes{ref: ref}
}

func (ac AcceleratorConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AcceleratorConfigAttributes) Topology() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("topology"))
}

func (ac AcceleratorConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("type"))
}

type DataDisksAttributes struct {
	ref terra.Reference
}

func (dd DataDisksAttributes) InternalRef() (terra.Reference, error) {
	return dd.ref, nil
}

func (dd DataDisksAttributes) InternalWithRef(ref terra.Reference) DataDisksAttributes {
	return DataDisksAttributes{ref: ref}
}

func (dd DataDisksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dd.ref.InternalTokens()
}

func (dd DataDisksAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("mode"))
}

func (dd DataDisksAttributes) SourceDisk() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("source_disk"))
}

type NetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAttributes {
	return NetworkConfigAttributes{ref: ref}
}

func (nc NetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigAttributes) CanIpForward() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("can_ip_forward"))
}

func (nc NetworkConfigAttributes) EnableExternalIps() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("enable_external_ips"))
}

func (nc NetworkConfigAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("network"))
}

func (nc NetworkConfigAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("subnetwork"))
}

type SchedulingConfigAttributes struct {
	ref terra.Reference
}

func (sc SchedulingConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SchedulingConfigAttributes) InternalWithRef(ref terra.Reference) SchedulingConfigAttributes {
	return SchedulingConfigAttributes{ref: ref}
}

func (sc SchedulingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SchedulingConfigAttributes) Preemptible() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("preemptible"))
}

func (sc SchedulingConfigAttributes) Reserved() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("reserved"))
}

type ServiceAccountAttributes struct {
	ref terra.Reference
}

func (sa ServiceAccountAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa ServiceAccountAttributes) InternalWithRef(ref terra.Reference) ServiceAccountAttributes {
	return ServiceAccountAttributes{ref: ref}
}

func (sa ServiceAccountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa ServiceAccountAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("email"))
}

func (sa ServiceAccountAttributes) Scope() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sa.ref.Append("scope"))
}

type ShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic ShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic ShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) ShieldedInstanceConfigAttributes {
	return ShieldedInstanceConfigAttributes{ref: ref}
}

func (sic ShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic ShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type NetworkEndpointsState struct {
	IpAddress    string                              `json:"ip_address"`
	Port         float64                             `json:"port"`
	AccessConfig []NetworkEndpointsAccessConfigState `json:"access_config"`
}

type NetworkEndpointsAccessConfigState struct {
	ExternalIp string `json:"external_ip"`
}

type SymptomsState struct {
	CreateTime  string `json:"create_time"`
	Details     string `json:"details"`
	SymptomType string `json:"symptom_type"`
	WorkerId    string `json:"worker_id"`
}

type AcceleratorConfigState struct {
	Topology string `json:"topology"`
	Type     string `json:"type"`
}

type DataDisksState struct {
	Mode       string `json:"mode"`
	SourceDisk string `json:"source_disk"`
}

type NetworkConfigState struct {
	CanIpForward      bool   `json:"can_ip_forward"`
	EnableExternalIps bool   `json:"enable_external_ips"`
	Network           string `json:"network"`
	Subnetwork        string `json:"subnetwork"`
}

type SchedulingConfigState struct {
	Preemptible bool `json:"preemptible"`
	Reserved    bool `json:"reserved"`
}

type ServiceAccountState struct {
	Email string   `json:"email"`
	Scope []string `json:"scope"`
}

type ShieldedInstanceConfigState struct {
	EnableSecureBoot bool `json:"enable_secure_boot"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
