// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firebase_web_app

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firebase_web_app.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirebaseWebAppState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfwa *Resource) Type() string {
	return "google_firebase_web_app"
}

// LocalName returns the local name for [Resource].
func (gfwa *Resource) LocalName() string {
	return gfwa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfwa *Resource) Configuration() interface{} {
	return gfwa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfwa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfwa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfwa *Resource) Dependencies() terra.Dependencies {
	return gfwa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfwa *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfwa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfwa *Resource) Attributes() googleFirebaseWebAppAttributes {
	return googleFirebaseWebAppAttributes{ref: terra.ReferenceResource(gfwa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfwa *Resource) ImportState(state io.Reader) error {
	gfwa.state = &googleFirebaseWebAppState{}
	if err := json.NewDecoder(state).Decode(gfwa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfwa.Type(), gfwa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfwa *Resource) State() (*googleFirebaseWebAppState, bool) {
	return gfwa.state, gfwa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfwa *Resource) StateMust() *googleFirebaseWebAppState {
	if gfwa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfwa.Type(), gfwa.LocalName()))
	}
	return gfwa.state
}

// Args contains the configurations for google_firebase_web_app.
type Args struct {
	// ApiKeyId: string, optional
	ApiKeyId terra.StringValue `hcl:"api_key_id,attr"`
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirebaseWebAppAttributes struct {
	ref terra.Reference
}

// ApiKeyId returns a reference to field api_key_id of google_firebase_web_app.
func (gfwa googleFirebaseWebAppAttributes) ApiKeyId() terra.StringValue {
	return terra.ReferenceAsString(gfwa.ref.Append("api_key_id"))
}

// AppId returns a reference to field app_id of google_firebase_web_app.
func (gfwa googleFirebaseWebAppAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(gfwa.ref.Append("app_id"))
}

// AppUrls returns a reference to field app_urls of google_firebase_web_app.
func (gfwa googleFirebaseWebAppAttributes) AppUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gfwa.ref.Append("app_urls"))
}

// DeletionPolicy returns a reference to field deletion_policy of google_firebase_web_app.
func (gfwa googleFirebaseWebAppAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(gfwa.ref.Append("deletion_policy"))
}

// DisplayName returns a reference to field display_name of google_firebase_web_app.
func (gfwa googleFirebaseWebAppAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gfwa.ref.Append("display_name"))
}

// Id returns a reference to field id of google_firebase_web_app.
func (gfwa googleFirebaseWebAppAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfwa.ref.Append("id"))
}

// Name returns a reference to field name of google_firebase_web_app.
func (gfwa googleFirebaseWebAppAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfwa.ref.Append("name"))
}

// Project returns a reference to field project of google_firebase_web_app.
func (gfwa googleFirebaseWebAppAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfwa.ref.Append("project"))
}

func (gfwa googleFirebaseWebAppAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfwa.ref.Append("timeouts"))
}

type googleFirebaseWebAppState struct {
	ApiKeyId       string         `json:"api_key_id"`
	AppId          string         `json:"app_id"`
	AppUrls        []string       `json:"app_urls"`
	DeletionPolicy string         `json:"deletion_policy"`
	DisplayName    string         `json:"display_name"`
	Id             string         `json:"id"`
	Name           string         `json:"name"`
	Project        string         `json:"project"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
