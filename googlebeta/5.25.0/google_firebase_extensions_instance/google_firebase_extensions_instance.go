// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firebase_extensions_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firebase_extensions_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirebaseExtensionsInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfei *Resource) Type() string {
	return "google_firebase_extensions_instance"
}

// LocalName returns the local name for [Resource].
func (gfei *Resource) LocalName() string {
	return gfei.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfei *Resource) Configuration() interface{} {
	return gfei.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfei *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfei)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfei *Resource) Dependencies() terra.Dependencies {
	return gfei.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfei *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfei.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfei *Resource) Attributes() googleFirebaseExtensionsInstanceAttributes {
	return googleFirebaseExtensionsInstanceAttributes{ref: terra.ReferenceResource(gfei)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfei *Resource) ImportState(state io.Reader) error {
	gfei.state = &googleFirebaseExtensionsInstanceState{}
	if err := json.NewDecoder(state).Decode(gfei.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfei.Type(), gfei.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfei *Resource) State() (*googleFirebaseExtensionsInstanceState, bool) {
	return gfei.state, gfei.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfei *Resource) StateMust() *googleFirebaseExtensionsInstanceState {
	if gfei.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfei.Type(), gfei.LocalName()))
	}
	return gfei.state
}

// Args contains the configurations for google_firebase_extensions_instance.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Config: required
	Config *Config `hcl:"config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirebaseExtensionsInstanceAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_firebase_extensions_instance.
func (gfei googleFirebaseExtensionsInstanceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gfei.ref.Append("create_time"))
}

// Etag returns a reference to field etag of google_firebase_extensions_instance.
func (gfei googleFirebaseExtensionsInstanceAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gfei.ref.Append("etag"))
}

// Id returns a reference to field id of google_firebase_extensions_instance.
func (gfei googleFirebaseExtensionsInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfei.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of google_firebase_extensions_instance.
func (gfei googleFirebaseExtensionsInstanceAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(gfei.ref.Append("instance_id"))
}

// LastOperationName returns a reference to field last_operation_name of google_firebase_extensions_instance.
func (gfei googleFirebaseExtensionsInstanceAttributes) LastOperationName() terra.StringValue {
	return terra.ReferenceAsString(gfei.ref.Append("last_operation_name"))
}

// LastOperationType returns a reference to field last_operation_type of google_firebase_extensions_instance.
func (gfei googleFirebaseExtensionsInstanceAttributes) LastOperationType() terra.StringValue {
	return terra.ReferenceAsString(gfei.ref.Append("last_operation_type"))
}

// Name returns a reference to field name of google_firebase_extensions_instance.
func (gfei googleFirebaseExtensionsInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfei.ref.Append("name"))
}

// Project returns a reference to field project of google_firebase_extensions_instance.
func (gfei googleFirebaseExtensionsInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfei.ref.Append("project"))
}

// ServiceAccountEmail returns a reference to field service_account_email of google_firebase_extensions_instance.
func (gfei googleFirebaseExtensionsInstanceAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(gfei.ref.Append("service_account_email"))
}

// State returns a reference to field state of google_firebase_extensions_instance.
func (gfei googleFirebaseExtensionsInstanceAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gfei.ref.Append("state"))
}

// UpdateTime returns a reference to field update_time of google_firebase_extensions_instance.
func (gfei googleFirebaseExtensionsInstanceAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gfei.ref.Append("update_time"))
}

func (gfei googleFirebaseExtensionsInstanceAttributes) ErrorStatus() terra.ListValue[ErrorStatusAttributes] {
	return terra.ReferenceAsList[ErrorStatusAttributes](gfei.ref.Append("error_status"))
}

func (gfei googleFirebaseExtensionsInstanceAttributes) RuntimeData() terra.ListValue[RuntimeDataAttributes] {
	return terra.ReferenceAsList[RuntimeDataAttributes](gfei.ref.Append("runtime_data"))
}

func (gfei googleFirebaseExtensionsInstanceAttributes) Config() terra.ListValue[ConfigAttributes] {
	return terra.ReferenceAsList[ConfigAttributes](gfei.ref.Append("config"))
}

func (gfei googleFirebaseExtensionsInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfei.ref.Append("timeouts"))
}

type googleFirebaseExtensionsInstanceState struct {
	CreateTime          string             `json:"create_time"`
	Etag                string             `json:"etag"`
	Id                  string             `json:"id"`
	InstanceId          string             `json:"instance_id"`
	LastOperationName   string             `json:"last_operation_name"`
	LastOperationType   string             `json:"last_operation_type"`
	Name                string             `json:"name"`
	Project             string             `json:"project"`
	ServiceAccountEmail string             `json:"service_account_email"`
	State               string             `json:"state"`
	UpdateTime          string             `json:"update_time"`
	ErrorStatus         []ErrorStatusState `json:"error_status"`
	RuntimeData         []RuntimeDataState `json:"runtime_data"`
	Config              []ConfigState      `json:"config"`
	Timeouts            *TimeoutsState     `json:"timeouts"`
}
