// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_data_catalog_tag

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_data_catalog_tag.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataCatalogTagState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdct *Resource) Type() string {
	return "google_data_catalog_tag"
}

// LocalName returns the local name for [Resource].
func (gdct *Resource) LocalName() string {
	return gdct.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdct *Resource) Configuration() interface{} {
	return gdct.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdct *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdct)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdct *Resource) Dependencies() terra.Dependencies {
	return gdct.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdct *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdct.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdct *Resource) Attributes() googleDataCatalogTagAttributes {
	return googleDataCatalogTagAttributes{ref: terra.ReferenceResource(gdct)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdct *Resource) ImportState(state io.Reader) error {
	gdct.state = &googleDataCatalogTagState{}
	if err := json.NewDecoder(state).Decode(gdct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdct.Type(), gdct.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdct *Resource) State() (*googleDataCatalogTagState, bool) {
	return gdct.state, gdct.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdct *Resource) StateMust() *googleDataCatalogTagState {
	if gdct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdct.Type(), gdct.LocalName()))
	}
	return gdct.state
}

// Args contains the configurations for google_data_catalog_tag.
type Args struct {
	// Column: string, optional
	Column terra.StringValue `hcl:"column,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, optional
	Parent terra.StringValue `hcl:"parent,attr"`
	// Template: string, required
	Template terra.StringValue `hcl:"template,attr" validate:"required"`
	// Fields: min=1
	Fields []Fields `hcl:"fields,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDataCatalogTagAttributes struct {
	ref terra.Reference
}

// Column returns a reference to field column of google_data_catalog_tag.
func (gdct googleDataCatalogTagAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(gdct.ref.Append("column"))
}

// Id returns a reference to field id of google_data_catalog_tag.
func (gdct googleDataCatalogTagAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdct.ref.Append("id"))
}

// Name returns a reference to field name of google_data_catalog_tag.
func (gdct googleDataCatalogTagAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdct.ref.Append("name"))
}

// Parent returns a reference to field parent of google_data_catalog_tag.
func (gdct googleDataCatalogTagAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gdct.ref.Append("parent"))
}

// Template returns a reference to field template of google_data_catalog_tag.
func (gdct googleDataCatalogTagAttributes) Template() terra.StringValue {
	return terra.ReferenceAsString(gdct.ref.Append("template"))
}

// TemplateDisplayname returns a reference to field template_displayname of google_data_catalog_tag.
func (gdct googleDataCatalogTagAttributes) TemplateDisplayname() terra.StringValue {
	return terra.ReferenceAsString(gdct.ref.Append("template_displayname"))
}

func (gdct googleDataCatalogTagAttributes) Fields() terra.SetValue[FieldsAttributes] {
	return terra.ReferenceAsSet[FieldsAttributes](gdct.ref.Append("fields"))
}

func (gdct googleDataCatalogTagAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdct.ref.Append("timeouts"))
}

type googleDataCatalogTagState struct {
	Column              string         `json:"column"`
	Id                  string         `json:"id"`
	Name                string         `json:"name"`
	Parent              string         `json:"parent"`
	Template            string         `json:"template"`
	TemplateDisplayname string         `json:"template_displayname"`
	Fields              []FieldsState  `json:"fields"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
