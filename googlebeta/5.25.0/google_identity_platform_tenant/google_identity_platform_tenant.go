// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_identity_platform_tenant

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_identity_platform_tenant.
type Resource struct {
	Name      string
	Args      Args
	state     *googleIdentityPlatformTenantState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gipt *Resource) Type() string {
	return "google_identity_platform_tenant"
}

// LocalName returns the local name for [Resource].
func (gipt *Resource) LocalName() string {
	return gipt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gipt *Resource) Configuration() interface{} {
	return gipt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gipt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gipt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gipt *Resource) Dependencies() terra.Dependencies {
	return gipt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gipt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gipt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gipt *Resource) Attributes() googleIdentityPlatformTenantAttributes {
	return googleIdentityPlatformTenantAttributes{ref: terra.ReferenceResource(gipt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gipt *Resource) ImportState(state io.Reader) error {
	gipt.state = &googleIdentityPlatformTenantState{}
	if err := json.NewDecoder(state).Decode(gipt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gipt.Type(), gipt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gipt *Resource) State() (*googleIdentityPlatformTenantState, bool) {
	return gipt.state, gipt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gipt *Resource) StateMust() *googleIdentityPlatformTenantState {
	if gipt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gipt.Type(), gipt.LocalName()))
	}
	return gipt.state
}

// Args contains the configurations for google_identity_platform_tenant.
type Args struct {
	// AllowPasswordSignup: bool, optional
	AllowPasswordSignup terra.BoolValue `hcl:"allow_password_signup,attr"`
	// DisableAuth: bool, optional
	DisableAuth terra.BoolValue `hcl:"disable_auth,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// EnableEmailLinkSignin: bool, optional
	EnableEmailLinkSignin terra.BoolValue `hcl:"enable_email_link_signin,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleIdentityPlatformTenantAttributes struct {
	ref terra.Reference
}

// AllowPasswordSignup returns a reference to field allow_password_signup of google_identity_platform_tenant.
func (gipt googleIdentityPlatformTenantAttributes) AllowPasswordSignup() terra.BoolValue {
	return terra.ReferenceAsBool(gipt.ref.Append("allow_password_signup"))
}

// DisableAuth returns a reference to field disable_auth of google_identity_platform_tenant.
func (gipt googleIdentityPlatformTenantAttributes) DisableAuth() terra.BoolValue {
	return terra.ReferenceAsBool(gipt.ref.Append("disable_auth"))
}

// DisplayName returns a reference to field display_name of google_identity_platform_tenant.
func (gipt googleIdentityPlatformTenantAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gipt.ref.Append("display_name"))
}

// EnableEmailLinkSignin returns a reference to field enable_email_link_signin of google_identity_platform_tenant.
func (gipt googleIdentityPlatformTenantAttributes) EnableEmailLinkSignin() terra.BoolValue {
	return terra.ReferenceAsBool(gipt.ref.Append("enable_email_link_signin"))
}

// Id returns a reference to field id of google_identity_platform_tenant.
func (gipt googleIdentityPlatformTenantAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gipt.ref.Append("id"))
}

// Name returns a reference to field name of google_identity_platform_tenant.
func (gipt googleIdentityPlatformTenantAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gipt.ref.Append("name"))
}

// Project returns a reference to field project of google_identity_platform_tenant.
func (gipt googleIdentityPlatformTenantAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gipt.ref.Append("project"))
}

func (gipt googleIdentityPlatformTenantAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gipt.ref.Append("timeouts"))
}

type googleIdentityPlatformTenantState struct {
	AllowPasswordSignup   bool           `json:"allow_password_signup"`
	DisableAuth           bool           `json:"disable_auth"`
	DisplayName           string         `json:"display_name"`
	EnableEmailLinkSignin bool           `json:"enable_email_link_signin"`
	Id                    string         `json:"id"`
	Name                  string         `json:"name"`
	Project               string         `json:"project"`
	Timeouts              *TimeoutsState `json:"timeouts"`
}
