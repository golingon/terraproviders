// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_project_usage_export_bucket

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_project_usage_export_bucket.
type Resource struct {
	Name      string
	Args      Args
	state     *googleProjectUsageExportBucketState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gpueb *Resource) Type() string {
	return "google_project_usage_export_bucket"
}

// LocalName returns the local name for [Resource].
func (gpueb *Resource) LocalName() string {
	return gpueb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gpueb *Resource) Configuration() interface{} {
	return gpueb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gpueb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gpueb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gpueb *Resource) Dependencies() terra.Dependencies {
	return gpueb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gpueb *Resource) LifecycleManagement() *terra.Lifecycle {
	return gpueb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gpueb *Resource) Attributes() googleProjectUsageExportBucketAttributes {
	return googleProjectUsageExportBucketAttributes{ref: terra.ReferenceResource(gpueb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gpueb *Resource) ImportState(state io.Reader) error {
	gpueb.state = &googleProjectUsageExportBucketState{}
	if err := json.NewDecoder(state).Decode(gpueb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gpueb.Type(), gpueb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gpueb *Resource) State() (*googleProjectUsageExportBucketState, bool) {
	return gpueb.state, gpueb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gpueb *Resource) StateMust() *googleProjectUsageExportBucketState {
	if gpueb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gpueb.Type(), gpueb.LocalName()))
	}
	return gpueb.state
}

// Args contains the configurations for google_project_usage_export_bucket.
type Args struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleProjectUsageExportBucketAttributes struct {
	ref terra.Reference
}

// BucketName returns a reference to field bucket_name of google_project_usage_export_bucket.
func (gpueb googleProjectUsageExportBucketAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(gpueb.ref.Append("bucket_name"))
}

// Id returns a reference to field id of google_project_usage_export_bucket.
func (gpueb googleProjectUsageExportBucketAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gpueb.ref.Append("id"))
}

// Prefix returns a reference to field prefix of google_project_usage_export_bucket.
func (gpueb googleProjectUsageExportBucketAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(gpueb.ref.Append("prefix"))
}

// Project returns a reference to field project of google_project_usage_export_bucket.
func (gpueb googleProjectUsageExportBucketAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gpueb.ref.Append("project"))
}

func (gpueb googleProjectUsageExportBucketAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gpueb.ref.Append("timeouts"))
}

type googleProjectUsageExportBucketState struct {
	BucketName string         `json:"bucket_name"`
	Id         string         `json:"id"`
	Prefix     string         `json:"prefix"`
	Project    string         `json:"project"`
	Timeouts   *TimeoutsState `json:"timeouts"`
}
