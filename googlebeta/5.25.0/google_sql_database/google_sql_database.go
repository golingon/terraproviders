// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_sql_database

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_sql_database.
type Resource struct {
	Name      string
	Args      Args
	state     *googleSqlDatabaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsd *Resource) Type() string {
	return "google_sql_database"
}

// LocalName returns the local name for [Resource].
func (gsd *Resource) LocalName() string {
	return gsd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsd *Resource) Configuration() interface{} {
	return gsd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsd *Resource) Dependencies() terra.Dependencies {
	return gsd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsd *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsd *Resource) Attributes() googleSqlDatabaseAttributes {
	return googleSqlDatabaseAttributes{ref: terra.ReferenceResource(gsd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsd *Resource) ImportState(state io.Reader) error {
	gsd.state = &googleSqlDatabaseState{}
	if err := json.NewDecoder(state).Decode(gsd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsd.Type(), gsd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsd *Resource) State() (*googleSqlDatabaseState, bool) {
	return gsd.state, gsd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsd *Resource) StateMust() *googleSqlDatabaseState {
	if gsd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsd.Type(), gsd.LocalName()))
	}
	return gsd.state
}

// Args contains the configurations for google_sql_database.
type Args struct {
	// Charset: string, optional
	Charset terra.StringValue `hcl:"charset,attr"`
	// Collation: string, optional
	Collation terra.StringValue `hcl:"collation,attr"`
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleSqlDatabaseAttributes struct {
	ref terra.Reference
}

// Charset returns a reference to field charset of google_sql_database.
func (gsd googleSqlDatabaseAttributes) Charset() terra.StringValue {
	return terra.ReferenceAsString(gsd.ref.Append("charset"))
}

// Collation returns a reference to field collation of google_sql_database.
func (gsd googleSqlDatabaseAttributes) Collation() terra.StringValue {
	return terra.ReferenceAsString(gsd.ref.Append("collation"))
}

// DeletionPolicy returns a reference to field deletion_policy of google_sql_database.
func (gsd googleSqlDatabaseAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(gsd.ref.Append("deletion_policy"))
}

// Id returns a reference to field id of google_sql_database.
func (gsd googleSqlDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsd.ref.Append("id"))
}

// Instance returns a reference to field instance of google_sql_database.
func (gsd googleSqlDatabaseAttributes) Instance() terra.StringValue {
	return terra.ReferenceAsString(gsd.ref.Append("instance"))
}

// Name returns a reference to field name of google_sql_database.
func (gsd googleSqlDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsd.ref.Append("name"))
}

// Project returns a reference to field project of google_sql_database.
func (gsd googleSqlDatabaseAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gsd.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_sql_database.
func (gsd googleSqlDatabaseAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gsd.ref.Append("self_link"))
}

func (gsd googleSqlDatabaseAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsd.ref.Append("timeouts"))
}

type googleSqlDatabaseState struct {
	Charset        string         `json:"charset"`
	Collation      string         `json:"collation"`
	DeletionPolicy string         `json:"deletion_policy"`
	Id             string         `json:"id"`
	Instance       string         `json:"instance"`
	Name           string         `json:"name"`
	Project        string         `json:"project"`
	SelfLink       string         `json:"self_link"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
