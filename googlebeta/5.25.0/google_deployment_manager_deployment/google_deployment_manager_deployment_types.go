// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_deployment_manager_deployment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Labels struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Target struct {
	// TargetConfig: required
	Config *TargetConfig `hcl:"config,block" validate:"required"`
	// TargetImports: min=0
	Imports []TargetImports `hcl:"imports,block" validate:"min=0"`
}

type TargetConfig struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
}

type TargetImports struct {
	// Content: string, optional
	Content terra.StringValue `hcl:"content,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type LabelsAttributes struct {
	ref terra.Reference
}

func (l LabelsAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LabelsAttributes) InternalWithRef(ref terra.Reference) LabelsAttributes {
	return LabelsAttributes{ref: ref}
}

func (l LabelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LabelsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("key"))
}

func (l LabelsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("value"))
}

type TargetAttributes struct {
	ref terra.Reference
}

func (t TargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TargetAttributes) InternalWithRef(ref terra.Reference) TargetAttributes {
	return TargetAttributes{ref: ref}
}

func (t TargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TargetAttributes) Config() terra.ListValue[TargetConfigAttributes] {
	return terra.ReferenceAsList[TargetConfigAttributes](t.ref.Append("config"))
}

func (t TargetAttributes) Imports() terra.ListValue[TargetImportsAttributes] {
	return terra.ReferenceAsList[TargetImportsAttributes](t.ref.Append("imports"))
}

type TargetConfigAttributes struct {
	ref terra.Reference
}

func (c TargetConfigAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c TargetConfigAttributes) InternalWithRef(ref terra.Reference) TargetConfigAttributes {
	return TargetConfigAttributes{ref: ref}
}

func (c TargetConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c TargetConfigAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("content"))
}

type TargetImportsAttributes struct {
	ref terra.Reference
}

func (i TargetImportsAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i TargetImportsAttributes) InternalWithRef(ref terra.Reference) TargetImportsAttributes {
	return TargetImportsAttributes{ref: ref}
}

func (i TargetImportsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i TargetImportsAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("content"))
}

func (i TargetImportsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type LabelsState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type TargetState struct {
	Config  []TargetConfigState  `json:"config"`
	Imports []TargetImportsState `json:"imports"`
}

type TargetConfigState struct {
	Content string `json:"content"`
}

type TargetImportsState struct {
	Content string `json:"content"`
	Name    string `json:"name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
