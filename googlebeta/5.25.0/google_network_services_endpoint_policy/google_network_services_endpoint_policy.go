// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_network_services_endpoint_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_network_services_endpoint_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleNetworkServicesEndpointPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gnsep *Resource) Type() string {
	return "google_network_services_endpoint_policy"
}

// LocalName returns the local name for [Resource].
func (gnsep *Resource) LocalName() string {
	return gnsep.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gnsep *Resource) Configuration() interface{} {
	return gnsep.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gnsep *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gnsep)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gnsep *Resource) Dependencies() terra.Dependencies {
	return gnsep.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gnsep *Resource) LifecycleManagement() *terra.Lifecycle {
	return gnsep.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gnsep *Resource) Attributes() googleNetworkServicesEndpointPolicyAttributes {
	return googleNetworkServicesEndpointPolicyAttributes{ref: terra.ReferenceResource(gnsep)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gnsep *Resource) ImportState(state io.Reader) error {
	gnsep.state = &googleNetworkServicesEndpointPolicyState{}
	if err := json.NewDecoder(state).Decode(gnsep.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gnsep.Type(), gnsep.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gnsep *Resource) State() (*googleNetworkServicesEndpointPolicyState, bool) {
	return gnsep.state, gnsep.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gnsep *Resource) StateMust() *googleNetworkServicesEndpointPolicyState {
	if gnsep.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gnsep.Type(), gnsep.LocalName()))
	}
	return gnsep.state
}

// Args contains the configurations for google_network_services_endpoint_policy.
type Args struct {
	// AuthorizationPolicy: string, optional
	AuthorizationPolicy terra.StringValue `hcl:"authorization_policy,attr"`
	// ClientTlsPolicy: string, optional
	ClientTlsPolicy terra.StringValue `hcl:"client_tls_policy,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServerTlsPolicy: string, optional
	ServerTlsPolicy terra.StringValue `hcl:"server_tls_policy,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// EndpointMatcher: required
	EndpointMatcher *EndpointMatcher `hcl:"endpoint_matcher,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// TrafficPortSelector: optional
	TrafficPortSelector *TrafficPortSelector `hcl:"traffic_port_selector,block"`
}

type googleNetworkServicesEndpointPolicyAttributes struct {
	ref terra.Reference
}

// AuthorizationPolicy returns a reference to field authorization_policy of google_network_services_endpoint_policy.
func (gnsep googleNetworkServicesEndpointPolicyAttributes) AuthorizationPolicy() terra.StringValue {
	return terra.ReferenceAsString(gnsep.ref.Append("authorization_policy"))
}

// ClientTlsPolicy returns a reference to field client_tls_policy of google_network_services_endpoint_policy.
func (gnsep googleNetworkServicesEndpointPolicyAttributes) ClientTlsPolicy() terra.StringValue {
	return terra.ReferenceAsString(gnsep.ref.Append("client_tls_policy"))
}

// CreateTime returns a reference to field create_time of google_network_services_endpoint_policy.
func (gnsep googleNetworkServicesEndpointPolicyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gnsep.ref.Append("create_time"))
}

// Description returns a reference to field description of google_network_services_endpoint_policy.
func (gnsep googleNetworkServicesEndpointPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gnsep.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_network_services_endpoint_policy.
func (gnsep googleNetworkServicesEndpointPolicyAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnsep.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_network_services_endpoint_policy.
func (gnsep googleNetworkServicesEndpointPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gnsep.ref.Append("id"))
}

// Labels returns a reference to field labels of google_network_services_endpoint_policy.
func (gnsep googleNetworkServicesEndpointPolicyAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnsep.ref.Append("labels"))
}

// Name returns a reference to field name of google_network_services_endpoint_policy.
func (gnsep googleNetworkServicesEndpointPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gnsep.ref.Append("name"))
}

// Project returns a reference to field project of google_network_services_endpoint_policy.
func (gnsep googleNetworkServicesEndpointPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gnsep.ref.Append("project"))
}

// ServerTlsPolicy returns a reference to field server_tls_policy of google_network_services_endpoint_policy.
func (gnsep googleNetworkServicesEndpointPolicyAttributes) ServerTlsPolicy() terra.StringValue {
	return terra.ReferenceAsString(gnsep.ref.Append("server_tls_policy"))
}

// TerraformLabels returns a reference to field terraform_labels of google_network_services_endpoint_policy.
func (gnsep googleNetworkServicesEndpointPolicyAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnsep.ref.Append("terraform_labels"))
}

// Type returns a reference to field type of google_network_services_endpoint_policy.
func (gnsep googleNetworkServicesEndpointPolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gnsep.ref.Append("type"))
}

// UpdateTime returns a reference to field update_time of google_network_services_endpoint_policy.
func (gnsep googleNetworkServicesEndpointPolicyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gnsep.ref.Append("update_time"))
}

func (gnsep googleNetworkServicesEndpointPolicyAttributes) EndpointMatcher() terra.ListValue[EndpointMatcherAttributes] {
	return terra.ReferenceAsList[EndpointMatcherAttributes](gnsep.ref.Append("endpoint_matcher"))
}

func (gnsep googleNetworkServicesEndpointPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gnsep.ref.Append("timeouts"))
}

func (gnsep googleNetworkServicesEndpointPolicyAttributes) TrafficPortSelector() terra.ListValue[TrafficPortSelectorAttributes] {
	return terra.ReferenceAsList[TrafficPortSelectorAttributes](gnsep.ref.Append("traffic_port_selector"))
}

type googleNetworkServicesEndpointPolicyState struct {
	AuthorizationPolicy string                     `json:"authorization_policy"`
	ClientTlsPolicy     string                     `json:"client_tls_policy"`
	CreateTime          string                     `json:"create_time"`
	Description         string                     `json:"description"`
	EffectiveLabels     map[string]string          `json:"effective_labels"`
	Id                  string                     `json:"id"`
	Labels              map[string]string          `json:"labels"`
	Name                string                     `json:"name"`
	Project             string                     `json:"project"`
	ServerTlsPolicy     string                     `json:"server_tls_policy"`
	TerraformLabels     map[string]string          `json:"terraform_labels"`
	Type                string                     `json:"type"`
	UpdateTime          string                     `json:"update_time"`
	EndpointMatcher     []EndpointMatcherState     `json:"endpoint_matcher"`
	Timeouts            *TimeoutsState             `json:"timeouts"`
	TrafficPortSelector []TrafficPortSelectorState `json:"traffic_port_selector"`
}
