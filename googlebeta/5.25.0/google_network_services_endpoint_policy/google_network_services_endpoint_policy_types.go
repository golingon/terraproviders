// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_network_services_endpoint_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EndpointMatcher struct {
	// EndpointMatcherMetadataLabelMatcher: required
	MetadataLabelMatcher *EndpointMatcherMetadataLabelMatcher `hcl:"metadata_label_matcher,block" validate:"required"`
}

type EndpointMatcherMetadataLabelMatcher struct {
	// MetadataLabelMatchCriteria: string, required
	MetadataLabelMatchCriteria terra.StringValue `hcl:"metadata_label_match_criteria,attr" validate:"required"`
	// EndpointMatcherMetadataLabelMatcherMetadataLabels: min=0
	MetadataLabels []EndpointMatcherMetadataLabelMatcherMetadataLabels `hcl:"metadata_labels,block" validate:"min=0"`
}

type EndpointMatcherMetadataLabelMatcherMetadataLabels struct {
	// LabelName: string, required
	LabelName terra.StringValue `hcl:"label_name,attr" validate:"required"`
	// LabelValue: string, required
	LabelValue terra.StringValue `hcl:"label_value,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type TrafficPortSelector struct {
	// Ports: list of string, required
	Ports terra.ListValue[terra.StringValue] `hcl:"ports,attr" validate:"required"`
}

type EndpointMatcherAttributes struct {
	ref terra.Reference
}

func (em EndpointMatcherAttributes) InternalRef() (terra.Reference, error) {
	return em.ref, nil
}

func (em EndpointMatcherAttributes) InternalWithRef(ref terra.Reference) EndpointMatcherAttributes {
	return EndpointMatcherAttributes{ref: ref}
}

func (em EndpointMatcherAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return em.ref.InternalTokens()
}

func (em EndpointMatcherAttributes) MetadataLabelMatcher() terra.ListValue[EndpointMatcherMetadataLabelMatcherAttributes] {
	return terra.ReferenceAsList[EndpointMatcherMetadataLabelMatcherAttributes](em.ref.Append("metadata_label_matcher"))
}

type EndpointMatcherMetadataLabelMatcherAttributes struct {
	ref terra.Reference
}

func (mlm EndpointMatcherMetadataLabelMatcherAttributes) InternalRef() (terra.Reference, error) {
	return mlm.ref, nil
}

func (mlm EndpointMatcherMetadataLabelMatcherAttributes) InternalWithRef(ref terra.Reference) EndpointMatcherMetadataLabelMatcherAttributes {
	return EndpointMatcherMetadataLabelMatcherAttributes{ref: ref}
}

func (mlm EndpointMatcherMetadataLabelMatcherAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mlm.ref.InternalTokens()
}

func (mlm EndpointMatcherMetadataLabelMatcherAttributes) MetadataLabelMatchCriteria() terra.StringValue {
	return terra.ReferenceAsString(mlm.ref.Append("metadata_label_match_criteria"))
}

func (mlm EndpointMatcherMetadataLabelMatcherAttributes) MetadataLabels() terra.ListValue[EndpointMatcherMetadataLabelMatcherMetadataLabelsAttributes] {
	return terra.ReferenceAsList[EndpointMatcherMetadataLabelMatcherMetadataLabelsAttributes](mlm.ref.Append("metadata_labels"))
}

type EndpointMatcherMetadataLabelMatcherMetadataLabelsAttributes struct {
	ref terra.Reference
}

func (ml EndpointMatcherMetadataLabelMatcherMetadataLabelsAttributes) InternalRef() (terra.Reference, error) {
	return ml.ref, nil
}

func (ml EndpointMatcherMetadataLabelMatcherMetadataLabelsAttributes) InternalWithRef(ref terra.Reference) EndpointMatcherMetadataLabelMatcherMetadataLabelsAttributes {
	return EndpointMatcherMetadataLabelMatcherMetadataLabelsAttributes{ref: ref}
}

func (ml EndpointMatcherMetadataLabelMatcherMetadataLabelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ml.ref.InternalTokens()
}

func (ml EndpointMatcherMetadataLabelMatcherMetadataLabelsAttributes) LabelName() terra.StringValue {
	return terra.ReferenceAsString(ml.ref.Append("label_name"))
}

func (ml EndpointMatcherMetadataLabelMatcherMetadataLabelsAttributes) LabelValue() terra.StringValue {
	return terra.ReferenceAsString(ml.ref.Append("label_value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TrafficPortSelectorAttributes struct {
	ref terra.Reference
}

func (tps TrafficPortSelectorAttributes) InternalRef() (terra.Reference, error) {
	return tps.ref, nil
}

func (tps TrafficPortSelectorAttributes) InternalWithRef(ref terra.Reference) TrafficPortSelectorAttributes {
	return TrafficPortSelectorAttributes{ref: ref}
}

func (tps TrafficPortSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tps.ref.InternalTokens()
}

func (tps TrafficPortSelectorAttributes) Ports() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tps.ref.Append("ports"))
}

type EndpointMatcherState struct {
	MetadataLabelMatcher []EndpointMatcherMetadataLabelMatcherState `json:"metadata_label_matcher"`
}

type EndpointMatcherMetadataLabelMatcherState struct {
	MetadataLabelMatchCriteria string                                                   `json:"metadata_label_match_criteria"`
	MetadataLabels             []EndpointMatcherMetadataLabelMatcherMetadataLabelsState `json:"metadata_labels"`
}

type EndpointMatcherMetadataLabelMatcherMetadataLabelsState struct {
	LabelName  string `json:"label_name"`
	LabelValue string `json:"label_value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TrafficPortSelectorState struct {
	Ports []string `json:"ports"`
}
