// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_logging_folder_settings

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_logging_folder_settings.
type Resource struct {
	Name      string
	Args      Args
	state     *googleLoggingFolderSettingsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (glfs *Resource) Type() string {
	return "google_logging_folder_settings"
}

// LocalName returns the local name for [Resource].
func (glfs *Resource) LocalName() string {
	return glfs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (glfs *Resource) Configuration() interface{} {
	return glfs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (glfs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(glfs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (glfs *Resource) Dependencies() terra.Dependencies {
	return glfs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (glfs *Resource) LifecycleManagement() *terra.Lifecycle {
	return glfs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (glfs *Resource) Attributes() googleLoggingFolderSettingsAttributes {
	return googleLoggingFolderSettingsAttributes{ref: terra.ReferenceResource(glfs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (glfs *Resource) ImportState(state io.Reader) error {
	glfs.state = &googleLoggingFolderSettingsState{}
	if err := json.NewDecoder(state).Decode(glfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", glfs.Type(), glfs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (glfs *Resource) State() (*googleLoggingFolderSettingsState, bool) {
	return glfs.state, glfs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (glfs *Resource) StateMust() *googleLoggingFolderSettingsState {
	if glfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", glfs.Type(), glfs.LocalName()))
	}
	return glfs.state
}

// Args contains the configurations for google_logging_folder_settings.
type Args struct {
	// DisableDefaultSink: bool, optional
	DisableDefaultSink terra.BoolValue `hcl:"disable_default_sink,attr"`
	// Folder: string, required
	Folder terra.StringValue `hcl:"folder,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// StorageLocation: string, optional
	StorageLocation terra.StringValue `hcl:"storage_location,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleLoggingFolderSettingsAttributes struct {
	ref terra.Reference
}

// DisableDefaultSink returns a reference to field disable_default_sink of google_logging_folder_settings.
func (glfs googleLoggingFolderSettingsAttributes) DisableDefaultSink() terra.BoolValue {
	return terra.ReferenceAsBool(glfs.ref.Append("disable_default_sink"))
}

// Folder returns a reference to field folder of google_logging_folder_settings.
func (glfs googleLoggingFolderSettingsAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(glfs.ref.Append("folder"))
}

// Id returns a reference to field id of google_logging_folder_settings.
func (glfs googleLoggingFolderSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(glfs.ref.Append("id"))
}

// KmsKeyName returns a reference to field kms_key_name of google_logging_folder_settings.
func (glfs googleLoggingFolderSettingsAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(glfs.ref.Append("kms_key_name"))
}

// KmsServiceAccountId returns a reference to field kms_service_account_id of google_logging_folder_settings.
func (glfs googleLoggingFolderSettingsAttributes) KmsServiceAccountId() terra.StringValue {
	return terra.ReferenceAsString(glfs.ref.Append("kms_service_account_id"))
}

// LoggingServiceAccountId returns a reference to field logging_service_account_id of google_logging_folder_settings.
func (glfs googleLoggingFolderSettingsAttributes) LoggingServiceAccountId() terra.StringValue {
	return terra.ReferenceAsString(glfs.ref.Append("logging_service_account_id"))
}

// Name returns a reference to field name of google_logging_folder_settings.
func (glfs googleLoggingFolderSettingsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(glfs.ref.Append("name"))
}

// StorageLocation returns a reference to field storage_location of google_logging_folder_settings.
func (glfs googleLoggingFolderSettingsAttributes) StorageLocation() terra.StringValue {
	return terra.ReferenceAsString(glfs.ref.Append("storage_location"))
}

func (glfs googleLoggingFolderSettingsAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](glfs.ref.Append("timeouts"))
}

type googleLoggingFolderSettingsState struct {
	DisableDefaultSink      bool           `json:"disable_default_sink"`
	Folder                  string         `json:"folder"`
	Id                      string         `json:"id"`
	KmsKeyName              string         `json:"kms_key_name"`
	KmsServiceAccountId     string         `json:"kms_service_account_id"`
	LoggingServiceAccountId string         `json:"logging_service_account_id"`
	Name                    string         `json:"name"`
	StorageLocation         string         `json:"storage_location"`
	Timeouts                *TimeoutsState `json:"timeouts"`
}
