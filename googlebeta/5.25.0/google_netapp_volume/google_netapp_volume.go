// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_netapp_volume

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_netapp_volume.
type Resource struct {
	Name      string
	Args      Args
	state     *googleNetappVolumeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gnv *Resource) Type() string {
	return "google_netapp_volume"
}

// LocalName returns the local name for [Resource].
func (gnv *Resource) LocalName() string {
	return gnv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gnv *Resource) Configuration() interface{} {
	return gnv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gnv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gnv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gnv *Resource) Dependencies() terra.Dependencies {
	return gnv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gnv *Resource) LifecycleManagement() *terra.Lifecycle {
	return gnv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gnv *Resource) Attributes() googleNetappVolumeAttributes {
	return googleNetappVolumeAttributes{ref: terra.ReferenceResource(gnv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gnv *Resource) ImportState(state io.Reader) error {
	gnv.state = &googleNetappVolumeState{}
	if err := json.NewDecoder(state).Decode(gnv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gnv.Type(), gnv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gnv *Resource) State() (*googleNetappVolumeState, bool) {
	return gnv.state, gnv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gnv *Resource) StateMust() *googleNetappVolumeState {
	if gnv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gnv.Type(), gnv.LocalName()))
	}
	return gnv.state
}

// Args contains the configurations for google_netapp_volume.
type Args struct {
	// CapacityGib: string, required
	CapacityGib terra.StringValue `hcl:"capacity_gib,attr" validate:"required"`
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KerberosEnabled: bool, optional
	KerberosEnabled terra.BoolValue `hcl:"kerberos_enabled,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Protocols: list of string, required
	Protocols terra.ListValue[terra.StringValue] `hcl:"protocols,attr" validate:"required"`
	// RestrictedActions: list of string, optional
	RestrictedActions terra.ListValue[terra.StringValue] `hcl:"restricted_actions,attr"`
	// SecurityStyle: string, optional
	SecurityStyle terra.StringValue `hcl:"security_style,attr"`
	// ShareName: string, required
	ShareName terra.StringValue `hcl:"share_name,attr" validate:"required"`
	// SmbSettings: list of string, optional
	SmbSettings terra.ListValue[terra.StringValue] `hcl:"smb_settings,attr"`
	// SnapshotDirectory: bool, optional
	SnapshotDirectory terra.BoolValue `hcl:"snapshot_directory,attr"`
	// StoragePool: string, required
	StoragePool terra.StringValue `hcl:"storage_pool,attr" validate:"required"`
	// UnixPermissions: string, optional
	UnixPermissions terra.StringValue `hcl:"unix_permissions,attr"`
	// ExportPolicy: optional
	ExportPolicy *ExportPolicy `hcl:"export_policy,block"`
	// RestoreParameters: optional
	RestoreParameters *RestoreParameters `hcl:"restore_parameters,block"`
	// SnapshotPolicy: optional
	SnapshotPolicy *SnapshotPolicy `hcl:"snapshot_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleNetappVolumeAttributes struct {
	ref terra.Reference
}

// ActiveDirectory returns a reference to field active_directory of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) ActiveDirectory() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("active_directory"))
}

// CapacityGib returns a reference to field capacity_gib of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) CapacityGib() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("capacity_gib"))
}

// CreateTime returns a reference to field create_time of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("create_time"))
}

// DeletionPolicy returns a reference to field deletion_policy of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("deletion_policy"))
}

// Description returns a reference to field description of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnv.ref.Append("effective_labels"))
}

// EncryptionType returns a reference to field encryption_type of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("encryption_type"))
}

// HasReplication returns a reference to field has_replication of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) HasReplication() terra.BoolValue {
	return terra.ReferenceAsBool(gnv.ref.Append("has_replication"))
}

// Id returns a reference to field id of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("id"))
}

// KerberosEnabled returns a reference to field kerberos_enabled of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) KerberosEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(gnv.ref.Append("kerberos_enabled"))
}

// KmsConfig returns a reference to field kms_config of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) KmsConfig() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("kms_config"))
}

// Labels returns a reference to field labels of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnv.ref.Append("labels"))
}

// LdapEnabled returns a reference to field ldap_enabled of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) LdapEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(gnv.ref.Append("ldap_enabled"))
}

// Location returns a reference to field location of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("location"))
}

// Name returns a reference to field name of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("name"))
}

// Network returns a reference to field network of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("network"))
}

// Project returns a reference to field project of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("project"))
}

// Protocols returns a reference to field protocols of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) Protocols() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gnv.ref.Append("protocols"))
}

// PsaRange returns a reference to field psa_range of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) PsaRange() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("psa_range"))
}

// RestrictedActions returns a reference to field restricted_actions of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) RestrictedActions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gnv.ref.Append("restricted_actions"))
}

// SecurityStyle returns a reference to field security_style of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) SecurityStyle() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("security_style"))
}

// ServiceLevel returns a reference to field service_level of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) ServiceLevel() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("service_level"))
}

// ShareName returns a reference to field share_name of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) ShareName() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("share_name"))
}

// SmbSettings returns a reference to field smb_settings of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) SmbSettings() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gnv.ref.Append("smb_settings"))
}

// SnapshotDirectory returns a reference to field snapshot_directory of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) SnapshotDirectory() terra.BoolValue {
	return terra.ReferenceAsBool(gnv.ref.Append("snapshot_directory"))
}

// State returns a reference to field state of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("state"))
}

// StateDetails returns a reference to field state_details of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) StateDetails() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("state_details"))
}

// StoragePool returns a reference to field storage_pool of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) StoragePool() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("storage_pool"))
}

// TerraformLabels returns a reference to field terraform_labels of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnv.ref.Append("terraform_labels"))
}

// UnixPermissions returns a reference to field unix_permissions of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) UnixPermissions() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("unix_permissions"))
}

// UsedGib returns a reference to field used_gib of google_netapp_volume.
func (gnv googleNetappVolumeAttributes) UsedGib() terra.StringValue {
	return terra.ReferenceAsString(gnv.ref.Append("used_gib"))
}

func (gnv googleNetappVolumeAttributes) MountOptions() terra.ListValue[MountOptionsAttributes] {
	return terra.ReferenceAsList[MountOptionsAttributes](gnv.ref.Append("mount_options"))
}

func (gnv googleNetappVolumeAttributes) ExportPolicy() terra.ListValue[ExportPolicyAttributes] {
	return terra.ReferenceAsList[ExportPolicyAttributes](gnv.ref.Append("export_policy"))
}

func (gnv googleNetappVolumeAttributes) RestoreParameters() terra.ListValue[RestoreParametersAttributes] {
	return terra.ReferenceAsList[RestoreParametersAttributes](gnv.ref.Append("restore_parameters"))
}

func (gnv googleNetappVolumeAttributes) SnapshotPolicy() terra.ListValue[SnapshotPolicyAttributes] {
	return terra.ReferenceAsList[SnapshotPolicyAttributes](gnv.ref.Append("snapshot_policy"))
}

func (gnv googleNetappVolumeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gnv.ref.Append("timeouts"))
}

type googleNetappVolumeState struct {
	ActiveDirectory   string                   `json:"active_directory"`
	CapacityGib       string                   `json:"capacity_gib"`
	CreateTime        string                   `json:"create_time"`
	DeletionPolicy    string                   `json:"deletion_policy"`
	Description       string                   `json:"description"`
	EffectiveLabels   map[string]string        `json:"effective_labels"`
	EncryptionType    string                   `json:"encryption_type"`
	HasReplication    bool                     `json:"has_replication"`
	Id                string                   `json:"id"`
	KerberosEnabled   bool                     `json:"kerberos_enabled"`
	KmsConfig         string                   `json:"kms_config"`
	Labels            map[string]string        `json:"labels"`
	LdapEnabled       bool                     `json:"ldap_enabled"`
	Location          string                   `json:"location"`
	Name              string                   `json:"name"`
	Network           string                   `json:"network"`
	Project           string                   `json:"project"`
	Protocols         []string                 `json:"protocols"`
	PsaRange          string                   `json:"psa_range"`
	RestrictedActions []string                 `json:"restricted_actions"`
	SecurityStyle     string                   `json:"security_style"`
	ServiceLevel      string                   `json:"service_level"`
	ShareName         string                   `json:"share_name"`
	SmbSettings       []string                 `json:"smb_settings"`
	SnapshotDirectory bool                     `json:"snapshot_directory"`
	State             string                   `json:"state"`
	StateDetails      string                   `json:"state_details"`
	StoragePool       string                   `json:"storage_pool"`
	TerraformLabels   map[string]string        `json:"terraform_labels"`
	UnixPermissions   string                   `json:"unix_permissions"`
	UsedGib           string                   `json:"used_gib"`
	MountOptions      []MountOptionsState      `json:"mount_options"`
	ExportPolicy      []ExportPolicyState      `json:"export_policy"`
	RestoreParameters []RestoreParametersState `json:"restore_parameters"`
	SnapshotPolicy    []SnapshotPolicyState    `json:"snapshot_policy"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
