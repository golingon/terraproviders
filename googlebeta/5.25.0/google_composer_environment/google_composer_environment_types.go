// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_composer_environment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Config struct {
	// EnablePrivateBuildsOnly: bool, optional
	EnablePrivateBuildsOnly terra.BoolValue `hcl:"enable_private_builds_only,attr"`
	// EnablePrivateEnvironment: bool, optional
	EnablePrivateEnvironment terra.BoolValue `hcl:"enable_private_environment,attr"`
	// EnvironmentSize: string, optional
	EnvironmentSize terra.StringValue `hcl:"environment_size,attr"`
	// NodeCount: number, optional
	NodeCount terra.NumberValue `hcl:"node_count,attr"`
	// ResilienceMode: string, optional
	ResilienceMode terra.StringValue `hcl:"resilience_mode,attr"`
	// ConfigDataRetentionConfig: optional
	DataRetentionConfig *ConfigDataRetentionConfig `hcl:"data_retention_config,block"`
	// ConfigDatabaseConfig: optional
	DatabaseConfig *ConfigDatabaseConfig `hcl:"database_config,block"`
	// ConfigEncryptionConfig: optional
	EncryptionConfig *ConfigEncryptionConfig `hcl:"encryption_config,block"`
	// ConfigMaintenanceWindow: optional
	MaintenanceWindow *ConfigMaintenanceWindow `hcl:"maintenance_window,block"`
	// ConfigMasterAuthorizedNetworksConfig: optional
	MasterAuthorizedNetworksConfig *ConfigMasterAuthorizedNetworksConfig `hcl:"master_authorized_networks_config,block"`
	// ConfigNodeConfig: optional
	NodeConfig *ConfigNodeConfig `hcl:"node_config,block"`
	// ConfigPrivateEnvironmentConfig: optional
	PrivateEnvironmentConfig *ConfigPrivateEnvironmentConfig `hcl:"private_environment_config,block"`
	// ConfigRecoveryConfig: optional
	RecoveryConfig *ConfigRecoveryConfig `hcl:"recovery_config,block"`
	// ConfigSoftwareConfig: optional
	SoftwareConfig *ConfigSoftwareConfig `hcl:"software_config,block"`
	// ConfigWebServerConfig: optional
	WebServerConfig *ConfigWebServerConfig `hcl:"web_server_config,block"`
	// ConfigWebServerNetworkAccessControl: optional
	WebServerNetworkAccessControl *ConfigWebServerNetworkAccessControl `hcl:"web_server_network_access_control,block"`
	// ConfigWorkloadsConfig: optional
	WorkloadsConfig *ConfigWorkloadsConfig `hcl:"workloads_config,block"`
}

type ConfigDataRetentionConfig struct {
	// ConfigDataRetentionConfigTaskLogsRetentionConfig: min=1
	TaskLogsRetentionConfig []ConfigDataRetentionConfigTaskLogsRetentionConfig `hcl:"task_logs_retention_config,block" validate:"min=1"`
}

type ConfigDataRetentionConfigTaskLogsRetentionConfig struct {
	// StorageMode: string, optional
	StorageMode terra.StringValue `hcl:"storage_mode,attr"`
}

type ConfigDatabaseConfig struct {
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
}

type ConfigEncryptionConfig struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type ConfigMaintenanceWindow struct {
	// EndTime: string, required
	EndTime terra.StringValue `hcl:"end_time,attr" validate:"required"`
	// Recurrence: string, required
	Recurrence terra.StringValue `hcl:"recurrence,attr" validate:"required"`
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
}

type ConfigMasterAuthorizedNetworksConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// ConfigMasterAuthorizedNetworksConfigCidrBlocks: min=0
	CidrBlocks []ConfigMasterAuthorizedNetworksConfigCidrBlocks `hcl:"cidr_blocks,block" validate:"min=0"`
}

type ConfigMasterAuthorizedNetworksConfigCidrBlocks struct {
	// CidrBlock: string, required
	CidrBlock terra.StringValue `hcl:"cidr_block,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
}

type ConfigNodeConfig struct {
	// ComposerInternalIpv4CidrBlock: string, optional
	ComposerInternalIpv4CidrBlock terra.StringValue `hcl:"composer_internal_ipv4_cidr_block,attr"`
	// ComposerNetworkAttachment: string, optional
	ComposerNetworkAttachment terra.StringValue `hcl:"composer_network_attachment,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// EnableIpMasqAgent: bool, optional
	EnableIpMasqAgent terra.BoolValue `hcl:"enable_ip_masq_agent,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MaxPodsPerNode: number, optional
	MaxPodsPerNode terra.NumberValue `hcl:"max_pods_per_node,attr"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// OauthScopes: set of string, optional
	OauthScopes terra.SetValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// Tags: set of string, optional
	Tags terra.SetValue[terra.StringValue] `hcl:"tags,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// ConfigNodeConfigIpAllocationPolicy: min=0
	IpAllocationPolicy []ConfigNodeConfigIpAllocationPolicy `hcl:"ip_allocation_policy,block" validate:"min=0"`
}

type ConfigNodeConfigIpAllocationPolicy struct {
	// ClusterIpv4CidrBlock: string, optional
	ClusterIpv4CidrBlock terra.StringValue `hcl:"cluster_ipv4_cidr_block,attr"`
	// ClusterSecondaryRangeName: string, optional
	ClusterSecondaryRangeName terra.StringValue `hcl:"cluster_secondary_range_name,attr"`
	// ServicesIpv4CidrBlock: string, optional
	ServicesIpv4CidrBlock terra.StringValue `hcl:"services_ipv4_cidr_block,attr"`
	// ServicesSecondaryRangeName: string, optional
	ServicesSecondaryRangeName terra.StringValue `hcl:"services_secondary_range_name,attr"`
	// UseIpAliases: bool, optional
	UseIpAliases terra.BoolValue `hcl:"use_ip_aliases,attr"`
}

type ConfigPrivateEnvironmentConfig struct {
	// CloudComposerConnectionSubnetwork: string, optional
	CloudComposerConnectionSubnetwork terra.StringValue `hcl:"cloud_composer_connection_subnetwork,attr"`
	// CloudComposerNetworkIpv4CidrBlock: string, optional
	CloudComposerNetworkIpv4CidrBlock terra.StringValue `hcl:"cloud_composer_network_ipv4_cidr_block,attr"`
	// CloudSqlIpv4CidrBlock: string, optional
	CloudSqlIpv4CidrBlock terra.StringValue `hcl:"cloud_sql_ipv4_cidr_block,attr"`
	// ConnectionType: string, optional
	ConnectionType terra.StringValue `hcl:"connection_type,attr"`
	// EnablePrivateEndpoint: bool, optional
	EnablePrivateEndpoint terra.BoolValue `hcl:"enable_private_endpoint,attr"`
	// EnablePrivatelyUsedPublicIps: bool, optional
	EnablePrivatelyUsedPublicIps terra.BoolValue `hcl:"enable_privately_used_public_ips,attr"`
	// MasterIpv4CidrBlock: string, optional
	MasterIpv4CidrBlock terra.StringValue `hcl:"master_ipv4_cidr_block,attr"`
	// WebServerIpv4CidrBlock: string, optional
	WebServerIpv4CidrBlock terra.StringValue `hcl:"web_server_ipv4_cidr_block,attr"`
}

type ConfigRecoveryConfig struct {
	// ConfigRecoveryConfigScheduledSnapshotsConfig: optional
	ScheduledSnapshotsConfig *ConfigRecoveryConfigScheduledSnapshotsConfig `hcl:"scheduled_snapshots_config,block"`
}

type ConfigRecoveryConfigScheduledSnapshotsConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// SnapshotCreationSchedule: string, optional
	SnapshotCreationSchedule terra.StringValue `hcl:"snapshot_creation_schedule,attr"`
	// SnapshotLocation: string, optional
	SnapshotLocation terra.StringValue `hcl:"snapshot_location,attr"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
}

type ConfigSoftwareConfig struct {
	// AirflowConfigOverrides: map of string, optional
	AirflowConfigOverrides terra.MapValue[terra.StringValue] `hcl:"airflow_config_overrides,attr"`
	// EnvVariables: map of string, optional
	EnvVariables terra.MapValue[terra.StringValue] `hcl:"env_variables,attr"`
	// ImageVersion: string, optional
	ImageVersion terra.StringValue `hcl:"image_version,attr"`
	// PypiPackages: map of string, optional
	PypiPackages terra.MapValue[terra.StringValue] `hcl:"pypi_packages,attr"`
	// PythonVersion: string, optional
	PythonVersion terra.StringValue `hcl:"python_version,attr"`
	// SchedulerCount: number, optional
	SchedulerCount terra.NumberValue `hcl:"scheduler_count,attr"`
	// WebServerPluginsMode: string, optional
	WebServerPluginsMode terra.StringValue `hcl:"web_server_plugins_mode,attr"`
	// ConfigSoftwareConfigCloudDataLineageIntegration: optional
	CloudDataLineageIntegration *ConfigSoftwareConfigCloudDataLineageIntegration `hcl:"cloud_data_lineage_integration,block"`
}

type ConfigSoftwareConfigCloudDataLineageIntegration struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type ConfigWebServerConfig struct {
	// MachineType: string, required
	MachineType terra.StringValue `hcl:"machine_type,attr" validate:"required"`
}

type ConfigWebServerNetworkAccessControl struct {
	// ConfigWebServerNetworkAccessControlAllowedIpRange: min=0
	AllowedIpRange []ConfigWebServerNetworkAccessControlAllowedIpRange `hcl:"allowed_ip_range,block" validate:"min=0"`
}

type ConfigWebServerNetworkAccessControlAllowedIpRange struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ConfigWorkloadsConfig struct {
	// ConfigWorkloadsConfigDagProcessor: optional
	DagProcessor *ConfigWorkloadsConfigDagProcessor `hcl:"dag_processor,block"`
	// ConfigWorkloadsConfigScheduler: optional
	Scheduler *ConfigWorkloadsConfigScheduler `hcl:"scheduler,block"`
	// ConfigWorkloadsConfigTriggerer: optional
	Triggerer *ConfigWorkloadsConfigTriggerer `hcl:"triggerer,block"`
	// ConfigWorkloadsConfigWebServer: optional
	WebServer *ConfigWorkloadsConfigWebServer `hcl:"web_server,block"`
	// ConfigWorkloadsConfigWorker: optional
	Worker *ConfigWorkloadsConfigWorker `hcl:"worker,block"`
}

type ConfigWorkloadsConfigDagProcessor struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Cpu: number, optional
	Cpu terra.NumberValue `hcl:"cpu,attr"`
	// MemoryGb: number, optional
	MemoryGb terra.NumberValue `hcl:"memory_gb,attr"`
	// StorageGb: number, optional
	StorageGb terra.NumberValue `hcl:"storage_gb,attr"`
}

type ConfigWorkloadsConfigScheduler struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Cpu: number, optional
	Cpu terra.NumberValue `hcl:"cpu,attr"`
	// MemoryGb: number, optional
	MemoryGb terra.NumberValue `hcl:"memory_gb,attr"`
	// StorageGb: number, optional
	StorageGb terra.NumberValue `hcl:"storage_gb,attr"`
}

type ConfigWorkloadsConfigTriggerer struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// Cpu: number, required
	Cpu terra.NumberValue `hcl:"cpu,attr" validate:"required"`
	// MemoryGb: number, required
	MemoryGb terra.NumberValue `hcl:"memory_gb,attr" validate:"required"`
}

type ConfigWorkloadsConfigWebServer struct {
	// Cpu: number, optional
	Cpu terra.NumberValue `hcl:"cpu,attr"`
	// MemoryGb: number, optional
	MemoryGb terra.NumberValue `hcl:"memory_gb,attr"`
	// StorageGb: number, optional
	StorageGb terra.NumberValue `hcl:"storage_gb,attr"`
}

type ConfigWorkloadsConfigWorker struct {
	// Cpu: number, optional
	Cpu terra.NumberValue `hcl:"cpu,attr"`
	// MaxCount: number, optional
	MaxCount terra.NumberValue `hcl:"max_count,attr"`
	// MemoryGb: number, optional
	MemoryGb terra.NumberValue `hcl:"memory_gb,attr"`
	// MinCount: number, optional
	MinCount terra.NumberValue `hcl:"min_count,attr"`
	// StorageGb: number, optional
	StorageGb terra.NumberValue `hcl:"storage_gb,attr"`
}

type StorageConfig struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConfigAttributes struct {
	ref terra.Reference
}

func (c ConfigAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigAttributes) InternalWithRef(ref terra.Reference) ConfigAttributes {
	return ConfigAttributes{ref: ref}
}

func (c ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigAttributes) AirflowUri() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("airflow_uri"))
}

func (c ConfigAttributes) DagGcsPrefix() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("dag_gcs_prefix"))
}

func (c ConfigAttributes) EnablePrivateBuildsOnly() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("enable_private_builds_only"))
}

func (c ConfigAttributes) EnablePrivateEnvironment() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("enable_private_environment"))
}

func (c ConfigAttributes) EnvironmentSize() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("environment_size"))
}

func (c ConfigAttributes) GkeCluster() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("gke_cluster"))
}

func (c ConfigAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("node_count"))
}

func (c ConfigAttributes) ResilienceMode() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("resilience_mode"))
}

func (c ConfigAttributes) DataRetentionConfig() terra.ListValue[ConfigDataRetentionConfigAttributes] {
	return terra.ReferenceAsList[ConfigDataRetentionConfigAttributes](c.ref.Append("data_retention_config"))
}

func (c ConfigAttributes) DatabaseConfig() terra.ListValue[ConfigDatabaseConfigAttributes] {
	return terra.ReferenceAsList[ConfigDatabaseConfigAttributes](c.ref.Append("database_config"))
}

func (c ConfigAttributes) EncryptionConfig() terra.ListValue[ConfigEncryptionConfigAttributes] {
	return terra.ReferenceAsList[ConfigEncryptionConfigAttributes](c.ref.Append("encryption_config"))
}

func (c ConfigAttributes) MaintenanceWindow() terra.ListValue[ConfigMaintenanceWindowAttributes] {
	return terra.ReferenceAsList[ConfigMaintenanceWindowAttributes](c.ref.Append("maintenance_window"))
}

func (c ConfigAttributes) MasterAuthorizedNetworksConfig() terra.ListValue[ConfigMasterAuthorizedNetworksConfigAttributes] {
	return terra.ReferenceAsList[ConfigMasterAuthorizedNetworksConfigAttributes](c.ref.Append("master_authorized_networks_config"))
}

func (c ConfigAttributes) NodeConfig() terra.ListValue[ConfigNodeConfigAttributes] {
	return terra.ReferenceAsList[ConfigNodeConfigAttributes](c.ref.Append("node_config"))
}

func (c ConfigAttributes) PrivateEnvironmentConfig() terra.ListValue[ConfigPrivateEnvironmentConfigAttributes] {
	return terra.ReferenceAsList[ConfigPrivateEnvironmentConfigAttributes](c.ref.Append("private_environment_config"))
}

func (c ConfigAttributes) RecoveryConfig() terra.ListValue[ConfigRecoveryConfigAttributes] {
	return terra.ReferenceAsList[ConfigRecoveryConfigAttributes](c.ref.Append("recovery_config"))
}

func (c ConfigAttributes) SoftwareConfig() terra.ListValue[ConfigSoftwareConfigAttributes] {
	return terra.ReferenceAsList[ConfigSoftwareConfigAttributes](c.ref.Append("software_config"))
}

func (c ConfigAttributes) WebServerConfig() terra.ListValue[ConfigWebServerConfigAttributes] {
	return terra.ReferenceAsList[ConfigWebServerConfigAttributes](c.ref.Append("web_server_config"))
}

func (c ConfigAttributes) WebServerNetworkAccessControl() terra.ListValue[ConfigWebServerNetworkAccessControlAttributes] {
	return terra.ReferenceAsList[ConfigWebServerNetworkAccessControlAttributes](c.ref.Append("web_server_network_access_control"))
}

func (c ConfigAttributes) WorkloadsConfig() terra.ListValue[ConfigWorkloadsConfigAttributes] {
	return terra.ReferenceAsList[ConfigWorkloadsConfigAttributes](c.ref.Append("workloads_config"))
}

type ConfigDataRetentionConfigAttributes struct {
	ref terra.Reference
}

func (drc ConfigDataRetentionConfigAttributes) InternalRef() (terra.Reference, error) {
	return drc.ref, nil
}

func (drc ConfigDataRetentionConfigAttributes) InternalWithRef(ref terra.Reference) ConfigDataRetentionConfigAttributes {
	return ConfigDataRetentionConfigAttributes{ref: ref}
}

func (drc ConfigDataRetentionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return drc.ref.InternalTokens()
}

func (drc ConfigDataRetentionConfigAttributes) TaskLogsRetentionConfig() terra.ListValue[ConfigDataRetentionConfigTaskLogsRetentionConfigAttributes] {
	return terra.ReferenceAsList[ConfigDataRetentionConfigTaskLogsRetentionConfigAttributes](drc.ref.Append("task_logs_retention_config"))
}

type ConfigDataRetentionConfigTaskLogsRetentionConfigAttributes struct {
	ref terra.Reference
}

func (tlrc ConfigDataRetentionConfigTaskLogsRetentionConfigAttributes) InternalRef() (terra.Reference, error) {
	return tlrc.ref, nil
}

func (tlrc ConfigDataRetentionConfigTaskLogsRetentionConfigAttributes) InternalWithRef(ref terra.Reference) ConfigDataRetentionConfigTaskLogsRetentionConfigAttributes {
	return ConfigDataRetentionConfigTaskLogsRetentionConfigAttributes{ref: ref}
}

func (tlrc ConfigDataRetentionConfigTaskLogsRetentionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tlrc.ref.InternalTokens()
}

func (tlrc ConfigDataRetentionConfigTaskLogsRetentionConfigAttributes) StorageMode() terra.StringValue {
	return terra.ReferenceAsString(tlrc.ref.Append("storage_mode"))
}

type ConfigDatabaseConfigAttributes struct {
	ref terra.Reference
}

func (dc ConfigDatabaseConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc ConfigDatabaseConfigAttributes) InternalWithRef(ref terra.Reference) ConfigDatabaseConfigAttributes {
	return ConfigDatabaseConfigAttributes{ref: ref}
}

func (dc ConfigDatabaseConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc ConfigDatabaseConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("machine_type"))
}

func (dc ConfigDatabaseConfigAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("zone"))
}

type ConfigEncryptionConfigAttributes struct {
	ref terra.Reference
}

func (ec ConfigEncryptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec ConfigEncryptionConfigAttributes) InternalWithRef(ref terra.Reference) ConfigEncryptionConfigAttributes {
	return ConfigEncryptionConfigAttributes{ref: ref}
}

func (ec ConfigEncryptionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec ConfigEncryptionConfigAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key_name"))
}

type ConfigMaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (mw ConfigMaintenanceWindowAttributes) InternalRef() (terra.Reference, error) {
	return mw.ref, nil
}

func (mw ConfigMaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) ConfigMaintenanceWindowAttributes {
	return ConfigMaintenanceWindowAttributes{ref: ref}
}

func (mw ConfigMaintenanceWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mw.ref.InternalTokens()
}

func (mw ConfigMaintenanceWindowAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(mw.ref.Append("end_time"))
}

func (mw ConfigMaintenanceWindowAttributes) Recurrence() terra.StringValue {
	return terra.ReferenceAsString(mw.ref.Append("recurrence"))
}

func (mw ConfigMaintenanceWindowAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(mw.ref.Append("start_time"))
}

type ConfigMasterAuthorizedNetworksConfigAttributes struct {
	ref terra.Reference
}

func (manc ConfigMasterAuthorizedNetworksConfigAttributes) InternalRef() (terra.Reference, error) {
	return manc.ref, nil
}

func (manc ConfigMasterAuthorizedNetworksConfigAttributes) InternalWithRef(ref terra.Reference) ConfigMasterAuthorizedNetworksConfigAttributes {
	return ConfigMasterAuthorizedNetworksConfigAttributes{ref: ref}
}

func (manc ConfigMasterAuthorizedNetworksConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return manc.ref.InternalTokens()
}

func (manc ConfigMasterAuthorizedNetworksConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(manc.ref.Append("enabled"))
}

func (manc ConfigMasterAuthorizedNetworksConfigAttributes) CidrBlocks() terra.SetValue[ConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes] {
	return terra.ReferenceAsSet[ConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes](manc.ref.Append("cidr_blocks"))
}

type ConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes struct {
	ref terra.Reference
}

func (cb ConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes) InternalRef() (terra.Reference, error) {
	return cb.ref, nil
}

func (cb ConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes) InternalWithRef(ref terra.Reference) ConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes {
	return ConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes{ref: ref}
}

func (cb ConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cb.ref.InternalTokens()
}

func (cb ConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(cb.ref.Append("cidr_block"))
}

func (cb ConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(cb.ref.Append("display_name"))
}

type ConfigNodeConfigAttributes struct {
	ref terra.Reference
}

func (nc ConfigNodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc ConfigNodeConfigAttributes) InternalWithRef(ref terra.Reference) ConfigNodeConfigAttributes {
	return ConfigNodeConfigAttributes{ref: ref}
}

func (nc ConfigNodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc ConfigNodeConfigAttributes) ComposerInternalIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("composer_internal_ipv4_cidr_block"))
}

func (nc ConfigNodeConfigAttributes) ComposerNetworkAttachment() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("composer_network_attachment"))
}

func (nc ConfigNodeConfigAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("disk_size_gb"))
}

func (nc ConfigNodeConfigAttributes) EnableIpMasqAgent() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("enable_ip_masq_agent"))
}

func (nc ConfigNodeConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("machine_type"))
}

func (nc ConfigNodeConfigAttributes) MaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("max_pods_per_node"))
}

func (nc ConfigNodeConfigAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("network"))
}

func (nc ConfigNodeConfigAttributes) OauthScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("oauth_scopes"))
}

func (nc ConfigNodeConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("service_account"))
}

func (nc ConfigNodeConfigAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("subnetwork"))
}

func (nc ConfigNodeConfigAttributes) Tags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("tags"))
}

func (nc ConfigNodeConfigAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("zone"))
}

func (nc ConfigNodeConfigAttributes) IpAllocationPolicy() terra.ListValue[ConfigNodeConfigIpAllocationPolicyAttributes] {
	return terra.ReferenceAsList[ConfigNodeConfigIpAllocationPolicyAttributes](nc.ref.Append("ip_allocation_policy"))
}

type ConfigNodeConfigIpAllocationPolicyAttributes struct {
	ref terra.Reference
}

func (iap ConfigNodeConfigIpAllocationPolicyAttributes) InternalRef() (terra.Reference, error) {
	return iap.ref, nil
}

func (iap ConfigNodeConfigIpAllocationPolicyAttributes) InternalWithRef(ref terra.Reference) ConfigNodeConfigIpAllocationPolicyAttributes {
	return ConfigNodeConfigIpAllocationPolicyAttributes{ref: ref}
}

func (iap ConfigNodeConfigIpAllocationPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iap.ref.InternalTokens()
}

func (iap ConfigNodeConfigIpAllocationPolicyAttributes) ClusterIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("cluster_ipv4_cidr_block"))
}

func (iap ConfigNodeConfigIpAllocationPolicyAttributes) ClusterSecondaryRangeName() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("cluster_secondary_range_name"))
}

func (iap ConfigNodeConfigIpAllocationPolicyAttributes) ServicesIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("services_ipv4_cidr_block"))
}

func (iap ConfigNodeConfigIpAllocationPolicyAttributes) ServicesSecondaryRangeName() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("services_secondary_range_name"))
}

func (iap ConfigNodeConfigIpAllocationPolicyAttributes) UseIpAliases() terra.BoolValue {
	return terra.ReferenceAsBool(iap.ref.Append("use_ip_aliases"))
}

type ConfigPrivateEnvironmentConfigAttributes struct {
	ref terra.Reference
}

func (pec ConfigPrivateEnvironmentConfigAttributes) InternalRef() (terra.Reference, error) {
	return pec.ref, nil
}

func (pec ConfigPrivateEnvironmentConfigAttributes) InternalWithRef(ref terra.Reference) ConfigPrivateEnvironmentConfigAttributes {
	return ConfigPrivateEnvironmentConfigAttributes{ref: ref}
}

func (pec ConfigPrivateEnvironmentConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pec.ref.InternalTokens()
}

func (pec ConfigPrivateEnvironmentConfigAttributes) CloudComposerConnectionSubnetwork() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("cloud_composer_connection_subnetwork"))
}

func (pec ConfigPrivateEnvironmentConfigAttributes) CloudComposerNetworkIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("cloud_composer_network_ipv4_cidr_block"))
}

func (pec ConfigPrivateEnvironmentConfigAttributes) CloudSqlIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("cloud_sql_ipv4_cidr_block"))
}

func (pec ConfigPrivateEnvironmentConfigAttributes) ConnectionType() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("connection_type"))
}

func (pec ConfigPrivateEnvironmentConfigAttributes) EnablePrivateEndpoint() terra.BoolValue {
	return terra.ReferenceAsBool(pec.ref.Append("enable_private_endpoint"))
}

func (pec ConfigPrivateEnvironmentConfigAttributes) EnablePrivatelyUsedPublicIps() terra.BoolValue {
	return terra.ReferenceAsBool(pec.ref.Append("enable_privately_used_public_ips"))
}

func (pec ConfigPrivateEnvironmentConfigAttributes) MasterIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("master_ipv4_cidr_block"))
}

func (pec ConfigPrivateEnvironmentConfigAttributes) WebServerIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("web_server_ipv4_cidr_block"))
}

type ConfigRecoveryConfigAttributes struct {
	ref terra.Reference
}

func (rc ConfigRecoveryConfigAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc ConfigRecoveryConfigAttributes) InternalWithRef(ref terra.Reference) ConfigRecoveryConfigAttributes {
	return ConfigRecoveryConfigAttributes{ref: ref}
}

func (rc ConfigRecoveryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc ConfigRecoveryConfigAttributes) ScheduledSnapshotsConfig() terra.ListValue[ConfigRecoveryConfigScheduledSnapshotsConfigAttributes] {
	return terra.ReferenceAsList[ConfigRecoveryConfigScheduledSnapshotsConfigAttributes](rc.ref.Append("scheduled_snapshots_config"))
}

type ConfigRecoveryConfigScheduledSnapshotsConfigAttributes struct {
	ref terra.Reference
}

func (ssc ConfigRecoveryConfigScheduledSnapshotsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ssc.ref, nil
}

func (ssc ConfigRecoveryConfigScheduledSnapshotsConfigAttributes) InternalWithRef(ref terra.Reference) ConfigRecoveryConfigScheduledSnapshotsConfigAttributes {
	return ConfigRecoveryConfigScheduledSnapshotsConfigAttributes{ref: ref}
}

func (ssc ConfigRecoveryConfigScheduledSnapshotsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssc.ref.InternalTokens()
}

func (ssc ConfigRecoveryConfigScheduledSnapshotsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ssc.ref.Append("enabled"))
}

func (ssc ConfigRecoveryConfigScheduledSnapshotsConfigAttributes) SnapshotCreationSchedule() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("snapshot_creation_schedule"))
}

func (ssc ConfigRecoveryConfigScheduledSnapshotsConfigAttributes) SnapshotLocation() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("snapshot_location"))
}

func (ssc ConfigRecoveryConfigScheduledSnapshotsConfigAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("time_zone"))
}

type ConfigSoftwareConfigAttributes struct {
	ref terra.Reference
}

func (sc ConfigSoftwareConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc ConfigSoftwareConfigAttributes) InternalWithRef(ref terra.Reference) ConfigSoftwareConfigAttributes {
	return ConfigSoftwareConfigAttributes{ref: ref}
}

func (sc ConfigSoftwareConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc ConfigSoftwareConfigAttributes) AirflowConfigOverrides() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sc.ref.Append("airflow_config_overrides"))
}

func (sc ConfigSoftwareConfigAttributes) EnvVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sc.ref.Append("env_variables"))
}

func (sc ConfigSoftwareConfigAttributes) ImageVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("image_version"))
}

func (sc ConfigSoftwareConfigAttributes) PypiPackages() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sc.ref.Append("pypi_packages"))
}

func (sc ConfigSoftwareConfigAttributes) PythonVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("python_version"))
}

func (sc ConfigSoftwareConfigAttributes) SchedulerCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("scheduler_count"))
}

func (sc ConfigSoftwareConfigAttributes) WebServerPluginsMode() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("web_server_plugins_mode"))
}

func (sc ConfigSoftwareConfigAttributes) CloudDataLineageIntegration() terra.ListValue[ConfigSoftwareConfigCloudDataLineageIntegrationAttributes] {
	return terra.ReferenceAsList[ConfigSoftwareConfigCloudDataLineageIntegrationAttributes](sc.ref.Append("cloud_data_lineage_integration"))
}

type ConfigSoftwareConfigCloudDataLineageIntegrationAttributes struct {
	ref terra.Reference
}

func (cdli ConfigSoftwareConfigCloudDataLineageIntegrationAttributes) InternalRef() (terra.Reference, error) {
	return cdli.ref, nil
}

func (cdli ConfigSoftwareConfigCloudDataLineageIntegrationAttributes) InternalWithRef(ref terra.Reference) ConfigSoftwareConfigCloudDataLineageIntegrationAttributes {
	return ConfigSoftwareConfigCloudDataLineageIntegrationAttributes{ref: ref}
}

func (cdli ConfigSoftwareConfigCloudDataLineageIntegrationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cdli.ref.InternalTokens()
}

func (cdli ConfigSoftwareConfigCloudDataLineageIntegrationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cdli.ref.Append("enabled"))
}

type ConfigWebServerConfigAttributes struct {
	ref terra.Reference
}

func (wsc ConfigWebServerConfigAttributes) InternalRef() (terra.Reference, error) {
	return wsc.ref, nil
}

func (wsc ConfigWebServerConfigAttributes) InternalWithRef(ref terra.Reference) ConfigWebServerConfigAttributes {
	return ConfigWebServerConfigAttributes{ref: ref}
}

func (wsc ConfigWebServerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wsc.ref.InternalTokens()
}

func (wsc ConfigWebServerConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(wsc.ref.Append("machine_type"))
}

type ConfigWebServerNetworkAccessControlAttributes struct {
	ref terra.Reference
}

func (wsnac ConfigWebServerNetworkAccessControlAttributes) InternalRef() (terra.Reference, error) {
	return wsnac.ref, nil
}

func (wsnac ConfigWebServerNetworkAccessControlAttributes) InternalWithRef(ref terra.Reference) ConfigWebServerNetworkAccessControlAttributes {
	return ConfigWebServerNetworkAccessControlAttributes{ref: ref}
}

func (wsnac ConfigWebServerNetworkAccessControlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wsnac.ref.InternalTokens()
}

func (wsnac ConfigWebServerNetworkAccessControlAttributes) AllowedIpRange() terra.SetValue[ConfigWebServerNetworkAccessControlAllowedIpRangeAttributes] {
	return terra.ReferenceAsSet[ConfigWebServerNetworkAccessControlAllowedIpRangeAttributes](wsnac.ref.Append("allowed_ip_range"))
}

type ConfigWebServerNetworkAccessControlAllowedIpRangeAttributes struct {
	ref terra.Reference
}

func (air ConfigWebServerNetworkAccessControlAllowedIpRangeAttributes) InternalRef() (terra.Reference, error) {
	return air.ref, nil
}

func (air ConfigWebServerNetworkAccessControlAllowedIpRangeAttributes) InternalWithRef(ref terra.Reference) ConfigWebServerNetworkAccessControlAllowedIpRangeAttributes {
	return ConfigWebServerNetworkAccessControlAllowedIpRangeAttributes{ref: ref}
}

func (air ConfigWebServerNetworkAccessControlAllowedIpRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return air.ref.InternalTokens()
}

func (air ConfigWebServerNetworkAccessControlAllowedIpRangeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("description"))
}

func (air ConfigWebServerNetworkAccessControlAllowedIpRangeAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("value"))
}

type ConfigWorkloadsConfigAttributes struct {
	ref terra.Reference
}

func (wc ConfigWorkloadsConfigAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc ConfigWorkloadsConfigAttributes) InternalWithRef(ref terra.Reference) ConfigWorkloadsConfigAttributes {
	return ConfigWorkloadsConfigAttributes{ref: ref}
}

func (wc ConfigWorkloadsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc ConfigWorkloadsConfigAttributes) DagProcessor() terra.ListValue[ConfigWorkloadsConfigDagProcessorAttributes] {
	return terra.ReferenceAsList[ConfigWorkloadsConfigDagProcessorAttributes](wc.ref.Append("dag_processor"))
}

func (wc ConfigWorkloadsConfigAttributes) Scheduler() terra.ListValue[ConfigWorkloadsConfigSchedulerAttributes] {
	return terra.ReferenceAsList[ConfigWorkloadsConfigSchedulerAttributes](wc.ref.Append("scheduler"))
}

func (wc ConfigWorkloadsConfigAttributes) Triggerer() terra.ListValue[ConfigWorkloadsConfigTriggererAttributes] {
	return terra.ReferenceAsList[ConfigWorkloadsConfigTriggererAttributes](wc.ref.Append("triggerer"))
}

func (wc ConfigWorkloadsConfigAttributes) WebServer() terra.ListValue[ConfigWorkloadsConfigWebServerAttributes] {
	return terra.ReferenceAsList[ConfigWorkloadsConfigWebServerAttributes](wc.ref.Append("web_server"))
}

func (wc ConfigWorkloadsConfigAttributes) Worker() terra.ListValue[ConfigWorkloadsConfigWorkerAttributes] {
	return terra.ReferenceAsList[ConfigWorkloadsConfigWorkerAttributes](wc.ref.Append("worker"))
}

type ConfigWorkloadsConfigDagProcessorAttributes struct {
	ref terra.Reference
}

func (dp ConfigWorkloadsConfigDagProcessorAttributes) InternalRef() (terra.Reference, error) {
	return dp.ref, nil
}

func (dp ConfigWorkloadsConfigDagProcessorAttributes) InternalWithRef(ref terra.Reference) ConfigWorkloadsConfigDagProcessorAttributes {
	return ConfigWorkloadsConfigDagProcessorAttributes{ref: ref}
}

func (dp ConfigWorkloadsConfigDagProcessorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dp.ref.InternalTokens()
}

func (dp ConfigWorkloadsConfigDagProcessorAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(dp.ref.Append("count"))
}

func (dp ConfigWorkloadsConfigDagProcessorAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(dp.ref.Append("cpu"))
}

func (dp ConfigWorkloadsConfigDagProcessorAttributes) MemoryGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dp.ref.Append("memory_gb"))
}

func (dp ConfigWorkloadsConfigDagProcessorAttributes) StorageGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dp.ref.Append("storage_gb"))
}

type ConfigWorkloadsConfigSchedulerAttributes struct {
	ref terra.Reference
}

func (s ConfigWorkloadsConfigSchedulerAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ConfigWorkloadsConfigSchedulerAttributes) InternalWithRef(ref terra.Reference) ConfigWorkloadsConfigSchedulerAttributes {
	return ConfigWorkloadsConfigSchedulerAttributes{ref: ref}
}

func (s ConfigWorkloadsConfigSchedulerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ConfigWorkloadsConfigSchedulerAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("count"))
}

func (s ConfigWorkloadsConfigSchedulerAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("cpu"))
}

func (s ConfigWorkloadsConfigSchedulerAttributes) MemoryGb() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("memory_gb"))
}

func (s ConfigWorkloadsConfigSchedulerAttributes) StorageGb() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("storage_gb"))
}

type ConfigWorkloadsConfigTriggererAttributes struct {
	ref terra.Reference
}

func (t ConfigWorkloadsConfigTriggererAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ConfigWorkloadsConfigTriggererAttributes) InternalWithRef(ref terra.Reference) ConfigWorkloadsConfigTriggererAttributes {
	return ConfigWorkloadsConfigTriggererAttributes{ref: ref}
}

func (t ConfigWorkloadsConfigTriggererAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ConfigWorkloadsConfigTriggererAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("count"))
}

func (t ConfigWorkloadsConfigTriggererAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("cpu"))
}

func (t ConfigWorkloadsConfigTriggererAttributes) MemoryGb() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("memory_gb"))
}

type ConfigWorkloadsConfigWebServerAttributes struct {
	ref terra.Reference
}

func (ws ConfigWorkloadsConfigWebServerAttributes) InternalRef() (terra.Reference, error) {
	return ws.ref, nil
}

func (ws ConfigWorkloadsConfigWebServerAttributes) InternalWithRef(ref terra.Reference) ConfigWorkloadsConfigWebServerAttributes {
	return ConfigWorkloadsConfigWebServerAttributes{ref: ref}
}

func (ws ConfigWorkloadsConfigWebServerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ws.ref.InternalTokens()
}

func (ws ConfigWorkloadsConfigWebServerAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(ws.ref.Append("cpu"))
}

func (ws ConfigWorkloadsConfigWebServerAttributes) MemoryGb() terra.NumberValue {
	return terra.ReferenceAsNumber(ws.ref.Append("memory_gb"))
}

func (ws ConfigWorkloadsConfigWebServerAttributes) StorageGb() terra.NumberValue {
	return terra.ReferenceAsNumber(ws.ref.Append("storage_gb"))
}

type ConfigWorkloadsConfigWorkerAttributes struct {
	ref terra.Reference
}

func (w ConfigWorkloadsConfigWorkerAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w ConfigWorkloadsConfigWorkerAttributes) InternalWithRef(ref terra.Reference) ConfigWorkloadsConfigWorkerAttributes {
	return ConfigWorkloadsConfigWorkerAttributes{ref: ref}
}

func (w ConfigWorkloadsConfigWorkerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w ConfigWorkloadsConfigWorkerAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(w.ref.Append("cpu"))
}

func (w ConfigWorkloadsConfigWorkerAttributes) MaxCount() terra.NumberValue {
	return terra.ReferenceAsNumber(w.ref.Append("max_count"))
}

func (w ConfigWorkloadsConfigWorkerAttributes) MemoryGb() terra.NumberValue {
	return terra.ReferenceAsNumber(w.ref.Append("memory_gb"))
}

func (w ConfigWorkloadsConfigWorkerAttributes) MinCount() terra.NumberValue {
	return terra.ReferenceAsNumber(w.ref.Append("min_count"))
}

func (w ConfigWorkloadsConfigWorkerAttributes) StorageGb() terra.NumberValue {
	return terra.ReferenceAsNumber(w.ref.Append("storage_gb"))
}

type StorageConfigAttributes struct {
	ref terra.Reference
}

func (sc StorageConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc StorageConfigAttributes) InternalWithRef(ref terra.Reference) StorageConfigAttributes {
	return StorageConfigAttributes{ref: ref}
}

func (sc StorageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc StorageConfigAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConfigState struct {
	AirflowUri                     string                                      `json:"airflow_uri"`
	DagGcsPrefix                   string                                      `json:"dag_gcs_prefix"`
	EnablePrivateBuildsOnly        bool                                        `json:"enable_private_builds_only"`
	EnablePrivateEnvironment       bool                                        `json:"enable_private_environment"`
	EnvironmentSize                string                                      `json:"environment_size"`
	GkeCluster                     string                                      `json:"gke_cluster"`
	NodeCount                      float64                                     `json:"node_count"`
	ResilienceMode                 string                                      `json:"resilience_mode"`
	DataRetentionConfig            []ConfigDataRetentionConfigState            `json:"data_retention_config"`
	DatabaseConfig                 []ConfigDatabaseConfigState                 `json:"database_config"`
	EncryptionConfig               []ConfigEncryptionConfigState               `json:"encryption_config"`
	MaintenanceWindow              []ConfigMaintenanceWindowState              `json:"maintenance_window"`
	MasterAuthorizedNetworksConfig []ConfigMasterAuthorizedNetworksConfigState `json:"master_authorized_networks_config"`
	NodeConfig                     []ConfigNodeConfigState                     `json:"node_config"`
	PrivateEnvironmentConfig       []ConfigPrivateEnvironmentConfigState       `json:"private_environment_config"`
	RecoveryConfig                 []ConfigRecoveryConfigState                 `json:"recovery_config"`
	SoftwareConfig                 []ConfigSoftwareConfigState                 `json:"software_config"`
	WebServerConfig                []ConfigWebServerConfigState                `json:"web_server_config"`
	WebServerNetworkAccessControl  []ConfigWebServerNetworkAccessControlState  `json:"web_server_network_access_control"`
	WorkloadsConfig                []ConfigWorkloadsConfigState                `json:"workloads_config"`
}

type ConfigDataRetentionConfigState struct {
	TaskLogsRetentionConfig []ConfigDataRetentionConfigTaskLogsRetentionConfigState `json:"task_logs_retention_config"`
}

type ConfigDataRetentionConfigTaskLogsRetentionConfigState struct {
	StorageMode string `json:"storage_mode"`
}

type ConfigDatabaseConfigState struct {
	MachineType string `json:"machine_type"`
	Zone        string `json:"zone"`
}

type ConfigEncryptionConfigState struct {
	KmsKeyName string `json:"kms_key_name"`
}

type ConfigMaintenanceWindowState struct {
	EndTime    string `json:"end_time"`
	Recurrence string `json:"recurrence"`
	StartTime  string `json:"start_time"`
}

type ConfigMasterAuthorizedNetworksConfigState struct {
	Enabled    bool                                                  `json:"enabled"`
	CidrBlocks []ConfigMasterAuthorizedNetworksConfigCidrBlocksState `json:"cidr_blocks"`
}

type ConfigMasterAuthorizedNetworksConfigCidrBlocksState struct {
	CidrBlock   string `json:"cidr_block"`
	DisplayName string `json:"display_name"`
}

type ConfigNodeConfigState struct {
	ComposerInternalIpv4CidrBlock string                                    `json:"composer_internal_ipv4_cidr_block"`
	ComposerNetworkAttachment     string                                    `json:"composer_network_attachment"`
	DiskSizeGb                    float64                                   `json:"disk_size_gb"`
	EnableIpMasqAgent             bool                                      `json:"enable_ip_masq_agent"`
	MachineType                   string                                    `json:"machine_type"`
	MaxPodsPerNode                float64                                   `json:"max_pods_per_node"`
	Network                       string                                    `json:"network"`
	OauthScopes                   []string                                  `json:"oauth_scopes"`
	ServiceAccount                string                                    `json:"service_account"`
	Subnetwork                    string                                    `json:"subnetwork"`
	Tags                          []string                                  `json:"tags"`
	Zone                          string                                    `json:"zone"`
	IpAllocationPolicy            []ConfigNodeConfigIpAllocationPolicyState `json:"ip_allocation_policy"`
}

type ConfigNodeConfigIpAllocationPolicyState struct {
	ClusterIpv4CidrBlock       string `json:"cluster_ipv4_cidr_block"`
	ClusterSecondaryRangeName  string `json:"cluster_secondary_range_name"`
	ServicesIpv4CidrBlock      string `json:"services_ipv4_cidr_block"`
	ServicesSecondaryRangeName string `json:"services_secondary_range_name"`
	UseIpAliases               bool   `json:"use_ip_aliases"`
}

type ConfigPrivateEnvironmentConfigState struct {
	CloudComposerConnectionSubnetwork string `json:"cloud_composer_connection_subnetwork"`
	CloudComposerNetworkIpv4CidrBlock string `json:"cloud_composer_network_ipv4_cidr_block"`
	CloudSqlIpv4CidrBlock             string `json:"cloud_sql_ipv4_cidr_block"`
	ConnectionType                    string `json:"connection_type"`
	EnablePrivateEndpoint             bool   `json:"enable_private_endpoint"`
	EnablePrivatelyUsedPublicIps      bool   `json:"enable_privately_used_public_ips"`
	MasterIpv4CidrBlock               string `json:"master_ipv4_cidr_block"`
	WebServerIpv4CidrBlock            string `json:"web_server_ipv4_cidr_block"`
}

type ConfigRecoveryConfigState struct {
	ScheduledSnapshotsConfig []ConfigRecoveryConfigScheduledSnapshotsConfigState `json:"scheduled_snapshots_config"`
}

type ConfigRecoveryConfigScheduledSnapshotsConfigState struct {
	Enabled                  bool   `json:"enabled"`
	SnapshotCreationSchedule string `json:"snapshot_creation_schedule"`
	SnapshotLocation         string `json:"snapshot_location"`
	TimeZone                 string `json:"time_zone"`
}

type ConfigSoftwareConfigState struct {
	AirflowConfigOverrides      map[string]string                                      `json:"airflow_config_overrides"`
	EnvVariables                map[string]string                                      `json:"env_variables"`
	ImageVersion                string                                                 `json:"image_version"`
	PypiPackages                map[string]string                                      `json:"pypi_packages"`
	PythonVersion               string                                                 `json:"python_version"`
	SchedulerCount              float64                                                `json:"scheduler_count"`
	WebServerPluginsMode        string                                                 `json:"web_server_plugins_mode"`
	CloudDataLineageIntegration []ConfigSoftwareConfigCloudDataLineageIntegrationState `json:"cloud_data_lineage_integration"`
}

type ConfigSoftwareConfigCloudDataLineageIntegrationState struct {
	Enabled bool `json:"enabled"`
}

type ConfigWebServerConfigState struct {
	MachineType string `json:"machine_type"`
}

type ConfigWebServerNetworkAccessControlState struct {
	AllowedIpRange []ConfigWebServerNetworkAccessControlAllowedIpRangeState `json:"allowed_ip_range"`
}

type ConfigWebServerNetworkAccessControlAllowedIpRangeState struct {
	Description string `json:"description"`
	Value       string `json:"value"`
}

type ConfigWorkloadsConfigState struct {
	DagProcessor []ConfigWorkloadsConfigDagProcessorState `json:"dag_processor"`
	Scheduler    []ConfigWorkloadsConfigSchedulerState    `json:"scheduler"`
	Triggerer    []ConfigWorkloadsConfigTriggererState    `json:"triggerer"`
	WebServer    []ConfigWorkloadsConfigWebServerState    `json:"web_server"`
	Worker       []ConfigWorkloadsConfigWorkerState       `json:"worker"`
}

type ConfigWorkloadsConfigDagProcessorState struct {
	Count     float64 `json:"count"`
	Cpu       float64 `json:"cpu"`
	MemoryGb  float64 `json:"memory_gb"`
	StorageGb float64 `json:"storage_gb"`
}

type ConfigWorkloadsConfigSchedulerState struct {
	Count     float64 `json:"count"`
	Cpu       float64 `json:"cpu"`
	MemoryGb  float64 `json:"memory_gb"`
	StorageGb float64 `json:"storage_gb"`
}

type ConfigWorkloadsConfigTriggererState struct {
	Count    float64 `json:"count"`
	Cpu      float64 `json:"cpu"`
	MemoryGb float64 `json:"memory_gb"`
}

type ConfigWorkloadsConfigWebServerState struct {
	Cpu       float64 `json:"cpu"`
	MemoryGb  float64 `json:"memory_gb"`
	StorageGb float64 `json:"storage_gb"`
}

type ConfigWorkloadsConfigWorkerState struct {
	Cpu       float64 `json:"cpu"`
	MaxCount  float64 `json:"max_count"`
	MemoryGb  float64 `json:"memory_gb"`
	MinCount  float64 `json:"min_count"`
	StorageGb float64 `json:"storage_gb"`
}

type StorageConfigState struct {
	Bucket string `json:"bucket"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
