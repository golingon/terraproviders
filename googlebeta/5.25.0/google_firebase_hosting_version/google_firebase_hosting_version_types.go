// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firebase_hosting_version

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Config struct {
	// ConfigRedirects: min=0
	Redirects []ConfigRedirects `hcl:"redirects,block" validate:"min=0"`
	// ConfigRewrites: min=0
	Rewrites []ConfigRewrites `hcl:"rewrites,block" validate:"min=0"`
}

type ConfigRedirects struct {
	// Glob: string, optional
	Glob terra.StringValue `hcl:"glob,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Regex: string, optional
	Regex terra.StringValue `hcl:"regex,attr"`
	// StatusCode: number, required
	StatusCode terra.NumberValue `hcl:"status_code,attr" validate:"required"`
}

type ConfigRewrites struct {
	// Function: string, optional
	Function terra.StringValue `hcl:"function,attr"`
	// Glob: string, optional
	Glob terra.StringValue `hcl:"glob,attr"`
	// Regex: string, optional
	Regex terra.StringValue `hcl:"regex,attr"`
	// ConfigRewritesRun: optional
	Run *ConfigRewritesRun `hcl:"run,block"`
}

type ConfigRewritesRun struct {
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ServiceId: string, required
	ServiceId terra.StringValue `hcl:"service_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type ConfigAttributes struct {
	ref terra.Reference
}

func (c ConfigAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigAttributes) InternalWithRef(ref terra.Reference) ConfigAttributes {
	return ConfigAttributes{ref: ref}
}

func (c ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigAttributes) Redirects() terra.ListValue[ConfigRedirectsAttributes] {
	return terra.ReferenceAsList[ConfigRedirectsAttributes](c.ref.Append("redirects"))
}

func (c ConfigAttributes) Rewrites() terra.ListValue[ConfigRewritesAttributes] {
	return terra.ReferenceAsList[ConfigRewritesAttributes](c.ref.Append("rewrites"))
}

type ConfigRedirectsAttributes struct {
	ref terra.Reference
}

func (r ConfigRedirectsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ConfigRedirectsAttributes) InternalWithRef(ref terra.Reference) ConfigRedirectsAttributes {
	return ConfigRedirectsAttributes{ref: ref}
}

func (r ConfigRedirectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ConfigRedirectsAttributes) Glob() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("glob"))
}

func (r ConfigRedirectsAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("location"))
}

func (r ConfigRedirectsAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("regex"))
}

func (r ConfigRedirectsAttributes) StatusCode() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("status_code"))
}

type ConfigRewritesAttributes struct {
	ref terra.Reference
}

func (r ConfigRewritesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ConfigRewritesAttributes) InternalWithRef(ref terra.Reference) ConfigRewritesAttributes {
	return ConfigRewritesAttributes{ref: ref}
}

func (r ConfigRewritesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ConfigRewritesAttributes) Function() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("function"))
}

func (r ConfigRewritesAttributes) Glob() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("glob"))
}

func (r ConfigRewritesAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("regex"))
}

func (r ConfigRewritesAttributes) Run() terra.ListValue[ConfigRewritesRunAttributes] {
	return terra.ReferenceAsList[ConfigRewritesRunAttributes](r.ref.Append("run"))
}

type ConfigRewritesRunAttributes struct {
	ref terra.Reference
}

func (r ConfigRewritesRunAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ConfigRewritesRunAttributes) InternalWithRef(ref terra.Reference) ConfigRewritesRunAttributes {
	return ConfigRewritesRunAttributes{ref: ref}
}

func (r ConfigRewritesRunAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ConfigRewritesRunAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("region"))
}

func (r ConfigRewritesRunAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("service_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type ConfigState struct {
	Redirects []ConfigRedirectsState `json:"redirects"`
	Rewrites  []ConfigRewritesState  `json:"rewrites"`
}

type ConfigRedirectsState struct {
	Glob       string  `json:"glob"`
	Location   string  `json:"location"`
	Regex      string  `json:"regex"`
	StatusCode float64 `json:"status_code"`
}

type ConfigRewritesState struct {
	Function string                   `json:"function"`
	Glob     string                   `json:"glob"`
	Regex    string                   `json:"regex"`
	Run      []ConfigRewritesRunState `json:"run"`
}

type ConfigRewritesRunState struct {
	Region    string `json:"region"`
	ServiceId string `json:"service_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
