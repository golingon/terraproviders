// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firebase_hosting_version

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firebase_hosting_version.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirebaseHostingVersionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfhv *Resource) Type() string {
	return "google_firebase_hosting_version"
}

// LocalName returns the local name for [Resource].
func (gfhv *Resource) LocalName() string {
	return gfhv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfhv *Resource) Configuration() interface{} {
	return gfhv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfhv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfhv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfhv *Resource) Dependencies() terra.Dependencies {
	return gfhv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfhv *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfhv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfhv *Resource) Attributes() googleFirebaseHostingVersionAttributes {
	return googleFirebaseHostingVersionAttributes{ref: terra.ReferenceResource(gfhv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfhv *Resource) ImportState(state io.Reader) error {
	gfhv.state = &googleFirebaseHostingVersionState{}
	if err := json.NewDecoder(state).Decode(gfhv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfhv.Type(), gfhv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfhv *Resource) State() (*googleFirebaseHostingVersionState, bool) {
	return gfhv.state, gfhv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfhv *Resource) StateMust() *googleFirebaseHostingVersionState {
	if gfhv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfhv.Type(), gfhv.LocalName()))
	}
	return gfhv.state
}

// Args contains the configurations for google_firebase_hosting_version.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SiteId: string, required
	SiteId terra.StringValue `hcl:"site_id,attr" validate:"required"`
	// Config: optional
	Config *Config `hcl:"config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirebaseHostingVersionAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_firebase_hosting_version.
func (gfhv googleFirebaseHostingVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfhv.ref.Append("id"))
}

// Name returns a reference to field name of google_firebase_hosting_version.
func (gfhv googleFirebaseHostingVersionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfhv.ref.Append("name"))
}

// SiteId returns a reference to field site_id of google_firebase_hosting_version.
func (gfhv googleFirebaseHostingVersionAttributes) SiteId() terra.StringValue {
	return terra.ReferenceAsString(gfhv.ref.Append("site_id"))
}

// VersionId returns a reference to field version_id of google_firebase_hosting_version.
func (gfhv googleFirebaseHostingVersionAttributes) VersionId() terra.StringValue {
	return terra.ReferenceAsString(gfhv.ref.Append("version_id"))
}

func (gfhv googleFirebaseHostingVersionAttributes) Config() terra.ListValue[ConfigAttributes] {
	return terra.ReferenceAsList[ConfigAttributes](gfhv.ref.Append("config"))
}

func (gfhv googleFirebaseHostingVersionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfhv.ref.Append("timeouts"))
}

type googleFirebaseHostingVersionState struct {
	Id        string         `json:"id"`
	Name      string         `json:"name"`
	SiteId    string         `json:"site_id"`
	VersionId string         `json:"version_id"`
	Config    []ConfigState  `json:"config"`
	Timeouts  *TimeoutsState `json:"timeouts"`
}
