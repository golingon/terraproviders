// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataform_repository

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dataform_repository.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataformRepositoryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdr *Resource) Type() string {
	return "google_dataform_repository"
}

// LocalName returns the local name for [Resource].
func (gdr *Resource) LocalName() string {
	return gdr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdr *Resource) Configuration() interface{} {
	return gdr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdr *Resource) Dependencies() terra.Dependencies {
	return gdr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdr *Resource) Attributes() googleDataformRepositoryAttributes {
	return googleDataformRepositoryAttributes{ref: terra.ReferenceResource(gdr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdr *Resource) ImportState(state io.Reader) error {
	gdr.state = &googleDataformRepositoryState{}
	if err := json.NewDecoder(state).Decode(gdr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdr.Type(), gdr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdr *Resource) State() (*googleDataformRepositoryState, bool) {
	return gdr.state, gdr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdr *Resource) StateMust() *googleDataformRepositoryState {
	if gdr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdr.Type(), gdr.LocalName()))
	}
	return gdr.state
}

// Args contains the configurations for google_dataform_repository.
type Args struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NpmrcEnvironmentVariablesSecretVersion: string, optional
	NpmrcEnvironmentVariablesSecretVersion terra.StringValue `hcl:"npmrc_environment_variables_secret_version,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// GitRemoteSettings: optional
	GitRemoteSettings *GitRemoteSettings `hcl:"git_remote_settings,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// WorkspaceCompilationOverrides: optional
	WorkspaceCompilationOverrides *WorkspaceCompilationOverrides `hcl:"workspace_compilation_overrides,block"`
}

type googleDataformRepositoryAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of google_dataform_repository.
func (gdr googleDataformRepositoryAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdr.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_dataform_repository.
func (gdr googleDataformRepositoryAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdr.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_dataform_repository.
func (gdr googleDataformRepositoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdr.ref.Append("id"))
}

// Labels returns a reference to field labels of google_dataform_repository.
func (gdr googleDataformRepositoryAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdr.ref.Append("labels"))
}

// Name returns a reference to field name of google_dataform_repository.
func (gdr googleDataformRepositoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdr.ref.Append("name"))
}

// NpmrcEnvironmentVariablesSecretVersion returns a reference to field npmrc_environment_variables_secret_version of google_dataform_repository.
func (gdr googleDataformRepositoryAttributes) NpmrcEnvironmentVariablesSecretVersion() terra.StringValue {
	return terra.ReferenceAsString(gdr.ref.Append("npmrc_environment_variables_secret_version"))
}

// Project returns a reference to field project of google_dataform_repository.
func (gdr googleDataformRepositoryAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdr.ref.Append("project"))
}

// Region returns a reference to field region of google_dataform_repository.
func (gdr googleDataformRepositoryAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gdr.ref.Append("region"))
}

// ServiceAccount returns a reference to field service_account of google_dataform_repository.
func (gdr googleDataformRepositoryAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(gdr.ref.Append("service_account"))
}

// TerraformLabels returns a reference to field terraform_labels of google_dataform_repository.
func (gdr googleDataformRepositoryAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdr.ref.Append("terraform_labels"))
}

func (gdr googleDataformRepositoryAttributes) GitRemoteSettings() terra.ListValue[GitRemoteSettingsAttributes] {
	return terra.ReferenceAsList[GitRemoteSettingsAttributes](gdr.ref.Append("git_remote_settings"))
}

func (gdr googleDataformRepositoryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdr.ref.Append("timeouts"))
}

func (gdr googleDataformRepositoryAttributes) WorkspaceCompilationOverrides() terra.ListValue[WorkspaceCompilationOverridesAttributes] {
	return terra.ReferenceAsList[WorkspaceCompilationOverridesAttributes](gdr.ref.Append("workspace_compilation_overrides"))
}

type googleDataformRepositoryState struct {
	DisplayName                            string                               `json:"display_name"`
	EffectiveLabels                        map[string]string                    `json:"effective_labels"`
	Id                                     string                               `json:"id"`
	Labels                                 map[string]string                    `json:"labels"`
	Name                                   string                               `json:"name"`
	NpmrcEnvironmentVariablesSecretVersion string                               `json:"npmrc_environment_variables_secret_version"`
	Project                                string                               `json:"project"`
	Region                                 string                               `json:"region"`
	ServiceAccount                         string                               `json:"service_account"`
	TerraformLabels                        map[string]string                    `json:"terraform_labels"`
	GitRemoteSettings                      []GitRemoteSettingsState             `json:"git_remote_settings"`
	Timeouts                               *TimeoutsState                       `json:"timeouts"`
	WorkspaceCompilationOverrides          []WorkspaceCompilationOverridesState `json:"workspace_compilation_overrides"`
}
