// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_router_interface

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_router_interface.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeRouterInterfaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcri *Resource) Type() string {
	return "google_compute_router_interface"
}

// LocalName returns the local name for [Resource].
func (gcri *Resource) LocalName() string {
	return gcri.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcri *Resource) Configuration() interface{} {
	return gcri.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcri *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcri)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcri *Resource) Dependencies() terra.Dependencies {
	return gcri.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcri *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcri.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcri *Resource) Attributes() googleComputeRouterInterfaceAttributes {
	return googleComputeRouterInterfaceAttributes{ref: terra.ReferenceResource(gcri)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcri *Resource) ImportState(state io.Reader) error {
	gcri.state = &googleComputeRouterInterfaceState{}
	if err := json.NewDecoder(state).Decode(gcri.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcri.Type(), gcri.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcri *Resource) State() (*googleComputeRouterInterfaceState, bool) {
	return gcri.state, gcri.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcri *Resource) StateMust() *googleComputeRouterInterfaceState {
	if gcri.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcri.Type(), gcri.LocalName()))
	}
	return gcri.state
}

// Args contains the configurations for google_compute_router_interface.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InterconnectAttachment: string, optional
	InterconnectAttachment terra.StringValue `hcl:"interconnect_attachment,attr"`
	// IpRange: string, optional
	IpRange terra.StringValue `hcl:"ip_range,attr"`
	// IpVersion: string, optional
	IpVersion terra.StringValue `hcl:"ip_version,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivateIpAddress: string, optional
	PrivateIpAddress terra.StringValue `hcl:"private_ip_address,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RedundantInterface: string, optional
	RedundantInterface terra.StringValue `hcl:"redundant_interface,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Router: string, required
	Router terra.StringValue `hcl:"router,attr" validate:"required"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// VpnTunnel: string, optional
	VpnTunnel terra.StringValue `hcl:"vpn_tunnel,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeRouterInterfaceAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_compute_router_interface.
func (gcri googleComputeRouterInterfaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcri.ref.Append("id"))
}

// InterconnectAttachment returns a reference to field interconnect_attachment of google_compute_router_interface.
func (gcri googleComputeRouterInterfaceAttributes) InterconnectAttachment() terra.StringValue {
	return terra.ReferenceAsString(gcri.ref.Append("interconnect_attachment"))
}

// IpRange returns a reference to field ip_range of google_compute_router_interface.
func (gcri googleComputeRouterInterfaceAttributes) IpRange() terra.StringValue {
	return terra.ReferenceAsString(gcri.ref.Append("ip_range"))
}

// IpVersion returns a reference to field ip_version of google_compute_router_interface.
func (gcri googleComputeRouterInterfaceAttributes) IpVersion() terra.StringValue {
	return terra.ReferenceAsString(gcri.ref.Append("ip_version"))
}

// Name returns a reference to field name of google_compute_router_interface.
func (gcri googleComputeRouterInterfaceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcri.ref.Append("name"))
}

// PrivateIpAddress returns a reference to field private_ip_address of google_compute_router_interface.
func (gcri googleComputeRouterInterfaceAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(gcri.ref.Append("private_ip_address"))
}

// Project returns a reference to field project of google_compute_router_interface.
func (gcri googleComputeRouterInterfaceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcri.ref.Append("project"))
}

// RedundantInterface returns a reference to field redundant_interface of google_compute_router_interface.
func (gcri googleComputeRouterInterfaceAttributes) RedundantInterface() terra.StringValue {
	return terra.ReferenceAsString(gcri.ref.Append("redundant_interface"))
}

// Region returns a reference to field region of google_compute_router_interface.
func (gcri googleComputeRouterInterfaceAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcri.ref.Append("region"))
}

// Router returns a reference to field router of google_compute_router_interface.
func (gcri googleComputeRouterInterfaceAttributes) Router() terra.StringValue {
	return terra.ReferenceAsString(gcri.ref.Append("router"))
}

// Subnetwork returns a reference to field subnetwork of google_compute_router_interface.
func (gcri googleComputeRouterInterfaceAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(gcri.ref.Append("subnetwork"))
}

// VpnTunnel returns a reference to field vpn_tunnel of google_compute_router_interface.
func (gcri googleComputeRouterInterfaceAttributes) VpnTunnel() terra.StringValue {
	return terra.ReferenceAsString(gcri.ref.Append("vpn_tunnel"))
}

func (gcri googleComputeRouterInterfaceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcri.ref.Append("timeouts"))
}

type googleComputeRouterInterfaceState struct {
	Id                     string         `json:"id"`
	InterconnectAttachment string         `json:"interconnect_attachment"`
	IpRange                string         `json:"ip_range"`
	IpVersion              string         `json:"ip_version"`
	Name                   string         `json:"name"`
	PrivateIpAddress       string         `json:"private_ip_address"`
	Project                string         `json:"project"`
	RedundantInterface     string         `json:"redundant_interface"`
	Region                 string         `json:"region"`
	Router                 string         `json:"router"`
	Subnetwork             string         `json:"subnetwork"`
	VpnTunnel              string         `json:"vpn_tunnel"`
	Timeouts               *TimeoutsState `json:"timeouts"`
}
