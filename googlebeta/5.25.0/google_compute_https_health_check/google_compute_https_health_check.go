// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_https_health_check

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_https_health_check.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeHttpsHealthCheckState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gchhc *Resource) Type() string {
	return "google_compute_https_health_check"
}

// LocalName returns the local name for [Resource].
func (gchhc *Resource) LocalName() string {
	return gchhc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gchhc *Resource) Configuration() interface{} {
	return gchhc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gchhc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gchhc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gchhc *Resource) Dependencies() terra.Dependencies {
	return gchhc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gchhc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gchhc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gchhc *Resource) Attributes() googleComputeHttpsHealthCheckAttributes {
	return googleComputeHttpsHealthCheckAttributes{ref: terra.ReferenceResource(gchhc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gchhc *Resource) ImportState(state io.Reader) error {
	gchhc.state = &googleComputeHttpsHealthCheckState{}
	if err := json.NewDecoder(state).Decode(gchhc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gchhc.Type(), gchhc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gchhc *Resource) State() (*googleComputeHttpsHealthCheckState, bool) {
	return gchhc.state, gchhc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gchhc *Resource) StateMust() *googleComputeHttpsHealthCheckState {
	if gchhc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gchhc.Type(), gchhc.LocalName()))
	}
	return gchhc.state
}

// Args contains the configurations for google_compute_https_health_check.
type Args struct {
	// CheckIntervalSec: number, optional
	CheckIntervalSec terra.NumberValue `hcl:"check_interval_sec,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// HealthyThreshold: number, optional
	HealthyThreshold terra.NumberValue `hcl:"healthy_threshold,attr"`
	// Host: string, optional
	Host terra.StringValue `hcl:"host,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RequestPath: string, optional
	RequestPath terra.StringValue `hcl:"request_path,attr"`
	// TimeoutSec: number, optional
	TimeoutSec terra.NumberValue `hcl:"timeout_sec,attr"`
	// UnhealthyThreshold: number, optional
	UnhealthyThreshold terra.NumberValue `hcl:"unhealthy_threshold,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeHttpsHealthCheckAttributes struct {
	ref terra.Reference
}

// CheckIntervalSec returns a reference to field check_interval_sec of google_compute_https_health_check.
func (gchhc googleComputeHttpsHealthCheckAttributes) CheckIntervalSec() terra.NumberValue {
	return terra.ReferenceAsNumber(gchhc.ref.Append("check_interval_sec"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_https_health_check.
func (gchhc googleComputeHttpsHealthCheckAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gchhc.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_https_health_check.
func (gchhc googleComputeHttpsHealthCheckAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gchhc.ref.Append("description"))
}

// HealthyThreshold returns a reference to field healthy_threshold of google_compute_https_health_check.
func (gchhc googleComputeHttpsHealthCheckAttributes) HealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(gchhc.ref.Append("healthy_threshold"))
}

// Host returns a reference to field host of google_compute_https_health_check.
func (gchhc googleComputeHttpsHealthCheckAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(gchhc.ref.Append("host"))
}

// Id returns a reference to field id of google_compute_https_health_check.
func (gchhc googleComputeHttpsHealthCheckAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gchhc.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_https_health_check.
func (gchhc googleComputeHttpsHealthCheckAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gchhc.ref.Append("name"))
}

// Port returns a reference to field port of google_compute_https_health_check.
func (gchhc googleComputeHttpsHealthCheckAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(gchhc.ref.Append("port"))
}

// Project returns a reference to field project of google_compute_https_health_check.
func (gchhc googleComputeHttpsHealthCheckAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gchhc.ref.Append("project"))
}

// RequestPath returns a reference to field request_path of google_compute_https_health_check.
func (gchhc googleComputeHttpsHealthCheckAttributes) RequestPath() terra.StringValue {
	return terra.ReferenceAsString(gchhc.ref.Append("request_path"))
}

// SelfLink returns a reference to field self_link of google_compute_https_health_check.
func (gchhc googleComputeHttpsHealthCheckAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gchhc.ref.Append("self_link"))
}

// TimeoutSec returns a reference to field timeout_sec of google_compute_https_health_check.
func (gchhc googleComputeHttpsHealthCheckAttributes) TimeoutSec() terra.NumberValue {
	return terra.ReferenceAsNumber(gchhc.ref.Append("timeout_sec"))
}

// UnhealthyThreshold returns a reference to field unhealthy_threshold of google_compute_https_health_check.
func (gchhc googleComputeHttpsHealthCheckAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(gchhc.ref.Append("unhealthy_threshold"))
}

func (gchhc googleComputeHttpsHealthCheckAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gchhc.ref.Append("timeouts"))
}

type googleComputeHttpsHealthCheckState struct {
	CheckIntervalSec   float64        `json:"check_interval_sec"`
	CreationTimestamp  string         `json:"creation_timestamp"`
	Description        string         `json:"description"`
	HealthyThreshold   float64        `json:"healthy_threshold"`
	Host               string         `json:"host"`
	Id                 string         `json:"id"`
	Name               string         `json:"name"`
	Port               float64        `json:"port"`
	Project            string         `json:"project"`
	RequestPath        string         `json:"request_path"`
	SelfLink           string         `json:"self_link"`
	TimeoutSec         float64        `json:"timeout_sec"`
	UnhealthyThreshold float64        `json:"unhealthy_threshold"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
