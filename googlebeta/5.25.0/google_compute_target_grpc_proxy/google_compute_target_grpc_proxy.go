// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_target_grpc_proxy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_target_grpc_proxy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeTargetGrpcProxyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gctgp *Resource) Type() string {
	return "google_compute_target_grpc_proxy"
}

// LocalName returns the local name for [Resource].
func (gctgp *Resource) LocalName() string {
	return gctgp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gctgp *Resource) Configuration() interface{} {
	return gctgp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gctgp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gctgp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gctgp *Resource) Dependencies() terra.Dependencies {
	return gctgp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gctgp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gctgp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gctgp *Resource) Attributes() googleComputeTargetGrpcProxyAttributes {
	return googleComputeTargetGrpcProxyAttributes{ref: terra.ReferenceResource(gctgp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gctgp *Resource) ImportState(state io.Reader) error {
	gctgp.state = &googleComputeTargetGrpcProxyState{}
	if err := json.NewDecoder(state).Decode(gctgp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gctgp.Type(), gctgp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gctgp *Resource) State() (*googleComputeTargetGrpcProxyState, bool) {
	return gctgp.state, gctgp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gctgp *Resource) StateMust() *googleComputeTargetGrpcProxyState {
	if gctgp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gctgp.Type(), gctgp.LocalName()))
	}
	return gctgp.state
}

// Args contains the configurations for google_compute_target_grpc_proxy.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// UrlMap: string, optional
	UrlMap terra.StringValue `hcl:"url_map,attr"`
	// ValidateForProxyless: bool, optional
	ValidateForProxyless terra.BoolValue `hcl:"validate_for_proxyless,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeTargetGrpcProxyAttributes struct {
	ref terra.Reference
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_target_grpc_proxy.
func (gctgp googleComputeTargetGrpcProxyAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gctgp.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_target_grpc_proxy.
func (gctgp googleComputeTargetGrpcProxyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gctgp.ref.Append("description"))
}

// Fingerprint returns a reference to field fingerprint of google_compute_target_grpc_proxy.
func (gctgp googleComputeTargetGrpcProxyAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(gctgp.ref.Append("fingerprint"))
}

// Id returns a reference to field id of google_compute_target_grpc_proxy.
func (gctgp googleComputeTargetGrpcProxyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gctgp.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_target_grpc_proxy.
func (gctgp googleComputeTargetGrpcProxyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gctgp.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_target_grpc_proxy.
func (gctgp googleComputeTargetGrpcProxyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gctgp.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_compute_target_grpc_proxy.
func (gctgp googleComputeTargetGrpcProxyAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gctgp.ref.Append("self_link"))
}

// SelfLinkWithId returns a reference to field self_link_with_id of google_compute_target_grpc_proxy.
func (gctgp googleComputeTargetGrpcProxyAttributes) SelfLinkWithId() terra.StringValue {
	return terra.ReferenceAsString(gctgp.ref.Append("self_link_with_id"))
}

// UrlMap returns a reference to field url_map of google_compute_target_grpc_proxy.
func (gctgp googleComputeTargetGrpcProxyAttributes) UrlMap() terra.StringValue {
	return terra.ReferenceAsString(gctgp.ref.Append("url_map"))
}

// ValidateForProxyless returns a reference to field validate_for_proxyless of google_compute_target_grpc_proxy.
func (gctgp googleComputeTargetGrpcProxyAttributes) ValidateForProxyless() terra.BoolValue {
	return terra.ReferenceAsBool(gctgp.ref.Append("validate_for_proxyless"))
}

func (gctgp googleComputeTargetGrpcProxyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gctgp.ref.Append("timeouts"))
}

type googleComputeTargetGrpcProxyState struct {
	CreationTimestamp    string         `json:"creation_timestamp"`
	Description          string         `json:"description"`
	Fingerprint          string         `json:"fingerprint"`
	Id                   string         `json:"id"`
	Name                 string         `json:"name"`
	Project              string         `json:"project"`
	SelfLink             string         `json:"self_link"`
	SelfLinkWithId       string         `json:"self_link_with_id"`
	UrlMap               string         `json:"url_map"`
	ValidateForProxyless bool           `json:"validate_for_proxyless"`
	Timeouts             *TimeoutsState `json:"timeouts"`
}
