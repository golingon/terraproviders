// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_region_ssl_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_region_ssl_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeRegionSslCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcrsc *Resource) Type() string {
	return "google_compute_region_ssl_certificate"
}

// LocalName returns the local name for [Resource].
func (gcrsc *Resource) LocalName() string {
	return gcrsc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcrsc *Resource) Configuration() interface{} {
	return gcrsc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcrsc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcrsc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcrsc *Resource) Dependencies() terra.Dependencies {
	return gcrsc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcrsc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcrsc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcrsc *Resource) Attributes() googleComputeRegionSslCertificateAttributes {
	return googleComputeRegionSslCertificateAttributes{ref: terra.ReferenceResource(gcrsc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcrsc *Resource) ImportState(state io.Reader) error {
	gcrsc.state = &googleComputeRegionSslCertificateState{}
	if err := json.NewDecoder(state).Decode(gcrsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcrsc.Type(), gcrsc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcrsc *Resource) State() (*googleComputeRegionSslCertificateState, bool) {
	return gcrsc.state, gcrsc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcrsc *Resource) StateMust() *googleComputeRegionSslCertificateState {
	if gcrsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcrsc.Type(), gcrsc.LocalName()))
	}
	return gcrsc.state
}

// Args contains the configurations for google_compute_region_ssl_certificate.
type Args struct {
	// Certificate: string, required
	Certificate terra.StringValue `hcl:"certificate,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// PrivateKey: string, required
	PrivateKey terra.StringValue `hcl:"private_key,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeRegionSslCertificateAttributes struct {
	ref terra.Reference
}

// Certificate returns a reference to field certificate of google_compute_region_ssl_certificate.
func (gcrsc googleComputeRegionSslCertificateAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(gcrsc.ref.Append("certificate"))
}

// CertificateId returns a reference to field certificate_id of google_compute_region_ssl_certificate.
func (gcrsc googleComputeRegionSslCertificateAttributes) CertificateId() terra.NumberValue {
	return terra.ReferenceAsNumber(gcrsc.ref.Append("certificate_id"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_region_ssl_certificate.
func (gcrsc googleComputeRegionSslCertificateAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcrsc.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_region_ssl_certificate.
func (gcrsc googleComputeRegionSslCertificateAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcrsc.ref.Append("description"))
}

// ExpireTime returns a reference to field expire_time of google_compute_region_ssl_certificate.
func (gcrsc googleComputeRegionSslCertificateAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(gcrsc.ref.Append("expire_time"))
}

// Id returns a reference to field id of google_compute_region_ssl_certificate.
func (gcrsc googleComputeRegionSslCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcrsc.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_region_ssl_certificate.
func (gcrsc googleComputeRegionSslCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcrsc.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of google_compute_region_ssl_certificate.
func (gcrsc googleComputeRegionSslCertificateAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(gcrsc.ref.Append("name_prefix"))
}

// PrivateKey returns a reference to field private_key of google_compute_region_ssl_certificate.
func (gcrsc googleComputeRegionSslCertificateAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(gcrsc.ref.Append("private_key"))
}

// Project returns a reference to field project of google_compute_region_ssl_certificate.
func (gcrsc googleComputeRegionSslCertificateAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcrsc.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_region_ssl_certificate.
func (gcrsc googleComputeRegionSslCertificateAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcrsc.ref.Append("region"))
}

// SelfLink returns a reference to field self_link of google_compute_region_ssl_certificate.
func (gcrsc googleComputeRegionSslCertificateAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcrsc.ref.Append("self_link"))
}

func (gcrsc googleComputeRegionSslCertificateAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcrsc.ref.Append("timeouts"))
}

type googleComputeRegionSslCertificateState struct {
	Certificate       string         `json:"certificate"`
	CertificateId     float64        `json:"certificate_id"`
	CreationTimestamp string         `json:"creation_timestamp"`
	Description       string         `json:"description"`
	ExpireTime        string         `json:"expire_time"`
	Id                string         `json:"id"`
	Name              string         `json:"name"`
	NamePrefix        string         `json:"name_prefix"`
	PrivateKey        string         `json:"private_key"`
	Project           string         `json:"project"`
	Region            string         `json:"region"`
	SelfLink          string         `json:"self_link"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
