// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_network_services_grpc_route

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rules struct {
	// RulesAction: optional
	Action *RulesAction `hcl:"action,block"`
	// RulesMatches: min=0
	Matches []RulesMatches `hcl:"matches,block" validate:"min=0"`
}

type RulesAction struct {
	// Timeout: string, optional
	Timeout terra.StringValue `hcl:"timeout,attr"`
	// RulesActionDestinations: min=0
	Destinations []RulesActionDestinations `hcl:"destinations,block" validate:"min=0"`
	// RulesActionFaultInjectionPolicy: optional
	FaultInjectionPolicy *RulesActionFaultInjectionPolicy `hcl:"fault_injection_policy,block"`
	// RulesActionRetryPolicy: optional
	RetryPolicy *RulesActionRetryPolicy `hcl:"retry_policy,block"`
}

type RulesActionDestinations struct {
	// ServiceName: string, optional
	ServiceName terra.StringValue `hcl:"service_name,attr"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type RulesActionFaultInjectionPolicy struct {
	// RulesActionFaultInjectionPolicyAbort: optional
	Abort *RulesActionFaultInjectionPolicyAbort `hcl:"abort,block"`
	// RulesActionFaultInjectionPolicyDelay: optional
	Delay *RulesActionFaultInjectionPolicyDelay `hcl:"delay,block"`
}

type RulesActionFaultInjectionPolicyAbort struct {
	// HttpStatus: number, optional
	HttpStatus terra.NumberValue `hcl:"http_status,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type RulesActionFaultInjectionPolicyDelay struct {
	// FixedDelay: string, optional
	FixedDelay terra.StringValue `hcl:"fixed_delay,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type RulesActionRetryPolicy struct {
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// RetryConditions: list of string, optional
	RetryConditions terra.ListValue[terra.StringValue] `hcl:"retry_conditions,attr"`
}

type RulesMatches struct {
	// RulesMatchesHeaders: min=0
	Headers []RulesMatchesHeaders `hcl:"headers,block" validate:"min=0"`
	// RulesMatchesMethod: optional
	Method *RulesMatchesMethod `hcl:"method,block"`
}

type RulesMatchesHeaders struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type RulesMatchesMethod struct {
	// CaseSensitive: bool, optional
	CaseSensitive terra.BoolValue `hcl:"case_sensitive,attr"`
	// GrpcMethod: string, required
	GrpcMethod terra.StringValue `hcl:"grpc_method,attr" validate:"required"`
	// GrpcService: string, required
	GrpcService terra.StringValue `hcl:"grpc_service,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RulesAttributes struct {
	ref terra.Reference
}

func (r RulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RulesAttributes) InternalWithRef(ref terra.Reference) RulesAttributes {
	return RulesAttributes{ref: ref}
}

func (r RulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RulesAttributes) Action() terra.ListValue[RulesActionAttributes] {
	return terra.ReferenceAsList[RulesActionAttributes](r.ref.Append("action"))
}

func (r RulesAttributes) Matches() terra.ListValue[RulesMatchesAttributes] {
	return terra.ReferenceAsList[RulesMatchesAttributes](r.ref.Append("matches"))
}

type RulesActionAttributes struct {
	ref terra.Reference
}

func (a RulesActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a RulesActionAttributes) InternalWithRef(ref terra.Reference) RulesActionAttributes {
	return RulesActionAttributes{ref: ref}
}

func (a RulesActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a RulesActionAttributes) Timeout() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("timeout"))
}

func (a RulesActionAttributes) Destinations() terra.ListValue[RulesActionDestinationsAttributes] {
	return terra.ReferenceAsList[RulesActionDestinationsAttributes](a.ref.Append("destinations"))
}

func (a RulesActionAttributes) FaultInjectionPolicy() terra.ListValue[RulesActionFaultInjectionPolicyAttributes] {
	return terra.ReferenceAsList[RulesActionFaultInjectionPolicyAttributes](a.ref.Append("fault_injection_policy"))
}

func (a RulesActionAttributes) RetryPolicy() terra.ListValue[RulesActionRetryPolicyAttributes] {
	return terra.ReferenceAsList[RulesActionRetryPolicyAttributes](a.ref.Append("retry_policy"))
}

type RulesActionDestinationsAttributes struct {
	ref terra.Reference
}

func (d RulesActionDestinationsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d RulesActionDestinationsAttributes) InternalWithRef(ref terra.Reference) RulesActionDestinationsAttributes {
	return RulesActionDestinationsAttributes{ref: ref}
}

func (d RulesActionDestinationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d RulesActionDestinationsAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("service_name"))
}

func (d RulesActionDestinationsAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("weight"))
}

type RulesActionFaultInjectionPolicyAttributes struct {
	ref terra.Reference
}

func (fip RulesActionFaultInjectionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return fip.ref, nil
}

func (fip RulesActionFaultInjectionPolicyAttributes) InternalWithRef(ref terra.Reference) RulesActionFaultInjectionPolicyAttributes {
	return RulesActionFaultInjectionPolicyAttributes{ref: ref}
}

func (fip RulesActionFaultInjectionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fip.ref.InternalTokens()
}

func (fip RulesActionFaultInjectionPolicyAttributes) Abort() terra.ListValue[RulesActionFaultInjectionPolicyAbortAttributes] {
	return terra.ReferenceAsList[RulesActionFaultInjectionPolicyAbortAttributes](fip.ref.Append("abort"))
}

func (fip RulesActionFaultInjectionPolicyAttributes) Delay() terra.ListValue[RulesActionFaultInjectionPolicyDelayAttributes] {
	return terra.ReferenceAsList[RulesActionFaultInjectionPolicyDelayAttributes](fip.ref.Append("delay"))
}

type RulesActionFaultInjectionPolicyAbortAttributes struct {
	ref terra.Reference
}

func (a RulesActionFaultInjectionPolicyAbortAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a RulesActionFaultInjectionPolicyAbortAttributes) InternalWithRef(ref terra.Reference) RulesActionFaultInjectionPolicyAbortAttributes {
	return RulesActionFaultInjectionPolicyAbortAttributes{ref: ref}
}

func (a RulesActionFaultInjectionPolicyAbortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a RulesActionFaultInjectionPolicyAbortAttributes) HttpStatus() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("http_status"))
}

func (a RulesActionFaultInjectionPolicyAbortAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("percentage"))
}

type RulesActionFaultInjectionPolicyDelayAttributes struct {
	ref terra.Reference
}

func (d RulesActionFaultInjectionPolicyDelayAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d RulesActionFaultInjectionPolicyDelayAttributes) InternalWithRef(ref terra.Reference) RulesActionFaultInjectionPolicyDelayAttributes {
	return RulesActionFaultInjectionPolicyDelayAttributes{ref: ref}
}

func (d RulesActionFaultInjectionPolicyDelayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d RulesActionFaultInjectionPolicyDelayAttributes) FixedDelay() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("fixed_delay"))
}

func (d RulesActionFaultInjectionPolicyDelayAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("percentage"))
}

type RulesActionRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp RulesActionRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RulesActionRetryPolicyAttributes) InternalWithRef(ref terra.Reference) RulesActionRetryPolicyAttributes {
	return RulesActionRetryPolicyAttributes{ref: ref}
}

func (rp RulesActionRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RulesActionRetryPolicyAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("num_retries"))
}

func (rp RulesActionRetryPolicyAttributes) RetryConditions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rp.ref.Append("retry_conditions"))
}

type RulesMatchesAttributes struct {
	ref terra.Reference
}

func (m RulesMatchesAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m RulesMatchesAttributes) InternalWithRef(ref terra.Reference) RulesMatchesAttributes {
	return RulesMatchesAttributes{ref: ref}
}

func (m RulesMatchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m RulesMatchesAttributes) Headers() terra.ListValue[RulesMatchesHeadersAttributes] {
	return terra.ReferenceAsList[RulesMatchesHeadersAttributes](m.ref.Append("headers"))
}

func (m RulesMatchesAttributes) Method() terra.ListValue[RulesMatchesMethodAttributes] {
	return terra.ReferenceAsList[RulesMatchesMethodAttributes](m.ref.Append("method"))
}

type RulesMatchesHeadersAttributes struct {
	ref terra.Reference
}

func (h RulesMatchesHeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h RulesMatchesHeadersAttributes) InternalWithRef(ref terra.Reference) RulesMatchesHeadersAttributes {
	return RulesMatchesHeadersAttributes{ref: ref}
}

func (h RulesMatchesHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h RulesMatchesHeadersAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("key"))
}

func (h RulesMatchesHeadersAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("type"))
}

func (h RulesMatchesHeadersAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("value"))
}

type RulesMatchesMethodAttributes struct {
	ref terra.Reference
}

func (m RulesMatchesMethodAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m RulesMatchesMethodAttributes) InternalWithRef(ref terra.Reference) RulesMatchesMethodAttributes {
	return RulesMatchesMethodAttributes{ref: ref}
}

func (m RulesMatchesMethodAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m RulesMatchesMethodAttributes) CaseSensitive() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("case_sensitive"))
}

func (m RulesMatchesMethodAttributes) GrpcMethod() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("grpc_method"))
}

func (m RulesMatchesMethodAttributes) GrpcService() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("grpc_service"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RulesState struct {
	Action  []RulesActionState  `json:"action"`
	Matches []RulesMatchesState `json:"matches"`
}

type RulesActionState struct {
	Timeout              string                                 `json:"timeout"`
	Destinations         []RulesActionDestinationsState         `json:"destinations"`
	FaultInjectionPolicy []RulesActionFaultInjectionPolicyState `json:"fault_injection_policy"`
	RetryPolicy          []RulesActionRetryPolicyState          `json:"retry_policy"`
}

type RulesActionDestinationsState struct {
	ServiceName string  `json:"service_name"`
	Weight      float64 `json:"weight"`
}

type RulesActionFaultInjectionPolicyState struct {
	Abort []RulesActionFaultInjectionPolicyAbortState `json:"abort"`
	Delay []RulesActionFaultInjectionPolicyDelayState `json:"delay"`
}

type RulesActionFaultInjectionPolicyAbortState struct {
	HttpStatus float64 `json:"http_status"`
	Percentage float64 `json:"percentage"`
}

type RulesActionFaultInjectionPolicyDelayState struct {
	FixedDelay string  `json:"fixed_delay"`
	Percentage float64 `json:"percentage"`
}

type RulesActionRetryPolicyState struct {
	NumRetries      float64  `json:"num_retries"`
	RetryConditions []string `json:"retry_conditions"`
}

type RulesMatchesState struct {
	Headers []RulesMatchesHeadersState `json:"headers"`
	Method  []RulesMatchesMethodState  `json:"method"`
}

type RulesMatchesHeadersState struct {
	Key   string `json:"key"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type RulesMatchesMethodState struct {
	CaseSensitive bool   `json:"case_sensitive"`
	GrpcMethod    string `json:"grpc_method"`
	GrpcService   string `json:"grpc_service"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
