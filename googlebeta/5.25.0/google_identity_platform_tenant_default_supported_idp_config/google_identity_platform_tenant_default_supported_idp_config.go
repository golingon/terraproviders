// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_identity_platform_tenant_default_supported_idp_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_identity_platform_tenant_default_supported_idp_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleIdentityPlatformTenantDefaultSupportedIdpConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (giptdsic *Resource) Type() string {
	return "google_identity_platform_tenant_default_supported_idp_config"
}

// LocalName returns the local name for [Resource].
func (giptdsic *Resource) LocalName() string {
	return giptdsic.Name
}

// Configuration returns the configuration (args) for [Resource].
func (giptdsic *Resource) Configuration() interface{} {
	return giptdsic.Args
}

// DependOn is used for other resources to depend on [Resource].
func (giptdsic *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(giptdsic)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (giptdsic *Resource) Dependencies() terra.Dependencies {
	return giptdsic.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (giptdsic *Resource) LifecycleManagement() *terra.Lifecycle {
	return giptdsic.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (giptdsic *Resource) Attributes() googleIdentityPlatformTenantDefaultSupportedIdpConfigAttributes {
	return googleIdentityPlatformTenantDefaultSupportedIdpConfigAttributes{ref: terra.ReferenceResource(giptdsic)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (giptdsic *Resource) ImportState(state io.Reader) error {
	giptdsic.state = &googleIdentityPlatformTenantDefaultSupportedIdpConfigState{}
	if err := json.NewDecoder(state).Decode(giptdsic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", giptdsic.Type(), giptdsic.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (giptdsic *Resource) State() (*googleIdentityPlatformTenantDefaultSupportedIdpConfigState, bool) {
	return giptdsic.state, giptdsic.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (giptdsic *Resource) StateMust() *googleIdentityPlatformTenantDefaultSupportedIdpConfigState {
	if giptdsic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", giptdsic.Type(), giptdsic.LocalName()))
	}
	return giptdsic.state
}

// Args contains the configurations for google_identity_platform_tenant_default_supported_idp_config.
type Args struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, required
	ClientSecret terra.StringValue `hcl:"client_secret,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdpId: string, required
	IdpId terra.StringValue `hcl:"idp_id,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Tenant: string, required
	Tenant terra.StringValue `hcl:"tenant,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleIdentityPlatformTenantDefaultSupportedIdpConfigAttributes struct {
	ref terra.Reference
}

// ClientId returns a reference to field client_id of google_identity_platform_tenant_default_supported_idp_config.
func (giptdsic googleIdentityPlatformTenantDefaultSupportedIdpConfigAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(giptdsic.ref.Append("client_id"))
}

// ClientSecret returns a reference to field client_secret of google_identity_platform_tenant_default_supported_idp_config.
func (giptdsic googleIdentityPlatformTenantDefaultSupportedIdpConfigAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(giptdsic.ref.Append("client_secret"))
}

// Enabled returns a reference to field enabled of google_identity_platform_tenant_default_supported_idp_config.
func (giptdsic googleIdentityPlatformTenantDefaultSupportedIdpConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(giptdsic.ref.Append("enabled"))
}

// Id returns a reference to field id of google_identity_platform_tenant_default_supported_idp_config.
func (giptdsic googleIdentityPlatformTenantDefaultSupportedIdpConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(giptdsic.ref.Append("id"))
}

// IdpId returns a reference to field idp_id of google_identity_platform_tenant_default_supported_idp_config.
func (giptdsic googleIdentityPlatformTenantDefaultSupportedIdpConfigAttributes) IdpId() terra.StringValue {
	return terra.ReferenceAsString(giptdsic.ref.Append("idp_id"))
}

// Name returns a reference to field name of google_identity_platform_tenant_default_supported_idp_config.
func (giptdsic googleIdentityPlatformTenantDefaultSupportedIdpConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(giptdsic.ref.Append("name"))
}

// Project returns a reference to field project of google_identity_platform_tenant_default_supported_idp_config.
func (giptdsic googleIdentityPlatformTenantDefaultSupportedIdpConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(giptdsic.ref.Append("project"))
}

// Tenant returns a reference to field tenant of google_identity_platform_tenant_default_supported_idp_config.
func (giptdsic googleIdentityPlatformTenantDefaultSupportedIdpConfigAttributes) Tenant() terra.StringValue {
	return terra.ReferenceAsString(giptdsic.ref.Append("tenant"))
}

func (giptdsic googleIdentityPlatformTenantDefaultSupportedIdpConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](giptdsic.ref.Append("timeouts"))
}

type googleIdentityPlatformTenantDefaultSupportedIdpConfigState struct {
	ClientId     string         `json:"client_id"`
	ClientSecret string         `json:"client_secret"`
	Enabled      bool           `json:"enabled"`
	Id           string         `json:"id"`
	IdpId        string         `json:"idp_id"`
	Name         string         `json:"name"`
	Project      string         `json:"project"`
	Tenant       string         `json:"tenant"`
	Timeouts     *TimeoutsState `json:"timeouts"`
}
