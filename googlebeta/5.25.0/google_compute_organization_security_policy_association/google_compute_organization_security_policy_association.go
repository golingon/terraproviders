// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_organization_security_policy_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_organization_security_policy_association.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeOrganizationSecurityPolicyAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcospa *Resource) Type() string {
	return "google_compute_organization_security_policy_association"
}

// LocalName returns the local name for [Resource].
func (gcospa *Resource) LocalName() string {
	return gcospa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcospa *Resource) Configuration() interface{} {
	return gcospa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcospa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcospa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcospa *Resource) Dependencies() terra.Dependencies {
	return gcospa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcospa *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcospa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcospa *Resource) Attributes() googleComputeOrganizationSecurityPolicyAssociationAttributes {
	return googleComputeOrganizationSecurityPolicyAssociationAttributes{ref: terra.ReferenceResource(gcospa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcospa *Resource) ImportState(state io.Reader) error {
	gcospa.state = &googleComputeOrganizationSecurityPolicyAssociationState{}
	if err := json.NewDecoder(state).Decode(gcospa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcospa.Type(), gcospa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcospa *Resource) State() (*googleComputeOrganizationSecurityPolicyAssociationState, bool) {
	return gcospa.state, gcospa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcospa *Resource) StateMust() *googleComputeOrganizationSecurityPolicyAssociationState {
	if gcospa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcospa.Type(), gcospa.LocalName()))
	}
	return gcospa.state
}

// Args contains the configurations for google_compute_organization_security_policy_association.
type Args struct {
	// AttachmentId: string, required
	AttachmentId terra.StringValue `hcl:"attachment_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyId: string, required
	PolicyId terra.StringValue `hcl:"policy_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeOrganizationSecurityPolicyAssociationAttributes struct {
	ref terra.Reference
}

// AttachmentId returns a reference to field attachment_id of google_compute_organization_security_policy_association.
func (gcospa googleComputeOrganizationSecurityPolicyAssociationAttributes) AttachmentId() terra.StringValue {
	return terra.ReferenceAsString(gcospa.ref.Append("attachment_id"))
}

// DisplayName returns a reference to field display_name of google_compute_organization_security_policy_association.
func (gcospa googleComputeOrganizationSecurityPolicyAssociationAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gcospa.ref.Append("display_name"))
}

// Id returns a reference to field id of google_compute_organization_security_policy_association.
func (gcospa googleComputeOrganizationSecurityPolicyAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcospa.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_organization_security_policy_association.
func (gcospa googleComputeOrganizationSecurityPolicyAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcospa.ref.Append("name"))
}

// PolicyId returns a reference to field policy_id of google_compute_organization_security_policy_association.
func (gcospa googleComputeOrganizationSecurityPolicyAssociationAttributes) PolicyId() terra.StringValue {
	return terra.ReferenceAsString(gcospa.ref.Append("policy_id"))
}

func (gcospa googleComputeOrganizationSecurityPolicyAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcospa.ref.Append("timeouts"))
}

type googleComputeOrganizationSecurityPolicyAssociationState struct {
	AttachmentId string         `json:"attachment_id"`
	DisplayName  string         `json:"display_name"`
	Id           string         `json:"id"`
	Name         string         `json:"name"`
	PolicyId     string         `json:"policy_id"`
	Timeouts     *TimeoutsState `json:"timeouts"`
}
