// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_redis_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_redis_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *googleRedisInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gri *Resource) Type() string {
	return "google_redis_instance"
}

// LocalName returns the local name for [Resource].
func (gri *Resource) LocalName() string {
	return gri.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gri *Resource) Configuration() interface{} {
	return gri.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gri *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gri)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gri *Resource) Dependencies() terra.Dependencies {
	return gri.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gri *Resource) LifecycleManagement() *terra.Lifecycle {
	return gri.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gri *Resource) Attributes() googleRedisInstanceAttributes {
	return googleRedisInstanceAttributes{ref: terra.ReferenceResource(gri)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gri *Resource) ImportState(state io.Reader) error {
	gri.state = &googleRedisInstanceState{}
	if err := json.NewDecoder(state).Decode(gri.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gri.Type(), gri.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gri *Resource) State() (*googleRedisInstanceState, bool) {
	return gri.state, gri.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gri *Resource) StateMust() *googleRedisInstanceState {
	if gri.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gri.Type(), gri.LocalName()))
	}
	return gri.state
}

// Args contains the configurations for google_redis_instance.
type Args struct {
	// AlternativeLocationId: string, optional
	AlternativeLocationId terra.StringValue `hcl:"alternative_location_id,attr"`
	// AuthEnabled: bool, optional
	AuthEnabled terra.BoolValue `hcl:"auth_enabled,attr"`
	// AuthorizedNetwork: string, optional
	AuthorizedNetwork terra.StringValue `hcl:"authorized_network,attr"`
	// ConnectMode: string, optional
	ConnectMode terra.StringValue `hcl:"connect_mode,attr"`
	// CustomerManagedKey: string, optional
	CustomerManagedKey terra.StringValue `hcl:"customer_managed_key,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LocationId: string, optional
	LocationId terra.StringValue `hcl:"location_id,attr"`
	// MemorySizeGb: number, required
	MemorySizeGb terra.NumberValue `hcl:"memory_size_gb,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ReadReplicasMode: string, optional
	ReadReplicasMode terra.StringValue `hcl:"read_replicas_mode,attr"`
	// RedisConfigs: map of string, optional
	RedisConfigs terra.MapValue[terra.StringValue] `hcl:"redis_configs,attr"`
	// RedisVersion: string, optional
	RedisVersion terra.StringValue `hcl:"redis_version,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ReplicaCount: number, optional
	ReplicaCount terra.NumberValue `hcl:"replica_count,attr"`
	// ReservedIpRange: string, optional
	ReservedIpRange terra.StringValue `hcl:"reserved_ip_range,attr"`
	// SecondaryIpRange: string, optional
	SecondaryIpRange terra.StringValue `hcl:"secondary_ip_range,attr"`
	// Tier: string, optional
	Tier terra.StringValue `hcl:"tier,attr"`
	// TransitEncryptionMode: string, optional
	TransitEncryptionMode terra.StringValue `hcl:"transit_encryption_mode,attr"`
	// MaintenancePolicy: optional
	MaintenancePolicy *MaintenancePolicy `hcl:"maintenance_policy,block"`
	// PersistenceConfig: optional
	PersistenceConfig *PersistenceConfig `hcl:"persistence_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleRedisInstanceAttributes struct {
	ref terra.Reference
}

// AlternativeLocationId returns a reference to field alternative_location_id of google_redis_instance.
func (gri googleRedisInstanceAttributes) AlternativeLocationId() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("alternative_location_id"))
}

// AuthEnabled returns a reference to field auth_enabled of google_redis_instance.
func (gri googleRedisInstanceAttributes) AuthEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(gri.ref.Append("auth_enabled"))
}

// AuthString returns a reference to field auth_string of google_redis_instance.
func (gri googleRedisInstanceAttributes) AuthString() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("auth_string"))
}

// AuthorizedNetwork returns a reference to field authorized_network of google_redis_instance.
func (gri googleRedisInstanceAttributes) AuthorizedNetwork() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("authorized_network"))
}

// ConnectMode returns a reference to field connect_mode of google_redis_instance.
func (gri googleRedisInstanceAttributes) ConnectMode() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("connect_mode"))
}

// CreateTime returns a reference to field create_time of google_redis_instance.
func (gri googleRedisInstanceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("create_time"))
}

// CurrentLocationId returns a reference to field current_location_id of google_redis_instance.
func (gri googleRedisInstanceAttributes) CurrentLocationId() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("current_location_id"))
}

// CustomerManagedKey returns a reference to field customer_managed_key of google_redis_instance.
func (gri googleRedisInstanceAttributes) CustomerManagedKey() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("customer_managed_key"))
}

// DisplayName returns a reference to field display_name of google_redis_instance.
func (gri googleRedisInstanceAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_redis_instance.
func (gri googleRedisInstanceAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gri.ref.Append("effective_labels"))
}

// Host returns a reference to field host of google_redis_instance.
func (gri googleRedisInstanceAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("host"))
}

// Id returns a reference to field id of google_redis_instance.
func (gri googleRedisInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("id"))
}

// Labels returns a reference to field labels of google_redis_instance.
func (gri googleRedisInstanceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gri.ref.Append("labels"))
}

// LocationId returns a reference to field location_id of google_redis_instance.
func (gri googleRedisInstanceAttributes) LocationId() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("location_id"))
}

// MemorySizeGb returns a reference to field memory_size_gb of google_redis_instance.
func (gri googleRedisInstanceAttributes) MemorySizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(gri.ref.Append("memory_size_gb"))
}

// Name returns a reference to field name of google_redis_instance.
func (gri googleRedisInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("name"))
}

// PersistenceIamIdentity returns a reference to field persistence_iam_identity of google_redis_instance.
func (gri googleRedisInstanceAttributes) PersistenceIamIdentity() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("persistence_iam_identity"))
}

// Port returns a reference to field port of google_redis_instance.
func (gri googleRedisInstanceAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(gri.ref.Append("port"))
}

// Project returns a reference to field project of google_redis_instance.
func (gri googleRedisInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("project"))
}

// ReadEndpoint returns a reference to field read_endpoint of google_redis_instance.
func (gri googleRedisInstanceAttributes) ReadEndpoint() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("read_endpoint"))
}

// ReadEndpointPort returns a reference to field read_endpoint_port of google_redis_instance.
func (gri googleRedisInstanceAttributes) ReadEndpointPort() terra.NumberValue {
	return terra.ReferenceAsNumber(gri.ref.Append("read_endpoint_port"))
}

// ReadReplicasMode returns a reference to field read_replicas_mode of google_redis_instance.
func (gri googleRedisInstanceAttributes) ReadReplicasMode() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("read_replicas_mode"))
}

// RedisConfigs returns a reference to field redis_configs of google_redis_instance.
func (gri googleRedisInstanceAttributes) RedisConfigs() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gri.ref.Append("redis_configs"))
}

// RedisVersion returns a reference to field redis_version of google_redis_instance.
func (gri googleRedisInstanceAttributes) RedisVersion() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("redis_version"))
}

// Region returns a reference to field region of google_redis_instance.
func (gri googleRedisInstanceAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("region"))
}

// ReplicaCount returns a reference to field replica_count of google_redis_instance.
func (gri googleRedisInstanceAttributes) ReplicaCount() terra.NumberValue {
	return terra.ReferenceAsNumber(gri.ref.Append("replica_count"))
}

// ReservedIpRange returns a reference to field reserved_ip_range of google_redis_instance.
func (gri googleRedisInstanceAttributes) ReservedIpRange() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("reserved_ip_range"))
}

// SecondaryIpRange returns a reference to field secondary_ip_range of google_redis_instance.
func (gri googleRedisInstanceAttributes) SecondaryIpRange() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("secondary_ip_range"))
}

// TerraformLabels returns a reference to field terraform_labels of google_redis_instance.
func (gri googleRedisInstanceAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gri.ref.Append("terraform_labels"))
}

// Tier returns a reference to field tier of google_redis_instance.
func (gri googleRedisInstanceAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("tier"))
}

// TransitEncryptionMode returns a reference to field transit_encryption_mode of google_redis_instance.
func (gri googleRedisInstanceAttributes) TransitEncryptionMode() terra.StringValue {
	return terra.ReferenceAsString(gri.ref.Append("transit_encryption_mode"))
}

func (gri googleRedisInstanceAttributes) MaintenanceSchedule() terra.ListValue[MaintenanceScheduleAttributes] {
	return terra.ReferenceAsList[MaintenanceScheduleAttributes](gri.ref.Append("maintenance_schedule"))
}

func (gri googleRedisInstanceAttributes) Nodes() terra.ListValue[NodesAttributes] {
	return terra.ReferenceAsList[NodesAttributes](gri.ref.Append("nodes"))
}

func (gri googleRedisInstanceAttributes) ServerCaCerts() terra.ListValue[ServerCaCertsAttributes] {
	return terra.ReferenceAsList[ServerCaCertsAttributes](gri.ref.Append("server_ca_certs"))
}

func (gri googleRedisInstanceAttributes) MaintenancePolicy() terra.ListValue[MaintenancePolicyAttributes] {
	return terra.ReferenceAsList[MaintenancePolicyAttributes](gri.ref.Append("maintenance_policy"))
}

func (gri googleRedisInstanceAttributes) PersistenceConfig() terra.ListValue[PersistenceConfigAttributes] {
	return terra.ReferenceAsList[PersistenceConfigAttributes](gri.ref.Append("persistence_config"))
}

func (gri googleRedisInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gri.ref.Append("timeouts"))
}

type googleRedisInstanceState struct {
	AlternativeLocationId  string                     `json:"alternative_location_id"`
	AuthEnabled            bool                       `json:"auth_enabled"`
	AuthString             string                     `json:"auth_string"`
	AuthorizedNetwork      string                     `json:"authorized_network"`
	ConnectMode            string                     `json:"connect_mode"`
	CreateTime             string                     `json:"create_time"`
	CurrentLocationId      string                     `json:"current_location_id"`
	CustomerManagedKey     string                     `json:"customer_managed_key"`
	DisplayName            string                     `json:"display_name"`
	EffectiveLabels        map[string]string          `json:"effective_labels"`
	Host                   string                     `json:"host"`
	Id                     string                     `json:"id"`
	Labels                 map[string]string          `json:"labels"`
	LocationId             string                     `json:"location_id"`
	MemorySizeGb           float64                    `json:"memory_size_gb"`
	Name                   string                     `json:"name"`
	PersistenceIamIdentity string                     `json:"persistence_iam_identity"`
	Port                   float64                    `json:"port"`
	Project                string                     `json:"project"`
	ReadEndpoint           string                     `json:"read_endpoint"`
	ReadEndpointPort       float64                    `json:"read_endpoint_port"`
	ReadReplicasMode       string                     `json:"read_replicas_mode"`
	RedisConfigs           map[string]string          `json:"redis_configs"`
	RedisVersion           string                     `json:"redis_version"`
	Region                 string                     `json:"region"`
	ReplicaCount           float64                    `json:"replica_count"`
	ReservedIpRange        string                     `json:"reserved_ip_range"`
	SecondaryIpRange       string                     `json:"secondary_ip_range"`
	TerraformLabels        map[string]string          `json:"terraform_labels"`
	Tier                   string                     `json:"tier"`
	TransitEncryptionMode  string                     `json:"transit_encryption_mode"`
	MaintenanceSchedule    []MaintenanceScheduleState `json:"maintenance_schedule"`
	Nodes                  []NodesState               `json:"nodes"`
	ServerCaCerts          []ServerCaCertsState       `json:"server_ca_certs"`
	MaintenancePolicy      []MaintenancePolicyState   `json:"maintenance_policy"`
	PersistenceConfig      []PersistenceConfigState   `json:"persistence_config"`
	Timeouts               *TimeoutsState             `json:"timeouts"`
}
