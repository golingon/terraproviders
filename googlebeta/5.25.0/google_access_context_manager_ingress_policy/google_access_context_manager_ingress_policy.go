// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_access_context_manager_ingress_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_access_context_manager_ingress_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleAccessContextManagerIngressPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gacmip *Resource) Type() string {
	return "google_access_context_manager_ingress_policy"
}

// LocalName returns the local name for [Resource].
func (gacmip *Resource) LocalName() string {
	return gacmip.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gacmip *Resource) Configuration() interface{} {
	return gacmip.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gacmip *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gacmip)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gacmip *Resource) Dependencies() terra.Dependencies {
	return gacmip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gacmip *Resource) LifecycleManagement() *terra.Lifecycle {
	return gacmip.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gacmip *Resource) Attributes() googleAccessContextManagerIngressPolicyAttributes {
	return googleAccessContextManagerIngressPolicyAttributes{ref: terra.ReferenceResource(gacmip)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gacmip *Resource) ImportState(state io.Reader) error {
	gacmip.state = &googleAccessContextManagerIngressPolicyState{}
	if err := json.NewDecoder(state).Decode(gacmip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gacmip.Type(), gacmip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gacmip *Resource) State() (*googleAccessContextManagerIngressPolicyState, bool) {
	return gacmip.state, gacmip.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gacmip *Resource) StateMust() *googleAccessContextManagerIngressPolicyState {
	if gacmip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gacmip.Type(), gacmip.LocalName()))
	}
	return gacmip.state
}

// Args contains the configurations for google_access_context_manager_ingress_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IngressPolicyName: string, required
	IngressPolicyName terra.StringValue `hcl:"ingress_policy_name,attr" validate:"required"`
	// Resource: string, required
	Resource terra.StringValue `hcl:"resource,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleAccessContextManagerIngressPolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_access_context_manager_ingress_policy.
func (gacmip googleAccessContextManagerIngressPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gacmip.ref.Append("id"))
}

// IngressPolicyName returns a reference to field ingress_policy_name of google_access_context_manager_ingress_policy.
func (gacmip googleAccessContextManagerIngressPolicyAttributes) IngressPolicyName() terra.StringValue {
	return terra.ReferenceAsString(gacmip.ref.Append("ingress_policy_name"))
}

// Resource returns a reference to field resource of google_access_context_manager_ingress_policy.
func (gacmip googleAccessContextManagerIngressPolicyAttributes) Resource() terra.StringValue {
	return terra.ReferenceAsString(gacmip.ref.Append("resource"))
}

func (gacmip googleAccessContextManagerIngressPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gacmip.ref.Append("timeouts"))
}

type googleAccessContextManagerIngressPolicyState struct {
	Id                string         `json:"id"`
	IngressPolicyName string         `json:"ingress_policy_name"`
	Resource          string         `json:"resource"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
