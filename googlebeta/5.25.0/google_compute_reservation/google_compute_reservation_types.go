// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_reservation

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ShareSettings struct {
	// ShareType: string, optional
	ShareType terra.StringValue `hcl:"share_type,attr"`
	// ShareSettingsProjectMap: min=0
	ProjectMap []ShareSettingsProjectMap `hcl:"project_map,block" validate:"min=0"`
}

type ShareSettingsProjectMap struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// ProjectId: string, optional
	ProjectId terra.StringValue `hcl:"project_id,attr"`
}

type SpecificReservation struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// SpecificReservationInstanceProperties: required
	InstanceProperties *SpecificReservationInstanceProperties `hcl:"instance_properties,block" validate:"required"`
}

type SpecificReservationInstanceProperties struct {
	// MachineType: string, required
	MachineType terra.StringValue `hcl:"machine_type,attr" validate:"required"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// SpecificReservationInstancePropertiesGuestAccelerators: min=0
	GuestAccelerators []SpecificReservationInstancePropertiesGuestAccelerators `hcl:"guest_accelerators,block" validate:"min=0"`
	// SpecificReservationInstancePropertiesLocalSsds: min=0
	LocalSsds []SpecificReservationInstancePropertiesLocalSsds `hcl:"local_ssds,block" validate:"min=0"`
}

type SpecificReservationInstancePropertiesGuestAccelerators struct {
	// AcceleratorCount: number, required
	AcceleratorCount terra.NumberValue `hcl:"accelerator_count,attr" validate:"required"`
	// AcceleratorType: string, required
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr" validate:"required"`
}

type SpecificReservationInstancePropertiesLocalSsds struct {
	// DiskSizeGb: number, required
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr" validate:"required"`
	// Interface: string, optional
	Interface terra.StringValue `hcl:"interface,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ShareSettingsAttributes struct {
	ref terra.Reference
}

func (ss ShareSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss ShareSettingsAttributes) InternalWithRef(ref terra.Reference) ShareSettingsAttributes {
	return ShareSettingsAttributes{ref: ref}
}

func (ss ShareSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss ShareSettingsAttributes) ShareType() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("share_type"))
}

func (ss ShareSettingsAttributes) ProjectMap() terra.SetValue[ShareSettingsProjectMapAttributes] {
	return terra.ReferenceAsSet[ShareSettingsProjectMapAttributes](ss.ref.Append("project_map"))
}

type ShareSettingsProjectMapAttributes struct {
	ref terra.Reference
}

func (pm ShareSettingsProjectMapAttributes) InternalRef() (terra.Reference, error) {
	return pm.ref, nil
}

func (pm ShareSettingsProjectMapAttributes) InternalWithRef(ref terra.Reference) ShareSettingsProjectMapAttributes {
	return ShareSettingsProjectMapAttributes{ref: ref}
}

func (pm ShareSettingsProjectMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pm.ref.InternalTokens()
}

func (pm ShareSettingsProjectMapAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("id"))
}

func (pm ShareSettingsProjectMapAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("project_id"))
}

type SpecificReservationAttributes struct {
	ref terra.Reference
}

func (sr SpecificReservationAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr SpecificReservationAttributes) InternalWithRef(ref terra.Reference) SpecificReservationAttributes {
	return SpecificReservationAttributes{ref: ref}
}

func (sr SpecificReservationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr SpecificReservationAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(sr.ref.Append("count"))
}

func (sr SpecificReservationAttributes) InUseCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sr.ref.Append("in_use_count"))
}

func (sr SpecificReservationAttributes) InstanceProperties() terra.ListValue[SpecificReservationInstancePropertiesAttributes] {
	return terra.ReferenceAsList[SpecificReservationInstancePropertiesAttributes](sr.ref.Append("instance_properties"))
}

type SpecificReservationInstancePropertiesAttributes struct {
	ref terra.Reference
}

func (ip SpecificReservationInstancePropertiesAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip SpecificReservationInstancePropertiesAttributes) InternalWithRef(ref terra.Reference) SpecificReservationInstancePropertiesAttributes {
	return SpecificReservationInstancePropertiesAttributes{ref: ref}
}

func (ip SpecificReservationInstancePropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip SpecificReservationInstancePropertiesAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("machine_type"))
}

func (ip SpecificReservationInstancePropertiesAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("min_cpu_platform"))
}

func (ip SpecificReservationInstancePropertiesAttributes) GuestAccelerators() terra.ListValue[SpecificReservationInstancePropertiesGuestAcceleratorsAttributes] {
	return terra.ReferenceAsList[SpecificReservationInstancePropertiesGuestAcceleratorsAttributes](ip.ref.Append("guest_accelerators"))
}

func (ip SpecificReservationInstancePropertiesAttributes) LocalSsds() terra.ListValue[SpecificReservationInstancePropertiesLocalSsdsAttributes] {
	return terra.ReferenceAsList[SpecificReservationInstancePropertiesLocalSsdsAttributes](ip.ref.Append("local_ssds"))
}

type SpecificReservationInstancePropertiesGuestAcceleratorsAttributes struct {
	ref terra.Reference
}

func (ga SpecificReservationInstancePropertiesGuestAcceleratorsAttributes) InternalRef() (terra.Reference, error) {
	return ga.ref, nil
}

func (ga SpecificReservationInstancePropertiesGuestAcceleratorsAttributes) InternalWithRef(ref terra.Reference) SpecificReservationInstancePropertiesGuestAcceleratorsAttributes {
	return SpecificReservationInstancePropertiesGuestAcceleratorsAttributes{ref: ref}
}

func (ga SpecificReservationInstancePropertiesGuestAcceleratorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ga.ref.InternalTokens()
}

func (ga SpecificReservationInstancePropertiesGuestAcceleratorsAttributes) AcceleratorCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ga.ref.Append("accelerator_count"))
}

func (ga SpecificReservationInstancePropertiesGuestAcceleratorsAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(ga.ref.Append("accelerator_type"))
}

type SpecificReservationInstancePropertiesLocalSsdsAttributes struct {
	ref terra.Reference
}

func (ls SpecificReservationInstancePropertiesLocalSsdsAttributes) InternalRef() (terra.Reference, error) {
	return ls.ref, nil
}

func (ls SpecificReservationInstancePropertiesLocalSsdsAttributes) InternalWithRef(ref terra.Reference) SpecificReservationInstancePropertiesLocalSsdsAttributes {
	return SpecificReservationInstancePropertiesLocalSsdsAttributes{ref: ref}
}

func (ls SpecificReservationInstancePropertiesLocalSsdsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ls.ref.InternalTokens()
}

func (ls SpecificReservationInstancePropertiesLocalSsdsAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(ls.ref.Append("disk_size_gb"))
}

func (ls SpecificReservationInstancePropertiesLocalSsdsAttributes) Interface() terra.StringValue {
	return terra.ReferenceAsString(ls.ref.Append("interface"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ShareSettingsState struct {
	ShareType  string                         `json:"share_type"`
	ProjectMap []ShareSettingsProjectMapState `json:"project_map"`
}

type ShareSettingsProjectMapState struct {
	Id        string `json:"id"`
	ProjectId string `json:"project_id"`
}

type SpecificReservationState struct {
	Count              float64                                      `json:"count"`
	InUseCount         float64                                      `json:"in_use_count"`
	InstanceProperties []SpecificReservationInstancePropertiesState `json:"instance_properties"`
}

type SpecificReservationInstancePropertiesState struct {
	MachineType       string                                                        `json:"machine_type"`
	MinCpuPlatform    string                                                        `json:"min_cpu_platform"`
	GuestAccelerators []SpecificReservationInstancePropertiesGuestAcceleratorsState `json:"guest_accelerators"`
	LocalSsds         []SpecificReservationInstancePropertiesLocalSsdsState         `json:"local_ssds"`
}

type SpecificReservationInstancePropertiesGuestAcceleratorsState struct {
	AcceleratorCount float64 `json:"accelerator_count"`
	AcceleratorType  string  `json:"accelerator_type"`
}

type SpecificReservationInstancePropertiesLocalSsdsState struct {
	DiskSizeGb float64 `json:"disk_size_gb"`
	Interface  string  `json:"interface"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
