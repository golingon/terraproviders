// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_certificate_manager_dns_authorization

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_certificate_manager_dns_authorization.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCertificateManagerDnsAuthorizationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcmda *Resource) Type() string {
	return "google_certificate_manager_dns_authorization"
}

// LocalName returns the local name for [Resource].
func (gcmda *Resource) LocalName() string {
	return gcmda.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcmda *Resource) Configuration() interface{} {
	return gcmda.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcmda *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcmda)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcmda *Resource) Dependencies() terra.Dependencies {
	return gcmda.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcmda *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcmda.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcmda *Resource) Attributes() googleCertificateManagerDnsAuthorizationAttributes {
	return googleCertificateManagerDnsAuthorizationAttributes{ref: terra.ReferenceResource(gcmda)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcmda *Resource) ImportState(state io.Reader) error {
	gcmda.state = &googleCertificateManagerDnsAuthorizationState{}
	if err := json.NewDecoder(state).Decode(gcmda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcmda.Type(), gcmda.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcmda *Resource) State() (*googleCertificateManagerDnsAuthorizationState, bool) {
	return gcmda.state, gcmda.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcmda *Resource) StateMust() *googleCertificateManagerDnsAuthorizationState {
	if gcmda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcmda.Type(), gcmda.LocalName()))
	}
	return gcmda.state
}

// Args contains the configurations for google_certificate_manager_dns_authorization.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Domain: string, required
	Domain terra.StringValue `hcl:"domain,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleCertificateManagerDnsAuthorizationAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_certificate_manager_dns_authorization.
func (gcmda googleCertificateManagerDnsAuthorizationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcmda.ref.Append("description"))
}

// Domain returns a reference to field domain of google_certificate_manager_dns_authorization.
func (gcmda googleCertificateManagerDnsAuthorizationAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(gcmda.ref.Append("domain"))
}

// EffectiveLabels returns a reference to field effective_labels of google_certificate_manager_dns_authorization.
func (gcmda googleCertificateManagerDnsAuthorizationAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcmda.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_certificate_manager_dns_authorization.
func (gcmda googleCertificateManagerDnsAuthorizationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcmda.ref.Append("id"))
}

// Labels returns a reference to field labels of google_certificate_manager_dns_authorization.
func (gcmda googleCertificateManagerDnsAuthorizationAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcmda.ref.Append("labels"))
}

// Location returns a reference to field location of google_certificate_manager_dns_authorization.
func (gcmda googleCertificateManagerDnsAuthorizationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcmda.ref.Append("location"))
}

// Name returns a reference to field name of google_certificate_manager_dns_authorization.
func (gcmda googleCertificateManagerDnsAuthorizationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcmda.ref.Append("name"))
}

// Project returns a reference to field project of google_certificate_manager_dns_authorization.
func (gcmda googleCertificateManagerDnsAuthorizationAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcmda.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_certificate_manager_dns_authorization.
func (gcmda googleCertificateManagerDnsAuthorizationAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcmda.ref.Append("terraform_labels"))
}

// Type returns a reference to field type of google_certificate_manager_dns_authorization.
func (gcmda googleCertificateManagerDnsAuthorizationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gcmda.ref.Append("type"))
}

func (gcmda googleCertificateManagerDnsAuthorizationAttributes) DnsResourceRecord() terra.ListValue[DnsResourceRecordAttributes] {
	return terra.ReferenceAsList[DnsResourceRecordAttributes](gcmda.ref.Append("dns_resource_record"))
}

func (gcmda googleCertificateManagerDnsAuthorizationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcmda.ref.Append("timeouts"))
}

type googleCertificateManagerDnsAuthorizationState struct {
	Description       string                   `json:"description"`
	Domain            string                   `json:"domain"`
	EffectiveLabels   map[string]string        `json:"effective_labels"`
	Id                string                   `json:"id"`
	Labels            map[string]string        `json:"labels"`
	Location          string                   `json:"location"`
	Name              string                   `json:"name"`
	Project           string                   `json:"project"`
	TerraformLabels   map[string]string        `json:"terraform_labels"`
	Type              string                   `json:"type"`
	DnsResourceRecord []DnsResourceRecordState `json:"dns_resource_record"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
