// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vertexaiindex

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type DeployedIndexes struct{}

type IndexStats struct{}

type Metadata struct {
	// ContentsDeltaUri: string, required
	ContentsDeltaUri terra.StringValue `hcl:"contents_delta_uri,attr" validate:"required"`
	// IsCompleteOverwrite: bool, optional
	IsCompleteOverwrite terra.BoolValue `hcl:"is_complete_overwrite,attr"`
	// Config: optional
	Config *Config `hcl:"config,block"`
}

type Config struct {
	// ApproximateNeighborsCount: number, optional
	ApproximateNeighborsCount terra.NumberValue `hcl:"approximate_neighbors_count,attr"`
	// Dimensions: number, required
	Dimensions terra.NumberValue `hcl:"dimensions,attr" validate:"required"`
	// DistanceMeasureType: string, optional
	DistanceMeasureType terra.StringValue `hcl:"distance_measure_type,attr"`
	// FeatureNormType: string, optional
	FeatureNormType terra.StringValue `hcl:"feature_norm_type,attr"`
	// ShardSize: string, optional
	ShardSize terra.StringValue `hcl:"shard_size,attr"`
	// AlgorithmConfig: optional
	AlgorithmConfig *AlgorithmConfig `hcl:"algorithm_config,block"`
}

type AlgorithmConfig struct {
	// BruteForceConfig: optional
	BruteForceConfig *BruteForceConfig `hcl:"brute_force_config,block"`
	// TreeAhConfig: optional
	TreeAhConfig *TreeAhConfig `hcl:"tree_ah_config,block"`
}

type BruteForceConfig struct{}

type TreeAhConfig struct {
	// LeafNodeEmbeddingCount: number, optional
	LeafNodeEmbeddingCount terra.NumberValue `hcl:"leaf_node_embedding_count,attr"`
	// LeafNodesToSearchPercent: number, optional
	LeafNodesToSearchPercent terra.NumberValue `hcl:"leaf_nodes_to_search_percent,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DeployedIndexesAttributes struct {
	ref terra.Reference
}

func (di DeployedIndexesAttributes) InternalRef() (terra.Reference, error) {
	return di.ref, nil
}

func (di DeployedIndexesAttributes) InternalWithRef(ref terra.Reference) DeployedIndexesAttributes {
	return DeployedIndexesAttributes{ref: ref}
}

func (di DeployedIndexesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return di.ref.InternalTokens()
}

func (di DeployedIndexesAttributes) DeployedIndexId() terra.StringValue {
	return terra.ReferenceAsString(di.ref.Append("deployed_index_id"))
}

func (di DeployedIndexesAttributes) IndexEndpoint() terra.StringValue {
	return terra.ReferenceAsString(di.ref.Append("index_endpoint"))
}

type IndexStatsAttributes struct {
	ref terra.Reference
}

func (is IndexStatsAttributes) InternalRef() (terra.Reference, error) {
	return is.ref, nil
}

func (is IndexStatsAttributes) InternalWithRef(ref terra.Reference) IndexStatsAttributes {
	return IndexStatsAttributes{ref: ref}
}

func (is IndexStatsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return is.ref.InternalTokens()
}

func (is IndexStatsAttributes) ShardsCount() terra.NumberValue {
	return terra.ReferenceAsNumber(is.ref.Append("shards_count"))
}

func (is IndexStatsAttributes) VectorsCount() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("vectors_count"))
}

type MetadataAttributes struct {
	ref terra.Reference
}

func (m MetadataAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MetadataAttributes) InternalWithRef(ref terra.Reference) MetadataAttributes {
	return MetadataAttributes{ref: ref}
}

func (m MetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MetadataAttributes) ContentsDeltaUri() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("contents_delta_uri"))
}

func (m MetadataAttributes) IsCompleteOverwrite() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("is_complete_overwrite"))
}

func (m MetadataAttributes) Config() terra.ListValue[ConfigAttributes] {
	return terra.ReferenceAsList[ConfigAttributes](m.ref.Append("config"))
}

type ConfigAttributes struct {
	ref terra.Reference
}

func (c ConfigAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigAttributes) InternalWithRef(ref terra.Reference) ConfigAttributes {
	return ConfigAttributes{ref: ref}
}

func (c ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigAttributes) ApproximateNeighborsCount() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("approximate_neighbors_count"))
}

func (c ConfigAttributes) Dimensions() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("dimensions"))
}

func (c ConfigAttributes) DistanceMeasureType() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("distance_measure_type"))
}

func (c ConfigAttributes) FeatureNormType() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("feature_norm_type"))
}

func (c ConfigAttributes) ShardSize() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("shard_size"))
}

func (c ConfigAttributes) AlgorithmConfig() terra.ListValue[AlgorithmConfigAttributes] {
	return terra.ReferenceAsList[AlgorithmConfigAttributes](c.ref.Append("algorithm_config"))
}

type AlgorithmConfigAttributes struct {
	ref terra.Reference
}

func (ac AlgorithmConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AlgorithmConfigAttributes) InternalWithRef(ref terra.Reference) AlgorithmConfigAttributes {
	return AlgorithmConfigAttributes{ref: ref}
}

func (ac AlgorithmConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AlgorithmConfigAttributes) BruteForceConfig() terra.ListValue[BruteForceConfigAttributes] {
	return terra.ReferenceAsList[BruteForceConfigAttributes](ac.ref.Append("brute_force_config"))
}

func (ac AlgorithmConfigAttributes) TreeAhConfig() terra.ListValue[TreeAhConfigAttributes] {
	return terra.ReferenceAsList[TreeAhConfigAttributes](ac.ref.Append("tree_ah_config"))
}

type BruteForceConfigAttributes struct {
	ref terra.Reference
}

func (bfc BruteForceConfigAttributes) InternalRef() (terra.Reference, error) {
	return bfc.ref, nil
}

func (bfc BruteForceConfigAttributes) InternalWithRef(ref terra.Reference) BruteForceConfigAttributes {
	return BruteForceConfigAttributes{ref: ref}
}

func (bfc BruteForceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bfc.ref.InternalTokens()
}

type TreeAhConfigAttributes struct {
	ref terra.Reference
}

func (tac TreeAhConfigAttributes) InternalRef() (terra.Reference, error) {
	return tac.ref, nil
}

func (tac TreeAhConfigAttributes) InternalWithRef(ref terra.Reference) TreeAhConfigAttributes {
	return TreeAhConfigAttributes{ref: ref}
}

func (tac TreeAhConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tac.ref.InternalTokens()
}

func (tac TreeAhConfigAttributes) LeafNodeEmbeddingCount() terra.NumberValue {
	return terra.ReferenceAsNumber(tac.ref.Append("leaf_node_embedding_count"))
}

func (tac TreeAhConfigAttributes) LeafNodesToSearchPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(tac.ref.Append("leaf_nodes_to_search_percent"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DeployedIndexesState struct {
	DeployedIndexId string `json:"deployed_index_id"`
	IndexEndpoint   string `json:"index_endpoint"`
}

type IndexStatsState struct {
	ShardsCount  float64 `json:"shards_count"`
	VectorsCount string  `json:"vectors_count"`
}

type MetadataState struct {
	ContentsDeltaUri    string        `json:"contents_delta_uri"`
	IsCompleteOverwrite bool          `json:"is_complete_overwrite"`
	Config              []ConfigState `json:"config"`
}

type ConfigState struct {
	ApproximateNeighborsCount float64                `json:"approximate_neighbors_count"`
	Dimensions                float64                `json:"dimensions"`
	DistanceMeasureType       string                 `json:"distance_measure_type"`
	FeatureNormType           string                 `json:"feature_norm_type"`
	ShardSize                 string                 `json:"shard_size"`
	AlgorithmConfig           []AlgorithmConfigState `json:"algorithm_config"`
}

type AlgorithmConfigState struct {
	BruteForceConfig []BruteForceConfigState `json:"brute_force_config"`
	TreeAhConfig     []TreeAhConfigState     `json:"tree_ah_config"`
}

type BruteForceConfigState struct{}

type TreeAhConfigState struct {
	LeafNodeEmbeddingCount   float64 `json:"leaf_node_embedding_count"`
	LeafNodesToSearchPercent float64 `json:"leaf_nodes_to_search_percent"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
