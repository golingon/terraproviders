// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	gkeonpremvmwarecluster "github.com/golingon/terraproviders/googlebeta/5.1.0/gkeonpremvmwarecluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGkeonpremVmwareCluster creates a new instance of [GkeonpremVmwareCluster].
func NewGkeonpremVmwareCluster(name string, args GkeonpremVmwareClusterArgs) *GkeonpremVmwareCluster {
	return &GkeonpremVmwareCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeonpremVmwareCluster)(nil)

// GkeonpremVmwareCluster represents the Terraform resource google_gkeonprem_vmware_cluster.
type GkeonpremVmwareCluster struct {
	Name      string
	Args      GkeonpremVmwareClusterArgs
	state     *gkeonpremVmwareClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GkeonpremVmwareCluster].
func (gvc *GkeonpremVmwareCluster) Type() string {
	return "google_gkeonprem_vmware_cluster"
}

// LocalName returns the local name for [GkeonpremVmwareCluster].
func (gvc *GkeonpremVmwareCluster) LocalName() string {
	return gvc.Name
}

// Configuration returns the configuration (args) for [GkeonpremVmwareCluster].
func (gvc *GkeonpremVmwareCluster) Configuration() interface{} {
	return gvc.Args
}

// DependOn is used for other resources to depend on [GkeonpremVmwareCluster].
func (gvc *GkeonpremVmwareCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(gvc)
}

// Dependencies returns the list of resources [GkeonpremVmwareCluster] depends_on.
func (gvc *GkeonpremVmwareCluster) Dependencies() terra.Dependencies {
	return gvc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GkeonpremVmwareCluster].
func (gvc *GkeonpremVmwareCluster) LifecycleManagement() *terra.Lifecycle {
	return gvc.Lifecycle
}

// Attributes returns the attributes for [GkeonpremVmwareCluster].
func (gvc *GkeonpremVmwareCluster) Attributes() gkeonpremVmwareClusterAttributes {
	return gkeonpremVmwareClusterAttributes{ref: terra.ReferenceResource(gvc)}
}

// ImportState imports the given attribute values into [GkeonpremVmwareCluster]'s state.
func (gvc *GkeonpremVmwareCluster) ImportState(av io.Reader) error {
	gvc.state = &gkeonpremVmwareClusterState{}
	if err := json.NewDecoder(av).Decode(gvc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gvc.Type(), gvc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GkeonpremVmwareCluster] has state.
func (gvc *GkeonpremVmwareCluster) State() (*gkeonpremVmwareClusterState, bool) {
	return gvc.state, gvc.state != nil
}

// StateMust returns the state for [GkeonpremVmwareCluster]. Panics if the state is nil.
func (gvc *GkeonpremVmwareCluster) StateMust() *gkeonpremVmwareClusterState {
	if gvc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gvc.Type(), gvc.LocalName()))
	}
	return gvc.state
}

// GkeonpremVmwareClusterArgs contains the configurations for google_gkeonprem_vmware_cluster.
type GkeonpremVmwareClusterArgs struct {
	// AdminClusterMembership: string, required
	AdminClusterMembership terra.StringValue `hcl:"admin_cluster_membership,attr" validate:"required"`
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnableControlPlaneV2: bool, optional
	EnableControlPlaneV2 terra.BoolValue `hcl:"enable_control_plane_v2,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OnPremVersion: string, required
	OnPremVersion terra.StringValue `hcl:"on_prem_version,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// VmTrackingEnabled: bool, optional
	VmTrackingEnabled terra.BoolValue `hcl:"vm_tracking_enabled,attr"`
	// Fleet: min=0
	Fleet []gkeonpremvmwarecluster.Fleet `hcl:"fleet,block" validate:"min=0"`
	// Status: min=0
	Status []gkeonpremvmwarecluster.Status `hcl:"status,block" validate:"min=0"`
	// ValidationCheck: min=0
	ValidationCheck []gkeonpremvmwarecluster.ValidationCheck `hcl:"validation_check,block" validate:"min=0"`
	// AntiAffinityGroups: optional
	AntiAffinityGroups *gkeonpremvmwarecluster.AntiAffinityGroups `hcl:"anti_affinity_groups,block"`
	// Authorization: optional
	Authorization *gkeonpremvmwarecluster.Authorization `hcl:"authorization,block"`
	// AutoRepairConfig: optional
	AutoRepairConfig *gkeonpremvmwarecluster.AutoRepairConfig `hcl:"auto_repair_config,block"`
	// ControlPlaneNode: required
	ControlPlaneNode *gkeonpremvmwarecluster.ControlPlaneNode `hcl:"control_plane_node,block" validate:"required"`
	// DataplaneV2: optional
	DataplaneV2 *gkeonpremvmwarecluster.DataplaneV2 `hcl:"dataplane_v2,block"`
	// LoadBalancer: optional
	LoadBalancer *gkeonpremvmwarecluster.LoadBalancer `hcl:"load_balancer,block"`
	// NetworkConfig: optional
	NetworkConfig *gkeonpremvmwarecluster.NetworkConfig `hcl:"network_config,block"`
	// Storage: optional
	Storage *gkeonpremvmwarecluster.Storage `hcl:"storage,block"`
	// Timeouts: optional
	Timeouts *gkeonpremvmwarecluster.Timeouts `hcl:"timeouts,block"`
	// UpgradePolicy: optional
	UpgradePolicy *gkeonpremvmwarecluster.UpgradePolicy `hcl:"upgrade_policy,block"`
	// Vcenter: optional
	Vcenter *gkeonpremvmwarecluster.Vcenter `hcl:"vcenter,block"`
}
type gkeonpremVmwareClusterAttributes struct {
	ref terra.Reference
}

// AdminClusterMembership returns a reference to field admin_cluster_membership of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) AdminClusterMembership() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("admin_cluster_membership"))
}

// Annotations returns a reference to field annotations of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gvc.ref.Append("annotations"))
}

// CreateTime returns a reference to field create_time of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("delete_time"))
}

// Description returns a reference to field description of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("description"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gvc.ref.Append("effective_annotations"))
}

// EnableControlPlaneV2 returns a reference to field enable_control_plane_v2 of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) EnableControlPlaneV2() terra.BoolValue {
	return terra.ReferenceAsBool(gvc.ref.Append("enable_control_plane_v2"))
}

// Endpoint returns a reference to field endpoint of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("endpoint"))
}

// Etag returns a reference to field etag of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("etag"))
}

// Id returns a reference to field id of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("id"))
}

// LocalName returns a reference to field local_name of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) LocalName() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("local_name"))
}

// Location returns a reference to field location of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("location"))
}

// Name returns a reference to field name of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("name"))
}

// OnPremVersion returns a reference to field on_prem_version of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) OnPremVersion() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("on_prem_version"))
}

// Project returns a reference to field project of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("project"))
}

// Reconciling returns a reference to field reconciling of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceAsBool(gvc.ref.Append("reconciling"))
}

// State returns a reference to field state of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("state"))
}

// Uid returns a reference to field uid of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("update_time"))
}

// VmTrackingEnabled returns a reference to field vm_tracking_enabled of google_gkeonprem_vmware_cluster.
func (gvc gkeonpremVmwareClusterAttributes) VmTrackingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(gvc.ref.Append("vm_tracking_enabled"))
}

func (gvc gkeonpremVmwareClusterAttributes) Fleet() terra.ListValue[gkeonpremvmwarecluster.FleetAttributes] {
	return terra.ReferenceAsList[gkeonpremvmwarecluster.FleetAttributes](gvc.ref.Append("fleet"))
}

func (gvc gkeonpremVmwareClusterAttributes) Status() terra.ListValue[gkeonpremvmwarecluster.StatusAttributes] {
	return terra.ReferenceAsList[gkeonpremvmwarecluster.StatusAttributes](gvc.ref.Append("status"))
}

func (gvc gkeonpremVmwareClusterAttributes) ValidationCheck() terra.ListValue[gkeonpremvmwarecluster.ValidationCheckAttributes] {
	return terra.ReferenceAsList[gkeonpremvmwarecluster.ValidationCheckAttributes](gvc.ref.Append("validation_check"))
}

func (gvc gkeonpremVmwareClusterAttributes) AntiAffinityGroups() terra.ListValue[gkeonpremvmwarecluster.AntiAffinityGroupsAttributes] {
	return terra.ReferenceAsList[gkeonpremvmwarecluster.AntiAffinityGroupsAttributes](gvc.ref.Append("anti_affinity_groups"))
}

func (gvc gkeonpremVmwareClusterAttributes) Authorization() terra.ListValue[gkeonpremvmwarecluster.AuthorizationAttributes] {
	return terra.ReferenceAsList[gkeonpremvmwarecluster.AuthorizationAttributes](gvc.ref.Append("authorization"))
}

func (gvc gkeonpremVmwareClusterAttributes) AutoRepairConfig() terra.ListValue[gkeonpremvmwarecluster.AutoRepairConfigAttributes] {
	return terra.ReferenceAsList[gkeonpremvmwarecluster.AutoRepairConfigAttributes](gvc.ref.Append("auto_repair_config"))
}

func (gvc gkeonpremVmwareClusterAttributes) ControlPlaneNode() terra.ListValue[gkeonpremvmwarecluster.ControlPlaneNodeAttributes] {
	return terra.ReferenceAsList[gkeonpremvmwarecluster.ControlPlaneNodeAttributes](gvc.ref.Append("control_plane_node"))
}

func (gvc gkeonpremVmwareClusterAttributes) DataplaneV2() terra.ListValue[gkeonpremvmwarecluster.DataplaneV2Attributes] {
	return terra.ReferenceAsList[gkeonpremvmwarecluster.DataplaneV2Attributes](gvc.ref.Append("dataplane_v2"))
}

func (gvc gkeonpremVmwareClusterAttributes) LoadBalancer() terra.ListValue[gkeonpremvmwarecluster.LoadBalancerAttributes] {
	return terra.ReferenceAsList[gkeonpremvmwarecluster.LoadBalancerAttributes](gvc.ref.Append("load_balancer"))
}

func (gvc gkeonpremVmwareClusterAttributes) NetworkConfig() terra.ListValue[gkeonpremvmwarecluster.NetworkConfigAttributes] {
	return terra.ReferenceAsList[gkeonpremvmwarecluster.NetworkConfigAttributes](gvc.ref.Append("network_config"))
}

func (gvc gkeonpremVmwareClusterAttributes) Storage() terra.ListValue[gkeonpremvmwarecluster.StorageAttributes] {
	return terra.ReferenceAsList[gkeonpremvmwarecluster.StorageAttributes](gvc.ref.Append("storage"))
}

func (gvc gkeonpremVmwareClusterAttributes) Timeouts() gkeonpremvmwarecluster.TimeoutsAttributes {
	return terra.ReferenceAsSingle[gkeonpremvmwarecluster.TimeoutsAttributes](gvc.ref.Append("timeouts"))
}

func (gvc gkeonpremVmwareClusterAttributes) UpgradePolicy() terra.ListValue[gkeonpremvmwarecluster.UpgradePolicyAttributes] {
	return terra.ReferenceAsList[gkeonpremvmwarecluster.UpgradePolicyAttributes](gvc.ref.Append("upgrade_policy"))
}

func (gvc gkeonpremVmwareClusterAttributes) Vcenter() terra.ListValue[gkeonpremvmwarecluster.VcenterAttributes] {
	return terra.ReferenceAsList[gkeonpremvmwarecluster.VcenterAttributes](gvc.ref.Append("vcenter"))
}

type gkeonpremVmwareClusterState struct {
	AdminClusterMembership string                                           `json:"admin_cluster_membership"`
	Annotations            map[string]string                                `json:"annotations"`
	CreateTime             string                                           `json:"create_time"`
	DeleteTime             string                                           `json:"delete_time"`
	Description            string                                           `json:"description"`
	EffectiveAnnotations   map[string]string                                `json:"effective_annotations"`
	EnableControlPlaneV2   bool                                             `json:"enable_control_plane_v2"`
	Endpoint               string                                           `json:"endpoint"`
	Etag                   string                                           `json:"etag"`
	Id                     string                                           `json:"id"`
	LocalName              string                                           `json:"local_name"`
	Location               string                                           `json:"location"`
	Name                   string                                           `json:"name"`
	OnPremVersion          string                                           `json:"on_prem_version"`
	Project                string                                           `json:"project"`
	Reconciling            bool                                             `json:"reconciling"`
	State                  string                                           `json:"state"`
	Uid                    string                                           `json:"uid"`
	UpdateTime             string                                           `json:"update_time"`
	VmTrackingEnabled      bool                                             `json:"vm_tracking_enabled"`
	Fleet                  []gkeonpremvmwarecluster.FleetState              `json:"fleet"`
	Status                 []gkeonpremvmwarecluster.StatusState             `json:"status"`
	ValidationCheck        []gkeonpremvmwarecluster.ValidationCheckState    `json:"validation_check"`
	AntiAffinityGroups     []gkeonpremvmwarecluster.AntiAffinityGroupsState `json:"anti_affinity_groups"`
	Authorization          []gkeonpremvmwarecluster.AuthorizationState      `json:"authorization"`
	AutoRepairConfig       []gkeonpremvmwarecluster.AutoRepairConfigState   `json:"auto_repair_config"`
	ControlPlaneNode       []gkeonpremvmwarecluster.ControlPlaneNodeState   `json:"control_plane_node"`
	DataplaneV2            []gkeonpremvmwarecluster.DataplaneV2State        `json:"dataplane_v2"`
	LoadBalancer           []gkeonpremvmwarecluster.LoadBalancerState       `json:"load_balancer"`
	NetworkConfig          []gkeonpremvmwarecluster.NetworkConfigState      `json:"network_config"`
	Storage                []gkeonpremvmwarecluster.StorageState            `json:"storage"`
	Timeouts               *gkeonpremvmwarecluster.TimeoutsState            `json:"timeouts"`
	UpgradePolicy          []gkeonpremvmwarecluster.UpgradePolicyState      `json:"upgrade_policy"`
	Vcenter                []gkeonpremvmwarecluster.VcenterState            `json:"vcenter"`
}
