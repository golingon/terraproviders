// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package gkeonprembaremetalcluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Fleet struct{}

type Status struct {
	// Conditions: min=0
	Conditions []Conditions `hcl:"conditions,block" validate:"min=0"`
}

type Conditions struct{}

type ValidationCheck struct {
	// ValidationCheckStatus: min=0
	Status []ValidationCheckStatus `hcl:"status,block" validate:"min=0"`
}

type ValidationCheckStatus struct {
	// Result: min=0
	Result []Result `hcl:"result,block" validate:"min=0"`
}

type Result struct{}

type BinaryAuthorization struct {
	// EvaluationMode: string, optional
	EvaluationMode terra.StringValue `hcl:"evaluation_mode,attr"`
}

type ClusterOperations struct {
	// EnableApplicationLogs: bool, optional
	EnableApplicationLogs terra.BoolValue `hcl:"enable_application_logs,attr"`
}

type ControlPlane struct {
	// ApiServerArgs: min=0
	ApiServerArgs []ApiServerArgs `hcl:"api_server_args,block" validate:"min=0"`
	// ControlPlaneNodePoolConfig: required
	ControlPlaneNodePoolConfig *ControlPlaneNodePoolConfig `hcl:"control_plane_node_pool_config,block" validate:"required"`
}

type ApiServerArgs struct {
	// Argument: string, required
	Argument terra.StringValue `hcl:"argument,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ControlPlaneNodePoolConfig struct {
	// ControlPlaneNodePoolConfigNodePoolConfig: required
	NodePoolConfig *ControlPlaneNodePoolConfigNodePoolConfig `hcl:"node_pool_config,block" validate:"required"`
}

type ControlPlaneNodePoolConfigNodePoolConfig struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// OperatingSystem: string, optional
	OperatingSystem terra.StringValue `hcl:"operating_system,attr"`
	// ControlPlaneNodePoolConfigNodePoolConfigNodeConfigs: min=0
	NodeConfigs []ControlPlaneNodePoolConfigNodePoolConfigNodeConfigs `hcl:"node_configs,block" validate:"min=0"`
	// ControlPlaneNodePoolConfigNodePoolConfigTaints: min=0
	Taints []ControlPlaneNodePoolConfigNodePoolConfigTaints `hcl:"taints,block" validate:"min=0"`
}

type ControlPlaneNodePoolConfigNodePoolConfigNodeConfigs struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// NodeIp: string, optional
	NodeIp terra.StringValue `hcl:"node_ip,attr"`
}

type ControlPlaneNodePoolConfigNodePoolConfigTaints struct {
	// Effect: string, optional
	Effect terra.StringValue `hcl:"effect,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type LoadBalancer struct {
	// BgpLbConfig: optional
	BgpLbConfig *BgpLbConfig `hcl:"bgp_lb_config,block"`
	// ManualLbConfig: optional
	ManualLbConfig *ManualLbConfig `hcl:"manual_lb_config,block"`
	// MetalLbConfig: optional
	MetalLbConfig *MetalLbConfig `hcl:"metal_lb_config,block"`
	// PortConfig: required
	PortConfig *PortConfig `hcl:"port_config,block" validate:"required"`
	// VipConfig: required
	VipConfig *VipConfig `hcl:"vip_config,block" validate:"required"`
}

type BgpLbConfig struct {
	// Asn: number, required
	Asn terra.NumberValue `hcl:"asn,attr" validate:"required"`
	// BgpLbConfigAddressPools: min=1
	AddressPools []BgpLbConfigAddressPools `hcl:"address_pools,block" validate:"min=1"`
	// BgpPeerConfigs: min=1
	BgpPeerConfigs []BgpPeerConfigs `hcl:"bgp_peer_configs,block" validate:"min=1"`
	// BgpLbConfigLoadBalancerNodePoolConfig: optional
	LoadBalancerNodePoolConfig *BgpLbConfigLoadBalancerNodePoolConfig `hcl:"load_balancer_node_pool_config,block"`
}

type BgpLbConfigAddressPools struct {
	// Addresses: list of string, required
	Addresses terra.ListValue[terra.StringValue] `hcl:"addresses,attr" validate:"required"`
	// AvoidBuggyIps: bool, optional
	AvoidBuggyIps terra.BoolValue `hcl:"avoid_buggy_ips,attr"`
	// ManualAssign: string, optional
	ManualAssign terra.StringValue `hcl:"manual_assign,attr"`
	// Pool: string, required
	Pool terra.StringValue `hcl:"pool,attr" validate:"required"`
}

type BgpPeerConfigs struct {
	// Asn: number, required
	Asn terra.NumberValue `hcl:"asn,attr" validate:"required"`
	// ControlPlaneNodes: list of string, optional
	ControlPlaneNodes terra.ListValue[terra.StringValue] `hcl:"control_plane_nodes,attr"`
	// IpAddress: string, required
	IpAddress terra.StringValue `hcl:"ip_address,attr" validate:"required"`
}

type BgpLbConfigLoadBalancerNodePoolConfig struct {
	// BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfig: optional
	NodePoolConfig *BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfig `hcl:"node_pool_config,block"`
}

type BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfig struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// OperatingSystem: string, optional
	OperatingSystem terra.StringValue `hcl:"operating_system,attr"`
	// KubeletConfig: optional
	KubeletConfig *KubeletConfig `hcl:"kubelet_config,block"`
	// BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigs: min=0
	NodeConfigs []BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigs `hcl:"node_configs,block" validate:"min=0"`
	// BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaints: min=0
	Taints []BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaints `hcl:"taints,block" validate:"min=0"`
}

type KubeletConfig struct {
	// RegistryBurst: number, optional
	RegistryBurst terra.NumberValue `hcl:"registry_burst,attr"`
	// RegistryPullQps: number, optional
	RegistryPullQps terra.NumberValue `hcl:"registry_pull_qps,attr"`
	// SerializeImagePullsDisabled: bool, optional
	SerializeImagePullsDisabled terra.BoolValue `hcl:"serialize_image_pulls_disabled,attr"`
}

type BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigs struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// NodeIp: string, optional
	NodeIp terra.StringValue `hcl:"node_ip,attr"`
}

type BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaints struct {
	// Effect: string, optional
	Effect terra.StringValue `hcl:"effect,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type ManualLbConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type MetalLbConfig struct {
	// MetalLbConfigAddressPools: min=1
	AddressPools []MetalLbConfigAddressPools `hcl:"address_pools,block" validate:"min=1"`
	// MetalLbConfigLoadBalancerNodePoolConfig: optional
	LoadBalancerNodePoolConfig *MetalLbConfigLoadBalancerNodePoolConfig `hcl:"load_balancer_node_pool_config,block"`
}

type MetalLbConfigAddressPools struct {
	// Addresses: list of string, required
	Addresses terra.ListValue[terra.StringValue] `hcl:"addresses,attr" validate:"required"`
	// AvoidBuggyIps: bool, optional
	AvoidBuggyIps terra.BoolValue `hcl:"avoid_buggy_ips,attr"`
	// ManualAssign: bool, optional
	ManualAssign terra.BoolValue `hcl:"manual_assign,attr"`
	// Pool: string, required
	Pool terra.StringValue `hcl:"pool,attr" validate:"required"`
}

type MetalLbConfigLoadBalancerNodePoolConfig struct {
	// MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfig: optional
	NodePoolConfig *MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfig `hcl:"node_pool_config,block"`
}

type MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfig struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// OperatingSystem: string, optional
	OperatingSystem terra.StringValue `hcl:"operating_system,attr"`
	// MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigs: min=0
	NodeConfigs []MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigs `hcl:"node_configs,block" validate:"min=0"`
	// MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaints: min=0
	Taints []MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaints `hcl:"taints,block" validate:"min=0"`
}

type MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigs struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// NodeIp: string, optional
	NodeIp terra.StringValue `hcl:"node_ip,attr"`
}

type MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaints struct {
	// Effect: string, optional
	Effect terra.StringValue `hcl:"effect,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type PortConfig struct {
	// ControlPlaneLoadBalancerPort: number, required
	ControlPlaneLoadBalancerPort terra.NumberValue `hcl:"control_plane_load_balancer_port,attr" validate:"required"`
}

type VipConfig struct {
	// ControlPlaneVip: string, required
	ControlPlaneVip terra.StringValue `hcl:"control_plane_vip,attr" validate:"required"`
	// IngressVip: string, required
	IngressVip terra.StringValue `hcl:"ingress_vip,attr" validate:"required"`
}

type MaintenanceConfig struct {
	// MaintenanceAddressCidrBlocks: list of string, required
	MaintenanceAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"maintenance_address_cidr_blocks,attr" validate:"required"`
}

type NetworkConfig struct {
	// AdvancedNetworking: bool, optional
	AdvancedNetworking terra.BoolValue `hcl:"advanced_networking,attr"`
	// IslandModeCidr: optional
	IslandModeCidr *IslandModeCidr `hcl:"island_mode_cidr,block"`
	// MultipleNetworkInterfacesConfig: optional
	MultipleNetworkInterfacesConfig *MultipleNetworkInterfacesConfig `hcl:"multiple_network_interfaces_config,block"`
	// SrIovConfig: optional
	SrIovConfig *SrIovConfig `hcl:"sr_iov_config,block"`
}

type IslandModeCidr struct {
	// PodAddressCidrBlocks: list of string, required
	PodAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"pod_address_cidr_blocks,attr" validate:"required"`
	// ServiceAddressCidrBlocks: list of string, required
	ServiceAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"service_address_cidr_blocks,attr" validate:"required"`
}

type MultipleNetworkInterfacesConfig struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type SrIovConfig struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type NodeAccessConfig struct {
	// LoginUser: string, optional
	LoginUser terra.StringValue `hcl:"login_user,attr"`
}

type NodeConfig struct {
	// ContainerRuntime: string, optional
	ContainerRuntime terra.StringValue `hcl:"container_runtime,attr"`
	// MaxPodsPerNode: number, optional
	MaxPodsPerNode terra.NumberValue `hcl:"max_pods_per_node,attr"`
}

type OsEnvironmentConfig struct {
	// PackageRepoExcluded: bool, required
	PackageRepoExcluded terra.BoolValue `hcl:"package_repo_excluded,attr" validate:"required"`
}

type Proxy struct {
	// NoProxy: list of string, optional
	NoProxy terra.ListValue[terra.StringValue] `hcl:"no_proxy,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type SecurityConfig struct {
	// Authorization: optional
	Authorization *Authorization `hcl:"authorization,block"`
}

type Authorization struct {
	// AdminUsers: min=1
	AdminUsers []AdminUsers `hcl:"admin_users,block" validate:"min=1"`
}

type AdminUsers struct {
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Storage struct {
	// LvpNodeMountsConfig: required
	LvpNodeMountsConfig *LvpNodeMountsConfig `hcl:"lvp_node_mounts_config,block" validate:"required"`
	// LvpShareConfig: required
	LvpShareConfig *LvpShareConfig `hcl:"lvp_share_config,block" validate:"required"`
}

type LvpNodeMountsConfig struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// StorageClass: string, required
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
}

type LvpShareConfig struct {
	// SharedPathPvCount: number, optional
	SharedPathPvCount terra.NumberValue `hcl:"shared_path_pv_count,attr"`
	// LvpConfig: required
	LvpConfig *LvpConfig `hcl:"lvp_config,block" validate:"required"`
}

type LvpConfig struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// StorageClass: string, required
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type UpgradePolicy struct {
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
}

type FleetAttributes struct {
	ref terra.Reference
}

func (f FleetAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FleetAttributes) InternalWithRef(ref terra.Reference) FleetAttributes {
	return FleetAttributes{ref: ref}
}

func (f FleetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FleetAttributes) Membership() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("membership"))
}

type StatusAttributes struct {
	ref terra.Reference
}

func (s StatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StatusAttributes) InternalWithRef(ref terra.Reference) StatusAttributes {
	return StatusAttributes{ref: ref}
}

func (s StatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StatusAttributes) ErrorMessage() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("error_message"))
}

func (s StatusAttributes) Conditions() terra.ListValue[ConditionsAttributes] {
	return terra.ReferenceAsList[ConditionsAttributes](s.ref.Append("conditions"))
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) LastTransitionTime() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("last_transition_time"))
}

func (c ConditionsAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("message"))
}

func (c ConditionsAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("reason"))
}

func (c ConditionsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("state"))
}

func (c ConditionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type ValidationCheckAttributes struct {
	ref terra.Reference
}

func (vc ValidationCheckAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc ValidationCheckAttributes) InternalWithRef(ref terra.Reference) ValidationCheckAttributes {
	return ValidationCheckAttributes{ref: ref}
}

func (vc ValidationCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc ValidationCheckAttributes) Options() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("options"))
}

func (vc ValidationCheckAttributes) Scenario() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("scenario"))
}

func (vc ValidationCheckAttributes) Status() terra.ListValue[ValidationCheckStatusAttributes] {
	return terra.ReferenceAsList[ValidationCheckStatusAttributes](vc.ref.Append("status"))
}

type ValidationCheckStatusAttributes struct {
	ref terra.Reference
}

func (s ValidationCheckStatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ValidationCheckStatusAttributes) InternalWithRef(ref terra.Reference) ValidationCheckStatusAttributes {
	return ValidationCheckStatusAttributes{ref: ref}
}

func (s ValidationCheckStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ValidationCheckStatusAttributes) Result() terra.ListValue[ResultAttributes] {
	return terra.ReferenceAsList[ResultAttributes](s.ref.Append("result"))
}

type ResultAttributes struct {
	ref terra.Reference
}

func (r ResultAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ResultAttributes) InternalWithRef(ref terra.Reference) ResultAttributes {
	return ResultAttributes{ref: ref}
}

func (r ResultAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ResultAttributes) Category() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("category"))
}

func (r ResultAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("description"))
}

func (r ResultAttributes) Details() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("details"))
}

func (r ResultAttributes) Options() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("options"))
}

func (r ResultAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("reason"))
}

type BinaryAuthorizationAttributes struct {
	ref terra.Reference
}

func (ba BinaryAuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return ba.ref, nil
}

func (ba BinaryAuthorizationAttributes) InternalWithRef(ref terra.Reference) BinaryAuthorizationAttributes {
	return BinaryAuthorizationAttributes{ref: ref}
}

func (ba BinaryAuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ba.ref.InternalTokens()
}

func (ba BinaryAuthorizationAttributes) EvaluationMode() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("evaluation_mode"))
}

type ClusterOperationsAttributes struct {
	ref terra.Reference
}

func (co ClusterOperationsAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co ClusterOperationsAttributes) InternalWithRef(ref terra.Reference) ClusterOperationsAttributes {
	return ClusterOperationsAttributes{ref: ref}
}

func (co ClusterOperationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co ClusterOperationsAttributes) EnableApplicationLogs() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("enable_application_logs"))
}

type ControlPlaneAttributes struct {
	ref terra.Reference
}

func (cp ControlPlaneAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp ControlPlaneAttributes) InternalWithRef(ref terra.Reference) ControlPlaneAttributes {
	return ControlPlaneAttributes{ref: ref}
}

func (cp ControlPlaneAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp ControlPlaneAttributes) ApiServerArgs() terra.ListValue[ApiServerArgsAttributes] {
	return terra.ReferenceAsList[ApiServerArgsAttributes](cp.ref.Append("api_server_args"))
}

func (cp ControlPlaneAttributes) ControlPlaneNodePoolConfig() terra.ListValue[ControlPlaneNodePoolConfigAttributes] {
	return terra.ReferenceAsList[ControlPlaneNodePoolConfigAttributes](cp.ref.Append("control_plane_node_pool_config"))
}

type ApiServerArgsAttributes struct {
	ref terra.Reference
}

func (asa ApiServerArgsAttributes) InternalRef() (terra.Reference, error) {
	return asa.ref, nil
}

func (asa ApiServerArgsAttributes) InternalWithRef(ref terra.Reference) ApiServerArgsAttributes {
	return ApiServerArgsAttributes{ref: ref}
}

func (asa ApiServerArgsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asa.ref.InternalTokens()
}

func (asa ApiServerArgsAttributes) Argument() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("argument"))
}

func (asa ApiServerArgsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("value"))
}

type ControlPlaneNodePoolConfigAttributes struct {
	ref terra.Reference
}

func (cpnpc ControlPlaneNodePoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return cpnpc.ref, nil
}

func (cpnpc ControlPlaneNodePoolConfigAttributes) InternalWithRef(ref terra.Reference) ControlPlaneNodePoolConfigAttributes {
	return ControlPlaneNodePoolConfigAttributes{ref: ref}
}

func (cpnpc ControlPlaneNodePoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpnpc.ref.InternalTokens()
}

func (cpnpc ControlPlaneNodePoolConfigAttributes) NodePoolConfig() terra.ListValue[ControlPlaneNodePoolConfigNodePoolConfigAttributes] {
	return terra.ReferenceAsList[ControlPlaneNodePoolConfigNodePoolConfigAttributes](cpnpc.ref.Append("node_pool_config"))
}

type ControlPlaneNodePoolConfigNodePoolConfigAttributes struct {
	ref terra.Reference
}

func (npc ControlPlaneNodePoolConfigNodePoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return npc.ref, nil
}

func (npc ControlPlaneNodePoolConfigNodePoolConfigAttributes) InternalWithRef(ref terra.Reference) ControlPlaneNodePoolConfigNodePoolConfigAttributes {
	return ControlPlaneNodePoolConfigNodePoolConfigAttributes{ref: ref}
}

func (npc ControlPlaneNodePoolConfigNodePoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npc.ref.InternalTokens()
}

func (npc ControlPlaneNodePoolConfigNodePoolConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](npc.ref.Append("labels"))
}

func (npc ControlPlaneNodePoolConfigNodePoolConfigAttributes) OperatingSystem() terra.StringValue {
	return terra.ReferenceAsString(npc.ref.Append("operating_system"))
}

func (npc ControlPlaneNodePoolConfigNodePoolConfigAttributes) NodeConfigs() terra.ListValue[ControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes] {
	return terra.ReferenceAsList[ControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes](npc.ref.Append("node_configs"))
}

func (npc ControlPlaneNodePoolConfigNodePoolConfigAttributes) Taints() terra.ListValue[ControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes] {
	return terra.ReferenceAsList[ControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes](npc.ref.Append("taints"))
}

type ControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes struct {
	ref terra.Reference
}

func (nc ControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc ControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes) InternalWithRef(ref terra.Reference) ControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes {
	return ControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes{ref: ref}
}

func (nc ControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc ControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("labels"))
}

func (nc ControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes) NodeIp() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("node_ip"))
}

type ControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes struct {
	ref terra.Reference
}

func (t ControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes) InternalWithRef(ref terra.Reference) ControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes {
	return ControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes{ref: ref}
}

func (t ControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("effect"))
}

func (t ControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t ControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type LoadBalancerAttributes struct {
	ref terra.Reference
}

func (lb LoadBalancerAttributes) InternalRef() (terra.Reference, error) {
	return lb.ref, nil
}

func (lb LoadBalancerAttributes) InternalWithRef(ref terra.Reference) LoadBalancerAttributes {
	return LoadBalancerAttributes{ref: ref}
}

func (lb LoadBalancerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lb.ref.InternalTokens()
}

func (lb LoadBalancerAttributes) BgpLbConfig() terra.ListValue[BgpLbConfigAttributes] {
	return terra.ReferenceAsList[BgpLbConfigAttributes](lb.ref.Append("bgp_lb_config"))
}

func (lb LoadBalancerAttributes) ManualLbConfig() terra.ListValue[ManualLbConfigAttributes] {
	return terra.ReferenceAsList[ManualLbConfigAttributes](lb.ref.Append("manual_lb_config"))
}

func (lb LoadBalancerAttributes) MetalLbConfig() terra.ListValue[MetalLbConfigAttributes] {
	return terra.ReferenceAsList[MetalLbConfigAttributes](lb.ref.Append("metal_lb_config"))
}

func (lb LoadBalancerAttributes) PortConfig() terra.ListValue[PortConfigAttributes] {
	return terra.ReferenceAsList[PortConfigAttributes](lb.ref.Append("port_config"))
}

func (lb LoadBalancerAttributes) VipConfig() terra.ListValue[VipConfigAttributes] {
	return terra.ReferenceAsList[VipConfigAttributes](lb.ref.Append("vip_config"))
}

type BgpLbConfigAttributes struct {
	ref terra.Reference
}

func (blc BgpLbConfigAttributes) InternalRef() (terra.Reference, error) {
	return blc.ref, nil
}

func (blc BgpLbConfigAttributes) InternalWithRef(ref terra.Reference) BgpLbConfigAttributes {
	return BgpLbConfigAttributes{ref: ref}
}

func (blc BgpLbConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return blc.ref.InternalTokens()
}

func (blc BgpLbConfigAttributes) Asn() terra.NumberValue {
	return terra.ReferenceAsNumber(blc.ref.Append("asn"))
}

func (blc BgpLbConfigAttributes) AddressPools() terra.ListValue[BgpLbConfigAddressPoolsAttributes] {
	return terra.ReferenceAsList[BgpLbConfigAddressPoolsAttributes](blc.ref.Append("address_pools"))
}

func (blc BgpLbConfigAttributes) BgpPeerConfigs() terra.ListValue[BgpPeerConfigsAttributes] {
	return terra.ReferenceAsList[BgpPeerConfigsAttributes](blc.ref.Append("bgp_peer_configs"))
}

func (blc BgpLbConfigAttributes) LoadBalancerNodePoolConfig() terra.ListValue[BgpLbConfigLoadBalancerNodePoolConfigAttributes] {
	return terra.ReferenceAsList[BgpLbConfigLoadBalancerNodePoolConfigAttributes](blc.ref.Append("load_balancer_node_pool_config"))
}

type BgpLbConfigAddressPoolsAttributes struct {
	ref terra.Reference
}

func (ap BgpLbConfigAddressPoolsAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap BgpLbConfigAddressPoolsAttributes) InternalWithRef(ref terra.Reference) BgpLbConfigAddressPoolsAttributes {
	return BgpLbConfigAddressPoolsAttributes{ref: ref}
}

func (ap BgpLbConfigAddressPoolsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap BgpLbConfigAddressPoolsAttributes) Addresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ap.ref.Append("addresses"))
}

func (ap BgpLbConfigAddressPoolsAttributes) AvoidBuggyIps() terra.BoolValue {
	return terra.ReferenceAsBool(ap.ref.Append("avoid_buggy_ips"))
}

func (ap BgpLbConfigAddressPoolsAttributes) ManualAssign() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("manual_assign"))
}

func (ap BgpLbConfigAddressPoolsAttributes) Pool() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("pool"))
}

type BgpPeerConfigsAttributes struct {
	ref terra.Reference
}

func (bpc BgpPeerConfigsAttributes) InternalRef() (terra.Reference, error) {
	return bpc.ref, nil
}

func (bpc BgpPeerConfigsAttributes) InternalWithRef(ref terra.Reference) BgpPeerConfigsAttributes {
	return BgpPeerConfigsAttributes{ref: ref}
}

func (bpc BgpPeerConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bpc.ref.InternalTokens()
}

func (bpc BgpPeerConfigsAttributes) Asn() terra.NumberValue {
	return terra.ReferenceAsNumber(bpc.ref.Append("asn"))
}

func (bpc BgpPeerConfigsAttributes) ControlPlaneNodes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](bpc.ref.Append("control_plane_nodes"))
}

func (bpc BgpPeerConfigsAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(bpc.ref.Append("ip_address"))
}

type BgpLbConfigLoadBalancerNodePoolConfigAttributes struct {
	ref terra.Reference
}

func (lbnpc BgpLbConfigLoadBalancerNodePoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return lbnpc.ref, nil
}

func (lbnpc BgpLbConfigLoadBalancerNodePoolConfigAttributes) InternalWithRef(ref terra.Reference) BgpLbConfigLoadBalancerNodePoolConfigAttributes {
	return BgpLbConfigLoadBalancerNodePoolConfigAttributes{ref: ref}
}

func (lbnpc BgpLbConfigLoadBalancerNodePoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lbnpc.ref.InternalTokens()
}

func (lbnpc BgpLbConfigLoadBalancerNodePoolConfigAttributes) NodePoolConfig() terra.ListValue[BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes] {
	return terra.ReferenceAsList[BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes](lbnpc.ref.Append("node_pool_config"))
}

type BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes struct {
	ref terra.Reference
}

func (npc BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return npc.ref, nil
}

func (npc BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) InternalWithRef(ref terra.Reference) BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes {
	return BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes{ref: ref}
}

func (npc BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npc.ref.InternalTokens()
}

func (npc BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](npc.ref.Append("labels"))
}

func (npc BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) OperatingSystem() terra.StringValue {
	return terra.ReferenceAsString(npc.ref.Append("operating_system"))
}

func (npc BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) KubeletConfig() terra.ListValue[KubeletConfigAttributes] {
	return terra.ReferenceAsList[KubeletConfigAttributes](npc.ref.Append("kubelet_config"))
}

func (npc BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) NodeConfigs() terra.ListValue[BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes] {
	return terra.ReferenceAsList[BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes](npc.ref.Append("node_configs"))
}

func (npc BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) Taints() terra.ListValue[BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes] {
	return terra.ReferenceAsList[BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes](npc.ref.Append("taints"))
}

type KubeletConfigAttributes struct {
	ref terra.Reference
}

func (kc KubeletConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc KubeletConfigAttributes) InternalWithRef(ref terra.Reference) KubeletConfigAttributes {
	return KubeletConfigAttributes{ref: ref}
}

func (kc KubeletConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc KubeletConfigAttributes) RegistryBurst() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("registry_burst"))
}

func (kc KubeletConfigAttributes) RegistryPullQps() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("registry_pull_qps"))
}

func (kc KubeletConfigAttributes) SerializeImagePullsDisabled() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("serialize_image_pulls_disabled"))
}

type BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes struct {
	ref terra.Reference
}

func (nc BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes) InternalWithRef(ref terra.Reference) BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes {
	return BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes{ref: ref}
}

func (nc BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("labels"))
}

func (nc BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes) NodeIp() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("node_ip"))
}

type BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes struct {
	ref terra.Reference
}

func (t BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes) InternalWithRef(ref terra.Reference) BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes {
	return BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes{ref: ref}
}

func (t BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("effect"))
}

func (t BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type ManualLbConfigAttributes struct {
	ref terra.Reference
}

func (mlc ManualLbConfigAttributes) InternalRef() (terra.Reference, error) {
	return mlc.ref, nil
}

func (mlc ManualLbConfigAttributes) InternalWithRef(ref terra.Reference) ManualLbConfigAttributes {
	return ManualLbConfigAttributes{ref: ref}
}

func (mlc ManualLbConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mlc.ref.InternalTokens()
}

func (mlc ManualLbConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(mlc.ref.Append("enabled"))
}

type MetalLbConfigAttributes struct {
	ref terra.Reference
}

func (mlc MetalLbConfigAttributes) InternalRef() (terra.Reference, error) {
	return mlc.ref, nil
}

func (mlc MetalLbConfigAttributes) InternalWithRef(ref terra.Reference) MetalLbConfigAttributes {
	return MetalLbConfigAttributes{ref: ref}
}

func (mlc MetalLbConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mlc.ref.InternalTokens()
}

func (mlc MetalLbConfigAttributes) AddressPools() terra.ListValue[MetalLbConfigAddressPoolsAttributes] {
	return terra.ReferenceAsList[MetalLbConfigAddressPoolsAttributes](mlc.ref.Append("address_pools"))
}

func (mlc MetalLbConfigAttributes) LoadBalancerNodePoolConfig() terra.ListValue[MetalLbConfigLoadBalancerNodePoolConfigAttributes] {
	return terra.ReferenceAsList[MetalLbConfigLoadBalancerNodePoolConfigAttributes](mlc.ref.Append("load_balancer_node_pool_config"))
}

type MetalLbConfigAddressPoolsAttributes struct {
	ref terra.Reference
}

func (ap MetalLbConfigAddressPoolsAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap MetalLbConfigAddressPoolsAttributes) InternalWithRef(ref terra.Reference) MetalLbConfigAddressPoolsAttributes {
	return MetalLbConfigAddressPoolsAttributes{ref: ref}
}

func (ap MetalLbConfigAddressPoolsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap MetalLbConfigAddressPoolsAttributes) Addresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ap.ref.Append("addresses"))
}

func (ap MetalLbConfigAddressPoolsAttributes) AvoidBuggyIps() terra.BoolValue {
	return terra.ReferenceAsBool(ap.ref.Append("avoid_buggy_ips"))
}

func (ap MetalLbConfigAddressPoolsAttributes) ManualAssign() terra.BoolValue {
	return terra.ReferenceAsBool(ap.ref.Append("manual_assign"))
}

func (ap MetalLbConfigAddressPoolsAttributes) Pool() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("pool"))
}

type MetalLbConfigLoadBalancerNodePoolConfigAttributes struct {
	ref terra.Reference
}

func (lbnpc MetalLbConfigLoadBalancerNodePoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return lbnpc.ref, nil
}

func (lbnpc MetalLbConfigLoadBalancerNodePoolConfigAttributes) InternalWithRef(ref terra.Reference) MetalLbConfigLoadBalancerNodePoolConfigAttributes {
	return MetalLbConfigLoadBalancerNodePoolConfigAttributes{ref: ref}
}

func (lbnpc MetalLbConfigLoadBalancerNodePoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lbnpc.ref.InternalTokens()
}

func (lbnpc MetalLbConfigLoadBalancerNodePoolConfigAttributes) NodePoolConfig() terra.ListValue[MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes] {
	return terra.ReferenceAsList[MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes](lbnpc.ref.Append("node_pool_config"))
}

type MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes struct {
	ref terra.Reference
}

func (npc MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return npc.ref, nil
}

func (npc MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) InternalWithRef(ref terra.Reference) MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes {
	return MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes{ref: ref}
}

func (npc MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npc.ref.InternalTokens()
}

func (npc MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](npc.ref.Append("labels"))
}

func (npc MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) OperatingSystem() terra.StringValue {
	return terra.ReferenceAsString(npc.ref.Append("operating_system"))
}

func (npc MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) NodeConfigs() terra.ListValue[MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes] {
	return terra.ReferenceAsList[MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes](npc.ref.Append("node_configs"))
}

func (npc MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigAttributes) Taints() terra.ListValue[MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes] {
	return terra.ReferenceAsList[MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes](npc.ref.Append("taints"))
}

type MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes struct {
	ref terra.Reference
}

func (nc MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes) InternalWithRef(ref terra.Reference) MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes {
	return MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes{ref: ref}
}

func (nc MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("labels"))
}

func (nc MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsAttributes) NodeIp() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("node_ip"))
}

type MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes struct {
	ref terra.Reference
}

func (t MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes) InternalWithRef(ref terra.Reference) MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes {
	return MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes{ref: ref}
}

func (t MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("effect"))
}

func (t MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type PortConfigAttributes struct {
	ref terra.Reference
}

func (pc PortConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PortConfigAttributes) InternalWithRef(ref terra.Reference) PortConfigAttributes {
	return PortConfigAttributes{ref: ref}
}

func (pc PortConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PortConfigAttributes) ControlPlaneLoadBalancerPort() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("control_plane_load_balancer_port"))
}

type VipConfigAttributes struct {
	ref terra.Reference
}

func (vc VipConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VipConfigAttributes) InternalWithRef(ref terra.Reference) VipConfigAttributes {
	return VipConfigAttributes{ref: ref}
}

func (vc VipConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VipConfigAttributes) ControlPlaneVip() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("control_plane_vip"))
}

func (vc VipConfigAttributes) IngressVip() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("ingress_vip"))
}

type MaintenanceConfigAttributes struct {
	ref terra.Reference
}

func (mc MaintenanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MaintenanceConfigAttributes) InternalWithRef(ref terra.Reference) MaintenanceConfigAttributes {
	return MaintenanceConfigAttributes{ref: ref}
}

func (mc MaintenanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MaintenanceConfigAttributes) MaintenanceAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("maintenance_address_cidr_blocks"))
}

type NetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAttributes {
	return NetworkConfigAttributes{ref: ref}
}

func (nc NetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigAttributes) AdvancedNetworking() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("advanced_networking"))
}

func (nc NetworkConfigAttributes) IslandModeCidr() terra.ListValue[IslandModeCidrAttributes] {
	return terra.ReferenceAsList[IslandModeCidrAttributes](nc.ref.Append("island_mode_cidr"))
}

func (nc NetworkConfigAttributes) MultipleNetworkInterfacesConfig() terra.ListValue[MultipleNetworkInterfacesConfigAttributes] {
	return terra.ReferenceAsList[MultipleNetworkInterfacesConfigAttributes](nc.ref.Append("multiple_network_interfaces_config"))
}

func (nc NetworkConfigAttributes) SrIovConfig() terra.ListValue[SrIovConfigAttributes] {
	return terra.ReferenceAsList[SrIovConfigAttributes](nc.ref.Append("sr_iov_config"))
}

type IslandModeCidrAttributes struct {
	ref terra.Reference
}

func (imc IslandModeCidrAttributes) InternalRef() (terra.Reference, error) {
	return imc.ref, nil
}

func (imc IslandModeCidrAttributes) InternalWithRef(ref terra.Reference) IslandModeCidrAttributes {
	return IslandModeCidrAttributes{ref: ref}
}

func (imc IslandModeCidrAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return imc.ref.InternalTokens()
}

func (imc IslandModeCidrAttributes) PodAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](imc.ref.Append("pod_address_cidr_blocks"))
}

func (imc IslandModeCidrAttributes) ServiceAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](imc.ref.Append("service_address_cidr_blocks"))
}

type MultipleNetworkInterfacesConfigAttributes struct {
	ref terra.Reference
}

func (mnic MultipleNetworkInterfacesConfigAttributes) InternalRef() (terra.Reference, error) {
	return mnic.ref, nil
}

func (mnic MultipleNetworkInterfacesConfigAttributes) InternalWithRef(ref terra.Reference) MultipleNetworkInterfacesConfigAttributes {
	return MultipleNetworkInterfacesConfigAttributes{ref: ref}
}

func (mnic MultipleNetworkInterfacesConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mnic.ref.InternalTokens()
}

func (mnic MultipleNetworkInterfacesConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(mnic.ref.Append("enabled"))
}

type SrIovConfigAttributes struct {
	ref terra.Reference
}

func (sic SrIovConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic SrIovConfigAttributes) InternalWithRef(ref terra.Reference) SrIovConfigAttributes {
	return SrIovConfigAttributes{ref: ref}
}

func (sic SrIovConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic SrIovConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enabled"))
}

type NodeAccessConfigAttributes struct {
	ref terra.Reference
}

func (nac NodeAccessConfigAttributes) InternalRef() (terra.Reference, error) {
	return nac.ref, nil
}

func (nac NodeAccessConfigAttributes) InternalWithRef(ref terra.Reference) NodeAccessConfigAttributes {
	return NodeAccessConfigAttributes{ref: ref}
}

func (nac NodeAccessConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nac.ref.InternalTokens()
}

func (nac NodeAccessConfigAttributes) LoginUser() terra.StringValue {
	return terra.ReferenceAsString(nac.ref.Append("login_user"))
}

type NodeConfigAttributes struct {
	ref terra.Reference
}

func (nc NodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigAttributes {
	return NodeConfigAttributes{ref: ref}
}

func (nc NodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NodeConfigAttributes) ContainerRuntime() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("container_runtime"))
}

func (nc NodeConfigAttributes) MaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("max_pods_per_node"))
}

type OsEnvironmentConfigAttributes struct {
	ref terra.Reference
}

func (oec OsEnvironmentConfigAttributes) InternalRef() (terra.Reference, error) {
	return oec.ref, nil
}

func (oec OsEnvironmentConfigAttributes) InternalWithRef(ref terra.Reference) OsEnvironmentConfigAttributes {
	return OsEnvironmentConfigAttributes{ref: ref}
}

func (oec OsEnvironmentConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oec.ref.InternalTokens()
}

func (oec OsEnvironmentConfigAttributes) PackageRepoExcluded() terra.BoolValue {
	return terra.ReferenceAsBool(oec.ref.Append("package_repo_excluded"))
}

type ProxyAttributes struct {
	ref terra.Reference
}

func (p ProxyAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ProxyAttributes) InternalWithRef(ref terra.Reference) ProxyAttributes {
	return ProxyAttributes{ref: ref}
}

func (p ProxyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ProxyAttributes) NoProxy() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("no_proxy"))
}

func (p ProxyAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("uri"))
}

type SecurityConfigAttributes struct {
	ref terra.Reference
}

func (sc SecurityConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SecurityConfigAttributes) InternalWithRef(ref terra.Reference) SecurityConfigAttributes {
	return SecurityConfigAttributes{ref: ref}
}

func (sc SecurityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SecurityConfigAttributes) Authorization() terra.ListValue[AuthorizationAttributes] {
	return terra.ReferenceAsList[AuthorizationAttributes](sc.ref.Append("authorization"))
}

type AuthorizationAttributes struct {
	ref terra.Reference
}

func (a AuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthorizationAttributes) InternalWithRef(ref terra.Reference) AuthorizationAttributes {
	return AuthorizationAttributes{ref: ref}
}

func (a AuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthorizationAttributes) AdminUsers() terra.ListValue[AdminUsersAttributes] {
	return terra.ReferenceAsList[AdminUsersAttributes](a.ref.Append("admin_users"))
}

type AdminUsersAttributes struct {
	ref terra.Reference
}

func (au AdminUsersAttributes) InternalRef() (terra.Reference, error) {
	return au.ref, nil
}

func (au AdminUsersAttributes) InternalWithRef(ref terra.Reference) AdminUsersAttributes {
	return AdminUsersAttributes{ref: ref}
}

func (au AdminUsersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return au.ref.InternalTokens()
}

func (au AdminUsersAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("username"))
}

type StorageAttributes struct {
	ref terra.Reference
}

func (s StorageAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StorageAttributes) InternalWithRef(ref terra.Reference) StorageAttributes {
	return StorageAttributes{ref: ref}
}

func (s StorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StorageAttributes) LvpNodeMountsConfig() terra.ListValue[LvpNodeMountsConfigAttributes] {
	return terra.ReferenceAsList[LvpNodeMountsConfigAttributes](s.ref.Append("lvp_node_mounts_config"))
}

func (s StorageAttributes) LvpShareConfig() terra.ListValue[LvpShareConfigAttributes] {
	return terra.ReferenceAsList[LvpShareConfigAttributes](s.ref.Append("lvp_share_config"))
}

type LvpNodeMountsConfigAttributes struct {
	ref terra.Reference
}

func (lnmc LvpNodeMountsConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnmc.ref, nil
}

func (lnmc LvpNodeMountsConfigAttributes) InternalWithRef(ref terra.Reference) LvpNodeMountsConfigAttributes {
	return LvpNodeMountsConfigAttributes{ref: ref}
}

func (lnmc LvpNodeMountsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnmc.ref.InternalTokens()
}

func (lnmc LvpNodeMountsConfigAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(lnmc.ref.Append("path"))
}

func (lnmc LvpNodeMountsConfigAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(lnmc.ref.Append("storage_class"))
}

type LvpShareConfigAttributes struct {
	ref terra.Reference
}

func (lsc LvpShareConfigAttributes) InternalRef() (terra.Reference, error) {
	return lsc.ref, nil
}

func (lsc LvpShareConfigAttributes) InternalWithRef(ref terra.Reference) LvpShareConfigAttributes {
	return LvpShareConfigAttributes{ref: ref}
}

func (lsc LvpShareConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lsc.ref.InternalTokens()
}

func (lsc LvpShareConfigAttributes) SharedPathPvCount() terra.NumberValue {
	return terra.ReferenceAsNumber(lsc.ref.Append("shared_path_pv_count"))
}

func (lsc LvpShareConfigAttributes) LvpConfig() terra.ListValue[LvpConfigAttributes] {
	return terra.ReferenceAsList[LvpConfigAttributes](lsc.ref.Append("lvp_config"))
}

type LvpConfigAttributes struct {
	ref terra.Reference
}

func (lc LvpConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LvpConfigAttributes) InternalWithRef(ref terra.Reference) LvpConfigAttributes {
	return LvpConfigAttributes{ref: ref}
}

func (lc LvpConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LvpConfigAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("path"))
}

func (lc LvpConfigAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("storage_class"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type UpgradePolicyAttributes struct {
	ref terra.Reference
}

func (up UpgradePolicyAttributes) InternalRef() (terra.Reference, error) {
	return up.ref, nil
}

func (up UpgradePolicyAttributes) InternalWithRef(ref terra.Reference) UpgradePolicyAttributes {
	return UpgradePolicyAttributes{ref: ref}
}

func (up UpgradePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return up.ref.InternalTokens()
}

func (up UpgradePolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("policy"))
}

type FleetState struct {
	Membership string `json:"membership"`
}

type StatusState struct {
	ErrorMessage string            `json:"error_message"`
	Conditions   []ConditionsState `json:"conditions"`
}

type ConditionsState struct {
	LastTransitionTime string `json:"last_transition_time"`
	Message            string `json:"message"`
	Reason             string `json:"reason"`
	State              string `json:"state"`
	Type               string `json:"type"`
}

type ValidationCheckState struct {
	Options  string                       `json:"options"`
	Scenario string                       `json:"scenario"`
	Status   []ValidationCheckStatusState `json:"status"`
}

type ValidationCheckStatusState struct {
	Result []ResultState `json:"result"`
}

type ResultState struct {
	Category    string `json:"category"`
	Description string `json:"description"`
	Details     string `json:"details"`
	Options     string `json:"options"`
	Reason      string `json:"reason"`
}

type BinaryAuthorizationState struct {
	EvaluationMode string `json:"evaluation_mode"`
}

type ClusterOperationsState struct {
	EnableApplicationLogs bool `json:"enable_application_logs"`
}

type ControlPlaneState struct {
	ApiServerArgs              []ApiServerArgsState              `json:"api_server_args"`
	ControlPlaneNodePoolConfig []ControlPlaneNodePoolConfigState `json:"control_plane_node_pool_config"`
}

type ApiServerArgsState struct {
	Argument string `json:"argument"`
	Value    string `json:"value"`
}

type ControlPlaneNodePoolConfigState struct {
	NodePoolConfig []ControlPlaneNodePoolConfigNodePoolConfigState `json:"node_pool_config"`
}

type ControlPlaneNodePoolConfigNodePoolConfigState struct {
	Labels          map[string]string                                          `json:"labels"`
	OperatingSystem string                                                     `json:"operating_system"`
	NodeConfigs     []ControlPlaneNodePoolConfigNodePoolConfigNodeConfigsState `json:"node_configs"`
	Taints          []ControlPlaneNodePoolConfigNodePoolConfigTaintsState      `json:"taints"`
}

type ControlPlaneNodePoolConfigNodePoolConfigNodeConfigsState struct {
	Labels map[string]string `json:"labels"`
	NodeIp string            `json:"node_ip"`
}

type ControlPlaneNodePoolConfigNodePoolConfigTaintsState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type LoadBalancerState struct {
	BgpLbConfig    []BgpLbConfigState    `json:"bgp_lb_config"`
	ManualLbConfig []ManualLbConfigState `json:"manual_lb_config"`
	MetalLbConfig  []MetalLbConfigState  `json:"metal_lb_config"`
	PortConfig     []PortConfigState     `json:"port_config"`
	VipConfig      []VipConfigState      `json:"vip_config"`
}

type BgpLbConfigState struct {
	Asn                        float64                                      `json:"asn"`
	AddressPools               []BgpLbConfigAddressPoolsState               `json:"address_pools"`
	BgpPeerConfigs             []BgpPeerConfigsState                        `json:"bgp_peer_configs"`
	LoadBalancerNodePoolConfig []BgpLbConfigLoadBalancerNodePoolConfigState `json:"load_balancer_node_pool_config"`
}

type BgpLbConfigAddressPoolsState struct {
	Addresses     []string `json:"addresses"`
	AvoidBuggyIps bool     `json:"avoid_buggy_ips"`
	ManualAssign  string   `json:"manual_assign"`
	Pool          string   `json:"pool"`
}

type BgpPeerConfigsState struct {
	Asn               float64  `json:"asn"`
	ControlPlaneNodes []string `json:"control_plane_nodes"`
	IpAddress         string   `json:"ip_address"`
}

type BgpLbConfigLoadBalancerNodePoolConfigState struct {
	NodePoolConfig []BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigState `json:"node_pool_config"`
}

type BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigState struct {
	Labels          map[string]string                                                     `json:"labels"`
	OperatingSystem string                                                                `json:"operating_system"`
	KubeletConfig   []KubeletConfigState                                                  `json:"kubelet_config"`
	NodeConfigs     []BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsState `json:"node_configs"`
	Taints          []BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsState      `json:"taints"`
}

type KubeletConfigState struct {
	RegistryBurst               float64 `json:"registry_burst"`
	RegistryPullQps             float64 `json:"registry_pull_qps"`
	SerializeImagePullsDisabled bool    `json:"serialize_image_pulls_disabled"`
}

type BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsState struct {
	Labels map[string]string `json:"labels"`
	NodeIp string            `json:"node_ip"`
}

type BgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type ManualLbConfigState struct {
	Enabled bool `json:"enabled"`
}

type MetalLbConfigState struct {
	AddressPools               []MetalLbConfigAddressPoolsState               `json:"address_pools"`
	LoadBalancerNodePoolConfig []MetalLbConfigLoadBalancerNodePoolConfigState `json:"load_balancer_node_pool_config"`
}

type MetalLbConfigAddressPoolsState struct {
	Addresses     []string `json:"addresses"`
	AvoidBuggyIps bool     `json:"avoid_buggy_ips"`
	ManualAssign  bool     `json:"manual_assign"`
	Pool          string   `json:"pool"`
}

type MetalLbConfigLoadBalancerNodePoolConfigState struct {
	NodePoolConfig []MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigState `json:"node_pool_config"`
}

type MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigState struct {
	Labels          map[string]string                                                       `json:"labels"`
	OperatingSystem string                                                                  `json:"operating_system"`
	NodeConfigs     []MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsState `json:"node_configs"`
	Taints          []MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsState      `json:"taints"`
}

type MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfigsState struct {
	Labels map[string]string `json:"labels"`
	NodeIp string            `json:"node_ip"`
}

type MetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigTaintsState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type PortConfigState struct {
	ControlPlaneLoadBalancerPort float64 `json:"control_plane_load_balancer_port"`
}

type VipConfigState struct {
	ControlPlaneVip string `json:"control_plane_vip"`
	IngressVip      string `json:"ingress_vip"`
}

type MaintenanceConfigState struct {
	MaintenanceAddressCidrBlocks []string `json:"maintenance_address_cidr_blocks"`
}

type NetworkConfigState struct {
	AdvancedNetworking              bool                                   `json:"advanced_networking"`
	IslandModeCidr                  []IslandModeCidrState                  `json:"island_mode_cidr"`
	MultipleNetworkInterfacesConfig []MultipleNetworkInterfacesConfigState `json:"multiple_network_interfaces_config"`
	SrIovConfig                     []SrIovConfigState                     `json:"sr_iov_config"`
}

type IslandModeCidrState struct {
	PodAddressCidrBlocks     []string `json:"pod_address_cidr_blocks"`
	ServiceAddressCidrBlocks []string `json:"service_address_cidr_blocks"`
}

type MultipleNetworkInterfacesConfigState struct {
	Enabled bool `json:"enabled"`
}

type SrIovConfigState struct {
	Enabled bool `json:"enabled"`
}

type NodeAccessConfigState struct {
	LoginUser string `json:"login_user"`
}

type NodeConfigState struct {
	ContainerRuntime string  `json:"container_runtime"`
	MaxPodsPerNode   float64 `json:"max_pods_per_node"`
}

type OsEnvironmentConfigState struct {
	PackageRepoExcluded bool `json:"package_repo_excluded"`
}

type ProxyState struct {
	NoProxy []string `json:"no_proxy"`
	Uri     string   `json:"uri"`
}

type SecurityConfigState struct {
	Authorization []AuthorizationState `json:"authorization"`
}

type AuthorizationState struct {
	AdminUsers []AdminUsersState `json:"admin_users"`
}

type AdminUsersState struct {
	Username string `json:"username"`
}

type StorageState struct {
	LvpNodeMountsConfig []LvpNodeMountsConfigState `json:"lvp_node_mounts_config"`
	LvpShareConfig      []LvpShareConfigState      `json:"lvp_share_config"`
}

type LvpNodeMountsConfigState struct {
	Path         string `json:"path"`
	StorageClass string `json:"storage_class"`
}

type LvpShareConfigState struct {
	SharedPathPvCount float64          `json:"shared_path_pv_count"`
	LvpConfig         []LvpConfigState `json:"lvp_config"`
}

type LvpConfigState struct {
	Path         string `json:"path"`
	StorageClass string `json:"storage_class"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type UpgradePolicyState struct {
	Policy string `json:"policy"`
}
