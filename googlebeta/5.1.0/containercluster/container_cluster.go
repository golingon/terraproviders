// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package containercluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AddonsConfig struct {
	// CloudrunConfig: optional
	CloudrunConfig *CloudrunConfig `hcl:"cloudrun_config,block"`
	// ConfigConnectorConfig: optional
	ConfigConnectorConfig *ConfigConnectorConfig `hcl:"config_connector_config,block"`
	// DnsCacheConfig: optional
	DnsCacheConfig *DnsCacheConfig `hcl:"dns_cache_config,block"`
	// GcePersistentDiskCsiDriverConfig: optional
	GcePersistentDiskCsiDriverConfig *GcePersistentDiskCsiDriverConfig `hcl:"gce_persistent_disk_csi_driver_config,block"`
	// GcpFilestoreCsiDriverConfig: optional
	GcpFilestoreCsiDriverConfig *GcpFilestoreCsiDriverConfig `hcl:"gcp_filestore_csi_driver_config,block"`
	// GcsFuseCsiDriverConfig: optional
	GcsFuseCsiDriverConfig *GcsFuseCsiDriverConfig `hcl:"gcs_fuse_csi_driver_config,block"`
	// GkeBackupAgentConfig: optional
	GkeBackupAgentConfig *GkeBackupAgentConfig `hcl:"gke_backup_agent_config,block"`
	// HorizontalPodAutoscaling: optional
	HorizontalPodAutoscaling *HorizontalPodAutoscaling `hcl:"horizontal_pod_autoscaling,block"`
	// HttpLoadBalancing: optional
	HttpLoadBalancing *HttpLoadBalancing `hcl:"http_load_balancing,block"`
	// IstioConfig: optional
	IstioConfig *IstioConfig `hcl:"istio_config,block"`
	// KalmConfig: optional
	KalmConfig *KalmConfig `hcl:"kalm_config,block"`
	// NetworkPolicyConfig: optional
	NetworkPolicyConfig *NetworkPolicyConfig `hcl:"network_policy_config,block"`
}

type CloudrunConfig struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
	// LoadBalancerType: string, optional
	LoadBalancerType terra.StringValue `hcl:"load_balancer_type,attr"`
}

type ConfigConnectorConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type DnsCacheConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type GcePersistentDiskCsiDriverConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type GcpFilestoreCsiDriverConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type GcsFuseCsiDriverConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type GkeBackupAgentConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type HorizontalPodAutoscaling struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type HttpLoadBalancing struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type IstioConfig struct {
	// Auth: string, optional
	Auth terra.StringValue `hcl:"auth,attr"`
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type KalmConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NetworkPolicyConfig struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type AuthenticatorGroupsConfig struct {
	// SecurityGroup: string, required
	SecurityGroup terra.StringValue `hcl:"security_group,attr" validate:"required"`
}

type BinaryAuthorization struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// EvaluationMode: string, optional
	EvaluationMode terra.StringValue `hcl:"evaluation_mode,attr"`
}

type ClusterAutoscaling struct {
	// AutoscalingProfile: string, optional
	AutoscalingProfile terra.StringValue `hcl:"autoscaling_profile,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// AutoProvisioningDefaults: optional
	AutoProvisioningDefaults *AutoProvisioningDefaults `hcl:"auto_provisioning_defaults,block"`
	// ResourceLimits: min=0
	ResourceLimits []ResourceLimits `hcl:"resource_limits,block" validate:"min=0"`
}

type AutoProvisioningDefaults struct {
	// BootDiskKmsKey: string, optional
	BootDiskKmsKey terra.StringValue `hcl:"boot_disk_kms_key,attr"`
	// DiskSize: number, optional
	DiskSize terra.NumberValue `hcl:"disk_size,attr"`
	// DiskType: string, optional
	DiskType terra.StringValue `hcl:"disk_type,attr"`
	// ImageType: string, optional
	ImageType terra.StringValue `hcl:"image_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// OauthScopes: list of string, optional
	OauthScopes terra.ListValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// AutoProvisioningDefaultsManagement: optional
	Management *AutoProvisioningDefaultsManagement `hcl:"management,block"`
	// AutoProvisioningDefaultsShieldedInstanceConfig: optional
	ShieldedInstanceConfig *AutoProvisioningDefaultsShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
	// AutoProvisioningDefaultsUpgradeSettings: optional
	UpgradeSettings *AutoProvisioningDefaultsUpgradeSettings `hcl:"upgrade_settings,block"`
}

type AutoProvisioningDefaultsManagement struct {
	// AutoRepair: bool, optional
	AutoRepair terra.BoolValue `hcl:"auto_repair,attr"`
	// AutoUpgrade: bool, optional
	AutoUpgrade terra.BoolValue `hcl:"auto_upgrade,attr"`
	// UpgradeOptions: min=0
	UpgradeOptions []UpgradeOptions `hcl:"upgrade_options,block" validate:"min=0"`
}

type UpgradeOptions struct{}

type AutoProvisioningDefaultsShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
}

type AutoProvisioningDefaultsUpgradeSettings struct {
	// MaxSurge: number, optional
	MaxSurge terra.NumberValue `hcl:"max_surge,attr"`
	// MaxUnavailable: number, optional
	MaxUnavailable terra.NumberValue `hcl:"max_unavailable,attr"`
	// Strategy: string, optional
	Strategy terra.StringValue `hcl:"strategy,attr"`
	// AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings: optional
	BlueGreenSettings *AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings `hcl:"blue_green_settings,block"`
}

type AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings struct {
	// NodePoolSoakDuration: string, optional
	NodePoolSoakDuration terra.StringValue `hcl:"node_pool_soak_duration,attr"`
	// AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy: optional
	StandardRolloutPolicy *AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy `hcl:"standard_rollout_policy,block"`
}

type AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy struct {
	// BatchNodeCount: number, optional
	BatchNodeCount terra.NumberValue `hcl:"batch_node_count,attr"`
	// BatchPercentage: number, optional
	BatchPercentage terra.NumberValue `hcl:"batch_percentage,attr"`
	// BatchSoakDuration: string, optional
	BatchSoakDuration terra.StringValue `hcl:"batch_soak_duration,attr"`
}

type ResourceLimits struct {
	// Maximum: number, optional
	Maximum terra.NumberValue `hcl:"maximum,attr"`
	// Minimum: number, optional
	Minimum terra.NumberValue `hcl:"minimum,attr"`
	// ResourceType: string, required
	ResourceType terra.StringValue `hcl:"resource_type,attr" validate:"required"`
}

type ClusterTelemetry struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ConfidentialNodes struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type CostManagementConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type DatabaseEncryption struct {
	// KeyName: string, optional
	KeyName terra.StringValue `hcl:"key_name,attr"`
	// State: string, required
	State terra.StringValue `hcl:"state,attr" validate:"required"`
}

type DefaultSnatStatus struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type DnsConfig struct {
	// ClusterDns: string, optional
	ClusterDns terra.StringValue `hcl:"cluster_dns,attr"`
	// ClusterDnsDomain: string, optional
	ClusterDnsDomain terra.StringValue `hcl:"cluster_dns_domain,attr"`
	// ClusterDnsScope: string, optional
	ClusterDnsScope terra.StringValue `hcl:"cluster_dns_scope,attr"`
}

type EnableK8SBetaApis struct {
	// EnabledApis: set of string, required
	EnabledApis terra.SetValue[terra.StringValue] `hcl:"enabled_apis,attr" validate:"required"`
}

type GatewayApiConfig struct {
	// Channel: string, required
	Channel terra.StringValue `hcl:"channel,attr" validate:"required"`
}

type IdentityServiceConfig struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type IpAllocationPolicy struct {
	// ClusterIpv4CidrBlock: string, optional
	ClusterIpv4CidrBlock terra.StringValue `hcl:"cluster_ipv4_cidr_block,attr"`
	// ClusterSecondaryRangeName: string, optional
	ClusterSecondaryRangeName terra.StringValue `hcl:"cluster_secondary_range_name,attr"`
	// ServicesIpv4CidrBlock: string, optional
	ServicesIpv4CidrBlock terra.StringValue `hcl:"services_ipv4_cidr_block,attr"`
	// ServicesSecondaryRangeName: string, optional
	ServicesSecondaryRangeName terra.StringValue `hcl:"services_secondary_range_name,attr"`
	// StackType: string, optional
	StackType terra.StringValue `hcl:"stack_type,attr"`
	// AdditionalPodRangesConfig: optional
	AdditionalPodRangesConfig *AdditionalPodRangesConfig `hcl:"additional_pod_ranges_config,block"`
	// IpAllocationPolicyPodCidrOverprovisionConfig: optional
	PodCidrOverprovisionConfig *IpAllocationPolicyPodCidrOverprovisionConfig `hcl:"pod_cidr_overprovision_config,block"`
}

type AdditionalPodRangesConfig struct {
	// PodRangeNames: set of string, required
	PodRangeNames terra.SetValue[terra.StringValue] `hcl:"pod_range_names,attr" validate:"required"`
}

type IpAllocationPolicyPodCidrOverprovisionConfig struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type LoggingConfig struct {
	// EnableComponents: list of string, required
	EnableComponents terra.ListValue[terra.StringValue] `hcl:"enable_components,attr" validate:"required"`
}

type MaintenancePolicy struct {
	// DailyMaintenanceWindow: optional
	DailyMaintenanceWindow *DailyMaintenanceWindow `hcl:"daily_maintenance_window,block"`
	// MaintenanceExclusion: min=0,max=20
	MaintenanceExclusion []MaintenanceExclusion `hcl:"maintenance_exclusion,block" validate:"min=0,max=20"`
	// RecurringWindow: optional
	RecurringWindow *RecurringWindow `hcl:"recurring_window,block"`
}

type DailyMaintenanceWindow struct {
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
}

type MaintenanceExclusion struct {
	// EndTime: string, required
	EndTime terra.StringValue `hcl:"end_time,attr" validate:"required"`
	// ExclusionName: string, required
	ExclusionName terra.StringValue `hcl:"exclusion_name,attr" validate:"required"`
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
	// ExclusionOptions: optional
	ExclusionOptions *ExclusionOptions `hcl:"exclusion_options,block"`
}

type ExclusionOptions struct {
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
}

type RecurringWindow struct {
	// EndTime: string, required
	EndTime terra.StringValue `hcl:"end_time,attr" validate:"required"`
	// Recurrence: string, required
	Recurrence terra.StringValue `hcl:"recurrence,attr" validate:"required"`
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
}

type MasterAuth struct {
	// ClientCertificateConfig: required
	ClientCertificateConfig *ClientCertificateConfig `hcl:"client_certificate_config,block" validate:"required"`
}

type ClientCertificateConfig struct {
	// IssueClientCertificate: bool, required
	IssueClientCertificate terra.BoolValue `hcl:"issue_client_certificate,attr" validate:"required"`
}

type MasterAuthorizedNetworksConfig struct {
	// GcpPublicCidrsAccessEnabled: bool, optional
	GcpPublicCidrsAccessEnabled terra.BoolValue `hcl:"gcp_public_cidrs_access_enabled,attr"`
	// CidrBlocks: min=0
	CidrBlocks []CidrBlocks `hcl:"cidr_blocks,block" validate:"min=0"`
}

type CidrBlocks struct {
	// CidrBlock: string, required
	CidrBlock terra.StringValue `hcl:"cidr_block,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
}

type MeshCertificates struct {
	// EnableCertificates: bool, required
	EnableCertificates terra.BoolValue `hcl:"enable_certificates,attr" validate:"required"`
}

type MonitoringConfig struct {
	// EnableComponents: list of string, optional
	EnableComponents terra.ListValue[terra.StringValue] `hcl:"enable_components,attr"`
	// AdvancedDatapathObservabilityConfig: min=0,max=2
	AdvancedDatapathObservabilityConfig []AdvancedDatapathObservabilityConfig `hcl:"advanced_datapath_observability_config,block" validate:"min=0,max=2"`
	// ManagedPrometheus: optional
	ManagedPrometheus *ManagedPrometheus `hcl:"managed_prometheus,block"`
}

type AdvancedDatapathObservabilityConfig struct {
	// EnableMetrics: bool, required
	EnableMetrics terra.BoolValue `hcl:"enable_metrics,attr" validate:"required"`
	// RelayMode: string, optional
	RelayMode terra.StringValue `hcl:"relay_mode,attr"`
}

type ManagedPrometheus struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NetworkPolicy struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Provider: string, optional
	Provider terra.StringValue `hcl:"provider,attr"`
}

type NodeConfig struct {
	// BootDiskKmsKey: string, optional
	BootDiskKmsKey terra.StringValue `hcl:"boot_disk_kms_key,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// DiskType: string, optional
	DiskType terra.StringValue `hcl:"disk_type,attr"`
	// ImageType: string, optional
	ImageType terra.StringValue `hcl:"image_type,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LocalSsdCount: number, optional
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr"`
	// LoggingVariant: string, optional
	LoggingVariant terra.StringValue `hcl:"logging_variant,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NodeGroup: string, optional
	NodeGroup terra.StringValue `hcl:"node_group,attr"`
	// OauthScopes: set of string, optional
	OauthScopes terra.SetValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
	// Preemptible: bool, optional
	Preemptible terra.BoolValue `hcl:"preemptible,attr"`
	// ResourceLabels: map of string, optional
	ResourceLabels terra.MapValue[terra.StringValue] `hcl:"resource_labels,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// Spot: bool, optional
	Spot terra.BoolValue `hcl:"spot,attr"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
	// NodeConfigEffectiveTaints: min=0
	EffectiveTaints []NodeConfigEffectiveTaints `hcl:"effective_taints,block" validate:"min=0"`
	// NodeConfigGuestAccelerator: min=0
	GuestAccelerator []NodeConfigGuestAccelerator `hcl:"guest_accelerator,block" validate:"min=0"`
	// NodeConfigAdvancedMachineFeatures: optional
	AdvancedMachineFeatures *NodeConfigAdvancedMachineFeatures `hcl:"advanced_machine_features,block"`
	// NodeConfigConfidentialNodes: optional
	ConfidentialNodes *NodeConfigConfidentialNodes `hcl:"confidential_nodes,block"`
	// NodeConfigEphemeralStorageConfig: optional
	EphemeralStorageConfig *NodeConfigEphemeralStorageConfig `hcl:"ephemeral_storage_config,block"`
	// NodeConfigEphemeralStorageLocalSsdConfig: optional
	EphemeralStorageLocalSsdConfig *NodeConfigEphemeralStorageLocalSsdConfig `hcl:"ephemeral_storage_local_ssd_config,block"`
	// NodeConfigFastSocket: optional
	FastSocket *NodeConfigFastSocket `hcl:"fast_socket,block"`
	// NodeConfigGcfsConfig: optional
	GcfsConfig *NodeConfigGcfsConfig `hcl:"gcfs_config,block"`
	// NodeConfigGvnic: optional
	Gvnic *NodeConfigGvnic `hcl:"gvnic,block"`
	// NodeConfigHostMaintenancePolicy: optional
	HostMaintenancePolicy *NodeConfigHostMaintenancePolicy `hcl:"host_maintenance_policy,block"`
	// NodeConfigKubeletConfig: optional
	KubeletConfig *NodeConfigKubeletConfig `hcl:"kubelet_config,block"`
	// NodeConfigLinuxNodeConfig: optional
	LinuxNodeConfig *NodeConfigLinuxNodeConfig `hcl:"linux_node_config,block"`
	// NodeConfigLocalNvmeSsdBlockConfig: optional
	LocalNvmeSsdBlockConfig *NodeConfigLocalNvmeSsdBlockConfig `hcl:"local_nvme_ssd_block_config,block"`
	// NodeConfigReservationAffinity: optional
	ReservationAffinity *NodeConfigReservationAffinity `hcl:"reservation_affinity,block"`
	// NodeConfigSandboxConfig: optional
	SandboxConfig *NodeConfigSandboxConfig `hcl:"sandbox_config,block"`
	// NodeConfigShieldedInstanceConfig: optional
	ShieldedInstanceConfig *NodeConfigShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
	// NodeConfigSoleTenantConfig: optional
	SoleTenantConfig *NodeConfigSoleTenantConfig `hcl:"sole_tenant_config,block"`
	// NodeConfigTaint: min=0
	Taint []NodeConfigTaint `hcl:"taint,block" validate:"min=0"`
	// NodeConfigWorkloadMetadataConfig: optional
	WorkloadMetadataConfig *NodeConfigWorkloadMetadataConfig `hcl:"workload_metadata_config,block"`
}

type NodeConfigEffectiveTaints struct{}

type NodeConfigGuestAccelerator struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// GpuPartitionSize: string, optional
	GpuPartitionSize terra.StringValue `hcl:"gpu_partition_size,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// NodeConfigGuestAcceleratorGpuDriverInstallationConfig: min=0
	GpuDriverInstallationConfig []NodeConfigGuestAcceleratorGpuDriverInstallationConfig `hcl:"gpu_driver_installation_config,block" validate:"min=0"`
	// NodeConfigGuestAcceleratorGpuSharingConfig: min=0
	GpuSharingConfig []NodeConfigGuestAcceleratorGpuSharingConfig `hcl:"gpu_sharing_config,block" validate:"min=0"`
}

type NodeConfigGuestAcceleratorGpuDriverInstallationConfig struct {
	// GpuDriverVersion: string, optional
	GpuDriverVersion terra.StringValue `hcl:"gpu_driver_version,attr"`
}

type NodeConfigGuestAcceleratorGpuSharingConfig struct {
	// GpuSharingStrategy: string, optional
	GpuSharingStrategy terra.StringValue `hcl:"gpu_sharing_strategy,attr"`
	// MaxSharedClientsPerGpu: number, optional
	MaxSharedClientsPerGpu terra.NumberValue `hcl:"max_shared_clients_per_gpu,attr"`
}

type NodeConfigAdvancedMachineFeatures struct {
	// ThreadsPerCore: number, required
	ThreadsPerCore terra.NumberValue `hcl:"threads_per_core,attr" validate:"required"`
}

type NodeConfigConfidentialNodes struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodeConfigEphemeralStorageConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodeConfigEphemeralStorageLocalSsdConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodeConfigFastSocket struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodeConfigGcfsConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodeConfigGvnic struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodeConfigHostMaintenancePolicy struct {
	// MaintenanceInterval: string, required
	MaintenanceInterval terra.StringValue `hcl:"maintenance_interval,attr" validate:"required"`
}

type NodeConfigKubeletConfig struct {
	// CpuCfsQuota: bool, optional
	CpuCfsQuota terra.BoolValue `hcl:"cpu_cfs_quota,attr"`
	// CpuCfsQuotaPeriod: string, optional
	CpuCfsQuotaPeriod terra.StringValue `hcl:"cpu_cfs_quota_period,attr"`
	// CpuManagerPolicy: string, required
	CpuManagerPolicy terra.StringValue `hcl:"cpu_manager_policy,attr" validate:"required"`
	// PodPidsLimit: number, optional
	PodPidsLimit terra.NumberValue `hcl:"pod_pids_limit,attr"`
}

type NodeConfigLinuxNodeConfig struct {
	// CgroupMode: string, optional
	CgroupMode terra.StringValue `hcl:"cgroup_mode,attr"`
	// Sysctls: map of string, optional
	Sysctls terra.MapValue[terra.StringValue] `hcl:"sysctls,attr"`
}

type NodeConfigLocalNvmeSsdBlockConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodeConfigReservationAffinity struct {
	// ConsumeReservationType: string, required
	ConsumeReservationType terra.StringValue `hcl:"consume_reservation_type,attr" validate:"required"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type NodeConfigSandboxConfig struct {
	// SandboxType: string, required
	SandboxType terra.StringValue `hcl:"sandbox_type,attr" validate:"required"`
}

type NodeConfigShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
}

type NodeConfigSoleTenantConfig struct {
	// NodeConfigSoleTenantConfigNodeAffinity: min=1
	NodeAffinity []NodeConfigSoleTenantConfigNodeAffinity `hcl:"node_affinity,block" validate:"min=1"`
}

type NodeConfigSoleTenantConfigNodeAffinity struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type NodeConfigTaint struct {
	// Effect: string, required
	Effect terra.StringValue `hcl:"effect,attr" validate:"required"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type NodeConfigWorkloadMetadataConfig struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type NodePool struct {
	// InitialNodeCount: number, optional
	InitialNodeCount terra.NumberValue `hcl:"initial_node_count,attr"`
	// MaxPodsPerNode: number, optional
	MaxPodsPerNode terra.NumberValue `hcl:"max_pods_per_node,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// NodeCount: number, optional
	NodeCount terra.NumberValue `hcl:"node_count,attr"`
	// NodeLocations: set of string, optional
	NodeLocations terra.SetValue[terra.StringValue] `hcl:"node_locations,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// Autoscaling: optional
	Autoscaling *Autoscaling `hcl:"autoscaling,block"`
	// NodePoolManagement: optional
	Management *NodePoolManagement `hcl:"management,block"`
	// NetworkConfig: optional
	NetworkConfig *NetworkConfig `hcl:"network_config,block"`
	// NodePoolNodeConfig: optional
	NodeConfig *NodePoolNodeConfig `hcl:"node_config,block"`
	// PlacementPolicy: optional
	PlacementPolicy *PlacementPolicy `hcl:"placement_policy,block"`
	// NodePoolUpgradeSettings: optional
	UpgradeSettings *NodePoolUpgradeSettings `hcl:"upgrade_settings,block"`
}

type Autoscaling struct {
	// LocationPolicy: string, optional
	LocationPolicy terra.StringValue `hcl:"location_policy,attr"`
	// MaxNodeCount: number, optional
	MaxNodeCount terra.NumberValue `hcl:"max_node_count,attr"`
	// MinNodeCount: number, optional
	MinNodeCount terra.NumberValue `hcl:"min_node_count,attr"`
	// TotalMaxNodeCount: number, optional
	TotalMaxNodeCount terra.NumberValue `hcl:"total_max_node_count,attr"`
	// TotalMinNodeCount: number, optional
	TotalMinNodeCount terra.NumberValue `hcl:"total_min_node_count,attr"`
}

type NodePoolManagement struct {
	// AutoRepair: bool, optional
	AutoRepair terra.BoolValue `hcl:"auto_repair,attr"`
	// AutoUpgrade: bool, optional
	AutoUpgrade terra.BoolValue `hcl:"auto_upgrade,attr"`
}

type NetworkConfig struct {
	// CreatePodRange: bool, optional
	CreatePodRange terra.BoolValue `hcl:"create_pod_range,attr"`
	// EnablePrivateNodes: bool, optional
	EnablePrivateNodes terra.BoolValue `hcl:"enable_private_nodes,attr"`
	// PodIpv4CidrBlock: string, optional
	PodIpv4CidrBlock terra.StringValue `hcl:"pod_ipv4_cidr_block,attr"`
	// PodRange: string, optional
	PodRange terra.StringValue `hcl:"pod_range,attr"`
	// AdditionalNodeNetworkConfigs: min=0
	AdditionalNodeNetworkConfigs []AdditionalNodeNetworkConfigs `hcl:"additional_node_network_configs,block" validate:"min=0"`
	// AdditionalPodNetworkConfigs: min=0
	AdditionalPodNetworkConfigs []AdditionalPodNetworkConfigs `hcl:"additional_pod_network_configs,block" validate:"min=0"`
	// NetworkConfigPodCidrOverprovisionConfig: optional
	PodCidrOverprovisionConfig *NetworkConfigPodCidrOverprovisionConfig `hcl:"pod_cidr_overprovision_config,block"`
}

type AdditionalNodeNetworkConfigs struct {
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
}

type AdditionalPodNetworkConfigs struct {
	// MaxPodsPerNode: number, optional
	MaxPodsPerNode terra.NumberValue `hcl:"max_pods_per_node,attr"`
	// SecondaryPodRange: string, optional
	SecondaryPodRange terra.StringValue `hcl:"secondary_pod_range,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
}

type NetworkConfigPodCidrOverprovisionConfig struct {
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
}

type NodePoolNodeConfig struct {
	// BootDiskKmsKey: string, optional
	BootDiskKmsKey terra.StringValue `hcl:"boot_disk_kms_key,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// DiskType: string, optional
	DiskType terra.StringValue `hcl:"disk_type,attr"`
	// ImageType: string, optional
	ImageType terra.StringValue `hcl:"image_type,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LocalSsdCount: number, optional
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr"`
	// LoggingVariant: string, optional
	LoggingVariant terra.StringValue `hcl:"logging_variant,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NodeGroup: string, optional
	NodeGroup terra.StringValue `hcl:"node_group,attr"`
	// OauthScopes: set of string, optional
	OauthScopes terra.SetValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
	// Preemptible: bool, optional
	Preemptible terra.BoolValue `hcl:"preemptible,attr"`
	// ResourceLabels: map of string, optional
	ResourceLabels terra.MapValue[terra.StringValue] `hcl:"resource_labels,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// Spot: bool, optional
	Spot terra.BoolValue `hcl:"spot,attr"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
	// NodePoolNodeConfigEffectiveTaints: min=0
	EffectiveTaints []NodePoolNodeConfigEffectiveTaints `hcl:"effective_taints,block" validate:"min=0"`
	// NodePoolNodeConfigGuestAccelerator: min=0
	GuestAccelerator []NodePoolNodeConfigGuestAccelerator `hcl:"guest_accelerator,block" validate:"min=0"`
	// NodePoolNodeConfigAdvancedMachineFeatures: optional
	AdvancedMachineFeatures *NodePoolNodeConfigAdvancedMachineFeatures `hcl:"advanced_machine_features,block"`
	// NodePoolNodeConfigConfidentialNodes: optional
	ConfidentialNodes *NodePoolNodeConfigConfidentialNodes `hcl:"confidential_nodes,block"`
	// NodePoolNodeConfigEphemeralStorageConfig: optional
	EphemeralStorageConfig *NodePoolNodeConfigEphemeralStorageConfig `hcl:"ephemeral_storage_config,block"`
	// NodePoolNodeConfigEphemeralStorageLocalSsdConfig: optional
	EphemeralStorageLocalSsdConfig *NodePoolNodeConfigEphemeralStorageLocalSsdConfig `hcl:"ephemeral_storage_local_ssd_config,block"`
	// NodePoolNodeConfigFastSocket: optional
	FastSocket *NodePoolNodeConfigFastSocket `hcl:"fast_socket,block"`
	// NodePoolNodeConfigGcfsConfig: optional
	GcfsConfig *NodePoolNodeConfigGcfsConfig `hcl:"gcfs_config,block"`
	// NodePoolNodeConfigGvnic: optional
	Gvnic *NodePoolNodeConfigGvnic `hcl:"gvnic,block"`
	// NodePoolNodeConfigHostMaintenancePolicy: optional
	HostMaintenancePolicy *NodePoolNodeConfigHostMaintenancePolicy `hcl:"host_maintenance_policy,block"`
	// NodePoolNodeConfigKubeletConfig: optional
	KubeletConfig *NodePoolNodeConfigKubeletConfig `hcl:"kubelet_config,block"`
	// NodePoolNodeConfigLinuxNodeConfig: optional
	LinuxNodeConfig *NodePoolNodeConfigLinuxNodeConfig `hcl:"linux_node_config,block"`
	// NodePoolNodeConfigLocalNvmeSsdBlockConfig: optional
	LocalNvmeSsdBlockConfig *NodePoolNodeConfigLocalNvmeSsdBlockConfig `hcl:"local_nvme_ssd_block_config,block"`
	// NodePoolNodeConfigReservationAffinity: optional
	ReservationAffinity *NodePoolNodeConfigReservationAffinity `hcl:"reservation_affinity,block"`
	// NodePoolNodeConfigSandboxConfig: optional
	SandboxConfig *NodePoolNodeConfigSandboxConfig `hcl:"sandbox_config,block"`
	// NodePoolNodeConfigShieldedInstanceConfig: optional
	ShieldedInstanceConfig *NodePoolNodeConfigShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
	// NodePoolNodeConfigSoleTenantConfig: optional
	SoleTenantConfig *NodePoolNodeConfigSoleTenantConfig `hcl:"sole_tenant_config,block"`
	// NodePoolNodeConfigTaint: min=0
	Taint []NodePoolNodeConfigTaint `hcl:"taint,block" validate:"min=0"`
	// NodePoolNodeConfigWorkloadMetadataConfig: optional
	WorkloadMetadataConfig *NodePoolNodeConfigWorkloadMetadataConfig `hcl:"workload_metadata_config,block"`
}

type NodePoolNodeConfigEffectiveTaints struct{}

type NodePoolNodeConfigGuestAccelerator struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// GpuPartitionSize: string, optional
	GpuPartitionSize terra.StringValue `hcl:"gpu_partition_size,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig: min=0
	GpuDriverInstallationConfig []NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig `hcl:"gpu_driver_installation_config,block" validate:"min=0"`
	// NodePoolNodeConfigGuestAcceleratorGpuSharingConfig: min=0
	GpuSharingConfig []NodePoolNodeConfigGuestAcceleratorGpuSharingConfig `hcl:"gpu_sharing_config,block" validate:"min=0"`
}

type NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig struct {
	// GpuDriverVersion: string, optional
	GpuDriverVersion terra.StringValue `hcl:"gpu_driver_version,attr"`
}

type NodePoolNodeConfigGuestAcceleratorGpuSharingConfig struct {
	// GpuSharingStrategy: string, optional
	GpuSharingStrategy terra.StringValue `hcl:"gpu_sharing_strategy,attr"`
	// MaxSharedClientsPerGpu: number, optional
	MaxSharedClientsPerGpu terra.NumberValue `hcl:"max_shared_clients_per_gpu,attr"`
}

type NodePoolNodeConfigAdvancedMachineFeatures struct {
	// ThreadsPerCore: number, required
	ThreadsPerCore terra.NumberValue `hcl:"threads_per_core,attr" validate:"required"`
}

type NodePoolNodeConfigConfidentialNodes struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodePoolNodeConfigEphemeralStorageConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodePoolNodeConfigEphemeralStorageLocalSsdConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodePoolNodeConfigFastSocket struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodePoolNodeConfigGcfsConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodePoolNodeConfigGvnic struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NodePoolNodeConfigHostMaintenancePolicy struct {
	// MaintenanceInterval: string, required
	MaintenanceInterval terra.StringValue `hcl:"maintenance_interval,attr" validate:"required"`
}

type NodePoolNodeConfigKubeletConfig struct {
	// CpuCfsQuota: bool, optional
	CpuCfsQuota terra.BoolValue `hcl:"cpu_cfs_quota,attr"`
	// CpuCfsQuotaPeriod: string, optional
	CpuCfsQuotaPeriod terra.StringValue `hcl:"cpu_cfs_quota_period,attr"`
	// CpuManagerPolicy: string, required
	CpuManagerPolicy terra.StringValue `hcl:"cpu_manager_policy,attr" validate:"required"`
	// PodPidsLimit: number, optional
	PodPidsLimit terra.NumberValue `hcl:"pod_pids_limit,attr"`
}

type NodePoolNodeConfigLinuxNodeConfig struct {
	// CgroupMode: string, optional
	CgroupMode terra.StringValue `hcl:"cgroup_mode,attr"`
	// Sysctls: map of string, optional
	Sysctls terra.MapValue[terra.StringValue] `hcl:"sysctls,attr"`
}

type NodePoolNodeConfigLocalNvmeSsdBlockConfig struct {
	// LocalSsdCount: number, required
	LocalSsdCount terra.NumberValue `hcl:"local_ssd_count,attr" validate:"required"`
}

type NodePoolNodeConfigReservationAffinity struct {
	// ConsumeReservationType: string, required
	ConsumeReservationType terra.StringValue `hcl:"consume_reservation_type,attr" validate:"required"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type NodePoolNodeConfigSandboxConfig struct {
	// SandboxType: string, required
	SandboxType terra.StringValue `hcl:"sandbox_type,attr" validate:"required"`
}

type NodePoolNodeConfigShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
}

type NodePoolNodeConfigSoleTenantConfig struct {
	// NodePoolNodeConfigSoleTenantConfigNodeAffinity: min=1
	NodeAffinity []NodePoolNodeConfigSoleTenantConfigNodeAffinity `hcl:"node_affinity,block" validate:"min=1"`
}

type NodePoolNodeConfigSoleTenantConfigNodeAffinity struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type NodePoolNodeConfigTaint struct {
	// Effect: string, required
	Effect terra.StringValue `hcl:"effect,attr" validate:"required"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type NodePoolNodeConfigWorkloadMetadataConfig struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type PlacementPolicy struct {
	// PolicyName: string, optional
	PolicyName terra.StringValue `hcl:"policy_name,attr"`
	// TpuTopology: string, optional
	TpuTopology terra.StringValue `hcl:"tpu_topology,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type NodePoolUpgradeSettings struct {
	// MaxSurge: number, optional
	MaxSurge terra.NumberValue `hcl:"max_surge,attr"`
	// MaxUnavailable: number, optional
	MaxUnavailable terra.NumberValue `hcl:"max_unavailable,attr"`
	// Strategy: string, optional
	Strategy terra.StringValue `hcl:"strategy,attr"`
	// NodePoolUpgradeSettingsBlueGreenSettings: optional
	BlueGreenSettings *NodePoolUpgradeSettingsBlueGreenSettings `hcl:"blue_green_settings,block"`
}

type NodePoolUpgradeSettingsBlueGreenSettings struct {
	// NodePoolSoakDuration: string, optional
	NodePoolSoakDuration terra.StringValue `hcl:"node_pool_soak_duration,attr"`
	// NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy: required
	StandardRolloutPolicy *NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy `hcl:"standard_rollout_policy,block" validate:"required"`
}

type NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy struct {
	// BatchNodeCount: number, optional
	BatchNodeCount terra.NumberValue `hcl:"batch_node_count,attr"`
	// BatchPercentage: number, optional
	BatchPercentage terra.NumberValue `hcl:"batch_percentage,attr"`
	// BatchSoakDuration: string, optional
	BatchSoakDuration terra.StringValue `hcl:"batch_soak_duration,attr"`
}

type NodePoolAutoConfig struct {
	// NetworkTags: optional
	NetworkTags *NetworkTags `hcl:"network_tags,block"`
}

type NetworkTags struct {
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
}

type NodePoolDefaults struct {
	// NodeConfigDefaults: optional
	NodeConfigDefaults *NodeConfigDefaults `hcl:"node_config_defaults,block"`
}

type NodeConfigDefaults struct {
	// LoggingVariant: string, optional
	LoggingVariant terra.StringValue `hcl:"logging_variant,attr"`
	// NodeConfigDefaultsGcfsConfig: optional
	GcfsConfig *NodeConfigDefaultsGcfsConfig `hcl:"gcfs_config,block"`
}

type NodeConfigDefaultsGcfsConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NotificationConfig struct {
	// Pubsub: required
	Pubsub *Pubsub `hcl:"pubsub,block" validate:"required"`
}

type Pubsub struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Topic: string, optional
	Topic terra.StringValue `hcl:"topic,attr"`
	// Filter: optional
	Filter *Filter `hcl:"filter,block"`
}

type Filter struct {
	// EventType: list of string, required
	EventType terra.ListValue[terra.StringValue] `hcl:"event_type,attr" validate:"required"`
}

type PodSecurityPolicyConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type PrivateClusterConfig struct {
	// EnablePrivateEndpoint: bool, optional
	EnablePrivateEndpoint terra.BoolValue `hcl:"enable_private_endpoint,attr"`
	// EnablePrivateNodes: bool, optional
	EnablePrivateNodes terra.BoolValue `hcl:"enable_private_nodes,attr"`
	// MasterIpv4CidrBlock: string, optional
	MasterIpv4CidrBlock terra.StringValue `hcl:"master_ipv4_cidr_block,attr"`
	// PrivateEndpointSubnetwork: string, optional
	PrivateEndpointSubnetwork terra.StringValue `hcl:"private_endpoint_subnetwork,attr"`
	// MasterGlobalAccessConfig: optional
	MasterGlobalAccessConfig *MasterGlobalAccessConfig `hcl:"master_global_access_config,block"`
}

type MasterGlobalAccessConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type ProtectConfig struct {
	// WorkloadVulnerabilityMode: string, optional
	WorkloadVulnerabilityMode terra.StringValue `hcl:"workload_vulnerability_mode,attr"`
	// WorkloadConfig: optional
	WorkloadConfig *WorkloadConfig `hcl:"workload_config,block"`
}

type WorkloadConfig struct {
	// AuditMode: string, required
	AuditMode terra.StringValue `hcl:"audit_mode,attr" validate:"required"`
}

type ReleaseChannel struct {
	// Channel: string, required
	Channel terra.StringValue `hcl:"channel,attr" validate:"required"`
}

type ResourceUsageExportConfig struct {
	// EnableNetworkEgressMetering: bool, optional
	EnableNetworkEgressMetering terra.BoolValue `hcl:"enable_network_egress_metering,attr"`
	// EnableResourceConsumptionMetering: bool, optional
	EnableResourceConsumptionMetering terra.BoolValue `hcl:"enable_resource_consumption_metering,attr"`
	// BigqueryDestination: required
	BigqueryDestination *BigqueryDestination `hcl:"bigquery_destination,block" validate:"required"`
}

type BigqueryDestination struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
}

type SecurityPostureConfig struct {
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// VulnerabilityMode: string, optional
	VulnerabilityMode terra.StringValue `hcl:"vulnerability_mode,attr"`
}

type ServiceExternalIpsConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type TpuConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// UseServiceNetworking: bool, optional
	UseServiceNetworking terra.BoolValue `hcl:"use_service_networking,attr"`
}

type VerticalPodAutoscaling struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type WorkloadIdentityConfig struct {
	// WorkloadPool: string, optional
	WorkloadPool terra.StringValue `hcl:"workload_pool,attr"`
}

type AddonsConfigAttributes struct {
	ref terra.Reference
}

func (ac AddonsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AddonsConfigAttributes) InternalWithRef(ref terra.Reference) AddonsConfigAttributes {
	return AddonsConfigAttributes{ref: ref}
}

func (ac AddonsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AddonsConfigAttributes) CloudrunConfig() terra.ListValue[CloudrunConfigAttributes] {
	return terra.ReferenceAsList[CloudrunConfigAttributes](ac.ref.Append("cloudrun_config"))
}

func (ac AddonsConfigAttributes) ConfigConnectorConfig() terra.ListValue[ConfigConnectorConfigAttributes] {
	return terra.ReferenceAsList[ConfigConnectorConfigAttributes](ac.ref.Append("config_connector_config"))
}

func (ac AddonsConfigAttributes) DnsCacheConfig() terra.ListValue[DnsCacheConfigAttributes] {
	return terra.ReferenceAsList[DnsCacheConfigAttributes](ac.ref.Append("dns_cache_config"))
}

func (ac AddonsConfigAttributes) GcePersistentDiskCsiDriverConfig() terra.ListValue[GcePersistentDiskCsiDriverConfigAttributes] {
	return terra.ReferenceAsList[GcePersistentDiskCsiDriverConfigAttributes](ac.ref.Append("gce_persistent_disk_csi_driver_config"))
}

func (ac AddonsConfigAttributes) GcpFilestoreCsiDriverConfig() terra.ListValue[GcpFilestoreCsiDriverConfigAttributes] {
	return terra.ReferenceAsList[GcpFilestoreCsiDriverConfigAttributes](ac.ref.Append("gcp_filestore_csi_driver_config"))
}

func (ac AddonsConfigAttributes) GcsFuseCsiDriverConfig() terra.ListValue[GcsFuseCsiDriverConfigAttributes] {
	return terra.ReferenceAsList[GcsFuseCsiDriverConfigAttributes](ac.ref.Append("gcs_fuse_csi_driver_config"))
}

func (ac AddonsConfigAttributes) GkeBackupAgentConfig() terra.ListValue[GkeBackupAgentConfigAttributes] {
	return terra.ReferenceAsList[GkeBackupAgentConfigAttributes](ac.ref.Append("gke_backup_agent_config"))
}

func (ac AddonsConfigAttributes) HorizontalPodAutoscaling() terra.ListValue[HorizontalPodAutoscalingAttributes] {
	return terra.ReferenceAsList[HorizontalPodAutoscalingAttributes](ac.ref.Append("horizontal_pod_autoscaling"))
}

func (ac AddonsConfigAttributes) HttpLoadBalancing() terra.ListValue[HttpLoadBalancingAttributes] {
	return terra.ReferenceAsList[HttpLoadBalancingAttributes](ac.ref.Append("http_load_balancing"))
}

func (ac AddonsConfigAttributes) IstioConfig() terra.ListValue[IstioConfigAttributes] {
	return terra.ReferenceAsList[IstioConfigAttributes](ac.ref.Append("istio_config"))
}

func (ac AddonsConfigAttributes) KalmConfig() terra.ListValue[KalmConfigAttributes] {
	return terra.ReferenceAsList[KalmConfigAttributes](ac.ref.Append("kalm_config"))
}

func (ac AddonsConfigAttributes) NetworkPolicyConfig() terra.ListValue[NetworkPolicyConfigAttributes] {
	return terra.ReferenceAsList[NetworkPolicyConfigAttributes](ac.ref.Append("network_policy_config"))
}

type CloudrunConfigAttributes struct {
	ref terra.Reference
}

func (cc CloudrunConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc CloudrunConfigAttributes) InternalWithRef(ref terra.Reference) CloudrunConfigAttributes {
	return CloudrunConfigAttributes{ref: ref}
}

func (cc CloudrunConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc CloudrunConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("disabled"))
}

func (cc CloudrunConfigAttributes) LoadBalancerType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("load_balancer_type"))
}

type ConfigConnectorConfigAttributes struct {
	ref terra.Reference
}

func (ccc ConfigConnectorConfigAttributes) InternalRef() (terra.Reference, error) {
	return ccc.ref, nil
}

func (ccc ConfigConnectorConfigAttributes) InternalWithRef(ref terra.Reference) ConfigConnectorConfigAttributes {
	return ConfigConnectorConfigAttributes{ref: ref}
}

func (ccc ConfigConnectorConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccc.ref.InternalTokens()
}

func (ccc ConfigConnectorConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ccc.ref.Append("enabled"))
}

type DnsCacheConfigAttributes struct {
	ref terra.Reference
}

func (dcc DnsCacheConfigAttributes) InternalRef() (terra.Reference, error) {
	return dcc.ref, nil
}

func (dcc DnsCacheConfigAttributes) InternalWithRef(ref terra.Reference) DnsCacheConfigAttributes {
	return DnsCacheConfigAttributes{ref: ref}
}

func (dcc DnsCacheConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcc.ref.InternalTokens()
}

func (dcc DnsCacheConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dcc.ref.Append("enabled"))
}

type GcePersistentDiskCsiDriverConfigAttributes struct {
	ref terra.Reference
}

func (gpdcdc GcePersistentDiskCsiDriverConfigAttributes) InternalRef() (terra.Reference, error) {
	return gpdcdc.ref, nil
}

func (gpdcdc GcePersistentDiskCsiDriverConfigAttributes) InternalWithRef(ref terra.Reference) GcePersistentDiskCsiDriverConfigAttributes {
	return GcePersistentDiskCsiDriverConfigAttributes{ref: ref}
}

func (gpdcdc GcePersistentDiskCsiDriverConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gpdcdc.ref.InternalTokens()
}

func (gpdcdc GcePersistentDiskCsiDriverConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gpdcdc.ref.Append("enabled"))
}

type GcpFilestoreCsiDriverConfigAttributes struct {
	ref terra.Reference
}

func (gfcdc GcpFilestoreCsiDriverConfigAttributes) InternalRef() (terra.Reference, error) {
	return gfcdc.ref, nil
}

func (gfcdc GcpFilestoreCsiDriverConfigAttributes) InternalWithRef(ref terra.Reference) GcpFilestoreCsiDriverConfigAttributes {
	return GcpFilestoreCsiDriverConfigAttributes{ref: ref}
}

func (gfcdc GcpFilestoreCsiDriverConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gfcdc.ref.InternalTokens()
}

func (gfcdc GcpFilestoreCsiDriverConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gfcdc.ref.Append("enabled"))
}

type GcsFuseCsiDriverConfigAttributes struct {
	ref terra.Reference
}

func (gfcdc GcsFuseCsiDriverConfigAttributes) InternalRef() (terra.Reference, error) {
	return gfcdc.ref, nil
}

func (gfcdc GcsFuseCsiDriverConfigAttributes) InternalWithRef(ref terra.Reference) GcsFuseCsiDriverConfigAttributes {
	return GcsFuseCsiDriverConfigAttributes{ref: ref}
}

func (gfcdc GcsFuseCsiDriverConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gfcdc.ref.InternalTokens()
}

func (gfcdc GcsFuseCsiDriverConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gfcdc.ref.Append("enabled"))
}

type GkeBackupAgentConfigAttributes struct {
	ref terra.Reference
}

func (gbac GkeBackupAgentConfigAttributes) InternalRef() (terra.Reference, error) {
	return gbac.ref, nil
}

func (gbac GkeBackupAgentConfigAttributes) InternalWithRef(ref terra.Reference) GkeBackupAgentConfigAttributes {
	return GkeBackupAgentConfigAttributes{ref: ref}
}

func (gbac GkeBackupAgentConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gbac.ref.InternalTokens()
}

func (gbac GkeBackupAgentConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gbac.ref.Append("enabled"))
}

type HorizontalPodAutoscalingAttributes struct {
	ref terra.Reference
}

func (hpa HorizontalPodAutoscalingAttributes) InternalRef() (terra.Reference, error) {
	return hpa.ref, nil
}

func (hpa HorizontalPodAutoscalingAttributes) InternalWithRef(ref terra.Reference) HorizontalPodAutoscalingAttributes {
	return HorizontalPodAutoscalingAttributes{ref: ref}
}

func (hpa HorizontalPodAutoscalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hpa.ref.InternalTokens()
}

func (hpa HorizontalPodAutoscalingAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(hpa.ref.Append("disabled"))
}

type HttpLoadBalancingAttributes struct {
	ref terra.Reference
}

func (hlb HttpLoadBalancingAttributes) InternalRef() (terra.Reference, error) {
	return hlb.ref, nil
}

func (hlb HttpLoadBalancingAttributes) InternalWithRef(ref terra.Reference) HttpLoadBalancingAttributes {
	return HttpLoadBalancingAttributes{ref: ref}
}

func (hlb HttpLoadBalancingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hlb.ref.InternalTokens()
}

func (hlb HttpLoadBalancingAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(hlb.ref.Append("disabled"))
}

type IstioConfigAttributes struct {
	ref terra.Reference
}

func (ic IstioConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic IstioConfigAttributes) InternalWithRef(ref terra.Reference) IstioConfigAttributes {
	return IstioConfigAttributes{ref: ref}
}

func (ic IstioConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic IstioConfigAttributes) Auth() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("auth"))
}

func (ic IstioConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("disabled"))
}

type KalmConfigAttributes struct {
	ref terra.Reference
}

func (kc KalmConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc KalmConfigAttributes) InternalWithRef(ref terra.Reference) KalmConfigAttributes {
	return KalmConfigAttributes{ref: ref}
}

func (kc KalmConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc KalmConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("enabled"))
}

type NetworkPolicyConfigAttributes struct {
	ref terra.Reference
}

func (npc NetworkPolicyConfigAttributes) InternalRef() (terra.Reference, error) {
	return npc.ref, nil
}

func (npc NetworkPolicyConfigAttributes) InternalWithRef(ref terra.Reference) NetworkPolicyConfigAttributes {
	return NetworkPolicyConfigAttributes{ref: ref}
}

func (npc NetworkPolicyConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npc.ref.InternalTokens()
}

func (npc NetworkPolicyConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(npc.ref.Append("disabled"))
}

type AuthenticatorGroupsConfigAttributes struct {
	ref terra.Reference
}

func (agc AuthenticatorGroupsConfigAttributes) InternalRef() (terra.Reference, error) {
	return agc.ref, nil
}

func (agc AuthenticatorGroupsConfigAttributes) InternalWithRef(ref terra.Reference) AuthenticatorGroupsConfigAttributes {
	return AuthenticatorGroupsConfigAttributes{ref: ref}
}

func (agc AuthenticatorGroupsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return agc.ref.InternalTokens()
}

func (agc AuthenticatorGroupsConfigAttributes) SecurityGroup() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("security_group"))
}

type BinaryAuthorizationAttributes struct {
	ref terra.Reference
}

func (ba BinaryAuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return ba.ref, nil
}

func (ba BinaryAuthorizationAttributes) InternalWithRef(ref terra.Reference) BinaryAuthorizationAttributes {
	return BinaryAuthorizationAttributes{ref: ref}
}

func (ba BinaryAuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ba.ref.InternalTokens()
}

func (ba BinaryAuthorizationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ba.ref.Append("enabled"))
}

func (ba BinaryAuthorizationAttributes) EvaluationMode() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("evaluation_mode"))
}

type ClusterAutoscalingAttributes struct {
	ref terra.Reference
}

func (ca ClusterAutoscalingAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca ClusterAutoscalingAttributes) InternalWithRef(ref terra.Reference) ClusterAutoscalingAttributes {
	return ClusterAutoscalingAttributes{ref: ref}
}

func (ca ClusterAutoscalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca ClusterAutoscalingAttributes) AutoscalingProfile() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("autoscaling_profile"))
}

func (ca ClusterAutoscalingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ca.ref.Append("enabled"))
}

func (ca ClusterAutoscalingAttributes) AutoProvisioningDefaults() terra.ListValue[AutoProvisioningDefaultsAttributes] {
	return terra.ReferenceAsList[AutoProvisioningDefaultsAttributes](ca.ref.Append("auto_provisioning_defaults"))
}

func (ca ClusterAutoscalingAttributes) ResourceLimits() terra.ListValue[ResourceLimitsAttributes] {
	return terra.ReferenceAsList[ResourceLimitsAttributes](ca.ref.Append("resource_limits"))
}

type AutoProvisioningDefaultsAttributes struct {
	ref terra.Reference
}

func (apd AutoProvisioningDefaultsAttributes) InternalRef() (terra.Reference, error) {
	return apd.ref, nil
}

func (apd AutoProvisioningDefaultsAttributes) InternalWithRef(ref terra.Reference) AutoProvisioningDefaultsAttributes {
	return AutoProvisioningDefaultsAttributes{ref: ref}
}

func (apd AutoProvisioningDefaultsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return apd.ref.InternalTokens()
}

func (apd AutoProvisioningDefaultsAttributes) BootDiskKmsKey() terra.StringValue {
	return terra.ReferenceAsString(apd.ref.Append("boot_disk_kms_key"))
}

func (apd AutoProvisioningDefaultsAttributes) DiskSize() terra.NumberValue {
	return terra.ReferenceAsNumber(apd.ref.Append("disk_size"))
}

func (apd AutoProvisioningDefaultsAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(apd.ref.Append("disk_type"))
}

func (apd AutoProvisioningDefaultsAttributes) ImageType() terra.StringValue {
	return terra.ReferenceAsString(apd.ref.Append("image_type"))
}

func (apd AutoProvisioningDefaultsAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(apd.ref.Append("min_cpu_platform"))
}

func (apd AutoProvisioningDefaultsAttributes) OauthScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](apd.ref.Append("oauth_scopes"))
}

func (apd AutoProvisioningDefaultsAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(apd.ref.Append("service_account"))
}

func (apd AutoProvisioningDefaultsAttributes) Management() terra.ListValue[AutoProvisioningDefaultsManagementAttributes] {
	return terra.ReferenceAsList[AutoProvisioningDefaultsManagementAttributes](apd.ref.Append("management"))
}

func (apd AutoProvisioningDefaultsAttributes) ShieldedInstanceConfig() terra.ListValue[AutoProvisioningDefaultsShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[AutoProvisioningDefaultsShieldedInstanceConfigAttributes](apd.ref.Append("shielded_instance_config"))
}

func (apd AutoProvisioningDefaultsAttributes) UpgradeSettings() terra.ListValue[AutoProvisioningDefaultsUpgradeSettingsAttributes] {
	return terra.ReferenceAsList[AutoProvisioningDefaultsUpgradeSettingsAttributes](apd.ref.Append("upgrade_settings"))
}

type AutoProvisioningDefaultsManagementAttributes struct {
	ref terra.Reference
}

func (m AutoProvisioningDefaultsManagementAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m AutoProvisioningDefaultsManagementAttributes) InternalWithRef(ref terra.Reference) AutoProvisioningDefaultsManagementAttributes {
	return AutoProvisioningDefaultsManagementAttributes{ref: ref}
}

func (m AutoProvisioningDefaultsManagementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m AutoProvisioningDefaultsManagementAttributes) AutoRepair() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("auto_repair"))
}

func (m AutoProvisioningDefaultsManagementAttributes) AutoUpgrade() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("auto_upgrade"))
}

func (m AutoProvisioningDefaultsManagementAttributes) UpgradeOptions() terra.ListValue[UpgradeOptionsAttributes] {
	return terra.ReferenceAsList[UpgradeOptionsAttributes](m.ref.Append("upgrade_options"))
}

type UpgradeOptionsAttributes struct {
	ref terra.Reference
}

func (uo UpgradeOptionsAttributes) InternalRef() (terra.Reference, error) {
	return uo.ref, nil
}

func (uo UpgradeOptionsAttributes) InternalWithRef(ref terra.Reference) UpgradeOptionsAttributes {
	return UpgradeOptionsAttributes{ref: ref}
}

func (uo UpgradeOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uo.ref.InternalTokens()
}

func (uo UpgradeOptionsAttributes) AutoUpgradeStartTime() terra.StringValue {
	return terra.ReferenceAsString(uo.ref.Append("auto_upgrade_start_time"))
}

func (uo UpgradeOptionsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(uo.ref.Append("description"))
}

type AutoProvisioningDefaultsShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic AutoProvisioningDefaultsShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic AutoProvisioningDefaultsShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) AutoProvisioningDefaultsShieldedInstanceConfigAttributes {
	return AutoProvisioningDefaultsShieldedInstanceConfigAttributes{ref: ref}
}

func (sic AutoProvisioningDefaultsShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic AutoProvisioningDefaultsShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic AutoProvisioningDefaultsShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

type AutoProvisioningDefaultsUpgradeSettingsAttributes struct {
	ref terra.Reference
}

func (us AutoProvisioningDefaultsUpgradeSettingsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us AutoProvisioningDefaultsUpgradeSettingsAttributes) InternalWithRef(ref terra.Reference) AutoProvisioningDefaultsUpgradeSettingsAttributes {
	return AutoProvisioningDefaultsUpgradeSettingsAttributes{ref: ref}
}

func (us AutoProvisioningDefaultsUpgradeSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us AutoProvisioningDefaultsUpgradeSettingsAttributes) MaxSurge() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("max_surge"))
}

func (us AutoProvisioningDefaultsUpgradeSettingsAttributes) MaxUnavailable() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("max_unavailable"))
}

func (us AutoProvisioningDefaultsUpgradeSettingsAttributes) Strategy() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("strategy"))
}

func (us AutoProvisioningDefaultsUpgradeSettingsAttributes) BlueGreenSettings() terra.ListValue[AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes] {
	return terra.ReferenceAsList[AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes](us.ref.Append("blue_green_settings"))
}

type AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes struct {
	ref terra.Reference
}

func (bgs AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) InternalRef() (terra.Reference, error) {
	return bgs.ref, nil
}

func (bgs AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) InternalWithRef(ref terra.Reference) AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes {
	return AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes{ref: ref}
}

func (bgs AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bgs.ref.InternalTokens()
}

func (bgs AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) NodePoolSoakDuration() terra.StringValue {
	return terra.ReferenceAsString(bgs.ref.Append("node_pool_soak_duration"))
}

func (bgs AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) StandardRolloutPolicy() terra.ListValue[AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes] {
	return terra.ReferenceAsList[AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes](bgs.ref.Append("standard_rollout_policy"))
}

type AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes struct {
	ref terra.Reference
}

func (srp AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalRef() (terra.Reference, error) {
	return srp.ref, nil
}

func (srp AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalWithRef(ref terra.Reference) AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes {
	return AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes{ref: ref}
}

func (srp AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return srp.ref.InternalTokens()
}

func (srp AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(srp.ref.Append("batch_node_count"))
}

func (srp AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(srp.ref.Append("batch_percentage"))
}

func (srp AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchSoakDuration() terra.StringValue {
	return terra.ReferenceAsString(srp.ref.Append("batch_soak_duration"))
}

type ResourceLimitsAttributes struct {
	ref terra.Reference
}

func (rl ResourceLimitsAttributes) InternalRef() (terra.Reference, error) {
	return rl.ref, nil
}

func (rl ResourceLimitsAttributes) InternalWithRef(ref terra.Reference) ResourceLimitsAttributes {
	return ResourceLimitsAttributes{ref: ref}
}

func (rl ResourceLimitsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rl.ref.InternalTokens()
}

func (rl ResourceLimitsAttributes) Maximum() terra.NumberValue {
	return terra.ReferenceAsNumber(rl.ref.Append("maximum"))
}

func (rl ResourceLimitsAttributes) Minimum() terra.NumberValue {
	return terra.ReferenceAsNumber(rl.ref.Append("minimum"))
}

func (rl ResourceLimitsAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(rl.ref.Append("resource_type"))
}

type ClusterTelemetryAttributes struct {
	ref terra.Reference
}

func (ct ClusterTelemetryAttributes) InternalRef() (terra.Reference, error) {
	return ct.ref, nil
}

func (ct ClusterTelemetryAttributes) InternalWithRef(ref terra.Reference) ClusterTelemetryAttributes {
	return ClusterTelemetryAttributes{ref: ref}
}

func (ct ClusterTelemetryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ct.ref.InternalTokens()
}

func (ct ClusterTelemetryAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("type"))
}

type ConfidentialNodesAttributes struct {
	ref terra.Reference
}

func (cn ConfidentialNodesAttributes) InternalRef() (terra.Reference, error) {
	return cn.ref, nil
}

func (cn ConfidentialNodesAttributes) InternalWithRef(ref terra.Reference) ConfidentialNodesAttributes {
	return ConfidentialNodesAttributes{ref: ref}
}

func (cn ConfidentialNodesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cn.ref.InternalTokens()
}

func (cn ConfidentialNodesAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cn.ref.Append("enabled"))
}

type CostManagementConfigAttributes struct {
	ref terra.Reference
}

func (cmc CostManagementConfigAttributes) InternalRef() (terra.Reference, error) {
	return cmc.ref, nil
}

func (cmc CostManagementConfigAttributes) InternalWithRef(ref terra.Reference) CostManagementConfigAttributes {
	return CostManagementConfigAttributes{ref: ref}
}

func (cmc CostManagementConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cmc.ref.InternalTokens()
}

func (cmc CostManagementConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cmc.ref.Append("enabled"))
}

type DatabaseEncryptionAttributes struct {
	ref terra.Reference
}

func (de DatabaseEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de DatabaseEncryptionAttributes) InternalWithRef(ref terra.Reference) DatabaseEncryptionAttributes {
	return DatabaseEncryptionAttributes{ref: ref}
}

func (de DatabaseEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de DatabaseEncryptionAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("key_name"))
}

func (de DatabaseEncryptionAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("state"))
}

type DefaultSnatStatusAttributes struct {
	ref terra.Reference
}

func (dss DefaultSnatStatusAttributes) InternalRef() (terra.Reference, error) {
	return dss.ref, nil
}

func (dss DefaultSnatStatusAttributes) InternalWithRef(ref terra.Reference) DefaultSnatStatusAttributes {
	return DefaultSnatStatusAttributes{ref: ref}
}

func (dss DefaultSnatStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dss.ref.InternalTokens()
}

func (dss DefaultSnatStatusAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(dss.ref.Append("disabled"))
}

type DnsConfigAttributes struct {
	ref terra.Reference
}

func (dc DnsConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DnsConfigAttributes) InternalWithRef(ref terra.Reference) DnsConfigAttributes {
	return DnsConfigAttributes{ref: ref}
}

func (dc DnsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DnsConfigAttributes) ClusterDns() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("cluster_dns"))
}

func (dc DnsConfigAttributes) ClusterDnsDomain() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("cluster_dns_domain"))
}

func (dc DnsConfigAttributes) ClusterDnsScope() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("cluster_dns_scope"))
}

type EnableK8SBetaApisAttributes struct {
	ref terra.Reference
}

func (ekba EnableK8SBetaApisAttributes) InternalRef() (terra.Reference, error) {
	return ekba.ref, nil
}

func (ekba EnableK8SBetaApisAttributes) InternalWithRef(ref terra.Reference) EnableK8SBetaApisAttributes {
	return EnableK8SBetaApisAttributes{ref: ref}
}

func (ekba EnableK8SBetaApisAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ekba.ref.InternalTokens()
}

func (ekba EnableK8SBetaApisAttributes) EnabledApis() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ekba.ref.Append("enabled_apis"))
}

type GatewayApiConfigAttributes struct {
	ref terra.Reference
}

func (gac GatewayApiConfigAttributes) InternalRef() (terra.Reference, error) {
	return gac.ref, nil
}

func (gac GatewayApiConfigAttributes) InternalWithRef(ref terra.Reference) GatewayApiConfigAttributes {
	return GatewayApiConfigAttributes{ref: ref}
}

func (gac GatewayApiConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gac.ref.InternalTokens()
}

func (gac GatewayApiConfigAttributes) Channel() terra.StringValue {
	return terra.ReferenceAsString(gac.ref.Append("channel"))
}

type IdentityServiceConfigAttributes struct {
	ref terra.Reference
}

func (isc IdentityServiceConfigAttributes) InternalRef() (terra.Reference, error) {
	return isc.ref, nil
}

func (isc IdentityServiceConfigAttributes) InternalWithRef(ref terra.Reference) IdentityServiceConfigAttributes {
	return IdentityServiceConfigAttributes{ref: ref}
}

func (isc IdentityServiceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return isc.ref.InternalTokens()
}

func (isc IdentityServiceConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(isc.ref.Append("enabled"))
}

type IpAllocationPolicyAttributes struct {
	ref terra.Reference
}

func (iap IpAllocationPolicyAttributes) InternalRef() (terra.Reference, error) {
	return iap.ref, nil
}

func (iap IpAllocationPolicyAttributes) InternalWithRef(ref terra.Reference) IpAllocationPolicyAttributes {
	return IpAllocationPolicyAttributes{ref: ref}
}

func (iap IpAllocationPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iap.ref.InternalTokens()
}

func (iap IpAllocationPolicyAttributes) ClusterIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("cluster_ipv4_cidr_block"))
}

func (iap IpAllocationPolicyAttributes) ClusterSecondaryRangeName() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("cluster_secondary_range_name"))
}

func (iap IpAllocationPolicyAttributes) ServicesIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("services_ipv4_cidr_block"))
}

func (iap IpAllocationPolicyAttributes) ServicesSecondaryRangeName() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("services_secondary_range_name"))
}

func (iap IpAllocationPolicyAttributes) StackType() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("stack_type"))
}

func (iap IpAllocationPolicyAttributes) AdditionalPodRangesConfig() terra.ListValue[AdditionalPodRangesConfigAttributes] {
	return terra.ReferenceAsList[AdditionalPodRangesConfigAttributes](iap.ref.Append("additional_pod_ranges_config"))
}

func (iap IpAllocationPolicyAttributes) PodCidrOverprovisionConfig() terra.ListValue[IpAllocationPolicyPodCidrOverprovisionConfigAttributes] {
	return terra.ReferenceAsList[IpAllocationPolicyPodCidrOverprovisionConfigAttributes](iap.ref.Append("pod_cidr_overprovision_config"))
}

type AdditionalPodRangesConfigAttributes struct {
	ref terra.Reference
}

func (aprc AdditionalPodRangesConfigAttributes) InternalRef() (terra.Reference, error) {
	return aprc.ref, nil
}

func (aprc AdditionalPodRangesConfigAttributes) InternalWithRef(ref terra.Reference) AdditionalPodRangesConfigAttributes {
	return AdditionalPodRangesConfigAttributes{ref: ref}
}

func (aprc AdditionalPodRangesConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aprc.ref.InternalTokens()
}

func (aprc AdditionalPodRangesConfigAttributes) PodRangeNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aprc.ref.Append("pod_range_names"))
}

type IpAllocationPolicyPodCidrOverprovisionConfigAttributes struct {
	ref terra.Reference
}

func (pcoc IpAllocationPolicyPodCidrOverprovisionConfigAttributes) InternalRef() (terra.Reference, error) {
	return pcoc.ref, nil
}

func (pcoc IpAllocationPolicyPodCidrOverprovisionConfigAttributes) InternalWithRef(ref terra.Reference) IpAllocationPolicyPodCidrOverprovisionConfigAttributes {
	return IpAllocationPolicyPodCidrOverprovisionConfigAttributes{ref: ref}
}

func (pcoc IpAllocationPolicyPodCidrOverprovisionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pcoc.ref.InternalTokens()
}

func (pcoc IpAllocationPolicyPodCidrOverprovisionConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(pcoc.ref.Append("disabled"))
}

type LoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc LoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LoggingConfigAttributes) InternalWithRef(ref terra.Reference) LoggingConfigAttributes {
	return LoggingConfigAttributes{ref: ref}
}

func (lc LoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LoggingConfigAttributes) EnableComponents() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lc.ref.Append("enable_components"))
}

type MaintenancePolicyAttributes struct {
	ref terra.Reference
}

func (mp MaintenancePolicyAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp MaintenancePolicyAttributes) InternalWithRef(ref terra.Reference) MaintenancePolicyAttributes {
	return MaintenancePolicyAttributes{ref: ref}
}

func (mp MaintenancePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp MaintenancePolicyAttributes) DailyMaintenanceWindow() terra.ListValue[DailyMaintenanceWindowAttributes] {
	return terra.ReferenceAsList[DailyMaintenanceWindowAttributes](mp.ref.Append("daily_maintenance_window"))
}

func (mp MaintenancePolicyAttributes) MaintenanceExclusion() terra.SetValue[MaintenanceExclusionAttributes] {
	return terra.ReferenceAsSet[MaintenanceExclusionAttributes](mp.ref.Append("maintenance_exclusion"))
}

func (mp MaintenancePolicyAttributes) RecurringWindow() terra.ListValue[RecurringWindowAttributes] {
	return terra.ReferenceAsList[RecurringWindowAttributes](mp.ref.Append("recurring_window"))
}

type DailyMaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (dmw DailyMaintenanceWindowAttributes) InternalRef() (terra.Reference, error) {
	return dmw.ref, nil
}

func (dmw DailyMaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) DailyMaintenanceWindowAttributes {
	return DailyMaintenanceWindowAttributes{ref: ref}
}

func (dmw DailyMaintenanceWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dmw.ref.InternalTokens()
}

func (dmw DailyMaintenanceWindowAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(dmw.ref.Append("duration"))
}

func (dmw DailyMaintenanceWindowAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(dmw.ref.Append("start_time"))
}

type MaintenanceExclusionAttributes struct {
	ref terra.Reference
}

func (me MaintenanceExclusionAttributes) InternalRef() (terra.Reference, error) {
	return me.ref, nil
}

func (me MaintenanceExclusionAttributes) InternalWithRef(ref terra.Reference) MaintenanceExclusionAttributes {
	return MaintenanceExclusionAttributes{ref: ref}
}

func (me MaintenanceExclusionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return me.ref.InternalTokens()
}

func (me MaintenanceExclusionAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("end_time"))
}

func (me MaintenanceExclusionAttributes) ExclusionName() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("exclusion_name"))
}

func (me MaintenanceExclusionAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("start_time"))
}

func (me MaintenanceExclusionAttributes) ExclusionOptions() terra.ListValue[ExclusionOptionsAttributes] {
	return terra.ReferenceAsList[ExclusionOptionsAttributes](me.ref.Append("exclusion_options"))
}

type ExclusionOptionsAttributes struct {
	ref terra.Reference
}

func (eo ExclusionOptionsAttributes) InternalRef() (terra.Reference, error) {
	return eo.ref, nil
}

func (eo ExclusionOptionsAttributes) InternalWithRef(ref terra.Reference) ExclusionOptionsAttributes {
	return ExclusionOptionsAttributes{ref: ref}
}

func (eo ExclusionOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eo.ref.InternalTokens()
}

func (eo ExclusionOptionsAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(eo.ref.Append("scope"))
}

type RecurringWindowAttributes struct {
	ref terra.Reference
}

func (rw RecurringWindowAttributes) InternalRef() (terra.Reference, error) {
	return rw.ref, nil
}

func (rw RecurringWindowAttributes) InternalWithRef(ref terra.Reference) RecurringWindowAttributes {
	return RecurringWindowAttributes{ref: ref}
}

func (rw RecurringWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rw.ref.InternalTokens()
}

func (rw RecurringWindowAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(rw.ref.Append("end_time"))
}

func (rw RecurringWindowAttributes) Recurrence() terra.StringValue {
	return terra.ReferenceAsString(rw.ref.Append("recurrence"))
}

func (rw RecurringWindowAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(rw.ref.Append("start_time"))
}

type MasterAuthAttributes struct {
	ref terra.Reference
}

func (ma MasterAuthAttributes) InternalRef() (terra.Reference, error) {
	return ma.ref, nil
}

func (ma MasterAuthAttributes) InternalWithRef(ref terra.Reference) MasterAuthAttributes {
	return MasterAuthAttributes{ref: ref}
}

func (ma MasterAuthAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ma.ref.InternalTokens()
}

func (ma MasterAuthAttributes) ClientCertificate() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("client_certificate"))
}

func (ma MasterAuthAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("client_key"))
}

func (ma MasterAuthAttributes) ClusterCaCertificate() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("cluster_ca_certificate"))
}

func (ma MasterAuthAttributes) ClientCertificateConfig() terra.ListValue[ClientCertificateConfigAttributes] {
	return terra.ReferenceAsList[ClientCertificateConfigAttributes](ma.ref.Append("client_certificate_config"))
}

type ClientCertificateConfigAttributes struct {
	ref terra.Reference
}

func (ccc ClientCertificateConfigAttributes) InternalRef() (terra.Reference, error) {
	return ccc.ref, nil
}

func (ccc ClientCertificateConfigAttributes) InternalWithRef(ref terra.Reference) ClientCertificateConfigAttributes {
	return ClientCertificateConfigAttributes{ref: ref}
}

func (ccc ClientCertificateConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccc.ref.InternalTokens()
}

func (ccc ClientCertificateConfigAttributes) IssueClientCertificate() terra.BoolValue {
	return terra.ReferenceAsBool(ccc.ref.Append("issue_client_certificate"))
}

type MasterAuthorizedNetworksConfigAttributes struct {
	ref terra.Reference
}

func (manc MasterAuthorizedNetworksConfigAttributes) InternalRef() (terra.Reference, error) {
	return manc.ref, nil
}

func (manc MasterAuthorizedNetworksConfigAttributes) InternalWithRef(ref terra.Reference) MasterAuthorizedNetworksConfigAttributes {
	return MasterAuthorizedNetworksConfigAttributes{ref: ref}
}

func (manc MasterAuthorizedNetworksConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return manc.ref.InternalTokens()
}

func (manc MasterAuthorizedNetworksConfigAttributes) GcpPublicCidrsAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(manc.ref.Append("gcp_public_cidrs_access_enabled"))
}

func (manc MasterAuthorizedNetworksConfigAttributes) CidrBlocks() terra.SetValue[CidrBlocksAttributes] {
	return terra.ReferenceAsSet[CidrBlocksAttributes](manc.ref.Append("cidr_blocks"))
}

type CidrBlocksAttributes struct {
	ref terra.Reference
}

func (cb CidrBlocksAttributes) InternalRef() (terra.Reference, error) {
	return cb.ref, nil
}

func (cb CidrBlocksAttributes) InternalWithRef(ref terra.Reference) CidrBlocksAttributes {
	return CidrBlocksAttributes{ref: ref}
}

func (cb CidrBlocksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cb.ref.InternalTokens()
}

func (cb CidrBlocksAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(cb.ref.Append("cidr_block"))
}

func (cb CidrBlocksAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(cb.ref.Append("display_name"))
}

type MeshCertificatesAttributes struct {
	ref terra.Reference
}

func (mc MeshCertificatesAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MeshCertificatesAttributes) InternalWithRef(ref terra.Reference) MeshCertificatesAttributes {
	return MeshCertificatesAttributes{ref: ref}
}

func (mc MeshCertificatesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MeshCertificatesAttributes) EnableCertificates() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("enable_certificates"))
}

type MonitoringConfigAttributes struct {
	ref terra.Reference
}

func (mc MonitoringConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MonitoringConfigAttributes) InternalWithRef(ref terra.Reference) MonitoringConfigAttributes {
	return MonitoringConfigAttributes{ref: ref}
}

func (mc MonitoringConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MonitoringConfigAttributes) EnableComponents() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("enable_components"))
}

func (mc MonitoringConfigAttributes) AdvancedDatapathObservabilityConfig() terra.ListValue[AdvancedDatapathObservabilityConfigAttributes] {
	return terra.ReferenceAsList[AdvancedDatapathObservabilityConfigAttributes](mc.ref.Append("advanced_datapath_observability_config"))
}

func (mc MonitoringConfigAttributes) ManagedPrometheus() terra.ListValue[ManagedPrometheusAttributes] {
	return terra.ReferenceAsList[ManagedPrometheusAttributes](mc.ref.Append("managed_prometheus"))
}

type AdvancedDatapathObservabilityConfigAttributes struct {
	ref terra.Reference
}

func (adoc AdvancedDatapathObservabilityConfigAttributes) InternalRef() (terra.Reference, error) {
	return adoc.ref, nil
}

func (adoc AdvancedDatapathObservabilityConfigAttributes) InternalWithRef(ref terra.Reference) AdvancedDatapathObservabilityConfigAttributes {
	return AdvancedDatapathObservabilityConfigAttributes{ref: ref}
}

func (adoc AdvancedDatapathObservabilityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return adoc.ref.InternalTokens()
}

func (adoc AdvancedDatapathObservabilityConfigAttributes) EnableMetrics() terra.BoolValue {
	return terra.ReferenceAsBool(adoc.ref.Append("enable_metrics"))
}

func (adoc AdvancedDatapathObservabilityConfigAttributes) RelayMode() terra.StringValue {
	return terra.ReferenceAsString(adoc.ref.Append("relay_mode"))
}

type ManagedPrometheusAttributes struct {
	ref terra.Reference
}

func (mp ManagedPrometheusAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp ManagedPrometheusAttributes) InternalWithRef(ref terra.Reference) ManagedPrometheusAttributes {
	return ManagedPrometheusAttributes{ref: ref}
}

func (mp ManagedPrometheusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp ManagedPrometheusAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(mp.ref.Append("enabled"))
}

type NetworkPolicyAttributes struct {
	ref terra.Reference
}

func (np NetworkPolicyAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np NetworkPolicyAttributes) InternalWithRef(ref terra.Reference) NetworkPolicyAttributes {
	return NetworkPolicyAttributes{ref: ref}
}

func (np NetworkPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np NetworkPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(np.ref.Append("enabled"))
}

func (np NetworkPolicyAttributes) Provider() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("provider"))
}

type NodeConfigAttributes struct {
	ref terra.Reference
}

func (nc NodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigAttributes {
	return NodeConfigAttributes{ref: ref}
}

func (nc NodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NodeConfigAttributes) BootDiskKmsKey() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("boot_disk_kms_key"))
}

func (nc NodeConfigAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("disk_size_gb"))
}

func (nc NodeConfigAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("disk_type"))
}

func (nc NodeConfigAttributes) ImageType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("image_type"))
}

func (nc NodeConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("labels"))
}

func (nc NodeConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("local_ssd_count"))
}

func (nc NodeConfigAttributes) LoggingVariant() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("logging_variant"))
}

func (nc NodeConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("machine_type"))
}

func (nc NodeConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("metadata"))
}

func (nc NodeConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("min_cpu_platform"))
}

func (nc NodeConfigAttributes) NodeGroup() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("node_group"))
}

func (nc NodeConfigAttributes) OauthScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("oauth_scopes"))
}

func (nc NodeConfigAttributes) Preemptible() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("preemptible"))
}

func (nc NodeConfigAttributes) ResourceLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("resource_labels"))
}

func (nc NodeConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("service_account"))
}

func (nc NodeConfigAttributes) Spot() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("spot"))
}

func (nc NodeConfigAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("tags"))
}

func (nc NodeConfigAttributes) EffectiveTaints() terra.ListValue[NodeConfigEffectiveTaintsAttributes] {
	return terra.ReferenceAsList[NodeConfigEffectiveTaintsAttributes](nc.ref.Append("effective_taints"))
}

func (nc NodeConfigAttributes) GuestAccelerator() terra.ListValue[NodeConfigGuestAcceleratorAttributes] {
	return terra.ReferenceAsList[NodeConfigGuestAcceleratorAttributes](nc.ref.Append("guest_accelerator"))
}

func (nc NodeConfigAttributes) AdvancedMachineFeatures() terra.ListValue[NodeConfigAdvancedMachineFeaturesAttributes] {
	return terra.ReferenceAsList[NodeConfigAdvancedMachineFeaturesAttributes](nc.ref.Append("advanced_machine_features"))
}

func (nc NodeConfigAttributes) ConfidentialNodes() terra.ListValue[NodeConfigConfidentialNodesAttributes] {
	return terra.ReferenceAsList[NodeConfigConfidentialNodesAttributes](nc.ref.Append("confidential_nodes"))
}

func (nc NodeConfigAttributes) EphemeralStorageConfig() terra.ListValue[NodeConfigEphemeralStorageConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigEphemeralStorageConfigAttributes](nc.ref.Append("ephemeral_storage_config"))
}

func (nc NodeConfigAttributes) EphemeralStorageLocalSsdConfig() terra.ListValue[NodeConfigEphemeralStorageLocalSsdConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigEphemeralStorageLocalSsdConfigAttributes](nc.ref.Append("ephemeral_storage_local_ssd_config"))
}

func (nc NodeConfigAttributes) FastSocket() terra.ListValue[NodeConfigFastSocketAttributes] {
	return terra.ReferenceAsList[NodeConfigFastSocketAttributes](nc.ref.Append("fast_socket"))
}

func (nc NodeConfigAttributes) GcfsConfig() terra.ListValue[NodeConfigGcfsConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigGcfsConfigAttributes](nc.ref.Append("gcfs_config"))
}

func (nc NodeConfigAttributes) Gvnic() terra.ListValue[NodeConfigGvnicAttributes] {
	return terra.ReferenceAsList[NodeConfigGvnicAttributes](nc.ref.Append("gvnic"))
}

func (nc NodeConfigAttributes) HostMaintenancePolicy() terra.ListValue[NodeConfigHostMaintenancePolicyAttributes] {
	return terra.ReferenceAsList[NodeConfigHostMaintenancePolicyAttributes](nc.ref.Append("host_maintenance_policy"))
}

func (nc NodeConfigAttributes) KubeletConfig() terra.ListValue[NodeConfigKubeletConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigKubeletConfigAttributes](nc.ref.Append("kubelet_config"))
}

func (nc NodeConfigAttributes) LinuxNodeConfig() terra.ListValue[NodeConfigLinuxNodeConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigLinuxNodeConfigAttributes](nc.ref.Append("linux_node_config"))
}

func (nc NodeConfigAttributes) LocalNvmeSsdBlockConfig() terra.ListValue[NodeConfigLocalNvmeSsdBlockConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigLocalNvmeSsdBlockConfigAttributes](nc.ref.Append("local_nvme_ssd_block_config"))
}

func (nc NodeConfigAttributes) ReservationAffinity() terra.ListValue[NodeConfigReservationAffinityAttributes] {
	return terra.ReferenceAsList[NodeConfigReservationAffinityAttributes](nc.ref.Append("reservation_affinity"))
}

func (nc NodeConfigAttributes) SandboxConfig() terra.ListValue[NodeConfigSandboxConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigSandboxConfigAttributes](nc.ref.Append("sandbox_config"))
}

func (nc NodeConfigAttributes) ShieldedInstanceConfig() terra.ListValue[NodeConfigShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigShieldedInstanceConfigAttributes](nc.ref.Append("shielded_instance_config"))
}

func (nc NodeConfigAttributes) SoleTenantConfig() terra.ListValue[NodeConfigSoleTenantConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigSoleTenantConfigAttributes](nc.ref.Append("sole_tenant_config"))
}

func (nc NodeConfigAttributes) Taint() terra.ListValue[NodeConfigTaintAttributes] {
	return terra.ReferenceAsList[NodeConfigTaintAttributes](nc.ref.Append("taint"))
}

func (nc NodeConfigAttributes) WorkloadMetadataConfig() terra.ListValue[NodeConfigWorkloadMetadataConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigWorkloadMetadataConfigAttributes](nc.ref.Append("workload_metadata_config"))
}

type NodeConfigEffectiveTaintsAttributes struct {
	ref terra.Reference
}

func (et NodeConfigEffectiveTaintsAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et NodeConfigEffectiveTaintsAttributes) InternalWithRef(ref terra.Reference) NodeConfigEffectiveTaintsAttributes {
	return NodeConfigEffectiveTaintsAttributes{ref: ref}
}

func (et NodeConfigEffectiveTaintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et NodeConfigEffectiveTaintsAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("effect"))
}

func (et NodeConfigEffectiveTaintsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("key"))
}

func (et NodeConfigEffectiveTaintsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("value"))
}

type NodeConfigGuestAcceleratorAttributes struct {
	ref terra.Reference
}

func (ga NodeConfigGuestAcceleratorAttributes) InternalRef() (terra.Reference, error) {
	return ga.ref, nil
}

func (ga NodeConfigGuestAcceleratorAttributes) InternalWithRef(ref terra.Reference) NodeConfigGuestAcceleratorAttributes {
	return NodeConfigGuestAcceleratorAttributes{ref: ref}
}

func (ga NodeConfigGuestAcceleratorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ga.ref.InternalTokens()
}

func (ga NodeConfigGuestAcceleratorAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(ga.ref.Append("count"))
}

func (ga NodeConfigGuestAcceleratorAttributes) GpuPartitionSize() terra.StringValue {
	return terra.ReferenceAsString(ga.ref.Append("gpu_partition_size"))
}

func (ga NodeConfigGuestAcceleratorAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ga.ref.Append("type"))
}

func (ga NodeConfigGuestAcceleratorAttributes) GpuDriverInstallationConfig() terra.ListValue[NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes](ga.ref.Append("gpu_driver_installation_config"))
}

func (ga NodeConfigGuestAcceleratorAttributes) GpuSharingConfig() terra.ListValue[NodeConfigGuestAcceleratorGpuSharingConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigGuestAcceleratorGpuSharingConfigAttributes](ga.ref.Append("gpu_sharing_config"))
}

type NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes struct {
	ref terra.Reference
}

func (gdic NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalRef() (terra.Reference, error) {
	return gdic.ref, nil
}

func (gdic NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes {
	return NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes{ref: ref}
}

func (gdic NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gdic.ref.InternalTokens()
}

func (gdic NodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) GpuDriverVersion() terra.StringValue {
	return terra.ReferenceAsString(gdic.ref.Append("gpu_driver_version"))
}

type NodeConfigGuestAcceleratorGpuSharingConfigAttributes struct {
	ref terra.Reference
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalRef() (terra.Reference, error) {
	return gsc.ref, nil
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigGuestAcceleratorGpuSharingConfigAttributes {
	return NodeConfigGuestAcceleratorGpuSharingConfigAttributes{ref: ref}
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gsc.ref.InternalTokens()
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) GpuSharingStrategy() terra.StringValue {
	return terra.ReferenceAsString(gsc.ref.Append("gpu_sharing_strategy"))
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) MaxSharedClientsPerGpu() terra.NumberValue {
	return terra.ReferenceAsNumber(gsc.ref.Append("max_shared_clients_per_gpu"))
}

type NodeConfigAdvancedMachineFeaturesAttributes struct {
	ref terra.Reference
}

func (amf NodeConfigAdvancedMachineFeaturesAttributes) InternalRef() (terra.Reference, error) {
	return amf.ref, nil
}

func (amf NodeConfigAdvancedMachineFeaturesAttributes) InternalWithRef(ref terra.Reference) NodeConfigAdvancedMachineFeaturesAttributes {
	return NodeConfigAdvancedMachineFeaturesAttributes{ref: ref}
}

func (amf NodeConfigAdvancedMachineFeaturesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return amf.ref.InternalTokens()
}

func (amf NodeConfigAdvancedMachineFeaturesAttributes) ThreadsPerCore() terra.NumberValue {
	return terra.ReferenceAsNumber(amf.ref.Append("threads_per_core"))
}

type NodeConfigConfidentialNodesAttributes struct {
	ref terra.Reference
}

func (cn NodeConfigConfidentialNodesAttributes) InternalRef() (terra.Reference, error) {
	return cn.ref, nil
}

func (cn NodeConfigConfidentialNodesAttributes) InternalWithRef(ref terra.Reference) NodeConfigConfidentialNodesAttributes {
	return NodeConfigConfidentialNodesAttributes{ref: ref}
}

func (cn NodeConfigConfidentialNodesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cn.ref.InternalTokens()
}

func (cn NodeConfigConfidentialNodesAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cn.ref.Append("enabled"))
}

type NodeConfigEphemeralStorageConfigAttributes struct {
	ref terra.Reference
}

func (esc NodeConfigEphemeralStorageConfigAttributes) InternalRef() (terra.Reference, error) {
	return esc.ref, nil
}

func (esc NodeConfigEphemeralStorageConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigEphemeralStorageConfigAttributes {
	return NodeConfigEphemeralStorageConfigAttributes{ref: ref}
}

func (esc NodeConfigEphemeralStorageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return esc.ref.InternalTokens()
}

func (esc NodeConfigEphemeralStorageConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(esc.ref.Append("local_ssd_count"))
}

type NodeConfigEphemeralStorageLocalSsdConfigAttributes struct {
	ref terra.Reference
}

func (eslsc NodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalRef() (terra.Reference, error) {
	return eslsc.ref, nil
}

func (eslsc NodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigEphemeralStorageLocalSsdConfigAttributes {
	return NodeConfigEphemeralStorageLocalSsdConfigAttributes{ref: ref}
}

func (eslsc NodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eslsc.ref.InternalTokens()
}

func (eslsc NodeConfigEphemeralStorageLocalSsdConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(eslsc.ref.Append("local_ssd_count"))
}

type NodeConfigFastSocketAttributes struct {
	ref terra.Reference
}

func (fs NodeConfigFastSocketAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs NodeConfigFastSocketAttributes) InternalWithRef(ref terra.Reference) NodeConfigFastSocketAttributes {
	return NodeConfigFastSocketAttributes{ref: ref}
}

func (fs NodeConfigFastSocketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs NodeConfigFastSocketAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(fs.ref.Append("enabled"))
}

type NodeConfigGcfsConfigAttributes struct {
	ref terra.Reference
}

func (gc NodeConfigGcfsConfigAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc NodeConfigGcfsConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigGcfsConfigAttributes {
	return NodeConfigGcfsConfigAttributes{ref: ref}
}

func (gc NodeConfigGcfsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc NodeConfigGcfsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gc.ref.Append("enabled"))
}

type NodeConfigGvnicAttributes struct {
	ref terra.Reference
}

func (g NodeConfigGvnicAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g NodeConfigGvnicAttributes) InternalWithRef(ref terra.Reference) NodeConfigGvnicAttributes {
	return NodeConfigGvnicAttributes{ref: ref}
}

func (g NodeConfigGvnicAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g NodeConfigGvnicAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("enabled"))
}

type NodeConfigHostMaintenancePolicyAttributes struct {
	ref terra.Reference
}

func (hmp NodeConfigHostMaintenancePolicyAttributes) InternalRef() (terra.Reference, error) {
	return hmp.ref, nil
}

func (hmp NodeConfigHostMaintenancePolicyAttributes) InternalWithRef(ref terra.Reference) NodeConfigHostMaintenancePolicyAttributes {
	return NodeConfigHostMaintenancePolicyAttributes{ref: ref}
}

func (hmp NodeConfigHostMaintenancePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hmp.ref.InternalTokens()
}

func (hmp NodeConfigHostMaintenancePolicyAttributes) MaintenanceInterval() terra.StringValue {
	return terra.ReferenceAsString(hmp.ref.Append("maintenance_interval"))
}

type NodeConfigKubeletConfigAttributes struct {
	ref terra.Reference
}

func (kc NodeConfigKubeletConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc NodeConfigKubeletConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigKubeletConfigAttributes {
	return NodeConfigKubeletConfigAttributes{ref: ref}
}

func (kc NodeConfigKubeletConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc NodeConfigKubeletConfigAttributes) CpuCfsQuota() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("cpu_cfs_quota"))
}

func (kc NodeConfigKubeletConfigAttributes) CpuCfsQuotaPeriod() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cpu_cfs_quota_period"))
}

func (kc NodeConfigKubeletConfigAttributes) CpuManagerPolicy() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cpu_manager_policy"))
}

func (kc NodeConfigKubeletConfigAttributes) PodPidsLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("pod_pids_limit"))
}

type NodeConfigLinuxNodeConfigAttributes struct {
	ref terra.Reference
}

func (lnc NodeConfigLinuxNodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnc.ref, nil
}

func (lnc NodeConfigLinuxNodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigLinuxNodeConfigAttributes {
	return NodeConfigLinuxNodeConfigAttributes{ref: ref}
}

func (lnc NodeConfigLinuxNodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnc.ref.InternalTokens()
}

func (lnc NodeConfigLinuxNodeConfigAttributes) CgroupMode() terra.StringValue {
	return terra.ReferenceAsString(lnc.ref.Append("cgroup_mode"))
}

func (lnc NodeConfigLinuxNodeConfigAttributes) Sysctls() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lnc.ref.Append("sysctls"))
}

type NodeConfigLocalNvmeSsdBlockConfigAttributes struct {
	ref terra.Reference
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnsbc.ref, nil
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigLocalNvmeSsdBlockConfigAttributes {
	return NodeConfigLocalNvmeSsdBlockConfigAttributes{ref: ref}
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnsbc.ref.InternalTokens()
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(lnsbc.ref.Append("local_ssd_count"))
}

type NodeConfigReservationAffinityAttributes struct {
	ref terra.Reference
}

func (ra NodeConfigReservationAffinityAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra NodeConfigReservationAffinityAttributes) InternalWithRef(ref terra.Reference) NodeConfigReservationAffinityAttributes {
	return NodeConfigReservationAffinityAttributes{ref: ref}
}

func (ra NodeConfigReservationAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra NodeConfigReservationAffinityAttributes) ConsumeReservationType() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("consume_reservation_type"))
}

func (ra NodeConfigReservationAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("key"))
}

func (ra NodeConfigReservationAffinityAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ra.ref.Append("values"))
}

type NodeConfigSandboxConfigAttributes struct {
	ref terra.Reference
}

func (sc NodeConfigSandboxConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc NodeConfigSandboxConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigSandboxConfigAttributes {
	return NodeConfigSandboxConfigAttributes{ref: ref}
}

func (sc NodeConfigSandboxConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc NodeConfigSandboxConfigAttributes) SandboxType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("sandbox_type"))
}

type NodeConfigShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic NodeConfigShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic NodeConfigShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigShieldedInstanceConfigAttributes {
	return NodeConfigShieldedInstanceConfigAttributes{ref: ref}
}

func (sic NodeConfigShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic NodeConfigShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic NodeConfigShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

type NodeConfigSoleTenantConfigAttributes struct {
	ref terra.Reference
}

func (stc NodeConfigSoleTenantConfigAttributes) InternalRef() (terra.Reference, error) {
	return stc.ref, nil
}

func (stc NodeConfigSoleTenantConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigSoleTenantConfigAttributes {
	return NodeConfigSoleTenantConfigAttributes{ref: ref}
}

func (stc NodeConfigSoleTenantConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return stc.ref.InternalTokens()
}

func (stc NodeConfigSoleTenantConfigAttributes) NodeAffinity() terra.SetValue[NodeConfigSoleTenantConfigNodeAffinityAttributes] {
	return terra.ReferenceAsSet[NodeConfigSoleTenantConfigNodeAffinityAttributes](stc.ref.Append("node_affinity"))
}

type NodeConfigSoleTenantConfigNodeAffinityAttributes struct {
	ref terra.Reference
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) InternalRef() (terra.Reference, error) {
	return na.ref, nil
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) InternalWithRef(ref terra.Reference) NodeConfigSoleTenantConfigNodeAffinityAttributes {
	return NodeConfigSoleTenantConfigNodeAffinityAttributes{ref: ref}
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return na.ref.InternalTokens()
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("key"))
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("operator"))
}

func (na NodeConfigSoleTenantConfigNodeAffinityAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](na.ref.Append("values"))
}

type NodeConfigTaintAttributes struct {
	ref terra.Reference
}

func (t NodeConfigTaintAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t NodeConfigTaintAttributes) InternalWithRef(ref terra.Reference) NodeConfigTaintAttributes {
	return NodeConfigTaintAttributes{ref: ref}
}

func (t NodeConfigTaintAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t NodeConfigTaintAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("effect"))
}

func (t NodeConfigTaintAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t NodeConfigTaintAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type NodeConfigWorkloadMetadataConfigAttributes struct {
	ref terra.Reference
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) InternalRef() (terra.Reference, error) {
	return wmc.ref, nil
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigWorkloadMetadataConfigAttributes {
	return NodeConfigWorkloadMetadataConfigAttributes{ref: ref}
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wmc.ref.InternalTokens()
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(wmc.ref.Append("mode"))
}

type NodePoolAttributes struct {
	ref terra.Reference
}

func (np NodePoolAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np NodePoolAttributes) InternalWithRef(ref terra.Reference) NodePoolAttributes {
	return NodePoolAttributes{ref: ref}
}

func (np NodePoolAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np NodePoolAttributes) InitialNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("initial_node_count"))
}

func (np NodePoolAttributes) InstanceGroupUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](np.ref.Append("instance_group_urls"))
}

func (np NodePoolAttributes) ManagedInstanceGroupUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](np.ref.Append("managed_instance_group_urls"))
}

func (np NodePoolAttributes) MaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("max_pods_per_node"))
}

func (np NodePoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("name"))
}

func (np NodePoolAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("name_prefix"))
}

func (np NodePoolAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("node_count"))
}

func (np NodePoolAttributes) NodeLocations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](np.ref.Append("node_locations"))
}

func (np NodePoolAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("version"))
}

func (np NodePoolAttributes) Autoscaling() terra.ListValue[AutoscalingAttributes] {
	return terra.ReferenceAsList[AutoscalingAttributes](np.ref.Append("autoscaling"))
}

func (np NodePoolAttributes) Management() terra.ListValue[NodePoolManagementAttributes] {
	return terra.ReferenceAsList[NodePoolManagementAttributes](np.ref.Append("management"))
}

func (np NodePoolAttributes) NetworkConfig() terra.ListValue[NetworkConfigAttributes] {
	return terra.ReferenceAsList[NetworkConfigAttributes](np.ref.Append("network_config"))
}

func (np NodePoolAttributes) NodeConfig() terra.ListValue[NodePoolNodeConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigAttributes](np.ref.Append("node_config"))
}

func (np NodePoolAttributes) PlacementPolicy() terra.ListValue[PlacementPolicyAttributes] {
	return terra.ReferenceAsList[PlacementPolicyAttributes](np.ref.Append("placement_policy"))
}

func (np NodePoolAttributes) UpgradeSettings() terra.ListValue[NodePoolUpgradeSettingsAttributes] {
	return terra.ReferenceAsList[NodePoolUpgradeSettingsAttributes](np.ref.Append("upgrade_settings"))
}

type AutoscalingAttributes struct {
	ref terra.Reference
}

func (a AutoscalingAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AutoscalingAttributes) InternalWithRef(ref terra.Reference) AutoscalingAttributes {
	return AutoscalingAttributes{ref: ref}
}

func (a AutoscalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AutoscalingAttributes) LocationPolicy() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("location_policy"))
}

func (a AutoscalingAttributes) MaxNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("max_node_count"))
}

func (a AutoscalingAttributes) MinNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("min_node_count"))
}

func (a AutoscalingAttributes) TotalMaxNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("total_max_node_count"))
}

func (a AutoscalingAttributes) TotalMinNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("total_min_node_count"))
}

type NodePoolManagementAttributes struct {
	ref terra.Reference
}

func (m NodePoolManagementAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m NodePoolManagementAttributes) InternalWithRef(ref terra.Reference) NodePoolManagementAttributes {
	return NodePoolManagementAttributes{ref: ref}
}

func (m NodePoolManagementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m NodePoolManagementAttributes) AutoRepair() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("auto_repair"))
}

func (m NodePoolManagementAttributes) AutoUpgrade() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("auto_upgrade"))
}

type NetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAttributes {
	return NetworkConfigAttributes{ref: ref}
}

func (nc NetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigAttributes) CreatePodRange() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("create_pod_range"))
}

func (nc NetworkConfigAttributes) EnablePrivateNodes() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("enable_private_nodes"))
}

func (nc NetworkConfigAttributes) PodIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("pod_ipv4_cidr_block"))
}

func (nc NetworkConfigAttributes) PodRange() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("pod_range"))
}

func (nc NetworkConfigAttributes) AdditionalNodeNetworkConfigs() terra.ListValue[AdditionalNodeNetworkConfigsAttributes] {
	return terra.ReferenceAsList[AdditionalNodeNetworkConfigsAttributes](nc.ref.Append("additional_node_network_configs"))
}

func (nc NetworkConfigAttributes) AdditionalPodNetworkConfigs() terra.ListValue[AdditionalPodNetworkConfigsAttributes] {
	return terra.ReferenceAsList[AdditionalPodNetworkConfigsAttributes](nc.ref.Append("additional_pod_network_configs"))
}

func (nc NetworkConfigAttributes) PodCidrOverprovisionConfig() terra.ListValue[NetworkConfigPodCidrOverprovisionConfigAttributes] {
	return terra.ReferenceAsList[NetworkConfigPodCidrOverprovisionConfigAttributes](nc.ref.Append("pod_cidr_overprovision_config"))
}

type AdditionalNodeNetworkConfigsAttributes struct {
	ref terra.Reference
}

func (annc AdditionalNodeNetworkConfigsAttributes) InternalRef() (terra.Reference, error) {
	return annc.ref, nil
}

func (annc AdditionalNodeNetworkConfigsAttributes) InternalWithRef(ref terra.Reference) AdditionalNodeNetworkConfigsAttributes {
	return AdditionalNodeNetworkConfigsAttributes{ref: ref}
}

func (annc AdditionalNodeNetworkConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return annc.ref.InternalTokens()
}

func (annc AdditionalNodeNetworkConfigsAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(annc.ref.Append("network"))
}

func (annc AdditionalNodeNetworkConfigsAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(annc.ref.Append("subnetwork"))
}

type AdditionalPodNetworkConfigsAttributes struct {
	ref terra.Reference
}

func (apnc AdditionalPodNetworkConfigsAttributes) InternalRef() (terra.Reference, error) {
	return apnc.ref, nil
}

func (apnc AdditionalPodNetworkConfigsAttributes) InternalWithRef(ref terra.Reference) AdditionalPodNetworkConfigsAttributes {
	return AdditionalPodNetworkConfigsAttributes{ref: ref}
}

func (apnc AdditionalPodNetworkConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return apnc.ref.InternalTokens()
}

func (apnc AdditionalPodNetworkConfigsAttributes) MaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(apnc.ref.Append("max_pods_per_node"))
}

func (apnc AdditionalPodNetworkConfigsAttributes) SecondaryPodRange() terra.StringValue {
	return terra.ReferenceAsString(apnc.ref.Append("secondary_pod_range"))
}

func (apnc AdditionalPodNetworkConfigsAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(apnc.ref.Append("subnetwork"))
}

type NetworkConfigPodCidrOverprovisionConfigAttributes struct {
	ref terra.Reference
}

func (pcoc NetworkConfigPodCidrOverprovisionConfigAttributes) InternalRef() (terra.Reference, error) {
	return pcoc.ref, nil
}

func (pcoc NetworkConfigPodCidrOverprovisionConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigPodCidrOverprovisionConfigAttributes {
	return NetworkConfigPodCidrOverprovisionConfigAttributes{ref: ref}
}

func (pcoc NetworkConfigPodCidrOverprovisionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pcoc.ref.InternalTokens()
}

func (pcoc NetworkConfigPodCidrOverprovisionConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(pcoc.ref.Append("disabled"))
}

type NodePoolNodeConfigAttributes struct {
	ref terra.Reference
}

func (nc NodePoolNodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NodePoolNodeConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigAttributes {
	return NodePoolNodeConfigAttributes{ref: ref}
}

func (nc NodePoolNodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NodePoolNodeConfigAttributes) BootDiskKmsKey() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("boot_disk_kms_key"))
}

func (nc NodePoolNodeConfigAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("disk_size_gb"))
}

func (nc NodePoolNodeConfigAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("disk_type"))
}

func (nc NodePoolNodeConfigAttributes) ImageType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("image_type"))
}

func (nc NodePoolNodeConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("labels"))
}

func (nc NodePoolNodeConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("local_ssd_count"))
}

func (nc NodePoolNodeConfigAttributes) LoggingVariant() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("logging_variant"))
}

func (nc NodePoolNodeConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("machine_type"))
}

func (nc NodePoolNodeConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("metadata"))
}

func (nc NodePoolNodeConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("min_cpu_platform"))
}

func (nc NodePoolNodeConfigAttributes) NodeGroup() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("node_group"))
}

func (nc NodePoolNodeConfigAttributes) OauthScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("oauth_scopes"))
}

func (nc NodePoolNodeConfigAttributes) Preemptible() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("preemptible"))
}

func (nc NodePoolNodeConfigAttributes) ResourceLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("resource_labels"))
}

func (nc NodePoolNodeConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("service_account"))
}

func (nc NodePoolNodeConfigAttributes) Spot() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("spot"))
}

func (nc NodePoolNodeConfigAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("tags"))
}

func (nc NodePoolNodeConfigAttributes) EffectiveTaints() terra.ListValue[NodePoolNodeConfigEffectiveTaintsAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigEffectiveTaintsAttributes](nc.ref.Append("effective_taints"))
}

func (nc NodePoolNodeConfigAttributes) GuestAccelerator() terra.ListValue[NodePoolNodeConfigGuestAcceleratorAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigGuestAcceleratorAttributes](nc.ref.Append("guest_accelerator"))
}

func (nc NodePoolNodeConfigAttributes) AdvancedMachineFeatures() terra.ListValue[NodePoolNodeConfigAdvancedMachineFeaturesAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigAdvancedMachineFeaturesAttributes](nc.ref.Append("advanced_machine_features"))
}

func (nc NodePoolNodeConfigAttributes) ConfidentialNodes() terra.ListValue[NodePoolNodeConfigConfidentialNodesAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigConfidentialNodesAttributes](nc.ref.Append("confidential_nodes"))
}

func (nc NodePoolNodeConfigAttributes) EphemeralStorageConfig() terra.ListValue[NodePoolNodeConfigEphemeralStorageConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigEphemeralStorageConfigAttributes](nc.ref.Append("ephemeral_storage_config"))
}

func (nc NodePoolNodeConfigAttributes) EphemeralStorageLocalSsdConfig() terra.ListValue[NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes](nc.ref.Append("ephemeral_storage_local_ssd_config"))
}

func (nc NodePoolNodeConfigAttributes) FastSocket() terra.ListValue[NodePoolNodeConfigFastSocketAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigFastSocketAttributes](nc.ref.Append("fast_socket"))
}

func (nc NodePoolNodeConfigAttributes) GcfsConfig() terra.ListValue[NodePoolNodeConfigGcfsConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigGcfsConfigAttributes](nc.ref.Append("gcfs_config"))
}

func (nc NodePoolNodeConfigAttributes) Gvnic() terra.ListValue[NodePoolNodeConfigGvnicAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigGvnicAttributes](nc.ref.Append("gvnic"))
}

func (nc NodePoolNodeConfigAttributes) HostMaintenancePolicy() terra.ListValue[NodePoolNodeConfigHostMaintenancePolicyAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigHostMaintenancePolicyAttributes](nc.ref.Append("host_maintenance_policy"))
}

func (nc NodePoolNodeConfigAttributes) KubeletConfig() terra.ListValue[NodePoolNodeConfigKubeletConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigKubeletConfigAttributes](nc.ref.Append("kubelet_config"))
}

func (nc NodePoolNodeConfigAttributes) LinuxNodeConfig() terra.ListValue[NodePoolNodeConfigLinuxNodeConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigLinuxNodeConfigAttributes](nc.ref.Append("linux_node_config"))
}

func (nc NodePoolNodeConfigAttributes) LocalNvmeSsdBlockConfig() terra.ListValue[NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes](nc.ref.Append("local_nvme_ssd_block_config"))
}

func (nc NodePoolNodeConfigAttributes) ReservationAffinity() terra.ListValue[NodePoolNodeConfigReservationAffinityAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigReservationAffinityAttributes](nc.ref.Append("reservation_affinity"))
}

func (nc NodePoolNodeConfigAttributes) SandboxConfig() terra.ListValue[NodePoolNodeConfigSandboxConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigSandboxConfigAttributes](nc.ref.Append("sandbox_config"))
}

func (nc NodePoolNodeConfigAttributes) ShieldedInstanceConfig() terra.ListValue[NodePoolNodeConfigShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigShieldedInstanceConfigAttributes](nc.ref.Append("shielded_instance_config"))
}

func (nc NodePoolNodeConfigAttributes) SoleTenantConfig() terra.ListValue[NodePoolNodeConfigSoleTenantConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigSoleTenantConfigAttributes](nc.ref.Append("sole_tenant_config"))
}

func (nc NodePoolNodeConfigAttributes) Taint() terra.ListValue[NodePoolNodeConfigTaintAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigTaintAttributes](nc.ref.Append("taint"))
}

func (nc NodePoolNodeConfigAttributes) WorkloadMetadataConfig() terra.ListValue[NodePoolNodeConfigWorkloadMetadataConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigWorkloadMetadataConfigAttributes](nc.ref.Append("workload_metadata_config"))
}

type NodePoolNodeConfigEffectiveTaintsAttributes struct {
	ref terra.Reference
}

func (et NodePoolNodeConfigEffectiveTaintsAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et NodePoolNodeConfigEffectiveTaintsAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigEffectiveTaintsAttributes {
	return NodePoolNodeConfigEffectiveTaintsAttributes{ref: ref}
}

func (et NodePoolNodeConfigEffectiveTaintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et NodePoolNodeConfigEffectiveTaintsAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("effect"))
}

func (et NodePoolNodeConfigEffectiveTaintsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("key"))
}

func (et NodePoolNodeConfigEffectiveTaintsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("value"))
}

type NodePoolNodeConfigGuestAcceleratorAttributes struct {
	ref terra.Reference
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) InternalRef() (terra.Reference, error) {
	return ga.ref, nil
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigGuestAcceleratorAttributes {
	return NodePoolNodeConfigGuestAcceleratorAttributes{ref: ref}
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ga.ref.InternalTokens()
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(ga.ref.Append("count"))
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) GpuPartitionSize() terra.StringValue {
	return terra.ReferenceAsString(ga.ref.Append("gpu_partition_size"))
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ga.ref.Append("type"))
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) GpuDriverInstallationConfig() terra.ListValue[NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes](ga.ref.Append("gpu_driver_installation_config"))
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) GpuSharingConfig() terra.ListValue[NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes] {
	return terra.ReferenceAsList[NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes](ga.ref.Append("gpu_sharing_config"))
}

type NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes struct {
	ref terra.Reference
}

func (gdic NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalRef() (terra.Reference, error) {
	return gdic.ref, nil
}

func (gdic NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes {
	return NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes{ref: ref}
}

func (gdic NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gdic.ref.InternalTokens()
}

func (gdic NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigAttributes) GpuDriverVersion() terra.StringValue {
	return terra.ReferenceAsString(gdic.ref.Append("gpu_driver_version"))
}

type NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes struct {
	ref terra.Reference
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalRef() (terra.Reference, error) {
	return gsc.ref, nil
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes {
	return NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes{ref: ref}
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gsc.ref.InternalTokens()
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) GpuSharingStrategy() terra.StringValue {
	return terra.ReferenceAsString(gsc.ref.Append("gpu_sharing_strategy"))
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) MaxSharedClientsPerGpu() terra.NumberValue {
	return terra.ReferenceAsNumber(gsc.ref.Append("max_shared_clients_per_gpu"))
}

type NodePoolNodeConfigAdvancedMachineFeaturesAttributes struct {
	ref terra.Reference
}

func (amf NodePoolNodeConfigAdvancedMachineFeaturesAttributes) InternalRef() (terra.Reference, error) {
	return amf.ref, nil
}

func (amf NodePoolNodeConfigAdvancedMachineFeaturesAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigAdvancedMachineFeaturesAttributes {
	return NodePoolNodeConfigAdvancedMachineFeaturesAttributes{ref: ref}
}

func (amf NodePoolNodeConfigAdvancedMachineFeaturesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return amf.ref.InternalTokens()
}

func (amf NodePoolNodeConfigAdvancedMachineFeaturesAttributes) ThreadsPerCore() terra.NumberValue {
	return terra.ReferenceAsNumber(amf.ref.Append("threads_per_core"))
}

type NodePoolNodeConfigConfidentialNodesAttributes struct {
	ref terra.Reference
}

func (cn NodePoolNodeConfigConfidentialNodesAttributes) InternalRef() (terra.Reference, error) {
	return cn.ref, nil
}

func (cn NodePoolNodeConfigConfidentialNodesAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigConfidentialNodesAttributes {
	return NodePoolNodeConfigConfidentialNodesAttributes{ref: ref}
}

func (cn NodePoolNodeConfigConfidentialNodesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cn.ref.InternalTokens()
}

func (cn NodePoolNodeConfigConfidentialNodesAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cn.ref.Append("enabled"))
}

type NodePoolNodeConfigEphemeralStorageConfigAttributes struct {
	ref terra.Reference
}

func (esc NodePoolNodeConfigEphemeralStorageConfigAttributes) InternalRef() (terra.Reference, error) {
	return esc.ref, nil
}

func (esc NodePoolNodeConfigEphemeralStorageConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigEphemeralStorageConfigAttributes {
	return NodePoolNodeConfigEphemeralStorageConfigAttributes{ref: ref}
}

func (esc NodePoolNodeConfigEphemeralStorageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return esc.ref.InternalTokens()
}

func (esc NodePoolNodeConfigEphemeralStorageConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(esc.ref.Append("local_ssd_count"))
}

type NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes struct {
	ref terra.Reference
}

func (eslsc NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalRef() (terra.Reference, error) {
	return eslsc.ref, nil
}

func (eslsc NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes {
	return NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes{ref: ref}
}

func (eslsc NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eslsc.ref.InternalTokens()
}

func (eslsc NodePoolNodeConfigEphemeralStorageLocalSsdConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(eslsc.ref.Append("local_ssd_count"))
}

type NodePoolNodeConfigFastSocketAttributes struct {
	ref terra.Reference
}

func (fs NodePoolNodeConfigFastSocketAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs NodePoolNodeConfigFastSocketAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigFastSocketAttributes {
	return NodePoolNodeConfigFastSocketAttributes{ref: ref}
}

func (fs NodePoolNodeConfigFastSocketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs NodePoolNodeConfigFastSocketAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(fs.ref.Append("enabled"))
}

type NodePoolNodeConfigGcfsConfigAttributes struct {
	ref terra.Reference
}

func (gc NodePoolNodeConfigGcfsConfigAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc NodePoolNodeConfigGcfsConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigGcfsConfigAttributes {
	return NodePoolNodeConfigGcfsConfigAttributes{ref: ref}
}

func (gc NodePoolNodeConfigGcfsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc NodePoolNodeConfigGcfsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gc.ref.Append("enabled"))
}

type NodePoolNodeConfigGvnicAttributes struct {
	ref terra.Reference
}

func (g NodePoolNodeConfigGvnicAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g NodePoolNodeConfigGvnicAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigGvnicAttributes {
	return NodePoolNodeConfigGvnicAttributes{ref: ref}
}

func (g NodePoolNodeConfigGvnicAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g NodePoolNodeConfigGvnicAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("enabled"))
}

type NodePoolNodeConfigHostMaintenancePolicyAttributes struct {
	ref terra.Reference
}

func (hmp NodePoolNodeConfigHostMaintenancePolicyAttributes) InternalRef() (terra.Reference, error) {
	return hmp.ref, nil
}

func (hmp NodePoolNodeConfigHostMaintenancePolicyAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigHostMaintenancePolicyAttributes {
	return NodePoolNodeConfigHostMaintenancePolicyAttributes{ref: ref}
}

func (hmp NodePoolNodeConfigHostMaintenancePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hmp.ref.InternalTokens()
}

func (hmp NodePoolNodeConfigHostMaintenancePolicyAttributes) MaintenanceInterval() terra.StringValue {
	return terra.ReferenceAsString(hmp.ref.Append("maintenance_interval"))
}

type NodePoolNodeConfigKubeletConfigAttributes struct {
	ref terra.Reference
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigKubeletConfigAttributes {
	return NodePoolNodeConfigKubeletConfigAttributes{ref: ref}
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) CpuCfsQuota() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("cpu_cfs_quota"))
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) CpuCfsQuotaPeriod() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cpu_cfs_quota_period"))
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) CpuManagerPolicy() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cpu_manager_policy"))
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) PodPidsLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("pod_pids_limit"))
}

type NodePoolNodeConfigLinuxNodeConfigAttributes struct {
	ref terra.Reference
}

func (lnc NodePoolNodeConfigLinuxNodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnc.ref, nil
}

func (lnc NodePoolNodeConfigLinuxNodeConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigLinuxNodeConfigAttributes {
	return NodePoolNodeConfigLinuxNodeConfigAttributes{ref: ref}
}

func (lnc NodePoolNodeConfigLinuxNodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnc.ref.InternalTokens()
}

func (lnc NodePoolNodeConfigLinuxNodeConfigAttributes) CgroupMode() terra.StringValue {
	return terra.ReferenceAsString(lnc.ref.Append("cgroup_mode"))
}

func (lnc NodePoolNodeConfigLinuxNodeConfigAttributes) Sysctls() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lnc.ref.Append("sysctls"))
}

type NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes struct {
	ref terra.Reference
}

func (lnsbc NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnsbc.ref, nil
}

func (lnsbc NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes {
	return NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes{ref: ref}
}

func (lnsbc NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnsbc.ref.InternalTokens()
}

func (lnsbc NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(lnsbc.ref.Append("local_ssd_count"))
}

type NodePoolNodeConfigReservationAffinityAttributes struct {
	ref terra.Reference
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigReservationAffinityAttributes {
	return NodePoolNodeConfigReservationAffinityAttributes{ref: ref}
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) ConsumeReservationType() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("consume_reservation_type"))
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("key"))
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ra.ref.Append("values"))
}

type NodePoolNodeConfigSandboxConfigAttributes struct {
	ref terra.Reference
}

func (sc NodePoolNodeConfigSandboxConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc NodePoolNodeConfigSandboxConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigSandboxConfigAttributes {
	return NodePoolNodeConfigSandboxConfigAttributes{ref: ref}
}

func (sc NodePoolNodeConfigSandboxConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc NodePoolNodeConfigSandboxConfigAttributes) SandboxType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("sandbox_type"))
}

type NodePoolNodeConfigShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigShieldedInstanceConfigAttributes {
	return NodePoolNodeConfigShieldedInstanceConfigAttributes{ref: ref}
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

type NodePoolNodeConfigSoleTenantConfigAttributes struct {
	ref terra.Reference
}

func (stc NodePoolNodeConfigSoleTenantConfigAttributes) InternalRef() (terra.Reference, error) {
	return stc.ref, nil
}

func (stc NodePoolNodeConfigSoleTenantConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigSoleTenantConfigAttributes {
	return NodePoolNodeConfigSoleTenantConfigAttributes{ref: ref}
}

func (stc NodePoolNodeConfigSoleTenantConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return stc.ref.InternalTokens()
}

func (stc NodePoolNodeConfigSoleTenantConfigAttributes) NodeAffinity() terra.SetValue[NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes] {
	return terra.ReferenceAsSet[NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes](stc.ref.Append("node_affinity"))
}

type NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes struct {
	ref terra.Reference
}

func (na NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes) InternalRef() (terra.Reference, error) {
	return na.ref, nil
}

func (na NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes {
	return NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes{ref: ref}
}

func (na NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return na.ref.InternalTokens()
}

func (na NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("key"))
}

func (na NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("operator"))
}

func (na NodePoolNodeConfigSoleTenantConfigNodeAffinityAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](na.ref.Append("values"))
}

type NodePoolNodeConfigTaintAttributes struct {
	ref terra.Reference
}

func (t NodePoolNodeConfigTaintAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t NodePoolNodeConfigTaintAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigTaintAttributes {
	return NodePoolNodeConfigTaintAttributes{ref: ref}
}

func (t NodePoolNodeConfigTaintAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t NodePoolNodeConfigTaintAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("effect"))
}

func (t NodePoolNodeConfigTaintAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t NodePoolNodeConfigTaintAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type NodePoolNodeConfigWorkloadMetadataConfigAttributes struct {
	ref terra.Reference
}

func (wmc NodePoolNodeConfigWorkloadMetadataConfigAttributes) InternalRef() (terra.Reference, error) {
	return wmc.ref, nil
}

func (wmc NodePoolNodeConfigWorkloadMetadataConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigWorkloadMetadataConfigAttributes {
	return NodePoolNodeConfigWorkloadMetadataConfigAttributes{ref: ref}
}

func (wmc NodePoolNodeConfigWorkloadMetadataConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wmc.ref.InternalTokens()
}

func (wmc NodePoolNodeConfigWorkloadMetadataConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(wmc.ref.Append("mode"))
}

type PlacementPolicyAttributes struct {
	ref terra.Reference
}

func (pp PlacementPolicyAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp PlacementPolicyAttributes) InternalWithRef(ref terra.Reference) PlacementPolicyAttributes {
	return PlacementPolicyAttributes{ref: ref}
}

func (pp PlacementPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp PlacementPolicyAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("policy_name"))
}

func (pp PlacementPolicyAttributes) TpuTopology() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("tpu_topology"))
}

func (pp PlacementPolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("type"))
}

type NodePoolUpgradeSettingsAttributes struct {
	ref terra.Reference
}

func (us NodePoolUpgradeSettingsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us NodePoolUpgradeSettingsAttributes) InternalWithRef(ref terra.Reference) NodePoolUpgradeSettingsAttributes {
	return NodePoolUpgradeSettingsAttributes{ref: ref}
}

func (us NodePoolUpgradeSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us NodePoolUpgradeSettingsAttributes) MaxSurge() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("max_surge"))
}

func (us NodePoolUpgradeSettingsAttributes) MaxUnavailable() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("max_unavailable"))
}

func (us NodePoolUpgradeSettingsAttributes) Strategy() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("strategy"))
}

func (us NodePoolUpgradeSettingsAttributes) BlueGreenSettings() terra.ListValue[NodePoolUpgradeSettingsBlueGreenSettingsAttributes] {
	return terra.ReferenceAsList[NodePoolUpgradeSettingsBlueGreenSettingsAttributes](us.ref.Append("blue_green_settings"))
}

type NodePoolUpgradeSettingsBlueGreenSettingsAttributes struct {
	ref terra.Reference
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) InternalRef() (terra.Reference, error) {
	return bgs.ref, nil
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) InternalWithRef(ref terra.Reference) NodePoolUpgradeSettingsBlueGreenSettingsAttributes {
	return NodePoolUpgradeSettingsBlueGreenSettingsAttributes{ref: ref}
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bgs.ref.InternalTokens()
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) NodePoolSoakDuration() terra.StringValue {
	return terra.ReferenceAsString(bgs.ref.Append("node_pool_soak_duration"))
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) StandardRolloutPolicy() terra.ListValue[NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes] {
	return terra.ReferenceAsList[NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes](bgs.ref.Append("standard_rollout_policy"))
}

type NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes struct {
	ref terra.Reference
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalRef() (terra.Reference, error) {
	return srp.ref, nil
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalWithRef(ref terra.Reference) NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes {
	return NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes{ref: ref}
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return srp.ref.InternalTokens()
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(srp.ref.Append("batch_node_count"))
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(srp.ref.Append("batch_percentage"))
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchSoakDuration() terra.StringValue {
	return terra.ReferenceAsString(srp.ref.Append("batch_soak_duration"))
}

type NodePoolAutoConfigAttributes struct {
	ref terra.Reference
}

func (npac NodePoolAutoConfigAttributes) InternalRef() (terra.Reference, error) {
	return npac.ref, nil
}

func (npac NodePoolAutoConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolAutoConfigAttributes {
	return NodePoolAutoConfigAttributes{ref: ref}
}

func (npac NodePoolAutoConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npac.ref.InternalTokens()
}

func (npac NodePoolAutoConfigAttributes) NetworkTags() terra.ListValue[NetworkTagsAttributes] {
	return terra.ReferenceAsList[NetworkTagsAttributes](npac.ref.Append("network_tags"))
}

type NetworkTagsAttributes struct {
	ref terra.Reference
}

func (nt NetworkTagsAttributes) InternalRef() (terra.Reference, error) {
	return nt.ref, nil
}

func (nt NetworkTagsAttributes) InternalWithRef(ref terra.Reference) NetworkTagsAttributes {
	return NetworkTagsAttributes{ref: ref}
}

func (nt NetworkTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nt.ref.InternalTokens()
}

func (nt NetworkTagsAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nt.ref.Append("tags"))
}

type NodePoolDefaultsAttributes struct {
	ref terra.Reference
}

func (npd NodePoolDefaultsAttributes) InternalRef() (terra.Reference, error) {
	return npd.ref, nil
}

func (npd NodePoolDefaultsAttributes) InternalWithRef(ref terra.Reference) NodePoolDefaultsAttributes {
	return NodePoolDefaultsAttributes{ref: ref}
}

func (npd NodePoolDefaultsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npd.ref.InternalTokens()
}

func (npd NodePoolDefaultsAttributes) NodeConfigDefaults() terra.ListValue[NodeConfigDefaultsAttributes] {
	return terra.ReferenceAsList[NodeConfigDefaultsAttributes](npd.ref.Append("node_config_defaults"))
}

type NodeConfigDefaultsAttributes struct {
	ref terra.Reference
}

func (ncd NodeConfigDefaultsAttributes) InternalRef() (terra.Reference, error) {
	return ncd.ref, nil
}

func (ncd NodeConfigDefaultsAttributes) InternalWithRef(ref terra.Reference) NodeConfigDefaultsAttributes {
	return NodeConfigDefaultsAttributes{ref: ref}
}

func (ncd NodeConfigDefaultsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ncd.ref.InternalTokens()
}

func (ncd NodeConfigDefaultsAttributes) LoggingVariant() terra.StringValue {
	return terra.ReferenceAsString(ncd.ref.Append("logging_variant"))
}

func (ncd NodeConfigDefaultsAttributes) GcfsConfig() terra.ListValue[NodeConfigDefaultsGcfsConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigDefaultsGcfsConfigAttributes](ncd.ref.Append("gcfs_config"))
}

type NodeConfigDefaultsGcfsConfigAttributes struct {
	ref terra.Reference
}

func (gc NodeConfigDefaultsGcfsConfigAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc NodeConfigDefaultsGcfsConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigDefaultsGcfsConfigAttributes {
	return NodeConfigDefaultsGcfsConfigAttributes{ref: ref}
}

func (gc NodeConfigDefaultsGcfsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc NodeConfigDefaultsGcfsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gc.ref.Append("enabled"))
}

type NotificationConfigAttributes struct {
	ref terra.Reference
}

func (nc NotificationConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NotificationConfigAttributes) InternalWithRef(ref terra.Reference) NotificationConfigAttributes {
	return NotificationConfigAttributes{ref: ref}
}

func (nc NotificationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NotificationConfigAttributes) Pubsub() terra.ListValue[PubsubAttributes] {
	return terra.ReferenceAsList[PubsubAttributes](nc.ref.Append("pubsub"))
}

type PubsubAttributes struct {
	ref terra.Reference
}

func (p PubsubAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PubsubAttributes) InternalWithRef(ref terra.Reference) PubsubAttributes {
	return PubsubAttributes{ref: ref}
}

func (p PubsubAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PubsubAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("enabled"))
}

func (p PubsubAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("topic"))
}

func (p PubsubAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceAsList[FilterAttributes](p.ref.Append("filter"))
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) EventType() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](f.ref.Append("event_type"))
}

type PodSecurityPolicyConfigAttributes struct {
	ref terra.Reference
}

func (pspc PodSecurityPolicyConfigAttributes) InternalRef() (terra.Reference, error) {
	return pspc.ref, nil
}

func (pspc PodSecurityPolicyConfigAttributes) InternalWithRef(ref terra.Reference) PodSecurityPolicyConfigAttributes {
	return PodSecurityPolicyConfigAttributes{ref: ref}
}

func (pspc PodSecurityPolicyConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pspc.ref.InternalTokens()
}

func (pspc PodSecurityPolicyConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pspc.ref.Append("enabled"))
}

type PrivateClusterConfigAttributes struct {
	ref terra.Reference
}

func (pcc PrivateClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return pcc.ref, nil
}

func (pcc PrivateClusterConfigAttributes) InternalWithRef(ref terra.Reference) PrivateClusterConfigAttributes {
	return PrivateClusterConfigAttributes{ref: ref}
}

func (pcc PrivateClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pcc.ref.InternalTokens()
}

func (pcc PrivateClusterConfigAttributes) EnablePrivateEndpoint() terra.BoolValue {
	return terra.ReferenceAsBool(pcc.ref.Append("enable_private_endpoint"))
}

func (pcc PrivateClusterConfigAttributes) EnablePrivateNodes() terra.BoolValue {
	return terra.ReferenceAsBool(pcc.ref.Append("enable_private_nodes"))
}

func (pcc PrivateClusterConfigAttributes) MasterIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(pcc.ref.Append("master_ipv4_cidr_block"))
}

func (pcc PrivateClusterConfigAttributes) PeeringName() terra.StringValue {
	return terra.ReferenceAsString(pcc.ref.Append("peering_name"))
}

func (pcc PrivateClusterConfigAttributes) PrivateEndpoint() terra.StringValue {
	return terra.ReferenceAsString(pcc.ref.Append("private_endpoint"))
}

func (pcc PrivateClusterConfigAttributes) PrivateEndpointSubnetwork() terra.StringValue {
	return terra.ReferenceAsString(pcc.ref.Append("private_endpoint_subnetwork"))
}

func (pcc PrivateClusterConfigAttributes) PublicEndpoint() terra.StringValue {
	return terra.ReferenceAsString(pcc.ref.Append("public_endpoint"))
}

func (pcc PrivateClusterConfigAttributes) MasterGlobalAccessConfig() terra.ListValue[MasterGlobalAccessConfigAttributes] {
	return terra.ReferenceAsList[MasterGlobalAccessConfigAttributes](pcc.ref.Append("master_global_access_config"))
}

type MasterGlobalAccessConfigAttributes struct {
	ref terra.Reference
}

func (mgac MasterGlobalAccessConfigAttributes) InternalRef() (terra.Reference, error) {
	return mgac.ref, nil
}

func (mgac MasterGlobalAccessConfigAttributes) InternalWithRef(ref terra.Reference) MasterGlobalAccessConfigAttributes {
	return MasterGlobalAccessConfigAttributes{ref: ref}
}

func (mgac MasterGlobalAccessConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mgac.ref.InternalTokens()
}

func (mgac MasterGlobalAccessConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(mgac.ref.Append("enabled"))
}

type ProtectConfigAttributes struct {
	ref terra.Reference
}

func (pc ProtectConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc ProtectConfigAttributes) InternalWithRef(ref terra.Reference) ProtectConfigAttributes {
	return ProtectConfigAttributes{ref: ref}
}

func (pc ProtectConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc ProtectConfigAttributes) WorkloadVulnerabilityMode() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("workload_vulnerability_mode"))
}

func (pc ProtectConfigAttributes) WorkloadConfig() terra.ListValue[WorkloadConfigAttributes] {
	return terra.ReferenceAsList[WorkloadConfigAttributes](pc.ref.Append("workload_config"))
}

type WorkloadConfigAttributes struct {
	ref terra.Reference
}

func (wc WorkloadConfigAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc WorkloadConfigAttributes) InternalWithRef(ref terra.Reference) WorkloadConfigAttributes {
	return WorkloadConfigAttributes{ref: ref}
}

func (wc WorkloadConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc WorkloadConfigAttributes) AuditMode() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("audit_mode"))
}

type ReleaseChannelAttributes struct {
	ref terra.Reference
}

func (rc ReleaseChannelAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc ReleaseChannelAttributes) InternalWithRef(ref terra.Reference) ReleaseChannelAttributes {
	return ReleaseChannelAttributes{ref: ref}
}

func (rc ReleaseChannelAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc ReleaseChannelAttributes) Channel() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("channel"))
}

type ResourceUsageExportConfigAttributes struct {
	ref terra.Reference
}

func (ruec ResourceUsageExportConfigAttributes) InternalRef() (terra.Reference, error) {
	return ruec.ref, nil
}

func (ruec ResourceUsageExportConfigAttributes) InternalWithRef(ref terra.Reference) ResourceUsageExportConfigAttributes {
	return ResourceUsageExportConfigAttributes{ref: ref}
}

func (ruec ResourceUsageExportConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ruec.ref.InternalTokens()
}

func (ruec ResourceUsageExportConfigAttributes) EnableNetworkEgressMetering() terra.BoolValue {
	return terra.ReferenceAsBool(ruec.ref.Append("enable_network_egress_metering"))
}

func (ruec ResourceUsageExportConfigAttributes) EnableResourceConsumptionMetering() terra.BoolValue {
	return terra.ReferenceAsBool(ruec.ref.Append("enable_resource_consumption_metering"))
}

func (ruec ResourceUsageExportConfigAttributes) BigqueryDestination() terra.ListValue[BigqueryDestinationAttributes] {
	return terra.ReferenceAsList[BigqueryDestinationAttributes](ruec.ref.Append("bigquery_destination"))
}

type BigqueryDestinationAttributes struct {
	ref terra.Reference
}

func (bd BigqueryDestinationAttributes) InternalRef() (terra.Reference, error) {
	return bd.ref, nil
}

func (bd BigqueryDestinationAttributes) InternalWithRef(ref terra.Reference) BigqueryDestinationAttributes {
	return BigqueryDestinationAttributes{ref: ref}
}

func (bd BigqueryDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bd.ref.InternalTokens()
}

func (bd BigqueryDestinationAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("dataset_id"))
}

type SecurityPostureConfigAttributes struct {
	ref terra.Reference
}

func (spc SecurityPostureConfigAttributes) InternalRef() (terra.Reference, error) {
	return spc.ref, nil
}

func (spc SecurityPostureConfigAttributes) InternalWithRef(ref terra.Reference) SecurityPostureConfigAttributes {
	return SecurityPostureConfigAttributes{ref: ref}
}

func (spc SecurityPostureConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spc.ref.InternalTokens()
}

func (spc SecurityPostureConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(spc.ref.Append("mode"))
}

func (spc SecurityPostureConfigAttributes) VulnerabilityMode() terra.StringValue {
	return terra.ReferenceAsString(spc.ref.Append("vulnerability_mode"))
}

type ServiceExternalIpsConfigAttributes struct {
	ref terra.Reference
}

func (seic ServiceExternalIpsConfigAttributes) InternalRef() (terra.Reference, error) {
	return seic.ref, nil
}

func (seic ServiceExternalIpsConfigAttributes) InternalWithRef(ref terra.Reference) ServiceExternalIpsConfigAttributes {
	return ServiceExternalIpsConfigAttributes{ref: ref}
}

func (seic ServiceExternalIpsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return seic.ref.InternalTokens()
}

func (seic ServiceExternalIpsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(seic.ref.Append("enabled"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TpuConfigAttributes struct {
	ref terra.Reference
}

func (tc TpuConfigAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TpuConfigAttributes) InternalWithRef(ref terra.Reference) TpuConfigAttributes {
	return TpuConfigAttributes{ref: ref}
}

func (tc TpuConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TpuConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(tc.ref.Append("enabled"))
}

func (tc TpuConfigAttributes) Ipv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("ipv4_cidr_block"))
}

func (tc TpuConfigAttributes) UseServiceNetworking() terra.BoolValue {
	return terra.ReferenceAsBool(tc.ref.Append("use_service_networking"))
}

type VerticalPodAutoscalingAttributes struct {
	ref terra.Reference
}

func (vpa VerticalPodAutoscalingAttributes) InternalRef() (terra.Reference, error) {
	return vpa.ref, nil
}

func (vpa VerticalPodAutoscalingAttributes) InternalWithRef(ref terra.Reference) VerticalPodAutoscalingAttributes {
	return VerticalPodAutoscalingAttributes{ref: ref}
}

func (vpa VerticalPodAutoscalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vpa.ref.InternalTokens()
}

func (vpa VerticalPodAutoscalingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(vpa.ref.Append("enabled"))
}

type WorkloadIdentityConfigAttributes struct {
	ref terra.Reference
}

func (wic WorkloadIdentityConfigAttributes) InternalRef() (terra.Reference, error) {
	return wic.ref, nil
}

func (wic WorkloadIdentityConfigAttributes) InternalWithRef(ref terra.Reference) WorkloadIdentityConfigAttributes {
	return WorkloadIdentityConfigAttributes{ref: ref}
}

func (wic WorkloadIdentityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wic.ref.InternalTokens()
}

func (wic WorkloadIdentityConfigAttributes) WorkloadPool() terra.StringValue {
	return terra.ReferenceAsString(wic.ref.Append("workload_pool"))
}

type AddonsConfigState struct {
	CloudrunConfig                   []CloudrunConfigState                   `json:"cloudrun_config"`
	ConfigConnectorConfig            []ConfigConnectorConfigState            `json:"config_connector_config"`
	DnsCacheConfig                   []DnsCacheConfigState                   `json:"dns_cache_config"`
	GcePersistentDiskCsiDriverConfig []GcePersistentDiskCsiDriverConfigState `json:"gce_persistent_disk_csi_driver_config"`
	GcpFilestoreCsiDriverConfig      []GcpFilestoreCsiDriverConfigState      `json:"gcp_filestore_csi_driver_config"`
	GcsFuseCsiDriverConfig           []GcsFuseCsiDriverConfigState           `json:"gcs_fuse_csi_driver_config"`
	GkeBackupAgentConfig             []GkeBackupAgentConfigState             `json:"gke_backup_agent_config"`
	HorizontalPodAutoscaling         []HorizontalPodAutoscalingState         `json:"horizontal_pod_autoscaling"`
	HttpLoadBalancing                []HttpLoadBalancingState                `json:"http_load_balancing"`
	IstioConfig                      []IstioConfigState                      `json:"istio_config"`
	KalmConfig                       []KalmConfigState                       `json:"kalm_config"`
	NetworkPolicyConfig              []NetworkPolicyConfigState              `json:"network_policy_config"`
}

type CloudrunConfigState struct {
	Disabled         bool   `json:"disabled"`
	LoadBalancerType string `json:"load_balancer_type"`
}

type ConfigConnectorConfigState struct {
	Enabled bool `json:"enabled"`
}

type DnsCacheConfigState struct {
	Enabled bool `json:"enabled"`
}

type GcePersistentDiskCsiDriverConfigState struct {
	Enabled bool `json:"enabled"`
}

type GcpFilestoreCsiDriverConfigState struct {
	Enabled bool `json:"enabled"`
}

type GcsFuseCsiDriverConfigState struct {
	Enabled bool `json:"enabled"`
}

type GkeBackupAgentConfigState struct {
	Enabled bool `json:"enabled"`
}

type HorizontalPodAutoscalingState struct {
	Disabled bool `json:"disabled"`
}

type HttpLoadBalancingState struct {
	Disabled bool `json:"disabled"`
}

type IstioConfigState struct {
	Auth     string `json:"auth"`
	Disabled bool   `json:"disabled"`
}

type KalmConfigState struct {
	Enabled bool `json:"enabled"`
}

type NetworkPolicyConfigState struct {
	Disabled bool `json:"disabled"`
}

type AuthenticatorGroupsConfigState struct {
	SecurityGroup string `json:"security_group"`
}

type BinaryAuthorizationState struct {
	Enabled        bool   `json:"enabled"`
	EvaluationMode string `json:"evaluation_mode"`
}

type ClusterAutoscalingState struct {
	AutoscalingProfile       string                          `json:"autoscaling_profile"`
	Enabled                  bool                            `json:"enabled"`
	AutoProvisioningDefaults []AutoProvisioningDefaultsState `json:"auto_provisioning_defaults"`
	ResourceLimits           []ResourceLimitsState           `json:"resource_limits"`
}

type AutoProvisioningDefaultsState struct {
	BootDiskKmsKey         string                                                `json:"boot_disk_kms_key"`
	DiskSize               float64                                               `json:"disk_size"`
	DiskType               string                                                `json:"disk_type"`
	ImageType              string                                                `json:"image_type"`
	MinCpuPlatform         string                                                `json:"min_cpu_platform"`
	OauthScopes            []string                                              `json:"oauth_scopes"`
	ServiceAccount         string                                                `json:"service_account"`
	Management             []AutoProvisioningDefaultsManagementState             `json:"management"`
	ShieldedInstanceConfig []AutoProvisioningDefaultsShieldedInstanceConfigState `json:"shielded_instance_config"`
	UpgradeSettings        []AutoProvisioningDefaultsUpgradeSettingsState        `json:"upgrade_settings"`
}

type AutoProvisioningDefaultsManagementState struct {
	AutoRepair     bool                  `json:"auto_repair"`
	AutoUpgrade    bool                  `json:"auto_upgrade"`
	UpgradeOptions []UpgradeOptionsState `json:"upgrade_options"`
}

type UpgradeOptionsState struct {
	AutoUpgradeStartTime string `json:"auto_upgrade_start_time"`
	Description          string `json:"description"`
}

type AutoProvisioningDefaultsShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
}

type AutoProvisioningDefaultsUpgradeSettingsState struct {
	MaxSurge          float64                                                         `json:"max_surge"`
	MaxUnavailable    float64                                                         `json:"max_unavailable"`
	Strategy          string                                                          `json:"strategy"`
	BlueGreenSettings []AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsState `json:"blue_green_settings"`
}

type AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsState struct {
	NodePoolSoakDuration  string                                                                               `json:"node_pool_soak_duration"`
	StandardRolloutPolicy []AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyState `json:"standard_rollout_policy"`
}

type AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyState struct {
	BatchNodeCount    float64 `json:"batch_node_count"`
	BatchPercentage   float64 `json:"batch_percentage"`
	BatchSoakDuration string  `json:"batch_soak_duration"`
}

type ResourceLimitsState struct {
	Maximum      float64 `json:"maximum"`
	Minimum      float64 `json:"minimum"`
	ResourceType string  `json:"resource_type"`
}

type ClusterTelemetryState struct {
	Type string `json:"type"`
}

type ConfidentialNodesState struct {
	Enabled bool `json:"enabled"`
}

type CostManagementConfigState struct {
	Enabled bool `json:"enabled"`
}

type DatabaseEncryptionState struct {
	KeyName string `json:"key_name"`
	State   string `json:"state"`
}

type DefaultSnatStatusState struct {
	Disabled bool `json:"disabled"`
}

type DnsConfigState struct {
	ClusterDns       string `json:"cluster_dns"`
	ClusterDnsDomain string `json:"cluster_dns_domain"`
	ClusterDnsScope  string `json:"cluster_dns_scope"`
}

type EnableK8SBetaApisState struct {
	EnabledApis []string `json:"enabled_apis"`
}

type GatewayApiConfigState struct {
	Channel string `json:"channel"`
}

type IdentityServiceConfigState struct {
	Enabled bool `json:"enabled"`
}

type IpAllocationPolicyState struct {
	ClusterIpv4CidrBlock       string                                              `json:"cluster_ipv4_cidr_block"`
	ClusterSecondaryRangeName  string                                              `json:"cluster_secondary_range_name"`
	ServicesIpv4CidrBlock      string                                              `json:"services_ipv4_cidr_block"`
	ServicesSecondaryRangeName string                                              `json:"services_secondary_range_name"`
	StackType                  string                                              `json:"stack_type"`
	AdditionalPodRangesConfig  []AdditionalPodRangesConfigState                    `json:"additional_pod_ranges_config"`
	PodCidrOverprovisionConfig []IpAllocationPolicyPodCidrOverprovisionConfigState `json:"pod_cidr_overprovision_config"`
}

type AdditionalPodRangesConfigState struct {
	PodRangeNames []string `json:"pod_range_names"`
}

type IpAllocationPolicyPodCidrOverprovisionConfigState struct {
	Disabled bool `json:"disabled"`
}

type LoggingConfigState struct {
	EnableComponents []string `json:"enable_components"`
}

type MaintenancePolicyState struct {
	DailyMaintenanceWindow []DailyMaintenanceWindowState `json:"daily_maintenance_window"`
	MaintenanceExclusion   []MaintenanceExclusionState   `json:"maintenance_exclusion"`
	RecurringWindow        []RecurringWindowState        `json:"recurring_window"`
}

type DailyMaintenanceWindowState struct {
	Duration  string `json:"duration"`
	StartTime string `json:"start_time"`
}

type MaintenanceExclusionState struct {
	EndTime          string                  `json:"end_time"`
	ExclusionName    string                  `json:"exclusion_name"`
	StartTime        string                  `json:"start_time"`
	ExclusionOptions []ExclusionOptionsState `json:"exclusion_options"`
}

type ExclusionOptionsState struct {
	Scope string `json:"scope"`
}

type RecurringWindowState struct {
	EndTime    string `json:"end_time"`
	Recurrence string `json:"recurrence"`
	StartTime  string `json:"start_time"`
}

type MasterAuthState struct {
	ClientCertificate       string                         `json:"client_certificate"`
	ClientKey               string                         `json:"client_key"`
	ClusterCaCertificate    string                         `json:"cluster_ca_certificate"`
	ClientCertificateConfig []ClientCertificateConfigState `json:"client_certificate_config"`
}

type ClientCertificateConfigState struct {
	IssueClientCertificate bool `json:"issue_client_certificate"`
}

type MasterAuthorizedNetworksConfigState struct {
	GcpPublicCidrsAccessEnabled bool              `json:"gcp_public_cidrs_access_enabled"`
	CidrBlocks                  []CidrBlocksState `json:"cidr_blocks"`
}

type CidrBlocksState struct {
	CidrBlock   string `json:"cidr_block"`
	DisplayName string `json:"display_name"`
}

type MeshCertificatesState struct {
	EnableCertificates bool `json:"enable_certificates"`
}

type MonitoringConfigState struct {
	EnableComponents                    []string                                   `json:"enable_components"`
	AdvancedDatapathObservabilityConfig []AdvancedDatapathObservabilityConfigState `json:"advanced_datapath_observability_config"`
	ManagedPrometheus                   []ManagedPrometheusState                   `json:"managed_prometheus"`
}

type AdvancedDatapathObservabilityConfigState struct {
	EnableMetrics bool   `json:"enable_metrics"`
	RelayMode     string `json:"relay_mode"`
}

type ManagedPrometheusState struct {
	Enabled bool `json:"enabled"`
}

type NetworkPolicyState struct {
	Enabled  bool   `json:"enabled"`
	Provider string `json:"provider"`
}

type NodeConfigState struct {
	BootDiskKmsKey                 string                                          `json:"boot_disk_kms_key"`
	DiskSizeGb                     float64                                         `json:"disk_size_gb"`
	DiskType                       string                                          `json:"disk_type"`
	ImageType                      string                                          `json:"image_type"`
	Labels                         map[string]string                               `json:"labels"`
	LocalSsdCount                  float64                                         `json:"local_ssd_count"`
	LoggingVariant                 string                                          `json:"logging_variant"`
	MachineType                    string                                          `json:"machine_type"`
	Metadata                       map[string]string                               `json:"metadata"`
	MinCpuPlatform                 string                                          `json:"min_cpu_platform"`
	NodeGroup                      string                                          `json:"node_group"`
	OauthScopes                    []string                                        `json:"oauth_scopes"`
	Preemptible                    bool                                            `json:"preemptible"`
	ResourceLabels                 map[string]string                               `json:"resource_labels"`
	ServiceAccount                 string                                          `json:"service_account"`
	Spot                           bool                                            `json:"spot"`
	Tags                           []string                                        `json:"tags"`
	EffectiveTaints                []NodeConfigEffectiveTaintsState                `json:"effective_taints"`
	GuestAccelerator               []NodeConfigGuestAcceleratorState               `json:"guest_accelerator"`
	AdvancedMachineFeatures        []NodeConfigAdvancedMachineFeaturesState        `json:"advanced_machine_features"`
	ConfidentialNodes              []NodeConfigConfidentialNodesState              `json:"confidential_nodes"`
	EphemeralStorageConfig         []NodeConfigEphemeralStorageConfigState         `json:"ephemeral_storage_config"`
	EphemeralStorageLocalSsdConfig []NodeConfigEphemeralStorageLocalSsdConfigState `json:"ephemeral_storage_local_ssd_config"`
	FastSocket                     []NodeConfigFastSocketState                     `json:"fast_socket"`
	GcfsConfig                     []NodeConfigGcfsConfigState                     `json:"gcfs_config"`
	Gvnic                          []NodeConfigGvnicState                          `json:"gvnic"`
	HostMaintenancePolicy          []NodeConfigHostMaintenancePolicyState          `json:"host_maintenance_policy"`
	KubeletConfig                  []NodeConfigKubeletConfigState                  `json:"kubelet_config"`
	LinuxNodeConfig                []NodeConfigLinuxNodeConfigState                `json:"linux_node_config"`
	LocalNvmeSsdBlockConfig        []NodeConfigLocalNvmeSsdBlockConfigState        `json:"local_nvme_ssd_block_config"`
	ReservationAffinity            []NodeConfigReservationAffinityState            `json:"reservation_affinity"`
	SandboxConfig                  []NodeConfigSandboxConfigState                  `json:"sandbox_config"`
	ShieldedInstanceConfig         []NodeConfigShieldedInstanceConfigState         `json:"shielded_instance_config"`
	SoleTenantConfig               []NodeConfigSoleTenantConfigState               `json:"sole_tenant_config"`
	Taint                          []NodeConfigTaintState                          `json:"taint"`
	WorkloadMetadataConfig         []NodeConfigWorkloadMetadataConfigState         `json:"workload_metadata_config"`
}

type NodeConfigEffectiveTaintsState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type NodeConfigGuestAcceleratorState struct {
	Count                       float64                                                      `json:"count"`
	GpuPartitionSize            string                                                       `json:"gpu_partition_size"`
	Type                        string                                                       `json:"type"`
	GpuDriverInstallationConfig []NodeConfigGuestAcceleratorGpuDriverInstallationConfigState `json:"gpu_driver_installation_config"`
	GpuSharingConfig            []NodeConfigGuestAcceleratorGpuSharingConfigState            `json:"gpu_sharing_config"`
}

type NodeConfigGuestAcceleratorGpuDriverInstallationConfigState struct {
	GpuDriverVersion string `json:"gpu_driver_version"`
}

type NodeConfigGuestAcceleratorGpuSharingConfigState struct {
	GpuSharingStrategy     string  `json:"gpu_sharing_strategy"`
	MaxSharedClientsPerGpu float64 `json:"max_shared_clients_per_gpu"`
}

type NodeConfigAdvancedMachineFeaturesState struct {
	ThreadsPerCore float64 `json:"threads_per_core"`
}

type NodeConfigConfidentialNodesState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigEphemeralStorageConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodeConfigEphemeralStorageLocalSsdConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodeConfigFastSocketState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigGcfsConfigState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigGvnicState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigHostMaintenancePolicyState struct {
	MaintenanceInterval string `json:"maintenance_interval"`
}

type NodeConfigKubeletConfigState struct {
	CpuCfsQuota       bool    `json:"cpu_cfs_quota"`
	CpuCfsQuotaPeriod string  `json:"cpu_cfs_quota_period"`
	CpuManagerPolicy  string  `json:"cpu_manager_policy"`
	PodPidsLimit      float64 `json:"pod_pids_limit"`
}

type NodeConfigLinuxNodeConfigState struct {
	CgroupMode string            `json:"cgroup_mode"`
	Sysctls    map[string]string `json:"sysctls"`
}

type NodeConfigLocalNvmeSsdBlockConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodeConfigReservationAffinityState struct {
	ConsumeReservationType string   `json:"consume_reservation_type"`
	Key                    string   `json:"key"`
	Values                 []string `json:"values"`
}

type NodeConfigSandboxConfigState struct {
	SandboxType string `json:"sandbox_type"`
}

type NodeConfigShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
}

type NodeConfigSoleTenantConfigState struct {
	NodeAffinity []NodeConfigSoleTenantConfigNodeAffinityState `json:"node_affinity"`
}

type NodeConfigSoleTenantConfigNodeAffinityState struct {
	Key      string   `json:"key"`
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type NodeConfigTaintState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type NodeConfigWorkloadMetadataConfigState struct {
	Mode string `json:"mode"`
}

type NodePoolState struct {
	InitialNodeCount         float64                        `json:"initial_node_count"`
	InstanceGroupUrls        []string                       `json:"instance_group_urls"`
	ManagedInstanceGroupUrls []string                       `json:"managed_instance_group_urls"`
	MaxPodsPerNode           float64                        `json:"max_pods_per_node"`
	Name                     string                         `json:"name"`
	NamePrefix               string                         `json:"name_prefix"`
	NodeCount                float64                        `json:"node_count"`
	NodeLocations            []string                       `json:"node_locations"`
	Version                  string                         `json:"version"`
	Autoscaling              []AutoscalingState             `json:"autoscaling"`
	Management               []NodePoolManagementState      `json:"management"`
	NetworkConfig            []NetworkConfigState           `json:"network_config"`
	NodeConfig               []NodePoolNodeConfigState      `json:"node_config"`
	PlacementPolicy          []PlacementPolicyState         `json:"placement_policy"`
	UpgradeSettings          []NodePoolUpgradeSettingsState `json:"upgrade_settings"`
}

type AutoscalingState struct {
	LocationPolicy    string  `json:"location_policy"`
	MaxNodeCount      float64 `json:"max_node_count"`
	MinNodeCount      float64 `json:"min_node_count"`
	TotalMaxNodeCount float64 `json:"total_max_node_count"`
	TotalMinNodeCount float64 `json:"total_min_node_count"`
}

type NodePoolManagementState struct {
	AutoRepair  bool `json:"auto_repair"`
	AutoUpgrade bool `json:"auto_upgrade"`
}

type NetworkConfigState struct {
	CreatePodRange               bool                                           `json:"create_pod_range"`
	EnablePrivateNodes           bool                                           `json:"enable_private_nodes"`
	PodIpv4CidrBlock             string                                         `json:"pod_ipv4_cidr_block"`
	PodRange                     string                                         `json:"pod_range"`
	AdditionalNodeNetworkConfigs []AdditionalNodeNetworkConfigsState            `json:"additional_node_network_configs"`
	AdditionalPodNetworkConfigs  []AdditionalPodNetworkConfigsState             `json:"additional_pod_network_configs"`
	PodCidrOverprovisionConfig   []NetworkConfigPodCidrOverprovisionConfigState `json:"pod_cidr_overprovision_config"`
}

type AdditionalNodeNetworkConfigsState struct {
	Network    string `json:"network"`
	Subnetwork string `json:"subnetwork"`
}

type AdditionalPodNetworkConfigsState struct {
	MaxPodsPerNode    float64 `json:"max_pods_per_node"`
	SecondaryPodRange string  `json:"secondary_pod_range"`
	Subnetwork        string  `json:"subnetwork"`
}

type NetworkConfigPodCidrOverprovisionConfigState struct {
	Disabled bool `json:"disabled"`
}

type NodePoolNodeConfigState struct {
	BootDiskKmsKey                 string                                                  `json:"boot_disk_kms_key"`
	DiskSizeGb                     float64                                                 `json:"disk_size_gb"`
	DiskType                       string                                                  `json:"disk_type"`
	ImageType                      string                                                  `json:"image_type"`
	Labels                         map[string]string                                       `json:"labels"`
	LocalSsdCount                  float64                                                 `json:"local_ssd_count"`
	LoggingVariant                 string                                                  `json:"logging_variant"`
	MachineType                    string                                                  `json:"machine_type"`
	Metadata                       map[string]string                                       `json:"metadata"`
	MinCpuPlatform                 string                                                  `json:"min_cpu_platform"`
	NodeGroup                      string                                                  `json:"node_group"`
	OauthScopes                    []string                                                `json:"oauth_scopes"`
	Preemptible                    bool                                                    `json:"preemptible"`
	ResourceLabels                 map[string]string                                       `json:"resource_labels"`
	ServiceAccount                 string                                                  `json:"service_account"`
	Spot                           bool                                                    `json:"spot"`
	Tags                           []string                                                `json:"tags"`
	EffectiveTaints                []NodePoolNodeConfigEffectiveTaintsState                `json:"effective_taints"`
	GuestAccelerator               []NodePoolNodeConfigGuestAcceleratorState               `json:"guest_accelerator"`
	AdvancedMachineFeatures        []NodePoolNodeConfigAdvancedMachineFeaturesState        `json:"advanced_machine_features"`
	ConfidentialNodes              []NodePoolNodeConfigConfidentialNodesState              `json:"confidential_nodes"`
	EphemeralStorageConfig         []NodePoolNodeConfigEphemeralStorageConfigState         `json:"ephemeral_storage_config"`
	EphemeralStorageLocalSsdConfig []NodePoolNodeConfigEphemeralStorageLocalSsdConfigState `json:"ephemeral_storage_local_ssd_config"`
	FastSocket                     []NodePoolNodeConfigFastSocketState                     `json:"fast_socket"`
	GcfsConfig                     []NodePoolNodeConfigGcfsConfigState                     `json:"gcfs_config"`
	Gvnic                          []NodePoolNodeConfigGvnicState                          `json:"gvnic"`
	HostMaintenancePolicy          []NodePoolNodeConfigHostMaintenancePolicyState          `json:"host_maintenance_policy"`
	KubeletConfig                  []NodePoolNodeConfigKubeletConfigState                  `json:"kubelet_config"`
	LinuxNodeConfig                []NodePoolNodeConfigLinuxNodeConfigState                `json:"linux_node_config"`
	LocalNvmeSsdBlockConfig        []NodePoolNodeConfigLocalNvmeSsdBlockConfigState        `json:"local_nvme_ssd_block_config"`
	ReservationAffinity            []NodePoolNodeConfigReservationAffinityState            `json:"reservation_affinity"`
	SandboxConfig                  []NodePoolNodeConfigSandboxConfigState                  `json:"sandbox_config"`
	ShieldedInstanceConfig         []NodePoolNodeConfigShieldedInstanceConfigState         `json:"shielded_instance_config"`
	SoleTenantConfig               []NodePoolNodeConfigSoleTenantConfigState               `json:"sole_tenant_config"`
	Taint                          []NodePoolNodeConfigTaintState                          `json:"taint"`
	WorkloadMetadataConfig         []NodePoolNodeConfigWorkloadMetadataConfigState         `json:"workload_metadata_config"`
}

type NodePoolNodeConfigEffectiveTaintsState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type NodePoolNodeConfigGuestAcceleratorState struct {
	Count                       float64                                                              `json:"count"`
	GpuPartitionSize            string                                                               `json:"gpu_partition_size"`
	Type                        string                                                               `json:"type"`
	GpuDriverInstallationConfig []NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigState `json:"gpu_driver_installation_config"`
	GpuSharingConfig            []NodePoolNodeConfigGuestAcceleratorGpuSharingConfigState            `json:"gpu_sharing_config"`
}

type NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfigState struct {
	GpuDriverVersion string `json:"gpu_driver_version"`
}

type NodePoolNodeConfigGuestAcceleratorGpuSharingConfigState struct {
	GpuSharingStrategy     string  `json:"gpu_sharing_strategy"`
	MaxSharedClientsPerGpu float64 `json:"max_shared_clients_per_gpu"`
}

type NodePoolNodeConfigAdvancedMachineFeaturesState struct {
	ThreadsPerCore float64 `json:"threads_per_core"`
}

type NodePoolNodeConfigConfidentialNodesState struct {
	Enabled bool `json:"enabled"`
}

type NodePoolNodeConfigEphemeralStorageConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodePoolNodeConfigEphemeralStorageLocalSsdConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodePoolNodeConfigFastSocketState struct {
	Enabled bool `json:"enabled"`
}

type NodePoolNodeConfigGcfsConfigState struct {
	Enabled bool `json:"enabled"`
}

type NodePoolNodeConfigGvnicState struct {
	Enabled bool `json:"enabled"`
}

type NodePoolNodeConfigHostMaintenancePolicyState struct {
	MaintenanceInterval string `json:"maintenance_interval"`
}

type NodePoolNodeConfigKubeletConfigState struct {
	CpuCfsQuota       bool    `json:"cpu_cfs_quota"`
	CpuCfsQuotaPeriod string  `json:"cpu_cfs_quota_period"`
	CpuManagerPolicy  string  `json:"cpu_manager_policy"`
	PodPidsLimit      float64 `json:"pod_pids_limit"`
}

type NodePoolNodeConfigLinuxNodeConfigState struct {
	CgroupMode string            `json:"cgroup_mode"`
	Sysctls    map[string]string `json:"sysctls"`
}

type NodePoolNodeConfigLocalNvmeSsdBlockConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodePoolNodeConfigReservationAffinityState struct {
	ConsumeReservationType string   `json:"consume_reservation_type"`
	Key                    string   `json:"key"`
	Values                 []string `json:"values"`
}

type NodePoolNodeConfigSandboxConfigState struct {
	SandboxType string `json:"sandbox_type"`
}

type NodePoolNodeConfigShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
}

type NodePoolNodeConfigSoleTenantConfigState struct {
	NodeAffinity []NodePoolNodeConfigSoleTenantConfigNodeAffinityState `json:"node_affinity"`
}

type NodePoolNodeConfigSoleTenantConfigNodeAffinityState struct {
	Key      string   `json:"key"`
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type NodePoolNodeConfigTaintState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type NodePoolNodeConfigWorkloadMetadataConfigState struct {
	Mode string `json:"mode"`
}

type PlacementPolicyState struct {
	PolicyName  string `json:"policy_name"`
	TpuTopology string `json:"tpu_topology"`
	Type        string `json:"type"`
}

type NodePoolUpgradeSettingsState struct {
	MaxSurge          float64                                         `json:"max_surge"`
	MaxUnavailable    float64                                         `json:"max_unavailable"`
	Strategy          string                                          `json:"strategy"`
	BlueGreenSettings []NodePoolUpgradeSettingsBlueGreenSettingsState `json:"blue_green_settings"`
}

type NodePoolUpgradeSettingsBlueGreenSettingsState struct {
	NodePoolSoakDuration  string                                                               `json:"node_pool_soak_duration"`
	StandardRolloutPolicy []NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyState `json:"standard_rollout_policy"`
}

type NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyState struct {
	BatchNodeCount    float64 `json:"batch_node_count"`
	BatchPercentage   float64 `json:"batch_percentage"`
	BatchSoakDuration string  `json:"batch_soak_duration"`
}

type NodePoolAutoConfigState struct {
	NetworkTags []NetworkTagsState `json:"network_tags"`
}

type NetworkTagsState struct {
	Tags []string `json:"tags"`
}

type NodePoolDefaultsState struct {
	NodeConfigDefaults []NodeConfigDefaultsState `json:"node_config_defaults"`
}

type NodeConfigDefaultsState struct {
	LoggingVariant string                              `json:"logging_variant"`
	GcfsConfig     []NodeConfigDefaultsGcfsConfigState `json:"gcfs_config"`
}

type NodeConfigDefaultsGcfsConfigState struct {
	Enabled bool `json:"enabled"`
}

type NotificationConfigState struct {
	Pubsub []PubsubState `json:"pubsub"`
}

type PubsubState struct {
	Enabled bool          `json:"enabled"`
	Topic   string        `json:"topic"`
	Filter  []FilterState `json:"filter"`
}

type FilterState struct {
	EventType []string `json:"event_type"`
}

type PodSecurityPolicyConfigState struct {
	Enabled bool `json:"enabled"`
}

type PrivateClusterConfigState struct {
	EnablePrivateEndpoint     bool                            `json:"enable_private_endpoint"`
	EnablePrivateNodes        bool                            `json:"enable_private_nodes"`
	MasterIpv4CidrBlock       string                          `json:"master_ipv4_cidr_block"`
	PeeringName               string                          `json:"peering_name"`
	PrivateEndpoint           string                          `json:"private_endpoint"`
	PrivateEndpointSubnetwork string                          `json:"private_endpoint_subnetwork"`
	PublicEndpoint            string                          `json:"public_endpoint"`
	MasterGlobalAccessConfig  []MasterGlobalAccessConfigState `json:"master_global_access_config"`
}

type MasterGlobalAccessConfigState struct {
	Enabled bool `json:"enabled"`
}

type ProtectConfigState struct {
	WorkloadVulnerabilityMode string                `json:"workload_vulnerability_mode"`
	WorkloadConfig            []WorkloadConfigState `json:"workload_config"`
}

type WorkloadConfigState struct {
	AuditMode string `json:"audit_mode"`
}

type ReleaseChannelState struct {
	Channel string `json:"channel"`
}

type ResourceUsageExportConfigState struct {
	EnableNetworkEgressMetering       bool                       `json:"enable_network_egress_metering"`
	EnableResourceConsumptionMetering bool                       `json:"enable_resource_consumption_metering"`
	BigqueryDestination               []BigqueryDestinationState `json:"bigquery_destination"`
}

type BigqueryDestinationState struct {
	DatasetId string `json:"dataset_id"`
}

type SecurityPostureConfigState struct {
	Mode              string `json:"mode"`
	VulnerabilityMode string `json:"vulnerability_mode"`
}

type ServiceExternalIpsConfigState struct {
	Enabled bool `json:"enabled"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type TpuConfigState struct {
	Enabled              bool   `json:"enabled"`
	Ipv4CidrBlock        string `json:"ipv4_cidr_block"`
	UseServiceNetworking bool   `json:"use_service_networking"`
}

type VerticalPodAutoscalingState struct {
	Enabled bool `json:"enabled"`
}

type WorkloadIdentityConfigState struct {
	WorkloadPool string `json:"workload_pool"`
}
