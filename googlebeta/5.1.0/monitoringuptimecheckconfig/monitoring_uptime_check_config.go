// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package monitoringuptimecheckconfig

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ContentMatchers struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Matcher: string, optional
	Matcher terra.StringValue `hcl:"matcher,attr"`
	// JsonPathMatcher: optional
	JsonPathMatcher *JsonPathMatcher `hcl:"json_path_matcher,block"`
}

type JsonPathMatcher struct {
	// JsonMatcher: string, optional
	JsonMatcher terra.StringValue `hcl:"json_matcher,attr"`
	// JsonPath: string, required
	JsonPath terra.StringValue `hcl:"json_path,attr" validate:"required"`
}

type HttpCheck struct {
	// Body: string, optional
	Body terra.StringValue `hcl:"body,attr"`
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// Headers: map of string, optional
	Headers terra.MapValue[terra.StringValue] `hcl:"headers,attr"`
	// MaskHeaders: bool, optional
	MaskHeaders terra.BoolValue `hcl:"mask_headers,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// RequestMethod: string, optional
	RequestMethod terra.StringValue `hcl:"request_method,attr"`
	// UseSsl: bool, optional
	UseSsl terra.BoolValue `hcl:"use_ssl,attr"`
	// ValidateSsl: bool, optional
	ValidateSsl terra.BoolValue `hcl:"validate_ssl,attr"`
	// AcceptedResponseStatusCodes: min=0
	AcceptedResponseStatusCodes []AcceptedResponseStatusCodes `hcl:"accepted_response_status_codes,block" validate:"min=0"`
	// AuthInfo: optional
	AuthInfo *AuthInfo `hcl:"auth_info,block"`
}

type AcceptedResponseStatusCodes struct {
	// StatusClass: string, optional
	StatusClass terra.StringValue `hcl:"status_class,attr"`
	// StatusValue: number, optional
	StatusValue terra.NumberValue `hcl:"status_value,attr"`
}

type AuthInfo struct {
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type MonitoredResource struct {
	// Labels: map of string, required
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ResourceGroup struct {
	// GroupId: string, optional
	GroupId terra.StringValue `hcl:"group_id,attr"`
	// ResourceType: string, optional
	ResourceType terra.StringValue `hcl:"resource_type,attr"`
}

type SyntheticMonitor struct {
	// CloudFunctionV2: required
	CloudFunctionV2 *CloudFunctionV2 `hcl:"cloud_function_v2,block" validate:"required"`
}

type CloudFunctionV2 struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type TcpCheck struct {
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ContentMatchersAttributes struct {
	ref terra.Reference
}

func (cm ContentMatchersAttributes) InternalRef() (terra.Reference, error) {
	return cm.ref, nil
}

func (cm ContentMatchersAttributes) InternalWithRef(ref terra.Reference) ContentMatchersAttributes {
	return ContentMatchersAttributes{ref: ref}
}

func (cm ContentMatchersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cm.ref.InternalTokens()
}

func (cm ContentMatchersAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("content"))
}

func (cm ContentMatchersAttributes) Matcher() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("matcher"))
}

func (cm ContentMatchersAttributes) JsonPathMatcher() terra.ListValue[JsonPathMatcherAttributes] {
	return terra.ReferenceAsList[JsonPathMatcherAttributes](cm.ref.Append("json_path_matcher"))
}

type JsonPathMatcherAttributes struct {
	ref terra.Reference
}

func (jpm JsonPathMatcherAttributes) InternalRef() (terra.Reference, error) {
	return jpm.ref, nil
}

func (jpm JsonPathMatcherAttributes) InternalWithRef(ref terra.Reference) JsonPathMatcherAttributes {
	return JsonPathMatcherAttributes{ref: ref}
}

func (jpm JsonPathMatcherAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jpm.ref.InternalTokens()
}

func (jpm JsonPathMatcherAttributes) JsonMatcher() terra.StringValue {
	return terra.ReferenceAsString(jpm.ref.Append("json_matcher"))
}

func (jpm JsonPathMatcherAttributes) JsonPath() terra.StringValue {
	return terra.ReferenceAsString(jpm.ref.Append("json_path"))
}

type HttpCheckAttributes struct {
	ref terra.Reference
}

func (hc HttpCheckAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc HttpCheckAttributes) InternalWithRef(ref terra.Reference) HttpCheckAttributes {
	return HttpCheckAttributes{ref: ref}
}

func (hc HttpCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc HttpCheckAttributes) Body() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("body"))
}

func (hc HttpCheckAttributes) ContentType() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("content_type"))
}

func (hc HttpCheckAttributes) Headers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hc.ref.Append("headers"))
}

func (hc HttpCheckAttributes) MaskHeaders() terra.BoolValue {
	return terra.ReferenceAsBool(hc.ref.Append("mask_headers"))
}

func (hc HttpCheckAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("path"))
}

func (hc HttpCheckAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("port"))
}

func (hc HttpCheckAttributes) RequestMethod() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("request_method"))
}

func (hc HttpCheckAttributes) UseSsl() terra.BoolValue {
	return terra.ReferenceAsBool(hc.ref.Append("use_ssl"))
}

func (hc HttpCheckAttributes) ValidateSsl() terra.BoolValue {
	return terra.ReferenceAsBool(hc.ref.Append("validate_ssl"))
}

func (hc HttpCheckAttributes) AcceptedResponseStatusCodes() terra.ListValue[AcceptedResponseStatusCodesAttributes] {
	return terra.ReferenceAsList[AcceptedResponseStatusCodesAttributes](hc.ref.Append("accepted_response_status_codes"))
}

func (hc HttpCheckAttributes) AuthInfo() terra.ListValue[AuthInfoAttributes] {
	return terra.ReferenceAsList[AuthInfoAttributes](hc.ref.Append("auth_info"))
}

type AcceptedResponseStatusCodesAttributes struct {
	ref terra.Reference
}

func (arsc AcceptedResponseStatusCodesAttributes) InternalRef() (terra.Reference, error) {
	return arsc.ref, nil
}

func (arsc AcceptedResponseStatusCodesAttributes) InternalWithRef(ref terra.Reference) AcceptedResponseStatusCodesAttributes {
	return AcceptedResponseStatusCodesAttributes{ref: ref}
}

func (arsc AcceptedResponseStatusCodesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return arsc.ref.InternalTokens()
}

func (arsc AcceptedResponseStatusCodesAttributes) StatusClass() terra.StringValue {
	return terra.ReferenceAsString(arsc.ref.Append("status_class"))
}

func (arsc AcceptedResponseStatusCodesAttributes) StatusValue() terra.NumberValue {
	return terra.ReferenceAsNumber(arsc.ref.Append("status_value"))
}

type AuthInfoAttributes struct {
	ref terra.Reference
}

func (ai AuthInfoAttributes) InternalRef() (terra.Reference, error) {
	return ai.ref, nil
}

func (ai AuthInfoAttributes) InternalWithRef(ref terra.Reference) AuthInfoAttributes {
	return AuthInfoAttributes{ref: ref}
}

func (ai AuthInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ai.ref.InternalTokens()
}

func (ai AuthInfoAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("password"))
}

func (ai AuthInfoAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("username"))
}

type MonitoredResourceAttributes struct {
	ref terra.Reference
}

func (mr MonitoredResourceAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr MonitoredResourceAttributes) InternalWithRef(ref terra.Reference) MonitoredResourceAttributes {
	return MonitoredResourceAttributes{ref: ref}
}

func (mr MonitoredResourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr MonitoredResourceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](mr.ref.Append("labels"))
}

func (mr MonitoredResourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("type"))
}

type ResourceGroupAttributes struct {
	ref terra.Reference
}

func (rg ResourceGroupAttributes) InternalRef() (terra.Reference, error) {
	return rg.ref, nil
}

func (rg ResourceGroupAttributes) InternalWithRef(ref terra.Reference) ResourceGroupAttributes {
	return ResourceGroupAttributes{ref: ref}
}

func (rg ResourceGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rg.ref.InternalTokens()
}

func (rg ResourceGroupAttributes) GroupId() terra.StringValue {
	return terra.ReferenceAsString(rg.ref.Append("group_id"))
}

func (rg ResourceGroupAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(rg.ref.Append("resource_type"))
}

type SyntheticMonitorAttributes struct {
	ref terra.Reference
}

func (sm SyntheticMonitorAttributes) InternalRef() (terra.Reference, error) {
	return sm.ref, nil
}

func (sm SyntheticMonitorAttributes) InternalWithRef(ref terra.Reference) SyntheticMonitorAttributes {
	return SyntheticMonitorAttributes{ref: ref}
}

func (sm SyntheticMonitorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sm.ref.InternalTokens()
}

func (sm SyntheticMonitorAttributes) CloudFunctionV2() terra.ListValue[CloudFunctionV2Attributes] {
	return terra.ReferenceAsList[CloudFunctionV2Attributes](sm.ref.Append("cloud_function_v2"))
}

type CloudFunctionV2Attributes struct {
	ref terra.Reference
}

func (cfv CloudFunctionV2Attributes) InternalRef() (terra.Reference, error) {
	return cfv.ref, nil
}

func (cfv CloudFunctionV2Attributes) InternalWithRef(ref terra.Reference) CloudFunctionV2Attributes {
	return CloudFunctionV2Attributes{ref: ref}
}

func (cfv CloudFunctionV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return cfv.ref.InternalTokens()
}

func (cfv CloudFunctionV2Attributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cfv.ref.Append("name"))
}

type TcpCheckAttributes struct {
	ref terra.Reference
}

func (tc TcpCheckAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TcpCheckAttributes) InternalWithRef(ref terra.Reference) TcpCheckAttributes {
	return TcpCheckAttributes{ref: ref}
}

func (tc TcpCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TcpCheckAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(tc.ref.Append("port"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ContentMatchersState struct {
	Content         string                 `json:"content"`
	Matcher         string                 `json:"matcher"`
	JsonPathMatcher []JsonPathMatcherState `json:"json_path_matcher"`
}

type JsonPathMatcherState struct {
	JsonMatcher string `json:"json_matcher"`
	JsonPath    string `json:"json_path"`
}

type HttpCheckState struct {
	Body                        string                             `json:"body"`
	ContentType                 string                             `json:"content_type"`
	Headers                     map[string]string                  `json:"headers"`
	MaskHeaders                 bool                               `json:"mask_headers"`
	Path                        string                             `json:"path"`
	Port                        float64                            `json:"port"`
	RequestMethod               string                             `json:"request_method"`
	UseSsl                      bool                               `json:"use_ssl"`
	ValidateSsl                 bool                               `json:"validate_ssl"`
	AcceptedResponseStatusCodes []AcceptedResponseStatusCodesState `json:"accepted_response_status_codes"`
	AuthInfo                    []AuthInfoState                    `json:"auth_info"`
}

type AcceptedResponseStatusCodesState struct {
	StatusClass string  `json:"status_class"`
	StatusValue float64 `json:"status_value"`
}

type AuthInfoState struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type MonitoredResourceState struct {
	Labels map[string]string `json:"labels"`
	Type   string            `json:"type"`
}

type ResourceGroupState struct {
	GroupId      string `json:"group_id"`
	ResourceType string `json:"resource_type"`
}

type SyntheticMonitorState struct {
	CloudFunctionV2 []CloudFunctionV2State `json:"cloud_function_v2"`
}

type CloudFunctionV2State struct {
	Name string `json:"name"`
}

type TcpCheckState struct {
	Port float64 `json:"port"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
