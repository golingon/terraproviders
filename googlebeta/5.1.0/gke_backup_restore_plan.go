// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googlebeta

import (
	"encoding/json"
	"fmt"
	gkebackuprestoreplan "github.com/golingon/terraproviders/googlebeta/5.1.0/gkebackuprestoreplan"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGkeBackupRestorePlan creates a new instance of [GkeBackupRestorePlan].
func NewGkeBackupRestorePlan(name string, args GkeBackupRestorePlanArgs) *GkeBackupRestorePlan {
	return &GkeBackupRestorePlan{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeBackupRestorePlan)(nil)

// GkeBackupRestorePlan represents the Terraform resource google_gke_backup_restore_plan.
type GkeBackupRestorePlan struct {
	Name      string
	Args      GkeBackupRestorePlanArgs
	state     *gkeBackupRestorePlanState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GkeBackupRestorePlan].
func (gbrp *GkeBackupRestorePlan) Type() string {
	return "google_gke_backup_restore_plan"
}

// LocalName returns the local name for [GkeBackupRestorePlan].
func (gbrp *GkeBackupRestorePlan) LocalName() string {
	return gbrp.Name
}

// Configuration returns the configuration (args) for [GkeBackupRestorePlan].
func (gbrp *GkeBackupRestorePlan) Configuration() interface{} {
	return gbrp.Args
}

// DependOn is used for other resources to depend on [GkeBackupRestorePlan].
func (gbrp *GkeBackupRestorePlan) DependOn() terra.Reference {
	return terra.ReferenceResource(gbrp)
}

// Dependencies returns the list of resources [GkeBackupRestorePlan] depends_on.
func (gbrp *GkeBackupRestorePlan) Dependencies() terra.Dependencies {
	return gbrp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GkeBackupRestorePlan].
func (gbrp *GkeBackupRestorePlan) LifecycleManagement() *terra.Lifecycle {
	return gbrp.Lifecycle
}

// Attributes returns the attributes for [GkeBackupRestorePlan].
func (gbrp *GkeBackupRestorePlan) Attributes() gkeBackupRestorePlanAttributes {
	return gkeBackupRestorePlanAttributes{ref: terra.ReferenceResource(gbrp)}
}

// ImportState imports the given attribute values into [GkeBackupRestorePlan]'s state.
func (gbrp *GkeBackupRestorePlan) ImportState(av io.Reader) error {
	gbrp.state = &gkeBackupRestorePlanState{}
	if err := json.NewDecoder(av).Decode(gbrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbrp.Type(), gbrp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GkeBackupRestorePlan] has state.
func (gbrp *GkeBackupRestorePlan) State() (*gkeBackupRestorePlanState, bool) {
	return gbrp.state, gbrp.state != nil
}

// StateMust returns the state for [GkeBackupRestorePlan]. Panics if the state is nil.
func (gbrp *GkeBackupRestorePlan) StateMust() *gkeBackupRestorePlanState {
	if gbrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbrp.Type(), gbrp.LocalName()))
	}
	return gbrp.state
}

// GkeBackupRestorePlanArgs contains the configurations for google_gke_backup_restore_plan.
type GkeBackupRestorePlanArgs struct {
	// BackupPlan: string, required
	BackupPlan terra.StringValue `hcl:"backup_plan,attr" validate:"required"`
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RestoreConfig: required
	RestoreConfig *gkebackuprestoreplan.RestoreConfig `hcl:"restore_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *gkebackuprestoreplan.Timeouts `hcl:"timeouts,block"`
}
type gkeBackupRestorePlanAttributes struct {
	ref terra.Reference
}

// BackupPlan returns a reference to field backup_plan of google_gke_backup_restore_plan.
func (gbrp gkeBackupRestorePlanAttributes) BackupPlan() terra.StringValue {
	return terra.ReferenceAsString(gbrp.ref.Append("backup_plan"))
}

// Cluster returns a reference to field cluster of google_gke_backup_restore_plan.
func (gbrp gkeBackupRestorePlanAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(gbrp.ref.Append("cluster"))
}

// Description returns a reference to field description of google_gke_backup_restore_plan.
func (gbrp gkeBackupRestorePlanAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gbrp.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_gke_backup_restore_plan.
func (gbrp gkeBackupRestorePlanAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbrp.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_gke_backup_restore_plan.
func (gbrp gkeBackupRestorePlanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbrp.ref.Append("id"))
}

// Labels returns a reference to field labels of google_gke_backup_restore_plan.
func (gbrp gkeBackupRestorePlanAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbrp.ref.Append("labels"))
}

// Location returns a reference to field location of google_gke_backup_restore_plan.
func (gbrp gkeBackupRestorePlanAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbrp.ref.Append("location"))
}

// Name returns a reference to field name of google_gke_backup_restore_plan.
func (gbrp gkeBackupRestorePlanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbrp.ref.Append("name"))
}

// Project returns a reference to field project of google_gke_backup_restore_plan.
func (gbrp gkeBackupRestorePlanAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbrp.ref.Append("project"))
}

// State returns a reference to field state of google_gke_backup_restore_plan.
func (gbrp gkeBackupRestorePlanAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gbrp.ref.Append("state"))
}

// StateReason returns a reference to field state_reason of google_gke_backup_restore_plan.
func (gbrp gkeBackupRestorePlanAttributes) StateReason() terra.StringValue {
	return terra.ReferenceAsString(gbrp.ref.Append("state_reason"))
}

// TerraformLabels returns a reference to field terraform_labels of google_gke_backup_restore_plan.
func (gbrp gkeBackupRestorePlanAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbrp.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_gke_backup_restore_plan.
func (gbrp gkeBackupRestorePlanAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gbrp.ref.Append("uid"))
}

func (gbrp gkeBackupRestorePlanAttributes) RestoreConfig() terra.ListValue[gkebackuprestoreplan.RestoreConfigAttributes] {
	return terra.ReferenceAsList[gkebackuprestoreplan.RestoreConfigAttributes](gbrp.ref.Append("restore_config"))
}

func (gbrp gkeBackupRestorePlanAttributes) Timeouts() gkebackuprestoreplan.TimeoutsAttributes {
	return terra.ReferenceAsSingle[gkebackuprestoreplan.TimeoutsAttributes](gbrp.ref.Append("timeouts"))
}

type gkeBackupRestorePlanState struct {
	BackupPlan      string                                    `json:"backup_plan"`
	Cluster         string                                    `json:"cluster"`
	Description     string                                    `json:"description"`
	EffectiveLabels map[string]string                         `json:"effective_labels"`
	Id              string                                    `json:"id"`
	Labels          map[string]string                         `json:"labels"`
	Location        string                                    `json:"location"`
	Name            string                                    `json:"name"`
	Project         string                                    `json:"project"`
	State           string                                    `json:"state"`
	StateReason     string                                    `json:"state_reason"`
	TerraformLabels map[string]string                         `json:"terraform_labels"`
	Uid             string                                    `json:"uid"`
	RestoreConfig   []gkebackuprestoreplan.RestoreConfigState `json:"restore_config"`
	Timeouts        *gkebackuprestoreplan.TimeoutsState       `json:"timeouts"`
}
