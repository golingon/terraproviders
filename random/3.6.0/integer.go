// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package random

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewInteger creates a new instance of [Integer].
func NewInteger(name string, args IntegerArgs) *Integer {
	return &Integer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Integer)(nil)

// Integer represents the Terraform resource random_integer.
type Integer struct {
	Name      string
	Args      IntegerArgs
	state     *integerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Integer].
func (i *Integer) Type() string {
	return "random_integer"
}

// LocalName returns the local name for [Integer].
func (i *Integer) LocalName() string {
	return i.Name
}

// Configuration returns the configuration (args) for [Integer].
func (i *Integer) Configuration() interface{} {
	return i.Args
}

// DependOn is used for other resources to depend on [Integer].
func (i *Integer) DependOn() terra.Reference {
	return terra.ReferenceResource(i)
}

// Dependencies returns the list of resources [Integer] depends_on.
func (i *Integer) Dependencies() terra.Dependencies {
	return i.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Integer].
func (i *Integer) LifecycleManagement() *terra.Lifecycle {
	return i.Lifecycle
}

// Attributes returns the attributes for [Integer].
func (i *Integer) Attributes() integerAttributes {
	return integerAttributes{ref: terra.ReferenceResource(i)}
}

// ImportState imports the given attribute values into [Integer]'s state.
func (i *Integer) ImportState(av io.Reader) error {
	i.state = &integerState{}
	if err := json.NewDecoder(av).Decode(i.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", i.Type(), i.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Integer] has state.
func (i *Integer) State() (*integerState, bool) {
	return i.state, i.state != nil
}

// StateMust returns the state for [Integer]. Panics if the state is nil.
func (i *Integer) StateMust() *integerState {
	if i.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", i.Type(), i.LocalName()))
	}
	return i.state
}

// IntegerArgs contains the configurations for random_integer.
type IntegerArgs struct {
	// Keepers: map of string, optional
	Keepers terra.MapValue[terra.StringValue] `hcl:"keepers,attr"`
	// Max: number, required
	Max terra.NumberValue `hcl:"max,attr" validate:"required"`
	// Min: number, required
	Min terra.NumberValue `hcl:"min,attr" validate:"required"`
	// Seed: string, optional
	Seed terra.StringValue `hcl:"seed,attr"`
}
type integerAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of random_integer.
func (i integerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("id"))
}

// Keepers returns a reference to field keepers of random_integer.
func (i integerAttributes) Keepers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](i.ref.Append("keepers"))
}

// Max returns a reference to field max of random_integer.
func (i integerAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("max"))
}

// Min returns a reference to field min of random_integer.
func (i integerAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("min"))
}

// Result returns a reference to field result of random_integer.
func (i integerAttributes) Result() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("result"))
}

// Seed returns a reference to field seed of random_integer.
func (i integerAttributes) Seed() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("seed"))
}

type integerState struct {
	Id      string            `json:"id"`
	Keepers map[string]string `json:"keepers"`
	Max     float64           `json:"max"`
	Min     float64           `json:"min"`
	Result  float64           `json:"result"`
	Seed    string            `json:"seed"`
}
