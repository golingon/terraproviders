// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package random

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewId creates a new instance of [Id].
func NewId(name string, args IdArgs) *Id {
	return &Id{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Id)(nil)

// Id represents the Terraform resource random_id.
type Id struct {
	Name      string
	Args      IdArgs
	state     *idState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Id].
func (i *Id) Type() string {
	return "random_id"
}

// LocalName returns the local name for [Id].
func (i *Id) LocalName() string {
	return i.Name
}

// Configuration returns the configuration (args) for [Id].
func (i *Id) Configuration() interface{} {
	return i.Args
}

// DependOn is used for other resources to depend on [Id].
func (i *Id) DependOn() terra.Reference {
	return terra.ReferenceResource(i)
}

// Dependencies returns the list of resources [Id] depends_on.
func (i *Id) Dependencies() terra.Dependencies {
	return i.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Id].
func (i *Id) LifecycleManagement() *terra.Lifecycle {
	return i.Lifecycle
}

// Attributes returns the attributes for [Id].
func (i *Id) Attributes() idAttributes {
	return idAttributes{ref: terra.ReferenceResource(i)}
}

// ImportState imports the given attribute values into [Id]'s state.
func (i *Id) ImportState(av io.Reader) error {
	i.state = &idState{}
	if err := json.NewDecoder(av).Decode(i.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", i.Type(), i.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Id] has state.
func (i *Id) State() (*idState, bool) {
	return i.state, i.state != nil
}

// StateMust returns the state for [Id]. Panics if the state is nil.
func (i *Id) StateMust() *idState {
	if i.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", i.Type(), i.LocalName()))
	}
	return i.state
}

// IdArgs contains the configurations for random_id.
type IdArgs struct {
	// ByteLength: number, required
	ByteLength terra.NumberValue `hcl:"byte_length,attr" validate:"required"`
	// Keepers: map of string, optional
	Keepers terra.MapValue[terra.StringValue] `hcl:"keepers,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
}
type idAttributes struct {
	ref terra.Reference
}

// B64Std returns a reference to field b64_std of random_id.
func (i idAttributes) B64Std() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("b64_std"))
}

// B64Url returns a reference to field b64_url of random_id.
func (i idAttributes) B64Url() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("b64_url"))
}

// ByteLength returns a reference to field byte_length of random_id.
func (i idAttributes) ByteLength() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("byte_length"))
}

// Dec returns a reference to field dec of random_id.
func (i idAttributes) Dec() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("dec"))
}

// Hex returns a reference to field hex of random_id.
func (i idAttributes) Hex() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("hex"))
}

// Id returns a reference to field id of random_id.
func (i idAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("id"))
}

// Keepers returns a reference to field keepers of random_id.
func (i idAttributes) Keepers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](i.ref.Append("keepers"))
}

// Prefix returns a reference to field prefix of random_id.
func (i idAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("prefix"))
}

type idState struct {
	B64Std     string            `json:"b64_std"`
	B64Url     string            `json:"b64_url"`
	ByteLength float64           `json:"byte_length"`
	Dec        string            `json:"dec"`
	Hex        string            `json:"hex"`
	Id         string            `json:"id"`
	Keepers    map[string]string `json:"keepers"`
	Prefix     string            `json:"prefix"`
}
