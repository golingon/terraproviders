// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package random

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewShuffle creates a new instance of [Shuffle].
func NewShuffle(name string, args ShuffleArgs) *Shuffle {
	return &Shuffle{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Shuffle)(nil)

// Shuffle represents the Terraform resource random_shuffle.
type Shuffle struct {
	Name      string
	Args      ShuffleArgs
	state     *shuffleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Shuffle].
func (s *Shuffle) Type() string {
	return "random_shuffle"
}

// LocalName returns the local name for [Shuffle].
func (s *Shuffle) LocalName() string {
	return s.Name
}

// Configuration returns the configuration (args) for [Shuffle].
func (s *Shuffle) Configuration() interface{} {
	return s.Args
}

// DependOn is used for other resources to depend on [Shuffle].
func (s *Shuffle) DependOn() terra.Reference {
	return terra.ReferenceResource(s)
}

// Dependencies returns the list of resources [Shuffle] depends_on.
func (s *Shuffle) Dependencies() terra.Dependencies {
	return s.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Shuffle].
func (s *Shuffle) LifecycleManagement() *terra.Lifecycle {
	return s.Lifecycle
}

// Attributes returns the attributes for [Shuffle].
func (s *Shuffle) Attributes() shuffleAttributes {
	return shuffleAttributes{ref: terra.ReferenceResource(s)}
}

// ImportState imports the given attribute values into [Shuffle]'s state.
func (s *Shuffle) ImportState(av io.Reader) error {
	s.state = &shuffleState{}
	if err := json.NewDecoder(av).Decode(s.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", s.Type(), s.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Shuffle] has state.
func (s *Shuffle) State() (*shuffleState, bool) {
	return s.state, s.state != nil
}

// StateMust returns the state for [Shuffle]. Panics if the state is nil.
func (s *Shuffle) StateMust() *shuffleState {
	if s.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", s.Type(), s.LocalName()))
	}
	return s.state
}

// ShuffleArgs contains the configurations for random_shuffle.
type ShuffleArgs struct {
	// Input: list of string, required
	Input terra.ListValue[terra.StringValue] `hcl:"input,attr" validate:"required"`
	// Keepers: map of string, optional
	Keepers terra.MapValue[terra.StringValue] `hcl:"keepers,attr"`
	// ResultCount: number, optional
	ResultCount terra.NumberValue `hcl:"result_count,attr"`
	// Seed: string, optional
	Seed terra.StringValue `hcl:"seed,attr"`
}
type shuffleAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of random_shuffle.
func (s shuffleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("id"))
}

// Input returns a reference to field input of random_shuffle.
func (s shuffleAttributes) Input() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("input"))
}

// Keepers returns a reference to field keepers of random_shuffle.
func (s shuffleAttributes) Keepers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("keepers"))
}

// Result returns a reference to field result of random_shuffle.
func (s shuffleAttributes) Result() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("result"))
}

// ResultCount returns a reference to field result_count of random_shuffle.
func (s shuffleAttributes) ResultCount() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("result_count"))
}

// Seed returns a reference to field seed of random_shuffle.
func (s shuffleAttributes) Seed() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("seed"))
}

type shuffleState struct {
	Id          string            `json:"id"`
	Input       []string          `json:"input"`
	Keepers     map[string]string `json:"keepers"`
	Result      []string          `json:"result"`
	ResultCount float64           `json:"result_count"`
	Seed        string            `json:"seed"`
}
