// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package random

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewBytes creates a new instance of [Bytes].
func NewBytes(name string, args BytesArgs) *Bytes {
	return &Bytes{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Bytes)(nil)

// Bytes represents the Terraform resource random_bytes.
type Bytes struct {
	Name      string
	Args      BytesArgs
	state     *bytesState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Bytes].
func (b *Bytes) Type() string {
	return "random_bytes"
}

// LocalName returns the local name for [Bytes].
func (b *Bytes) LocalName() string {
	return b.Name
}

// Configuration returns the configuration (args) for [Bytes].
func (b *Bytes) Configuration() interface{} {
	return b.Args
}

// DependOn is used for other resources to depend on [Bytes].
func (b *Bytes) DependOn() terra.Reference {
	return terra.ReferenceResource(b)
}

// Dependencies returns the list of resources [Bytes] depends_on.
func (b *Bytes) Dependencies() terra.Dependencies {
	return b.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Bytes].
func (b *Bytes) LifecycleManagement() *terra.Lifecycle {
	return b.Lifecycle
}

// Attributes returns the attributes for [Bytes].
func (b *Bytes) Attributes() bytesAttributes {
	return bytesAttributes{ref: terra.ReferenceResource(b)}
}

// ImportState imports the given attribute values into [Bytes]'s state.
func (b *Bytes) ImportState(av io.Reader) error {
	b.state = &bytesState{}
	if err := json.NewDecoder(av).Decode(b.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", b.Type(), b.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Bytes] has state.
func (b *Bytes) State() (*bytesState, bool) {
	return b.state, b.state != nil
}

// StateMust returns the state for [Bytes]. Panics if the state is nil.
func (b *Bytes) StateMust() *bytesState {
	if b.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", b.Type(), b.LocalName()))
	}
	return b.state
}

// BytesArgs contains the configurations for random_bytes.
type BytesArgs struct {
	// Keepers: map of string, optional
	Keepers terra.MapValue[terra.StringValue] `hcl:"keepers,attr"`
	// Length: number, required
	Length terra.NumberValue `hcl:"length,attr" validate:"required"`
}
type bytesAttributes struct {
	ref terra.Reference
}

// Base64 returns a reference to field base64 of random_bytes.
func (b bytesAttributes) Base64() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("base64"))
}

// Hex returns a reference to field hex of random_bytes.
func (b bytesAttributes) Hex() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("hex"))
}

// Keepers returns a reference to field keepers of random_bytes.
func (b bytesAttributes) Keepers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](b.ref.Append("keepers"))
}

// Length returns a reference to field length of random_bytes.
func (b bytesAttributes) Length() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("length"))
}

type bytesState struct {
	Base64  string            `json:"base64"`
	Hex     string            `json:"hex"`
	Keepers map[string]string `json:"keepers"`
	Length  float64           `json:"length"`
}
