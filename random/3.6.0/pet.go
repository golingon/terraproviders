// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package random

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewPet creates a new instance of [Pet].
func NewPet(name string, args PetArgs) *Pet {
	return &Pet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Pet)(nil)

// Pet represents the Terraform resource random_pet.
type Pet struct {
	Name      string
	Args      PetArgs
	state     *petState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Pet].
func (p *Pet) Type() string {
	return "random_pet"
}

// LocalName returns the local name for [Pet].
func (p *Pet) LocalName() string {
	return p.Name
}

// Configuration returns the configuration (args) for [Pet].
func (p *Pet) Configuration() interface{} {
	return p.Args
}

// DependOn is used for other resources to depend on [Pet].
func (p *Pet) DependOn() terra.Reference {
	return terra.ReferenceResource(p)
}

// Dependencies returns the list of resources [Pet] depends_on.
func (p *Pet) Dependencies() terra.Dependencies {
	return p.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Pet].
func (p *Pet) LifecycleManagement() *terra.Lifecycle {
	return p.Lifecycle
}

// Attributes returns the attributes for [Pet].
func (p *Pet) Attributes() petAttributes {
	return petAttributes{ref: terra.ReferenceResource(p)}
}

// ImportState imports the given attribute values into [Pet]'s state.
func (p *Pet) ImportState(av io.Reader) error {
	p.state = &petState{}
	if err := json.NewDecoder(av).Decode(p.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", p.Type(), p.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Pet] has state.
func (p *Pet) State() (*petState, bool) {
	return p.state, p.state != nil
}

// StateMust returns the state for [Pet]. Panics if the state is nil.
func (p *Pet) StateMust() *petState {
	if p.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", p.Type(), p.LocalName()))
	}
	return p.state
}

// PetArgs contains the configurations for random_pet.
type PetArgs struct {
	// Keepers: map of string, optional
	Keepers terra.MapValue[terra.StringValue] `hcl:"keepers,attr"`
	// Length: number, optional
	Length terra.NumberValue `hcl:"length,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Separator: string, optional
	Separator terra.StringValue `hcl:"separator,attr"`
}
type petAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of random_pet.
func (p petAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("id"))
}

// Keepers returns a reference to field keepers of random_pet.
func (p petAttributes) Keepers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](p.ref.Append("keepers"))
}

// Length returns a reference to field length of random_pet.
func (p petAttributes) Length() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("length"))
}

// Prefix returns a reference to field prefix of random_pet.
func (p petAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("prefix"))
}

// Separator returns a reference to field separator of random_pet.
func (p petAttributes) Separator() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("separator"))
}

type petState struct {
	Id        string            `json:"id"`
	Keepers   map[string]string `json:"keepers"`
	Length    float64           `json:"length"`
	Prefix    string            `json:"prefix"`
	Separator string            `json:"separator"`
}
