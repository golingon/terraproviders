// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package random_shuffle

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource random_shuffle.
type Resource struct {
	Name      string
	Args      Args
	state     *randomShuffleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (rs *Resource) Type() string {
	return "random_shuffle"
}

// LocalName returns the local name for [Resource].
func (rs *Resource) LocalName() string {
	return rs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (rs *Resource) Configuration() interface{} {
	return rs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (rs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(rs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (rs *Resource) Dependencies() terra.Dependencies {
	return rs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (rs *Resource) LifecycleManagement() *terra.Lifecycle {
	return rs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (rs *Resource) Attributes() randomShuffleAttributes {
	return randomShuffleAttributes{ref: terra.ReferenceResource(rs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (rs *Resource) ImportState(state io.Reader) error {
	rs.state = &randomShuffleState{}
	if err := json.NewDecoder(state).Decode(rs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rs.Type(), rs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (rs *Resource) State() (*randomShuffleState, bool) {
	return rs.state, rs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (rs *Resource) StateMust() *randomShuffleState {
	if rs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rs.Type(), rs.LocalName()))
	}
	return rs.state
}

// Args contains the configurations for random_shuffle.
type Args struct {
	// Input: list of string, required
	Input terra.ListValue[terra.StringValue] `hcl:"input,attr" validate:"required"`
	// Keepers: map of string, optional
	Keepers terra.MapValue[terra.StringValue] `hcl:"keepers,attr"`
	// ResultCount: number, optional
	ResultCount terra.NumberValue `hcl:"result_count,attr"`
	// Seed: string, optional
	Seed terra.StringValue `hcl:"seed,attr"`
}

type randomShuffleAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of random_shuffle.
func (rs randomShuffleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("id"))
}

// Input returns a reference to field input of random_shuffle.
func (rs randomShuffleAttributes) Input() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rs.ref.Append("input"))
}

// Keepers returns a reference to field keepers of random_shuffle.
func (rs randomShuffleAttributes) Keepers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rs.ref.Append("keepers"))
}

// Result returns a reference to field result of random_shuffle.
func (rs randomShuffleAttributes) Result() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rs.ref.Append("result"))
}

// ResultCount returns a reference to field result_count of random_shuffle.
func (rs randomShuffleAttributes) ResultCount() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("result_count"))
}

// Seed returns a reference to field seed of random_shuffle.
func (rs randomShuffleAttributes) Seed() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("seed"))
}

type randomShuffleState struct {
	Id          string            `json:"id"`
	Input       []string          `json:"input"`
	Keepers     map[string]string `json:"keepers"`
	Result      []string          `json:"result"`
	ResultCount float64           `json:"result_count"`
	Seed        string            `json:"seed"`
}
