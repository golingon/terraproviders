// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package random_uuid

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource random_uuid.
type Resource struct {
	Name      string
	Args      Args
	state     *randomUuidState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ru *Resource) Type() string {
	return "random_uuid"
}

// LocalName returns the local name for [Resource].
func (ru *Resource) LocalName() string {
	return ru.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ru *Resource) Configuration() interface{} {
	return ru.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ru *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ru)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ru *Resource) Dependencies() terra.Dependencies {
	return ru.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ru *Resource) LifecycleManagement() *terra.Lifecycle {
	return ru.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ru *Resource) Attributes() randomUuidAttributes {
	return randomUuidAttributes{ref: terra.ReferenceResource(ru)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ru *Resource) ImportState(state io.Reader) error {
	ru.state = &randomUuidState{}
	if err := json.NewDecoder(state).Decode(ru.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ru.Type(), ru.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ru *Resource) State() (*randomUuidState, bool) {
	return ru.state, ru.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ru *Resource) StateMust() *randomUuidState {
	if ru.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ru.Type(), ru.LocalName()))
	}
	return ru.state
}

// Args contains the configurations for random_uuid.
type Args struct {
	// Keepers: map of string, optional
	Keepers terra.MapValue[terra.StringValue] `hcl:"keepers,attr"`
}

type randomUuidAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of random_uuid.
func (ru randomUuidAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ru.ref.Append("id"))
}

// Keepers returns a reference to field keepers of random_uuid.
func (ru randomUuidAttributes) Keepers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ru.ref.Append("keepers"))
}

// Result returns a reference to field result of random_uuid.
func (ru randomUuidAttributes) Result() terra.StringValue {
	return terra.ReferenceAsString(ru.ref.Append("result"))
}

type randomUuidState struct {
	Id      string            `json:"id"`
	Keepers map[string]string `json:"keepers"`
	Result  string            `json:"result"`
}
