// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package random_pet

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource random_pet.
type Resource struct {
	Name      string
	Args      Args
	state     *randomPetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (rp *Resource) Type() string {
	return "random_pet"
}

// LocalName returns the local name for [Resource].
func (rp *Resource) LocalName() string {
	return rp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (rp *Resource) Configuration() interface{} {
	return rp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (rp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(rp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (rp *Resource) Dependencies() terra.Dependencies {
	return rp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (rp *Resource) LifecycleManagement() *terra.Lifecycle {
	return rp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (rp *Resource) Attributes() randomPetAttributes {
	return randomPetAttributes{ref: terra.ReferenceResource(rp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (rp *Resource) ImportState(state io.Reader) error {
	rp.state = &randomPetState{}
	if err := json.NewDecoder(state).Decode(rp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rp.Type(), rp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (rp *Resource) State() (*randomPetState, bool) {
	return rp.state, rp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (rp *Resource) StateMust() *randomPetState {
	if rp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rp.Type(), rp.LocalName()))
	}
	return rp.state
}

// Args contains the configurations for random_pet.
type Args struct {
	// Keepers: map of string, optional
	Keepers terra.MapValue[terra.StringValue] `hcl:"keepers,attr"`
	// Length: number, optional
	Length terra.NumberValue `hcl:"length,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Separator: string, optional
	Separator terra.StringValue `hcl:"separator,attr"`
}

type randomPetAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of random_pet.
func (rp randomPetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("id"))
}

// Keepers returns a reference to field keepers of random_pet.
func (rp randomPetAttributes) Keepers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rp.ref.Append("keepers"))
}

// Length returns a reference to field length of random_pet.
func (rp randomPetAttributes) Length() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("length"))
}

// Prefix returns a reference to field prefix of random_pet.
func (rp randomPetAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("prefix"))
}

// Separator returns a reference to field separator of random_pet.
func (rp randomPetAttributes) Separator() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("separator"))
}

type randomPetState struct {
	Id        string            `json:"id"`
	Keepers   map[string]string `json:"keepers"`
	Length    float64           `json:"length"`
	Prefix    string            `json:"prefix"`
	Separator string            `json:"separator"`
}
