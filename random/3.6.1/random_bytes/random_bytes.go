// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package random_bytes

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource random_bytes.
type Resource struct {
	Name      string
	Args      Args
	state     *randomBytesState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (rb *Resource) Type() string {
	return "random_bytes"
}

// LocalName returns the local name for [Resource].
func (rb *Resource) LocalName() string {
	return rb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (rb *Resource) Configuration() interface{} {
	return rb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (rb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(rb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (rb *Resource) Dependencies() terra.Dependencies {
	return rb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (rb *Resource) LifecycleManagement() *terra.Lifecycle {
	return rb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (rb *Resource) Attributes() randomBytesAttributes {
	return randomBytesAttributes{ref: terra.ReferenceResource(rb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (rb *Resource) ImportState(state io.Reader) error {
	rb.state = &randomBytesState{}
	if err := json.NewDecoder(state).Decode(rb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rb.Type(), rb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (rb *Resource) State() (*randomBytesState, bool) {
	return rb.state, rb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (rb *Resource) StateMust() *randomBytesState {
	if rb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rb.Type(), rb.LocalName()))
	}
	return rb.state
}

// Args contains the configurations for random_bytes.
type Args struct {
	// Keepers: map of string, optional
	Keepers terra.MapValue[terra.StringValue] `hcl:"keepers,attr"`
	// Length: number, required
	Length terra.NumberValue `hcl:"length,attr" validate:"required"`
}

type randomBytesAttributes struct {
	ref terra.Reference
}

// Base64 returns a reference to field base64 of random_bytes.
func (rb randomBytesAttributes) Base64() terra.StringValue {
	return terra.ReferenceAsString(rb.ref.Append("base64"))
}

// Hex returns a reference to field hex of random_bytes.
func (rb randomBytesAttributes) Hex() terra.StringValue {
	return terra.ReferenceAsString(rb.ref.Append("hex"))
}

// Keepers returns a reference to field keepers of random_bytes.
func (rb randomBytesAttributes) Keepers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rb.ref.Append("keepers"))
}

// Length returns a reference to field length of random_bytes.
func (rb randomBytesAttributes) Length() terra.NumberValue {
	return terra.ReferenceAsNumber(rb.ref.Append("length"))
}

type randomBytesState struct {
	Base64  string            `json:"base64"`
	Hex     string            `json:"hex"`
	Keepers map[string]string `json:"keepers"`
	Length  float64           `json:"length"`
}
