// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package random_id

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource random_id.
type Resource struct {
	Name      string
	Args      Args
	state     *randomIdState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ri *Resource) Type() string {
	return "random_id"
}

// LocalName returns the local name for [Resource].
func (ri *Resource) LocalName() string {
	return ri.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ri *Resource) Configuration() interface{} {
	return ri.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ri *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ri)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ri *Resource) Dependencies() terra.Dependencies {
	return ri.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ri *Resource) LifecycleManagement() *terra.Lifecycle {
	return ri.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ri *Resource) Attributes() randomIdAttributes {
	return randomIdAttributes{ref: terra.ReferenceResource(ri)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ri *Resource) ImportState(state io.Reader) error {
	ri.state = &randomIdState{}
	if err := json.NewDecoder(state).Decode(ri.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ri.Type(), ri.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ri *Resource) State() (*randomIdState, bool) {
	return ri.state, ri.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ri *Resource) StateMust() *randomIdState {
	if ri.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ri.Type(), ri.LocalName()))
	}
	return ri.state
}

// Args contains the configurations for random_id.
type Args struct {
	// ByteLength: number, required
	ByteLength terra.NumberValue `hcl:"byte_length,attr" validate:"required"`
	// Keepers: map of string, optional
	Keepers terra.MapValue[terra.StringValue] `hcl:"keepers,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type randomIdAttributes struct {
	ref terra.Reference
}

// B64Std returns a reference to field b64_std of random_id.
func (ri randomIdAttributes) B64Std() terra.StringValue {
	return terra.ReferenceAsString(ri.ref.Append("b64_std"))
}

// B64Url returns a reference to field b64_url of random_id.
func (ri randomIdAttributes) B64Url() terra.StringValue {
	return terra.ReferenceAsString(ri.ref.Append("b64_url"))
}

// ByteLength returns a reference to field byte_length of random_id.
func (ri randomIdAttributes) ByteLength() terra.NumberValue {
	return terra.ReferenceAsNumber(ri.ref.Append("byte_length"))
}

// Dec returns a reference to field dec of random_id.
func (ri randomIdAttributes) Dec() terra.StringValue {
	return terra.ReferenceAsString(ri.ref.Append("dec"))
}

// Hex returns a reference to field hex of random_id.
func (ri randomIdAttributes) Hex() terra.StringValue {
	return terra.ReferenceAsString(ri.ref.Append("hex"))
}

// Id returns a reference to field id of random_id.
func (ri randomIdAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ri.ref.Append("id"))
}

// Keepers returns a reference to field keepers of random_id.
func (ri randomIdAttributes) Keepers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ri.ref.Append("keepers"))
}

// Prefix returns a reference to field prefix of random_id.
func (ri randomIdAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(ri.ref.Append("prefix"))
}

type randomIdState struct {
	B64Std     string            `json:"b64_std"`
	B64Url     string            `json:"b64_url"`
	ByteLength float64           `json:"byte_length"`
	Dec        string            `json:"dec"`
	Hex        string            `json:"hex"`
	Id         string            `json:"id"`
	Keepers    map[string]string `json:"keepers"`
	Prefix     string            `json:"prefix"`
}
