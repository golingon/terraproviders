// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package random

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewUuid creates a new instance of [Uuid].
func NewUuid(name string, args UuidArgs) *Uuid {
	return &Uuid{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Uuid)(nil)

// Uuid represents the Terraform resource random_uuid.
type Uuid struct {
	Name      string
	Args      UuidArgs
	state     *uuidState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Uuid].
func (u *Uuid) Type() string {
	return "random_uuid"
}

// LocalName returns the local name for [Uuid].
func (u *Uuid) LocalName() string {
	return u.Name
}

// Configuration returns the configuration (args) for [Uuid].
func (u *Uuid) Configuration() interface{} {
	return u.Args
}

// DependOn is used for other resources to depend on [Uuid].
func (u *Uuid) DependOn() terra.Reference {
	return terra.ReferenceResource(u)
}

// Dependencies returns the list of resources [Uuid] depends_on.
func (u *Uuid) Dependencies() terra.Dependencies {
	return u.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Uuid].
func (u *Uuid) LifecycleManagement() *terra.Lifecycle {
	return u.Lifecycle
}

// Attributes returns the attributes for [Uuid].
func (u *Uuid) Attributes() uuidAttributes {
	return uuidAttributes{ref: terra.ReferenceResource(u)}
}

// ImportState imports the given attribute values into [Uuid]'s state.
func (u *Uuid) ImportState(av io.Reader) error {
	u.state = &uuidState{}
	if err := json.NewDecoder(av).Decode(u.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", u.Type(), u.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Uuid] has state.
func (u *Uuid) State() (*uuidState, bool) {
	return u.state, u.state != nil
}

// StateMust returns the state for [Uuid]. Panics if the state is nil.
func (u *Uuid) StateMust() *uuidState {
	if u.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", u.Type(), u.LocalName()))
	}
	return u.state
}

// UuidArgs contains the configurations for random_uuid.
type UuidArgs struct {
	// Keepers: map of string, optional
	Keepers terra.MapValue[terra.StringValue] `hcl:"keepers,attr"`
}
type uuidAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of random_uuid.
func (u uuidAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("id"))
}

// Keepers returns a reference to field keepers of random_uuid.
func (u uuidAttributes) Keepers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](u.ref.Append("keepers"))
}

// Result returns a reference to field result of random_uuid.
func (u uuidAttributes) Result() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("result"))
}

type uuidState struct {
	Id      string            `json:"id"`
	Keepers map[string]string `json:"keepers"`
	Result  string            `json:"result"`
}
