// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_virtual_machine_scale_set

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_virtual_machine_scale_set.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackVirtualMachineScaleSetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avmss *Resource) Type() string {
	return "azurestack_virtual_machine_scale_set"
}

// LocalName returns the local name for [Resource].
func (avmss *Resource) LocalName() string {
	return avmss.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avmss *Resource) Configuration() interface{} {
	return avmss.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avmss *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avmss)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avmss *Resource) Dependencies() terra.Dependencies {
	return avmss.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avmss *Resource) LifecycleManagement() *terra.Lifecycle {
	return avmss.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avmss *Resource) Attributes() azurestackVirtualMachineScaleSetAttributes {
	return azurestackVirtualMachineScaleSetAttributes{ref: terra.ReferenceResource(avmss)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avmss *Resource) ImportState(state io.Reader) error {
	avmss.state = &azurestackVirtualMachineScaleSetState{}
	if err := json.NewDecoder(state).Decode(avmss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avmss.Type(), avmss.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avmss *Resource) State() (*azurestackVirtualMachineScaleSetState, bool) {
	return avmss.state, avmss.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avmss *Resource) StateMust() *azurestackVirtualMachineScaleSetState {
	if avmss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avmss.Type(), avmss.LocalName()))
	}
	return avmss.state
}

// Args contains the configurations for azurestack_virtual_machine_scale_set.
type Args struct {
	// EvictionPolicy: string, optional
	EvictionPolicy terra.StringValue `hcl:"eviction_policy,attr"`
	// HealthProbeId: string, optional
	HealthProbeId terra.StringValue `hcl:"health_probe_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Overprovision: bool, optional
	Overprovision terra.BoolValue `hcl:"overprovision,attr"`
	// Priority: string, optional
	Priority terra.StringValue `hcl:"priority,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SinglePlacementGroup: bool, optional
	SinglePlacementGroup terra.BoolValue `hcl:"single_placement_group,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// UpgradePolicyMode: string, required
	UpgradePolicyMode terra.StringValue `hcl:"upgrade_policy_mode,attr" validate:"required"`
	// Zones: list of string, optional
	Zones terra.ListValue[terra.StringValue] `hcl:"zones,attr"`
	// BootDiagnostics: optional
	BootDiagnostics *BootDiagnostics `hcl:"boot_diagnostics,block"`
	// Extension: min=0
	Extension []Extension `hcl:"extension,block" validate:"min=0"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// NetworkProfile: min=1
	NetworkProfile []NetworkProfile `hcl:"network_profile,block" validate:"min=1"`
	// OsProfile: required
	OsProfile *OsProfile `hcl:"os_profile,block" validate:"required"`
	// OsProfileLinuxConfig: optional
	OsProfileLinuxConfig *OsProfileLinuxConfig `hcl:"os_profile_linux_config,block"`
	// OsProfileSecrets: min=0
	OsProfileSecrets []OsProfileSecrets `hcl:"os_profile_secrets,block" validate:"min=0"`
	// OsProfileWindowsConfig: optional
	OsProfileWindowsConfig *OsProfileWindowsConfig `hcl:"os_profile_windows_config,block"`
	// Plan: optional
	Plan *Plan `hcl:"plan,block"`
	// RollingUpgradePolicy: optional
	RollingUpgradePolicy *RollingUpgradePolicy `hcl:"rolling_upgrade_policy,block"`
	// Sku: required
	Sku *Sku `hcl:"sku,block" validate:"required"`
	// StorageProfileDataDisk: min=0
	StorageProfileDataDisk []StorageProfileDataDisk `hcl:"storage_profile_data_disk,block" validate:"min=0"`
	// StorageProfileImageReference: optional
	StorageProfileImageReference *StorageProfileImageReference `hcl:"storage_profile_image_reference,block"`
	// StorageProfileOsDisk: required
	StorageProfileOsDisk *StorageProfileOsDisk `hcl:"storage_profile_os_disk,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackVirtualMachineScaleSetAttributes struct {
	ref terra.Reference
}

// EvictionPolicy returns a reference to field eviction_policy of azurestack_virtual_machine_scale_set.
func (avmss azurestackVirtualMachineScaleSetAttributes) EvictionPolicy() terra.StringValue {
	return terra.ReferenceAsString(avmss.ref.Append("eviction_policy"))
}

// HealthProbeId returns a reference to field health_probe_id of azurestack_virtual_machine_scale_set.
func (avmss azurestackVirtualMachineScaleSetAttributes) HealthProbeId() terra.StringValue {
	return terra.ReferenceAsString(avmss.ref.Append("health_probe_id"))
}

// Id returns a reference to field id of azurestack_virtual_machine_scale_set.
func (avmss azurestackVirtualMachineScaleSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avmss.ref.Append("id"))
}

// LicenseType returns a reference to field license_type of azurestack_virtual_machine_scale_set.
func (avmss azurestackVirtualMachineScaleSetAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceAsString(avmss.ref.Append("license_type"))
}

// Location returns a reference to field location of azurestack_virtual_machine_scale_set.
func (avmss azurestackVirtualMachineScaleSetAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(avmss.ref.Append("location"))
}

// Name returns a reference to field name of azurestack_virtual_machine_scale_set.
func (avmss azurestackVirtualMachineScaleSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avmss.ref.Append("name"))
}

// Overprovision returns a reference to field overprovision of azurestack_virtual_machine_scale_set.
func (avmss azurestackVirtualMachineScaleSetAttributes) Overprovision() terra.BoolValue {
	return terra.ReferenceAsBool(avmss.ref.Append("overprovision"))
}

// Priority returns a reference to field priority of azurestack_virtual_machine_scale_set.
func (avmss azurestackVirtualMachineScaleSetAttributes) Priority() terra.StringValue {
	return terra.ReferenceAsString(avmss.ref.Append("priority"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurestack_virtual_machine_scale_set.
func (avmss azurestackVirtualMachineScaleSetAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(avmss.ref.Append("resource_group_name"))
}

// SinglePlacementGroup returns a reference to field single_placement_group of azurestack_virtual_machine_scale_set.
func (avmss azurestackVirtualMachineScaleSetAttributes) SinglePlacementGroup() terra.BoolValue {
	return terra.ReferenceAsBool(avmss.ref.Append("single_placement_group"))
}

// Tags returns a reference to field tags of azurestack_virtual_machine_scale_set.
func (avmss azurestackVirtualMachineScaleSetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avmss.ref.Append("tags"))
}

// UpgradePolicyMode returns a reference to field upgrade_policy_mode of azurestack_virtual_machine_scale_set.
func (avmss azurestackVirtualMachineScaleSetAttributes) UpgradePolicyMode() terra.StringValue {
	return terra.ReferenceAsString(avmss.ref.Append("upgrade_policy_mode"))
}

// Zones returns a reference to field zones of azurestack_virtual_machine_scale_set.
func (avmss azurestackVirtualMachineScaleSetAttributes) Zones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](avmss.ref.Append("zones"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) BootDiagnostics() terra.ListValue[BootDiagnosticsAttributes] {
	return terra.ReferenceAsList[BootDiagnosticsAttributes](avmss.ref.Append("boot_diagnostics"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) Extension() terra.SetValue[ExtensionAttributes] {
	return terra.ReferenceAsSet[ExtensionAttributes](avmss.ref.Append("extension"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](avmss.ref.Append("identity"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) NetworkProfile() terra.SetValue[NetworkProfileAttributes] {
	return terra.ReferenceAsSet[NetworkProfileAttributes](avmss.ref.Append("network_profile"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) OsProfile() terra.ListValue[OsProfileAttributes] {
	return terra.ReferenceAsList[OsProfileAttributes](avmss.ref.Append("os_profile"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) OsProfileLinuxConfig() terra.SetValue[OsProfileLinuxConfigAttributes] {
	return terra.ReferenceAsSet[OsProfileLinuxConfigAttributes](avmss.ref.Append("os_profile_linux_config"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) OsProfileSecrets() terra.SetValue[OsProfileSecretsAttributes] {
	return terra.ReferenceAsSet[OsProfileSecretsAttributes](avmss.ref.Append("os_profile_secrets"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) OsProfileWindowsConfig() terra.SetValue[OsProfileWindowsConfigAttributes] {
	return terra.ReferenceAsSet[OsProfileWindowsConfigAttributes](avmss.ref.Append("os_profile_windows_config"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) Plan() terra.SetValue[PlanAttributes] {
	return terra.ReferenceAsSet[PlanAttributes](avmss.ref.Append("plan"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) RollingUpgradePolicy() terra.ListValue[RollingUpgradePolicyAttributes] {
	return terra.ReferenceAsList[RollingUpgradePolicyAttributes](avmss.ref.Append("rolling_upgrade_policy"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) Sku() terra.ListValue[SkuAttributes] {
	return terra.ReferenceAsList[SkuAttributes](avmss.ref.Append("sku"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) StorageProfileDataDisk() terra.ListValue[StorageProfileDataDiskAttributes] {
	return terra.ReferenceAsList[StorageProfileDataDiskAttributes](avmss.ref.Append("storage_profile_data_disk"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) StorageProfileImageReference() terra.SetValue[StorageProfileImageReferenceAttributes] {
	return terra.ReferenceAsSet[StorageProfileImageReferenceAttributes](avmss.ref.Append("storage_profile_image_reference"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) StorageProfileOsDisk() terra.SetValue[StorageProfileOsDiskAttributes] {
	return terra.ReferenceAsSet[StorageProfileOsDiskAttributes](avmss.ref.Append("storage_profile_os_disk"))
}

func (avmss azurestackVirtualMachineScaleSetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avmss.ref.Append("timeouts"))
}

type azurestackVirtualMachineScaleSetState struct {
	EvictionPolicy               string                              `json:"eviction_policy"`
	HealthProbeId                string                              `json:"health_probe_id"`
	Id                           string                              `json:"id"`
	LicenseType                  string                              `json:"license_type"`
	Location                     string                              `json:"location"`
	Name                         string                              `json:"name"`
	Overprovision                bool                                `json:"overprovision"`
	Priority                     string                              `json:"priority"`
	ResourceGroupName            string                              `json:"resource_group_name"`
	SinglePlacementGroup         bool                                `json:"single_placement_group"`
	Tags                         map[string]string                   `json:"tags"`
	UpgradePolicyMode            string                              `json:"upgrade_policy_mode"`
	Zones                        []string                            `json:"zones"`
	BootDiagnostics              []BootDiagnosticsState              `json:"boot_diagnostics"`
	Extension                    []ExtensionState                    `json:"extension"`
	Identity                     []IdentityState                     `json:"identity"`
	NetworkProfile               []NetworkProfileState               `json:"network_profile"`
	OsProfile                    []OsProfileState                    `json:"os_profile"`
	OsProfileLinuxConfig         []OsProfileLinuxConfigState         `json:"os_profile_linux_config"`
	OsProfileSecrets             []OsProfileSecretsState             `json:"os_profile_secrets"`
	OsProfileWindowsConfig       []OsProfileWindowsConfigState       `json:"os_profile_windows_config"`
	Plan                         []PlanState                         `json:"plan"`
	RollingUpgradePolicy         []RollingUpgradePolicyState         `json:"rolling_upgrade_policy"`
	Sku                          []SkuState                          `json:"sku"`
	StorageProfileDataDisk       []StorageProfileDataDiskState       `json:"storage_profile_data_disk"`
	StorageProfileImageReference []StorageProfileImageReferenceState `json:"storage_profile_image_reference"`
	StorageProfileOsDisk         []StorageProfileOsDiskState         `json:"storage_profile_os_disk"`
	Timeouts                     *TimeoutsState                      `json:"timeouts"`
}
