// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_key_vault_access_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_key_vault_access_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackKeyVaultAccessPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akvap *Resource) Type() string {
	return "azurestack_key_vault_access_policy"
}

// LocalName returns the local name for [Resource].
func (akvap *Resource) LocalName() string {
	return akvap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akvap *Resource) Configuration() interface{} {
	return akvap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akvap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akvap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akvap *Resource) Dependencies() terra.Dependencies {
	return akvap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akvap *Resource) LifecycleManagement() *terra.Lifecycle {
	return akvap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akvap *Resource) Attributes() azurestackKeyVaultAccessPolicyAttributes {
	return azurestackKeyVaultAccessPolicyAttributes{ref: terra.ReferenceResource(akvap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akvap *Resource) ImportState(state io.Reader) error {
	akvap.state = &azurestackKeyVaultAccessPolicyState{}
	if err := json.NewDecoder(state).Decode(akvap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akvap.Type(), akvap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akvap *Resource) State() (*azurestackKeyVaultAccessPolicyState, bool) {
	return akvap.state, akvap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akvap *Resource) StateMust() *azurestackKeyVaultAccessPolicyState {
	if akvap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akvap.Type(), akvap.LocalName()))
	}
	return akvap.state
}

// Args contains the configurations for azurestack_key_vault_access_policy.
type Args struct {
	// ApplicationId: string, optional
	ApplicationId terra.StringValue `hcl:"application_id,attr"`
	// CertificatePermissions: list of string, optional
	CertificatePermissions terra.ListValue[terra.StringValue] `hcl:"certificate_permissions,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyPermissions: list of string, optional
	KeyPermissions terra.ListValue[terra.StringValue] `hcl:"key_permissions,attr"`
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// ObjectId: string, required
	ObjectId terra.StringValue `hcl:"object_id,attr" validate:"required"`
	// SecretPermissions: list of string, optional
	SecretPermissions terra.ListValue[terra.StringValue] `hcl:"secret_permissions,attr"`
	// StoragePermissions: list of string, optional
	StoragePermissions terra.ListValue[terra.StringValue] `hcl:"storage_permissions,attr"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackKeyVaultAccessPolicyAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of azurestack_key_vault_access_policy.
func (akvap azurestackKeyVaultAccessPolicyAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(akvap.ref.Append("application_id"))
}

// CertificatePermissions returns a reference to field certificate_permissions of azurestack_key_vault_access_policy.
func (akvap azurestackKeyVaultAccessPolicyAttributes) CertificatePermissions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](akvap.ref.Append("certificate_permissions"))
}

// Id returns a reference to field id of azurestack_key_vault_access_policy.
func (akvap azurestackKeyVaultAccessPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akvap.ref.Append("id"))
}

// KeyPermissions returns a reference to field key_permissions of azurestack_key_vault_access_policy.
func (akvap azurestackKeyVaultAccessPolicyAttributes) KeyPermissions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](akvap.ref.Append("key_permissions"))
}

// KeyVaultId returns a reference to field key_vault_id of azurestack_key_vault_access_policy.
func (akvap azurestackKeyVaultAccessPolicyAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(akvap.ref.Append("key_vault_id"))
}

// ObjectId returns a reference to field object_id of azurestack_key_vault_access_policy.
func (akvap azurestackKeyVaultAccessPolicyAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(akvap.ref.Append("object_id"))
}

// SecretPermissions returns a reference to field secret_permissions of azurestack_key_vault_access_policy.
func (akvap azurestackKeyVaultAccessPolicyAttributes) SecretPermissions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](akvap.ref.Append("secret_permissions"))
}

// StoragePermissions returns a reference to field storage_permissions of azurestack_key_vault_access_policy.
func (akvap azurestackKeyVaultAccessPolicyAttributes) StoragePermissions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](akvap.ref.Append("storage_permissions"))
}

// TenantId returns a reference to field tenant_id of azurestack_key_vault_access_policy.
func (akvap azurestackKeyVaultAccessPolicyAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(akvap.ref.Append("tenant_id"))
}

func (akvap azurestackKeyVaultAccessPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akvap.ref.Append("timeouts"))
}

type azurestackKeyVaultAccessPolicyState struct {
	ApplicationId          string         `json:"application_id"`
	CertificatePermissions []string       `json:"certificate_permissions"`
	Id                     string         `json:"id"`
	KeyPermissions         []string       `json:"key_permissions"`
	KeyVaultId             string         `json:"key_vault_id"`
	ObjectId               string         `json:"object_id"`
	SecretPermissions      []string       `json:"secret_permissions"`
	StoragePermissions     []string       `json:"storage_permissions"`
	TenantId               string         `json:"tenant_id"`
	Timeouts               *TimeoutsState `json:"timeouts"`
}
