// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_lb_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_lb_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackLbRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alr *Resource) Type() string {
	return "azurestack_lb_rule"
}

// LocalName returns the local name for [Resource].
func (alr *Resource) LocalName() string {
	return alr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alr *Resource) Configuration() interface{} {
	return alr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alr *Resource) Dependencies() terra.Dependencies {
	return alr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alr *Resource) LifecycleManagement() *terra.Lifecycle {
	return alr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alr *Resource) Attributes() azurestackLbRuleAttributes {
	return azurestackLbRuleAttributes{ref: terra.ReferenceResource(alr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alr *Resource) ImportState(state io.Reader) error {
	alr.state = &azurestackLbRuleState{}
	if err := json.NewDecoder(state).Decode(alr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alr.Type(), alr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alr *Resource) State() (*azurestackLbRuleState, bool) {
	return alr.state, alr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alr *Resource) StateMust() *azurestackLbRuleState {
	if alr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alr.Type(), alr.LocalName()))
	}
	return alr.state
}

// Args contains the configurations for azurestack_lb_rule.
type Args struct {
	// BackendAddressPoolId: string, optional
	BackendAddressPoolId terra.StringValue `hcl:"backend_address_pool_id,attr"`
	// BackendPort: number, required
	BackendPort terra.NumberValue `hcl:"backend_port,attr" validate:"required"`
	// DisableOutboundSnat: bool, optional
	DisableOutboundSnat terra.BoolValue `hcl:"disable_outbound_snat,attr"`
	// EnableFloatingIp: bool, optional
	EnableFloatingIp terra.BoolValue `hcl:"enable_floating_ip,attr"`
	// FrontendIpConfigurationName: string, required
	FrontendIpConfigurationName terra.StringValue `hcl:"frontend_ip_configuration_name,attr" validate:"required"`
	// FrontendPort: number, required
	FrontendPort terra.NumberValue `hcl:"frontend_port,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdleTimeoutInMinutes: number, optional
	IdleTimeoutInMinutes terra.NumberValue `hcl:"idle_timeout_in_minutes,attr"`
	// LoadDistribution: string, optional
	LoadDistribution terra.StringValue `hcl:"load_distribution,attr"`
	// LoadbalancerId: string, required
	LoadbalancerId terra.StringValue `hcl:"loadbalancer_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProbeId: string, optional
	ProbeId terra.StringValue `hcl:"probe_id,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackLbRuleAttributes struct {
	ref terra.Reference
}

// BackendAddressPoolId returns a reference to field backend_address_pool_id of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) BackendAddressPoolId() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("backend_address_pool_id"))
}

// BackendPort returns a reference to field backend_port of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) BackendPort() terra.NumberValue {
	return terra.ReferenceAsNumber(alr.ref.Append("backend_port"))
}

// DisableOutboundSnat returns a reference to field disable_outbound_snat of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) DisableOutboundSnat() terra.BoolValue {
	return terra.ReferenceAsBool(alr.ref.Append("disable_outbound_snat"))
}

// EnableFloatingIp returns a reference to field enable_floating_ip of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) EnableFloatingIp() terra.BoolValue {
	return terra.ReferenceAsBool(alr.ref.Append("enable_floating_ip"))
}

// FrontendIpConfigurationId returns a reference to field frontend_ip_configuration_id of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) FrontendIpConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("frontend_ip_configuration_id"))
}

// FrontendIpConfigurationName returns a reference to field frontend_ip_configuration_name of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) FrontendIpConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("frontend_ip_configuration_name"))
}

// FrontendPort returns a reference to field frontend_port of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) FrontendPort() terra.NumberValue {
	return terra.ReferenceAsNumber(alr.ref.Append("frontend_port"))
}

// Id returns a reference to field id of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("id"))
}

// IdleTimeoutInMinutes returns a reference to field idle_timeout_in_minutes of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) IdleTimeoutInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(alr.ref.Append("idle_timeout_in_minutes"))
}

// LoadDistribution returns a reference to field load_distribution of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) LoadDistribution() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("load_distribution"))
}

// LoadbalancerId returns a reference to field loadbalancer_id of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) LoadbalancerId() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("loadbalancer_id"))
}

// Name returns a reference to field name of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("name"))
}

// ProbeId returns a reference to field probe_id of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) ProbeId() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("probe_id"))
}

// Protocol returns a reference to field protocol of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("protocol"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurestack_lb_rule.
func (alr azurestackLbRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("resource_group_name"))
}

func (alr azurestackLbRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alr.ref.Append("timeouts"))
}

type azurestackLbRuleState struct {
	BackendAddressPoolId        string         `json:"backend_address_pool_id"`
	BackendPort                 float64        `json:"backend_port"`
	DisableOutboundSnat         bool           `json:"disable_outbound_snat"`
	EnableFloatingIp            bool           `json:"enable_floating_ip"`
	FrontendIpConfigurationId   string         `json:"frontend_ip_configuration_id"`
	FrontendIpConfigurationName string         `json:"frontend_ip_configuration_name"`
	FrontendPort                float64        `json:"frontend_port"`
	Id                          string         `json:"id"`
	IdleTimeoutInMinutes        float64        `json:"idle_timeout_in_minutes"`
	LoadDistribution            string         `json:"load_distribution"`
	LoadbalancerId              string         `json:"loadbalancer_id"`
	Name                        string         `json:"name"`
	ProbeId                     string         `json:"probe_id"`
	Protocol                    string         `json:"protocol"`
	ResourceGroupName           string         `json:"resource_group_name"`
	Timeouts                    *TimeoutsState `json:"timeouts"`
}
