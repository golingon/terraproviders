// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_managed_disk

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_managed_disk.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackManagedDiskState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amd *Resource) Type() string {
	return "azurestack_managed_disk"
}

// LocalName returns the local name for [Resource].
func (amd *Resource) LocalName() string {
	return amd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amd *Resource) Configuration() interface{} {
	return amd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amd *Resource) Dependencies() terra.Dependencies {
	return amd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amd *Resource) LifecycleManagement() *terra.Lifecycle {
	return amd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amd *Resource) Attributes() azurestackManagedDiskAttributes {
	return azurestackManagedDiskAttributes{ref: terra.ReferenceResource(amd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amd *Resource) ImportState(state io.Reader) error {
	amd.state = &azurestackManagedDiskState{}
	if err := json.NewDecoder(state).Decode(amd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amd.Type(), amd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amd *Resource) State() (*azurestackManagedDiskState, bool) {
	return amd.state, amd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amd *Resource) StateMust() *azurestackManagedDiskState {
	if amd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amd.Type(), amd.LocalName()))
	}
	return amd.state
}

// Args contains the configurations for azurestack_managed_disk.
type Args struct {
	// CreateOption: string, required
	CreateOption terra.StringValue `hcl:"create_option,attr" validate:"required"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// HyperVGeneration: string, optional
	HyperVGeneration terra.StringValue `hcl:"hyper_v_generation,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageReferenceId: string, optional
	ImageReferenceId terra.StringValue `hcl:"image_reference_id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OsType: string, optional
	OsType terra.StringValue `hcl:"os_type,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SourceResourceId: string, optional
	SourceResourceId terra.StringValue `hcl:"source_resource_id,attr"`
	// SourceUri: string, optional
	SourceUri terra.StringValue `hcl:"source_uri,attr"`
	// StorageAccountId: string, optional
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr"`
	// StorageAccountType: string, required
	StorageAccountType terra.StringValue `hcl:"storage_account_type,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Encryption: optional
	Encryption *Encryption `hcl:"encryption,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackManagedDiskAttributes struct {
	ref terra.Reference
}

// CreateOption returns a reference to field create_option of azurestack_managed_disk.
func (amd azurestackManagedDiskAttributes) CreateOption() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("create_option"))
}

// DiskSizeGb returns a reference to field disk_size_gb of azurestack_managed_disk.
func (amd azurestackManagedDiskAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(amd.ref.Append("disk_size_gb"))
}

// HyperVGeneration returns a reference to field hyper_v_generation of azurestack_managed_disk.
func (amd azurestackManagedDiskAttributes) HyperVGeneration() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("hyper_v_generation"))
}

// Id returns a reference to field id of azurestack_managed_disk.
func (amd azurestackManagedDiskAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("id"))
}

// ImageReferenceId returns a reference to field image_reference_id of azurestack_managed_disk.
func (amd azurestackManagedDiskAttributes) ImageReferenceId() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("image_reference_id"))
}

// Location returns a reference to field location of azurestack_managed_disk.
func (amd azurestackManagedDiskAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("location"))
}

// Name returns a reference to field name of azurestack_managed_disk.
func (amd azurestackManagedDiskAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("name"))
}

// OsType returns a reference to field os_type of azurestack_managed_disk.
func (amd azurestackManagedDiskAttributes) OsType() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("os_type"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurestack_managed_disk.
func (amd azurestackManagedDiskAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("resource_group_name"))
}

// SourceResourceId returns a reference to field source_resource_id of azurestack_managed_disk.
func (amd azurestackManagedDiskAttributes) SourceResourceId() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("source_resource_id"))
}

// SourceUri returns a reference to field source_uri of azurestack_managed_disk.
func (amd azurestackManagedDiskAttributes) SourceUri() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("source_uri"))
}

// StorageAccountId returns a reference to field storage_account_id of azurestack_managed_disk.
func (amd azurestackManagedDiskAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("storage_account_id"))
}

// StorageAccountType returns a reference to field storage_account_type of azurestack_managed_disk.
func (amd azurestackManagedDiskAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("storage_account_type"))
}

// Tags returns a reference to field tags of azurestack_managed_disk.
func (amd azurestackManagedDiskAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amd.ref.Append("tags"))
}

func (amd azurestackManagedDiskAttributes) Encryption() terra.ListValue[EncryptionAttributes] {
	return terra.ReferenceAsList[EncryptionAttributes](amd.ref.Append("encryption"))
}

func (amd azurestackManagedDiskAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amd.ref.Append("timeouts"))
}

type azurestackManagedDiskState struct {
	CreateOption       string            `json:"create_option"`
	DiskSizeGb         float64           `json:"disk_size_gb"`
	HyperVGeneration   string            `json:"hyper_v_generation"`
	Id                 string            `json:"id"`
	ImageReferenceId   string            `json:"image_reference_id"`
	Location           string            `json:"location"`
	Name               string            `json:"name"`
	OsType             string            `json:"os_type"`
	ResourceGroupName  string            `json:"resource_group_name"`
	SourceResourceId   string            `json:"source_resource_id"`
	SourceUri          string            `json:"source_uri"`
	StorageAccountId   string            `json:"storage_account_id"`
	StorageAccountType string            `json:"storage_account_type"`
	Tags               map[string]string `json:"tags"`
	Encryption         []EncryptionState `json:"encryption"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
