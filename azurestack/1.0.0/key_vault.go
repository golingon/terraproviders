// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	keyvault "github.com/golingon/terraproviders/azurestack/1.0.0/keyvault"
	"io"
)

// NewKeyVault creates a new instance of [KeyVault].
func NewKeyVault(name string, args KeyVaultArgs) *KeyVault {
	return &KeyVault{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KeyVault)(nil)

// KeyVault represents the Terraform resource azurestack_key_vault.
type KeyVault struct {
	Name      string
	Args      KeyVaultArgs
	state     *keyVaultState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [KeyVault].
func (kv *KeyVault) Type() string {
	return "azurestack_key_vault"
}

// LocalName returns the local name for [KeyVault].
func (kv *KeyVault) LocalName() string {
	return kv.Name
}

// Configuration returns the configuration (args) for [KeyVault].
func (kv *KeyVault) Configuration() interface{} {
	return kv.Args
}

// DependOn is used for other resources to depend on [KeyVault].
func (kv *KeyVault) DependOn() terra.Reference {
	return terra.ReferenceResource(kv)
}

// Dependencies returns the list of resources [KeyVault] depends_on.
func (kv *KeyVault) Dependencies() terra.Dependencies {
	return kv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [KeyVault].
func (kv *KeyVault) LifecycleManagement() *terra.Lifecycle {
	return kv.Lifecycle
}

// Attributes returns the attributes for [KeyVault].
func (kv *KeyVault) Attributes() keyVaultAttributes {
	return keyVaultAttributes{ref: terra.ReferenceResource(kv)}
}

// ImportState imports the given attribute values into [KeyVault]'s state.
func (kv *KeyVault) ImportState(av io.Reader) error {
	kv.state = &keyVaultState{}
	if err := json.NewDecoder(av).Decode(kv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kv.Type(), kv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [KeyVault] has state.
func (kv *KeyVault) State() (*keyVaultState, bool) {
	return kv.state, kv.state != nil
}

// StateMust returns the state for [KeyVault]. Panics if the state is nil.
func (kv *KeyVault) StateMust() *keyVaultState {
	if kv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kv.Type(), kv.LocalName()))
	}
	return kv.state
}

// KeyVaultArgs contains the configurations for azurestack_key_vault.
type KeyVaultArgs struct {
	// EnableRbacAuthorization: bool, optional
	EnableRbacAuthorization terra.BoolValue `hcl:"enable_rbac_authorization,attr"`
	// EnabledForDeployment: bool, optional
	EnabledForDeployment terra.BoolValue `hcl:"enabled_for_deployment,attr"`
	// EnabledForDiskEncryption: bool, optional
	EnabledForDiskEncryption terra.BoolValue `hcl:"enabled_for_disk_encryption,attr"`
	// EnabledForTemplateDeployment: bool, optional
	EnabledForTemplateDeployment terra.BoolValue `hcl:"enabled_for_template_deployment,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// AccessPolicy: min=0
	AccessPolicy []keyvault.AccessPolicy `hcl:"access_policy,block" validate:"min=0"`
	// NetworkAcls: optional
	NetworkAcls *keyvault.NetworkAcls `hcl:"network_acls,block"`
	// Timeouts: optional
	Timeouts *keyvault.Timeouts `hcl:"timeouts,block"`
}
type keyVaultAttributes struct {
	ref terra.Reference
}

// EnableRbacAuthorization returns a reference to field enable_rbac_authorization of azurestack_key_vault.
func (kv keyVaultAttributes) EnableRbacAuthorization() terra.BoolValue {
	return terra.ReferenceAsBool(kv.ref.Append("enable_rbac_authorization"))
}

// EnabledForDeployment returns a reference to field enabled_for_deployment of azurestack_key_vault.
func (kv keyVaultAttributes) EnabledForDeployment() terra.BoolValue {
	return terra.ReferenceAsBool(kv.ref.Append("enabled_for_deployment"))
}

// EnabledForDiskEncryption returns a reference to field enabled_for_disk_encryption of azurestack_key_vault.
func (kv keyVaultAttributes) EnabledForDiskEncryption() terra.BoolValue {
	return terra.ReferenceAsBool(kv.ref.Append("enabled_for_disk_encryption"))
}

// EnabledForTemplateDeployment returns a reference to field enabled_for_template_deployment of azurestack_key_vault.
func (kv keyVaultAttributes) EnabledForTemplateDeployment() terra.BoolValue {
	return terra.ReferenceAsBool(kv.ref.Append("enabled_for_template_deployment"))
}

// Id returns a reference to field id of azurestack_key_vault.
func (kv keyVaultAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(kv.ref.Append("id"))
}

// Location returns a reference to field location of azurestack_key_vault.
func (kv keyVaultAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(kv.ref.Append("location"))
}

// Name returns a reference to field name of azurestack_key_vault.
func (kv keyVaultAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(kv.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurestack_key_vault.
func (kv keyVaultAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(kv.ref.Append("resource_group_name"))
}

// SkuName returns a reference to field sku_name of azurestack_key_vault.
func (kv keyVaultAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(kv.ref.Append("sku_name"))
}

// Tags returns a reference to field tags of azurestack_key_vault.
func (kv keyVaultAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](kv.ref.Append("tags"))
}

// TenantId returns a reference to field tenant_id of azurestack_key_vault.
func (kv keyVaultAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(kv.ref.Append("tenant_id"))
}

// VaultUri returns a reference to field vault_uri of azurestack_key_vault.
func (kv keyVaultAttributes) VaultUri() terra.StringValue {
	return terra.ReferenceAsString(kv.ref.Append("vault_uri"))
}

func (kv keyVaultAttributes) AccessPolicy() terra.ListValue[keyvault.AccessPolicyAttributes] {
	return terra.ReferenceAsList[keyvault.AccessPolicyAttributes](kv.ref.Append("access_policy"))
}

func (kv keyVaultAttributes) NetworkAcls() terra.ListValue[keyvault.NetworkAclsAttributes] {
	return terra.ReferenceAsList[keyvault.NetworkAclsAttributes](kv.ref.Append("network_acls"))
}

func (kv keyVaultAttributes) Timeouts() keyvault.TimeoutsAttributes {
	return terra.ReferenceAsSingle[keyvault.TimeoutsAttributes](kv.ref.Append("timeouts"))
}

type keyVaultState struct {
	EnableRbacAuthorization      bool                         `json:"enable_rbac_authorization"`
	EnabledForDeployment         bool                         `json:"enabled_for_deployment"`
	EnabledForDiskEncryption     bool                         `json:"enabled_for_disk_encryption"`
	EnabledForTemplateDeployment bool                         `json:"enabled_for_template_deployment"`
	Id                           string                       `json:"id"`
	Location                     string                       `json:"location"`
	Name                         string                       `json:"name"`
	ResourceGroupName            string                       `json:"resource_group_name"`
	SkuName                      string                       `json:"sku_name"`
	Tags                         map[string]string            `json:"tags"`
	TenantId                     string                       `json:"tenant_id"`
	VaultUri                     string                       `json:"vault_uri"`
	AccessPolicy                 []keyvault.AccessPolicyState `json:"access_policy"`
	NetworkAcls                  []keyvault.NetworkAclsState  `json:"network_acls"`
	Timeouts                     *keyvault.TimeoutsState      `json:"timeouts"`
}
