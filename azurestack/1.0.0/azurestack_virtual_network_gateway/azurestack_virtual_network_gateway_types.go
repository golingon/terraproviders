// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_virtual_network_gateway

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BgpSettings struct {
	// Asn: number, optional
	Asn terra.NumberValue `hcl:"asn,attr"`
	// PeerWeight: number, optional
	PeerWeight terra.NumberValue `hcl:"peer_weight,attr"`
	// PeeringAddress: string, optional
	PeeringAddress terra.StringValue `hcl:"peering_address,attr"`
}

type IpConfiguration struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// PrivateIpAddressAllocation: string, optional
	PrivateIpAddressAllocation terra.StringValue `hcl:"private_ip_address_allocation,attr"`
	// PublicIpAddressId: string, required
	PublicIpAddressId terra.StringValue `hcl:"public_ip_address_id,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VpnClientConfiguration struct {
	// AddressSpace: list of string, required
	AddressSpace terra.ListValue[terra.StringValue] `hcl:"address_space,attr" validate:"required"`
	// RadiusServerAddress: string, optional
	RadiusServerAddress terra.StringValue `hcl:"radius_server_address,attr"`
	// RadiusServerSecret: string, optional
	RadiusServerSecret terra.StringValue `hcl:"radius_server_secret,attr"`
	// VpnClientProtocols: set of string, optional
	VpnClientProtocols terra.SetValue[terra.StringValue] `hcl:"vpn_client_protocols,attr"`
	// VpnClientConfigurationRevokedCertificate: min=0
	RevokedCertificate []VpnClientConfigurationRevokedCertificate `hcl:"revoked_certificate,block" validate:"min=0"`
	// VpnClientConfigurationRootCertificate: min=0
	RootCertificate []VpnClientConfigurationRootCertificate `hcl:"root_certificate,block" validate:"min=0"`
}

type VpnClientConfigurationRevokedCertificate struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Thumbprint: string, required
	Thumbprint terra.StringValue `hcl:"thumbprint,attr" validate:"required"`
}

type VpnClientConfigurationRootCertificate struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicCertData: string, required
	PublicCertData terra.StringValue `hcl:"public_cert_data,attr" validate:"required"`
}

type BgpSettingsAttributes struct {
	ref terra.Reference
}

func (bs BgpSettingsAttributes) InternalRef() (terra.Reference, error) {
	return bs.ref, nil
}

func (bs BgpSettingsAttributes) InternalWithRef(ref terra.Reference) BgpSettingsAttributes {
	return BgpSettingsAttributes{ref: ref}
}

func (bs BgpSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bs.ref.InternalTokens()
}

func (bs BgpSettingsAttributes) Asn() terra.NumberValue {
	return terra.ReferenceAsNumber(bs.ref.Append("asn"))
}

func (bs BgpSettingsAttributes) PeerWeight() terra.NumberValue {
	return terra.ReferenceAsNumber(bs.ref.Append("peer_weight"))
}

func (bs BgpSettingsAttributes) PeeringAddress() terra.StringValue {
	return terra.ReferenceAsString(bs.ref.Append("peering_address"))
}

type IpConfigurationAttributes struct {
	ref terra.Reference
}

func (ic IpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic IpConfigurationAttributes) InternalWithRef(ref terra.Reference) IpConfigurationAttributes {
	return IpConfigurationAttributes{ref: ref}
}

func (ic IpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic IpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic IpConfigurationAttributes) PrivateIpAddressAllocation() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("private_ip_address_allocation"))
}

func (ic IpConfigurationAttributes) PublicIpAddressId() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("public_ip_address_id"))
}

func (ic IpConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("subnet_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VpnClientConfigurationAttributes struct {
	ref terra.Reference
}

func (vcc VpnClientConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return vcc.ref, nil
}

func (vcc VpnClientConfigurationAttributes) InternalWithRef(ref terra.Reference) VpnClientConfigurationAttributes {
	return VpnClientConfigurationAttributes{ref: ref}
}

func (vcc VpnClientConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vcc.ref.InternalTokens()
}

func (vcc VpnClientConfigurationAttributes) AddressSpace() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vcc.ref.Append("address_space"))
}

func (vcc VpnClientConfigurationAttributes) RadiusServerAddress() terra.StringValue {
	return terra.ReferenceAsString(vcc.ref.Append("radius_server_address"))
}

func (vcc VpnClientConfigurationAttributes) RadiusServerSecret() terra.StringValue {
	return terra.ReferenceAsString(vcc.ref.Append("radius_server_secret"))
}

func (vcc VpnClientConfigurationAttributes) VpnClientProtocols() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vcc.ref.Append("vpn_client_protocols"))
}

func (vcc VpnClientConfigurationAttributes) RevokedCertificate() terra.SetValue[VpnClientConfigurationRevokedCertificateAttributes] {
	return terra.ReferenceAsSet[VpnClientConfigurationRevokedCertificateAttributes](vcc.ref.Append("revoked_certificate"))
}

func (vcc VpnClientConfigurationAttributes) RootCertificate() terra.SetValue[VpnClientConfigurationRootCertificateAttributes] {
	return terra.ReferenceAsSet[VpnClientConfigurationRootCertificateAttributes](vcc.ref.Append("root_certificate"))
}

type VpnClientConfigurationRevokedCertificateAttributes struct {
	ref terra.Reference
}

func (rc VpnClientConfigurationRevokedCertificateAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc VpnClientConfigurationRevokedCertificateAttributes) InternalWithRef(ref terra.Reference) VpnClientConfigurationRevokedCertificateAttributes {
	return VpnClientConfigurationRevokedCertificateAttributes{ref: ref}
}

func (rc VpnClientConfigurationRevokedCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc VpnClientConfigurationRevokedCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("name"))
}

func (rc VpnClientConfigurationRevokedCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("thumbprint"))
}

type VpnClientConfigurationRootCertificateAttributes struct {
	ref terra.Reference
}

func (rc VpnClientConfigurationRootCertificateAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc VpnClientConfigurationRootCertificateAttributes) InternalWithRef(ref terra.Reference) VpnClientConfigurationRootCertificateAttributes {
	return VpnClientConfigurationRootCertificateAttributes{ref: ref}
}

func (rc VpnClientConfigurationRootCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc VpnClientConfigurationRootCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("name"))
}

func (rc VpnClientConfigurationRootCertificateAttributes) PublicCertData() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("public_cert_data"))
}

type BgpSettingsState struct {
	Asn            float64 `json:"asn"`
	PeerWeight     float64 `json:"peer_weight"`
	PeeringAddress string  `json:"peering_address"`
}

type IpConfigurationState struct {
	Name                       string `json:"name"`
	PrivateIpAddressAllocation string `json:"private_ip_address_allocation"`
	PublicIpAddressId          string `json:"public_ip_address_id"`
	SubnetId                   string `json:"subnet_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type VpnClientConfigurationState struct {
	AddressSpace        []string                                        `json:"address_space"`
	RadiusServerAddress string                                          `json:"radius_server_address"`
	RadiusServerSecret  string                                          `json:"radius_server_secret"`
	VpnClientProtocols  []string                                        `json:"vpn_client_protocols"`
	RevokedCertificate  []VpnClientConfigurationRevokedCertificateState `json:"revoked_certificate"`
	RootCertificate     []VpnClientConfigurationRootCertificateState    `json:"root_certificate"`
}

type VpnClientConfigurationRevokedCertificateState struct {
	Name       string `json:"name"`
	Thumbprint string `json:"thumbprint"`
}

type VpnClientConfigurationRootCertificateState struct {
	Name           string `json:"name"`
	PublicCertData string `json:"public_cert_data"`
}
