// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_key_vault_secret

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_key_vault_secret.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackKeyVaultSecretState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akvs *Resource) Type() string {
	return "azurestack_key_vault_secret"
}

// LocalName returns the local name for [Resource].
func (akvs *Resource) LocalName() string {
	return akvs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akvs *Resource) Configuration() interface{} {
	return akvs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akvs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akvs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akvs *Resource) Dependencies() terra.Dependencies {
	return akvs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akvs *Resource) LifecycleManagement() *terra.Lifecycle {
	return akvs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akvs *Resource) Attributes() azurestackKeyVaultSecretAttributes {
	return azurestackKeyVaultSecretAttributes{ref: terra.ReferenceResource(akvs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akvs *Resource) ImportState(state io.Reader) error {
	akvs.state = &azurestackKeyVaultSecretState{}
	if err := json.NewDecoder(state).Decode(akvs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akvs.Type(), akvs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akvs *Resource) State() (*azurestackKeyVaultSecretState, bool) {
	return akvs.state, akvs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akvs *Resource) StateMust() *azurestackKeyVaultSecretState {
	if akvs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akvs.Type(), akvs.LocalName()))
	}
	return akvs.state
}

// Args contains the configurations for azurestack_key_vault_secret.
type Args struct {
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// ExpirationDate: string, optional
	ExpirationDate terra.StringValue `hcl:"expiration_date,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NotBeforeDate: string, optional
	NotBeforeDate terra.StringValue `hcl:"not_before_date,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackKeyVaultSecretAttributes struct {
	ref terra.Reference
}

// ContentType returns a reference to field content_type of azurestack_key_vault_secret.
func (akvs azurestackKeyVaultSecretAttributes) ContentType() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("content_type"))
}

// ExpirationDate returns a reference to field expiration_date of azurestack_key_vault_secret.
func (akvs azurestackKeyVaultSecretAttributes) ExpirationDate() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("expiration_date"))
}

// Id returns a reference to field id of azurestack_key_vault_secret.
func (akvs azurestackKeyVaultSecretAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("id"))
}

// KeyVaultId returns a reference to field key_vault_id of azurestack_key_vault_secret.
func (akvs azurestackKeyVaultSecretAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("key_vault_id"))
}

// Name returns a reference to field name of azurestack_key_vault_secret.
func (akvs azurestackKeyVaultSecretAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("name"))
}

// NotBeforeDate returns a reference to field not_before_date of azurestack_key_vault_secret.
func (akvs azurestackKeyVaultSecretAttributes) NotBeforeDate() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("not_before_date"))
}

// Tags returns a reference to field tags of azurestack_key_vault_secret.
func (akvs azurestackKeyVaultSecretAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akvs.ref.Append("tags"))
}

// Value returns a reference to field value of azurestack_key_vault_secret.
func (akvs azurestackKeyVaultSecretAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("value"))
}

// Version returns a reference to field version of azurestack_key_vault_secret.
func (akvs azurestackKeyVaultSecretAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("version"))
}

func (akvs azurestackKeyVaultSecretAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akvs.ref.Append("timeouts"))
}

type azurestackKeyVaultSecretState struct {
	ContentType    string            `json:"content_type"`
	ExpirationDate string            `json:"expiration_date"`
	Id             string            `json:"id"`
	KeyVaultId     string            `json:"key_vault_id"`
	Name           string            `json:"name"`
	NotBeforeDate  string            `json:"not_before_date"`
	Tags           map[string]string `json:"tags"`
	Value          string            `json:"value"`
	Version        string            `json:"version"`
	Timeouts       *TimeoutsState    `json:"timeouts"`
}
