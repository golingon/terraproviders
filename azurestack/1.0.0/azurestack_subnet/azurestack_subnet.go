// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_subnet

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_subnet.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackSubnetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (as *Resource) Type() string {
	return "azurestack_subnet"
}

// LocalName returns the local name for [Resource].
func (as *Resource) LocalName() string {
	return as.Name
}

// Configuration returns the configuration (args) for [Resource].
func (as *Resource) Configuration() interface{} {
	return as.Args
}

// DependOn is used for other resources to depend on [Resource].
func (as *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(as)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (as *Resource) Dependencies() terra.Dependencies {
	return as.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (as *Resource) LifecycleManagement() *terra.Lifecycle {
	return as.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (as *Resource) Attributes() azurestackSubnetAttributes {
	return azurestackSubnetAttributes{ref: terra.ReferenceResource(as)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (as *Resource) ImportState(state io.Reader) error {
	as.state = &azurestackSubnetState{}
	if err := json.NewDecoder(state).Decode(as.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", as.Type(), as.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (as *Resource) State() (*azurestackSubnetState, bool) {
	return as.state, as.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (as *Resource) StateMust() *azurestackSubnetState {
	if as.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", as.Type(), as.LocalName()))
	}
	return as.state
}

// Args contains the configurations for azurestack_subnet.
type Args struct {
	// AddressPrefix: string, required
	AddressPrefix terra.StringValue `hcl:"address_prefix,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// VirtualNetworkName: string, required
	VirtualNetworkName terra.StringValue `hcl:"virtual_network_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackSubnetAttributes struct {
	ref terra.Reference
}

// AddressPrefix returns a reference to field address_prefix of azurestack_subnet.
func (as azurestackSubnetAttributes) AddressPrefix() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("address_prefix"))
}

// Id returns a reference to field id of azurestack_subnet.
func (as azurestackSubnetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("id"))
}

// Name returns a reference to field name of azurestack_subnet.
func (as azurestackSubnetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurestack_subnet.
func (as azurestackSubnetAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("resource_group_name"))
}

// VirtualNetworkName returns a reference to field virtual_network_name of azurestack_subnet.
func (as azurestackSubnetAttributes) VirtualNetworkName() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("virtual_network_name"))
}

func (as azurestackSubnetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](as.ref.Append("timeouts"))
}

type azurestackSubnetState struct {
	AddressPrefix      string         `json:"address_prefix"`
	Id                 string         `json:"id"`
	Name               string         `json:"name"`
	ResourceGroupName  string         `json:"resource_group_name"`
	VirtualNetworkName string         `json:"virtual_network_name"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
