// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_lb

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_lb.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackLbState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (al *Resource) Type() string {
	return "azurestack_lb"
}

// LocalName returns the local name for [Resource].
func (al *Resource) LocalName() string {
	return al.Name
}

// Configuration returns the configuration (args) for [Resource].
func (al *Resource) Configuration() interface{} {
	return al.Args
}

// DependOn is used for other resources to depend on [Resource].
func (al *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(al)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (al *Resource) Dependencies() terra.Dependencies {
	return al.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (al *Resource) LifecycleManagement() *terra.Lifecycle {
	return al.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (al *Resource) Attributes() azurestackLbAttributes {
	return azurestackLbAttributes{ref: terra.ReferenceResource(al)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (al *Resource) ImportState(state io.Reader) error {
	al.state = &azurestackLbState{}
	if err := json.NewDecoder(state).Decode(al.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", al.Type(), al.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (al *Resource) State() (*azurestackLbState, bool) {
	return al.state, al.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (al *Resource) StateMust() *azurestackLbState {
	if al.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", al.Type(), al.LocalName()))
	}
	return al.state
}

// Args contains the configurations for azurestack_lb.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// FrontendIpConfiguration: min=0
	FrontendIpConfiguration []FrontendIpConfiguration `hcl:"frontend_ip_configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackLbAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurestack_lb.
func (al azurestackLbAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("id"))
}

// Location returns a reference to field location of azurestack_lb.
func (al azurestackLbAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("location"))
}

// Name returns a reference to field name of azurestack_lb.
func (al azurestackLbAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("name"))
}

// PrivateIpAddress returns a reference to field private_ip_address of azurestack_lb.
func (al azurestackLbAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("private_ip_address"))
}

// PrivateIpAddresses returns a reference to field private_ip_addresses of azurestack_lb.
func (al azurestackLbAttributes) PrivateIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](al.ref.Append("private_ip_addresses"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurestack_lb.
func (al azurestackLbAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("resource_group_name"))
}

// Sku returns a reference to field sku of azurestack_lb.
func (al azurestackLbAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("sku"))
}

// Tags returns a reference to field tags of azurestack_lb.
func (al azurestackLbAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](al.ref.Append("tags"))
}

func (al azurestackLbAttributes) FrontendIpConfiguration() terra.ListValue[FrontendIpConfigurationAttributes] {
	return terra.ReferenceAsList[FrontendIpConfigurationAttributes](al.ref.Append("frontend_ip_configuration"))
}

func (al azurestackLbAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](al.ref.Append("timeouts"))
}

type azurestackLbState struct {
	Id                      string                         `json:"id"`
	Location                string                         `json:"location"`
	Name                    string                         `json:"name"`
	PrivateIpAddress        string                         `json:"private_ip_address"`
	PrivateIpAddresses      []string                       `json:"private_ip_addresses"`
	ResourceGroupName       string                         `json:"resource_group_name"`
	Sku                     string                         `json:"sku"`
	Tags                    map[string]string              `json:"tags"`
	FrontendIpConfiguration []FrontendIpConfigurationState `json:"frontend_ip_configuration"`
	Timeouts                *TimeoutsState                 `json:"timeouts"`
}
