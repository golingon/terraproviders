// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_storage_account

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_storage_account.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackStorageAccountState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asa *Resource) Type() string {
	return "azurestack_storage_account"
}

// LocalName returns the local name for [Resource].
func (asa *Resource) LocalName() string {
	return asa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asa *Resource) Configuration() interface{} {
	return asa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asa *Resource) Dependencies() terra.Dependencies {
	return asa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asa *Resource) LifecycleManagement() *terra.Lifecycle {
	return asa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asa *Resource) Attributes() azurestackStorageAccountAttributes {
	return azurestackStorageAccountAttributes{ref: terra.ReferenceResource(asa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asa *Resource) ImportState(state io.Reader) error {
	asa.state = &azurestackStorageAccountState{}
	if err := json.NewDecoder(state).Decode(asa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asa.Type(), asa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asa *Resource) State() (*azurestackStorageAccountState, bool) {
	return asa.state, asa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asa *Resource) StateMust() *azurestackStorageAccountState {
	if asa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asa.Type(), asa.LocalName()))
	}
	return asa.state
}

// Args contains the configurations for azurestack_storage_account.
type Args struct {
	// AccountEncryptionSource: string, optional
	AccountEncryptionSource terra.StringValue `hcl:"account_encryption_source,attr"`
	// AccountKind: string, optional
	AccountKind terra.StringValue `hcl:"account_kind,attr"`
	// AccountReplicationType: string, required
	AccountReplicationType terra.StringValue `hcl:"account_replication_type,attr" validate:"required"`
	// AccountTier: string, required
	AccountTier terra.StringValue `hcl:"account_tier,attr" validate:"required"`
	// EnableBlobEncryption: bool, optional
	EnableBlobEncryption terra.BoolValue `hcl:"enable_blob_encryption,attr"`
	// EnableHttpsTrafficOnly: bool, optional
	EnableHttpsTrafficOnly terra.BoolValue `hcl:"enable_https_traffic_only,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// CustomDomain: optional
	CustomDomain *CustomDomain `hcl:"custom_domain,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackStorageAccountAttributes struct {
	ref terra.Reference
}

// AccountEncryptionSource returns a reference to field account_encryption_source of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) AccountEncryptionSource() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("account_encryption_source"))
}

// AccountKind returns a reference to field account_kind of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) AccountKind() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("account_kind"))
}

// AccountReplicationType returns a reference to field account_replication_type of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) AccountReplicationType() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("account_replication_type"))
}

// AccountTier returns a reference to field account_tier of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) AccountTier() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("account_tier"))
}

// EnableBlobEncryption returns a reference to field enable_blob_encryption of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) EnableBlobEncryption() terra.BoolValue {
	return terra.ReferenceAsBool(asa.ref.Append("enable_blob_encryption"))
}

// EnableHttpsTrafficOnly returns a reference to field enable_https_traffic_only of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) EnableHttpsTrafficOnly() terra.BoolValue {
	return terra.ReferenceAsBool(asa.ref.Append("enable_https_traffic_only"))
}

// Id returns a reference to field id of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("id"))
}

// Location returns a reference to field location of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("location"))
}

// Name returns a reference to field name of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("name"))
}

// PrimaryAccessKey returns a reference to field primary_access_key of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) PrimaryAccessKey() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("primary_access_key"))
}

// PrimaryBlobConnectionString returns a reference to field primary_blob_connection_string of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) PrimaryBlobConnectionString() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("primary_blob_connection_string"))
}

// PrimaryBlobEndpoint returns a reference to field primary_blob_endpoint of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) PrimaryBlobEndpoint() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("primary_blob_endpoint"))
}

// PrimaryConnectionString returns a reference to field primary_connection_string of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) PrimaryConnectionString() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("primary_connection_string"))
}

// PrimaryFileEndpoint returns a reference to field primary_file_endpoint of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) PrimaryFileEndpoint() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("primary_file_endpoint"))
}

// PrimaryLocation returns a reference to field primary_location of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) PrimaryLocation() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("primary_location"))
}

// PrimaryQueueEndpoint returns a reference to field primary_queue_endpoint of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) PrimaryQueueEndpoint() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("primary_queue_endpoint"))
}

// PrimaryTableEndpoint returns a reference to field primary_table_endpoint of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) PrimaryTableEndpoint() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("primary_table_endpoint"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("resource_group_name"))
}

// SecondaryAccessKey returns a reference to field secondary_access_key of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) SecondaryAccessKey() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("secondary_access_key"))
}

// SecondaryBlobConnectionString returns a reference to field secondary_blob_connection_string of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) SecondaryBlobConnectionString() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("secondary_blob_connection_string"))
}

// SecondaryBlobEndpoint returns a reference to field secondary_blob_endpoint of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) SecondaryBlobEndpoint() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("secondary_blob_endpoint"))
}

// SecondaryConnectionString returns a reference to field secondary_connection_string of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) SecondaryConnectionString() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("secondary_connection_string"))
}

// SecondaryLocation returns a reference to field secondary_location of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) SecondaryLocation() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("secondary_location"))
}

// SecondaryQueueEndpoint returns a reference to field secondary_queue_endpoint of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) SecondaryQueueEndpoint() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("secondary_queue_endpoint"))
}

// SecondaryTableEndpoint returns a reference to field secondary_table_endpoint of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) SecondaryTableEndpoint() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("secondary_table_endpoint"))
}

// Tags returns a reference to field tags of azurestack_storage_account.
func (asa azurestackStorageAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asa.ref.Append("tags"))
}

func (asa azurestackStorageAccountAttributes) CustomDomain() terra.ListValue[CustomDomainAttributes] {
	return terra.ReferenceAsList[CustomDomainAttributes](asa.ref.Append("custom_domain"))
}

func (asa azurestackStorageAccountAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asa.ref.Append("timeouts"))
}

type azurestackStorageAccountState struct {
	AccountEncryptionSource       string              `json:"account_encryption_source"`
	AccountKind                   string              `json:"account_kind"`
	AccountReplicationType        string              `json:"account_replication_type"`
	AccountTier                   string              `json:"account_tier"`
	EnableBlobEncryption          bool                `json:"enable_blob_encryption"`
	EnableHttpsTrafficOnly        bool                `json:"enable_https_traffic_only"`
	Id                            string              `json:"id"`
	Location                      string              `json:"location"`
	Name                          string              `json:"name"`
	PrimaryAccessKey              string              `json:"primary_access_key"`
	PrimaryBlobConnectionString   string              `json:"primary_blob_connection_string"`
	PrimaryBlobEndpoint           string              `json:"primary_blob_endpoint"`
	PrimaryConnectionString       string              `json:"primary_connection_string"`
	PrimaryFileEndpoint           string              `json:"primary_file_endpoint"`
	PrimaryLocation               string              `json:"primary_location"`
	PrimaryQueueEndpoint          string              `json:"primary_queue_endpoint"`
	PrimaryTableEndpoint          string              `json:"primary_table_endpoint"`
	ResourceGroupName             string              `json:"resource_group_name"`
	SecondaryAccessKey            string              `json:"secondary_access_key"`
	SecondaryBlobConnectionString string              `json:"secondary_blob_connection_string"`
	SecondaryBlobEndpoint         string              `json:"secondary_blob_endpoint"`
	SecondaryConnectionString     string              `json:"secondary_connection_string"`
	SecondaryLocation             string              `json:"secondary_location"`
	SecondaryQueueEndpoint        string              `json:"secondary_queue_endpoint"`
	SecondaryTableEndpoint        string              `json:"secondary_table_endpoint"`
	Tags                          map[string]string   `json:"tags"`
	CustomDomain                  []CustomDomainState `json:"custom_domain"`
	Timeouts                      *TimeoutsState      `json:"timeouts"`
}
