// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_availability_set

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_availability_set.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackAvailabilitySetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aas *Resource) Type() string {
	return "azurestack_availability_set"
}

// LocalName returns the local name for [Resource].
func (aas *Resource) LocalName() string {
	return aas.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aas *Resource) Configuration() interface{} {
	return aas.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aas *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aas)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aas *Resource) Dependencies() terra.Dependencies {
	return aas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aas *Resource) LifecycleManagement() *terra.Lifecycle {
	return aas.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aas *Resource) Attributes() azurestackAvailabilitySetAttributes {
	return azurestackAvailabilitySetAttributes{ref: terra.ReferenceResource(aas)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aas *Resource) ImportState(state io.Reader) error {
	aas.state = &azurestackAvailabilitySetState{}
	if err := json.NewDecoder(state).Decode(aas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aas.Type(), aas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aas *Resource) State() (*azurestackAvailabilitySetState, bool) {
	return aas.state, aas.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aas *Resource) StateMust() *azurestackAvailabilitySetState {
	if aas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aas.Type(), aas.LocalName()))
	}
	return aas.state
}

// Args contains the configurations for azurestack_availability_set.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Managed: bool, optional
	Managed terra.BoolValue `hcl:"managed,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PlatformFaultDomainCount: number, optional
	PlatformFaultDomainCount terra.NumberValue `hcl:"platform_fault_domain_count,attr"`
	// PlatformUpdateDomainCount: number, optional
	PlatformUpdateDomainCount terra.NumberValue `hcl:"platform_update_domain_count,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackAvailabilitySetAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurestack_availability_set.
func (aas azurestackAvailabilitySetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("id"))
}

// Location returns a reference to field location of azurestack_availability_set.
func (aas azurestackAvailabilitySetAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("location"))
}

// Managed returns a reference to field managed of azurestack_availability_set.
func (aas azurestackAvailabilitySetAttributes) Managed() terra.BoolValue {
	return terra.ReferenceAsBool(aas.ref.Append("managed"))
}

// Name returns a reference to field name of azurestack_availability_set.
func (aas azurestackAvailabilitySetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("name"))
}

// PlatformFaultDomainCount returns a reference to field platform_fault_domain_count of azurestack_availability_set.
func (aas azurestackAvailabilitySetAttributes) PlatformFaultDomainCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aas.ref.Append("platform_fault_domain_count"))
}

// PlatformUpdateDomainCount returns a reference to field platform_update_domain_count of azurestack_availability_set.
func (aas azurestackAvailabilitySetAttributes) PlatformUpdateDomainCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aas.ref.Append("platform_update_domain_count"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurestack_availability_set.
func (aas azurestackAvailabilitySetAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurestack_availability_set.
func (aas azurestackAvailabilitySetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aas.ref.Append("tags"))
}

func (aas azurestackAvailabilitySetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aas.ref.Append("timeouts"))
}

type azurestackAvailabilitySetState struct {
	Id                        string            `json:"id"`
	Location                  string            `json:"location"`
	Managed                   bool              `json:"managed"`
	Name                      string            `json:"name"`
	PlatformFaultDomainCount  float64           `json:"platform_fault_domain_count"`
	PlatformUpdateDomainCount float64           `json:"platform_update_domain_count"`
	ResourceGroupName         string            `json:"resource_group_name"`
	Tags                      map[string]string `json:"tags"`
	Timeouts                  *TimeoutsState    `json:"timeouts"`
}
