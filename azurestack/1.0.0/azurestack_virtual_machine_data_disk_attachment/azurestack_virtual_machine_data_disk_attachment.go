// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_virtual_machine_data_disk_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_virtual_machine_data_disk_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackVirtualMachineDataDiskAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avmdda *Resource) Type() string {
	return "azurestack_virtual_machine_data_disk_attachment"
}

// LocalName returns the local name for [Resource].
func (avmdda *Resource) LocalName() string {
	return avmdda.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avmdda *Resource) Configuration() interface{} {
	return avmdda.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avmdda *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avmdda)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avmdda *Resource) Dependencies() terra.Dependencies {
	return avmdda.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avmdda *Resource) LifecycleManagement() *terra.Lifecycle {
	return avmdda.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avmdda *Resource) Attributes() azurestackVirtualMachineDataDiskAttachmentAttributes {
	return azurestackVirtualMachineDataDiskAttachmentAttributes{ref: terra.ReferenceResource(avmdda)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avmdda *Resource) ImportState(state io.Reader) error {
	avmdda.state = &azurestackVirtualMachineDataDiskAttachmentState{}
	if err := json.NewDecoder(state).Decode(avmdda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avmdda.Type(), avmdda.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avmdda *Resource) State() (*azurestackVirtualMachineDataDiskAttachmentState, bool) {
	return avmdda.state, avmdda.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avmdda *Resource) StateMust() *azurestackVirtualMachineDataDiskAttachmentState {
	if avmdda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avmdda.Type(), avmdda.LocalName()))
	}
	return avmdda.state
}

// Args contains the configurations for azurestack_virtual_machine_data_disk_attachment.
type Args struct {
	// Caching: string, required
	Caching terra.StringValue `hcl:"caching,attr" validate:"required"`
	// CreateOption: string, optional
	CreateOption terra.StringValue `hcl:"create_option,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Lun: number, required
	Lun terra.NumberValue `hcl:"lun,attr" validate:"required"`
	// ManagedDiskId: string, required
	ManagedDiskId terra.StringValue `hcl:"managed_disk_id,attr" validate:"required"`
	// VirtualMachineId: string, required
	VirtualMachineId terra.StringValue `hcl:"virtual_machine_id,attr" validate:"required"`
	// WriteAcceleratorEnabled: bool, optional
	WriteAcceleratorEnabled terra.BoolValue `hcl:"write_accelerator_enabled,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackVirtualMachineDataDiskAttachmentAttributes struct {
	ref terra.Reference
}

// Caching returns a reference to field caching of azurestack_virtual_machine_data_disk_attachment.
func (avmdda azurestackVirtualMachineDataDiskAttachmentAttributes) Caching() terra.StringValue {
	return terra.ReferenceAsString(avmdda.ref.Append("caching"))
}

// CreateOption returns a reference to field create_option of azurestack_virtual_machine_data_disk_attachment.
func (avmdda azurestackVirtualMachineDataDiskAttachmentAttributes) CreateOption() terra.StringValue {
	return terra.ReferenceAsString(avmdda.ref.Append("create_option"))
}

// Id returns a reference to field id of azurestack_virtual_machine_data_disk_attachment.
func (avmdda azurestackVirtualMachineDataDiskAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avmdda.ref.Append("id"))
}

// Lun returns a reference to field lun of azurestack_virtual_machine_data_disk_attachment.
func (avmdda azurestackVirtualMachineDataDiskAttachmentAttributes) Lun() terra.NumberValue {
	return terra.ReferenceAsNumber(avmdda.ref.Append("lun"))
}

// ManagedDiskId returns a reference to field managed_disk_id of azurestack_virtual_machine_data_disk_attachment.
func (avmdda azurestackVirtualMachineDataDiskAttachmentAttributes) ManagedDiskId() terra.StringValue {
	return terra.ReferenceAsString(avmdda.ref.Append("managed_disk_id"))
}

// VirtualMachineId returns a reference to field virtual_machine_id of azurestack_virtual_machine_data_disk_attachment.
func (avmdda azurestackVirtualMachineDataDiskAttachmentAttributes) VirtualMachineId() terra.StringValue {
	return terra.ReferenceAsString(avmdda.ref.Append("virtual_machine_id"))
}

// WriteAcceleratorEnabled returns a reference to field write_accelerator_enabled of azurestack_virtual_machine_data_disk_attachment.
func (avmdda azurestackVirtualMachineDataDiskAttachmentAttributes) WriteAcceleratorEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(avmdda.ref.Append("write_accelerator_enabled"))
}

func (avmdda azurestackVirtualMachineDataDiskAttachmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avmdda.ref.Append("timeouts"))
}

type azurestackVirtualMachineDataDiskAttachmentState struct {
	Caching                 string         `json:"caching"`
	CreateOption            string         `json:"create_option"`
	Id                      string         `json:"id"`
	Lun                     float64        `json:"lun"`
	ManagedDiskId           string         `json:"managed_disk_id"`
	VirtualMachineId        string         `json:"virtual_machine_id"`
	WriteAcceleratorEnabled bool           `json:"write_accelerator_enabled"`
	Timeouts                *TimeoutsState `json:"timeouts"`
}
