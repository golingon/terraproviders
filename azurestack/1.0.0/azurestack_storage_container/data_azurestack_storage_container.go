// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_storage_container

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource azurestack_storage_container.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (asc *DataSource) DataSource() string {
	return "azurestack_storage_container"
}

// LocalName returns the local name for [DataSource].
func (asc *DataSource) LocalName() string {
	return asc.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (asc *DataSource) Configuration() interface{} {
	return asc.Args
}

// Attributes returns the attributes for [DataSource].
func (asc *DataSource) Attributes() dataAzurestackStorageContainerAttributes {
	return dataAzurestackStorageContainerAttributes{ref: terra.ReferenceDataSource(asc)}
}

// DataArgs contains the configurations for azurestack_storage_container.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccountName: string, required
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *DataTimeouts `hcl:"timeouts,block"`
}

type dataAzurestackStorageContainerAttributes struct {
	ref terra.Reference
}

// ContainerAccessType returns a reference to field container_access_type of azurestack_storage_container.
func (asc dataAzurestackStorageContainerAttributes) ContainerAccessType() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("container_access_type"))
}

// HasImmutabilityPolicy returns a reference to field has_immutability_policy of azurestack_storage_container.
func (asc dataAzurestackStorageContainerAttributes) HasImmutabilityPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(asc.ref.Append("has_immutability_policy"))
}

// HasLegalHold returns a reference to field has_legal_hold of azurestack_storage_container.
func (asc dataAzurestackStorageContainerAttributes) HasLegalHold() terra.BoolValue {
	return terra.ReferenceAsBool(asc.ref.Append("has_legal_hold"))
}

// Id returns a reference to field id of azurestack_storage_container.
func (asc dataAzurestackStorageContainerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("id"))
}

// Metadata returns a reference to field metadata of azurestack_storage_container.
func (asc dataAzurestackStorageContainerAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asc.ref.Append("metadata"))
}

// Name returns a reference to field name of azurestack_storage_container.
func (asc dataAzurestackStorageContainerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("name"))
}

// StorageAccountName returns a reference to field storage_account_name of azurestack_storage_container.
func (asc dataAzurestackStorageContainerAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("storage_account_name"))
}

func (asc dataAzurestackStorageContainerAttributes) Timeouts() DataTimeoutsAttributes {
	return terra.ReferenceAsSingle[DataTimeoutsAttributes](asc.ref.Append("timeouts"))
}
