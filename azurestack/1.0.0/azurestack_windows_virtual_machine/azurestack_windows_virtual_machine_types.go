// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_windows_virtual_machine

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AdditionalCapabilities struct {
	// UltraSsdEnabled: bool, optional
	UltraSsdEnabled terra.BoolValue `hcl:"ultra_ssd_enabled,attr"`
}

type AdditionalUnattendContent struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Setting: string, required
	Setting terra.StringValue `hcl:"setting,attr" validate:"required"`
}

type BootDiagnostics struct {
	// StorageAccountUri: string, required
	StorageAccountUri terra.StringValue `hcl:"storage_account_uri,attr" validate:"required"`
}

type OsDisk struct {
	// Caching: string, required
	Caching terra.StringValue `hcl:"caching,attr" validate:"required"`
	// DiskEncryptionSetId: string, optional
	DiskEncryptionSetId terra.StringValue `hcl:"disk_encryption_set_id,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// StorageAccountType: string, required
	StorageAccountType terra.StringValue `hcl:"storage_account_type,attr" validate:"required"`
	// WriteAcceleratorEnabled: bool, optional
	WriteAcceleratorEnabled terra.BoolValue `hcl:"write_accelerator_enabled,attr"`
	// OsDiskDiffDiskSettings: optional
	DiffDiskSettings *OsDiskDiffDiskSettings `hcl:"diff_disk_settings,block"`
}

type OsDiskDiffDiskSettings struct {
	// Option: string, required
	Option terra.StringValue `hcl:"option,attr" validate:"required"`
}

type Plan struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Product: string, required
	Product terra.StringValue `hcl:"product,attr" validate:"required"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
}

type Secret struct {
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// SecretCertificate: min=1
	Certificate []SecretCertificate `hcl:"certificate,block" validate:"min=1"`
}

type SecretCertificate struct {
	// Store: string, required
	Store terra.StringValue `hcl:"store,attr" validate:"required"`
}

type SourceImageReference struct {
	// Offer: string, required
	Offer terra.StringValue `hcl:"offer,attr" validate:"required"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type WinrmListener struct {
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
}

type AdditionalCapabilitiesAttributes struct {
	ref terra.Reference
}

func (ac AdditionalCapabilitiesAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AdditionalCapabilitiesAttributes) InternalWithRef(ref terra.Reference) AdditionalCapabilitiesAttributes {
	return AdditionalCapabilitiesAttributes{ref: ref}
}

func (ac AdditionalCapabilitiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AdditionalCapabilitiesAttributes) UltraSsdEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("ultra_ssd_enabled"))
}

type AdditionalUnattendContentAttributes struct {
	ref terra.Reference
}

func (auc AdditionalUnattendContentAttributes) InternalRef() (terra.Reference, error) {
	return auc.ref, nil
}

func (auc AdditionalUnattendContentAttributes) InternalWithRef(ref terra.Reference) AdditionalUnattendContentAttributes {
	return AdditionalUnattendContentAttributes{ref: ref}
}

func (auc AdditionalUnattendContentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return auc.ref.InternalTokens()
}

func (auc AdditionalUnattendContentAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(auc.ref.Append("content"))
}

func (auc AdditionalUnattendContentAttributes) Setting() terra.StringValue {
	return terra.ReferenceAsString(auc.ref.Append("setting"))
}

type BootDiagnosticsAttributes struct {
	ref terra.Reference
}

func (bd BootDiagnosticsAttributes) InternalRef() (terra.Reference, error) {
	return bd.ref, nil
}

func (bd BootDiagnosticsAttributes) InternalWithRef(ref terra.Reference) BootDiagnosticsAttributes {
	return BootDiagnosticsAttributes{ref: ref}
}

func (bd BootDiagnosticsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bd.ref.InternalTokens()
}

func (bd BootDiagnosticsAttributes) StorageAccountUri() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("storage_account_uri"))
}

type OsDiskAttributes struct {
	ref terra.Reference
}

func (od OsDiskAttributes) InternalRef() (terra.Reference, error) {
	return od.ref, nil
}

func (od OsDiskAttributes) InternalWithRef(ref terra.Reference) OsDiskAttributes {
	return OsDiskAttributes{ref: ref}
}

func (od OsDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return od.ref.InternalTokens()
}

func (od OsDiskAttributes) Caching() terra.StringValue {
	return terra.ReferenceAsString(od.ref.Append("caching"))
}

func (od OsDiskAttributes) DiskEncryptionSetId() terra.StringValue {
	return terra.ReferenceAsString(od.ref.Append("disk_encryption_set_id"))
}

func (od OsDiskAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("disk_size_gb"))
}

func (od OsDiskAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(od.ref.Append("name"))
}

func (od OsDiskAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceAsString(od.ref.Append("storage_account_type"))
}

func (od OsDiskAttributes) WriteAcceleratorEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(od.ref.Append("write_accelerator_enabled"))
}

func (od OsDiskAttributes) DiffDiskSettings() terra.ListValue[OsDiskDiffDiskSettingsAttributes] {
	return terra.ReferenceAsList[OsDiskDiffDiskSettingsAttributes](od.ref.Append("diff_disk_settings"))
}

type OsDiskDiffDiskSettingsAttributes struct {
	ref terra.Reference
}

func (dds OsDiskDiffDiskSettingsAttributes) InternalRef() (terra.Reference, error) {
	return dds.ref, nil
}

func (dds OsDiskDiffDiskSettingsAttributes) InternalWithRef(ref terra.Reference) OsDiskDiffDiskSettingsAttributes {
	return OsDiskDiffDiskSettingsAttributes{ref: ref}
}

func (dds OsDiskDiffDiskSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dds.ref.InternalTokens()
}

func (dds OsDiskDiffDiskSettingsAttributes) Option() terra.StringValue {
	return terra.ReferenceAsString(dds.ref.Append("option"))
}

type PlanAttributes struct {
	ref terra.Reference
}

func (p PlanAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PlanAttributes) InternalWithRef(ref terra.Reference) PlanAttributes {
	return PlanAttributes{ref: ref}
}

func (p PlanAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PlanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p PlanAttributes) Product() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("product"))
}

func (p PlanAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("publisher"))
}

type SecretAttributes struct {
	ref terra.Reference
}

func (s SecretAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SecretAttributes) InternalWithRef(ref terra.Reference) SecretAttributes {
	return SecretAttributes{ref: ref}
}

func (s SecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SecretAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key_vault_id"))
}

func (s SecretAttributes) Certificate() terra.SetValue[SecretCertificateAttributes] {
	return terra.ReferenceAsSet[SecretCertificateAttributes](s.ref.Append("certificate"))
}

type SecretCertificateAttributes struct {
	ref terra.Reference
}

func (c SecretCertificateAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c SecretCertificateAttributes) InternalWithRef(ref terra.Reference) SecretCertificateAttributes {
	return SecretCertificateAttributes{ref: ref}
}

func (c SecretCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c SecretCertificateAttributes) Store() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("store"))
}

type SourceImageReferenceAttributes struct {
	ref terra.Reference
}

func (sir SourceImageReferenceAttributes) InternalRef() (terra.Reference, error) {
	return sir.ref, nil
}

func (sir SourceImageReferenceAttributes) InternalWithRef(ref terra.Reference) SourceImageReferenceAttributes {
	return SourceImageReferenceAttributes{ref: ref}
}

func (sir SourceImageReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sir.ref.InternalTokens()
}

func (sir SourceImageReferenceAttributes) Offer() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("offer"))
}

func (sir SourceImageReferenceAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("publisher"))
}

func (sir SourceImageReferenceAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("sku"))
}

func (sir SourceImageReferenceAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("version"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type WinrmListenerAttributes struct {
	ref terra.Reference
}

func (wl WinrmListenerAttributes) InternalRef() (terra.Reference, error) {
	return wl.ref, nil
}

func (wl WinrmListenerAttributes) InternalWithRef(ref terra.Reference) WinrmListenerAttributes {
	return WinrmListenerAttributes{ref: ref}
}

func (wl WinrmListenerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wl.ref.InternalTokens()
}

func (wl WinrmListenerAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(wl.ref.Append("protocol"))
}

type AdditionalCapabilitiesState struct {
	UltraSsdEnabled bool `json:"ultra_ssd_enabled"`
}

type AdditionalUnattendContentState struct {
	Content string `json:"content"`
	Setting string `json:"setting"`
}

type BootDiagnosticsState struct {
	StorageAccountUri string `json:"storage_account_uri"`
}

type OsDiskState struct {
	Caching                 string                        `json:"caching"`
	DiskEncryptionSetId     string                        `json:"disk_encryption_set_id"`
	DiskSizeGb              float64                       `json:"disk_size_gb"`
	Name                    string                        `json:"name"`
	StorageAccountType      string                        `json:"storage_account_type"`
	WriteAcceleratorEnabled bool                          `json:"write_accelerator_enabled"`
	DiffDiskSettings        []OsDiskDiffDiskSettingsState `json:"diff_disk_settings"`
}

type OsDiskDiffDiskSettingsState struct {
	Option string `json:"option"`
}

type PlanState struct {
	Name      string `json:"name"`
	Product   string `json:"product"`
	Publisher string `json:"publisher"`
}

type SecretState struct {
	KeyVaultId  string                   `json:"key_vault_id"`
	Certificate []SecretCertificateState `json:"certificate"`
}

type SecretCertificateState struct {
	Store string `json:"store"`
}

type SourceImageReferenceState struct {
	Offer     string `json:"offer"`
	Publisher string `json:"publisher"`
	Sku       string `json:"sku"`
	Version   string `json:"version"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type WinrmListenerState struct {
	Protocol string `json:"protocol"`
}
