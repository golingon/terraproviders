// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_dns_zone

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_dns_zone.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackDnsZoneState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adz *Resource) Type() string {
	return "azurestack_dns_zone"
}

// LocalName returns the local name for [Resource].
func (adz *Resource) LocalName() string {
	return adz.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adz *Resource) Configuration() interface{} {
	return adz.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adz *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adz)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adz *Resource) Dependencies() terra.Dependencies {
	return adz.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adz *Resource) LifecycleManagement() *terra.Lifecycle {
	return adz.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adz *Resource) Attributes() azurestackDnsZoneAttributes {
	return azurestackDnsZoneAttributes{ref: terra.ReferenceResource(adz)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adz *Resource) ImportState(state io.Reader) error {
	adz.state = &azurestackDnsZoneState{}
	if err := json.NewDecoder(state).Decode(adz.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adz.Type(), adz.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adz *Resource) State() (*azurestackDnsZoneState, bool) {
	return adz.state, adz.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adz *Resource) StateMust() *azurestackDnsZoneState {
	if adz.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adz.Type(), adz.LocalName()))
	}
	return adz.state
}

// Args contains the configurations for azurestack_dns_zone.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// SoaRecord: optional
	SoaRecord *SoaRecord `hcl:"soa_record,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackDnsZoneAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurestack_dns_zone.
func (adz azurestackDnsZoneAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adz.ref.Append("id"))
}

// MaxNumberOfRecordSets returns a reference to field max_number_of_record_sets of azurestack_dns_zone.
func (adz azurestackDnsZoneAttributes) MaxNumberOfRecordSets() terra.NumberValue {
	return terra.ReferenceAsNumber(adz.ref.Append("max_number_of_record_sets"))
}

// Name returns a reference to field name of azurestack_dns_zone.
func (adz azurestackDnsZoneAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adz.ref.Append("name"))
}

// NameServers returns a reference to field name_servers of azurestack_dns_zone.
func (adz azurestackDnsZoneAttributes) NameServers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adz.ref.Append("name_servers"))
}

// NumberOfRecordSets returns a reference to field number_of_record_sets of azurestack_dns_zone.
func (adz azurestackDnsZoneAttributes) NumberOfRecordSets() terra.NumberValue {
	return terra.ReferenceAsNumber(adz.ref.Append("number_of_record_sets"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurestack_dns_zone.
func (adz azurestackDnsZoneAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(adz.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurestack_dns_zone.
func (adz azurestackDnsZoneAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adz.ref.Append("tags"))
}

func (adz azurestackDnsZoneAttributes) SoaRecord() terra.ListValue[SoaRecordAttributes] {
	return terra.ReferenceAsList[SoaRecordAttributes](adz.ref.Append("soa_record"))
}

func (adz azurestackDnsZoneAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adz.ref.Append("timeouts"))
}

type azurestackDnsZoneState struct {
	Id                    string            `json:"id"`
	MaxNumberOfRecordSets float64           `json:"max_number_of_record_sets"`
	Name                  string            `json:"name"`
	NameServers           []string          `json:"name_servers"`
	NumberOfRecordSets    float64           `json:"number_of_record_sets"`
	ResourceGroupName     string            `json:"resource_group_name"`
	Tags                  map[string]string `json:"tags"`
	SoaRecord             []SoaRecordState  `json:"soa_record"`
	Timeouts              *TimeoutsState    `json:"timeouts"`
}
