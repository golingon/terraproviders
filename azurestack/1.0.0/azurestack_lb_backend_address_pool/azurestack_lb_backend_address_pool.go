// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_lb_backend_address_pool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_lb_backend_address_pool.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackLbBackendAddressPoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (albap *Resource) Type() string {
	return "azurestack_lb_backend_address_pool"
}

// LocalName returns the local name for [Resource].
func (albap *Resource) LocalName() string {
	return albap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (albap *Resource) Configuration() interface{} {
	return albap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (albap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(albap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (albap *Resource) Dependencies() terra.Dependencies {
	return albap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (albap *Resource) LifecycleManagement() *terra.Lifecycle {
	return albap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (albap *Resource) Attributes() azurestackLbBackendAddressPoolAttributes {
	return azurestackLbBackendAddressPoolAttributes{ref: terra.ReferenceResource(albap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (albap *Resource) ImportState(state io.Reader) error {
	albap.state = &azurestackLbBackendAddressPoolState{}
	if err := json.NewDecoder(state).Decode(albap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", albap.Type(), albap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (albap *Resource) State() (*azurestackLbBackendAddressPoolState, bool) {
	return albap.state, albap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (albap *Resource) StateMust() *azurestackLbBackendAddressPoolState {
	if albap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", albap.Type(), albap.LocalName()))
	}
	return albap.state
}

// Args contains the configurations for azurestack_lb_backend_address_pool.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoadbalancerId: string, required
	LoadbalancerId terra.StringValue `hcl:"loadbalancer_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, optional
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackLbBackendAddressPoolAttributes struct {
	ref terra.Reference
}

// BackendIpConfigurations returns a reference to field backend_ip_configurations of azurestack_lb_backend_address_pool.
func (albap azurestackLbBackendAddressPoolAttributes) BackendIpConfigurations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](albap.ref.Append("backend_ip_configurations"))
}

// Id returns a reference to field id of azurestack_lb_backend_address_pool.
func (albap azurestackLbBackendAddressPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(albap.ref.Append("id"))
}

// LoadBalancingRules returns a reference to field load_balancing_rules of azurestack_lb_backend_address_pool.
func (albap azurestackLbBackendAddressPoolAttributes) LoadBalancingRules() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](albap.ref.Append("load_balancing_rules"))
}

// LoadbalancerId returns a reference to field loadbalancer_id of azurestack_lb_backend_address_pool.
func (albap azurestackLbBackendAddressPoolAttributes) LoadbalancerId() terra.StringValue {
	return terra.ReferenceAsString(albap.ref.Append("loadbalancer_id"))
}

// Name returns a reference to field name of azurestack_lb_backend_address_pool.
func (albap azurestackLbBackendAddressPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(albap.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurestack_lb_backend_address_pool.
func (albap azurestackLbBackendAddressPoolAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(albap.ref.Append("resource_group_name"))
}

func (albap azurestackLbBackendAddressPoolAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](albap.ref.Append("timeouts"))
}

type azurestackLbBackendAddressPoolState struct {
	BackendIpConfigurations []string       `json:"backend_ip_configurations"`
	Id                      string         `json:"id"`
	LoadBalancingRules      []string       `json:"load_balancing_rules"`
	LoadbalancerId          string         `json:"loadbalancer_id"`
	Name                    string         `json:"name"`
	ResourceGroupName       string         `json:"resource_group_name"`
	Timeouts                *TimeoutsState `json:"timeouts"`
}
