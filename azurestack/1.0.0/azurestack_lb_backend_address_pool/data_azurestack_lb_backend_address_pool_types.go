// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_lb_backend_address_pool

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataBackendIpConfigurationsAttributes struct {
	ref terra.Reference
}

func (bic DataBackendIpConfigurationsAttributes) InternalRef() (terra.Reference, error) {
	return bic.ref, nil
}

func (bic DataBackendIpConfigurationsAttributes) InternalWithRef(ref terra.Reference) DataBackendIpConfigurationsAttributes {
	return DataBackendIpConfigurationsAttributes{ref: ref}
}

func (bic DataBackendIpConfigurationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bic.ref.InternalTokens()
}

func (bic DataBackendIpConfigurationsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bic.ref.Append("id"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataBackendIpConfigurationsState struct {
	Id string `json:"id"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
