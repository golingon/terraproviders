// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_storage_blob

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_storage_blob.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackStorageBlobState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asb *Resource) Type() string {
	return "azurestack_storage_blob"
}

// LocalName returns the local name for [Resource].
func (asb *Resource) LocalName() string {
	return asb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asb *Resource) Configuration() interface{} {
	return asb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asb *Resource) Dependencies() terra.Dependencies {
	return asb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asb *Resource) LifecycleManagement() *terra.Lifecycle {
	return asb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asb *Resource) Attributes() azurestackStorageBlobAttributes {
	return azurestackStorageBlobAttributes{ref: terra.ReferenceResource(asb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asb *Resource) ImportState(state io.Reader) error {
	asb.state = &azurestackStorageBlobState{}
	if err := json.NewDecoder(state).Decode(asb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asb.Type(), asb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asb *Resource) State() (*azurestackStorageBlobState, bool) {
	return asb.state, asb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asb *Resource) StateMust() *azurestackStorageBlobState {
	if asb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asb.Type(), asb.LocalName()))
	}
	return asb.state
}

// Args contains the configurations for azurestack_storage_blob.
type Args struct {
	// CacheControl: string, optional
	CacheControl terra.StringValue `hcl:"cache_control,attr"`
	// ContentMd5: string, optional
	ContentMd5 terra.StringValue `hcl:"content_md5,attr"`
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parallelism: number, optional
	Parallelism terra.NumberValue `hcl:"parallelism,attr"`
	// Size: number, optional
	Size terra.NumberValue `hcl:"size,attr"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
	// SourceContent: string, optional
	SourceContent terra.StringValue `hcl:"source_content,attr"`
	// SourceUri: string, optional
	SourceUri terra.StringValue `hcl:"source_uri,attr"`
	// StorageAccountName: string, required
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr" validate:"required"`
	// StorageContainerName: string, required
	StorageContainerName terra.StringValue `hcl:"storage_container_name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackStorageBlobAttributes struct {
	ref terra.Reference
}

// CacheControl returns a reference to field cache_control of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) CacheControl() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("cache_control"))
}

// ContentMd5 returns a reference to field content_md5 of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) ContentMd5() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("content_md5"))
}

// ContentType returns a reference to field content_type of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) ContentType() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("content_type"))
}

// Id returns a reference to field id of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("id"))
}

// Metadata returns a reference to field metadata of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asb.ref.Append("metadata"))
}

// Name returns a reference to field name of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("name"))
}

// Parallelism returns a reference to field parallelism of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) Parallelism() terra.NumberValue {
	return terra.ReferenceAsNumber(asb.ref.Append("parallelism"))
}

// Size returns a reference to field size of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(asb.ref.Append("size"))
}

// Source returns a reference to field source of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("source"))
}

// SourceContent returns a reference to field source_content of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) SourceContent() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("source_content"))
}

// SourceUri returns a reference to field source_uri of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) SourceUri() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("source_uri"))
}

// StorageAccountName returns a reference to field storage_account_name of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("storage_account_name"))
}

// StorageContainerName returns a reference to field storage_container_name of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) StorageContainerName() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("storage_container_name"))
}

// Type returns a reference to field type of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("type"))
}

// Url returns a reference to field url of azurestack_storage_blob.
func (asb azurestackStorageBlobAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("url"))
}

func (asb azurestackStorageBlobAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asb.ref.Append("timeouts"))
}

type azurestackStorageBlobState struct {
	CacheControl         string            `json:"cache_control"`
	ContentMd5           string            `json:"content_md5"`
	ContentType          string            `json:"content_type"`
	Id                   string            `json:"id"`
	Metadata             map[string]string `json:"metadata"`
	Name                 string            `json:"name"`
	Parallelism          float64           `json:"parallelism"`
	Size                 float64           `json:"size"`
	Source               string            `json:"source"`
	SourceContent        string            `json:"source_content"`
	SourceUri            string            `json:"source_uri"`
	StorageAccountName   string            `json:"storage_account_name"`
	StorageContainerName string            `json:"storage_container_name"`
	Type                 string            `json:"type"`
	Url                  string            `json:"url"`
	Timeouts             *TimeoutsState    `json:"timeouts"`
}
