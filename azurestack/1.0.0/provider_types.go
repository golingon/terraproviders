// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Features struct {
	// FeaturesResourceGroup: optional
	ResourceGroup *FeaturesResourceGroup `hcl:"resource_group,block"`
	// FeaturesVirtualMachine: optional
	VirtualMachine *FeaturesVirtualMachine `hcl:"virtual_machine,block"`
	// FeaturesVirtualMachineScaleSet: optional
	VirtualMachineScaleSet *FeaturesVirtualMachineScaleSet `hcl:"virtual_machine_scale_set,block"`
}

type FeaturesResourceGroup struct {
	// PreventDeletionIfContainsResources: bool, optional
	PreventDeletionIfContainsResources terra.BoolValue `hcl:"prevent_deletion_if_contains_resources,attr"`
}

type FeaturesVirtualMachine struct {
	// DeleteOsDiskOnDeletion: bool, optional
	DeleteOsDiskOnDeletion terra.BoolValue `hcl:"delete_os_disk_on_deletion,attr"`
	// GracefulShutdown: bool, optional
	GracefulShutdown terra.BoolValue `hcl:"graceful_shutdown,attr"`
	// SkipShutdownAndForceDelete: bool, optional
	SkipShutdownAndForceDelete terra.BoolValue `hcl:"skip_shutdown_and_force_delete,attr"`
}

type FeaturesVirtualMachineScaleSet struct {
	// ForceDelete: bool, optional
	ForceDelete terra.BoolValue `hcl:"force_delete,attr"`
	// RollInstancesWhenRequired: bool, required
	RollInstancesWhenRequired terra.BoolValue `hcl:"roll_instances_when_required,attr" validate:"required"`
	// ScaleToZeroBeforeDeletion: bool, optional
	ScaleToZeroBeforeDeletion terra.BoolValue `hcl:"scale_to_zero_before_deletion,attr"`
}

type FeaturesAttributes struct {
	ref terra.Reference
}

func (f FeaturesAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FeaturesAttributes) InternalWithRef(ref terra.Reference) FeaturesAttributes {
	return FeaturesAttributes{ref: ref}
}

func (f FeaturesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FeaturesAttributes) ResourceGroup() terra.ListValue[FeaturesResourceGroupAttributes] {
	return terra.ReferenceAsList[FeaturesResourceGroupAttributes](f.ref.Append("resource_group"))
}

func (f FeaturesAttributes) VirtualMachine() terra.ListValue[FeaturesVirtualMachineAttributes] {
	return terra.ReferenceAsList[FeaturesVirtualMachineAttributes](f.ref.Append("virtual_machine"))
}

func (f FeaturesAttributes) VirtualMachineScaleSet() terra.ListValue[FeaturesVirtualMachineScaleSetAttributes] {
	return terra.ReferenceAsList[FeaturesVirtualMachineScaleSetAttributes](f.ref.Append("virtual_machine_scale_set"))
}

type FeaturesResourceGroupAttributes struct {
	ref terra.Reference
}

func (rg FeaturesResourceGroupAttributes) InternalRef() (terra.Reference, error) {
	return rg.ref, nil
}

func (rg FeaturesResourceGroupAttributes) InternalWithRef(ref terra.Reference) FeaturesResourceGroupAttributes {
	return FeaturesResourceGroupAttributes{ref: ref}
}

func (rg FeaturesResourceGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rg.ref.InternalTokens()
}

func (rg FeaturesResourceGroupAttributes) PreventDeletionIfContainsResources() terra.BoolValue {
	return terra.ReferenceAsBool(rg.ref.Append("prevent_deletion_if_contains_resources"))
}

type FeaturesVirtualMachineAttributes struct {
	ref terra.Reference
}

func (vm FeaturesVirtualMachineAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm FeaturesVirtualMachineAttributes) InternalWithRef(ref terra.Reference) FeaturesVirtualMachineAttributes {
	return FeaturesVirtualMachineAttributes{ref: ref}
}

func (vm FeaturesVirtualMachineAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm FeaturesVirtualMachineAttributes) DeleteOsDiskOnDeletion() terra.BoolValue {
	return terra.ReferenceAsBool(vm.ref.Append("delete_os_disk_on_deletion"))
}

func (vm FeaturesVirtualMachineAttributes) GracefulShutdown() terra.BoolValue {
	return terra.ReferenceAsBool(vm.ref.Append("graceful_shutdown"))
}

func (vm FeaturesVirtualMachineAttributes) SkipShutdownAndForceDelete() terra.BoolValue {
	return terra.ReferenceAsBool(vm.ref.Append("skip_shutdown_and_force_delete"))
}

type FeaturesVirtualMachineScaleSetAttributes struct {
	ref terra.Reference
}

func (vmss FeaturesVirtualMachineScaleSetAttributes) InternalRef() (terra.Reference, error) {
	return vmss.ref, nil
}

func (vmss FeaturesVirtualMachineScaleSetAttributes) InternalWithRef(ref terra.Reference) FeaturesVirtualMachineScaleSetAttributes {
	return FeaturesVirtualMachineScaleSetAttributes{ref: ref}
}

func (vmss FeaturesVirtualMachineScaleSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vmss.ref.InternalTokens()
}

func (vmss FeaturesVirtualMachineScaleSetAttributes) ForceDelete() terra.BoolValue {
	return terra.ReferenceAsBool(vmss.ref.Append("force_delete"))
}

func (vmss FeaturesVirtualMachineScaleSetAttributes) RollInstancesWhenRequired() terra.BoolValue {
	return terra.ReferenceAsBool(vmss.ref.Append("roll_instances_when_required"))
}

func (vmss FeaturesVirtualMachineScaleSetAttributes) ScaleToZeroBeforeDeletion() terra.BoolValue {
	return terra.ReferenceAsBool(vmss.ref.Append("scale_to_zero_before_deletion"))
}

type FeaturesState struct {
	ResourceGroup          []FeaturesResourceGroupState          `json:"resource_group"`
	VirtualMachine         []FeaturesVirtualMachineState         `json:"virtual_machine"`
	VirtualMachineScaleSet []FeaturesVirtualMachineScaleSetState `json:"virtual_machine_scale_set"`
}

type FeaturesResourceGroupState struct {
	PreventDeletionIfContainsResources bool `json:"prevent_deletion_if_contains_resources"`
}

type FeaturesVirtualMachineState struct {
	DeleteOsDiskOnDeletion     bool `json:"delete_os_disk_on_deletion"`
	GracefulShutdown           bool `json:"graceful_shutdown"`
	SkipShutdownAndForceDelete bool `json:"skip_shutdown_and_force_delete"`
}

type FeaturesVirtualMachineScaleSetState struct {
	ForceDelete               bool `json:"force_delete"`
	RollInstancesWhenRequired bool `json:"roll_instances_when_required"`
	ScaleToZeroBeforeDeletion bool `json:"scale_to_zero_before_deletion"`
}
