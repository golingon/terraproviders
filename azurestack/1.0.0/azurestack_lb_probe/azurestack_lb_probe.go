// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_lb_probe

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_lb_probe.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackLbProbeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alp *Resource) Type() string {
	return "azurestack_lb_probe"
}

// LocalName returns the local name for [Resource].
func (alp *Resource) LocalName() string {
	return alp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alp *Resource) Configuration() interface{} {
	return alp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alp *Resource) Dependencies() terra.Dependencies {
	return alp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alp *Resource) LifecycleManagement() *terra.Lifecycle {
	return alp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alp *Resource) Attributes() azurestackLbProbeAttributes {
	return azurestackLbProbeAttributes{ref: terra.ReferenceResource(alp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alp *Resource) ImportState(state io.Reader) error {
	alp.state = &azurestackLbProbeState{}
	if err := json.NewDecoder(state).Decode(alp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alp.Type(), alp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alp *Resource) State() (*azurestackLbProbeState, bool) {
	return alp.state, alp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alp *Resource) StateMust() *azurestackLbProbeState {
	if alp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alp.Type(), alp.LocalName()))
	}
	return alp.state
}

// Args contains the configurations for azurestack_lb_probe.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntervalInSeconds: number, optional
	IntervalInSeconds terra.NumberValue `hcl:"interval_in_seconds,attr"`
	// LoadbalancerId: string, required
	LoadbalancerId terra.StringValue `hcl:"loadbalancer_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NumberOfProbes: number, optional
	NumberOfProbes terra.NumberValue `hcl:"number_of_probes,attr"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// RequestPath: string, optional
	RequestPath terra.StringValue `hcl:"request_path,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackLbProbeAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurestack_lb_probe.
func (alp azurestackLbProbeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("id"))
}

// IntervalInSeconds returns a reference to field interval_in_seconds of azurestack_lb_probe.
func (alp azurestackLbProbeAttributes) IntervalInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(alp.ref.Append("interval_in_seconds"))
}

// LoadBalancerRules returns a reference to field load_balancer_rules of azurestack_lb_probe.
func (alp azurestackLbProbeAttributes) LoadBalancerRules() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](alp.ref.Append("load_balancer_rules"))
}

// LoadbalancerId returns a reference to field loadbalancer_id of azurestack_lb_probe.
func (alp azurestackLbProbeAttributes) LoadbalancerId() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("loadbalancer_id"))
}

// Name returns a reference to field name of azurestack_lb_probe.
func (alp azurestackLbProbeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("name"))
}

// NumberOfProbes returns a reference to field number_of_probes of azurestack_lb_probe.
func (alp azurestackLbProbeAttributes) NumberOfProbes() terra.NumberValue {
	return terra.ReferenceAsNumber(alp.ref.Append("number_of_probes"))
}

// Port returns a reference to field port of azurestack_lb_probe.
func (alp azurestackLbProbeAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(alp.ref.Append("port"))
}

// Protocol returns a reference to field protocol of azurestack_lb_probe.
func (alp azurestackLbProbeAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("protocol"))
}

// RequestPath returns a reference to field request_path of azurestack_lb_probe.
func (alp azurestackLbProbeAttributes) RequestPath() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("request_path"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurestack_lb_probe.
func (alp azurestackLbProbeAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("resource_group_name"))
}

func (alp azurestackLbProbeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alp.ref.Append("timeouts"))
}

type azurestackLbProbeState struct {
	Id                string         `json:"id"`
	IntervalInSeconds float64        `json:"interval_in_seconds"`
	LoadBalancerRules []string       `json:"load_balancer_rules"`
	LoadbalancerId    string         `json:"loadbalancer_id"`
	Name              string         `json:"name"`
	NumberOfProbes    float64        `json:"number_of_probes"`
	Port              float64        `json:"port"`
	Protocol          string         `json:"protocol"`
	RequestPath       string         `json:"request_path"`
	ResourceGroupName string         `json:"resource_group_name"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
