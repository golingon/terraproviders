// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_virtual_network_peering

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_virtual_network_peering.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackVirtualNetworkPeeringState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avnp *Resource) Type() string {
	return "azurestack_virtual_network_peering"
}

// LocalName returns the local name for [Resource].
func (avnp *Resource) LocalName() string {
	return avnp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avnp *Resource) Configuration() interface{} {
	return avnp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avnp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avnp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avnp *Resource) Dependencies() terra.Dependencies {
	return avnp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avnp *Resource) LifecycleManagement() *terra.Lifecycle {
	return avnp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avnp *Resource) Attributes() azurestackVirtualNetworkPeeringAttributes {
	return azurestackVirtualNetworkPeeringAttributes{ref: terra.ReferenceResource(avnp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avnp *Resource) ImportState(state io.Reader) error {
	avnp.state = &azurestackVirtualNetworkPeeringState{}
	if err := json.NewDecoder(state).Decode(avnp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avnp.Type(), avnp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avnp *Resource) State() (*azurestackVirtualNetworkPeeringState, bool) {
	return avnp.state, avnp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avnp *Resource) StateMust() *azurestackVirtualNetworkPeeringState {
	if avnp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avnp.Type(), avnp.LocalName()))
	}
	return avnp.state
}

// Args contains the configurations for azurestack_virtual_network_peering.
type Args struct {
	// AllowForwardedTraffic: bool, optional
	AllowForwardedTraffic terra.BoolValue `hcl:"allow_forwarded_traffic,attr"`
	// AllowGatewayTransit: bool, optional
	AllowGatewayTransit terra.BoolValue `hcl:"allow_gateway_transit,attr"`
	// AllowVirtualNetworkAccess: bool, optional
	AllowVirtualNetworkAccess terra.BoolValue `hcl:"allow_virtual_network_access,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RemoteVirtualNetworkId: string, required
	RemoteVirtualNetworkId terra.StringValue `hcl:"remote_virtual_network_id,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// UseRemoteGateways: bool, optional
	UseRemoteGateways terra.BoolValue `hcl:"use_remote_gateways,attr"`
	// VirtualNetworkName: string, required
	VirtualNetworkName terra.StringValue `hcl:"virtual_network_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackVirtualNetworkPeeringAttributes struct {
	ref terra.Reference
}

// AllowForwardedTraffic returns a reference to field allow_forwarded_traffic of azurestack_virtual_network_peering.
func (avnp azurestackVirtualNetworkPeeringAttributes) AllowForwardedTraffic() terra.BoolValue {
	return terra.ReferenceAsBool(avnp.ref.Append("allow_forwarded_traffic"))
}

// AllowGatewayTransit returns a reference to field allow_gateway_transit of azurestack_virtual_network_peering.
func (avnp azurestackVirtualNetworkPeeringAttributes) AllowGatewayTransit() terra.BoolValue {
	return terra.ReferenceAsBool(avnp.ref.Append("allow_gateway_transit"))
}

// AllowVirtualNetworkAccess returns a reference to field allow_virtual_network_access of azurestack_virtual_network_peering.
func (avnp azurestackVirtualNetworkPeeringAttributes) AllowVirtualNetworkAccess() terra.BoolValue {
	return terra.ReferenceAsBool(avnp.ref.Append("allow_virtual_network_access"))
}

// Id returns a reference to field id of azurestack_virtual_network_peering.
func (avnp azurestackVirtualNetworkPeeringAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avnp.ref.Append("id"))
}

// Name returns a reference to field name of azurestack_virtual_network_peering.
func (avnp azurestackVirtualNetworkPeeringAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avnp.ref.Append("name"))
}

// RemoteVirtualNetworkId returns a reference to field remote_virtual_network_id of azurestack_virtual_network_peering.
func (avnp azurestackVirtualNetworkPeeringAttributes) RemoteVirtualNetworkId() terra.StringValue {
	return terra.ReferenceAsString(avnp.ref.Append("remote_virtual_network_id"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurestack_virtual_network_peering.
func (avnp azurestackVirtualNetworkPeeringAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(avnp.ref.Append("resource_group_name"))
}

// UseRemoteGateways returns a reference to field use_remote_gateways of azurestack_virtual_network_peering.
func (avnp azurestackVirtualNetworkPeeringAttributes) UseRemoteGateways() terra.BoolValue {
	return terra.ReferenceAsBool(avnp.ref.Append("use_remote_gateways"))
}

// VirtualNetworkName returns a reference to field virtual_network_name of azurestack_virtual_network_peering.
func (avnp azurestackVirtualNetworkPeeringAttributes) VirtualNetworkName() terra.StringValue {
	return terra.ReferenceAsString(avnp.ref.Append("virtual_network_name"))
}

func (avnp azurestackVirtualNetworkPeeringAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avnp.ref.Append("timeouts"))
}

type azurestackVirtualNetworkPeeringState struct {
	AllowForwardedTraffic     bool           `json:"allow_forwarded_traffic"`
	AllowGatewayTransit       bool           `json:"allow_gateway_transit"`
	AllowVirtualNetworkAccess bool           `json:"allow_virtual_network_access"`
	Id                        string         `json:"id"`
	Name                      string         `json:"name"`
	RemoteVirtualNetworkId    string         `json:"remote_virtual_network_id"`
	ResourceGroupName         string         `json:"resource_group_name"`
	UseRemoteGateways         bool           `json:"use_remote_gateways"`
	VirtualNetworkName        string         `json:"virtual_network_name"`
	Timeouts                  *TimeoutsState `json:"timeouts"`
}
