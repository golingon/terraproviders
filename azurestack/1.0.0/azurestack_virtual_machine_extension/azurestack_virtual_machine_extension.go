// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurestack_virtual_machine_extension

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurestack_virtual_machine_extension.
type Resource struct {
	Name      string
	Args      Args
	state     *azurestackVirtualMachineExtensionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avme *Resource) Type() string {
	return "azurestack_virtual_machine_extension"
}

// LocalName returns the local name for [Resource].
func (avme *Resource) LocalName() string {
	return avme.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avme *Resource) Configuration() interface{} {
	return avme.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avme *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avme)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avme *Resource) Dependencies() terra.Dependencies {
	return avme.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avme *Resource) LifecycleManagement() *terra.Lifecycle {
	return avme.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avme *Resource) Attributes() azurestackVirtualMachineExtensionAttributes {
	return azurestackVirtualMachineExtensionAttributes{ref: terra.ReferenceResource(avme)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avme *Resource) ImportState(state io.Reader) error {
	avme.state = &azurestackVirtualMachineExtensionState{}
	if err := json.NewDecoder(state).Decode(avme.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avme.Type(), avme.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avme *Resource) State() (*azurestackVirtualMachineExtensionState, bool) {
	return avme.state, avme.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avme *Resource) StateMust() *azurestackVirtualMachineExtensionState {
	if avme.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avme.Type(), avme.LocalName()))
	}
	return avme.state
}

// Args contains the configurations for azurestack_virtual_machine_extension.
type Args struct {
	// AutoUpgradeMinorVersion: bool, optional
	AutoUpgradeMinorVersion terra.BoolValue `hcl:"auto_upgrade_minor_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProtectedSettings: string, optional
	ProtectedSettings terra.StringValue `hcl:"protected_settings,attr"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
	// Settings: string, optional
	Settings terra.StringValue `hcl:"settings,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// TypeHandlerVersion: string, required
	TypeHandlerVersion terra.StringValue `hcl:"type_handler_version,attr" validate:"required"`
	// VirtualMachineId: string, required
	VirtualMachineId terra.StringValue `hcl:"virtual_machine_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurestackVirtualMachineExtensionAttributes struct {
	ref terra.Reference
}

// AutoUpgradeMinorVersion returns a reference to field auto_upgrade_minor_version of azurestack_virtual_machine_extension.
func (avme azurestackVirtualMachineExtensionAttributes) AutoUpgradeMinorVersion() terra.BoolValue {
	return terra.ReferenceAsBool(avme.ref.Append("auto_upgrade_minor_version"))
}

// Id returns a reference to field id of azurestack_virtual_machine_extension.
func (avme azurestackVirtualMachineExtensionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avme.ref.Append("id"))
}

// Name returns a reference to field name of azurestack_virtual_machine_extension.
func (avme azurestackVirtualMachineExtensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avme.ref.Append("name"))
}

// ProtectedSettings returns a reference to field protected_settings of azurestack_virtual_machine_extension.
func (avme azurestackVirtualMachineExtensionAttributes) ProtectedSettings() terra.StringValue {
	return terra.ReferenceAsString(avme.ref.Append("protected_settings"))
}

// Publisher returns a reference to field publisher of azurestack_virtual_machine_extension.
func (avme azurestackVirtualMachineExtensionAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(avme.ref.Append("publisher"))
}

// Settings returns a reference to field settings of azurestack_virtual_machine_extension.
func (avme azurestackVirtualMachineExtensionAttributes) Settings() terra.StringValue {
	return terra.ReferenceAsString(avme.ref.Append("settings"))
}

// Tags returns a reference to field tags of azurestack_virtual_machine_extension.
func (avme azurestackVirtualMachineExtensionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avme.ref.Append("tags"))
}

// Type returns a reference to field type of azurestack_virtual_machine_extension.
func (avme azurestackVirtualMachineExtensionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(avme.ref.Append("type"))
}

// TypeHandlerVersion returns a reference to field type_handler_version of azurestack_virtual_machine_extension.
func (avme azurestackVirtualMachineExtensionAttributes) TypeHandlerVersion() terra.StringValue {
	return terra.ReferenceAsString(avme.ref.Append("type_handler_version"))
}

// VirtualMachineId returns a reference to field virtual_machine_id of azurestack_virtual_machine_extension.
func (avme azurestackVirtualMachineExtensionAttributes) VirtualMachineId() terra.StringValue {
	return terra.ReferenceAsString(avme.ref.Append("virtual_machine_id"))
}

func (avme azurestackVirtualMachineExtensionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avme.ref.Append("timeouts"))
}

type azurestackVirtualMachineExtensionState struct {
	AutoUpgradeMinorVersion bool              `json:"auto_upgrade_minor_version"`
	Id                      string            `json:"id"`
	Name                    string            `json:"name"`
	ProtectedSettings       string            `json:"protected_settings"`
	Publisher               string            `json:"publisher"`
	Settings                string            `json:"settings"`
	Tags                    map[string]string `json:"tags"`
	Type                    string            `json:"type"`
	TypeHandlerVersion      string            `json:"type_handler_version"`
	VirtualMachineId        string            `json:"virtual_machine_id"`
	Timeouts                *TimeoutsState    `json:"timeouts"`
}
