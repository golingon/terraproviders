// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurestack

import (
	"encoding/json"
	"fmt"
	keyvaultkey "github.com/golingon/terraproviders/azurestack/1.0.0/keyvaultkey"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewKeyVaultKey creates a new instance of [KeyVaultKey].
func NewKeyVaultKey(name string, args KeyVaultKeyArgs) *KeyVaultKey {
	return &KeyVaultKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KeyVaultKey)(nil)

// KeyVaultKey represents the Terraform resource azurestack_key_vault_key.
type KeyVaultKey struct {
	Name      string
	Args      KeyVaultKeyArgs
	state     *keyVaultKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [KeyVaultKey].
func (kvk *KeyVaultKey) Type() string {
	return "azurestack_key_vault_key"
}

// LocalName returns the local name for [KeyVaultKey].
func (kvk *KeyVaultKey) LocalName() string {
	return kvk.Name
}

// Configuration returns the configuration (args) for [KeyVaultKey].
func (kvk *KeyVaultKey) Configuration() interface{} {
	return kvk.Args
}

// DependOn is used for other resources to depend on [KeyVaultKey].
func (kvk *KeyVaultKey) DependOn() terra.Reference {
	return terra.ReferenceResource(kvk)
}

// Dependencies returns the list of resources [KeyVaultKey] depends_on.
func (kvk *KeyVaultKey) Dependencies() terra.Dependencies {
	return kvk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [KeyVaultKey].
func (kvk *KeyVaultKey) LifecycleManagement() *terra.Lifecycle {
	return kvk.Lifecycle
}

// Attributes returns the attributes for [KeyVaultKey].
func (kvk *KeyVaultKey) Attributes() keyVaultKeyAttributes {
	return keyVaultKeyAttributes{ref: terra.ReferenceResource(kvk)}
}

// ImportState imports the given attribute values into [KeyVaultKey]'s state.
func (kvk *KeyVaultKey) ImportState(av io.Reader) error {
	kvk.state = &keyVaultKeyState{}
	if err := json.NewDecoder(av).Decode(kvk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kvk.Type(), kvk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [KeyVaultKey] has state.
func (kvk *KeyVaultKey) State() (*keyVaultKeyState, bool) {
	return kvk.state, kvk.state != nil
}

// StateMust returns the state for [KeyVaultKey]. Panics if the state is nil.
func (kvk *KeyVaultKey) StateMust() *keyVaultKeyState {
	if kvk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kvk.Type(), kvk.LocalName()))
	}
	return kvk.state
}

// KeyVaultKeyArgs contains the configurations for azurestack_key_vault_key.
type KeyVaultKeyArgs struct {
	// Curve: string, optional
	Curve terra.StringValue `hcl:"curve,attr"`
	// ExpirationDate: string, optional
	ExpirationDate terra.StringValue `hcl:"expiration_date,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyOpts: list of string, required
	KeyOpts terra.ListValue[terra.StringValue] `hcl:"key_opts,attr" validate:"required"`
	// KeySize: number, optional
	KeySize terra.NumberValue `hcl:"key_size,attr"`
	// KeyType: string, required
	KeyType terra.StringValue `hcl:"key_type,attr" validate:"required"`
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NotBeforeDate: string, optional
	NotBeforeDate terra.StringValue `hcl:"not_before_date,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *keyvaultkey.Timeouts `hcl:"timeouts,block"`
}
type keyVaultKeyAttributes struct {
	ref terra.Reference
}

// Curve returns a reference to field curve of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) Curve() terra.StringValue {
	return terra.ReferenceAsString(kvk.ref.Append("curve"))
}

// E returns a reference to field e of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) E() terra.StringValue {
	return terra.ReferenceAsString(kvk.ref.Append("e"))
}

// ExpirationDate returns a reference to field expiration_date of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) ExpirationDate() terra.StringValue {
	return terra.ReferenceAsString(kvk.ref.Append("expiration_date"))
}

// Id returns a reference to field id of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(kvk.ref.Append("id"))
}

// KeyOpts returns a reference to field key_opts of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) KeyOpts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](kvk.ref.Append("key_opts"))
}

// KeySize returns a reference to field key_size of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) KeySize() terra.NumberValue {
	return terra.ReferenceAsNumber(kvk.ref.Append("key_size"))
}

// KeyType returns a reference to field key_type of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) KeyType() terra.StringValue {
	return terra.ReferenceAsString(kvk.ref.Append("key_type"))
}

// KeyVaultId returns a reference to field key_vault_id of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(kvk.ref.Append("key_vault_id"))
}

// N returns a reference to field n of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) N() terra.StringValue {
	return terra.ReferenceAsString(kvk.ref.Append("n"))
}

// Name returns a reference to field name of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(kvk.ref.Append("name"))
}

// NotBeforeDate returns a reference to field not_before_date of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) NotBeforeDate() terra.StringValue {
	return terra.ReferenceAsString(kvk.ref.Append("not_before_date"))
}

// Tags returns a reference to field tags of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](kvk.ref.Append("tags"))
}

// Version returns a reference to field version of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(kvk.ref.Append("version"))
}

// VersionlessId returns a reference to field versionless_id of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) VersionlessId() terra.StringValue {
	return terra.ReferenceAsString(kvk.ref.Append("versionless_id"))
}

// X returns a reference to field x of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) X() terra.StringValue {
	return terra.ReferenceAsString(kvk.ref.Append("x"))
}

// Y returns a reference to field y of azurestack_key_vault_key.
func (kvk keyVaultKeyAttributes) Y() terra.StringValue {
	return terra.ReferenceAsString(kvk.ref.Append("y"))
}

func (kvk keyVaultKeyAttributes) Timeouts() keyvaultkey.TimeoutsAttributes {
	return terra.ReferenceAsSingle[keyvaultkey.TimeoutsAttributes](kvk.ref.Append("timeouts"))
}

type keyVaultKeyState struct {
	Curve          string                     `json:"curve"`
	E              string                     `json:"e"`
	ExpirationDate string                     `json:"expiration_date"`
	Id             string                     `json:"id"`
	KeyOpts        []string                   `json:"key_opts"`
	KeySize        float64                    `json:"key_size"`
	KeyType        string                     `json:"key_type"`
	KeyVaultId     string                     `json:"key_vault_id"`
	N              string                     `json:"n"`
	Name           string                     `json:"name"`
	NotBeforeDate  string                     `json:"not_before_date"`
	Tags           map[string]string          `json:"tags"`
	Version        string                     `json:"version"`
	VersionlessId  string                     `json:"versionless_id"`
	X              string                     `json:"x"`
	Y              string                     `json:"y"`
	Timeouts       *keyvaultkey.TimeoutsState `json:"timeouts"`
}
