// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package tls

import (
	"encoding/json"
	"fmt"
	certrequest "github.com/golingon/terraproviders/tls/4.0.4/certrequest"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewCertRequest creates a new instance of [CertRequest].
func NewCertRequest(name string, args CertRequestArgs) *CertRequest {
	return &CertRequest{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CertRequest)(nil)

// CertRequest represents the Terraform resource tls_cert_request.
type CertRequest struct {
	Name      string
	Args      CertRequestArgs
	state     *certRequestState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CertRequest].
func (cr *CertRequest) Type() string {
	return "tls_cert_request"
}

// LocalName returns the local name for [CertRequest].
func (cr *CertRequest) LocalName() string {
	return cr.Name
}

// Configuration returns the configuration (args) for [CertRequest].
func (cr *CertRequest) Configuration() interface{} {
	return cr.Args
}

// DependOn is used for other resources to depend on [CertRequest].
func (cr *CertRequest) DependOn() terra.Reference {
	return terra.ReferenceResource(cr)
}

// Dependencies returns the list of resources [CertRequest] depends_on.
func (cr *CertRequest) Dependencies() terra.Dependencies {
	return cr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CertRequest].
func (cr *CertRequest) LifecycleManagement() *terra.Lifecycle {
	return cr.Lifecycle
}

// Attributes returns the attributes for [CertRequest].
func (cr *CertRequest) Attributes() certRequestAttributes {
	return certRequestAttributes{ref: terra.ReferenceResource(cr)}
}

// ImportState imports the given attribute values into [CertRequest]'s state.
func (cr *CertRequest) ImportState(av io.Reader) error {
	cr.state = &certRequestState{}
	if err := json.NewDecoder(av).Decode(cr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cr.Type(), cr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CertRequest] has state.
func (cr *CertRequest) State() (*certRequestState, bool) {
	return cr.state, cr.state != nil
}

// StateMust returns the state for [CertRequest]. Panics if the state is nil.
func (cr *CertRequest) StateMust() *certRequestState {
	if cr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cr.Type(), cr.LocalName()))
	}
	return cr.state
}

// CertRequestArgs contains the configurations for tls_cert_request.
type CertRequestArgs struct {
	// DnsNames: list of string, optional
	DnsNames terra.ListValue[terra.StringValue] `hcl:"dns_names,attr"`
	// IpAddresses: list of string, optional
	IpAddresses terra.ListValue[terra.StringValue] `hcl:"ip_addresses,attr"`
	// PrivateKeyPem: string, required
	PrivateKeyPem terra.StringValue `hcl:"private_key_pem,attr" validate:"required"`
	// Uris: list of string, optional
	Uris terra.ListValue[terra.StringValue] `hcl:"uris,attr"`
	// Subject: optional
	Subject *certrequest.Subject `hcl:"subject,block"`
}
type certRequestAttributes struct {
	ref terra.Reference
}

// CertRequestPem returns a reference to field cert_request_pem of tls_cert_request.
func (cr certRequestAttributes) CertRequestPem() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("cert_request_pem"))
}

// DnsNames returns a reference to field dns_names of tls_cert_request.
func (cr certRequestAttributes) DnsNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cr.ref.Append("dns_names"))
}

// Id returns a reference to field id of tls_cert_request.
func (cr certRequestAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("id"))
}

// IpAddresses returns a reference to field ip_addresses of tls_cert_request.
func (cr certRequestAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cr.ref.Append("ip_addresses"))
}

// KeyAlgorithm returns a reference to field key_algorithm of tls_cert_request.
func (cr certRequestAttributes) KeyAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("key_algorithm"))
}

// PrivateKeyPem returns a reference to field private_key_pem of tls_cert_request.
func (cr certRequestAttributes) PrivateKeyPem() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("private_key_pem"))
}

// Uris returns a reference to field uris of tls_cert_request.
func (cr certRequestAttributes) Uris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cr.ref.Append("uris"))
}

func (cr certRequestAttributes) Subject() terra.ListValue[certrequest.SubjectAttributes] {
	return terra.ReferenceAsList[certrequest.SubjectAttributes](cr.ref.Append("subject"))
}

type certRequestState struct {
	CertRequestPem string                     `json:"cert_request_pem"`
	DnsNames       []string                   `json:"dns_names"`
	Id             string                     `json:"id"`
	IpAddresses    []string                   `json:"ip_addresses"`
	KeyAlgorithm   string                     `json:"key_algorithm"`
	PrivateKeyPem  string                     `json:"private_key_pem"`
	Uris           []string                   `json:"uris"`
	Subject        []certrequest.SubjectState `json:"subject"`
}
