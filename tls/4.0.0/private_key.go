// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package tls

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivateKey(name string, args PrivateKeyArgs) *PrivateKey {
	return &PrivateKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivateKey)(nil)

type PrivateKey struct {
	Name  string
	Args  PrivateKeyArgs
	state *privateKeyState
}

func (pk *PrivateKey) Type() string {
	return "tls_private_key"
}

func (pk *PrivateKey) LocalName() string {
	return pk.Name
}

func (pk *PrivateKey) Configuration() interface{} {
	return pk.Args
}

func (pk *PrivateKey) Attributes() privateKeyAttributes {
	return privateKeyAttributes{ref: terra.ReferenceResource(pk)}
}

func (pk *PrivateKey) ImportState(av io.Reader) error {
	pk.state = &privateKeyState{}
	if err := json.NewDecoder(av).Decode(pk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pk.Type(), pk.LocalName(), err)
	}
	return nil
}

func (pk *PrivateKey) State() (*privateKeyState, bool) {
	return pk.state, pk.state != nil
}

func (pk *PrivateKey) StateMust() *privateKeyState {
	if pk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pk.Type(), pk.LocalName()))
	}
	return pk.state
}

func (pk *PrivateKey) DependOn() terra.Reference {
	return terra.ReferenceResource(pk)
}

type PrivateKeyArgs struct {
	// Algorithm: string, required
	Algorithm terra.StringValue `hcl:"algorithm,attr" validate:"required"`
	// EcdsaCurve: string, optional
	EcdsaCurve terra.StringValue `hcl:"ecdsa_curve,attr"`
	// RsaBits: number, optional
	RsaBits terra.NumberValue `hcl:"rsa_bits,attr"`
	// DependsOn contains resources that PrivateKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privateKeyAttributes struct {
	ref terra.Reference
}

func (pk privateKeyAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceString(pk.ref.Append("algorithm"))
}

func (pk privateKeyAttributes) EcdsaCurve() terra.StringValue {
	return terra.ReferenceString(pk.ref.Append("ecdsa_curve"))
}

func (pk privateKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pk.ref.Append("id"))
}

func (pk privateKeyAttributes) PrivateKeyOpenssh() terra.StringValue {
	return terra.ReferenceString(pk.ref.Append("private_key_openssh"))
}

func (pk privateKeyAttributes) PrivateKeyPem() terra.StringValue {
	return terra.ReferenceString(pk.ref.Append("private_key_pem"))
}

func (pk privateKeyAttributes) PrivateKeyPemPkcs8() terra.StringValue {
	return terra.ReferenceString(pk.ref.Append("private_key_pem_pkcs8"))
}

func (pk privateKeyAttributes) PublicKeyFingerprintMd5() terra.StringValue {
	return terra.ReferenceString(pk.ref.Append("public_key_fingerprint_md5"))
}

func (pk privateKeyAttributes) PublicKeyFingerprintSha256() terra.StringValue {
	return terra.ReferenceString(pk.ref.Append("public_key_fingerprint_sha256"))
}

func (pk privateKeyAttributes) PublicKeyOpenssh() terra.StringValue {
	return terra.ReferenceString(pk.ref.Append("public_key_openssh"))
}

func (pk privateKeyAttributes) PublicKeyPem() terra.StringValue {
	return terra.ReferenceString(pk.ref.Append("public_key_pem"))
}

func (pk privateKeyAttributes) RsaBits() terra.NumberValue {
	return terra.ReferenceNumber(pk.ref.Append("rsa_bits"))
}

type privateKeyState struct {
	Algorithm                  string  `json:"algorithm"`
	EcdsaCurve                 string  `json:"ecdsa_curve"`
	Id                         string  `json:"id"`
	PrivateKeyOpenssh          string  `json:"private_key_openssh"`
	PrivateKeyPem              string  `json:"private_key_pem"`
	PrivateKeyPemPkcs8         string  `json:"private_key_pem_pkcs8"`
	PublicKeyFingerprintMd5    string  `json:"public_key_fingerprint_md5"`
	PublicKeyFingerprintSha256 string  `json:"public_key_fingerprint_sha256"`
	PublicKeyOpenssh           string  `json:"public_key_openssh"`
	PublicKeyPem               string  `json:"public_key_pem"`
	RsaBits                    float64 `json:"rsa_bits"`
}
