// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package tls

import (
	"encoding/json"
	"fmt"
	selfsignedcert "github.com/golingon/terraproviders/tls/4.0.0/selfsignedcert"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSelfSignedCert(name string, args SelfSignedCertArgs) *SelfSignedCert {
	return &SelfSignedCert{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SelfSignedCert)(nil)

type SelfSignedCert struct {
	Name  string
	Args  SelfSignedCertArgs
	state *selfSignedCertState
}

func (ssc *SelfSignedCert) Type() string {
	return "tls_self_signed_cert"
}

func (ssc *SelfSignedCert) LocalName() string {
	return ssc.Name
}

func (ssc *SelfSignedCert) Configuration() interface{} {
	return ssc.Args
}

func (ssc *SelfSignedCert) Attributes() selfSignedCertAttributes {
	return selfSignedCertAttributes{ref: terra.ReferenceResource(ssc)}
}

func (ssc *SelfSignedCert) ImportState(av io.Reader) error {
	ssc.state = &selfSignedCertState{}
	if err := json.NewDecoder(av).Decode(ssc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssc.Type(), ssc.LocalName(), err)
	}
	return nil
}

func (ssc *SelfSignedCert) State() (*selfSignedCertState, bool) {
	return ssc.state, ssc.state != nil
}

func (ssc *SelfSignedCert) StateMust() *selfSignedCertState {
	if ssc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssc.Type(), ssc.LocalName()))
	}
	return ssc.state
}

func (ssc *SelfSignedCert) DependOn() terra.Reference {
	return terra.ReferenceResource(ssc)
}

type SelfSignedCertArgs struct {
	// AllowedUses: list of string, required
	AllowedUses terra.ListValue[terra.StringValue] `hcl:"allowed_uses,attr" validate:"required"`
	// DnsNames: list of string, optional
	DnsNames terra.ListValue[terra.StringValue] `hcl:"dns_names,attr"`
	// EarlyRenewalHours: number, optional
	EarlyRenewalHours terra.NumberValue `hcl:"early_renewal_hours,attr"`
	// IpAddresses: list of string, optional
	IpAddresses terra.ListValue[terra.StringValue] `hcl:"ip_addresses,attr"`
	// IsCaCertificate: bool, optional
	IsCaCertificate terra.BoolValue `hcl:"is_ca_certificate,attr"`
	// PrivateKeyPem: string, required
	PrivateKeyPem terra.StringValue `hcl:"private_key_pem,attr" validate:"required"`
	// SetAuthorityKeyId: bool, optional
	SetAuthorityKeyId terra.BoolValue `hcl:"set_authority_key_id,attr"`
	// SetSubjectKeyId: bool, optional
	SetSubjectKeyId terra.BoolValue `hcl:"set_subject_key_id,attr"`
	// Uris: list of string, optional
	Uris terra.ListValue[terra.StringValue] `hcl:"uris,attr"`
	// ValidityPeriodHours: number, required
	ValidityPeriodHours terra.NumberValue `hcl:"validity_period_hours,attr" validate:"required"`
	// Subject: optional
	Subject *selfsignedcert.Subject `hcl:"subject,block"`
	// DependsOn contains resources that SelfSignedCert depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type selfSignedCertAttributes struct {
	ref terra.Reference
}

func (ssc selfSignedCertAttributes) AllowedUses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ssc.ref.Append("allowed_uses"))
}

func (ssc selfSignedCertAttributes) CertPem() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("cert_pem"))
}

func (ssc selfSignedCertAttributes) DnsNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ssc.ref.Append("dns_names"))
}

func (ssc selfSignedCertAttributes) EarlyRenewalHours() terra.NumberValue {
	return terra.ReferenceNumber(ssc.ref.Append("early_renewal_hours"))
}

func (ssc selfSignedCertAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("id"))
}

func (ssc selfSignedCertAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ssc.ref.Append("ip_addresses"))
}

func (ssc selfSignedCertAttributes) IsCaCertificate() terra.BoolValue {
	return terra.ReferenceBool(ssc.ref.Append("is_ca_certificate"))
}

func (ssc selfSignedCertAttributes) KeyAlgorithm() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("key_algorithm"))
}

func (ssc selfSignedCertAttributes) PrivateKeyPem() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("private_key_pem"))
}

func (ssc selfSignedCertAttributes) ReadyForRenewal() terra.BoolValue {
	return terra.ReferenceBool(ssc.ref.Append("ready_for_renewal"))
}

func (ssc selfSignedCertAttributes) SetAuthorityKeyId() terra.BoolValue {
	return terra.ReferenceBool(ssc.ref.Append("set_authority_key_id"))
}

func (ssc selfSignedCertAttributes) SetSubjectKeyId() terra.BoolValue {
	return terra.ReferenceBool(ssc.ref.Append("set_subject_key_id"))
}

func (ssc selfSignedCertAttributes) Uris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ssc.ref.Append("uris"))
}

func (ssc selfSignedCertAttributes) ValidityEndTime() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("validity_end_time"))
}

func (ssc selfSignedCertAttributes) ValidityPeriodHours() terra.NumberValue {
	return terra.ReferenceNumber(ssc.ref.Append("validity_period_hours"))
}

func (ssc selfSignedCertAttributes) ValidityStartTime() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("validity_start_time"))
}

func (ssc selfSignedCertAttributes) Subject() terra.ListValue[selfsignedcert.SubjectAttributes] {
	return terra.ReferenceList[selfsignedcert.SubjectAttributes](ssc.ref.Append("subject"))
}

type selfSignedCertState struct {
	AllowedUses         []string                      `json:"allowed_uses"`
	CertPem             string                        `json:"cert_pem"`
	DnsNames            []string                      `json:"dns_names"`
	EarlyRenewalHours   float64                       `json:"early_renewal_hours"`
	Id                  string                        `json:"id"`
	IpAddresses         []string                      `json:"ip_addresses"`
	IsCaCertificate     bool                          `json:"is_ca_certificate"`
	KeyAlgorithm        string                        `json:"key_algorithm"`
	PrivateKeyPem       string                        `json:"private_key_pem"`
	ReadyForRenewal     bool                          `json:"ready_for_renewal"`
	SetAuthorityKeyId   bool                          `json:"set_authority_key_id"`
	SetSubjectKeyId     bool                          `json:"set_subject_key_id"`
	Uris                []string                      `json:"uris"`
	ValidityEndTime     string                        `json:"validity_end_time"`
	ValidityPeriodHours float64                       `json:"validity_period_hours"`
	ValidityStartTime   string                        `json:"validity_start_time"`
	Subject             []selfsignedcert.SubjectState `json:"subject"`
}
