// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package tls_cert_request

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource tls_cert_request.
type Resource struct {
	Name      string
	Args      Args
	state     *tlsCertRequestState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (tcr *Resource) Type() string {
	return "tls_cert_request"
}

// LocalName returns the local name for [Resource].
func (tcr *Resource) LocalName() string {
	return tcr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (tcr *Resource) Configuration() interface{} {
	return tcr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (tcr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(tcr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (tcr *Resource) Dependencies() terra.Dependencies {
	return tcr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (tcr *Resource) LifecycleManagement() *terra.Lifecycle {
	return tcr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (tcr *Resource) Attributes() tlsCertRequestAttributes {
	return tlsCertRequestAttributes{ref: terra.ReferenceResource(tcr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (tcr *Resource) ImportState(state io.Reader) error {
	tcr.state = &tlsCertRequestState{}
	if err := json.NewDecoder(state).Decode(tcr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tcr.Type(), tcr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (tcr *Resource) State() (*tlsCertRequestState, bool) {
	return tcr.state, tcr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (tcr *Resource) StateMust() *tlsCertRequestState {
	if tcr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tcr.Type(), tcr.LocalName()))
	}
	return tcr.state
}

// Args contains the configurations for tls_cert_request.
type Args struct {
	// DnsNames: list of string, optional
	DnsNames terra.ListValue[terra.StringValue] `hcl:"dns_names,attr"`
	// IpAddresses: list of string, optional
	IpAddresses terra.ListValue[terra.StringValue] `hcl:"ip_addresses,attr"`
	// PrivateKeyPem: string, required
	PrivateKeyPem terra.StringValue `hcl:"private_key_pem,attr" validate:"required"`
	// Uris: list of string, optional
	Uris terra.ListValue[terra.StringValue] `hcl:"uris,attr"`
	// Subject: min=0
	Subject []Subject `hcl:"subject,block" validate:"min=0"`
}

type tlsCertRequestAttributes struct {
	ref terra.Reference
}

// CertRequestPem returns a reference to field cert_request_pem of tls_cert_request.
func (tcr tlsCertRequestAttributes) CertRequestPem() terra.StringValue {
	return terra.ReferenceAsString(tcr.ref.Append("cert_request_pem"))
}

// DnsNames returns a reference to field dns_names of tls_cert_request.
func (tcr tlsCertRequestAttributes) DnsNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tcr.ref.Append("dns_names"))
}

// Id returns a reference to field id of tls_cert_request.
func (tcr tlsCertRequestAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tcr.ref.Append("id"))
}

// IpAddresses returns a reference to field ip_addresses of tls_cert_request.
func (tcr tlsCertRequestAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tcr.ref.Append("ip_addresses"))
}

// KeyAlgorithm returns a reference to field key_algorithm of tls_cert_request.
func (tcr tlsCertRequestAttributes) KeyAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(tcr.ref.Append("key_algorithm"))
}

// PrivateKeyPem returns a reference to field private_key_pem of tls_cert_request.
func (tcr tlsCertRequestAttributes) PrivateKeyPem() terra.StringValue {
	return terra.ReferenceAsString(tcr.ref.Append("private_key_pem"))
}

// Uris returns a reference to field uris of tls_cert_request.
func (tcr tlsCertRequestAttributes) Uris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tcr.ref.Append("uris"))
}

func (tcr tlsCertRequestAttributes) Subject() terra.ListValue[SubjectAttributes] {
	return terra.ReferenceAsList[SubjectAttributes](tcr.ref.Append("subject"))
}

type tlsCertRequestState struct {
	CertRequestPem string         `json:"cert_request_pem"`
	DnsNames       []string       `json:"dns_names"`
	Id             string         `json:"id"`
	IpAddresses    []string       `json:"ip_addresses"`
	KeyAlgorithm   string         `json:"key_algorithm"`
	PrivateKeyPem  string         `json:"private_key_pem"`
	Uris           []string       `json:"uris"`
	Subject        []SubjectState `json:"subject"`
}
