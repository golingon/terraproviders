// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package tls_self_signed_cert

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource tls_self_signed_cert.
type Resource struct {
	Name      string
	Args      Args
	state     *tlsSelfSignedCertState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (tssc *Resource) Type() string {
	return "tls_self_signed_cert"
}

// LocalName returns the local name for [Resource].
func (tssc *Resource) LocalName() string {
	return tssc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (tssc *Resource) Configuration() interface{} {
	return tssc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (tssc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(tssc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (tssc *Resource) Dependencies() terra.Dependencies {
	return tssc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (tssc *Resource) LifecycleManagement() *terra.Lifecycle {
	return tssc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (tssc *Resource) Attributes() tlsSelfSignedCertAttributes {
	return tlsSelfSignedCertAttributes{ref: terra.ReferenceResource(tssc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (tssc *Resource) ImportState(state io.Reader) error {
	tssc.state = &tlsSelfSignedCertState{}
	if err := json.NewDecoder(state).Decode(tssc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tssc.Type(), tssc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (tssc *Resource) State() (*tlsSelfSignedCertState, bool) {
	return tssc.state, tssc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (tssc *Resource) StateMust() *tlsSelfSignedCertState {
	if tssc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tssc.Type(), tssc.LocalName()))
	}
	return tssc.state
}

// Args contains the configurations for tls_self_signed_cert.
type Args struct {
	// AllowedUses: list of string, required
	AllowedUses terra.ListValue[terra.StringValue] `hcl:"allowed_uses,attr" validate:"required"`
	// DnsNames: list of string, optional
	DnsNames terra.ListValue[terra.StringValue] `hcl:"dns_names,attr"`
	// EarlyRenewalHours: number, optional
	EarlyRenewalHours terra.NumberValue `hcl:"early_renewal_hours,attr"`
	// IpAddresses: list of string, optional
	IpAddresses terra.ListValue[terra.StringValue] `hcl:"ip_addresses,attr"`
	// IsCaCertificate: bool, optional
	IsCaCertificate terra.BoolValue `hcl:"is_ca_certificate,attr"`
	// PrivateKeyPem: string, required
	PrivateKeyPem terra.StringValue `hcl:"private_key_pem,attr" validate:"required"`
	// SetAuthorityKeyId: bool, optional
	SetAuthorityKeyId terra.BoolValue `hcl:"set_authority_key_id,attr"`
	// SetSubjectKeyId: bool, optional
	SetSubjectKeyId terra.BoolValue `hcl:"set_subject_key_id,attr"`
	// Uris: list of string, optional
	Uris terra.ListValue[terra.StringValue] `hcl:"uris,attr"`
	// ValidityPeriodHours: number, required
	ValidityPeriodHours terra.NumberValue `hcl:"validity_period_hours,attr" validate:"required"`
	// Subject: min=0
	Subject []Subject `hcl:"subject,block" validate:"min=0"`
}

type tlsSelfSignedCertAttributes struct {
	ref terra.Reference
}

// AllowedUses returns a reference to field allowed_uses of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) AllowedUses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tssc.ref.Append("allowed_uses"))
}

// CertPem returns a reference to field cert_pem of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) CertPem() terra.StringValue {
	return terra.ReferenceAsString(tssc.ref.Append("cert_pem"))
}

// DnsNames returns a reference to field dns_names of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) DnsNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tssc.ref.Append("dns_names"))
}

// EarlyRenewalHours returns a reference to field early_renewal_hours of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) EarlyRenewalHours() terra.NumberValue {
	return terra.ReferenceAsNumber(tssc.ref.Append("early_renewal_hours"))
}

// Id returns a reference to field id of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tssc.ref.Append("id"))
}

// IpAddresses returns a reference to field ip_addresses of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tssc.ref.Append("ip_addresses"))
}

// IsCaCertificate returns a reference to field is_ca_certificate of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) IsCaCertificate() terra.BoolValue {
	return terra.ReferenceAsBool(tssc.ref.Append("is_ca_certificate"))
}

// KeyAlgorithm returns a reference to field key_algorithm of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) KeyAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(tssc.ref.Append("key_algorithm"))
}

// PrivateKeyPem returns a reference to field private_key_pem of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) PrivateKeyPem() terra.StringValue {
	return terra.ReferenceAsString(tssc.ref.Append("private_key_pem"))
}

// ReadyForRenewal returns a reference to field ready_for_renewal of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) ReadyForRenewal() terra.BoolValue {
	return terra.ReferenceAsBool(tssc.ref.Append("ready_for_renewal"))
}

// SetAuthorityKeyId returns a reference to field set_authority_key_id of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) SetAuthorityKeyId() terra.BoolValue {
	return terra.ReferenceAsBool(tssc.ref.Append("set_authority_key_id"))
}

// SetSubjectKeyId returns a reference to field set_subject_key_id of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) SetSubjectKeyId() terra.BoolValue {
	return terra.ReferenceAsBool(tssc.ref.Append("set_subject_key_id"))
}

// Uris returns a reference to field uris of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) Uris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tssc.ref.Append("uris"))
}

// ValidityEndTime returns a reference to field validity_end_time of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) ValidityEndTime() terra.StringValue {
	return terra.ReferenceAsString(tssc.ref.Append("validity_end_time"))
}

// ValidityPeriodHours returns a reference to field validity_period_hours of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) ValidityPeriodHours() terra.NumberValue {
	return terra.ReferenceAsNumber(tssc.ref.Append("validity_period_hours"))
}

// ValidityStartTime returns a reference to field validity_start_time of tls_self_signed_cert.
func (tssc tlsSelfSignedCertAttributes) ValidityStartTime() terra.StringValue {
	return terra.ReferenceAsString(tssc.ref.Append("validity_start_time"))
}

func (tssc tlsSelfSignedCertAttributes) Subject() terra.ListValue[SubjectAttributes] {
	return terra.ReferenceAsList[SubjectAttributes](tssc.ref.Append("subject"))
}

type tlsSelfSignedCertState struct {
	AllowedUses         []string       `json:"allowed_uses"`
	CertPem             string         `json:"cert_pem"`
	DnsNames            []string       `json:"dns_names"`
	EarlyRenewalHours   float64        `json:"early_renewal_hours"`
	Id                  string         `json:"id"`
	IpAddresses         []string       `json:"ip_addresses"`
	IsCaCertificate     bool           `json:"is_ca_certificate"`
	KeyAlgorithm        string         `json:"key_algorithm"`
	PrivateKeyPem       string         `json:"private_key_pem"`
	ReadyForRenewal     bool           `json:"ready_for_renewal"`
	SetAuthorityKeyId   bool           `json:"set_authority_key_id"`
	SetSubjectKeyId     bool           `json:"set_subject_key_id"`
	Uris                []string       `json:"uris"`
	ValidityEndTime     string         `json:"validity_end_time"`
	ValidityPeriodHours float64        `json:"validity_period_hours"`
	ValidityStartTime   string         `json:"validity_start_time"`
	Subject             []SubjectState `json:"subject"`
}
