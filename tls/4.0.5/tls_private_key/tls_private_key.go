// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package tls_private_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource tls_private_key.
type Resource struct {
	Name      string
	Args      Args
	state     *tlsPrivateKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (tpk *Resource) Type() string {
	return "tls_private_key"
}

// LocalName returns the local name for [Resource].
func (tpk *Resource) LocalName() string {
	return tpk.Name
}

// Configuration returns the configuration (args) for [Resource].
func (tpk *Resource) Configuration() interface{} {
	return tpk.Args
}

// DependOn is used for other resources to depend on [Resource].
func (tpk *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(tpk)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (tpk *Resource) Dependencies() terra.Dependencies {
	return tpk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (tpk *Resource) LifecycleManagement() *terra.Lifecycle {
	return tpk.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (tpk *Resource) Attributes() tlsPrivateKeyAttributes {
	return tlsPrivateKeyAttributes{ref: terra.ReferenceResource(tpk)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (tpk *Resource) ImportState(state io.Reader) error {
	tpk.state = &tlsPrivateKeyState{}
	if err := json.NewDecoder(state).Decode(tpk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tpk.Type(), tpk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (tpk *Resource) State() (*tlsPrivateKeyState, bool) {
	return tpk.state, tpk.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (tpk *Resource) StateMust() *tlsPrivateKeyState {
	if tpk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tpk.Type(), tpk.LocalName()))
	}
	return tpk.state
}

// Args contains the configurations for tls_private_key.
type Args struct {
	// Algorithm: string, required
	Algorithm terra.StringValue `hcl:"algorithm,attr" validate:"required"`
	// EcdsaCurve: string, optional
	EcdsaCurve terra.StringValue `hcl:"ecdsa_curve,attr"`
	// RsaBits: number, optional
	RsaBits terra.NumberValue `hcl:"rsa_bits,attr"`
}

type tlsPrivateKeyAttributes struct {
	ref terra.Reference
}

// Algorithm returns a reference to field algorithm of tls_private_key.
func (tpk tlsPrivateKeyAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceAsString(tpk.ref.Append("algorithm"))
}

// EcdsaCurve returns a reference to field ecdsa_curve of tls_private_key.
func (tpk tlsPrivateKeyAttributes) EcdsaCurve() terra.StringValue {
	return terra.ReferenceAsString(tpk.ref.Append("ecdsa_curve"))
}

// Id returns a reference to field id of tls_private_key.
func (tpk tlsPrivateKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tpk.ref.Append("id"))
}

// PrivateKeyOpenssh returns a reference to field private_key_openssh of tls_private_key.
func (tpk tlsPrivateKeyAttributes) PrivateKeyOpenssh() terra.StringValue {
	return terra.ReferenceAsString(tpk.ref.Append("private_key_openssh"))
}

// PrivateKeyPem returns a reference to field private_key_pem of tls_private_key.
func (tpk tlsPrivateKeyAttributes) PrivateKeyPem() terra.StringValue {
	return terra.ReferenceAsString(tpk.ref.Append("private_key_pem"))
}

// PrivateKeyPemPkcs8 returns a reference to field private_key_pem_pkcs8 of tls_private_key.
func (tpk tlsPrivateKeyAttributes) PrivateKeyPemPkcs8() terra.StringValue {
	return terra.ReferenceAsString(tpk.ref.Append("private_key_pem_pkcs8"))
}

// PublicKeyFingerprintMd5 returns a reference to field public_key_fingerprint_md5 of tls_private_key.
func (tpk tlsPrivateKeyAttributes) PublicKeyFingerprintMd5() terra.StringValue {
	return terra.ReferenceAsString(tpk.ref.Append("public_key_fingerprint_md5"))
}

// PublicKeyFingerprintSha256 returns a reference to field public_key_fingerprint_sha256 of tls_private_key.
func (tpk tlsPrivateKeyAttributes) PublicKeyFingerprintSha256() terra.StringValue {
	return terra.ReferenceAsString(tpk.ref.Append("public_key_fingerprint_sha256"))
}

// PublicKeyOpenssh returns a reference to field public_key_openssh of tls_private_key.
func (tpk tlsPrivateKeyAttributes) PublicKeyOpenssh() terra.StringValue {
	return terra.ReferenceAsString(tpk.ref.Append("public_key_openssh"))
}

// PublicKeyPem returns a reference to field public_key_pem of tls_private_key.
func (tpk tlsPrivateKeyAttributes) PublicKeyPem() terra.StringValue {
	return terra.ReferenceAsString(tpk.ref.Append("public_key_pem"))
}

// RsaBits returns a reference to field rsa_bits of tls_private_key.
func (tpk tlsPrivateKeyAttributes) RsaBits() terra.NumberValue {
	return terra.ReferenceAsNumber(tpk.ref.Append("rsa_bits"))
}

type tlsPrivateKeyState struct {
	Algorithm                  string  `json:"algorithm"`
	EcdsaCurve                 string  `json:"ecdsa_curve"`
	Id                         string  `json:"id"`
	PrivateKeyOpenssh          string  `json:"private_key_openssh"`
	PrivateKeyPem              string  `json:"private_key_pem"`
	PrivateKeyPemPkcs8         string  `json:"private_key_pem_pkcs8"`
	PublicKeyFingerprintMd5    string  `json:"public_key_fingerprint_md5"`
	PublicKeyFingerprintSha256 string  `json:"public_key_fingerprint_sha256"`
	PublicKeyOpenssh           string  `json:"public_key_openssh"`
	PublicKeyPem               string  `json:"public_key_pem"`
	RsaBits                    float64 `json:"rsa_bits"`
}
