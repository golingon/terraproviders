// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package tls_certificate

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataCertificatesAttributes struct {
	ref terra.Reference
}

func (c DataCertificatesAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataCertificatesAttributes) InternalWithRef(ref terra.Reference) DataCertificatesAttributes {
	return DataCertificatesAttributes{ref: ref}
}

func (c DataCertificatesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataCertificatesAttributes) CertPem() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("cert_pem"))
}

func (c DataCertificatesAttributes) IsCa() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("is_ca"))
}

func (c DataCertificatesAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("issuer"))
}

func (c DataCertificatesAttributes) NotAfter() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("not_after"))
}

func (c DataCertificatesAttributes) NotBefore() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("not_before"))
}

func (c DataCertificatesAttributes) PublicKeyAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("public_key_algorithm"))
}

func (c DataCertificatesAttributes) SerialNumber() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("serial_number"))
}

func (c DataCertificatesAttributes) Sha1Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("sha1_fingerprint"))
}

func (c DataCertificatesAttributes) SignatureAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("signature_algorithm"))
}

func (c DataCertificatesAttributes) Subject() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("subject"))
}

func (c DataCertificatesAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("version"))
}

type DataCertificatesState struct {
	CertPem            string  `json:"cert_pem"`
	IsCa               bool    `json:"is_ca"`
	Issuer             string  `json:"issuer"`
	NotAfter           string  `json:"not_after"`
	NotBefore          string  `json:"not_before"`
	PublicKeyAlgorithm string  `json:"public_key_algorithm"`
	SerialNumber       string  `json:"serial_number"`
	Sha1Fingerprint    string  `json:"sha1_fingerprint"`
	SignatureAlgorithm string  `json:"signature_algorithm"`
	Subject            string  `json:"subject"`
	Version            float64 `json:"version"`
}
