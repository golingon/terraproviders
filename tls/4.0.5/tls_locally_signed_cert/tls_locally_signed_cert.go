// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package tls_locally_signed_cert

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource tls_locally_signed_cert.
type Resource struct {
	Name      string
	Args      Args
	state     *tlsLocallySignedCertState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (tlsc *Resource) Type() string {
	return "tls_locally_signed_cert"
}

// LocalName returns the local name for [Resource].
func (tlsc *Resource) LocalName() string {
	return tlsc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (tlsc *Resource) Configuration() interface{} {
	return tlsc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (tlsc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(tlsc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (tlsc *Resource) Dependencies() terra.Dependencies {
	return tlsc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (tlsc *Resource) LifecycleManagement() *terra.Lifecycle {
	return tlsc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (tlsc *Resource) Attributes() tlsLocallySignedCertAttributes {
	return tlsLocallySignedCertAttributes{ref: terra.ReferenceResource(tlsc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (tlsc *Resource) ImportState(state io.Reader) error {
	tlsc.state = &tlsLocallySignedCertState{}
	if err := json.NewDecoder(state).Decode(tlsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tlsc.Type(), tlsc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (tlsc *Resource) State() (*tlsLocallySignedCertState, bool) {
	return tlsc.state, tlsc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (tlsc *Resource) StateMust() *tlsLocallySignedCertState {
	if tlsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tlsc.Type(), tlsc.LocalName()))
	}
	return tlsc.state
}

// Args contains the configurations for tls_locally_signed_cert.
type Args struct {
	// AllowedUses: list of string, required
	AllowedUses terra.ListValue[terra.StringValue] `hcl:"allowed_uses,attr" validate:"required"`
	// CaCertPem: string, required
	CaCertPem terra.StringValue `hcl:"ca_cert_pem,attr" validate:"required"`
	// CaPrivateKeyPem: string, required
	CaPrivateKeyPem terra.StringValue `hcl:"ca_private_key_pem,attr" validate:"required"`
	// CertRequestPem: string, required
	CertRequestPem terra.StringValue `hcl:"cert_request_pem,attr" validate:"required"`
	// EarlyRenewalHours: number, optional
	EarlyRenewalHours terra.NumberValue `hcl:"early_renewal_hours,attr"`
	// IsCaCertificate: bool, optional
	IsCaCertificate terra.BoolValue `hcl:"is_ca_certificate,attr"`
	// SetSubjectKeyId: bool, optional
	SetSubjectKeyId terra.BoolValue `hcl:"set_subject_key_id,attr"`
	// ValidityPeriodHours: number, required
	ValidityPeriodHours terra.NumberValue `hcl:"validity_period_hours,attr" validate:"required"`
}

type tlsLocallySignedCertAttributes struct {
	ref terra.Reference
}

// AllowedUses returns a reference to field allowed_uses of tls_locally_signed_cert.
func (tlsc tlsLocallySignedCertAttributes) AllowedUses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tlsc.ref.Append("allowed_uses"))
}

// CaCertPem returns a reference to field ca_cert_pem of tls_locally_signed_cert.
func (tlsc tlsLocallySignedCertAttributes) CaCertPem() terra.StringValue {
	return terra.ReferenceAsString(tlsc.ref.Append("ca_cert_pem"))
}

// CaKeyAlgorithm returns a reference to field ca_key_algorithm of tls_locally_signed_cert.
func (tlsc tlsLocallySignedCertAttributes) CaKeyAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(tlsc.ref.Append("ca_key_algorithm"))
}

// CaPrivateKeyPem returns a reference to field ca_private_key_pem of tls_locally_signed_cert.
func (tlsc tlsLocallySignedCertAttributes) CaPrivateKeyPem() terra.StringValue {
	return terra.ReferenceAsString(tlsc.ref.Append("ca_private_key_pem"))
}

// CertPem returns a reference to field cert_pem of tls_locally_signed_cert.
func (tlsc tlsLocallySignedCertAttributes) CertPem() terra.StringValue {
	return terra.ReferenceAsString(tlsc.ref.Append("cert_pem"))
}

// CertRequestPem returns a reference to field cert_request_pem of tls_locally_signed_cert.
func (tlsc tlsLocallySignedCertAttributes) CertRequestPem() terra.StringValue {
	return terra.ReferenceAsString(tlsc.ref.Append("cert_request_pem"))
}

// EarlyRenewalHours returns a reference to field early_renewal_hours of tls_locally_signed_cert.
func (tlsc tlsLocallySignedCertAttributes) EarlyRenewalHours() terra.NumberValue {
	return terra.ReferenceAsNumber(tlsc.ref.Append("early_renewal_hours"))
}

// Id returns a reference to field id of tls_locally_signed_cert.
func (tlsc tlsLocallySignedCertAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tlsc.ref.Append("id"))
}

// IsCaCertificate returns a reference to field is_ca_certificate of tls_locally_signed_cert.
func (tlsc tlsLocallySignedCertAttributes) IsCaCertificate() terra.BoolValue {
	return terra.ReferenceAsBool(tlsc.ref.Append("is_ca_certificate"))
}

// ReadyForRenewal returns a reference to field ready_for_renewal of tls_locally_signed_cert.
func (tlsc tlsLocallySignedCertAttributes) ReadyForRenewal() terra.BoolValue {
	return terra.ReferenceAsBool(tlsc.ref.Append("ready_for_renewal"))
}

// SetSubjectKeyId returns a reference to field set_subject_key_id of tls_locally_signed_cert.
func (tlsc tlsLocallySignedCertAttributes) SetSubjectKeyId() terra.BoolValue {
	return terra.ReferenceAsBool(tlsc.ref.Append("set_subject_key_id"))
}

// ValidityEndTime returns a reference to field validity_end_time of tls_locally_signed_cert.
func (tlsc tlsLocallySignedCertAttributes) ValidityEndTime() terra.StringValue {
	return terra.ReferenceAsString(tlsc.ref.Append("validity_end_time"))
}

// ValidityPeriodHours returns a reference to field validity_period_hours of tls_locally_signed_cert.
func (tlsc tlsLocallySignedCertAttributes) ValidityPeriodHours() terra.NumberValue {
	return terra.ReferenceAsNumber(tlsc.ref.Append("validity_period_hours"))
}

// ValidityStartTime returns a reference to field validity_start_time of tls_locally_signed_cert.
func (tlsc tlsLocallySignedCertAttributes) ValidityStartTime() terra.StringValue {
	return terra.ReferenceAsString(tlsc.ref.Append("validity_start_time"))
}

type tlsLocallySignedCertState struct {
	AllowedUses         []string `json:"allowed_uses"`
	CaCertPem           string   `json:"ca_cert_pem"`
	CaKeyAlgorithm      string   `json:"ca_key_algorithm"`
	CaPrivateKeyPem     string   `json:"ca_private_key_pem"`
	CertPem             string   `json:"cert_pem"`
	CertRequestPem      string   `json:"cert_request_pem"`
	EarlyRenewalHours   float64  `json:"early_renewal_hours"`
	Id                  string   `json:"id"`
	IsCaCertificate     bool     `json:"is_ca_certificate"`
	ReadyForRenewal     bool     `json:"ready_for_renewal"`
	SetSubjectKeyId     bool     `json:"set_subject_key_id"`
	ValidityEndTime     string   `json:"validity_end_time"`
	ValidityPeriodHours float64  `json:"validity_period_hours"`
	ValidityStartTime   string   `json:"validity_start_time"`
}
