// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package groupmembers

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Members struct {
	// DeliverySettings: string, optional
	DeliverySettings terra.StringValue `hcl:"delivery_settings,attr"`
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// Role: string, optional
	Role terra.StringValue `hcl:"role,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type MembersAttributes struct {
	ref terra.Reference
}

func (m MembersAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MembersAttributes) InternalWithRef(ref terra.Reference) MembersAttributes {
	return MembersAttributes{ref: ref}
}

func (m MembersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MembersAttributes) DeliverySettings() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("delivery_settings"))
}

func (m MembersAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("email"))
}

func (m MembersAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("id"))
}

func (m MembersAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("role"))
}

func (m MembersAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("status"))
}

func (m MembersAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("type"))
}

type MembersState struct {
	DeliverySettings string `json:"delivery_settings"`
	Email            string `json:"email"`
	Id               string `json:"id"`
	Role             string `json:"role"`
	Status           string `json:"status"`
	Type             string `json:"type"`
}
