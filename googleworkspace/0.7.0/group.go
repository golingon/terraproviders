// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	group "github.com/golingon/terraproviders/googleworkspace/0.7.0/group"
	"io"
)

// NewGroup creates a new instance of [Group].
func NewGroup(name string, args GroupArgs) *Group {
	return &Group{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Group)(nil)

// Group represents the Terraform resource googleworkspace_group.
type Group struct {
	Name      string
	Args      GroupArgs
	state     *groupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Group].
func (g *Group) Type() string {
	return "googleworkspace_group"
}

// LocalName returns the local name for [Group].
func (g *Group) LocalName() string {
	return g.Name
}

// Configuration returns the configuration (args) for [Group].
func (g *Group) Configuration() interface{} {
	return g.Args
}

// DependOn is used for other resources to depend on [Group].
func (g *Group) DependOn() terra.Reference {
	return terra.ReferenceResource(g)
}

// Dependencies returns the list of resources [Group] depends_on.
func (g *Group) Dependencies() terra.Dependencies {
	return g.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Group].
func (g *Group) LifecycleManagement() *terra.Lifecycle {
	return g.Lifecycle
}

// Attributes returns the attributes for [Group].
func (g *Group) Attributes() groupAttributes {
	return groupAttributes{ref: terra.ReferenceResource(g)}
}

// ImportState imports the given attribute values into [Group]'s state.
func (g *Group) ImportState(av io.Reader) error {
	g.state = &groupState{}
	if err := json.NewDecoder(av).Decode(g.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", g.Type(), g.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Group] has state.
func (g *Group) State() (*groupState, bool) {
	return g.state, g.state != nil
}

// StateMust returns the state for [Group]. Panics if the state is nil.
func (g *Group) StateMust() *groupState {
	if g.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", g.Type(), g.LocalName()))
	}
	return g.state
}

// GroupArgs contains the configurations for googleworkspace_group.
type GroupArgs struct {
	// Aliases: list of string, optional
	Aliases terra.ListValue[terra.StringValue] `hcl:"aliases,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Timeouts: optional
	Timeouts *group.Timeouts `hcl:"timeouts,block"`
}
type groupAttributes struct {
	ref terra.Reference
}

// AdminCreated returns a reference to field admin_created of googleworkspace_group.
func (g groupAttributes) AdminCreated() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("admin_created"))
}

// Aliases returns a reference to field aliases of googleworkspace_group.
func (g groupAttributes) Aliases() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](g.ref.Append("aliases"))
}

// Description returns a reference to field description of googleworkspace_group.
func (g groupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("description"))
}

// DirectMembersCount returns a reference to field direct_members_count of googleworkspace_group.
func (g groupAttributes) DirectMembersCount() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("direct_members_count"))
}

// Email returns a reference to field email of googleworkspace_group.
func (g groupAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("email"))
}

// Etag returns a reference to field etag of googleworkspace_group.
func (g groupAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("etag"))
}

// Id returns a reference to field id of googleworkspace_group.
func (g groupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("id"))
}

// Name returns a reference to field name of googleworkspace_group.
func (g groupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("name"))
}

// NonEditableAliases returns a reference to field non_editable_aliases of googleworkspace_group.
func (g groupAttributes) NonEditableAliases() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](g.ref.Append("non_editable_aliases"))
}

func (g groupAttributes) Timeouts() group.TimeoutsAttributes {
	return terra.ReferenceAsSingle[group.TimeoutsAttributes](g.ref.Append("timeouts"))
}

type groupState struct {
	AdminCreated       bool                 `json:"admin_created"`
	Aliases            []string             `json:"aliases"`
	Description        string               `json:"description"`
	DirectMembersCount float64              `json:"direct_members_count"`
	Email              string               `json:"email"`
	Etag               string               `json:"etag"`
	Id                 string               `json:"id"`
	Name               string               `json:"name"`
	NonEditableAliases []string             `json:"non_editable_aliases"`
	Timeouts           *group.TimeoutsState `json:"timeouts"`
}
