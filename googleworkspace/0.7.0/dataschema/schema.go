// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dataschema

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Fields struct {
	// NumericIndexingSpec: min=0
	NumericIndexingSpec []NumericIndexingSpec `hcl:"numeric_indexing_spec,block" validate:"min=0"`
}

type NumericIndexingSpec struct{}

type FieldsAttributes struct {
	ref terra.Reference
}

func (f FieldsAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FieldsAttributes) InternalWithRef(ref terra.Reference) FieldsAttributes {
	return FieldsAttributes{ref: ref}
}

func (f FieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FieldsAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("display_name"))
}

func (f FieldsAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("etag"))
}

func (f FieldsAttributes) FieldId() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("field_id"))
}

func (f FieldsAttributes) FieldName() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("field_name"))
}

func (f FieldsAttributes) FieldType() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("field_type"))
}

func (f FieldsAttributes) Indexed() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("indexed"))
}

func (f FieldsAttributes) MultiValued() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("multi_valued"))
}

func (f FieldsAttributes) ReadAccessType() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("read_access_type"))
}

func (f FieldsAttributes) NumericIndexingSpec() terra.ListValue[NumericIndexingSpecAttributes] {
	return terra.ReferenceAsList[NumericIndexingSpecAttributes](f.ref.Append("numeric_indexing_spec"))
}

type NumericIndexingSpecAttributes struct {
	ref terra.Reference
}

func (nis NumericIndexingSpecAttributes) InternalRef() (terra.Reference, error) {
	return nis.ref, nil
}

func (nis NumericIndexingSpecAttributes) InternalWithRef(ref terra.Reference) NumericIndexingSpecAttributes {
	return NumericIndexingSpecAttributes{ref: ref}
}

func (nis NumericIndexingSpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nis.ref.InternalTokens()
}

func (nis NumericIndexingSpecAttributes) MaxValue() terra.NumberValue {
	return terra.ReferenceAsNumber(nis.ref.Append("max_value"))
}

func (nis NumericIndexingSpecAttributes) MinValue() terra.NumberValue {
	return terra.ReferenceAsNumber(nis.ref.Append("min_value"))
}

type FieldsState struct {
	DisplayName         string                     `json:"display_name"`
	Etag                string                     `json:"etag"`
	FieldId             string                     `json:"field_id"`
	FieldName           string                     `json:"field_name"`
	FieldType           string                     `json:"field_type"`
	Indexed             bool                       `json:"indexed"`
	MultiValued         bool                       `json:"multi_valued"`
	ReadAccessType      string                     `json:"read_access_type"`
	NumericIndexingSpec []NumericIndexingSpecState `json:"numeric_indexing_spec"`
}

type NumericIndexingSpecState struct {
	MaxValue float64 `json:"max_value"`
	MinValue float64 `json:"min_value"`
}
