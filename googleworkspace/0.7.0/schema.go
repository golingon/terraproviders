// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	schema "github.com/golingon/terraproviders/googleworkspace/0.7.0/schema"
	"io"
)

// NewSchema creates a new instance of [Schema].
func NewSchema(name string, args SchemaArgs) *Schema {
	return &Schema{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Schema)(nil)

// Schema represents the Terraform resource googleworkspace_schema.
type Schema struct {
	Name      string
	Args      SchemaArgs
	state     *schemaState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Schema].
func (s *Schema) Type() string {
	return "googleworkspace_schema"
}

// LocalName returns the local name for [Schema].
func (s *Schema) LocalName() string {
	return s.Name
}

// Configuration returns the configuration (args) for [Schema].
func (s *Schema) Configuration() interface{} {
	return s.Args
}

// DependOn is used for other resources to depend on [Schema].
func (s *Schema) DependOn() terra.Reference {
	return terra.ReferenceResource(s)
}

// Dependencies returns the list of resources [Schema] depends_on.
func (s *Schema) Dependencies() terra.Dependencies {
	return s.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Schema].
func (s *Schema) LifecycleManagement() *terra.Lifecycle {
	return s.Lifecycle
}

// Attributes returns the attributes for [Schema].
func (s *Schema) Attributes() schemaAttributes {
	return schemaAttributes{ref: terra.ReferenceResource(s)}
}

// ImportState imports the given attribute values into [Schema]'s state.
func (s *Schema) ImportState(av io.Reader) error {
	s.state = &schemaState{}
	if err := json.NewDecoder(av).Decode(s.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", s.Type(), s.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Schema] has state.
func (s *Schema) State() (*schemaState, bool) {
	return s.state, s.state != nil
}

// StateMust returns the state for [Schema]. Panics if the state is nil.
func (s *Schema) StateMust() *schemaState {
	if s.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", s.Type(), s.LocalName()))
	}
	return s.state
}

// SchemaArgs contains the configurations for googleworkspace_schema.
type SchemaArgs struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// SchemaName: string, required
	SchemaName terra.StringValue `hcl:"schema_name,attr" validate:"required"`
	// Fields: min=1
	Fields []schema.Fields `hcl:"fields,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *schema.Timeouts `hcl:"timeouts,block"`
}
type schemaAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of googleworkspace_schema.
func (s schemaAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("display_name"))
}

// Etag returns a reference to field etag of googleworkspace_schema.
func (s schemaAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("etag"))
}

// Id returns a reference to field id of googleworkspace_schema.
func (s schemaAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("id"))
}

// SchemaId returns a reference to field schema_id of googleworkspace_schema.
func (s schemaAttributes) SchemaId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("schema_id"))
}

// SchemaName returns a reference to field schema_name of googleworkspace_schema.
func (s schemaAttributes) SchemaName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("schema_name"))
}

func (s schemaAttributes) Fields() terra.ListValue[schema.FieldsAttributes] {
	return terra.ReferenceAsList[schema.FieldsAttributes](s.ref.Append("fields"))
}

func (s schemaAttributes) Timeouts() schema.TimeoutsAttributes {
	return terra.ReferenceAsSingle[schema.TimeoutsAttributes](s.ref.Append("timeouts"))
}

type schemaState struct {
	DisplayName string                `json:"display_name"`
	Etag        string                `json:"etag"`
	Id          string                `json:"id"`
	SchemaId    string                `json:"schema_id"`
	SchemaName  string                `json:"schema_name"`
	Fields      []schema.FieldsState  `json:"fields"`
	Timeouts    *schema.TimeoutsState `json:"timeouts"`
}
