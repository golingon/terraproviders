// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace_domain

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource googleworkspace_domain.
type Resource struct {
	Name      string
	Args      Args
	state     *googleworkspaceDomainState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gd *Resource) Type() string {
	return "googleworkspace_domain"
}

// LocalName returns the local name for [Resource].
func (gd *Resource) LocalName() string {
	return gd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gd *Resource) Configuration() interface{} {
	return gd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gd *Resource) Dependencies() terra.Dependencies {
	return gd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gd *Resource) LifecycleManagement() *terra.Lifecycle {
	return gd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gd *Resource) Attributes() googleworkspaceDomainAttributes {
	return googleworkspaceDomainAttributes{ref: terra.ReferenceResource(gd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gd *Resource) ImportState(state io.Reader) error {
	gd.state = &googleworkspaceDomainState{}
	if err := json.NewDecoder(state).Decode(gd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gd.Type(), gd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gd *Resource) State() (*googleworkspaceDomainState, bool) {
	return gd.state, gd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gd *Resource) StateMust() *googleworkspaceDomainState {
	if gd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gd.Type(), gd.LocalName()))
	}
	return gd.state
}

// Args contains the configurations for googleworkspace_domain.
type Args struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
}

type googleworkspaceDomainAttributes struct {
	ref terra.Reference
}

// CreationTime returns a reference to field creation_time of googleworkspace_domain.
func (gd googleworkspaceDomainAttributes) CreationTime() terra.NumberValue {
	return terra.ReferenceAsNumber(gd.ref.Append("creation_time"))
}

// DomainAliases returns a reference to field domain_aliases of googleworkspace_domain.
func (gd googleworkspaceDomainAttributes) DomainAliases() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gd.ref.Append("domain_aliases"))
}

// DomainName returns a reference to field domain_name of googleworkspace_domain.
func (gd googleworkspaceDomainAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(gd.ref.Append("domain_name"))
}

// Etag returns a reference to field etag of googleworkspace_domain.
func (gd googleworkspaceDomainAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gd.ref.Append("etag"))
}

// Id returns a reference to field id of googleworkspace_domain.
func (gd googleworkspaceDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gd.ref.Append("id"))
}

// IsPrimary returns a reference to field is_primary of googleworkspace_domain.
func (gd googleworkspaceDomainAttributes) IsPrimary() terra.BoolValue {
	return terra.ReferenceAsBool(gd.ref.Append("is_primary"))
}

// Verified returns a reference to field verified of googleworkspace_domain.
func (gd googleworkspaceDomainAttributes) Verified() terra.BoolValue {
	return terra.ReferenceAsBool(gd.ref.Append("verified"))
}

type googleworkspaceDomainState struct {
	CreationTime  float64  `json:"creation_time"`
	DomainAliases []string `json:"domain_aliases"`
	DomainName    string   `json:"domain_name"`
	Etag          string   `json:"etag"`
	Id            string   `json:"id"`
	IsPrimary     bool     `json:"is_primary"`
	Verified      bool     `json:"verified"`
}
