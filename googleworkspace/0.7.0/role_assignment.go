// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewRoleAssignment creates a new instance of [RoleAssignment].
func NewRoleAssignment(name string, args RoleAssignmentArgs) *RoleAssignment {
	return &RoleAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RoleAssignment)(nil)

// RoleAssignment represents the Terraform resource googleworkspace_role_assignment.
type RoleAssignment struct {
	Name      string
	Args      RoleAssignmentArgs
	state     *roleAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RoleAssignment].
func (ra *RoleAssignment) Type() string {
	return "googleworkspace_role_assignment"
}

// LocalName returns the local name for [RoleAssignment].
func (ra *RoleAssignment) LocalName() string {
	return ra.Name
}

// Configuration returns the configuration (args) for [RoleAssignment].
func (ra *RoleAssignment) Configuration() interface{} {
	return ra.Args
}

// DependOn is used for other resources to depend on [RoleAssignment].
func (ra *RoleAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(ra)
}

// Dependencies returns the list of resources [RoleAssignment] depends_on.
func (ra *RoleAssignment) Dependencies() terra.Dependencies {
	return ra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RoleAssignment].
func (ra *RoleAssignment) LifecycleManagement() *terra.Lifecycle {
	return ra.Lifecycle
}

// Attributes returns the attributes for [RoleAssignment].
func (ra *RoleAssignment) Attributes() roleAssignmentAttributes {
	return roleAssignmentAttributes{ref: terra.ReferenceResource(ra)}
}

// ImportState imports the given attribute values into [RoleAssignment]'s state.
func (ra *RoleAssignment) ImportState(av io.Reader) error {
	ra.state = &roleAssignmentState{}
	if err := json.NewDecoder(av).Decode(ra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ra.Type(), ra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RoleAssignment] has state.
func (ra *RoleAssignment) State() (*roleAssignmentState, bool) {
	return ra.state, ra.state != nil
}

// StateMust returns the state for [RoleAssignment]. Panics if the state is nil.
func (ra *RoleAssignment) StateMust() *roleAssignmentState {
	if ra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ra.Type(), ra.LocalName()))
	}
	return ra.state
}

// RoleAssignmentArgs contains the configurations for googleworkspace_role_assignment.
type RoleAssignmentArgs struct {
	// AssignedTo: string, required
	AssignedTo terra.StringValue `hcl:"assigned_to,attr" validate:"required"`
	// OrgUnitId: string, optional
	OrgUnitId terra.StringValue `hcl:"org_unit_id,attr"`
	// RoleId: string, required
	RoleId terra.StringValue `hcl:"role_id,attr" validate:"required"`
	// ScopeType: string, optional
	ScopeType terra.StringValue `hcl:"scope_type,attr"`
}
type roleAssignmentAttributes struct {
	ref terra.Reference
}

// AssignedTo returns a reference to field assigned_to of googleworkspace_role_assignment.
func (ra roleAssignmentAttributes) AssignedTo() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("assigned_to"))
}

// Etag returns a reference to field etag of googleworkspace_role_assignment.
func (ra roleAssignmentAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("etag"))
}

// Id returns a reference to field id of googleworkspace_role_assignment.
func (ra roleAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("id"))
}

// OrgUnitId returns a reference to field org_unit_id of googleworkspace_role_assignment.
func (ra roleAssignmentAttributes) OrgUnitId() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("org_unit_id"))
}

// RoleId returns a reference to field role_id of googleworkspace_role_assignment.
func (ra roleAssignmentAttributes) RoleId() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("role_id"))
}

// ScopeType returns a reference to field scope_type of googleworkspace_role_assignment.
func (ra roleAssignmentAttributes) ScopeType() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("scope_type"))
}

type roleAssignmentState struct {
	AssignedTo string `json:"assigned_to"`
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	OrgUnitId  string `json:"org_unit_id"`
	RoleId     string `json:"role_id"`
	ScopeType  string `json:"scope_type"`
}
