// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package chromepolicy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Policies struct {
	// SchemaName: string, required
	SchemaName terra.StringValue `hcl:"schema_name,attr" validate:"required"`
	// SchemaValues: map of string, required
	SchemaValues terra.MapValue[terra.StringValue] `hcl:"schema_values,attr" validate:"required"`
}

type PoliciesAttributes struct {
	ref terra.Reference
}

func (p PoliciesAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PoliciesAttributes) InternalWithRef(ref terra.Reference) PoliciesAttributes {
	return PoliciesAttributes{ref: ref}
}

func (p PoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PoliciesAttributes) SchemaName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("schema_name"))
}

func (p PoliciesAttributes) SchemaValues() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](p.ref.Append("schema_values"))
}

type PoliciesState struct {
	SchemaName   string            `json:"schema_name"`
	SchemaValues map[string]string `json:"schema_values"`
}
