// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace_schema

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Fields struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// FieldName: string, required
	FieldName terra.StringValue `hcl:"field_name,attr" validate:"required"`
	// FieldType: string, required
	FieldType terra.StringValue `hcl:"field_type,attr" validate:"required"`
	// Indexed: bool, optional
	Indexed terra.BoolValue `hcl:"indexed,attr"`
	// MultiValued: bool, optional
	MultiValued terra.BoolValue `hcl:"multi_valued,attr"`
	// ReadAccessType: string, optional
	ReadAccessType terra.StringValue `hcl:"read_access_type,attr"`
	// FieldsNumericIndexingSpec: optional
	NumericIndexingSpec *FieldsNumericIndexingSpec `hcl:"numeric_indexing_spec,block"`
}

type FieldsNumericIndexingSpec struct {
	// MaxValue: number, optional
	MaxValue terra.NumberValue `hcl:"max_value,attr"`
	// MinValue: number, optional
	MinValue terra.NumberValue `hcl:"min_value,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type FieldsAttributes struct {
	ref terra.Reference
}

func (f FieldsAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FieldsAttributes) InternalWithRef(ref terra.Reference) FieldsAttributes {
	return FieldsAttributes{ref: ref}
}

func (f FieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FieldsAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("display_name"))
}

func (f FieldsAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("etag"))
}

func (f FieldsAttributes) FieldId() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("field_id"))
}

func (f FieldsAttributes) FieldName() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("field_name"))
}

func (f FieldsAttributes) FieldType() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("field_type"))
}

func (f FieldsAttributes) Indexed() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("indexed"))
}

func (f FieldsAttributes) MultiValued() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("multi_valued"))
}

func (f FieldsAttributes) ReadAccessType() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("read_access_type"))
}

func (f FieldsAttributes) NumericIndexingSpec() terra.ListValue[FieldsNumericIndexingSpecAttributes] {
	return terra.ReferenceAsList[FieldsNumericIndexingSpecAttributes](f.ref.Append("numeric_indexing_spec"))
}

type FieldsNumericIndexingSpecAttributes struct {
	ref terra.Reference
}

func (nis FieldsNumericIndexingSpecAttributes) InternalRef() (terra.Reference, error) {
	return nis.ref, nil
}

func (nis FieldsNumericIndexingSpecAttributes) InternalWithRef(ref terra.Reference) FieldsNumericIndexingSpecAttributes {
	return FieldsNumericIndexingSpecAttributes{ref: ref}
}

func (nis FieldsNumericIndexingSpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nis.ref.InternalTokens()
}

func (nis FieldsNumericIndexingSpecAttributes) MaxValue() terra.NumberValue {
	return terra.ReferenceAsNumber(nis.ref.Append("max_value"))
}

func (nis FieldsNumericIndexingSpecAttributes) MinValue() terra.NumberValue {
	return terra.ReferenceAsNumber(nis.ref.Append("min_value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type FieldsState struct {
	DisplayName         string                           `json:"display_name"`
	Etag                string                           `json:"etag"`
	FieldId             string                           `json:"field_id"`
	FieldName           string                           `json:"field_name"`
	FieldType           string                           `json:"field_type"`
	Indexed             bool                             `json:"indexed"`
	MultiValued         bool                             `json:"multi_valued"`
	ReadAccessType      string                           `json:"read_access_type"`
	NumericIndexingSpec []FieldsNumericIndexingSpecState `json:"numeric_indexing_spec"`
}

type FieldsNumericIndexingSpecState struct {
	MaxValue float64 `json:"max_value"`
	MinValue float64 `json:"min_value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
