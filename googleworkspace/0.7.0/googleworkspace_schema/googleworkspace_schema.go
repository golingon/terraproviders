// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace_schema

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource googleworkspace_schema.
type Resource struct {
	Name      string
	Args      Args
	state     *googleworkspaceSchemaState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gs *Resource) Type() string {
	return "googleworkspace_schema"
}

// LocalName returns the local name for [Resource].
func (gs *Resource) LocalName() string {
	return gs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gs *Resource) Configuration() interface{} {
	return gs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gs *Resource) Dependencies() terra.Dependencies {
	return gs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gs *Resource) LifecycleManagement() *terra.Lifecycle {
	return gs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gs *Resource) Attributes() googleworkspaceSchemaAttributes {
	return googleworkspaceSchemaAttributes{ref: terra.ReferenceResource(gs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gs *Resource) ImportState(state io.Reader) error {
	gs.state = &googleworkspaceSchemaState{}
	if err := json.NewDecoder(state).Decode(gs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gs.Type(), gs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gs *Resource) State() (*googleworkspaceSchemaState, bool) {
	return gs.state, gs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gs *Resource) StateMust() *googleworkspaceSchemaState {
	if gs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gs.Type(), gs.LocalName()))
	}
	return gs.state
}

// Args contains the configurations for googleworkspace_schema.
type Args struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// SchemaName: string, required
	SchemaName terra.StringValue `hcl:"schema_name,attr" validate:"required"`
	// Fields: min=1
	Fields []Fields `hcl:"fields,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleworkspaceSchemaAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of googleworkspace_schema.
func (gs googleworkspaceSchemaAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gs.ref.Append("display_name"))
}

// Etag returns a reference to field etag of googleworkspace_schema.
func (gs googleworkspaceSchemaAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gs.ref.Append("etag"))
}

// Id returns a reference to field id of googleworkspace_schema.
func (gs googleworkspaceSchemaAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gs.ref.Append("id"))
}

// SchemaId returns a reference to field schema_id of googleworkspace_schema.
func (gs googleworkspaceSchemaAttributes) SchemaId() terra.StringValue {
	return terra.ReferenceAsString(gs.ref.Append("schema_id"))
}

// SchemaName returns a reference to field schema_name of googleworkspace_schema.
func (gs googleworkspaceSchemaAttributes) SchemaName() terra.StringValue {
	return terra.ReferenceAsString(gs.ref.Append("schema_name"))
}

func (gs googleworkspaceSchemaAttributes) Fields() terra.ListValue[FieldsAttributes] {
	return terra.ReferenceAsList[FieldsAttributes](gs.ref.Append("fields"))
}

func (gs googleworkspaceSchemaAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gs.ref.Append("timeouts"))
}

type googleworkspaceSchemaState struct {
	DisplayName string         `json:"display_name"`
	Etag        string         `json:"etag"`
	Id          string         `json:"id"`
	SchemaId    string         `json:"schema_id"`
	SchemaName  string         `json:"schema_name"`
	Fields      []FieldsState  `json:"fields"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
