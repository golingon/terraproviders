// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace_chrome_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource googleworkspace_chrome_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleworkspaceChromePolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcp *Resource) Type() string {
	return "googleworkspace_chrome_policy"
}

// LocalName returns the local name for [Resource].
func (gcp *Resource) LocalName() string {
	return gcp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcp *Resource) Configuration() interface{} {
	return gcp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcp *Resource) Dependencies() terra.Dependencies {
	return gcp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcp *Resource) Attributes() googleworkspaceChromePolicyAttributes {
	return googleworkspaceChromePolicyAttributes{ref: terra.ReferenceResource(gcp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcp *Resource) ImportState(state io.Reader) error {
	gcp.state = &googleworkspaceChromePolicyState{}
	if err := json.NewDecoder(state).Decode(gcp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcp.Type(), gcp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcp *Resource) State() (*googleworkspaceChromePolicyState, bool) {
	return gcp.state, gcp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcp *Resource) StateMust() *googleworkspaceChromePolicyState {
	if gcp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcp.Type(), gcp.LocalName()))
	}
	return gcp.state
}

// Args contains the configurations for googleworkspace_chrome_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OrgUnitId: string, required
	OrgUnitId terra.StringValue `hcl:"org_unit_id,attr" validate:"required"`
	// Policies: min=1
	Policies []Policies `hcl:"policies,block" validate:"min=1"`
}

type googleworkspaceChromePolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of googleworkspace_chrome_policy.
func (gcp googleworkspaceChromePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcp.ref.Append("id"))
}

// OrgUnitId returns a reference to field org_unit_id of googleworkspace_chrome_policy.
func (gcp googleworkspaceChromePolicyAttributes) OrgUnitId() terra.StringValue {
	return terra.ReferenceAsString(gcp.ref.Append("org_unit_id"))
}

func (gcp googleworkspaceChromePolicyAttributes) Policies() terra.ListValue[PoliciesAttributes] {
	return terra.ReferenceAsList[PoliciesAttributes](gcp.ref.Append("policies"))
}

type googleworkspaceChromePolicyState struct {
	Id        string          `json:"id"`
	OrgUnitId string          `json:"org_unit_id"`
	Policies  []PoliciesState `json:"policies"`
}
