// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace_gmail_send_as_alias

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type SmtpMsa struct {
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// SecurityMode: string, optional
	SecurityMode terra.StringValue `hcl:"security_mode,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type SmtpMsaAttributes struct {
	ref terra.Reference
}

func (sm SmtpMsaAttributes) InternalRef() (terra.Reference, error) {
	return sm.ref, nil
}

func (sm SmtpMsaAttributes) InternalWithRef(ref terra.Reference) SmtpMsaAttributes {
	return SmtpMsaAttributes{ref: ref}
}

func (sm SmtpMsaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sm.ref.InternalTokens()
}

func (sm SmtpMsaAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("host"))
}

func (sm SmtpMsaAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("password"))
}

func (sm SmtpMsaAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(sm.ref.Append("port"))
}

func (sm SmtpMsaAttributes) SecurityMode() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("security_mode"))
}

func (sm SmtpMsaAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("username"))
}

type SmtpMsaState struct {
	Host         string  `json:"host"`
	Password     string  `json:"password"`
	Port         float64 `json:"port"`
	SecurityMode string  `json:"security_mode"`
	Username     string  `json:"username"`
}
