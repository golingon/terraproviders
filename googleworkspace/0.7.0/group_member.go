// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	groupmember "github.com/golingon/terraproviders/googleworkspace/0.7.0/groupmember"
	"io"
)

// NewGroupMember creates a new instance of [GroupMember].
func NewGroupMember(name string, args GroupMemberArgs) *GroupMember {
	return &GroupMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GroupMember)(nil)

// GroupMember represents the Terraform resource googleworkspace_group_member.
type GroupMember struct {
	Name      string
	Args      GroupMemberArgs
	state     *groupMemberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GroupMember].
func (gm *GroupMember) Type() string {
	return "googleworkspace_group_member"
}

// LocalName returns the local name for [GroupMember].
func (gm *GroupMember) LocalName() string {
	return gm.Name
}

// Configuration returns the configuration (args) for [GroupMember].
func (gm *GroupMember) Configuration() interface{} {
	return gm.Args
}

// DependOn is used for other resources to depend on [GroupMember].
func (gm *GroupMember) DependOn() terra.Reference {
	return terra.ReferenceResource(gm)
}

// Dependencies returns the list of resources [GroupMember] depends_on.
func (gm *GroupMember) Dependencies() terra.Dependencies {
	return gm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GroupMember].
func (gm *GroupMember) LifecycleManagement() *terra.Lifecycle {
	return gm.Lifecycle
}

// Attributes returns the attributes for [GroupMember].
func (gm *GroupMember) Attributes() groupMemberAttributes {
	return groupMemberAttributes{ref: terra.ReferenceResource(gm)}
}

// ImportState imports the given attribute values into [GroupMember]'s state.
func (gm *GroupMember) ImportState(av io.Reader) error {
	gm.state = &groupMemberState{}
	if err := json.NewDecoder(av).Decode(gm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gm.Type(), gm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GroupMember] has state.
func (gm *GroupMember) State() (*groupMemberState, bool) {
	return gm.state, gm.state != nil
}

// StateMust returns the state for [GroupMember]. Panics if the state is nil.
func (gm *GroupMember) StateMust() *groupMemberState {
	if gm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gm.Type(), gm.LocalName()))
	}
	return gm.state
}

// GroupMemberArgs contains the configurations for googleworkspace_group_member.
type GroupMemberArgs struct {
	// DeliverySettings: string, optional
	DeliverySettings terra.StringValue `hcl:"delivery_settings,attr"`
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// GroupId: string, required
	GroupId terra.StringValue `hcl:"group_id,attr" validate:"required"`
	// Role: string, optional
	Role terra.StringValue `hcl:"role,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Timeouts: optional
	Timeouts *groupmember.Timeouts `hcl:"timeouts,block"`
}
type groupMemberAttributes struct {
	ref terra.Reference
}

// DeliverySettings returns a reference to field delivery_settings of googleworkspace_group_member.
func (gm groupMemberAttributes) DeliverySettings() terra.StringValue {
	return terra.ReferenceAsString(gm.ref.Append("delivery_settings"))
}

// Email returns a reference to field email of googleworkspace_group_member.
func (gm groupMemberAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(gm.ref.Append("email"))
}

// Etag returns a reference to field etag of googleworkspace_group_member.
func (gm groupMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gm.ref.Append("etag"))
}

// GroupId returns a reference to field group_id of googleworkspace_group_member.
func (gm groupMemberAttributes) GroupId() terra.StringValue {
	return terra.ReferenceAsString(gm.ref.Append("group_id"))
}

// Id returns a reference to field id of googleworkspace_group_member.
func (gm groupMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gm.ref.Append("id"))
}

// MemberId returns a reference to field member_id of googleworkspace_group_member.
func (gm groupMemberAttributes) MemberId() terra.StringValue {
	return terra.ReferenceAsString(gm.ref.Append("member_id"))
}

// Role returns a reference to field role of googleworkspace_group_member.
func (gm groupMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(gm.ref.Append("role"))
}

// Status returns a reference to field status of googleworkspace_group_member.
func (gm groupMemberAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(gm.ref.Append("status"))
}

// Type returns a reference to field type of googleworkspace_group_member.
func (gm groupMemberAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gm.ref.Append("type"))
}

func (gm groupMemberAttributes) Timeouts() groupmember.TimeoutsAttributes {
	return terra.ReferenceAsSingle[groupmember.TimeoutsAttributes](gm.ref.Append("timeouts"))
}

type groupMemberState struct {
	DeliverySettings string                     `json:"delivery_settings"`
	Email            string                     `json:"email"`
	Etag             string                     `json:"etag"`
	GroupId          string                     `json:"group_id"`
	Id               string                     `json:"id"`
	MemberId         string                     `json:"member_id"`
	Role             string                     `json:"role"`
	Status           string                     `json:"status"`
	Type             string                     `json:"type"`
	Timeouts         *groupmember.TimeoutsState `json:"timeouts"`
}
