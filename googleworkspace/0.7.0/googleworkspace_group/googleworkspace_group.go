// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource googleworkspace_group.
type Resource struct {
	Name      string
	Args      Args
	state     *googleworkspaceGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gg *Resource) Type() string {
	return "googleworkspace_group"
}

// LocalName returns the local name for [Resource].
func (gg *Resource) LocalName() string {
	return gg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gg *Resource) Configuration() interface{} {
	return gg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gg *Resource) Dependencies() terra.Dependencies {
	return gg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gg *Resource) LifecycleManagement() *terra.Lifecycle {
	return gg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gg *Resource) Attributes() googleworkspaceGroupAttributes {
	return googleworkspaceGroupAttributes{ref: terra.ReferenceResource(gg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gg *Resource) ImportState(state io.Reader) error {
	gg.state = &googleworkspaceGroupState{}
	if err := json.NewDecoder(state).Decode(gg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gg.Type(), gg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gg *Resource) State() (*googleworkspaceGroupState, bool) {
	return gg.state, gg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gg *Resource) StateMust() *googleworkspaceGroupState {
	if gg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gg.Type(), gg.LocalName()))
	}
	return gg.state
}

// Args contains the configurations for googleworkspace_group.
type Args struct {
	// Aliases: list of string, optional
	Aliases terra.ListValue[terra.StringValue] `hcl:"aliases,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleworkspaceGroupAttributes struct {
	ref terra.Reference
}

// AdminCreated returns a reference to field admin_created of googleworkspace_group.
func (gg googleworkspaceGroupAttributes) AdminCreated() terra.BoolValue {
	return terra.ReferenceAsBool(gg.ref.Append("admin_created"))
}

// Aliases returns a reference to field aliases of googleworkspace_group.
func (gg googleworkspaceGroupAttributes) Aliases() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gg.ref.Append("aliases"))
}

// Description returns a reference to field description of googleworkspace_group.
func (gg googleworkspaceGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gg.ref.Append("description"))
}

// DirectMembersCount returns a reference to field direct_members_count of googleworkspace_group.
func (gg googleworkspaceGroupAttributes) DirectMembersCount() terra.NumberValue {
	return terra.ReferenceAsNumber(gg.ref.Append("direct_members_count"))
}

// Email returns a reference to field email of googleworkspace_group.
func (gg googleworkspaceGroupAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(gg.ref.Append("email"))
}

// Etag returns a reference to field etag of googleworkspace_group.
func (gg googleworkspaceGroupAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gg.ref.Append("etag"))
}

// Id returns a reference to field id of googleworkspace_group.
func (gg googleworkspaceGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gg.ref.Append("id"))
}

// Name returns a reference to field name of googleworkspace_group.
func (gg googleworkspaceGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gg.ref.Append("name"))
}

// NonEditableAliases returns a reference to field non_editable_aliases of googleworkspace_group.
func (gg googleworkspaceGroupAttributes) NonEditableAliases() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gg.ref.Append("non_editable_aliases"))
}

func (gg googleworkspaceGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gg.ref.Append("timeouts"))
}

type googleworkspaceGroupState struct {
	AdminCreated       bool           `json:"admin_created"`
	Aliases            []string       `json:"aliases"`
	Description        string         `json:"description"`
	DirectMembersCount float64        `json:"direct_members_count"`
	Email              string         `json:"email"`
	Etag               string         `json:"etag"`
	Id                 string         `json:"id"`
	Name               string         `json:"name"`
	NonEditableAliases []string       `json:"non_editable_aliases"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
