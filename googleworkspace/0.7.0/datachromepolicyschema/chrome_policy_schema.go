// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datachromepolicyschema

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AdditionalTargetKeyNames struct{}

type Definition struct {
	// EnumType: min=0
	EnumType []EnumType `hcl:"enum_type,block" validate:"min=0"`
}

type EnumType struct {
	// Value: min=0
	Value []Value `hcl:"value,block" validate:"min=0"`
}

type Value struct{}

type Notices struct{}

type AdditionalTargetKeyNamesAttributes struct {
	ref terra.Reference
}

func (atkn AdditionalTargetKeyNamesAttributes) InternalRef() (terra.Reference, error) {
	return atkn.ref, nil
}

func (atkn AdditionalTargetKeyNamesAttributes) InternalWithRef(ref terra.Reference) AdditionalTargetKeyNamesAttributes {
	return AdditionalTargetKeyNamesAttributes{ref: ref}
}

func (atkn AdditionalTargetKeyNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return atkn.ref.InternalTokens()
}

func (atkn AdditionalTargetKeyNamesAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(atkn.ref.Append("key"))
}

func (atkn AdditionalTargetKeyNamesAttributes) KeyDescription() terra.StringValue {
	return terra.ReferenceAsString(atkn.ref.Append("key_description"))
}

type DefinitionAttributes struct {
	ref terra.Reference
}

func (d DefinitionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DefinitionAttributes) InternalWithRef(ref terra.Reference) DefinitionAttributes {
	return DefinitionAttributes{ref: ref}
}

func (d DefinitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DefinitionAttributes) MessageType() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("message_type"))
}

func (d DefinitionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

func (d DefinitionAttributes) Package() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("package"))
}

func (d DefinitionAttributes) Syntax() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("syntax"))
}

func (d DefinitionAttributes) EnumType() terra.ListValue[EnumTypeAttributes] {
	return terra.ReferenceAsList[EnumTypeAttributes](d.ref.Append("enum_type"))
}

type EnumTypeAttributes struct {
	ref terra.Reference
}

func (et EnumTypeAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et EnumTypeAttributes) InternalWithRef(ref terra.Reference) EnumTypeAttributes {
	return EnumTypeAttributes{ref: ref}
}

func (et EnumTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et EnumTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("name"))
}

func (et EnumTypeAttributes) Value() terra.ListValue[ValueAttributes] {
	return terra.ReferenceAsList[ValueAttributes](et.ref.Append("value"))
}

type ValueAttributes struct {
	ref terra.Reference
}

func (v ValueAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ValueAttributes) InternalWithRef(ref terra.Reference) ValueAttributes {
	return ValueAttributes{ref: ref}
}

func (v ValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ValueAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v ValueAttributes) Number() terra.NumberValue {
	return terra.ReferenceAsNumber(v.ref.Append("number"))
}

type NoticesAttributes struct {
	ref terra.Reference
}

func (n NoticesAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NoticesAttributes) InternalWithRef(ref terra.Reference) NoticesAttributes {
	return NoticesAttributes{ref: ref}
}

func (n NoticesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NoticesAttributes) AcknowledgementRequired() terra.BoolValue {
	return terra.ReferenceAsBool(n.ref.Append("acknowledgement_required"))
}

func (n NoticesAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("field"))
}

func (n NoticesAttributes) NoticeMessage() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("notice_message"))
}

func (n NoticesAttributes) NoticeValue() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("notice_value"))
}

type AdditionalTargetKeyNamesState struct {
	Key            string `json:"key"`
	KeyDescription string `json:"key_description"`
}

type DefinitionState struct {
	MessageType string          `json:"message_type"`
	Name        string          `json:"name"`
	Package     string          `json:"package"`
	Syntax      string          `json:"syntax"`
	EnumType    []EnumTypeState `json:"enum_type"`
}

type EnumTypeState struct {
	Name  string       `json:"name"`
	Value []ValueState `json:"value"`
}

type ValueState struct {
	Name   string  `json:"name"`
	Number float64 `json:"number"`
}

type NoticesState struct {
	AcknowledgementRequired bool   `json:"acknowledgement_required"`
	Field                   string `json:"field"`
	NoticeMessage           string `json:"notice_message"`
	NoticeValue             string `json:"notice_value"`
}
