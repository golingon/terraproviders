// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace_group_member

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource googleworkspace_group_member.
type Resource struct {
	Name      string
	Args      Args
	state     *googleworkspaceGroupMemberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ggm *Resource) Type() string {
	return "googleworkspace_group_member"
}

// LocalName returns the local name for [Resource].
func (ggm *Resource) LocalName() string {
	return ggm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ggm *Resource) Configuration() interface{} {
	return ggm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ggm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ggm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ggm *Resource) Dependencies() terra.Dependencies {
	return ggm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ggm *Resource) LifecycleManagement() *terra.Lifecycle {
	return ggm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ggm *Resource) Attributes() googleworkspaceGroupMemberAttributes {
	return googleworkspaceGroupMemberAttributes{ref: terra.ReferenceResource(ggm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ggm *Resource) ImportState(state io.Reader) error {
	ggm.state = &googleworkspaceGroupMemberState{}
	if err := json.NewDecoder(state).Decode(ggm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ggm.Type(), ggm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ggm *Resource) State() (*googleworkspaceGroupMemberState, bool) {
	return ggm.state, ggm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ggm *Resource) StateMust() *googleworkspaceGroupMemberState {
	if ggm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ggm.Type(), ggm.LocalName()))
	}
	return ggm.state
}

// Args contains the configurations for googleworkspace_group_member.
type Args struct {
	// DeliverySettings: string, optional
	DeliverySettings terra.StringValue `hcl:"delivery_settings,attr"`
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// GroupId: string, required
	GroupId terra.StringValue `hcl:"group_id,attr" validate:"required"`
	// Role: string, optional
	Role terra.StringValue `hcl:"role,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleworkspaceGroupMemberAttributes struct {
	ref terra.Reference
}

// DeliverySettings returns a reference to field delivery_settings of googleworkspace_group_member.
func (ggm googleworkspaceGroupMemberAttributes) DeliverySettings() terra.StringValue {
	return terra.ReferenceAsString(ggm.ref.Append("delivery_settings"))
}

// Email returns a reference to field email of googleworkspace_group_member.
func (ggm googleworkspaceGroupMemberAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(ggm.ref.Append("email"))
}

// Etag returns a reference to field etag of googleworkspace_group_member.
func (ggm googleworkspaceGroupMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(ggm.ref.Append("etag"))
}

// GroupId returns a reference to field group_id of googleworkspace_group_member.
func (ggm googleworkspaceGroupMemberAttributes) GroupId() terra.StringValue {
	return terra.ReferenceAsString(ggm.ref.Append("group_id"))
}

// Id returns a reference to field id of googleworkspace_group_member.
func (ggm googleworkspaceGroupMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ggm.ref.Append("id"))
}

// MemberId returns a reference to field member_id of googleworkspace_group_member.
func (ggm googleworkspaceGroupMemberAttributes) MemberId() terra.StringValue {
	return terra.ReferenceAsString(ggm.ref.Append("member_id"))
}

// Role returns a reference to field role of googleworkspace_group_member.
func (ggm googleworkspaceGroupMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(ggm.ref.Append("role"))
}

// Status returns a reference to field status of googleworkspace_group_member.
func (ggm googleworkspaceGroupMemberAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ggm.ref.Append("status"))
}

// Type returns a reference to field type of googleworkspace_group_member.
func (ggm googleworkspaceGroupMemberAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ggm.ref.Append("type"))
}

func (ggm googleworkspaceGroupMemberAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ggm.ref.Append("timeouts"))
}

type googleworkspaceGroupMemberState struct {
	DeliverySettings string         `json:"delivery_settings"`
	Email            string         `json:"email"`
	Etag             string         `json:"etag"`
	GroupId          string         `json:"group_id"`
	Id               string         `json:"id"`
	MemberId         string         `json:"member_id"`
	Role             string         `json:"role"`
	Status           string         `json:"status"`
	Type             string         `json:"type"`
	Timeouts         *TimeoutsState `json:"timeouts"`
}
