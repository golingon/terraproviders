// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googleworkspace

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDomain creates a new instance of [Domain].
func NewDomain(name string, args DomainArgs) *Domain {
	return &Domain{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Domain)(nil)

// Domain represents the Terraform resource googleworkspace_domain.
type Domain struct {
	Name      string
	Args      DomainArgs
	state     *domainState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Domain].
func (d *Domain) Type() string {
	return "googleworkspace_domain"
}

// LocalName returns the local name for [Domain].
func (d *Domain) LocalName() string {
	return d.Name
}

// Configuration returns the configuration (args) for [Domain].
func (d *Domain) Configuration() interface{} {
	return d.Args
}

// DependOn is used for other resources to depend on [Domain].
func (d *Domain) DependOn() terra.Reference {
	return terra.ReferenceResource(d)
}

// Dependencies returns the list of resources [Domain] depends_on.
func (d *Domain) Dependencies() terra.Dependencies {
	return d.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Domain].
func (d *Domain) LifecycleManagement() *terra.Lifecycle {
	return d.Lifecycle
}

// Attributes returns the attributes for [Domain].
func (d *Domain) Attributes() domainAttributes {
	return domainAttributes{ref: terra.ReferenceResource(d)}
}

// ImportState imports the given attribute values into [Domain]'s state.
func (d *Domain) ImportState(av io.Reader) error {
	d.state = &domainState{}
	if err := json.NewDecoder(av).Decode(d.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", d.Type(), d.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Domain] has state.
func (d *Domain) State() (*domainState, bool) {
	return d.state, d.state != nil
}

// StateMust returns the state for [Domain]. Panics if the state is nil.
func (d *Domain) StateMust() *domainState {
	if d.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", d.Type(), d.LocalName()))
	}
	return d.state
}

// DomainArgs contains the configurations for googleworkspace_domain.
type DomainArgs struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
}
type domainAttributes struct {
	ref terra.Reference
}

// CreationTime returns a reference to field creation_time of googleworkspace_domain.
func (d domainAttributes) CreationTime() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("creation_time"))
}

// DomainAliases returns a reference to field domain_aliases of googleworkspace_domain.
func (d domainAttributes) DomainAliases() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](d.ref.Append("domain_aliases"))
}

// DomainName returns a reference to field domain_name of googleworkspace_domain.
func (d domainAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("domain_name"))
}

// Etag returns a reference to field etag of googleworkspace_domain.
func (d domainAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("etag"))
}

// Id returns a reference to field id of googleworkspace_domain.
func (d domainAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("id"))
}

// IsPrimary returns a reference to field is_primary of googleworkspace_domain.
func (d domainAttributes) IsPrimary() terra.BoolValue {
	return terra.ReferenceAsBool(d.ref.Append("is_primary"))
}

// Verified returns a reference to field verified of googleworkspace_domain.
func (d domainAttributes) Verified() terra.BoolValue {
	return terra.ReferenceAsBool(d.ref.Append("verified"))
}

type domainState struct {
	CreationTime  float64  `json:"creation_time"`
	DomainAliases []string `json:"domain_aliases"`
	DomainName    string   `json:"domain_name"`
	Etag          string   `json:"etag"`
	Id            string   `json:"id"`
	IsPrimary     bool     `json:"is_primary"`
	Verified      bool     `json:"verified"`
}
