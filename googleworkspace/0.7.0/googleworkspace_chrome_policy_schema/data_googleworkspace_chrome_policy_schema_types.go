// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace_chrome_policy_schema

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataAdditionalTargetKeyNamesAttributes struct {
	ref terra.Reference
}

func (atkn DataAdditionalTargetKeyNamesAttributes) InternalRef() (terra.Reference, error) {
	return atkn.ref, nil
}

func (atkn DataAdditionalTargetKeyNamesAttributes) InternalWithRef(ref terra.Reference) DataAdditionalTargetKeyNamesAttributes {
	return DataAdditionalTargetKeyNamesAttributes{ref: ref}
}

func (atkn DataAdditionalTargetKeyNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return atkn.ref.InternalTokens()
}

func (atkn DataAdditionalTargetKeyNamesAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(atkn.ref.Append("key"))
}

func (atkn DataAdditionalTargetKeyNamesAttributes) KeyDescription() terra.StringValue {
	return terra.ReferenceAsString(atkn.ref.Append("key_description"))
}

type DataDefinitionAttributes struct {
	ref terra.Reference
}

func (d DataDefinitionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DataDefinitionAttributes) InternalWithRef(ref terra.Reference) DataDefinitionAttributes {
	return DataDefinitionAttributes{ref: ref}
}

func (d DataDefinitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DataDefinitionAttributes) MessageType() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("message_type"))
}

func (d DataDefinitionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

func (d DataDefinitionAttributes) Package() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("package"))
}

func (d DataDefinitionAttributes) Syntax() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("syntax"))
}

func (d DataDefinitionAttributes) EnumType() terra.ListValue[DataDefinitionEnumTypeAttributes] {
	return terra.ReferenceAsList[DataDefinitionEnumTypeAttributes](d.ref.Append("enum_type"))
}

type DataDefinitionEnumTypeAttributes struct {
	ref terra.Reference
}

func (et DataDefinitionEnumTypeAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et DataDefinitionEnumTypeAttributes) InternalWithRef(ref terra.Reference) DataDefinitionEnumTypeAttributes {
	return DataDefinitionEnumTypeAttributes{ref: ref}
}

func (et DataDefinitionEnumTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et DataDefinitionEnumTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("name"))
}

func (et DataDefinitionEnumTypeAttributes) Value() terra.ListValue[DataDefinitionEnumTypeValueAttributes] {
	return terra.ReferenceAsList[DataDefinitionEnumTypeValueAttributes](et.ref.Append("value"))
}

type DataDefinitionEnumTypeValueAttributes struct {
	ref terra.Reference
}

func (v DataDefinitionEnumTypeValueAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v DataDefinitionEnumTypeValueAttributes) InternalWithRef(ref terra.Reference) DataDefinitionEnumTypeValueAttributes {
	return DataDefinitionEnumTypeValueAttributes{ref: ref}
}

func (v DataDefinitionEnumTypeValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v DataDefinitionEnumTypeValueAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v DataDefinitionEnumTypeValueAttributes) Number() terra.NumberValue {
	return terra.ReferenceAsNumber(v.ref.Append("number"))
}

type DataNoticesAttributes struct {
	ref terra.Reference
}

func (n DataNoticesAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n DataNoticesAttributes) InternalWithRef(ref terra.Reference) DataNoticesAttributes {
	return DataNoticesAttributes{ref: ref}
}

func (n DataNoticesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n DataNoticesAttributes) AcknowledgementRequired() terra.BoolValue {
	return terra.ReferenceAsBool(n.ref.Append("acknowledgement_required"))
}

func (n DataNoticesAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("field"))
}

func (n DataNoticesAttributes) NoticeMessage() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("notice_message"))
}

func (n DataNoticesAttributes) NoticeValue() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("notice_value"))
}

type DataAdditionalTargetKeyNamesState struct {
	Key            string `json:"key"`
	KeyDescription string `json:"key_description"`
}

type DataDefinitionState struct {
	MessageType string                        `json:"message_type"`
	Name        string                        `json:"name"`
	Package     string                        `json:"package"`
	Syntax      string                        `json:"syntax"`
	EnumType    []DataDefinitionEnumTypeState `json:"enum_type"`
}

type DataDefinitionEnumTypeState struct {
	Name  string                             `json:"name"`
	Value []DataDefinitionEnumTypeValueState `json:"value"`
}

type DataDefinitionEnumTypeValueState struct {
	Name   string  `json:"name"`
	Number float64 `json:"number"`
}

type DataNoticesState struct {
	AcknowledgementRequired bool   `json:"acknowledgement_required"`
	Field                   string `json:"field"`
	NoticeMessage           string `json:"notice_message"`
	NoticeValue             string `json:"notice_value"`
}
