// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package googleworkspace

import (
	"encoding/json"
	"fmt"
	gmailsendasalias "github.com/golingon/terraproviders/googleworkspace/0.7.0/gmailsendasalias"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGmailSendAsAlias creates a new instance of [GmailSendAsAlias].
func NewGmailSendAsAlias(name string, args GmailSendAsAliasArgs) *GmailSendAsAlias {
	return &GmailSendAsAlias{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GmailSendAsAlias)(nil)

// GmailSendAsAlias represents the Terraform resource googleworkspace_gmail_send_as_alias.
type GmailSendAsAlias struct {
	Name      string
	Args      GmailSendAsAliasArgs
	state     *gmailSendAsAliasState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GmailSendAsAlias].
func (gsaa *GmailSendAsAlias) Type() string {
	return "googleworkspace_gmail_send_as_alias"
}

// LocalName returns the local name for [GmailSendAsAlias].
func (gsaa *GmailSendAsAlias) LocalName() string {
	return gsaa.Name
}

// Configuration returns the configuration (args) for [GmailSendAsAlias].
func (gsaa *GmailSendAsAlias) Configuration() interface{} {
	return gsaa.Args
}

// DependOn is used for other resources to depend on [GmailSendAsAlias].
func (gsaa *GmailSendAsAlias) DependOn() terra.Reference {
	return terra.ReferenceResource(gsaa)
}

// Dependencies returns the list of resources [GmailSendAsAlias] depends_on.
func (gsaa *GmailSendAsAlias) Dependencies() terra.Dependencies {
	return gsaa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GmailSendAsAlias].
func (gsaa *GmailSendAsAlias) LifecycleManagement() *terra.Lifecycle {
	return gsaa.Lifecycle
}

// Attributes returns the attributes for [GmailSendAsAlias].
func (gsaa *GmailSendAsAlias) Attributes() gmailSendAsAliasAttributes {
	return gmailSendAsAliasAttributes{ref: terra.ReferenceResource(gsaa)}
}

// ImportState imports the given attribute values into [GmailSendAsAlias]'s state.
func (gsaa *GmailSendAsAlias) ImportState(av io.Reader) error {
	gsaa.state = &gmailSendAsAliasState{}
	if err := json.NewDecoder(av).Decode(gsaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsaa.Type(), gsaa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GmailSendAsAlias] has state.
func (gsaa *GmailSendAsAlias) State() (*gmailSendAsAliasState, bool) {
	return gsaa.state, gsaa.state != nil
}

// StateMust returns the state for [GmailSendAsAlias]. Panics if the state is nil.
func (gsaa *GmailSendAsAlias) StateMust() *gmailSendAsAliasState {
	if gsaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsaa.Type(), gsaa.LocalName()))
	}
	return gsaa.state
}

// GmailSendAsAliasArgs contains the configurations for googleworkspace_gmail_send_as_alias.
type GmailSendAsAliasArgs struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// IsDefault: bool, optional
	IsDefault terra.BoolValue `hcl:"is_default,attr"`
	// PrimaryEmail: string, required
	PrimaryEmail terra.StringValue `hcl:"primary_email,attr" validate:"required"`
	// ReplyToAddress: string, optional
	ReplyToAddress terra.StringValue `hcl:"reply_to_address,attr"`
	// SendAsEmail: string, required
	SendAsEmail terra.StringValue `hcl:"send_as_email,attr" validate:"required"`
	// Signature: string, optional
	Signature terra.StringValue `hcl:"signature,attr"`
	// TreatAsAlias: bool, optional
	TreatAsAlias terra.BoolValue `hcl:"treat_as_alias,attr"`
	// SmtpMsa: optional
	SmtpMsa *gmailsendasalias.SmtpMsa `hcl:"smtp_msa,block"`
}
type gmailSendAsAliasAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of googleworkspace_gmail_send_as_alias.
func (gsaa gmailSendAsAliasAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gsaa.ref.Append("display_name"))
}

// Id returns a reference to field id of googleworkspace_gmail_send_as_alias.
func (gsaa gmailSendAsAliasAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsaa.ref.Append("id"))
}

// IsDefault returns a reference to field is_default of googleworkspace_gmail_send_as_alias.
func (gsaa gmailSendAsAliasAttributes) IsDefault() terra.BoolValue {
	return terra.ReferenceAsBool(gsaa.ref.Append("is_default"))
}

// IsPrimary returns a reference to field is_primary of googleworkspace_gmail_send_as_alias.
func (gsaa gmailSendAsAliasAttributes) IsPrimary() terra.BoolValue {
	return terra.ReferenceAsBool(gsaa.ref.Append("is_primary"))
}

// PrimaryEmail returns a reference to field primary_email of googleworkspace_gmail_send_as_alias.
func (gsaa gmailSendAsAliasAttributes) PrimaryEmail() terra.StringValue {
	return terra.ReferenceAsString(gsaa.ref.Append("primary_email"))
}

// ReplyToAddress returns a reference to field reply_to_address of googleworkspace_gmail_send_as_alias.
func (gsaa gmailSendAsAliasAttributes) ReplyToAddress() terra.StringValue {
	return terra.ReferenceAsString(gsaa.ref.Append("reply_to_address"))
}

// SendAsEmail returns a reference to field send_as_email of googleworkspace_gmail_send_as_alias.
func (gsaa gmailSendAsAliasAttributes) SendAsEmail() terra.StringValue {
	return terra.ReferenceAsString(gsaa.ref.Append("send_as_email"))
}

// Signature returns a reference to field signature of googleworkspace_gmail_send_as_alias.
func (gsaa gmailSendAsAliasAttributes) Signature() terra.StringValue {
	return terra.ReferenceAsString(gsaa.ref.Append("signature"))
}

// TreatAsAlias returns a reference to field treat_as_alias of googleworkspace_gmail_send_as_alias.
func (gsaa gmailSendAsAliasAttributes) TreatAsAlias() terra.BoolValue {
	return terra.ReferenceAsBool(gsaa.ref.Append("treat_as_alias"))
}

// VerificationStatus returns a reference to field verification_status of googleworkspace_gmail_send_as_alias.
func (gsaa gmailSendAsAliasAttributes) VerificationStatus() terra.StringValue {
	return terra.ReferenceAsString(gsaa.ref.Append("verification_status"))
}

func (gsaa gmailSendAsAliasAttributes) SmtpMsa() terra.ListValue[gmailsendasalias.SmtpMsaAttributes] {
	return terra.ReferenceAsList[gmailsendasalias.SmtpMsaAttributes](gsaa.ref.Append("smtp_msa"))
}

type gmailSendAsAliasState struct {
	DisplayName        string                          `json:"display_name"`
	Id                 string                          `json:"id"`
	IsDefault          bool                            `json:"is_default"`
	IsPrimary          bool                            `json:"is_primary"`
	PrimaryEmail       string                          `json:"primary_email"`
	ReplyToAddress     string                          `json:"reply_to_address"`
	SendAsEmail        string                          `json:"send_as_email"`
	Signature          string                          `json:"signature"`
	TreatAsAlias       bool                            `json:"treat_as_alias"`
	VerificationStatus string                          `json:"verification_status"`
	SmtpMsa            []gmailsendasalias.SmtpMsaState `json:"smtp_msa"`
}
