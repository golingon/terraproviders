// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace_role

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource googleworkspace_role.
type Resource struct {
	Name      string
	Args      Args
	state     *googleworkspaceRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gr *Resource) Type() string {
	return "googleworkspace_role"
}

// LocalName returns the local name for [Resource].
func (gr *Resource) LocalName() string {
	return gr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gr *Resource) Configuration() interface{} {
	return gr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gr *Resource) Dependencies() terra.Dependencies {
	return gr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gr *Resource) Attributes() googleworkspaceRoleAttributes {
	return googleworkspaceRoleAttributes{ref: terra.ReferenceResource(gr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gr *Resource) ImportState(state io.Reader) error {
	gr.state = &googleworkspaceRoleState{}
	if err := json.NewDecoder(state).Decode(gr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gr.Type(), gr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gr *Resource) State() (*googleworkspaceRoleState, bool) {
	return gr.state, gr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gr *Resource) StateMust() *googleworkspaceRoleState {
	if gr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gr.Type(), gr.LocalName()))
	}
	return gr.state
}

// Args contains the configurations for googleworkspace_role.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Privileges: min=1
	Privileges []Privileges `hcl:"privileges,block" validate:"min=1"`
}

type googleworkspaceRoleAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of googleworkspace_role.
func (gr googleworkspaceRoleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gr.ref.Append("description"))
}

// Etag returns a reference to field etag of googleworkspace_role.
func (gr googleworkspaceRoleAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gr.ref.Append("etag"))
}

// Id returns a reference to field id of googleworkspace_role.
func (gr googleworkspaceRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gr.ref.Append("id"))
}

// IsSuperAdminRole returns a reference to field is_super_admin_role of googleworkspace_role.
func (gr googleworkspaceRoleAttributes) IsSuperAdminRole() terra.BoolValue {
	return terra.ReferenceAsBool(gr.ref.Append("is_super_admin_role"))
}

// IsSystemRole returns a reference to field is_system_role of googleworkspace_role.
func (gr googleworkspaceRoleAttributes) IsSystemRole() terra.BoolValue {
	return terra.ReferenceAsBool(gr.ref.Append("is_system_role"))
}

// Name returns a reference to field name of googleworkspace_role.
func (gr googleworkspaceRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gr.ref.Append("name"))
}

func (gr googleworkspaceRoleAttributes) Privileges() terra.SetValue[PrivilegesAttributes] {
	return terra.ReferenceAsSet[PrivilegesAttributes](gr.ref.Append("privileges"))
}

type googleworkspaceRoleState struct {
	Description      string            `json:"description"`
	Etag             string            `json:"etag"`
	Id               string            `json:"id"`
	IsSuperAdminRole bool              `json:"is_super_admin_role"`
	IsSystemRole     bool              `json:"is_system_role"`
	Name             string            `json:"name"`
	Privileges       []PrivilegesState `json:"privileges"`
}
