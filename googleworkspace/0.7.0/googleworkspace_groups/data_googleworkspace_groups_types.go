// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace_groups

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataGroupsAttributes struct {
	ref terra.Reference
}

func (g DataGroupsAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g DataGroupsAttributes) InternalWithRef(ref terra.Reference) DataGroupsAttributes {
	return DataGroupsAttributes{ref: ref}
}

func (g DataGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g DataGroupsAttributes) AdminCreated() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("admin_created"))
}

func (g DataGroupsAttributes) Aliases() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](g.ref.Append("aliases"))
}

func (g DataGroupsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("description"))
}

func (g DataGroupsAttributes) DirectMembersCount() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("direct_members_count"))
}

func (g DataGroupsAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("email"))
}

func (g DataGroupsAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("etag"))
}

func (g DataGroupsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("id"))
}

func (g DataGroupsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("name"))
}

func (g DataGroupsAttributes) NonEditableAliases() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](g.ref.Append("non_editable_aliases"))
}

type DataGroupsState struct {
	AdminCreated       bool     `json:"admin_created"`
	Aliases            []string `json:"aliases"`
	Description        string   `json:"description"`
	DirectMembersCount float64  `json:"direct_members_count"`
	Email              string   `json:"email"`
	Etag               string   `json:"etag"`
	Id                 string   `json:"id"`
	Name               string   `json:"name"`
	NonEditableAliases []string `json:"non_editable_aliases"`
}
