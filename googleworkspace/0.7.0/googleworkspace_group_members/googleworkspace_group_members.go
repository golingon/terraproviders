// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace_group_members

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource googleworkspace_group_members.
type Resource struct {
	Name      string
	Args      Args
	state     *googleworkspaceGroupMembersState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ggm *Resource) Type() string {
	return "googleworkspace_group_members"
}

// LocalName returns the local name for [Resource].
func (ggm *Resource) LocalName() string {
	return ggm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ggm *Resource) Configuration() interface{} {
	return ggm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ggm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ggm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ggm *Resource) Dependencies() terra.Dependencies {
	return ggm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ggm *Resource) LifecycleManagement() *terra.Lifecycle {
	return ggm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ggm *Resource) Attributes() googleworkspaceGroupMembersAttributes {
	return googleworkspaceGroupMembersAttributes{ref: terra.ReferenceResource(ggm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ggm *Resource) ImportState(state io.Reader) error {
	ggm.state = &googleworkspaceGroupMembersState{}
	if err := json.NewDecoder(state).Decode(ggm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ggm.Type(), ggm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ggm *Resource) State() (*googleworkspaceGroupMembersState, bool) {
	return ggm.state, ggm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ggm *Resource) StateMust() *googleworkspaceGroupMembersState {
	if ggm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ggm.Type(), ggm.LocalName()))
	}
	return ggm.state
}

// Args contains the configurations for googleworkspace_group_members.
type Args struct {
	// GroupId: string, required
	GroupId terra.StringValue `hcl:"group_id,attr" validate:"required"`
	// Members: min=0
	Members []Members `hcl:"members,block" validate:"min=0"`
}

type googleworkspaceGroupMembersAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of googleworkspace_group_members.
func (ggm googleworkspaceGroupMembersAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(ggm.ref.Append("etag"))
}

// GroupId returns a reference to field group_id of googleworkspace_group_members.
func (ggm googleworkspaceGroupMembersAttributes) GroupId() terra.StringValue {
	return terra.ReferenceAsString(ggm.ref.Append("group_id"))
}

// Id returns a reference to field id of googleworkspace_group_members.
func (ggm googleworkspaceGroupMembersAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ggm.ref.Append("id"))
}

func (ggm googleworkspaceGroupMembersAttributes) Members() terra.SetValue[MembersAttributes] {
	return terra.ReferenceAsSet[MembersAttributes](ggm.ref.Append("members"))
}

type googleworkspaceGroupMembersState struct {
	Etag    string         `json:"etag"`
	GroupId string         `json:"group_id"`
	Id      string         `json:"id"`
	Members []MembersState `json:"members"`
}
