// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace

import (
	"github.com/golingon/lingon/pkg/terra"
	datagroups "github.com/golingon/terraproviders/googleworkspace/0.7.0/datagroups"
)

// NewDataGroups creates a new instance of [DataGroups].
func NewDataGroups(name string, args DataGroupsArgs) *DataGroups {
	return &DataGroups{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataGroups)(nil)

// DataGroups represents the Terraform data resource googleworkspace_groups.
type DataGroups struct {
	Name string
	Args DataGroupsArgs
}

// DataSource returns the Terraform object type for [DataGroups].
func (g *DataGroups) DataSource() string {
	return "googleworkspace_groups"
}

// LocalName returns the local name for [DataGroups].
func (g *DataGroups) LocalName() string {
	return g.Name
}

// Configuration returns the configuration (args) for [DataGroups].
func (g *DataGroups) Configuration() interface{} {
	return g.Args
}

// Attributes returns the attributes for [DataGroups].
func (g *DataGroups) Attributes() dataGroupsAttributes {
	return dataGroupsAttributes{ref: terra.ReferenceDataResource(g)}
}

// DataGroupsArgs contains the configurations for googleworkspace_groups.
type DataGroupsArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Groups: min=0
	Groups []datagroups.Groups `hcl:"groups,block" validate:"min=0"`
}
type dataGroupsAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of googleworkspace_groups.
func (g dataGroupsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("id"))
}

func (g dataGroupsAttributes) Groups() terra.ListValue[datagroups.GroupsAttributes] {
	return terra.ReferenceAsList[datagroups.GroupsAttributes](g.ref.Append("groups"))
}
