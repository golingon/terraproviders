// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package googleworkspace_role_assignment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource googleworkspace_role_assignment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleworkspaceRoleAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gra *Resource) Type() string {
	return "googleworkspace_role_assignment"
}

// LocalName returns the local name for [Resource].
func (gra *Resource) LocalName() string {
	return gra.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gra *Resource) Configuration() interface{} {
	return gra.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gra *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gra)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gra *Resource) Dependencies() terra.Dependencies {
	return gra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gra *Resource) LifecycleManagement() *terra.Lifecycle {
	return gra.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gra *Resource) Attributes() googleworkspaceRoleAssignmentAttributes {
	return googleworkspaceRoleAssignmentAttributes{ref: terra.ReferenceResource(gra)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gra *Resource) ImportState(state io.Reader) error {
	gra.state = &googleworkspaceRoleAssignmentState{}
	if err := json.NewDecoder(state).Decode(gra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gra.Type(), gra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gra *Resource) State() (*googleworkspaceRoleAssignmentState, bool) {
	return gra.state, gra.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gra *Resource) StateMust() *googleworkspaceRoleAssignmentState {
	if gra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gra.Type(), gra.LocalName()))
	}
	return gra.state
}

// Args contains the configurations for googleworkspace_role_assignment.
type Args struct {
	// AssignedTo: string, required
	AssignedTo terra.StringValue `hcl:"assigned_to,attr" validate:"required"`
	// OrgUnitId: string, optional
	OrgUnitId terra.StringValue `hcl:"org_unit_id,attr"`
	// RoleId: string, required
	RoleId terra.StringValue `hcl:"role_id,attr" validate:"required"`
	// ScopeType: string, optional
	ScopeType terra.StringValue `hcl:"scope_type,attr"`
}

type googleworkspaceRoleAssignmentAttributes struct {
	ref terra.Reference
}

// AssignedTo returns a reference to field assigned_to of googleworkspace_role_assignment.
func (gra googleworkspaceRoleAssignmentAttributes) AssignedTo() terra.StringValue {
	return terra.ReferenceAsString(gra.ref.Append("assigned_to"))
}

// Etag returns a reference to field etag of googleworkspace_role_assignment.
func (gra googleworkspaceRoleAssignmentAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gra.ref.Append("etag"))
}

// Id returns a reference to field id of googleworkspace_role_assignment.
func (gra googleworkspaceRoleAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gra.ref.Append("id"))
}

// OrgUnitId returns a reference to field org_unit_id of googleworkspace_role_assignment.
func (gra googleworkspaceRoleAssignmentAttributes) OrgUnitId() terra.StringValue {
	return terra.ReferenceAsString(gra.ref.Append("org_unit_id"))
}

// RoleId returns a reference to field role_id of googleworkspace_role_assignment.
func (gra googleworkspaceRoleAssignmentAttributes) RoleId() terra.StringValue {
	return terra.ReferenceAsString(gra.ref.Append("role_id"))
}

// ScopeType returns a reference to field scope_type of googleworkspace_role_assignment.
func (gra googleworkspaceRoleAssignmentAttributes) ScopeType() terra.StringValue {
	return terra.ReferenceAsString(gra.ref.Append("scope_type"))
}

type googleworkspaceRoleAssignmentState struct {
	AssignedTo string `json:"assigned_to"`
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	OrgUnitId  string `json:"org_unit_id"`
	RoleId     string `json:"role_id"`
	ScopeType  string `json:"scope_type"`
}
