// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dns

import "github.com/golingon/lingon/pkg/terra"

// NewDataPtrRecordSet creates a new instance of [DataPtrRecordSet].
func NewDataPtrRecordSet(name string, args DataPtrRecordSetArgs) *DataPtrRecordSet {
	return &DataPtrRecordSet{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataPtrRecordSet)(nil)

// DataPtrRecordSet represents the Terraform data resource dns_ptr_record_set.
type DataPtrRecordSet struct {
	Name string
	Args DataPtrRecordSetArgs
}

// DataSource returns the Terraform object type for [DataPtrRecordSet].
func (prs *DataPtrRecordSet) DataSource() string {
	return "dns_ptr_record_set"
}

// LocalName returns the local name for [DataPtrRecordSet].
func (prs *DataPtrRecordSet) LocalName() string {
	return prs.Name
}

// Configuration returns the configuration (args) for [DataPtrRecordSet].
func (prs *DataPtrRecordSet) Configuration() interface{} {
	return prs.Args
}

// Attributes returns the attributes for [DataPtrRecordSet].
func (prs *DataPtrRecordSet) Attributes() dataPtrRecordSetAttributes {
	return dataPtrRecordSetAttributes{ref: terra.ReferenceDataResource(prs)}
}

// DataPtrRecordSetArgs contains the configurations for dns_ptr_record_set.
type DataPtrRecordSetArgs struct {
	// IpAddress: string, required
	IpAddress terra.StringValue `hcl:"ip_address,attr" validate:"required"`
}
type dataPtrRecordSetAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of dns_ptr_record_set.
func (prs dataPtrRecordSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(prs.ref.Append("id"))
}

// IpAddress returns a reference to field ip_address of dns_ptr_record_set.
func (prs dataPtrRecordSetAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(prs.ref.Append("ip_address"))
}

// Ptr returns a reference to field ptr of dns_ptr_record_set.
func (prs dataPtrRecordSetAttributes) Ptr() terra.StringValue {
	return terra.ReferenceAsString(prs.ref.Append("ptr"))
}
