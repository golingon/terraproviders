// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dns_mx_record_set

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource dns_mx_record_set.
type Resource struct {
	Name      string
	Args      Args
	state     *dnsMxRecordSetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (dmrs *Resource) Type() string {
	return "dns_mx_record_set"
}

// LocalName returns the local name for [Resource].
func (dmrs *Resource) LocalName() string {
	return dmrs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (dmrs *Resource) Configuration() interface{} {
	return dmrs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (dmrs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(dmrs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (dmrs *Resource) Dependencies() terra.Dependencies {
	return dmrs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (dmrs *Resource) LifecycleManagement() *terra.Lifecycle {
	return dmrs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (dmrs *Resource) Attributes() dnsMxRecordSetAttributes {
	return dnsMxRecordSetAttributes{ref: terra.ReferenceResource(dmrs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (dmrs *Resource) ImportState(state io.Reader) error {
	dmrs.state = &dnsMxRecordSetState{}
	if err := json.NewDecoder(state).Decode(dmrs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dmrs.Type(), dmrs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (dmrs *Resource) State() (*dnsMxRecordSetState, bool) {
	return dmrs.state, dmrs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (dmrs *Resource) StateMust() *dnsMxRecordSetState {
	if dmrs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dmrs.Type(), dmrs.LocalName()))
	}
	return dmrs.state
}

// Args contains the configurations for dns_mx_record_set.
type Args struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Ttl: number, optional
	Ttl terra.NumberValue `hcl:"ttl,attr"`
	// Zone: string, required
	Zone terra.StringValue `hcl:"zone,attr" validate:"required"`
	// Mx: min=0
	Mx []Mx `hcl:"mx,block" validate:"min=0"`
}

type dnsMxRecordSetAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of dns_mx_record_set.
func (dmrs dnsMxRecordSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dmrs.ref.Append("id"))
}

// Name returns a reference to field name of dns_mx_record_set.
func (dmrs dnsMxRecordSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dmrs.ref.Append("name"))
}

// Ttl returns a reference to field ttl of dns_mx_record_set.
func (dmrs dnsMxRecordSetAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(dmrs.ref.Append("ttl"))
}

// Zone returns a reference to field zone of dns_mx_record_set.
func (dmrs dnsMxRecordSetAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(dmrs.ref.Append("zone"))
}

func (dmrs dnsMxRecordSetAttributes) Mx() terra.SetValue[MxAttributes] {
	return terra.ReferenceAsSet[MxAttributes](dmrs.ref.Append("mx"))
}

type dnsMxRecordSetState struct {
	Id   string    `json:"id"`
	Name string    `json:"name"`
	Ttl  float64   `json:"ttl"`
	Zone string    `json:"zone"`
	Mx   []MxState `json:"mx"`
}
