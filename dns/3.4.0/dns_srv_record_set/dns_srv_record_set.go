// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dns_srv_record_set

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource dns_srv_record_set.
type Resource struct {
	Name      string
	Args      Args
	state     *dnsSrvRecordSetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (dsrs *Resource) Type() string {
	return "dns_srv_record_set"
}

// LocalName returns the local name for [Resource].
func (dsrs *Resource) LocalName() string {
	return dsrs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (dsrs *Resource) Configuration() interface{} {
	return dsrs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (dsrs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(dsrs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (dsrs *Resource) Dependencies() terra.Dependencies {
	return dsrs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (dsrs *Resource) LifecycleManagement() *terra.Lifecycle {
	return dsrs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (dsrs *Resource) Attributes() dnsSrvRecordSetAttributes {
	return dnsSrvRecordSetAttributes{ref: terra.ReferenceResource(dsrs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (dsrs *Resource) ImportState(state io.Reader) error {
	dsrs.state = &dnsSrvRecordSetState{}
	if err := json.NewDecoder(state).Decode(dsrs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dsrs.Type(), dsrs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (dsrs *Resource) State() (*dnsSrvRecordSetState, bool) {
	return dsrs.state, dsrs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (dsrs *Resource) StateMust() *dnsSrvRecordSetState {
	if dsrs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dsrs.Type(), dsrs.LocalName()))
	}
	return dsrs.state
}

// Args contains the configurations for dns_srv_record_set.
type Args struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Ttl: number, optional
	Ttl terra.NumberValue `hcl:"ttl,attr"`
	// Zone: string, required
	Zone terra.StringValue `hcl:"zone,attr" validate:"required"`
	// Srv: min=0
	Srv []Srv `hcl:"srv,block" validate:"min=0"`
}

type dnsSrvRecordSetAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of dns_srv_record_set.
func (dsrs dnsSrvRecordSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dsrs.ref.Append("id"))
}

// Name returns a reference to field name of dns_srv_record_set.
func (dsrs dnsSrvRecordSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dsrs.ref.Append("name"))
}

// Ttl returns a reference to field ttl of dns_srv_record_set.
func (dsrs dnsSrvRecordSetAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(dsrs.ref.Append("ttl"))
}

// Zone returns a reference to field zone of dns_srv_record_set.
func (dsrs dnsSrvRecordSetAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(dsrs.ref.Append("zone"))
}

func (dsrs dnsSrvRecordSetAttributes) Srv() terra.SetValue[SrvAttributes] {
	return terra.ReferenceAsSet[SrvAttributes](dsrs.ref.Append("srv"))
}

type dnsSrvRecordSetState struct {
	Id   string     `json:"id"`
	Name string     `json:"name"`
	Ttl  float64    `json:"ttl"`
	Zone string     `json:"zone"`
	Srv  []SrvState `json:"srv"`
}
