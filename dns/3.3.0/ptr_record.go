// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewPtrRecord creates a new instance of [PtrRecord].
func NewPtrRecord(name string, args PtrRecordArgs) *PtrRecord {
	return &PtrRecord{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PtrRecord)(nil)

// PtrRecord represents the Terraform resource dns_ptr_record.
type PtrRecord struct {
	Name      string
	Args      PtrRecordArgs
	state     *ptrRecordState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [PtrRecord].
func (pr *PtrRecord) Type() string {
	return "dns_ptr_record"
}

// LocalName returns the local name for [PtrRecord].
func (pr *PtrRecord) LocalName() string {
	return pr.Name
}

// Configuration returns the configuration (args) for [PtrRecord].
func (pr *PtrRecord) Configuration() interface{} {
	return pr.Args
}

// DependOn is used for other resources to depend on [PtrRecord].
func (pr *PtrRecord) DependOn() terra.Reference {
	return terra.ReferenceResource(pr)
}

// Dependencies returns the list of resources [PtrRecord] depends_on.
func (pr *PtrRecord) Dependencies() terra.Dependencies {
	return pr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [PtrRecord].
func (pr *PtrRecord) LifecycleManagement() *terra.Lifecycle {
	return pr.Lifecycle
}

// Attributes returns the attributes for [PtrRecord].
func (pr *PtrRecord) Attributes() ptrRecordAttributes {
	return ptrRecordAttributes{ref: terra.ReferenceResource(pr)}
}

// ImportState imports the given attribute values into [PtrRecord]'s state.
func (pr *PtrRecord) ImportState(av io.Reader) error {
	pr.state = &ptrRecordState{}
	if err := json.NewDecoder(av).Decode(pr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pr.Type(), pr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [PtrRecord] has state.
func (pr *PtrRecord) State() (*ptrRecordState, bool) {
	return pr.state, pr.state != nil
}

// StateMust returns the state for [PtrRecord]. Panics if the state is nil.
func (pr *PtrRecord) StateMust() *ptrRecordState {
	if pr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pr.Type(), pr.LocalName()))
	}
	return pr.state
}

// PtrRecordArgs contains the configurations for dns_ptr_record.
type PtrRecordArgs struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Ptr: string, required
	Ptr terra.StringValue `hcl:"ptr,attr" validate:"required"`
	// Ttl: number, optional
	Ttl terra.NumberValue `hcl:"ttl,attr"`
	// Zone: string, required
	Zone terra.StringValue `hcl:"zone,attr" validate:"required"`
}
type ptrRecordAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of dns_ptr_record.
func (pr ptrRecordAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("id"))
}

// Name returns a reference to field name of dns_ptr_record.
func (pr ptrRecordAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("name"))
}

// Ptr returns a reference to field ptr of dns_ptr_record.
func (pr ptrRecordAttributes) Ptr() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("ptr"))
}

// Ttl returns a reference to field ttl of dns_ptr_record.
func (pr ptrRecordAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("ttl"))
}

// Zone returns a reference to field zone of dns_ptr_record.
func (pr ptrRecordAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("zone"))
}

type ptrRecordState struct {
	Id   string  `json:"id"`
	Name string  `json:"name"`
	Ptr  string  `json:"ptr"`
	Ttl  float64 `json:"ttl"`
	Zone string  `json:"zone"`
}
