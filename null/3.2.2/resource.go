// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package null

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewResource creates a new instance of [Resource].
func NewResource(name string, args ResourceArgs) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource null_resource.
type Resource struct {
	Name      string
	Args      ResourceArgs
	state     *resourceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (r *Resource) Type() string {
	return "null_resource"
}

// LocalName returns the local name for [Resource].
func (r *Resource) LocalName() string {
	return r.Name
}

// Configuration returns the configuration (args) for [Resource].
func (r *Resource) Configuration() interface{} {
	return r.Args
}

// DependOn is used for other resources to depend on [Resource].
func (r *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(r)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (r *Resource) Dependencies() terra.Dependencies {
	return r.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (r *Resource) LifecycleManagement() *terra.Lifecycle {
	return r.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (r *Resource) Attributes() resourceAttributes {
	return resourceAttributes{ref: terra.ReferenceResource(r)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (r *Resource) ImportState(av io.Reader) error {
	r.state = &resourceState{}
	if err := json.NewDecoder(av).Decode(r.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", r.Type(), r.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (r *Resource) State() (*resourceState, bool) {
	return r.state, r.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (r *Resource) StateMust() *resourceState {
	if r.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", r.Type(), r.LocalName()))
	}
	return r.state
}

// ResourceArgs contains the configurations for null_resource.
type ResourceArgs struct {
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
}
type resourceAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of null_resource.
func (r resourceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

// Triggers returns a reference to field triggers of null_resource.
func (r resourceAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("triggers"))
}

type resourceState struct {
	Id       string            `json:"id"`
	Triggers map[string]string `json:"triggers"`
}
