// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	directoryrolemember "github.com/golingon/terraproviders/azuread/2.39.0/directoryrolemember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDirectoryRoleMember creates a new instance of [DirectoryRoleMember].
func NewDirectoryRoleMember(name string, args DirectoryRoleMemberArgs) *DirectoryRoleMember {
	return &DirectoryRoleMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DirectoryRoleMember)(nil)

// DirectoryRoleMember represents the Terraform resource azuread_directory_role_member.
type DirectoryRoleMember struct {
	Name      string
	Args      DirectoryRoleMemberArgs
	state     *directoryRoleMemberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DirectoryRoleMember].
func (drm *DirectoryRoleMember) Type() string {
	return "azuread_directory_role_member"
}

// LocalName returns the local name for [DirectoryRoleMember].
func (drm *DirectoryRoleMember) LocalName() string {
	return drm.Name
}

// Configuration returns the configuration (args) for [DirectoryRoleMember].
func (drm *DirectoryRoleMember) Configuration() interface{} {
	return drm.Args
}

// DependOn is used for other resources to depend on [DirectoryRoleMember].
func (drm *DirectoryRoleMember) DependOn() terra.Reference {
	return terra.ReferenceResource(drm)
}

// Dependencies returns the list of resources [DirectoryRoleMember] depends_on.
func (drm *DirectoryRoleMember) Dependencies() terra.Dependencies {
	return drm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DirectoryRoleMember].
func (drm *DirectoryRoleMember) LifecycleManagement() *terra.Lifecycle {
	return drm.Lifecycle
}

// Attributes returns the attributes for [DirectoryRoleMember].
func (drm *DirectoryRoleMember) Attributes() directoryRoleMemberAttributes {
	return directoryRoleMemberAttributes{ref: terra.ReferenceResource(drm)}
}

// ImportState imports the given attribute values into [DirectoryRoleMember]'s state.
func (drm *DirectoryRoleMember) ImportState(av io.Reader) error {
	drm.state = &directoryRoleMemberState{}
	if err := json.NewDecoder(av).Decode(drm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", drm.Type(), drm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DirectoryRoleMember] has state.
func (drm *DirectoryRoleMember) State() (*directoryRoleMemberState, bool) {
	return drm.state, drm.state != nil
}

// StateMust returns the state for [DirectoryRoleMember]. Panics if the state is nil.
func (drm *DirectoryRoleMember) StateMust() *directoryRoleMemberState {
	if drm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", drm.Type(), drm.LocalName()))
	}
	return drm.state
}

// DirectoryRoleMemberArgs contains the configurations for azuread_directory_role_member.
type DirectoryRoleMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MemberObjectId: string, optional
	MemberObjectId terra.StringValue `hcl:"member_object_id,attr"`
	// RoleObjectId: string, optional
	RoleObjectId terra.StringValue `hcl:"role_object_id,attr"`
	// Timeouts: optional
	Timeouts *directoryrolemember.Timeouts `hcl:"timeouts,block"`
}
type directoryRoleMemberAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azuread_directory_role_member.
func (drm directoryRoleMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(drm.ref.Append("id"))
}

// MemberObjectId returns a reference to field member_object_id of azuread_directory_role_member.
func (drm directoryRoleMemberAttributes) MemberObjectId() terra.StringValue {
	return terra.ReferenceAsString(drm.ref.Append("member_object_id"))
}

// RoleObjectId returns a reference to field role_object_id of azuread_directory_role_member.
func (drm directoryRoleMemberAttributes) RoleObjectId() terra.StringValue {
	return terra.ReferenceAsString(drm.ref.Append("role_object_id"))
}

func (drm directoryRoleMemberAttributes) Timeouts() directoryrolemember.TimeoutsAttributes {
	return terra.ReferenceAsSingle[directoryrolemember.TimeoutsAttributes](drm.ref.Append("timeouts"))
}

type directoryRoleMemberState struct {
	Id             string                             `json:"id"`
	MemberObjectId string                             `json:"member_object_id"`
	RoleObjectId   string                             `json:"role_object_id"`
	Timeouts       *directoryrolemember.TimeoutsState `json:"timeouts"`
}
