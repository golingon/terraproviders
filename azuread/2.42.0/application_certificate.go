// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	applicationcertificate "github.com/golingon/terraproviders/azuread/2.42.0/applicationcertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewApplicationCertificate creates a new instance of [ApplicationCertificate].
func NewApplicationCertificate(name string, args ApplicationCertificateArgs) *ApplicationCertificate {
	return &ApplicationCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApplicationCertificate)(nil)

// ApplicationCertificate represents the Terraform resource azuread_application_certificate.
type ApplicationCertificate struct {
	Name      string
	Args      ApplicationCertificateArgs
	state     *applicationCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApplicationCertificate].
func (ac *ApplicationCertificate) Type() string {
	return "azuread_application_certificate"
}

// LocalName returns the local name for [ApplicationCertificate].
func (ac *ApplicationCertificate) LocalName() string {
	return ac.Name
}

// Configuration returns the configuration (args) for [ApplicationCertificate].
func (ac *ApplicationCertificate) Configuration() interface{} {
	return ac.Args
}

// DependOn is used for other resources to depend on [ApplicationCertificate].
func (ac *ApplicationCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(ac)
}

// Dependencies returns the list of resources [ApplicationCertificate] depends_on.
func (ac *ApplicationCertificate) Dependencies() terra.Dependencies {
	return ac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApplicationCertificate].
func (ac *ApplicationCertificate) LifecycleManagement() *terra.Lifecycle {
	return ac.Lifecycle
}

// Attributes returns the attributes for [ApplicationCertificate].
func (ac *ApplicationCertificate) Attributes() applicationCertificateAttributes {
	return applicationCertificateAttributes{ref: terra.ReferenceResource(ac)}
}

// ImportState imports the given attribute values into [ApplicationCertificate]'s state.
func (ac *ApplicationCertificate) ImportState(av io.Reader) error {
	ac.state = &applicationCertificateState{}
	if err := json.NewDecoder(av).Decode(ac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ac.Type(), ac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApplicationCertificate] has state.
func (ac *ApplicationCertificate) State() (*applicationCertificateState, bool) {
	return ac.state, ac.state != nil
}

// StateMust returns the state for [ApplicationCertificate]. Panics if the state is nil.
func (ac *ApplicationCertificate) StateMust() *applicationCertificateState {
	if ac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ac.Type(), ac.LocalName()))
	}
	return ac.state
}

// ApplicationCertificateArgs contains the configurations for azuread_application_certificate.
type ApplicationCertificateArgs struct {
	// ApplicationObjectId: string, required
	ApplicationObjectId terra.StringValue `hcl:"application_object_id,attr" validate:"required"`
	// Encoding: string, optional
	Encoding terra.StringValue `hcl:"encoding,attr"`
	// EndDate: string, optional
	EndDate terra.StringValue `hcl:"end_date,attr"`
	// EndDateRelative: string, optional
	EndDateRelative terra.StringValue `hcl:"end_date_relative,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyId: string, optional
	KeyId terra.StringValue `hcl:"key_id,attr"`
	// StartDate: string, optional
	StartDate terra.StringValue `hcl:"start_date,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *applicationcertificate.Timeouts `hcl:"timeouts,block"`
}
type applicationCertificateAttributes struct {
	ref terra.Reference
}

// ApplicationObjectId returns a reference to field application_object_id of azuread_application_certificate.
func (ac applicationCertificateAttributes) ApplicationObjectId() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("application_object_id"))
}

// Encoding returns a reference to field encoding of azuread_application_certificate.
func (ac applicationCertificateAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("encoding"))
}

// EndDate returns a reference to field end_date of azuread_application_certificate.
func (ac applicationCertificateAttributes) EndDate() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("end_date"))
}

// EndDateRelative returns a reference to field end_date_relative of azuread_application_certificate.
func (ac applicationCertificateAttributes) EndDateRelative() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("end_date_relative"))
}

// Id returns a reference to field id of azuread_application_certificate.
func (ac applicationCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("id"))
}

// KeyId returns a reference to field key_id of azuread_application_certificate.
func (ac applicationCertificateAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("key_id"))
}

// StartDate returns a reference to field start_date of azuread_application_certificate.
func (ac applicationCertificateAttributes) StartDate() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("start_date"))
}

// Type returns a reference to field type of azuread_application_certificate.
func (ac applicationCertificateAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("type"))
}

// Value returns a reference to field value of azuread_application_certificate.
func (ac applicationCertificateAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("value"))
}

func (ac applicationCertificateAttributes) Timeouts() applicationcertificate.TimeoutsAttributes {
	return terra.ReferenceAsSingle[applicationcertificate.TimeoutsAttributes](ac.ref.Append("timeouts"))
}

type applicationCertificateState struct {
	ApplicationObjectId string                                `json:"application_object_id"`
	Encoding            string                                `json:"encoding"`
	EndDate             string                                `json:"end_date"`
	EndDateRelative     string                                `json:"end_date_relative"`
	Id                  string                                `json:"id"`
	KeyId               string                                `json:"key_id"`
	StartDate           string                                `json:"start_date"`
	Type                string                                `json:"type"`
	Value               string                                `json:"value"`
	Timeouts            *applicationcertificate.TimeoutsState `json:"timeouts"`
}
