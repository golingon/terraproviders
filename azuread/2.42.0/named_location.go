// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	namedlocation "github.com/golingon/terraproviders/azuread/2.42.0/namedlocation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewNamedLocation creates a new instance of [NamedLocation].
func NewNamedLocation(name string, args NamedLocationArgs) *NamedLocation {
	return &NamedLocation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NamedLocation)(nil)

// NamedLocation represents the Terraform resource azuread_named_location.
type NamedLocation struct {
	Name      string
	Args      NamedLocationArgs
	state     *namedLocationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NamedLocation].
func (nl *NamedLocation) Type() string {
	return "azuread_named_location"
}

// LocalName returns the local name for [NamedLocation].
func (nl *NamedLocation) LocalName() string {
	return nl.Name
}

// Configuration returns the configuration (args) for [NamedLocation].
func (nl *NamedLocation) Configuration() interface{} {
	return nl.Args
}

// DependOn is used for other resources to depend on [NamedLocation].
func (nl *NamedLocation) DependOn() terra.Reference {
	return terra.ReferenceResource(nl)
}

// Dependencies returns the list of resources [NamedLocation] depends_on.
func (nl *NamedLocation) Dependencies() terra.Dependencies {
	return nl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NamedLocation].
func (nl *NamedLocation) LifecycleManagement() *terra.Lifecycle {
	return nl.Lifecycle
}

// Attributes returns the attributes for [NamedLocation].
func (nl *NamedLocation) Attributes() namedLocationAttributes {
	return namedLocationAttributes{ref: terra.ReferenceResource(nl)}
}

// ImportState imports the given attribute values into [NamedLocation]'s state.
func (nl *NamedLocation) ImportState(av io.Reader) error {
	nl.state = &namedLocationState{}
	if err := json.NewDecoder(av).Decode(nl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nl.Type(), nl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NamedLocation] has state.
func (nl *NamedLocation) State() (*namedLocationState, bool) {
	return nl.state, nl.state != nil
}

// StateMust returns the state for [NamedLocation]. Panics if the state is nil.
func (nl *NamedLocation) StateMust() *namedLocationState {
	if nl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nl.Type(), nl.LocalName()))
	}
	return nl.state
}

// NamedLocationArgs contains the configurations for azuread_named_location.
type NamedLocationArgs struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Country: optional
	Country *namedlocation.Country `hcl:"country,block"`
	// Ip: optional
	Ip *namedlocation.Ip `hcl:"ip,block"`
	// Timeouts: optional
	Timeouts *namedlocation.Timeouts `hcl:"timeouts,block"`
}
type namedLocationAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of azuread_named_location.
func (nl namedLocationAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(nl.ref.Append("display_name"))
}

// Id returns a reference to field id of azuread_named_location.
func (nl namedLocationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nl.ref.Append("id"))
}

func (nl namedLocationAttributes) Country() terra.ListValue[namedlocation.CountryAttributes] {
	return terra.ReferenceAsList[namedlocation.CountryAttributes](nl.ref.Append("country"))
}

func (nl namedLocationAttributes) Ip() terra.ListValue[namedlocation.IpAttributes] {
	return terra.ReferenceAsList[namedlocation.IpAttributes](nl.ref.Append("ip"))
}

func (nl namedLocationAttributes) Timeouts() namedlocation.TimeoutsAttributes {
	return terra.ReferenceAsSingle[namedlocation.TimeoutsAttributes](nl.ref.Append("timeouts"))
}

type namedLocationState struct {
	DisplayName string                       `json:"display_name"`
	Id          string                       `json:"id"`
	Country     []namedlocation.CountryState `json:"country"`
	Ip          []namedlocation.IpState      `json:"ip"`
	Timeouts    *namedlocation.TimeoutsState `json:"timeouts"`
}
