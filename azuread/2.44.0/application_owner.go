// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	applicationowner "github.com/golingon/terraproviders/azuread/2.44.0/applicationowner"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewApplicationOwner creates a new instance of [ApplicationOwner].
func NewApplicationOwner(name string, args ApplicationOwnerArgs) *ApplicationOwner {
	return &ApplicationOwner{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApplicationOwner)(nil)

// ApplicationOwner represents the Terraform resource azuread_application_owner.
type ApplicationOwner struct {
	Name      string
	Args      ApplicationOwnerArgs
	state     *applicationOwnerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApplicationOwner].
func (ao *ApplicationOwner) Type() string {
	return "azuread_application_owner"
}

// LocalName returns the local name for [ApplicationOwner].
func (ao *ApplicationOwner) LocalName() string {
	return ao.Name
}

// Configuration returns the configuration (args) for [ApplicationOwner].
func (ao *ApplicationOwner) Configuration() interface{} {
	return ao.Args
}

// DependOn is used for other resources to depend on [ApplicationOwner].
func (ao *ApplicationOwner) DependOn() terra.Reference {
	return terra.ReferenceResource(ao)
}

// Dependencies returns the list of resources [ApplicationOwner] depends_on.
func (ao *ApplicationOwner) Dependencies() terra.Dependencies {
	return ao.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApplicationOwner].
func (ao *ApplicationOwner) LifecycleManagement() *terra.Lifecycle {
	return ao.Lifecycle
}

// Attributes returns the attributes for [ApplicationOwner].
func (ao *ApplicationOwner) Attributes() applicationOwnerAttributes {
	return applicationOwnerAttributes{ref: terra.ReferenceResource(ao)}
}

// ImportState imports the given attribute values into [ApplicationOwner]'s state.
func (ao *ApplicationOwner) ImportState(av io.Reader) error {
	ao.state = &applicationOwnerState{}
	if err := json.NewDecoder(av).Decode(ao.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ao.Type(), ao.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApplicationOwner] has state.
func (ao *ApplicationOwner) State() (*applicationOwnerState, bool) {
	return ao.state, ao.state != nil
}

// StateMust returns the state for [ApplicationOwner]. Panics if the state is nil.
func (ao *ApplicationOwner) StateMust() *applicationOwnerState {
	if ao.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ao.Type(), ao.LocalName()))
	}
	return ao.state
}

// ApplicationOwnerArgs contains the configurations for azuread_application_owner.
type ApplicationOwnerArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OwnerObjectId: string, required
	OwnerObjectId terra.StringValue `hcl:"owner_object_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *applicationowner.Timeouts `hcl:"timeouts,block"`
}
type applicationOwnerAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of azuread_application_owner.
func (ao applicationOwnerAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("application_id"))
}

// Id returns a reference to field id of azuread_application_owner.
func (ao applicationOwnerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("id"))
}

// OwnerObjectId returns a reference to field owner_object_id of azuread_application_owner.
func (ao applicationOwnerAttributes) OwnerObjectId() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("owner_object_id"))
}

func (ao applicationOwnerAttributes) Timeouts() applicationowner.TimeoutsAttributes {
	return terra.ReferenceAsSingle[applicationowner.TimeoutsAttributes](ao.ref.Append("timeouts"))
}

type applicationOwnerState struct {
	ApplicationId string                          `json:"application_id"`
	Id            string                          `json:"id"`
	OwnerObjectId string                          `json:"owner_object_id"`
	Timeouts      *applicationowner.TimeoutsState `json:"timeouts"`
}
