// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	applicationfromtemplate "github.com/golingon/terraproviders/azuread/2.44.0/applicationfromtemplate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewApplicationFromTemplate creates a new instance of [ApplicationFromTemplate].
func NewApplicationFromTemplate(name string, args ApplicationFromTemplateArgs) *ApplicationFromTemplate {
	return &ApplicationFromTemplate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApplicationFromTemplate)(nil)

// ApplicationFromTemplate represents the Terraform resource azuread_application_from_template.
type ApplicationFromTemplate struct {
	Name      string
	Args      ApplicationFromTemplateArgs
	state     *applicationFromTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApplicationFromTemplate].
func (aft *ApplicationFromTemplate) Type() string {
	return "azuread_application_from_template"
}

// LocalName returns the local name for [ApplicationFromTemplate].
func (aft *ApplicationFromTemplate) LocalName() string {
	return aft.Name
}

// Configuration returns the configuration (args) for [ApplicationFromTemplate].
func (aft *ApplicationFromTemplate) Configuration() interface{} {
	return aft.Args
}

// DependOn is used for other resources to depend on [ApplicationFromTemplate].
func (aft *ApplicationFromTemplate) DependOn() terra.Reference {
	return terra.ReferenceResource(aft)
}

// Dependencies returns the list of resources [ApplicationFromTemplate] depends_on.
func (aft *ApplicationFromTemplate) Dependencies() terra.Dependencies {
	return aft.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApplicationFromTemplate].
func (aft *ApplicationFromTemplate) LifecycleManagement() *terra.Lifecycle {
	return aft.Lifecycle
}

// Attributes returns the attributes for [ApplicationFromTemplate].
func (aft *ApplicationFromTemplate) Attributes() applicationFromTemplateAttributes {
	return applicationFromTemplateAttributes{ref: terra.ReferenceResource(aft)}
}

// ImportState imports the given attribute values into [ApplicationFromTemplate]'s state.
func (aft *ApplicationFromTemplate) ImportState(av io.Reader) error {
	aft.state = &applicationFromTemplateState{}
	if err := json.NewDecoder(av).Decode(aft.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aft.Type(), aft.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApplicationFromTemplate] has state.
func (aft *ApplicationFromTemplate) State() (*applicationFromTemplateState, bool) {
	return aft.state, aft.state != nil
}

// StateMust returns the state for [ApplicationFromTemplate]. Panics if the state is nil.
func (aft *ApplicationFromTemplate) StateMust() *applicationFromTemplateState {
	if aft.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aft.Type(), aft.LocalName()))
	}
	return aft.state
}

// ApplicationFromTemplateArgs contains the configurations for azuread_application_from_template.
type ApplicationFromTemplateArgs struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TemplateId: string, required
	TemplateId terra.StringValue `hcl:"template_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *applicationfromtemplate.Timeouts `hcl:"timeouts,block"`
}
type applicationFromTemplateAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of azuread_application_from_template.
func (aft applicationFromTemplateAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aft.ref.Append("application_id"))
}

// ApplicationObjectId returns a reference to field application_object_id of azuread_application_from_template.
func (aft applicationFromTemplateAttributes) ApplicationObjectId() terra.StringValue {
	return terra.ReferenceAsString(aft.ref.Append("application_object_id"))
}

// DisplayName returns a reference to field display_name of azuread_application_from_template.
func (aft applicationFromTemplateAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aft.ref.Append("display_name"))
}

// Id returns a reference to field id of azuread_application_from_template.
func (aft applicationFromTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aft.ref.Append("id"))
}

// ServicePrincipalId returns a reference to field service_principal_id of azuread_application_from_template.
func (aft applicationFromTemplateAttributes) ServicePrincipalId() terra.StringValue {
	return terra.ReferenceAsString(aft.ref.Append("service_principal_id"))
}

// ServicePrincipalObjectId returns a reference to field service_principal_object_id of azuread_application_from_template.
func (aft applicationFromTemplateAttributes) ServicePrincipalObjectId() terra.StringValue {
	return terra.ReferenceAsString(aft.ref.Append("service_principal_object_id"))
}

// TemplateId returns a reference to field template_id of azuread_application_from_template.
func (aft applicationFromTemplateAttributes) TemplateId() terra.StringValue {
	return terra.ReferenceAsString(aft.ref.Append("template_id"))
}

func (aft applicationFromTemplateAttributes) Timeouts() applicationfromtemplate.TimeoutsAttributes {
	return terra.ReferenceAsSingle[applicationfromtemplate.TimeoutsAttributes](aft.ref.Append("timeouts"))
}

type applicationFromTemplateState struct {
	ApplicationId            string                                 `json:"application_id"`
	ApplicationObjectId      string                                 `json:"application_object_id"`
	DisplayName              string                                 `json:"display_name"`
	Id                       string                                 `json:"id"`
	ServicePrincipalId       string                                 `json:"service_principal_id"`
	ServicePrincipalObjectId string                                 `json:"service_principal_object_id"`
	TemplateId               string                                 `json:"template_id"`
	Timeouts                 *applicationfromtemplate.TimeoutsState `json:"timeouts"`
}
