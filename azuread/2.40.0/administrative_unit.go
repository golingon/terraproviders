// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	administrativeunit "github.com/golingon/terraproviders/azuread/2.40.0/administrativeunit"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAdministrativeUnit creates a new instance of [AdministrativeUnit].
func NewAdministrativeUnit(name string, args AdministrativeUnitArgs) *AdministrativeUnit {
	return &AdministrativeUnit{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AdministrativeUnit)(nil)

// AdministrativeUnit represents the Terraform resource azuread_administrative_unit.
type AdministrativeUnit struct {
	Name      string
	Args      AdministrativeUnitArgs
	state     *administrativeUnitState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AdministrativeUnit].
func (au *AdministrativeUnit) Type() string {
	return "azuread_administrative_unit"
}

// LocalName returns the local name for [AdministrativeUnit].
func (au *AdministrativeUnit) LocalName() string {
	return au.Name
}

// Configuration returns the configuration (args) for [AdministrativeUnit].
func (au *AdministrativeUnit) Configuration() interface{} {
	return au.Args
}

// DependOn is used for other resources to depend on [AdministrativeUnit].
func (au *AdministrativeUnit) DependOn() terra.Reference {
	return terra.ReferenceResource(au)
}

// Dependencies returns the list of resources [AdministrativeUnit] depends_on.
func (au *AdministrativeUnit) Dependencies() terra.Dependencies {
	return au.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AdministrativeUnit].
func (au *AdministrativeUnit) LifecycleManagement() *terra.Lifecycle {
	return au.Lifecycle
}

// Attributes returns the attributes for [AdministrativeUnit].
func (au *AdministrativeUnit) Attributes() administrativeUnitAttributes {
	return administrativeUnitAttributes{ref: terra.ReferenceResource(au)}
}

// ImportState imports the given attribute values into [AdministrativeUnit]'s state.
func (au *AdministrativeUnit) ImportState(av io.Reader) error {
	au.state = &administrativeUnitState{}
	if err := json.NewDecoder(av).Decode(au.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", au.Type(), au.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AdministrativeUnit] has state.
func (au *AdministrativeUnit) State() (*administrativeUnitState, bool) {
	return au.state, au.state != nil
}

// StateMust returns the state for [AdministrativeUnit]. Panics if the state is nil.
func (au *AdministrativeUnit) StateMust() *administrativeUnitState {
	if au.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", au.Type(), au.LocalName()))
	}
	return au.state
}

// AdministrativeUnitArgs contains the configurations for azuread_administrative_unit.
type AdministrativeUnitArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// HiddenMembershipEnabled: bool, optional
	HiddenMembershipEnabled terra.BoolValue `hcl:"hidden_membership_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, optional
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr"`
	// PreventDuplicateNames: bool, optional
	PreventDuplicateNames terra.BoolValue `hcl:"prevent_duplicate_names,attr"`
	// Timeouts: optional
	Timeouts *administrativeunit.Timeouts `hcl:"timeouts,block"`
}
type administrativeUnitAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azuread_administrative_unit.
func (au administrativeUnitAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azuread_administrative_unit.
func (au administrativeUnitAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("display_name"))
}

// HiddenMembershipEnabled returns a reference to field hidden_membership_enabled of azuread_administrative_unit.
func (au administrativeUnitAttributes) HiddenMembershipEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(au.ref.Append("hidden_membership_enabled"))
}

// Id returns a reference to field id of azuread_administrative_unit.
func (au administrativeUnitAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("id"))
}

// Members returns a reference to field members of azuread_administrative_unit.
func (au administrativeUnitAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](au.ref.Append("members"))
}

// ObjectId returns a reference to field object_id of azuread_administrative_unit.
func (au administrativeUnitAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("object_id"))
}

// PreventDuplicateNames returns a reference to field prevent_duplicate_names of azuread_administrative_unit.
func (au administrativeUnitAttributes) PreventDuplicateNames() terra.BoolValue {
	return terra.ReferenceAsBool(au.ref.Append("prevent_duplicate_names"))
}

func (au administrativeUnitAttributes) Timeouts() administrativeunit.TimeoutsAttributes {
	return terra.ReferenceAsSingle[administrativeunit.TimeoutsAttributes](au.ref.Append("timeouts"))
}

type administrativeUnitState struct {
	Description             string                            `json:"description"`
	DisplayName             string                            `json:"display_name"`
	HiddenMembershipEnabled bool                              `json:"hidden_membership_enabled"`
	Id                      string                            `json:"id"`
	Members                 []string                          `json:"members"`
	ObjectId                string                            `json:"object_id"`
	PreventDuplicateNames   bool                              `json:"prevent_duplicate_names"`
	Timeouts                *administrativeunit.TimeoutsState `json:"timeouts"`
}
