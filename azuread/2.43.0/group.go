// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	group "github.com/golingon/terraproviders/azuread/2.43.0/group"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGroup creates a new instance of [Group].
func NewGroup(name string, args GroupArgs) *Group {
	return &Group{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Group)(nil)

// Group represents the Terraform resource azuread_group.
type Group struct {
	Name      string
	Args      GroupArgs
	state     *groupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Group].
func (g *Group) Type() string {
	return "azuread_group"
}

// LocalName returns the local name for [Group].
func (g *Group) LocalName() string {
	return g.Name
}

// Configuration returns the configuration (args) for [Group].
func (g *Group) Configuration() interface{} {
	return g.Args
}

// DependOn is used for other resources to depend on [Group].
func (g *Group) DependOn() terra.Reference {
	return terra.ReferenceResource(g)
}

// Dependencies returns the list of resources [Group] depends_on.
func (g *Group) Dependencies() terra.Dependencies {
	return g.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Group].
func (g *Group) LifecycleManagement() *terra.Lifecycle {
	return g.Lifecycle
}

// Attributes returns the attributes for [Group].
func (g *Group) Attributes() groupAttributes {
	return groupAttributes{ref: terra.ReferenceResource(g)}
}

// ImportState imports the given attribute values into [Group]'s state.
func (g *Group) ImportState(av io.Reader) error {
	g.state = &groupState{}
	if err := json.NewDecoder(av).Decode(g.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", g.Type(), g.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Group] has state.
func (g *Group) State() (*groupState, bool) {
	return g.state, g.state != nil
}

// StateMust returns the state for [Group]. Panics if the state is nil.
func (g *Group) StateMust() *groupState {
	if g.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", g.Type(), g.LocalName()))
	}
	return g.state
}

// GroupArgs contains the configurations for azuread_group.
type GroupArgs struct {
	// AdministrativeUnitIds: set of string, optional
	AdministrativeUnitIds terra.SetValue[terra.StringValue] `hcl:"administrative_unit_ids,attr"`
	// AssignableToRole: bool, optional
	AssignableToRole terra.BoolValue `hcl:"assignable_to_role,attr"`
	// AutoSubscribeNewMembers: bool, optional
	AutoSubscribeNewMembers terra.BoolValue `hcl:"auto_subscribe_new_members,attr"`
	// Behaviors: set of string, optional
	Behaviors terra.SetValue[terra.StringValue] `hcl:"behaviors,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// ExternalSendersAllowed: bool, optional
	ExternalSendersAllowed terra.BoolValue `hcl:"external_senders_allowed,attr"`
	// HideFromAddressLists: bool, optional
	HideFromAddressLists terra.BoolValue `hcl:"hide_from_address_lists,attr"`
	// HideFromOutlookClients: bool, optional
	HideFromOutlookClients terra.BoolValue `hcl:"hide_from_outlook_clients,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MailEnabled: bool, optional
	MailEnabled terra.BoolValue `hcl:"mail_enabled,attr"`
	// MailNickname: string, optional
	MailNickname terra.StringValue `hcl:"mail_nickname,attr"`
	// Members: set of string, optional
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr"`
	// OnpremisesGroupType: string, optional
	OnpremisesGroupType terra.StringValue `hcl:"onpremises_group_type,attr"`
	// Owners: set of string, optional
	Owners terra.SetValue[terra.StringValue] `hcl:"owners,attr"`
	// PreventDuplicateNames: bool, optional
	PreventDuplicateNames terra.BoolValue `hcl:"prevent_duplicate_names,attr"`
	// ProvisioningOptions: set of string, optional
	ProvisioningOptions terra.SetValue[terra.StringValue] `hcl:"provisioning_options,attr"`
	// SecurityEnabled: bool, optional
	SecurityEnabled terra.BoolValue `hcl:"security_enabled,attr"`
	// Theme: string, optional
	Theme terra.StringValue `hcl:"theme,attr"`
	// Types: set of string, optional
	Types terra.SetValue[terra.StringValue] `hcl:"types,attr"`
	// Visibility: string, optional
	Visibility terra.StringValue `hcl:"visibility,attr"`
	// WritebackEnabled: bool, optional
	WritebackEnabled terra.BoolValue `hcl:"writeback_enabled,attr"`
	// DynamicMembership: optional
	DynamicMembership *group.DynamicMembership `hcl:"dynamic_membership,block"`
	// Timeouts: optional
	Timeouts *group.Timeouts `hcl:"timeouts,block"`
}
type groupAttributes struct {
	ref terra.Reference
}

// AdministrativeUnitIds returns a reference to field administrative_unit_ids of azuread_group.
func (g groupAttributes) AdministrativeUnitIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](g.ref.Append("administrative_unit_ids"))
}

// AssignableToRole returns a reference to field assignable_to_role of azuread_group.
func (g groupAttributes) AssignableToRole() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("assignable_to_role"))
}

// AutoSubscribeNewMembers returns a reference to field auto_subscribe_new_members of azuread_group.
func (g groupAttributes) AutoSubscribeNewMembers() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("auto_subscribe_new_members"))
}

// Behaviors returns a reference to field behaviors of azuread_group.
func (g groupAttributes) Behaviors() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](g.ref.Append("behaviors"))
}

// Description returns a reference to field description of azuread_group.
func (g groupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azuread_group.
func (g groupAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("display_name"))
}

// ExternalSendersAllowed returns a reference to field external_senders_allowed of azuread_group.
func (g groupAttributes) ExternalSendersAllowed() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("external_senders_allowed"))
}

// HideFromAddressLists returns a reference to field hide_from_address_lists of azuread_group.
func (g groupAttributes) HideFromAddressLists() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("hide_from_address_lists"))
}

// HideFromOutlookClients returns a reference to field hide_from_outlook_clients of azuread_group.
func (g groupAttributes) HideFromOutlookClients() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("hide_from_outlook_clients"))
}

// Id returns a reference to field id of azuread_group.
func (g groupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("id"))
}

// Mail returns a reference to field mail of azuread_group.
func (g groupAttributes) Mail() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("mail"))
}

// MailEnabled returns a reference to field mail_enabled of azuread_group.
func (g groupAttributes) MailEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("mail_enabled"))
}

// MailNickname returns a reference to field mail_nickname of azuread_group.
func (g groupAttributes) MailNickname() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("mail_nickname"))
}

// Members returns a reference to field members of azuread_group.
func (g groupAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](g.ref.Append("members"))
}

// ObjectId returns a reference to field object_id of azuread_group.
func (g groupAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("object_id"))
}

// OnpremisesDomainName returns a reference to field onpremises_domain_name of azuread_group.
func (g groupAttributes) OnpremisesDomainName() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("onpremises_domain_name"))
}

// OnpremisesGroupType returns a reference to field onpremises_group_type of azuread_group.
func (g groupAttributes) OnpremisesGroupType() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("onpremises_group_type"))
}

// OnpremisesNetbiosName returns a reference to field onpremises_netbios_name of azuread_group.
func (g groupAttributes) OnpremisesNetbiosName() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("onpremises_netbios_name"))
}

// OnpremisesSamAccountName returns a reference to field onpremises_sam_account_name of azuread_group.
func (g groupAttributes) OnpremisesSamAccountName() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("onpremises_sam_account_name"))
}

// OnpremisesSecurityIdentifier returns a reference to field onpremises_security_identifier of azuread_group.
func (g groupAttributes) OnpremisesSecurityIdentifier() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("onpremises_security_identifier"))
}

// OnpremisesSyncEnabled returns a reference to field onpremises_sync_enabled of azuread_group.
func (g groupAttributes) OnpremisesSyncEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("onpremises_sync_enabled"))
}

// Owners returns a reference to field owners of azuread_group.
func (g groupAttributes) Owners() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](g.ref.Append("owners"))
}

// PreferredLanguage returns a reference to field preferred_language of azuread_group.
func (g groupAttributes) PreferredLanguage() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("preferred_language"))
}

// PreventDuplicateNames returns a reference to field prevent_duplicate_names of azuread_group.
func (g groupAttributes) PreventDuplicateNames() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("prevent_duplicate_names"))
}

// ProvisioningOptions returns a reference to field provisioning_options of azuread_group.
func (g groupAttributes) ProvisioningOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](g.ref.Append("provisioning_options"))
}

// ProxyAddresses returns a reference to field proxy_addresses of azuread_group.
func (g groupAttributes) ProxyAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](g.ref.Append("proxy_addresses"))
}

// SecurityEnabled returns a reference to field security_enabled of azuread_group.
func (g groupAttributes) SecurityEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("security_enabled"))
}

// Theme returns a reference to field theme of azuread_group.
func (g groupAttributes) Theme() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("theme"))
}

// Types returns a reference to field types of azuread_group.
func (g groupAttributes) Types() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](g.ref.Append("types"))
}

// Visibility returns a reference to field visibility of azuread_group.
func (g groupAttributes) Visibility() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("visibility"))
}

// WritebackEnabled returns a reference to field writeback_enabled of azuread_group.
func (g groupAttributes) WritebackEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("writeback_enabled"))
}

func (g groupAttributes) DynamicMembership() terra.ListValue[group.DynamicMembershipAttributes] {
	return terra.ReferenceAsList[group.DynamicMembershipAttributes](g.ref.Append("dynamic_membership"))
}

func (g groupAttributes) Timeouts() group.TimeoutsAttributes {
	return terra.ReferenceAsSingle[group.TimeoutsAttributes](g.ref.Append("timeouts"))
}

type groupState struct {
	AdministrativeUnitIds        []string                       `json:"administrative_unit_ids"`
	AssignableToRole             bool                           `json:"assignable_to_role"`
	AutoSubscribeNewMembers      bool                           `json:"auto_subscribe_new_members"`
	Behaviors                    []string                       `json:"behaviors"`
	Description                  string                         `json:"description"`
	DisplayName                  string                         `json:"display_name"`
	ExternalSendersAllowed       bool                           `json:"external_senders_allowed"`
	HideFromAddressLists         bool                           `json:"hide_from_address_lists"`
	HideFromOutlookClients       bool                           `json:"hide_from_outlook_clients"`
	Id                           string                         `json:"id"`
	Mail                         string                         `json:"mail"`
	MailEnabled                  bool                           `json:"mail_enabled"`
	MailNickname                 string                         `json:"mail_nickname"`
	Members                      []string                       `json:"members"`
	ObjectId                     string                         `json:"object_id"`
	OnpremisesDomainName         string                         `json:"onpremises_domain_name"`
	OnpremisesGroupType          string                         `json:"onpremises_group_type"`
	OnpremisesNetbiosName        string                         `json:"onpremises_netbios_name"`
	OnpremisesSamAccountName     string                         `json:"onpremises_sam_account_name"`
	OnpremisesSecurityIdentifier string                         `json:"onpremises_security_identifier"`
	OnpremisesSyncEnabled        bool                           `json:"onpremises_sync_enabled"`
	Owners                       []string                       `json:"owners"`
	PreferredLanguage            string                         `json:"preferred_language"`
	PreventDuplicateNames        bool                           `json:"prevent_duplicate_names"`
	ProvisioningOptions          []string                       `json:"provisioning_options"`
	ProxyAddresses               []string                       `json:"proxy_addresses"`
	SecurityEnabled              bool                           `json:"security_enabled"`
	Theme                        string                         `json:"theme"`
	Types                        []string                       `json:"types"`
	Visibility                   string                         `json:"visibility"`
	WritebackEnabled             bool                           `json:"writeback_enabled"`
	DynamicMembership            []group.DynamicMembershipState `json:"dynamic_membership"`
	Timeouts                     *group.TimeoutsState           `json:"timeouts"`
}
