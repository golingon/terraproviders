// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package group

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type DynamicMembership struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Rule: string, required
	Rule terra.StringValue `hcl:"rule,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DynamicMembershipAttributes struct {
	ref terra.Reference
}

func (dm DynamicMembershipAttributes) InternalRef() (terra.Reference, error) {
	return dm.ref, nil
}

func (dm DynamicMembershipAttributes) InternalWithRef(ref terra.Reference) DynamicMembershipAttributes {
	return DynamicMembershipAttributes{ref: ref}
}

func (dm DynamicMembershipAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dm.ref.InternalTokens()
}

func (dm DynamicMembershipAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dm.ref.Append("enabled"))
}

func (dm DynamicMembershipAttributes) Rule() terra.StringValue {
	return terra.ReferenceAsString(dm.ref.Append("rule"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DynamicMembershipState struct {
	Enabled bool   `json:"enabled"`
	Rule    string `json:"rule"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
