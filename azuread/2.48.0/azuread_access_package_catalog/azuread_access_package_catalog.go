// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_access_package_catalog

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_access_package_catalog.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadAccessPackageCatalogState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aapc *Resource) Type() string {
	return "azuread_access_package_catalog"
}

// LocalName returns the local name for [Resource].
func (aapc *Resource) LocalName() string {
	return aapc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aapc *Resource) Configuration() interface{} {
	return aapc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aapc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aapc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aapc *Resource) Dependencies() terra.Dependencies {
	return aapc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aapc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aapc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aapc *Resource) Attributes() azureadAccessPackageCatalogAttributes {
	return azureadAccessPackageCatalogAttributes{ref: terra.ReferenceResource(aapc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aapc *Resource) ImportState(state io.Reader) error {
	aapc.state = &azureadAccessPackageCatalogState{}
	if err := json.NewDecoder(state).Decode(aapc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aapc.Type(), aapc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aapc *Resource) State() (*azureadAccessPackageCatalogState, bool) {
	return aapc.state, aapc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aapc *Resource) StateMust() *azureadAccessPackageCatalogState {
	if aapc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aapc.Type(), aapc.LocalName()))
	}
	return aapc.state
}

// Args contains the configurations for azuread_access_package_catalog.
type Args struct {
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// ExternallyVisible: bool, optional
	ExternallyVisible terra.BoolValue `hcl:"externally_visible,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Published: bool, optional
	Published terra.BoolValue `hcl:"published,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadAccessPackageCatalogAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azuread_access_package_catalog.
func (aapc azureadAccessPackageCatalogAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aapc.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azuread_access_package_catalog.
func (aapc azureadAccessPackageCatalogAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aapc.ref.Append("display_name"))
}

// ExternallyVisible returns a reference to field externally_visible of azuread_access_package_catalog.
func (aapc azureadAccessPackageCatalogAttributes) ExternallyVisible() terra.BoolValue {
	return terra.ReferenceAsBool(aapc.ref.Append("externally_visible"))
}

// Id returns a reference to field id of azuread_access_package_catalog.
func (aapc azureadAccessPackageCatalogAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aapc.ref.Append("id"))
}

// Published returns a reference to field published of azuread_access_package_catalog.
func (aapc azureadAccessPackageCatalogAttributes) Published() terra.BoolValue {
	return terra.ReferenceAsBool(aapc.ref.Append("published"))
}

func (aapc azureadAccessPackageCatalogAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aapc.ref.Append("timeouts"))
}

type azureadAccessPackageCatalogState struct {
	Description       string         `json:"description"`
	DisplayName       string         `json:"display_name"`
	ExternallyVisible bool           `json:"externally_visible"`
	Id                string         `json:"id"`
	Published         bool           `json:"published"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
