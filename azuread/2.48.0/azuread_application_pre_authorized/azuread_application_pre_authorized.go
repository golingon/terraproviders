// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_application_pre_authorized

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_application_pre_authorized.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadApplicationPreAuthorizedState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aapa *Resource) Type() string {
	return "azuread_application_pre_authorized"
}

// LocalName returns the local name for [Resource].
func (aapa *Resource) LocalName() string {
	return aapa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aapa *Resource) Configuration() interface{} {
	return aapa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aapa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aapa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aapa *Resource) Dependencies() terra.Dependencies {
	return aapa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aapa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aapa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aapa *Resource) Attributes() azureadApplicationPreAuthorizedAttributes {
	return azureadApplicationPreAuthorizedAttributes{ref: terra.ReferenceResource(aapa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aapa *Resource) ImportState(state io.Reader) error {
	aapa.state = &azureadApplicationPreAuthorizedState{}
	if err := json.NewDecoder(state).Decode(aapa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aapa.Type(), aapa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aapa *Resource) State() (*azureadApplicationPreAuthorizedState, bool) {
	return aapa.state, aapa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aapa *Resource) StateMust() *azureadApplicationPreAuthorizedState {
	if aapa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aapa.Type(), aapa.LocalName()))
	}
	return aapa.state
}

// Args contains the configurations for azuread_application_pre_authorized.
type Args struct {
	// ApplicationId: string, optional
	ApplicationId terra.StringValue `hcl:"application_id,attr"`
	// ApplicationObjectId: string, optional
	ApplicationObjectId terra.StringValue `hcl:"application_object_id,attr"`
	// AuthorizedAppId: string, optional
	AuthorizedAppId terra.StringValue `hcl:"authorized_app_id,attr"`
	// AuthorizedClientId: string, optional
	AuthorizedClientId terra.StringValue `hcl:"authorized_client_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PermissionIds: set of string, required
	PermissionIds terra.SetValue[terra.StringValue] `hcl:"permission_ids,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadApplicationPreAuthorizedAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of azuread_application_pre_authorized.
func (aapa azureadApplicationPreAuthorizedAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aapa.ref.Append("application_id"))
}

// ApplicationObjectId returns a reference to field application_object_id of azuread_application_pre_authorized.
func (aapa azureadApplicationPreAuthorizedAttributes) ApplicationObjectId() terra.StringValue {
	return terra.ReferenceAsString(aapa.ref.Append("application_object_id"))
}

// AuthorizedAppId returns a reference to field authorized_app_id of azuread_application_pre_authorized.
func (aapa azureadApplicationPreAuthorizedAttributes) AuthorizedAppId() terra.StringValue {
	return terra.ReferenceAsString(aapa.ref.Append("authorized_app_id"))
}

// AuthorizedClientId returns a reference to field authorized_client_id of azuread_application_pre_authorized.
func (aapa azureadApplicationPreAuthorizedAttributes) AuthorizedClientId() terra.StringValue {
	return terra.ReferenceAsString(aapa.ref.Append("authorized_client_id"))
}

// Id returns a reference to field id of azuread_application_pre_authorized.
func (aapa azureadApplicationPreAuthorizedAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aapa.ref.Append("id"))
}

// PermissionIds returns a reference to field permission_ids of azuread_application_pre_authorized.
func (aapa azureadApplicationPreAuthorizedAttributes) PermissionIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aapa.ref.Append("permission_ids"))
}

func (aapa azureadApplicationPreAuthorizedAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aapa.ref.Append("timeouts"))
}

type azureadApplicationPreAuthorizedState struct {
	ApplicationId       string         `json:"application_id"`
	ApplicationObjectId string         `json:"application_object_id"`
	AuthorizedAppId     string         `json:"authorized_app_id"`
	AuthorizedClientId  string         `json:"authorized_client_id"`
	Id                  string         `json:"id"`
	PermissionIds       []string       `json:"permission_ids"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
