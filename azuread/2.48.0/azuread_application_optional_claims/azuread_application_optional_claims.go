// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_application_optional_claims

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_application_optional_claims.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadApplicationOptionalClaimsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaoc *Resource) Type() string {
	return "azuread_application_optional_claims"
}

// LocalName returns the local name for [Resource].
func (aaoc *Resource) LocalName() string {
	return aaoc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaoc *Resource) Configuration() interface{} {
	return aaoc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaoc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaoc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaoc *Resource) Dependencies() terra.Dependencies {
	return aaoc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaoc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaoc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaoc *Resource) Attributes() azureadApplicationOptionalClaimsAttributes {
	return azureadApplicationOptionalClaimsAttributes{ref: terra.ReferenceResource(aaoc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaoc *Resource) ImportState(state io.Reader) error {
	aaoc.state = &azureadApplicationOptionalClaimsState{}
	if err := json.NewDecoder(state).Decode(aaoc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaoc.Type(), aaoc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaoc *Resource) State() (*azureadApplicationOptionalClaimsState, bool) {
	return aaoc.state, aaoc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaoc *Resource) StateMust() *azureadApplicationOptionalClaimsState {
	if aaoc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaoc.Type(), aaoc.LocalName()))
	}
	return aaoc.state
}

// Args contains the configurations for azuread_application_optional_claims.
type Args struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// AccessToken: min=0
	AccessToken []AccessToken `hcl:"access_token,block" validate:"min=0"`
	// IdToken: min=0
	IdToken []IdToken `hcl:"id_token,block" validate:"min=0"`
	// Saml2Token: min=0
	Saml2Token []Saml2Token `hcl:"saml2_token,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadApplicationOptionalClaimsAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of azuread_application_optional_claims.
func (aaoc azureadApplicationOptionalClaimsAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aaoc.ref.Append("application_id"))
}

// Id returns a reference to field id of azuread_application_optional_claims.
func (aaoc azureadApplicationOptionalClaimsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaoc.ref.Append("id"))
}

func (aaoc azureadApplicationOptionalClaimsAttributes) AccessToken() terra.ListValue[AccessTokenAttributes] {
	return terra.ReferenceAsList[AccessTokenAttributes](aaoc.ref.Append("access_token"))
}

func (aaoc azureadApplicationOptionalClaimsAttributes) IdToken() terra.ListValue[IdTokenAttributes] {
	return terra.ReferenceAsList[IdTokenAttributes](aaoc.ref.Append("id_token"))
}

func (aaoc azureadApplicationOptionalClaimsAttributes) Saml2Token() terra.ListValue[Saml2TokenAttributes] {
	return terra.ReferenceAsList[Saml2TokenAttributes](aaoc.ref.Append("saml2_token"))
}

func (aaoc azureadApplicationOptionalClaimsAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aaoc.ref.Append("timeouts"))
}

type azureadApplicationOptionalClaimsState struct {
	ApplicationId string             `json:"application_id"`
	Id            string             `json:"id"`
	AccessToken   []AccessTokenState `json:"access_token"`
	IdToken       []IdTokenState     `json:"id_token"`
	Saml2Token    []Saml2TokenState  `json:"saml2_token"`
	Timeouts      *TimeoutsState     `json:"timeouts"`
}
