// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_application_optional_claims

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AccessToken struct {
	// AdditionalProperties: list of string, optional
	AdditionalProperties terra.ListValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Essential: bool, optional
	Essential terra.BoolValue `hcl:"essential,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
}

type IdToken struct {
	// AdditionalProperties: list of string, optional
	AdditionalProperties terra.ListValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Essential: bool, optional
	Essential terra.BoolValue `hcl:"essential,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
}

type Saml2Token struct {
	// AdditionalProperties: list of string, optional
	AdditionalProperties terra.ListValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Essential: bool, optional
	Essential terra.BoolValue `hcl:"essential,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AccessTokenAttributes struct {
	ref terra.Reference
}

func (at AccessTokenAttributes) InternalRef() (terra.Reference, error) {
	return at.ref, nil
}

func (at AccessTokenAttributes) InternalWithRef(ref terra.Reference) AccessTokenAttributes {
	return AccessTokenAttributes{ref: ref}
}

func (at AccessTokenAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return at.ref.InternalTokens()
}

func (at AccessTokenAttributes) AdditionalProperties() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](at.ref.Append("additional_properties"))
}

func (at AccessTokenAttributes) Essential() terra.BoolValue {
	return terra.ReferenceAsBool(at.ref.Append("essential"))
}

func (at AccessTokenAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(at.ref.Append("name"))
}

func (at AccessTokenAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(at.ref.Append("source"))
}

type IdTokenAttributes struct {
	ref terra.Reference
}

func (it IdTokenAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it IdTokenAttributes) InternalWithRef(ref terra.Reference) IdTokenAttributes {
	return IdTokenAttributes{ref: ref}
}

func (it IdTokenAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it IdTokenAttributes) AdditionalProperties() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](it.ref.Append("additional_properties"))
}

func (it IdTokenAttributes) Essential() terra.BoolValue {
	return terra.ReferenceAsBool(it.ref.Append("essential"))
}

func (it IdTokenAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("name"))
}

func (it IdTokenAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("source"))
}

type Saml2TokenAttributes struct {
	ref terra.Reference
}

func (st Saml2TokenAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st Saml2TokenAttributes) InternalWithRef(ref terra.Reference) Saml2TokenAttributes {
	return Saml2TokenAttributes{ref: ref}
}

func (st Saml2TokenAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st Saml2TokenAttributes) AdditionalProperties() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](st.ref.Append("additional_properties"))
}

func (st Saml2TokenAttributes) Essential() terra.BoolValue {
	return terra.ReferenceAsBool(st.ref.Append("essential"))
}

func (st Saml2TokenAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("name"))
}

func (st Saml2TokenAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("source"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AccessTokenState struct {
	AdditionalProperties []string `json:"additional_properties"`
	Essential            bool     `json:"essential"`
	Name                 string   `json:"name"`
	Source               string   `json:"source"`
}

type IdTokenState struct {
	AdditionalProperties []string `json:"additional_properties"`
	Essential            bool     `json:"essential"`
	Name                 string   `json:"name"`
	Source               string   `json:"source"`
}

type Saml2TokenState struct {
	AdditionalProperties []string `json:"additional_properties"`
	Essential            bool     `json:"essential"`
	Name                 string   `json:"name"`
	Source               string   `json:"source"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
