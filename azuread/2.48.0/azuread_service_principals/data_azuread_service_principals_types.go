// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_service_principals

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataServicePrincipalsAttributes struct {
	ref terra.Reference
}

func (sp DataServicePrincipalsAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp DataServicePrincipalsAttributes) InternalWithRef(ref terra.Reference) DataServicePrincipalsAttributes {
	return DataServicePrincipalsAttributes{ref: ref}
}

func (sp DataServicePrincipalsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp DataServicePrincipalsAttributes) AccountEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sp.ref.Append("account_enabled"))
}

func (sp DataServicePrincipalsAttributes) AppRoleAssignmentRequired() terra.BoolValue {
	return terra.ReferenceAsBool(sp.ref.Append("app_role_assignment_required"))
}

func (sp DataServicePrincipalsAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("application_id"))
}

func (sp DataServicePrincipalsAttributes) ApplicationTenantId() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("application_tenant_id"))
}

func (sp DataServicePrincipalsAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("client_id"))
}

func (sp DataServicePrincipalsAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("display_name"))
}

func (sp DataServicePrincipalsAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("object_id"))
}

func (sp DataServicePrincipalsAttributes) PreferredSingleSignOnMode() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("preferred_single_sign_on_mode"))
}

func (sp DataServicePrincipalsAttributes) SamlMetadataUrl() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("saml_metadata_url"))
}

func (sp DataServicePrincipalsAttributes) ServicePrincipalNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("service_principal_names"))
}

func (sp DataServicePrincipalsAttributes) SignInAudience() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("sign_in_audience"))
}

func (sp DataServicePrincipalsAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("tags"))
}

func (sp DataServicePrincipalsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("type"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataServicePrincipalsState struct {
	AccountEnabled            bool     `json:"account_enabled"`
	AppRoleAssignmentRequired bool     `json:"app_role_assignment_required"`
	ApplicationId             string   `json:"application_id"`
	ApplicationTenantId       string   `json:"application_tenant_id"`
	ClientId                  string   `json:"client_id"`
	DisplayName               string   `json:"display_name"`
	ObjectId                  string   `json:"object_id"`
	PreferredSingleSignOnMode string   `json:"preferred_single_sign_on_mode"`
	SamlMetadataUrl           string   `json:"saml_metadata_url"`
	ServicePrincipalNames     []string `json:"service_principal_names"`
	SignInAudience            string   `json:"sign_in_audience"`
	Tags                      []string `json:"tags"`
	Type                      string   `json:"type"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
