// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_group.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ag *Resource) Type() string {
	return "azuread_group"
}

// LocalName returns the local name for [Resource].
func (ag *Resource) LocalName() string {
	return ag.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ag *Resource) Configuration() interface{} {
	return ag.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ag *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ag)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ag *Resource) Dependencies() terra.Dependencies {
	return ag.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ag *Resource) LifecycleManagement() *terra.Lifecycle {
	return ag.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ag *Resource) Attributes() azureadGroupAttributes {
	return azureadGroupAttributes{ref: terra.ReferenceResource(ag)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ag *Resource) ImportState(state io.Reader) error {
	ag.state = &azureadGroupState{}
	if err := json.NewDecoder(state).Decode(ag.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ag.Type(), ag.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ag *Resource) State() (*azureadGroupState, bool) {
	return ag.state, ag.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ag *Resource) StateMust() *azureadGroupState {
	if ag.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ag.Type(), ag.LocalName()))
	}
	return ag.state
}

// Args contains the configurations for azuread_group.
type Args struct {
	// AdministrativeUnitIds: set of string, optional
	AdministrativeUnitIds terra.SetValue[terra.StringValue] `hcl:"administrative_unit_ids,attr"`
	// AssignableToRole: bool, optional
	AssignableToRole terra.BoolValue `hcl:"assignable_to_role,attr"`
	// AutoSubscribeNewMembers: bool, optional
	AutoSubscribeNewMembers terra.BoolValue `hcl:"auto_subscribe_new_members,attr"`
	// Behaviors: set of string, optional
	Behaviors terra.SetValue[terra.StringValue] `hcl:"behaviors,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// ExternalSendersAllowed: bool, optional
	ExternalSendersAllowed terra.BoolValue `hcl:"external_senders_allowed,attr"`
	// HideFromAddressLists: bool, optional
	HideFromAddressLists terra.BoolValue `hcl:"hide_from_address_lists,attr"`
	// HideFromOutlookClients: bool, optional
	HideFromOutlookClients terra.BoolValue `hcl:"hide_from_outlook_clients,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MailEnabled: bool, optional
	MailEnabled terra.BoolValue `hcl:"mail_enabled,attr"`
	// MailNickname: string, optional
	MailNickname terra.StringValue `hcl:"mail_nickname,attr"`
	// Members: set of string, optional
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr"`
	// OnpremisesGroupType: string, optional
	OnpremisesGroupType terra.StringValue `hcl:"onpremises_group_type,attr"`
	// Owners: set of string, optional
	Owners terra.SetValue[terra.StringValue] `hcl:"owners,attr"`
	// PreventDuplicateNames: bool, optional
	PreventDuplicateNames terra.BoolValue `hcl:"prevent_duplicate_names,attr"`
	// ProvisioningOptions: set of string, optional
	ProvisioningOptions terra.SetValue[terra.StringValue] `hcl:"provisioning_options,attr"`
	// SecurityEnabled: bool, optional
	SecurityEnabled terra.BoolValue `hcl:"security_enabled,attr"`
	// Theme: string, optional
	Theme terra.StringValue `hcl:"theme,attr"`
	// Types: set of string, optional
	Types terra.SetValue[terra.StringValue] `hcl:"types,attr"`
	// Visibility: string, optional
	Visibility terra.StringValue `hcl:"visibility,attr"`
	// WritebackEnabled: bool, optional
	WritebackEnabled terra.BoolValue `hcl:"writeback_enabled,attr"`
	// DynamicMembership: optional
	DynamicMembership *DynamicMembership `hcl:"dynamic_membership,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadGroupAttributes struct {
	ref terra.Reference
}

// AdministrativeUnitIds returns a reference to field administrative_unit_ids of azuread_group.
func (ag azureadGroupAttributes) AdministrativeUnitIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ag.ref.Append("administrative_unit_ids"))
}

// AssignableToRole returns a reference to field assignable_to_role of azuread_group.
func (ag azureadGroupAttributes) AssignableToRole() terra.BoolValue {
	return terra.ReferenceAsBool(ag.ref.Append("assignable_to_role"))
}

// AutoSubscribeNewMembers returns a reference to field auto_subscribe_new_members of azuread_group.
func (ag azureadGroupAttributes) AutoSubscribeNewMembers() terra.BoolValue {
	return terra.ReferenceAsBool(ag.ref.Append("auto_subscribe_new_members"))
}

// Behaviors returns a reference to field behaviors of azuread_group.
func (ag azureadGroupAttributes) Behaviors() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ag.ref.Append("behaviors"))
}

// Description returns a reference to field description of azuread_group.
func (ag azureadGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azuread_group.
func (ag azureadGroupAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("display_name"))
}

// ExternalSendersAllowed returns a reference to field external_senders_allowed of azuread_group.
func (ag azureadGroupAttributes) ExternalSendersAllowed() terra.BoolValue {
	return terra.ReferenceAsBool(ag.ref.Append("external_senders_allowed"))
}

// HideFromAddressLists returns a reference to field hide_from_address_lists of azuread_group.
func (ag azureadGroupAttributes) HideFromAddressLists() terra.BoolValue {
	return terra.ReferenceAsBool(ag.ref.Append("hide_from_address_lists"))
}

// HideFromOutlookClients returns a reference to field hide_from_outlook_clients of azuread_group.
func (ag azureadGroupAttributes) HideFromOutlookClients() terra.BoolValue {
	return terra.ReferenceAsBool(ag.ref.Append("hide_from_outlook_clients"))
}

// Id returns a reference to field id of azuread_group.
func (ag azureadGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("id"))
}

// Mail returns a reference to field mail of azuread_group.
func (ag azureadGroupAttributes) Mail() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("mail"))
}

// MailEnabled returns a reference to field mail_enabled of azuread_group.
func (ag azureadGroupAttributes) MailEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ag.ref.Append("mail_enabled"))
}

// MailNickname returns a reference to field mail_nickname of azuread_group.
func (ag azureadGroupAttributes) MailNickname() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("mail_nickname"))
}

// Members returns a reference to field members of azuread_group.
func (ag azureadGroupAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ag.ref.Append("members"))
}

// ObjectId returns a reference to field object_id of azuread_group.
func (ag azureadGroupAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("object_id"))
}

// OnpremisesDomainName returns a reference to field onpremises_domain_name of azuread_group.
func (ag azureadGroupAttributes) OnpremisesDomainName() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("onpremises_domain_name"))
}

// OnpremisesGroupType returns a reference to field onpremises_group_type of azuread_group.
func (ag azureadGroupAttributes) OnpremisesGroupType() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("onpremises_group_type"))
}

// OnpremisesNetbiosName returns a reference to field onpremises_netbios_name of azuread_group.
func (ag azureadGroupAttributes) OnpremisesNetbiosName() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("onpremises_netbios_name"))
}

// OnpremisesSamAccountName returns a reference to field onpremises_sam_account_name of azuread_group.
func (ag azureadGroupAttributes) OnpremisesSamAccountName() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("onpremises_sam_account_name"))
}

// OnpremisesSecurityIdentifier returns a reference to field onpremises_security_identifier of azuread_group.
func (ag azureadGroupAttributes) OnpremisesSecurityIdentifier() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("onpremises_security_identifier"))
}

// OnpremisesSyncEnabled returns a reference to field onpremises_sync_enabled of azuread_group.
func (ag azureadGroupAttributes) OnpremisesSyncEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ag.ref.Append("onpremises_sync_enabled"))
}

// Owners returns a reference to field owners of azuread_group.
func (ag azureadGroupAttributes) Owners() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ag.ref.Append("owners"))
}

// PreferredLanguage returns a reference to field preferred_language of azuread_group.
func (ag azureadGroupAttributes) PreferredLanguage() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("preferred_language"))
}

// PreventDuplicateNames returns a reference to field prevent_duplicate_names of azuread_group.
func (ag azureadGroupAttributes) PreventDuplicateNames() terra.BoolValue {
	return terra.ReferenceAsBool(ag.ref.Append("prevent_duplicate_names"))
}

// ProvisioningOptions returns a reference to field provisioning_options of azuread_group.
func (ag azureadGroupAttributes) ProvisioningOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ag.ref.Append("provisioning_options"))
}

// ProxyAddresses returns a reference to field proxy_addresses of azuread_group.
func (ag azureadGroupAttributes) ProxyAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ag.ref.Append("proxy_addresses"))
}

// SecurityEnabled returns a reference to field security_enabled of azuread_group.
func (ag azureadGroupAttributes) SecurityEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ag.ref.Append("security_enabled"))
}

// Theme returns a reference to field theme of azuread_group.
func (ag azureadGroupAttributes) Theme() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("theme"))
}

// Types returns a reference to field types of azuread_group.
func (ag azureadGroupAttributes) Types() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ag.ref.Append("types"))
}

// Visibility returns a reference to field visibility of azuread_group.
func (ag azureadGroupAttributes) Visibility() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("visibility"))
}

// WritebackEnabled returns a reference to field writeback_enabled of azuread_group.
func (ag azureadGroupAttributes) WritebackEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ag.ref.Append("writeback_enabled"))
}

func (ag azureadGroupAttributes) DynamicMembership() terra.ListValue[DynamicMembershipAttributes] {
	return terra.ReferenceAsList[DynamicMembershipAttributes](ag.ref.Append("dynamic_membership"))
}

func (ag azureadGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ag.ref.Append("timeouts"))
}

type azureadGroupState struct {
	AdministrativeUnitIds        []string                 `json:"administrative_unit_ids"`
	AssignableToRole             bool                     `json:"assignable_to_role"`
	AutoSubscribeNewMembers      bool                     `json:"auto_subscribe_new_members"`
	Behaviors                    []string                 `json:"behaviors"`
	Description                  string                   `json:"description"`
	DisplayName                  string                   `json:"display_name"`
	ExternalSendersAllowed       bool                     `json:"external_senders_allowed"`
	HideFromAddressLists         bool                     `json:"hide_from_address_lists"`
	HideFromOutlookClients       bool                     `json:"hide_from_outlook_clients"`
	Id                           string                   `json:"id"`
	Mail                         string                   `json:"mail"`
	MailEnabled                  bool                     `json:"mail_enabled"`
	MailNickname                 string                   `json:"mail_nickname"`
	Members                      []string                 `json:"members"`
	ObjectId                     string                   `json:"object_id"`
	OnpremisesDomainName         string                   `json:"onpremises_domain_name"`
	OnpremisesGroupType          string                   `json:"onpremises_group_type"`
	OnpremisesNetbiosName        string                   `json:"onpremises_netbios_name"`
	OnpremisesSamAccountName     string                   `json:"onpremises_sam_account_name"`
	OnpremisesSecurityIdentifier string                   `json:"onpremises_security_identifier"`
	OnpremisesSyncEnabled        bool                     `json:"onpremises_sync_enabled"`
	Owners                       []string                 `json:"owners"`
	PreferredLanguage            string                   `json:"preferred_language"`
	PreventDuplicateNames        bool                     `json:"prevent_duplicate_names"`
	ProvisioningOptions          []string                 `json:"provisioning_options"`
	ProxyAddresses               []string                 `json:"proxy_addresses"`
	SecurityEnabled              bool                     `json:"security_enabled"`
	Theme                        string                   `json:"theme"`
	Types                        []string                 `json:"types"`
	Visibility                   string                   `json:"visibility"`
	WritebackEnabled             bool                     `json:"writeback_enabled"`
	DynamicMembership            []DynamicMembershipState `json:"dynamic_membership"`
	Timeouts                     *TimeoutsState           `json:"timeouts"`
}
