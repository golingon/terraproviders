// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataDynamicMembershipAttributes struct {
	ref terra.Reference
}

func (dm DataDynamicMembershipAttributes) InternalRef() (terra.Reference, error) {
	return dm.ref, nil
}

func (dm DataDynamicMembershipAttributes) InternalWithRef(ref terra.Reference) DataDynamicMembershipAttributes {
	return DataDynamicMembershipAttributes{ref: ref}
}

func (dm DataDynamicMembershipAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dm.ref.InternalTokens()
}

func (dm DataDynamicMembershipAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dm.ref.Append("enabled"))
}

func (dm DataDynamicMembershipAttributes) Rule() terra.StringValue {
	return terra.ReferenceAsString(dm.ref.Append("rule"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataDynamicMembershipState struct {
	Enabled bool   `json:"enabled"`
	Rule    string `json:"rule"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
