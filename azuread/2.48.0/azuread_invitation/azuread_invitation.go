// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_invitation

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_invitation.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadInvitationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ai *Resource) Type() string {
	return "azuread_invitation"
}

// LocalName returns the local name for [Resource].
func (ai *Resource) LocalName() string {
	return ai.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ai *Resource) Configuration() interface{} {
	return ai.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ai *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ai)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ai *Resource) Dependencies() terra.Dependencies {
	return ai.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ai *Resource) LifecycleManagement() *terra.Lifecycle {
	return ai.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ai *Resource) Attributes() azureadInvitationAttributes {
	return azureadInvitationAttributes{ref: terra.ReferenceResource(ai)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ai *Resource) ImportState(state io.Reader) error {
	ai.state = &azureadInvitationState{}
	if err := json.NewDecoder(state).Decode(ai.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ai.Type(), ai.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ai *Resource) State() (*azureadInvitationState, bool) {
	return ai.state, ai.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ai *Resource) StateMust() *azureadInvitationState {
	if ai.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ai.Type(), ai.LocalName()))
	}
	return ai.state
}

// Args contains the configurations for azuread_invitation.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RedirectUrl: string, required
	RedirectUrl terra.StringValue `hcl:"redirect_url,attr" validate:"required"`
	// UserDisplayName: string, optional
	UserDisplayName terra.StringValue `hcl:"user_display_name,attr"`
	// UserEmailAddress: string, required
	UserEmailAddress terra.StringValue `hcl:"user_email_address,attr" validate:"required"`
	// UserType: string, optional
	UserType terra.StringValue `hcl:"user_type,attr"`
	// Message: optional
	Message *Message `hcl:"message,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadInvitationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azuread_invitation.
func (ai azureadInvitationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("id"))
}

// RedeemUrl returns a reference to field redeem_url of azuread_invitation.
func (ai azureadInvitationAttributes) RedeemUrl() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("redeem_url"))
}

// RedirectUrl returns a reference to field redirect_url of azuread_invitation.
func (ai azureadInvitationAttributes) RedirectUrl() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("redirect_url"))
}

// UserDisplayName returns a reference to field user_display_name of azuread_invitation.
func (ai azureadInvitationAttributes) UserDisplayName() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("user_display_name"))
}

// UserEmailAddress returns a reference to field user_email_address of azuread_invitation.
func (ai azureadInvitationAttributes) UserEmailAddress() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("user_email_address"))
}

// UserId returns a reference to field user_id of azuread_invitation.
func (ai azureadInvitationAttributes) UserId() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("user_id"))
}

// UserType returns a reference to field user_type of azuread_invitation.
func (ai azureadInvitationAttributes) UserType() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("user_type"))
}

func (ai azureadInvitationAttributes) Message() terra.ListValue[MessageAttributes] {
	return terra.ReferenceAsList[MessageAttributes](ai.ref.Append("message"))
}

func (ai azureadInvitationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ai.ref.Append("timeouts"))
}

type azureadInvitationState struct {
	Id               string         `json:"id"`
	RedeemUrl        string         `json:"redeem_url"`
	RedirectUrl      string         `json:"redirect_url"`
	UserDisplayName  string         `json:"user_display_name"`
	UserEmailAddress string         `json:"user_email_address"`
	UserId           string         `json:"user_id"`
	UserType         string         `json:"user_type"`
	Message          []MessageState `json:"message"`
	Timeouts         *TimeoutsState `json:"timeouts"`
}
