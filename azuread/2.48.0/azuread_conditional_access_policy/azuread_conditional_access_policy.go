// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_conditional_access_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_conditional_access_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadConditionalAccessPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acap *Resource) Type() string {
	return "azuread_conditional_access_policy"
}

// LocalName returns the local name for [Resource].
func (acap *Resource) LocalName() string {
	return acap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acap *Resource) Configuration() interface{} {
	return acap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acap *Resource) Dependencies() terra.Dependencies {
	return acap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acap *Resource) LifecycleManagement() *terra.Lifecycle {
	return acap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acap *Resource) Attributes() azureadConditionalAccessPolicyAttributes {
	return azureadConditionalAccessPolicyAttributes{ref: terra.ReferenceResource(acap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acap *Resource) ImportState(state io.Reader) error {
	acap.state = &azureadConditionalAccessPolicyState{}
	if err := json.NewDecoder(state).Decode(acap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acap.Type(), acap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acap *Resource) State() (*azureadConditionalAccessPolicyState, bool) {
	return acap.state, acap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acap *Resource) StateMust() *azureadConditionalAccessPolicyState {
	if acap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acap.Type(), acap.LocalName()))
	}
	return acap.state
}

// Args contains the configurations for azuread_conditional_access_policy.
type Args struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// State: string, required
	State terra.StringValue `hcl:"state,attr" validate:"required"`
	// Conditions: required
	Conditions *Conditions `hcl:"conditions,block" validate:"required"`
	// GrantControls: optional
	GrantControls *GrantControls `hcl:"grant_controls,block"`
	// SessionControls: optional
	SessionControls *SessionControls `hcl:"session_controls,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadConditionalAccessPolicyAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of azuread_conditional_access_policy.
func (acap azureadConditionalAccessPolicyAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(acap.ref.Append("display_name"))
}

// Id returns a reference to field id of azuread_conditional_access_policy.
func (acap azureadConditionalAccessPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acap.ref.Append("id"))
}

// State returns a reference to field state of azuread_conditional_access_policy.
func (acap azureadConditionalAccessPolicyAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(acap.ref.Append("state"))
}

func (acap azureadConditionalAccessPolicyAttributes) Conditions() terra.ListValue[ConditionsAttributes] {
	return terra.ReferenceAsList[ConditionsAttributes](acap.ref.Append("conditions"))
}

func (acap azureadConditionalAccessPolicyAttributes) GrantControls() terra.ListValue[GrantControlsAttributes] {
	return terra.ReferenceAsList[GrantControlsAttributes](acap.ref.Append("grant_controls"))
}

func (acap azureadConditionalAccessPolicyAttributes) SessionControls() terra.ListValue[SessionControlsAttributes] {
	return terra.ReferenceAsList[SessionControlsAttributes](acap.ref.Append("session_controls"))
}

func (acap azureadConditionalAccessPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acap.ref.Append("timeouts"))
}

type azureadConditionalAccessPolicyState struct {
	DisplayName     string                 `json:"display_name"`
	Id              string                 `json:"id"`
	State           string                 `json:"state"`
	Conditions      []ConditionsState      `json:"conditions"`
	GrantControls   []GrantControlsState   `json:"grant_controls"`
	SessionControls []SessionControlsState `json:"session_controls"`
	Timeouts        *TimeoutsState         `json:"timeouts"`
}
