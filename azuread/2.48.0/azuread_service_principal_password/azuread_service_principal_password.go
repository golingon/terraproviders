// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_service_principal_password

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_service_principal_password.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadServicePrincipalPasswordState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aspp *Resource) Type() string {
	return "azuread_service_principal_password"
}

// LocalName returns the local name for [Resource].
func (aspp *Resource) LocalName() string {
	return aspp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aspp *Resource) Configuration() interface{} {
	return aspp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aspp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aspp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aspp *Resource) Dependencies() terra.Dependencies {
	return aspp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aspp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aspp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aspp *Resource) Attributes() azureadServicePrincipalPasswordAttributes {
	return azureadServicePrincipalPasswordAttributes{ref: terra.ReferenceResource(aspp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aspp *Resource) ImportState(state io.Reader) error {
	aspp.state = &azureadServicePrincipalPasswordState{}
	if err := json.NewDecoder(state).Decode(aspp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aspp.Type(), aspp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aspp *Resource) State() (*azureadServicePrincipalPasswordState, bool) {
	return aspp.state, aspp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aspp *Resource) StateMust() *azureadServicePrincipalPasswordState {
	if aspp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aspp.Type(), aspp.LocalName()))
	}
	return aspp.state
}

// Args contains the configurations for azuread_service_principal_password.
type Args struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// EndDate: string, optional
	EndDate terra.StringValue `hcl:"end_date,attr"`
	// EndDateRelative: string, optional
	EndDateRelative terra.StringValue `hcl:"end_date_relative,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RotateWhenChanged: map of string, optional
	RotateWhenChanged terra.MapValue[terra.StringValue] `hcl:"rotate_when_changed,attr"`
	// ServicePrincipalId: string, required
	ServicePrincipalId terra.StringValue `hcl:"service_principal_id,attr" validate:"required"`
	// StartDate: string, optional
	StartDate terra.StringValue `hcl:"start_date,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadServicePrincipalPasswordAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of azuread_service_principal_password.
func (aspp azureadServicePrincipalPasswordAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("display_name"))
}

// EndDate returns a reference to field end_date of azuread_service_principal_password.
func (aspp azureadServicePrincipalPasswordAttributes) EndDate() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("end_date"))
}

// EndDateRelative returns a reference to field end_date_relative of azuread_service_principal_password.
func (aspp azureadServicePrincipalPasswordAttributes) EndDateRelative() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("end_date_relative"))
}

// Id returns a reference to field id of azuread_service_principal_password.
func (aspp azureadServicePrincipalPasswordAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("id"))
}

// KeyId returns a reference to field key_id of azuread_service_principal_password.
func (aspp azureadServicePrincipalPasswordAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("key_id"))
}

// RotateWhenChanged returns a reference to field rotate_when_changed of azuread_service_principal_password.
func (aspp azureadServicePrincipalPasswordAttributes) RotateWhenChanged() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aspp.ref.Append("rotate_when_changed"))
}

// ServicePrincipalId returns a reference to field service_principal_id of azuread_service_principal_password.
func (aspp azureadServicePrincipalPasswordAttributes) ServicePrincipalId() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("service_principal_id"))
}

// StartDate returns a reference to field start_date of azuread_service_principal_password.
func (aspp azureadServicePrincipalPasswordAttributes) StartDate() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("start_date"))
}

// Value returns a reference to field value of azuread_service_principal_password.
func (aspp azureadServicePrincipalPasswordAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("value"))
}

func (aspp azureadServicePrincipalPasswordAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aspp.ref.Append("timeouts"))
}

type azureadServicePrincipalPasswordState struct {
	DisplayName        string            `json:"display_name"`
	EndDate            string            `json:"end_date"`
	EndDateRelative    string            `json:"end_date_relative"`
	Id                 string            `json:"id"`
	KeyId              string            `json:"key_id"`
	RotateWhenChanged  map[string]string `json:"rotate_when_changed"`
	ServicePrincipalId string            `json:"service_principal_id"`
	StartDate          string            `json:"start_date"`
	Value              string            `json:"value"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
