// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_service_principal

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_service_principal.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadServicePrincipalState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asp *Resource) Type() string {
	return "azuread_service_principal"
}

// LocalName returns the local name for [Resource].
func (asp *Resource) LocalName() string {
	return asp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asp *Resource) Configuration() interface{} {
	return asp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asp *Resource) Dependencies() terra.Dependencies {
	return asp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asp *Resource) LifecycleManagement() *terra.Lifecycle {
	return asp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asp *Resource) Attributes() azureadServicePrincipalAttributes {
	return azureadServicePrincipalAttributes{ref: terra.ReferenceResource(asp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asp *Resource) ImportState(state io.Reader) error {
	asp.state = &azureadServicePrincipalState{}
	if err := json.NewDecoder(state).Decode(asp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asp.Type(), asp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asp *Resource) State() (*azureadServicePrincipalState, bool) {
	return asp.state, asp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asp *Resource) StateMust() *azureadServicePrincipalState {
	if asp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asp.Type(), asp.LocalName()))
	}
	return asp.state
}

// Args contains the configurations for azuread_service_principal.
type Args struct {
	// AccountEnabled: bool, optional
	AccountEnabled terra.BoolValue `hcl:"account_enabled,attr"`
	// AlternativeNames: set of string, optional
	AlternativeNames terra.SetValue[terra.StringValue] `hcl:"alternative_names,attr"`
	// AppRoleAssignmentRequired: bool, optional
	AppRoleAssignmentRequired terra.BoolValue `hcl:"app_role_assignment_required,attr"`
	// ApplicationId: string, optional
	ApplicationId terra.StringValue `hcl:"application_id,attr"`
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoginUrl: string, optional
	LoginUrl terra.StringValue `hcl:"login_url,attr"`
	// Notes: string, optional
	Notes terra.StringValue `hcl:"notes,attr"`
	// NotificationEmailAddresses: set of string, optional
	NotificationEmailAddresses terra.SetValue[terra.StringValue] `hcl:"notification_email_addresses,attr"`
	// Owners: set of string, optional
	Owners terra.SetValue[terra.StringValue] `hcl:"owners,attr"`
	// PreferredSingleSignOnMode: string, optional
	PreferredSingleSignOnMode terra.StringValue `hcl:"preferred_single_sign_on_mode,attr"`
	// Tags: set of string, optional
	Tags terra.SetValue[terra.StringValue] `hcl:"tags,attr"`
	// UseExisting: bool, optional
	UseExisting terra.BoolValue `hcl:"use_existing,attr"`
	// FeatureTags: min=0
	FeatureTags []FeatureTags `hcl:"feature_tags,block" validate:"min=0"`
	// Features: min=0
	Features []Features `hcl:"features,block" validate:"min=0"`
	// SamlSingleSignOn: optional
	SamlSingleSignOn *SamlSingleSignOn `hcl:"saml_single_sign_on,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadServicePrincipalAttributes struct {
	ref terra.Reference
}

// AccountEnabled returns a reference to field account_enabled of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) AccountEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asp.ref.Append("account_enabled"))
}

// AlternativeNames returns a reference to field alternative_names of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) AlternativeNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asp.ref.Append("alternative_names"))
}

// AppRoleAssignmentRequired returns a reference to field app_role_assignment_required of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) AppRoleAssignmentRequired() terra.BoolValue {
	return terra.ReferenceAsBool(asp.ref.Append("app_role_assignment_required"))
}

// AppRoleIds returns a reference to field app_role_ids of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) AppRoleIds() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asp.ref.Append("app_role_ids"))
}

// ApplicationId returns a reference to field application_id of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("application_id"))
}

// ApplicationTenantId returns a reference to field application_tenant_id of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) ApplicationTenantId() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("application_tenant_id"))
}

// ClientId returns a reference to field client_id of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("client_id"))
}

// Description returns a reference to field description of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("display_name"))
}

// HomepageUrl returns a reference to field homepage_url of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) HomepageUrl() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("homepage_url"))
}

// Id returns a reference to field id of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("id"))
}

// LoginUrl returns a reference to field login_url of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) LoginUrl() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("login_url"))
}

// LogoutUrl returns a reference to field logout_url of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) LogoutUrl() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("logout_url"))
}

// Notes returns a reference to field notes of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) Notes() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("notes"))
}

// NotificationEmailAddresses returns a reference to field notification_email_addresses of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) NotificationEmailAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asp.ref.Append("notification_email_addresses"))
}

// Oauth2PermissionScopeIds returns a reference to field oauth2_permission_scope_ids of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) Oauth2PermissionScopeIds() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asp.ref.Append("oauth2_permission_scope_ids"))
}

// ObjectId returns a reference to field object_id of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("object_id"))
}

// Owners returns a reference to field owners of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) Owners() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asp.ref.Append("owners"))
}

// PreferredSingleSignOnMode returns a reference to field preferred_single_sign_on_mode of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) PreferredSingleSignOnMode() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("preferred_single_sign_on_mode"))
}

// RedirectUris returns a reference to field redirect_uris of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) RedirectUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asp.ref.Append("redirect_uris"))
}

// SamlMetadataUrl returns a reference to field saml_metadata_url of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) SamlMetadataUrl() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("saml_metadata_url"))
}

// ServicePrincipalNames returns a reference to field service_principal_names of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) ServicePrincipalNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asp.ref.Append("service_principal_names"))
}

// SignInAudience returns a reference to field sign_in_audience of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) SignInAudience() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("sign_in_audience"))
}

// Tags returns a reference to field tags of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) Tags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asp.ref.Append("tags"))
}

// Type returns a reference to field type of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("type"))
}

// UseExisting returns a reference to field use_existing of azuread_service_principal.
func (asp azureadServicePrincipalAttributes) UseExisting() terra.BoolValue {
	return terra.ReferenceAsBool(asp.ref.Append("use_existing"))
}

func (asp azureadServicePrincipalAttributes) AppRoles() terra.ListValue[AppRolesAttributes] {
	return terra.ReferenceAsList[AppRolesAttributes](asp.ref.Append("app_roles"))
}

func (asp azureadServicePrincipalAttributes) Oauth2PermissionScopes() terra.ListValue[Oauth2PermissionScopesAttributes] {
	return terra.ReferenceAsList[Oauth2PermissionScopesAttributes](asp.ref.Append("oauth2_permission_scopes"))
}

func (asp azureadServicePrincipalAttributes) FeatureTags() terra.ListValue[FeatureTagsAttributes] {
	return terra.ReferenceAsList[FeatureTagsAttributes](asp.ref.Append("feature_tags"))
}

func (asp azureadServicePrincipalAttributes) Features() terra.ListValue[FeaturesAttributes] {
	return terra.ReferenceAsList[FeaturesAttributes](asp.ref.Append("features"))
}

func (asp azureadServicePrincipalAttributes) SamlSingleSignOn() terra.ListValue[SamlSingleSignOnAttributes] {
	return terra.ReferenceAsList[SamlSingleSignOnAttributes](asp.ref.Append("saml_single_sign_on"))
}

func (asp azureadServicePrincipalAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asp.ref.Append("timeouts"))
}

type azureadServicePrincipalState struct {
	AccountEnabled             bool                          `json:"account_enabled"`
	AlternativeNames           []string                      `json:"alternative_names"`
	AppRoleAssignmentRequired  bool                          `json:"app_role_assignment_required"`
	AppRoleIds                 map[string]string             `json:"app_role_ids"`
	ApplicationId              string                        `json:"application_id"`
	ApplicationTenantId        string                        `json:"application_tenant_id"`
	ClientId                   string                        `json:"client_id"`
	Description                string                        `json:"description"`
	DisplayName                string                        `json:"display_name"`
	HomepageUrl                string                        `json:"homepage_url"`
	Id                         string                        `json:"id"`
	LoginUrl                   string                        `json:"login_url"`
	LogoutUrl                  string                        `json:"logout_url"`
	Notes                      string                        `json:"notes"`
	NotificationEmailAddresses []string                      `json:"notification_email_addresses"`
	Oauth2PermissionScopeIds   map[string]string             `json:"oauth2_permission_scope_ids"`
	ObjectId                   string                        `json:"object_id"`
	Owners                     []string                      `json:"owners"`
	PreferredSingleSignOnMode  string                        `json:"preferred_single_sign_on_mode"`
	RedirectUris               []string                      `json:"redirect_uris"`
	SamlMetadataUrl            string                        `json:"saml_metadata_url"`
	ServicePrincipalNames      []string                      `json:"service_principal_names"`
	SignInAudience             string                        `json:"sign_in_audience"`
	Tags                       []string                      `json:"tags"`
	Type                       string                        `json:"type"`
	UseExisting                bool                          `json:"use_existing"`
	AppRoles                   []AppRolesState               `json:"app_roles"`
	Oauth2PermissionScopes     []Oauth2PermissionScopesState `json:"oauth2_permission_scopes"`
	FeatureTags                []FeatureTagsState            `json:"feature_tags"`
	Features                   []FeaturesState               `json:"features"`
	SamlSingleSignOn           []SamlSingleSignOnState       `json:"saml_single_sign_on"`
	Timeouts                   *TimeoutsState                `json:"timeouts"`
}
