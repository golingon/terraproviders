// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_directory_role

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_directory_role.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadDirectoryRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adr *Resource) Type() string {
	return "azuread_directory_role"
}

// LocalName returns the local name for [Resource].
func (adr *Resource) LocalName() string {
	return adr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adr *Resource) Configuration() interface{} {
	return adr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adr *Resource) Dependencies() terra.Dependencies {
	return adr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adr *Resource) LifecycleManagement() *terra.Lifecycle {
	return adr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adr *Resource) Attributes() azureadDirectoryRoleAttributes {
	return azureadDirectoryRoleAttributes{ref: terra.ReferenceResource(adr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adr *Resource) ImportState(state io.Reader) error {
	adr.state = &azureadDirectoryRoleState{}
	if err := json.NewDecoder(state).Decode(adr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adr.Type(), adr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adr *Resource) State() (*azureadDirectoryRoleState, bool) {
	return adr.state, adr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adr *Resource) StateMust() *azureadDirectoryRoleState {
	if adr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adr.Type(), adr.LocalName()))
	}
	return adr.state
}

// Args contains the configurations for azuread_directory_role.
type Args struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TemplateId: string, optional
	TemplateId terra.StringValue `hcl:"template_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadDirectoryRoleAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azuread_directory_role.
func (adr azureadDirectoryRoleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adr.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azuread_directory_role.
func (adr azureadDirectoryRoleAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(adr.ref.Append("display_name"))
}

// Id returns a reference to field id of azuread_directory_role.
func (adr azureadDirectoryRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adr.ref.Append("id"))
}

// ObjectId returns a reference to field object_id of azuread_directory_role.
func (adr azureadDirectoryRoleAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(adr.ref.Append("object_id"))
}

// TemplateId returns a reference to field template_id of azuread_directory_role.
func (adr azureadDirectoryRoleAttributes) TemplateId() terra.StringValue {
	return terra.ReferenceAsString(adr.ref.Append("template_id"))
}

func (adr azureadDirectoryRoleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adr.ref.Append("timeouts"))
}

type azureadDirectoryRoleState struct {
	Description string         `json:"description"`
	DisplayName string         `json:"display_name"`
	Id          string         `json:"id"`
	ObjectId    string         `json:"object_id"`
	TemplateId  string         `json:"template_id"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
