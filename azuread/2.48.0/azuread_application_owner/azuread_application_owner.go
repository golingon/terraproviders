// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_application_owner

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_application_owner.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadApplicationOwnerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aao *Resource) Type() string {
	return "azuread_application_owner"
}

// LocalName returns the local name for [Resource].
func (aao *Resource) LocalName() string {
	return aao.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aao *Resource) Configuration() interface{} {
	return aao.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aao *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aao)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aao *Resource) Dependencies() terra.Dependencies {
	return aao.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aao *Resource) LifecycleManagement() *terra.Lifecycle {
	return aao.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aao *Resource) Attributes() azureadApplicationOwnerAttributes {
	return azureadApplicationOwnerAttributes{ref: terra.ReferenceResource(aao)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aao *Resource) ImportState(state io.Reader) error {
	aao.state = &azureadApplicationOwnerState{}
	if err := json.NewDecoder(state).Decode(aao.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aao.Type(), aao.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aao *Resource) State() (*azureadApplicationOwnerState, bool) {
	return aao.state, aao.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aao *Resource) StateMust() *azureadApplicationOwnerState {
	if aao.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aao.Type(), aao.LocalName()))
	}
	return aao.state
}

// Args contains the configurations for azuread_application_owner.
type Args struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OwnerObjectId: string, required
	OwnerObjectId terra.StringValue `hcl:"owner_object_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadApplicationOwnerAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of azuread_application_owner.
func (aao azureadApplicationOwnerAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aao.ref.Append("application_id"))
}

// Id returns a reference to field id of azuread_application_owner.
func (aao azureadApplicationOwnerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aao.ref.Append("id"))
}

// OwnerObjectId returns a reference to field owner_object_id of azuread_application_owner.
func (aao azureadApplicationOwnerAttributes) OwnerObjectId() terra.StringValue {
	return terra.ReferenceAsString(aao.ref.Append("owner_object_id"))
}

func (aao azureadApplicationOwnerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aao.ref.Append("timeouts"))
}

type azureadApplicationOwnerState struct {
	ApplicationId string         `json:"application_id"`
	Id            string         `json:"id"`
	OwnerObjectId string         `json:"owner_object_id"`
	Timeouts      *TimeoutsState `json:"timeouts"`
}
