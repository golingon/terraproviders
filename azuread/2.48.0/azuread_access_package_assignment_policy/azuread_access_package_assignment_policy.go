// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_access_package_assignment_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_access_package_assignment_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadAccessPackageAssignmentPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aapap *Resource) Type() string {
	return "azuread_access_package_assignment_policy"
}

// LocalName returns the local name for [Resource].
func (aapap *Resource) LocalName() string {
	return aapap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aapap *Resource) Configuration() interface{} {
	return aapap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aapap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aapap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aapap *Resource) Dependencies() terra.Dependencies {
	return aapap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aapap *Resource) LifecycleManagement() *terra.Lifecycle {
	return aapap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aapap *Resource) Attributes() azureadAccessPackageAssignmentPolicyAttributes {
	return azureadAccessPackageAssignmentPolicyAttributes{ref: terra.ReferenceResource(aapap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aapap *Resource) ImportState(state io.Reader) error {
	aapap.state = &azureadAccessPackageAssignmentPolicyState{}
	if err := json.NewDecoder(state).Decode(aapap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aapap.Type(), aapap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aapap *Resource) State() (*azureadAccessPackageAssignmentPolicyState, bool) {
	return aapap.state, aapap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aapap *Resource) StateMust() *azureadAccessPackageAssignmentPolicyState {
	if aapap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aapap.Type(), aapap.LocalName()))
	}
	return aapap.state
}

// Args contains the configurations for azuread_access_package_assignment_policy.
type Args struct {
	// AccessPackageId: string, required
	AccessPackageId terra.StringValue `hcl:"access_package_id,attr" validate:"required"`
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// DurationInDays: number, optional
	DurationInDays terra.NumberValue `hcl:"duration_in_days,attr"`
	// ExpirationDate: string, optional
	ExpirationDate terra.StringValue `hcl:"expiration_date,attr"`
	// ExtensionEnabled: bool, optional
	ExtensionEnabled terra.BoolValue `hcl:"extension_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ApprovalSettings: optional
	ApprovalSettings *ApprovalSettings `hcl:"approval_settings,block"`
	// AssignmentReviewSettings: optional
	AssignmentReviewSettings *AssignmentReviewSettings `hcl:"assignment_review_settings,block"`
	// Question: min=0
	Question []Question `hcl:"question,block" validate:"min=0"`
	// RequestorSettings: optional
	RequestorSettings *RequestorSettings `hcl:"requestor_settings,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadAccessPackageAssignmentPolicyAttributes struct {
	ref terra.Reference
}

// AccessPackageId returns a reference to field access_package_id of azuread_access_package_assignment_policy.
func (aapap azureadAccessPackageAssignmentPolicyAttributes) AccessPackageId() terra.StringValue {
	return terra.ReferenceAsString(aapap.ref.Append("access_package_id"))
}

// Description returns a reference to field description of azuread_access_package_assignment_policy.
func (aapap azureadAccessPackageAssignmentPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aapap.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azuread_access_package_assignment_policy.
func (aapap azureadAccessPackageAssignmentPolicyAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aapap.ref.Append("display_name"))
}

// DurationInDays returns a reference to field duration_in_days of azuread_access_package_assignment_policy.
func (aapap azureadAccessPackageAssignmentPolicyAttributes) DurationInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(aapap.ref.Append("duration_in_days"))
}

// ExpirationDate returns a reference to field expiration_date of azuread_access_package_assignment_policy.
func (aapap azureadAccessPackageAssignmentPolicyAttributes) ExpirationDate() terra.StringValue {
	return terra.ReferenceAsString(aapap.ref.Append("expiration_date"))
}

// ExtensionEnabled returns a reference to field extension_enabled of azuread_access_package_assignment_policy.
func (aapap azureadAccessPackageAssignmentPolicyAttributes) ExtensionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aapap.ref.Append("extension_enabled"))
}

// Id returns a reference to field id of azuread_access_package_assignment_policy.
func (aapap azureadAccessPackageAssignmentPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aapap.ref.Append("id"))
}

func (aapap azureadAccessPackageAssignmentPolicyAttributes) ApprovalSettings() terra.ListValue[ApprovalSettingsAttributes] {
	return terra.ReferenceAsList[ApprovalSettingsAttributes](aapap.ref.Append("approval_settings"))
}

func (aapap azureadAccessPackageAssignmentPolicyAttributes) AssignmentReviewSettings() terra.ListValue[AssignmentReviewSettingsAttributes] {
	return terra.ReferenceAsList[AssignmentReviewSettingsAttributes](aapap.ref.Append("assignment_review_settings"))
}

func (aapap azureadAccessPackageAssignmentPolicyAttributes) Question() terra.ListValue[QuestionAttributes] {
	return terra.ReferenceAsList[QuestionAttributes](aapap.ref.Append("question"))
}

func (aapap azureadAccessPackageAssignmentPolicyAttributes) RequestorSettings() terra.ListValue[RequestorSettingsAttributes] {
	return terra.ReferenceAsList[RequestorSettingsAttributes](aapap.ref.Append("requestor_settings"))
}

func (aapap azureadAccessPackageAssignmentPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aapap.ref.Append("timeouts"))
}

type azureadAccessPackageAssignmentPolicyState struct {
	AccessPackageId          string                          `json:"access_package_id"`
	Description              string                          `json:"description"`
	DisplayName              string                          `json:"display_name"`
	DurationInDays           float64                         `json:"duration_in_days"`
	ExpirationDate           string                          `json:"expiration_date"`
	ExtensionEnabled         bool                            `json:"extension_enabled"`
	Id                       string                          `json:"id"`
	ApprovalSettings         []ApprovalSettingsState         `json:"approval_settings"`
	AssignmentReviewSettings []AssignmentReviewSettingsState `json:"assignment_review_settings"`
	Question                 []QuestionState                 `json:"question"`
	RequestorSettings        []RequestorSettingsState        `json:"requestor_settings"`
	Timeouts                 *TimeoutsState                  `json:"timeouts"`
}
