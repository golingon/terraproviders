// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_access_package_assignment_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ApprovalSettings struct {
	// ApprovalRequired: bool, optional
	ApprovalRequired terra.BoolValue `hcl:"approval_required,attr"`
	// ApprovalRequiredForExtension: bool, optional
	ApprovalRequiredForExtension terra.BoolValue `hcl:"approval_required_for_extension,attr"`
	// RequestorJustificationRequired: bool, optional
	RequestorJustificationRequired terra.BoolValue `hcl:"requestor_justification_required,attr"`
	// ApprovalSettingsApprovalStage: min=0
	ApprovalStage []ApprovalSettingsApprovalStage `hcl:"approval_stage,block" validate:"min=0"`
}

type ApprovalSettingsApprovalStage struct {
	// AlternativeApprovalEnabled: bool, optional
	AlternativeApprovalEnabled terra.BoolValue `hcl:"alternative_approval_enabled,attr"`
	// ApprovalTimeoutInDays: number, required
	ApprovalTimeoutInDays terra.NumberValue `hcl:"approval_timeout_in_days,attr" validate:"required"`
	// ApproverJustificationRequired: bool, optional
	ApproverJustificationRequired terra.BoolValue `hcl:"approver_justification_required,attr"`
	// EnableAlternativeApprovalInDays: number, optional
	EnableAlternativeApprovalInDays terra.NumberValue `hcl:"enable_alternative_approval_in_days,attr"`
	// ApprovalSettingsApprovalStageAlternativeApprover: min=0
	AlternativeApprover []ApprovalSettingsApprovalStageAlternativeApprover `hcl:"alternative_approver,block" validate:"min=0"`
	// ApprovalSettingsApprovalStagePrimaryApprover: min=0
	PrimaryApprover []ApprovalSettingsApprovalStagePrimaryApprover `hcl:"primary_approver,block" validate:"min=0"`
}

type ApprovalSettingsApprovalStageAlternativeApprover struct {
	// Backup: bool, optional
	Backup terra.BoolValue `hcl:"backup,attr"`
	// ObjectId: string, optional
	ObjectId terra.StringValue `hcl:"object_id,attr"`
	// SubjectType: string, required
	SubjectType terra.StringValue `hcl:"subject_type,attr" validate:"required"`
}

type ApprovalSettingsApprovalStagePrimaryApprover struct {
	// Backup: bool, optional
	Backup terra.BoolValue `hcl:"backup,attr"`
	// ObjectId: string, optional
	ObjectId terra.StringValue `hcl:"object_id,attr"`
	// SubjectType: string, required
	SubjectType terra.StringValue `hcl:"subject_type,attr" validate:"required"`
}

type AssignmentReviewSettings struct {
	// AccessRecommendationEnabled: bool, optional
	AccessRecommendationEnabled terra.BoolValue `hcl:"access_recommendation_enabled,attr"`
	// AccessReviewTimeoutBehavior: string, optional
	AccessReviewTimeoutBehavior terra.StringValue `hcl:"access_review_timeout_behavior,attr"`
	// ApproverJustificationRequired: bool, optional
	ApproverJustificationRequired terra.BoolValue `hcl:"approver_justification_required,attr"`
	// DurationInDays: number, optional
	DurationInDays terra.NumberValue `hcl:"duration_in_days,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// ReviewFrequency: string, optional
	ReviewFrequency terra.StringValue `hcl:"review_frequency,attr"`
	// ReviewType: string, optional
	ReviewType terra.StringValue `hcl:"review_type,attr"`
	// StartingOn: string, optional
	StartingOn terra.StringValue `hcl:"starting_on,attr"`
	// AssignmentReviewSettingsReviewer: min=0
	Reviewer []AssignmentReviewSettingsReviewer `hcl:"reviewer,block" validate:"min=0"`
}

type AssignmentReviewSettingsReviewer struct {
	// Backup: bool, optional
	Backup terra.BoolValue `hcl:"backup,attr"`
	// ObjectId: string, optional
	ObjectId terra.StringValue `hcl:"object_id,attr"`
	// SubjectType: string, required
	SubjectType terra.StringValue `hcl:"subject_type,attr" validate:"required"`
}

type Question struct {
	// Required: bool, optional
	Required terra.BoolValue `hcl:"required,attr"`
	// Sequence: number, optional
	Sequence terra.NumberValue `hcl:"sequence,attr"`
	// QuestionChoice: min=0
	Choice []QuestionChoice `hcl:"choice,block" validate:"min=0"`
	// QuestionText: required
	Text *QuestionText `hcl:"text,block" validate:"required"`
}

type QuestionChoice struct {
	// ActualValue: string, required
	ActualValue terra.StringValue `hcl:"actual_value,attr" validate:"required"`
	// QuestionChoiceDisplayValue: required
	DisplayValue *QuestionChoiceDisplayValue `hcl:"display_value,block" validate:"required"`
}

type QuestionChoiceDisplayValue struct {
	// DefaultText: string, required
	DefaultText terra.StringValue `hcl:"default_text,attr" validate:"required"`
	// QuestionChoiceDisplayValueLocalizedText: min=0
	LocalizedText []QuestionChoiceDisplayValueLocalizedText `hcl:"localized_text,block" validate:"min=0"`
}

type QuestionChoiceDisplayValueLocalizedText struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// LanguageCode: string, required
	LanguageCode terra.StringValue `hcl:"language_code,attr" validate:"required"`
}

type QuestionText struct {
	// DefaultText: string, required
	DefaultText terra.StringValue `hcl:"default_text,attr" validate:"required"`
	// QuestionTextLocalizedText: min=0
	LocalizedText []QuestionTextLocalizedText `hcl:"localized_text,block" validate:"min=0"`
}

type QuestionTextLocalizedText struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// LanguageCode: string, required
	LanguageCode terra.StringValue `hcl:"language_code,attr" validate:"required"`
}

type RequestorSettings struct {
	// RequestsAccepted: bool, optional
	RequestsAccepted terra.BoolValue `hcl:"requests_accepted,attr"`
	// ScopeType: string, optional
	ScopeType terra.StringValue `hcl:"scope_type,attr"`
	// RequestorSettingsRequestor: min=0
	Requestor []RequestorSettingsRequestor `hcl:"requestor,block" validate:"min=0"`
}

type RequestorSettingsRequestor struct {
	// Backup: bool, optional
	Backup terra.BoolValue `hcl:"backup,attr"`
	// ObjectId: string, optional
	ObjectId terra.StringValue `hcl:"object_id,attr"`
	// SubjectType: string, required
	SubjectType terra.StringValue `hcl:"subject_type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ApprovalSettingsAttributes struct {
	ref terra.Reference
}

func (as ApprovalSettingsAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as ApprovalSettingsAttributes) InternalWithRef(ref terra.Reference) ApprovalSettingsAttributes {
	return ApprovalSettingsAttributes{ref: ref}
}

func (as ApprovalSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as ApprovalSettingsAttributes) ApprovalRequired() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("approval_required"))
}

func (as ApprovalSettingsAttributes) ApprovalRequiredForExtension() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("approval_required_for_extension"))
}

func (as ApprovalSettingsAttributes) RequestorJustificationRequired() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("requestor_justification_required"))
}

func (as ApprovalSettingsAttributes) ApprovalStage() terra.ListValue[ApprovalSettingsApprovalStageAttributes] {
	return terra.ReferenceAsList[ApprovalSettingsApprovalStageAttributes](as.ref.Append("approval_stage"))
}

type ApprovalSettingsApprovalStageAttributes struct {
	ref terra.Reference
}

func (as ApprovalSettingsApprovalStageAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as ApprovalSettingsApprovalStageAttributes) InternalWithRef(ref terra.Reference) ApprovalSettingsApprovalStageAttributes {
	return ApprovalSettingsApprovalStageAttributes{ref: ref}
}

func (as ApprovalSettingsApprovalStageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as ApprovalSettingsApprovalStageAttributes) AlternativeApprovalEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("alternative_approval_enabled"))
}

func (as ApprovalSettingsApprovalStageAttributes) ApprovalTimeoutInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("approval_timeout_in_days"))
}

func (as ApprovalSettingsApprovalStageAttributes) ApproverJustificationRequired() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("approver_justification_required"))
}

func (as ApprovalSettingsApprovalStageAttributes) EnableAlternativeApprovalInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("enable_alternative_approval_in_days"))
}

func (as ApprovalSettingsApprovalStageAttributes) AlternativeApprover() terra.ListValue[ApprovalSettingsApprovalStageAlternativeApproverAttributes] {
	return terra.ReferenceAsList[ApprovalSettingsApprovalStageAlternativeApproverAttributes](as.ref.Append("alternative_approver"))
}

func (as ApprovalSettingsApprovalStageAttributes) PrimaryApprover() terra.ListValue[ApprovalSettingsApprovalStagePrimaryApproverAttributes] {
	return terra.ReferenceAsList[ApprovalSettingsApprovalStagePrimaryApproverAttributes](as.ref.Append("primary_approver"))
}

type ApprovalSettingsApprovalStageAlternativeApproverAttributes struct {
	ref terra.Reference
}

func (aa ApprovalSettingsApprovalStageAlternativeApproverAttributes) InternalRef() (terra.Reference, error) {
	return aa.ref, nil
}

func (aa ApprovalSettingsApprovalStageAlternativeApproverAttributes) InternalWithRef(ref terra.Reference) ApprovalSettingsApprovalStageAlternativeApproverAttributes {
	return ApprovalSettingsApprovalStageAlternativeApproverAttributes{ref: ref}
}

func (aa ApprovalSettingsApprovalStageAlternativeApproverAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aa.ref.InternalTokens()
}

func (aa ApprovalSettingsApprovalStageAlternativeApproverAttributes) Backup() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("backup"))
}

func (aa ApprovalSettingsApprovalStageAlternativeApproverAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("object_id"))
}

func (aa ApprovalSettingsApprovalStageAlternativeApproverAttributes) SubjectType() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("subject_type"))
}

type ApprovalSettingsApprovalStagePrimaryApproverAttributes struct {
	ref terra.Reference
}

func (pa ApprovalSettingsApprovalStagePrimaryApproverAttributes) InternalRef() (terra.Reference, error) {
	return pa.ref, nil
}

func (pa ApprovalSettingsApprovalStagePrimaryApproverAttributes) InternalWithRef(ref terra.Reference) ApprovalSettingsApprovalStagePrimaryApproverAttributes {
	return ApprovalSettingsApprovalStagePrimaryApproverAttributes{ref: ref}
}

func (pa ApprovalSettingsApprovalStagePrimaryApproverAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pa.ref.InternalTokens()
}

func (pa ApprovalSettingsApprovalStagePrimaryApproverAttributes) Backup() terra.BoolValue {
	return terra.ReferenceAsBool(pa.ref.Append("backup"))
}

func (pa ApprovalSettingsApprovalStagePrimaryApproverAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("object_id"))
}

func (pa ApprovalSettingsApprovalStagePrimaryApproverAttributes) SubjectType() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("subject_type"))
}

type AssignmentReviewSettingsAttributes struct {
	ref terra.Reference
}

func (ars AssignmentReviewSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ars.ref, nil
}

func (ars AssignmentReviewSettingsAttributes) InternalWithRef(ref terra.Reference) AssignmentReviewSettingsAttributes {
	return AssignmentReviewSettingsAttributes{ref: ref}
}

func (ars AssignmentReviewSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ars.ref.InternalTokens()
}

func (ars AssignmentReviewSettingsAttributes) AccessRecommendationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ars.ref.Append("access_recommendation_enabled"))
}

func (ars AssignmentReviewSettingsAttributes) AccessReviewTimeoutBehavior() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("access_review_timeout_behavior"))
}

func (ars AssignmentReviewSettingsAttributes) ApproverJustificationRequired() terra.BoolValue {
	return terra.ReferenceAsBool(ars.ref.Append("approver_justification_required"))
}

func (ars AssignmentReviewSettingsAttributes) DurationInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(ars.ref.Append("duration_in_days"))
}

func (ars AssignmentReviewSettingsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ars.ref.Append("enabled"))
}

func (ars AssignmentReviewSettingsAttributes) ReviewFrequency() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("review_frequency"))
}

func (ars AssignmentReviewSettingsAttributes) ReviewType() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("review_type"))
}

func (ars AssignmentReviewSettingsAttributes) StartingOn() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("starting_on"))
}

func (ars AssignmentReviewSettingsAttributes) Reviewer() terra.ListValue[AssignmentReviewSettingsReviewerAttributes] {
	return terra.ReferenceAsList[AssignmentReviewSettingsReviewerAttributes](ars.ref.Append("reviewer"))
}

type AssignmentReviewSettingsReviewerAttributes struct {
	ref terra.Reference
}

func (r AssignmentReviewSettingsReviewerAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r AssignmentReviewSettingsReviewerAttributes) InternalWithRef(ref terra.Reference) AssignmentReviewSettingsReviewerAttributes {
	return AssignmentReviewSettingsReviewerAttributes{ref: ref}
}

func (r AssignmentReviewSettingsReviewerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r AssignmentReviewSettingsReviewerAttributes) Backup() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("backup"))
}

func (r AssignmentReviewSettingsReviewerAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("object_id"))
}

func (r AssignmentReviewSettingsReviewerAttributes) SubjectType() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("subject_type"))
}

type QuestionAttributes struct {
	ref terra.Reference
}

func (q QuestionAttributes) InternalRef() (terra.Reference, error) {
	return q.ref, nil
}

func (q QuestionAttributes) InternalWithRef(ref terra.Reference) QuestionAttributes {
	return QuestionAttributes{ref: ref}
}

func (q QuestionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return q.ref.InternalTokens()
}

func (q QuestionAttributes) Required() terra.BoolValue {
	return terra.ReferenceAsBool(q.ref.Append("required"))
}

func (q QuestionAttributes) Sequence() terra.NumberValue {
	return terra.ReferenceAsNumber(q.ref.Append("sequence"))
}

func (q QuestionAttributes) Choice() terra.ListValue[QuestionChoiceAttributes] {
	return terra.ReferenceAsList[QuestionChoiceAttributes](q.ref.Append("choice"))
}

func (q QuestionAttributes) Text() terra.ListValue[QuestionTextAttributes] {
	return terra.ReferenceAsList[QuestionTextAttributes](q.ref.Append("text"))
}

type QuestionChoiceAttributes struct {
	ref terra.Reference
}

func (c QuestionChoiceAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c QuestionChoiceAttributes) InternalWithRef(ref terra.Reference) QuestionChoiceAttributes {
	return QuestionChoiceAttributes{ref: ref}
}

func (c QuestionChoiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c QuestionChoiceAttributes) ActualValue() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("actual_value"))
}

func (c QuestionChoiceAttributes) DisplayValue() terra.ListValue[QuestionChoiceDisplayValueAttributes] {
	return terra.ReferenceAsList[QuestionChoiceDisplayValueAttributes](c.ref.Append("display_value"))
}

type QuestionChoiceDisplayValueAttributes struct {
	ref terra.Reference
}

func (dv QuestionChoiceDisplayValueAttributes) InternalRef() (terra.Reference, error) {
	return dv.ref, nil
}

func (dv QuestionChoiceDisplayValueAttributes) InternalWithRef(ref terra.Reference) QuestionChoiceDisplayValueAttributes {
	return QuestionChoiceDisplayValueAttributes{ref: ref}
}

func (dv QuestionChoiceDisplayValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dv.ref.InternalTokens()
}

func (dv QuestionChoiceDisplayValueAttributes) DefaultText() terra.StringValue {
	return terra.ReferenceAsString(dv.ref.Append("default_text"))
}

func (dv QuestionChoiceDisplayValueAttributes) LocalizedText() terra.ListValue[QuestionChoiceDisplayValueLocalizedTextAttributes] {
	return terra.ReferenceAsList[QuestionChoiceDisplayValueLocalizedTextAttributes](dv.ref.Append("localized_text"))
}

type QuestionChoiceDisplayValueLocalizedTextAttributes struct {
	ref terra.Reference
}

func (lt QuestionChoiceDisplayValueLocalizedTextAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt QuestionChoiceDisplayValueLocalizedTextAttributes) InternalWithRef(ref terra.Reference) QuestionChoiceDisplayValueLocalizedTextAttributes {
	return QuestionChoiceDisplayValueLocalizedTextAttributes{ref: ref}
}

func (lt QuestionChoiceDisplayValueLocalizedTextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt QuestionChoiceDisplayValueLocalizedTextAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("content"))
}

func (lt QuestionChoiceDisplayValueLocalizedTextAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("language_code"))
}

type QuestionTextAttributes struct {
	ref terra.Reference
}

func (t QuestionTextAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t QuestionTextAttributes) InternalWithRef(ref terra.Reference) QuestionTextAttributes {
	return QuestionTextAttributes{ref: ref}
}

func (t QuestionTextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t QuestionTextAttributes) DefaultText() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("default_text"))
}

func (t QuestionTextAttributes) LocalizedText() terra.ListValue[QuestionTextLocalizedTextAttributes] {
	return terra.ReferenceAsList[QuestionTextLocalizedTextAttributes](t.ref.Append("localized_text"))
}

type QuestionTextLocalizedTextAttributes struct {
	ref terra.Reference
}

func (lt QuestionTextLocalizedTextAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt QuestionTextLocalizedTextAttributes) InternalWithRef(ref terra.Reference) QuestionTextLocalizedTextAttributes {
	return QuestionTextLocalizedTextAttributes{ref: ref}
}

func (lt QuestionTextLocalizedTextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt QuestionTextLocalizedTextAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("content"))
}

func (lt QuestionTextLocalizedTextAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("language_code"))
}

type RequestorSettingsAttributes struct {
	ref terra.Reference
}

func (rs RequestorSettingsAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RequestorSettingsAttributes) InternalWithRef(ref terra.Reference) RequestorSettingsAttributes {
	return RequestorSettingsAttributes{ref: ref}
}

func (rs RequestorSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RequestorSettingsAttributes) RequestsAccepted() terra.BoolValue {
	return terra.ReferenceAsBool(rs.ref.Append("requests_accepted"))
}

func (rs RequestorSettingsAttributes) ScopeType() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("scope_type"))
}

func (rs RequestorSettingsAttributes) Requestor() terra.ListValue[RequestorSettingsRequestorAttributes] {
	return terra.ReferenceAsList[RequestorSettingsRequestorAttributes](rs.ref.Append("requestor"))
}

type RequestorSettingsRequestorAttributes struct {
	ref terra.Reference
}

func (r RequestorSettingsRequestorAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RequestorSettingsRequestorAttributes) InternalWithRef(ref terra.Reference) RequestorSettingsRequestorAttributes {
	return RequestorSettingsRequestorAttributes{ref: ref}
}

func (r RequestorSettingsRequestorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RequestorSettingsRequestorAttributes) Backup() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("backup"))
}

func (r RequestorSettingsRequestorAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("object_id"))
}

func (r RequestorSettingsRequestorAttributes) SubjectType() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("subject_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ApprovalSettingsState struct {
	ApprovalRequired               bool                                 `json:"approval_required"`
	ApprovalRequiredForExtension   bool                                 `json:"approval_required_for_extension"`
	RequestorJustificationRequired bool                                 `json:"requestor_justification_required"`
	ApprovalStage                  []ApprovalSettingsApprovalStageState `json:"approval_stage"`
}

type ApprovalSettingsApprovalStageState struct {
	AlternativeApprovalEnabled      bool                                                    `json:"alternative_approval_enabled"`
	ApprovalTimeoutInDays           float64                                                 `json:"approval_timeout_in_days"`
	ApproverJustificationRequired   bool                                                    `json:"approver_justification_required"`
	EnableAlternativeApprovalInDays float64                                                 `json:"enable_alternative_approval_in_days"`
	AlternativeApprover             []ApprovalSettingsApprovalStageAlternativeApproverState `json:"alternative_approver"`
	PrimaryApprover                 []ApprovalSettingsApprovalStagePrimaryApproverState     `json:"primary_approver"`
}

type ApprovalSettingsApprovalStageAlternativeApproverState struct {
	Backup      bool   `json:"backup"`
	ObjectId    string `json:"object_id"`
	SubjectType string `json:"subject_type"`
}

type ApprovalSettingsApprovalStagePrimaryApproverState struct {
	Backup      bool   `json:"backup"`
	ObjectId    string `json:"object_id"`
	SubjectType string `json:"subject_type"`
}

type AssignmentReviewSettingsState struct {
	AccessRecommendationEnabled   bool                                    `json:"access_recommendation_enabled"`
	AccessReviewTimeoutBehavior   string                                  `json:"access_review_timeout_behavior"`
	ApproverJustificationRequired bool                                    `json:"approver_justification_required"`
	DurationInDays                float64                                 `json:"duration_in_days"`
	Enabled                       bool                                    `json:"enabled"`
	ReviewFrequency               string                                  `json:"review_frequency"`
	ReviewType                    string                                  `json:"review_type"`
	StartingOn                    string                                  `json:"starting_on"`
	Reviewer                      []AssignmentReviewSettingsReviewerState `json:"reviewer"`
}

type AssignmentReviewSettingsReviewerState struct {
	Backup      bool   `json:"backup"`
	ObjectId    string `json:"object_id"`
	SubjectType string `json:"subject_type"`
}

type QuestionState struct {
	Required bool                  `json:"required"`
	Sequence float64               `json:"sequence"`
	Choice   []QuestionChoiceState `json:"choice"`
	Text     []QuestionTextState   `json:"text"`
}

type QuestionChoiceState struct {
	ActualValue  string                            `json:"actual_value"`
	DisplayValue []QuestionChoiceDisplayValueState `json:"display_value"`
}

type QuestionChoiceDisplayValueState struct {
	DefaultText   string                                         `json:"default_text"`
	LocalizedText []QuestionChoiceDisplayValueLocalizedTextState `json:"localized_text"`
}

type QuestionChoiceDisplayValueLocalizedTextState struct {
	Content      string `json:"content"`
	LanguageCode string `json:"language_code"`
}

type QuestionTextState struct {
	DefaultText   string                           `json:"default_text"`
	LocalizedText []QuestionTextLocalizedTextState `json:"localized_text"`
}

type QuestionTextLocalizedTextState struct {
	Content      string `json:"content"`
	LanguageCode string `json:"language_code"`
}

type RequestorSettingsState struct {
	RequestsAccepted bool                              `json:"requests_accepted"`
	ScopeType        string                            `json:"scope_type"`
	Requestor        []RequestorSettingsRequestorState `json:"requestor"`
}

type RequestorSettingsRequestorState struct {
	Backup      bool   `json:"backup"`
	ObjectId    string `json:"object_id"`
	SubjectType string `json:"subject_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
