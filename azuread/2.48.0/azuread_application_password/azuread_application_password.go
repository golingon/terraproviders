// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_application_password

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_application_password.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadApplicationPasswordState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aap *Resource) Type() string {
	return "azuread_application_password"
}

// LocalName returns the local name for [Resource].
func (aap *Resource) LocalName() string {
	return aap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aap *Resource) Configuration() interface{} {
	return aap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aap *Resource) Dependencies() terra.Dependencies {
	return aap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aap *Resource) LifecycleManagement() *terra.Lifecycle {
	return aap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aap *Resource) Attributes() azureadApplicationPasswordAttributes {
	return azureadApplicationPasswordAttributes{ref: terra.ReferenceResource(aap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aap *Resource) ImportState(state io.Reader) error {
	aap.state = &azureadApplicationPasswordState{}
	if err := json.NewDecoder(state).Decode(aap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aap.Type(), aap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aap *Resource) State() (*azureadApplicationPasswordState, bool) {
	return aap.state, aap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aap *Resource) StateMust() *azureadApplicationPasswordState {
	if aap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aap.Type(), aap.LocalName()))
	}
	return aap.state
}

// Args contains the configurations for azuread_application_password.
type Args struct {
	// ApplicationId: string, optional
	ApplicationId terra.StringValue `hcl:"application_id,attr"`
	// ApplicationObjectId: string, optional
	ApplicationObjectId terra.StringValue `hcl:"application_object_id,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// EndDate: string, optional
	EndDate terra.StringValue `hcl:"end_date,attr"`
	// EndDateRelative: string, optional
	EndDateRelative terra.StringValue `hcl:"end_date_relative,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RotateWhenChanged: map of string, optional
	RotateWhenChanged terra.MapValue[terra.StringValue] `hcl:"rotate_when_changed,attr"`
	// StartDate: string, optional
	StartDate terra.StringValue `hcl:"start_date,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadApplicationPasswordAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of azuread_application_password.
func (aap azureadApplicationPasswordAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("application_id"))
}

// ApplicationObjectId returns a reference to field application_object_id of azuread_application_password.
func (aap azureadApplicationPasswordAttributes) ApplicationObjectId() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("application_object_id"))
}

// DisplayName returns a reference to field display_name of azuread_application_password.
func (aap azureadApplicationPasswordAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("display_name"))
}

// EndDate returns a reference to field end_date of azuread_application_password.
func (aap azureadApplicationPasswordAttributes) EndDate() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("end_date"))
}

// EndDateRelative returns a reference to field end_date_relative of azuread_application_password.
func (aap azureadApplicationPasswordAttributes) EndDateRelative() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("end_date_relative"))
}

// Id returns a reference to field id of azuread_application_password.
func (aap azureadApplicationPasswordAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("id"))
}

// KeyId returns a reference to field key_id of azuread_application_password.
func (aap azureadApplicationPasswordAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("key_id"))
}

// RotateWhenChanged returns a reference to field rotate_when_changed of azuread_application_password.
func (aap azureadApplicationPasswordAttributes) RotateWhenChanged() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aap.ref.Append("rotate_when_changed"))
}

// StartDate returns a reference to field start_date of azuread_application_password.
func (aap azureadApplicationPasswordAttributes) StartDate() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("start_date"))
}

// Value returns a reference to field value of azuread_application_password.
func (aap azureadApplicationPasswordAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("value"))
}

func (aap azureadApplicationPasswordAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aap.ref.Append("timeouts"))
}

type azureadApplicationPasswordState struct {
	ApplicationId       string            `json:"application_id"`
	ApplicationObjectId string            `json:"application_object_id"`
	DisplayName         string            `json:"display_name"`
	EndDate             string            `json:"end_date"`
	EndDateRelative     string            `json:"end_date_relative"`
	Id                  string            `json:"id"`
	KeyId               string            `json:"key_id"`
	RotateWhenChanged   map[string]string `json:"rotate_when_changed"`
	StartDate           string            `json:"start_date"`
	Value               string            `json:"value"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
