// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_directory_role_assignment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_directory_role_assignment.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadDirectoryRoleAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adra *Resource) Type() string {
	return "azuread_directory_role_assignment"
}

// LocalName returns the local name for [Resource].
func (adra *Resource) LocalName() string {
	return adra.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adra *Resource) Configuration() interface{} {
	return adra.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adra *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adra)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adra *Resource) Dependencies() terra.Dependencies {
	return adra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adra *Resource) LifecycleManagement() *terra.Lifecycle {
	return adra.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adra *Resource) Attributes() azureadDirectoryRoleAssignmentAttributes {
	return azureadDirectoryRoleAssignmentAttributes{ref: terra.ReferenceResource(adra)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adra *Resource) ImportState(state io.Reader) error {
	adra.state = &azureadDirectoryRoleAssignmentState{}
	if err := json.NewDecoder(state).Decode(adra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adra.Type(), adra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adra *Resource) State() (*azureadDirectoryRoleAssignmentState, bool) {
	return adra.state, adra.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adra *Resource) StateMust() *azureadDirectoryRoleAssignmentState {
	if adra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adra.Type(), adra.LocalName()))
	}
	return adra.state
}

// Args contains the configurations for azuread_directory_role_assignment.
type Args struct {
	// AppScopeId: string, optional
	AppScopeId terra.StringValue `hcl:"app_scope_id,attr"`
	// AppScopeObjectId: string, optional
	AppScopeObjectId terra.StringValue `hcl:"app_scope_object_id,attr"`
	// DirectoryScopeId: string, optional
	DirectoryScopeId terra.StringValue `hcl:"directory_scope_id,attr"`
	// DirectoryScopeObjectId: string, optional
	DirectoryScopeObjectId terra.StringValue `hcl:"directory_scope_object_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PrincipalObjectId: string, required
	PrincipalObjectId terra.StringValue `hcl:"principal_object_id,attr" validate:"required"`
	// RoleId: string, required
	RoleId terra.StringValue `hcl:"role_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadDirectoryRoleAssignmentAttributes struct {
	ref terra.Reference
}

// AppScopeId returns a reference to field app_scope_id of azuread_directory_role_assignment.
func (adra azureadDirectoryRoleAssignmentAttributes) AppScopeId() terra.StringValue {
	return terra.ReferenceAsString(adra.ref.Append("app_scope_id"))
}

// AppScopeObjectId returns a reference to field app_scope_object_id of azuread_directory_role_assignment.
func (adra azureadDirectoryRoleAssignmentAttributes) AppScopeObjectId() terra.StringValue {
	return terra.ReferenceAsString(adra.ref.Append("app_scope_object_id"))
}

// DirectoryScopeId returns a reference to field directory_scope_id of azuread_directory_role_assignment.
func (adra azureadDirectoryRoleAssignmentAttributes) DirectoryScopeId() terra.StringValue {
	return terra.ReferenceAsString(adra.ref.Append("directory_scope_id"))
}

// DirectoryScopeObjectId returns a reference to field directory_scope_object_id of azuread_directory_role_assignment.
func (adra azureadDirectoryRoleAssignmentAttributes) DirectoryScopeObjectId() terra.StringValue {
	return terra.ReferenceAsString(adra.ref.Append("directory_scope_object_id"))
}

// Id returns a reference to field id of azuread_directory_role_assignment.
func (adra azureadDirectoryRoleAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adra.ref.Append("id"))
}

// PrincipalObjectId returns a reference to field principal_object_id of azuread_directory_role_assignment.
func (adra azureadDirectoryRoleAssignmentAttributes) PrincipalObjectId() terra.StringValue {
	return terra.ReferenceAsString(adra.ref.Append("principal_object_id"))
}

// RoleId returns a reference to field role_id of azuread_directory_role_assignment.
func (adra azureadDirectoryRoleAssignmentAttributes) RoleId() terra.StringValue {
	return terra.ReferenceAsString(adra.ref.Append("role_id"))
}

func (adra azureadDirectoryRoleAssignmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adra.ref.Append("timeouts"))
}

type azureadDirectoryRoleAssignmentState struct {
	AppScopeId             string         `json:"app_scope_id"`
	AppScopeObjectId       string         `json:"app_scope_object_id"`
	DirectoryScopeId       string         `json:"directory_scope_id"`
	DirectoryScopeObjectId string         `json:"directory_scope_object_id"`
	Id                     string         `json:"id"`
	PrincipalObjectId      string         `json:"principal_object_id"`
	RoleId                 string         `json:"role_id"`
	Timeouts               *TimeoutsState `json:"timeouts"`
}
