// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_synchronization_job

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_synchronization_job.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadSynchronizationJobState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asj *Resource) Type() string {
	return "azuread_synchronization_job"
}

// LocalName returns the local name for [Resource].
func (asj *Resource) LocalName() string {
	return asj.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asj *Resource) Configuration() interface{} {
	return asj.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asj *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asj)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asj *Resource) Dependencies() terra.Dependencies {
	return asj.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asj *Resource) LifecycleManagement() *terra.Lifecycle {
	return asj.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asj *Resource) Attributes() azureadSynchronizationJobAttributes {
	return azureadSynchronizationJobAttributes{ref: terra.ReferenceResource(asj)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asj *Resource) ImportState(state io.Reader) error {
	asj.state = &azureadSynchronizationJobState{}
	if err := json.NewDecoder(state).Decode(asj.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asj.Type(), asj.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asj *Resource) State() (*azureadSynchronizationJobState, bool) {
	return asj.state, asj.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asj *Resource) StateMust() *azureadSynchronizationJobState {
	if asj.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asj.Type(), asj.LocalName()))
	}
	return asj.state
}

// Args contains the configurations for azuread_synchronization_job.
type Args struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServicePrincipalId: string, required
	ServicePrincipalId terra.StringValue `hcl:"service_principal_id,attr" validate:"required"`
	// TemplateId: string, required
	TemplateId terra.StringValue `hcl:"template_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadSynchronizationJobAttributes struct {
	ref terra.Reference
}

// Enabled returns a reference to field enabled of azuread_synchronization_job.
func (asj azureadSynchronizationJobAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(asj.ref.Append("enabled"))
}

// Id returns a reference to field id of azuread_synchronization_job.
func (asj azureadSynchronizationJobAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asj.ref.Append("id"))
}

// ServicePrincipalId returns a reference to field service_principal_id of azuread_synchronization_job.
func (asj azureadSynchronizationJobAttributes) ServicePrincipalId() terra.StringValue {
	return terra.ReferenceAsString(asj.ref.Append("service_principal_id"))
}

// TemplateId returns a reference to field template_id of azuread_synchronization_job.
func (asj azureadSynchronizationJobAttributes) TemplateId() terra.StringValue {
	return terra.ReferenceAsString(asj.ref.Append("template_id"))
}

func (asj azureadSynchronizationJobAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](asj.ref.Append("schedule"))
}

func (asj azureadSynchronizationJobAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asj.ref.Append("timeouts"))
}

type azureadSynchronizationJobState struct {
	Enabled            bool            `json:"enabled"`
	Id                 string          `json:"id"`
	ServicePrincipalId string          `json:"service_principal_id"`
	TemplateId         string          `json:"template_id"`
	Schedule           []ScheduleState `json:"schedule"`
	Timeouts           *TimeoutsState  `json:"timeouts"`
}
