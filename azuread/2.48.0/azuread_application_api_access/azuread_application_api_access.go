// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_application_api_access

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_application_api_access.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadApplicationApiAccessState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaaa *Resource) Type() string {
	return "azuread_application_api_access"
}

// LocalName returns the local name for [Resource].
func (aaaa *Resource) LocalName() string {
	return aaaa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaaa *Resource) Configuration() interface{} {
	return aaaa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaaa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaaa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaaa *Resource) Dependencies() terra.Dependencies {
	return aaaa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaaa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaaa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaaa *Resource) Attributes() azureadApplicationApiAccessAttributes {
	return azureadApplicationApiAccessAttributes{ref: terra.ReferenceResource(aaaa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaaa *Resource) ImportState(state io.Reader) error {
	aaaa.state = &azureadApplicationApiAccessState{}
	if err := json.NewDecoder(state).Decode(aaaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaaa.Type(), aaaa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaaa *Resource) State() (*azureadApplicationApiAccessState, bool) {
	return aaaa.state, aaaa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaaa *Resource) StateMust() *azureadApplicationApiAccessState {
	if aaaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaaa.Type(), aaaa.LocalName()))
	}
	return aaaa.state
}

// Args contains the configurations for azuread_application_api_access.
type Args struct {
	// ApiClientId: string, required
	ApiClientId terra.StringValue `hcl:"api_client_id,attr" validate:"required"`
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RoleIds: set of string, optional
	RoleIds terra.SetValue[terra.StringValue] `hcl:"role_ids,attr"`
	// ScopeIds: set of string, optional
	ScopeIds terra.SetValue[terra.StringValue] `hcl:"scope_ids,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadApplicationApiAccessAttributes struct {
	ref terra.Reference
}

// ApiClientId returns a reference to field api_client_id of azuread_application_api_access.
func (aaaa azureadApplicationApiAccessAttributes) ApiClientId() terra.StringValue {
	return terra.ReferenceAsString(aaaa.ref.Append("api_client_id"))
}

// ApplicationId returns a reference to field application_id of azuread_application_api_access.
func (aaaa azureadApplicationApiAccessAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aaaa.ref.Append("application_id"))
}

// Id returns a reference to field id of azuread_application_api_access.
func (aaaa azureadApplicationApiAccessAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaaa.ref.Append("id"))
}

// RoleIds returns a reference to field role_ids of azuread_application_api_access.
func (aaaa azureadApplicationApiAccessAttributes) RoleIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aaaa.ref.Append("role_ids"))
}

// ScopeIds returns a reference to field scope_ids of azuread_application_api_access.
func (aaaa azureadApplicationApiAccessAttributes) ScopeIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aaaa.ref.Append("scope_ids"))
}

func (aaaa azureadApplicationApiAccessAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aaaa.ref.Append("timeouts"))
}

type azureadApplicationApiAccessState struct {
	ApiClientId   string         `json:"api_client_id"`
	ApplicationId string         `json:"application_id"`
	Id            string         `json:"id"`
	RoleIds       []string       `json:"role_ids"`
	ScopeIds      []string       `json:"scope_ids"`
	Timeouts      *TimeoutsState `json:"timeouts"`
}
