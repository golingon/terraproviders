// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_named_location

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_named_location.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadNamedLocationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anl *Resource) Type() string {
	return "azuread_named_location"
}

// LocalName returns the local name for [Resource].
func (anl *Resource) LocalName() string {
	return anl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anl *Resource) Configuration() interface{} {
	return anl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anl *Resource) Dependencies() terra.Dependencies {
	return anl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anl *Resource) LifecycleManagement() *terra.Lifecycle {
	return anl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anl *Resource) Attributes() azureadNamedLocationAttributes {
	return azureadNamedLocationAttributes{ref: terra.ReferenceResource(anl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anl *Resource) ImportState(state io.Reader) error {
	anl.state = &azureadNamedLocationState{}
	if err := json.NewDecoder(state).Decode(anl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anl.Type(), anl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anl *Resource) State() (*azureadNamedLocationState, bool) {
	return anl.state, anl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anl *Resource) StateMust() *azureadNamedLocationState {
	if anl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anl.Type(), anl.LocalName()))
	}
	return anl.state
}

// Args contains the configurations for azuread_named_location.
type Args struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Country: optional
	Country *Country `hcl:"country,block"`
	// Ip: optional
	Ip *Ip `hcl:"ip,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadNamedLocationAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of azuread_named_location.
func (anl azureadNamedLocationAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(anl.ref.Append("display_name"))
}

// Id returns a reference to field id of azuread_named_location.
func (anl azureadNamedLocationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anl.ref.Append("id"))
}

func (anl azureadNamedLocationAttributes) Country() terra.ListValue[CountryAttributes] {
	return terra.ReferenceAsList[CountryAttributes](anl.ref.Append("country"))
}

func (anl azureadNamedLocationAttributes) Ip() terra.ListValue[IpAttributes] {
	return terra.ReferenceAsList[IpAttributes](anl.ref.Append("ip"))
}

func (anl azureadNamedLocationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anl.ref.Append("timeouts"))
}

type azureadNamedLocationState struct {
	DisplayName string         `json:"display_name"`
	Id          string         `json:"id"`
	Country     []CountryState `json:"country"`
	Ip          []IpState      `json:"ip"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
