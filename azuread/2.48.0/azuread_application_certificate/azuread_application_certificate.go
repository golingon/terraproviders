// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_application_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_application_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadApplicationCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aac *Resource) Type() string {
	return "azuread_application_certificate"
}

// LocalName returns the local name for [Resource].
func (aac *Resource) LocalName() string {
	return aac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aac *Resource) Configuration() interface{} {
	return aac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aac *Resource) Dependencies() terra.Dependencies {
	return aac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aac *Resource) LifecycleManagement() *terra.Lifecycle {
	return aac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aac *Resource) Attributes() azureadApplicationCertificateAttributes {
	return azureadApplicationCertificateAttributes{ref: terra.ReferenceResource(aac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aac *Resource) ImportState(state io.Reader) error {
	aac.state = &azureadApplicationCertificateState{}
	if err := json.NewDecoder(state).Decode(aac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aac.Type(), aac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aac *Resource) State() (*azureadApplicationCertificateState, bool) {
	return aac.state, aac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aac *Resource) StateMust() *azureadApplicationCertificateState {
	if aac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aac.Type(), aac.LocalName()))
	}
	return aac.state
}

// Args contains the configurations for azuread_application_certificate.
type Args struct {
	// ApplicationId: string, optional
	ApplicationId terra.StringValue `hcl:"application_id,attr"`
	// ApplicationObjectId: string, optional
	ApplicationObjectId terra.StringValue `hcl:"application_object_id,attr"`
	// Encoding: string, optional
	Encoding terra.StringValue `hcl:"encoding,attr"`
	// EndDate: string, optional
	EndDate terra.StringValue `hcl:"end_date,attr"`
	// EndDateRelative: string, optional
	EndDateRelative terra.StringValue `hcl:"end_date_relative,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyId: string, optional
	KeyId terra.StringValue `hcl:"key_id,attr"`
	// StartDate: string, optional
	StartDate terra.StringValue `hcl:"start_date,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadApplicationCertificateAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of azuread_application_certificate.
func (aac azureadApplicationCertificateAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("application_id"))
}

// ApplicationObjectId returns a reference to field application_object_id of azuread_application_certificate.
func (aac azureadApplicationCertificateAttributes) ApplicationObjectId() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("application_object_id"))
}

// Encoding returns a reference to field encoding of azuread_application_certificate.
func (aac azureadApplicationCertificateAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("encoding"))
}

// EndDate returns a reference to field end_date of azuread_application_certificate.
func (aac azureadApplicationCertificateAttributes) EndDate() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("end_date"))
}

// EndDateRelative returns a reference to field end_date_relative of azuread_application_certificate.
func (aac azureadApplicationCertificateAttributes) EndDateRelative() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("end_date_relative"))
}

// Id returns a reference to field id of azuread_application_certificate.
func (aac azureadApplicationCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("id"))
}

// KeyId returns a reference to field key_id of azuread_application_certificate.
func (aac azureadApplicationCertificateAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("key_id"))
}

// StartDate returns a reference to field start_date of azuread_application_certificate.
func (aac azureadApplicationCertificateAttributes) StartDate() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("start_date"))
}

// Type returns a reference to field type of azuread_application_certificate.
func (aac azureadApplicationCertificateAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("type"))
}

// Value returns a reference to field value of azuread_application_certificate.
func (aac azureadApplicationCertificateAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("value"))
}

func (aac azureadApplicationCertificateAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aac.ref.Append("timeouts"))
}

type azureadApplicationCertificateState struct {
	ApplicationId       string         `json:"application_id"`
	ApplicationObjectId string         `json:"application_object_id"`
	Encoding            string         `json:"encoding"`
	EndDate             string         `json:"end_date"`
	EndDateRelative     string         `json:"end_date_relative"`
	Id                  string         `json:"id"`
	KeyId               string         `json:"key_id"`
	StartDate           string         `json:"start_date"`
	Type                string         `json:"type"`
	Value               string         `json:"value"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
