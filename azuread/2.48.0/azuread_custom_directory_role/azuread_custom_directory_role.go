// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_custom_directory_role

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_custom_directory_role.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadCustomDirectoryRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acdr *Resource) Type() string {
	return "azuread_custom_directory_role"
}

// LocalName returns the local name for [Resource].
func (acdr *Resource) LocalName() string {
	return acdr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acdr *Resource) Configuration() interface{} {
	return acdr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acdr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acdr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acdr *Resource) Dependencies() terra.Dependencies {
	return acdr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acdr *Resource) LifecycleManagement() *terra.Lifecycle {
	return acdr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acdr *Resource) Attributes() azureadCustomDirectoryRoleAttributes {
	return azureadCustomDirectoryRoleAttributes{ref: terra.ReferenceResource(acdr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acdr *Resource) ImportState(state io.Reader) error {
	acdr.state = &azureadCustomDirectoryRoleState{}
	if err := json.NewDecoder(state).Decode(acdr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acdr.Type(), acdr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acdr *Resource) State() (*azureadCustomDirectoryRoleState, bool) {
	return acdr.state, acdr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acdr *Resource) StateMust() *azureadCustomDirectoryRoleState {
	if acdr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acdr.Type(), acdr.LocalName()))
	}
	return acdr.state
}

// Args contains the configurations for azuread_custom_directory_role.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TemplateId: string, optional
	TemplateId terra.StringValue `hcl:"template_id,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// Permissions: min=1
	Permissions []Permissions `hcl:"permissions,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadCustomDirectoryRoleAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azuread_custom_directory_role.
func (acdr azureadCustomDirectoryRoleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acdr.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azuread_custom_directory_role.
func (acdr azureadCustomDirectoryRoleAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(acdr.ref.Append("display_name"))
}

// Enabled returns a reference to field enabled of azuread_custom_directory_role.
func (acdr azureadCustomDirectoryRoleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(acdr.ref.Append("enabled"))
}

// Id returns a reference to field id of azuread_custom_directory_role.
func (acdr azureadCustomDirectoryRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acdr.ref.Append("id"))
}

// ObjectId returns a reference to field object_id of azuread_custom_directory_role.
func (acdr azureadCustomDirectoryRoleAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(acdr.ref.Append("object_id"))
}

// TemplateId returns a reference to field template_id of azuread_custom_directory_role.
func (acdr azureadCustomDirectoryRoleAttributes) TemplateId() terra.StringValue {
	return terra.ReferenceAsString(acdr.ref.Append("template_id"))
}

// Version returns a reference to field version of azuread_custom_directory_role.
func (acdr azureadCustomDirectoryRoleAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(acdr.ref.Append("version"))
}

func (acdr azureadCustomDirectoryRoleAttributes) Permissions() terra.SetValue[PermissionsAttributes] {
	return terra.ReferenceAsSet[PermissionsAttributes](acdr.ref.Append("permissions"))
}

func (acdr azureadCustomDirectoryRoleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acdr.ref.Append("timeouts"))
}

type azureadCustomDirectoryRoleState struct {
	Description string             `json:"description"`
	DisplayName string             `json:"display_name"`
	Enabled     bool               `json:"enabled"`
	Id          string             `json:"id"`
	ObjectId    string             `json:"object_id"`
	TemplateId  string             `json:"template_id"`
	Version     string             `json:"version"`
	Permissions []PermissionsState `json:"permissions"`
	Timeouts    *TimeoutsState     `json:"timeouts"`
}
