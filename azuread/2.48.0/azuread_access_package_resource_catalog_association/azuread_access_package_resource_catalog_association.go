// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_access_package_resource_catalog_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_access_package_resource_catalog_association.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadAccessPackageResourceCatalogAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaprca *Resource) Type() string {
	return "azuread_access_package_resource_catalog_association"
}

// LocalName returns the local name for [Resource].
func (aaprca *Resource) LocalName() string {
	return aaprca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaprca *Resource) Configuration() interface{} {
	return aaprca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaprca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaprca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaprca *Resource) Dependencies() terra.Dependencies {
	return aaprca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaprca *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaprca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaprca *Resource) Attributes() azureadAccessPackageResourceCatalogAssociationAttributes {
	return azureadAccessPackageResourceCatalogAssociationAttributes{ref: terra.ReferenceResource(aaprca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaprca *Resource) ImportState(state io.Reader) error {
	aaprca.state = &azureadAccessPackageResourceCatalogAssociationState{}
	if err := json.NewDecoder(state).Decode(aaprca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaprca.Type(), aaprca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaprca *Resource) State() (*azureadAccessPackageResourceCatalogAssociationState, bool) {
	return aaprca.state, aaprca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaprca *Resource) StateMust() *azureadAccessPackageResourceCatalogAssociationState {
	if aaprca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaprca.Type(), aaprca.LocalName()))
	}
	return aaprca.state
}

// Args contains the configurations for azuread_access_package_resource_catalog_association.
type Args struct {
	// CatalogId: string, required
	CatalogId terra.StringValue `hcl:"catalog_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceOriginId: string, required
	ResourceOriginId terra.StringValue `hcl:"resource_origin_id,attr" validate:"required"`
	// ResourceOriginSystem: string, required
	ResourceOriginSystem terra.StringValue `hcl:"resource_origin_system,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadAccessPackageResourceCatalogAssociationAttributes struct {
	ref terra.Reference
}

// CatalogId returns a reference to field catalog_id of azuread_access_package_resource_catalog_association.
func (aaprca azureadAccessPackageResourceCatalogAssociationAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(aaprca.ref.Append("catalog_id"))
}

// Id returns a reference to field id of azuread_access_package_resource_catalog_association.
func (aaprca azureadAccessPackageResourceCatalogAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaprca.ref.Append("id"))
}

// ResourceOriginId returns a reference to field resource_origin_id of azuread_access_package_resource_catalog_association.
func (aaprca azureadAccessPackageResourceCatalogAssociationAttributes) ResourceOriginId() terra.StringValue {
	return terra.ReferenceAsString(aaprca.ref.Append("resource_origin_id"))
}

// ResourceOriginSystem returns a reference to field resource_origin_system of azuread_access_package_resource_catalog_association.
func (aaprca azureadAccessPackageResourceCatalogAssociationAttributes) ResourceOriginSystem() terra.StringValue {
	return terra.ReferenceAsString(aaprca.ref.Append("resource_origin_system"))
}

func (aaprca azureadAccessPackageResourceCatalogAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aaprca.ref.Append("timeouts"))
}

type azureadAccessPackageResourceCatalogAssociationState struct {
	CatalogId            string         `json:"catalog_id"`
	Id                   string         `json:"id"`
	ResourceOriginId     string         `json:"resource_origin_id"`
	ResourceOriginSystem string         `json:"resource_origin_system"`
	Timeouts             *TimeoutsState `json:"timeouts"`
}
