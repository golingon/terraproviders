// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_application_from_template

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_application_from_template.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadApplicationFromTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaft *Resource) Type() string {
	return "azuread_application_from_template"
}

// LocalName returns the local name for [Resource].
func (aaft *Resource) LocalName() string {
	return aaft.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaft *Resource) Configuration() interface{} {
	return aaft.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaft *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaft)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaft *Resource) Dependencies() terra.Dependencies {
	return aaft.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaft *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaft.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaft *Resource) Attributes() azureadApplicationFromTemplateAttributes {
	return azureadApplicationFromTemplateAttributes{ref: terra.ReferenceResource(aaft)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaft *Resource) ImportState(state io.Reader) error {
	aaft.state = &azureadApplicationFromTemplateState{}
	if err := json.NewDecoder(state).Decode(aaft.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaft.Type(), aaft.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaft *Resource) State() (*azureadApplicationFromTemplateState, bool) {
	return aaft.state, aaft.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaft *Resource) StateMust() *azureadApplicationFromTemplateState {
	if aaft.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaft.Type(), aaft.LocalName()))
	}
	return aaft.state
}

// Args contains the configurations for azuread_application_from_template.
type Args struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TemplateId: string, required
	TemplateId terra.StringValue `hcl:"template_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azureadApplicationFromTemplateAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of azuread_application_from_template.
func (aaft azureadApplicationFromTemplateAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aaft.ref.Append("application_id"))
}

// ApplicationObjectId returns a reference to field application_object_id of azuread_application_from_template.
func (aaft azureadApplicationFromTemplateAttributes) ApplicationObjectId() terra.StringValue {
	return terra.ReferenceAsString(aaft.ref.Append("application_object_id"))
}

// DisplayName returns a reference to field display_name of azuread_application_from_template.
func (aaft azureadApplicationFromTemplateAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aaft.ref.Append("display_name"))
}

// Id returns a reference to field id of azuread_application_from_template.
func (aaft azureadApplicationFromTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaft.ref.Append("id"))
}

// ServicePrincipalId returns a reference to field service_principal_id of azuread_application_from_template.
func (aaft azureadApplicationFromTemplateAttributes) ServicePrincipalId() terra.StringValue {
	return terra.ReferenceAsString(aaft.ref.Append("service_principal_id"))
}

// ServicePrincipalObjectId returns a reference to field service_principal_object_id of azuread_application_from_template.
func (aaft azureadApplicationFromTemplateAttributes) ServicePrincipalObjectId() terra.StringValue {
	return terra.ReferenceAsString(aaft.ref.Append("service_principal_object_id"))
}

// TemplateId returns a reference to field template_id of azuread_application_from_template.
func (aaft azureadApplicationFromTemplateAttributes) TemplateId() terra.StringValue {
	return terra.ReferenceAsString(aaft.ref.Append("template_id"))
}

func (aaft azureadApplicationFromTemplateAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aaft.ref.Append("timeouts"))
}

type azureadApplicationFromTemplateState struct {
	ApplicationId            string         `json:"application_id"`
	ApplicationObjectId      string         `json:"application_object_id"`
	DisplayName              string         `json:"display_name"`
	Id                       string         `json:"id"`
	ServicePrincipalId       string         `json:"service_principal_id"`
	ServicePrincipalObjectId string         `json:"service_principal_object_id"`
	TemplateId               string         `json:"template_id"`
	Timeouts                 *TimeoutsState `json:"timeouts"`
}
