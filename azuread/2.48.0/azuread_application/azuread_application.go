// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread_application

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azuread_application.
type Resource struct {
	Name      string
	Args      Args
	state     *azureadApplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aa *Resource) Type() string {
	return "azuread_application"
}

// LocalName returns the local name for [Resource].
func (aa *Resource) LocalName() string {
	return aa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aa *Resource) Configuration() interface{} {
	return aa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aa *Resource) Dependencies() terra.Dependencies {
	return aa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aa *Resource) Attributes() azureadApplicationAttributes {
	return azureadApplicationAttributes{ref: terra.ReferenceResource(aa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aa *Resource) ImportState(state io.Reader) error {
	aa.state = &azureadApplicationState{}
	if err := json.NewDecoder(state).Decode(aa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aa.Type(), aa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aa *Resource) State() (*azureadApplicationState, bool) {
	return aa.state, aa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aa *Resource) StateMust() *azureadApplicationState {
	if aa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aa.Type(), aa.LocalName()))
	}
	return aa.state
}

// Args contains the configurations for azuread_application.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DeviceOnlyAuthEnabled: bool, optional
	DeviceOnlyAuthEnabled terra.BoolValue `hcl:"device_only_auth_enabled,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// FallbackPublicClientEnabled: bool, optional
	FallbackPublicClientEnabled terra.BoolValue `hcl:"fallback_public_client_enabled,attr"`
	// GroupMembershipClaims: set of string, optional
	GroupMembershipClaims terra.SetValue[terra.StringValue] `hcl:"group_membership_claims,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentifierUris: set of string, optional
	IdentifierUris terra.SetValue[terra.StringValue] `hcl:"identifier_uris,attr"`
	// LogoImage: string, optional
	LogoImage terra.StringValue `hcl:"logo_image,attr"`
	// MarketingUrl: string, optional
	MarketingUrl terra.StringValue `hcl:"marketing_url,attr"`
	// Notes: string, optional
	Notes terra.StringValue `hcl:"notes,attr"`
	// Oauth2PostResponseRequired: bool, optional
	Oauth2PostResponseRequired terra.BoolValue `hcl:"oauth2_post_response_required,attr"`
	// Owners: set of string, optional
	Owners terra.SetValue[terra.StringValue] `hcl:"owners,attr"`
	// PreventDuplicateNames: bool, optional
	PreventDuplicateNames terra.BoolValue `hcl:"prevent_duplicate_names,attr"`
	// PrivacyStatementUrl: string, optional
	PrivacyStatementUrl terra.StringValue `hcl:"privacy_statement_url,attr"`
	// ServiceManagementReference: string, optional
	ServiceManagementReference terra.StringValue `hcl:"service_management_reference,attr"`
	// SignInAudience: string, optional
	SignInAudience terra.StringValue `hcl:"sign_in_audience,attr"`
	// SupportUrl: string, optional
	SupportUrl terra.StringValue `hcl:"support_url,attr"`
	// Tags: set of string, optional
	Tags terra.SetValue[terra.StringValue] `hcl:"tags,attr"`
	// TemplateId: string, optional
	TemplateId terra.StringValue `hcl:"template_id,attr"`
	// TermsOfServiceUrl: string, optional
	TermsOfServiceUrl terra.StringValue `hcl:"terms_of_service_url,attr"`
	// Api: optional
	Api *Api `hcl:"api,block"`
	// AppRole: min=0
	AppRole []AppRole `hcl:"app_role,block" validate:"min=0"`
	// FeatureTags: min=0
	FeatureTags []FeatureTags `hcl:"feature_tags,block" validate:"min=0"`
	// OptionalClaims: optional
	OptionalClaims *OptionalClaims `hcl:"optional_claims,block"`
	// PublicClient: optional
	PublicClient *PublicClient `hcl:"public_client,block"`
	// RequiredResourceAccess: min=0
	RequiredResourceAccess []RequiredResourceAccess `hcl:"required_resource_access,block" validate:"min=0"`
	// SinglePageApplication: optional
	SinglePageApplication *SinglePageApplication `hcl:"single_page_application,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Web: optional
	Web *Web `hcl:"web,block"`
}

type azureadApplicationAttributes struct {
	ref terra.Reference
}

// AppRoleIds returns a reference to field app_role_ids of azuread_application.
func (aa azureadApplicationAttributes) AppRoleIds() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aa.ref.Append("app_role_ids"))
}

// ApplicationId returns a reference to field application_id of azuread_application.
func (aa azureadApplicationAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("application_id"))
}

// ClientId returns a reference to field client_id of azuread_application.
func (aa azureadApplicationAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("client_id"))
}

// Description returns a reference to field description of azuread_application.
func (aa azureadApplicationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("description"))
}

// DeviceOnlyAuthEnabled returns a reference to field device_only_auth_enabled of azuread_application.
func (aa azureadApplicationAttributes) DeviceOnlyAuthEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("device_only_auth_enabled"))
}

// DisabledByMicrosoft returns a reference to field disabled_by_microsoft of azuread_application.
func (aa azureadApplicationAttributes) DisabledByMicrosoft() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("disabled_by_microsoft"))
}

// DisplayName returns a reference to field display_name of azuread_application.
func (aa azureadApplicationAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("display_name"))
}

// FallbackPublicClientEnabled returns a reference to field fallback_public_client_enabled of azuread_application.
func (aa azureadApplicationAttributes) FallbackPublicClientEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("fallback_public_client_enabled"))
}

// GroupMembershipClaims returns a reference to field group_membership_claims of azuread_application.
func (aa azureadApplicationAttributes) GroupMembershipClaims() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aa.ref.Append("group_membership_claims"))
}

// Id returns a reference to field id of azuread_application.
func (aa azureadApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("id"))
}

// IdentifierUris returns a reference to field identifier_uris of azuread_application.
func (aa azureadApplicationAttributes) IdentifierUris() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aa.ref.Append("identifier_uris"))
}

// LogoImage returns a reference to field logo_image of azuread_application.
func (aa azureadApplicationAttributes) LogoImage() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("logo_image"))
}

// LogoUrl returns a reference to field logo_url of azuread_application.
func (aa azureadApplicationAttributes) LogoUrl() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("logo_url"))
}

// MarketingUrl returns a reference to field marketing_url of azuread_application.
func (aa azureadApplicationAttributes) MarketingUrl() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("marketing_url"))
}

// Notes returns a reference to field notes of azuread_application.
func (aa azureadApplicationAttributes) Notes() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("notes"))
}

// Oauth2PermissionScopeIds returns a reference to field oauth2_permission_scope_ids of azuread_application.
func (aa azureadApplicationAttributes) Oauth2PermissionScopeIds() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aa.ref.Append("oauth2_permission_scope_ids"))
}

// Oauth2PostResponseRequired returns a reference to field oauth2_post_response_required of azuread_application.
func (aa azureadApplicationAttributes) Oauth2PostResponseRequired() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("oauth2_post_response_required"))
}

// ObjectId returns a reference to field object_id of azuread_application.
func (aa azureadApplicationAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("object_id"))
}

// Owners returns a reference to field owners of azuread_application.
func (aa azureadApplicationAttributes) Owners() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aa.ref.Append("owners"))
}

// PreventDuplicateNames returns a reference to field prevent_duplicate_names of azuread_application.
func (aa azureadApplicationAttributes) PreventDuplicateNames() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("prevent_duplicate_names"))
}

// PrivacyStatementUrl returns a reference to field privacy_statement_url of azuread_application.
func (aa azureadApplicationAttributes) PrivacyStatementUrl() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("privacy_statement_url"))
}

// PublisherDomain returns a reference to field publisher_domain of azuread_application.
func (aa azureadApplicationAttributes) PublisherDomain() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("publisher_domain"))
}

// ServiceManagementReference returns a reference to field service_management_reference of azuread_application.
func (aa azureadApplicationAttributes) ServiceManagementReference() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("service_management_reference"))
}

// SignInAudience returns a reference to field sign_in_audience of azuread_application.
func (aa azureadApplicationAttributes) SignInAudience() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("sign_in_audience"))
}

// SupportUrl returns a reference to field support_url of azuread_application.
func (aa azureadApplicationAttributes) SupportUrl() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("support_url"))
}

// Tags returns a reference to field tags of azuread_application.
func (aa azureadApplicationAttributes) Tags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aa.ref.Append("tags"))
}

// TemplateId returns a reference to field template_id of azuread_application.
func (aa azureadApplicationAttributes) TemplateId() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("template_id"))
}

// TermsOfServiceUrl returns a reference to field terms_of_service_url of azuread_application.
func (aa azureadApplicationAttributes) TermsOfServiceUrl() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("terms_of_service_url"))
}

func (aa azureadApplicationAttributes) Api() terra.ListValue[ApiAttributes] {
	return terra.ReferenceAsList[ApiAttributes](aa.ref.Append("api"))
}

func (aa azureadApplicationAttributes) AppRole() terra.SetValue[AppRoleAttributes] {
	return terra.ReferenceAsSet[AppRoleAttributes](aa.ref.Append("app_role"))
}

func (aa azureadApplicationAttributes) FeatureTags() terra.ListValue[FeatureTagsAttributes] {
	return terra.ReferenceAsList[FeatureTagsAttributes](aa.ref.Append("feature_tags"))
}

func (aa azureadApplicationAttributes) OptionalClaims() terra.ListValue[OptionalClaimsAttributes] {
	return terra.ReferenceAsList[OptionalClaimsAttributes](aa.ref.Append("optional_claims"))
}

func (aa azureadApplicationAttributes) PublicClient() terra.ListValue[PublicClientAttributes] {
	return terra.ReferenceAsList[PublicClientAttributes](aa.ref.Append("public_client"))
}

func (aa azureadApplicationAttributes) RequiredResourceAccess() terra.SetValue[RequiredResourceAccessAttributes] {
	return terra.ReferenceAsSet[RequiredResourceAccessAttributes](aa.ref.Append("required_resource_access"))
}

func (aa azureadApplicationAttributes) SinglePageApplication() terra.ListValue[SinglePageApplicationAttributes] {
	return terra.ReferenceAsList[SinglePageApplicationAttributes](aa.ref.Append("single_page_application"))
}

func (aa azureadApplicationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aa.ref.Append("timeouts"))
}

func (aa azureadApplicationAttributes) Web() terra.ListValue[WebAttributes] {
	return terra.ReferenceAsList[WebAttributes](aa.ref.Append("web"))
}

type azureadApplicationState struct {
	AppRoleIds                  map[string]string             `json:"app_role_ids"`
	ApplicationId               string                        `json:"application_id"`
	ClientId                    string                        `json:"client_id"`
	Description                 string                        `json:"description"`
	DeviceOnlyAuthEnabled       bool                          `json:"device_only_auth_enabled"`
	DisabledByMicrosoft         string                        `json:"disabled_by_microsoft"`
	DisplayName                 string                        `json:"display_name"`
	FallbackPublicClientEnabled bool                          `json:"fallback_public_client_enabled"`
	GroupMembershipClaims       []string                      `json:"group_membership_claims"`
	Id                          string                        `json:"id"`
	IdentifierUris              []string                      `json:"identifier_uris"`
	LogoImage                   string                        `json:"logo_image"`
	LogoUrl                     string                        `json:"logo_url"`
	MarketingUrl                string                        `json:"marketing_url"`
	Notes                       string                        `json:"notes"`
	Oauth2PermissionScopeIds    map[string]string             `json:"oauth2_permission_scope_ids"`
	Oauth2PostResponseRequired  bool                          `json:"oauth2_post_response_required"`
	ObjectId                    string                        `json:"object_id"`
	Owners                      []string                      `json:"owners"`
	PreventDuplicateNames       bool                          `json:"prevent_duplicate_names"`
	PrivacyStatementUrl         string                        `json:"privacy_statement_url"`
	PublisherDomain             string                        `json:"publisher_domain"`
	ServiceManagementReference  string                        `json:"service_management_reference"`
	SignInAudience              string                        `json:"sign_in_audience"`
	SupportUrl                  string                        `json:"support_url"`
	Tags                        []string                      `json:"tags"`
	TemplateId                  string                        `json:"template_id"`
	TermsOfServiceUrl           string                        `json:"terms_of_service_url"`
	Api                         []ApiState                    `json:"api"`
	AppRole                     []AppRoleState                `json:"app_role"`
	FeatureTags                 []FeatureTagsState            `json:"feature_tags"`
	OptionalClaims              []OptionalClaimsState         `json:"optional_claims"`
	PublicClient                []PublicClientState           `json:"public_client"`
	RequiredResourceAccess      []RequiredResourceAccessState `json:"required_resource_access"`
	SinglePageApplication       []SinglePageApplicationState  `json:"single_page_application"`
	Timeouts                    *TimeoutsState                `json:"timeouts"`
	Web                         []WebState                    `json:"web"`
}
