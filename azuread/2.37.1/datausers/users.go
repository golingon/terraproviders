// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datausers

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Users struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type UsersAttributes struct {
	ref terra.Reference
}

func (u UsersAttributes) InternalRef() (terra.Reference, error) {
	return u.ref, nil
}

func (u UsersAttributes) InternalWithRef(ref terra.Reference) UsersAttributes {
	return UsersAttributes{ref: ref}
}

func (u UsersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return u.ref.InternalTokens()
}

func (u UsersAttributes) AccountEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(u.ref.Append("account_enabled"))
}

func (u UsersAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("display_name"))
}

func (u UsersAttributes) Mail() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("mail"))
}

func (u UsersAttributes) MailNickname() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("mail_nickname"))
}

func (u UsersAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("object_id"))
}

func (u UsersAttributes) OnpremisesImmutableId() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("onpremises_immutable_id"))
}

func (u UsersAttributes) OnpremisesSamAccountName() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("onpremises_sam_account_name"))
}

func (u UsersAttributes) OnpremisesUserPrincipalName() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("onpremises_user_principal_name"))
}

func (u UsersAttributes) UsageLocation() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("usage_location"))
}

func (u UsersAttributes) UserPrincipalName() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("user_principal_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type UsersState struct {
	AccountEnabled              bool   `json:"account_enabled"`
	DisplayName                 string `json:"display_name"`
	Mail                        string `json:"mail"`
	MailNickname                string `json:"mail_nickname"`
	ObjectId                    string `json:"object_id"`
	OnpremisesImmutableId       string `json:"onpremises_immutable_id"`
	OnpremisesSamAccountName    string `json:"onpremises_sam_account_name"`
	OnpremisesUserPrincipalName string `json:"onpremises_user_principal_name"`
	UsageLocation               string `json:"usage_location"`
	UserPrincipalName           string `json:"user_principal_name"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
