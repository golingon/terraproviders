// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	accesspackagecatalog "github.com/golingon/terraproviders/azuread/2.38.0/accesspackagecatalog"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAccessPackageCatalog creates a new instance of [AccessPackageCatalog].
func NewAccessPackageCatalog(name string, args AccessPackageCatalogArgs) *AccessPackageCatalog {
	return &AccessPackageCatalog{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AccessPackageCatalog)(nil)

// AccessPackageCatalog represents the Terraform resource azuread_access_package_catalog.
type AccessPackageCatalog struct {
	Name      string
	Args      AccessPackageCatalogArgs
	state     *accessPackageCatalogState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AccessPackageCatalog].
func (apc *AccessPackageCatalog) Type() string {
	return "azuread_access_package_catalog"
}

// LocalName returns the local name for [AccessPackageCatalog].
func (apc *AccessPackageCatalog) LocalName() string {
	return apc.Name
}

// Configuration returns the configuration (args) for [AccessPackageCatalog].
func (apc *AccessPackageCatalog) Configuration() interface{} {
	return apc.Args
}

// DependOn is used for other resources to depend on [AccessPackageCatalog].
func (apc *AccessPackageCatalog) DependOn() terra.Reference {
	return terra.ReferenceResource(apc)
}

// Dependencies returns the list of resources [AccessPackageCatalog] depends_on.
func (apc *AccessPackageCatalog) Dependencies() terra.Dependencies {
	return apc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AccessPackageCatalog].
func (apc *AccessPackageCatalog) LifecycleManagement() *terra.Lifecycle {
	return apc.Lifecycle
}

// Attributes returns the attributes for [AccessPackageCatalog].
func (apc *AccessPackageCatalog) Attributes() accessPackageCatalogAttributes {
	return accessPackageCatalogAttributes{ref: terra.ReferenceResource(apc)}
}

// ImportState imports the given attribute values into [AccessPackageCatalog]'s state.
func (apc *AccessPackageCatalog) ImportState(av io.Reader) error {
	apc.state = &accessPackageCatalogState{}
	if err := json.NewDecoder(av).Decode(apc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apc.Type(), apc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AccessPackageCatalog] has state.
func (apc *AccessPackageCatalog) State() (*accessPackageCatalogState, bool) {
	return apc.state, apc.state != nil
}

// StateMust returns the state for [AccessPackageCatalog]. Panics if the state is nil.
func (apc *AccessPackageCatalog) StateMust() *accessPackageCatalogState {
	if apc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apc.Type(), apc.LocalName()))
	}
	return apc.state
}

// AccessPackageCatalogArgs contains the configurations for azuread_access_package_catalog.
type AccessPackageCatalogArgs struct {
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// ExternallyVisible: bool, optional
	ExternallyVisible terra.BoolValue `hcl:"externally_visible,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Published: bool, optional
	Published terra.BoolValue `hcl:"published,attr"`
	// Timeouts: optional
	Timeouts *accesspackagecatalog.Timeouts `hcl:"timeouts,block"`
}
type accessPackageCatalogAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azuread_access_package_catalog.
func (apc accessPackageCatalogAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(apc.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azuread_access_package_catalog.
func (apc accessPackageCatalogAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(apc.ref.Append("display_name"))
}

// ExternallyVisible returns a reference to field externally_visible of azuread_access_package_catalog.
func (apc accessPackageCatalogAttributes) ExternallyVisible() terra.BoolValue {
	return terra.ReferenceAsBool(apc.ref.Append("externally_visible"))
}

// Id returns a reference to field id of azuread_access_package_catalog.
func (apc accessPackageCatalogAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apc.ref.Append("id"))
}

// Published returns a reference to field published of azuread_access_package_catalog.
func (apc accessPackageCatalogAttributes) Published() terra.BoolValue {
	return terra.ReferenceAsBool(apc.ref.Append("published"))
}

func (apc accessPackageCatalogAttributes) Timeouts() accesspackagecatalog.TimeoutsAttributes {
	return terra.ReferenceAsSingle[accesspackagecatalog.TimeoutsAttributes](apc.ref.Append("timeouts"))
}

type accessPackageCatalogState struct {
	Description       string                              `json:"description"`
	DisplayName       string                              `json:"display_name"`
	ExternallyVisible bool                                `json:"externally_visible"`
	Id                string                              `json:"id"`
	Published         bool                                `json:"published"`
	Timeouts          *accesspackagecatalog.TimeoutsState `json:"timeouts"`
}
