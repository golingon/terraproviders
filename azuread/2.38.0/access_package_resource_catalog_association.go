// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	accesspackageresourcecatalogassociation "github.com/golingon/terraproviders/azuread/2.38.0/accesspackageresourcecatalogassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAccessPackageResourceCatalogAssociation creates a new instance of [AccessPackageResourceCatalogAssociation].
func NewAccessPackageResourceCatalogAssociation(name string, args AccessPackageResourceCatalogAssociationArgs) *AccessPackageResourceCatalogAssociation {
	return &AccessPackageResourceCatalogAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AccessPackageResourceCatalogAssociation)(nil)

// AccessPackageResourceCatalogAssociation represents the Terraform resource azuread_access_package_resource_catalog_association.
type AccessPackageResourceCatalogAssociation struct {
	Name      string
	Args      AccessPackageResourceCatalogAssociationArgs
	state     *accessPackageResourceCatalogAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AccessPackageResourceCatalogAssociation].
func (aprca *AccessPackageResourceCatalogAssociation) Type() string {
	return "azuread_access_package_resource_catalog_association"
}

// LocalName returns the local name for [AccessPackageResourceCatalogAssociation].
func (aprca *AccessPackageResourceCatalogAssociation) LocalName() string {
	return aprca.Name
}

// Configuration returns the configuration (args) for [AccessPackageResourceCatalogAssociation].
func (aprca *AccessPackageResourceCatalogAssociation) Configuration() interface{} {
	return aprca.Args
}

// DependOn is used for other resources to depend on [AccessPackageResourceCatalogAssociation].
func (aprca *AccessPackageResourceCatalogAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(aprca)
}

// Dependencies returns the list of resources [AccessPackageResourceCatalogAssociation] depends_on.
func (aprca *AccessPackageResourceCatalogAssociation) Dependencies() terra.Dependencies {
	return aprca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AccessPackageResourceCatalogAssociation].
func (aprca *AccessPackageResourceCatalogAssociation) LifecycleManagement() *terra.Lifecycle {
	return aprca.Lifecycle
}

// Attributes returns the attributes for [AccessPackageResourceCatalogAssociation].
func (aprca *AccessPackageResourceCatalogAssociation) Attributes() accessPackageResourceCatalogAssociationAttributes {
	return accessPackageResourceCatalogAssociationAttributes{ref: terra.ReferenceResource(aprca)}
}

// ImportState imports the given attribute values into [AccessPackageResourceCatalogAssociation]'s state.
func (aprca *AccessPackageResourceCatalogAssociation) ImportState(av io.Reader) error {
	aprca.state = &accessPackageResourceCatalogAssociationState{}
	if err := json.NewDecoder(av).Decode(aprca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aprca.Type(), aprca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AccessPackageResourceCatalogAssociation] has state.
func (aprca *AccessPackageResourceCatalogAssociation) State() (*accessPackageResourceCatalogAssociationState, bool) {
	return aprca.state, aprca.state != nil
}

// StateMust returns the state for [AccessPackageResourceCatalogAssociation]. Panics if the state is nil.
func (aprca *AccessPackageResourceCatalogAssociation) StateMust() *accessPackageResourceCatalogAssociationState {
	if aprca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aprca.Type(), aprca.LocalName()))
	}
	return aprca.state
}

// AccessPackageResourceCatalogAssociationArgs contains the configurations for azuread_access_package_resource_catalog_association.
type AccessPackageResourceCatalogAssociationArgs struct {
	// CatalogId: string, required
	CatalogId terra.StringValue `hcl:"catalog_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceOriginId: string, required
	ResourceOriginId terra.StringValue `hcl:"resource_origin_id,attr" validate:"required"`
	// ResourceOriginSystem: string, required
	ResourceOriginSystem terra.StringValue `hcl:"resource_origin_system,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *accesspackageresourcecatalogassociation.Timeouts `hcl:"timeouts,block"`
}
type accessPackageResourceCatalogAssociationAttributes struct {
	ref terra.Reference
}

// CatalogId returns a reference to field catalog_id of azuread_access_package_resource_catalog_association.
func (aprca accessPackageResourceCatalogAssociationAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(aprca.ref.Append("catalog_id"))
}

// Id returns a reference to field id of azuread_access_package_resource_catalog_association.
func (aprca accessPackageResourceCatalogAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aprca.ref.Append("id"))
}

// ResourceOriginId returns a reference to field resource_origin_id of azuread_access_package_resource_catalog_association.
func (aprca accessPackageResourceCatalogAssociationAttributes) ResourceOriginId() terra.StringValue {
	return terra.ReferenceAsString(aprca.ref.Append("resource_origin_id"))
}

// ResourceOriginSystem returns a reference to field resource_origin_system of azuread_access_package_resource_catalog_association.
func (aprca accessPackageResourceCatalogAssociationAttributes) ResourceOriginSystem() terra.StringValue {
	return terra.ReferenceAsString(aprca.ref.Append("resource_origin_system"))
}

func (aprca accessPackageResourceCatalogAssociationAttributes) Timeouts() accesspackageresourcecatalogassociation.TimeoutsAttributes {
	return terra.ReferenceAsSingle[accesspackageresourcecatalogassociation.TimeoutsAttributes](aprca.ref.Append("timeouts"))
}

type accessPackageResourceCatalogAssociationState struct {
	CatalogId            string                                                 `json:"catalog_id"`
	Id                   string                                                 `json:"id"`
	ResourceOriginId     string                                                 `json:"resource_origin_id"`
	ResourceOriginSystem string                                                 `json:"resource_origin_system"`
	Timeouts             *accesspackageresourcecatalogassociation.TimeoutsState `json:"timeouts"`
}
