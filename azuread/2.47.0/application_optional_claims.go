// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	applicationoptionalclaims "github.com/golingon/terraproviders/azuread/2.47.0/applicationoptionalclaims"
	"io"
)

// NewApplicationOptionalClaims creates a new instance of [ApplicationOptionalClaims].
func NewApplicationOptionalClaims(name string, args ApplicationOptionalClaimsArgs) *ApplicationOptionalClaims {
	return &ApplicationOptionalClaims{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApplicationOptionalClaims)(nil)

// ApplicationOptionalClaims represents the Terraform resource azuread_application_optional_claims.
type ApplicationOptionalClaims struct {
	Name      string
	Args      ApplicationOptionalClaimsArgs
	state     *applicationOptionalClaimsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApplicationOptionalClaims].
func (aoc *ApplicationOptionalClaims) Type() string {
	return "azuread_application_optional_claims"
}

// LocalName returns the local name for [ApplicationOptionalClaims].
func (aoc *ApplicationOptionalClaims) LocalName() string {
	return aoc.Name
}

// Configuration returns the configuration (args) for [ApplicationOptionalClaims].
func (aoc *ApplicationOptionalClaims) Configuration() interface{} {
	return aoc.Args
}

// DependOn is used for other resources to depend on [ApplicationOptionalClaims].
func (aoc *ApplicationOptionalClaims) DependOn() terra.Reference {
	return terra.ReferenceResource(aoc)
}

// Dependencies returns the list of resources [ApplicationOptionalClaims] depends_on.
func (aoc *ApplicationOptionalClaims) Dependencies() terra.Dependencies {
	return aoc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApplicationOptionalClaims].
func (aoc *ApplicationOptionalClaims) LifecycleManagement() *terra.Lifecycle {
	return aoc.Lifecycle
}

// Attributes returns the attributes for [ApplicationOptionalClaims].
func (aoc *ApplicationOptionalClaims) Attributes() applicationOptionalClaimsAttributes {
	return applicationOptionalClaimsAttributes{ref: terra.ReferenceResource(aoc)}
}

// ImportState imports the given attribute values into [ApplicationOptionalClaims]'s state.
func (aoc *ApplicationOptionalClaims) ImportState(av io.Reader) error {
	aoc.state = &applicationOptionalClaimsState{}
	if err := json.NewDecoder(av).Decode(aoc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aoc.Type(), aoc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApplicationOptionalClaims] has state.
func (aoc *ApplicationOptionalClaims) State() (*applicationOptionalClaimsState, bool) {
	return aoc.state, aoc.state != nil
}

// StateMust returns the state for [ApplicationOptionalClaims]. Panics if the state is nil.
func (aoc *ApplicationOptionalClaims) StateMust() *applicationOptionalClaimsState {
	if aoc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aoc.Type(), aoc.LocalName()))
	}
	return aoc.state
}

// ApplicationOptionalClaimsArgs contains the configurations for azuread_application_optional_claims.
type ApplicationOptionalClaimsArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// AccessToken: min=0
	AccessToken []applicationoptionalclaims.AccessToken `hcl:"access_token,block" validate:"min=0"`
	// IdToken: min=0
	IdToken []applicationoptionalclaims.IdToken `hcl:"id_token,block" validate:"min=0"`
	// Saml2Token: min=0
	Saml2Token []applicationoptionalclaims.Saml2Token `hcl:"saml2_token,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *applicationoptionalclaims.Timeouts `hcl:"timeouts,block"`
}
type applicationOptionalClaimsAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of azuread_application_optional_claims.
func (aoc applicationOptionalClaimsAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aoc.ref.Append("application_id"))
}

// Id returns a reference to field id of azuread_application_optional_claims.
func (aoc applicationOptionalClaimsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aoc.ref.Append("id"))
}

func (aoc applicationOptionalClaimsAttributes) AccessToken() terra.ListValue[applicationoptionalclaims.AccessTokenAttributes] {
	return terra.ReferenceAsList[applicationoptionalclaims.AccessTokenAttributes](aoc.ref.Append("access_token"))
}

func (aoc applicationOptionalClaimsAttributes) IdToken() terra.ListValue[applicationoptionalclaims.IdTokenAttributes] {
	return terra.ReferenceAsList[applicationoptionalclaims.IdTokenAttributes](aoc.ref.Append("id_token"))
}

func (aoc applicationOptionalClaimsAttributes) Saml2Token() terra.ListValue[applicationoptionalclaims.Saml2TokenAttributes] {
	return terra.ReferenceAsList[applicationoptionalclaims.Saml2TokenAttributes](aoc.ref.Append("saml2_token"))
}

func (aoc applicationOptionalClaimsAttributes) Timeouts() applicationoptionalclaims.TimeoutsAttributes {
	return terra.ReferenceAsSingle[applicationoptionalclaims.TimeoutsAttributes](aoc.ref.Append("timeouts"))
}

type applicationOptionalClaimsState struct {
	ApplicationId string                                       `json:"application_id"`
	Id            string                                       `json:"id"`
	AccessToken   []applicationoptionalclaims.AccessTokenState `json:"access_token"`
	IdToken       []applicationoptionalclaims.IdTokenState     `json:"id_token"`
	Saml2Token    []applicationoptionalclaims.Saml2TokenState  `json:"saml2_token"`
	Timeouts      *applicationoptionalclaims.TimeoutsState     `json:"timeouts"`
}
