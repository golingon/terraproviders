// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	applicationapprole "github.com/golingon/terraproviders/azuread/2.47.0/applicationapprole"
	"io"
)

// NewApplicationAppRole creates a new instance of [ApplicationAppRole].
func NewApplicationAppRole(name string, args ApplicationAppRoleArgs) *ApplicationAppRole {
	return &ApplicationAppRole{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApplicationAppRole)(nil)

// ApplicationAppRole represents the Terraform resource azuread_application_app_role.
type ApplicationAppRole struct {
	Name      string
	Args      ApplicationAppRoleArgs
	state     *applicationAppRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApplicationAppRole].
func (aar *ApplicationAppRole) Type() string {
	return "azuread_application_app_role"
}

// LocalName returns the local name for [ApplicationAppRole].
func (aar *ApplicationAppRole) LocalName() string {
	return aar.Name
}

// Configuration returns the configuration (args) for [ApplicationAppRole].
func (aar *ApplicationAppRole) Configuration() interface{} {
	return aar.Args
}

// DependOn is used for other resources to depend on [ApplicationAppRole].
func (aar *ApplicationAppRole) DependOn() terra.Reference {
	return terra.ReferenceResource(aar)
}

// Dependencies returns the list of resources [ApplicationAppRole] depends_on.
func (aar *ApplicationAppRole) Dependencies() terra.Dependencies {
	return aar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApplicationAppRole].
func (aar *ApplicationAppRole) LifecycleManagement() *terra.Lifecycle {
	return aar.Lifecycle
}

// Attributes returns the attributes for [ApplicationAppRole].
func (aar *ApplicationAppRole) Attributes() applicationAppRoleAttributes {
	return applicationAppRoleAttributes{ref: terra.ReferenceResource(aar)}
}

// ImportState imports the given attribute values into [ApplicationAppRole]'s state.
func (aar *ApplicationAppRole) ImportState(av io.Reader) error {
	aar.state = &applicationAppRoleState{}
	if err := json.NewDecoder(av).Decode(aar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aar.Type(), aar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApplicationAppRole] has state.
func (aar *ApplicationAppRole) State() (*applicationAppRoleState, bool) {
	return aar.state, aar.state != nil
}

// StateMust returns the state for [ApplicationAppRole]. Panics if the state is nil.
func (aar *ApplicationAppRole) StateMust() *applicationAppRoleState {
	if aar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aar.Type(), aar.LocalName()))
	}
	return aar.state
}

// ApplicationAppRoleArgs contains the configurations for azuread_application_app_role.
type ApplicationAppRoleArgs struct {
	// AllowedMemberTypes: set of string, required
	AllowedMemberTypes terra.SetValue[terra.StringValue] `hcl:"allowed_member_types,attr" validate:"required"`
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RoleId: string, required
	RoleId terra.StringValue `hcl:"role_id,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
	// Timeouts: optional
	Timeouts *applicationapprole.Timeouts `hcl:"timeouts,block"`
}
type applicationAppRoleAttributes struct {
	ref terra.Reference
}

// AllowedMemberTypes returns a reference to field allowed_member_types of azuread_application_app_role.
func (aar applicationAppRoleAttributes) AllowedMemberTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aar.ref.Append("allowed_member_types"))
}

// ApplicationId returns a reference to field application_id of azuread_application_app_role.
func (aar applicationAppRoleAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("application_id"))
}

// Description returns a reference to field description of azuread_application_app_role.
func (aar applicationAppRoleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azuread_application_app_role.
func (aar applicationAppRoleAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("display_name"))
}

// Id returns a reference to field id of azuread_application_app_role.
func (aar applicationAppRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("id"))
}

// RoleId returns a reference to field role_id of azuread_application_app_role.
func (aar applicationAppRoleAttributes) RoleId() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("role_id"))
}

// Value returns a reference to field value of azuread_application_app_role.
func (aar applicationAppRoleAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("value"))
}

func (aar applicationAppRoleAttributes) Timeouts() applicationapprole.TimeoutsAttributes {
	return terra.ReferenceAsSingle[applicationapprole.TimeoutsAttributes](aar.ref.Append("timeouts"))
}

type applicationAppRoleState struct {
	AllowedMemberTypes []string                          `json:"allowed_member_types"`
	ApplicationId      string                            `json:"application_id"`
	Description        string                            `json:"description"`
	DisplayName        string                            `json:"display_name"`
	Id                 string                            `json:"id"`
	RoleId             string                            `json:"role_id"`
	Value              string                            `json:"value"`
	Timeouts           *applicationapprole.TimeoutsState `json:"timeouts"`
}
