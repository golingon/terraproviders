// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	applicationpermissionscope "github.com/golingon/terraproviders/azuread/2.47.0/applicationpermissionscope"
	"io"
)

// NewApplicationPermissionScope creates a new instance of [ApplicationPermissionScope].
func NewApplicationPermissionScope(name string, args ApplicationPermissionScopeArgs) *ApplicationPermissionScope {
	return &ApplicationPermissionScope{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApplicationPermissionScope)(nil)

// ApplicationPermissionScope represents the Terraform resource azuread_application_permission_scope.
type ApplicationPermissionScope struct {
	Name      string
	Args      ApplicationPermissionScopeArgs
	state     *applicationPermissionScopeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApplicationPermissionScope].
func (aps *ApplicationPermissionScope) Type() string {
	return "azuread_application_permission_scope"
}

// LocalName returns the local name for [ApplicationPermissionScope].
func (aps *ApplicationPermissionScope) LocalName() string {
	return aps.Name
}

// Configuration returns the configuration (args) for [ApplicationPermissionScope].
func (aps *ApplicationPermissionScope) Configuration() interface{} {
	return aps.Args
}

// DependOn is used for other resources to depend on [ApplicationPermissionScope].
func (aps *ApplicationPermissionScope) DependOn() terra.Reference {
	return terra.ReferenceResource(aps)
}

// Dependencies returns the list of resources [ApplicationPermissionScope] depends_on.
func (aps *ApplicationPermissionScope) Dependencies() terra.Dependencies {
	return aps.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApplicationPermissionScope].
func (aps *ApplicationPermissionScope) LifecycleManagement() *terra.Lifecycle {
	return aps.Lifecycle
}

// Attributes returns the attributes for [ApplicationPermissionScope].
func (aps *ApplicationPermissionScope) Attributes() applicationPermissionScopeAttributes {
	return applicationPermissionScopeAttributes{ref: terra.ReferenceResource(aps)}
}

// ImportState imports the given attribute values into [ApplicationPermissionScope]'s state.
func (aps *ApplicationPermissionScope) ImportState(av io.Reader) error {
	aps.state = &applicationPermissionScopeState{}
	if err := json.NewDecoder(av).Decode(aps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aps.Type(), aps.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApplicationPermissionScope] has state.
func (aps *ApplicationPermissionScope) State() (*applicationPermissionScopeState, bool) {
	return aps.state, aps.state != nil
}

// StateMust returns the state for [ApplicationPermissionScope]. Panics if the state is nil.
func (aps *ApplicationPermissionScope) StateMust() *applicationPermissionScopeState {
	if aps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aps.Type(), aps.LocalName()))
	}
	return aps.state
}

// ApplicationPermissionScopeArgs contains the configurations for azuread_application_permission_scope.
type ApplicationPermissionScopeArgs struct {
	// AdminConsentDescription: string, required
	AdminConsentDescription terra.StringValue `hcl:"admin_consent_description,attr" validate:"required"`
	// AdminConsentDisplayName: string, required
	AdminConsentDisplayName terra.StringValue `hcl:"admin_consent_display_name,attr" validate:"required"`
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ScopeId: string, required
	ScopeId terra.StringValue `hcl:"scope_id,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// UserConsentDescription: string, optional
	UserConsentDescription terra.StringValue `hcl:"user_consent_description,attr"`
	// UserConsentDisplayName: string, optional
	UserConsentDisplayName terra.StringValue `hcl:"user_consent_display_name,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *applicationpermissionscope.Timeouts `hcl:"timeouts,block"`
}
type applicationPermissionScopeAttributes struct {
	ref terra.Reference
}

// AdminConsentDescription returns a reference to field admin_consent_description of azuread_application_permission_scope.
func (aps applicationPermissionScopeAttributes) AdminConsentDescription() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("admin_consent_description"))
}

// AdminConsentDisplayName returns a reference to field admin_consent_display_name of azuread_application_permission_scope.
func (aps applicationPermissionScopeAttributes) AdminConsentDisplayName() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("admin_consent_display_name"))
}

// ApplicationId returns a reference to field application_id of azuread_application_permission_scope.
func (aps applicationPermissionScopeAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("application_id"))
}

// Id returns a reference to field id of azuread_application_permission_scope.
func (aps applicationPermissionScopeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("id"))
}

// ScopeId returns a reference to field scope_id of azuread_application_permission_scope.
func (aps applicationPermissionScopeAttributes) ScopeId() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("scope_id"))
}

// Type returns a reference to field type of azuread_application_permission_scope.
func (aps applicationPermissionScopeAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("type"))
}

// UserConsentDescription returns a reference to field user_consent_description of azuread_application_permission_scope.
func (aps applicationPermissionScopeAttributes) UserConsentDescription() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("user_consent_description"))
}

// UserConsentDisplayName returns a reference to field user_consent_display_name of azuread_application_permission_scope.
func (aps applicationPermissionScopeAttributes) UserConsentDisplayName() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("user_consent_display_name"))
}

// Value returns a reference to field value of azuread_application_permission_scope.
func (aps applicationPermissionScopeAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("value"))
}

func (aps applicationPermissionScopeAttributes) Timeouts() applicationpermissionscope.TimeoutsAttributes {
	return terra.ReferenceAsSingle[applicationpermissionscope.TimeoutsAttributes](aps.ref.Append("timeouts"))
}

type applicationPermissionScopeState struct {
	AdminConsentDescription string                                    `json:"admin_consent_description"`
	AdminConsentDisplayName string                                    `json:"admin_consent_display_name"`
	ApplicationId           string                                    `json:"application_id"`
	Id                      string                                    `json:"id"`
	ScopeId                 string                                    `json:"scope_id"`
	Type                    string                                    `json:"type"`
	UserConsentDescription  string                                    `json:"user_consent_description"`
	UserConsentDisplayName  string                                    `json:"user_consent_display_name"`
	Value                   string                                    `json:"value"`
	Timeouts                *applicationpermissionscope.TimeoutsState `json:"timeouts"`
}
