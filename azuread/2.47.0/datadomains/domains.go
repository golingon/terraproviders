// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datadomains

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Domains struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DomainsAttributes struct {
	ref terra.Reference
}

func (d DomainsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DomainsAttributes) InternalWithRef(ref terra.Reference) DomainsAttributes {
	return DomainsAttributes{ref: ref}
}

func (d DomainsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DomainsAttributes) AdminManaged() terra.BoolValue {
	return terra.ReferenceAsBool(d.ref.Append("admin_managed"))
}

func (d DomainsAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("authentication_type"))
}

func (d DomainsAttributes) Default() terra.BoolValue {
	return terra.ReferenceAsBool(d.ref.Append("default"))
}

func (d DomainsAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("domain_name"))
}

func (d DomainsAttributes) Initial() terra.BoolValue {
	return terra.ReferenceAsBool(d.ref.Append("initial"))
}

func (d DomainsAttributes) Root() terra.BoolValue {
	return terra.ReferenceAsBool(d.ref.Append("root"))
}

func (d DomainsAttributes) SupportedServices() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](d.ref.Append("supported_services"))
}

func (d DomainsAttributes) Verified() terra.BoolValue {
	return terra.ReferenceAsBool(d.ref.Append("verified"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DomainsState struct {
	AdminManaged       bool     `json:"admin_managed"`
	AuthenticationType string   `json:"authentication_type"`
	Default            bool     `json:"default"`
	DomainName         string   `json:"domain_name"`
	Initial            bool     `json:"initial"`
	Root               bool     `json:"root"`
	SupportedServices  []string `json:"supported_services"`
	Verified           bool     `json:"verified"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
