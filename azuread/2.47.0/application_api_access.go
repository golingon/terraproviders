// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	applicationapiaccess "github.com/golingon/terraproviders/azuread/2.47.0/applicationapiaccess"
	"io"
)

// NewApplicationApiAccess creates a new instance of [ApplicationApiAccess].
func NewApplicationApiAccess(name string, args ApplicationApiAccessArgs) *ApplicationApiAccess {
	return &ApplicationApiAccess{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApplicationApiAccess)(nil)

// ApplicationApiAccess represents the Terraform resource azuread_application_api_access.
type ApplicationApiAccess struct {
	Name      string
	Args      ApplicationApiAccessArgs
	state     *applicationApiAccessState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApplicationApiAccess].
func (aaa *ApplicationApiAccess) Type() string {
	return "azuread_application_api_access"
}

// LocalName returns the local name for [ApplicationApiAccess].
func (aaa *ApplicationApiAccess) LocalName() string {
	return aaa.Name
}

// Configuration returns the configuration (args) for [ApplicationApiAccess].
func (aaa *ApplicationApiAccess) Configuration() interface{} {
	return aaa.Args
}

// DependOn is used for other resources to depend on [ApplicationApiAccess].
func (aaa *ApplicationApiAccess) DependOn() terra.Reference {
	return terra.ReferenceResource(aaa)
}

// Dependencies returns the list of resources [ApplicationApiAccess] depends_on.
func (aaa *ApplicationApiAccess) Dependencies() terra.Dependencies {
	return aaa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApplicationApiAccess].
func (aaa *ApplicationApiAccess) LifecycleManagement() *terra.Lifecycle {
	return aaa.Lifecycle
}

// Attributes returns the attributes for [ApplicationApiAccess].
func (aaa *ApplicationApiAccess) Attributes() applicationApiAccessAttributes {
	return applicationApiAccessAttributes{ref: terra.ReferenceResource(aaa)}
}

// ImportState imports the given attribute values into [ApplicationApiAccess]'s state.
func (aaa *ApplicationApiAccess) ImportState(av io.Reader) error {
	aaa.state = &applicationApiAccessState{}
	if err := json.NewDecoder(av).Decode(aaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaa.Type(), aaa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApplicationApiAccess] has state.
func (aaa *ApplicationApiAccess) State() (*applicationApiAccessState, bool) {
	return aaa.state, aaa.state != nil
}

// StateMust returns the state for [ApplicationApiAccess]. Panics if the state is nil.
func (aaa *ApplicationApiAccess) StateMust() *applicationApiAccessState {
	if aaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaa.Type(), aaa.LocalName()))
	}
	return aaa.state
}

// ApplicationApiAccessArgs contains the configurations for azuread_application_api_access.
type ApplicationApiAccessArgs struct {
	// ApiClientId: string, required
	ApiClientId terra.StringValue `hcl:"api_client_id,attr" validate:"required"`
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RoleIds: set of string, optional
	RoleIds terra.SetValue[terra.StringValue] `hcl:"role_ids,attr"`
	// ScopeIds: set of string, optional
	ScopeIds terra.SetValue[terra.StringValue] `hcl:"scope_ids,attr"`
	// Timeouts: optional
	Timeouts *applicationapiaccess.Timeouts `hcl:"timeouts,block"`
}
type applicationApiAccessAttributes struct {
	ref terra.Reference
}

// ApiClientId returns a reference to field api_client_id of azuread_application_api_access.
func (aaa applicationApiAccessAttributes) ApiClientId() terra.StringValue {
	return terra.ReferenceAsString(aaa.ref.Append("api_client_id"))
}

// ApplicationId returns a reference to field application_id of azuread_application_api_access.
func (aaa applicationApiAccessAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aaa.ref.Append("application_id"))
}

// Id returns a reference to field id of azuread_application_api_access.
func (aaa applicationApiAccessAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaa.ref.Append("id"))
}

// RoleIds returns a reference to field role_ids of azuread_application_api_access.
func (aaa applicationApiAccessAttributes) RoleIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aaa.ref.Append("role_ids"))
}

// ScopeIds returns a reference to field scope_ids of azuread_application_api_access.
func (aaa applicationApiAccessAttributes) ScopeIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aaa.ref.Append("scope_ids"))
}

func (aaa applicationApiAccessAttributes) Timeouts() applicationapiaccess.TimeoutsAttributes {
	return terra.ReferenceAsSingle[applicationapiaccess.TimeoutsAttributes](aaa.ref.Append("timeouts"))
}

type applicationApiAccessState struct {
	ApiClientId   string                              `json:"api_client_id"`
	ApplicationId string                              `json:"application_id"`
	Id            string                              `json:"id"`
	RoleIds       []string                            `json:"role_ids"`
	ScopeIds      []string                            `json:"scope_ids"`
	Timeouts      *applicationapiaccess.TimeoutsState `json:"timeouts"`
}
