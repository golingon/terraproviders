// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	authenticationstrengthpolicy "github.com/golingon/terraproviders/azuread/2.47.0/authenticationstrengthpolicy"
	"io"
)

// NewAuthenticationStrengthPolicy creates a new instance of [AuthenticationStrengthPolicy].
func NewAuthenticationStrengthPolicy(name string, args AuthenticationStrengthPolicyArgs) *AuthenticationStrengthPolicy {
	return &AuthenticationStrengthPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AuthenticationStrengthPolicy)(nil)

// AuthenticationStrengthPolicy represents the Terraform resource azuread_authentication_strength_policy.
type AuthenticationStrengthPolicy struct {
	Name      string
	Args      AuthenticationStrengthPolicyArgs
	state     *authenticationStrengthPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AuthenticationStrengthPolicy].
func (asp *AuthenticationStrengthPolicy) Type() string {
	return "azuread_authentication_strength_policy"
}

// LocalName returns the local name for [AuthenticationStrengthPolicy].
func (asp *AuthenticationStrengthPolicy) LocalName() string {
	return asp.Name
}

// Configuration returns the configuration (args) for [AuthenticationStrengthPolicy].
func (asp *AuthenticationStrengthPolicy) Configuration() interface{} {
	return asp.Args
}

// DependOn is used for other resources to depend on [AuthenticationStrengthPolicy].
func (asp *AuthenticationStrengthPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(asp)
}

// Dependencies returns the list of resources [AuthenticationStrengthPolicy] depends_on.
func (asp *AuthenticationStrengthPolicy) Dependencies() terra.Dependencies {
	return asp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AuthenticationStrengthPolicy].
func (asp *AuthenticationStrengthPolicy) LifecycleManagement() *terra.Lifecycle {
	return asp.Lifecycle
}

// Attributes returns the attributes for [AuthenticationStrengthPolicy].
func (asp *AuthenticationStrengthPolicy) Attributes() authenticationStrengthPolicyAttributes {
	return authenticationStrengthPolicyAttributes{ref: terra.ReferenceResource(asp)}
}

// ImportState imports the given attribute values into [AuthenticationStrengthPolicy]'s state.
func (asp *AuthenticationStrengthPolicy) ImportState(av io.Reader) error {
	asp.state = &authenticationStrengthPolicyState{}
	if err := json.NewDecoder(av).Decode(asp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asp.Type(), asp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AuthenticationStrengthPolicy] has state.
func (asp *AuthenticationStrengthPolicy) State() (*authenticationStrengthPolicyState, bool) {
	return asp.state, asp.state != nil
}

// StateMust returns the state for [AuthenticationStrengthPolicy]. Panics if the state is nil.
func (asp *AuthenticationStrengthPolicy) StateMust() *authenticationStrengthPolicyState {
	if asp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asp.Type(), asp.LocalName()))
	}
	return asp.state
}

// AuthenticationStrengthPolicyArgs contains the configurations for azuread_authentication_strength_policy.
type AuthenticationStrengthPolicyArgs struct {
	// AllowedCombinations: set of string, required
	AllowedCombinations terra.SetValue[terra.StringValue] `hcl:"allowed_combinations,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *authenticationstrengthpolicy.Timeouts `hcl:"timeouts,block"`
}
type authenticationStrengthPolicyAttributes struct {
	ref terra.Reference
}

// AllowedCombinations returns a reference to field allowed_combinations of azuread_authentication_strength_policy.
func (asp authenticationStrengthPolicyAttributes) AllowedCombinations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asp.ref.Append("allowed_combinations"))
}

// Description returns a reference to field description of azuread_authentication_strength_policy.
func (asp authenticationStrengthPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azuread_authentication_strength_policy.
func (asp authenticationStrengthPolicyAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("display_name"))
}

// Id returns a reference to field id of azuread_authentication_strength_policy.
func (asp authenticationStrengthPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("id"))
}

func (asp authenticationStrengthPolicyAttributes) Timeouts() authenticationstrengthpolicy.TimeoutsAttributes {
	return terra.ReferenceAsSingle[authenticationstrengthpolicy.TimeoutsAttributes](asp.ref.Append("timeouts"))
}

type authenticationStrengthPolicyState struct {
	AllowedCombinations []string                                    `json:"allowed_combinations"`
	Description         string                                      `json:"description"`
	DisplayName         string                                      `json:"display_name"`
	Id                  string                                      `json:"id"`
	Timeouts            *authenticationstrengthpolicy.TimeoutsState `json:"timeouts"`
}
