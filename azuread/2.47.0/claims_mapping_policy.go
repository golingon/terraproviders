// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewClaimsMappingPolicy creates a new instance of [ClaimsMappingPolicy].
func NewClaimsMappingPolicy(name string, args ClaimsMappingPolicyArgs) *ClaimsMappingPolicy {
	return &ClaimsMappingPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ClaimsMappingPolicy)(nil)

// ClaimsMappingPolicy represents the Terraform resource azuread_claims_mapping_policy.
type ClaimsMappingPolicy struct {
	Name      string
	Args      ClaimsMappingPolicyArgs
	state     *claimsMappingPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ClaimsMappingPolicy].
func (cmp *ClaimsMappingPolicy) Type() string {
	return "azuread_claims_mapping_policy"
}

// LocalName returns the local name for [ClaimsMappingPolicy].
func (cmp *ClaimsMappingPolicy) LocalName() string {
	return cmp.Name
}

// Configuration returns the configuration (args) for [ClaimsMappingPolicy].
func (cmp *ClaimsMappingPolicy) Configuration() interface{} {
	return cmp.Args
}

// DependOn is used for other resources to depend on [ClaimsMappingPolicy].
func (cmp *ClaimsMappingPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(cmp)
}

// Dependencies returns the list of resources [ClaimsMappingPolicy] depends_on.
func (cmp *ClaimsMappingPolicy) Dependencies() terra.Dependencies {
	return cmp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ClaimsMappingPolicy].
func (cmp *ClaimsMappingPolicy) LifecycleManagement() *terra.Lifecycle {
	return cmp.Lifecycle
}

// Attributes returns the attributes for [ClaimsMappingPolicy].
func (cmp *ClaimsMappingPolicy) Attributes() claimsMappingPolicyAttributes {
	return claimsMappingPolicyAttributes{ref: terra.ReferenceResource(cmp)}
}

// ImportState imports the given attribute values into [ClaimsMappingPolicy]'s state.
func (cmp *ClaimsMappingPolicy) ImportState(av io.Reader) error {
	cmp.state = &claimsMappingPolicyState{}
	if err := json.NewDecoder(av).Decode(cmp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cmp.Type(), cmp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ClaimsMappingPolicy] has state.
func (cmp *ClaimsMappingPolicy) State() (*claimsMappingPolicyState, bool) {
	return cmp.state, cmp.state != nil
}

// StateMust returns the state for [ClaimsMappingPolicy]. Panics if the state is nil.
func (cmp *ClaimsMappingPolicy) StateMust() *claimsMappingPolicyState {
	if cmp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cmp.Type(), cmp.LocalName()))
	}
	return cmp.state
}

// ClaimsMappingPolicyArgs contains the configurations for azuread_claims_mapping_policy.
type ClaimsMappingPolicyArgs struct {
	// Definition: list of string, required
	Definition terra.ListValue[terra.StringValue] `hcl:"definition,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}
type claimsMappingPolicyAttributes struct {
	ref terra.Reference
}

// Definition returns a reference to field definition of azuread_claims_mapping_policy.
func (cmp claimsMappingPolicyAttributes) Definition() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cmp.ref.Append("definition"))
}

// DisplayName returns a reference to field display_name of azuread_claims_mapping_policy.
func (cmp claimsMappingPolicyAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(cmp.ref.Append("display_name"))
}

// Id returns a reference to field id of azuread_claims_mapping_policy.
func (cmp claimsMappingPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cmp.ref.Append("id"))
}

type claimsMappingPolicyState struct {
	Definition  []string `json:"definition"`
	DisplayName string   `json:"display_name"`
	Id          string   `json:"id"`
}
