// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azuread

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	directoryroleeligibilityschedulerequest "github.com/golingon/terraproviders/azuread/2.47.0/directoryroleeligibilityschedulerequest"
	"io"
)

// NewDirectoryRoleEligibilityScheduleRequest creates a new instance of [DirectoryRoleEligibilityScheduleRequest].
func NewDirectoryRoleEligibilityScheduleRequest(name string, args DirectoryRoleEligibilityScheduleRequestArgs) *DirectoryRoleEligibilityScheduleRequest {
	return &DirectoryRoleEligibilityScheduleRequest{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DirectoryRoleEligibilityScheduleRequest)(nil)

// DirectoryRoleEligibilityScheduleRequest represents the Terraform resource azuread_directory_role_eligibility_schedule_request.
type DirectoryRoleEligibilityScheduleRequest struct {
	Name      string
	Args      DirectoryRoleEligibilityScheduleRequestArgs
	state     *directoryRoleEligibilityScheduleRequestState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DirectoryRoleEligibilityScheduleRequest].
func (dresr *DirectoryRoleEligibilityScheduleRequest) Type() string {
	return "azuread_directory_role_eligibility_schedule_request"
}

// LocalName returns the local name for [DirectoryRoleEligibilityScheduleRequest].
func (dresr *DirectoryRoleEligibilityScheduleRequest) LocalName() string {
	return dresr.Name
}

// Configuration returns the configuration (args) for [DirectoryRoleEligibilityScheduleRequest].
func (dresr *DirectoryRoleEligibilityScheduleRequest) Configuration() interface{} {
	return dresr.Args
}

// DependOn is used for other resources to depend on [DirectoryRoleEligibilityScheduleRequest].
func (dresr *DirectoryRoleEligibilityScheduleRequest) DependOn() terra.Reference {
	return terra.ReferenceResource(dresr)
}

// Dependencies returns the list of resources [DirectoryRoleEligibilityScheduleRequest] depends_on.
func (dresr *DirectoryRoleEligibilityScheduleRequest) Dependencies() terra.Dependencies {
	return dresr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DirectoryRoleEligibilityScheduleRequest].
func (dresr *DirectoryRoleEligibilityScheduleRequest) LifecycleManagement() *terra.Lifecycle {
	return dresr.Lifecycle
}

// Attributes returns the attributes for [DirectoryRoleEligibilityScheduleRequest].
func (dresr *DirectoryRoleEligibilityScheduleRequest) Attributes() directoryRoleEligibilityScheduleRequestAttributes {
	return directoryRoleEligibilityScheduleRequestAttributes{ref: terra.ReferenceResource(dresr)}
}

// ImportState imports the given attribute values into [DirectoryRoleEligibilityScheduleRequest]'s state.
func (dresr *DirectoryRoleEligibilityScheduleRequest) ImportState(av io.Reader) error {
	dresr.state = &directoryRoleEligibilityScheduleRequestState{}
	if err := json.NewDecoder(av).Decode(dresr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dresr.Type(), dresr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DirectoryRoleEligibilityScheduleRequest] has state.
func (dresr *DirectoryRoleEligibilityScheduleRequest) State() (*directoryRoleEligibilityScheduleRequestState, bool) {
	return dresr.state, dresr.state != nil
}

// StateMust returns the state for [DirectoryRoleEligibilityScheduleRequest]. Panics if the state is nil.
func (dresr *DirectoryRoleEligibilityScheduleRequest) StateMust() *directoryRoleEligibilityScheduleRequestState {
	if dresr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dresr.Type(), dresr.LocalName()))
	}
	return dresr.state
}

// DirectoryRoleEligibilityScheduleRequestArgs contains the configurations for azuread_directory_role_eligibility_schedule_request.
type DirectoryRoleEligibilityScheduleRequestArgs struct {
	// DirectoryScopeId: string, required
	DirectoryScopeId terra.StringValue `hcl:"directory_scope_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Justification: string, required
	Justification terra.StringValue `hcl:"justification,attr" validate:"required"`
	// PrincipalId: string, required
	PrincipalId terra.StringValue `hcl:"principal_id,attr" validate:"required"`
	// RoleDefinitionId: string, required
	RoleDefinitionId terra.StringValue `hcl:"role_definition_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *directoryroleeligibilityschedulerequest.Timeouts `hcl:"timeouts,block"`
}
type directoryRoleEligibilityScheduleRequestAttributes struct {
	ref terra.Reference
}

// DirectoryScopeId returns a reference to field directory_scope_id of azuread_directory_role_eligibility_schedule_request.
func (dresr directoryRoleEligibilityScheduleRequestAttributes) DirectoryScopeId() terra.StringValue {
	return terra.ReferenceAsString(dresr.ref.Append("directory_scope_id"))
}

// Id returns a reference to field id of azuread_directory_role_eligibility_schedule_request.
func (dresr directoryRoleEligibilityScheduleRequestAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dresr.ref.Append("id"))
}

// Justification returns a reference to field justification of azuread_directory_role_eligibility_schedule_request.
func (dresr directoryRoleEligibilityScheduleRequestAttributes) Justification() terra.StringValue {
	return terra.ReferenceAsString(dresr.ref.Append("justification"))
}

// PrincipalId returns a reference to field principal_id of azuread_directory_role_eligibility_schedule_request.
func (dresr directoryRoleEligibilityScheduleRequestAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(dresr.ref.Append("principal_id"))
}

// RoleDefinitionId returns a reference to field role_definition_id of azuread_directory_role_eligibility_schedule_request.
func (dresr directoryRoleEligibilityScheduleRequestAttributes) RoleDefinitionId() terra.StringValue {
	return terra.ReferenceAsString(dresr.ref.Append("role_definition_id"))
}

func (dresr directoryRoleEligibilityScheduleRequestAttributes) Timeouts() directoryroleeligibilityschedulerequest.TimeoutsAttributes {
	return terra.ReferenceAsSingle[directoryroleeligibilityschedulerequest.TimeoutsAttributes](dresr.ref.Append("timeouts"))
}

type directoryRoleEligibilityScheduleRequestState struct {
	DirectoryScopeId string                                                 `json:"directory_scope_id"`
	Id               string                                                 `json:"id"`
	Justification    string                                                 `json:"justification"`
	PrincipalId      string                                                 `json:"principal_id"`
	RoleDefinitionId string                                                 `json:"role_definition_id"`
	Timeouts         *directoryroleeligibilityschedulerequest.TimeoutsState `json:"timeouts"`
}
