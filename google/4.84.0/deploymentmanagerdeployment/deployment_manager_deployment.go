// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package deploymentmanagerdeployment

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Labels struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Target struct {
	// Config: required
	Config *Config `hcl:"config,block" validate:"required"`
	// Imports: min=0
	Imports []Imports `hcl:"imports,block" validate:"min=0"`
}

type Config struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
}

type Imports struct {
	// Content: string, optional
	Content terra.StringValue `hcl:"content,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type LabelsAttributes struct {
	ref terra.Reference
}

func (l LabelsAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LabelsAttributes) InternalWithRef(ref terra.Reference) LabelsAttributes {
	return LabelsAttributes{ref: ref}
}

func (l LabelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LabelsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("key"))
}

func (l LabelsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("value"))
}

type TargetAttributes struct {
	ref terra.Reference
}

func (t TargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TargetAttributes) InternalWithRef(ref terra.Reference) TargetAttributes {
	return TargetAttributes{ref: ref}
}

func (t TargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TargetAttributes) Config() terra.ListValue[ConfigAttributes] {
	return terra.ReferenceAsList[ConfigAttributes](t.ref.Append("config"))
}

func (t TargetAttributes) Imports() terra.ListValue[ImportsAttributes] {
	return terra.ReferenceAsList[ImportsAttributes](t.ref.Append("imports"))
}

type ConfigAttributes struct {
	ref terra.Reference
}

func (c ConfigAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigAttributes) InternalWithRef(ref terra.Reference) ConfigAttributes {
	return ConfigAttributes{ref: ref}
}

func (c ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("content"))
}

type ImportsAttributes struct {
	ref terra.Reference
}

func (i ImportsAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i ImportsAttributes) InternalWithRef(ref terra.Reference) ImportsAttributes {
	return ImportsAttributes{ref: ref}
}

func (i ImportsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i ImportsAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("content"))
}

func (i ImportsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type LabelsState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type TargetState struct {
	Config  []ConfigState  `json:"config"`
	Imports []ImportsState `json:"imports"`
}

type ConfigState struct {
	Content string `json:"content"`
}

type ImportsState struct {
	Content string `json:"content"`
	Name    string `json:"name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
