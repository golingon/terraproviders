// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	certificatemanagertrustconfig "github.com/golingon/terraproviders/google/4.84.0/certificatemanagertrustconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewCertificateManagerTrustConfig creates a new instance of [CertificateManagerTrustConfig].
func NewCertificateManagerTrustConfig(name string, args CertificateManagerTrustConfigArgs) *CertificateManagerTrustConfig {
	return &CertificateManagerTrustConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CertificateManagerTrustConfig)(nil)

// CertificateManagerTrustConfig represents the Terraform resource google_certificate_manager_trust_config.
type CertificateManagerTrustConfig struct {
	Name      string
	Args      CertificateManagerTrustConfigArgs
	state     *certificateManagerTrustConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CertificateManagerTrustConfig].
func (cmtc *CertificateManagerTrustConfig) Type() string {
	return "google_certificate_manager_trust_config"
}

// LocalName returns the local name for [CertificateManagerTrustConfig].
func (cmtc *CertificateManagerTrustConfig) LocalName() string {
	return cmtc.Name
}

// Configuration returns the configuration (args) for [CertificateManagerTrustConfig].
func (cmtc *CertificateManagerTrustConfig) Configuration() interface{} {
	return cmtc.Args
}

// DependOn is used for other resources to depend on [CertificateManagerTrustConfig].
func (cmtc *CertificateManagerTrustConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(cmtc)
}

// Dependencies returns the list of resources [CertificateManagerTrustConfig] depends_on.
func (cmtc *CertificateManagerTrustConfig) Dependencies() terra.Dependencies {
	return cmtc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CertificateManagerTrustConfig].
func (cmtc *CertificateManagerTrustConfig) LifecycleManagement() *terra.Lifecycle {
	return cmtc.Lifecycle
}

// Attributes returns the attributes for [CertificateManagerTrustConfig].
func (cmtc *CertificateManagerTrustConfig) Attributes() certificateManagerTrustConfigAttributes {
	return certificateManagerTrustConfigAttributes{ref: terra.ReferenceResource(cmtc)}
}

// ImportState imports the given attribute values into [CertificateManagerTrustConfig]'s state.
func (cmtc *CertificateManagerTrustConfig) ImportState(av io.Reader) error {
	cmtc.state = &certificateManagerTrustConfigState{}
	if err := json.NewDecoder(av).Decode(cmtc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cmtc.Type(), cmtc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CertificateManagerTrustConfig] has state.
func (cmtc *CertificateManagerTrustConfig) State() (*certificateManagerTrustConfigState, bool) {
	return cmtc.state, cmtc.state != nil
}

// StateMust returns the state for [CertificateManagerTrustConfig]. Panics if the state is nil.
func (cmtc *CertificateManagerTrustConfig) StateMust() *certificateManagerTrustConfigState {
	if cmtc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cmtc.Type(), cmtc.LocalName()))
	}
	return cmtc.state
}

// CertificateManagerTrustConfigArgs contains the configurations for google_certificate_manager_trust_config.
type CertificateManagerTrustConfigArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *certificatemanagertrustconfig.Timeouts `hcl:"timeouts,block"`
	// TrustStores: min=0
	TrustStores []certificatemanagertrustconfig.TrustStores `hcl:"trust_stores,block" validate:"min=0"`
}
type certificateManagerTrustConfigAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_certificate_manager_trust_config.
func (cmtc certificateManagerTrustConfigAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(cmtc.ref.Append("create_time"))
}

// Description returns a reference to field description of google_certificate_manager_trust_config.
func (cmtc certificateManagerTrustConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cmtc.ref.Append("description"))
}

// Id returns a reference to field id of google_certificate_manager_trust_config.
func (cmtc certificateManagerTrustConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cmtc.ref.Append("id"))
}

// Labels returns a reference to field labels of google_certificate_manager_trust_config.
func (cmtc certificateManagerTrustConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cmtc.ref.Append("labels"))
}

// Location returns a reference to field location of google_certificate_manager_trust_config.
func (cmtc certificateManagerTrustConfigAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(cmtc.ref.Append("location"))
}

// Name returns a reference to field name of google_certificate_manager_trust_config.
func (cmtc certificateManagerTrustConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cmtc.ref.Append("name"))
}

// Project returns a reference to field project of google_certificate_manager_trust_config.
func (cmtc certificateManagerTrustConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(cmtc.ref.Append("project"))
}

// UpdateTime returns a reference to field update_time of google_certificate_manager_trust_config.
func (cmtc certificateManagerTrustConfigAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(cmtc.ref.Append("update_time"))
}

func (cmtc certificateManagerTrustConfigAttributes) Timeouts() certificatemanagertrustconfig.TimeoutsAttributes {
	return terra.ReferenceAsSingle[certificatemanagertrustconfig.TimeoutsAttributes](cmtc.ref.Append("timeouts"))
}

func (cmtc certificateManagerTrustConfigAttributes) TrustStores() terra.ListValue[certificatemanagertrustconfig.TrustStoresAttributes] {
	return terra.ReferenceAsList[certificatemanagertrustconfig.TrustStoresAttributes](cmtc.ref.Append("trust_stores"))
}

type certificateManagerTrustConfigState struct {
	CreateTime  string                                           `json:"create_time"`
	Description string                                           `json:"description"`
	Id          string                                           `json:"id"`
	Labels      map[string]string                                `json:"labels"`
	Location    string                                           `json:"location"`
	Name        string                                           `json:"name"`
	Project     string                                           `json:"project"`
	UpdateTime  string                                           `json:"update_time"`
	Timeouts    *certificatemanagertrustconfig.TimeoutsState     `json:"timeouts"`
	TrustStores []certificatemanagertrustconfig.TrustStoresState `json:"trust_stores"`
}
