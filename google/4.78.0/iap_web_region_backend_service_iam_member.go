// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	iapwebregionbackendserviceiammember "github.com/golingon/terraproviders/google/4.78.0/iapwebregionbackendserviceiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewIapWebRegionBackendServiceIamMember creates a new instance of [IapWebRegionBackendServiceIamMember].
func NewIapWebRegionBackendServiceIamMember(name string, args IapWebRegionBackendServiceIamMemberArgs) *IapWebRegionBackendServiceIamMember {
	return &IapWebRegionBackendServiceIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IapWebRegionBackendServiceIamMember)(nil)

// IapWebRegionBackendServiceIamMember represents the Terraform resource google_iap_web_region_backend_service_iam_member.
type IapWebRegionBackendServiceIamMember struct {
	Name      string
	Args      IapWebRegionBackendServiceIamMemberArgs
	state     *iapWebRegionBackendServiceIamMemberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [IapWebRegionBackendServiceIamMember].
func (iwrbsim *IapWebRegionBackendServiceIamMember) Type() string {
	return "google_iap_web_region_backend_service_iam_member"
}

// LocalName returns the local name for [IapWebRegionBackendServiceIamMember].
func (iwrbsim *IapWebRegionBackendServiceIamMember) LocalName() string {
	return iwrbsim.Name
}

// Configuration returns the configuration (args) for [IapWebRegionBackendServiceIamMember].
func (iwrbsim *IapWebRegionBackendServiceIamMember) Configuration() interface{} {
	return iwrbsim.Args
}

// DependOn is used for other resources to depend on [IapWebRegionBackendServiceIamMember].
func (iwrbsim *IapWebRegionBackendServiceIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(iwrbsim)
}

// Dependencies returns the list of resources [IapWebRegionBackendServiceIamMember] depends_on.
func (iwrbsim *IapWebRegionBackendServiceIamMember) Dependencies() terra.Dependencies {
	return iwrbsim.DependsOn
}

// LifecycleManagement returns the lifecycle block for [IapWebRegionBackendServiceIamMember].
func (iwrbsim *IapWebRegionBackendServiceIamMember) LifecycleManagement() *terra.Lifecycle {
	return iwrbsim.Lifecycle
}

// Attributes returns the attributes for [IapWebRegionBackendServiceIamMember].
func (iwrbsim *IapWebRegionBackendServiceIamMember) Attributes() iapWebRegionBackendServiceIamMemberAttributes {
	return iapWebRegionBackendServiceIamMemberAttributes{ref: terra.ReferenceResource(iwrbsim)}
}

// ImportState imports the given attribute values into [IapWebRegionBackendServiceIamMember]'s state.
func (iwrbsim *IapWebRegionBackendServiceIamMember) ImportState(av io.Reader) error {
	iwrbsim.state = &iapWebRegionBackendServiceIamMemberState{}
	if err := json.NewDecoder(av).Decode(iwrbsim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iwrbsim.Type(), iwrbsim.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [IapWebRegionBackendServiceIamMember] has state.
func (iwrbsim *IapWebRegionBackendServiceIamMember) State() (*iapWebRegionBackendServiceIamMemberState, bool) {
	return iwrbsim.state, iwrbsim.state != nil
}

// StateMust returns the state for [IapWebRegionBackendServiceIamMember]. Panics if the state is nil.
func (iwrbsim *IapWebRegionBackendServiceIamMember) StateMust() *iapWebRegionBackendServiceIamMemberState {
	if iwrbsim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iwrbsim.Type(), iwrbsim.LocalName()))
	}
	return iwrbsim.state
}

// IapWebRegionBackendServiceIamMemberArgs contains the configurations for google_iap_web_region_backend_service_iam_member.
type IapWebRegionBackendServiceIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// WebRegionBackendService: string, required
	WebRegionBackendService terra.StringValue `hcl:"web_region_backend_service,attr" validate:"required"`
	// Condition: optional
	Condition *iapwebregionbackendserviceiammember.Condition `hcl:"condition,block"`
}
type iapWebRegionBackendServiceIamMemberAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_iap_web_region_backend_service_iam_member.
func (iwrbsim iapWebRegionBackendServiceIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(iwrbsim.ref.Append("etag"))
}

// Id returns a reference to field id of google_iap_web_region_backend_service_iam_member.
func (iwrbsim iapWebRegionBackendServiceIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(iwrbsim.ref.Append("id"))
}

// Member returns a reference to field member of google_iap_web_region_backend_service_iam_member.
func (iwrbsim iapWebRegionBackendServiceIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceAsString(iwrbsim.ref.Append("member"))
}

// Project returns a reference to field project of google_iap_web_region_backend_service_iam_member.
func (iwrbsim iapWebRegionBackendServiceIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(iwrbsim.ref.Append("project"))
}

// Region returns a reference to field region of google_iap_web_region_backend_service_iam_member.
func (iwrbsim iapWebRegionBackendServiceIamMemberAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(iwrbsim.ref.Append("region"))
}

// Role returns a reference to field role of google_iap_web_region_backend_service_iam_member.
func (iwrbsim iapWebRegionBackendServiceIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(iwrbsim.ref.Append("role"))
}

// WebRegionBackendService returns a reference to field web_region_backend_service of google_iap_web_region_backend_service_iam_member.
func (iwrbsim iapWebRegionBackendServiceIamMemberAttributes) WebRegionBackendService() terra.StringValue {
	return terra.ReferenceAsString(iwrbsim.ref.Append("web_region_backend_service"))
}

func (iwrbsim iapWebRegionBackendServiceIamMemberAttributes) Condition() terra.ListValue[iapwebregionbackendserviceiammember.ConditionAttributes] {
	return terra.ReferenceAsList[iapwebregionbackendserviceiammember.ConditionAttributes](iwrbsim.ref.Append("condition"))
}

type iapWebRegionBackendServiceIamMemberState struct {
	Etag                    string                                               `json:"etag"`
	Id                      string                                               `json:"id"`
	Member                  string                                               `json:"member"`
	Project                 string                                               `json:"project"`
	Region                  string                                               `json:"region"`
	Role                    string                                               `json:"role"`
	WebRegionBackendService string                                               `json:"web_region_backend_service"`
	Condition               []iapwebregionbackendserviceiammember.ConditionState `json:"condition"`
}
