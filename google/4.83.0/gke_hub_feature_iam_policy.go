// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGkeHubFeatureIamPolicy creates a new instance of [GkeHubFeatureIamPolicy].
func NewGkeHubFeatureIamPolicy(name string, args GkeHubFeatureIamPolicyArgs) *GkeHubFeatureIamPolicy {
	return &GkeHubFeatureIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeHubFeatureIamPolicy)(nil)

// GkeHubFeatureIamPolicy represents the Terraform resource google_gke_hub_feature_iam_policy.
type GkeHubFeatureIamPolicy struct {
	Name      string
	Args      GkeHubFeatureIamPolicyArgs
	state     *gkeHubFeatureIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GkeHubFeatureIamPolicy].
func (ghfip *GkeHubFeatureIamPolicy) Type() string {
	return "google_gke_hub_feature_iam_policy"
}

// LocalName returns the local name for [GkeHubFeatureIamPolicy].
func (ghfip *GkeHubFeatureIamPolicy) LocalName() string {
	return ghfip.Name
}

// Configuration returns the configuration (args) for [GkeHubFeatureIamPolicy].
func (ghfip *GkeHubFeatureIamPolicy) Configuration() interface{} {
	return ghfip.Args
}

// DependOn is used for other resources to depend on [GkeHubFeatureIamPolicy].
func (ghfip *GkeHubFeatureIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ghfip)
}

// Dependencies returns the list of resources [GkeHubFeatureIamPolicy] depends_on.
func (ghfip *GkeHubFeatureIamPolicy) Dependencies() terra.Dependencies {
	return ghfip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GkeHubFeatureIamPolicy].
func (ghfip *GkeHubFeatureIamPolicy) LifecycleManagement() *terra.Lifecycle {
	return ghfip.Lifecycle
}

// Attributes returns the attributes for [GkeHubFeatureIamPolicy].
func (ghfip *GkeHubFeatureIamPolicy) Attributes() gkeHubFeatureIamPolicyAttributes {
	return gkeHubFeatureIamPolicyAttributes{ref: terra.ReferenceResource(ghfip)}
}

// ImportState imports the given attribute values into [GkeHubFeatureIamPolicy]'s state.
func (ghfip *GkeHubFeatureIamPolicy) ImportState(av io.Reader) error {
	ghfip.state = &gkeHubFeatureIamPolicyState{}
	if err := json.NewDecoder(av).Decode(ghfip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ghfip.Type(), ghfip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GkeHubFeatureIamPolicy] has state.
func (ghfip *GkeHubFeatureIamPolicy) State() (*gkeHubFeatureIamPolicyState, bool) {
	return ghfip.state, ghfip.state != nil
}

// StateMust returns the state for [GkeHubFeatureIamPolicy]. Panics if the state is nil.
func (ghfip *GkeHubFeatureIamPolicy) StateMust() *gkeHubFeatureIamPolicyState {
	if ghfip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ghfip.Type(), ghfip.LocalName()))
	}
	return ghfip.state
}

// GkeHubFeatureIamPolicyArgs contains the configurations for google_gke_hub_feature_iam_policy.
type GkeHubFeatureIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}
type gkeHubFeatureIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_gke_hub_feature_iam_policy.
func (ghfip gkeHubFeatureIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(ghfip.ref.Append("etag"))
}

// Id returns a reference to field id of google_gke_hub_feature_iam_policy.
func (ghfip gkeHubFeatureIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ghfip.ref.Append("id"))
}

// Location returns a reference to field location of google_gke_hub_feature_iam_policy.
func (ghfip gkeHubFeatureIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ghfip.ref.Append("location"))
}

// Name returns a reference to field name of google_gke_hub_feature_iam_policy.
func (ghfip gkeHubFeatureIamPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ghfip.ref.Append("name"))
}

// PolicyData returns a reference to field policy_data of google_gke_hub_feature_iam_policy.
func (ghfip gkeHubFeatureIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(ghfip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_gke_hub_feature_iam_policy.
func (ghfip gkeHubFeatureIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ghfip.ref.Append("project"))
}

type gkeHubFeatureIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Location   string `json:"location"`
	Name       string `json:"name"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
}
