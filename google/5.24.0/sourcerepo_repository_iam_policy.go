// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewSourcerepoRepositoryIamPolicy creates a new instance of [SourcerepoRepositoryIamPolicy].
func NewSourcerepoRepositoryIamPolicy(name string, args SourcerepoRepositoryIamPolicyArgs) *SourcerepoRepositoryIamPolicy {
	return &SourcerepoRepositoryIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SourcerepoRepositoryIamPolicy)(nil)

// SourcerepoRepositoryIamPolicy represents the Terraform resource google_sourcerepo_repository_iam_policy.
type SourcerepoRepositoryIamPolicy struct {
	Name      string
	Args      SourcerepoRepositoryIamPolicyArgs
	state     *sourcerepoRepositoryIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SourcerepoRepositoryIamPolicy].
func (srip *SourcerepoRepositoryIamPolicy) Type() string {
	return "google_sourcerepo_repository_iam_policy"
}

// LocalName returns the local name for [SourcerepoRepositoryIamPolicy].
func (srip *SourcerepoRepositoryIamPolicy) LocalName() string {
	return srip.Name
}

// Configuration returns the configuration (args) for [SourcerepoRepositoryIamPolicy].
func (srip *SourcerepoRepositoryIamPolicy) Configuration() interface{} {
	return srip.Args
}

// DependOn is used for other resources to depend on [SourcerepoRepositoryIamPolicy].
func (srip *SourcerepoRepositoryIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(srip)
}

// Dependencies returns the list of resources [SourcerepoRepositoryIamPolicy] depends_on.
func (srip *SourcerepoRepositoryIamPolicy) Dependencies() terra.Dependencies {
	return srip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SourcerepoRepositoryIamPolicy].
func (srip *SourcerepoRepositoryIamPolicy) LifecycleManagement() *terra.Lifecycle {
	return srip.Lifecycle
}

// Attributes returns the attributes for [SourcerepoRepositoryIamPolicy].
func (srip *SourcerepoRepositoryIamPolicy) Attributes() sourcerepoRepositoryIamPolicyAttributes {
	return sourcerepoRepositoryIamPolicyAttributes{ref: terra.ReferenceResource(srip)}
}

// ImportState imports the given attribute values into [SourcerepoRepositoryIamPolicy]'s state.
func (srip *SourcerepoRepositoryIamPolicy) ImportState(av io.Reader) error {
	srip.state = &sourcerepoRepositoryIamPolicyState{}
	if err := json.NewDecoder(av).Decode(srip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", srip.Type(), srip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SourcerepoRepositoryIamPolicy] has state.
func (srip *SourcerepoRepositoryIamPolicy) State() (*sourcerepoRepositoryIamPolicyState, bool) {
	return srip.state, srip.state != nil
}

// StateMust returns the state for [SourcerepoRepositoryIamPolicy]. Panics if the state is nil.
func (srip *SourcerepoRepositoryIamPolicy) StateMust() *sourcerepoRepositoryIamPolicyState {
	if srip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", srip.Type(), srip.LocalName()))
	}
	return srip.state
}

// SourcerepoRepositoryIamPolicyArgs contains the configurations for google_sourcerepo_repository_iam_policy.
type SourcerepoRepositoryIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
}
type sourcerepoRepositoryIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_sourcerepo_repository_iam_policy.
func (srip sourcerepoRepositoryIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(srip.ref.Append("etag"))
}

// Id returns a reference to field id of google_sourcerepo_repository_iam_policy.
func (srip sourcerepoRepositoryIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(srip.ref.Append("id"))
}

// PolicyData returns a reference to field policy_data of google_sourcerepo_repository_iam_policy.
func (srip sourcerepoRepositoryIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(srip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_sourcerepo_repository_iam_policy.
func (srip sourcerepoRepositoryIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(srip.ref.Append("project"))
}

// Repository returns a reference to field repository of google_sourcerepo_repository_iam_policy.
func (srip sourcerepoRepositoryIamPolicyAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(srip.ref.Append("repository"))
}

type sourcerepoRepositoryIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	Repository string `json:"repository"`
}
