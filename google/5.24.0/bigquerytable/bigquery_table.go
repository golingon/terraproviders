// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package bigquerytable

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EncryptionConfiguration struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type ExternalDataConfiguration struct {
	// Autodetect: bool, required
	Autodetect terra.BoolValue `hcl:"autodetect,attr" validate:"required"`
	// Compression: string, optional
	Compression terra.StringValue `hcl:"compression,attr"`
	// ConnectionId: string, optional
	ConnectionId terra.StringValue `hcl:"connection_id,attr"`
	// FileSetSpecType: string, optional
	FileSetSpecType terra.StringValue `hcl:"file_set_spec_type,attr"`
	// IgnoreUnknownValues: bool, optional
	IgnoreUnknownValues terra.BoolValue `hcl:"ignore_unknown_values,attr"`
	// JsonExtension: string, optional
	JsonExtension terra.StringValue `hcl:"json_extension,attr"`
	// MaxBadRecords: number, optional
	MaxBadRecords terra.NumberValue `hcl:"max_bad_records,attr"`
	// MetadataCacheMode: string, optional
	MetadataCacheMode terra.StringValue `hcl:"metadata_cache_mode,attr"`
	// ObjectMetadata: string, optional
	ObjectMetadata terra.StringValue `hcl:"object_metadata,attr"`
	// ReferenceFileSchemaUri: string, optional
	ReferenceFileSchemaUri terra.StringValue `hcl:"reference_file_schema_uri,attr"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
	// SourceFormat: string, optional
	SourceFormat terra.StringValue `hcl:"source_format,attr"`
	// SourceUris: list of string, required
	SourceUris terra.ListValue[terra.StringValue] `hcl:"source_uris,attr" validate:"required"`
	// AvroOptions: optional
	AvroOptions *AvroOptions `hcl:"avro_options,block"`
	// CsvOptions: optional
	CsvOptions *CsvOptions `hcl:"csv_options,block"`
	// GoogleSheetsOptions: optional
	GoogleSheetsOptions *GoogleSheetsOptions `hcl:"google_sheets_options,block"`
	// HivePartitioningOptions: optional
	HivePartitioningOptions *HivePartitioningOptions `hcl:"hive_partitioning_options,block"`
	// JsonOptions: optional
	JsonOptions *JsonOptions `hcl:"json_options,block"`
	// ParquetOptions: optional
	ParquetOptions *ParquetOptions `hcl:"parquet_options,block"`
}

type AvroOptions struct {
	// UseAvroLogicalTypes: bool, required
	UseAvroLogicalTypes terra.BoolValue `hcl:"use_avro_logical_types,attr" validate:"required"`
}

type CsvOptions struct {
	// AllowJaggedRows: bool, optional
	AllowJaggedRows terra.BoolValue `hcl:"allow_jagged_rows,attr"`
	// AllowQuotedNewlines: bool, optional
	AllowQuotedNewlines terra.BoolValue `hcl:"allow_quoted_newlines,attr"`
	// Encoding: string, optional
	Encoding terra.StringValue `hcl:"encoding,attr"`
	// FieldDelimiter: string, optional
	FieldDelimiter terra.StringValue `hcl:"field_delimiter,attr"`
	// Quote: string, required
	Quote terra.StringValue `hcl:"quote,attr" validate:"required"`
	// SkipLeadingRows: number, optional
	SkipLeadingRows terra.NumberValue `hcl:"skip_leading_rows,attr"`
}

type GoogleSheetsOptions struct {
	// Range: string, optional
	Range terra.StringValue `hcl:"range,attr"`
	// SkipLeadingRows: number, optional
	SkipLeadingRows terra.NumberValue `hcl:"skip_leading_rows,attr"`
}

type HivePartitioningOptions struct {
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// RequirePartitionFilter: bool, optional
	RequirePartitionFilter terra.BoolValue `hcl:"require_partition_filter,attr"`
	// SourceUriPrefix: string, optional
	SourceUriPrefix terra.StringValue `hcl:"source_uri_prefix,attr"`
}

type JsonOptions struct {
	// Encoding: string, optional
	Encoding terra.StringValue `hcl:"encoding,attr"`
}

type ParquetOptions struct {
	// EnableListInference: bool, optional
	EnableListInference terra.BoolValue `hcl:"enable_list_inference,attr"`
	// EnumAsString: bool, optional
	EnumAsString terra.BoolValue `hcl:"enum_as_string,attr"`
}

type MaterializedView struct {
	// AllowNonIncrementalDefinition: bool, optional
	AllowNonIncrementalDefinition terra.BoolValue `hcl:"allow_non_incremental_definition,attr"`
	// EnableRefresh: bool, optional
	EnableRefresh terra.BoolValue `hcl:"enable_refresh,attr"`
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// RefreshIntervalMs: number, optional
	RefreshIntervalMs terra.NumberValue `hcl:"refresh_interval_ms,attr"`
}

type RangePartitioning struct {
	// Field: string, required
	Field terra.StringValue `hcl:"field,attr" validate:"required"`
	// Range: required
	Range *Range `hcl:"range,block" validate:"required"`
}

type Range struct {
	// End: number, required
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// Start: number, required
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type TableConstraints struct {
	// ForeignKeys: min=0
	ForeignKeys []ForeignKeys `hcl:"foreign_keys,block" validate:"min=0"`
	// PrimaryKey: optional
	PrimaryKey *PrimaryKey `hcl:"primary_key,block"`
}

type ForeignKeys struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// ColumnReferences: required
	ColumnReferences *ColumnReferences `hcl:"column_references,block" validate:"required"`
	// ReferencedTable: required
	ReferencedTable *ReferencedTable `hcl:"referenced_table,block" validate:"required"`
}

type ColumnReferences struct {
	// ReferencedColumn: string, required
	ReferencedColumn terra.StringValue `hcl:"referenced_column,attr" validate:"required"`
	// ReferencingColumn: string, required
	ReferencingColumn terra.StringValue `hcl:"referencing_column,attr" validate:"required"`
}

type ReferencedTable struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
}

type PrimaryKey struct {
	// Columns: list of string, required
	Columns terra.ListValue[terra.StringValue] `hcl:"columns,attr" validate:"required"`
}

type TableReplicationInfo struct {
	// ReplicationIntervalMs: number, optional
	ReplicationIntervalMs terra.NumberValue `hcl:"replication_interval_ms,attr"`
	// SourceDatasetId: string, required
	SourceDatasetId terra.StringValue `hcl:"source_dataset_id,attr" validate:"required"`
	// SourceProjectId: string, required
	SourceProjectId terra.StringValue `hcl:"source_project_id,attr" validate:"required"`
	// SourceTableId: string, required
	SourceTableId terra.StringValue `hcl:"source_table_id,attr" validate:"required"`
}

type TimePartitioning struct {
	// ExpirationMs: number, optional
	ExpirationMs terra.NumberValue `hcl:"expiration_ms,attr"`
	// Field: string, optional
	Field terra.StringValue `hcl:"field,attr"`
	// RequirePartitionFilter: bool, optional
	RequirePartitionFilter terra.BoolValue `hcl:"require_partition_filter,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type View struct {
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// UseLegacySql: bool, optional
	UseLegacySql terra.BoolValue `hcl:"use_legacy_sql,attr"`
}

type EncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec EncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) EncryptionConfigurationAttributes {
	return EncryptionConfigurationAttributes{ref: ref}
}

func (ec EncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EncryptionConfigurationAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key_name"))
}

func (ec EncryptionConfigurationAttributes) KmsKeyVersion() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key_version"))
}

type ExternalDataConfigurationAttributes struct {
	ref terra.Reference
}

func (edc ExternalDataConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return edc.ref, nil
}

func (edc ExternalDataConfigurationAttributes) InternalWithRef(ref terra.Reference) ExternalDataConfigurationAttributes {
	return ExternalDataConfigurationAttributes{ref: ref}
}

func (edc ExternalDataConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return edc.ref.InternalTokens()
}

func (edc ExternalDataConfigurationAttributes) Autodetect() terra.BoolValue {
	return terra.ReferenceAsBool(edc.ref.Append("autodetect"))
}

func (edc ExternalDataConfigurationAttributes) Compression() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("compression"))
}

func (edc ExternalDataConfigurationAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("connection_id"))
}

func (edc ExternalDataConfigurationAttributes) FileSetSpecType() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("file_set_spec_type"))
}

func (edc ExternalDataConfigurationAttributes) IgnoreUnknownValues() terra.BoolValue {
	return terra.ReferenceAsBool(edc.ref.Append("ignore_unknown_values"))
}

func (edc ExternalDataConfigurationAttributes) JsonExtension() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("json_extension"))
}

func (edc ExternalDataConfigurationAttributes) MaxBadRecords() terra.NumberValue {
	return terra.ReferenceAsNumber(edc.ref.Append("max_bad_records"))
}

func (edc ExternalDataConfigurationAttributes) MetadataCacheMode() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("metadata_cache_mode"))
}

func (edc ExternalDataConfigurationAttributes) ObjectMetadata() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("object_metadata"))
}

func (edc ExternalDataConfigurationAttributes) ReferenceFileSchemaUri() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("reference_file_schema_uri"))
}

func (edc ExternalDataConfigurationAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("schema"))
}

func (edc ExternalDataConfigurationAttributes) SourceFormat() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("source_format"))
}

func (edc ExternalDataConfigurationAttributes) SourceUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](edc.ref.Append("source_uris"))
}

func (edc ExternalDataConfigurationAttributes) AvroOptions() terra.ListValue[AvroOptionsAttributes] {
	return terra.ReferenceAsList[AvroOptionsAttributes](edc.ref.Append("avro_options"))
}

func (edc ExternalDataConfigurationAttributes) CsvOptions() terra.ListValue[CsvOptionsAttributes] {
	return terra.ReferenceAsList[CsvOptionsAttributes](edc.ref.Append("csv_options"))
}

func (edc ExternalDataConfigurationAttributes) GoogleSheetsOptions() terra.ListValue[GoogleSheetsOptionsAttributes] {
	return terra.ReferenceAsList[GoogleSheetsOptionsAttributes](edc.ref.Append("google_sheets_options"))
}

func (edc ExternalDataConfigurationAttributes) HivePartitioningOptions() terra.ListValue[HivePartitioningOptionsAttributes] {
	return terra.ReferenceAsList[HivePartitioningOptionsAttributes](edc.ref.Append("hive_partitioning_options"))
}

func (edc ExternalDataConfigurationAttributes) JsonOptions() terra.ListValue[JsonOptionsAttributes] {
	return terra.ReferenceAsList[JsonOptionsAttributes](edc.ref.Append("json_options"))
}

func (edc ExternalDataConfigurationAttributes) ParquetOptions() terra.ListValue[ParquetOptionsAttributes] {
	return terra.ReferenceAsList[ParquetOptionsAttributes](edc.ref.Append("parquet_options"))
}

type AvroOptionsAttributes struct {
	ref terra.Reference
}

func (ao AvroOptionsAttributes) InternalRef() (terra.Reference, error) {
	return ao.ref, nil
}

func (ao AvroOptionsAttributes) InternalWithRef(ref terra.Reference) AvroOptionsAttributes {
	return AvroOptionsAttributes{ref: ref}
}

func (ao AvroOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ao.ref.InternalTokens()
}

func (ao AvroOptionsAttributes) UseAvroLogicalTypes() terra.BoolValue {
	return terra.ReferenceAsBool(ao.ref.Append("use_avro_logical_types"))
}

type CsvOptionsAttributes struct {
	ref terra.Reference
}

func (co CsvOptionsAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co CsvOptionsAttributes) InternalWithRef(ref terra.Reference) CsvOptionsAttributes {
	return CsvOptionsAttributes{ref: ref}
}

func (co CsvOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co CsvOptionsAttributes) AllowJaggedRows() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("allow_jagged_rows"))
}

func (co CsvOptionsAttributes) AllowQuotedNewlines() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("allow_quoted_newlines"))
}

func (co CsvOptionsAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("encoding"))
}

func (co CsvOptionsAttributes) FieldDelimiter() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("field_delimiter"))
}

func (co CsvOptionsAttributes) Quote() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("quote"))
}

func (co CsvOptionsAttributes) SkipLeadingRows() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("skip_leading_rows"))
}

type GoogleSheetsOptionsAttributes struct {
	ref terra.Reference
}

func (gso GoogleSheetsOptionsAttributes) InternalRef() (terra.Reference, error) {
	return gso.ref, nil
}

func (gso GoogleSheetsOptionsAttributes) InternalWithRef(ref terra.Reference) GoogleSheetsOptionsAttributes {
	return GoogleSheetsOptionsAttributes{ref: ref}
}

func (gso GoogleSheetsOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gso.ref.InternalTokens()
}

func (gso GoogleSheetsOptionsAttributes) Range() terra.StringValue {
	return terra.ReferenceAsString(gso.ref.Append("range"))
}

func (gso GoogleSheetsOptionsAttributes) SkipLeadingRows() terra.NumberValue {
	return terra.ReferenceAsNumber(gso.ref.Append("skip_leading_rows"))
}

type HivePartitioningOptionsAttributes struct {
	ref terra.Reference
}

func (hpo HivePartitioningOptionsAttributes) InternalRef() (terra.Reference, error) {
	return hpo.ref, nil
}

func (hpo HivePartitioningOptionsAttributes) InternalWithRef(ref terra.Reference) HivePartitioningOptionsAttributes {
	return HivePartitioningOptionsAttributes{ref: ref}
}

func (hpo HivePartitioningOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hpo.ref.InternalTokens()
}

func (hpo HivePartitioningOptionsAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(hpo.ref.Append("mode"))
}

func (hpo HivePartitioningOptionsAttributes) RequirePartitionFilter() terra.BoolValue {
	return terra.ReferenceAsBool(hpo.ref.Append("require_partition_filter"))
}

func (hpo HivePartitioningOptionsAttributes) SourceUriPrefix() terra.StringValue {
	return terra.ReferenceAsString(hpo.ref.Append("source_uri_prefix"))
}

type JsonOptionsAttributes struct {
	ref terra.Reference
}

func (jo JsonOptionsAttributes) InternalRef() (terra.Reference, error) {
	return jo.ref, nil
}

func (jo JsonOptionsAttributes) InternalWithRef(ref terra.Reference) JsonOptionsAttributes {
	return JsonOptionsAttributes{ref: ref}
}

func (jo JsonOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jo.ref.InternalTokens()
}

func (jo JsonOptionsAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(jo.ref.Append("encoding"))
}

type ParquetOptionsAttributes struct {
	ref terra.Reference
}

func (po ParquetOptionsAttributes) InternalRef() (terra.Reference, error) {
	return po.ref, nil
}

func (po ParquetOptionsAttributes) InternalWithRef(ref terra.Reference) ParquetOptionsAttributes {
	return ParquetOptionsAttributes{ref: ref}
}

func (po ParquetOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return po.ref.InternalTokens()
}

func (po ParquetOptionsAttributes) EnableListInference() terra.BoolValue {
	return terra.ReferenceAsBool(po.ref.Append("enable_list_inference"))
}

func (po ParquetOptionsAttributes) EnumAsString() terra.BoolValue {
	return terra.ReferenceAsBool(po.ref.Append("enum_as_string"))
}

type MaterializedViewAttributes struct {
	ref terra.Reference
}

func (mv MaterializedViewAttributes) InternalRef() (terra.Reference, error) {
	return mv.ref, nil
}

func (mv MaterializedViewAttributes) InternalWithRef(ref terra.Reference) MaterializedViewAttributes {
	return MaterializedViewAttributes{ref: ref}
}

func (mv MaterializedViewAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mv.ref.InternalTokens()
}

func (mv MaterializedViewAttributes) AllowNonIncrementalDefinition() terra.BoolValue {
	return terra.ReferenceAsBool(mv.ref.Append("allow_non_incremental_definition"))
}

func (mv MaterializedViewAttributes) EnableRefresh() terra.BoolValue {
	return terra.ReferenceAsBool(mv.ref.Append("enable_refresh"))
}

func (mv MaterializedViewAttributes) Query() terra.StringValue {
	return terra.ReferenceAsString(mv.ref.Append("query"))
}

func (mv MaterializedViewAttributes) RefreshIntervalMs() terra.NumberValue {
	return terra.ReferenceAsNumber(mv.ref.Append("refresh_interval_ms"))
}

type RangePartitioningAttributes struct {
	ref terra.Reference
}

func (rp RangePartitioningAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RangePartitioningAttributes) InternalWithRef(ref terra.Reference) RangePartitioningAttributes {
	return RangePartitioningAttributes{ref: ref}
}

func (rp RangePartitioningAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RangePartitioningAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("field"))
}

func (rp RangePartitioningAttributes) Range() terra.ListValue[RangeAttributes] {
	return terra.ReferenceAsList[RangeAttributes](rp.ref.Append("range"))
}

type RangeAttributes struct {
	ref terra.Reference
}

func (r RangeAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RangeAttributes) InternalWithRef(ref terra.Reference) RangeAttributes {
	return RangeAttributes{ref: ref}
}

func (r RangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RangeAttributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("end"))
}

func (r RangeAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("interval"))
}

func (r RangeAttributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start"))
}

type TableConstraintsAttributes struct {
	ref terra.Reference
}

func (tc TableConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TableConstraintsAttributes) InternalWithRef(ref terra.Reference) TableConstraintsAttributes {
	return TableConstraintsAttributes{ref: ref}
}

func (tc TableConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TableConstraintsAttributes) ForeignKeys() terra.ListValue[ForeignKeysAttributes] {
	return terra.ReferenceAsList[ForeignKeysAttributes](tc.ref.Append("foreign_keys"))
}

func (tc TableConstraintsAttributes) PrimaryKey() terra.ListValue[PrimaryKeyAttributes] {
	return terra.ReferenceAsList[PrimaryKeyAttributes](tc.ref.Append("primary_key"))
}

type ForeignKeysAttributes struct {
	ref terra.Reference
}

func (fk ForeignKeysAttributes) InternalRef() (terra.Reference, error) {
	return fk.ref, nil
}

func (fk ForeignKeysAttributes) InternalWithRef(ref terra.Reference) ForeignKeysAttributes {
	return ForeignKeysAttributes{ref: ref}
}

func (fk ForeignKeysAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fk.ref.InternalTokens()
}

func (fk ForeignKeysAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fk.ref.Append("name"))
}

func (fk ForeignKeysAttributes) ColumnReferences() terra.ListValue[ColumnReferencesAttributes] {
	return terra.ReferenceAsList[ColumnReferencesAttributes](fk.ref.Append("column_references"))
}

func (fk ForeignKeysAttributes) ReferencedTable() terra.ListValue[ReferencedTableAttributes] {
	return terra.ReferenceAsList[ReferencedTableAttributes](fk.ref.Append("referenced_table"))
}

type ColumnReferencesAttributes struct {
	ref terra.Reference
}

func (cr ColumnReferencesAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr ColumnReferencesAttributes) InternalWithRef(ref terra.Reference) ColumnReferencesAttributes {
	return ColumnReferencesAttributes{ref: ref}
}

func (cr ColumnReferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr ColumnReferencesAttributes) ReferencedColumn() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("referenced_column"))
}

func (cr ColumnReferencesAttributes) ReferencingColumn() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("referencing_column"))
}

type ReferencedTableAttributes struct {
	ref terra.Reference
}

func (rt ReferencedTableAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt ReferencedTableAttributes) InternalWithRef(ref terra.Reference) ReferencedTableAttributes {
	return ReferencedTableAttributes{ref: ref}
}

func (rt ReferencedTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt ReferencedTableAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("dataset_id"))
}

func (rt ReferencedTableAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("project_id"))
}

func (rt ReferencedTableAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("table_id"))
}

type PrimaryKeyAttributes struct {
	ref terra.Reference
}

func (pk PrimaryKeyAttributes) InternalRef() (terra.Reference, error) {
	return pk.ref, nil
}

func (pk PrimaryKeyAttributes) InternalWithRef(ref terra.Reference) PrimaryKeyAttributes {
	return PrimaryKeyAttributes{ref: ref}
}

func (pk PrimaryKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pk.ref.InternalTokens()
}

func (pk PrimaryKeyAttributes) Columns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pk.ref.Append("columns"))
}

type TableReplicationInfoAttributes struct {
	ref terra.Reference
}

func (tri TableReplicationInfoAttributes) InternalRef() (terra.Reference, error) {
	return tri.ref, nil
}

func (tri TableReplicationInfoAttributes) InternalWithRef(ref terra.Reference) TableReplicationInfoAttributes {
	return TableReplicationInfoAttributes{ref: ref}
}

func (tri TableReplicationInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tri.ref.InternalTokens()
}

func (tri TableReplicationInfoAttributes) ReplicationIntervalMs() terra.NumberValue {
	return terra.ReferenceAsNumber(tri.ref.Append("replication_interval_ms"))
}

func (tri TableReplicationInfoAttributes) SourceDatasetId() terra.StringValue {
	return terra.ReferenceAsString(tri.ref.Append("source_dataset_id"))
}

func (tri TableReplicationInfoAttributes) SourceProjectId() terra.StringValue {
	return terra.ReferenceAsString(tri.ref.Append("source_project_id"))
}

func (tri TableReplicationInfoAttributes) SourceTableId() terra.StringValue {
	return terra.ReferenceAsString(tri.ref.Append("source_table_id"))
}

type TimePartitioningAttributes struct {
	ref terra.Reference
}

func (tp TimePartitioningAttributes) InternalRef() (terra.Reference, error) {
	return tp.ref, nil
}

func (tp TimePartitioningAttributes) InternalWithRef(ref terra.Reference) TimePartitioningAttributes {
	return TimePartitioningAttributes{ref: ref}
}

func (tp TimePartitioningAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tp.ref.InternalTokens()
}

func (tp TimePartitioningAttributes) ExpirationMs() terra.NumberValue {
	return terra.ReferenceAsNumber(tp.ref.Append("expiration_ms"))
}

func (tp TimePartitioningAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("field"))
}

func (tp TimePartitioningAttributes) RequirePartitionFilter() terra.BoolValue {
	return terra.ReferenceAsBool(tp.ref.Append("require_partition_filter"))
}

func (tp TimePartitioningAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("type"))
}

type ViewAttributes struct {
	ref terra.Reference
}

func (v ViewAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ViewAttributes) InternalWithRef(ref terra.Reference) ViewAttributes {
	return ViewAttributes{ref: ref}
}

func (v ViewAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ViewAttributes) Query() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("query"))
}

func (v ViewAttributes) UseLegacySql() terra.BoolValue {
	return terra.ReferenceAsBool(v.ref.Append("use_legacy_sql"))
}

type EncryptionConfigurationState struct {
	KmsKeyName    string `json:"kms_key_name"`
	KmsKeyVersion string `json:"kms_key_version"`
}

type ExternalDataConfigurationState struct {
	Autodetect              bool                           `json:"autodetect"`
	Compression             string                         `json:"compression"`
	ConnectionId            string                         `json:"connection_id"`
	FileSetSpecType         string                         `json:"file_set_spec_type"`
	IgnoreUnknownValues     bool                           `json:"ignore_unknown_values"`
	JsonExtension           string                         `json:"json_extension"`
	MaxBadRecords           float64                        `json:"max_bad_records"`
	MetadataCacheMode       string                         `json:"metadata_cache_mode"`
	ObjectMetadata          string                         `json:"object_metadata"`
	ReferenceFileSchemaUri  string                         `json:"reference_file_schema_uri"`
	Schema                  string                         `json:"schema"`
	SourceFormat            string                         `json:"source_format"`
	SourceUris              []string                       `json:"source_uris"`
	AvroOptions             []AvroOptionsState             `json:"avro_options"`
	CsvOptions              []CsvOptionsState              `json:"csv_options"`
	GoogleSheetsOptions     []GoogleSheetsOptionsState     `json:"google_sheets_options"`
	HivePartitioningOptions []HivePartitioningOptionsState `json:"hive_partitioning_options"`
	JsonOptions             []JsonOptionsState             `json:"json_options"`
	ParquetOptions          []ParquetOptionsState          `json:"parquet_options"`
}

type AvroOptionsState struct {
	UseAvroLogicalTypes bool `json:"use_avro_logical_types"`
}

type CsvOptionsState struct {
	AllowJaggedRows     bool    `json:"allow_jagged_rows"`
	AllowQuotedNewlines bool    `json:"allow_quoted_newlines"`
	Encoding            string  `json:"encoding"`
	FieldDelimiter      string  `json:"field_delimiter"`
	Quote               string  `json:"quote"`
	SkipLeadingRows     float64 `json:"skip_leading_rows"`
}

type GoogleSheetsOptionsState struct {
	Range           string  `json:"range"`
	SkipLeadingRows float64 `json:"skip_leading_rows"`
}

type HivePartitioningOptionsState struct {
	Mode                   string `json:"mode"`
	RequirePartitionFilter bool   `json:"require_partition_filter"`
	SourceUriPrefix        string `json:"source_uri_prefix"`
}

type JsonOptionsState struct {
	Encoding string `json:"encoding"`
}

type ParquetOptionsState struct {
	EnableListInference bool `json:"enable_list_inference"`
	EnumAsString        bool `json:"enum_as_string"`
}

type MaterializedViewState struct {
	AllowNonIncrementalDefinition bool    `json:"allow_non_incremental_definition"`
	EnableRefresh                 bool    `json:"enable_refresh"`
	Query                         string  `json:"query"`
	RefreshIntervalMs             float64 `json:"refresh_interval_ms"`
}

type RangePartitioningState struct {
	Field string       `json:"field"`
	Range []RangeState `json:"range"`
}

type RangeState struct {
	End      float64 `json:"end"`
	Interval float64 `json:"interval"`
	Start    float64 `json:"start"`
}

type TableConstraintsState struct {
	ForeignKeys []ForeignKeysState `json:"foreign_keys"`
	PrimaryKey  []PrimaryKeyState  `json:"primary_key"`
}

type ForeignKeysState struct {
	Name             string                  `json:"name"`
	ColumnReferences []ColumnReferencesState `json:"column_references"`
	ReferencedTable  []ReferencedTableState  `json:"referenced_table"`
}

type ColumnReferencesState struct {
	ReferencedColumn  string `json:"referenced_column"`
	ReferencingColumn string `json:"referencing_column"`
}

type ReferencedTableState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	TableId   string `json:"table_id"`
}

type PrimaryKeyState struct {
	Columns []string `json:"columns"`
}

type TableReplicationInfoState struct {
	ReplicationIntervalMs float64 `json:"replication_interval_ms"`
	SourceDatasetId       string  `json:"source_dataset_id"`
	SourceProjectId       string  `json:"source_project_id"`
	SourceTableId         string  `json:"source_table_id"`
}

type TimePartitioningState struct {
	ExpirationMs           float64 `json:"expiration_ms"`
	Field                  string  `json:"field"`
	RequirePartitionFilter bool    `json:"require_partition_filter"`
	Type                   string  `json:"type"`
}

type ViewState struct {
	Query        string `json:"query"`
	UseLegacySql bool   `json:"use_legacy_sql"`
}
