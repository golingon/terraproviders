// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	vertexaideploymentresourcepool "github.com/golingon/terraproviders/google/5.24.0/vertexaideploymentresourcepool"
	"io"
)

// NewVertexAiDeploymentResourcePool creates a new instance of [VertexAiDeploymentResourcePool].
func NewVertexAiDeploymentResourcePool(name string, args VertexAiDeploymentResourcePoolArgs) *VertexAiDeploymentResourcePool {
	return &VertexAiDeploymentResourcePool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VertexAiDeploymentResourcePool)(nil)

// VertexAiDeploymentResourcePool represents the Terraform resource google_vertex_ai_deployment_resource_pool.
type VertexAiDeploymentResourcePool struct {
	Name      string
	Args      VertexAiDeploymentResourcePoolArgs
	state     *vertexAiDeploymentResourcePoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [VertexAiDeploymentResourcePool].
func (vadrp *VertexAiDeploymentResourcePool) Type() string {
	return "google_vertex_ai_deployment_resource_pool"
}

// LocalName returns the local name for [VertexAiDeploymentResourcePool].
func (vadrp *VertexAiDeploymentResourcePool) LocalName() string {
	return vadrp.Name
}

// Configuration returns the configuration (args) for [VertexAiDeploymentResourcePool].
func (vadrp *VertexAiDeploymentResourcePool) Configuration() interface{} {
	return vadrp.Args
}

// DependOn is used for other resources to depend on [VertexAiDeploymentResourcePool].
func (vadrp *VertexAiDeploymentResourcePool) DependOn() terra.Reference {
	return terra.ReferenceResource(vadrp)
}

// Dependencies returns the list of resources [VertexAiDeploymentResourcePool] depends_on.
func (vadrp *VertexAiDeploymentResourcePool) Dependencies() terra.Dependencies {
	return vadrp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [VertexAiDeploymentResourcePool].
func (vadrp *VertexAiDeploymentResourcePool) LifecycleManagement() *terra.Lifecycle {
	return vadrp.Lifecycle
}

// Attributes returns the attributes for [VertexAiDeploymentResourcePool].
func (vadrp *VertexAiDeploymentResourcePool) Attributes() vertexAiDeploymentResourcePoolAttributes {
	return vertexAiDeploymentResourcePoolAttributes{ref: terra.ReferenceResource(vadrp)}
}

// ImportState imports the given attribute values into [VertexAiDeploymentResourcePool]'s state.
func (vadrp *VertexAiDeploymentResourcePool) ImportState(av io.Reader) error {
	vadrp.state = &vertexAiDeploymentResourcePoolState{}
	if err := json.NewDecoder(av).Decode(vadrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vadrp.Type(), vadrp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [VertexAiDeploymentResourcePool] has state.
func (vadrp *VertexAiDeploymentResourcePool) State() (*vertexAiDeploymentResourcePoolState, bool) {
	return vadrp.state, vadrp.state != nil
}

// StateMust returns the state for [VertexAiDeploymentResourcePool]. Panics if the state is nil.
func (vadrp *VertexAiDeploymentResourcePool) StateMust() *vertexAiDeploymentResourcePoolState {
	if vadrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vadrp.Type(), vadrp.LocalName()))
	}
	return vadrp.state
}

// VertexAiDeploymentResourcePoolArgs contains the configurations for google_vertex_ai_deployment_resource_pool.
type VertexAiDeploymentResourcePoolArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// DedicatedResources: optional
	DedicatedResources *vertexaideploymentresourcepool.DedicatedResources `hcl:"dedicated_resources,block"`
	// Timeouts: optional
	Timeouts *vertexaideploymentresourcepool.Timeouts `hcl:"timeouts,block"`
}
type vertexAiDeploymentResourcePoolAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_vertex_ai_deployment_resource_pool.
func (vadrp vertexAiDeploymentResourcePoolAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(vadrp.ref.Append("create_time"))
}

// Id returns a reference to field id of google_vertex_ai_deployment_resource_pool.
func (vadrp vertexAiDeploymentResourcePoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vadrp.ref.Append("id"))
}

// Name returns a reference to field name of google_vertex_ai_deployment_resource_pool.
func (vadrp vertexAiDeploymentResourcePoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vadrp.ref.Append("name"))
}

// Project returns a reference to field project of google_vertex_ai_deployment_resource_pool.
func (vadrp vertexAiDeploymentResourcePoolAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(vadrp.ref.Append("project"))
}

// Region returns a reference to field region of google_vertex_ai_deployment_resource_pool.
func (vadrp vertexAiDeploymentResourcePoolAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(vadrp.ref.Append("region"))
}

func (vadrp vertexAiDeploymentResourcePoolAttributes) DedicatedResources() terra.ListValue[vertexaideploymentresourcepool.DedicatedResourcesAttributes] {
	return terra.ReferenceAsList[vertexaideploymentresourcepool.DedicatedResourcesAttributes](vadrp.ref.Append("dedicated_resources"))
}

func (vadrp vertexAiDeploymentResourcePoolAttributes) Timeouts() vertexaideploymentresourcepool.TimeoutsAttributes {
	return terra.ReferenceAsSingle[vertexaideploymentresourcepool.TimeoutsAttributes](vadrp.ref.Append("timeouts"))
}

type vertexAiDeploymentResourcePoolState struct {
	CreateTime         string                                                   `json:"create_time"`
	Id                 string                                                   `json:"id"`
	Name               string                                                   `json:"name"`
	Project            string                                                   `json:"project"`
	Region             string                                                   `json:"region"`
	DedicatedResources []vertexaideploymentresourcepool.DedicatedResourcesState `json:"dedicated_resources"`
	Timeouts           *vertexaideploymentresourcepool.TimeoutsState            `json:"timeouts"`
}
