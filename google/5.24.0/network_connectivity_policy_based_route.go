// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	networkconnectivitypolicybasedroute "github.com/golingon/terraproviders/google/5.24.0/networkconnectivitypolicybasedroute"
	"io"
)

// NewNetworkConnectivityPolicyBasedRoute creates a new instance of [NetworkConnectivityPolicyBasedRoute].
func NewNetworkConnectivityPolicyBasedRoute(name string, args NetworkConnectivityPolicyBasedRouteArgs) *NetworkConnectivityPolicyBasedRoute {
	return &NetworkConnectivityPolicyBasedRoute{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkConnectivityPolicyBasedRoute)(nil)

// NetworkConnectivityPolicyBasedRoute represents the Terraform resource google_network_connectivity_policy_based_route.
type NetworkConnectivityPolicyBasedRoute struct {
	Name      string
	Args      NetworkConnectivityPolicyBasedRouteArgs
	state     *networkConnectivityPolicyBasedRouteState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetworkConnectivityPolicyBasedRoute].
func (ncpbr *NetworkConnectivityPolicyBasedRoute) Type() string {
	return "google_network_connectivity_policy_based_route"
}

// LocalName returns the local name for [NetworkConnectivityPolicyBasedRoute].
func (ncpbr *NetworkConnectivityPolicyBasedRoute) LocalName() string {
	return ncpbr.Name
}

// Configuration returns the configuration (args) for [NetworkConnectivityPolicyBasedRoute].
func (ncpbr *NetworkConnectivityPolicyBasedRoute) Configuration() interface{} {
	return ncpbr.Args
}

// DependOn is used for other resources to depend on [NetworkConnectivityPolicyBasedRoute].
func (ncpbr *NetworkConnectivityPolicyBasedRoute) DependOn() terra.Reference {
	return terra.ReferenceResource(ncpbr)
}

// Dependencies returns the list of resources [NetworkConnectivityPolicyBasedRoute] depends_on.
func (ncpbr *NetworkConnectivityPolicyBasedRoute) Dependencies() terra.Dependencies {
	return ncpbr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetworkConnectivityPolicyBasedRoute].
func (ncpbr *NetworkConnectivityPolicyBasedRoute) LifecycleManagement() *terra.Lifecycle {
	return ncpbr.Lifecycle
}

// Attributes returns the attributes for [NetworkConnectivityPolicyBasedRoute].
func (ncpbr *NetworkConnectivityPolicyBasedRoute) Attributes() networkConnectivityPolicyBasedRouteAttributes {
	return networkConnectivityPolicyBasedRouteAttributes{ref: terra.ReferenceResource(ncpbr)}
}

// ImportState imports the given attribute values into [NetworkConnectivityPolicyBasedRoute]'s state.
func (ncpbr *NetworkConnectivityPolicyBasedRoute) ImportState(av io.Reader) error {
	ncpbr.state = &networkConnectivityPolicyBasedRouteState{}
	if err := json.NewDecoder(av).Decode(ncpbr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ncpbr.Type(), ncpbr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetworkConnectivityPolicyBasedRoute] has state.
func (ncpbr *NetworkConnectivityPolicyBasedRoute) State() (*networkConnectivityPolicyBasedRouteState, bool) {
	return ncpbr.state, ncpbr.state != nil
}

// StateMust returns the state for [NetworkConnectivityPolicyBasedRoute]. Panics if the state is nil.
func (ncpbr *NetworkConnectivityPolicyBasedRoute) StateMust() *networkConnectivityPolicyBasedRouteState {
	if ncpbr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ncpbr.Type(), ncpbr.LocalName()))
	}
	return ncpbr.state
}

// NetworkConnectivityPolicyBasedRouteArgs contains the configurations for google_network_connectivity_policy_based_route.
type NetworkConnectivityPolicyBasedRouteArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// NextHopIlbIp: string, optional
	NextHopIlbIp terra.StringValue `hcl:"next_hop_ilb_ip,attr"`
	// NextHopOtherRoutes: string, optional
	NextHopOtherRoutes terra.StringValue `hcl:"next_hop_other_routes,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Warnings: min=0
	Warnings []networkconnectivitypolicybasedroute.Warnings `hcl:"warnings,block" validate:"min=0"`
	// Filter: required
	Filter *networkconnectivitypolicybasedroute.Filter `hcl:"filter,block" validate:"required"`
	// InterconnectAttachment: optional
	InterconnectAttachment *networkconnectivitypolicybasedroute.InterconnectAttachment `hcl:"interconnect_attachment,block"`
	// Timeouts: optional
	Timeouts *networkconnectivitypolicybasedroute.Timeouts `hcl:"timeouts,block"`
	// VirtualMachine: optional
	VirtualMachine *networkconnectivitypolicybasedroute.VirtualMachine `hcl:"virtual_machine,block"`
}
type networkConnectivityPolicyBasedRouteAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_network_connectivity_policy_based_route.
func (ncpbr networkConnectivityPolicyBasedRouteAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(ncpbr.ref.Append("create_time"))
}

// Description returns a reference to field description of google_network_connectivity_policy_based_route.
func (ncpbr networkConnectivityPolicyBasedRouteAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ncpbr.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_network_connectivity_policy_based_route.
func (ncpbr networkConnectivityPolicyBasedRouteAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ncpbr.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_network_connectivity_policy_based_route.
func (ncpbr networkConnectivityPolicyBasedRouteAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ncpbr.ref.Append("id"))
}

// Kind returns a reference to field kind of google_network_connectivity_policy_based_route.
func (ncpbr networkConnectivityPolicyBasedRouteAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(ncpbr.ref.Append("kind"))
}

// Labels returns a reference to field labels of google_network_connectivity_policy_based_route.
func (ncpbr networkConnectivityPolicyBasedRouteAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ncpbr.ref.Append("labels"))
}

// Name returns a reference to field name of google_network_connectivity_policy_based_route.
func (ncpbr networkConnectivityPolicyBasedRouteAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ncpbr.ref.Append("name"))
}

// Network returns a reference to field network of google_network_connectivity_policy_based_route.
func (ncpbr networkConnectivityPolicyBasedRouteAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(ncpbr.ref.Append("network"))
}

// NextHopIlbIp returns a reference to field next_hop_ilb_ip of google_network_connectivity_policy_based_route.
func (ncpbr networkConnectivityPolicyBasedRouteAttributes) NextHopIlbIp() terra.StringValue {
	return terra.ReferenceAsString(ncpbr.ref.Append("next_hop_ilb_ip"))
}

// NextHopOtherRoutes returns a reference to field next_hop_other_routes of google_network_connectivity_policy_based_route.
func (ncpbr networkConnectivityPolicyBasedRouteAttributes) NextHopOtherRoutes() terra.StringValue {
	return terra.ReferenceAsString(ncpbr.ref.Append("next_hop_other_routes"))
}

// Priority returns a reference to field priority of google_network_connectivity_policy_based_route.
func (ncpbr networkConnectivityPolicyBasedRouteAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(ncpbr.ref.Append("priority"))
}

// Project returns a reference to field project of google_network_connectivity_policy_based_route.
func (ncpbr networkConnectivityPolicyBasedRouteAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ncpbr.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_network_connectivity_policy_based_route.
func (ncpbr networkConnectivityPolicyBasedRouteAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ncpbr.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_network_connectivity_policy_based_route.
func (ncpbr networkConnectivityPolicyBasedRouteAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(ncpbr.ref.Append("update_time"))
}

func (ncpbr networkConnectivityPolicyBasedRouteAttributes) Warnings() terra.ListValue[networkconnectivitypolicybasedroute.WarningsAttributes] {
	return terra.ReferenceAsList[networkconnectivitypolicybasedroute.WarningsAttributes](ncpbr.ref.Append("warnings"))
}

func (ncpbr networkConnectivityPolicyBasedRouteAttributes) Filter() terra.ListValue[networkconnectivitypolicybasedroute.FilterAttributes] {
	return terra.ReferenceAsList[networkconnectivitypolicybasedroute.FilterAttributes](ncpbr.ref.Append("filter"))
}

func (ncpbr networkConnectivityPolicyBasedRouteAttributes) InterconnectAttachment() terra.ListValue[networkconnectivitypolicybasedroute.InterconnectAttachmentAttributes] {
	return terra.ReferenceAsList[networkconnectivitypolicybasedroute.InterconnectAttachmentAttributes](ncpbr.ref.Append("interconnect_attachment"))
}

func (ncpbr networkConnectivityPolicyBasedRouteAttributes) Timeouts() networkconnectivitypolicybasedroute.TimeoutsAttributes {
	return terra.ReferenceAsSingle[networkconnectivitypolicybasedroute.TimeoutsAttributes](ncpbr.ref.Append("timeouts"))
}

func (ncpbr networkConnectivityPolicyBasedRouteAttributes) VirtualMachine() terra.ListValue[networkconnectivitypolicybasedroute.VirtualMachineAttributes] {
	return terra.ReferenceAsList[networkconnectivitypolicybasedroute.VirtualMachineAttributes](ncpbr.ref.Append("virtual_machine"))
}

type networkConnectivityPolicyBasedRouteState struct {
	CreateTime             string                                                            `json:"create_time"`
	Description            string                                                            `json:"description"`
	EffectiveLabels        map[string]string                                                 `json:"effective_labels"`
	Id                     string                                                            `json:"id"`
	Kind                   string                                                            `json:"kind"`
	Labels                 map[string]string                                                 `json:"labels"`
	Name                   string                                                            `json:"name"`
	Network                string                                                            `json:"network"`
	NextHopIlbIp           string                                                            `json:"next_hop_ilb_ip"`
	NextHopOtherRoutes     string                                                            `json:"next_hop_other_routes"`
	Priority               float64                                                           `json:"priority"`
	Project                string                                                            `json:"project"`
	TerraformLabels        map[string]string                                                 `json:"terraform_labels"`
	UpdateTime             string                                                            `json:"update_time"`
	Warnings               []networkconnectivitypolicybasedroute.WarningsState               `json:"warnings"`
	Filter                 []networkconnectivitypolicybasedroute.FilterState                 `json:"filter"`
	InterconnectAttachment []networkconnectivitypolicybasedroute.InterconnectAttachmentState `json:"interconnect_attachment"`
	Timeouts               *networkconnectivitypolicybasedroute.TimeoutsState                `json:"timeouts"`
	VirtualMachine         []networkconnectivitypolicybasedroute.VirtualMachineState         `json:"virtual_machine"`
}
