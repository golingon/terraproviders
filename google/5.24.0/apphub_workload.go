// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	apphubworkload "github.com/golingon/terraproviders/google/5.24.0/apphubworkload"
	"io"
)

// NewApphubWorkload creates a new instance of [ApphubWorkload].
func NewApphubWorkload(name string, args ApphubWorkloadArgs) *ApphubWorkload {
	return &ApphubWorkload{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApphubWorkload)(nil)

// ApphubWorkload represents the Terraform resource google_apphub_workload.
type ApphubWorkload struct {
	Name      string
	Args      ApphubWorkloadArgs
	state     *apphubWorkloadState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApphubWorkload].
func (aw *ApphubWorkload) Type() string {
	return "google_apphub_workload"
}

// LocalName returns the local name for [ApphubWorkload].
func (aw *ApphubWorkload) LocalName() string {
	return aw.Name
}

// Configuration returns the configuration (args) for [ApphubWorkload].
func (aw *ApphubWorkload) Configuration() interface{} {
	return aw.Args
}

// DependOn is used for other resources to depend on [ApphubWorkload].
func (aw *ApphubWorkload) DependOn() terra.Reference {
	return terra.ReferenceResource(aw)
}

// Dependencies returns the list of resources [ApphubWorkload] depends_on.
func (aw *ApphubWorkload) Dependencies() terra.Dependencies {
	return aw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApphubWorkload].
func (aw *ApphubWorkload) LifecycleManagement() *terra.Lifecycle {
	return aw.Lifecycle
}

// Attributes returns the attributes for [ApphubWorkload].
func (aw *ApphubWorkload) Attributes() apphubWorkloadAttributes {
	return apphubWorkloadAttributes{ref: terra.ReferenceResource(aw)}
}

// ImportState imports the given attribute values into [ApphubWorkload]'s state.
func (aw *ApphubWorkload) ImportState(av io.Reader) error {
	aw.state = &apphubWorkloadState{}
	if err := json.NewDecoder(av).Decode(aw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aw.Type(), aw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApphubWorkload] has state.
func (aw *ApphubWorkload) State() (*apphubWorkloadState, bool) {
	return aw.state, aw.state != nil
}

// StateMust returns the state for [ApphubWorkload]. Panics if the state is nil.
func (aw *ApphubWorkload) StateMust() *apphubWorkloadState {
	if aw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aw.Type(), aw.LocalName()))
	}
	return aw.state
}

// ApphubWorkloadArgs contains the configurations for google_apphub_workload.
type ApphubWorkloadArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DiscoveredWorkload: string, required
	DiscoveredWorkload terra.StringValue `hcl:"discovered_workload,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// WorkloadId: string, required
	WorkloadId terra.StringValue `hcl:"workload_id,attr" validate:"required"`
	// WorkloadProperties: min=0
	WorkloadProperties []apphubworkload.WorkloadProperties `hcl:"workload_properties,block" validate:"min=0"`
	// WorkloadReference: min=0
	WorkloadReference []apphubworkload.WorkloadReference `hcl:"workload_reference,block" validate:"min=0"`
	// Attributes: optional
	Attributes *apphubworkload.Attributes `hcl:"attributes,block"`
	// Timeouts: optional
	Timeouts *apphubworkload.Timeouts `hcl:"timeouts,block"`
}
type apphubWorkloadAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of google_apphub_workload.
func (aw apphubWorkloadAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aw.ref.Append("application_id"))
}

// CreateTime returns a reference to field create_time of google_apphub_workload.
func (aw apphubWorkloadAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(aw.ref.Append("create_time"))
}

// Description returns a reference to field description of google_apphub_workload.
func (aw apphubWorkloadAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aw.ref.Append("description"))
}

// DiscoveredWorkload returns a reference to field discovered_workload of google_apphub_workload.
func (aw apphubWorkloadAttributes) DiscoveredWorkload() terra.StringValue {
	return terra.ReferenceAsString(aw.ref.Append("discovered_workload"))
}

// DisplayName returns a reference to field display_name of google_apphub_workload.
func (aw apphubWorkloadAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aw.ref.Append("display_name"))
}

// Id returns a reference to field id of google_apphub_workload.
func (aw apphubWorkloadAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aw.ref.Append("id"))
}

// Location returns a reference to field location of google_apphub_workload.
func (aw apphubWorkloadAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aw.ref.Append("location"))
}

// Name returns a reference to field name of google_apphub_workload.
func (aw apphubWorkloadAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aw.ref.Append("name"))
}

// Project returns a reference to field project of google_apphub_workload.
func (aw apphubWorkloadAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(aw.ref.Append("project"))
}

// State returns a reference to field state of google_apphub_workload.
func (aw apphubWorkloadAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(aw.ref.Append("state"))
}

// Uid returns a reference to field uid of google_apphub_workload.
func (aw apphubWorkloadAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(aw.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_apphub_workload.
func (aw apphubWorkloadAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(aw.ref.Append("update_time"))
}

// WorkloadId returns a reference to field workload_id of google_apphub_workload.
func (aw apphubWorkloadAttributes) WorkloadId() terra.StringValue {
	return terra.ReferenceAsString(aw.ref.Append("workload_id"))
}

func (aw apphubWorkloadAttributes) WorkloadProperties() terra.ListValue[apphubworkload.WorkloadPropertiesAttributes] {
	return terra.ReferenceAsList[apphubworkload.WorkloadPropertiesAttributes](aw.ref.Append("workload_properties"))
}

func (aw apphubWorkloadAttributes) WorkloadReference() terra.ListValue[apphubworkload.WorkloadReferenceAttributes] {
	return terra.ReferenceAsList[apphubworkload.WorkloadReferenceAttributes](aw.ref.Append("workload_reference"))
}

func (aw apphubWorkloadAttributes) Attributes() terra.ListValue[apphubworkload.AttributesAttributes] {
	return terra.ReferenceAsList[apphubworkload.AttributesAttributes](aw.ref.Append("attributes"))
}

func (aw apphubWorkloadAttributes) Timeouts() apphubworkload.TimeoutsAttributes {
	return terra.ReferenceAsSingle[apphubworkload.TimeoutsAttributes](aw.ref.Append("timeouts"))
}

type apphubWorkloadState struct {
	ApplicationId      string                                   `json:"application_id"`
	CreateTime         string                                   `json:"create_time"`
	Description        string                                   `json:"description"`
	DiscoveredWorkload string                                   `json:"discovered_workload"`
	DisplayName        string                                   `json:"display_name"`
	Id                 string                                   `json:"id"`
	Location           string                                   `json:"location"`
	Name               string                                   `json:"name"`
	Project            string                                   `json:"project"`
	State              string                                   `json:"state"`
	Uid                string                                   `json:"uid"`
	UpdateTime         string                                   `json:"update_time"`
	WorkloadId         string                                   `json:"workload_id"`
	WorkloadProperties []apphubworkload.WorkloadPropertiesState `json:"workload_properties"`
	WorkloadReference  []apphubworkload.WorkloadReferenceState  `json:"workload_reference"`
	Attributes         []apphubworkload.AttributesState         `json:"attributes"`
	Timeouts           *apphubworkload.TimeoutsState            `json:"timeouts"`
}
