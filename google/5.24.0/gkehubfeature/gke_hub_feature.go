// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package gkehubfeature

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ResourceState struct{}

type State struct {
	// StateState: min=0
	State []StateState `hcl:"state,block" validate:"min=0"`
}

type StateState struct{}

type FleetDefaultMemberConfig struct {
	// Configmanagement: optional
	Configmanagement *Configmanagement `hcl:"configmanagement,block"`
	// Mesh: optional
	Mesh *Mesh `hcl:"mesh,block"`
	// Policycontroller: optional
	Policycontroller *Policycontroller `hcl:"policycontroller,block"`
}

type Configmanagement struct {
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// ConfigSync: optional
	ConfigSync *ConfigSync `hcl:"config_sync,block"`
}

type ConfigSync struct {
	// SourceFormat: string, optional
	SourceFormat terra.StringValue `hcl:"source_format,attr"`
	// Git: optional
	Git *Git `hcl:"git,block"`
	// Oci: optional
	Oci *Oci `hcl:"oci,block"`
}

type Git struct {
	// GcpServiceAccountEmail: string, optional
	GcpServiceAccountEmail terra.StringValue `hcl:"gcp_service_account_email,attr"`
	// HttpsProxy: string, optional
	HttpsProxy terra.StringValue `hcl:"https_proxy,attr"`
	// PolicyDir: string, optional
	PolicyDir terra.StringValue `hcl:"policy_dir,attr"`
	// SecretType: string, required
	SecretType terra.StringValue `hcl:"secret_type,attr" validate:"required"`
	// SyncBranch: string, optional
	SyncBranch terra.StringValue `hcl:"sync_branch,attr"`
	// SyncRepo: string, optional
	SyncRepo terra.StringValue `hcl:"sync_repo,attr"`
	// SyncRev: string, optional
	SyncRev terra.StringValue `hcl:"sync_rev,attr"`
	// SyncWaitSecs: string, optional
	SyncWaitSecs terra.StringValue `hcl:"sync_wait_secs,attr"`
}

type Oci struct {
	// GcpServiceAccountEmail: string, optional
	GcpServiceAccountEmail terra.StringValue `hcl:"gcp_service_account_email,attr"`
	// PolicyDir: string, optional
	PolicyDir terra.StringValue `hcl:"policy_dir,attr"`
	// SecretType: string, required
	SecretType terra.StringValue `hcl:"secret_type,attr" validate:"required"`
	// SyncRepo: string, optional
	SyncRepo terra.StringValue `hcl:"sync_repo,attr"`
	// SyncWaitSecs: string, optional
	SyncWaitSecs terra.StringValue `hcl:"sync_wait_secs,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type Mesh struct {
	// Management: string, required
	Management terra.StringValue `hcl:"management,attr" validate:"required"`
}

type Policycontroller struct {
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// PolicyControllerHubConfig: required
	PolicyControllerHubConfig *PolicyControllerHubConfig `hcl:"policy_controller_hub_config,block" validate:"required"`
}

type PolicyControllerHubConfig struct {
	// AuditIntervalSeconds: number, optional
	AuditIntervalSeconds terra.NumberValue `hcl:"audit_interval_seconds,attr"`
	// ConstraintViolationLimit: number, optional
	ConstraintViolationLimit terra.NumberValue `hcl:"constraint_violation_limit,attr"`
	// ExemptableNamespaces: list of string, optional
	ExemptableNamespaces terra.ListValue[terra.StringValue] `hcl:"exemptable_namespaces,attr"`
	// InstallSpec: string, required
	InstallSpec terra.StringValue `hcl:"install_spec,attr" validate:"required"`
	// LogDeniesEnabled: bool, optional
	LogDeniesEnabled terra.BoolValue `hcl:"log_denies_enabled,attr"`
	// MutationEnabled: bool, optional
	MutationEnabled terra.BoolValue `hcl:"mutation_enabled,attr"`
	// ReferentialRulesEnabled: bool, optional
	ReferentialRulesEnabled terra.BoolValue `hcl:"referential_rules_enabled,attr"`
	// DeploymentConfigs: min=0
	DeploymentConfigs []DeploymentConfigs `hcl:"deployment_configs,block" validate:"min=0"`
	// Monitoring: optional
	Monitoring *Monitoring `hcl:"monitoring,block"`
	// PolicyContent: optional
	PolicyContent *PolicyContent `hcl:"policy_content,block"`
}

type DeploymentConfigs struct {
	// Component: string, required
	Component terra.StringValue `hcl:"component,attr" validate:"required"`
	// PodAffinity: string, optional
	PodAffinity terra.StringValue `hcl:"pod_affinity,attr"`
	// ReplicaCount: number, optional
	ReplicaCount terra.NumberValue `hcl:"replica_count,attr"`
	// ContainerResources: optional
	ContainerResources *ContainerResources `hcl:"container_resources,block"`
	// PodToleration: min=0
	PodToleration []PodToleration `hcl:"pod_toleration,block" validate:"min=0"`
}

type ContainerResources struct {
	// Limits: optional
	Limits *Limits `hcl:"limits,block"`
	// Requests: optional
	Requests *Requests `hcl:"requests,block"`
}

type Limits struct {
	// Cpu: string, optional
	Cpu terra.StringValue `hcl:"cpu,attr"`
	// Memory: string, optional
	Memory terra.StringValue `hcl:"memory,attr"`
}

type Requests struct {
	// Cpu: string, optional
	Cpu terra.StringValue `hcl:"cpu,attr"`
	// Memory: string, optional
	Memory terra.StringValue `hcl:"memory,attr"`
}

type PodToleration struct {
	// Effect: string, optional
	Effect terra.StringValue `hcl:"effect,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Monitoring struct {
	// Backends: list of string, optional
	Backends terra.ListValue[terra.StringValue] `hcl:"backends,attr"`
}

type PolicyContent struct {
	// Bundles: min=0
	Bundles []Bundles `hcl:"bundles,block" validate:"min=0"`
	// TemplateLibrary: optional
	TemplateLibrary *TemplateLibrary `hcl:"template_library,block"`
}

type Bundles struct {
	// Bundle: string, required
	Bundle terra.StringValue `hcl:"bundle,attr" validate:"required"`
	// ExemptedNamespaces: list of string, optional
	ExemptedNamespaces terra.ListValue[terra.StringValue] `hcl:"exempted_namespaces,attr"`
}

type TemplateLibrary struct {
	// Installation: string, optional
	Installation terra.StringValue `hcl:"installation,attr"`
}

type Spec struct {
	// Clusterupgrade: optional
	Clusterupgrade *Clusterupgrade `hcl:"clusterupgrade,block"`
	// Fleetobservability: optional
	Fleetobservability *Fleetobservability `hcl:"fleetobservability,block"`
	// Multiclusteringress: optional
	Multiclusteringress *Multiclusteringress `hcl:"multiclusteringress,block"`
}

type Clusterupgrade struct {
	// UpstreamFleets: list of string, required
	UpstreamFleets terra.ListValue[terra.StringValue] `hcl:"upstream_fleets,attr" validate:"required"`
	// GkeUpgradeOverrides: min=0
	GkeUpgradeOverrides []GkeUpgradeOverrides `hcl:"gke_upgrade_overrides,block" validate:"min=0"`
	// ClusterupgradePostConditions: optional
	PostConditions *ClusterupgradePostConditions `hcl:"post_conditions,block"`
}

type GkeUpgradeOverrides struct {
	// GkeUpgradeOverridesPostConditions: required
	PostConditions *GkeUpgradeOverridesPostConditions `hcl:"post_conditions,block" validate:"required"`
	// Upgrade: required
	Upgrade *Upgrade `hcl:"upgrade,block" validate:"required"`
}

type GkeUpgradeOverridesPostConditions struct {
	// Soaking: string, required
	Soaking terra.StringValue `hcl:"soaking,attr" validate:"required"`
}

type Upgrade struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type ClusterupgradePostConditions struct {
	// Soaking: string, required
	Soaking terra.StringValue `hcl:"soaking,attr" validate:"required"`
}

type Fleetobservability struct {
	// LoggingConfig: optional
	LoggingConfig *LoggingConfig `hcl:"logging_config,block"`
}

type LoggingConfig struct {
	// DefaultConfig: optional
	DefaultConfig *DefaultConfig `hcl:"default_config,block"`
	// FleetScopeLogsConfig: optional
	FleetScopeLogsConfig *FleetScopeLogsConfig `hcl:"fleet_scope_logs_config,block"`
}

type DefaultConfig struct {
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
}

type FleetScopeLogsConfig struct {
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
}

type Multiclusteringress struct {
	// ConfigMembership: string, required
	ConfigMembership terra.StringValue `hcl:"config_membership,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ResourceStateAttributes struct {
	ref terra.Reference
}

func (rs ResourceStateAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs ResourceStateAttributes) InternalWithRef(ref terra.Reference) ResourceStateAttributes {
	return ResourceStateAttributes{ref: ref}
}

func (rs ResourceStateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs ResourceStateAttributes) HasResources() terra.BoolValue {
	return terra.ReferenceAsBool(rs.ref.Append("has_resources"))
}

func (rs ResourceStateAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("state"))
}

type StateAttributes struct {
	ref terra.Reference
}

func (s StateAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StateAttributes) InternalWithRef(ref terra.Reference) StateAttributes {
	return StateAttributes{ref: ref}
}

func (s StateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StateAttributes) State() terra.ListValue[StateStateAttributes] {
	return terra.ReferenceAsList[StateStateAttributes](s.ref.Append("state"))
}

type StateStateAttributes struct {
	ref terra.Reference
}

func (s StateStateAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StateStateAttributes) InternalWithRef(ref terra.Reference) StateStateAttributes {
	return StateStateAttributes{ref: ref}
}

func (s StateStateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StateStateAttributes) Code() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("code"))
}

func (s StateStateAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("description"))
}

func (s StateStateAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("update_time"))
}

type FleetDefaultMemberConfigAttributes struct {
	ref terra.Reference
}

func (fdmc FleetDefaultMemberConfigAttributes) InternalRef() (terra.Reference, error) {
	return fdmc.ref, nil
}

func (fdmc FleetDefaultMemberConfigAttributes) InternalWithRef(ref terra.Reference) FleetDefaultMemberConfigAttributes {
	return FleetDefaultMemberConfigAttributes{ref: ref}
}

func (fdmc FleetDefaultMemberConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fdmc.ref.InternalTokens()
}

func (fdmc FleetDefaultMemberConfigAttributes) Configmanagement() terra.ListValue[ConfigmanagementAttributes] {
	return terra.ReferenceAsList[ConfigmanagementAttributes](fdmc.ref.Append("configmanagement"))
}

func (fdmc FleetDefaultMemberConfigAttributes) Mesh() terra.ListValue[MeshAttributes] {
	return terra.ReferenceAsList[MeshAttributes](fdmc.ref.Append("mesh"))
}

func (fdmc FleetDefaultMemberConfigAttributes) Policycontroller() terra.ListValue[PolicycontrollerAttributes] {
	return terra.ReferenceAsList[PolicycontrollerAttributes](fdmc.ref.Append("policycontroller"))
}

type ConfigmanagementAttributes struct {
	ref terra.Reference
}

func (c ConfigmanagementAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigmanagementAttributes) InternalWithRef(ref terra.Reference) ConfigmanagementAttributes {
	return ConfigmanagementAttributes{ref: ref}
}

func (c ConfigmanagementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigmanagementAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("version"))
}

func (c ConfigmanagementAttributes) ConfigSync() terra.ListValue[ConfigSyncAttributes] {
	return terra.ReferenceAsList[ConfigSyncAttributes](c.ref.Append("config_sync"))
}

type ConfigSyncAttributes struct {
	ref terra.Reference
}

func (cs ConfigSyncAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs ConfigSyncAttributes) InternalWithRef(ref terra.Reference) ConfigSyncAttributes {
	return ConfigSyncAttributes{ref: ref}
}

func (cs ConfigSyncAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs ConfigSyncAttributes) SourceFormat() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("source_format"))
}

func (cs ConfigSyncAttributes) Git() terra.ListValue[GitAttributes] {
	return terra.ReferenceAsList[GitAttributes](cs.ref.Append("git"))
}

func (cs ConfigSyncAttributes) Oci() terra.ListValue[OciAttributes] {
	return terra.ReferenceAsList[OciAttributes](cs.ref.Append("oci"))
}

type GitAttributes struct {
	ref terra.Reference
}

func (g GitAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GitAttributes) InternalWithRef(ref terra.Reference) GitAttributes {
	return GitAttributes{ref: ref}
}

func (g GitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GitAttributes) GcpServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("gcp_service_account_email"))
}

func (g GitAttributes) HttpsProxy() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("https_proxy"))
}

func (g GitAttributes) PolicyDir() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("policy_dir"))
}

func (g GitAttributes) SecretType() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("secret_type"))
}

func (g GitAttributes) SyncBranch() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("sync_branch"))
}

func (g GitAttributes) SyncRepo() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("sync_repo"))
}

func (g GitAttributes) SyncRev() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("sync_rev"))
}

func (g GitAttributes) SyncWaitSecs() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("sync_wait_secs"))
}

type OciAttributes struct {
	ref terra.Reference
}

func (o OciAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OciAttributes) InternalWithRef(ref terra.Reference) OciAttributes {
	return OciAttributes{ref: ref}
}

func (o OciAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o OciAttributes) GcpServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("gcp_service_account_email"))
}

func (o OciAttributes) PolicyDir() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("policy_dir"))
}

func (o OciAttributes) SecretType() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("secret_type"))
}

func (o OciAttributes) SyncRepo() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("sync_repo"))
}

func (o OciAttributes) SyncWaitSecs() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("sync_wait_secs"))
}

func (o OciAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("version"))
}

type MeshAttributes struct {
	ref terra.Reference
}

func (m MeshAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MeshAttributes) InternalWithRef(ref terra.Reference) MeshAttributes {
	return MeshAttributes{ref: ref}
}

func (m MeshAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MeshAttributes) Management() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("management"))
}

type PolicycontrollerAttributes struct {
	ref terra.Reference
}

func (p PolicycontrollerAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PolicycontrollerAttributes) InternalWithRef(ref terra.Reference) PolicycontrollerAttributes {
	return PolicycontrollerAttributes{ref: ref}
}

func (p PolicycontrollerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PolicycontrollerAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("version"))
}

func (p PolicycontrollerAttributes) PolicyControllerHubConfig() terra.ListValue[PolicyControllerHubConfigAttributes] {
	return terra.ReferenceAsList[PolicyControllerHubConfigAttributes](p.ref.Append("policy_controller_hub_config"))
}

type PolicyControllerHubConfigAttributes struct {
	ref terra.Reference
}

func (pchc PolicyControllerHubConfigAttributes) InternalRef() (terra.Reference, error) {
	return pchc.ref, nil
}

func (pchc PolicyControllerHubConfigAttributes) InternalWithRef(ref terra.Reference) PolicyControllerHubConfigAttributes {
	return PolicyControllerHubConfigAttributes{ref: ref}
}

func (pchc PolicyControllerHubConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pchc.ref.InternalTokens()
}

func (pchc PolicyControllerHubConfigAttributes) AuditIntervalSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(pchc.ref.Append("audit_interval_seconds"))
}

func (pchc PolicyControllerHubConfigAttributes) ConstraintViolationLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(pchc.ref.Append("constraint_violation_limit"))
}

func (pchc PolicyControllerHubConfigAttributes) ExemptableNamespaces() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pchc.ref.Append("exemptable_namespaces"))
}

func (pchc PolicyControllerHubConfigAttributes) InstallSpec() terra.StringValue {
	return terra.ReferenceAsString(pchc.ref.Append("install_spec"))
}

func (pchc PolicyControllerHubConfigAttributes) LogDeniesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pchc.ref.Append("log_denies_enabled"))
}

func (pchc PolicyControllerHubConfigAttributes) MutationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pchc.ref.Append("mutation_enabled"))
}

func (pchc PolicyControllerHubConfigAttributes) ReferentialRulesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pchc.ref.Append("referential_rules_enabled"))
}

func (pchc PolicyControllerHubConfigAttributes) DeploymentConfigs() terra.SetValue[DeploymentConfigsAttributes] {
	return terra.ReferenceAsSet[DeploymentConfigsAttributes](pchc.ref.Append("deployment_configs"))
}

func (pchc PolicyControllerHubConfigAttributes) Monitoring() terra.ListValue[MonitoringAttributes] {
	return terra.ReferenceAsList[MonitoringAttributes](pchc.ref.Append("monitoring"))
}

func (pchc PolicyControllerHubConfigAttributes) PolicyContent() terra.ListValue[PolicyContentAttributes] {
	return terra.ReferenceAsList[PolicyContentAttributes](pchc.ref.Append("policy_content"))
}

type DeploymentConfigsAttributes struct {
	ref terra.Reference
}

func (dc DeploymentConfigsAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DeploymentConfigsAttributes) InternalWithRef(ref terra.Reference) DeploymentConfigsAttributes {
	return DeploymentConfigsAttributes{ref: ref}
}

func (dc DeploymentConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DeploymentConfigsAttributes) Component() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("component"))
}

func (dc DeploymentConfigsAttributes) PodAffinity() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("pod_affinity"))
}

func (dc DeploymentConfigsAttributes) ReplicaCount() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("replica_count"))
}

func (dc DeploymentConfigsAttributes) ContainerResources() terra.ListValue[ContainerResourcesAttributes] {
	return terra.ReferenceAsList[ContainerResourcesAttributes](dc.ref.Append("container_resources"))
}

func (dc DeploymentConfigsAttributes) PodToleration() terra.ListValue[PodTolerationAttributes] {
	return terra.ReferenceAsList[PodTolerationAttributes](dc.ref.Append("pod_toleration"))
}

type ContainerResourcesAttributes struct {
	ref terra.Reference
}

func (cr ContainerResourcesAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr ContainerResourcesAttributes) InternalWithRef(ref terra.Reference) ContainerResourcesAttributes {
	return ContainerResourcesAttributes{ref: ref}
}

func (cr ContainerResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr ContainerResourcesAttributes) Limits() terra.ListValue[LimitsAttributes] {
	return terra.ReferenceAsList[LimitsAttributes](cr.ref.Append("limits"))
}

func (cr ContainerResourcesAttributes) Requests() terra.ListValue[RequestsAttributes] {
	return terra.ReferenceAsList[RequestsAttributes](cr.ref.Append("requests"))
}

type LimitsAttributes struct {
	ref terra.Reference
}

func (l LimitsAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LimitsAttributes) InternalWithRef(ref terra.Reference) LimitsAttributes {
	return LimitsAttributes{ref: ref}
}

func (l LimitsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LimitsAttributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("cpu"))
}

func (l LimitsAttributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("memory"))
}

type RequestsAttributes struct {
	ref terra.Reference
}

func (r RequestsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RequestsAttributes) InternalWithRef(ref terra.Reference) RequestsAttributes {
	return RequestsAttributes{ref: ref}
}

func (r RequestsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RequestsAttributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("cpu"))
}

func (r RequestsAttributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("memory"))
}

type PodTolerationAttributes struct {
	ref terra.Reference
}

func (pt PodTolerationAttributes) InternalRef() (terra.Reference, error) {
	return pt.ref, nil
}

func (pt PodTolerationAttributes) InternalWithRef(ref terra.Reference) PodTolerationAttributes {
	return PodTolerationAttributes{ref: ref}
}

func (pt PodTolerationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pt.ref.InternalTokens()
}

func (pt PodTolerationAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("effect"))
}

func (pt PodTolerationAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("key"))
}

func (pt PodTolerationAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("operator"))
}

func (pt PodTolerationAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("value"))
}

type MonitoringAttributes struct {
	ref terra.Reference
}

func (m MonitoringAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MonitoringAttributes) InternalWithRef(ref terra.Reference) MonitoringAttributes {
	return MonitoringAttributes{ref: ref}
}

func (m MonitoringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MonitoringAttributes) Backends() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("backends"))
}

type PolicyContentAttributes struct {
	ref terra.Reference
}

func (pc PolicyContentAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PolicyContentAttributes) InternalWithRef(ref terra.Reference) PolicyContentAttributes {
	return PolicyContentAttributes{ref: ref}
}

func (pc PolicyContentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PolicyContentAttributes) Bundles() terra.SetValue[BundlesAttributes] {
	return terra.ReferenceAsSet[BundlesAttributes](pc.ref.Append("bundles"))
}

func (pc PolicyContentAttributes) TemplateLibrary() terra.ListValue[TemplateLibraryAttributes] {
	return terra.ReferenceAsList[TemplateLibraryAttributes](pc.ref.Append("template_library"))
}

type BundlesAttributes struct {
	ref terra.Reference
}

func (b BundlesAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BundlesAttributes) InternalWithRef(ref terra.Reference) BundlesAttributes {
	return BundlesAttributes{ref: ref}
}

func (b BundlesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BundlesAttributes) Bundle() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("bundle"))
}

func (b BundlesAttributes) ExemptedNamespaces() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](b.ref.Append("exempted_namespaces"))
}

type TemplateLibraryAttributes struct {
	ref terra.Reference
}

func (tl TemplateLibraryAttributes) InternalRef() (terra.Reference, error) {
	return tl.ref, nil
}

func (tl TemplateLibraryAttributes) InternalWithRef(ref terra.Reference) TemplateLibraryAttributes {
	return TemplateLibraryAttributes{ref: ref}
}

func (tl TemplateLibraryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tl.ref.InternalTokens()
}

func (tl TemplateLibraryAttributes) Installation() terra.StringValue {
	return terra.ReferenceAsString(tl.ref.Append("installation"))
}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) Clusterupgrade() terra.ListValue[ClusterupgradeAttributes] {
	return terra.ReferenceAsList[ClusterupgradeAttributes](s.ref.Append("clusterupgrade"))
}

func (s SpecAttributes) Fleetobservability() terra.ListValue[FleetobservabilityAttributes] {
	return terra.ReferenceAsList[FleetobservabilityAttributes](s.ref.Append("fleetobservability"))
}

func (s SpecAttributes) Multiclusteringress() terra.ListValue[MulticlusteringressAttributes] {
	return terra.ReferenceAsList[MulticlusteringressAttributes](s.ref.Append("multiclusteringress"))
}

type ClusterupgradeAttributes struct {
	ref terra.Reference
}

func (c ClusterupgradeAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ClusterupgradeAttributes) InternalWithRef(ref terra.Reference) ClusterupgradeAttributes {
	return ClusterupgradeAttributes{ref: ref}
}

func (c ClusterupgradeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ClusterupgradeAttributes) UpstreamFleets() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("upstream_fleets"))
}

func (c ClusterupgradeAttributes) GkeUpgradeOverrides() terra.ListValue[GkeUpgradeOverridesAttributes] {
	return terra.ReferenceAsList[GkeUpgradeOverridesAttributes](c.ref.Append("gke_upgrade_overrides"))
}

func (c ClusterupgradeAttributes) PostConditions() terra.ListValue[ClusterupgradePostConditionsAttributes] {
	return terra.ReferenceAsList[ClusterupgradePostConditionsAttributes](c.ref.Append("post_conditions"))
}

type GkeUpgradeOverridesAttributes struct {
	ref terra.Reference
}

func (guo GkeUpgradeOverridesAttributes) InternalRef() (terra.Reference, error) {
	return guo.ref, nil
}

func (guo GkeUpgradeOverridesAttributes) InternalWithRef(ref terra.Reference) GkeUpgradeOverridesAttributes {
	return GkeUpgradeOverridesAttributes{ref: ref}
}

func (guo GkeUpgradeOverridesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return guo.ref.InternalTokens()
}

func (guo GkeUpgradeOverridesAttributes) PostConditions() terra.ListValue[GkeUpgradeOverridesPostConditionsAttributes] {
	return terra.ReferenceAsList[GkeUpgradeOverridesPostConditionsAttributes](guo.ref.Append("post_conditions"))
}

func (guo GkeUpgradeOverridesAttributes) Upgrade() terra.ListValue[UpgradeAttributes] {
	return terra.ReferenceAsList[UpgradeAttributes](guo.ref.Append("upgrade"))
}

type GkeUpgradeOverridesPostConditionsAttributes struct {
	ref terra.Reference
}

func (pc GkeUpgradeOverridesPostConditionsAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc GkeUpgradeOverridesPostConditionsAttributes) InternalWithRef(ref terra.Reference) GkeUpgradeOverridesPostConditionsAttributes {
	return GkeUpgradeOverridesPostConditionsAttributes{ref: ref}
}

func (pc GkeUpgradeOverridesPostConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc GkeUpgradeOverridesPostConditionsAttributes) Soaking() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("soaking"))
}

type UpgradeAttributes struct {
	ref terra.Reference
}

func (u UpgradeAttributes) InternalRef() (terra.Reference, error) {
	return u.ref, nil
}

func (u UpgradeAttributes) InternalWithRef(ref terra.Reference) UpgradeAttributes {
	return UpgradeAttributes{ref: ref}
}

func (u UpgradeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return u.ref.InternalTokens()
}

func (u UpgradeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("name"))
}

func (u UpgradeAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("version"))
}

type ClusterupgradePostConditionsAttributes struct {
	ref terra.Reference
}

func (pc ClusterupgradePostConditionsAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc ClusterupgradePostConditionsAttributes) InternalWithRef(ref terra.Reference) ClusterupgradePostConditionsAttributes {
	return ClusterupgradePostConditionsAttributes{ref: ref}
}

func (pc ClusterupgradePostConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc ClusterupgradePostConditionsAttributes) Soaking() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("soaking"))
}

type FleetobservabilityAttributes struct {
	ref terra.Reference
}

func (f FleetobservabilityAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FleetobservabilityAttributes) InternalWithRef(ref terra.Reference) FleetobservabilityAttributes {
	return FleetobservabilityAttributes{ref: ref}
}

func (f FleetobservabilityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FleetobservabilityAttributes) LoggingConfig() terra.ListValue[LoggingConfigAttributes] {
	return terra.ReferenceAsList[LoggingConfigAttributes](f.ref.Append("logging_config"))
}

type LoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc LoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LoggingConfigAttributes) InternalWithRef(ref terra.Reference) LoggingConfigAttributes {
	return LoggingConfigAttributes{ref: ref}
}

func (lc LoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LoggingConfigAttributes) DefaultConfig() terra.ListValue[DefaultConfigAttributes] {
	return terra.ReferenceAsList[DefaultConfigAttributes](lc.ref.Append("default_config"))
}

func (lc LoggingConfigAttributes) FleetScopeLogsConfig() terra.ListValue[FleetScopeLogsConfigAttributes] {
	return terra.ReferenceAsList[FleetScopeLogsConfigAttributes](lc.ref.Append("fleet_scope_logs_config"))
}

type DefaultConfigAttributes struct {
	ref terra.Reference
}

func (dc DefaultConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DefaultConfigAttributes) InternalWithRef(ref terra.Reference) DefaultConfigAttributes {
	return DefaultConfigAttributes{ref: ref}
}

func (dc DefaultConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DefaultConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("mode"))
}

type FleetScopeLogsConfigAttributes struct {
	ref terra.Reference
}

func (fslc FleetScopeLogsConfigAttributes) InternalRef() (terra.Reference, error) {
	return fslc.ref, nil
}

func (fslc FleetScopeLogsConfigAttributes) InternalWithRef(ref terra.Reference) FleetScopeLogsConfigAttributes {
	return FleetScopeLogsConfigAttributes{ref: ref}
}

func (fslc FleetScopeLogsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fslc.ref.InternalTokens()
}

func (fslc FleetScopeLogsConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(fslc.ref.Append("mode"))
}

type MulticlusteringressAttributes struct {
	ref terra.Reference
}

func (m MulticlusteringressAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MulticlusteringressAttributes) InternalWithRef(ref terra.Reference) MulticlusteringressAttributes {
	return MulticlusteringressAttributes{ref: ref}
}

func (m MulticlusteringressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MulticlusteringressAttributes) ConfigMembership() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("config_membership"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ResourceStateState struct {
	HasResources bool   `json:"has_resources"`
	State        string `json:"state"`
}

type StateState struct {
	State []StateStateState `json:"state"`
}

type StateStateState struct {
	Code        string `json:"code"`
	Description string `json:"description"`
	UpdateTime  string `json:"update_time"`
}

type FleetDefaultMemberConfigState struct {
	Configmanagement []ConfigmanagementState `json:"configmanagement"`
	Mesh             []MeshState             `json:"mesh"`
	Policycontroller []PolicycontrollerState `json:"policycontroller"`
}

type ConfigmanagementState struct {
	Version    string            `json:"version"`
	ConfigSync []ConfigSyncState `json:"config_sync"`
}

type ConfigSyncState struct {
	SourceFormat string     `json:"source_format"`
	Git          []GitState `json:"git"`
	Oci          []OciState `json:"oci"`
}

type GitState struct {
	GcpServiceAccountEmail string `json:"gcp_service_account_email"`
	HttpsProxy             string `json:"https_proxy"`
	PolicyDir              string `json:"policy_dir"`
	SecretType             string `json:"secret_type"`
	SyncBranch             string `json:"sync_branch"`
	SyncRepo               string `json:"sync_repo"`
	SyncRev                string `json:"sync_rev"`
	SyncWaitSecs           string `json:"sync_wait_secs"`
}

type OciState struct {
	GcpServiceAccountEmail string `json:"gcp_service_account_email"`
	PolicyDir              string `json:"policy_dir"`
	SecretType             string `json:"secret_type"`
	SyncRepo               string `json:"sync_repo"`
	SyncWaitSecs           string `json:"sync_wait_secs"`
	Version                string `json:"version"`
}

type MeshState struct {
	Management string `json:"management"`
}

type PolicycontrollerState struct {
	Version                   string                           `json:"version"`
	PolicyControllerHubConfig []PolicyControllerHubConfigState `json:"policy_controller_hub_config"`
}

type PolicyControllerHubConfigState struct {
	AuditIntervalSeconds     float64                  `json:"audit_interval_seconds"`
	ConstraintViolationLimit float64                  `json:"constraint_violation_limit"`
	ExemptableNamespaces     []string                 `json:"exemptable_namespaces"`
	InstallSpec              string                   `json:"install_spec"`
	LogDeniesEnabled         bool                     `json:"log_denies_enabled"`
	MutationEnabled          bool                     `json:"mutation_enabled"`
	ReferentialRulesEnabled  bool                     `json:"referential_rules_enabled"`
	DeploymentConfigs        []DeploymentConfigsState `json:"deployment_configs"`
	Monitoring               []MonitoringState        `json:"monitoring"`
	PolicyContent            []PolicyContentState     `json:"policy_content"`
}

type DeploymentConfigsState struct {
	Component          string                    `json:"component"`
	PodAffinity        string                    `json:"pod_affinity"`
	ReplicaCount       float64                   `json:"replica_count"`
	ContainerResources []ContainerResourcesState `json:"container_resources"`
	PodToleration      []PodTolerationState      `json:"pod_toleration"`
}

type ContainerResourcesState struct {
	Limits   []LimitsState   `json:"limits"`
	Requests []RequestsState `json:"requests"`
}

type LimitsState struct {
	Cpu    string `json:"cpu"`
	Memory string `json:"memory"`
}

type RequestsState struct {
	Cpu    string `json:"cpu"`
	Memory string `json:"memory"`
}

type PodTolerationState struct {
	Effect   string `json:"effect"`
	Key      string `json:"key"`
	Operator string `json:"operator"`
	Value    string `json:"value"`
}

type MonitoringState struct {
	Backends []string `json:"backends"`
}

type PolicyContentState struct {
	Bundles         []BundlesState         `json:"bundles"`
	TemplateLibrary []TemplateLibraryState `json:"template_library"`
}

type BundlesState struct {
	Bundle             string   `json:"bundle"`
	ExemptedNamespaces []string `json:"exempted_namespaces"`
}

type TemplateLibraryState struct {
	Installation string `json:"installation"`
}

type SpecState struct {
	Clusterupgrade      []ClusterupgradeState      `json:"clusterupgrade"`
	Fleetobservability  []FleetobservabilityState  `json:"fleetobservability"`
	Multiclusteringress []MulticlusteringressState `json:"multiclusteringress"`
}

type ClusterupgradeState struct {
	UpstreamFleets      []string                            `json:"upstream_fleets"`
	GkeUpgradeOverrides []GkeUpgradeOverridesState          `json:"gke_upgrade_overrides"`
	PostConditions      []ClusterupgradePostConditionsState `json:"post_conditions"`
}

type GkeUpgradeOverridesState struct {
	PostConditions []GkeUpgradeOverridesPostConditionsState `json:"post_conditions"`
	Upgrade        []UpgradeState                           `json:"upgrade"`
}

type GkeUpgradeOverridesPostConditionsState struct {
	Soaking string `json:"soaking"`
}

type UpgradeState struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

type ClusterupgradePostConditionsState struct {
	Soaking string `json:"soaking"`
}

type FleetobservabilityState struct {
	LoggingConfig []LoggingConfigState `json:"logging_config"`
}

type LoggingConfigState struct {
	DefaultConfig        []DefaultConfigState        `json:"default_config"`
	FleetScopeLogsConfig []FleetScopeLogsConfigState `json:"fleet_scope_logs_config"`
}

type DefaultConfigState struct {
	Mode string `json:"mode"`
}

type FleetScopeLogsConfigState struct {
	Mode string `json:"mode"`
}

type MulticlusteringressState struct {
	ConfigMembership string `json:"config_membership"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
