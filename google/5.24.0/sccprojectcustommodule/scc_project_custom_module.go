// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package sccprojectcustommodule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CustomConfig struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Recommendation: string, required
	Recommendation terra.StringValue `hcl:"recommendation,attr" validate:"required"`
	// Severity: string, required
	Severity terra.StringValue `hcl:"severity,attr" validate:"required"`
	// CustomOutput: optional
	CustomOutput *CustomOutput `hcl:"custom_output,block"`
	// Predicate: required
	Predicate *Predicate `hcl:"predicate,block" validate:"required"`
	// ResourceSelector: required
	ResourceSelector *ResourceSelector `hcl:"resource_selector,block" validate:"required"`
}

type CustomOutput struct {
	// Properties: min=0
	Properties []Properties `hcl:"properties,block" validate:"min=0"`
}

type Properties struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// ValueExpression: optional
	ValueExpression *ValueExpression `hcl:"value_expression,block"`
}

type ValueExpression struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Expression: string, required
	Expression terra.StringValue `hcl:"expression,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Title: string, optional
	Title terra.StringValue `hcl:"title,attr"`
}

type Predicate struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Expression: string, required
	Expression terra.StringValue `hcl:"expression,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Title: string, optional
	Title terra.StringValue `hcl:"title,attr"`
}

type ResourceSelector struct {
	// ResourceTypes: list of string, required
	ResourceTypes terra.ListValue[terra.StringValue] `hcl:"resource_types,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CustomConfigAttributes struct {
	ref terra.Reference
}

func (cc CustomConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc CustomConfigAttributes) InternalWithRef(ref terra.Reference) CustomConfigAttributes {
	return CustomConfigAttributes{ref: ref}
}

func (cc CustomConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc CustomConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("description"))
}

func (cc CustomConfigAttributes) Recommendation() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("recommendation"))
}

func (cc CustomConfigAttributes) Severity() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("severity"))
}

func (cc CustomConfigAttributes) CustomOutput() terra.ListValue[CustomOutputAttributes] {
	return terra.ReferenceAsList[CustomOutputAttributes](cc.ref.Append("custom_output"))
}

func (cc CustomConfigAttributes) Predicate() terra.ListValue[PredicateAttributes] {
	return terra.ReferenceAsList[PredicateAttributes](cc.ref.Append("predicate"))
}

func (cc CustomConfigAttributes) ResourceSelector() terra.ListValue[ResourceSelectorAttributes] {
	return terra.ReferenceAsList[ResourceSelectorAttributes](cc.ref.Append("resource_selector"))
}

type CustomOutputAttributes struct {
	ref terra.Reference
}

func (co CustomOutputAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co CustomOutputAttributes) InternalWithRef(ref terra.Reference) CustomOutputAttributes {
	return CustomOutputAttributes{ref: ref}
}

func (co CustomOutputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co CustomOutputAttributes) Properties() terra.ListValue[PropertiesAttributes] {
	return terra.ReferenceAsList[PropertiesAttributes](co.ref.Append("properties"))
}

type PropertiesAttributes struct {
	ref terra.Reference
}

func (p PropertiesAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PropertiesAttributes) InternalWithRef(ref terra.Reference) PropertiesAttributes {
	return PropertiesAttributes{ref: ref}
}

func (p PropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PropertiesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p PropertiesAttributes) ValueExpression() terra.ListValue[ValueExpressionAttributes] {
	return terra.ReferenceAsList[ValueExpressionAttributes](p.ref.Append("value_expression"))
}

type ValueExpressionAttributes struct {
	ref terra.Reference
}

func (ve ValueExpressionAttributes) InternalRef() (terra.Reference, error) {
	return ve.ref, nil
}

func (ve ValueExpressionAttributes) InternalWithRef(ref terra.Reference) ValueExpressionAttributes {
	return ValueExpressionAttributes{ref: ref}
}

func (ve ValueExpressionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ve.ref.InternalTokens()
}

func (ve ValueExpressionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ve.ref.Append("description"))
}

func (ve ValueExpressionAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(ve.ref.Append("expression"))
}

func (ve ValueExpressionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ve.ref.Append("location"))
}

func (ve ValueExpressionAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(ve.ref.Append("title"))
}

type PredicateAttributes struct {
	ref terra.Reference
}

func (p PredicateAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PredicateAttributes) InternalWithRef(ref terra.Reference) PredicateAttributes {
	return PredicateAttributes{ref: ref}
}

func (p PredicateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PredicateAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("description"))
}

func (p PredicateAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("expression"))
}

func (p PredicateAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("location"))
}

func (p PredicateAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("title"))
}

type ResourceSelectorAttributes struct {
	ref terra.Reference
}

func (rs ResourceSelectorAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs ResourceSelectorAttributes) InternalWithRef(ref terra.Reference) ResourceSelectorAttributes {
	return ResourceSelectorAttributes{ref: ref}
}

func (rs ResourceSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs ResourceSelectorAttributes) ResourceTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rs.ref.Append("resource_types"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CustomConfigState struct {
	Description      string                  `json:"description"`
	Recommendation   string                  `json:"recommendation"`
	Severity         string                  `json:"severity"`
	CustomOutput     []CustomOutputState     `json:"custom_output"`
	Predicate        []PredicateState        `json:"predicate"`
	ResourceSelector []ResourceSelectorState `json:"resource_selector"`
}

type CustomOutputState struct {
	Properties []PropertiesState `json:"properties"`
}

type PropertiesState struct {
	Name            string                 `json:"name"`
	ValueExpression []ValueExpressionState `json:"value_expression"`
}

type ValueExpressionState struct {
	Description string `json:"description"`
	Expression  string `json:"expression"`
	Location    string `json:"location"`
	Title       string `json:"title"`
}

type PredicateState struct {
	Description string `json:"description"`
	Expression  string `json:"expression"`
	Location    string `json:"location"`
	Title       string `json:"title"`
}

type ResourceSelectorState struct {
	ResourceTypes []string `json:"resource_types"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
