// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vertexaifeaturegroup

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BigQuery struct {
	// EntityIdColumns: list of string, optional
	EntityIdColumns terra.ListValue[terra.StringValue] `hcl:"entity_id_columns,attr"`
	// BigQuerySource: required
	BigQuerySource *BigQuerySource `hcl:"big_query_source,block" validate:"required"`
}

type BigQuerySource struct {
	// InputUri: string, required
	InputUri terra.StringValue `hcl:"input_uri,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BigQueryAttributes struct {
	ref terra.Reference
}

func (bq BigQueryAttributes) InternalRef() (terra.Reference, error) {
	return bq.ref, nil
}

func (bq BigQueryAttributes) InternalWithRef(ref terra.Reference) BigQueryAttributes {
	return BigQueryAttributes{ref: ref}
}

func (bq BigQueryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bq.ref.InternalTokens()
}

func (bq BigQueryAttributes) EntityIdColumns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](bq.ref.Append("entity_id_columns"))
}

func (bq BigQueryAttributes) BigQuerySource() terra.ListValue[BigQuerySourceAttributes] {
	return terra.ReferenceAsList[BigQuerySourceAttributes](bq.ref.Append("big_query_source"))
}

type BigQuerySourceAttributes struct {
	ref terra.Reference
}

func (bqs BigQuerySourceAttributes) InternalRef() (terra.Reference, error) {
	return bqs.ref, nil
}

func (bqs BigQuerySourceAttributes) InternalWithRef(ref terra.Reference) BigQuerySourceAttributes {
	return BigQuerySourceAttributes{ref: ref}
}

func (bqs BigQuerySourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bqs.ref.InternalTokens()
}

func (bqs BigQuerySourceAttributes) InputUri() terra.StringValue {
	return terra.ReferenceAsString(bqs.ref.Append("input_uri"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BigQueryState struct {
	EntityIdColumns []string              `json:"entity_id_columns"`
	BigQuerySource  []BigQuerySourceState `json:"big_query_source"`
}

type BigQuerySourceState struct {
	InputUri string `json:"input_uri"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
