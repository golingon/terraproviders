// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	firebaseappcheckserviceconfig "github.com/golingon/terraproviders/google/5.24.0/firebaseappcheckserviceconfig"
	"io"
)

// NewFirebaseAppCheckServiceConfig creates a new instance of [FirebaseAppCheckServiceConfig].
func NewFirebaseAppCheckServiceConfig(name string, args FirebaseAppCheckServiceConfigArgs) *FirebaseAppCheckServiceConfig {
	return &FirebaseAppCheckServiceConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirebaseAppCheckServiceConfig)(nil)

// FirebaseAppCheckServiceConfig represents the Terraform resource google_firebase_app_check_service_config.
type FirebaseAppCheckServiceConfig struct {
	Name      string
	Args      FirebaseAppCheckServiceConfigArgs
	state     *firebaseAppCheckServiceConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [FirebaseAppCheckServiceConfig].
func (facsc *FirebaseAppCheckServiceConfig) Type() string {
	return "google_firebase_app_check_service_config"
}

// LocalName returns the local name for [FirebaseAppCheckServiceConfig].
func (facsc *FirebaseAppCheckServiceConfig) LocalName() string {
	return facsc.Name
}

// Configuration returns the configuration (args) for [FirebaseAppCheckServiceConfig].
func (facsc *FirebaseAppCheckServiceConfig) Configuration() interface{} {
	return facsc.Args
}

// DependOn is used for other resources to depend on [FirebaseAppCheckServiceConfig].
func (facsc *FirebaseAppCheckServiceConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(facsc)
}

// Dependencies returns the list of resources [FirebaseAppCheckServiceConfig] depends_on.
func (facsc *FirebaseAppCheckServiceConfig) Dependencies() terra.Dependencies {
	return facsc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [FirebaseAppCheckServiceConfig].
func (facsc *FirebaseAppCheckServiceConfig) LifecycleManagement() *terra.Lifecycle {
	return facsc.Lifecycle
}

// Attributes returns the attributes for [FirebaseAppCheckServiceConfig].
func (facsc *FirebaseAppCheckServiceConfig) Attributes() firebaseAppCheckServiceConfigAttributes {
	return firebaseAppCheckServiceConfigAttributes{ref: terra.ReferenceResource(facsc)}
}

// ImportState imports the given attribute values into [FirebaseAppCheckServiceConfig]'s state.
func (facsc *FirebaseAppCheckServiceConfig) ImportState(av io.Reader) error {
	facsc.state = &firebaseAppCheckServiceConfigState{}
	if err := json.NewDecoder(av).Decode(facsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", facsc.Type(), facsc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [FirebaseAppCheckServiceConfig] has state.
func (facsc *FirebaseAppCheckServiceConfig) State() (*firebaseAppCheckServiceConfigState, bool) {
	return facsc.state, facsc.state != nil
}

// StateMust returns the state for [FirebaseAppCheckServiceConfig]. Panics if the state is nil.
func (facsc *FirebaseAppCheckServiceConfig) StateMust() *firebaseAppCheckServiceConfigState {
	if facsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", facsc.Type(), facsc.LocalName()))
	}
	return facsc.state
}

// FirebaseAppCheckServiceConfigArgs contains the configurations for google_firebase_app_check_service_config.
type FirebaseAppCheckServiceConfigArgs struct {
	// EnforcementMode: string, optional
	EnforcementMode terra.StringValue `hcl:"enforcement_mode,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceId: string, required
	ServiceId terra.StringValue `hcl:"service_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *firebaseappcheckserviceconfig.Timeouts `hcl:"timeouts,block"`
}
type firebaseAppCheckServiceConfigAttributes struct {
	ref terra.Reference
}

// EnforcementMode returns a reference to field enforcement_mode of google_firebase_app_check_service_config.
func (facsc firebaseAppCheckServiceConfigAttributes) EnforcementMode() terra.StringValue {
	return terra.ReferenceAsString(facsc.ref.Append("enforcement_mode"))
}

// Id returns a reference to field id of google_firebase_app_check_service_config.
func (facsc firebaseAppCheckServiceConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(facsc.ref.Append("id"))
}

// Name returns a reference to field name of google_firebase_app_check_service_config.
func (facsc firebaseAppCheckServiceConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(facsc.ref.Append("name"))
}

// Project returns a reference to field project of google_firebase_app_check_service_config.
func (facsc firebaseAppCheckServiceConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(facsc.ref.Append("project"))
}

// ServiceId returns a reference to field service_id of google_firebase_app_check_service_config.
func (facsc firebaseAppCheckServiceConfigAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceAsString(facsc.ref.Append("service_id"))
}

func (facsc firebaseAppCheckServiceConfigAttributes) Timeouts() firebaseappcheckserviceconfig.TimeoutsAttributes {
	return terra.ReferenceAsSingle[firebaseappcheckserviceconfig.TimeoutsAttributes](facsc.ref.Append("timeouts"))
}

type firebaseAppCheckServiceConfigState struct {
	EnforcementMode string                                       `json:"enforcement_mode"`
	Id              string                                       `json:"id"`
	Name            string                                       `json:"name"`
	Project         string                                       `json:"project"`
	ServiceId       string                                       `json:"service_id"`
	Timeouts        *firebaseappcheckserviceconfig.TimeoutsState `json:"timeouts"`
}
