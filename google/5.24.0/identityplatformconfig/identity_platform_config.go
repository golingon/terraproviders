// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package identityplatformconfig

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BlockingFunctions struct {
	// ForwardInboundCredentials: optional
	ForwardInboundCredentials *ForwardInboundCredentials `hcl:"forward_inbound_credentials,block"`
	// Triggers: min=1
	Triggers []Triggers `hcl:"triggers,block" validate:"min=1"`
}

type ForwardInboundCredentials struct {
	// AccessToken: bool, optional
	AccessToken terra.BoolValue `hcl:"access_token,attr"`
	// IdToken: bool, optional
	IdToken terra.BoolValue `hcl:"id_token,attr"`
	// RefreshToken: bool, optional
	RefreshToken terra.BoolValue `hcl:"refresh_token,attr"`
}

type Triggers struct {
	// EventType: string, required
	EventType terra.StringValue `hcl:"event_type,attr" validate:"required"`
	// FunctionUri: string, required
	FunctionUri terra.StringValue `hcl:"function_uri,attr" validate:"required"`
}

type Client struct {
	// Permissions: optional
	Permissions *Permissions `hcl:"permissions,block"`
}

type Permissions struct {
	// DisabledUserDeletion: bool, optional
	DisabledUserDeletion terra.BoolValue `hcl:"disabled_user_deletion,attr"`
	// DisabledUserSignup: bool, optional
	DisabledUserSignup terra.BoolValue `hcl:"disabled_user_signup,attr"`
}

type Mfa struct {
	// EnabledProviders: list of string, optional
	EnabledProviders terra.ListValue[terra.StringValue] `hcl:"enabled_providers,attr"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// ProviderConfigs: min=0
	ProviderConfigs []ProviderConfigs `hcl:"provider_configs,block" validate:"min=0"`
}

type ProviderConfigs struct {
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// TotpProviderConfig: optional
	TotpProviderConfig *TotpProviderConfig `hcl:"totp_provider_config,block"`
}

type TotpProviderConfig struct {
	// AdjacentIntervals: number, optional
	AdjacentIntervals terra.NumberValue `hcl:"adjacent_intervals,attr"`
}

type Monitoring struct {
	// RequestLogging: optional
	RequestLogging *RequestLogging `hcl:"request_logging,block"`
}

type RequestLogging struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type MultiTenant struct {
	// AllowTenants: bool, optional
	AllowTenants terra.BoolValue `hcl:"allow_tenants,attr"`
	// DefaultTenantLocation: string, optional
	DefaultTenantLocation terra.StringValue `hcl:"default_tenant_location,attr"`
}

type Quota struct {
	// SignUpQuotaConfig: optional
	SignUpQuotaConfig *SignUpQuotaConfig `hcl:"sign_up_quota_config,block"`
}

type SignUpQuotaConfig struct {
	// Quota: number, optional
	Quota terra.NumberValue `hcl:"quota,attr"`
	// QuotaDuration: string, optional
	QuotaDuration terra.StringValue `hcl:"quota_duration,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
}

type SignIn struct {
	// AllowDuplicateEmails: bool, optional
	AllowDuplicateEmails terra.BoolValue `hcl:"allow_duplicate_emails,attr"`
	// HashConfig: min=0
	HashConfig []HashConfig `hcl:"hash_config,block" validate:"min=0"`
	// Anonymous: optional
	Anonymous *Anonymous `hcl:"anonymous,block"`
	// Email: optional
	Email *Email `hcl:"email,block"`
	// PhoneNumber: optional
	PhoneNumber *PhoneNumber `hcl:"phone_number,block"`
}

type HashConfig struct{}

type Anonymous struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type Email struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// PasswordRequired: bool, optional
	PasswordRequired terra.BoolValue `hcl:"password_required,attr"`
}

type PhoneNumber struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// TestPhoneNumbers: map of string, optional
	TestPhoneNumbers terra.MapValue[terra.StringValue] `hcl:"test_phone_numbers,attr"`
}

type SmsRegionConfig struct {
	// AllowByDefault: optional
	AllowByDefault *AllowByDefault `hcl:"allow_by_default,block"`
	// AllowlistOnly: optional
	AllowlistOnly *AllowlistOnly `hcl:"allowlist_only,block"`
}

type AllowByDefault struct {
	// DisallowedRegions: list of string, optional
	DisallowedRegions terra.ListValue[terra.StringValue] `hcl:"disallowed_regions,attr"`
}

type AllowlistOnly struct {
	// AllowedRegions: list of string, optional
	AllowedRegions terra.ListValue[terra.StringValue] `hcl:"allowed_regions,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BlockingFunctionsAttributes struct {
	ref terra.Reference
}

func (bf BlockingFunctionsAttributes) InternalRef() (terra.Reference, error) {
	return bf.ref, nil
}

func (bf BlockingFunctionsAttributes) InternalWithRef(ref terra.Reference) BlockingFunctionsAttributes {
	return BlockingFunctionsAttributes{ref: ref}
}

func (bf BlockingFunctionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bf.ref.InternalTokens()
}

func (bf BlockingFunctionsAttributes) ForwardInboundCredentials() terra.ListValue[ForwardInboundCredentialsAttributes] {
	return terra.ReferenceAsList[ForwardInboundCredentialsAttributes](bf.ref.Append("forward_inbound_credentials"))
}

func (bf BlockingFunctionsAttributes) Triggers() terra.SetValue[TriggersAttributes] {
	return terra.ReferenceAsSet[TriggersAttributes](bf.ref.Append("triggers"))
}

type ForwardInboundCredentialsAttributes struct {
	ref terra.Reference
}

func (fic ForwardInboundCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return fic.ref, nil
}

func (fic ForwardInboundCredentialsAttributes) InternalWithRef(ref terra.Reference) ForwardInboundCredentialsAttributes {
	return ForwardInboundCredentialsAttributes{ref: ref}
}

func (fic ForwardInboundCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fic.ref.InternalTokens()
}

func (fic ForwardInboundCredentialsAttributes) AccessToken() terra.BoolValue {
	return terra.ReferenceAsBool(fic.ref.Append("access_token"))
}

func (fic ForwardInboundCredentialsAttributes) IdToken() terra.BoolValue {
	return terra.ReferenceAsBool(fic.ref.Append("id_token"))
}

func (fic ForwardInboundCredentialsAttributes) RefreshToken() terra.BoolValue {
	return terra.ReferenceAsBool(fic.ref.Append("refresh_token"))
}

type TriggersAttributes struct {
	ref terra.Reference
}

func (t TriggersAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TriggersAttributes) InternalWithRef(ref terra.Reference) TriggersAttributes {
	return TriggersAttributes{ref: ref}
}

func (t TriggersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TriggersAttributes) EventType() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("event_type"))
}

func (t TriggersAttributes) FunctionUri() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("function_uri"))
}

func (t TriggersAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update_time"))
}

type ClientAttributes struct {
	ref terra.Reference
}

func (c ClientAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ClientAttributes) InternalWithRef(ref terra.Reference) ClientAttributes {
	return ClientAttributes{ref: ref}
}

func (c ClientAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ClientAttributes) ApiKey() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("api_key"))
}

func (c ClientAttributes) FirebaseSubdomain() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("firebase_subdomain"))
}

func (c ClientAttributes) Permissions() terra.ListValue[PermissionsAttributes] {
	return terra.ReferenceAsList[PermissionsAttributes](c.ref.Append("permissions"))
}

type PermissionsAttributes struct {
	ref terra.Reference
}

func (p PermissionsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PermissionsAttributes) InternalWithRef(ref terra.Reference) PermissionsAttributes {
	return PermissionsAttributes{ref: ref}
}

func (p PermissionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PermissionsAttributes) DisabledUserDeletion() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("disabled_user_deletion"))
}

func (p PermissionsAttributes) DisabledUserSignup() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("disabled_user_signup"))
}

type MfaAttributes struct {
	ref terra.Reference
}

func (m MfaAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MfaAttributes) InternalWithRef(ref terra.Reference) MfaAttributes {
	return MfaAttributes{ref: ref}
}

func (m MfaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MfaAttributes) EnabledProviders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("enabled_providers"))
}

func (m MfaAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("state"))
}

func (m MfaAttributes) ProviderConfigs() terra.ListValue[ProviderConfigsAttributes] {
	return terra.ReferenceAsList[ProviderConfigsAttributes](m.ref.Append("provider_configs"))
}

type ProviderConfigsAttributes struct {
	ref terra.Reference
}

func (pc ProviderConfigsAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc ProviderConfigsAttributes) InternalWithRef(ref terra.Reference) ProviderConfigsAttributes {
	return ProviderConfigsAttributes{ref: ref}
}

func (pc ProviderConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc ProviderConfigsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("state"))
}

func (pc ProviderConfigsAttributes) TotpProviderConfig() terra.ListValue[TotpProviderConfigAttributes] {
	return terra.ReferenceAsList[TotpProviderConfigAttributes](pc.ref.Append("totp_provider_config"))
}

type TotpProviderConfigAttributes struct {
	ref terra.Reference
}

func (tpc TotpProviderConfigAttributes) InternalRef() (terra.Reference, error) {
	return tpc.ref, nil
}

func (tpc TotpProviderConfigAttributes) InternalWithRef(ref terra.Reference) TotpProviderConfigAttributes {
	return TotpProviderConfigAttributes{ref: ref}
}

func (tpc TotpProviderConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tpc.ref.InternalTokens()
}

func (tpc TotpProviderConfigAttributes) AdjacentIntervals() terra.NumberValue {
	return terra.ReferenceAsNumber(tpc.ref.Append("adjacent_intervals"))
}

type MonitoringAttributes struct {
	ref terra.Reference
}

func (m MonitoringAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MonitoringAttributes) InternalWithRef(ref terra.Reference) MonitoringAttributes {
	return MonitoringAttributes{ref: ref}
}

func (m MonitoringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MonitoringAttributes) RequestLogging() terra.ListValue[RequestLoggingAttributes] {
	return terra.ReferenceAsList[RequestLoggingAttributes](m.ref.Append("request_logging"))
}

type RequestLoggingAttributes struct {
	ref terra.Reference
}

func (rl RequestLoggingAttributes) InternalRef() (terra.Reference, error) {
	return rl.ref, nil
}

func (rl RequestLoggingAttributes) InternalWithRef(ref terra.Reference) RequestLoggingAttributes {
	return RequestLoggingAttributes{ref: ref}
}

func (rl RequestLoggingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rl.ref.InternalTokens()
}

func (rl RequestLoggingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(rl.ref.Append("enabled"))
}

type MultiTenantAttributes struct {
	ref terra.Reference
}

func (mt MultiTenantAttributes) InternalRef() (terra.Reference, error) {
	return mt.ref, nil
}

func (mt MultiTenantAttributes) InternalWithRef(ref terra.Reference) MultiTenantAttributes {
	return MultiTenantAttributes{ref: ref}
}

func (mt MultiTenantAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mt.ref.InternalTokens()
}

func (mt MultiTenantAttributes) AllowTenants() terra.BoolValue {
	return terra.ReferenceAsBool(mt.ref.Append("allow_tenants"))
}

func (mt MultiTenantAttributes) DefaultTenantLocation() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("default_tenant_location"))
}

type QuotaAttributes struct {
	ref terra.Reference
}

func (q QuotaAttributes) InternalRef() (terra.Reference, error) {
	return q.ref, nil
}

func (q QuotaAttributes) InternalWithRef(ref terra.Reference) QuotaAttributes {
	return QuotaAttributes{ref: ref}
}

func (q QuotaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return q.ref.InternalTokens()
}

func (q QuotaAttributes) SignUpQuotaConfig() terra.ListValue[SignUpQuotaConfigAttributes] {
	return terra.ReferenceAsList[SignUpQuotaConfigAttributes](q.ref.Append("sign_up_quota_config"))
}

type SignUpQuotaConfigAttributes struct {
	ref terra.Reference
}

func (suqc SignUpQuotaConfigAttributes) InternalRef() (terra.Reference, error) {
	return suqc.ref, nil
}

func (suqc SignUpQuotaConfigAttributes) InternalWithRef(ref terra.Reference) SignUpQuotaConfigAttributes {
	return SignUpQuotaConfigAttributes{ref: ref}
}

func (suqc SignUpQuotaConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return suqc.ref.InternalTokens()
}

func (suqc SignUpQuotaConfigAttributes) Quota() terra.NumberValue {
	return terra.ReferenceAsNumber(suqc.ref.Append("quota"))
}

func (suqc SignUpQuotaConfigAttributes) QuotaDuration() terra.StringValue {
	return terra.ReferenceAsString(suqc.ref.Append("quota_duration"))
}

func (suqc SignUpQuotaConfigAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(suqc.ref.Append("start_time"))
}

type SignInAttributes struct {
	ref terra.Reference
}

func (si SignInAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si SignInAttributes) InternalWithRef(ref terra.Reference) SignInAttributes {
	return SignInAttributes{ref: ref}
}

func (si SignInAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si SignInAttributes) AllowDuplicateEmails() terra.BoolValue {
	return terra.ReferenceAsBool(si.ref.Append("allow_duplicate_emails"))
}

func (si SignInAttributes) HashConfig() terra.ListValue[HashConfigAttributes] {
	return terra.ReferenceAsList[HashConfigAttributes](si.ref.Append("hash_config"))
}

func (si SignInAttributes) Anonymous() terra.ListValue[AnonymousAttributes] {
	return terra.ReferenceAsList[AnonymousAttributes](si.ref.Append("anonymous"))
}

func (si SignInAttributes) Email() terra.ListValue[EmailAttributes] {
	return terra.ReferenceAsList[EmailAttributes](si.ref.Append("email"))
}

func (si SignInAttributes) PhoneNumber() terra.ListValue[PhoneNumberAttributes] {
	return terra.ReferenceAsList[PhoneNumberAttributes](si.ref.Append("phone_number"))
}

type HashConfigAttributes struct {
	ref terra.Reference
}

func (hc HashConfigAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc HashConfigAttributes) InternalWithRef(ref terra.Reference) HashConfigAttributes {
	return HashConfigAttributes{ref: ref}
}

func (hc HashConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc HashConfigAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("algorithm"))
}

func (hc HashConfigAttributes) MemoryCost() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("memory_cost"))
}

func (hc HashConfigAttributes) Rounds() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("rounds"))
}

func (hc HashConfigAttributes) SaltSeparator() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("salt_separator"))
}

func (hc HashConfigAttributes) SignerKey() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("signer_key"))
}

type AnonymousAttributes struct {
	ref terra.Reference
}

func (a AnonymousAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AnonymousAttributes) InternalWithRef(ref terra.Reference) AnonymousAttributes {
	return AnonymousAttributes{ref: ref}
}

func (a AnonymousAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AnonymousAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("enabled"))
}

type EmailAttributes struct {
	ref terra.Reference
}

func (e EmailAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EmailAttributes) InternalWithRef(ref terra.Reference) EmailAttributes {
	return EmailAttributes{ref: ref}
}

func (e EmailAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EmailAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("enabled"))
}

func (e EmailAttributes) PasswordRequired() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("password_required"))
}

type PhoneNumberAttributes struct {
	ref terra.Reference
}

func (pn PhoneNumberAttributes) InternalRef() (terra.Reference, error) {
	return pn.ref, nil
}

func (pn PhoneNumberAttributes) InternalWithRef(ref terra.Reference) PhoneNumberAttributes {
	return PhoneNumberAttributes{ref: ref}
}

func (pn PhoneNumberAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pn.ref.InternalTokens()
}

func (pn PhoneNumberAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pn.ref.Append("enabled"))
}

func (pn PhoneNumberAttributes) TestPhoneNumbers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pn.ref.Append("test_phone_numbers"))
}

type SmsRegionConfigAttributes struct {
	ref terra.Reference
}

func (src SmsRegionConfigAttributes) InternalRef() (terra.Reference, error) {
	return src.ref, nil
}

func (src SmsRegionConfigAttributes) InternalWithRef(ref terra.Reference) SmsRegionConfigAttributes {
	return SmsRegionConfigAttributes{ref: ref}
}

func (src SmsRegionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return src.ref.InternalTokens()
}

func (src SmsRegionConfigAttributes) AllowByDefault() terra.ListValue[AllowByDefaultAttributes] {
	return terra.ReferenceAsList[AllowByDefaultAttributes](src.ref.Append("allow_by_default"))
}

func (src SmsRegionConfigAttributes) AllowlistOnly() terra.ListValue[AllowlistOnlyAttributes] {
	return terra.ReferenceAsList[AllowlistOnlyAttributes](src.ref.Append("allowlist_only"))
}

type AllowByDefaultAttributes struct {
	ref terra.Reference
}

func (abd AllowByDefaultAttributes) InternalRef() (terra.Reference, error) {
	return abd.ref, nil
}

func (abd AllowByDefaultAttributes) InternalWithRef(ref terra.Reference) AllowByDefaultAttributes {
	return AllowByDefaultAttributes{ref: ref}
}

func (abd AllowByDefaultAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return abd.ref.InternalTokens()
}

func (abd AllowByDefaultAttributes) DisallowedRegions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](abd.ref.Append("disallowed_regions"))
}

type AllowlistOnlyAttributes struct {
	ref terra.Reference
}

func (ao AllowlistOnlyAttributes) InternalRef() (terra.Reference, error) {
	return ao.ref, nil
}

func (ao AllowlistOnlyAttributes) InternalWithRef(ref terra.Reference) AllowlistOnlyAttributes {
	return AllowlistOnlyAttributes{ref: ref}
}

func (ao AllowlistOnlyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ao.ref.InternalTokens()
}

func (ao AllowlistOnlyAttributes) AllowedRegions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ao.ref.Append("allowed_regions"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BlockingFunctionsState struct {
	ForwardInboundCredentials []ForwardInboundCredentialsState `json:"forward_inbound_credentials"`
	Triggers                  []TriggersState                  `json:"triggers"`
}

type ForwardInboundCredentialsState struct {
	AccessToken  bool `json:"access_token"`
	IdToken      bool `json:"id_token"`
	RefreshToken bool `json:"refresh_token"`
}

type TriggersState struct {
	EventType   string `json:"event_type"`
	FunctionUri string `json:"function_uri"`
	UpdateTime  string `json:"update_time"`
}

type ClientState struct {
	ApiKey            string             `json:"api_key"`
	FirebaseSubdomain string             `json:"firebase_subdomain"`
	Permissions       []PermissionsState `json:"permissions"`
}

type PermissionsState struct {
	DisabledUserDeletion bool `json:"disabled_user_deletion"`
	DisabledUserSignup   bool `json:"disabled_user_signup"`
}

type MfaState struct {
	EnabledProviders []string               `json:"enabled_providers"`
	State            string                 `json:"state"`
	ProviderConfigs  []ProviderConfigsState `json:"provider_configs"`
}

type ProviderConfigsState struct {
	State              string                    `json:"state"`
	TotpProviderConfig []TotpProviderConfigState `json:"totp_provider_config"`
}

type TotpProviderConfigState struct {
	AdjacentIntervals float64 `json:"adjacent_intervals"`
}

type MonitoringState struct {
	RequestLogging []RequestLoggingState `json:"request_logging"`
}

type RequestLoggingState struct {
	Enabled bool `json:"enabled"`
}

type MultiTenantState struct {
	AllowTenants          bool   `json:"allow_tenants"`
	DefaultTenantLocation string `json:"default_tenant_location"`
}

type QuotaState struct {
	SignUpQuotaConfig []SignUpQuotaConfigState `json:"sign_up_quota_config"`
}

type SignUpQuotaConfigState struct {
	Quota         float64 `json:"quota"`
	QuotaDuration string  `json:"quota_duration"`
	StartTime     string  `json:"start_time"`
}

type SignInState struct {
	AllowDuplicateEmails bool               `json:"allow_duplicate_emails"`
	HashConfig           []HashConfigState  `json:"hash_config"`
	Anonymous            []AnonymousState   `json:"anonymous"`
	Email                []EmailState       `json:"email"`
	PhoneNumber          []PhoneNumberState `json:"phone_number"`
}

type HashConfigState struct {
	Algorithm     string  `json:"algorithm"`
	MemoryCost    float64 `json:"memory_cost"`
	Rounds        float64 `json:"rounds"`
	SaltSeparator string  `json:"salt_separator"`
	SignerKey     string  `json:"signer_key"`
}

type AnonymousState struct {
	Enabled bool `json:"enabled"`
}

type EmailState struct {
	Enabled          bool `json:"enabled"`
	PasswordRequired bool `json:"password_required"`
}

type PhoneNumberState struct {
	Enabled          bool              `json:"enabled"`
	TestPhoneNumbers map[string]string `json:"test_phone_numbers"`
}

type SmsRegionConfigState struct {
	AllowByDefault []AllowByDefaultState `json:"allow_by_default"`
	AllowlistOnly  []AllowlistOnlyState  `json:"allowlist_only"`
}

type AllowByDefaultState struct {
	DisallowedRegions []string `json:"disallowed_regions"`
}

type AllowlistOnlyState struct {
	AllowedRegions []string `json:"allowed_regions"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
