// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	edgecontainercluster "github.com/golingon/terraproviders/google/5.24.0/edgecontainercluster"
	"io"
)

// NewEdgecontainerCluster creates a new instance of [EdgecontainerCluster].
func NewEdgecontainerCluster(name string, args EdgecontainerClusterArgs) *EdgecontainerCluster {
	return &EdgecontainerCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EdgecontainerCluster)(nil)

// EdgecontainerCluster represents the Terraform resource google_edgecontainer_cluster.
type EdgecontainerCluster struct {
	Name      string
	Args      EdgecontainerClusterArgs
	state     *edgecontainerClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [EdgecontainerCluster].
func (ec *EdgecontainerCluster) Type() string {
	return "google_edgecontainer_cluster"
}

// LocalName returns the local name for [EdgecontainerCluster].
func (ec *EdgecontainerCluster) LocalName() string {
	return ec.Name
}

// Configuration returns the configuration (args) for [EdgecontainerCluster].
func (ec *EdgecontainerCluster) Configuration() interface{} {
	return ec.Args
}

// DependOn is used for other resources to depend on [EdgecontainerCluster].
func (ec *EdgecontainerCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(ec)
}

// Dependencies returns the list of resources [EdgecontainerCluster] depends_on.
func (ec *EdgecontainerCluster) Dependencies() terra.Dependencies {
	return ec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [EdgecontainerCluster].
func (ec *EdgecontainerCluster) LifecycleManagement() *terra.Lifecycle {
	return ec.Lifecycle
}

// Attributes returns the attributes for [EdgecontainerCluster].
func (ec *EdgecontainerCluster) Attributes() edgecontainerClusterAttributes {
	return edgecontainerClusterAttributes{ref: terra.ReferenceResource(ec)}
}

// ImportState imports the given attribute values into [EdgecontainerCluster]'s state.
func (ec *EdgecontainerCluster) ImportState(av io.Reader) error {
	ec.state = &edgecontainerClusterState{}
	if err := json.NewDecoder(av).Decode(ec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ec.Type(), ec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [EdgecontainerCluster] has state.
func (ec *EdgecontainerCluster) State() (*edgecontainerClusterState, bool) {
	return ec.state, ec.state != nil
}

// StateMust returns the state for [EdgecontainerCluster]. Panics if the state is nil.
func (ec *EdgecontainerCluster) StateMust() *edgecontainerClusterState {
	if ec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ec.Type(), ec.LocalName()))
	}
	return ec.state
}

// EdgecontainerClusterArgs contains the configurations for google_edgecontainer_cluster.
type EdgecontainerClusterArgs struct {
	// DefaultMaxPodsPerNode: number, optional
	DefaultMaxPodsPerNode terra.NumberValue `hcl:"default_max_pods_per_node,attr"`
	// ExternalLoadBalancerIpv4AddressPools: list of string, optional
	ExternalLoadBalancerIpv4AddressPools terra.ListValue[terra.StringValue] `hcl:"external_load_balancer_ipv4_address_pools,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ReleaseChannel: string, optional
	ReleaseChannel terra.StringValue `hcl:"release_channel,attr"`
	// TargetVersion: string, optional
	TargetVersion terra.StringValue `hcl:"target_version,attr"`
	// MaintenanceEvents: min=0
	MaintenanceEvents []edgecontainercluster.MaintenanceEvents `hcl:"maintenance_events,block" validate:"min=0"`
	// Authorization: required
	Authorization *edgecontainercluster.Authorization `hcl:"authorization,block" validate:"required"`
	// ControlPlane: optional
	ControlPlane *edgecontainercluster.ControlPlane `hcl:"control_plane,block"`
	// ControlPlaneEncryption: optional
	ControlPlaneEncryption *edgecontainercluster.ControlPlaneEncryption `hcl:"control_plane_encryption,block"`
	// Fleet: required
	Fleet *edgecontainercluster.Fleet `hcl:"fleet,block" validate:"required"`
	// MaintenancePolicy: optional
	MaintenancePolicy *edgecontainercluster.MaintenancePolicy `hcl:"maintenance_policy,block"`
	// Networking: required
	Networking *edgecontainercluster.Networking `hcl:"networking,block" validate:"required"`
	// SystemAddonsConfig: optional
	SystemAddonsConfig *edgecontainercluster.SystemAddonsConfig `hcl:"system_addons_config,block"`
	// Timeouts: optional
	Timeouts *edgecontainercluster.Timeouts `hcl:"timeouts,block"`
}
type edgecontainerClusterAttributes struct {
	ref terra.Reference
}

// ClusterCaCertificate returns a reference to field cluster_ca_certificate of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) ClusterCaCertificate() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("cluster_ca_certificate"))
}

// ControlPlaneVersion returns a reference to field control_plane_version of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) ControlPlaneVersion() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("control_plane_version"))
}

// CreateTime returns a reference to field create_time of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("create_time"))
}

// DefaultMaxPodsPerNode returns a reference to field default_max_pods_per_node of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) DefaultMaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("default_max_pods_per_node"))
}

// EffectiveLabels returns a reference to field effective_labels of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ec.ref.Append("effective_labels"))
}

// Endpoint returns a reference to field endpoint of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("endpoint"))
}

// ExternalLoadBalancerIpv4AddressPools returns a reference to field external_load_balancer_ipv4_address_pools of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) ExternalLoadBalancerIpv4AddressPools() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ec.ref.Append("external_load_balancer_ipv4_address_pools"))
}

// Id returns a reference to field id of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("id"))
}

// Labels returns a reference to field labels of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ec.ref.Append("labels"))
}

// Location returns a reference to field location of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("location"))
}

// Name returns a reference to field name of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("name"))
}

// NodeVersion returns a reference to field node_version of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) NodeVersion() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("node_version"))
}

// Port returns a reference to field port of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("port"))
}

// Project returns a reference to field project of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("project"))
}

// ReleaseChannel returns a reference to field release_channel of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) ReleaseChannel() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("release_channel"))
}

// Status returns a reference to field status of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("status"))
}

// TargetVersion returns a reference to field target_version of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) TargetVersion() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("target_version"))
}

// TerraformLabels returns a reference to field terraform_labels of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ec.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_edgecontainer_cluster.
func (ec edgecontainerClusterAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("update_time"))
}

func (ec edgecontainerClusterAttributes) MaintenanceEvents() terra.ListValue[edgecontainercluster.MaintenanceEventsAttributes] {
	return terra.ReferenceAsList[edgecontainercluster.MaintenanceEventsAttributes](ec.ref.Append("maintenance_events"))
}

func (ec edgecontainerClusterAttributes) Authorization() terra.ListValue[edgecontainercluster.AuthorizationAttributes] {
	return terra.ReferenceAsList[edgecontainercluster.AuthorizationAttributes](ec.ref.Append("authorization"))
}

func (ec edgecontainerClusterAttributes) ControlPlane() terra.ListValue[edgecontainercluster.ControlPlaneAttributes] {
	return terra.ReferenceAsList[edgecontainercluster.ControlPlaneAttributes](ec.ref.Append("control_plane"))
}

func (ec edgecontainerClusterAttributes) ControlPlaneEncryption() terra.ListValue[edgecontainercluster.ControlPlaneEncryptionAttributes] {
	return terra.ReferenceAsList[edgecontainercluster.ControlPlaneEncryptionAttributes](ec.ref.Append("control_plane_encryption"))
}

func (ec edgecontainerClusterAttributes) Fleet() terra.ListValue[edgecontainercluster.FleetAttributes] {
	return terra.ReferenceAsList[edgecontainercluster.FleetAttributes](ec.ref.Append("fleet"))
}

func (ec edgecontainerClusterAttributes) MaintenancePolicy() terra.ListValue[edgecontainercluster.MaintenancePolicyAttributes] {
	return terra.ReferenceAsList[edgecontainercluster.MaintenancePolicyAttributes](ec.ref.Append("maintenance_policy"))
}

func (ec edgecontainerClusterAttributes) Networking() terra.ListValue[edgecontainercluster.NetworkingAttributes] {
	return terra.ReferenceAsList[edgecontainercluster.NetworkingAttributes](ec.ref.Append("networking"))
}

func (ec edgecontainerClusterAttributes) SystemAddonsConfig() terra.ListValue[edgecontainercluster.SystemAddonsConfigAttributes] {
	return terra.ReferenceAsList[edgecontainercluster.SystemAddonsConfigAttributes](ec.ref.Append("system_addons_config"))
}

func (ec edgecontainerClusterAttributes) Timeouts() edgecontainercluster.TimeoutsAttributes {
	return terra.ReferenceAsSingle[edgecontainercluster.TimeoutsAttributes](ec.ref.Append("timeouts"))
}

type edgecontainerClusterState struct {
	ClusterCaCertificate                 string                                             `json:"cluster_ca_certificate"`
	ControlPlaneVersion                  string                                             `json:"control_plane_version"`
	CreateTime                           string                                             `json:"create_time"`
	DefaultMaxPodsPerNode                float64                                            `json:"default_max_pods_per_node"`
	EffectiveLabels                      map[string]string                                  `json:"effective_labels"`
	Endpoint                             string                                             `json:"endpoint"`
	ExternalLoadBalancerIpv4AddressPools []string                                           `json:"external_load_balancer_ipv4_address_pools"`
	Id                                   string                                             `json:"id"`
	Labels                               map[string]string                                  `json:"labels"`
	Location                             string                                             `json:"location"`
	Name                                 string                                             `json:"name"`
	NodeVersion                          string                                             `json:"node_version"`
	Port                                 float64                                            `json:"port"`
	Project                              string                                             `json:"project"`
	ReleaseChannel                       string                                             `json:"release_channel"`
	Status                               string                                             `json:"status"`
	TargetVersion                        string                                             `json:"target_version"`
	TerraformLabels                      map[string]string                                  `json:"terraform_labels"`
	UpdateTime                           string                                             `json:"update_time"`
	MaintenanceEvents                    []edgecontainercluster.MaintenanceEventsState      `json:"maintenance_events"`
	Authorization                        []edgecontainercluster.AuthorizationState          `json:"authorization"`
	ControlPlane                         []edgecontainercluster.ControlPlaneState           `json:"control_plane"`
	ControlPlaneEncryption               []edgecontainercluster.ControlPlaneEncryptionState `json:"control_plane_encryption"`
	Fleet                                []edgecontainercluster.FleetState                  `json:"fleet"`
	MaintenancePolicy                    []edgecontainercluster.MaintenancePolicyState      `json:"maintenance_policy"`
	Networking                           []edgecontainercluster.NetworkingState             `json:"networking"`
	SystemAddonsConfig                   []edgecontainercluster.SystemAddonsConfigState     `json:"system_addons_config"`
	Timeouts                             *edgecontainercluster.TimeoutsState                `json:"timeouts"`
}
