// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package secretmanagersecret

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Replication struct {
	// Auto: optional
	Auto *Auto `hcl:"auto,block"`
	// UserManaged: optional
	UserManaged *UserManaged `hcl:"user_managed,block"`
}

type Auto struct {
	// AutoCustomerManagedEncryption: optional
	CustomerManagedEncryption *AutoCustomerManagedEncryption `hcl:"customer_managed_encryption,block"`
}

type AutoCustomerManagedEncryption struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type UserManaged struct {
	// Replicas: min=1
	Replicas []Replicas `hcl:"replicas,block" validate:"min=1"`
}

type Replicas struct {
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ReplicasCustomerManagedEncryption: optional
	CustomerManagedEncryption *ReplicasCustomerManagedEncryption `hcl:"customer_managed_encryption,block"`
}

type ReplicasCustomerManagedEncryption struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type Rotation struct {
	// NextRotationTime: string, optional
	NextRotationTime terra.StringValue `hcl:"next_rotation_time,attr"`
	// RotationPeriod: string, optional
	RotationPeriod terra.StringValue `hcl:"rotation_period,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Topics struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type ReplicationAttributes struct {
	ref terra.Reference
}

func (r ReplicationAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ReplicationAttributes) InternalWithRef(ref terra.Reference) ReplicationAttributes {
	return ReplicationAttributes{ref: ref}
}

func (r ReplicationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ReplicationAttributes) Auto() terra.ListValue[AutoAttributes] {
	return terra.ReferenceAsList[AutoAttributes](r.ref.Append("auto"))
}

func (r ReplicationAttributes) UserManaged() terra.ListValue[UserManagedAttributes] {
	return terra.ReferenceAsList[UserManagedAttributes](r.ref.Append("user_managed"))
}

type AutoAttributes struct {
	ref terra.Reference
}

func (a AutoAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AutoAttributes) InternalWithRef(ref terra.Reference) AutoAttributes {
	return AutoAttributes{ref: ref}
}

func (a AutoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AutoAttributes) CustomerManagedEncryption() terra.ListValue[AutoCustomerManagedEncryptionAttributes] {
	return terra.ReferenceAsList[AutoCustomerManagedEncryptionAttributes](a.ref.Append("customer_managed_encryption"))
}

type AutoCustomerManagedEncryptionAttributes struct {
	ref terra.Reference
}

func (cme AutoCustomerManagedEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return cme.ref, nil
}

func (cme AutoCustomerManagedEncryptionAttributes) InternalWithRef(ref terra.Reference) AutoCustomerManagedEncryptionAttributes {
	return AutoCustomerManagedEncryptionAttributes{ref: ref}
}

func (cme AutoCustomerManagedEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cme.ref.InternalTokens()
}

func (cme AutoCustomerManagedEncryptionAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(cme.ref.Append("kms_key_name"))
}

type UserManagedAttributes struct {
	ref terra.Reference
}

func (um UserManagedAttributes) InternalRef() (terra.Reference, error) {
	return um.ref, nil
}

func (um UserManagedAttributes) InternalWithRef(ref terra.Reference) UserManagedAttributes {
	return UserManagedAttributes{ref: ref}
}

func (um UserManagedAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return um.ref.InternalTokens()
}

func (um UserManagedAttributes) Replicas() terra.ListValue[ReplicasAttributes] {
	return terra.ReferenceAsList[ReplicasAttributes](um.ref.Append("replicas"))
}

type ReplicasAttributes struct {
	ref terra.Reference
}

func (r ReplicasAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ReplicasAttributes) InternalWithRef(ref terra.Reference) ReplicasAttributes {
	return ReplicasAttributes{ref: ref}
}

func (r ReplicasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ReplicasAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("location"))
}

func (r ReplicasAttributes) CustomerManagedEncryption() terra.ListValue[ReplicasCustomerManagedEncryptionAttributes] {
	return terra.ReferenceAsList[ReplicasCustomerManagedEncryptionAttributes](r.ref.Append("customer_managed_encryption"))
}

type ReplicasCustomerManagedEncryptionAttributes struct {
	ref terra.Reference
}

func (cme ReplicasCustomerManagedEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return cme.ref, nil
}

func (cme ReplicasCustomerManagedEncryptionAttributes) InternalWithRef(ref terra.Reference) ReplicasCustomerManagedEncryptionAttributes {
	return ReplicasCustomerManagedEncryptionAttributes{ref: ref}
}

func (cme ReplicasCustomerManagedEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cme.ref.InternalTokens()
}

func (cme ReplicasCustomerManagedEncryptionAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(cme.ref.Append("kms_key_name"))
}

type RotationAttributes struct {
	ref terra.Reference
}

func (r RotationAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RotationAttributes) InternalWithRef(ref terra.Reference) RotationAttributes {
	return RotationAttributes{ref: ref}
}

func (r RotationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RotationAttributes) NextRotationTime() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("next_rotation_time"))
}

func (r RotationAttributes) RotationPeriod() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rotation_period"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TopicsAttributes struct {
	ref terra.Reference
}

func (t TopicsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TopicsAttributes) InternalWithRef(ref terra.Reference) TopicsAttributes {
	return TopicsAttributes{ref: ref}
}

func (t TopicsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TopicsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("name"))
}

type ReplicationState struct {
	Auto        []AutoState        `json:"auto"`
	UserManaged []UserManagedState `json:"user_managed"`
}

type AutoState struct {
	CustomerManagedEncryption []AutoCustomerManagedEncryptionState `json:"customer_managed_encryption"`
}

type AutoCustomerManagedEncryptionState struct {
	KmsKeyName string `json:"kms_key_name"`
}

type UserManagedState struct {
	Replicas []ReplicasState `json:"replicas"`
}

type ReplicasState struct {
	Location                  string                                   `json:"location"`
	CustomerManagedEncryption []ReplicasCustomerManagedEncryptionState `json:"customer_managed_encryption"`
}

type ReplicasCustomerManagedEncryptionState struct {
	KmsKeyName string `json:"kms_key_name"`
}

type RotationState struct {
	NextRotationTime string `json:"next_rotation_time"`
	RotationPeriod   string `json:"rotation_period"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TopicsState struct {
	Name string `json:"name"`
}
