// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	firebaseappcheckplayintegrityconfig "github.com/golingon/terraproviders/google/5.24.0/firebaseappcheckplayintegrityconfig"
	"io"
)

// NewFirebaseAppCheckPlayIntegrityConfig creates a new instance of [FirebaseAppCheckPlayIntegrityConfig].
func NewFirebaseAppCheckPlayIntegrityConfig(name string, args FirebaseAppCheckPlayIntegrityConfigArgs) *FirebaseAppCheckPlayIntegrityConfig {
	return &FirebaseAppCheckPlayIntegrityConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirebaseAppCheckPlayIntegrityConfig)(nil)

// FirebaseAppCheckPlayIntegrityConfig represents the Terraform resource google_firebase_app_check_play_integrity_config.
type FirebaseAppCheckPlayIntegrityConfig struct {
	Name      string
	Args      FirebaseAppCheckPlayIntegrityConfigArgs
	state     *firebaseAppCheckPlayIntegrityConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [FirebaseAppCheckPlayIntegrityConfig].
func (facpic *FirebaseAppCheckPlayIntegrityConfig) Type() string {
	return "google_firebase_app_check_play_integrity_config"
}

// LocalName returns the local name for [FirebaseAppCheckPlayIntegrityConfig].
func (facpic *FirebaseAppCheckPlayIntegrityConfig) LocalName() string {
	return facpic.Name
}

// Configuration returns the configuration (args) for [FirebaseAppCheckPlayIntegrityConfig].
func (facpic *FirebaseAppCheckPlayIntegrityConfig) Configuration() interface{} {
	return facpic.Args
}

// DependOn is used for other resources to depend on [FirebaseAppCheckPlayIntegrityConfig].
func (facpic *FirebaseAppCheckPlayIntegrityConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(facpic)
}

// Dependencies returns the list of resources [FirebaseAppCheckPlayIntegrityConfig] depends_on.
func (facpic *FirebaseAppCheckPlayIntegrityConfig) Dependencies() terra.Dependencies {
	return facpic.DependsOn
}

// LifecycleManagement returns the lifecycle block for [FirebaseAppCheckPlayIntegrityConfig].
func (facpic *FirebaseAppCheckPlayIntegrityConfig) LifecycleManagement() *terra.Lifecycle {
	return facpic.Lifecycle
}

// Attributes returns the attributes for [FirebaseAppCheckPlayIntegrityConfig].
func (facpic *FirebaseAppCheckPlayIntegrityConfig) Attributes() firebaseAppCheckPlayIntegrityConfigAttributes {
	return firebaseAppCheckPlayIntegrityConfigAttributes{ref: terra.ReferenceResource(facpic)}
}

// ImportState imports the given attribute values into [FirebaseAppCheckPlayIntegrityConfig]'s state.
func (facpic *FirebaseAppCheckPlayIntegrityConfig) ImportState(av io.Reader) error {
	facpic.state = &firebaseAppCheckPlayIntegrityConfigState{}
	if err := json.NewDecoder(av).Decode(facpic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", facpic.Type(), facpic.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [FirebaseAppCheckPlayIntegrityConfig] has state.
func (facpic *FirebaseAppCheckPlayIntegrityConfig) State() (*firebaseAppCheckPlayIntegrityConfigState, bool) {
	return facpic.state, facpic.state != nil
}

// StateMust returns the state for [FirebaseAppCheckPlayIntegrityConfig]. Panics if the state is nil.
func (facpic *FirebaseAppCheckPlayIntegrityConfig) StateMust() *firebaseAppCheckPlayIntegrityConfigState {
	if facpic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", facpic.Type(), facpic.LocalName()))
	}
	return facpic.state
}

// FirebaseAppCheckPlayIntegrityConfigArgs contains the configurations for google_firebase_app_check_play_integrity_config.
type FirebaseAppCheckPlayIntegrityConfigArgs struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TokenTtl: string, optional
	TokenTtl terra.StringValue `hcl:"token_ttl,attr"`
	// Timeouts: optional
	Timeouts *firebaseappcheckplayintegrityconfig.Timeouts `hcl:"timeouts,block"`
}
type firebaseAppCheckPlayIntegrityConfigAttributes struct {
	ref terra.Reference
}

// AppId returns a reference to field app_id of google_firebase_app_check_play_integrity_config.
func (facpic firebaseAppCheckPlayIntegrityConfigAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(facpic.ref.Append("app_id"))
}

// Id returns a reference to field id of google_firebase_app_check_play_integrity_config.
func (facpic firebaseAppCheckPlayIntegrityConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(facpic.ref.Append("id"))
}

// Name returns a reference to field name of google_firebase_app_check_play_integrity_config.
func (facpic firebaseAppCheckPlayIntegrityConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(facpic.ref.Append("name"))
}

// Project returns a reference to field project of google_firebase_app_check_play_integrity_config.
func (facpic firebaseAppCheckPlayIntegrityConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(facpic.ref.Append("project"))
}

// TokenTtl returns a reference to field token_ttl of google_firebase_app_check_play_integrity_config.
func (facpic firebaseAppCheckPlayIntegrityConfigAttributes) TokenTtl() terra.StringValue {
	return terra.ReferenceAsString(facpic.ref.Append("token_ttl"))
}

func (facpic firebaseAppCheckPlayIntegrityConfigAttributes) Timeouts() firebaseappcheckplayintegrityconfig.TimeoutsAttributes {
	return terra.ReferenceAsSingle[firebaseappcheckplayintegrityconfig.TimeoutsAttributes](facpic.ref.Append("timeouts"))
}

type firebaseAppCheckPlayIntegrityConfigState struct {
	AppId    string                                             `json:"app_id"`
	Id       string                                             `json:"id"`
	Name     string                                             `json:"name"`
	Project  string                                             `json:"project"`
	TokenTtl string                                             `json:"token_ttl"`
	Timeouts *firebaseappcheckplayintegrityconfig.TimeoutsState `json:"timeouts"`
}
