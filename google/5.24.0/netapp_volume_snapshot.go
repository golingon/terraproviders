// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	netappvolumesnapshot "github.com/golingon/terraproviders/google/5.24.0/netappvolumesnapshot"
	"io"
)

// NewNetappVolumeSnapshot creates a new instance of [NetappVolumeSnapshot].
func NewNetappVolumeSnapshot(name string, args NetappVolumeSnapshotArgs) *NetappVolumeSnapshot {
	return &NetappVolumeSnapshot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetappVolumeSnapshot)(nil)

// NetappVolumeSnapshot represents the Terraform resource google_netapp_volume_snapshot.
type NetappVolumeSnapshot struct {
	Name      string
	Args      NetappVolumeSnapshotArgs
	state     *netappVolumeSnapshotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetappVolumeSnapshot].
func (nvs *NetappVolumeSnapshot) Type() string {
	return "google_netapp_volume_snapshot"
}

// LocalName returns the local name for [NetappVolumeSnapshot].
func (nvs *NetappVolumeSnapshot) LocalName() string {
	return nvs.Name
}

// Configuration returns the configuration (args) for [NetappVolumeSnapshot].
func (nvs *NetappVolumeSnapshot) Configuration() interface{} {
	return nvs.Args
}

// DependOn is used for other resources to depend on [NetappVolumeSnapshot].
func (nvs *NetappVolumeSnapshot) DependOn() terra.Reference {
	return terra.ReferenceResource(nvs)
}

// Dependencies returns the list of resources [NetappVolumeSnapshot] depends_on.
func (nvs *NetappVolumeSnapshot) Dependencies() terra.Dependencies {
	return nvs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetappVolumeSnapshot].
func (nvs *NetappVolumeSnapshot) LifecycleManagement() *terra.Lifecycle {
	return nvs.Lifecycle
}

// Attributes returns the attributes for [NetappVolumeSnapshot].
func (nvs *NetappVolumeSnapshot) Attributes() netappVolumeSnapshotAttributes {
	return netappVolumeSnapshotAttributes{ref: terra.ReferenceResource(nvs)}
}

// ImportState imports the given attribute values into [NetappVolumeSnapshot]'s state.
func (nvs *NetappVolumeSnapshot) ImportState(av io.Reader) error {
	nvs.state = &netappVolumeSnapshotState{}
	if err := json.NewDecoder(av).Decode(nvs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nvs.Type(), nvs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetappVolumeSnapshot] has state.
func (nvs *NetappVolumeSnapshot) State() (*netappVolumeSnapshotState, bool) {
	return nvs.state, nvs.state != nil
}

// StateMust returns the state for [NetappVolumeSnapshot]. Panics if the state is nil.
func (nvs *NetappVolumeSnapshot) StateMust() *netappVolumeSnapshotState {
	if nvs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nvs.Type(), nvs.LocalName()))
	}
	return nvs.state
}

// NetappVolumeSnapshotArgs contains the configurations for google_netapp_volume_snapshot.
type NetappVolumeSnapshotArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// VolumeName: string, required
	VolumeName terra.StringValue `hcl:"volume_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *netappvolumesnapshot.Timeouts `hcl:"timeouts,block"`
}
type netappVolumeSnapshotAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_netapp_volume_snapshot.
func (nvs netappVolumeSnapshotAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(nvs.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_netapp_volume_snapshot.
func (nvs netappVolumeSnapshotAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nvs.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_netapp_volume_snapshot.
func (nvs netappVolumeSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nvs.ref.Append("id"))
}

// Labels returns a reference to field labels of google_netapp_volume_snapshot.
func (nvs netappVolumeSnapshotAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nvs.ref.Append("labels"))
}

// Location returns a reference to field location of google_netapp_volume_snapshot.
func (nvs netappVolumeSnapshotAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(nvs.ref.Append("location"))
}

// Name returns a reference to field name of google_netapp_volume_snapshot.
func (nvs netappVolumeSnapshotAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nvs.ref.Append("name"))
}

// Project returns a reference to field project of google_netapp_volume_snapshot.
func (nvs netappVolumeSnapshotAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(nvs.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_netapp_volume_snapshot.
func (nvs netappVolumeSnapshotAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nvs.ref.Append("terraform_labels"))
}

// UsedBytes returns a reference to field used_bytes of google_netapp_volume_snapshot.
func (nvs netappVolumeSnapshotAttributes) UsedBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(nvs.ref.Append("used_bytes"))
}

// VolumeName returns a reference to field volume_name of google_netapp_volume_snapshot.
func (nvs netappVolumeSnapshotAttributes) VolumeName() terra.StringValue {
	return terra.ReferenceAsString(nvs.ref.Append("volume_name"))
}

func (nvs netappVolumeSnapshotAttributes) Timeouts() netappvolumesnapshot.TimeoutsAttributes {
	return terra.ReferenceAsSingle[netappvolumesnapshot.TimeoutsAttributes](nvs.ref.Append("timeouts"))
}

type netappVolumeSnapshotState struct {
	Description     string                              `json:"description"`
	EffectiveLabels map[string]string                   `json:"effective_labels"`
	Id              string                              `json:"id"`
	Labels          map[string]string                   `json:"labels"`
	Location        string                              `json:"location"`
	Name            string                              `json:"name"`
	Project         string                              `json:"project"`
	TerraformLabels map[string]string                   `json:"terraform_labels"`
	UsedBytes       float64                             `json:"used_bytes"`
	VolumeName      string                              `json:"volume_name"`
	Timeouts        *netappvolumesnapshot.TimeoutsState `json:"timeouts"`
}
