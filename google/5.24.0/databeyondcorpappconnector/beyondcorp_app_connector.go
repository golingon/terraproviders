// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package databeyondcorpappconnector

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type PrincipalInfo struct {
	// ServiceAccount: min=0
	ServiceAccount []ServiceAccount `hcl:"service_account,block" validate:"min=0"`
}

type ServiceAccount struct{}

type PrincipalInfoAttributes struct {
	ref terra.Reference
}

func (pi PrincipalInfoAttributes) InternalRef() (terra.Reference, error) {
	return pi.ref, nil
}

func (pi PrincipalInfoAttributes) InternalWithRef(ref terra.Reference) PrincipalInfoAttributes {
	return PrincipalInfoAttributes{ref: ref}
}

func (pi PrincipalInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pi.ref.InternalTokens()
}

func (pi PrincipalInfoAttributes) ServiceAccount() terra.ListValue[ServiceAccountAttributes] {
	return terra.ReferenceAsList[ServiceAccountAttributes](pi.ref.Append("service_account"))
}

type ServiceAccountAttributes struct {
	ref terra.Reference
}

func (sa ServiceAccountAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa ServiceAccountAttributes) InternalWithRef(ref terra.Reference) ServiceAccountAttributes {
	return ServiceAccountAttributes{ref: ref}
}

func (sa ServiceAccountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa ServiceAccountAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("email"))
}

type PrincipalInfoState struct {
	ServiceAccount []ServiceAccountState `json:"service_account"`
}

type ServiceAccountState struct {
	Email string `json:"email"`
}
