// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	workbenchinstance "github.com/golingon/terraproviders/google/5.24.0/workbenchinstance"
	"io"
)

// NewWorkbenchInstance creates a new instance of [WorkbenchInstance].
func NewWorkbenchInstance(name string, args WorkbenchInstanceArgs) *WorkbenchInstance {
	return &WorkbenchInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WorkbenchInstance)(nil)

// WorkbenchInstance represents the Terraform resource google_workbench_instance.
type WorkbenchInstance struct {
	Name      string
	Args      WorkbenchInstanceArgs
	state     *workbenchInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [WorkbenchInstance].
func (wi *WorkbenchInstance) Type() string {
	return "google_workbench_instance"
}

// LocalName returns the local name for [WorkbenchInstance].
func (wi *WorkbenchInstance) LocalName() string {
	return wi.Name
}

// Configuration returns the configuration (args) for [WorkbenchInstance].
func (wi *WorkbenchInstance) Configuration() interface{} {
	return wi.Args
}

// DependOn is used for other resources to depend on [WorkbenchInstance].
func (wi *WorkbenchInstance) DependOn() terra.Reference {
	return terra.ReferenceResource(wi)
}

// Dependencies returns the list of resources [WorkbenchInstance] depends_on.
func (wi *WorkbenchInstance) Dependencies() terra.Dependencies {
	return wi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [WorkbenchInstance].
func (wi *WorkbenchInstance) LifecycleManagement() *terra.Lifecycle {
	return wi.Lifecycle
}

// Attributes returns the attributes for [WorkbenchInstance].
func (wi *WorkbenchInstance) Attributes() workbenchInstanceAttributes {
	return workbenchInstanceAttributes{ref: terra.ReferenceResource(wi)}
}

// ImportState imports the given attribute values into [WorkbenchInstance]'s state.
func (wi *WorkbenchInstance) ImportState(av io.Reader) error {
	wi.state = &workbenchInstanceState{}
	if err := json.NewDecoder(av).Decode(wi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wi.Type(), wi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [WorkbenchInstance] has state.
func (wi *WorkbenchInstance) State() (*workbenchInstanceState, bool) {
	return wi.state, wi.state != nil
}

// StateMust returns the state for [WorkbenchInstance]. Panics if the state is nil.
func (wi *WorkbenchInstance) StateMust() *workbenchInstanceState {
	if wi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wi.Type(), wi.LocalName()))
	}
	return wi.state
}

// WorkbenchInstanceArgs contains the configurations for google_workbench_instance.
type WorkbenchInstanceArgs struct {
	// DesiredState: string, optional
	DesiredState terra.StringValue `hcl:"desired_state,attr"`
	// DisableProxyAccess: bool, optional
	DisableProxyAccess terra.BoolValue `hcl:"disable_proxy_access,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, optional
	InstanceId terra.StringValue `hcl:"instance_id,attr"`
	// InstanceOwners: list of string, optional
	InstanceOwners terra.ListValue[terra.StringValue] `hcl:"instance_owners,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// HealthInfo: min=0
	HealthInfo []workbenchinstance.HealthInfo `hcl:"health_info,block" validate:"min=0"`
	// UpgradeHistory: min=0
	UpgradeHistory []workbenchinstance.UpgradeHistory `hcl:"upgrade_history,block" validate:"min=0"`
	// GceSetup: optional
	GceSetup *workbenchinstance.GceSetup `hcl:"gce_setup,block"`
	// Timeouts: optional
	Timeouts *workbenchinstance.Timeouts `hcl:"timeouts,block"`
}
type workbenchInstanceAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_workbench_instance.
func (wi workbenchInstanceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(wi.ref.Append("create_time"))
}

// Creator returns a reference to field creator of google_workbench_instance.
func (wi workbenchInstanceAttributes) Creator() terra.StringValue {
	return terra.ReferenceAsString(wi.ref.Append("creator"))
}

// DesiredState returns a reference to field desired_state of google_workbench_instance.
func (wi workbenchInstanceAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceAsString(wi.ref.Append("desired_state"))
}

// DisableProxyAccess returns a reference to field disable_proxy_access of google_workbench_instance.
func (wi workbenchInstanceAttributes) DisableProxyAccess() terra.BoolValue {
	return terra.ReferenceAsBool(wi.ref.Append("disable_proxy_access"))
}

// EffectiveLabels returns a reference to field effective_labels of google_workbench_instance.
func (wi workbenchInstanceAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](wi.ref.Append("effective_labels"))
}

// HealthState returns a reference to field health_state of google_workbench_instance.
func (wi workbenchInstanceAttributes) HealthState() terra.StringValue {
	return terra.ReferenceAsString(wi.ref.Append("health_state"))
}

// Id returns a reference to field id of google_workbench_instance.
func (wi workbenchInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(wi.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of google_workbench_instance.
func (wi workbenchInstanceAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(wi.ref.Append("instance_id"))
}

// InstanceOwners returns a reference to field instance_owners of google_workbench_instance.
func (wi workbenchInstanceAttributes) InstanceOwners() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wi.ref.Append("instance_owners"))
}

// Labels returns a reference to field labels of google_workbench_instance.
func (wi workbenchInstanceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](wi.ref.Append("labels"))
}

// Location returns a reference to field location of google_workbench_instance.
func (wi workbenchInstanceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(wi.ref.Append("location"))
}

// Name returns a reference to field name of google_workbench_instance.
func (wi workbenchInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(wi.ref.Append("name"))
}

// Project returns a reference to field project of google_workbench_instance.
func (wi workbenchInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(wi.ref.Append("project"))
}

// ProxyUri returns a reference to field proxy_uri of google_workbench_instance.
func (wi workbenchInstanceAttributes) ProxyUri() terra.StringValue {
	return terra.ReferenceAsString(wi.ref.Append("proxy_uri"))
}

// State returns a reference to field state of google_workbench_instance.
func (wi workbenchInstanceAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(wi.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_workbench_instance.
func (wi workbenchInstanceAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](wi.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_workbench_instance.
func (wi workbenchInstanceAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(wi.ref.Append("update_time"))
}

func (wi workbenchInstanceAttributes) HealthInfo() terra.ListValue[workbenchinstance.HealthInfoAttributes] {
	return terra.ReferenceAsList[workbenchinstance.HealthInfoAttributes](wi.ref.Append("health_info"))
}

func (wi workbenchInstanceAttributes) UpgradeHistory() terra.ListValue[workbenchinstance.UpgradeHistoryAttributes] {
	return terra.ReferenceAsList[workbenchinstance.UpgradeHistoryAttributes](wi.ref.Append("upgrade_history"))
}

func (wi workbenchInstanceAttributes) GceSetup() terra.ListValue[workbenchinstance.GceSetupAttributes] {
	return terra.ReferenceAsList[workbenchinstance.GceSetupAttributes](wi.ref.Append("gce_setup"))
}

func (wi workbenchInstanceAttributes) Timeouts() workbenchinstance.TimeoutsAttributes {
	return terra.ReferenceAsSingle[workbenchinstance.TimeoutsAttributes](wi.ref.Append("timeouts"))
}

type workbenchInstanceState struct {
	CreateTime         string                                  `json:"create_time"`
	Creator            string                                  `json:"creator"`
	DesiredState       string                                  `json:"desired_state"`
	DisableProxyAccess bool                                    `json:"disable_proxy_access"`
	EffectiveLabels    map[string]string                       `json:"effective_labels"`
	HealthState        string                                  `json:"health_state"`
	Id                 string                                  `json:"id"`
	InstanceId         string                                  `json:"instance_id"`
	InstanceOwners     []string                                `json:"instance_owners"`
	Labels             map[string]string                       `json:"labels"`
	Location           string                                  `json:"location"`
	Name               string                                  `json:"name"`
	Project            string                                  `json:"project"`
	ProxyUri           string                                  `json:"proxy_uri"`
	State              string                                  `json:"state"`
	TerraformLabels    map[string]string                       `json:"terraform_labels"`
	UpdateTime         string                                  `json:"update_time"`
	HealthInfo         []workbenchinstance.HealthInfoState     `json:"health_info"`
	UpgradeHistory     []workbenchinstance.UpgradeHistoryState `json:"upgrade_history"`
	GceSetup           []workbenchinstance.GceSetupState       `json:"gce_setup"`
	Timeouts           *workbenchinstance.TimeoutsState        `json:"timeouts"`
}
