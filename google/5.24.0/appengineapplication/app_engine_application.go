// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package appengineapplication

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type UrlDispatchRule struct{}

type FeatureSettings struct {
	// SplitHealthChecks: bool, required
	SplitHealthChecks terra.BoolValue `hcl:"split_health_checks,attr" validate:"required"`
}

type Iap struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Oauth2ClientId: string, required
	Oauth2ClientId terra.StringValue `hcl:"oauth2_client_id,attr" validate:"required"`
	// Oauth2ClientSecret: string, required
	Oauth2ClientSecret terra.StringValue `hcl:"oauth2_client_secret,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type UrlDispatchRuleAttributes struct {
	ref terra.Reference
}

func (udr UrlDispatchRuleAttributes) InternalRef() (terra.Reference, error) {
	return udr.ref, nil
}

func (udr UrlDispatchRuleAttributes) InternalWithRef(ref terra.Reference) UrlDispatchRuleAttributes {
	return UrlDispatchRuleAttributes{ref: ref}
}

func (udr UrlDispatchRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return udr.ref.InternalTokens()
}

func (udr UrlDispatchRuleAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(udr.ref.Append("domain"))
}

func (udr UrlDispatchRuleAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(udr.ref.Append("path"))
}

func (udr UrlDispatchRuleAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(udr.ref.Append("service"))
}

type FeatureSettingsAttributes struct {
	ref terra.Reference
}

func (fs FeatureSettingsAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs FeatureSettingsAttributes) InternalWithRef(ref terra.Reference) FeatureSettingsAttributes {
	return FeatureSettingsAttributes{ref: ref}
}

func (fs FeatureSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs FeatureSettingsAttributes) SplitHealthChecks() terra.BoolValue {
	return terra.ReferenceAsBool(fs.ref.Append("split_health_checks"))
}

type IapAttributes struct {
	ref terra.Reference
}

func (i IapAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IapAttributes) InternalWithRef(ref terra.Reference) IapAttributes {
	return IapAttributes{ref: ref}
}

func (i IapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IapAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(i.ref.Append("enabled"))
}

func (i IapAttributes) Oauth2ClientId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("oauth2_client_id"))
}

func (i IapAttributes) Oauth2ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("oauth2_client_secret"))
}

func (i IapAttributes) Oauth2ClientSecretSha256() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("oauth2_client_secret_sha256"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type UrlDispatchRuleState struct {
	Domain  string `json:"domain"`
	Path    string `json:"path"`
	Service string `json:"service"`
}

type FeatureSettingsState struct {
	SplitHealthChecks bool `json:"split_health_checks"`
}

type IapState struct {
	Enabled                  bool   `json:"enabled"`
	Oauth2ClientId           string `json:"oauth2_client_id"`
	Oauth2ClientSecret       string `json:"oauth2_client_secret"`
	Oauth2ClientSecretSha256 string `json:"oauth2_client_secret_sha256"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Update string `json:"update"`
}
