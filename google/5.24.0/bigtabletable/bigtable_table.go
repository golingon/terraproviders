// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package bigtabletable

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ColumnFamily struct {
	// Family: string, required
	Family terra.StringValue `hcl:"family,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ColumnFamilyAttributes struct {
	ref terra.Reference
}

func (cf ColumnFamilyAttributes) InternalRef() (terra.Reference, error) {
	return cf.ref, nil
}

func (cf ColumnFamilyAttributes) InternalWithRef(ref terra.Reference) ColumnFamilyAttributes {
	return ColumnFamilyAttributes{ref: ref}
}

func (cf ColumnFamilyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cf.ref.InternalTokens()
}

func (cf ColumnFamilyAttributes) Family() terra.StringValue {
	return terra.ReferenceAsString(cf.ref.Append("family"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ColumnFamilyState struct {
	Family string `json:"family"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Update string `json:"update"`
}
