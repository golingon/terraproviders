// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datastreamconnectionprofile

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BigqueryProfile struct{}

type ForwardSshConnectivity struct {
	// Hostname: string, required
	Hostname terra.StringValue `hcl:"hostname,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// PrivateKey: string, optional
	PrivateKey terra.StringValue `hcl:"private_key,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type GcsProfile struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// RootPath: string, optional
	RootPath terra.StringValue `hcl:"root_path,attr"`
}

type MysqlProfile struct {
	// Hostname: string, required
	Hostname terra.StringValue `hcl:"hostname,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// SslConfig: optional
	SslConfig *SslConfig `hcl:"ssl_config,block"`
}

type SslConfig struct {
	// CaCertificate: string, optional
	CaCertificate terra.StringValue `hcl:"ca_certificate,attr"`
	// ClientCertificate: string, optional
	ClientCertificate terra.StringValue `hcl:"client_certificate,attr"`
	// ClientKey: string, optional
	ClientKey terra.StringValue `hcl:"client_key,attr"`
}

type OracleProfile struct {
	// ConnectionAttributes: map of string, optional
	ConnectionAttributes terra.MapValue[terra.StringValue] `hcl:"connection_attributes,attr"`
	// DatabaseService: string, required
	DatabaseService terra.StringValue `hcl:"database_service,attr" validate:"required"`
	// Hostname: string, required
	Hostname terra.StringValue `hcl:"hostname,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type PostgresqlProfile struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Hostname: string, required
	Hostname terra.StringValue `hcl:"hostname,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type PrivateConnectivity struct {
	// PrivateConnection: string, required
	PrivateConnection terra.StringValue `hcl:"private_connection,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BigqueryProfileAttributes struct {
	ref terra.Reference
}

func (bp BigqueryProfileAttributes) InternalRef() (terra.Reference, error) {
	return bp.ref, nil
}

func (bp BigqueryProfileAttributes) InternalWithRef(ref terra.Reference) BigqueryProfileAttributes {
	return BigqueryProfileAttributes{ref: ref}
}

func (bp BigqueryProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bp.ref.InternalTokens()
}

type ForwardSshConnectivityAttributes struct {
	ref terra.Reference
}

func (fsc ForwardSshConnectivityAttributes) InternalRef() (terra.Reference, error) {
	return fsc.ref, nil
}

func (fsc ForwardSshConnectivityAttributes) InternalWithRef(ref terra.Reference) ForwardSshConnectivityAttributes {
	return ForwardSshConnectivityAttributes{ref: ref}
}

func (fsc ForwardSshConnectivityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fsc.ref.InternalTokens()
}

func (fsc ForwardSshConnectivityAttributes) Hostname() terra.StringValue {
	return terra.ReferenceAsString(fsc.ref.Append("hostname"))
}

func (fsc ForwardSshConnectivityAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(fsc.ref.Append("password"))
}

func (fsc ForwardSshConnectivityAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(fsc.ref.Append("port"))
}

func (fsc ForwardSshConnectivityAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(fsc.ref.Append("private_key"))
}

func (fsc ForwardSshConnectivityAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(fsc.ref.Append("username"))
}

type GcsProfileAttributes struct {
	ref terra.Reference
}

func (gp GcsProfileAttributes) InternalRef() (terra.Reference, error) {
	return gp.ref, nil
}

func (gp GcsProfileAttributes) InternalWithRef(ref terra.Reference) GcsProfileAttributes {
	return GcsProfileAttributes{ref: ref}
}

func (gp GcsProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gp.ref.InternalTokens()
}

func (gp GcsProfileAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("bucket"))
}

func (gp GcsProfileAttributes) RootPath() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("root_path"))
}

type MysqlProfileAttributes struct {
	ref terra.Reference
}

func (mp MysqlProfileAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp MysqlProfileAttributes) InternalWithRef(ref terra.Reference) MysqlProfileAttributes {
	return MysqlProfileAttributes{ref: ref}
}

func (mp MysqlProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp MysqlProfileAttributes) Hostname() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("hostname"))
}

func (mp MysqlProfileAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("password"))
}

func (mp MysqlProfileAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(mp.ref.Append("port"))
}

func (mp MysqlProfileAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("username"))
}

func (mp MysqlProfileAttributes) SslConfig() terra.ListValue[SslConfigAttributes] {
	return terra.ReferenceAsList[SslConfigAttributes](mp.ref.Append("ssl_config"))
}

type SslConfigAttributes struct {
	ref terra.Reference
}

func (sc SslConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SslConfigAttributes) InternalWithRef(ref terra.Reference) SslConfigAttributes {
	return SslConfigAttributes{ref: ref}
}

func (sc SslConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SslConfigAttributes) CaCertificate() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("ca_certificate"))
}

func (sc SslConfigAttributes) CaCertificateSet() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("ca_certificate_set"))
}

func (sc SslConfigAttributes) ClientCertificate() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("client_certificate"))
}

func (sc SslConfigAttributes) ClientCertificateSet() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("client_certificate_set"))
}

func (sc SslConfigAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("client_key"))
}

func (sc SslConfigAttributes) ClientKeySet() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("client_key_set"))
}

type OracleProfileAttributes struct {
	ref terra.Reference
}

func (op OracleProfileAttributes) InternalRef() (terra.Reference, error) {
	return op.ref, nil
}

func (op OracleProfileAttributes) InternalWithRef(ref terra.Reference) OracleProfileAttributes {
	return OracleProfileAttributes{ref: ref}
}

func (op OracleProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return op.ref.InternalTokens()
}

func (op OracleProfileAttributes) ConnectionAttributes() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](op.ref.Append("connection_attributes"))
}

func (op OracleProfileAttributes) DatabaseService() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("database_service"))
}

func (op OracleProfileAttributes) Hostname() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("hostname"))
}

func (op OracleProfileAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("password"))
}

func (op OracleProfileAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(op.ref.Append("port"))
}

func (op OracleProfileAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("username"))
}

type PostgresqlProfileAttributes struct {
	ref terra.Reference
}

func (pp PostgresqlProfileAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp PostgresqlProfileAttributes) InternalWithRef(ref terra.Reference) PostgresqlProfileAttributes {
	return PostgresqlProfileAttributes{ref: ref}
}

func (pp PostgresqlProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp PostgresqlProfileAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("database"))
}

func (pp PostgresqlProfileAttributes) Hostname() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("hostname"))
}

func (pp PostgresqlProfileAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("password"))
}

func (pp PostgresqlProfileAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(pp.ref.Append("port"))
}

func (pp PostgresqlProfileAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("username"))
}

type PrivateConnectivityAttributes struct {
	ref terra.Reference
}

func (pc PrivateConnectivityAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PrivateConnectivityAttributes) InternalWithRef(ref terra.Reference) PrivateConnectivityAttributes {
	return PrivateConnectivityAttributes{ref: ref}
}

func (pc PrivateConnectivityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PrivateConnectivityAttributes) PrivateConnection() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("private_connection"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BigqueryProfileState struct{}

type ForwardSshConnectivityState struct {
	Hostname   string  `json:"hostname"`
	Password   string  `json:"password"`
	Port       float64 `json:"port"`
	PrivateKey string  `json:"private_key"`
	Username   string  `json:"username"`
}

type GcsProfileState struct {
	Bucket   string `json:"bucket"`
	RootPath string `json:"root_path"`
}

type MysqlProfileState struct {
	Hostname  string           `json:"hostname"`
	Password  string           `json:"password"`
	Port      float64          `json:"port"`
	Username  string           `json:"username"`
	SslConfig []SslConfigState `json:"ssl_config"`
}

type SslConfigState struct {
	CaCertificate        string `json:"ca_certificate"`
	CaCertificateSet     bool   `json:"ca_certificate_set"`
	ClientCertificate    string `json:"client_certificate"`
	ClientCertificateSet bool   `json:"client_certificate_set"`
	ClientKey            string `json:"client_key"`
	ClientKeySet         bool   `json:"client_key_set"`
}

type OracleProfileState struct {
	ConnectionAttributes map[string]string `json:"connection_attributes"`
	DatabaseService      string            `json:"database_service"`
	Hostname             string            `json:"hostname"`
	Password             string            `json:"password"`
	Port                 float64           `json:"port"`
	Username             string            `json:"username"`
}

type PostgresqlProfileState struct {
	Database string  `json:"database"`
	Hostname string  `json:"hostname"`
	Password string  `json:"password"`
	Port     float64 `json:"port"`
	Username string  `json:"username"`
}

type PrivateConnectivityState struct {
	PrivateConnection string `json:"private_connection"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
