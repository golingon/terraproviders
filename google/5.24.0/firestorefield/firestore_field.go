// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package firestorefield

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type IndexConfig struct {
	// Indexes: min=0
	Indexes []Indexes `hcl:"indexes,block" validate:"min=0"`
}

type Indexes struct {
	// ArrayConfig: string, optional
	ArrayConfig terra.StringValue `hcl:"array_config,attr"`
	// Order: string, optional
	Order terra.StringValue `hcl:"order,attr"`
	// QueryScope: string, optional
	QueryScope terra.StringValue `hcl:"query_scope,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type TtlConfig struct{}

type IndexConfigAttributes struct {
	ref terra.Reference
}

func (ic IndexConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic IndexConfigAttributes) InternalWithRef(ref terra.Reference) IndexConfigAttributes {
	return IndexConfigAttributes{ref: ref}
}

func (ic IndexConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic IndexConfigAttributes) Indexes() terra.SetValue[IndexesAttributes] {
	return terra.ReferenceAsSet[IndexesAttributes](ic.ref.Append("indexes"))
}

type IndexesAttributes struct {
	ref terra.Reference
}

func (i IndexesAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IndexesAttributes) InternalWithRef(ref terra.Reference) IndexesAttributes {
	return IndexesAttributes{ref: ref}
}

func (i IndexesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IndexesAttributes) ArrayConfig() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("array_config"))
}

func (i IndexesAttributes) Order() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("order"))
}

func (i IndexesAttributes) QueryScope() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("query_scope"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TtlConfigAttributes struct {
	ref terra.Reference
}

func (tc TtlConfigAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TtlConfigAttributes) InternalWithRef(ref terra.Reference) TtlConfigAttributes {
	return TtlConfigAttributes{ref: ref}
}

func (tc TtlConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TtlConfigAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("state"))
}

type IndexConfigState struct {
	Indexes []IndexesState `json:"indexes"`
}

type IndexesState struct {
	ArrayConfig string `json:"array_config"`
	Order       string `json:"order"`
	QueryScope  string `json:"query_scope"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TtlConfigState struct {
	State string `json:"state"`
}
