// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	firebaseappcheckdebugtoken "github.com/golingon/terraproviders/google/5.24.0/firebaseappcheckdebugtoken"
	"io"
)

// NewFirebaseAppCheckDebugToken creates a new instance of [FirebaseAppCheckDebugToken].
func NewFirebaseAppCheckDebugToken(name string, args FirebaseAppCheckDebugTokenArgs) *FirebaseAppCheckDebugToken {
	return &FirebaseAppCheckDebugToken{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirebaseAppCheckDebugToken)(nil)

// FirebaseAppCheckDebugToken represents the Terraform resource google_firebase_app_check_debug_token.
type FirebaseAppCheckDebugToken struct {
	Name      string
	Args      FirebaseAppCheckDebugTokenArgs
	state     *firebaseAppCheckDebugTokenState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [FirebaseAppCheckDebugToken].
func (facdt *FirebaseAppCheckDebugToken) Type() string {
	return "google_firebase_app_check_debug_token"
}

// LocalName returns the local name for [FirebaseAppCheckDebugToken].
func (facdt *FirebaseAppCheckDebugToken) LocalName() string {
	return facdt.Name
}

// Configuration returns the configuration (args) for [FirebaseAppCheckDebugToken].
func (facdt *FirebaseAppCheckDebugToken) Configuration() interface{} {
	return facdt.Args
}

// DependOn is used for other resources to depend on [FirebaseAppCheckDebugToken].
func (facdt *FirebaseAppCheckDebugToken) DependOn() terra.Reference {
	return terra.ReferenceResource(facdt)
}

// Dependencies returns the list of resources [FirebaseAppCheckDebugToken] depends_on.
func (facdt *FirebaseAppCheckDebugToken) Dependencies() terra.Dependencies {
	return facdt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [FirebaseAppCheckDebugToken].
func (facdt *FirebaseAppCheckDebugToken) LifecycleManagement() *terra.Lifecycle {
	return facdt.Lifecycle
}

// Attributes returns the attributes for [FirebaseAppCheckDebugToken].
func (facdt *FirebaseAppCheckDebugToken) Attributes() firebaseAppCheckDebugTokenAttributes {
	return firebaseAppCheckDebugTokenAttributes{ref: terra.ReferenceResource(facdt)}
}

// ImportState imports the given attribute values into [FirebaseAppCheckDebugToken]'s state.
func (facdt *FirebaseAppCheckDebugToken) ImportState(av io.Reader) error {
	facdt.state = &firebaseAppCheckDebugTokenState{}
	if err := json.NewDecoder(av).Decode(facdt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", facdt.Type(), facdt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [FirebaseAppCheckDebugToken] has state.
func (facdt *FirebaseAppCheckDebugToken) State() (*firebaseAppCheckDebugTokenState, bool) {
	return facdt.state, facdt.state != nil
}

// StateMust returns the state for [FirebaseAppCheckDebugToken]. Panics if the state is nil.
func (facdt *FirebaseAppCheckDebugToken) StateMust() *firebaseAppCheckDebugTokenState {
	if facdt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", facdt.Type(), facdt.LocalName()))
	}
	return facdt.state
}

// FirebaseAppCheckDebugTokenArgs contains the configurations for google_firebase_app_check_debug_token.
type FirebaseAppCheckDebugTokenArgs struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Token: string, required
	Token terra.StringValue `hcl:"token,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *firebaseappcheckdebugtoken.Timeouts `hcl:"timeouts,block"`
}
type firebaseAppCheckDebugTokenAttributes struct {
	ref terra.Reference
}

// AppId returns a reference to field app_id of google_firebase_app_check_debug_token.
func (facdt firebaseAppCheckDebugTokenAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(facdt.ref.Append("app_id"))
}

// DebugTokenId returns a reference to field debug_token_id of google_firebase_app_check_debug_token.
func (facdt firebaseAppCheckDebugTokenAttributes) DebugTokenId() terra.StringValue {
	return terra.ReferenceAsString(facdt.ref.Append("debug_token_id"))
}

// DisplayName returns a reference to field display_name of google_firebase_app_check_debug_token.
func (facdt firebaseAppCheckDebugTokenAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(facdt.ref.Append("display_name"))
}

// Id returns a reference to field id of google_firebase_app_check_debug_token.
func (facdt firebaseAppCheckDebugTokenAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(facdt.ref.Append("id"))
}

// Project returns a reference to field project of google_firebase_app_check_debug_token.
func (facdt firebaseAppCheckDebugTokenAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(facdt.ref.Append("project"))
}

// Token returns a reference to field token of google_firebase_app_check_debug_token.
func (facdt firebaseAppCheckDebugTokenAttributes) Token() terra.StringValue {
	return terra.ReferenceAsString(facdt.ref.Append("token"))
}

func (facdt firebaseAppCheckDebugTokenAttributes) Timeouts() firebaseappcheckdebugtoken.TimeoutsAttributes {
	return terra.ReferenceAsSingle[firebaseappcheckdebugtoken.TimeoutsAttributes](facdt.ref.Append("timeouts"))
}

type firebaseAppCheckDebugTokenState struct {
	AppId        string                                    `json:"app_id"`
	DebugTokenId string                                    `json:"debug_token_id"`
	DisplayName  string                                    `json:"display_name"`
	Id           string                                    `json:"id"`
	Project      string                                    `json:"project"`
	Token        string                                    `json:"token"`
	Timeouts     *firebaseappcheckdebugtoken.TimeoutsState `json:"timeouts"`
}
