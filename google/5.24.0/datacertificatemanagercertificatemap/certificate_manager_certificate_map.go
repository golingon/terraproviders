// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datacertificatemanagercertificatemap

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type GclbTargets struct {
	// IpConfigs: min=0
	IpConfigs []IpConfigs `hcl:"ip_configs,block" validate:"min=0"`
}

type IpConfigs struct{}

type GclbTargetsAttributes struct {
	ref terra.Reference
}

func (gt GclbTargetsAttributes) InternalRef() (terra.Reference, error) {
	return gt.ref, nil
}

func (gt GclbTargetsAttributes) InternalWithRef(ref terra.Reference) GclbTargetsAttributes {
	return GclbTargetsAttributes{ref: ref}
}

func (gt GclbTargetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gt.ref.InternalTokens()
}

func (gt GclbTargetsAttributes) TargetHttpsProxy() terra.StringValue {
	return terra.ReferenceAsString(gt.ref.Append("target_https_proxy"))
}

func (gt GclbTargetsAttributes) TargetSslProxy() terra.StringValue {
	return terra.ReferenceAsString(gt.ref.Append("target_ssl_proxy"))
}

func (gt GclbTargetsAttributes) IpConfigs() terra.ListValue[IpConfigsAttributes] {
	return terra.ReferenceAsList[IpConfigsAttributes](gt.ref.Append("ip_configs"))
}

type IpConfigsAttributes struct {
	ref terra.Reference
}

func (ic IpConfigsAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic IpConfigsAttributes) InternalWithRef(ref terra.Reference) IpConfigsAttributes {
	return IpConfigsAttributes{ref: ref}
}

func (ic IpConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic IpConfigsAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("ip_address"))
}

func (ic IpConfigsAttributes) Ports() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](ic.ref.Append("ports"))
}

type GclbTargetsState struct {
	TargetHttpsProxy string           `json:"target_https_proxy"`
	TargetSslProxy   string           `json:"target_ssl_proxy"`
	IpConfigs        []IpConfigsState `json:"ip_configs"`
}

type IpConfigsState struct {
	IpAddress string    `json:"ip_address"`
	Ports     []float64 `json:"ports"`
}
