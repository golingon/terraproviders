// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewWorkbenchInstanceIamPolicy creates a new instance of [WorkbenchInstanceIamPolicy].
func NewWorkbenchInstanceIamPolicy(name string, args WorkbenchInstanceIamPolicyArgs) *WorkbenchInstanceIamPolicy {
	return &WorkbenchInstanceIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WorkbenchInstanceIamPolicy)(nil)

// WorkbenchInstanceIamPolicy represents the Terraform resource google_workbench_instance_iam_policy.
type WorkbenchInstanceIamPolicy struct {
	Name      string
	Args      WorkbenchInstanceIamPolicyArgs
	state     *workbenchInstanceIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [WorkbenchInstanceIamPolicy].
func (wiip *WorkbenchInstanceIamPolicy) Type() string {
	return "google_workbench_instance_iam_policy"
}

// LocalName returns the local name for [WorkbenchInstanceIamPolicy].
func (wiip *WorkbenchInstanceIamPolicy) LocalName() string {
	return wiip.Name
}

// Configuration returns the configuration (args) for [WorkbenchInstanceIamPolicy].
func (wiip *WorkbenchInstanceIamPolicy) Configuration() interface{} {
	return wiip.Args
}

// DependOn is used for other resources to depend on [WorkbenchInstanceIamPolicy].
func (wiip *WorkbenchInstanceIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(wiip)
}

// Dependencies returns the list of resources [WorkbenchInstanceIamPolicy] depends_on.
func (wiip *WorkbenchInstanceIamPolicy) Dependencies() terra.Dependencies {
	return wiip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [WorkbenchInstanceIamPolicy].
func (wiip *WorkbenchInstanceIamPolicy) LifecycleManagement() *terra.Lifecycle {
	return wiip.Lifecycle
}

// Attributes returns the attributes for [WorkbenchInstanceIamPolicy].
func (wiip *WorkbenchInstanceIamPolicy) Attributes() workbenchInstanceIamPolicyAttributes {
	return workbenchInstanceIamPolicyAttributes{ref: terra.ReferenceResource(wiip)}
}

// ImportState imports the given attribute values into [WorkbenchInstanceIamPolicy]'s state.
func (wiip *WorkbenchInstanceIamPolicy) ImportState(av io.Reader) error {
	wiip.state = &workbenchInstanceIamPolicyState{}
	if err := json.NewDecoder(av).Decode(wiip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wiip.Type(), wiip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [WorkbenchInstanceIamPolicy] has state.
func (wiip *WorkbenchInstanceIamPolicy) State() (*workbenchInstanceIamPolicyState, bool) {
	return wiip.state, wiip.state != nil
}

// StateMust returns the state for [WorkbenchInstanceIamPolicy]. Panics if the state is nil.
func (wiip *WorkbenchInstanceIamPolicy) StateMust() *workbenchInstanceIamPolicyState {
	if wiip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wiip.Type(), wiip.LocalName()))
	}
	return wiip.state
}

// WorkbenchInstanceIamPolicyArgs contains the configurations for google_workbench_instance_iam_policy.
type WorkbenchInstanceIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}
type workbenchInstanceIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_workbench_instance_iam_policy.
func (wiip workbenchInstanceIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(wiip.ref.Append("etag"))
}

// Id returns a reference to field id of google_workbench_instance_iam_policy.
func (wiip workbenchInstanceIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(wiip.ref.Append("id"))
}

// Location returns a reference to field location of google_workbench_instance_iam_policy.
func (wiip workbenchInstanceIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(wiip.ref.Append("location"))
}

// Name returns a reference to field name of google_workbench_instance_iam_policy.
func (wiip workbenchInstanceIamPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(wiip.ref.Append("name"))
}

// PolicyData returns a reference to field policy_data of google_workbench_instance_iam_policy.
func (wiip workbenchInstanceIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(wiip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_workbench_instance_iam_policy.
func (wiip workbenchInstanceIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(wiip.ref.Append("project"))
}

type workbenchInstanceIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Location   string `json:"location"`
	Name       string `json:"name"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
}
