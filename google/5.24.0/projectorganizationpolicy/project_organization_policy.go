// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package projectorganizationpolicy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BooleanPolicy struct {
	// Enforced: bool, required
	Enforced terra.BoolValue `hcl:"enforced,attr" validate:"required"`
}

type ListPolicy struct {
	// InheritFromParent: bool, optional
	InheritFromParent terra.BoolValue `hcl:"inherit_from_parent,attr"`
	// SuggestedValue: string, optional
	SuggestedValue terra.StringValue `hcl:"suggested_value,attr"`
	// Allow: optional
	Allow *Allow `hcl:"allow,block"`
	// Deny: optional
	Deny *Deny `hcl:"deny,block"`
}

type Allow struct {
	// All: bool, optional
	All terra.BoolValue `hcl:"all,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type Deny struct {
	// All: bool, optional
	All terra.BoolValue `hcl:"all,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type RestorePolicy struct {
	// Default: bool, required
	Default terra.BoolValue `hcl:"default,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BooleanPolicyAttributes struct {
	ref terra.Reference
}

func (bp BooleanPolicyAttributes) InternalRef() (terra.Reference, error) {
	return bp.ref, nil
}

func (bp BooleanPolicyAttributes) InternalWithRef(ref terra.Reference) BooleanPolicyAttributes {
	return BooleanPolicyAttributes{ref: ref}
}

func (bp BooleanPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bp.ref.InternalTokens()
}

func (bp BooleanPolicyAttributes) Enforced() terra.BoolValue {
	return terra.ReferenceAsBool(bp.ref.Append("enforced"))
}

type ListPolicyAttributes struct {
	ref terra.Reference
}

func (lp ListPolicyAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp ListPolicyAttributes) InternalWithRef(ref terra.Reference) ListPolicyAttributes {
	return ListPolicyAttributes{ref: ref}
}

func (lp ListPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp ListPolicyAttributes) InheritFromParent() terra.BoolValue {
	return terra.ReferenceAsBool(lp.ref.Append("inherit_from_parent"))
}

func (lp ListPolicyAttributes) SuggestedValue() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("suggested_value"))
}

func (lp ListPolicyAttributes) Allow() terra.ListValue[AllowAttributes] {
	return terra.ReferenceAsList[AllowAttributes](lp.ref.Append("allow"))
}

func (lp ListPolicyAttributes) Deny() terra.ListValue[DenyAttributes] {
	return terra.ReferenceAsList[DenyAttributes](lp.ref.Append("deny"))
}

type AllowAttributes struct {
	ref terra.Reference
}

func (a AllowAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AllowAttributes) InternalWithRef(ref terra.Reference) AllowAttributes {
	return AllowAttributes{ref: ref}
}

func (a AllowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AllowAttributes) All() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("all"))
}

func (a AllowAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](a.ref.Append("values"))
}

type DenyAttributes struct {
	ref terra.Reference
}

func (d DenyAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DenyAttributes) InternalWithRef(ref terra.Reference) DenyAttributes {
	return DenyAttributes{ref: ref}
}

func (d DenyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DenyAttributes) All() terra.BoolValue {
	return terra.ReferenceAsBool(d.ref.Append("all"))
}

func (d DenyAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type RestorePolicyAttributes struct {
	ref terra.Reference
}

func (rp RestorePolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RestorePolicyAttributes) InternalWithRef(ref terra.Reference) RestorePolicyAttributes {
	return RestorePolicyAttributes{ref: ref}
}

func (rp RestorePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RestorePolicyAttributes) Default() terra.BoolValue {
	return terra.ReferenceAsBool(rp.ref.Append("default"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BooleanPolicyState struct {
	Enforced bool `json:"enforced"`
}

type ListPolicyState struct {
	InheritFromParent bool         `json:"inherit_from_parent"`
	SuggestedValue    string       `json:"suggested_value"`
	Allow             []AllowState `json:"allow"`
	Deny              []DenyState  `json:"deny"`
}

type AllowState struct {
	All    bool     `json:"all"`
	Values []string `json:"values"`
}

type DenyState struct {
	All    bool     `json:"all"`
	Values []string `json:"values"`
}

type RestorePolicyState struct {
	Default bool `json:"default"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
