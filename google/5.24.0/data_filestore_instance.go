// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"github.com/golingon/lingon/pkg/terra"
	datafilestoreinstance "github.com/golingon/terraproviders/google/5.24.0/datafilestoreinstance"
)

// NewDataFilestoreInstance creates a new instance of [DataFilestoreInstance].
func NewDataFilestoreInstance(name string, args DataFilestoreInstanceArgs) *DataFilestoreInstance {
	return &DataFilestoreInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataFilestoreInstance)(nil)

// DataFilestoreInstance represents the Terraform data resource google_filestore_instance.
type DataFilestoreInstance struct {
	Name string
	Args DataFilestoreInstanceArgs
}

// DataSource returns the Terraform object type for [DataFilestoreInstance].
func (fi *DataFilestoreInstance) DataSource() string {
	return "google_filestore_instance"
}

// LocalName returns the local name for [DataFilestoreInstance].
func (fi *DataFilestoreInstance) LocalName() string {
	return fi.Name
}

// Configuration returns the configuration (args) for [DataFilestoreInstance].
func (fi *DataFilestoreInstance) Configuration() interface{} {
	return fi.Args
}

// Attributes returns the attributes for [DataFilestoreInstance].
func (fi *DataFilestoreInstance) Attributes() dataFilestoreInstanceAttributes {
	return dataFilestoreInstanceAttributes{ref: terra.ReferenceDataResource(fi)}
}

// DataFilestoreInstanceArgs contains the configurations for google_filestore_instance.
type DataFilestoreInstanceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// FileShares: min=0
	FileShares []datafilestoreinstance.FileShares `hcl:"file_shares,block" validate:"min=0"`
	// Networks: min=0
	Networks []datafilestoreinstance.Networks `hcl:"networks,block" validate:"min=0"`
}
type dataFilestoreInstanceAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_filestore_instance.
func (fi dataFilestoreInstanceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(fi.ref.Append("create_time"))
}

// Description returns a reference to field description of google_filestore_instance.
func (fi dataFilestoreInstanceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(fi.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_filestore_instance.
func (fi dataFilestoreInstanceAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](fi.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_filestore_instance.
func (fi dataFilestoreInstanceAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(fi.ref.Append("etag"))
}

// Id returns a reference to field id of google_filestore_instance.
func (fi dataFilestoreInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(fi.ref.Append("id"))
}

// KmsKeyName returns a reference to field kms_key_name of google_filestore_instance.
func (fi dataFilestoreInstanceAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(fi.ref.Append("kms_key_name"))
}

// Labels returns a reference to field labels of google_filestore_instance.
func (fi dataFilestoreInstanceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](fi.ref.Append("labels"))
}

// Location returns a reference to field location of google_filestore_instance.
func (fi dataFilestoreInstanceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(fi.ref.Append("location"))
}

// Name returns a reference to field name of google_filestore_instance.
func (fi dataFilestoreInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fi.ref.Append("name"))
}

// Project returns a reference to field project of google_filestore_instance.
func (fi dataFilestoreInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(fi.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_filestore_instance.
func (fi dataFilestoreInstanceAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](fi.ref.Append("terraform_labels"))
}

// Tier returns a reference to field tier of google_filestore_instance.
func (fi dataFilestoreInstanceAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(fi.ref.Append("tier"))
}

// Zone returns a reference to field zone of google_filestore_instance.
func (fi dataFilestoreInstanceAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(fi.ref.Append("zone"))
}

func (fi dataFilestoreInstanceAttributes) FileShares() terra.ListValue[datafilestoreinstance.FileSharesAttributes] {
	return terra.ReferenceAsList[datafilestoreinstance.FileSharesAttributes](fi.ref.Append("file_shares"))
}

func (fi dataFilestoreInstanceAttributes) Networks() terra.ListValue[datafilestoreinstance.NetworksAttributes] {
	return terra.ReferenceAsList[datafilestoreinstance.NetworksAttributes](fi.ref.Append("networks"))
}
