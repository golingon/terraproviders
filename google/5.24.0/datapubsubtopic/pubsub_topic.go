// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datapubsubtopic

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type IngestionDataSourceSettings struct {
	// AwsKinesis: min=0
	AwsKinesis []AwsKinesis `hcl:"aws_kinesis,block" validate:"min=0"`
}

type AwsKinesis struct{}

type MessageStoragePolicy struct{}

type SchemaSettings struct{}

type IngestionDataSourceSettingsAttributes struct {
	ref terra.Reference
}

func (idss IngestionDataSourceSettingsAttributes) InternalRef() (terra.Reference, error) {
	return idss.ref, nil
}

func (idss IngestionDataSourceSettingsAttributes) InternalWithRef(ref terra.Reference) IngestionDataSourceSettingsAttributes {
	return IngestionDataSourceSettingsAttributes{ref: ref}
}

func (idss IngestionDataSourceSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return idss.ref.InternalTokens()
}

func (idss IngestionDataSourceSettingsAttributes) AwsKinesis() terra.ListValue[AwsKinesisAttributes] {
	return terra.ReferenceAsList[AwsKinesisAttributes](idss.ref.Append("aws_kinesis"))
}

type AwsKinesisAttributes struct {
	ref terra.Reference
}

func (ak AwsKinesisAttributes) InternalRef() (terra.Reference, error) {
	return ak.ref, nil
}

func (ak AwsKinesisAttributes) InternalWithRef(ref terra.Reference) AwsKinesisAttributes {
	return AwsKinesisAttributes{ref: ref}
}

func (ak AwsKinesisAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ak.ref.InternalTokens()
}

func (ak AwsKinesisAttributes) AwsRoleArn() terra.StringValue {
	return terra.ReferenceAsString(ak.ref.Append("aws_role_arn"))
}

func (ak AwsKinesisAttributes) ConsumerArn() terra.StringValue {
	return terra.ReferenceAsString(ak.ref.Append("consumer_arn"))
}

func (ak AwsKinesisAttributes) GcpServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(ak.ref.Append("gcp_service_account"))
}

func (ak AwsKinesisAttributes) StreamArn() terra.StringValue {
	return terra.ReferenceAsString(ak.ref.Append("stream_arn"))
}

type MessageStoragePolicyAttributes struct {
	ref terra.Reference
}

func (msp MessageStoragePolicyAttributes) InternalRef() (terra.Reference, error) {
	return msp.ref, nil
}

func (msp MessageStoragePolicyAttributes) InternalWithRef(ref terra.Reference) MessageStoragePolicyAttributes {
	return MessageStoragePolicyAttributes{ref: ref}
}

func (msp MessageStoragePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return msp.ref.InternalTokens()
}

func (msp MessageStoragePolicyAttributes) AllowedPersistenceRegions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](msp.ref.Append("allowed_persistence_regions"))
}

type SchemaSettingsAttributes struct {
	ref terra.Reference
}

func (ss SchemaSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss SchemaSettingsAttributes) InternalWithRef(ref terra.Reference) SchemaSettingsAttributes {
	return SchemaSettingsAttributes{ref: ref}
}

func (ss SchemaSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss SchemaSettingsAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("encoding"))
}

func (ss SchemaSettingsAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("schema"))
}

type IngestionDataSourceSettingsState struct {
	AwsKinesis []AwsKinesisState `json:"aws_kinesis"`
}

type AwsKinesisState struct {
	AwsRoleArn        string `json:"aws_role_arn"`
	ConsumerArn       string `json:"consumer_arn"`
	GcpServiceAccount string `json:"gcp_service_account"`
	StreamArn         string `json:"stream_arn"`
}

type MessageStoragePolicyState struct {
	AllowedPersistenceRegions []string `json:"allowed_persistence_regions"`
}

type SchemaSettingsState struct {
	Encoding string `json:"encoding"`
	Schema   string `json:"schema"`
}
