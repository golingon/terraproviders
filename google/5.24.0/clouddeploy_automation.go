// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	clouddeployautomation "github.com/golingon/terraproviders/google/5.24.0/clouddeployautomation"
	"io"
)

// NewClouddeployAutomation creates a new instance of [ClouddeployAutomation].
func NewClouddeployAutomation(name string, args ClouddeployAutomationArgs) *ClouddeployAutomation {
	return &ClouddeployAutomation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ClouddeployAutomation)(nil)

// ClouddeployAutomation represents the Terraform resource google_clouddeploy_automation.
type ClouddeployAutomation struct {
	Name      string
	Args      ClouddeployAutomationArgs
	state     *clouddeployAutomationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ClouddeployAutomation].
func (ca *ClouddeployAutomation) Type() string {
	return "google_clouddeploy_automation"
}

// LocalName returns the local name for [ClouddeployAutomation].
func (ca *ClouddeployAutomation) LocalName() string {
	return ca.Name
}

// Configuration returns the configuration (args) for [ClouddeployAutomation].
func (ca *ClouddeployAutomation) Configuration() interface{} {
	return ca.Args
}

// DependOn is used for other resources to depend on [ClouddeployAutomation].
func (ca *ClouddeployAutomation) DependOn() terra.Reference {
	return terra.ReferenceResource(ca)
}

// Dependencies returns the list of resources [ClouddeployAutomation] depends_on.
func (ca *ClouddeployAutomation) Dependencies() terra.Dependencies {
	return ca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ClouddeployAutomation].
func (ca *ClouddeployAutomation) LifecycleManagement() *terra.Lifecycle {
	return ca.Lifecycle
}

// Attributes returns the attributes for [ClouddeployAutomation].
func (ca *ClouddeployAutomation) Attributes() clouddeployAutomationAttributes {
	return clouddeployAutomationAttributes{ref: terra.ReferenceResource(ca)}
}

// ImportState imports the given attribute values into [ClouddeployAutomation]'s state.
func (ca *ClouddeployAutomation) ImportState(av io.Reader) error {
	ca.state = &clouddeployAutomationState{}
	if err := json.NewDecoder(av).Decode(ca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ca.Type(), ca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ClouddeployAutomation] has state.
func (ca *ClouddeployAutomation) State() (*clouddeployAutomationState, bool) {
	return ca.state, ca.state != nil
}

// StateMust returns the state for [ClouddeployAutomation]. Panics if the state is nil.
func (ca *ClouddeployAutomation) StateMust() *clouddeployAutomationState {
	if ca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ca.Type(), ca.LocalName()))
	}
	return ca.state
}

// ClouddeployAutomationArgs contains the configurations for google_clouddeploy_automation.
type ClouddeployAutomationArgs struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// DeliveryPipeline: string, required
	DeliveryPipeline terra.StringValue `hcl:"delivery_pipeline,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceAccount: string, required
	ServiceAccount terra.StringValue `hcl:"service_account,attr" validate:"required"`
	// Suspended: bool, optional
	Suspended terra.BoolValue `hcl:"suspended,attr"`
	// Rules: min=1
	Rules []clouddeployautomation.Rules `hcl:"rules,block" validate:"min=1"`
	// Selector: required
	Selector *clouddeployautomation.Selector `hcl:"selector,block" validate:"required"`
	// Timeouts: optional
	Timeouts *clouddeployautomation.Timeouts `hcl:"timeouts,block"`
}
type clouddeployAutomationAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ca.ref.Append("annotations"))
}

// CreateTime returns a reference to field create_time of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("create_time"))
}

// DeliveryPipeline returns a reference to field delivery_pipeline of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) DeliveryPipeline() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("delivery_pipeline"))
}

// Description returns a reference to field description of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("description"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ca.ref.Append("effective_annotations"))
}

// EffectiveLabels returns a reference to field effective_labels of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ca.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("etag"))
}

// Id returns a reference to field id of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("id"))
}

// Labels returns a reference to field labels of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ca.ref.Append("labels"))
}

// Location returns a reference to field location of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("location"))
}

// Name returns a reference to field name of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("name"))
}

// Project returns a reference to field project of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("project"))
}

// ServiceAccount returns a reference to field service_account of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("service_account"))
}

// Suspended returns a reference to field suspended of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) Suspended() terra.BoolValue {
	return terra.ReferenceAsBool(ca.ref.Append("suspended"))
}

// TerraformLabels returns a reference to field terraform_labels of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ca.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_clouddeploy_automation.
func (ca clouddeployAutomationAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("update_time"))
}

func (ca clouddeployAutomationAttributes) Rules() terra.ListValue[clouddeployautomation.RulesAttributes] {
	return terra.ReferenceAsList[clouddeployautomation.RulesAttributes](ca.ref.Append("rules"))
}

func (ca clouddeployAutomationAttributes) Selector() terra.ListValue[clouddeployautomation.SelectorAttributes] {
	return terra.ReferenceAsList[clouddeployautomation.SelectorAttributes](ca.ref.Append("selector"))
}

func (ca clouddeployAutomationAttributes) Timeouts() clouddeployautomation.TimeoutsAttributes {
	return terra.ReferenceAsSingle[clouddeployautomation.TimeoutsAttributes](ca.ref.Append("timeouts"))
}

type clouddeployAutomationState struct {
	Annotations          map[string]string                     `json:"annotations"`
	CreateTime           string                                `json:"create_time"`
	DeliveryPipeline     string                                `json:"delivery_pipeline"`
	Description          string                                `json:"description"`
	EffectiveAnnotations map[string]string                     `json:"effective_annotations"`
	EffectiveLabels      map[string]string                     `json:"effective_labels"`
	Etag                 string                                `json:"etag"`
	Id                   string                                `json:"id"`
	Labels               map[string]string                     `json:"labels"`
	Location             string                                `json:"location"`
	Name                 string                                `json:"name"`
	Project              string                                `json:"project"`
	ServiceAccount       string                                `json:"service_account"`
	Suspended            bool                                  `json:"suspended"`
	TerraformLabels      map[string]string                     `json:"terraform_labels"`
	Uid                  string                                `json:"uid"`
	UpdateTime           string                                `json:"update_time"`
	Rules                []clouddeployautomation.RulesState    `json:"rules"`
	Selector             []clouddeployautomation.SelectorState `json:"selector"`
	Timeouts             *clouddeployautomation.TimeoutsState  `json:"timeouts"`
}
