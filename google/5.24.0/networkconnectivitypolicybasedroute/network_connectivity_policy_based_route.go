// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package networkconnectivitypolicybasedroute

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Warnings struct{}

type Filter struct {
	// DestRange: string, optional
	DestRange terra.StringValue `hcl:"dest_range,attr"`
	// IpProtocol: string, optional
	IpProtocol terra.StringValue `hcl:"ip_protocol,attr"`
	// ProtocolVersion: string, required
	ProtocolVersion terra.StringValue `hcl:"protocol_version,attr" validate:"required"`
	// SrcRange: string, optional
	SrcRange terra.StringValue `hcl:"src_range,attr"`
}

type InterconnectAttachment struct {
	// Region: string, required
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VirtualMachine struct {
	// Tags: list of string, required
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr" validate:"required"`
}

type WarningsAttributes struct {
	ref terra.Reference
}

func (w WarningsAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w WarningsAttributes) InternalWithRef(ref terra.Reference) WarningsAttributes {
	return WarningsAttributes{ref: ref}
}

func (w WarningsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w WarningsAttributes) Code() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("code"))
}

func (w WarningsAttributes) Data() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](w.ref.Append("data"))
}

func (w WarningsAttributes) WarningMessage() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("warning_message"))
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) DestRange() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("dest_range"))
}

func (f FilterAttributes) IpProtocol() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("ip_protocol"))
}

func (f FilterAttributes) ProtocolVersion() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("protocol_version"))
}

func (f FilterAttributes) SrcRange() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("src_range"))
}

type InterconnectAttachmentAttributes struct {
	ref terra.Reference
}

func (ia InterconnectAttachmentAttributes) InternalRef() (terra.Reference, error) {
	return ia.ref, nil
}

func (ia InterconnectAttachmentAttributes) InternalWithRef(ref terra.Reference) InterconnectAttachmentAttributes {
	return InterconnectAttachmentAttributes{ref: ref}
}

func (ia InterconnectAttachmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ia.ref.InternalTokens()
}

func (ia InterconnectAttachmentAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("region"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VirtualMachineAttributes struct {
	ref terra.Reference
}

func (vm VirtualMachineAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm VirtualMachineAttributes) InternalWithRef(ref terra.Reference) VirtualMachineAttributes {
	return VirtualMachineAttributes{ref: ref}
}

func (vm VirtualMachineAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm VirtualMachineAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vm.ref.Append("tags"))
}

type WarningsState struct {
	Code           string            `json:"code"`
	Data           map[string]string `json:"data"`
	WarningMessage string            `json:"warning_message"`
}

type FilterState struct {
	DestRange       string `json:"dest_range"`
	IpProtocol      string `json:"ip_protocol"`
	ProtocolVersion string `json:"protocol_version"`
	SrcRange        string `json:"src_range"`
}

type InterconnectAttachmentState struct {
	Region string `json:"region"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VirtualMachineState struct {
	Tags []string `json:"tags"`
}
