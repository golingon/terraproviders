// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	netappbackupvault "github.com/golingon/terraproviders/google/5.24.0/netappbackupvault"
	"io"
)

// NewNetappBackupVault creates a new instance of [NetappBackupVault].
func NewNetappBackupVault(name string, args NetappBackupVaultArgs) *NetappBackupVault {
	return &NetappBackupVault{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetappBackupVault)(nil)

// NetappBackupVault represents the Terraform resource google_netapp_backup_vault.
type NetappBackupVault struct {
	Name      string
	Args      NetappBackupVaultArgs
	state     *netappBackupVaultState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetappBackupVault].
func (nbv *NetappBackupVault) Type() string {
	return "google_netapp_backup_vault"
}

// LocalName returns the local name for [NetappBackupVault].
func (nbv *NetappBackupVault) LocalName() string {
	return nbv.Name
}

// Configuration returns the configuration (args) for [NetappBackupVault].
func (nbv *NetappBackupVault) Configuration() interface{} {
	return nbv.Args
}

// DependOn is used for other resources to depend on [NetappBackupVault].
func (nbv *NetappBackupVault) DependOn() terra.Reference {
	return terra.ReferenceResource(nbv)
}

// Dependencies returns the list of resources [NetappBackupVault] depends_on.
func (nbv *NetappBackupVault) Dependencies() terra.Dependencies {
	return nbv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetappBackupVault].
func (nbv *NetappBackupVault) LifecycleManagement() *terra.Lifecycle {
	return nbv.Lifecycle
}

// Attributes returns the attributes for [NetappBackupVault].
func (nbv *NetappBackupVault) Attributes() netappBackupVaultAttributes {
	return netappBackupVaultAttributes{ref: terra.ReferenceResource(nbv)}
}

// ImportState imports the given attribute values into [NetappBackupVault]'s state.
func (nbv *NetappBackupVault) ImportState(av io.Reader) error {
	nbv.state = &netappBackupVaultState{}
	if err := json.NewDecoder(av).Decode(nbv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nbv.Type(), nbv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetappBackupVault] has state.
func (nbv *NetappBackupVault) State() (*netappBackupVaultState, bool) {
	return nbv.state, nbv.state != nil
}

// StateMust returns the state for [NetappBackupVault]. Panics if the state is nil.
func (nbv *NetappBackupVault) StateMust() *netappBackupVaultState {
	if nbv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nbv.Type(), nbv.LocalName()))
	}
	return nbv.state
}

// NetappBackupVaultArgs contains the configurations for google_netapp_backup_vault.
type NetappBackupVaultArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *netappbackupvault.Timeouts `hcl:"timeouts,block"`
}
type netappBackupVaultAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_netapp_backup_vault.
func (nbv netappBackupVaultAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(nbv.ref.Append("create_time"))
}

// Description returns a reference to field description of google_netapp_backup_vault.
func (nbv netappBackupVaultAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(nbv.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_netapp_backup_vault.
func (nbv netappBackupVaultAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nbv.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_netapp_backup_vault.
func (nbv netappBackupVaultAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nbv.ref.Append("id"))
}

// Labels returns a reference to field labels of google_netapp_backup_vault.
func (nbv netappBackupVaultAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nbv.ref.Append("labels"))
}

// Location returns a reference to field location of google_netapp_backup_vault.
func (nbv netappBackupVaultAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(nbv.ref.Append("location"))
}

// Name returns a reference to field name of google_netapp_backup_vault.
func (nbv netappBackupVaultAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nbv.ref.Append("name"))
}

// Project returns a reference to field project of google_netapp_backup_vault.
func (nbv netappBackupVaultAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(nbv.ref.Append("project"))
}

// State returns a reference to field state of google_netapp_backup_vault.
func (nbv netappBackupVaultAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(nbv.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_netapp_backup_vault.
func (nbv netappBackupVaultAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nbv.ref.Append("terraform_labels"))
}

func (nbv netappBackupVaultAttributes) Timeouts() netappbackupvault.TimeoutsAttributes {
	return terra.ReferenceAsSingle[netappbackupvault.TimeoutsAttributes](nbv.ref.Append("timeouts"))
}

type netappBackupVaultState struct {
	CreateTime      string                           `json:"create_time"`
	Description     string                           `json:"description"`
	EffectiveLabels map[string]string                `json:"effective_labels"`
	Id              string                           `json:"id"`
	Labels          map[string]string                `json:"labels"`
	Location        string                           `json:"location"`
	Name            string                           `json:"name"`
	Project         string                           `json:"project"`
	State           string                           `json:"state"`
	TerraformLabels map[string]string                `json:"terraform_labels"`
	Timeouts        *netappbackupvault.TimeoutsState `json:"timeouts"`
}
