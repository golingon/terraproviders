// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package iamworkforcepool

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AccessRestrictions struct {
	// DisableProgrammaticSignin: bool, optional
	DisableProgrammaticSignin terra.BoolValue `hcl:"disable_programmatic_signin,attr"`
	// AllowedServices: min=0
	AllowedServices []AllowedServices `hcl:"allowed_services,block" validate:"min=0"`
}

type AllowedServices struct {
	// Domain: string, optional
	Domain terra.StringValue `hcl:"domain,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AccessRestrictionsAttributes struct {
	ref terra.Reference
}

func (ar AccessRestrictionsAttributes) InternalRef() (terra.Reference, error) {
	return ar.ref, nil
}

func (ar AccessRestrictionsAttributes) InternalWithRef(ref terra.Reference) AccessRestrictionsAttributes {
	return AccessRestrictionsAttributes{ref: ref}
}

func (ar AccessRestrictionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ar.ref.InternalTokens()
}

func (ar AccessRestrictionsAttributes) DisableProgrammaticSignin() terra.BoolValue {
	return terra.ReferenceAsBool(ar.ref.Append("disable_programmatic_signin"))
}

func (ar AccessRestrictionsAttributes) AllowedServices() terra.ListValue[AllowedServicesAttributes] {
	return terra.ReferenceAsList[AllowedServicesAttributes](ar.ref.Append("allowed_services"))
}

type AllowedServicesAttributes struct {
	ref terra.Reference
}

func (as AllowedServicesAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AllowedServicesAttributes) InternalWithRef(ref terra.Reference) AllowedServicesAttributes {
	return AllowedServicesAttributes{ref: ref}
}

func (as AllowedServicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AllowedServicesAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("domain"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AccessRestrictionsState struct {
	DisableProgrammaticSignin bool                   `json:"disable_programmatic_signin"`
	AllowedServices           []AllowedServicesState `json:"allowed_services"`
}

type AllowedServicesState struct {
	Domain string `json:"domain"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
