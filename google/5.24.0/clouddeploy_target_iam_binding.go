// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	clouddeploytargetiambinding "github.com/golingon/terraproviders/google/5.24.0/clouddeploytargetiambinding"
	"io"
)

// NewClouddeployTargetIamBinding creates a new instance of [ClouddeployTargetIamBinding].
func NewClouddeployTargetIamBinding(name string, args ClouddeployTargetIamBindingArgs) *ClouddeployTargetIamBinding {
	return &ClouddeployTargetIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ClouddeployTargetIamBinding)(nil)

// ClouddeployTargetIamBinding represents the Terraform resource google_clouddeploy_target_iam_binding.
type ClouddeployTargetIamBinding struct {
	Name      string
	Args      ClouddeployTargetIamBindingArgs
	state     *clouddeployTargetIamBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ClouddeployTargetIamBinding].
func (ctib *ClouddeployTargetIamBinding) Type() string {
	return "google_clouddeploy_target_iam_binding"
}

// LocalName returns the local name for [ClouddeployTargetIamBinding].
func (ctib *ClouddeployTargetIamBinding) LocalName() string {
	return ctib.Name
}

// Configuration returns the configuration (args) for [ClouddeployTargetIamBinding].
func (ctib *ClouddeployTargetIamBinding) Configuration() interface{} {
	return ctib.Args
}

// DependOn is used for other resources to depend on [ClouddeployTargetIamBinding].
func (ctib *ClouddeployTargetIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(ctib)
}

// Dependencies returns the list of resources [ClouddeployTargetIamBinding] depends_on.
func (ctib *ClouddeployTargetIamBinding) Dependencies() terra.Dependencies {
	return ctib.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ClouddeployTargetIamBinding].
func (ctib *ClouddeployTargetIamBinding) LifecycleManagement() *terra.Lifecycle {
	return ctib.Lifecycle
}

// Attributes returns the attributes for [ClouddeployTargetIamBinding].
func (ctib *ClouddeployTargetIamBinding) Attributes() clouddeployTargetIamBindingAttributes {
	return clouddeployTargetIamBindingAttributes{ref: terra.ReferenceResource(ctib)}
}

// ImportState imports the given attribute values into [ClouddeployTargetIamBinding]'s state.
func (ctib *ClouddeployTargetIamBinding) ImportState(av io.Reader) error {
	ctib.state = &clouddeployTargetIamBindingState{}
	if err := json.NewDecoder(av).Decode(ctib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ctib.Type(), ctib.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ClouddeployTargetIamBinding] has state.
func (ctib *ClouddeployTargetIamBinding) State() (*clouddeployTargetIamBindingState, bool) {
	return ctib.state, ctib.state != nil
}

// StateMust returns the state for [ClouddeployTargetIamBinding]. Panics if the state is nil.
func (ctib *ClouddeployTargetIamBinding) StateMust() *clouddeployTargetIamBindingState {
	if ctib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ctib.Type(), ctib.LocalName()))
	}
	return ctib.state
}

// ClouddeployTargetIamBindingArgs contains the configurations for google_clouddeploy_target_iam_binding.
type ClouddeployTargetIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *clouddeploytargetiambinding.Condition `hcl:"condition,block"`
}
type clouddeployTargetIamBindingAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_clouddeploy_target_iam_binding.
func (ctib clouddeployTargetIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(ctib.ref.Append("etag"))
}

// Id returns a reference to field id of google_clouddeploy_target_iam_binding.
func (ctib clouddeployTargetIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ctib.ref.Append("id"))
}

// Location returns a reference to field location of google_clouddeploy_target_iam_binding.
func (ctib clouddeployTargetIamBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ctib.ref.Append("location"))
}

// Members returns a reference to field members of google_clouddeploy_target_iam_binding.
func (ctib clouddeployTargetIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ctib.ref.Append("members"))
}

// Name returns a reference to field name of google_clouddeploy_target_iam_binding.
func (ctib clouddeployTargetIamBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ctib.ref.Append("name"))
}

// Project returns a reference to field project of google_clouddeploy_target_iam_binding.
func (ctib clouddeployTargetIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ctib.ref.Append("project"))
}

// Role returns a reference to field role of google_clouddeploy_target_iam_binding.
func (ctib clouddeployTargetIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(ctib.ref.Append("role"))
}

func (ctib clouddeployTargetIamBindingAttributes) Condition() terra.ListValue[clouddeploytargetiambinding.ConditionAttributes] {
	return terra.ReferenceAsList[clouddeploytargetiambinding.ConditionAttributes](ctib.ref.Append("condition"))
}

type clouddeployTargetIamBindingState struct {
	Etag      string                                       `json:"etag"`
	Id        string                                       `json:"id"`
	Location  string                                       `json:"location"`
	Members   []string                                     `json:"members"`
	Name      string                                       `json:"name"`
	Project   string                                       `json:"project"`
	Role      string                                       `json:"role"`
	Condition []clouddeploytargetiambinding.ConditionState `json:"condition"`
}
