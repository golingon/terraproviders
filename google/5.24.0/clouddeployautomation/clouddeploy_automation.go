// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package clouddeployautomation

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rules struct {
	// AdvanceRolloutRule: optional
	AdvanceRolloutRule *AdvanceRolloutRule `hcl:"advance_rollout_rule,block"`
	// PromoteReleaseRule: optional
	PromoteReleaseRule *PromoteReleaseRule `hcl:"promote_release_rule,block"`
}

type AdvanceRolloutRule struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// SourcePhases: list of string, optional
	SourcePhases terra.ListValue[terra.StringValue] `hcl:"source_phases,attr"`
	// Wait: string, optional
	Wait terra.StringValue `hcl:"wait,attr"`
}

type PromoteReleaseRule struct {
	// DestinationPhase: string, optional
	DestinationPhase terra.StringValue `hcl:"destination_phase,attr"`
	// DestinationTargetId: string, optional
	DestinationTargetId terra.StringValue `hcl:"destination_target_id,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Wait: string, optional
	Wait terra.StringValue `hcl:"wait,attr"`
}

type Selector struct {
	// Targets: min=1
	Targets []Targets `hcl:"targets,block" validate:"min=1"`
}

type Targets struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RulesAttributes struct {
	ref terra.Reference
}

func (r RulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RulesAttributes) InternalWithRef(ref terra.Reference) RulesAttributes {
	return RulesAttributes{ref: ref}
}

func (r RulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RulesAttributes) AdvanceRolloutRule() terra.ListValue[AdvanceRolloutRuleAttributes] {
	return terra.ReferenceAsList[AdvanceRolloutRuleAttributes](r.ref.Append("advance_rollout_rule"))
}

func (r RulesAttributes) PromoteReleaseRule() terra.ListValue[PromoteReleaseRuleAttributes] {
	return terra.ReferenceAsList[PromoteReleaseRuleAttributes](r.ref.Append("promote_release_rule"))
}

type AdvanceRolloutRuleAttributes struct {
	ref terra.Reference
}

func (arr AdvanceRolloutRuleAttributes) InternalRef() (terra.Reference, error) {
	return arr.ref, nil
}

func (arr AdvanceRolloutRuleAttributes) InternalWithRef(ref terra.Reference) AdvanceRolloutRuleAttributes {
	return AdvanceRolloutRuleAttributes{ref: ref}
}

func (arr AdvanceRolloutRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return arr.ref.InternalTokens()
}

func (arr AdvanceRolloutRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("id"))
}

func (arr AdvanceRolloutRuleAttributes) SourcePhases() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](arr.ref.Append("source_phases"))
}

func (arr AdvanceRolloutRuleAttributes) Wait() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("wait"))
}

type PromoteReleaseRuleAttributes struct {
	ref terra.Reference
}

func (prr PromoteReleaseRuleAttributes) InternalRef() (terra.Reference, error) {
	return prr.ref, nil
}

func (prr PromoteReleaseRuleAttributes) InternalWithRef(ref terra.Reference) PromoteReleaseRuleAttributes {
	return PromoteReleaseRuleAttributes{ref: ref}
}

func (prr PromoteReleaseRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return prr.ref.InternalTokens()
}

func (prr PromoteReleaseRuleAttributes) DestinationPhase() terra.StringValue {
	return terra.ReferenceAsString(prr.ref.Append("destination_phase"))
}

func (prr PromoteReleaseRuleAttributes) DestinationTargetId() terra.StringValue {
	return terra.ReferenceAsString(prr.ref.Append("destination_target_id"))
}

func (prr PromoteReleaseRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(prr.ref.Append("id"))
}

func (prr PromoteReleaseRuleAttributes) Wait() terra.StringValue {
	return terra.ReferenceAsString(prr.ref.Append("wait"))
}

type SelectorAttributes struct {
	ref terra.Reference
}

func (s SelectorAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SelectorAttributes) InternalWithRef(ref terra.Reference) SelectorAttributes {
	return SelectorAttributes{ref: ref}
}

func (s SelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SelectorAttributes) Targets() terra.ListValue[TargetsAttributes] {
	return terra.ReferenceAsList[TargetsAttributes](s.ref.Append("targets"))
}

type TargetsAttributes struct {
	ref terra.Reference
}

func (t TargetsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TargetsAttributes) InternalWithRef(ref terra.Reference) TargetsAttributes {
	return TargetsAttributes{ref: ref}
}

func (t TargetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TargetsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("id"))
}

func (t TargetsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](t.ref.Append("labels"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RulesState struct {
	AdvanceRolloutRule []AdvanceRolloutRuleState `json:"advance_rollout_rule"`
	PromoteReleaseRule []PromoteReleaseRuleState `json:"promote_release_rule"`
}

type AdvanceRolloutRuleState struct {
	Id           string   `json:"id"`
	SourcePhases []string `json:"source_phases"`
	Wait         string   `json:"wait"`
}

type PromoteReleaseRuleState struct {
	DestinationPhase    string `json:"destination_phase"`
	DestinationTargetId string `json:"destination_target_id"`
	Id                  string `json:"id"`
	Wait                string `json:"wait"`
}

type SelectorState struct {
	Targets []TargetsState `json:"targets"`
}

type TargetsState struct {
	Id     string            `json:"id"`
	Labels map[string]string `json:"labels"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
