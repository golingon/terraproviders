// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datalosspreventioninspecttemplate

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type InspectConfig struct {
	// ContentOptions: list of string, optional
	ContentOptions terra.ListValue[terra.StringValue] `hcl:"content_options,attr"`
	// ExcludeInfoTypes: bool, optional
	ExcludeInfoTypes terra.BoolValue `hcl:"exclude_info_types,attr"`
	// IncludeQuote: bool, optional
	IncludeQuote terra.BoolValue `hcl:"include_quote,attr"`
	// MinLikelihood: string, optional
	MinLikelihood terra.StringValue `hcl:"min_likelihood,attr"`
	// CustomInfoTypes: min=0
	CustomInfoTypes []CustomInfoTypes `hcl:"custom_info_types,block" validate:"min=0"`
	// InspectConfigInfoTypes: min=0
	InfoTypes []InspectConfigInfoTypes `hcl:"info_types,block" validate:"min=0"`
	// Limits: optional
	Limits *Limits `hcl:"limits,block"`
	// RuleSet: min=0
	RuleSet []RuleSet `hcl:"rule_set,block" validate:"min=0"`
}

type CustomInfoTypes struct {
	// ExclusionType: string, optional
	ExclusionType terra.StringValue `hcl:"exclusion_type,attr"`
	// Likelihood: string, optional
	Likelihood terra.StringValue `hcl:"likelihood,attr"`
	// CustomInfoTypesDictionary: optional
	Dictionary *CustomInfoTypesDictionary `hcl:"dictionary,block"`
	// CustomInfoTypesInfoType: required
	InfoType *CustomInfoTypesInfoType `hcl:"info_type,block" validate:"required"`
	// CustomInfoTypesRegex: optional
	Regex *CustomInfoTypesRegex `hcl:"regex,block"`
	// CustomInfoTypesSensitivityScore: optional
	SensitivityScore *CustomInfoTypesSensitivityScore `hcl:"sensitivity_score,block"`
	// StoredType: optional
	StoredType *StoredType `hcl:"stored_type,block"`
	// SurrogateType: optional
	SurrogateType *SurrogateType `hcl:"surrogate_type,block"`
}

type CustomInfoTypesDictionary struct {
	// CustomInfoTypesDictionaryCloudStoragePath: optional
	CloudStoragePath *CustomInfoTypesDictionaryCloudStoragePath `hcl:"cloud_storage_path,block"`
	// CustomInfoTypesDictionaryWordList: optional
	WordList *CustomInfoTypesDictionaryWordList `hcl:"word_list,block"`
}

type CustomInfoTypesDictionaryCloudStoragePath struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type CustomInfoTypesDictionaryWordList struct {
	// Words: list of string, required
	Words terra.ListValue[terra.StringValue] `hcl:"words,attr" validate:"required"`
}

type CustomInfoTypesInfoType struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// CustomInfoTypesInfoTypeSensitivityScore: optional
	SensitivityScore *CustomInfoTypesInfoTypeSensitivityScore `hcl:"sensitivity_score,block"`
}

type CustomInfoTypesInfoTypeSensitivityScore struct {
	// Score: string, required
	Score terra.StringValue `hcl:"score,attr" validate:"required"`
}

type CustomInfoTypesRegex struct {
	// GroupIndexes: list of number, optional
	GroupIndexes terra.ListValue[terra.NumberValue] `hcl:"group_indexes,attr"`
	// Pattern: string, required
	Pattern terra.StringValue `hcl:"pattern,attr" validate:"required"`
}

type CustomInfoTypesSensitivityScore struct {
	// Score: string, required
	Score terra.StringValue `hcl:"score,attr" validate:"required"`
}

type StoredType struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type SurrogateType struct{}

type InspectConfigInfoTypes struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// InspectConfigInfoTypesSensitivityScore: optional
	SensitivityScore *InspectConfigInfoTypesSensitivityScore `hcl:"sensitivity_score,block"`
}

type InspectConfigInfoTypesSensitivityScore struct {
	// Score: string, required
	Score terra.StringValue `hcl:"score,attr" validate:"required"`
}

type Limits struct {
	// MaxFindingsPerItem: number, required
	MaxFindingsPerItem terra.NumberValue `hcl:"max_findings_per_item,attr" validate:"required"`
	// MaxFindingsPerRequest: number, required
	MaxFindingsPerRequest terra.NumberValue `hcl:"max_findings_per_request,attr" validate:"required"`
	// MaxFindingsPerInfoType: min=0
	MaxFindingsPerInfoType []MaxFindingsPerInfoType `hcl:"max_findings_per_info_type,block" validate:"min=0"`
}

type MaxFindingsPerInfoType struct {
	// MaxFindings: number, required
	MaxFindings terra.NumberValue `hcl:"max_findings,attr" validate:"required"`
	// MaxFindingsPerInfoTypeInfoType: required
	InfoType *MaxFindingsPerInfoTypeInfoType `hcl:"info_type,block" validate:"required"`
}

type MaxFindingsPerInfoTypeInfoType struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// MaxFindingsPerInfoTypeInfoTypeSensitivityScore: optional
	SensitivityScore *MaxFindingsPerInfoTypeInfoTypeSensitivityScore `hcl:"sensitivity_score,block"`
}

type MaxFindingsPerInfoTypeInfoTypeSensitivityScore struct {
	// Score: string, required
	Score terra.StringValue `hcl:"score,attr" validate:"required"`
}

type RuleSet struct {
	// RuleSetInfoTypes: min=1
	InfoTypes []RuleSetInfoTypes `hcl:"info_types,block" validate:"min=1"`
	// Rules: min=1
	Rules []Rules `hcl:"rules,block" validate:"min=1"`
}

type RuleSetInfoTypes struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// RuleSetInfoTypesSensitivityScore: optional
	SensitivityScore *RuleSetInfoTypesSensitivityScore `hcl:"sensitivity_score,block"`
}

type RuleSetInfoTypesSensitivityScore struct {
	// Score: string, required
	Score terra.StringValue `hcl:"score,attr" validate:"required"`
}

type Rules struct {
	// ExclusionRule: optional
	ExclusionRule *ExclusionRule `hcl:"exclusion_rule,block"`
	// HotwordRule: optional
	HotwordRule *HotwordRule `hcl:"hotword_rule,block"`
}

type ExclusionRule struct {
	// MatchingType: string, required
	MatchingType terra.StringValue `hcl:"matching_type,attr" validate:"required"`
	// ExclusionRuleDictionary: optional
	Dictionary *ExclusionRuleDictionary `hcl:"dictionary,block"`
	// ExcludeByHotword: optional
	ExcludeByHotword *ExcludeByHotword `hcl:"exclude_by_hotword,block"`
	// ExcludeInfoTypes: optional
	ExcludeInfoTypes *ExcludeInfoTypes `hcl:"exclude_info_types,block"`
	// ExclusionRuleRegex: optional
	Regex *ExclusionRuleRegex `hcl:"regex,block"`
}

type ExclusionRuleDictionary struct {
	// ExclusionRuleDictionaryCloudStoragePath: optional
	CloudStoragePath *ExclusionRuleDictionaryCloudStoragePath `hcl:"cloud_storage_path,block"`
	// ExclusionRuleDictionaryWordList: optional
	WordList *ExclusionRuleDictionaryWordList `hcl:"word_list,block"`
}

type ExclusionRuleDictionaryCloudStoragePath struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type ExclusionRuleDictionaryWordList struct {
	// Words: list of string, required
	Words terra.ListValue[terra.StringValue] `hcl:"words,attr" validate:"required"`
}

type ExcludeByHotword struct {
	// ExcludeByHotwordHotwordRegex: required
	HotwordRegex *ExcludeByHotwordHotwordRegex `hcl:"hotword_regex,block" validate:"required"`
	// ExcludeByHotwordProximity: required
	Proximity *ExcludeByHotwordProximity `hcl:"proximity,block" validate:"required"`
}

type ExcludeByHotwordHotwordRegex struct {
	// GroupIndexes: list of number, optional
	GroupIndexes terra.ListValue[terra.NumberValue] `hcl:"group_indexes,attr"`
	// Pattern: string, required
	Pattern terra.StringValue `hcl:"pattern,attr" validate:"required"`
}

type ExcludeByHotwordProximity struct {
	// WindowAfter: number, optional
	WindowAfter terra.NumberValue `hcl:"window_after,attr"`
	// WindowBefore: number, optional
	WindowBefore terra.NumberValue `hcl:"window_before,attr"`
}

type ExcludeInfoTypes struct {
	// ExcludeInfoTypesInfoTypes: min=1
	InfoTypes []ExcludeInfoTypesInfoTypes `hcl:"info_types,block" validate:"min=1"`
}

type ExcludeInfoTypesInfoTypes struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// ExcludeInfoTypesInfoTypesSensitivityScore: optional
	SensitivityScore *ExcludeInfoTypesInfoTypesSensitivityScore `hcl:"sensitivity_score,block"`
}

type ExcludeInfoTypesInfoTypesSensitivityScore struct {
	// Score: string, required
	Score terra.StringValue `hcl:"score,attr" validate:"required"`
}

type ExclusionRuleRegex struct {
	// GroupIndexes: list of number, optional
	GroupIndexes terra.ListValue[terra.NumberValue] `hcl:"group_indexes,attr"`
	// Pattern: string, required
	Pattern terra.StringValue `hcl:"pattern,attr" validate:"required"`
}

type HotwordRule struct {
	// HotwordRuleHotwordRegex: required
	HotwordRegex *HotwordRuleHotwordRegex `hcl:"hotword_regex,block" validate:"required"`
	// LikelihoodAdjustment: required
	LikelihoodAdjustment *LikelihoodAdjustment `hcl:"likelihood_adjustment,block" validate:"required"`
	// HotwordRuleProximity: required
	Proximity *HotwordRuleProximity `hcl:"proximity,block" validate:"required"`
}

type HotwordRuleHotwordRegex struct {
	// GroupIndexes: list of number, optional
	GroupIndexes terra.ListValue[terra.NumberValue] `hcl:"group_indexes,attr"`
	// Pattern: string, required
	Pattern terra.StringValue `hcl:"pattern,attr" validate:"required"`
}

type LikelihoodAdjustment struct {
	// FixedLikelihood: string, optional
	FixedLikelihood terra.StringValue `hcl:"fixed_likelihood,attr"`
	// RelativeLikelihood: number, optional
	RelativeLikelihood terra.NumberValue `hcl:"relative_likelihood,attr"`
}

type HotwordRuleProximity struct {
	// WindowAfter: number, optional
	WindowAfter terra.NumberValue `hcl:"window_after,attr"`
	// WindowBefore: number, optional
	WindowBefore terra.NumberValue `hcl:"window_before,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type InspectConfigAttributes struct {
	ref terra.Reference
}

func (ic InspectConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic InspectConfigAttributes) InternalWithRef(ref terra.Reference) InspectConfigAttributes {
	return InspectConfigAttributes{ref: ref}
}

func (ic InspectConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic InspectConfigAttributes) ContentOptions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ic.ref.Append("content_options"))
}

func (ic InspectConfigAttributes) ExcludeInfoTypes() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("exclude_info_types"))
}

func (ic InspectConfigAttributes) IncludeQuote() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("include_quote"))
}

func (ic InspectConfigAttributes) MinLikelihood() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("min_likelihood"))
}

func (ic InspectConfigAttributes) CustomInfoTypes() terra.ListValue[CustomInfoTypesAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesAttributes](ic.ref.Append("custom_info_types"))
}

func (ic InspectConfigAttributes) InfoTypes() terra.ListValue[InspectConfigInfoTypesAttributes] {
	return terra.ReferenceAsList[InspectConfigInfoTypesAttributes](ic.ref.Append("info_types"))
}

func (ic InspectConfigAttributes) Limits() terra.ListValue[LimitsAttributes] {
	return terra.ReferenceAsList[LimitsAttributes](ic.ref.Append("limits"))
}

func (ic InspectConfigAttributes) RuleSet() terra.ListValue[RuleSetAttributes] {
	return terra.ReferenceAsList[RuleSetAttributes](ic.ref.Append("rule_set"))
}

type CustomInfoTypesAttributes struct {
	ref terra.Reference
}

func (cit CustomInfoTypesAttributes) InternalRef() (terra.Reference, error) {
	return cit.ref, nil
}

func (cit CustomInfoTypesAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesAttributes {
	return CustomInfoTypesAttributes{ref: ref}
}

func (cit CustomInfoTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cit.ref.InternalTokens()
}

func (cit CustomInfoTypesAttributes) ExclusionType() terra.StringValue {
	return terra.ReferenceAsString(cit.ref.Append("exclusion_type"))
}

func (cit CustomInfoTypesAttributes) Likelihood() terra.StringValue {
	return terra.ReferenceAsString(cit.ref.Append("likelihood"))
}

func (cit CustomInfoTypesAttributes) Dictionary() terra.ListValue[CustomInfoTypesDictionaryAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesDictionaryAttributes](cit.ref.Append("dictionary"))
}

func (cit CustomInfoTypesAttributes) InfoType() terra.ListValue[CustomInfoTypesInfoTypeAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesInfoTypeAttributes](cit.ref.Append("info_type"))
}

func (cit CustomInfoTypesAttributes) Regex() terra.ListValue[CustomInfoTypesRegexAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesRegexAttributes](cit.ref.Append("regex"))
}

func (cit CustomInfoTypesAttributes) SensitivityScore() terra.ListValue[CustomInfoTypesSensitivityScoreAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesSensitivityScoreAttributes](cit.ref.Append("sensitivity_score"))
}

func (cit CustomInfoTypesAttributes) StoredType() terra.ListValue[StoredTypeAttributes] {
	return terra.ReferenceAsList[StoredTypeAttributes](cit.ref.Append("stored_type"))
}

func (cit CustomInfoTypesAttributes) SurrogateType() terra.ListValue[SurrogateTypeAttributes] {
	return terra.ReferenceAsList[SurrogateTypeAttributes](cit.ref.Append("surrogate_type"))
}

type CustomInfoTypesDictionaryAttributes struct {
	ref terra.Reference
}

func (d CustomInfoTypesDictionaryAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d CustomInfoTypesDictionaryAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesDictionaryAttributes {
	return CustomInfoTypesDictionaryAttributes{ref: ref}
}

func (d CustomInfoTypesDictionaryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d CustomInfoTypesDictionaryAttributes) CloudStoragePath() terra.ListValue[CustomInfoTypesDictionaryCloudStoragePathAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesDictionaryCloudStoragePathAttributes](d.ref.Append("cloud_storage_path"))
}

func (d CustomInfoTypesDictionaryAttributes) WordList() terra.ListValue[CustomInfoTypesDictionaryWordListAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesDictionaryWordListAttributes](d.ref.Append("word_list"))
}

type CustomInfoTypesDictionaryCloudStoragePathAttributes struct {
	ref terra.Reference
}

func (csp CustomInfoTypesDictionaryCloudStoragePathAttributes) InternalRef() (terra.Reference, error) {
	return csp.ref, nil
}

func (csp CustomInfoTypesDictionaryCloudStoragePathAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesDictionaryCloudStoragePathAttributes {
	return CustomInfoTypesDictionaryCloudStoragePathAttributes{ref: ref}
}

func (csp CustomInfoTypesDictionaryCloudStoragePathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return csp.ref.InternalTokens()
}

func (csp CustomInfoTypesDictionaryCloudStoragePathAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(csp.ref.Append("path"))
}

type CustomInfoTypesDictionaryWordListAttributes struct {
	ref terra.Reference
}

func (wl CustomInfoTypesDictionaryWordListAttributes) InternalRef() (terra.Reference, error) {
	return wl.ref, nil
}

func (wl CustomInfoTypesDictionaryWordListAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesDictionaryWordListAttributes {
	return CustomInfoTypesDictionaryWordListAttributes{ref: ref}
}

func (wl CustomInfoTypesDictionaryWordListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wl.ref.InternalTokens()
}

func (wl CustomInfoTypesDictionaryWordListAttributes) Words() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wl.ref.Append("words"))
}

type CustomInfoTypesInfoTypeAttributes struct {
	ref terra.Reference
}

func (it CustomInfoTypesInfoTypeAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it CustomInfoTypesInfoTypeAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesInfoTypeAttributes {
	return CustomInfoTypesInfoTypeAttributes{ref: ref}
}

func (it CustomInfoTypesInfoTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it CustomInfoTypesInfoTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("name"))
}

func (it CustomInfoTypesInfoTypeAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("version"))
}

func (it CustomInfoTypesInfoTypeAttributes) SensitivityScore() terra.ListValue[CustomInfoTypesInfoTypeSensitivityScoreAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesInfoTypeSensitivityScoreAttributes](it.ref.Append("sensitivity_score"))
}

type CustomInfoTypesInfoTypeSensitivityScoreAttributes struct {
	ref terra.Reference
}

func (ss CustomInfoTypesInfoTypeSensitivityScoreAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss CustomInfoTypesInfoTypeSensitivityScoreAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesInfoTypeSensitivityScoreAttributes {
	return CustomInfoTypesInfoTypeSensitivityScoreAttributes{ref: ref}
}

func (ss CustomInfoTypesInfoTypeSensitivityScoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss CustomInfoTypesInfoTypeSensitivityScoreAttributes) Score() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("score"))
}

type CustomInfoTypesRegexAttributes struct {
	ref terra.Reference
}

func (r CustomInfoTypesRegexAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r CustomInfoTypesRegexAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesRegexAttributes {
	return CustomInfoTypesRegexAttributes{ref: ref}
}

func (r CustomInfoTypesRegexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r CustomInfoTypesRegexAttributes) GroupIndexes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](r.ref.Append("group_indexes"))
}

func (r CustomInfoTypesRegexAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("pattern"))
}

type CustomInfoTypesSensitivityScoreAttributes struct {
	ref terra.Reference
}

func (ss CustomInfoTypesSensitivityScoreAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss CustomInfoTypesSensitivityScoreAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesSensitivityScoreAttributes {
	return CustomInfoTypesSensitivityScoreAttributes{ref: ref}
}

func (ss CustomInfoTypesSensitivityScoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss CustomInfoTypesSensitivityScoreAttributes) Score() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("score"))
}

type StoredTypeAttributes struct {
	ref terra.Reference
}

func (st StoredTypeAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st StoredTypeAttributes) InternalWithRef(ref terra.Reference) StoredTypeAttributes {
	return StoredTypeAttributes{ref: ref}
}

func (st StoredTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st StoredTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("name"))
}

type SurrogateTypeAttributes struct {
	ref terra.Reference
}

func (st SurrogateTypeAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st SurrogateTypeAttributes) InternalWithRef(ref terra.Reference) SurrogateTypeAttributes {
	return SurrogateTypeAttributes{ref: ref}
}

func (st SurrogateTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

type InspectConfigInfoTypesAttributes struct {
	ref terra.Reference
}

func (it InspectConfigInfoTypesAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it InspectConfigInfoTypesAttributes) InternalWithRef(ref terra.Reference) InspectConfigInfoTypesAttributes {
	return InspectConfigInfoTypesAttributes{ref: ref}
}

func (it InspectConfigInfoTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it InspectConfigInfoTypesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("name"))
}

func (it InspectConfigInfoTypesAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("version"))
}

func (it InspectConfigInfoTypesAttributes) SensitivityScore() terra.ListValue[InspectConfigInfoTypesSensitivityScoreAttributes] {
	return terra.ReferenceAsList[InspectConfigInfoTypesSensitivityScoreAttributes](it.ref.Append("sensitivity_score"))
}

type InspectConfigInfoTypesSensitivityScoreAttributes struct {
	ref terra.Reference
}

func (ss InspectConfigInfoTypesSensitivityScoreAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss InspectConfigInfoTypesSensitivityScoreAttributes) InternalWithRef(ref terra.Reference) InspectConfigInfoTypesSensitivityScoreAttributes {
	return InspectConfigInfoTypesSensitivityScoreAttributes{ref: ref}
}

func (ss InspectConfigInfoTypesSensitivityScoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss InspectConfigInfoTypesSensitivityScoreAttributes) Score() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("score"))
}

type LimitsAttributes struct {
	ref terra.Reference
}

func (l LimitsAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LimitsAttributes) InternalWithRef(ref terra.Reference) LimitsAttributes {
	return LimitsAttributes{ref: ref}
}

func (l LimitsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LimitsAttributes) MaxFindingsPerItem() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("max_findings_per_item"))
}

func (l LimitsAttributes) MaxFindingsPerRequest() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("max_findings_per_request"))
}

func (l LimitsAttributes) MaxFindingsPerInfoType() terra.ListValue[MaxFindingsPerInfoTypeAttributes] {
	return terra.ReferenceAsList[MaxFindingsPerInfoTypeAttributes](l.ref.Append("max_findings_per_info_type"))
}

type MaxFindingsPerInfoTypeAttributes struct {
	ref terra.Reference
}

func (mfpit MaxFindingsPerInfoTypeAttributes) InternalRef() (terra.Reference, error) {
	return mfpit.ref, nil
}

func (mfpit MaxFindingsPerInfoTypeAttributes) InternalWithRef(ref terra.Reference) MaxFindingsPerInfoTypeAttributes {
	return MaxFindingsPerInfoTypeAttributes{ref: ref}
}

func (mfpit MaxFindingsPerInfoTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mfpit.ref.InternalTokens()
}

func (mfpit MaxFindingsPerInfoTypeAttributes) MaxFindings() terra.NumberValue {
	return terra.ReferenceAsNumber(mfpit.ref.Append("max_findings"))
}

func (mfpit MaxFindingsPerInfoTypeAttributes) InfoType() terra.ListValue[MaxFindingsPerInfoTypeInfoTypeAttributes] {
	return terra.ReferenceAsList[MaxFindingsPerInfoTypeInfoTypeAttributes](mfpit.ref.Append("info_type"))
}

type MaxFindingsPerInfoTypeInfoTypeAttributes struct {
	ref terra.Reference
}

func (it MaxFindingsPerInfoTypeInfoTypeAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it MaxFindingsPerInfoTypeInfoTypeAttributes) InternalWithRef(ref terra.Reference) MaxFindingsPerInfoTypeInfoTypeAttributes {
	return MaxFindingsPerInfoTypeInfoTypeAttributes{ref: ref}
}

func (it MaxFindingsPerInfoTypeInfoTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it MaxFindingsPerInfoTypeInfoTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("name"))
}

func (it MaxFindingsPerInfoTypeInfoTypeAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("version"))
}

func (it MaxFindingsPerInfoTypeInfoTypeAttributes) SensitivityScore() terra.ListValue[MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes] {
	return terra.ReferenceAsList[MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes](it.ref.Append("sensitivity_score"))
}

type MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes struct {
	ref terra.Reference
}

func (ss MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes) InternalWithRef(ref terra.Reference) MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes {
	return MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes{ref: ref}
}

func (ss MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes) Score() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("score"))
}

type RuleSetAttributes struct {
	ref terra.Reference
}

func (rs RuleSetAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RuleSetAttributes) InternalWithRef(ref terra.Reference) RuleSetAttributes {
	return RuleSetAttributes{ref: ref}
}

func (rs RuleSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RuleSetAttributes) InfoTypes() terra.ListValue[RuleSetInfoTypesAttributes] {
	return terra.ReferenceAsList[RuleSetInfoTypesAttributes](rs.ref.Append("info_types"))
}

func (rs RuleSetAttributes) Rules() terra.ListValue[RulesAttributes] {
	return terra.ReferenceAsList[RulesAttributes](rs.ref.Append("rules"))
}

type RuleSetInfoTypesAttributes struct {
	ref terra.Reference
}

func (it RuleSetInfoTypesAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it RuleSetInfoTypesAttributes) InternalWithRef(ref terra.Reference) RuleSetInfoTypesAttributes {
	return RuleSetInfoTypesAttributes{ref: ref}
}

func (it RuleSetInfoTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it RuleSetInfoTypesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("name"))
}

func (it RuleSetInfoTypesAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("version"))
}

func (it RuleSetInfoTypesAttributes) SensitivityScore() terra.ListValue[RuleSetInfoTypesSensitivityScoreAttributes] {
	return terra.ReferenceAsList[RuleSetInfoTypesSensitivityScoreAttributes](it.ref.Append("sensitivity_score"))
}

type RuleSetInfoTypesSensitivityScoreAttributes struct {
	ref terra.Reference
}

func (ss RuleSetInfoTypesSensitivityScoreAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss RuleSetInfoTypesSensitivityScoreAttributes) InternalWithRef(ref terra.Reference) RuleSetInfoTypesSensitivityScoreAttributes {
	return RuleSetInfoTypesSensitivityScoreAttributes{ref: ref}
}

func (ss RuleSetInfoTypesSensitivityScoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss RuleSetInfoTypesSensitivityScoreAttributes) Score() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("score"))
}

type RulesAttributes struct {
	ref terra.Reference
}

func (r RulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RulesAttributes) InternalWithRef(ref terra.Reference) RulesAttributes {
	return RulesAttributes{ref: ref}
}

func (r RulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RulesAttributes) ExclusionRule() terra.ListValue[ExclusionRuleAttributes] {
	return terra.ReferenceAsList[ExclusionRuleAttributes](r.ref.Append("exclusion_rule"))
}

func (r RulesAttributes) HotwordRule() terra.ListValue[HotwordRuleAttributes] {
	return terra.ReferenceAsList[HotwordRuleAttributes](r.ref.Append("hotword_rule"))
}

type ExclusionRuleAttributes struct {
	ref terra.Reference
}

func (er ExclusionRuleAttributes) InternalRef() (terra.Reference, error) {
	return er.ref, nil
}

func (er ExclusionRuleAttributes) InternalWithRef(ref terra.Reference) ExclusionRuleAttributes {
	return ExclusionRuleAttributes{ref: ref}
}

func (er ExclusionRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return er.ref.InternalTokens()
}

func (er ExclusionRuleAttributes) MatchingType() terra.StringValue {
	return terra.ReferenceAsString(er.ref.Append("matching_type"))
}

func (er ExclusionRuleAttributes) Dictionary() terra.ListValue[ExclusionRuleDictionaryAttributes] {
	return terra.ReferenceAsList[ExclusionRuleDictionaryAttributes](er.ref.Append("dictionary"))
}

func (er ExclusionRuleAttributes) ExcludeByHotword() terra.ListValue[ExcludeByHotwordAttributes] {
	return terra.ReferenceAsList[ExcludeByHotwordAttributes](er.ref.Append("exclude_by_hotword"))
}

func (er ExclusionRuleAttributes) ExcludeInfoTypes() terra.ListValue[ExcludeInfoTypesAttributes] {
	return terra.ReferenceAsList[ExcludeInfoTypesAttributes](er.ref.Append("exclude_info_types"))
}

func (er ExclusionRuleAttributes) Regex() terra.ListValue[ExclusionRuleRegexAttributes] {
	return terra.ReferenceAsList[ExclusionRuleRegexAttributes](er.ref.Append("regex"))
}

type ExclusionRuleDictionaryAttributes struct {
	ref terra.Reference
}

func (d ExclusionRuleDictionaryAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ExclusionRuleDictionaryAttributes) InternalWithRef(ref terra.Reference) ExclusionRuleDictionaryAttributes {
	return ExclusionRuleDictionaryAttributes{ref: ref}
}

func (d ExclusionRuleDictionaryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ExclusionRuleDictionaryAttributes) CloudStoragePath() terra.ListValue[ExclusionRuleDictionaryCloudStoragePathAttributes] {
	return terra.ReferenceAsList[ExclusionRuleDictionaryCloudStoragePathAttributes](d.ref.Append("cloud_storage_path"))
}

func (d ExclusionRuleDictionaryAttributes) WordList() terra.ListValue[ExclusionRuleDictionaryWordListAttributes] {
	return terra.ReferenceAsList[ExclusionRuleDictionaryWordListAttributes](d.ref.Append("word_list"))
}

type ExclusionRuleDictionaryCloudStoragePathAttributes struct {
	ref terra.Reference
}

func (csp ExclusionRuleDictionaryCloudStoragePathAttributes) InternalRef() (terra.Reference, error) {
	return csp.ref, nil
}

func (csp ExclusionRuleDictionaryCloudStoragePathAttributes) InternalWithRef(ref terra.Reference) ExclusionRuleDictionaryCloudStoragePathAttributes {
	return ExclusionRuleDictionaryCloudStoragePathAttributes{ref: ref}
}

func (csp ExclusionRuleDictionaryCloudStoragePathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return csp.ref.InternalTokens()
}

func (csp ExclusionRuleDictionaryCloudStoragePathAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(csp.ref.Append("path"))
}

type ExclusionRuleDictionaryWordListAttributes struct {
	ref terra.Reference
}

func (wl ExclusionRuleDictionaryWordListAttributes) InternalRef() (terra.Reference, error) {
	return wl.ref, nil
}

func (wl ExclusionRuleDictionaryWordListAttributes) InternalWithRef(ref terra.Reference) ExclusionRuleDictionaryWordListAttributes {
	return ExclusionRuleDictionaryWordListAttributes{ref: ref}
}

func (wl ExclusionRuleDictionaryWordListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wl.ref.InternalTokens()
}

func (wl ExclusionRuleDictionaryWordListAttributes) Words() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wl.ref.Append("words"))
}

type ExcludeByHotwordAttributes struct {
	ref terra.Reference
}

func (ebh ExcludeByHotwordAttributes) InternalRef() (terra.Reference, error) {
	return ebh.ref, nil
}

func (ebh ExcludeByHotwordAttributes) InternalWithRef(ref terra.Reference) ExcludeByHotwordAttributes {
	return ExcludeByHotwordAttributes{ref: ref}
}

func (ebh ExcludeByHotwordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebh.ref.InternalTokens()
}

func (ebh ExcludeByHotwordAttributes) HotwordRegex() terra.ListValue[ExcludeByHotwordHotwordRegexAttributes] {
	return terra.ReferenceAsList[ExcludeByHotwordHotwordRegexAttributes](ebh.ref.Append("hotword_regex"))
}

func (ebh ExcludeByHotwordAttributes) Proximity() terra.ListValue[ExcludeByHotwordProximityAttributes] {
	return terra.ReferenceAsList[ExcludeByHotwordProximityAttributes](ebh.ref.Append("proximity"))
}

type ExcludeByHotwordHotwordRegexAttributes struct {
	ref terra.Reference
}

func (hr ExcludeByHotwordHotwordRegexAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr ExcludeByHotwordHotwordRegexAttributes) InternalWithRef(ref terra.Reference) ExcludeByHotwordHotwordRegexAttributes {
	return ExcludeByHotwordHotwordRegexAttributes{ref: ref}
}

func (hr ExcludeByHotwordHotwordRegexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr ExcludeByHotwordHotwordRegexAttributes) GroupIndexes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](hr.ref.Append("group_indexes"))
}

func (hr ExcludeByHotwordHotwordRegexAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(hr.ref.Append("pattern"))
}

type ExcludeByHotwordProximityAttributes struct {
	ref terra.Reference
}

func (p ExcludeByHotwordProximityAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ExcludeByHotwordProximityAttributes) InternalWithRef(ref terra.Reference) ExcludeByHotwordProximityAttributes {
	return ExcludeByHotwordProximityAttributes{ref: ref}
}

func (p ExcludeByHotwordProximityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ExcludeByHotwordProximityAttributes) WindowAfter() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("window_after"))
}

func (p ExcludeByHotwordProximityAttributes) WindowBefore() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("window_before"))
}

type ExcludeInfoTypesAttributes struct {
	ref terra.Reference
}

func (eit ExcludeInfoTypesAttributes) InternalRef() (terra.Reference, error) {
	return eit.ref, nil
}

func (eit ExcludeInfoTypesAttributes) InternalWithRef(ref terra.Reference) ExcludeInfoTypesAttributes {
	return ExcludeInfoTypesAttributes{ref: ref}
}

func (eit ExcludeInfoTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eit.ref.InternalTokens()
}

func (eit ExcludeInfoTypesAttributes) InfoTypes() terra.ListValue[ExcludeInfoTypesInfoTypesAttributes] {
	return terra.ReferenceAsList[ExcludeInfoTypesInfoTypesAttributes](eit.ref.Append("info_types"))
}

type ExcludeInfoTypesInfoTypesAttributes struct {
	ref terra.Reference
}

func (it ExcludeInfoTypesInfoTypesAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it ExcludeInfoTypesInfoTypesAttributes) InternalWithRef(ref terra.Reference) ExcludeInfoTypesInfoTypesAttributes {
	return ExcludeInfoTypesInfoTypesAttributes{ref: ref}
}

func (it ExcludeInfoTypesInfoTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it ExcludeInfoTypesInfoTypesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("name"))
}

func (it ExcludeInfoTypesInfoTypesAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("version"))
}

func (it ExcludeInfoTypesInfoTypesAttributes) SensitivityScore() terra.ListValue[ExcludeInfoTypesInfoTypesSensitivityScoreAttributes] {
	return terra.ReferenceAsList[ExcludeInfoTypesInfoTypesSensitivityScoreAttributes](it.ref.Append("sensitivity_score"))
}

type ExcludeInfoTypesInfoTypesSensitivityScoreAttributes struct {
	ref terra.Reference
}

func (ss ExcludeInfoTypesInfoTypesSensitivityScoreAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss ExcludeInfoTypesInfoTypesSensitivityScoreAttributes) InternalWithRef(ref terra.Reference) ExcludeInfoTypesInfoTypesSensitivityScoreAttributes {
	return ExcludeInfoTypesInfoTypesSensitivityScoreAttributes{ref: ref}
}

func (ss ExcludeInfoTypesInfoTypesSensitivityScoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss ExcludeInfoTypesInfoTypesSensitivityScoreAttributes) Score() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("score"))
}

type ExclusionRuleRegexAttributes struct {
	ref terra.Reference
}

func (r ExclusionRuleRegexAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ExclusionRuleRegexAttributes) InternalWithRef(ref terra.Reference) ExclusionRuleRegexAttributes {
	return ExclusionRuleRegexAttributes{ref: ref}
}

func (r ExclusionRuleRegexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ExclusionRuleRegexAttributes) GroupIndexes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](r.ref.Append("group_indexes"))
}

func (r ExclusionRuleRegexAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("pattern"))
}

type HotwordRuleAttributes struct {
	ref terra.Reference
}

func (hr HotwordRuleAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr HotwordRuleAttributes) InternalWithRef(ref terra.Reference) HotwordRuleAttributes {
	return HotwordRuleAttributes{ref: ref}
}

func (hr HotwordRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr HotwordRuleAttributes) HotwordRegex() terra.ListValue[HotwordRuleHotwordRegexAttributes] {
	return terra.ReferenceAsList[HotwordRuleHotwordRegexAttributes](hr.ref.Append("hotword_regex"))
}

func (hr HotwordRuleAttributes) LikelihoodAdjustment() terra.ListValue[LikelihoodAdjustmentAttributes] {
	return terra.ReferenceAsList[LikelihoodAdjustmentAttributes](hr.ref.Append("likelihood_adjustment"))
}

func (hr HotwordRuleAttributes) Proximity() terra.ListValue[HotwordRuleProximityAttributes] {
	return terra.ReferenceAsList[HotwordRuleProximityAttributes](hr.ref.Append("proximity"))
}

type HotwordRuleHotwordRegexAttributes struct {
	ref terra.Reference
}

func (hr HotwordRuleHotwordRegexAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr HotwordRuleHotwordRegexAttributes) InternalWithRef(ref terra.Reference) HotwordRuleHotwordRegexAttributes {
	return HotwordRuleHotwordRegexAttributes{ref: ref}
}

func (hr HotwordRuleHotwordRegexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr HotwordRuleHotwordRegexAttributes) GroupIndexes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](hr.ref.Append("group_indexes"))
}

func (hr HotwordRuleHotwordRegexAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(hr.ref.Append("pattern"))
}

type LikelihoodAdjustmentAttributes struct {
	ref terra.Reference
}

func (la LikelihoodAdjustmentAttributes) InternalRef() (terra.Reference, error) {
	return la.ref, nil
}

func (la LikelihoodAdjustmentAttributes) InternalWithRef(ref terra.Reference) LikelihoodAdjustmentAttributes {
	return LikelihoodAdjustmentAttributes{ref: ref}
}

func (la LikelihoodAdjustmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return la.ref.InternalTokens()
}

func (la LikelihoodAdjustmentAttributes) FixedLikelihood() terra.StringValue {
	return terra.ReferenceAsString(la.ref.Append("fixed_likelihood"))
}

func (la LikelihoodAdjustmentAttributes) RelativeLikelihood() terra.NumberValue {
	return terra.ReferenceAsNumber(la.ref.Append("relative_likelihood"))
}

type HotwordRuleProximityAttributes struct {
	ref terra.Reference
}

func (p HotwordRuleProximityAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p HotwordRuleProximityAttributes) InternalWithRef(ref terra.Reference) HotwordRuleProximityAttributes {
	return HotwordRuleProximityAttributes{ref: ref}
}

func (p HotwordRuleProximityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p HotwordRuleProximityAttributes) WindowAfter() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("window_after"))
}

func (p HotwordRuleProximityAttributes) WindowBefore() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("window_before"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type InspectConfigState struct {
	ContentOptions   []string                      `json:"content_options"`
	ExcludeInfoTypes bool                          `json:"exclude_info_types"`
	IncludeQuote     bool                          `json:"include_quote"`
	MinLikelihood    string                        `json:"min_likelihood"`
	CustomInfoTypes  []CustomInfoTypesState        `json:"custom_info_types"`
	InfoTypes        []InspectConfigInfoTypesState `json:"info_types"`
	Limits           []LimitsState                 `json:"limits"`
	RuleSet          []RuleSetState                `json:"rule_set"`
}

type CustomInfoTypesState struct {
	ExclusionType    string                                 `json:"exclusion_type"`
	Likelihood       string                                 `json:"likelihood"`
	Dictionary       []CustomInfoTypesDictionaryState       `json:"dictionary"`
	InfoType         []CustomInfoTypesInfoTypeState         `json:"info_type"`
	Regex            []CustomInfoTypesRegexState            `json:"regex"`
	SensitivityScore []CustomInfoTypesSensitivityScoreState `json:"sensitivity_score"`
	StoredType       []StoredTypeState                      `json:"stored_type"`
	SurrogateType    []SurrogateTypeState                   `json:"surrogate_type"`
}

type CustomInfoTypesDictionaryState struct {
	CloudStoragePath []CustomInfoTypesDictionaryCloudStoragePathState `json:"cloud_storage_path"`
	WordList         []CustomInfoTypesDictionaryWordListState         `json:"word_list"`
}

type CustomInfoTypesDictionaryCloudStoragePathState struct {
	Path string `json:"path"`
}

type CustomInfoTypesDictionaryWordListState struct {
	Words []string `json:"words"`
}

type CustomInfoTypesInfoTypeState struct {
	Name             string                                         `json:"name"`
	Version          string                                         `json:"version"`
	SensitivityScore []CustomInfoTypesInfoTypeSensitivityScoreState `json:"sensitivity_score"`
}

type CustomInfoTypesInfoTypeSensitivityScoreState struct {
	Score string `json:"score"`
}

type CustomInfoTypesRegexState struct {
	GroupIndexes []float64 `json:"group_indexes"`
	Pattern      string    `json:"pattern"`
}

type CustomInfoTypesSensitivityScoreState struct {
	Score string `json:"score"`
}

type StoredTypeState struct {
	Name string `json:"name"`
}

type SurrogateTypeState struct{}

type InspectConfigInfoTypesState struct {
	Name             string                                        `json:"name"`
	Version          string                                        `json:"version"`
	SensitivityScore []InspectConfigInfoTypesSensitivityScoreState `json:"sensitivity_score"`
}

type InspectConfigInfoTypesSensitivityScoreState struct {
	Score string `json:"score"`
}

type LimitsState struct {
	MaxFindingsPerItem     float64                       `json:"max_findings_per_item"`
	MaxFindingsPerRequest  float64                       `json:"max_findings_per_request"`
	MaxFindingsPerInfoType []MaxFindingsPerInfoTypeState `json:"max_findings_per_info_type"`
}

type MaxFindingsPerInfoTypeState struct {
	MaxFindings float64                               `json:"max_findings"`
	InfoType    []MaxFindingsPerInfoTypeInfoTypeState `json:"info_type"`
}

type MaxFindingsPerInfoTypeInfoTypeState struct {
	Name             string                                                `json:"name"`
	Version          string                                                `json:"version"`
	SensitivityScore []MaxFindingsPerInfoTypeInfoTypeSensitivityScoreState `json:"sensitivity_score"`
}

type MaxFindingsPerInfoTypeInfoTypeSensitivityScoreState struct {
	Score string `json:"score"`
}

type RuleSetState struct {
	InfoTypes []RuleSetInfoTypesState `json:"info_types"`
	Rules     []RulesState            `json:"rules"`
}

type RuleSetInfoTypesState struct {
	Name             string                                  `json:"name"`
	Version          string                                  `json:"version"`
	SensitivityScore []RuleSetInfoTypesSensitivityScoreState `json:"sensitivity_score"`
}

type RuleSetInfoTypesSensitivityScoreState struct {
	Score string `json:"score"`
}

type RulesState struct {
	ExclusionRule []ExclusionRuleState `json:"exclusion_rule"`
	HotwordRule   []HotwordRuleState   `json:"hotword_rule"`
}

type ExclusionRuleState struct {
	MatchingType     string                         `json:"matching_type"`
	Dictionary       []ExclusionRuleDictionaryState `json:"dictionary"`
	ExcludeByHotword []ExcludeByHotwordState        `json:"exclude_by_hotword"`
	ExcludeInfoTypes []ExcludeInfoTypesState        `json:"exclude_info_types"`
	Regex            []ExclusionRuleRegexState      `json:"regex"`
}

type ExclusionRuleDictionaryState struct {
	CloudStoragePath []ExclusionRuleDictionaryCloudStoragePathState `json:"cloud_storage_path"`
	WordList         []ExclusionRuleDictionaryWordListState         `json:"word_list"`
}

type ExclusionRuleDictionaryCloudStoragePathState struct {
	Path string `json:"path"`
}

type ExclusionRuleDictionaryWordListState struct {
	Words []string `json:"words"`
}

type ExcludeByHotwordState struct {
	HotwordRegex []ExcludeByHotwordHotwordRegexState `json:"hotword_regex"`
	Proximity    []ExcludeByHotwordProximityState    `json:"proximity"`
}

type ExcludeByHotwordHotwordRegexState struct {
	GroupIndexes []float64 `json:"group_indexes"`
	Pattern      string    `json:"pattern"`
}

type ExcludeByHotwordProximityState struct {
	WindowAfter  float64 `json:"window_after"`
	WindowBefore float64 `json:"window_before"`
}

type ExcludeInfoTypesState struct {
	InfoTypes []ExcludeInfoTypesInfoTypesState `json:"info_types"`
}

type ExcludeInfoTypesInfoTypesState struct {
	Name             string                                           `json:"name"`
	Version          string                                           `json:"version"`
	SensitivityScore []ExcludeInfoTypesInfoTypesSensitivityScoreState `json:"sensitivity_score"`
}

type ExcludeInfoTypesInfoTypesSensitivityScoreState struct {
	Score string `json:"score"`
}

type ExclusionRuleRegexState struct {
	GroupIndexes []float64 `json:"group_indexes"`
	Pattern      string    `json:"pattern"`
}

type HotwordRuleState struct {
	HotwordRegex         []HotwordRuleHotwordRegexState `json:"hotword_regex"`
	LikelihoodAdjustment []LikelihoodAdjustmentState    `json:"likelihood_adjustment"`
	Proximity            []HotwordRuleProximityState    `json:"proximity"`
}

type HotwordRuleHotwordRegexState struct {
	GroupIndexes []float64 `json:"group_indexes"`
	Pattern      string    `json:"pattern"`
}

type LikelihoodAdjustmentState struct {
	FixedLikelihood    string  `json:"fixed_likelihood"`
	RelativeLikelihood float64 `json:"relative_likelihood"`
}

type HotwordRuleProximityState struct {
	WindowAfter  float64 `json:"window_after"`
	WindowBefore float64 `json:"window_before"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
