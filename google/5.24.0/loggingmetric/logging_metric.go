// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package loggingmetric

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BucketOptions struct {
	// ExplicitBuckets: optional
	ExplicitBuckets *ExplicitBuckets `hcl:"explicit_buckets,block"`
	// ExponentialBuckets: optional
	ExponentialBuckets *ExponentialBuckets `hcl:"exponential_buckets,block"`
	// LinearBuckets: optional
	LinearBuckets *LinearBuckets `hcl:"linear_buckets,block"`
}

type ExplicitBuckets struct {
	// Bounds: list of number, required
	Bounds terra.ListValue[terra.NumberValue] `hcl:"bounds,attr" validate:"required"`
}

type ExponentialBuckets struct {
	// GrowthFactor: number, required
	GrowthFactor terra.NumberValue `hcl:"growth_factor,attr" validate:"required"`
	// NumFiniteBuckets: number, required
	NumFiniteBuckets terra.NumberValue `hcl:"num_finite_buckets,attr" validate:"required"`
	// Scale: number, required
	Scale terra.NumberValue `hcl:"scale,attr" validate:"required"`
}

type LinearBuckets struct {
	// NumFiniteBuckets: number, required
	NumFiniteBuckets terra.NumberValue `hcl:"num_finite_buckets,attr" validate:"required"`
	// Offset: number, required
	Offset terra.NumberValue `hcl:"offset,attr" validate:"required"`
	// Width: number, required
	Width terra.NumberValue `hcl:"width,attr" validate:"required"`
}

type MetricDescriptor struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// MetricKind: string, required
	MetricKind terra.StringValue `hcl:"metric_kind,attr" validate:"required"`
	// Unit: string, optional
	Unit terra.StringValue `hcl:"unit,attr"`
	// ValueType: string, required
	ValueType terra.StringValue `hcl:"value_type,attr" validate:"required"`
	// Labels: min=0
	Labels []Labels `hcl:"labels,block" validate:"min=0"`
}

type Labels struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// ValueType: string, optional
	ValueType terra.StringValue `hcl:"value_type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BucketOptionsAttributes struct {
	ref terra.Reference
}

func (bo BucketOptionsAttributes) InternalRef() (terra.Reference, error) {
	return bo.ref, nil
}

func (bo BucketOptionsAttributes) InternalWithRef(ref terra.Reference) BucketOptionsAttributes {
	return BucketOptionsAttributes{ref: ref}
}

func (bo BucketOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bo.ref.InternalTokens()
}

func (bo BucketOptionsAttributes) ExplicitBuckets() terra.ListValue[ExplicitBucketsAttributes] {
	return terra.ReferenceAsList[ExplicitBucketsAttributes](bo.ref.Append("explicit_buckets"))
}

func (bo BucketOptionsAttributes) ExponentialBuckets() terra.ListValue[ExponentialBucketsAttributes] {
	return terra.ReferenceAsList[ExponentialBucketsAttributes](bo.ref.Append("exponential_buckets"))
}

func (bo BucketOptionsAttributes) LinearBuckets() terra.ListValue[LinearBucketsAttributes] {
	return terra.ReferenceAsList[LinearBucketsAttributes](bo.ref.Append("linear_buckets"))
}

type ExplicitBucketsAttributes struct {
	ref terra.Reference
}

func (eb ExplicitBucketsAttributes) InternalRef() (terra.Reference, error) {
	return eb.ref, nil
}

func (eb ExplicitBucketsAttributes) InternalWithRef(ref terra.Reference) ExplicitBucketsAttributes {
	return ExplicitBucketsAttributes{ref: ref}
}

func (eb ExplicitBucketsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eb.ref.InternalTokens()
}

func (eb ExplicitBucketsAttributes) Bounds() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](eb.ref.Append("bounds"))
}

type ExponentialBucketsAttributes struct {
	ref terra.Reference
}

func (eb ExponentialBucketsAttributes) InternalRef() (terra.Reference, error) {
	return eb.ref, nil
}

func (eb ExponentialBucketsAttributes) InternalWithRef(ref terra.Reference) ExponentialBucketsAttributes {
	return ExponentialBucketsAttributes{ref: ref}
}

func (eb ExponentialBucketsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eb.ref.InternalTokens()
}

func (eb ExponentialBucketsAttributes) GrowthFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(eb.ref.Append("growth_factor"))
}

func (eb ExponentialBucketsAttributes) NumFiniteBuckets() terra.NumberValue {
	return terra.ReferenceAsNumber(eb.ref.Append("num_finite_buckets"))
}

func (eb ExponentialBucketsAttributes) Scale() terra.NumberValue {
	return terra.ReferenceAsNumber(eb.ref.Append("scale"))
}

type LinearBucketsAttributes struct {
	ref terra.Reference
}

func (lb LinearBucketsAttributes) InternalRef() (terra.Reference, error) {
	return lb.ref, nil
}

func (lb LinearBucketsAttributes) InternalWithRef(ref terra.Reference) LinearBucketsAttributes {
	return LinearBucketsAttributes{ref: ref}
}

func (lb LinearBucketsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lb.ref.InternalTokens()
}

func (lb LinearBucketsAttributes) NumFiniteBuckets() terra.NumberValue {
	return terra.ReferenceAsNumber(lb.ref.Append("num_finite_buckets"))
}

func (lb LinearBucketsAttributes) Offset() terra.NumberValue {
	return terra.ReferenceAsNumber(lb.ref.Append("offset"))
}

func (lb LinearBucketsAttributes) Width() terra.NumberValue {
	return terra.ReferenceAsNumber(lb.ref.Append("width"))
}

type MetricDescriptorAttributes struct {
	ref terra.Reference
}

func (md MetricDescriptorAttributes) InternalRef() (terra.Reference, error) {
	return md.ref, nil
}

func (md MetricDescriptorAttributes) InternalWithRef(ref terra.Reference) MetricDescriptorAttributes {
	return MetricDescriptorAttributes{ref: ref}
}

func (md MetricDescriptorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return md.ref.InternalTokens()
}

func (md MetricDescriptorAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("display_name"))
}

func (md MetricDescriptorAttributes) MetricKind() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("metric_kind"))
}

func (md MetricDescriptorAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("unit"))
}

func (md MetricDescriptorAttributes) ValueType() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("value_type"))
}

func (md MetricDescriptorAttributes) Labels() terra.SetValue[LabelsAttributes] {
	return terra.ReferenceAsSet[LabelsAttributes](md.ref.Append("labels"))
}

type LabelsAttributes struct {
	ref terra.Reference
}

func (l LabelsAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LabelsAttributes) InternalWithRef(ref terra.Reference) LabelsAttributes {
	return LabelsAttributes{ref: ref}
}

func (l LabelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LabelsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("description"))
}

func (l LabelsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("key"))
}

func (l LabelsAttributes) ValueType() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("value_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BucketOptionsState struct {
	ExplicitBuckets    []ExplicitBucketsState    `json:"explicit_buckets"`
	ExponentialBuckets []ExponentialBucketsState `json:"exponential_buckets"`
	LinearBuckets      []LinearBucketsState      `json:"linear_buckets"`
}

type ExplicitBucketsState struct {
	Bounds []float64 `json:"bounds"`
}

type ExponentialBucketsState struct {
	GrowthFactor     float64 `json:"growth_factor"`
	NumFiniteBuckets float64 `json:"num_finite_buckets"`
	Scale            float64 `json:"scale"`
}

type LinearBucketsState struct {
	NumFiniteBuckets float64 `json:"num_finite_buckets"`
	Offset           float64 `json:"offset"`
	Width            float64 `json:"width"`
}

type MetricDescriptorState struct {
	DisplayName string        `json:"display_name"`
	MetricKind  string        `json:"metric_kind"`
	Unit        string        `json:"unit"`
	ValueType   string        `json:"value_type"`
	Labels      []LabelsState `json:"labels"`
}

type LabelsState struct {
	Description string `json:"description"`
	Key         string `json:"key"`
	ValueType   string `json:"value_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
