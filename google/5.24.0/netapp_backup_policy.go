// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	netappbackuppolicy "github.com/golingon/terraproviders/google/5.24.0/netappbackuppolicy"
	"io"
)

// NewNetappBackupPolicy creates a new instance of [NetappBackupPolicy].
func NewNetappBackupPolicy(name string, args NetappBackupPolicyArgs) *NetappBackupPolicy {
	return &NetappBackupPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetappBackupPolicy)(nil)

// NetappBackupPolicy represents the Terraform resource google_netapp_backup_policy.
type NetappBackupPolicy struct {
	Name      string
	Args      NetappBackupPolicyArgs
	state     *netappBackupPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetappBackupPolicy].
func (nbp *NetappBackupPolicy) Type() string {
	return "google_netapp_backup_policy"
}

// LocalName returns the local name for [NetappBackupPolicy].
func (nbp *NetappBackupPolicy) LocalName() string {
	return nbp.Name
}

// Configuration returns the configuration (args) for [NetappBackupPolicy].
func (nbp *NetappBackupPolicy) Configuration() interface{} {
	return nbp.Args
}

// DependOn is used for other resources to depend on [NetappBackupPolicy].
func (nbp *NetappBackupPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(nbp)
}

// Dependencies returns the list of resources [NetappBackupPolicy] depends_on.
func (nbp *NetappBackupPolicy) Dependencies() terra.Dependencies {
	return nbp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetappBackupPolicy].
func (nbp *NetappBackupPolicy) LifecycleManagement() *terra.Lifecycle {
	return nbp.Lifecycle
}

// Attributes returns the attributes for [NetappBackupPolicy].
func (nbp *NetappBackupPolicy) Attributes() netappBackupPolicyAttributes {
	return netappBackupPolicyAttributes{ref: terra.ReferenceResource(nbp)}
}

// ImportState imports the given attribute values into [NetappBackupPolicy]'s state.
func (nbp *NetappBackupPolicy) ImportState(av io.Reader) error {
	nbp.state = &netappBackupPolicyState{}
	if err := json.NewDecoder(av).Decode(nbp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nbp.Type(), nbp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetappBackupPolicy] has state.
func (nbp *NetappBackupPolicy) State() (*netappBackupPolicyState, bool) {
	return nbp.state, nbp.state != nil
}

// StateMust returns the state for [NetappBackupPolicy]. Panics if the state is nil.
func (nbp *NetappBackupPolicy) StateMust() *netappBackupPolicyState {
	if nbp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nbp.Type(), nbp.LocalName()))
	}
	return nbp.state
}

// NetappBackupPolicyArgs contains the configurations for google_netapp_backup_policy.
type NetappBackupPolicyArgs struct {
	// DailyBackupLimit: number, required
	DailyBackupLimit terra.NumberValue `hcl:"daily_backup_limit,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MonthlyBackupLimit: number, required
	MonthlyBackupLimit terra.NumberValue `hcl:"monthly_backup_limit,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// WeeklyBackupLimit: number, required
	WeeklyBackupLimit terra.NumberValue `hcl:"weekly_backup_limit,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *netappbackuppolicy.Timeouts `hcl:"timeouts,block"`
}
type netappBackupPolicyAttributes struct {
	ref terra.Reference
}

// AssignedVolumeCount returns a reference to field assigned_volume_count of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) AssignedVolumeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(nbp.ref.Append("assigned_volume_count"))
}

// CreateTime returns a reference to field create_time of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(nbp.ref.Append("create_time"))
}

// DailyBackupLimit returns a reference to field daily_backup_limit of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) DailyBackupLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(nbp.ref.Append("daily_backup_limit"))
}

// Description returns a reference to field description of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(nbp.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nbp.ref.Append("effective_labels"))
}

// Enabled returns a reference to field enabled of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(nbp.ref.Append("enabled"))
}

// Id returns a reference to field id of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nbp.ref.Append("id"))
}

// Labels returns a reference to field labels of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nbp.ref.Append("labels"))
}

// Location returns a reference to field location of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(nbp.ref.Append("location"))
}

// MonthlyBackupLimit returns a reference to field monthly_backup_limit of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) MonthlyBackupLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(nbp.ref.Append("monthly_backup_limit"))
}

// Name returns a reference to field name of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nbp.ref.Append("name"))
}

// Project returns a reference to field project of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(nbp.ref.Append("project"))
}

// State returns a reference to field state of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(nbp.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nbp.ref.Append("terraform_labels"))
}

// WeeklyBackupLimit returns a reference to field weekly_backup_limit of google_netapp_backup_policy.
func (nbp netappBackupPolicyAttributes) WeeklyBackupLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(nbp.ref.Append("weekly_backup_limit"))
}

func (nbp netappBackupPolicyAttributes) Timeouts() netappbackuppolicy.TimeoutsAttributes {
	return terra.ReferenceAsSingle[netappbackuppolicy.TimeoutsAttributes](nbp.ref.Append("timeouts"))
}

type netappBackupPolicyState struct {
	AssignedVolumeCount float64                           `json:"assigned_volume_count"`
	CreateTime          string                            `json:"create_time"`
	DailyBackupLimit    float64                           `json:"daily_backup_limit"`
	Description         string                            `json:"description"`
	EffectiveLabels     map[string]string                 `json:"effective_labels"`
	Enabled             bool                              `json:"enabled"`
	Id                  string                            `json:"id"`
	Labels              map[string]string                 `json:"labels"`
	Location            string                            `json:"location"`
	MonthlyBackupLimit  float64                           `json:"monthly_backup_limit"`
	Name                string                            `json:"name"`
	Project             string                            `json:"project"`
	State               string                            `json:"state"`
	TerraformLabels     map[string]string                 `json:"terraform_labels"`
	WeeklyBackupLimit   float64                           `json:"weekly_backup_limit"`
	Timeouts            *netappbackuppolicy.TimeoutsState `json:"timeouts"`
}
