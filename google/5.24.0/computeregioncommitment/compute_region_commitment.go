// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package computeregioncommitment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type LicenseResource struct {
	// Amount: string, optional
	Amount terra.StringValue `hcl:"amount,attr"`
	// CoresPerLicense: string, optional
	CoresPerLicense terra.StringValue `hcl:"cores_per_license,attr"`
	// License: string, required
	License terra.StringValue `hcl:"license,attr" validate:"required"`
}

type Resources struct {
	// AcceleratorType: string, optional
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr"`
	// Amount: string, optional
	Amount terra.StringValue `hcl:"amount,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type LicenseResourceAttributes struct {
	ref terra.Reference
}

func (lr LicenseResourceAttributes) InternalRef() (terra.Reference, error) {
	return lr.ref, nil
}

func (lr LicenseResourceAttributes) InternalWithRef(ref terra.Reference) LicenseResourceAttributes {
	return LicenseResourceAttributes{ref: ref}
}

func (lr LicenseResourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lr.ref.InternalTokens()
}

func (lr LicenseResourceAttributes) Amount() terra.StringValue {
	return terra.ReferenceAsString(lr.ref.Append("amount"))
}

func (lr LicenseResourceAttributes) CoresPerLicense() terra.StringValue {
	return terra.ReferenceAsString(lr.ref.Append("cores_per_license"))
}

func (lr LicenseResourceAttributes) License() terra.StringValue {
	return terra.ReferenceAsString(lr.ref.Append("license"))
}

type ResourcesAttributes struct {
	ref terra.Reference
}

func (r ResourcesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ResourcesAttributes) InternalWithRef(ref terra.Reference) ResourcesAttributes {
	return ResourcesAttributes{ref: ref}
}

func (r ResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ResourcesAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("accelerator_type"))
}

func (r ResourcesAttributes) Amount() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("amount"))
}

func (r ResourcesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type LicenseResourceState struct {
	Amount          string `json:"amount"`
	CoresPerLicense string `json:"cores_per_license"`
	License         string `json:"license"`
}

type ResourcesState struct {
	AcceleratorType string `json:"accelerator_type"`
	Amount          string `json:"amount"`
	Type            string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
