// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dataalloydbsupporteddatabaseflags

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type SupportedDatabaseFlags struct {
	// IntegerRestrictions: min=0
	IntegerRestrictions []IntegerRestrictions `hcl:"integer_restrictions,block" validate:"min=0"`
	// StringRestrictions: min=0
	StringRestrictions []StringRestrictions `hcl:"string_restrictions,block" validate:"min=0"`
}

type IntegerRestrictions struct{}

type StringRestrictions struct{}

type SupportedDatabaseFlagsAttributes struct {
	ref terra.Reference
}

func (sdf SupportedDatabaseFlagsAttributes) InternalRef() (terra.Reference, error) {
	return sdf.ref, nil
}

func (sdf SupportedDatabaseFlagsAttributes) InternalWithRef(ref terra.Reference) SupportedDatabaseFlagsAttributes {
	return SupportedDatabaseFlagsAttributes{ref: ref}
}

func (sdf SupportedDatabaseFlagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sdf.ref.InternalTokens()
}

func (sdf SupportedDatabaseFlagsAttributes) AcceptsMultipleValues() terra.BoolValue {
	return terra.ReferenceAsBool(sdf.ref.Append("accepts_multiple_values"))
}

func (sdf SupportedDatabaseFlagsAttributes) FlagName() terra.StringValue {
	return terra.ReferenceAsString(sdf.ref.Append("flag_name"))
}

func (sdf SupportedDatabaseFlagsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sdf.ref.Append("name"))
}

func (sdf SupportedDatabaseFlagsAttributes) RequiresDbRestart() terra.BoolValue {
	return terra.ReferenceAsBool(sdf.ref.Append("requires_db_restart"))
}

func (sdf SupportedDatabaseFlagsAttributes) SupportedDbVersions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sdf.ref.Append("supported_db_versions"))
}

func (sdf SupportedDatabaseFlagsAttributes) ValueType() terra.StringValue {
	return terra.ReferenceAsString(sdf.ref.Append("value_type"))
}

func (sdf SupportedDatabaseFlagsAttributes) IntegerRestrictions() terra.ListValue[IntegerRestrictionsAttributes] {
	return terra.ReferenceAsList[IntegerRestrictionsAttributes](sdf.ref.Append("integer_restrictions"))
}

func (sdf SupportedDatabaseFlagsAttributes) StringRestrictions() terra.ListValue[StringRestrictionsAttributes] {
	return terra.ReferenceAsList[StringRestrictionsAttributes](sdf.ref.Append("string_restrictions"))
}

type IntegerRestrictionsAttributes struct {
	ref terra.Reference
}

func (ir IntegerRestrictionsAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir IntegerRestrictionsAttributes) InternalWithRef(ref terra.Reference) IntegerRestrictionsAttributes {
	return IntegerRestrictionsAttributes{ref: ref}
}

func (ir IntegerRestrictionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir IntegerRestrictionsAttributes) MaxValue() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("max_value"))
}

func (ir IntegerRestrictionsAttributes) MinValue() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("min_value"))
}

type StringRestrictionsAttributes struct {
	ref terra.Reference
}

func (sr StringRestrictionsAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr StringRestrictionsAttributes) InternalWithRef(ref terra.Reference) StringRestrictionsAttributes {
	return StringRestrictionsAttributes{ref: ref}
}

func (sr StringRestrictionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr StringRestrictionsAttributes) AllowedValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sr.ref.Append("allowed_values"))
}

type SupportedDatabaseFlagsState struct {
	AcceptsMultipleValues bool                       `json:"accepts_multiple_values"`
	FlagName              string                     `json:"flag_name"`
	Name                  string                     `json:"name"`
	RequiresDbRestart     bool                       `json:"requires_db_restart"`
	SupportedDbVersions   []string                   `json:"supported_db_versions"`
	ValueType             string                     `json:"value_type"`
	IntegerRestrictions   []IntegerRestrictionsState `json:"integer_restrictions"`
	StringRestrictions    []StringRestrictionsState  `json:"string_restrictions"`
}

type IntegerRestrictionsState struct {
	MaxValue string `json:"max_value"`
	MinValue string `json:"min_value"`
}

type StringRestrictionsState struct {
	AllowedValues []string `json:"allowed_values"`
}
