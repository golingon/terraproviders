// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package osconfigospolicyassignment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type InstanceFilter struct {
	// All: bool, optional
	All terra.BoolValue `hcl:"all,attr"`
	// ExclusionLabels: min=0
	ExclusionLabels []ExclusionLabels `hcl:"exclusion_labels,block" validate:"min=0"`
	// InclusionLabels: min=0
	InclusionLabels []InclusionLabels `hcl:"inclusion_labels,block" validate:"min=0"`
	// Inventories: min=0
	Inventories []Inventories `hcl:"inventories,block" validate:"min=0"`
}

type ExclusionLabels struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
}

type InclusionLabels struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
}

type Inventories struct {
	// OsShortName: string, required
	OsShortName terra.StringValue `hcl:"os_short_name,attr" validate:"required"`
	// OsVersion: string, optional
	OsVersion terra.StringValue `hcl:"os_version,attr"`
}

type OsPolicies struct {
	// AllowNoResourceGroupMatch: bool, optional
	AllowNoResourceGroupMatch terra.BoolValue `hcl:"allow_no_resource_group_match,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
	// ResourceGroups: min=1
	ResourceGroups []ResourceGroups `hcl:"resource_groups,block" validate:"min=1"`
}

type ResourceGroups struct {
	// InventoryFilters: min=0
	InventoryFilters []InventoryFilters `hcl:"inventory_filters,block" validate:"min=0"`
	// Resources: min=1
	Resources []Resources `hcl:"resources,block" validate:"min=1"`
}

type InventoryFilters struct {
	// OsShortName: string, required
	OsShortName terra.StringValue `hcl:"os_short_name,attr" validate:"required"`
	// OsVersion: string, optional
	OsVersion terra.StringValue `hcl:"os_version,attr"`
}

type Resources struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Exec: optional
	Exec *Exec `hcl:"exec,block"`
	// ResourcesFile: optional
	File *ResourcesFile `hcl:"file,block"`
	// Pkg: optional
	Pkg *Pkg `hcl:"pkg,block"`
	// Repository: optional
	Repository *Repository `hcl:"repository,block"`
}

type Exec struct {
	// Enforce: optional
	Enforce *Enforce `hcl:"enforce,block"`
	// Validate: required
	Validate *Validate `hcl:"validate,block" validate:"required"`
}

type Enforce struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Interpreter: string, required
	Interpreter terra.StringValue `hcl:"interpreter,attr" validate:"required"`
	// OutputFilePath: string, optional
	OutputFilePath terra.StringValue `hcl:"output_file_path,attr"`
	// Script: string, optional
	Script terra.StringValue `hcl:"script,attr"`
	// EnforceFile: optional
	File *EnforceFile `hcl:"file,block"`
}

type EnforceFile struct {
	// AllowInsecure: bool, optional
	AllowInsecure terra.BoolValue `hcl:"allow_insecure,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// EnforceFileGcs: optional
	Gcs *EnforceFileGcs `hcl:"gcs,block"`
	// EnforceFileRemote: optional
	Remote *EnforceFileRemote `hcl:"remote,block"`
}

type EnforceFileGcs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Generation: number, optional
	Generation terra.NumberValue `hcl:"generation,attr"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type EnforceFileRemote struct {
	// Sha256Checksum: string, optional
	Sha256Checksum terra.StringValue `hcl:"sha256_checksum,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type Validate struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Interpreter: string, required
	Interpreter terra.StringValue `hcl:"interpreter,attr" validate:"required"`
	// OutputFilePath: string, optional
	OutputFilePath terra.StringValue `hcl:"output_file_path,attr"`
	// Script: string, optional
	Script terra.StringValue `hcl:"script,attr"`
	// ValidateFile: optional
	File *ValidateFile `hcl:"file,block"`
}

type ValidateFile struct {
	// AllowInsecure: bool, optional
	AllowInsecure terra.BoolValue `hcl:"allow_insecure,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// ValidateFileGcs: optional
	Gcs *ValidateFileGcs `hcl:"gcs,block"`
	// ValidateFileRemote: optional
	Remote *ValidateFileRemote `hcl:"remote,block"`
}

type ValidateFileGcs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Generation: number, optional
	Generation terra.NumberValue `hcl:"generation,attr"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type ValidateFileRemote struct {
	// Sha256Checksum: string, optional
	Sha256Checksum terra.StringValue `hcl:"sha256_checksum,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type ResourcesFile struct {
	// Content: string, optional
	Content terra.StringValue `hcl:"content,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// State: string, required
	State terra.StringValue `hcl:"state,attr" validate:"required"`
	// FileFile: optional
	File *FileFile `hcl:"file,block"`
}

type FileFile struct {
	// AllowInsecure: bool, optional
	AllowInsecure terra.BoolValue `hcl:"allow_insecure,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// FileFileGcs: optional
	Gcs *FileFileGcs `hcl:"gcs,block"`
	// FileFileRemote: optional
	Remote *FileFileRemote `hcl:"remote,block"`
}

type FileFileGcs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Generation: number, optional
	Generation terra.NumberValue `hcl:"generation,attr"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type FileFileRemote struct {
	// Sha256Checksum: string, optional
	Sha256Checksum terra.StringValue `hcl:"sha256_checksum,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type Pkg struct {
	// DesiredState: string, required
	DesiredState terra.StringValue `hcl:"desired_state,attr" validate:"required"`
	// PkgApt: optional
	Apt *PkgApt `hcl:"apt,block"`
	// Deb: optional
	Deb *Deb `hcl:"deb,block"`
	// Googet: optional
	Googet *Googet `hcl:"googet,block"`
	// Msi: optional
	Msi *Msi `hcl:"msi,block"`
	// Rpm: optional
	Rpm *Rpm `hcl:"rpm,block"`
	// PkgYum: optional
	Yum *PkgYum `hcl:"yum,block"`
	// PkgZypper: optional
	Zypper *PkgZypper `hcl:"zypper,block"`
}

type PkgApt struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Deb struct {
	// PullDeps: bool, optional
	PullDeps terra.BoolValue `hcl:"pull_deps,attr"`
	// DebSource: required
	Source *DebSource `hcl:"source,block" validate:"required"`
}

type DebSource struct {
	// AllowInsecure: bool, optional
	AllowInsecure terra.BoolValue `hcl:"allow_insecure,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// DebSourceGcs: optional
	Gcs *DebSourceGcs `hcl:"gcs,block"`
	// DebSourceRemote: optional
	Remote *DebSourceRemote `hcl:"remote,block"`
}

type DebSourceGcs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Generation: number, optional
	Generation terra.NumberValue `hcl:"generation,attr"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type DebSourceRemote struct {
	// Sha256Checksum: string, optional
	Sha256Checksum terra.StringValue `hcl:"sha256_checksum,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type Googet struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Msi struct {
	// Properties: list of string, optional
	Properties terra.ListValue[terra.StringValue] `hcl:"properties,attr"`
	// MsiSource: required
	Source *MsiSource `hcl:"source,block" validate:"required"`
}

type MsiSource struct {
	// AllowInsecure: bool, optional
	AllowInsecure terra.BoolValue `hcl:"allow_insecure,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// MsiSourceGcs: optional
	Gcs *MsiSourceGcs `hcl:"gcs,block"`
	// MsiSourceRemote: optional
	Remote *MsiSourceRemote `hcl:"remote,block"`
}

type MsiSourceGcs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Generation: number, optional
	Generation terra.NumberValue `hcl:"generation,attr"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type MsiSourceRemote struct {
	// Sha256Checksum: string, optional
	Sha256Checksum terra.StringValue `hcl:"sha256_checksum,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type Rpm struct {
	// PullDeps: bool, optional
	PullDeps terra.BoolValue `hcl:"pull_deps,attr"`
	// RpmSource: required
	Source *RpmSource `hcl:"source,block" validate:"required"`
}

type RpmSource struct {
	// AllowInsecure: bool, optional
	AllowInsecure terra.BoolValue `hcl:"allow_insecure,attr"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// RpmSourceGcs: optional
	Gcs *RpmSourceGcs `hcl:"gcs,block"`
	// RpmSourceRemote: optional
	Remote *RpmSourceRemote `hcl:"remote,block"`
}

type RpmSourceGcs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Generation: number, optional
	Generation terra.NumberValue `hcl:"generation,attr"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type RpmSourceRemote struct {
	// Sha256Checksum: string, optional
	Sha256Checksum terra.StringValue `hcl:"sha256_checksum,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type PkgYum struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type PkgZypper struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Repository struct {
	// RepositoryApt: optional
	Apt *RepositoryApt `hcl:"apt,block"`
	// Goo: optional
	Goo *Goo `hcl:"goo,block"`
	// RepositoryYum: optional
	Yum *RepositoryYum `hcl:"yum,block"`
	// RepositoryZypper: optional
	Zypper *RepositoryZypper `hcl:"zypper,block"`
}

type RepositoryApt struct {
	// ArchiveType: string, required
	ArchiveType terra.StringValue `hcl:"archive_type,attr" validate:"required"`
	// Components: list of string, required
	Components terra.ListValue[terra.StringValue] `hcl:"components,attr" validate:"required"`
	// Distribution: string, required
	Distribution terra.StringValue `hcl:"distribution,attr" validate:"required"`
	// GpgKey: string, optional
	GpgKey terra.StringValue `hcl:"gpg_key,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type Goo struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type RepositoryYum struct {
	// BaseUrl: string, required
	BaseUrl terra.StringValue `hcl:"base_url,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// GpgKeys: list of string, optional
	GpgKeys terra.ListValue[terra.StringValue] `hcl:"gpg_keys,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
}

type RepositoryZypper struct {
	// BaseUrl: string, required
	BaseUrl terra.StringValue `hcl:"base_url,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// GpgKeys: list of string, optional
	GpgKeys terra.ListValue[terra.StringValue] `hcl:"gpg_keys,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
}

type Rollout struct {
	// MinWaitDuration: string, required
	MinWaitDuration terra.StringValue `hcl:"min_wait_duration,attr" validate:"required"`
	// DisruptionBudget: required
	DisruptionBudget *DisruptionBudget `hcl:"disruption_budget,block" validate:"required"`
}

type DisruptionBudget struct {
	// Fixed: number, optional
	Fixed terra.NumberValue `hcl:"fixed,attr"`
	// Percent: number, optional
	Percent terra.NumberValue `hcl:"percent,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type InstanceFilterAttributes struct {
	ref terra.Reference
}

func (_if InstanceFilterAttributes) InternalRef() (terra.Reference, error) {
	return _if.ref, nil
}

func (_if InstanceFilterAttributes) InternalWithRef(ref terra.Reference) InstanceFilterAttributes {
	return InstanceFilterAttributes{ref: ref}
}

func (_if InstanceFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _if.ref.InternalTokens()
}

func (_if InstanceFilterAttributes) All() terra.BoolValue {
	return terra.ReferenceAsBool(_if.ref.Append("all"))
}

func (_if InstanceFilterAttributes) ExclusionLabels() terra.ListValue[ExclusionLabelsAttributes] {
	return terra.ReferenceAsList[ExclusionLabelsAttributes](_if.ref.Append("exclusion_labels"))
}

func (_if InstanceFilterAttributes) InclusionLabels() terra.ListValue[InclusionLabelsAttributes] {
	return terra.ReferenceAsList[InclusionLabelsAttributes](_if.ref.Append("inclusion_labels"))
}

func (_if InstanceFilterAttributes) Inventories() terra.ListValue[InventoriesAttributes] {
	return terra.ReferenceAsList[InventoriesAttributes](_if.ref.Append("inventories"))
}

type ExclusionLabelsAttributes struct {
	ref terra.Reference
}

func (el ExclusionLabelsAttributes) InternalRef() (terra.Reference, error) {
	return el.ref, nil
}

func (el ExclusionLabelsAttributes) InternalWithRef(ref terra.Reference) ExclusionLabelsAttributes {
	return ExclusionLabelsAttributes{ref: ref}
}

func (el ExclusionLabelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return el.ref.InternalTokens()
}

func (el ExclusionLabelsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](el.ref.Append("labels"))
}

type InclusionLabelsAttributes struct {
	ref terra.Reference
}

func (il InclusionLabelsAttributes) InternalRef() (terra.Reference, error) {
	return il.ref, nil
}

func (il InclusionLabelsAttributes) InternalWithRef(ref terra.Reference) InclusionLabelsAttributes {
	return InclusionLabelsAttributes{ref: ref}
}

func (il InclusionLabelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return il.ref.InternalTokens()
}

func (il InclusionLabelsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](il.ref.Append("labels"))
}

type InventoriesAttributes struct {
	ref terra.Reference
}

func (i InventoriesAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i InventoriesAttributes) InternalWithRef(ref terra.Reference) InventoriesAttributes {
	return InventoriesAttributes{ref: ref}
}

func (i InventoriesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i InventoriesAttributes) OsShortName() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("os_short_name"))
}

func (i InventoriesAttributes) OsVersion() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("os_version"))
}

type OsPoliciesAttributes struct {
	ref terra.Reference
}

func (op OsPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return op.ref, nil
}

func (op OsPoliciesAttributes) InternalWithRef(ref terra.Reference) OsPoliciesAttributes {
	return OsPoliciesAttributes{ref: ref}
}

func (op OsPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return op.ref.InternalTokens()
}

func (op OsPoliciesAttributes) AllowNoResourceGroupMatch() terra.BoolValue {
	return terra.ReferenceAsBool(op.ref.Append("allow_no_resource_group_match"))
}

func (op OsPoliciesAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("description"))
}

func (op OsPoliciesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("id"))
}

func (op OsPoliciesAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("mode"))
}

func (op OsPoliciesAttributes) ResourceGroups() terra.ListValue[ResourceGroupsAttributes] {
	return terra.ReferenceAsList[ResourceGroupsAttributes](op.ref.Append("resource_groups"))
}

type ResourceGroupsAttributes struct {
	ref terra.Reference
}

func (rg ResourceGroupsAttributes) InternalRef() (terra.Reference, error) {
	return rg.ref, nil
}

func (rg ResourceGroupsAttributes) InternalWithRef(ref terra.Reference) ResourceGroupsAttributes {
	return ResourceGroupsAttributes{ref: ref}
}

func (rg ResourceGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rg.ref.InternalTokens()
}

func (rg ResourceGroupsAttributes) InventoryFilters() terra.ListValue[InventoryFiltersAttributes] {
	return terra.ReferenceAsList[InventoryFiltersAttributes](rg.ref.Append("inventory_filters"))
}

func (rg ResourceGroupsAttributes) Resources() terra.ListValue[ResourcesAttributes] {
	return terra.ReferenceAsList[ResourcesAttributes](rg.ref.Append("resources"))
}

type InventoryFiltersAttributes struct {
	ref terra.Reference
}

func (_if InventoryFiltersAttributes) InternalRef() (terra.Reference, error) {
	return _if.ref, nil
}

func (_if InventoryFiltersAttributes) InternalWithRef(ref terra.Reference) InventoryFiltersAttributes {
	return InventoryFiltersAttributes{ref: ref}
}

func (_if InventoryFiltersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _if.ref.InternalTokens()
}

func (_if InventoryFiltersAttributes) OsShortName() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("os_short_name"))
}

func (_if InventoryFiltersAttributes) OsVersion() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("os_version"))
}

type ResourcesAttributes struct {
	ref terra.Reference
}

func (r ResourcesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ResourcesAttributes) InternalWithRef(ref terra.Reference) ResourcesAttributes {
	return ResourcesAttributes{ref: ref}
}

func (r ResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ResourcesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

func (r ResourcesAttributes) Exec() terra.ListValue[ExecAttributes] {
	return terra.ReferenceAsList[ExecAttributes](r.ref.Append("exec"))
}

func (r ResourcesAttributes) File() terra.ListValue[ResourcesFileAttributes] {
	return terra.ReferenceAsList[ResourcesFileAttributes](r.ref.Append("file"))
}

func (r ResourcesAttributes) Pkg() terra.ListValue[PkgAttributes] {
	return terra.ReferenceAsList[PkgAttributes](r.ref.Append("pkg"))
}

func (r ResourcesAttributes) Repository() terra.ListValue[RepositoryAttributes] {
	return terra.ReferenceAsList[RepositoryAttributes](r.ref.Append("repository"))
}

type ExecAttributes struct {
	ref terra.Reference
}

func (e ExecAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ExecAttributes) InternalWithRef(ref terra.Reference) ExecAttributes {
	return ExecAttributes{ref: ref}
}

func (e ExecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ExecAttributes) Enforce() terra.ListValue[EnforceAttributes] {
	return terra.ReferenceAsList[EnforceAttributes](e.ref.Append("enforce"))
}

func (e ExecAttributes) Validate() terra.ListValue[ValidateAttributes] {
	return terra.ReferenceAsList[ValidateAttributes](e.ref.Append("validate"))
}

type EnforceAttributes struct {
	ref terra.Reference
}

func (e EnforceAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EnforceAttributes) InternalWithRef(ref terra.Reference) EnforceAttributes {
	return EnforceAttributes{ref: ref}
}

func (e EnforceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EnforceAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("args"))
}

func (e EnforceAttributes) Interpreter() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("interpreter"))
}

func (e EnforceAttributes) OutputFilePath() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("output_file_path"))
}

func (e EnforceAttributes) Script() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("script"))
}

func (e EnforceAttributes) File() terra.ListValue[EnforceFileAttributes] {
	return terra.ReferenceAsList[EnforceFileAttributes](e.ref.Append("file"))
}

type EnforceFileAttributes struct {
	ref terra.Reference
}

func (f EnforceFileAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f EnforceFileAttributes) InternalWithRef(ref terra.Reference) EnforceFileAttributes {
	return EnforceFileAttributes{ref: ref}
}

func (f EnforceFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f EnforceFileAttributes) AllowInsecure() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("allow_insecure"))
}

func (f EnforceFileAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("local_path"))
}

func (f EnforceFileAttributes) Gcs() terra.ListValue[EnforceFileGcsAttributes] {
	return terra.ReferenceAsList[EnforceFileGcsAttributes](f.ref.Append("gcs"))
}

func (f EnforceFileAttributes) Remote() terra.ListValue[EnforceFileRemoteAttributes] {
	return terra.ReferenceAsList[EnforceFileRemoteAttributes](f.ref.Append("remote"))
}

type EnforceFileGcsAttributes struct {
	ref terra.Reference
}

func (g EnforceFileGcsAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g EnforceFileGcsAttributes) InternalWithRef(ref terra.Reference) EnforceFileGcsAttributes {
	return EnforceFileGcsAttributes{ref: ref}
}

func (g EnforceFileGcsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g EnforceFileGcsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("bucket"))
}

func (g EnforceFileGcsAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("generation"))
}

func (g EnforceFileGcsAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("object"))
}

type EnforceFileRemoteAttributes struct {
	ref terra.Reference
}

func (r EnforceFileRemoteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r EnforceFileRemoteAttributes) InternalWithRef(ref terra.Reference) EnforceFileRemoteAttributes {
	return EnforceFileRemoteAttributes{ref: ref}
}

func (r EnforceFileRemoteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r EnforceFileRemoteAttributes) Sha256Checksum() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("sha256_checksum"))
}

func (r EnforceFileRemoteAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("uri"))
}

type ValidateAttributes struct {
	ref terra.Reference
}

func (v ValidateAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ValidateAttributes) InternalWithRef(ref terra.Reference) ValidateAttributes {
	return ValidateAttributes{ref: ref}
}

func (v ValidateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ValidateAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("args"))
}

func (v ValidateAttributes) Interpreter() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("interpreter"))
}

func (v ValidateAttributes) OutputFilePath() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("output_file_path"))
}

func (v ValidateAttributes) Script() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("script"))
}

func (v ValidateAttributes) File() terra.ListValue[ValidateFileAttributes] {
	return terra.ReferenceAsList[ValidateFileAttributes](v.ref.Append("file"))
}

type ValidateFileAttributes struct {
	ref terra.Reference
}

func (f ValidateFileAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f ValidateFileAttributes) InternalWithRef(ref terra.Reference) ValidateFileAttributes {
	return ValidateFileAttributes{ref: ref}
}

func (f ValidateFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f ValidateFileAttributes) AllowInsecure() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("allow_insecure"))
}

func (f ValidateFileAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("local_path"))
}

func (f ValidateFileAttributes) Gcs() terra.ListValue[ValidateFileGcsAttributes] {
	return terra.ReferenceAsList[ValidateFileGcsAttributes](f.ref.Append("gcs"))
}

func (f ValidateFileAttributes) Remote() terra.ListValue[ValidateFileRemoteAttributes] {
	return terra.ReferenceAsList[ValidateFileRemoteAttributes](f.ref.Append("remote"))
}

type ValidateFileGcsAttributes struct {
	ref terra.Reference
}

func (g ValidateFileGcsAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g ValidateFileGcsAttributes) InternalWithRef(ref terra.Reference) ValidateFileGcsAttributes {
	return ValidateFileGcsAttributes{ref: ref}
}

func (g ValidateFileGcsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g ValidateFileGcsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("bucket"))
}

func (g ValidateFileGcsAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("generation"))
}

func (g ValidateFileGcsAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("object"))
}

type ValidateFileRemoteAttributes struct {
	ref terra.Reference
}

func (r ValidateFileRemoteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ValidateFileRemoteAttributes) InternalWithRef(ref terra.Reference) ValidateFileRemoteAttributes {
	return ValidateFileRemoteAttributes{ref: ref}
}

func (r ValidateFileRemoteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ValidateFileRemoteAttributes) Sha256Checksum() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("sha256_checksum"))
}

func (r ValidateFileRemoteAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("uri"))
}

type ResourcesFileAttributes struct {
	ref terra.Reference
}

func (f ResourcesFileAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f ResourcesFileAttributes) InternalWithRef(ref terra.Reference) ResourcesFileAttributes {
	return ResourcesFileAttributes{ref: ref}
}

func (f ResourcesFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f ResourcesFileAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("content"))
}

func (f ResourcesFileAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("path"))
}

func (f ResourcesFileAttributes) Permissions() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("permissions"))
}

func (f ResourcesFileAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("state"))
}

func (f ResourcesFileAttributes) File() terra.ListValue[FileFileAttributes] {
	return terra.ReferenceAsList[FileFileAttributes](f.ref.Append("file"))
}

type FileFileAttributes struct {
	ref terra.Reference
}

func (f FileFileAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FileFileAttributes) InternalWithRef(ref terra.Reference) FileFileAttributes {
	return FileFileAttributes{ref: ref}
}

func (f FileFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FileFileAttributes) AllowInsecure() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("allow_insecure"))
}

func (f FileFileAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("local_path"))
}

func (f FileFileAttributes) Gcs() terra.ListValue[FileFileGcsAttributes] {
	return terra.ReferenceAsList[FileFileGcsAttributes](f.ref.Append("gcs"))
}

func (f FileFileAttributes) Remote() terra.ListValue[FileFileRemoteAttributes] {
	return terra.ReferenceAsList[FileFileRemoteAttributes](f.ref.Append("remote"))
}

type FileFileGcsAttributes struct {
	ref terra.Reference
}

func (g FileFileGcsAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g FileFileGcsAttributes) InternalWithRef(ref terra.Reference) FileFileGcsAttributes {
	return FileFileGcsAttributes{ref: ref}
}

func (g FileFileGcsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g FileFileGcsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("bucket"))
}

func (g FileFileGcsAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("generation"))
}

func (g FileFileGcsAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("object"))
}

type FileFileRemoteAttributes struct {
	ref terra.Reference
}

func (r FileFileRemoteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r FileFileRemoteAttributes) InternalWithRef(ref terra.Reference) FileFileRemoteAttributes {
	return FileFileRemoteAttributes{ref: ref}
}

func (r FileFileRemoteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r FileFileRemoteAttributes) Sha256Checksum() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("sha256_checksum"))
}

func (r FileFileRemoteAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("uri"))
}

type PkgAttributes struct {
	ref terra.Reference
}

func (p PkgAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PkgAttributes) InternalWithRef(ref terra.Reference) PkgAttributes {
	return PkgAttributes{ref: ref}
}

func (p PkgAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PkgAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("desired_state"))
}

func (p PkgAttributes) Apt() terra.ListValue[PkgAptAttributes] {
	return terra.ReferenceAsList[PkgAptAttributes](p.ref.Append("apt"))
}

func (p PkgAttributes) Deb() terra.ListValue[DebAttributes] {
	return terra.ReferenceAsList[DebAttributes](p.ref.Append("deb"))
}

func (p PkgAttributes) Googet() terra.ListValue[GoogetAttributes] {
	return terra.ReferenceAsList[GoogetAttributes](p.ref.Append("googet"))
}

func (p PkgAttributes) Msi() terra.ListValue[MsiAttributes] {
	return terra.ReferenceAsList[MsiAttributes](p.ref.Append("msi"))
}

func (p PkgAttributes) Rpm() terra.ListValue[RpmAttributes] {
	return terra.ReferenceAsList[RpmAttributes](p.ref.Append("rpm"))
}

func (p PkgAttributes) Yum() terra.ListValue[PkgYumAttributes] {
	return terra.ReferenceAsList[PkgYumAttributes](p.ref.Append("yum"))
}

func (p PkgAttributes) Zypper() terra.ListValue[PkgZypperAttributes] {
	return terra.ReferenceAsList[PkgZypperAttributes](p.ref.Append("zypper"))
}

type PkgAptAttributes struct {
	ref terra.Reference
}

func (a PkgAptAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a PkgAptAttributes) InternalWithRef(ref terra.Reference) PkgAptAttributes {
	return PkgAptAttributes{ref: ref}
}

func (a PkgAptAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a PkgAptAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

type DebAttributes struct {
	ref terra.Reference
}

func (d DebAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DebAttributes) InternalWithRef(ref terra.Reference) DebAttributes {
	return DebAttributes{ref: ref}
}

func (d DebAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DebAttributes) PullDeps() terra.BoolValue {
	return terra.ReferenceAsBool(d.ref.Append("pull_deps"))
}

func (d DebAttributes) Source() terra.ListValue[DebSourceAttributes] {
	return terra.ReferenceAsList[DebSourceAttributes](d.ref.Append("source"))
}

type DebSourceAttributes struct {
	ref terra.Reference
}

func (s DebSourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DebSourceAttributes) InternalWithRef(ref terra.Reference) DebSourceAttributes {
	return DebSourceAttributes{ref: ref}
}

func (s DebSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DebSourceAttributes) AllowInsecure() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("allow_insecure"))
}

func (s DebSourceAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("local_path"))
}

func (s DebSourceAttributes) Gcs() terra.ListValue[DebSourceGcsAttributes] {
	return terra.ReferenceAsList[DebSourceGcsAttributes](s.ref.Append("gcs"))
}

func (s DebSourceAttributes) Remote() terra.ListValue[DebSourceRemoteAttributes] {
	return terra.ReferenceAsList[DebSourceRemoteAttributes](s.ref.Append("remote"))
}

type DebSourceGcsAttributes struct {
	ref terra.Reference
}

func (g DebSourceGcsAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g DebSourceGcsAttributes) InternalWithRef(ref terra.Reference) DebSourceGcsAttributes {
	return DebSourceGcsAttributes{ref: ref}
}

func (g DebSourceGcsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g DebSourceGcsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("bucket"))
}

func (g DebSourceGcsAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("generation"))
}

func (g DebSourceGcsAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("object"))
}

type DebSourceRemoteAttributes struct {
	ref terra.Reference
}

func (r DebSourceRemoteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DebSourceRemoteAttributes) InternalWithRef(ref terra.Reference) DebSourceRemoteAttributes {
	return DebSourceRemoteAttributes{ref: ref}
}

func (r DebSourceRemoteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DebSourceRemoteAttributes) Sha256Checksum() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("sha256_checksum"))
}

func (r DebSourceRemoteAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("uri"))
}

type GoogetAttributes struct {
	ref terra.Reference
}

func (g GoogetAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GoogetAttributes) InternalWithRef(ref terra.Reference) GoogetAttributes {
	return GoogetAttributes{ref: ref}
}

func (g GoogetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GoogetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("name"))
}

type MsiAttributes struct {
	ref terra.Reference
}

func (m MsiAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MsiAttributes) InternalWithRef(ref terra.Reference) MsiAttributes {
	return MsiAttributes{ref: ref}
}

func (m MsiAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MsiAttributes) Properties() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("properties"))
}

func (m MsiAttributes) Source() terra.ListValue[MsiSourceAttributes] {
	return terra.ReferenceAsList[MsiSourceAttributes](m.ref.Append("source"))
}

type MsiSourceAttributes struct {
	ref terra.Reference
}

func (s MsiSourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s MsiSourceAttributes) InternalWithRef(ref terra.Reference) MsiSourceAttributes {
	return MsiSourceAttributes{ref: ref}
}

func (s MsiSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s MsiSourceAttributes) AllowInsecure() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("allow_insecure"))
}

func (s MsiSourceAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("local_path"))
}

func (s MsiSourceAttributes) Gcs() terra.ListValue[MsiSourceGcsAttributes] {
	return terra.ReferenceAsList[MsiSourceGcsAttributes](s.ref.Append("gcs"))
}

func (s MsiSourceAttributes) Remote() terra.ListValue[MsiSourceRemoteAttributes] {
	return terra.ReferenceAsList[MsiSourceRemoteAttributes](s.ref.Append("remote"))
}

type MsiSourceGcsAttributes struct {
	ref terra.Reference
}

func (g MsiSourceGcsAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g MsiSourceGcsAttributes) InternalWithRef(ref terra.Reference) MsiSourceGcsAttributes {
	return MsiSourceGcsAttributes{ref: ref}
}

func (g MsiSourceGcsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g MsiSourceGcsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("bucket"))
}

func (g MsiSourceGcsAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("generation"))
}

func (g MsiSourceGcsAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("object"))
}

type MsiSourceRemoteAttributes struct {
	ref terra.Reference
}

func (r MsiSourceRemoteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r MsiSourceRemoteAttributes) InternalWithRef(ref terra.Reference) MsiSourceRemoteAttributes {
	return MsiSourceRemoteAttributes{ref: ref}
}

func (r MsiSourceRemoteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r MsiSourceRemoteAttributes) Sha256Checksum() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("sha256_checksum"))
}

func (r MsiSourceRemoteAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("uri"))
}

type RpmAttributes struct {
	ref terra.Reference
}

func (r RpmAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RpmAttributes) InternalWithRef(ref terra.Reference) RpmAttributes {
	return RpmAttributes{ref: ref}
}

func (r RpmAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RpmAttributes) PullDeps() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("pull_deps"))
}

func (r RpmAttributes) Source() terra.ListValue[RpmSourceAttributes] {
	return terra.ReferenceAsList[RpmSourceAttributes](r.ref.Append("source"))
}

type RpmSourceAttributes struct {
	ref terra.Reference
}

func (s RpmSourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s RpmSourceAttributes) InternalWithRef(ref terra.Reference) RpmSourceAttributes {
	return RpmSourceAttributes{ref: ref}
}

func (s RpmSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s RpmSourceAttributes) AllowInsecure() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("allow_insecure"))
}

func (s RpmSourceAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("local_path"))
}

func (s RpmSourceAttributes) Gcs() terra.ListValue[RpmSourceGcsAttributes] {
	return terra.ReferenceAsList[RpmSourceGcsAttributes](s.ref.Append("gcs"))
}

func (s RpmSourceAttributes) Remote() terra.ListValue[RpmSourceRemoteAttributes] {
	return terra.ReferenceAsList[RpmSourceRemoteAttributes](s.ref.Append("remote"))
}

type RpmSourceGcsAttributes struct {
	ref terra.Reference
}

func (g RpmSourceGcsAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g RpmSourceGcsAttributes) InternalWithRef(ref terra.Reference) RpmSourceGcsAttributes {
	return RpmSourceGcsAttributes{ref: ref}
}

func (g RpmSourceGcsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g RpmSourceGcsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("bucket"))
}

func (g RpmSourceGcsAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("generation"))
}

func (g RpmSourceGcsAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("object"))
}

type RpmSourceRemoteAttributes struct {
	ref terra.Reference
}

func (r RpmSourceRemoteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RpmSourceRemoteAttributes) InternalWithRef(ref terra.Reference) RpmSourceRemoteAttributes {
	return RpmSourceRemoteAttributes{ref: ref}
}

func (r RpmSourceRemoteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RpmSourceRemoteAttributes) Sha256Checksum() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("sha256_checksum"))
}

func (r RpmSourceRemoteAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("uri"))
}

type PkgYumAttributes struct {
	ref terra.Reference
}

func (y PkgYumAttributes) InternalRef() (terra.Reference, error) {
	return y.ref, nil
}

func (y PkgYumAttributes) InternalWithRef(ref terra.Reference) PkgYumAttributes {
	return PkgYumAttributes{ref: ref}
}

func (y PkgYumAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return y.ref.InternalTokens()
}

func (y PkgYumAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(y.ref.Append("name"))
}

type PkgZypperAttributes struct {
	ref terra.Reference
}

func (z PkgZypperAttributes) InternalRef() (terra.Reference, error) {
	return z.ref, nil
}

func (z PkgZypperAttributes) InternalWithRef(ref terra.Reference) PkgZypperAttributes {
	return PkgZypperAttributes{ref: ref}
}

func (z PkgZypperAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return z.ref.InternalTokens()
}

func (z PkgZypperAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(z.ref.Append("name"))
}

type RepositoryAttributes struct {
	ref terra.Reference
}

func (r RepositoryAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RepositoryAttributes) InternalWithRef(ref terra.Reference) RepositoryAttributes {
	return RepositoryAttributes{ref: ref}
}

func (r RepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RepositoryAttributes) Apt() terra.ListValue[RepositoryAptAttributes] {
	return terra.ReferenceAsList[RepositoryAptAttributes](r.ref.Append("apt"))
}

func (r RepositoryAttributes) Goo() terra.ListValue[GooAttributes] {
	return terra.ReferenceAsList[GooAttributes](r.ref.Append("goo"))
}

func (r RepositoryAttributes) Yum() terra.ListValue[RepositoryYumAttributes] {
	return terra.ReferenceAsList[RepositoryYumAttributes](r.ref.Append("yum"))
}

func (r RepositoryAttributes) Zypper() terra.ListValue[RepositoryZypperAttributes] {
	return terra.ReferenceAsList[RepositoryZypperAttributes](r.ref.Append("zypper"))
}

type RepositoryAptAttributes struct {
	ref terra.Reference
}

func (a RepositoryAptAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a RepositoryAptAttributes) InternalWithRef(ref terra.Reference) RepositoryAptAttributes {
	return RepositoryAptAttributes{ref: ref}
}

func (a RepositoryAptAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a RepositoryAptAttributes) ArchiveType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("archive_type"))
}

func (a RepositoryAptAttributes) Components() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("components"))
}

func (a RepositoryAptAttributes) Distribution() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("distribution"))
}

func (a RepositoryAptAttributes) GpgKey() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("gpg_key"))
}

func (a RepositoryAptAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("uri"))
}

type GooAttributes struct {
	ref terra.Reference
}

func (g GooAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GooAttributes) InternalWithRef(ref terra.Reference) GooAttributes {
	return GooAttributes{ref: ref}
}

func (g GooAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GooAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("name"))
}

func (g GooAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("url"))
}

type RepositoryYumAttributes struct {
	ref terra.Reference
}

func (y RepositoryYumAttributes) InternalRef() (terra.Reference, error) {
	return y.ref, nil
}

func (y RepositoryYumAttributes) InternalWithRef(ref terra.Reference) RepositoryYumAttributes {
	return RepositoryYumAttributes{ref: ref}
}

func (y RepositoryYumAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return y.ref.InternalTokens()
}

func (y RepositoryYumAttributes) BaseUrl() terra.StringValue {
	return terra.ReferenceAsString(y.ref.Append("base_url"))
}

func (y RepositoryYumAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(y.ref.Append("display_name"))
}

func (y RepositoryYumAttributes) GpgKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](y.ref.Append("gpg_keys"))
}

func (y RepositoryYumAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(y.ref.Append("id"))
}

type RepositoryZypperAttributes struct {
	ref terra.Reference
}

func (z RepositoryZypperAttributes) InternalRef() (terra.Reference, error) {
	return z.ref, nil
}

func (z RepositoryZypperAttributes) InternalWithRef(ref terra.Reference) RepositoryZypperAttributes {
	return RepositoryZypperAttributes{ref: ref}
}

func (z RepositoryZypperAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return z.ref.InternalTokens()
}

func (z RepositoryZypperAttributes) BaseUrl() terra.StringValue {
	return terra.ReferenceAsString(z.ref.Append("base_url"))
}

func (z RepositoryZypperAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(z.ref.Append("display_name"))
}

func (z RepositoryZypperAttributes) GpgKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](z.ref.Append("gpg_keys"))
}

func (z RepositoryZypperAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(z.ref.Append("id"))
}

type RolloutAttributes struct {
	ref terra.Reference
}

func (r RolloutAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RolloutAttributes) InternalWithRef(ref terra.Reference) RolloutAttributes {
	return RolloutAttributes{ref: ref}
}

func (r RolloutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RolloutAttributes) MinWaitDuration() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("min_wait_duration"))
}

func (r RolloutAttributes) DisruptionBudget() terra.ListValue[DisruptionBudgetAttributes] {
	return terra.ReferenceAsList[DisruptionBudgetAttributes](r.ref.Append("disruption_budget"))
}

type DisruptionBudgetAttributes struct {
	ref terra.Reference
}

func (db DisruptionBudgetAttributes) InternalRef() (terra.Reference, error) {
	return db.ref, nil
}

func (db DisruptionBudgetAttributes) InternalWithRef(ref terra.Reference) DisruptionBudgetAttributes {
	return DisruptionBudgetAttributes{ref: ref}
}

func (db DisruptionBudgetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return db.ref.InternalTokens()
}

func (db DisruptionBudgetAttributes) Fixed() terra.NumberValue {
	return terra.ReferenceAsNumber(db.ref.Append("fixed"))
}

func (db DisruptionBudgetAttributes) Percent() terra.NumberValue {
	return terra.ReferenceAsNumber(db.ref.Append("percent"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type InstanceFilterState struct {
	All             bool                   `json:"all"`
	ExclusionLabels []ExclusionLabelsState `json:"exclusion_labels"`
	InclusionLabels []InclusionLabelsState `json:"inclusion_labels"`
	Inventories     []InventoriesState     `json:"inventories"`
}

type ExclusionLabelsState struct {
	Labels map[string]string `json:"labels"`
}

type InclusionLabelsState struct {
	Labels map[string]string `json:"labels"`
}

type InventoriesState struct {
	OsShortName string `json:"os_short_name"`
	OsVersion   string `json:"os_version"`
}

type OsPoliciesState struct {
	AllowNoResourceGroupMatch bool                  `json:"allow_no_resource_group_match"`
	Description               string                `json:"description"`
	Id                        string                `json:"id"`
	Mode                      string                `json:"mode"`
	ResourceGroups            []ResourceGroupsState `json:"resource_groups"`
}

type ResourceGroupsState struct {
	InventoryFilters []InventoryFiltersState `json:"inventory_filters"`
	Resources        []ResourcesState        `json:"resources"`
}

type InventoryFiltersState struct {
	OsShortName string `json:"os_short_name"`
	OsVersion   string `json:"os_version"`
}

type ResourcesState struct {
	Id         string               `json:"id"`
	Exec       []ExecState          `json:"exec"`
	File       []ResourcesFileState `json:"file"`
	Pkg        []PkgState           `json:"pkg"`
	Repository []RepositoryState    `json:"repository"`
}

type ExecState struct {
	Enforce  []EnforceState  `json:"enforce"`
	Validate []ValidateState `json:"validate"`
}

type EnforceState struct {
	Args           []string           `json:"args"`
	Interpreter    string             `json:"interpreter"`
	OutputFilePath string             `json:"output_file_path"`
	Script         string             `json:"script"`
	File           []EnforceFileState `json:"file"`
}

type EnforceFileState struct {
	AllowInsecure bool                     `json:"allow_insecure"`
	LocalPath     string                   `json:"local_path"`
	Gcs           []EnforceFileGcsState    `json:"gcs"`
	Remote        []EnforceFileRemoteState `json:"remote"`
}

type EnforceFileGcsState struct {
	Bucket     string  `json:"bucket"`
	Generation float64 `json:"generation"`
	Object     string  `json:"object"`
}

type EnforceFileRemoteState struct {
	Sha256Checksum string `json:"sha256_checksum"`
	Uri            string `json:"uri"`
}

type ValidateState struct {
	Args           []string            `json:"args"`
	Interpreter    string              `json:"interpreter"`
	OutputFilePath string              `json:"output_file_path"`
	Script         string              `json:"script"`
	File           []ValidateFileState `json:"file"`
}

type ValidateFileState struct {
	AllowInsecure bool                      `json:"allow_insecure"`
	LocalPath     string                    `json:"local_path"`
	Gcs           []ValidateFileGcsState    `json:"gcs"`
	Remote        []ValidateFileRemoteState `json:"remote"`
}

type ValidateFileGcsState struct {
	Bucket     string  `json:"bucket"`
	Generation float64 `json:"generation"`
	Object     string  `json:"object"`
}

type ValidateFileRemoteState struct {
	Sha256Checksum string `json:"sha256_checksum"`
	Uri            string `json:"uri"`
}

type ResourcesFileState struct {
	Content     string          `json:"content"`
	Path        string          `json:"path"`
	Permissions string          `json:"permissions"`
	State       string          `json:"state"`
	File        []FileFileState `json:"file"`
}

type FileFileState struct {
	AllowInsecure bool                  `json:"allow_insecure"`
	LocalPath     string                `json:"local_path"`
	Gcs           []FileFileGcsState    `json:"gcs"`
	Remote        []FileFileRemoteState `json:"remote"`
}

type FileFileGcsState struct {
	Bucket     string  `json:"bucket"`
	Generation float64 `json:"generation"`
	Object     string  `json:"object"`
}

type FileFileRemoteState struct {
	Sha256Checksum string `json:"sha256_checksum"`
	Uri            string `json:"uri"`
}

type PkgState struct {
	DesiredState string           `json:"desired_state"`
	Apt          []PkgAptState    `json:"apt"`
	Deb          []DebState       `json:"deb"`
	Googet       []GoogetState    `json:"googet"`
	Msi          []MsiState       `json:"msi"`
	Rpm          []RpmState       `json:"rpm"`
	Yum          []PkgYumState    `json:"yum"`
	Zypper       []PkgZypperState `json:"zypper"`
}

type PkgAptState struct {
	Name string `json:"name"`
}

type DebState struct {
	PullDeps bool             `json:"pull_deps"`
	Source   []DebSourceState `json:"source"`
}

type DebSourceState struct {
	AllowInsecure bool                   `json:"allow_insecure"`
	LocalPath     string                 `json:"local_path"`
	Gcs           []DebSourceGcsState    `json:"gcs"`
	Remote        []DebSourceRemoteState `json:"remote"`
}

type DebSourceGcsState struct {
	Bucket     string  `json:"bucket"`
	Generation float64 `json:"generation"`
	Object     string  `json:"object"`
}

type DebSourceRemoteState struct {
	Sha256Checksum string `json:"sha256_checksum"`
	Uri            string `json:"uri"`
}

type GoogetState struct {
	Name string `json:"name"`
}

type MsiState struct {
	Properties []string         `json:"properties"`
	Source     []MsiSourceState `json:"source"`
}

type MsiSourceState struct {
	AllowInsecure bool                   `json:"allow_insecure"`
	LocalPath     string                 `json:"local_path"`
	Gcs           []MsiSourceGcsState    `json:"gcs"`
	Remote        []MsiSourceRemoteState `json:"remote"`
}

type MsiSourceGcsState struct {
	Bucket     string  `json:"bucket"`
	Generation float64 `json:"generation"`
	Object     string  `json:"object"`
}

type MsiSourceRemoteState struct {
	Sha256Checksum string `json:"sha256_checksum"`
	Uri            string `json:"uri"`
}

type RpmState struct {
	PullDeps bool             `json:"pull_deps"`
	Source   []RpmSourceState `json:"source"`
}

type RpmSourceState struct {
	AllowInsecure bool                   `json:"allow_insecure"`
	LocalPath     string                 `json:"local_path"`
	Gcs           []RpmSourceGcsState    `json:"gcs"`
	Remote        []RpmSourceRemoteState `json:"remote"`
}

type RpmSourceGcsState struct {
	Bucket     string  `json:"bucket"`
	Generation float64 `json:"generation"`
	Object     string  `json:"object"`
}

type RpmSourceRemoteState struct {
	Sha256Checksum string `json:"sha256_checksum"`
	Uri            string `json:"uri"`
}

type PkgYumState struct {
	Name string `json:"name"`
}

type PkgZypperState struct {
	Name string `json:"name"`
}

type RepositoryState struct {
	Apt    []RepositoryAptState    `json:"apt"`
	Goo    []GooState              `json:"goo"`
	Yum    []RepositoryYumState    `json:"yum"`
	Zypper []RepositoryZypperState `json:"zypper"`
}

type RepositoryAptState struct {
	ArchiveType  string   `json:"archive_type"`
	Components   []string `json:"components"`
	Distribution string   `json:"distribution"`
	GpgKey       string   `json:"gpg_key"`
	Uri          string   `json:"uri"`
}

type GooState struct {
	Name string `json:"name"`
	Url  string `json:"url"`
}

type RepositoryYumState struct {
	BaseUrl     string   `json:"base_url"`
	DisplayName string   `json:"display_name"`
	GpgKeys     []string `json:"gpg_keys"`
	Id          string   `json:"id"`
}

type RepositoryZypperState struct {
	BaseUrl     string   `json:"base_url"`
	DisplayName string   `json:"display_name"`
	GpgKeys     []string `json:"gpg_keys"`
	Id          string   `json:"id"`
}

type RolloutState struct {
	MinWaitDuration  string                  `json:"min_wait_duration"`
	DisruptionBudget []DisruptionBudgetState `json:"disruption_budget"`
}

type DisruptionBudgetState struct {
	Fixed   float64 `json:"fixed"`
	Percent float64 `json:"percent"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
