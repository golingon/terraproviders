// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datafilestoreinstance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type FileShares struct {
	// NfsExportOptions: min=0
	NfsExportOptions []NfsExportOptions `hcl:"nfs_export_options,block" validate:"min=0"`
}

type NfsExportOptions struct{}

type Networks struct{}

type FileSharesAttributes struct {
	ref terra.Reference
}

func (fs FileSharesAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs FileSharesAttributes) InternalWithRef(ref terra.Reference) FileSharesAttributes {
	return FileSharesAttributes{ref: ref}
}

func (fs FileSharesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs FileSharesAttributes) CapacityGb() terra.NumberValue {
	return terra.ReferenceAsNumber(fs.ref.Append("capacity_gb"))
}

func (fs FileSharesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("name"))
}

func (fs FileSharesAttributes) SourceBackup() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("source_backup"))
}

func (fs FileSharesAttributes) NfsExportOptions() terra.ListValue[NfsExportOptionsAttributes] {
	return terra.ReferenceAsList[NfsExportOptionsAttributes](fs.ref.Append("nfs_export_options"))
}

type NfsExportOptionsAttributes struct {
	ref terra.Reference
}

func (neo NfsExportOptionsAttributes) InternalRef() (terra.Reference, error) {
	return neo.ref, nil
}

func (neo NfsExportOptionsAttributes) InternalWithRef(ref terra.Reference) NfsExportOptionsAttributes {
	return NfsExportOptionsAttributes{ref: ref}
}

func (neo NfsExportOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return neo.ref.InternalTokens()
}

func (neo NfsExportOptionsAttributes) AccessMode() terra.StringValue {
	return terra.ReferenceAsString(neo.ref.Append("access_mode"))
}

func (neo NfsExportOptionsAttributes) AnonGid() terra.NumberValue {
	return terra.ReferenceAsNumber(neo.ref.Append("anon_gid"))
}

func (neo NfsExportOptionsAttributes) AnonUid() terra.NumberValue {
	return terra.ReferenceAsNumber(neo.ref.Append("anon_uid"))
}

func (neo NfsExportOptionsAttributes) IpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](neo.ref.Append("ip_ranges"))
}

func (neo NfsExportOptionsAttributes) SquashMode() terra.StringValue {
	return terra.ReferenceAsString(neo.ref.Append("squash_mode"))
}

type NetworksAttributes struct {
	ref terra.Reference
}

func (n NetworksAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NetworksAttributes) InternalWithRef(ref terra.Reference) NetworksAttributes {
	return NetworksAttributes{ref: ref}
}

func (n NetworksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NetworksAttributes) ConnectMode() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("connect_mode"))
}

func (n NetworksAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("ip_addresses"))
}

func (n NetworksAttributes) Modes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("modes"))
}

func (n NetworksAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("network"))
}

func (n NetworksAttributes) ReservedIpRange() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("reserved_ip_range"))
}

type FileSharesState struct {
	CapacityGb       float64                 `json:"capacity_gb"`
	Name             string                  `json:"name"`
	SourceBackup     string                  `json:"source_backup"`
	NfsExportOptions []NfsExportOptionsState `json:"nfs_export_options"`
}

type NfsExportOptionsState struct {
	AccessMode string   `json:"access_mode"`
	AnonGid    float64  `json:"anon_gid"`
	AnonUid    float64  `json:"anon_uid"`
	IpRanges   []string `json:"ip_ranges"`
	SquashMode string   `json:"squash_mode"`
}

type NetworksState struct {
	ConnectMode     string   `json:"connect_mode"`
	IpAddresses     []string `json:"ip_addresses"`
	Modes           []string `json:"modes"`
	Network         string   `json:"network"`
	ReservedIpRange string   `json:"reserved_ip_range"`
}
