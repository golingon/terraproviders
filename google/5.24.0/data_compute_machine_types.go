// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google

import (
	"github.com/golingon/lingon/pkg/terra"
	datacomputemachinetypes "github.com/golingon/terraproviders/google/5.24.0/datacomputemachinetypes"
)

// NewDataComputeMachineTypes creates a new instance of [DataComputeMachineTypes].
func NewDataComputeMachineTypes(name string, args DataComputeMachineTypesArgs) *DataComputeMachineTypes {
	return &DataComputeMachineTypes{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataComputeMachineTypes)(nil)

// DataComputeMachineTypes represents the Terraform data resource google_compute_machine_types.
type DataComputeMachineTypes struct {
	Name string
	Args DataComputeMachineTypesArgs
}

// DataSource returns the Terraform object type for [DataComputeMachineTypes].
func (cmt *DataComputeMachineTypes) DataSource() string {
	return "google_compute_machine_types"
}

// LocalName returns the local name for [DataComputeMachineTypes].
func (cmt *DataComputeMachineTypes) LocalName() string {
	return cmt.Name
}

// Configuration returns the configuration (args) for [DataComputeMachineTypes].
func (cmt *DataComputeMachineTypes) Configuration() interface{} {
	return cmt.Args
}

// Attributes returns the attributes for [DataComputeMachineTypes].
func (cmt *DataComputeMachineTypes) Attributes() dataComputeMachineTypesAttributes {
	return dataComputeMachineTypesAttributes{ref: terra.ReferenceDataResource(cmt)}
}

// DataComputeMachineTypesArgs contains the configurations for google_compute_machine_types.
type DataComputeMachineTypesArgs struct {
	// Filter: string, optional
	Filter terra.StringValue `hcl:"filter,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// MachineTypes: min=0
	MachineTypes []datacomputemachinetypes.MachineTypes `hcl:"machine_types,block" validate:"min=0"`
}
type dataComputeMachineTypesAttributes struct {
	ref terra.Reference
}

// Filter returns a reference to field filter of google_compute_machine_types.
func (cmt dataComputeMachineTypesAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(cmt.ref.Append("filter"))
}

// Id returns a reference to field id of google_compute_machine_types.
func (cmt dataComputeMachineTypesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cmt.ref.Append("id"))
}

// Project returns a reference to field project of google_compute_machine_types.
func (cmt dataComputeMachineTypesAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(cmt.ref.Append("project"))
}

// Zone returns a reference to field zone of google_compute_machine_types.
func (cmt dataComputeMachineTypesAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(cmt.ref.Append("zone"))
}

func (cmt dataComputeMachineTypesAttributes) MachineTypes() terra.ListValue[datacomputemachinetypes.MachineTypesAttributes] {
	return terra.ReferenceAsList[datacomputemachinetypes.MachineTypesAttributes](cmt.ref.Append("machine_types"))
}
