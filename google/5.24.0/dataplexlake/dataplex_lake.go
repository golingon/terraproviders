// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dataplexlake

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AssetStatus struct{}

type MetastoreStatus struct{}

type Metastore struct {
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AssetStatusAttributes struct {
	ref terra.Reference
}

func (as AssetStatusAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AssetStatusAttributes) InternalWithRef(ref terra.Reference) AssetStatusAttributes {
	return AssetStatusAttributes{ref: ref}
}

func (as AssetStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AssetStatusAttributes) ActiveAssets() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("active_assets"))
}

func (as AssetStatusAttributes) SecurityPolicyApplyingAssets() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("security_policy_applying_assets"))
}

func (as AssetStatusAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("update_time"))
}

type MetastoreStatusAttributes struct {
	ref terra.Reference
}

func (ms MetastoreStatusAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms MetastoreStatusAttributes) InternalWithRef(ref terra.Reference) MetastoreStatusAttributes {
	return MetastoreStatusAttributes{ref: ref}
}

func (ms MetastoreStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms MetastoreStatusAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("endpoint"))
}

func (ms MetastoreStatusAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("message"))
}

func (ms MetastoreStatusAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("state"))
}

func (ms MetastoreStatusAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("update_time"))
}

type MetastoreAttributes struct {
	ref terra.Reference
}

func (m MetastoreAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MetastoreAttributes) InternalWithRef(ref terra.Reference) MetastoreAttributes {
	return MetastoreAttributes{ref: ref}
}

func (m MetastoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MetastoreAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("service"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AssetStatusState struct {
	ActiveAssets                 float64 `json:"active_assets"`
	SecurityPolicyApplyingAssets float64 `json:"security_policy_applying_assets"`
	UpdateTime                   string  `json:"update_time"`
}

type MetastoreStatusState struct {
	Endpoint   string `json:"endpoint"`
	Message    string `json:"message"`
	State      string `json:"state"`
	UpdateTime string `json:"update_time"`
}

type MetastoreState struct {
	Service string `json:"service"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
