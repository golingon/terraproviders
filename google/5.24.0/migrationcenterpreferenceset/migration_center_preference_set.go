// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package migrationcenterpreferenceset

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VirtualMachinePreferences struct {
	// CommitmentPlan: string, optional
	CommitmentPlan terra.StringValue `hcl:"commitment_plan,attr"`
	// SizingOptimizationStrategy: string, optional
	SizingOptimizationStrategy terra.StringValue `hcl:"sizing_optimization_strategy,attr"`
	// TargetProduct: string, optional
	TargetProduct terra.StringValue `hcl:"target_product,attr"`
	// ComputeEnginePreferences: optional
	ComputeEnginePreferences *ComputeEnginePreferences `hcl:"compute_engine_preferences,block"`
	// RegionPreferences: optional
	RegionPreferences *RegionPreferences `hcl:"region_preferences,block"`
	// SoleTenancyPreferences: optional
	SoleTenancyPreferences *SoleTenancyPreferences `hcl:"sole_tenancy_preferences,block"`
	// VmwareEnginePreferences: optional
	VmwareEnginePreferences *VmwareEnginePreferences `hcl:"vmware_engine_preferences,block"`
}

type ComputeEnginePreferences struct {
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// MachinePreferences: optional
	MachinePreferences *MachinePreferences `hcl:"machine_preferences,block"`
}

type MachinePreferences struct {
	// AllowedMachineSeries: min=0
	AllowedMachineSeries []AllowedMachineSeries `hcl:"allowed_machine_series,block" validate:"min=0"`
}

type AllowedMachineSeries struct {
	// Code: string, optional
	Code terra.StringValue `hcl:"code,attr"`
}

type RegionPreferences struct {
	// PreferredRegions: list of string, optional
	PreferredRegions terra.ListValue[terra.StringValue] `hcl:"preferred_regions,attr"`
}

type SoleTenancyPreferences struct {
	// CommitmentPlan: string, optional
	CommitmentPlan terra.StringValue `hcl:"commitment_plan,attr"`
	// CpuOvercommitRatio: number, optional
	CpuOvercommitRatio terra.NumberValue `hcl:"cpu_overcommit_ratio,attr"`
	// HostMaintenancePolicy: string, optional
	HostMaintenancePolicy terra.StringValue `hcl:"host_maintenance_policy,attr"`
	// NodeTypes: min=0
	NodeTypes []NodeTypes `hcl:"node_types,block" validate:"min=0"`
}

type NodeTypes struct {
	// NodeName: string, optional
	NodeName terra.StringValue `hcl:"node_name,attr"`
}

type VmwareEnginePreferences struct {
	// CommitmentPlan: string, optional
	CommitmentPlan terra.StringValue `hcl:"commitment_plan,attr"`
	// CpuOvercommitRatio: number, optional
	CpuOvercommitRatio terra.NumberValue `hcl:"cpu_overcommit_ratio,attr"`
	// MemoryOvercommitRatio: number, optional
	MemoryOvercommitRatio terra.NumberValue `hcl:"memory_overcommit_ratio,attr"`
	// StorageDeduplicationCompressionRatio: number, optional
	StorageDeduplicationCompressionRatio terra.NumberValue `hcl:"storage_deduplication_compression_ratio,attr"`
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VirtualMachinePreferencesAttributes struct {
	ref terra.Reference
}

func (vmp VirtualMachinePreferencesAttributes) InternalRef() (terra.Reference, error) {
	return vmp.ref, nil
}

func (vmp VirtualMachinePreferencesAttributes) InternalWithRef(ref terra.Reference) VirtualMachinePreferencesAttributes {
	return VirtualMachinePreferencesAttributes{ref: ref}
}

func (vmp VirtualMachinePreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vmp.ref.InternalTokens()
}

func (vmp VirtualMachinePreferencesAttributes) CommitmentPlan() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("commitment_plan"))
}

func (vmp VirtualMachinePreferencesAttributes) SizingOptimizationStrategy() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("sizing_optimization_strategy"))
}

func (vmp VirtualMachinePreferencesAttributes) TargetProduct() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("target_product"))
}

func (vmp VirtualMachinePreferencesAttributes) ComputeEnginePreferences() terra.ListValue[ComputeEnginePreferencesAttributes] {
	return terra.ReferenceAsList[ComputeEnginePreferencesAttributes](vmp.ref.Append("compute_engine_preferences"))
}

func (vmp VirtualMachinePreferencesAttributes) RegionPreferences() terra.ListValue[RegionPreferencesAttributes] {
	return terra.ReferenceAsList[RegionPreferencesAttributes](vmp.ref.Append("region_preferences"))
}

func (vmp VirtualMachinePreferencesAttributes) SoleTenancyPreferences() terra.ListValue[SoleTenancyPreferencesAttributes] {
	return terra.ReferenceAsList[SoleTenancyPreferencesAttributes](vmp.ref.Append("sole_tenancy_preferences"))
}

func (vmp VirtualMachinePreferencesAttributes) VmwareEnginePreferences() terra.ListValue[VmwareEnginePreferencesAttributes] {
	return terra.ReferenceAsList[VmwareEnginePreferencesAttributes](vmp.ref.Append("vmware_engine_preferences"))
}

type ComputeEnginePreferencesAttributes struct {
	ref terra.Reference
}

func (cep ComputeEnginePreferencesAttributes) InternalRef() (terra.Reference, error) {
	return cep.ref, nil
}

func (cep ComputeEnginePreferencesAttributes) InternalWithRef(ref terra.Reference) ComputeEnginePreferencesAttributes {
	return ComputeEnginePreferencesAttributes{ref: ref}
}

func (cep ComputeEnginePreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cep.ref.InternalTokens()
}

func (cep ComputeEnginePreferencesAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceAsString(cep.ref.Append("license_type"))
}

func (cep ComputeEnginePreferencesAttributes) MachinePreferences() terra.ListValue[MachinePreferencesAttributes] {
	return terra.ReferenceAsList[MachinePreferencesAttributes](cep.ref.Append("machine_preferences"))
}

type MachinePreferencesAttributes struct {
	ref terra.Reference
}

func (mp MachinePreferencesAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp MachinePreferencesAttributes) InternalWithRef(ref terra.Reference) MachinePreferencesAttributes {
	return MachinePreferencesAttributes{ref: ref}
}

func (mp MachinePreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp MachinePreferencesAttributes) AllowedMachineSeries() terra.ListValue[AllowedMachineSeriesAttributes] {
	return terra.ReferenceAsList[AllowedMachineSeriesAttributes](mp.ref.Append("allowed_machine_series"))
}

type AllowedMachineSeriesAttributes struct {
	ref terra.Reference
}

func (ams AllowedMachineSeriesAttributes) InternalRef() (terra.Reference, error) {
	return ams.ref, nil
}

func (ams AllowedMachineSeriesAttributes) InternalWithRef(ref terra.Reference) AllowedMachineSeriesAttributes {
	return AllowedMachineSeriesAttributes{ref: ref}
}

func (ams AllowedMachineSeriesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ams.ref.InternalTokens()
}

func (ams AllowedMachineSeriesAttributes) Code() terra.StringValue {
	return terra.ReferenceAsString(ams.ref.Append("code"))
}

type RegionPreferencesAttributes struct {
	ref terra.Reference
}

func (rp RegionPreferencesAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RegionPreferencesAttributes) InternalWithRef(ref terra.Reference) RegionPreferencesAttributes {
	return RegionPreferencesAttributes{ref: ref}
}

func (rp RegionPreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RegionPreferencesAttributes) PreferredRegions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rp.ref.Append("preferred_regions"))
}

type SoleTenancyPreferencesAttributes struct {
	ref terra.Reference
}

func (stp SoleTenancyPreferencesAttributes) InternalRef() (terra.Reference, error) {
	return stp.ref, nil
}

func (stp SoleTenancyPreferencesAttributes) InternalWithRef(ref terra.Reference) SoleTenancyPreferencesAttributes {
	return SoleTenancyPreferencesAttributes{ref: ref}
}

func (stp SoleTenancyPreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return stp.ref.InternalTokens()
}

func (stp SoleTenancyPreferencesAttributes) CommitmentPlan() terra.StringValue {
	return terra.ReferenceAsString(stp.ref.Append("commitment_plan"))
}

func (stp SoleTenancyPreferencesAttributes) CpuOvercommitRatio() terra.NumberValue {
	return terra.ReferenceAsNumber(stp.ref.Append("cpu_overcommit_ratio"))
}

func (stp SoleTenancyPreferencesAttributes) HostMaintenancePolicy() terra.StringValue {
	return terra.ReferenceAsString(stp.ref.Append("host_maintenance_policy"))
}

func (stp SoleTenancyPreferencesAttributes) NodeTypes() terra.ListValue[NodeTypesAttributes] {
	return terra.ReferenceAsList[NodeTypesAttributes](stp.ref.Append("node_types"))
}

type NodeTypesAttributes struct {
	ref terra.Reference
}

func (nt NodeTypesAttributes) InternalRef() (terra.Reference, error) {
	return nt.ref, nil
}

func (nt NodeTypesAttributes) InternalWithRef(ref terra.Reference) NodeTypesAttributes {
	return NodeTypesAttributes{ref: ref}
}

func (nt NodeTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nt.ref.InternalTokens()
}

func (nt NodeTypesAttributes) NodeName() terra.StringValue {
	return terra.ReferenceAsString(nt.ref.Append("node_name"))
}

type VmwareEnginePreferencesAttributes struct {
	ref terra.Reference
}

func (vep VmwareEnginePreferencesAttributes) InternalRef() (terra.Reference, error) {
	return vep.ref, nil
}

func (vep VmwareEnginePreferencesAttributes) InternalWithRef(ref terra.Reference) VmwareEnginePreferencesAttributes {
	return VmwareEnginePreferencesAttributes{ref: ref}
}

func (vep VmwareEnginePreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vep.ref.InternalTokens()
}

func (vep VmwareEnginePreferencesAttributes) CommitmentPlan() terra.StringValue {
	return terra.ReferenceAsString(vep.ref.Append("commitment_plan"))
}

func (vep VmwareEnginePreferencesAttributes) CpuOvercommitRatio() terra.NumberValue {
	return terra.ReferenceAsNumber(vep.ref.Append("cpu_overcommit_ratio"))
}

func (vep VmwareEnginePreferencesAttributes) MemoryOvercommitRatio() terra.NumberValue {
	return terra.ReferenceAsNumber(vep.ref.Append("memory_overcommit_ratio"))
}

func (vep VmwareEnginePreferencesAttributes) StorageDeduplicationCompressionRatio() terra.NumberValue {
	return terra.ReferenceAsNumber(vep.ref.Append("storage_deduplication_compression_ratio"))
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VirtualMachinePreferencesState struct {
	CommitmentPlan             string                          `json:"commitment_plan"`
	SizingOptimizationStrategy string                          `json:"sizing_optimization_strategy"`
	TargetProduct              string                          `json:"target_product"`
	ComputeEnginePreferences   []ComputeEnginePreferencesState `json:"compute_engine_preferences"`
	RegionPreferences          []RegionPreferencesState        `json:"region_preferences"`
	SoleTenancyPreferences     []SoleTenancyPreferencesState   `json:"sole_tenancy_preferences"`
	VmwareEnginePreferences    []VmwareEnginePreferencesState  `json:"vmware_engine_preferences"`
}

type ComputeEnginePreferencesState struct {
	LicenseType        string                    `json:"license_type"`
	MachinePreferences []MachinePreferencesState `json:"machine_preferences"`
}

type MachinePreferencesState struct {
	AllowedMachineSeries []AllowedMachineSeriesState `json:"allowed_machine_series"`
}

type AllowedMachineSeriesState struct {
	Code string `json:"code"`
}

type RegionPreferencesState struct {
	PreferredRegions []string `json:"preferred_regions"`
}

type SoleTenancyPreferencesState struct {
	CommitmentPlan        string           `json:"commitment_plan"`
	CpuOvercommitRatio    float64          `json:"cpu_overcommit_ratio"`
	HostMaintenancePolicy string           `json:"host_maintenance_policy"`
	NodeTypes             []NodeTypesState `json:"node_types"`
}

type NodeTypesState struct {
	NodeName string `json:"node_name"`
}

type VmwareEnginePreferencesState struct {
	CommitmentPlan                       string  `json:"commitment_plan"`
	CpuOvercommitRatio                   float64 `json:"cpu_overcommit_ratio"`
	MemoryOvercommitRatio                float64 `json:"memory_overcommit_ratio"`
	StorageDeduplicationCompressionRatio float64 `json:"storage_deduplication_compression_ratio"`
}
