// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dataplexdatascan

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ExecutionStatus struct{}

type Data struct {
	// Entity: string, optional
	Entity terra.StringValue `hcl:"entity,attr"`
	// Resource: string, optional
	Resource terra.StringValue `hcl:"resource,attr"`
}

type DataProfileSpec struct {
	// RowFilter: string, optional
	RowFilter terra.StringValue `hcl:"row_filter,attr"`
	// SamplingPercent: number, optional
	SamplingPercent terra.NumberValue `hcl:"sampling_percent,attr"`
	// ExcludeFields: optional
	ExcludeFields *ExcludeFields `hcl:"exclude_fields,block"`
	// IncludeFields: optional
	IncludeFields *IncludeFields `hcl:"include_fields,block"`
	// DataProfileSpecPostScanActions: optional
	PostScanActions *DataProfileSpecPostScanActions `hcl:"post_scan_actions,block"`
}

type ExcludeFields struct {
	// FieldNames: list of string, optional
	FieldNames terra.ListValue[terra.StringValue] `hcl:"field_names,attr"`
}

type IncludeFields struct {
	// FieldNames: list of string, optional
	FieldNames terra.ListValue[terra.StringValue] `hcl:"field_names,attr"`
}

type DataProfileSpecPostScanActions struct {
	// DataProfileSpecPostScanActionsBigqueryExport: optional
	BigqueryExport *DataProfileSpecPostScanActionsBigqueryExport `hcl:"bigquery_export,block"`
}

type DataProfileSpecPostScanActionsBigqueryExport struct {
	// ResultsTable: string, optional
	ResultsTable terra.StringValue `hcl:"results_table,attr"`
}

type DataQualitySpec struct {
	// RowFilter: string, optional
	RowFilter terra.StringValue `hcl:"row_filter,attr"`
	// SamplingPercent: number, optional
	SamplingPercent terra.NumberValue `hcl:"sampling_percent,attr"`
	// DataQualitySpecPostScanActions: optional
	PostScanActions *DataQualitySpecPostScanActions `hcl:"post_scan_actions,block"`
	// Rules: min=0
	Rules []Rules `hcl:"rules,block" validate:"min=0"`
}

type DataQualitySpecPostScanActions struct {
	// DataQualitySpecPostScanActionsBigqueryExport: optional
	BigqueryExport *DataQualitySpecPostScanActionsBigqueryExport `hcl:"bigquery_export,block"`
}

type DataQualitySpecPostScanActionsBigqueryExport struct {
	// ResultsTable: string, optional
	ResultsTable terra.StringValue `hcl:"results_table,attr"`
}

type Rules struct {
	// Column: string, optional
	Column terra.StringValue `hcl:"column,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Dimension: string, required
	Dimension terra.StringValue `hcl:"dimension,attr" validate:"required"`
	// IgnoreNull: bool, optional
	IgnoreNull terra.BoolValue `hcl:"ignore_null,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Threshold: number, optional
	Threshold terra.NumberValue `hcl:"threshold,attr"`
	// NonNullExpectation: optional
	NonNullExpectation *NonNullExpectation `hcl:"non_null_expectation,block"`
	// RangeExpectation: optional
	RangeExpectation *RangeExpectation `hcl:"range_expectation,block"`
	// RegexExpectation: optional
	RegexExpectation *RegexExpectation `hcl:"regex_expectation,block"`
	// RowConditionExpectation: optional
	RowConditionExpectation *RowConditionExpectation `hcl:"row_condition_expectation,block"`
	// SetExpectation: optional
	SetExpectation *SetExpectation `hcl:"set_expectation,block"`
	// StatisticRangeExpectation: optional
	StatisticRangeExpectation *StatisticRangeExpectation `hcl:"statistic_range_expectation,block"`
	// TableConditionExpectation: optional
	TableConditionExpectation *TableConditionExpectation `hcl:"table_condition_expectation,block"`
	// UniquenessExpectation: optional
	UniquenessExpectation *UniquenessExpectation `hcl:"uniqueness_expectation,block"`
}

type NonNullExpectation struct{}

type RangeExpectation struct {
	// MaxValue: string, optional
	MaxValue terra.StringValue `hcl:"max_value,attr"`
	// MinValue: string, optional
	MinValue terra.StringValue `hcl:"min_value,attr"`
	// StrictMaxEnabled: bool, optional
	StrictMaxEnabled terra.BoolValue `hcl:"strict_max_enabled,attr"`
	// StrictMinEnabled: bool, optional
	StrictMinEnabled terra.BoolValue `hcl:"strict_min_enabled,attr"`
}

type RegexExpectation struct {
	// Regex: string, required
	Regex terra.StringValue `hcl:"regex,attr" validate:"required"`
}

type RowConditionExpectation struct {
	// SqlExpression: string, required
	SqlExpression terra.StringValue `hcl:"sql_expression,attr" validate:"required"`
}

type SetExpectation struct {
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type StatisticRangeExpectation struct {
	// MaxValue: string, optional
	MaxValue terra.StringValue `hcl:"max_value,attr"`
	// MinValue: string, optional
	MinValue terra.StringValue `hcl:"min_value,attr"`
	// Statistic: string, required
	Statistic terra.StringValue `hcl:"statistic,attr" validate:"required"`
	// StrictMaxEnabled: bool, optional
	StrictMaxEnabled terra.BoolValue `hcl:"strict_max_enabled,attr"`
	// StrictMinEnabled: bool, optional
	StrictMinEnabled terra.BoolValue `hcl:"strict_min_enabled,attr"`
}

type TableConditionExpectation struct {
	// SqlExpression: string, required
	SqlExpression terra.StringValue `hcl:"sql_expression,attr" validate:"required"`
}

type UniquenessExpectation struct{}

type ExecutionSpec struct {
	// Field: string, optional
	Field terra.StringValue `hcl:"field,attr"`
	// Trigger: required
	Trigger *Trigger `hcl:"trigger,block" validate:"required"`
}

type Trigger struct {
	// OnDemand: optional
	OnDemand *OnDemand `hcl:"on_demand,block"`
	// Schedule: optional
	Schedule *Schedule `hcl:"schedule,block"`
}

type OnDemand struct{}

type Schedule struct {
	// Cron: string, required
	Cron terra.StringValue `hcl:"cron,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ExecutionStatusAttributes struct {
	ref terra.Reference
}

func (es ExecutionStatusAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es ExecutionStatusAttributes) InternalWithRef(ref terra.Reference) ExecutionStatusAttributes {
	return ExecutionStatusAttributes{ref: ref}
}

func (es ExecutionStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es ExecutionStatusAttributes) LatestJobEndTime() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("latest_job_end_time"))
}

func (es ExecutionStatusAttributes) LatestJobStartTime() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("latest_job_start_time"))
}

type DataAttributes struct {
	ref terra.Reference
}

func (d DataAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DataAttributes) InternalWithRef(ref terra.Reference) DataAttributes {
	return DataAttributes{ref: ref}
}

func (d DataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DataAttributes) Entity() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("entity"))
}

func (d DataAttributes) Resource() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("resource"))
}

type DataProfileSpecAttributes struct {
	ref terra.Reference
}

func (dps DataProfileSpecAttributes) InternalRef() (terra.Reference, error) {
	return dps.ref, nil
}

func (dps DataProfileSpecAttributes) InternalWithRef(ref terra.Reference) DataProfileSpecAttributes {
	return DataProfileSpecAttributes{ref: ref}
}

func (dps DataProfileSpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dps.ref.InternalTokens()
}

func (dps DataProfileSpecAttributes) RowFilter() terra.StringValue {
	return terra.ReferenceAsString(dps.ref.Append("row_filter"))
}

func (dps DataProfileSpecAttributes) SamplingPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(dps.ref.Append("sampling_percent"))
}

func (dps DataProfileSpecAttributes) ExcludeFields() terra.ListValue[ExcludeFieldsAttributes] {
	return terra.ReferenceAsList[ExcludeFieldsAttributes](dps.ref.Append("exclude_fields"))
}

func (dps DataProfileSpecAttributes) IncludeFields() terra.ListValue[IncludeFieldsAttributes] {
	return terra.ReferenceAsList[IncludeFieldsAttributes](dps.ref.Append("include_fields"))
}

func (dps DataProfileSpecAttributes) PostScanActions() terra.ListValue[DataProfileSpecPostScanActionsAttributes] {
	return terra.ReferenceAsList[DataProfileSpecPostScanActionsAttributes](dps.ref.Append("post_scan_actions"))
}

type ExcludeFieldsAttributes struct {
	ref terra.Reference
}

func (ef ExcludeFieldsAttributes) InternalRef() (terra.Reference, error) {
	return ef.ref, nil
}

func (ef ExcludeFieldsAttributes) InternalWithRef(ref terra.Reference) ExcludeFieldsAttributes {
	return ExcludeFieldsAttributes{ref: ref}
}

func (ef ExcludeFieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ef.ref.InternalTokens()
}

func (ef ExcludeFieldsAttributes) FieldNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ef.ref.Append("field_names"))
}

type IncludeFieldsAttributes struct {
	ref terra.Reference
}

func (_if IncludeFieldsAttributes) InternalRef() (terra.Reference, error) {
	return _if.ref, nil
}

func (_if IncludeFieldsAttributes) InternalWithRef(ref terra.Reference) IncludeFieldsAttributes {
	return IncludeFieldsAttributes{ref: ref}
}

func (_if IncludeFieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _if.ref.InternalTokens()
}

func (_if IncludeFieldsAttributes) FieldNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](_if.ref.Append("field_names"))
}

type DataProfileSpecPostScanActionsAttributes struct {
	ref terra.Reference
}

func (psa DataProfileSpecPostScanActionsAttributes) InternalRef() (terra.Reference, error) {
	return psa.ref, nil
}

func (psa DataProfileSpecPostScanActionsAttributes) InternalWithRef(ref terra.Reference) DataProfileSpecPostScanActionsAttributes {
	return DataProfileSpecPostScanActionsAttributes{ref: ref}
}

func (psa DataProfileSpecPostScanActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return psa.ref.InternalTokens()
}

func (psa DataProfileSpecPostScanActionsAttributes) BigqueryExport() terra.ListValue[DataProfileSpecPostScanActionsBigqueryExportAttributes] {
	return terra.ReferenceAsList[DataProfileSpecPostScanActionsBigqueryExportAttributes](psa.ref.Append("bigquery_export"))
}

type DataProfileSpecPostScanActionsBigqueryExportAttributes struct {
	ref terra.Reference
}

func (be DataProfileSpecPostScanActionsBigqueryExportAttributes) InternalRef() (terra.Reference, error) {
	return be.ref, nil
}

func (be DataProfileSpecPostScanActionsBigqueryExportAttributes) InternalWithRef(ref terra.Reference) DataProfileSpecPostScanActionsBigqueryExportAttributes {
	return DataProfileSpecPostScanActionsBigqueryExportAttributes{ref: ref}
}

func (be DataProfileSpecPostScanActionsBigqueryExportAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return be.ref.InternalTokens()
}

func (be DataProfileSpecPostScanActionsBigqueryExportAttributes) ResultsTable() terra.StringValue {
	return terra.ReferenceAsString(be.ref.Append("results_table"))
}

type DataQualitySpecAttributes struct {
	ref terra.Reference
}

func (dqs DataQualitySpecAttributes) InternalRef() (terra.Reference, error) {
	return dqs.ref, nil
}

func (dqs DataQualitySpecAttributes) InternalWithRef(ref terra.Reference) DataQualitySpecAttributes {
	return DataQualitySpecAttributes{ref: ref}
}

func (dqs DataQualitySpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dqs.ref.InternalTokens()
}

func (dqs DataQualitySpecAttributes) RowFilter() terra.StringValue {
	return terra.ReferenceAsString(dqs.ref.Append("row_filter"))
}

func (dqs DataQualitySpecAttributes) SamplingPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(dqs.ref.Append("sampling_percent"))
}

func (dqs DataQualitySpecAttributes) PostScanActions() terra.ListValue[DataQualitySpecPostScanActionsAttributes] {
	return terra.ReferenceAsList[DataQualitySpecPostScanActionsAttributes](dqs.ref.Append("post_scan_actions"))
}

func (dqs DataQualitySpecAttributes) Rules() terra.ListValue[RulesAttributes] {
	return terra.ReferenceAsList[RulesAttributes](dqs.ref.Append("rules"))
}

type DataQualitySpecPostScanActionsAttributes struct {
	ref terra.Reference
}

func (psa DataQualitySpecPostScanActionsAttributes) InternalRef() (terra.Reference, error) {
	return psa.ref, nil
}

func (psa DataQualitySpecPostScanActionsAttributes) InternalWithRef(ref terra.Reference) DataQualitySpecPostScanActionsAttributes {
	return DataQualitySpecPostScanActionsAttributes{ref: ref}
}

func (psa DataQualitySpecPostScanActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return psa.ref.InternalTokens()
}

func (psa DataQualitySpecPostScanActionsAttributes) BigqueryExport() terra.ListValue[DataQualitySpecPostScanActionsBigqueryExportAttributes] {
	return terra.ReferenceAsList[DataQualitySpecPostScanActionsBigqueryExportAttributes](psa.ref.Append("bigquery_export"))
}

type DataQualitySpecPostScanActionsBigqueryExportAttributes struct {
	ref terra.Reference
}

func (be DataQualitySpecPostScanActionsBigqueryExportAttributes) InternalRef() (terra.Reference, error) {
	return be.ref, nil
}

func (be DataQualitySpecPostScanActionsBigqueryExportAttributes) InternalWithRef(ref terra.Reference) DataQualitySpecPostScanActionsBigqueryExportAttributes {
	return DataQualitySpecPostScanActionsBigqueryExportAttributes{ref: ref}
}

func (be DataQualitySpecPostScanActionsBigqueryExportAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return be.ref.InternalTokens()
}

func (be DataQualitySpecPostScanActionsBigqueryExportAttributes) ResultsTable() terra.StringValue {
	return terra.ReferenceAsString(be.ref.Append("results_table"))
}

type RulesAttributes struct {
	ref terra.Reference
}

func (r RulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RulesAttributes) InternalWithRef(ref terra.Reference) RulesAttributes {
	return RulesAttributes{ref: ref}
}

func (r RulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RulesAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("column"))
}

func (r RulesAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("description"))
}

func (r RulesAttributes) Dimension() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("dimension"))
}

func (r RulesAttributes) IgnoreNull() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("ignore_null"))
}

func (r RulesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

func (r RulesAttributes) Threshold() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("threshold"))
}

func (r RulesAttributes) NonNullExpectation() terra.ListValue[NonNullExpectationAttributes] {
	return terra.ReferenceAsList[NonNullExpectationAttributes](r.ref.Append("non_null_expectation"))
}

func (r RulesAttributes) RangeExpectation() terra.ListValue[RangeExpectationAttributes] {
	return terra.ReferenceAsList[RangeExpectationAttributes](r.ref.Append("range_expectation"))
}

func (r RulesAttributes) RegexExpectation() terra.ListValue[RegexExpectationAttributes] {
	return terra.ReferenceAsList[RegexExpectationAttributes](r.ref.Append("regex_expectation"))
}

func (r RulesAttributes) RowConditionExpectation() terra.ListValue[RowConditionExpectationAttributes] {
	return terra.ReferenceAsList[RowConditionExpectationAttributes](r.ref.Append("row_condition_expectation"))
}

func (r RulesAttributes) SetExpectation() terra.ListValue[SetExpectationAttributes] {
	return terra.ReferenceAsList[SetExpectationAttributes](r.ref.Append("set_expectation"))
}

func (r RulesAttributes) StatisticRangeExpectation() terra.ListValue[StatisticRangeExpectationAttributes] {
	return terra.ReferenceAsList[StatisticRangeExpectationAttributes](r.ref.Append("statistic_range_expectation"))
}

func (r RulesAttributes) TableConditionExpectation() terra.ListValue[TableConditionExpectationAttributes] {
	return terra.ReferenceAsList[TableConditionExpectationAttributes](r.ref.Append("table_condition_expectation"))
}

func (r RulesAttributes) UniquenessExpectation() terra.ListValue[UniquenessExpectationAttributes] {
	return terra.ReferenceAsList[UniquenessExpectationAttributes](r.ref.Append("uniqueness_expectation"))
}

type NonNullExpectationAttributes struct {
	ref terra.Reference
}

func (nne NonNullExpectationAttributes) InternalRef() (terra.Reference, error) {
	return nne.ref, nil
}

func (nne NonNullExpectationAttributes) InternalWithRef(ref terra.Reference) NonNullExpectationAttributes {
	return NonNullExpectationAttributes{ref: ref}
}

func (nne NonNullExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nne.ref.InternalTokens()
}

type RangeExpectationAttributes struct {
	ref terra.Reference
}

func (re RangeExpectationAttributes) InternalRef() (terra.Reference, error) {
	return re.ref, nil
}

func (re RangeExpectationAttributes) InternalWithRef(ref terra.Reference) RangeExpectationAttributes {
	return RangeExpectationAttributes{ref: ref}
}

func (re RangeExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return re.ref.InternalTokens()
}

func (re RangeExpectationAttributes) MaxValue() terra.StringValue {
	return terra.ReferenceAsString(re.ref.Append("max_value"))
}

func (re RangeExpectationAttributes) MinValue() terra.StringValue {
	return terra.ReferenceAsString(re.ref.Append("min_value"))
}

func (re RangeExpectationAttributes) StrictMaxEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(re.ref.Append("strict_max_enabled"))
}

func (re RangeExpectationAttributes) StrictMinEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(re.ref.Append("strict_min_enabled"))
}

type RegexExpectationAttributes struct {
	ref terra.Reference
}

func (re RegexExpectationAttributes) InternalRef() (terra.Reference, error) {
	return re.ref, nil
}

func (re RegexExpectationAttributes) InternalWithRef(ref terra.Reference) RegexExpectationAttributes {
	return RegexExpectationAttributes{ref: ref}
}

func (re RegexExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return re.ref.InternalTokens()
}

func (re RegexExpectationAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(re.ref.Append("regex"))
}

type RowConditionExpectationAttributes struct {
	ref terra.Reference
}

func (rce RowConditionExpectationAttributes) InternalRef() (terra.Reference, error) {
	return rce.ref, nil
}

func (rce RowConditionExpectationAttributes) InternalWithRef(ref terra.Reference) RowConditionExpectationAttributes {
	return RowConditionExpectationAttributes{ref: ref}
}

func (rce RowConditionExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rce.ref.InternalTokens()
}

func (rce RowConditionExpectationAttributes) SqlExpression() terra.StringValue {
	return terra.ReferenceAsString(rce.ref.Append("sql_expression"))
}

type SetExpectationAttributes struct {
	ref terra.Reference
}

func (se SetExpectationAttributes) InternalRef() (terra.Reference, error) {
	return se.ref, nil
}

func (se SetExpectationAttributes) InternalWithRef(ref terra.Reference) SetExpectationAttributes {
	return SetExpectationAttributes{ref: ref}
}

func (se SetExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return se.ref.InternalTokens()
}

func (se SetExpectationAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](se.ref.Append("values"))
}

type StatisticRangeExpectationAttributes struct {
	ref terra.Reference
}

func (sre StatisticRangeExpectationAttributes) InternalRef() (terra.Reference, error) {
	return sre.ref, nil
}

func (sre StatisticRangeExpectationAttributes) InternalWithRef(ref terra.Reference) StatisticRangeExpectationAttributes {
	return StatisticRangeExpectationAttributes{ref: ref}
}

func (sre StatisticRangeExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sre.ref.InternalTokens()
}

func (sre StatisticRangeExpectationAttributes) MaxValue() terra.StringValue {
	return terra.ReferenceAsString(sre.ref.Append("max_value"))
}

func (sre StatisticRangeExpectationAttributes) MinValue() terra.StringValue {
	return terra.ReferenceAsString(sre.ref.Append("min_value"))
}

func (sre StatisticRangeExpectationAttributes) Statistic() terra.StringValue {
	return terra.ReferenceAsString(sre.ref.Append("statistic"))
}

func (sre StatisticRangeExpectationAttributes) StrictMaxEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sre.ref.Append("strict_max_enabled"))
}

func (sre StatisticRangeExpectationAttributes) StrictMinEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sre.ref.Append("strict_min_enabled"))
}

type TableConditionExpectationAttributes struct {
	ref terra.Reference
}

func (tce TableConditionExpectationAttributes) InternalRef() (terra.Reference, error) {
	return tce.ref, nil
}

func (tce TableConditionExpectationAttributes) InternalWithRef(ref terra.Reference) TableConditionExpectationAttributes {
	return TableConditionExpectationAttributes{ref: ref}
}

func (tce TableConditionExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tce.ref.InternalTokens()
}

func (tce TableConditionExpectationAttributes) SqlExpression() terra.StringValue {
	return terra.ReferenceAsString(tce.ref.Append("sql_expression"))
}

type UniquenessExpectationAttributes struct {
	ref terra.Reference
}

func (ue UniquenessExpectationAttributes) InternalRef() (terra.Reference, error) {
	return ue.ref, nil
}

func (ue UniquenessExpectationAttributes) InternalWithRef(ref terra.Reference) UniquenessExpectationAttributes {
	return UniquenessExpectationAttributes{ref: ref}
}

func (ue UniquenessExpectationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ue.ref.InternalTokens()
}

type ExecutionSpecAttributes struct {
	ref terra.Reference
}

func (es ExecutionSpecAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es ExecutionSpecAttributes) InternalWithRef(ref terra.Reference) ExecutionSpecAttributes {
	return ExecutionSpecAttributes{ref: ref}
}

func (es ExecutionSpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es ExecutionSpecAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("field"))
}

func (es ExecutionSpecAttributes) Trigger() terra.ListValue[TriggerAttributes] {
	return terra.ReferenceAsList[TriggerAttributes](es.ref.Append("trigger"))
}

type TriggerAttributes struct {
	ref terra.Reference
}

func (t TriggerAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TriggerAttributes) InternalWithRef(ref terra.Reference) TriggerAttributes {
	return TriggerAttributes{ref: ref}
}

func (t TriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TriggerAttributes) OnDemand() terra.ListValue[OnDemandAttributes] {
	return terra.ReferenceAsList[OnDemandAttributes](t.ref.Append("on_demand"))
}

func (t TriggerAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](t.ref.Append("schedule"))
}

type OnDemandAttributes struct {
	ref terra.Reference
}

func (od OnDemandAttributes) InternalRef() (terra.Reference, error) {
	return od.ref, nil
}

func (od OnDemandAttributes) InternalWithRef(ref terra.Reference) OnDemandAttributes {
	return OnDemandAttributes{ref: ref}
}

func (od OnDemandAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return od.ref.InternalTokens()
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) Cron() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("cron"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ExecutionStatusState struct {
	LatestJobEndTime   string `json:"latest_job_end_time"`
	LatestJobStartTime string `json:"latest_job_start_time"`
}

type DataState struct {
	Entity   string `json:"entity"`
	Resource string `json:"resource"`
}

type DataProfileSpecState struct {
	RowFilter       string                                `json:"row_filter"`
	SamplingPercent float64                               `json:"sampling_percent"`
	ExcludeFields   []ExcludeFieldsState                  `json:"exclude_fields"`
	IncludeFields   []IncludeFieldsState                  `json:"include_fields"`
	PostScanActions []DataProfileSpecPostScanActionsState `json:"post_scan_actions"`
}

type ExcludeFieldsState struct {
	FieldNames []string `json:"field_names"`
}

type IncludeFieldsState struct {
	FieldNames []string `json:"field_names"`
}

type DataProfileSpecPostScanActionsState struct {
	BigqueryExport []DataProfileSpecPostScanActionsBigqueryExportState `json:"bigquery_export"`
}

type DataProfileSpecPostScanActionsBigqueryExportState struct {
	ResultsTable string `json:"results_table"`
}

type DataQualitySpecState struct {
	RowFilter       string                                `json:"row_filter"`
	SamplingPercent float64                               `json:"sampling_percent"`
	PostScanActions []DataQualitySpecPostScanActionsState `json:"post_scan_actions"`
	Rules           []RulesState                          `json:"rules"`
}

type DataQualitySpecPostScanActionsState struct {
	BigqueryExport []DataQualitySpecPostScanActionsBigqueryExportState `json:"bigquery_export"`
}

type DataQualitySpecPostScanActionsBigqueryExportState struct {
	ResultsTable string `json:"results_table"`
}

type RulesState struct {
	Column                    string                           `json:"column"`
	Description               string                           `json:"description"`
	Dimension                 string                           `json:"dimension"`
	IgnoreNull                bool                             `json:"ignore_null"`
	Name                      string                           `json:"name"`
	Threshold                 float64                          `json:"threshold"`
	NonNullExpectation        []NonNullExpectationState        `json:"non_null_expectation"`
	RangeExpectation          []RangeExpectationState          `json:"range_expectation"`
	RegexExpectation          []RegexExpectationState          `json:"regex_expectation"`
	RowConditionExpectation   []RowConditionExpectationState   `json:"row_condition_expectation"`
	SetExpectation            []SetExpectationState            `json:"set_expectation"`
	StatisticRangeExpectation []StatisticRangeExpectationState `json:"statistic_range_expectation"`
	TableConditionExpectation []TableConditionExpectationState `json:"table_condition_expectation"`
	UniquenessExpectation     []UniquenessExpectationState     `json:"uniqueness_expectation"`
}

type NonNullExpectationState struct{}

type RangeExpectationState struct {
	MaxValue         string `json:"max_value"`
	MinValue         string `json:"min_value"`
	StrictMaxEnabled bool   `json:"strict_max_enabled"`
	StrictMinEnabled bool   `json:"strict_min_enabled"`
}

type RegexExpectationState struct {
	Regex string `json:"regex"`
}

type RowConditionExpectationState struct {
	SqlExpression string `json:"sql_expression"`
}

type SetExpectationState struct {
	Values []string `json:"values"`
}

type StatisticRangeExpectationState struct {
	MaxValue         string `json:"max_value"`
	MinValue         string `json:"min_value"`
	Statistic        string `json:"statistic"`
	StrictMaxEnabled bool   `json:"strict_max_enabled"`
	StrictMinEnabled bool   `json:"strict_min_enabled"`
}

type TableConditionExpectationState struct {
	SqlExpression string `json:"sql_expression"`
}

type UniquenessExpectationState struct{}

type ExecutionSpecState struct {
	Field   string         `json:"field"`
	Trigger []TriggerState `json:"trigger"`
}

type TriggerState struct {
	OnDemand []OnDemandState `json:"on_demand"`
	Schedule []ScheduleState `json:"schedule"`
}

type OnDemandState struct{}

type ScheduleState struct {
	Cron string `json:"cron"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
