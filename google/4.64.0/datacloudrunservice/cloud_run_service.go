// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datacloudrunservice

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Metadata struct{}

type Status struct {
	// Conditions: min=0
	Conditions []Conditions `hcl:"conditions,block" validate:"min=0"`
}

type Conditions struct{}

type Template struct {
	// TemplateMetadata: min=0
	Metadata []TemplateMetadata `hcl:"metadata,block" validate:"min=0"`
	// Spec: min=0
	Spec []Spec `hcl:"spec,block" validate:"min=0"`
}

type TemplateMetadata struct{}

type Spec struct {
	// Containers: min=0
	Containers []Containers `hcl:"containers,block" validate:"min=0"`
	// Volumes: min=0
	Volumes []Volumes `hcl:"volumes,block" validate:"min=0"`
}

type Containers struct {
	// Env: min=0
	Env []Env `hcl:"env,block" validate:"min=0"`
	// EnvFrom: min=0
	EnvFrom []EnvFrom `hcl:"env_from,block" validate:"min=0"`
	// LivenessProbe: min=0
	LivenessProbe []LivenessProbe `hcl:"liveness_probe,block" validate:"min=0"`
	// Ports: min=0
	Ports []Ports `hcl:"ports,block" validate:"min=0"`
	// Resources: min=0
	Resources []Resources `hcl:"resources,block" validate:"min=0"`
	// StartupProbe: min=0
	StartupProbe []StartupProbe `hcl:"startup_probe,block" validate:"min=0"`
	// VolumeMounts: min=0
	VolumeMounts []VolumeMounts `hcl:"volume_mounts,block" validate:"min=0"`
}

type Env struct {
	// ValueFrom: min=0
	ValueFrom []ValueFrom `hcl:"value_from,block" validate:"min=0"`
}

type ValueFrom struct {
	// SecretKeyRef: min=0
	SecretKeyRef []SecretKeyRef `hcl:"secret_key_ref,block" validate:"min=0"`
}

type SecretKeyRef struct{}

type EnvFrom struct {
	// ConfigMapRef: min=0
	ConfigMapRef []ConfigMapRef `hcl:"config_map_ref,block" validate:"min=0"`
	// SecretRef: min=0
	SecretRef []SecretRef `hcl:"secret_ref,block" validate:"min=0"`
}

type ConfigMapRef struct {
	// ConfigMapRefLocalObjectReference: min=0
	LocalObjectReference []ConfigMapRefLocalObjectReference `hcl:"local_object_reference,block" validate:"min=0"`
}

type ConfigMapRefLocalObjectReference struct{}

type SecretRef struct {
	// SecretRefLocalObjectReference: min=0
	LocalObjectReference []SecretRefLocalObjectReference `hcl:"local_object_reference,block" validate:"min=0"`
}

type SecretRefLocalObjectReference struct{}

type LivenessProbe struct {
	// LivenessProbeGrpc: min=0
	Grpc []LivenessProbeGrpc `hcl:"grpc,block" validate:"min=0"`
	// LivenessProbeHttpGet: min=0
	HttpGet []LivenessProbeHttpGet `hcl:"http_get,block" validate:"min=0"`
}

type LivenessProbeGrpc struct{}

type LivenessProbeHttpGet struct {
	// LivenessProbeHttpGetHttpHeaders: min=0
	HttpHeaders []LivenessProbeHttpGetHttpHeaders `hcl:"http_headers,block" validate:"min=0"`
}

type LivenessProbeHttpGetHttpHeaders struct{}

type Ports struct{}

type Resources struct{}

type StartupProbe struct {
	// StartupProbeGrpc: min=0
	Grpc []StartupProbeGrpc `hcl:"grpc,block" validate:"min=0"`
	// StartupProbeHttpGet: min=0
	HttpGet []StartupProbeHttpGet `hcl:"http_get,block" validate:"min=0"`
	// TcpSocket: min=0
	TcpSocket []TcpSocket `hcl:"tcp_socket,block" validate:"min=0"`
}

type StartupProbeGrpc struct{}

type StartupProbeHttpGet struct {
	// StartupProbeHttpGetHttpHeaders: min=0
	HttpHeaders []StartupProbeHttpGetHttpHeaders `hcl:"http_headers,block" validate:"min=0"`
}

type StartupProbeHttpGetHttpHeaders struct{}

type TcpSocket struct{}

type VolumeMounts struct{}

type Volumes struct {
	// Secret: min=0
	Secret []Secret `hcl:"secret,block" validate:"min=0"`
}

type Secret struct {
	// Items: min=0
	Items []Items `hcl:"items,block" validate:"min=0"`
}

type Items struct{}

type Traffic struct{}

type MetadataAttributes struct {
	ref terra.Reference
}

func (m MetadataAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MetadataAttributes) InternalWithRef(ref terra.Reference) MetadataAttributes {
	return MetadataAttributes{ref: ref}
}

func (m MetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MetadataAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("annotations"))
}

func (m MetadataAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("generation"))
}

func (m MetadataAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("labels"))
}

func (m MetadataAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("namespace"))
}

func (m MetadataAttributes) ResourceVersion() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("resource_version"))
}

func (m MetadataAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("self_link"))
}

func (m MetadataAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("uid"))
}

type StatusAttributes struct {
	ref terra.Reference
}

func (s StatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StatusAttributes) InternalWithRef(ref terra.Reference) StatusAttributes {
	return StatusAttributes{ref: ref}
}

func (s StatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StatusAttributes) LatestCreatedRevisionName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("latest_created_revision_name"))
}

func (s StatusAttributes) LatestReadyRevisionName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("latest_ready_revision_name"))
}

func (s StatusAttributes) ObservedGeneration() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("observed_generation"))
}

func (s StatusAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("url"))
}

func (s StatusAttributes) Conditions() terra.ListValue[ConditionsAttributes] {
	return terra.ReferenceAsList[ConditionsAttributes](s.ref.Append("conditions"))
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("message"))
}

func (c ConditionsAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("reason"))
}

func (c ConditionsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("status"))
}

func (c ConditionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type TemplateAttributes struct {
	ref terra.Reference
}

func (t TemplateAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TemplateAttributes) InternalWithRef(ref terra.Reference) TemplateAttributes {
	return TemplateAttributes{ref: ref}
}

func (t TemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TemplateAttributes) Metadata() terra.ListValue[TemplateMetadataAttributes] {
	return terra.ReferenceAsList[TemplateMetadataAttributes](t.ref.Append("metadata"))
}

func (t TemplateAttributes) Spec() terra.ListValue[SpecAttributes] {
	return terra.ReferenceAsList[SpecAttributes](t.ref.Append("spec"))
}

type TemplateMetadataAttributes struct {
	ref terra.Reference
}

func (m TemplateMetadataAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m TemplateMetadataAttributes) InternalWithRef(ref terra.Reference) TemplateMetadataAttributes {
	return TemplateMetadataAttributes{ref: ref}
}

func (m TemplateMetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m TemplateMetadataAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("annotations"))
}

func (m TemplateMetadataAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("generation"))
}

func (m TemplateMetadataAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("labels"))
}

func (m TemplateMetadataAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("name"))
}

func (m TemplateMetadataAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("namespace"))
}

func (m TemplateMetadataAttributes) ResourceVersion() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("resource_version"))
}

func (m TemplateMetadataAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("self_link"))
}

func (m TemplateMetadataAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("uid"))
}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) ContainerConcurrency() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("container_concurrency"))
}

func (s SpecAttributes) ServiceAccountName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("service_account_name"))
}

func (s SpecAttributes) ServingState() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("serving_state"))
}

func (s SpecAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("timeout_seconds"))
}

func (s SpecAttributes) Containers() terra.ListValue[ContainersAttributes] {
	return terra.ReferenceAsList[ContainersAttributes](s.ref.Append("containers"))
}

func (s SpecAttributes) Volumes() terra.ListValue[VolumesAttributes] {
	return terra.ReferenceAsList[VolumesAttributes](s.ref.Append("volumes"))
}

type ContainersAttributes struct {
	ref terra.Reference
}

func (c ContainersAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ContainersAttributes) InternalWithRef(ref terra.Reference) ContainersAttributes {
	return ContainersAttributes{ref: ref}
}

func (c ContainersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ContainersAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("args"))
}

func (c ContainersAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("command"))
}

func (c ContainersAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c ContainersAttributes) WorkingDir() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("working_dir"))
}

func (c ContainersAttributes) Env() terra.SetValue[EnvAttributes] {
	return terra.ReferenceAsSet[EnvAttributes](c.ref.Append("env"))
}

func (c ContainersAttributes) EnvFrom() terra.ListValue[EnvFromAttributes] {
	return terra.ReferenceAsList[EnvFromAttributes](c.ref.Append("env_from"))
}

func (c ContainersAttributes) LivenessProbe() terra.ListValue[LivenessProbeAttributes] {
	return terra.ReferenceAsList[LivenessProbeAttributes](c.ref.Append("liveness_probe"))
}

func (c ContainersAttributes) Ports() terra.ListValue[PortsAttributes] {
	return terra.ReferenceAsList[PortsAttributes](c.ref.Append("ports"))
}

func (c ContainersAttributes) Resources() terra.ListValue[ResourcesAttributes] {
	return terra.ReferenceAsList[ResourcesAttributes](c.ref.Append("resources"))
}

func (c ContainersAttributes) StartupProbe() terra.ListValue[StartupProbeAttributes] {
	return terra.ReferenceAsList[StartupProbeAttributes](c.ref.Append("startup_probe"))
}

func (c ContainersAttributes) VolumeMounts() terra.ListValue[VolumeMountsAttributes] {
	return terra.ReferenceAsList[VolumeMountsAttributes](c.ref.Append("volume_mounts"))
}

type EnvAttributes struct {
	ref terra.Reference
}

func (e EnvAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EnvAttributes) InternalWithRef(ref terra.Reference) EnvAttributes {
	return EnvAttributes{ref: ref}
}

func (e EnvAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EnvAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e EnvAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

func (e EnvAttributes) ValueFrom() terra.ListValue[ValueFromAttributes] {
	return terra.ReferenceAsList[ValueFromAttributes](e.ref.Append("value_from"))
}

type ValueFromAttributes struct {
	ref terra.Reference
}

func (vf ValueFromAttributes) InternalRef() (terra.Reference, error) {
	return vf.ref, nil
}

func (vf ValueFromAttributes) InternalWithRef(ref terra.Reference) ValueFromAttributes {
	return ValueFromAttributes{ref: ref}
}

func (vf ValueFromAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vf.ref.InternalTokens()
}

func (vf ValueFromAttributes) SecretKeyRef() terra.ListValue[SecretKeyRefAttributes] {
	return terra.ReferenceAsList[SecretKeyRefAttributes](vf.ref.Append("secret_key_ref"))
}

type SecretKeyRefAttributes struct {
	ref terra.Reference
}

func (skr SecretKeyRefAttributes) InternalRef() (terra.Reference, error) {
	return skr.ref, nil
}

func (skr SecretKeyRefAttributes) InternalWithRef(ref terra.Reference) SecretKeyRefAttributes {
	return SecretKeyRefAttributes{ref: ref}
}

func (skr SecretKeyRefAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return skr.ref.InternalTokens()
}

func (skr SecretKeyRefAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(skr.ref.Append("key"))
}

func (skr SecretKeyRefAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(skr.ref.Append("name"))
}

type EnvFromAttributes struct {
	ref terra.Reference
}

func (ef EnvFromAttributes) InternalRef() (terra.Reference, error) {
	return ef.ref, nil
}

func (ef EnvFromAttributes) InternalWithRef(ref terra.Reference) EnvFromAttributes {
	return EnvFromAttributes{ref: ref}
}

func (ef EnvFromAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ef.ref.InternalTokens()
}

func (ef EnvFromAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("prefix"))
}

func (ef EnvFromAttributes) ConfigMapRef() terra.ListValue[ConfigMapRefAttributes] {
	return terra.ReferenceAsList[ConfigMapRefAttributes](ef.ref.Append("config_map_ref"))
}

func (ef EnvFromAttributes) SecretRef() terra.ListValue[SecretRefAttributes] {
	return terra.ReferenceAsList[SecretRefAttributes](ef.ref.Append("secret_ref"))
}

type ConfigMapRefAttributes struct {
	ref terra.Reference
}

func (cmr ConfigMapRefAttributes) InternalRef() (terra.Reference, error) {
	return cmr.ref, nil
}

func (cmr ConfigMapRefAttributes) InternalWithRef(ref terra.Reference) ConfigMapRefAttributes {
	return ConfigMapRefAttributes{ref: ref}
}

func (cmr ConfigMapRefAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cmr.ref.InternalTokens()
}

func (cmr ConfigMapRefAttributes) Optional() terra.BoolValue {
	return terra.ReferenceAsBool(cmr.ref.Append("optional"))
}

func (cmr ConfigMapRefAttributes) LocalObjectReference() terra.ListValue[ConfigMapRefLocalObjectReferenceAttributes] {
	return terra.ReferenceAsList[ConfigMapRefLocalObjectReferenceAttributes](cmr.ref.Append("local_object_reference"))
}

type ConfigMapRefLocalObjectReferenceAttributes struct {
	ref terra.Reference
}

func (lor ConfigMapRefLocalObjectReferenceAttributes) InternalRef() (terra.Reference, error) {
	return lor.ref, nil
}

func (lor ConfigMapRefLocalObjectReferenceAttributes) InternalWithRef(ref terra.Reference) ConfigMapRefLocalObjectReferenceAttributes {
	return ConfigMapRefLocalObjectReferenceAttributes{ref: ref}
}

func (lor ConfigMapRefLocalObjectReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lor.ref.InternalTokens()
}

func (lor ConfigMapRefLocalObjectReferenceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lor.ref.Append("name"))
}

type SecretRefAttributes struct {
	ref terra.Reference
}

func (sr SecretRefAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr SecretRefAttributes) InternalWithRef(ref terra.Reference) SecretRefAttributes {
	return SecretRefAttributes{ref: ref}
}

func (sr SecretRefAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr SecretRefAttributes) Optional() terra.BoolValue {
	return terra.ReferenceAsBool(sr.ref.Append("optional"))
}

func (sr SecretRefAttributes) LocalObjectReference() terra.ListValue[SecretRefLocalObjectReferenceAttributes] {
	return terra.ReferenceAsList[SecretRefLocalObjectReferenceAttributes](sr.ref.Append("local_object_reference"))
}

type SecretRefLocalObjectReferenceAttributes struct {
	ref terra.Reference
}

func (lor SecretRefLocalObjectReferenceAttributes) InternalRef() (terra.Reference, error) {
	return lor.ref, nil
}

func (lor SecretRefLocalObjectReferenceAttributes) InternalWithRef(ref terra.Reference) SecretRefLocalObjectReferenceAttributes {
	return SecretRefLocalObjectReferenceAttributes{ref: ref}
}

func (lor SecretRefLocalObjectReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lor.ref.InternalTokens()
}

func (lor SecretRefLocalObjectReferenceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lor.ref.Append("name"))
}

type LivenessProbeAttributes struct {
	ref terra.Reference
}

func (lp LivenessProbeAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp LivenessProbeAttributes) InternalWithRef(ref terra.Reference) LivenessProbeAttributes {
	return LivenessProbeAttributes{ref: ref}
}

func (lp LivenessProbeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp LivenessProbeAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("failure_threshold"))
}

func (lp LivenessProbeAttributes) InitialDelaySeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("initial_delay_seconds"))
}

func (lp LivenessProbeAttributes) PeriodSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("period_seconds"))
}

func (lp LivenessProbeAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("timeout_seconds"))
}

func (lp LivenessProbeAttributes) Grpc() terra.ListValue[LivenessProbeGrpcAttributes] {
	return terra.ReferenceAsList[LivenessProbeGrpcAttributes](lp.ref.Append("grpc"))
}

func (lp LivenessProbeAttributes) HttpGet() terra.ListValue[LivenessProbeHttpGetAttributes] {
	return terra.ReferenceAsList[LivenessProbeHttpGetAttributes](lp.ref.Append("http_get"))
}

type LivenessProbeGrpcAttributes struct {
	ref terra.Reference
}

func (g LivenessProbeGrpcAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g LivenessProbeGrpcAttributes) InternalWithRef(ref terra.Reference) LivenessProbeGrpcAttributes {
	return LivenessProbeGrpcAttributes{ref: ref}
}

func (g LivenessProbeGrpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g LivenessProbeGrpcAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("port"))
}

func (g LivenessProbeGrpcAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("service"))
}

type LivenessProbeHttpGetAttributes struct {
	ref terra.Reference
}

func (hg LivenessProbeHttpGetAttributes) InternalRef() (terra.Reference, error) {
	return hg.ref, nil
}

func (hg LivenessProbeHttpGetAttributes) InternalWithRef(ref terra.Reference) LivenessProbeHttpGetAttributes {
	return LivenessProbeHttpGetAttributes{ref: ref}
}

func (hg LivenessProbeHttpGetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hg.ref.InternalTokens()
}

func (hg LivenessProbeHttpGetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hg.ref.Append("path"))
}

func (hg LivenessProbeHttpGetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(hg.ref.Append("port"))
}

func (hg LivenessProbeHttpGetAttributes) HttpHeaders() terra.ListValue[LivenessProbeHttpGetHttpHeadersAttributes] {
	return terra.ReferenceAsList[LivenessProbeHttpGetHttpHeadersAttributes](hg.ref.Append("http_headers"))
}

type LivenessProbeHttpGetHttpHeadersAttributes struct {
	ref terra.Reference
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) InternalRef() (terra.Reference, error) {
	return hh.ref, nil
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) InternalWithRef(ref terra.Reference) LivenessProbeHttpGetHttpHeadersAttributes {
	return LivenessProbeHttpGetHttpHeadersAttributes{ref: ref}
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hh.ref.InternalTokens()
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("name"))
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("value"))
}

type PortsAttributes struct {
	ref terra.Reference
}

func (p PortsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PortsAttributes) InternalWithRef(ref terra.Reference) PortsAttributes {
	return PortsAttributes{ref: ref}
}

func (p PortsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PortsAttributes) ContainerPort() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("container_port"))
}

func (p PortsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p PortsAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("protocol"))
}

type ResourcesAttributes struct {
	ref terra.Reference
}

func (r ResourcesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ResourcesAttributes) InternalWithRef(ref terra.Reference) ResourcesAttributes {
	return ResourcesAttributes{ref: ref}
}

func (r ResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ResourcesAttributes) Limits() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("limits"))
}

func (r ResourcesAttributes) Requests() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("requests"))
}

type StartupProbeAttributes struct {
	ref terra.Reference
}

func (sp StartupProbeAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp StartupProbeAttributes) InternalWithRef(ref terra.Reference) StartupProbeAttributes {
	return StartupProbeAttributes{ref: ref}
}

func (sp StartupProbeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp StartupProbeAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("failure_threshold"))
}

func (sp StartupProbeAttributes) InitialDelaySeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("initial_delay_seconds"))
}

func (sp StartupProbeAttributes) PeriodSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("period_seconds"))
}

func (sp StartupProbeAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("timeout_seconds"))
}

func (sp StartupProbeAttributes) Grpc() terra.ListValue[StartupProbeGrpcAttributes] {
	return terra.ReferenceAsList[StartupProbeGrpcAttributes](sp.ref.Append("grpc"))
}

func (sp StartupProbeAttributes) HttpGet() terra.ListValue[StartupProbeHttpGetAttributes] {
	return terra.ReferenceAsList[StartupProbeHttpGetAttributes](sp.ref.Append("http_get"))
}

func (sp StartupProbeAttributes) TcpSocket() terra.ListValue[TcpSocketAttributes] {
	return terra.ReferenceAsList[TcpSocketAttributes](sp.ref.Append("tcp_socket"))
}

type StartupProbeGrpcAttributes struct {
	ref terra.Reference
}

func (g StartupProbeGrpcAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g StartupProbeGrpcAttributes) InternalWithRef(ref terra.Reference) StartupProbeGrpcAttributes {
	return StartupProbeGrpcAttributes{ref: ref}
}

func (g StartupProbeGrpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g StartupProbeGrpcAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("port"))
}

func (g StartupProbeGrpcAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("service"))
}

type StartupProbeHttpGetAttributes struct {
	ref terra.Reference
}

func (hg StartupProbeHttpGetAttributes) InternalRef() (terra.Reference, error) {
	return hg.ref, nil
}

func (hg StartupProbeHttpGetAttributes) InternalWithRef(ref terra.Reference) StartupProbeHttpGetAttributes {
	return StartupProbeHttpGetAttributes{ref: ref}
}

func (hg StartupProbeHttpGetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hg.ref.InternalTokens()
}

func (hg StartupProbeHttpGetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hg.ref.Append("path"))
}

func (hg StartupProbeHttpGetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(hg.ref.Append("port"))
}

func (hg StartupProbeHttpGetAttributes) HttpHeaders() terra.ListValue[StartupProbeHttpGetHttpHeadersAttributes] {
	return terra.ReferenceAsList[StartupProbeHttpGetHttpHeadersAttributes](hg.ref.Append("http_headers"))
}

type StartupProbeHttpGetHttpHeadersAttributes struct {
	ref terra.Reference
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) InternalRef() (terra.Reference, error) {
	return hh.ref, nil
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) InternalWithRef(ref terra.Reference) StartupProbeHttpGetHttpHeadersAttributes {
	return StartupProbeHttpGetHttpHeadersAttributes{ref: ref}
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hh.ref.InternalTokens()
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("name"))
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("value"))
}

type TcpSocketAttributes struct {
	ref terra.Reference
}

func (ts TcpSocketAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TcpSocketAttributes) InternalWithRef(ref terra.Reference) TcpSocketAttributes {
	return TcpSocketAttributes{ref: ref}
}

func (ts TcpSocketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TcpSocketAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("port"))
}

type VolumeMountsAttributes struct {
	ref terra.Reference
}

func (vm VolumeMountsAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm VolumeMountsAttributes) InternalWithRef(ref terra.Reference) VolumeMountsAttributes {
	return VolumeMountsAttributes{ref: ref}
}

func (vm VolumeMountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm VolumeMountsAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("mount_path"))
}

func (vm VolumeMountsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("name"))
}

type VolumesAttributes struct {
	ref terra.Reference
}

func (v VolumesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VolumesAttributes) InternalWithRef(ref terra.Reference) VolumesAttributes {
	return VolumesAttributes{ref: ref}
}

func (v VolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v VolumesAttributes) Secret() terra.ListValue[SecretAttributes] {
	return terra.ReferenceAsList[SecretAttributes](v.ref.Append("secret"))
}

type SecretAttributes struct {
	ref terra.Reference
}

func (s SecretAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SecretAttributes) InternalWithRef(ref terra.Reference) SecretAttributes {
	return SecretAttributes{ref: ref}
}

func (s SecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SecretAttributes) DefaultMode() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("default_mode"))
}

func (s SecretAttributes) SecretName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret_name"))
}

func (s SecretAttributes) Items() terra.ListValue[ItemsAttributes] {
	return terra.ReferenceAsList[ItemsAttributes](s.ref.Append("items"))
}

type ItemsAttributes struct {
	ref terra.Reference
}

func (i ItemsAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i ItemsAttributes) InternalWithRef(ref terra.Reference) ItemsAttributes {
	return ItemsAttributes{ref: ref}
}

func (i ItemsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i ItemsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("key"))
}

func (i ItemsAttributes) Mode() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("mode"))
}

func (i ItemsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("path"))
}

type TrafficAttributes struct {
	ref terra.Reference
}

func (t TrafficAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TrafficAttributes) InternalWithRef(ref terra.Reference) TrafficAttributes {
	return TrafficAttributes{ref: ref}
}

func (t TrafficAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TrafficAttributes) LatestRevision() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("latest_revision"))
}

func (t TrafficAttributes) Percent() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("percent"))
}

func (t TrafficAttributes) RevisionName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("revision_name"))
}

func (t TrafficAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("tag"))
}

func (t TrafficAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("url"))
}

type MetadataState struct {
	Annotations     map[string]string `json:"annotations"`
	Generation      float64           `json:"generation"`
	Labels          map[string]string `json:"labels"`
	Namespace       string            `json:"namespace"`
	ResourceVersion string            `json:"resource_version"`
	SelfLink        string            `json:"self_link"`
	Uid             string            `json:"uid"`
}

type StatusState struct {
	LatestCreatedRevisionName string            `json:"latest_created_revision_name"`
	LatestReadyRevisionName   string            `json:"latest_ready_revision_name"`
	ObservedGeneration        float64           `json:"observed_generation"`
	Url                       string            `json:"url"`
	Conditions                []ConditionsState `json:"conditions"`
}

type ConditionsState struct {
	Message string `json:"message"`
	Reason  string `json:"reason"`
	Status  string `json:"status"`
	Type    string `json:"type"`
}

type TemplateState struct {
	Metadata []TemplateMetadataState `json:"metadata"`
	Spec     []SpecState             `json:"spec"`
}

type TemplateMetadataState struct {
	Annotations     map[string]string `json:"annotations"`
	Generation      float64           `json:"generation"`
	Labels          map[string]string `json:"labels"`
	Name            string            `json:"name"`
	Namespace       string            `json:"namespace"`
	ResourceVersion string            `json:"resource_version"`
	SelfLink        string            `json:"self_link"`
	Uid             string            `json:"uid"`
}

type SpecState struct {
	ContainerConcurrency float64           `json:"container_concurrency"`
	ServiceAccountName   string            `json:"service_account_name"`
	ServingState         string            `json:"serving_state"`
	TimeoutSeconds       float64           `json:"timeout_seconds"`
	Containers           []ContainersState `json:"containers"`
	Volumes              []VolumesState    `json:"volumes"`
}

type ContainersState struct {
	Args          []string             `json:"args"`
	Command       []string             `json:"command"`
	Image         string               `json:"image"`
	WorkingDir    string               `json:"working_dir"`
	Env           []EnvState           `json:"env"`
	EnvFrom       []EnvFromState       `json:"env_from"`
	LivenessProbe []LivenessProbeState `json:"liveness_probe"`
	Ports         []PortsState         `json:"ports"`
	Resources     []ResourcesState     `json:"resources"`
	StartupProbe  []StartupProbeState  `json:"startup_probe"`
	VolumeMounts  []VolumeMountsState  `json:"volume_mounts"`
}

type EnvState struct {
	Name      string           `json:"name"`
	Value     string           `json:"value"`
	ValueFrom []ValueFromState `json:"value_from"`
}

type ValueFromState struct {
	SecretKeyRef []SecretKeyRefState `json:"secret_key_ref"`
}

type SecretKeyRefState struct {
	Key  string `json:"key"`
	Name string `json:"name"`
}

type EnvFromState struct {
	Prefix       string              `json:"prefix"`
	ConfigMapRef []ConfigMapRefState `json:"config_map_ref"`
	SecretRef    []SecretRefState    `json:"secret_ref"`
}

type ConfigMapRefState struct {
	Optional             bool                                    `json:"optional"`
	LocalObjectReference []ConfigMapRefLocalObjectReferenceState `json:"local_object_reference"`
}

type ConfigMapRefLocalObjectReferenceState struct {
	Name string `json:"name"`
}

type SecretRefState struct {
	Optional             bool                                 `json:"optional"`
	LocalObjectReference []SecretRefLocalObjectReferenceState `json:"local_object_reference"`
}

type SecretRefLocalObjectReferenceState struct {
	Name string `json:"name"`
}

type LivenessProbeState struct {
	FailureThreshold    float64                     `json:"failure_threshold"`
	InitialDelaySeconds float64                     `json:"initial_delay_seconds"`
	PeriodSeconds       float64                     `json:"period_seconds"`
	TimeoutSeconds      float64                     `json:"timeout_seconds"`
	Grpc                []LivenessProbeGrpcState    `json:"grpc"`
	HttpGet             []LivenessProbeHttpGetState `json:"http_get"`
}

type LivenessProbeGrpcState struct {
	Port    float64 `json:"port"`
	Service string  `json:"service"`
}

type LivenessProbeHttpGetState struct {
	Path        string                                 `json:"path"`
	Port        float64                                `json:"port"`
	HttpHeaders []LivenessProbeHttpGetHttpHeadersState `json:"http_headers"`
}

type LivenessProbeHttpGetHttpHeadersState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type PortsState struct {
	ContainerPort float64 `json:"container_port"`
	Name          string  `json:"name"`
	Protocol      string  `json:"protocol"`
}

type ResourcesState struct {
	Limits   map[string]string `json:"limits"`
	Requests map[string]string `json:"requests"`
}

type StartupProbeState struct {
	FailureThreshold    float64                    `json:"failure_threshold"`
	InitialDelaySeconds float64                    `json:"initial_delay_seconds"`
	PeriodSeconds       float64                    `json:"period_seconds"`
	TimeoutSeconds      float64                    `json:"timeout_seconds"`
	Grpc                []StartupProbeGrpcState    `json:"grpc"`
	HttpGet             []StartupProbeHttpGetState `json:"http_get"`
	TcpSocket           []TcpSocketState           `json:"tcp_socket"`
}

type StartupProbeGrpcState struct {
	Port    float64 `json:"port"`
	Service string  `json:"service"`
}

type StartupProbeHttpGetState struct {
	Path        string                                `json:"path"`
	Port        float64                               `json:"port"`
	HttpHeaders []StartupProbeHttpGetHttpHeadersState `json:"http_headers"`
}

type StartupProbeHttpGetHttpHeadersState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TcpSocketState struct {
	Port float64 `json:"port"`
}

type VolumeMountsState struct {
	MountPath string `json:"mount_path"`
	Name      string `json:"name"`
}

type VolumesState struct {
	Name   string        `json:"name"`
	Secret []SecretState `json:"secret"`
}

type SecretState struct {
	DefaultMode float64      `json:"default_mode"`
	SecretName  string       `json:"secret_name"`
	Items       []ItemsState `json:"items"`
}

type ItemsState struct {
	Key  string  `json:"key"`
	Mode float64 `json:"mode"`
	Path string  `json:"path"`
}

type TrafficState struct {
	LatestRevision bool    `json:"latest_revision"`
	Percent        float64 `json:"percent"`
	RevisionName   string  `json:"revision_name"`
	Tag            string  `json:"tag"`
	Url            string  `json:"url"`
}
