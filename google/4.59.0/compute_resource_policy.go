// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeresourcepolicy "github.com/golingon/terraproviders/google/4.59.0/computeresourcepolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeResourcePolicy(name string, args ComputeResourcePolicyArgs) *ComputeResourcePolicy {
	return &ComputeResourcePolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeResourcePolicy)(nil)

type ComputeResourcePolicy struct {
	Name  string
	Args  ComputeResourcePolicyArgs
	state *computeResourcePolicyState
}

func (crp *ComputeResourcePolicy) Type() string {
	return "google_compute_resource_policy"
}

func (crp *ComputeResourcePolicy) LocalName() string {
	return crp.Name
}

func (crp *ComputeResourcePolicy) Configuration() interface{} {
	return crp.Args
}

func (crp *ComputeResourcePolicy) Attributes() computeResourcePolicyAttributes {
	return computeResourcePolicyAttributes{ref: terra.ReferenceResource(crp)}
}

func (crp *ComputeResourcePolicy) ImportState(av io.Reader) error {
	crp.state = &computeResourcePolicyState{}
	if err := json.NewDecoder(av).Decode(crp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crp.Type(), crp.LocalName(), err)
	}
	return nil
}

func (crp *ComputeResourcePolicy) State() (*computeResourcePolicyState, bool) {
	return crp.state, crp.state != nil
}

func (crp *ComputeResourcePolicy) StateMust() *computeResourcePolicyState {
	if crp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crp.Type(), crp.LocalName()))
	}
	return crp.state
}

func (crp *ComputeResourcePolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(crp)
}

type ComputeResourcePolicyArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// GroupPlacementPolicy: optional
	GroupPlacementPolicy *computeresourcepolicy.GroupPlacementPolicy `hcl:"group_placement_policy,block"`
	// InstanceSchedulePolicy: optional
	InstanceSchedulePolicy *computeresourcepolicy.InstanceSchedulePolicy `hcl:"instance_schedule_policy,block"`
	// SnapshotSchedulePolicy: optional
	SnapshotSchedulePolicy *computeresourcepolicy.SnapshotSchedulePolicy `hcl:"snapshot_schedule_policy,block"`
	// Timeouts: optional
	Timeouts *computeresourcepolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeResourcePolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeResourcePolicyAttributes struct {
	ref terra.Reference
}

func (crp computeResourcePolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("description"))
}

func (crp computeResourcePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("id"))
}

func (crp computeResourcePolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("name"))
}

func (crp computeResourcePolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("project"))
}

func (crp computeResourcePolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("region"))
}

func (crp computeResourcePolicyAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("self_link"))
}

func (crp computeResourcePolicyAttributes) GroupPlacementPolicy() terra.ListValue[computeresourcepolicy.GroupPlacementPolicyAttributes] {
	return terra.ReferenceList[computeresourcepolicy.GroupPlacementPolicyAttributes](crp.ref.Append("group_placement_policy"))
}

func (crp computeResourcePolicyAttributes) InstanceSchedulePolicy() terra.ListValue[computeresourcepolicy.InstanceSchedulePolicyAttributes] {
	return terra.ReferenceList[computeresourcepolicy.InstanceSchedulePolicyAttributes](crp.ref.Append("instance_schedule_policy"))
}

func (crp computeResourcePolicyAttributes) SnapshotSchedulePolicy() terra.ListValue[computeresourcepolicy.SnapshotSchedulePolicyAttributes] {
	return terra.ReferenceList[computeresourcepolicy.SnapshotSchedulePolicyAttributes](crp.ref.Append("snapshot_schedule_policy"))
}

func (crp computeResourcePolicyAttributes) Timeouts() computeresourcepolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[computeresourcepolicy.TimeoutsAttributes](crp.ref.Append("timeouts"))
}

type computeResourcePolicyState struct {
	Description            string                                              `json:"description"`
	Id                     string                                              `json:"id"`
	Name                   string                                              `json:"name"`
	Project                string                                              `json:"project"`
	Region                 string                                              `json:"region"`
	SelfLink               string                                              `json:"self_link"`
	GroupPlacementPolicy   []computeresourcepolicy.GroupPlacementPolicyState   `json:"group_placement_policy"`
	InstanceSchedulePolicy []computeresourcepolicy.InstanceSchedulePolicyState `json:"instance_schedule_policy"`
	SnapshotSchedulePolicy []computeresourcepolicy.SnapshotSchedulePolicyState `json:"snapshot_schedule_policy"`
	Timeouts               *computeresourcepolicy.TimeoutsState                `json:"timeouts"`
}
