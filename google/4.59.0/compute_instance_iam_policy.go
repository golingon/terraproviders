// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeInstanceIamPolicy(name string, args ComputeInstanceIamPolicyArgs) *ComputeInstanceIamPolicy {
	return &ComputeInstanceIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeInstanceIamPolicy)(nil)

type ComputeInstanceIamPolicy struct {
	Name  string
	Args  ComputeInstanceIamPolicyArgs
	state *computeInstanceIamPolicyState
}

func (ciip *ComputeInstanceIamPolicy) Type() string {
	return "google_compute_instance_iam_policy"
}

func (ciip *ComputeInstanceIamPolicy) LocalName() string {
	return ciip.Name
}

func (ciip *ComputeInstanceIamPolicy) Configuration() interface{} {
	return ciip.Args
}

func (ciip *ComputeInstanceIamPolicy) Attributes() computeInstanceIamPolicyAttributes {
	return computeInstanceIamPolicyAttributes{ref: terra.ReferenceResource(ciip)}
}

func (ciip *ComputeInstanceIamPolicy) ImportState(av io.Reader) error {
	ciip.state = &computeInstanceIamPolicyState{}
	if err := json.NewDecoder(av).Decode(ciip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ciip.Type(), ciip.LocalName(), err)
	}
	return nil
}

func (ciip *ComputeInstanceIamPolicy) State() (*computeInstanceIamPolicyState, bool) {
	return ciip.state, ciip.state != nil
}

func (ciip *ComputeInstanceIamPolicy) StateMust() *computeInstanceIamPolicyState {
	if ciip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ciip.Type(), ciip.LocalName()))
	}
	return ciip.state
}

func (ciip *ComputeInstanceIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ciip)
}

type ComputeInstanceIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceName: string, required
	InstanceName terra.StringValue `hcl:"instance_name,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// DependsOn contains resources that ComputeInstanceIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeInstanceIamPolicyAttributes struct {
	ref terra.Reference
}

func (ciip computeInstanceIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ciip.ref.Append("etag"))
}

func (ciip computeInstanceIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ciip.ref.Append("id"))
}

func (ciip computeInstanceIamPolicyAttributes) InstanceName() terra.StringValue {
	return terra.ReferenceString(ciip.ref.Append("instance_name"))
}

func (ciip computeInstanceIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(ciip.ref.Append("policy_data"))
}

func (ciip computeInstanceIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ciip.ref.Append("project"))
}

func (ciip computeInstanceIamPolicyAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(ciip.ref.Append("zone"))
}

type computeInstanceIamPolicyState struct {
	Etag         string `json:"etag"`
	Id           string `json:"id"`
	InstanceName string `json:"instance_name"`
	PolicyData   string `json:"policy_data"`
	Project      string `json:"project"`
	Zone         string `json:"zone"`
}
