// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computenetworkfirewallpolicyassociation "github.com/golingon/terraproviders/google/4.59.0/computenetworkfirewallpolicyassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeNetworkFirewallPolicyAssociation(name string, args ComputeNetworkFirewallPolicyAssociationArgs) *ComputeNetworkFirewallPolicyAssociation {
	return &ComputeNetworkFirewallPolicyAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeNetworkFirewallPolicyAssociation)(nil)

type ComputeNetworkFirewallPolicyAssociation struct {
	Name  string
	Args  ComputeNetworkFirewallPolicyAssociationArgs
	state *computeNetworkFirewallPolicyAssociationState
}

func (cnfpa *ComputeNetworkFirewallPolicyAssociation) Type() string {
	return "google_compute_network_firewall_policy_association"
}

func (cnfpa *ComputeNetworkFirewallPolicyAssociation) LocalName() string {
	return cnfpa.Name
}

func (cnfpa *ComputeNetworkFirewallPolicyAssociation) Configuration() interface{} {
	return cnfpa.Args
}

func (cnfpa *ComputeNetworkFirewallPolicyAssociation) Attributes() computeNetworkFirewallPolicyAssociationAttributes {
	return computeNetworkFirewallPolicyAssociationAttributes{ref: terra.ReferenceResource(cnfpa)}
}

func (cnfpa *ComputeNetworkFirewallPolicyAssociation) ImportState(av io.Reader) error {
	cnfpa.state = &computeNetworkFirewallPolicyAssociationState{}
	if err := json.NewDecoder(av).Decode(cnfpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cnfpa.Type(), cnfpa.LocalName(), err)
	}
	return nil
}

func (cnfpa *ComputeNetworkFirewallPolicyAssociation) State() (*computeNetworkFirewallPolicyAssociationState, bool) {
	return cnfpa.state, cnfpa.state != nil
}

func (cnfpa *ComputeNetworkFirewallPolicyAssociation) StateMust() *computeNetworkFirewallPolicyAssociationState {
	if cnfpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cnfpa.Type(), cnfpa.LocalName()))
	}
	return cnfpa.state
}

func (cnfpa *ComputeNetworkFirewallPolicyAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(cnfpa)
}

type ComputeNetworkFirewallPolicyAssociationArgs struct {
	// AttachmentTarget: string, required
	AttachmentTarget terra.StringValue `hcl:"attachment_target,attr" validate:"required"`
	// FirewallPolicy: string, required
	FirewallPolicy terra.StringValue `hcl:"firewall_policy,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *computenetworkfirewallpolicyassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeNetworkFirewallPolicyAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeNetworkFirewallPolicyAssociationAttributes struct {
	ref terra.Reference
}

func (cnfpa computeNetworkFirewallPolicyAssociationAttributes) AttachmentTarget() terra.StringValue {
	return terra.ReferenceString(cnfpa.ref.Append("attachment_target"))
}

func (cnfpa computeNetworkFirewallPolicyAssociationAttributes) FirewallPolicy() terra.StringValue {
	return terra.ReferenceString(cnfpa.ref.Append("firewall_policy"))
}

func (cnfpa computeNetworkFirewallPolicyAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cnfpa.ref.Append("id"))
}

func (cnfpa computeNetworkFirewallPolicyAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cnfpa.ref.Append("name"))
}

func (cnfpa computeNetworkFirewallPolicyAssociationAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cnfpa.ref.Append("project"))
}

func (cnfpa computeNetworkFirewallPolicyAssociationAttributes) ShortName() terra.StringValue {
	return terra.ReferenceString(cnfpa.ref.Append("short_name"))
}

func (cnfpa computeNetworkFirewallPolicyAssociationAttributes) Timeouts() computenetworkfirewallpolicyassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[computenetworkfirewallpolicyassociation.TimeoutsAttributes](cnfpa.ref.Append("timeouts"))
}

type computeNetworkFirewallPolicyAssociationState struct {
	AttachmentTarget string                                                 `json:"attachment_target"`
	FirewallPolicy   string                                                 `json:"firewall_policy"`
	Id               string                                                 `json:"id"`
	Name             string                                                 `json:"name"`
	Project          string                                                 `json:"project"`
	ShortName        string                                                 `json:"short_name"`
	Timeouts         *computenetworkfirewallpolicyassociation.TimeoutsState `json:"timeouts"`
}
