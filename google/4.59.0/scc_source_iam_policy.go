// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSccSourceIamPolicy(name string, args SccSourceIamPolicyArgs) *SccSourceIamPolicy {
	return &SccSourceIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SccSourceIamPolicy)(nil)

type SccSourceIamPolicy struct {
	Name  string
	Args  SccSourceIamPolicyArgs
	state *sccSourceIamPolicyState
}

func (ssip *SccSourceIamPolicy) Type() string {
	return "google_scc_source_iam_policy"
}

func (ssip *SccSourceIamPolicy) LocalName() string {
	return ssip.Name
}

func (ssip *SccSourceIamPolicy) Configuration() interface{} {
	return ssip.Args
}

func (ssip *SccSourceIamPolicy) Attributes() sccSourceIamPolicyAttributes {
	return sccSourceIamPolicyAttributes{ref: terra.ReferenceResource(ssip)}
}

func (ssip *SccSourceIamPolicy) ImportState(av io.Reader) error {
	ssip.state = &sccSourceIamPolicyState{}
	if err := json.NewDecoder(av).Decode(ssip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssip.Type(), ssip.LocalName(), err)
	}
	return nil
}

func (ssip *SccSourceIamPolicy) State() (*sccSourceIamPolicyState, bool) {
	return ssip.state, ssip.state != nil
}

func (ssip *SccSourceIamPolicy) StateMust() *sccSourceIamPolicyState {
	if ssip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssip.Type(), ssip.LocalName()))
	}
	return ssip.state
}

func (ssip *SccSourceIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ssip)
}

type SccSourceIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Organization: string, required
	Organization terra.StringValue `hcl:"organization,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// DependsOn contains resources that SccSourceIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sccSourceIamPolicyAttributes struct {
	ref terra.Reference
}

func (ssip sccSourceIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ssip.ref.Append("etag"))
}

func (ssip sccSourceIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssip.ref.Append("id"))
}

func (ssip sccSourceIamPolicyAttributes) Organization() terra.StringValue {
	return terra.ReferenceString(ssip.ref.Append("organization"))
}

func (ssip sccSourceIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(ssip.ref.Append("policy_data"))
}

func (ssip sccSourceIamPolicyAttributes) Source() terra.StringValue {
	return terra.ReferenceString(ssip.ref.Append("source"))
}

type sccSourceIamPolicyState struct {
	Etag         string `json:"etag"`
	Id           string `json:"id"`
	Organization string `json:"organization"`
	PolicyData   string `json:"policy_data"`
	Source       string `json:"source"`
}
