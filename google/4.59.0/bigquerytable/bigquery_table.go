// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package bigquerytable

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type EncryptionConfiguration struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type ExternalDataConfiguration struct {
	// Autodetect: bool, required
	Autodetect terra.BoolValue `hcl:"autodetect,attr" validate:"required"`
	// Compression: string, optional
	Compression terra.StringValue `hcl:"compression,attr"`
	// ConnectionId: string, optional
	ConnectionId terra.StringValue `hcl:"connection_id,attr"`
	// IgnoreUnknownValues: bool, optional
	IgnoreUnknownValues terra.BoolValue `hcl:"ignore_unknown_values,attr"`
	// MaxBadRecords: number, optional
	MaxBadRecords terra.NumberValue `hcl:"max_bad_records,attr"`
	// ReferenceFileSchemaUri: string, optional
	ReferenceFileSchemaUri terra.StringValue `hcl:"reference_file_schema_uri,attr"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
	// SourceFormat: string, required
	SourceFormat terra.StringValue `hcl:"source_format,attr" validate:"required"`
	// SourceUris: list of string, required
	SourceUris terra.ListValue[terra.StringValue] `hcl:"source_uris,attr" validate:"required"`
	// AvroOptions: optional
	AvroOptions *AvroOptions `hcl:"avro_options,block"`
	// CsvOptions: optional
	CsvOptions *CsvOptions `hcl:"csv_options,block"`
	// GoogleSheetsOptions: optional
	GoogleSheetsOptions *GoogleSheetsOptions `hcl:"google_sheets_options,block"`
	// HivePartitioningOptions: optional
	HivePartitioningOptions *HivePartitioningOptions `hcl:"hive_partitioning_options,block"`
}

type AvroOptions struct {
	// UseAvroLogicalTypes: bool, required
	UseAvroLogicalTypes terra.BoolValue `hcl:"use_avro_logical_types,attr" validate:"required"`
}

type CsvOptions struct {
	// AllowJaggedRows: bool, optional
	AllowJaggedRows terra.BoolValue `hcl:"allow_jagged_rows,attr"`
	// AllowQuotedNewlines: bool, optional
	AllowQuotedNewlines terra.BoolValue `hcl:"allow_quoted_newlines,attr"`
	// Encoding: string, optional
	Encoding terra.StringValue `hcl:"encoding,attr"`
	// FieldDelimiter: string, optional
	FieldDelimiter terra.StringValue `hcl:"field_delimiter,attr"`
	// Quote: string, required
	Quote terra.StringValue `hcl:"quote,attr" validate:"required"`
	// SkipLeadingRows: number, optional
	SkipLeadingRows terra.NumberValue `hcl:"skip_leading_rows,attr"`
}

type GoogleSheetsOptions struct {
	// Range: string, optional
	Range terra.StringValue `hcl:"range,attr"`
	// SkipLeadingRows: number, optional
	SkipLeadingRows terra.NumberValue `hcl:"skip_leading_rows,attr"`
}

type HivePartitioningOptions struct {
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// RequirePartitionFilter: bool, optional
	RequirePartitionFilter terra.BoolValue `hcl:"require_partition_filter,attr"`
	// SourceUriPrefix: string, optional
	SourceUriPrefix terra.StringValue `hcl:"source_uri_prefix,attr"`
}

type MaterializedView struct {
	// EnableRefresh: bool, optional
	EnableRefresh terra.BoolValue `hcl:"enable_refresh,attr"`
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// RefreshIntervalMs: number, optional
	RefreshIntervalMs terra.NumberValue `hcl:"refresh_interval_ms,attr"`
}

type RangePartitioning struct {
	// Field: string, required
	Field terra.StringValue `hcl:"field,attr" validate:"required"`
	// Range: required
	Range *Range `hcl:"range,block" validate:"required"`
}

type Range struct {
	// End: number, required
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// Start: number, required
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type TimePartitioning struct {
	// ExpirationMs: number, optional
	ExpirationMs terra.NumberValue `hcl:"expiration_ms,attr"`
	// Field: string, optional
	Field terra.StringValue `hcl:"field,attr"`
	// RequirePartitionFilter: bool, optional
	RequirePartitionFilter terra.BoolValue `hcl:"require_partition_filter,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type View struct {
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// UseLegacySql: bool, optional
	UseLegacySql terra.BoolValue `hcl:"use_legacy_sql,attr"`
}

type EncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec EncryptionConfigurationAttributes) InternalRef() terra.Reference {
	return ec.ref
}

func (ec EncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) EncryptionConfigurationAttributes {
	return EncryptionConfigurationAttributes{ref: ref}
}

func (ec EncryptionConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return ec.ref.InternalTokens()
}

func (ec EncryptionConfigurationAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("kms_key_name"))
}

func (ec EncryptionConfigurationAttributes) KmsKeyVersion() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("kms_key_version"))
}

type ExternalDataConfigurationAttributes struct {
	ref terra.Reference
}

func (edc ExternalDataConfigurationAttributes) InternalRef() terra.Reference {
	return edc.ref
}

func (edc ExternalDataConfigurationAttributes) InternalWithRef(ref terra.Reference) ExternalDataConfigurationAttributes {
	return ExternalDataConfigurationAttributes{ref: ref}
}

func (edc ExternalDataConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return edc.ref.InternalTokens()
}

func (edc ExternalDataConfigurationAttributes) Autodetect() terra.BoolValue {
	return terra.ReferenceBool(edc.ref.Append("autodetect"))
}

func (edc ExternalDataConfigurationAttributes) Compression() terra.StringValue {
	return terra.ReferenceString(edc.ref.Append("compression"))
}

func (edc ExternalDataConfigurationAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceString(edc.ref.Append("connection_id"))
}

func (edc ExternalDataConfigurationAttributes) IgnoreUnknownValues() terra.BoolValue {
	return terra.ReferenceBool(edc.ref.Append("ignore_unknown_values"))
}

func (edc ExternalDataConfigurationAttributes) MaxBadRecords() terra.NumberValue {
	return terra.ReferenceNumber(edc.ref.Append("max_bad_records"))
}

func (edc ExternalDataConfigurationAttributes) ReferenceFileSchemaUri() terra.StringValue {
	return terra.ReferenceString(edc.ref.Append("reference_file_schema_uri"))
}

func (edc ExternalDataConfigurationAttributes) Schema() terra.StringValue {
	return terra.ReferenceString(edc.ref.Append("schema"))
}

func (edc ExternalDataConfigurationAttributes) SourceFormat() terra.StringValue {
	return terra.ReferenceString(edc.ref.Append("source_format"))
}

func (edc ExternalDataConfigurationAttributes) SourceUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](edc.ref.Append("source_uris"))
}

func (edc ExternalDataConfigurationAttributes) AvroOptions() terra.ListValue[AvroOptionsAttributes] {
	return terra.ReferenceList[AvroOptionsAttributes](edc.ref.Append("avro_options"))
}

func (edc ExternalDataConfigurationAttributes) CsvOptions() terra.ListValue[CsvOptionsAttributes] {
	return terra.ReferenceList[CsvOptionsAttributes](edc.ref.Append("csv_options"))
}

func (edc ExternalDataConfigurationAttributes) GoogleSheetsOptions() terra.ListValue[GoogleSheetsOptionsAttributes] {
	return terra.ReferenceList[GoogleSheetsOptionsAttributes](edc.ref.Append("google_sheets_options"))
}

func (edc ExternalDataConfigurationAttributes) HivePartitioningOptions() terra.ListValue[HivePartitioningOptionsAttributes] {
	return terra.ReferenceList[HivePartitioningOptionsAttributes](edc.ref.Append("hive_partitioning_options"))
}

type AvroOptionsAttributes struct {
	ref terra.Reference
}

func (ao AvroOptionsAttributes) InternalRef() terra.Reference {
	return ao.ref
}

func (ao AvroOptionsAttributes) InternalWithRef(ref terra.Reference) AvroOptionsAttributes {
	return AvroOptionsAttributes{ref: ref}
}

func (ao AvroOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return ao.ref.InternalTokens()
}

func (ao AvroOptionsAttributes) UseAvroLogicalTypes() terra.BoolValue {
	return terra.ReferenceBool(ao.ref.Append("use_avro_logical_types"))
}

type CsvOptionsAttributes struct {
	ref terra.Reference
}

func (co CsvOptionsAttributes) InternalRef() terra.Reference {
	return co.ref
}

func (co CsvOptionsAttributes) InternalWithRef(ref terra.Reference) CsvOptionsAttributes {
	return CsvOptionsAttributes{ref: ref}
}

func (co CsvOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return co.ref.InternalTokens()
}

func (co CsvOptionsAttributes) AllowJaggedRows() terra.BoolValue {
	return terra.ReferenceBool(co.ref.Append("allow_jagged_rows"))
}

func (co CsvOptionsAttributes) AllowQuotedNewlines() terra.BoolValue {
	return terra.ReferenceBool(co.ref.Append("allow_quoted_newlines"))
}

func (co CsvOptionsAttributes) Encoding() terra.StringValue {
	return terra.ReferenceString(co.ref.Append("encoding"))
}

func (co CsvOptionsAttributes) FieldDelimiter() terra.StringValue {
	return terra.ReferenceString(co.ref.Append("field_delimiter"))
}

func (co CsvOptionsAttributes) Quote() terra.StringValue {
	return terra.ReferenceString(co.ref.Append("quote"))
}

func (co CsvOptionsAttributes) SkipLeadingRows() terra.NumberValue {
	return terra.ReferenceNumber(co.ref.Append("skip_leading_rows"))
}

type GoogleSheetsOptionsAttributes struct {
	ref terra.Reference
}

func (gso GoogleSheetsOptionsAttributes) InternalRef() terra.Reference {
	return gso.ref
}

func (gso GoogleSheetsOptionsAttributes) InternalWithRef(ref terra.Reference) GoogleSheetsOptionsAttributes {
	return GoogleSheetsOptionsAttributes{ref: ref}
}

func (gso GoogleSheetsOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return gso.ref.InternalTokens()
}

func (gso GoogleSheetsOptionsAttributes) Range() terra.StringValue {
	return terra.ReferenceString(gso.ref.Append("range"))
}

func (gso GoogleSheetsOptionsAttributes) SkipLeadingRows() terra.NumberValue {
	return terra.ReferenceNumber(gso.ref.Append("skip_leading_rows"))
}

type HivePartitioningOptionsAttributes struct {
	ref terra.Reference
}

func (hpo HivePartitioningOptionsAttributes) InternalRef() terra.Reference {
	return hpo.ref
}

func (hpo HivePartitioningOptionsAttributes) InternalWithRef(ref terra.Reference) HivePartitioningOptionsAttributes {
	return HivePartitioningOptionsAttributes{ref: ref}
}

func (hpo HivePartitioningOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return hpo.ref.InternalTokens()
}

func (hpo HivePartitioningOptionsAttributes) Mode() terra.StringValue {
	return terra.ReferenceString(hpo.ref.Append("mode"))
}

func (hpo HivePartitioningOptionsAttributes) RequirePartitionFilter() terra.BoolValue {
	return terra.ReferenceBool(hpo.ref.Append("require_partition_filter"))
}

func (hpo HivePartitioningOptionsAttributes) SourceUriPrefix() terra.StringValue {
	return terra.ReferenceString(hpo.ref.Append("source_uri_prefix"))
}

type MaterializedViewAttributes struct {
	ref terra.Reference
}

func (mv MaterializedViewAttributes) InternalRef() terra.Reference {
	return mv.ref
}

func (mv MaterializedViewAttributes) InternalWithRef(ref terra.Reference) MaterializedViewAttributes {
	return MaterializedViewAttributes{ref: ref}
}

func (mv MaterializedViewAttributes) InternalTokens() hclwrite.Tokens {
	return mv.ref.InternalTokens()
}

func (mv MaterializedViewAttributes) EnableRefresh() terra.BoolValue {
	return terra.ReferenceBool(mv.ref.Append("enable_refresh"))
}

func (mv MaterializedViewAttributes) Query() terra.StringValue {
	return terra.ReferenceString(mv.ref.Append("query"))
}

func (mv MaterializedViewAttributes) RefreshIntervalMs() terra.NumberValue {
	return terra.ReferenceNumber(mv.ref.Append("refresh_interval_ms"))
}

type RangePartitioningAttributes struct {
	ref terra.Reference
}

func (rp RangePartitioningAttributes) InternalRef() terra.Reference {
	return rp.ref
}

func (rp RangePartitioningAttributes) InternalWithRef(ref terra.Reference) RangePartitioningAttributes {
	return RangePartitioningAttributes{ref: ref}
}

func (rp RangePartitioningAttributes) InternalTokens() hclwrite.Tokens {
	return rp.ref.InternalTokens()
}

func (rp RangePartitioningAttributes) Field() terra.StringValue {
	return terra.ReferenceString(rp.ref.Append("field"))
}

func (rp RangePartitioningAttributes) Range() terra.ListValue[RangeAttributes] {
	return terra.ReferenceList[RangeAttributes](rp.ref.Append("range"))
}

type RangeAttributes struct {
	ref terra.Reference
}

func (r RangeAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RangeAttributes) InternalWithRef(ref terra.Reference) RangeAttributes {
	return RangeAttributes{ref: ref}
}

func (r RangeAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RangeAttributes) End() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("end"))
}

func (r RangeAttributes) Interval() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("interval"))
}

func (r RangeAttributes) Start() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("start"))
}

type TimePartitioningAttributes struct {
	ref terra.Reference
}

func (tp TimePartitioningAttributes) InternalRef() terra.Reference {
	return tp.ref
}

func (tp TimePartitioningAttributes) InternalWithRef(ref terra.Reference) TimePartitioningAttributes {
	return TimePartitioningAttributes{ref: ref}
}

func (tp TimePartitioningAttributes) InternalTokens() hclwrite.Tokens {
	return tp.ref.InternalTokens()
}

func (tp TimePartitioningAttributes) ExpirationMs() terra.NumberValue {
	return terra.ReferenceNumber(tp.ref.Append("expiration_ms"))
}

func (tp TimePartitioningAttributes) Field() terra.StringValue {
	return terra.ReferenceString(tp.ref.Append("field"))
}

func (tp TimePartitioningAttributes) RequirePartitionFilter() terra.BoolValue {
	return terra.ReferenceBool(tp.ref.Append("require_partition_filter"))
}

func (tp TimePartitioningAttributes) Type() terra.StringValue {
	return terra.ReferenceString(tp.ref.Append("type"))
}

type ViewAttributes struct {
	ref terra.Reference
}

func (v ViewAttributes) InternalRef() terra.Reference {
	return v.ref
}

func (v ViewAttributes) InternalWithRef(ref terra.Reference) ViewAttributes {
	return ViewAttributes{ref: ref}
}

func (v ViewAttributes) InternalTokens() hclwrite.Tokens {
	return v.ref.InternalTokens()
}

func (v ViewAttributes) Query() terra.StringValue {
	return terra.ReferenceString(v.ref.Append("query"))
}

func (v ViewAttributes) UseLegacySql() terra.BoolValue {
	return terra.ReferenceBool(v.ref.Append("use_legacy_sql"))
}

type EncryptionConfigurationState struct {
	KmsKeyName    string `json:"kms_key_name"`
	KmsKeyVersion string `json:"kms_key_version"`
}

type ExternalDataConfigurationState struct {
	Autodetect              bool                           `json:"autodetect"`
	Compression             string                         `json:"compression"`
	ConnectionId            string                         `json:"connection_id"`
	IgnoreUnknownValues     bool                           `json:"ignore_unknown_values"`
	MaxBadRecords           float64                        `json:"max_bad_records"`
	ReferenceFileSchemaUri  string                         `json:"reference_file_schema_uri"`
	Schema                  string                         `json:"schema"`
	SourceFormat            string                         `json:"source_format"`
	SourceUris              []string                       `json:"source_uris"`
	AvroOptions             []AvroOptionsState             `json:"avro_options"`
	CsvOptions              []CsvOptionsState              `json:"csv_options"`
	GoogleSheetsOptions     []GoogleSheetsOptionsState     `json:"google_sheets_options"`
	HivePartitioningOptions []HivePartitioningOptionsState `json:"hive_partitioning_options"`
}

type AvroOptionsState struct {
	UseAvroLogicalTypes bool `json:"use_avro_logical_types"`
}

type CsvOptionsState struct {
	AllowJaggedRows     bool    `json:"allow_jagged_rows"`
	AllowQuotedNewlines bool    `json:"allow_quoted_newlines"`
	Encoding            string  `json:"encoding"`
	FieldDelimiter      string  `json:"field_delimiter"`
	Quote               string  `json:"quote"`
	SkipLeadingRows     float64 `json:"skip_leading_rows"`
}

type GoogleSheetsOptionsState struct {
	Range           string  `json:"range"`
	SkipLeadingRows float64 `json:"skip_leading_rows"`
}

type HivePartitioningOptionsState struct {
	Mode                   string `json:"mode"`
	RequirePartitionFilter bool   `json:"require_partition_filter"`
	SourceUriPrefix        string `json:"source_uri_prefix"`
}

type MaterializedViewState struct {
	EnableRefresh     bool    `json:"enable_refresh"`
	Query             string  `json:"query"`
	RefreshIntervalMs float64 `json:"refresh_interval_ms"`
}

type RangePartitioningState struct {
	Field string       `json:"field"`
	Range []RangeState `json:"range"`
}

type RangeState struct {
	End      float64 `json:"end"`
	Interval float64 `json:"interval"`
	Start    float64 `json:"start"`
}

type TimePartitioningState struct {
	ExpirationMs           float64 `json:"expiration_ms"`
	Field                  string  `json:"field"`
	RequirePartitionFilter bool    `json:"require_partition_filter"`
	Type                   string  `json:"type"`
}

type ViewState struct {
	Query        string `json:"query"`
	UseLegacySql bool   `json:"use_legacy_sql"`
}
