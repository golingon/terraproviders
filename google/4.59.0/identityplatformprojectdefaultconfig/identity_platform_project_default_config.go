// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package identityplatformprojectdefaultconfig

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type SignIn struct {
	// AllowDuplicateEmails: bool, optional
	AllowDuplicateEmails terra.BoolValue `hcl:"allow_duplicate_emails,attr"`
	// HashConfig: min=0
	HashConfig []HashConfig `hcl:"hash_config,block" validate:"min=0"`
	// Anonymous: optional
	Anonymous *Anonymous `hcl:"anonymous,block"`
	// Email: optional
	Email *Email `hcl:"email,block"`
	// PhoneNumber: optional
	PhoneNumber *PhoneNumber `hcl:"phone_number,block"`
}

type HashConfig struct{}

type Anonymous struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type Email struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// PasswordRequired: bool, optional
	PasswordRequired terra.BoolValue `hcl:"password_required,attr"`
}

type PhoneNumber struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// TestPhoneNumbers: map of string, optional
	TestPhoneNumbers terra.MapValue[terra.StringValue] `hcl:"test_phone_numbers,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SignInAttributes struct {
	ref terra.Reference
}

func (si SignInAttributes) InternalRef() terra.Reference {
	return si.ref
}

func (si SignInAttributes) InternalWithRef(ref terra.Reference) SignInAttributes {
	return SignInAttributes{ref: ref}
}

func (si SignInAttributes) InternalTokens() hclwrite.Tokens {
	return si.ref.InternalTokens()
}

func (si SignInAttributes) AllowDuplicateEmails() terra.BoolValue {
	return terra.ReferenceBool(si.ref.Append("allow_duplicate_emails"))
}

func (si SignInAttributes) HashConfig() terra.ListValue[HashConfigAttributes] {
	return terra.ReferenceList[HashConfigAttributes](si.ref.Append("hash_config"))
}

func (si SignInAttributes) Anonymous() terra.ListValue[AnonymousAttributes] {
	return terra.ReferenceList[AnonymousAttributes](si.ref.Append("anonymous"))
}

func (si SignInAttributes) Email() terra.ListValue[EmailAttributes] {
	return terra.ReferenceList[EmailAttributes](si.ref.Append("email"))
}

func (si SignInAttributes) PhoneNumber() terra.ListValue[PhoneNumberAttributes] {
	return terra.ReferenceList[PhoneNumberAttributes](si.ref.Append("phone_number"))
}

type HashConfigAttributes struct {
	ref terra.Reference
}

func (hc HashConfigAttributes) InternalRef() terra.Reference {
	return hc.ref
}

func (hc HashConfigAttributes) InternalWithRef(ref terra.Reference) HashConfigAttributes {
	return HashConfigAttributes{ref: ref}
}

func (hc HashConfigAttributes) InternalTokens() hclwrite.Tokens {
	return hc.ref.InternalTokens()
}

func (hc HashConfigAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceString(hc.ref.Append("algorithm"))
}

func (hc HashConfigAttributes) MemoryCost() terra.NumberValue {
	return terra.ReferenceNumber(hc.ref.Append("memory_cost"))
}

func (hc HashConfigAttributes) Rounds() terra.NumberValue {
	return terra.ReferenceNumber(hc.ref.Append("rounds"))
}

func (hc HashConfigAttributes) SaltSeparator() terra.StringValue {
	return terra.ReferenceString(hc.ref.Append("salt_separator"))
}

func (hc HashConfigAttributes) SignerKey() terra.StringValue {
	return terra.ReferenceString(hc.ref.Append("signer_key"))
}

type AnonymousAttributes struct {
	ref terra.Reference
}

func (a AnonymousAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a AnonymousAttributes) InternalWithRef(ref terra.Reference) AnonymousAttributes {
	return AnonymousAttributes{ref: ref}
}

func (a AnonymousAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a AnonymousAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(a.ref.Append("enabled"))
}

type EmailAttributes struct {
	ref terra.Reference
}

func (e EmailAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e EmailAttributes) InternalWithRef(ref terra.Reference) EmailAttributes {
	return EmailAttributes{ref: ref}
}

func (e EmailAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e EmailAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(e.ref.Append("enabled"))
}

func (e EmailAttributes) PasswordRequired() terra.BoolValue {
	return terra.ReferenceBool(e.ref.Append("password_required"))
}

type PhoneNumberAttributes struct {
	ref terra.Reference
}

func (pn PhoneNumberAttributes) InternalRef() terra.Reference {
	return pn.ref
}

func (pn PhoneNumberAttributes) InternalWithRef(ref terra.Reference) PhoneNumberAttributes {
	return PhoneNumberAttributes{ref: ref}
}

func (pn PhoneNumberAttributes) InternalTokens() hclwrite.Tokens {
	return pn.ref.InternalTokens()
}

func (pn PhoneNumberAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(pn.ref.Append("enabled"))
}

func (pn PhoneNumberAttributes) TestPhoneNumbers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pn.ref.Append("test_phone_numbers"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type SignInState struct {
	AllowDuplicateEmails bool               `json:"allow_duplicate_emails"`
	HashConfig           []HashConfigState  `json:"hash_config"`
	Anonymous            []AnonymousState   `json:"anonymous"`
	Email                []EmailState       `json:"email"`
	PhoneNumber          []PhoneNumberState `json:"phone_number"`
}

type HashConfigState struct {
	Algorithm     string  `json:"algorithm"`
	MemoryCost    float64 `json:"memory_cost"`
	Rounds        float64 `json:"rounds"`
	SaltSeparator string  `json:"salt_separator"`
	SignerKey     string  `json:"signer_key"`
}

type AnonymousState struct {
	Enabled bool `json:"enabled"`
}

type EmailState struct {
	Enabled          bool `json:"enabled"`
	PasswordRequired bool `json:"password_required"`
}

type PhoneNumberState struct {
	Enabled          bool              `json:"enabled"`
	TestPhoneNumbers map[string]string `json:"test_phone_numbers"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
