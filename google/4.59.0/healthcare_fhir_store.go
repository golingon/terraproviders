// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	healthcarefhirstore "github.com/golingon/terraproviders/google/4.59.0/healthcarefhirstore"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewHealthcareFhirStore(name string, args HealthcareFhirStoreArgs) *HealthcareFhirStore {
	return &HealthcareFhirStore{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HealthcareFhirStore)(nil)

type HealthcareFhirStore struct {
	Name  string
	Args  HealthcareFhirStoreArgs
	state *healthcareFhirStoreState
}

func (hfs *HealthcareFhirStore) Type() string {
	return "google_healthcare_fhir_store"
}

func (hfs *HealthcareFhirStore) LocalName() string {
	return hfs.Name
}

func (hfs *HealthcareFhirStore) Configuration() interface{} {
	return hfs.Args
}

func (hfs *HealthcareFhirStore) Attributes() healthcareFhirStoreAttributes {
	return healthcareFhirStoreAttributes{ref: terra.ReferenceResource(hfs)}
}

func (hfs *HealthcareFhirStore) ImportState(av io.Reader) error {
	hfs.state = &healthcareFhirStoreState{}
	if err := json.NewDecoder(av).Decode(hfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hfs.Type(), hfs.LocalName(), err)
	}
	return nil
}

func (hfs *HealthcareFhirStore) State() (*healthcareFhirStoreState, bool) {
	return hfs.state, hfs.state != nil
}

func (hfs *HealthcareFhirStore) StateMust() *healthcareFhirStoreState {
	if hfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hfs.Type(), hfs.LocalName()))
	}
	return hfs.state
}

func (hfs *HealthcareFhirStore) DependOn() terra.Reference {
	return terra.ReferenceResource(hfs)
}

type HealthcareFhirStoreArgs struct {
	// Dataset: string, required
	Dataset terra.StringValue `hcl:"dataset,attr" validate:"required"`
	// DisableReferentialIntegrity: bool, optional
	DisableReferentialIntegrity terra.BoolValue `hcl:"disable_referential_integrity,attr"`
	// DisableResourceVersioning: bool, optional
	DisableResourceVersioning terra.BoolValue `hcl:"disable_resource_versioning,attr"`
	// EnableHistoryImport: bool, optional
	EnableHistoryImport terra.BoolValue `hcl:"enable_history_import,attr"`
	// EnableUpdateCreate: bool, optional
	EnableUpdateCreate terra.BoolValue `hcl:"enable_update_create,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// NotificationConfig: optional
	NotificationConfig *healthcarefhirstore.NotificationConfig `hcl:"notification_config,block"`
	// StreamConfigs: min=0
	StreamConfigs []healthcarefhirstore.StreamConfigs `hcl:"stream_configs,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *healthcarefhirstore.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that HealthcareFhirStore depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type healthcareFhirStoreAttributes struct {
	ref terra.Reference
}

func (hfs healthcareFhirStoreAttributes) Dataset() terra.StringValue {
	return terra.ReferenceString(hfs.ref.Append("dataset"))
}

func (hfs healthcareFhirStoreAttributes) DisableReferentialIntegrity() terra.BoolValue {
	return terra.ReferenceBool(hfs.ref.Append("disable_referential_integrity"))
}

func (hfs healthcareFhirStoreAttributes) DisableResourceVersioning() terra.BoolValue {
	return terra.ReferenceBool(hfs.ref.Append("disable_resource_versioning"))
}

func (hfs healthcareFhirStoreAttributes) EnableHistoryImport() terra.BoolValue {
	return terra.ReferenceBool(hfs.ref.Append("enable_history_import"))
}

func (hfs healthcareFhirStoreAttributes) EnableUpdateCreate() terra.BoolValue {
	return terra.ReferenceBool(hfs.ref.Append("enable_update_create"))
}

func (hfs healthcareFhirStoreAttributes) Id() terra.StringValue {
	return terra.ReferenceString(hfs.ref.Append("id"))
}

func (hfs healthcareFhirStoreAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](hfs.ref.Append("labels"))
}

func (hfs healthcareFhirStoreAttributes) Name() terra.StringValue {
	return terra.ReferenceString(hfs.ref.Append("name"))
}

func (hfs healthcareFhirStoreAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(hfs.ref.Append("self_link"))
}

func (hfs healthcareFhirStoreAttributes) Version() terra.StringValue {
	return terra.ReferenceString(hfs.ref.Append("version"))
}

func (hfs healthcareFhirStoreAttributes) NotificationConfig() terra.ListValue[healthcarefhirstore.NotificationConfigAttributes] {
	return terra.ReferenceList[healthcarefhirstore.NotificationConfigAttributes](hfs.ref.Append("notification_config"))
}

func (hfs healthcareFhirStoreAttributes) StreamConfigs() terra.ListValue[healthcarefhirstore.StreamConfigsAttributes] {
	return terra.ReferenceList[healthcarefhirstore.StreamConfigsAttributes](hfs.ref.Append("stream_configs"))
}

func (hfs healthcareFhirStoreAttributes) Timeouts() healthcarefhirstore.TimeoutsAttributes {
	return terra.ReferenceSingle[healthcarefhirstore.TimeoutsAttributes](hfs.ref.Append("timeouts"))
}

type healthcareFhirStoreState struct {
	Dataset                     string                                        `json:"dataset"`
	DisableReferentialIntegrity bool                                          `json:"disable_referential_integrity"`
	DisableResourceVersioning   bool                                          `json:"disable_resource_versioning"`
	EnableHistoryImport         bool                                          `json:"enable_history_import"`
	EnableUpdateCreate          bool                                          `json:"enable_update_create"`
	Id                          string                                        `json:"id"`
	Labels                      map[string]string                             `json:"labels"`
	Name                        string                                        `json:"name"`
	SelfLink                    string                                        `json:"self_link"`
	Version                     string                                        `json:"version"`
	NotificationConfig          []healthcarefhirstore.NotificationConfigState `json:"notification_config"`
	StreamConfigs               []healthcarefhirstore.StreamConfigsState      `json:"stream_configs"`
	Timeouts                    *healthcarefhirstore.TimeoutsState            `json:"timeouts"`
}
