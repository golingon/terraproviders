// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	cloudiotregistryiambinding "github.com/golingon/terraproviders/google/4.59.0/cloudiotregistryiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudiotRegistryIamBinding(name string, args CloudiotRegistryIamBindingArgs) *CloudiotRegistryIamBinding {
	return &CloudiotRegistryIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudiotRegistryIamBinding)(nil)

type CloudiotRegistryIamBinding struct {
	Name  string
	Args  CloudiotRegistryIamBindingArgs
	state *cloudiotRegistryIamBindingState
}

func (crib *CloudiotRegistryIamBinding) Type() string {
	return "google_cloudiot_registry_iam_binding"
}

func (crib *CloudiotRegistryIamBinding) LocalName() string {
	return crib.Name
}

func (crib *CloudiotRegistryIamBinding) Configuration() interface{} {
	return crib.Args
}

func (crib *CloudiotRegistryIamBinding) Attributes() cloudiotRegistryIamBindingAttributes {
	return cloudiotRegistryIamBindingAttributes{ref: terra.ReferenceResource(crib)}
}

func (crib *CloudiotRegistryIamBinding) ImportState(av io.Reader) error {
	crib.state = &cloudiotRegistryIamBindingState{}
	if err := json.NewDecoder(av).Decode(crib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crib.Type(), crib.LocalName(), err)
	}
	return nil
}

func (crib *CloudiotRegistryIamBinding) State() (*cloudiotRegistryIamBindingState, bool) {
	return crib.state, crib.state != nil
}

func (crib *CloudiotRegistryIamBinding) StateMust() *cloudiotRegistryIamBindingState {
	if crib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crib.Type(), crib.LocalName()))
	}
	return crib.state
}

func (crib *CloudiotRegistryIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(crib)
}

type CloudiotRegistryIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *cloudiotregistryiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that CloudiotRegistryIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudiotRegistryIamBindingAttributes struct {
	ref terra.Reference
}

func (crib cloudiotRegistryIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(crib.ref.Append("etag"))
}

func (crib cloudiotRegistryIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crib.ref.Append("id"))
}

func (crib cloudiotRegistryIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](crib.ref.Append("members"))
}

func (crib cloudiotRegistryIamBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crib.ref.Append("name"))
}

func (crib cloudiotRegistryIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crib.ref.Append("project"))
}

func (crib cloudiotRegistryIamBindingAttributes) Region() terra.StringValue {
	return terra.ReferenceString(crib.ref.Append("region"))
}

func (crib cloudiotRegistryIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(crib.ref.Append("role"))
}

func (crib cloudiotRegistryIamBindingAttributes) Condition() terra.ListValue[cloudiotregistryiambinding.ConditionAttributes] {
	return terra.ReferenceList[cloudiotregistryiambinding.ConditionAttributes](crib.ref.Append("condition"))
}

type cloudiotRegistryIamBindingState struct {
	Etag      string                                      `json:"etag"`
	Id        string                                      `json:"id"`
	Members   []string                                    `json:"members"`
	Name      string                                      `json:"name"`
	Project   string                                      `json:"project"`
	Region    string                                      `json:"region"`
	Role      string                                      `json:"role"`
	Condition []cloudiotregistryiambinding.ConditionState `json:"condition"`
}
