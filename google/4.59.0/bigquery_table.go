// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	bigquerytable "github.com/golingon/terraproviders/google/4.59.0/bigquerytable"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigqueryTable(name string, args BigqueryTableArgs) *BigqueryTable {
	return &BigqueryTable{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryTable)(nil)

type BigqueryTable struct {
	Name  string
	Args  BigqueryTableArgs
	state *bigqueryTableState
}

func (bt *BigqueryTable) Type() string {
	return "google_bigquery_table"
}

func (bt *BigqueryTable) LocalName() string {
	return bt.Name
}

func (bt *BigqueryTable) Configuration() interface{} {
	return bt.Args
}

func (bt *BigqueryTable) Attributes() bigqueryTableAttributes {
	return bigqueryTableAttributes{ref: terra.ReferenceResource(bt)}
}

func (bt *BigqueryTable) ImportState(av io.Reader) error {
	bt.state = &bigqueryTableState{}
	if err := json.NewDecoder(av).Decode(bt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bt.Type(), bt.LocalName(), err)
	}
	return nil
}

func (bt *BigqueryTable) State() (*bigqueryTableState, bool) {
	return bt.state, bt.state != nil
}

func (bt *BigqueryTable) StateMust() *bigqueryTableState {
	if bt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bt.Type(), bt.LocalName()))
	}
	return bt.state
}

func (bt *BigqueryTable) DependOn() terra.Reference {
	return terra.ReferenceResource(bt)
}

type BigqueryTableArgs struct {
	// Clustering: list of string, optional
	Clustering terra.ListValue[terra.StringValue] `hcl:"clustering,attr"`
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// DeletionProtection: bool, optional
	DeletionProtection terra.BoolValue `hcl:"deletion_protection,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExpirationTime: number, optional
	ExpirationTime terra.NumberValue `hcl:"expiration_time,attr"`
	// FriendlyName: string, optional
	FriendlyName terra.StringValue `hcl:"friendly_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
	// EncryptionConfiguration: optional
	EncryptionConfiguration *bigquerytable.EncryptionConfiguration `hcl:"encryption_configuration,block"`
	// ExternalDataConfiguration: optional
	ExternalDataConfiguration *bigquerytable.ExternalDataConfiguration `hcl:"external_data_configuration,block"`
	// MaterializedView: optional
	MaterializedView *bigquerytable.MaterializedView `hcl:"materialized_view,block"`
	// RangePartitioning: optional
	RangePartitioning *bigquerytable.RangePartitioning `hcl:"range_partitioning,block"`
	// TimePartitioning: optional
	TimePartitioning *bigquerytable.TimePartitioning `hcl:"time_partitioning,block"`
	// View: optional
	View *bigquerytable.View `hcl:"view,block"`
	// DependsOn contains resources that BigqueryTable depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigqueryTableAttributes struct {
	ref terra.Reference
}

func (bt bigqueryTableAttributes) Clustering() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](bt.ref.Append("clustering"))
}

func (bt bigqueryTableAttributes) CreationTime() terra.NumberValue {
	return terra.ReferenceNumber(bt.ref.Append("creation_time"))
}

func (bt bigqueryTableAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("dataset_id"))
}

func (bt bigqueryTableAttributes) DeletionProtection() terra.BoolValue {
	return terra.ReferenceBool(bt.ref.Append("deletion_protection"))
}

func (bt bigqueryTableAttributes) Description() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("description"))
}

func (bt bigqueryTableAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("etag"))
}

func (bt bigqueryTableAttributes) ExpirationTime() terra.NumberValue {
	return terra.ReferenceNumber(bt.ref.Append("expiration_time"))
}

func (bt bigqueryTableAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("friendly_name"))
}

func (bt bigqueryTableAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("id"))
}

func (bt bigqueryTableAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bt.ref.Append("labels"))
}

func (bt bigqueryTableAttributes) LastModifiedTime() terra.NumberValue {
	return terra.ReferenceNumber(bt.ref.Append("last_modified_time"))
}

func (bt bigqueryTableAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("location"))
}

func (bt bigqueryTableAttributes) NumBytes() terra.NumberValue {
	return terra.ReferenceNumber(bt.ref.Append("num_bytes"))
}

func (bt bigqueryTableAttributes) NumLongTermBytes() terra.NumberValue {
	return terra.ReferenceNumber(bt.ref.Append("num_long_term_bytes"))
}

func (bt bigqueryTableAttributes) NumRows() terra.NumberValue {
	return terra.ReferenceNumber(bt.ref.Append("num_rows"))
}

func (bt bigqueryTableAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("project"))
}

func (bt bigqueryTableAttributes) Schema() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("schema"))
}

func (bt bigqueryTableAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("self_link"))
}

func (bt bigqueryTableAttributes) TableId() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("table_id"))
}

func (bt bigqueryTableAttributes) Type() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("type"))
}

func (bt bigqueryTableAttributes) EncryptionConfiguration() terra.ListValue[bigquerytable.EncryptionConfigurationAttributes] {
	return terra.ReferenceList[bigquerytable.EncryptionConfigurationAttributes](bt.ref.Append("encryption_configuration"))
}

func (bt bigqueryTableAttributes) ExternalDataConfiguration() terra.ListValue[bigquerytable.ExternalDataConfigurationAttributes] {
	return terra.ReferenceList[bigquerytable.ExternalDataConfigurationAttributes](bt.ref.Append("external_data_configuration"))
}

func (bt bigqueryTableAttributes) MaterializedView() terra.ListValue[bigquerytable.MaterializedViewAttributes] {
	return terra.ReferenceList[bigquerytable.MaterializedViewAttributes](bt.ref.Append("materialized_view"))
}

func (bt bigqueryTableAttributes) RangePartitioning() terra.ListValue[bigquerytable.RangePartitioningAttributes] {
	return terra.ReferenceList[bigquerytable.RangePartitioningAttributes](bt.ref.Append("range_partitioning"))
}

func (bt bigqueryTableAttributes) TimePartitioning() terra.ListValue[bigquerytable.TimePartitioningAttributes] {
	return terra.ReferenceList[bigquerytable.TimePartitioningAttributes](bt.ref.Append("time_partitioning"))
}

func (bt bigqueryTableAttributes) View() terra.ListValue[bigquerytable.ViewAttributes] {
	return terra.ReferenceList[bigquerytable.ViewAttributes](bt.ref.Append("view"))
}

type bigqueryTableState struct {
	Clustering                []string                                       `json:"clustering"`
	CreationTime              float64                                        `json:"creation_time"`
	DatasetId                 string                                         `json:"dataset_id"`
	DeletionProtection        bool                                           `json:"deletion_protection"`
	Description               string                                         `json:"description"`
	Etag                      string                                         `json:"etag"`
	ExpirationTime            float64                                        `json:"expiration_time"`
	FriendlyName              string                                         `json:"friendly_name"`
	Id                        string                                         `json:"id"`
	Labels                    map[string]string                              `json:"labels"`
	LastModifiedTime          float64                                        `json:"last_modified_time"`
	Location                  string                                         `json:"location"`
	NumBytes                  float64                                        `json:"num_bytes"`
	NumLongTermBytes          float64                                        `json:"num_long_term_bytes"`
	NumRows                   float64                                        `json:"num_rows"`
	Project                   string                                         `json:"project"`
	Schema                    string                                         `json:"schema"`
	SelfLink                  string                                         `json:"self_link"`
	TableId                   string                                         `json:"table_id"`
	Type                      string                                         `json:"type"`
	EncryptionConfiguration   []bigquerytable.EncryptionConfigurationState   `json:"encryption_configuration"`
	ExternalDataConfiguration []bigquerytable.ExternalDataConfigurationState `json:"external_data_configuration"`
	MaterializedView          []bigquerytable.MaterializedViewState          `json:"materialized_view"`
	RangePartitioning         []bigquerytable.RangePartitioningState         `json:"range_partitioning"`
	TimePartitioning          []bigquerytable.TimePartitioningState          `json:"time_partitioning"`
	View                      []bigquerytable.ViewState                      `json:"view"`
}
