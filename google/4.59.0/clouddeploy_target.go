// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	clouddeploytarget "github.com/golingon/terraproviders/google/4.59.0/clouddeploytarget"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewClouddeployTarget(name string, args ClouddeployTargetArgs) *ClouddeployTarget {
	return &ClouddeployTarget{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ClouddeployTarget)(nil)

type ClouddeployTarget struct {
	Name  string
	Args  ClouddeployTargetArgs
	state *clouddeployTargetState
}

func (ct *ClouddeployTarget) Type() string {
	return "google_clouddeploy_target"
}

func (ct *ClouddeployTarget) LocalName() string {
	return ct.Name
}

func (ct *ClouddeployTarget) Configuration() interface{} {
	return ct.Args
}

func (ct *ClouddeployTarget) Attributes() clouddeployTargetAttributes {
	return clouddeployTargetAttributes{ref: terra.ReferenceResource(ct)}
}

func (ct *ClouddeployTarget) ImportState(av io.Reader) error {
	ct.state = &clouddeployTargetState{}
	if err := json.NewDecoder(av).Decode(ct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ct.Type(), ct.LocalName(), err)
	}
	return nil
}

func (ct *ClouddeployTarget) State() (*clouddeployTargetState, bool) {
	return ct.state, ct.state != nil
}

func (ct *ClouddeployTarget) StateMust() *clouddeployTargetState {
	if ct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ct.Type(), ct.LocalName()))
	}
	return ct.state
}

func (ct *ClouddeployTarget) DependOn() terra.Reference {
	return terra.ReferenceResource(ct)
}

type ClouddeployTargetArgs struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RequireApproval: bool, optional
	RequireApproval terra.BoolValue `hcl:"require_approval,attr"`
	// AnthosCluster: optional
	AnthosCluster *clouddeploytarget.AnthosCluster `hcl:"anthos_cluster,block"`
	// ExecutionConfigs: min=0
	ExecutionConfigs []clouddeploytarget.ExecutionConfigs `hcl:"execution_configs,block" validate:"min=0"`
	// Gke: optional
	Gke *clouddeploytarget.Gke `hcl:"gke,block"`
	// Timeouts: optional
	Timeouts *clouddeploytarget.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ClouddeployTarget depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type clouddeployTargetAttributes struct {
	ref terra.Reference
}

func (ct clouddeployTargetAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ct.ref.Append("annotations"))
}

func (ct clouddeployTargetAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("create_time"))
}

func (ct clouddeployTargetAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("description"))
}

func (ct clouddeployTargetAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("etag"))
}

func (ct clouddeployTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("id"))
}

func (ct clouddeployTargetAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ct.ref.Append("labels"))
}

func (ct clouddeployTargetAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("location"))
}

func (ct clouddeployTargetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("name"))
}

func (ct clouddeployTargetAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("project"))
}

func (ct clouddeployTargetAttributes) RequireApproval() terra.BoolValue {
	return terra.ReferenceBool(ct.ref.Append("require_approval"))
}

func (ct clouddeployTargetAttributes) TargetId() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("target_id"))
}

func (ct clouddeployTargetAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("uid"))
}

func (ct clouddeployTargetAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("update_time"))
}

func (ct clouddeployTargetAttributes) AnthosCluster() terra.ListValue[clouddeploytarget.AnthosClusterAttributes] {
	return terra.ReferenceList[clouddeploytarget.AnthosClusterAttributes](ct.ref.Append("anthos_cluster"))
}

func (ct clouddeployTargetAttributes) ExecutionConfigs() terra.ListValue[clouddeploytarget.ExecutionConfigsAttributes] {
	return terra.ReferenceList[clouddeploytarget.ExecutionConfigsAttributes](ct.ref.Append("execution_configs"))
}

func (ct clouddeployTargetAttributes) Gke() terra.ListValue[clouddeploytarget.GkeAttributes] {
	return terra.ReferenceList[clouddeploytarget.GkeAttributes](ct.ref.Append("gke"))
}

func (ct clouddeployTargetAttributes) Timeouts() clouddeploytarget.TimeoutsAttributes {
	return terra.ReferenceSingle[clouddeploytarget.TimeoutsAttributes](ct.ref.Append("timeouts"))
}

type clouddeployTargetState struct {
	Annotations      map[string]string                         `json:"annotations"`
	CreateTime       string                                    `json:"create_time"`
	Description      string                                    `json:"description"`
	Etag             string                                    `json:"etag"`
	Id               string                                    `json:"id"`
	Labels           map[string]string                         `json:"labels"`
	Location         string                                    `json:"location"`
	Name             string                                    `json:"name"`
	Project          string                                    `json:"project"`
	RequireApproval  bool                                      `json:"require_approval"`
	TargetId         string                                    `json:"target_id"`
	Uid              string                                    `json:"uid"`
	UpdateTime       string                                    `json:"update_time"`
	AnthosCluster    []clouddeploytarget.AnthosClusterState    `json:"anthos_cluster"`
	ExecutionConfigs []clouddeploytarget.ExecutionConfigsState `json:"execution_configs"`
	Gke              []clouddeploytarget.GkeState              `json:"gke"`
	Timeouts         *clouddeploytarget.TimeoutsState          `json:"timeouts"`
}
