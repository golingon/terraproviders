// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLoggingBillingAccountExclusion(name string, args LoggingBillingAccountExclusionArgs) *LoggingBillingAccountExclusion {
	return &LoggingBillingAccountExclusion{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LoggingBillingAccountExclusion)(nil)

type LoggingBillingAccountExclusion struct {
	Name  string
	Args  LoggingBillingAccountExclusionArgs
	state *loggingBillingAccountExclusionState
}

func (lbae *LoggingBillingAccountExclusion) Type() string {
	return "google_logging_billing_account_exclusion"
}

func (lbae *LoggingBillingAccountExclusion) LocalName() string {
	return lbae.Name
}

func (lbae *LoggingBillingAccountExclusion) Configuration() interface{} {
	return lbae.Args
}

func (lbae *LoggingBillingAccountExclusion) Attributes() loggingBillingAccountExclusionAttributes {
	return loggingBillingAccountExclusionAttributes{ref: terra.ReferenceResource(lbae)}
}

func (lbae *LoggingBillingAccountExclusion) ImportState(av io.Reader) error {
	lbae.state = &loggingBillingAccountExclusionState{}
	if err := json.NewDecoder(av).Decode(lbae.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lbae.Type(), lbae.LocalName(), err)
	}
	return nil
}

func (lbae *LoggingBillingAccountExclusion) State() (*loggingBillingAccountExclusionState, bool) {
	return lbae.state, lbae.state != nil
}

func (lbae *LoggingBillingAccountExclusion) StateMust() *loggingBillingAccountExclusionState {
	if lbae.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lbae.Type(), lbae.LocalName()))
	}
	return lbae.state
}

func (lbae *LoggingBillingAccountExclusion) DependOn() terra.Reference {
	return terra.ReferenceResource(lbae)
}

type LoggingBillingAccountExclusionArgs struct {
	// BillingAccount: string, required
	BillingAccount terra.StringValue `hcl:"billing_account,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// Filter: string, required
	Filter terra.StringValue `hcl:"filter,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// DependsOn contains resources that LoggingBillingAccountExclusion depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type loggingBillingAccountExclusionAttributes struct {
	ref terra.Reference
}

func (lbae loggingBillingAccountExclusionAttributes) BillingAccount() terra.StringValue {
	return terra.ReferenceString(lbae.ref.Append("billing_account"))
}

func (lbae loggingBillingAccountExclusionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(lbae.ref.Append("description"))
}

func (lbae loggingBillingAccountExclusionAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(lbae.ref.Append("disabled"))
}

func (lbae loggingBillingAccountExclusionAttributes) Filter() terra.StringValue {
	return terra.ReferenceString(lbae.ref.Append("filter"))
}

func (lbae loggingBillingAccountExclusionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lbae.ref.Append("id"))
}

func (lbae loggingBillingAccountExclusionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lbae.ref.Append("name"))
}

type loggingBillingAccountExclusionState struct {
	BillingAccount string `json:"billing_account"`
	Description    string `json:"description"`
	Disabled       bool   `json:"disabled"`
	Filter         string `json:"filter"`
	Id             string `json:"id"`
	Name           string `json:"name"`
}
