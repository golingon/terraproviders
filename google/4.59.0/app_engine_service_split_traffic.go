// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	appengineservicesplittraffic "github.com/golingon/terraproviders/google/4.59.0/appengineservicesplittraffic"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppEngineServiceSplitTraffic(name string, args AppEngineServiceSplitTrafficArgs) *AppEngineServiceSplitTraffic {
	return &AppEngineServiceSplitTraffic{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppEngineServiceSplitTraffic)(nil)

type AppEngineServiceSplitTraffic struct {
	Name  string
	Args  AppEngineServiceSplitTrafficArgs
	state *appEngineServiceSplitTrafficState
}

func (aesst *AppEngineServiceSplitTraffic) Type() string {
	return "google_app_engine_service_split_traffic"
}

func (aesst *AppEngineServiceSplitTraffic) LocalName() string {
	return aesst.Name
}

func (aesst *AppEngineServiceSplitTraffic) Configuration() interface{} {
	return aesst.Args
}

func (aesst *AppEngineServiceSplitTraffic) Attributes() appEngineServiceSplitTrafficAttributes {
	return appEngineServiceSplitTrafficAttributes{ref: terra.ReferenceResource(aesst)}
}

func (aesst *AppEngineServiceSplitTraffic) ImportState(av io.Reader) error {
	aesst.state = &appEngineServiceSplitTrafficState{}
	if err := json.NewDecoder(av).Decode(aesst.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aesst.Type(), aesst.LocalName(), err)
	}
	return nil
}

func (aesst *AppEngineServiceSplitTraffic) State() (*appEngineServiceSplitTrafficState, bool) {
	return aesst.state, aesst.state != nil
}

func (aesst *AppEngineServiceSplitTraffic) StateMust() *appEngineServiceSplitTrafficState {
	if aesst.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aesst.Type(), aesst.LocalName()))
	}
	return aesst.state
}

func (aesst *AppEngineServiceSplitTraffic) DependOn() terra.Reference {
	return terra.ReferenceResource(aesst)
}

type AppEngineServiceSplitTrafficArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MigrateTraffic: bool, optional
	MigrateTraffic terra.BoolValue `hcl:"migrate_traffic,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// Split: required
	Split *appengineservicesplittraffic.Split `hcl:"split,block" validate:"required"`
	// Timeouts: optional
	Timeouts *appengineservicesplittraffic.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AppEngineServiceSplitTraffic depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appEngineServiceSplitTrafficAttributes struct {
	ref terra.Reference
}

func (aesst appEngineServiceSplitTrafficAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aesst.ref.Append("id"))
}

func (aesst appEngineServiceSplitTrafficAttributes) MigrateTraffic() terra.BoolValue {
	return terra.ReferenceBool(aesst.ref.Append("migrate_traffic"))
}

func (aesst appEngineServiceSplitTrafficAttributes) Project() terra.StringValue {
	return terra.ReferenceString(aesst.ref.Append("project"))
}

func (aesst appEngineServiceSplitTrafficAttributes) Service() terra.StringValue {
	return terra.ReferenceString(aesst.ref.Append("service"))
}

func (aesst appEngineServiceSplitTrafficAttributes) Split() terra.ListValue[appengineservicesplittraffic.SplitAttributes] {
	return terra.ReferenceList[appengineservicesplittraffic.SplitAttributes](aesst.ref.Append("split"))
}

func (aesst appEngineServiceSplitTrafficAttributes) Timeouts() appengineservicesplittraffic.TimeoutsAttributes {
	return terra.ReferenceSingle[appengineservicesplittraffic.TimeoutsAttributes](aesst.ref.Append("timeouts"))
}

type appEngineServiceSplitTrafficState struct {
	Id             string                                      `json:"id"`
	MigrateTraffic bool                                        `json:"migrate_traffic"`
	Project        string                                      `json:"project"`
	Service        string                                      `json:"service"`
	Split          []appengineservicesplittraffic.SplitState   `json:"split"`
	Timeouts       *appengineservicesplittraffic.TimeoutsState `json:"timeouts"`
}
