// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	gkebackupbackupplaniambinding "github.com/golingon/terraproviders/google/4.59.0/gkebackupbackupplaniambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGkeBackupBackupPlanIamBinding(name string, args GkeBackupBackupPlanIamBindingArgs) *GkeBackupBackupPlanIamBinding {
	return &GkeBackupBackupPlanIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeBackupBackupPlanIamBinding)(nil)

type GkeBackupBackupPlanIamBinding struct {
	Name  string
	Args  GkeBackupBackupPlanIamBindingArgs
	state *gkeBackupBackupPlanIamBindingState
}

func (gbbpib *GkeBackupBackupPlanIamBinding) Type() string {
	return "google_gke_backup_backup_plan_iam_binding"
}

func (gbbpib *GkeBackupBackupPlanIamBinding) LocalName() string {
	return gbbpib.Name
}

func (gbbpib *GkeBackupBackupPlanIamBinding) Configuration() interface{} {
	return gbbpib.Args
}

func (gbbpib *GkeBackupBackupPlanIamBinding) Attributes() gkeBackupBackupPlanIamBindingAttributes {
	return gkeBackupBackupPlanIamBindingAttributes{ref: terra.ReferenceResource(gbbpib)}
}

func (gbbpib *GkeBackupBackupPlanIamBinding) ImportState(av io.Reader) error {
	gbbpib.state = &gkeBackupBackupPlanIamBindingState{}
	if err := json.NewDecoder(av).Decode(gbbpib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbbpib.Type(), gbbpib.LocalName(), err)
	}
	return nil
}

func (gbbpib *GkeBackupBackupPlanIamBinding) State() (*gkeBackupBackupPlanIamBindingState, bool) {
	return gbbpib.state, gbbpib.state != nil
}

func (gbbpib *GkeBackupBackupPlanIamBinding) StateMust() *gkeBackupBackupPlanIamBindingState {
	if gbbpib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbbpib.Type(), gbbpib.LocalName()))
	}
	return gbbpib.state
}

func (gbbpib *GkeBackupBackupPlanIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(gbbpib)
}

type GkeBackupBackupPlanIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *gkebackupbackupplaniambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that GkeBackupBackupPlanIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type gkeBackupBackupPlanIamBindingAttributes struct {
	ref terra.Reference
}

func (gbbpib gkeBackupBackupPlanIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(gbbpib.ref.Append("etag"))
}

func (gbbpib gkeBackupBackupPlanIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gbbpib.ref.Append("id"))
}

func (gbbpib gkeBackupBackupPlanIamBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceString(gbbpib.ref.Append("location"))
}

func (gbbpib gkeBackupBackupPlanIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](gbbpib.ref.Append("members"))
}

func (gbbpib gkeBackupBackupPlanIamBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gbbpib.ref.Append("name"))
}

func (gbbpib gkeBackupBackupPlanIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(gbbpib.ref.Append("project"))
}

func (gbbpib gkeBackupBackupPlanIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(gbbpib.ref.Append("role"))
}

func (gbbpib gkeBackupBackupPlanIamBindingAttributes) Condition() terra.ListValue[gkebackupbackupplaniambinding.ConditionAttributes] {
	return terra.ReferenceList[gkebackupbackupplaniambinding.ConditionAttributes](gbbpib.ref.Append("condition"))
}

type gkeBackupBackupPlanIamBindingState struct {
	Etag      string                                         `json:"etag"`
	Id        string                                         `json:"id"`
	Location  string                                         `json:"location"`
	Members   []string                                       `json:"members"`
	Name      string                                         `json:"name"`
	Project   string                                         `json:"project"`
	Role      string                                         `json:"role"`
	Condition []gkebackupbackupplaniambinding.ConditionState `json:"condition"`
}
