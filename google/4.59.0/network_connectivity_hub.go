// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	networkconnectivityhub "github.com/golingon/terraproviders/google/4.59.0/networkconnectivityhub"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkConnectivityHub(name string, args NetworkConnectivityHubArgs) *NetworkConnectivityHub {
	return &NetworkConnectivityHub{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkConnectivityHub)(nil)

type NetworkConnectivityHub struct {
	Name  string
	Args  NetworkConnectivityHubArgs
	state *networkConnectivityHubState
}

func (nch *NetworkConnectivityHub) Type() string {
	return "google_network_connectivity_hub"
}

func (nch *NetworkConnectivityHub) LocalName() string {
	return nch.Name
}

func (nch *NetworkConnectivityHub) Configuration() interface{} {
	return nch.Args
}

func (nch *NetworkConnectivityHub) Attributes() networkConnectivityHubAttributes {
	return networkConnectivityHubAttributes{ref: terra.ReferenceResource(nch)}
}

func (nch *NetworkConnectivityHub) ImportState(av io.Reader) error {
	nch.state = &networkConnectivityHubState{}
	if err := json.NewDecoder(av).Decode(nch.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nch.Type(), nch.LocalName(), err)
	}
	return nil
}

func (nch *NetworkConnectivityHub) State() (*networkConnectivityHubState, bool) {
	return nch.state, nch.state != nil
}

func (nch *NetworkConnectivityHub) StateMust() *networkConnectivityHubState {
	if nch.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nch.Type(), nch.LocalName()))
	}
	return nch.state
}

func (nch *NetworkConnectivityHub) DependOn() terra.Reference {
	return terra.ReferenceResource(nch)
}

type NetworkConnectivityHubArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RoutingVpcs: min=0
	RoutingVpcs []networkconnectivityhub.RoutingVpcs `hcl:"routing_vpcs,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *networkconnectivityhub.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkConnectivityHub depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkConnectivityHubAttributes struct {
	ref terra.Reference
}

func (nch networkConnectivityHubAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(nch.ref.Append("create_time"))
}

func (nch networkConnectivityHubAttributes) Description() terra.StringValue {
	return terra.ReferenceString(nch.ref.Append("description"))
}

func (nch networkConnectivityHubAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nch.ref.Append("id"))
}

func (nch networkConnectivityHubAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nch.ref.Append("labels"))
}

func (nch networkConnectivityHubAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nch.ref.Append("name"))
}

func (nch networkConnectivityHubAttributes) Project() terra.StringValue {
	return terra.ReferenceString(nch.ref.Append("project"))
}

func (nch networkConnectivityHubAttributes) State() terra.StringValue {
	return terra.ReferenceString(nch.ref.Append("state"))
}

func (nch networkConnectivityHubAttributes) UniqueId() terra.StringValue {
	return terra.ReferenceString(nch.ref.Append("unique_id"))
}

func (nch networkConnectivityHubAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(nch.ref.Append("update_time"))
}

func (nch networkConnectivityHubAttributes) RoutingVpcs() terra.ListValue[networkconnectivityhub.RoutingVpcsAttributes] {
	return terra.ReferenceList[networkconnectivityhub.RoutingVpcsAttributes](nch.ref.Append("routing_vpcs"))
}

func (nch networkConnectivityHubAttributes) Timeouts() networkconnectivityhub.TimeoutsAttributes {
	return terra.ReferenceSingle[networkconnectivityhub.TimeoutsAttributes](nch.ref.Append("timeouts"))
}

type networkConnectivityHubState struct {
	CreateTime  string                                    `json:"create_time"`
	Description string                                    `json:"description"`
	Id          string                                    `json:"id"`
	Labels      map[string]string                         `json:"labels"`
	Name        string                                    `json:"name"`
	Project     string                                    `json:"project"`
	State       string                                    `json:"state"`
	UniqueId    string                                    `json:"unique_id"`
	UpdateTime  string                                    `json:"update_time"`
	RoutingVpcs []networkconnectivityhub.RoutingVpcsState `json:"routing_vpcs"`
	Timeouts    *networkconnectivityhub.TimeoutsState     `json:"timeouts"`
}
