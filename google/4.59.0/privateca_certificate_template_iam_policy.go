// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivatecaCertificateTemplateIamPolicy(name string, args PrivatecaCertificateTemplateIamPolicyArgs) *PrivatecaCertificateTemplateIamPolicy {
	return &PrivatecaCertificateTemplateIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivatecaCertificateTemplateIamPolicy)(nil)

type PrivatecaCertificateTemplateIamPolicy struct {
	Name  string
	Args  PrivatecaCertificateTemplateIamPolicyArgs
	state *privatecaCertificateTemplateIamPolicyState
}

func (pctip *PrivatecaCertificateTemplateIamPolicy) Type() string {
	return "google_privateca_certificate_template_iam_policy"
}

func (pctip *PrivatecaCertificateTemplateIamPolicy) LocalName() string {
	return pctip.Name
}

func (pctip *PrivatecaCertificateTemplateIamPolicy) Configuration() interface{} {
	return pctip.Args
}

func (pctip *PrivatecaCertificateTemplateIamPolicy) Attributes() privatecaCertificateTemplateIamPolicyAttributes {
	return privatecaCertificateTemplateIamPolicyAttributes{ref: terra.ReferenceResource(pctip)}
}

func (pctip *PrivatecaCertificateTemplateIamPolicy) ImportState(av io.Reader) error {
	pctip.state = &privatecaCertificateTemplateIamPolicyState{}
	if err := json.NewDecoder(av).Decode(pctip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pctip.Type(), pctip.LocalName(), err)
	}
	return nil
}

func (pctip *PrivatecaCertificateTemplateIamPolicy) State() (*privatecaCertificateTemplateIamPolicyState, bool) {
	return pctip.state, pctip.state != nil
}

func (pctip *PrivatecaCertificateTemplateIamPolicy) StateMust() *privatecaCertificateTemplateIamPolicyState {
	if pctip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pctip.Type(), pctip.LocalName()))
	}
	return pctip.state
}

func (pctip *PrivatecaCertificateTemplateIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(pctip)
}

type PrivatecaCertificateTemplateIamPolicyArgs struct {
	// CertificateTemplate: string, required
	CertificateTemplate terra.StringValue `hcl:"certificate_template,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that PrivatecaCertificateTemplateIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privatecaCertificateTemplateIamPolicyAttributes struct {
	ref terra.Reference
}

func (pctip privatecaCertificateTemplateIamPolicyAttributes) CertificateTemplate() terra.StringValue {
	return terra.ReferenceString(pctip.ref.Append("certificate_template"))
}

func (pctip privatecaCertificateTemplateIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(pctip.ref.Append("etag"))
}

func (pctip privatecaCertificateTemplateIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pctip.ref.Append("id"))
}

func (pctip privatecaCertificateTemplateIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pctip.ref.Append("location"))
}

func (pctip privatecaCertificateTemplateIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(pctip.ref.Append("policy_data"))
}

func (pctip privatecaCertificateTemplateIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(pctip.ref.Append("project"))
}

type privatecaCertificateTemplateIamPolicyState struct {
	CertificateTemplate string `json:"certificate_template"`
	Etag                string `json:"etag"`
	Id                  string `json:"id"`
	Location            string `json:"location"`
	PolicyData          string `json:"policy_data"`
	Project             string `json:"project"`
}
