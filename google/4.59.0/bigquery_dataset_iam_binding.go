// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	bigquerydatasetiambinding "github.com/golingon/terraproviders/google/4.59.0/bigquerydatasetiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigqueryDatasetIamBinding(name string, args BigqueryDatasetIamBindingArgs) *BigqueryDatasetIamBinding {
	return &BigqueryDatasetIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryDatasetIamBinding)(nil)

type BigqueryDatasetIamBinding struct {
	Name  string
	Args  BigqueryDatasetIamBindingArgs
	state *bigqueryDatasetIamBindingState
}

func (bdib *BigqueryDatasetIamBinding) Type() string {
	return "google_bigquery_dataset_iam_binding"
}

func (bdib *BigqueryDatasetIamBinding) LocalName() string {
	return bdib.Name
}

func (bdib *BigqueryDatasetIamBinding) Configuration() interface{} {
	return bdib.Args
}

func (bdib *BigqueryDatasetIamBinding) Attributes() bigqueryDatasetIamBindingAttributes {
	return bigqueryDatasetIamBindingAttributes{ref: terra.ReferenceResource(bdib)}
}

func (bdib *BigqueryDatasetIamBinding) ImportState(av io.Reader) error {
	bdib.state = &bigqueryDatasetIamBindingState{}
	if err := json.NewDecoder(av).Decode(bdib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bdib.Type(), bdib.LocalName(), err)
	}
	return nil
}

func (bdib *BigqueryDatasetIamBinding) State() (*bigqueryDatasetIamBindingState, bool) {
	return bdib.state, bdib.state != nil
}

func (bdib *BigqueryDatasetIamBinding) StateMust() *bigqueryDatasetIamBindingState {
	if bdib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bdib.Type(), bdib.LocalName()))
	}
	return bdib.state
}

func (bdib *BigqueryDatasetIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(bdib)
}

type BigqueryDatasetIamBindingArgs struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *bigquerydatasetiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that BigqueryDatasetIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigqueryDatasetIamBindingAttributes struct {
	ref terra.Reference
}

func (bdib bigqueryDatasetIamBindingAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceString(bdib.ref.Append("dataset_id"))
}

func (bdib bigqueryDatasetIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(bdib.ref.Append("etag"))
}

func (bdib bigqueryDatasetIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bdib.ref.Append("id"))
}

func (bdib bigqueryDatasetIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](bdib.ref.Append("members"))
}

func (bdib bigqueryDatasetIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bdib.ref.Append("project"))
}

func (bdib bigqueryDatasetIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(bdib.ref.Append("role"))
}

func (bdib bigqueryDatasetIamBindingAttributes) Condition() terra.ListValue[bigquerydatasetiambinding.ConditionAttributes] {
	return terra.ReferenceList[bigquerydatasetiambinding.ConditionAttributes](bdib.ref.Append("condition"))
}

type bigqueryDatasetIamBindingState struct {
	DatasetId string                                     `json:"dataset_id"`
	Etag      string                                     `json:"etag"`
	Id        string                                     `json:"id"`
	Members   []string                                   `json:"members"`
	Project   string                                     `json:"project"`
	Role      string                                     `json:"role"`
	Condition []bigquerydatasetiambinding.ConditionState `json:"condition"`
}
