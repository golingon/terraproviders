// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datalosspreventionjobtrigger

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type InspectJob struct {
	// InspectTemplateName: string, required
	InspectTemplateName terra.StringValue `hcl:"inspect_template_name,attr" validate:"required"`
	// Actions: min=1
	Actions []Actions `hcl:"actions,block" validate:"min=1"`
	// StorageConfig: required
	StorageConfig *StorageConfig `hcl:"storage_config,block" validate:"required"`
}

type Actions struct {
	// PubSub: optional
	PubSub *PubSub `hcl:"pub_sub,block"`
	// PublishFindingsToCloudDataCatalog: optional
	PublishFindingsToCloudDataCatalog *PublishFindingsToCloudDataCatalog `hcl:"publish_findings_to_cloud_data_catalog,block"`
	// PublishSummaryToCscc: optional
	PublishSummaryToCscc *PublishSummaryToCscc `hcl:"publish_summary_to_cscc,block"`
	// SaveFindings: optional
	SaveFindings *SaveFindings `hcl:"save_findings,block"`
}

type PubSub struct {
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
}

type PublishFindingsToCloudDataCatalog struct{}

type PublishSummaryToCscc struct{}

type SaveFindings struct {
	// OutputConfig: required
	OutputConfig *OutputConfig `hcl:"output_config,block" validate:"required"`
}

type OutputConfig struct {
	// OutputSchema: string, optional
	OutputSchema terra.StringValue `hcl:"output_schema,attr"`
	// Table: required
	Table *Table `hcl:"table,block" validate:"required"`
}

type Table struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// TableId: string, optional
	TableId terra.StringValue `hcl:"table_id,attr"`
}

type StorageConfig struct {
	// BigQueryOptions: optional
	BigQueryOptions *BigQueryOptions `hcl:"big_query_options,block"`
	// CloudStorageOptions: optional
	CloudStorageOptions *CloudStorageOptions `hcl:"cloud_storage_options,block"`
	// DatastoreOptions: optional
	DatastoreOptions *DatastoreOptions `hcl:"datastore_options,block"`
	// TimespanConfig: optional
	TimespanConfig *TimespanConfig `hcl:"timespan_config,block"`
}

type BigQueryOptions struct {
	// RowsLimit: number, optional
	RowsLimit terra.NumberValue `hcl:"rows_limit,attr"`
	// RowsLimitPercent: number, optional
	RowsLimitPercent terra.NumberValue `hcl:"rows_limit_percent,attr"`
	// SampleMethod: string, optional
	SampleMethod terra.StringValue `hcl:"sample_method,attr"`
	// IdentifyingFields: min=0
	IdentifyingFields []IdentifyingFields `hcl:"identifying_fields,block" validate:"min=0"`
	// TableReference: required
	TableReference *TableReference `hcl:"table_reference,block" validate:"required"`
}

type IdentifyingFields struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type TableReference struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
}

type CloudStorageOptions struct {
	// BytesLimitPerFile: number, optional
	BytesLimitPerFile terra.NumberValue `hcl:"bytes_limit_per_file,attr"`
	// BytesLimitPerFilePercent: number, optional
	BytesLimitPerFilePercent terra.NumberValue `hcl:"bytes_limit_per_file_percent,attr"`
	// FileTypes: list of string, optional
	FileTypes terra.ListValue[terra.StringValue] `hcl:"file_types,attr"`
	// FilesLimitPercent: number, optional
	FilesLimitPercent terra.NumberValue `hcl:"files_limit_percent,attr"`
	// SampleMethod: string, optional
	SampleMethod terra.StringValue `hcl:"sample_method,attr"`
	// FileSet: required
	FileSet *FileSet `hcl:"file_set,block" validate:"required"`
}

type FileSet struct {
	// Url: string, optional
	Url terra.StringValue `hcl:"url,attr"`
	// RegexFileSet: optional
	RegexFileSet *RegexFileSet `hcl:"regex_file_set,block"`
}

type RegexFileSet struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// ExcludeRegex: list of string, optional
	ExcludeRegex terra.ListValue[terra.StringValue] `hcl:"exclude_regex,attr"`
	// IncludeRegex: list of string, optional
	IncludeRegex terra.ListValue[terra.StringValue] `hcl:"include_regex,attr"`
}

type DatastoreOptions struct {
	// Kind: required
	Kind *Kind `hcl:"kind,block" validate:"required"`
	// PartitionId: required
	PartitionId *PartitionId `hcl:"partition_id,block" validate:"required"`
}

type Kind struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type PartitionId struct {
	// NamespaceId: string, optional
	NamespaceId terra.StringValue `hcl:"namespace_id,attr"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
}

type TimespanConfig struct {
	// EnableAutoPopulationOfTimespanConfig: bool, optional
	EnableAutoPopulationOfTimespanConfig terra.BoolValue `hcl:"enable_auto_population_of_timespan_config,attr"`
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// TimestampField: required
	TimestampField *TimestampField `hcl:"timestamp_field,block" validate:"required"`
}

type TimestampField struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Triggers struct {
	// Schedule: optional
	Schedule *Schedule `hcl:"schedule,block"`
}

type Schedule struct {
	// RecurrencePeriodDuration: string, optional
	RecurrencePeriodDuration terra.StringValue `hcl:"recurrence_period_duration,attr"`
}

type InspectJobAttributes struct {
	ref terra.Reference
}

func (ij InspectJobAttributes) InternalRef() terra.Reference {
	return ij.ref
}

func (ij InspectJobAttributes) InternalWithRef(ref terra.Reference) InspectJobAttributes {
	return InspectJobAttributes{ref: ref}
}

func (ij InspectJobAttributes) InternalTokens() hclwrite.Tokens {
	return ij.ref.InternalTokens()
}

func (ij InspectJobAttributes) InspectTemplateName() terra.StringValue {
	return terra.ReferenceString(ij.ref.Append("inspect_template_name"))
}

func (ij InspectJobAttributes) Actions() terra.ListValue[ActionsAttributes] {
	return terra.ReferenceList[ActionsAttributes](ij.ref.Append("actions"))
}

func (ij InspectJobAttributes) StorageConfig() terra.ListValue[StorageConfigAttributes] {
	return terra.ReferenceList[StorageConfigAttributes](ij.ref.Append("storage_config"))
}

type ActionsAttributes struct {
	ref terra.Reference
}

func (a ActionsAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a ActionsAttributes) InternalWithRef(ref terra.Reference) ActionsAttributes {
	return ActionsAttributes{ref: ref}
}

func (a ActionsAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a ActionsAttributes) PubSub() terra.ListValue[PubSubAttributes] {
	return terra.ReferenceList[PubSubAttributes](a.ref.Append("pub_sub"))
}

func (a ActionsAttributes) PublishFindingsToCloudDataCatalog() terra.ListValue[PublishFindingsToCloudDataCatalogAttributes] {
	return terra.ReferenceList[PublishFindingsToCloudDataCatalogAttributes](a.ref.Append("publish_findings_to_cloud_data_catalog"))
}

func (a ActionsAttributes) PublishSummaryToCscc() terra.ListValue[PublishSummaryToCsccAttributes] {
	return terra.ReferenceList[PublishSummaryToCsccAttributes](a.ref.Append("publish_summary_to_cscc"))
}

func (a ActionsAttributes) SaveFindings() terra.ListValue[SaveFindingsAttributes] {
	return terra.ReferenceList[SaveFindingsAttributes](a.ref.Append("save_findings"))
}

type PubSubAttributes struct {
	ref terra.Reference
}

func (ps PubSubAttributes) InternalRef() terra.Reference {
	return ps.ref
}

func (ps PubSubAttributes) InternalWithRef(ref terra.Reference) PubSubAttributes {
	return PubSubAttributes{ref: ref}
}

func (ps PubSubAttributes) InternalTokens() hclwrite.Tokens {
	return ps.ref.InternalTokens()
}

func (ps PubSubAttributes) Topic() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("topic"))
}

type PublishFindingsToCloudDataCatalogAttributes struct {
	ref terra.Reference
}

func (pftcdc PublishFindingsToCloudDataCatalogAttributes) InternalRef() terra.Reference {
	return pftcdc.ref
}

func (pftcdc PublishFindingsToCloudDataCatalogAttributes) InternalWithRef(ref terra.Reference) PublishFindingsToCloudDataCatalogAttributes {
	return PublishFindingsToCloudDataCatalogAttributes{ref: ref}
}

func (pftcdc PublishFindingsToCloudDataCatalogAttributes) InternalTokens() hclwrite.Tokens {
	return pftcdc.ref.InternalTokens()
}

type PublishSummaryToCsccAttributes struct {
	ref terra.Reference
}

func (pstc PublishSummaryToCsccAttributes) InternalRef() terra.Reference {
	return pstc.ref
}

func (pstc PublishSummaryToCsccAttributes) InternalWithRef(ref terra.Reference) PublishSummaryToCsccAttributes {
	return PublishSummaryToCsccAttributes{ref: ref}
}

func (pstc PublishSummaryToCsccAttributes) InternalTokens() hclwrite.Tokens {
	return pstc.ref.InternalTokens()
}

type SaveFindingsAttributes struct {
	ref terra.Reference
}

func (sf SaveFindingsAttributes) InternalRef() terra.Reference {
	return sf.ref
}

func (sf SaveFindingsAttributes) InternalWithRef(ref terra.Reference) SaveFindingsAttributes {
	return SaveFindingsAttributes{ref: ref}
}

func (sf SaveFindingsAttributes) InternalTokens() hclwrite.Tokens {
	return sf.ref.InternalTokens()
}

func (sf SaveFindingsAttributes) OutputConfig() terra.ListValue[OutputConfigAttributes] {
	return terra.ReferenceList[OutputConfigAttributes](sf.ref.Append("output_config"))
}

type OutputConfigAttributes struct {
	ref terra.Reference
}

func (oc OutputConfigAttributes) InternalRef() terra.Reference {
	return oc.ref
}

func (oc OutputConfigAttributes) InternalWithRef(ref terra.Reference) OutputConfigAttributes {
	return OutputConfigAttributes{ref: ref}
}

func (oc OutputConfigAttributes) InternalTokens() hclwrite.Tokens {
	return oc.ref.InternalTokens()
}

func (oc OutputConfigAttributes) OutputSchema() terra.StringValue {
	return terra.ReferenceString(oc.ref.Append("output_schema"))
}

func (oc OutputConfigAttributes) Table() terra.ListValue[TableAttributes] {
	return terra.ReferenceList[TableAttributes](oc.ref.Append("table"))
}

type TableAttributes struct {
	ref terra.Reference
}

func (t TableAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TableAttributes) InternalWithRef(ref terra.Reference) TableAttributes {
	return TableAttributes{ref: ref}
}

func (t TableAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TableAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("dataset_id"))
}

func (t TableAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("project_id"))
}

func (t TableAttributes) TableId() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("table_id"))
}

type StorageConfigAttributes struct {
	ref terra.Reference
}

func (sc StorageConfigAttributes) InternalRef() terra.Reference {
	return sc.ref
}

func (sc StorageConfigAttributes) InternalWithRef(ref terra.Reference) StorageConfigAttributes {
	return StorageConfigAttributes{ref: ref}
}

func (sc StorageConfigAttributes) InternalTokens() hclwrite.Tokens {
	return sc.ref.InternalTokens()
}

func (sc StorageConfigAttributes) BigQueryOptions() terra.ListValue[BigQueryOptionsAttributes] {
	return terra.ReferenceList[BigQueryOptionsAttributes](sc.ref.Append("big_query_options"))
}

func (sc StorageConfigAttributes) CloudStorageOptions() terra.ListValue[CloudStorageOptionsAttributes] {
	return terra.ReferenceList[CloudStorageOptionsAttributes](sc.ref.Append("cloud_storage_options"))
}

func (sc StorageConfigAttributes) DatastoreOptions() terra.ListValue[DatastoreOptionsAttributes] {
	return terra.ReferenceList[DatastoreOptionsAttributes](sc.ref.Append("datastore_options"))
}

func (sc StorageConfigAttributes) TimespanConfig() terra.ListValue[TimespanConfigAttributes] {
	return terra.ReferenceList[TimespanConfigAttributes](sc.ref.Append("timespan_config"))
}

type BigQueryOptionsAttributes struct {
	ref terra.Reference
}

func (bqo BigQueryOptionsAttributes) InternalRef() terra.Reference {
	return bqo.ref
}

func (bqo BigQueryOptionsAttributes) InternalWithRef(ref terra.Reference) BigQueryOptionsAttributes {
	return BigQueryOptionsAttributes{ref: ref}
}

func (bqo BigQueryOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return bqo.ref.InternalTokens()
}

func (bqo BigQueryOptionsAttributes) RowsLimit() terra.NumberValue {
	return terra.ReferenceNumber(bqo.ref.Append("rows_limit"))
}

func (bqo BigQueryOptionsAttributes) RowsLimitPercent() terra.NumberValue {
	return terra.ReferenceNumber(bqo.ref.Append("rows_limit_percent"))
}

func (bqo BigQueryOptionsAttributes) SampleMethod() terra.StringValue {
	return terra.ReferenceString(bqo.ref.Append("sample_method"))
}

func (bqo BigQueryOptionsAttributes) IdentifyingFields() terra.ListValue[IdentifyingFieldsAttributes] {
	return terra.ReferenceList[IdentifyingFieldsAttributes](bqo.ref.Append("identifying_fields"))
}

func (bqo BigQueryOptionsAttributes) TableReference() terra.ListValue[TableReferenceAttributes] {
	return terra.ReferenceList[TableReferenceAttributes](bqo.ref.Append("table_reference"))
}

type IdentifyingFieldsAttributes struct {
	ref terra.Reference
}

func (_if IdentifyingFieldsAttributes) InternalRef() terra.Reference {
	return _if.ref
}

func (_if IdentifyingFieldsAttributes) InternalWithRef(ref terra.Reference) IdentifyingFieldsAttributes {
	return IdentifyingFieldsAttributes{ref: ref}
}

func (_if IdentifyingFieldsAttributes) InternalTokens() hclwrite.Tokens {
	return _if.ref.InternalTokens()
}

func (_if IdentifyingFieldsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(_if.ref.Append("name"))
}

type TableReferenceAttributes struct {
	ref terra.Reference
}

func (tr TableReferenceAttributes) InternalRef() terra.Reference {
	return tr.ref
}

func (tr TableReferenceAttributes) InternalWithRef(ref terra.Reference) TableReferenceAttributes {
	return TableReferenceAttributes{ref: ref}
}

func (tr TableReferenceAttributes) InternalTokens() hclwrite.Tokens {
	return tr.ref.InternalTokens()
}

func (tr TableReferenceAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceString(tr.ref.Append("dataset_id"))
}

func (tr TableReferenceAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceString(tr.ref.Append("project_id"))
}

func (tr TableReferenceAttributes) TableId() terra.StringValue {
	return terra.ReferenceString(tr.ref.Append("table_id"))
}

type CloudStorageOptionsAttributes struct {
	ref terra.Reference
}

func (cso CloudStorageOptionsAttributes) InternalRef() terra.Reference {
	return cso.ref
}

func (cso CloudStorageOptionsAttributes) InternalWithRef(ref terra.Reference) CloudStorageOptionsAttributes {
	return CloudStorageOptionsAttributes{ref: ref}
}

func (cso CloudStorageOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return cso.ref.InternalTokens()
}

func (cso CloudStorageOptionsAttributes) BytesLimitPerFile() terra.NumberValue {
	return terra.ReferenceNumber(cso.ref.Append("bytes_limit_per_file"))
}

func (cso CloudStorageOptionsAttributes) BytesLimitPerFilePercent() terra.NumberValue {
	return terra.ReferenceNumber(cso.ref.Append("bytes_limit_per_file_percent"))
}

func (cso CloudStorageOptionsAttributes) FileTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cso.ref.Append("file_types"))
}

func (cso CloudStorageOptionsAttributes) FilesLimitPercent() terra.NumberValue {
	return terra.ReferenceNumber(cso.ref.Append("files_limit_percent"))
}

func (cso CloudStorageOptionsAttributes) SampleMethod() terra.StringValue {
	return terra.ReferenceString(cso.ref.Append("sample_method"))
}

func (cso CloudStorageOptionsAttributes) FileSet() terra.ListValue[FileSetAttributes] {
	return terra.ReferenceList[FileSetAttributes](cso.ref.Append("file_set"))
}

type FileSetAttributes struct {
	ref terra.Reference
}

func (fs FileSetAttributes) InternalRef() terra.Reference {
	return fs.ref
}

func (fs FileSetAttributes) InternalWithRef(ref terra.Reference) FileSetAttributes {
	return FileSetAttributes{ref: ref}
}

func (fs FileSetAttributes) InternalTokens() hclwrite.Tokens {
	return fs.ref.InternalTokens()
}

func (fs FileSetAttributes) Url() terra.StringValue {
	return terra.ReferenceString(fs.ref.Append("url"))
}

func (fs FileSetAttributes) RegexFileSet() terra.ListValue[RegexFileSetAttributes] {
	return terra.ReferenceList[RegexFileSetAttributes](fs.ref.Append("regex_file_set"))
}

type RegexFileSetAttributes struct {
	ref terra.Reference
}

func (rfs RegexFileSetAttributes) InternalRef() terra.Reference {
	return rfs.ref
}

func (rfs RegexFileSetAttributes) InternalWithRef(ref terra.Reference) RegexFileSetAttributes {
	return RegexFileSetAttributes{ref: ref}
}

func (rfs RegexFileSetAttributes) InternalTokens() hclwrite.Tokens {
	return rfs.ref.InternalTokens()
}

func (rfs RegexFileSetAttributes) BucketName() terra.StringValue {
	return terra.ReferenceString(rfs.ref.Append("bucket_name"))
}

func (rfs RegexFileSetAttributes) ExcludeRegex() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](rfs.ref.Append("exclude_regex"))
}

func (rfs RegexFileSetAttributes) IncludeRegex() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](rfs.ref.Append("include_regex"))
}

type DatastoreOptionsAttributes struct {
	ref terra.Reference
}

func (do DatastoreOptionsAttributes) InternalRef() terra.Reference {
	return do.ref
}

func (do DatastoreOptionsAttributes) InternalWithRef(ref terra.Reference) DatastoreOptionsAttributes {
	return DatastoreOptionsAttributes{ref: ref}
}

func (do DatastoreOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return do.ref.InternalTokens()
}

func (do DatastoreOptionsAttributes) Kind() terra.ListValue[KindAttributes] {
	return terra.ReferenceList[KindAttributes](do.ref.Append("kind"))
}

func (do DatastoreOptionsAttributes) PartitionId() terra.ListValue[PartitionIdAttributes] {
	return terra.ReferenceList[PartitionIdAttributes](do.ref.Append("partition_id"))
}

type KindAttributes struct {
	ref terra.Reference
}

func (k KindAttributes) InternalRef() terra.Reference {
	return k.ref
}

func (k KindAttributes) InternalWithRef(ref terra.Reference) KindAttributes {
	return KindAttributes{ref: ref}
}

func (k KindAttributes) InternalTokens() hclwrite.Tokens {
	return k.ref.InternalTokens()
}

func (k KindAttributes) Name() terra.StringValue {
	return terra.ReferenceString(k.ref.Append("name"))
}

type PartitionIdAttributes struct {
	ref terra.Reference
}

func (pi PartitionIdAttributes) InternalRef() terra.Reference {
	return pi.ref
}

func (pi PartitionIdAttributes) InternalWithRef(ref terra.Reference) PartitionIdAttributes {
	return PartitionIdAttributes{ref: ref}
}

func (pi PartitionIdAttributes) InternalTokens() hclwrite.Tokens {
	return pi.ref.InternalTokens()
}

func (pi PartitionIdAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceString(pi.ref.Append("namespace_id"))
}

func (pi PartitionIdAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceString(pi.ref.Append("project_id"))
}

type TimespanConfigAttributes struct {
	ref terra.Reference
}

func (tc TimespanConfigAttributes) InternalRef() terra.Reference {
	return tc.ref
}

func (tc TimespanConfigAttributes) InternalWithRef(ref terra.Reference) TimespanConfigAttributes {
	return TimespanConfigAttributes{ref: ref}
}

func (tc TimespanConfigAttributes) InternalTokens() hclwrite.Tokens {
	return tc.ref.InternalTokens()
}

func (tc TimespanConfigAttributes) EnableAutoPopulationOfTimespanConfig() terra.BoolValue {
	return terra.ReferenceBool(tc.ref.Append("enable_auto_population_of_timespan_config"))
}

func (tc TimespanConfigAttributes) EndTime() terra.StringValue {
	return terra.ReferenceString(tc.ref.Append("end_time"))
}

func (tc TimespanConfigAttributes) StartTime() terra.StringValue {
	return terra.ReferenceString(tc.ref.Append("start_time"))
}

func (tc TimespanConfigAttributes) TimestampField() terra.ListValue[TimestampFieldAttributes] {
	return terra.ReferenceList[TimestampFieldAttributes](tc.ref.Append("timestamp_field"))
}

type TimestampFieldAttributes struct {
	ref terra.Reference
}

func (tf TimestampFieldAttributes) InternalRef() terra.Reference {
	return tf.ref
}

func (tf TimestampFieldAttributes) InternalWithRef(ref terra.Reference) TimestampFieldAttributes {
	return TimestampFieldAttributes{ref: ref}
}

func (tf TimestampFieldAttributes) InternalTokens() hclwrite.Tokens {
	return tf.ref.InternalTokens()
}

func (tf TimestampFieldAttributes) Name() terra.StringValue {
	return terra.ReferenceString(tf.ref.Append("name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type TriggersAttributes struct {
	ref terra.Reference
}

func (t TriggersAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TriggersAttributes) InternalWithRef(ref terra.Reference) TriggersAttributes {
	return TriggersAttributes{ref: ref}
}

func (t TriggersAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TriggersAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceList[ScheduleAttributes](t.ref.Append("schedule"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) RecurrencePeriodDuration() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("recurrence_period_duration"))
}

type InspectJobState struct {
	InspectTemplateName string               `json:"inspect_template_name"`
	Actions             []ActionsState       `json:"actions"`
	StorageConfig       []StorageConfigState `json:"storage_config"`
}

type ActionsState struct {
	PubSub                            []PubSubState                            `json:"pub_sub"`
	PublishFindingsToCloudDataCatalog []PublishFindingsToCloudDataCatalogState `json:"publish_findings_to_cloud_data_catalog"`
	PublishSummaryToCscc              []PublishSummaryToCsccState              `json:"publish_summary_to_cscc"`
	SaveFindings                      []SaveFindingsState                      `json:"save_findings"`
}

type PubSubState struct {
	Topic string `json:"topic"`
}

type PublishFindingsToCloudDataCatalogState struct{}

type PublishSummaryToCsccState struct{}

type SaveFindingsState struct {
	OutputConfig []OutputConfigState `json:"output_config"`
}

type OutputConfigState struct {
	OutputSchema string       `json:"output_schema"`
	Table        []TableState `json:"table"`
}

type TableState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	TableId   string `json:"table_id"`
}

type StorageConfigState struct {
	BigQueryOptions     []BigQueryOptionsState     `json:"big_query_options"`
	CloudStorageOptions []CloudStorageOptionsState `json:"cloud_storage_options"`
	DatastoreOptions    []DatastoreOptionsState    `json:"datastore_options"`
	TimespanConfig      []TimespanConfigState      `json:"timespan_config"`
}

type BigQueryOptionsState struct {
	RowsLimit         float64                  `json:"rows_limit"`
	RowsLimitPercent  float64                  `json:"rows_limit_percent"`
	SampleMethod      string                   `json:"sample_method"`
	IdentifyingFields []IdentifyingFieldsState `json:"identifying_fields"`
	TableReference    []TableReferenceState    `json:"table_reference"`
}

type IdentifyingFieldsState struct {
	Name string `json:"name"`
}

type TableReferenceState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	TableId   string `json:"table_id"`
}

type CloudStorageOptionsState struct {
	BytesLimitPerFile        float64        `json:"bytes_limit_per_file"`
	BytesLimitPerFilePercent float64        `json:"bytes_limit_per_file_percent"`
	FileTypes                []string       `json:"file_types"`
	FilesLimitPercent        float64        `json:"files_limit_percent"`
	SampleMethod             string         `json:"sample_method"`
	FileSet                  []FileSetState `json:"file_set"`
}

type FileSetState struct {
	Url          string              `json:"url"`
	RegexFileSet []RegexFileSetState `json:"regex_file_set"`
}

type RegexFileSetState struct {
	BucketName   string   `json:"bucket_name"`
	ExcludeRegex []string `json:"exclude_regex"`
	IncludeRegex []string `json:"include_regex"`
}

type DatastoreOptionsState struct {
	Kind        []KindState        `json:"kind"`
	PartitionId []PartitionIdState `json:"partition_id"`
}

type KindState struct {
	Name string `json:"name"`
}

type PartitionIdState struct {
	NamespaceId string `json:"namespace_id"`
	ProjectId   string `json:"project_id"`
}

type TimespanConfigState struct {
	EnableAutoPopulationOfTimespanConfig bool                  `json:"enable_auto_population_of_timespan_config"`
	EndTime                              string                `json:"end_time"`
	StartTime                            string                `json:"start_time"`
	TimestampField                       []TimestampFieldState `json:"timestamp_field"`
}

type TimestampFieldState struct {
	Name string `json:"name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TriggersState struct {
	Schedule []ScheduleState `json:"schedule"`
}

type ScheduleState struct {
	RecurrencePeriodDuration string `json:"recurrence_period_duration"`
}
