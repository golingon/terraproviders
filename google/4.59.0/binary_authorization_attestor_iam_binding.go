// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	binaryauthorizationattestoriambinding "github.com/golingon/terraproviders/google/4.59.0/binaryauthorizationattestoriambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBinaryAuthorizationAttestorIamBinding(name string, args BinaryAuthorizationAttestorIamBindingArgs) *BinaryAuthorizationAttestorIamBinding {
	return &BinaryAuthorizationAttestorIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BinaryAuthorizationAttestorIamBinding)(nil)

type BinaryAuthorizationAttestorIamBinding struct {
	Name  string
	Args  BinaryAuthorizationAttestorIamBindingArgs
	state *binaryAuthorizationAttestorIamBindingState
}

func (baaib *BinaryAuthorizationAttestorIamBinding) Type() string {
	return "google_binary_authorization_attestor_iam_binding"
}

func (baaib *BinaryAuthorizationAttestorIamBinding) LocalName() string {
	return baaib.Name
}

func (baaib *BinaryAuthorizationAttestorIamBinding) Configuration() interface{} {
	return baaib.Args
}

func (baaib *BinaryAuthorizationAttestorIamBinding) Attributes() binaryAuthorizationAttestorIamBindingAttributes {
	return binaryAuthorizationAttestorIamBindingAttributes{ref: terra.ReferenceResource(baaib)}
}

func (baaib *BinaryAuthorizationAttestorIamBinding) ImportState(av io.Reader) error {
	baaib.state = &binaryAuthorizationAttestorIamBindingState{}
	if err := json.NewDecoder(av).Decode(baaib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", baaib.Type(), baaib.LocalName(), err)
	}
	return nil
}

func (baaib *BinaryAuthorizationAttestorIamBinding) State() (*binaryAuthorizationAttestorIamBindingState, bool) {
	return baaib.state, baaib.state != nil
}

func (baaib *BinaryAuthorizationAttestorIamBinding) StateMust() *binaryAuthorizationAttestorIamBindingState {
	if baaib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", baaib.Type(), baaib.LocalName()))
	}
	return baaib.state
}

func (baaib *BinaryAuthorizationAttestorIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(baaib)
}

type BinaryAuthorizationAttestorIamBindingArgs struct {
	// Attestor: string, required
	Attestor terra.StringValue `hcl:"attestor,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *binaryauthorizationattestoriambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that BinaryAuthorizationAttestorIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type binaryAuthorizationAttestorIamBindingAttributes struct {
	ref terra.Reference
}

func (baaib binaryAuthorizationAttestorIamBindingAttributes) Attestor() terra.StringValue {
	return terra.ReferenceString(baaib.ref.Append("attestor"))
}

func (baaib binaryAuthorizationAttestorIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(baaib.ref.Append("etag"))
}

func (baaib binaryAuthorizationAttestorIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(baaib.ref.Append("id"))
}

func (baaib binaryAuthorizationAttestorIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](baaib.ref.Append("members"))
}

func (baaib binaryAuthorizationAttestorIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(baaib.ref.Append("project"))
}

func (baaib binaryAuthorizationAttestorIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(baaib.ref.Append("role"))
}

func (baaib binaryAuthorizationAttestorIamBindingAttributes) Condition() terra.ListValue[binaryauthorizationattestoriambinding.ConditionAttributes] {
	return terra.ReferenceList[binaryauthorizationattestoriambinding.ConditionAttributes](baaib.ref.Append("condition"))
}

type binaryAuthorizationAttestorIamBindingState struct {
	Attestor  string                                                 `json:"attestor"`
	Etag      string                                                 `json:"etag"`
	Id        string                                                 `json:"id"`
	Members   []string                                               `json:"members"`
	Project   string                                                 `json:"project"`
	Role      string                                                 `json:"role"`
	Condition []binaryauthorizationattestoriambinding.ConditionState `json:"condition"`
}
