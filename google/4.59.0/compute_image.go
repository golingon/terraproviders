// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeimage "github.com/golingon/terraproviders/google/4.59.0/computeimage"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeImage(name string, args ComputeImageArgs) *ComputeImage {
	return &ComputeImage{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeImage)(nil)

type ComputeImage struct {
	Name  string
	Args  ComputeImageArgs
	state *computeImageState
}

func (ci *ComputeImage) Type() string {
	return "google_compute_image"
}

func (ci *ComputeImage) LocalName() string {
	return ci.Name
}

func (ci *ComputeImage) Configuration() interface{} {
	return ci.Args
}

func (ci *ComputeImage) Attributes() computeImageAttributes {
	return computeImageAttributes{ref: terra.ReferenceResource(ci)}
}

func (ci *ComputeImage) ImportState(av io.Reader) error {
	ci.state = &computeImageState{}
	if err := json.NewDecoder(av).Decode(ci.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ci.Type(), ci.LocalName(), err)
	}
	return nil
}

func (ci *ComputeImage) State() (*computeImageState, bool) {
	return ci.state, ci.state != nil
}

func (ci *ComputeImage) StateMust() *computeImageState {
	if ci.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ci.Type(), ci.LocalName()))
	}
	return ci.state
}

func (ci *ComputeImage) DependOn() terra.Reference {
	return terra.ReferenceResource(ci)
}

type ComputeImageArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// Family: string, optional
	Family terra.StringValue `hcl:"family,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Licenses: list of string, optional
	Licenses terra.ListValue[terra.StringValue] `hcl:"licenses,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SourceDisk: string, optional
	SourceDisk terra.StringValue `hcl:"source_disk,attr"`
	// SourceImage: string, optional
	SourceImage terra.StringValue `hcl:"source_image,attr"`
	// SourceSnapshot: string, optional
	SourceSnapshot terra.StringValue `hcl:"source_snapshot,attr"`
	// GuestOsFeatures: min=0
	GuestOsFeatures []computeimage.GuestOsFeatures `hcl:"guest_os_features,block" validate:"min=0"`
	// ImageEncryptionKey: optional
	ImageEncryptionKey *computeimage.ImageEncryptionKey `hcl:"image_encryption_key,block"`
	// RawDisk: optional
	RawDisk *computeimage.RawDisk `hcl:"raw_disk,block"`
	// Timeouts: optional
	Timeouts *computeimage.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeImage depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeImageAttributes struct {
	ref terra.Reference
}

func (ci computeImageAttributes) ArchiveSizeBytes() terra.NumberValue {
	return terra.ReferenceNumber(ci.ref.Append("archive_size_bytes"))
}

func (ci computeImageAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("creation_timestamp"))
}

func (ci computeImageAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("description"))
}

func (ci computeImageAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceNumber(ci.ref.Append("disk_size_gb"))
}

func (ci computeImageAttributes) Family() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("family"))
}

func (ci computeImageAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("id"))
}

func (ci computeImageAttributes) LabelFingerprint() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("label_fingerprint"))
}

func (ci computeImageAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ci.ref.Append("labels"))
}

func (ci computeImageAttributes) Licenses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ci.ref.Append("licenses"))
}

func (ci computeImageAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("name"))
}

func (ci computeImageAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("project"))
}

func (ci computeImageAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("self_link"))
}

func (ci computeImageAttributes) SourceDisk() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("source_disk"))
}

func (ci computeImageAttributes) SourceImage() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("source_image"))
}

func (ci computeImageAttributes) SourceSnapshot() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("source_snapshot"))
}

func (ci computeImageAttributes) GuestOsFeatures() terra.SetValue[computeimage.GuestOsFeaturesAttributes] {
	return terra.ReferenceSet[computeimage.GuestOsFeaturesAttributes](ci.ref.Append("guest_os_features"))
}

func (ci computeImageAttributes) ImageEncryptionKey() terra.ListValue[computeimage.ImageEncryptionKeyAttributes] {
	return terra.ReferenceList[computeimage.ImageEncryptionKeyAttributes](ci.ref.Append("image_encryption_key"))
}

func (ci computeImageAttributes) RawDisk() terra.ListValue[computeimage.RawDiskAttributes] {
	return terra.ReferenceList[computeimage.RawDiskAttributes](ci.ref.Append("raw_disk"))
}

func (ci computeImageAttributes) Timeouts() computeimage.TimeoutsAttributes {
	return terra.ReferenceSingle[computeimage.TimeoutsAttributes](ci.ref.Append("timeouts"))
}

type computeImageState struct {
	ArchiveSizeBytes   float64                                `json:"archive_size_bytes"`
	CreationTimestamp  string                                 `json:"creation_timestamp"`
	Description        string                                 `json:"description"`
	DiskSizeGb         float64                                `json:"disk_size_gb"`
	Family             string                                 `json:"family"`
	Id                 string                                 `json:"id"`
	LabelFingerprint   string                                 `json:"label_fingerprint"`
	Labels             map[string]string                      `json:"labels"`
	Licenses           []string                               `json:"licenses"`
	Name               string                                 `json:"name"`
	Project            string                                 `json:"project"`
	SelfLink           string                                 `json:"self_link"`
	SourceDisk         string                                 `json:"source_disk"`
	SourceImage        string                                 `json:"source_image"`
	SourceSnapshot     string                                 `json:"source_snapshot"`
	GuestOsFeatures    []computeimage.GuestOsFeaturesState    `json:"guest_os_features"`
	ImageEncryptionKey []computeimage.ImageEncryptionKeyState `json:"image_encryption_key"`
	RawDisk            []computeimage.RawDiskState            `json:"raw_disk"`
	Timeouts           *computeimage.TimeoutsState            `json:"timeouts"`
}
