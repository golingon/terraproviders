// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataCatalogTagTemplateIamPolicy(name string, args DataCatalogTagTemplateIamPolicyArgs) *DataCatalogTagTemplateIamPolicy {
	return &DataCatalogTagTemplateIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataCatalogTagTemplateIamPolicy)(nil)

type DataCatalogTagTemplateIamPolicy struct {
	Name  string
	Args  DataCatalogTagTemplateIamPolicyArgs
	state *dataCatalogTagTemplateIamPolicyState
}

func (dcttip *DataCatalogTagTemplateIamPolicy) Type() string {
	return "google_data_catalog_tag_template_iam_policy"
}

func (dcttip *DataCatalogTagTemplateIamPolicy) LocalName() string {
	return dcttip.Name
}

func (dcttip *DataCatalogTagTemplateIamPolicy) Configuration() interface{} {
	return dcttip.Args
}

func (dcttip *DataCatalogTagTemplateIamPolicy) Attributes() dataCatalogTagTemplateIamPolicyAttributes {
	return dataCatalogTagTemplateIamPolicyAttributes{ref: terra.ReferenceResource(dcttip)}
}

func (dcttip *DataCatalogTagTemplateIamPolicy) ImportState(av io.Reader) error {
	dcttip.state = &dataCatalogTagTemplateIamPolicyState{}
	if err := json.NewDecoder(av).Decode(dcttip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcttip.Type(), dcttip.LocalName(), err)
	}
	return nil
}

func (dcttip *DataCatalogTagTemplateIamPolicy) State() (*dataCatalogTagTemplateIamPolicyState, bool) {
	return dcttip.state, dcttip.state != nil
}

func (dcttip *DataCatalogTagTemplateIamPolicy) StateMust() *dataCatalogTagTemplateIamPolicyState {
	if dcttip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcttip.Type(), dcttip.LocalName()))
	}
	return dcttip.state
}

func (dcttip *DataCatalogTagTemplateIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(dcttip)
}

type DataCatalogTagTemplateIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// TagTemplate: string, required
	TagTemplate terra.StringValue `hcl:"tag_template,attr" validate:"required"`
	// DependsOn contains resources that DataCatalogTagTemplateIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataCatalogTagTemplateIamPolicyAttributes struct {
	ref terra.Reference
}

func (dcttip dataCatalogTagTemplateIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dcttip.ref.Append("etag"))
}

func (dcttip dataCatalogTagTemplateIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dcttip.ref.Append("id"))
}

func (dcttip dataCatalogTagTemplateIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(dcttip.ref.Append("policy_data"))
}

func (dcttip dataCatalogTagTemplateIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dcttip.ref.Append("project"))
}

func (dcttip dataCatalogTagTemplateIamPolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dcttip.ref.Append("region"))
}

func (dcttip dataCatalogTagTemplateIamPolicyAttributes) TagTemplate() terra.StringValue {
	return terra.ReferenceString(dcttip.ref.Append("tag_template"))
}

type dataCatalogTagTemplateIamPolicyState struct {
	Etag        string `json:"etag"`
	Id          string `json:"id"`
	PolicyData  string `json:"policy_data"`
	Project     string `json:"project"`
	Region      string `json:"region"`
	TagTemplate string `json:"tag_template"`
}
