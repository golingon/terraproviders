// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	eventarcchannel "github.com/golingon/terraproviders/google/4.59.0/eventarcchannel"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEventarcChannel(name string, args EventarcChannelArgs) *EventarcChannel {
	return &EventarcChannel{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EventarcChannel)(nil)

type EventarcChannel struct {
	Name  string
	Args  EventarcChannelArgs
	state *eventarcChannelState
}

func (ec *EventarcChannel) Type() string {
	return "google_eventarc_channel"
}

func (ec *EventarcChannel) LocalName() string {
	return ec.Name
}

func (ec *EventarcChannel) Configuration() interface{} {
	return ec.Args
}

func (ec *EventarcChannel) Attributes() eventarcChannelAttributes {
	return eventarcChannelAttributes{ref: terra.ReferenceResource(ec)}
}

func (ec *EventarcChannel) ImportState(av io.Reader) error {
	ec.state = &eventarcChannelState{}
	if err := json.NewDecoder(av).Decode(ec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ec.Type(), ec.LocalName(), err)
	}
	return nil
}

func (ec *EventarcChannel) State() (*eventarcChannelState, bool) {
	return ec.state, ec.state != nil
}

func (ec *EventarcChannel) StateMust() *eventarcChannelState {
	if ec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ec.Type(), ec.LocalName()))
	}
	return ec.state
}

func (ec *EventarcChannel) DependOn() terra.Reference {
	return terra.ReferenceResource(ec)
}

type EventarcChannelArgs struct {
	// CryptoKeyName: string, optional
	CryptoKeyName terra.StringValue `hcl:"crypto_key_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ThirdPartyProvider: string, optional
	ThirdPartyProvider terra.StringValue `hcl:"third_party_provider,attr"`
	// Timeouts: optional
	Timeouts *eventarcchannel.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EventarcChannel depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eventarcChannelAttributes struct {
	ref terra.Reference
}

func (ec eventarcChannelAttributes) ActivationToken() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("activation_token"))
}

func (ec eventarcChannelAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("create_time"))
}

func (ec eventarcChannelAttributes) CryptoKeyName() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("crypto_key_name"))
}

func (ec eventarcChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("id"))
}

func (ec eventarcChannelAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("location"))
}

func (ec eventarcChannelAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("name"))
}

func (ec eventarcChannelAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("project"))
}

func (ec eventarcChannelAttributes) PubsubTopic() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("pubsub_topic"))
}

func (ec eventarcChannelAttributes) State() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("state"))
}

func (ec eventarcChannelAttributes) ThirdPartyProvider() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("third_party_provider"))
}

func (ec eventarcChannelAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("uid"))
}

func (ec eventarcChannelAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("update_time"))
}

func (ec eventarcChannelAttributes) Timeouts() eventarcchannel.TimeoutsAttributes {
	return terra.ReferenceSingle[eventarcchannel.TimeoutsAttributes](ec.ref.Append("timeouts"))
}

type eventarcChannelState struct {
	ActivationToken    string                         `json:"activation_token"`
	CreateTime         string                         `json:"create_time"`
	CryptoKeyName      string                         `json:"crypto_key_name"`
	Id                 string                         `json:"id"`
	Location           string                         `json:"location"`
	Name               string                         `json:"name"`
	Project            string                         `json:"project"`
	PubsubTopic        string                         `json:"pubsub_topic"`
	State              string                         `json:"state"`
	ThirdPartyProvider string                         `json:"third_party_provider"`
	Uid                string                         `json:"uid"`
	UpdateTime         string                         `json:"update_time"`
	Timeouts           *eventarcchannel.TimeoutsState `json:"timeouts"`
}
