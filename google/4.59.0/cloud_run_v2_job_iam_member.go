// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	cloudrunv2jobiammember "github.com/golingon/terraproviders/google/4.59.0/cloudrunv2jobiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudRunV2JobIamMember(name string, args CloudRunV2JobIamMemberArgs) *CloudRunV2JobIamMember {
	return &CloudRunV2JobIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudRunV2JobIamMember)(nil)

type CloudRunV2JobIamMember struct {
	Name  string
	Args  CloudRunV2JobIamMemberArgs
	state *cloudRunV2JobIamMemberState
}

func (crvjim *CloudRunV2JobIamMember) Type() string {
	return "google_cloud_run_v2_job_iam_member"
}

func (crvjim *CloudRunV2JobIamMember) LocalName() string {
	return crvjim.Name
}

func (crvjim *CloudRunV2JobIamMember) Configuration() interface{} {
	return crvjim.Args
}

func (crvjim *CloudRunV2JobIamMember) Attributes() cloudRunV2JobIamMemberAttributes {
	return cloudRunV2JobIamMemberAttributes{ref: terra.ReferenceResource(crvjim)}
}

func (crvjim *CloudRunV2JobIamMember) ImportState(av io.Reader) error {
	crvjim.state = &cloudRunV2JobIamMemberState{}
	if err := json.NewDecoder(av).Decode(crvjim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crvjim.Type(), crvjim.LocalName(), err)
	}
	return nil
}

func (crvjim *CloudRunV2JobIamMember) State() (*cloudRunV2JobIamMemberState, bool) {
	return crvjim.state, crvjim.state != nil
}

func (crvjim *CloudRunV2JobIamMember) StateMust() *cloudRunV2JobIamMemberState {
	if crvjim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crvjim.Type(), crvjim.LocalName()))
	}
	return crvjim.state
}

func (crvjim *CloudRunV2JobIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(crvjim)
}

type CloudRunV2JobIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *cloudrunv2jobiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that CloudRunV2JobIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudRunV2JobIamMemberAttributes struct {
	ref terra.Reference
}

func (crvjim cloudRunV2JobIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(crvjim.ref.Append("etag"))
}

func (crvjim cloudRunV2JobIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crvjim.ref.Append("id"))
}

func (crvjim cloudRunV2JobIamMemberAttributes) Location() terra.StringValue {
	return terra.ReferenceString(crvjim.ref.Append("location"))
}

func (crvjim cloudRunV2JobIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(crvjim.ref.Append("member"))
}

func (crvjim cloudRunV2JobIamMemberAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crvjim.ref.Append("name"))
}

func (crvjim cloudRunV2JobIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crvjim.ref.Append("project"))
}

func (crvjim cloudRunV2JobIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(crvjim.ref.Append("role"))
}

func (crvjim cloudRunV2JobIamMemberAttributes) Condition() terra.ListValue[cloudrunv2jobiammember.ConditionAttributes] {
	return terra.ReferenceList[cloudrunv2jobiammember.ConditionAttributes](crvjim.ref.Append("condition"))
}

type cloudRunV2JobIamMemberState struct {
	Etag      string                                  `json:"etag"`
	Id        string                                  `json:"id"`
	Location  string                                  `json:"location"`
	Member    string                                  `json:"member"`
	Name      string                                  `json:"name"`
	Project   string                                  `json:"project"`
	Role      string                                  `json:"role"`
	Condition []cloudrunv2jobiammember.ConditionState `json:"condition"`
}
