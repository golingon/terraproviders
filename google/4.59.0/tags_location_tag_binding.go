// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	tagslocationtagbinding "github.com/golingon/terraproviders/google/4.59.0/tagslocationtagbinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewTagsLocationTagBinding(name string, args TagsLocationTagBindingArgs) *TagsLocationTagBinding {
	return &TagsLocationTagBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TagsLocationTagBinding)(nil)

type TagsLocationTagBinding struct {
	Name  string
	Args  TagsLocationTagBindingArgs
	state *tagsLocationTagBindingState
}

func (tltb *TagsLocationTagBinding) Type() string {
	return "google_tags_location_tag_binding"
}

func (tltb *TagsLocationTagBinding) LocalName() string {
	return tltb.Name
}

func (tltb *TagsLocationTagBinding) Configuration() interface{} {
	return tltb.Args
}

func (tltb *TagsLocationTagBinding) Attributes() tagsLocationTagBindingAttributes {
	return tagsLocationTagBindingAttributes{ref: terra.ReferenceResource(tltb)}
}

func (tltb *TagsLocationTagBinding) ImportState(av io.Reader) error {
	tltb.state = &tagsLocationTagBindingState{}
	if err := json.NewDecoder(av).Decode(tltb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tltb.Type(), tltb.LocalName(), err)
	}
	return nil
}

func (tltb *TagsLocationTagBinding) State() (*tagsLocationTagBindingState, bool) {
	return tltb.state, tltb.state != nil
}

func (tltb *TagsLocationTagBinding) StateMust() *tagsLocationTagBindingState {
	if tltb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tltb.Type(), tltb.LocalName()))
	}
	return tltb.state
}

func (tltb *TagsLocationTagBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(tltb)
}

type TagsLocationTagBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// TagValue: string, required
	TagValue terra.StringValue `hcl:"tag_value,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *tagslocationtagbinding.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that TagsLocationTagBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type tagsLocationTagBindingAttributes struct {
	ref terra.Reference
}

func (tltb tagsLocationTagBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(tltb.ref.Append("id"))
}

func (tltb tagsLocationTagBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceString(tltb.ref.Append("location"))
}

func (tltb tagsLocationTagBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceString(tltb.ref.Append("name"))
}

func (tltb tagsLocationTagBindingAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(tltb.ref.Append("parent"))
}

func (tltb tagsLocationTagBindingAttributes) TagValue() terra.StringValue {
	return terra.ReferenceString(tltb.ref.Append("tag_value"))
}

func (tltb tagsLocationTagBindingAttributes) Timeouts() tagslocationtagbinding.TimeoutsAttributes {
	return terra.ReferenceSingle[tagslocationtagbinding.TimeoutsAttributes](tltb.ref.Append("timeouts"))
}

type tagsLocationTagBindingState struct {
	Id       string                                `json:"id"`
	Location string                                `json:"location"`
	Name     string                                `json:"name"`
	Parent   string                                `json:"parent"`
	TagValue string                                `json:"tag_value"`
	Timeouts *tagslocationtagbinding.TimeoutsState `json:"timeouts"`
}
