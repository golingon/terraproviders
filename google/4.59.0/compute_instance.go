// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeinstance "github.com/golingon/terraproviders/google/4.59.0/computeinstance"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeInstance(name string, args ComputeInstanceArgs) *ComputeInstance {
	return &ComputeInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeInstance)(nil)

type ComputeInstance struct {
	Name  string
	Args  ComputeInstanceArgs
	state *computeInstanceState
}

func (ci *ComputeInstance) Type() string {
	return "google_compute_instance"
}

func (ci *ComputeInstance) LocalName() string {
	return ci.Name
}

func (ci *ComputeInstance) Configuration() interface{} {
	return ci.Args
}

func (ci *ComputeInstance) Attributes() computeInstanceAttributes {
	return computeInstanceAttributes{ref: terra.ReferenceResource(ci)}
}

func (ci *ComputeInstance) ImportState(av io.Reader) error {
	ci.state = &computeInstanceState{}
	if err := json.NewDecoder(av).Decode(ci.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ci.Type(), ci.LocalName(), err)
	}
	return nil
}

func (ci *ComputeInstance) State() (*computeInstanceState, bool) {
	return ci.state, ci.state != nil
}

func (ci *ComputeInstance) StateMust() *computeInstanceState {
	if ci.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ci.Type(), ci.LocalName()))
	}
	return ci.state
}

func (ci *ComputeInstance) DependOn() terra.Reference {
	return terra.ReferenceResource(ci)
}

type ComputeInstanceArgs struct {
	// AllowStoppingForUpdate: bool, optional
	AllowStoppingForUpdate terra.BoolValue `hcl:"allow_stopping_for_update,attr"`
	// CanIpForward: bool, optional
	CanIpForward terra.BoolValue `hcl:"can_ip_forward,attr"`
	// DeletionProtection: bool, optional
	DeletionProtection terra.BoolValue `hcl:"deletion_protection,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DesiredStatus: string, optional
	DesiredStatus terra.StringValue `hcl:"desired_status,attr"`
	// EnableDisplay: bool, optional
	EnableDisplay terra.BoolValue `hcl:"enable_display,attr"`
	// Hostname: string, optional
	Hostname terra.StringValue `hcl:"hostname,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// MachineType: string, required
	MachineType terra.StringValue `hcl:"machine_type,attr" validate:"required"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// MetadataStartupScript: string, optional
	MetadataStartupScript terra.StringValue `hcl:"metadata_startup_script,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ResourcePolicies: list of string, optional
	ResourcePolicies terra.ListValue[terra.StringValue] `hcl:"resource_policies,attr"`
	// Tags: set of string, optional
	Tags terra.SetValue[terra.StringValue] `hcl:"tags,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// GuestAccelerator: min=0
	GuestAccelerator []computeinstance.GuestAccelerator `hcl:"guest_accelerator,block" validate:"min=0"`
	// AdvancedMachineFeatures: optional
	AdvancedMachineFeatures *computeinstance.AdvancedMachineFeatures `hcl:"advanced_machine_features,block"`
	// AttachedDisk: min=0
	AttachedDisk []computeinstance.AttachedDisk `hcl:"attached_disk,block" validate:"min=0"`
	// BootDisk: required
	BootDisk *computeinstance.BootDisk `hcl:"boot_disk,block" validate:"required"`
	// ConfidentialInstanceConfig: optional
	ConfidentialInstanceConfig *computeinstance.ConfidentialInstanceConfig `hcl:"confidential_instance_config,block"`
	// NetworkInterface: min=1
	NetworkInterface []computeinstance.NetworkInterface `hcl:"network_interface,block" validate:"min=1"`
	// ReservationAffinity: optional
	ReservationAffinity *computeinstance.ReservationAffinity `hcl:"reservation_affinity,block"`
	// Scheduling: optional
	Scheduling *computeinstance.Scheduling `hcl:"scheduling,block"`
	// ScratchDisk: min=0
	ScratchDisk []computeinstance.ScratchDisk `hcl:"scratch_disk,block" validate:"min=0"`
	// ServiceAccount: optional
	ServiceAccount *computeinstance.ServiceAccount `hcl:"service_account,block"`
	// ShieldedInstanceConfig: optional
	ShieldedInstanceConfig *computeinstance.ShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
	// Timeouts: optional
	Timeouts *computeinstance.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeInstance depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeInstanceAttributes struct {
	ref terra.Reference
}

func (ci computeInstanceAttributes) AllowStoppingForUpdate() terra.BoolValue {
	return terra.ReferenceBool(ci.ref.Append("allow_stopping_for_update"))
}

func (ci computeInstanceAttributes) CanIpForward() terra.BoolValue {
	return terra.ReferenceBool(ci.ref.Append("can_ip_forward"))
}

func (ci computeInstanceAttributes) CpuPlatform() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("cpu_platform"))
}

func (ci computeInstanceAttributes) CurrentStatus() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("current_status"))
}

func (ci computeInstanceAttributes) DeletionProtection() terra.BoolValue {
	return terra.ReferenceBool(ci.ref.Append("deletion_protection"))
}

func (ci computeInstanceAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("description"))
}

func (ci computeInstanceAttributes) DesiredStatus() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("desired_status"))
}

func (ci computeInstanceAttributes) EnableDisplay() terra.BoolValue {
	return terra.ReferenceBool(ci.ref.Append("enable_display"))
}

func (ci computeInstanceAttributes) Hostname() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("hostname"))
}

func (ci computeInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("id"))
}

func (ci computeInstanceAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("instance_id"))
}

func (ci computeInstanceAttributes) LabelFingerprint() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("label_fingerprint"))
}

func (ci computeInstanceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ci.ref.Append("labels"))
}

func (ci computeInstanceAttributes) MachineType() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("machine_type"))
}

func (ci computeInstanceAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ci.ref.Append("metadata"))
}

func (ci computeInstanceAttributes) MetadataFingerprint() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("metadata_fingerprint"))
}

func (ci computeInstanceAttributes) MetadataStartupScript() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("metadata_startup_script"))
}

func (ci computeInstanceAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("min_cpu_platform"))
}

func (ci computeInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("name"))
}

func (ci computeInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("project"))
}

func (ci computeInstanceAttributes) ResourcePolicies() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ci.ref.Append("resource_policies"))
}

func (ci computeInstanceAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("self_link"))
}

func (ci computeInstanceAttributes) Tags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ci.ref.Append("tags"))
}

func (ci computeInstanceAttributes) TagsFingerprint() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("tags_fingerprint"))
}

func (ci computeInstanceAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("zone"))
}

func (ci computeInstanceAttributes) GuestAccelerator() terra.ListValue[computeinstance.GuestAcceleratorAttributes] {
	return terra.ReferenceList[computeinstance.GuestAcceleratorAttributes](ci.ref.Append("guest_accelerator"))
}

func (ci computeInstanceAttributes) AdvancedMachineFeatures() terra.ListValue[computeinstance.AdvancedMachineFeaturesAttributes] {
	return terra.ReferenceList[computeinstance.AdvancedMachineFeaturesAttributes](ci.ref.Append("advanced_machine_features"))
}

func (ci computeInstanceAttributes) AttachedDisk() terra.ListValue[computeinstance.AttachedDiskAttributes] {
	return terra.ReferenceList[computeinstance.AttachedDiskAttributes](ci.ref.Append("attached_disk"))
}

func (ci computeInstanceAttributes) BootDisk() terra.ListValue[computeinstance.BootDiskAttributes] {
	return terra.ReferenceList[computeinstance.BootDiskAttributes](ci.ref.Append("boot_disk"))
}

func (ci computeInstanceAttributes) ConfidentialInstanceConfig() terra.ListValue[computeinstance.ConfidentialInstanceConfigAttributes] {
	return terra.ReferenceList[computeinstance.ConfidentialInstanceConfigAttributes](ci.ref.Append("confidential_instance_config"))
}

func (ci computeInstanceAttributes) NetworkInterface() terra.ListValue[computeinstance.NetworkInterfaceAttributes] {
	return terra.ReferenceList[computeinstance.NetworkInterfaceAttributes](ci.ref.Append("network_interface"))
}

func (ci computeInstanceAttributes) ReservationAffinity() terra.ListValue[computeinstance.ReservationAffinityAttributes] {
	return terra.ReferenceList[computeinstance.ReservationAffinityAttributes](ci.ref.Append("reservation_affinity"))
}

func (ci computeInstanceAttributes) Scheduling() terra.ListValue[computeinstance.SchedulingAttributes] {
	return terra.ReferenceList[computeinstance.SchedulingAttributes](ci.ref.Append("scheduling"))
}

func (ci computeInstanceAttributes) ScratchDisk() terra.ListValue[computeinstance.ScratchDiskAttributes] {
	return terra.ReferenceList[computeinstance.ScratchDiskAttributes](ci.ref.Append("scratch_disk"))
}

func (ci computeInstanceAttributes) ServiceAccount() terra.ListValue[computeinstance.ServiceAccountAttributes] {
	return terra.ReferenceList[computeinstance.ServiceAccountAttributes](ci.ref.Append("service_account"))
}

func (ci computeInstanceAttributes) ShieldedInstanceConfig() terra.ListValue[computeinstance.ShieldedInstanceConfigAttributes] {
	return terra.ReferenceList[computeinstance.ShieldedInstanceConfigAttributes](ci.ref.Append("shielded_instance_config"))
}

func (ci computeInstanceAttributes) Timeouts() computeinstance.TimeoutsAttributes {
	return terra.ReferenceSingle[computeinstance.TimeoutsAttributes](ci.ref.Append("timeouts"))
}

type computeInstanceState struct {
	AllowStoppingForUpdate     bool                                              `json:"allow_stopping_for_update"`
	CanIpForward               bool                                              `json:"can_ip_forward"`
	CpuPlatform                string                                            `json:"cpu_platform"`
	CurrentStatus              string                                            `json:"current_status"`
	DeletionProtection         bool                                              `json:"deletion_protection"`
	Description                string                                            `json:"description"`
	DesiredStatus              string                                            `json:"desired_status"`
	EnableDisplay              bool                                              `json:"enable_display"`
	Hostname                   string                                            `json:"hostname"`
	Id                         string                                            `json:"id"`
	InstanceId                 string                                            `json:"instance_id"`
	LabelFingerprint           string                                            `json:"label_fingerprint"`
	Labels                     map[string]string                                 `json:"labels"`
	MachineType                string                                            `json:"machine_type"`
	Metadata                   map[string]string                                 `json:"metadata"`
	MetadataFingerprint        string                                            `json:"metadata_fingerprint"`
	MetadataStartupScript      string                                            `json:"metadata_startup_script"`
	MinCpuPlatform             string                                            `json:"min_cpu_platform"`
	Name                       string                                            `json:"name"`
	Project                    string                                            `json:"project"`
	ResourcePolicies           []string                                          `json:"resource_policies"`
	SelfLink                   string                                            `json:"self_link"`
	Tags                       []string                                          `json:"tags"`
	TagsFingerprint            string                                            `json:"tags_fingerprint"`
	Zone                       string                                            `json:"zone"`
	GuestAccelerator           []computeinstance.GuestAcceleratorState           `json:"guest_accelerator"`
	AdvancedMachineFeatures    []computeinstance.AdvancedMachineFeaturesState    `json:"advanced_machine_features"`
	AttachedDisk               []computeinstance.AttachedDiskState               `json:"attached_disk"`
	BootDisk                   []computeinstance.BootDiskState                   `json:"boot_disk"`
	ConfidentialInstanceConfig []computeinstance.ConfidentialInstanceConfigState `json:"confidential_instance_config"`
	NetworkInterface           []computeinstance.NetworkInterfaceState           `json:"network_interface"`
	ReservationAffinity        []computeinstance.ReservationAffinityState        `json:"reservation_affinity"`
	Scheduling                 []computeinstance.SchedulingState                 `json:"scheduling"`
	ScratchDisk                []computeinstance.ScratchDiskState                `json:"scratch_disk"`
	ServiceAccount             []computeinstance.ServiceAccountState             `json:"service_account"`
	ShieldedInstanceConfig     []computeinstance.ShieldedInstanceConfigState     `json:"shielded_instance_config"`
	Timeouts                   *computeinstance.TimeoutsState                    `json:"timeouts"`
}
