// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeexternalvpngateway "github.com/golingon/terraproviders/google/4.59.0/computeexternalvpngateway"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeExternalVpnGateway(name string, args ComputeExternalVpnGatewayArgs) *ComputeExternalVpnGateway {
	return &ComputeExternalVpnGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeExternalVpnGateway)(nil)

type ComputeExternalVpnGateway struct {
	Name  string
	Args  ComputeExternalVpnGatewayArgs
	state *computeExternalVpnGatewayState
}

func (cevg *ComputeExternalVpnGateway) Type() string {
	return "google_compute_external_vpn_gateway"
}

func (cevg *ComputeExternalVpnGateway) LocalName() string {
	return cevg.Name
}

func (cevg *ComputeExternalVpnGateway) Configuration() interface{} {
	return cevg.Args
}

func (cevg *ComputeExternalVpnGateway) Attributes() computeExternalVpnGatewayAttributes {
	return computeExternalVpnGatewayAttributes{ref: terra.ReferenceResource(cevg)}
}

func (cevg *ComputeExternalVpnGateway) ImportState(av io.Reader) error {
	cevg.state = &computeExternalVpnGatewayState{}
	if err := json.NewDecoder(av).Decode(cevg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cevg.Type(), cevg.LocalName(), err)
	}
	return nil
}

func (cevg *ComputeExternalVpnGateway) State() (*computeExternalVpnGatewayState, bool) {
	return cevg.state, cevg.state != nil
}

func (cevg *ComputeExternalVpnGateway) StateMust() *computeExternalVpnGatewayState {
	if cevg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cevg.Type(), cevg.LocalName()))
	}
	return cevg.state
}

func (cevg *ComputeExternalVpnGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(cevg)
}

type ComputeExternalVpnGatewayArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RedundancyType: string, optional
	RedundancyType terra.StringValue `hcl:"redundancy_type,attr"`
	// Interface: min=0
	Interface []computeexternalvpngateway.Interface `hcl:"interface,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *computeexternalvpngateway.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeExternalVpnGateway depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeExternalVpnGatewayAttributes struct {
	ref terra.Reference
}

func (cevg computeExternalVpnGatewayAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cevg.ref.Append("description"))
}

func (cevg computeExternalVpnGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cevg.ref.Append("id"))
}

func (cevg computeExternalVpnGatewayAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cevg.ref.Append("labels"))
}

func (cevg computeExternalVpnGatewayAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cevg.ref.Append("name"))
}

func (cevg computeExternalVpnGatewayAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cevg.ref.Append("project"))
}

func (cevg computeExternalVpnGatewayAttributes) RedundancyType() terra.StringValue {
	return terra.ReferenceString(cevg.ref.Append("redundancy_type"))
}

func (cevg computeExternalVpnGatewayAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(cevg.ref.Append("self_link"))
}

func (cevg computeExternalVpnGatewayAttributes) Interface() terra.ListValue[computeexternalvpngateway.InterfaceAttributes] {
	return terra.ReferenceList[computeexternalvpngateway.InterfaceAttributes](cevg.ref.Append("interface"))
}

func (cevg computeExternalVpnGatewayAttributes) Timeouts() computeexternalvpngateway.TimeoutsAttributes {
	return terra.ReferenceSingle[computeexternalvpngateway.TimeoutsAttributes](cevg.ref.Append("timeouts"))
}

type computeExternalVpnGatewayState struct {
	Description    string                                     `json:"description"`
	Id             string                                     `json:"id"`
	Labels         map[string]string                          `json:"labels"`
	Name           string                                     `json:"name"`
	Project        string                                     `json:"project"`
	RedundancyType string                                     `json:"redundancy_type"`
	SelfLink       string                                     `json:"self_link"`
	Interface      []computeexternalvpngateway.InterfaceState `json:"interface"`
	Timeouts       *computeexternalvpngateway.TimeoutsState   `json:"timeouts"`
}
