// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	networkservicesedgecachekeyset "github.com/golingon/terraproviders/google/4.59.0/networkservicesedgecachekeyset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkServicesEdgeCacheKeyset(name string, args NetworkServicesEdgeCacheKeysetArgs) *NetworkServicesEdgeCacheKeyset {
	return &NetworkServicesEdgeCacheKeyset{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkServicesEdgeCacheKeyset)(nil)

type NetworkServicesEdgeCacheKeyset struct {
	Name  string
	Args  NetworkServicesEdgeCacheKeysetArgs
	state *networkServicesEdgeCacheKeysetState
}

func (nseck *NetworkServicesEdgeCacheKeyset) Type() string {
	return "google_network_services_edge_cache_keyset"
}

func (nseck *NetworkServicesEdgeCacheKeyset) LocalName() string {
	return nseck.Name
}

func (nseck *NetworkServicesEdgeCacheKeyset) Configuration() interface{} {
	return nseck.Args
}

func (nseck *NetworkServicesEdgeCacheKeyset) Attributes() networkServicesEdgeCacheKeysetAttributes {
	return networkServicesEdgeCacheKeysetAttributes{ref: terra.ReferenceResource(nseck)}
}

func (nseck *NetworkServicesEdgeCacheKeyset) ImportState(av io.Reader) error {
	nseck.state = &networkServicesEdgeCacheKeysetState{}
	if err := json.NewDecoder(av).Decode(nseck.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nseck.Type(), nseck.LocalName(), err)
	}
	return nil
}

func (nseck *NetworkServicesEdgeCacheKeyset) State() (*networkServicesEdgeCacheKeysetState, bool) {
	return nseck.state, nseck.state != nil
}

func (nseck *NetworkServicesEdgeCacheKeyset) StateMust() *networkServicesEdgeCacheKeysetState {
	if nseck.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nseck.Type(), nseck.LocalName()))
	}
	return nseck.state
}

func (nseck *NetworkServicesEdgeCacheKeyset) DependOn() terra.Reference {
	return terra.ReferenceResource(nseck)
}

type NetworkServicesEdgeCacheKeysetArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// PublicKey: min=0,max=3
	PublicKey []networkservicesedgecachekeyset.PublicKey `hcl:"public_key,block" validate:"min=0,max=3"`
	// Timeouts: optional
	Timeouts *networkservicesedgecachekeyset.Timeouts `hcl:"timeouts,block"`
	// ValidationSharedKeys: min=0,max=3
	ValidationSharedKeys []networkservicesedgecachekeyset.ValidationSharedKeys `hcl:"validation_shared_keys,block" validate:"min=0,max=3"`
	// DependsOn contains resources that NetworkServicesEdgeCacheKeyset depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkServicesEdgeCacheKeysetAttributes struct {
	ref terra.Reference
}

func (nseck networkServicesEdgeCacheKeysetAttributes) Description() terra.StringValue {
	return terra.ReferenceString(nseck.ref.Append("description"))
}

func (nseck networkServicesEdgeCacheKeysetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nseck.ref.Append("id"))
}

func (nseck networkServicesEdgeCacheKeysetAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nseck.ref.Append("labels"))
}

func (nseck networkServicesEdgeCacheKeysetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nseck.ref.Append("name"))
}

func (nseck networkServicesEdgeCacheKeysetAttributes) Project() terra.StringValue {
	return terra.ReferenceString(nseck.ref.Append("project"))
}

func (nseck networkServicesEdgeCacheKeysetAttributes) PublicKey() terra.ListValue[networkservicesedgecachekeyset.PublicKeyAttributes] {
	return terra.ReferenceList[networkservicesedgecachekeyset.PublicKeyAttributes](nseck.ref.Append("public_key"))
}

func (nseck networkServicesEdgeCacheKeysetAttributes) Timeouts() networkservicesedgecachekeyset.TimeoutsAttributes {
	return terra.ReferenceSingle[networkservicesedgecachekeyset.TimeoutsAttributes](nseck.ref.Append("timeouts"))
}

func (nseck networkServicesEdgeCacheKeysetAttributes) ValidationSharedKeys() terra.ListValue[networkservicesedgecachekeyset.ValidationSharedKeysAttributes] {
	return terra.ReferenceList[networkservicesedgecachekeyset.ValidationSharedKeysAttributes](nseck.ref.Append("validation_shared_keys"))
}

type networkServicesEdgeCacheKeysetState struct {
	Description          string                                                     `json:"description"`
	Id                   string                                                     `json:"id"`
	Labels               map[string]string                                          `json:"labels"`
	Name                 string                                                     `json:"name"`
	Project              string                                                     `json:"project"`
	PublicKey            []networkservicesedgecachekeyset.PublicKeyState            `json:"public_key"`
	Timeouts             *networkservicesedgecachekeyset.TimeoutsState              `json:"timeouts"`
	ValidationSharedKeys []networkservicesedgecachekeyset.ValidationSharedKeysState `json:"validation_shared_keys"`
}
