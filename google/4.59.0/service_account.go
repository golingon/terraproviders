// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	serviceaccount "github.com/golingon/terraproviders/google/4.59.0/serviceaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServiceAccount(name string, args ServiceAccountArgs) *ServiceAccount {
	return &ServiceAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServiceAccount)(nil)

type ServiceAccount struct {
	Name  string
	Args  ServiceAccountArgs
	state *serviceAccountState
}

func (sa *ServiceAccount) Type() string {
	return "google_service_account"
}

func (sa *ServiceAccount) LocalName() string {
	return sa.Name
}

func (sa *ServiceAccount) Configuration() interface{} {
	return sa.Args
}

func (sa *ServiceAccount) Attributes() serviceAccountAttributes {
	return serviceAccountAttributes{ref: terra.ReferenceResource(sa)}
}

func (sa *ServiceAccount) ImportState(av io.Reader) error {
	sa.state = &serviceAccountState{}
	if err := json.NewDecoder(av).Decode(sa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sa.Type(), sa.LocalName(), err)
	}
	return nil
}

func (sa *ServiceAccount) State() (*serviceAccountState, bool) {
	return sa.state, sa.state != nil
}

func (sa *ServiceAccount) StateMust() *serviceAccountState {
	if sa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sa.Type(), sa.LocalName()))
	}
	return sa.state
}

func (sa *ServiceAccount) DependOn() terra.Reference {
	return terra.ReferenceResource(sa)
}

type ServiceAccountArgs struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *serviceaccount.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServiceAccount depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type serviceAccountAttributes struct {
	ref terra.Reference
}

func (sa serviceAccountAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("account_id"))
}

func (sa serviceAccountAttributes) Description() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("description"))
}

func (sa serviceAccountAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(sa.ref.Append("disabled"))
}

func (sa serviceAccountAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("display_name"))
}

func (sa serviceAccountAttributes) Email() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("email"))
}

func (sa serviceAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("id"))
}

func (sa serviceAccountAttributes) Member() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("member"))
}

func (sa serviceAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("name"))
}

func (sa serviceAccountAttributes) Project() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("project"))
}

func (sa serviceAccountAttributes) UniqueId() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("unique_id"))
}

func (sa serviceAccountAttributes) Timeouts() serviceaccount.TimeoutsAttributes {
	return terra.ReferenceSingle[serviceaccount.TimeoutsAttributes](sa.ref.Append("timeouts"))
}

type serviceAccountState struct {
	AccountId   string                        `json:"account_id"`
	Description string                        `json:"description"`
	Disabled    bool                          `json:"disabled"`
	DisplayName string                        `json:"display_name"`
	Email       string                        `json:"email"`
	Id          string                        `json:"id"`
	Member      string                        `json:"member"`
	Name        string                        `json:"name"`
	Project     string                        `json:"project"`
	UniqueId    string                        `json:"unique_id"`
	Timeouts    *serviceaccount.TimeoutsState `json:"timeouts"`
}
