// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datacomputeresourcepolicy

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type GroupPlacementPolicy struct{}

type InstanceSchedulePolicy struct {
	// VmStartSchedule: min=0
	VmStartSchedule []VmStartSchedule `hcl:"vm_start_schedule,block" validate:"min=0"`
	// VmStopSchedule: min=0
	VmStopSchedule []VmStopSchedule `hcl:"vm_stop_schedule,block" validate:"min=0"`
}

type VmStartSchedule struct{}

type VmStopSchedule struct{}

type SnapshotSchedulePolicy struct {
	// RetentionPolicy: min=0
	RetentionPolicy []RetentionPolicy `hcl:"retention_policy,block" validate:"min=0"`
	// Schedule: min=0
	Schedule []Schedule `hcl:"schedule,block" validate:"min=0"`
	// SnapshotProperties: min=0
	SnapshotProperties []SnapshotProperties `hcl:"snapshot_properties,block" validate:"min=0"`
}

type RetentionPolicy struct{}

type Schedule struct {
	// DailySchedule: min=0
	DailySchedule []DailySchedule `hcl:"daily_schedule,block" validate:"min=0"`
	// HourlySchedule: min=0
	HourlySchedule []HourlySchedule `hcl:"hourly_schedule,block" validate:"min=0"`
	// WeeklySchedule: min=0
	WeeklySchedule []WeeklySchedule `hcl:"weekly_schedule,block" validate:"min=0"`
}

type DailySchedule struct{}

type HourlySchedule struct{}

type WeeklySchedule struct {
	// DayOfWeeks: min=0
	DayOfWeeks []DayOfWeeks `hcl:"day_of_weeks,block" validate:"min=0"`
}

type DayOfWeeks struct{}

type SnapshotProperties struct{}

type GroupPlacementPolicyAttributes struct {
	ref terra.Reference
}

func (gpp GroupPlacementPolicyAttributes) InternalRef() terra.Reference {
	return gpp.ref
}

func (gpp GroupPlacementPolicyAttributes) InternalWithRef(ref terra.Reference) GroupPlacementPolicyAttributes {
	return GroupPlacementPolicyAttributes{ref: ref}
}

func (gpp GroupPlacementPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return gpp.ref.InternalTokens()
}

func (gpp GroupPlacementPolicyAttributes) AvailabilityDomainCount() terra.NumberValue {
	return terra.ReferenceNumber(gpp.ref.Append("availability_domain_count"))
}

func (gpp GroupPlacementPolicyAttributes) Collocation() terra.StringValue {
	return terra.ReferenceString(gpp.ref.Append("collocation"))
}

func (gpp GroupPlacementPolicyAttributes) VmCount() terra.NumberValue {
	return terra.ReferenceNumber(gpp.ref.Append("vm_count"))
}

type InstanceSchedulePolicyAttributes struct {
	ref terra.Reference
}

func (isp InstanceSchedulePolicyAttributes) InternalRef() terra.Reference {
	return isp.ref
}

func (isp InstanceSchedulePolicyAttributes) InternalWithRef(ref terra.Reference) InstanceSchedulePolicyAttributes {
	return InstanceSchedulePolicyAttributes{ref: ref}
}

func (isp InstanceSchedulePolicyAttributes) InternalTokens() hclwrite.Tokens {
	return isp.ref.InternalTokens()
}

func (isp InstanceSchedulePolicyAttributes) ExpirationTime() terra.StringValue {
	return terra.ReferenceString(isp.ref.Append("expiration_time"))
}

func (isp InstanceSchedulePolicyAttributes) StartTime() terra.StringValue {
	return terra.ReferenceString(isp.ref.Append("start_time"))
}

func (isp InstanceSchedulePolicyAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceString(isp.ref.Append("time_zone"))
}

func (isp InstanceSchedulePolicyAttributes) VmStartSchedule() terra.ListValue[VmStartScheduleAttributes] {
	return terra.ReferenceList[VmStartScheduleAttributes](isp.ref.Append("vm_start_schedule"))
}

func (isp InstanceSchedulePolicyAttributes) VmStopSchedule() terra.ListValue[VmStopScheduleAttributes] {
	return terra.ReferenceList[VmStopScheduleAttributes](isp.ref.Append("vm_stop_schedule"))
}

type VmStartScheduleAttributes struct {
	ref terra.Reference
}

func (vss VmStartScheduleAttributes) InternalRef() terra.Reference {
	return vss.ref
}

func (vss VmStartScheduleAttributes) InternalWithRef(ref terra.Reference) VmStartScheduleAttributes {
	return VmStartScheduleAttributes{ref: ref}
}

func (vss VmStartScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return vss.ref.InternalTokens()
}

func (vss VmStartScheduleAttributes) Schedule() terra.StringValue {
	return terra.ReferenceString(vss.ref.Append("schedule"))
}

type VmStopScheduleAttributes struct {
	ref terra.Reference
}

func (vss VmStopScheduleAttributes) InternalRef() terra.Reference {
	return vss.ref
}

func (vss VmStopScheduleAttributes) InternalWithRef(ref terra.Reference) VmStopScheduleAttributes {
	return VmStopScheduleAttributes{ref: ref}
}

func (vss VmStopScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return vss.ref.InternalTokens()
}

func (vss VmStopScheduleAttributes) Schedule() terra.StringValue {
	return terra.ReferenceString(vss.ref.Append("schedule"))
}

type SnapshotSchedulePolicyAttributes struct {
	ref terra.Reference
}

func (ssp SnapshotSchedulePolicyAttributes) InternalRef() terra.Reference {
	return ssp.ref
}

func (ssp SnapshotSchedulePolicyAttributes) InternalWithRef(ref terra.Reference) SnapshotSchedulePolicyAttributes {
	return SnapshotSchedulePolicyAttributes{ref: ref}
}

func (ssp SnapshotSchedulePolicyAttributes) InternalTokens() hclwrite.Tokens {
	return ssp.ref.InternalTokens()
}

func (ssp SnapshotSchedulePolicyAttributes) RetentionPolicy() terra.ListValue[RetentionPolicyAttributes] {
	return terra.ReferenceList[RetentionPolicyAttributes](ssp.ref.Append("retention_policy"))
}

func (ssp SnapshotSchedulePolicyAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceList[ScheduleAttributes](ssp.ref.Append("schedule"))
}

func (ssp SnapshotSchedulePolicyAttributes) SnapshotProperties() terra.ListValue[SnapshotPropertiesAttributes] {
	return terra.ReferenceList[SnapshotPropertiesAttributes](ssp.ref.Append("snapshot_properties"))
}

type RetentionPolicyAttributes struct {
	ref terra.Reference
}

func (rp RetentionPolicyAttributes) InternalRef() terra.Reference {
	return rp.ref
}

func (rp RetentionPolicyAttributes) InternalWithRef(ref terra.Reference) RetentionPolicyAttributes {
	return RetentionPolicyAttributes{ref: ref}
}

func (rp RetentionPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return rp.ref.InternalTokens()
}

func (rp RetentionPolicyAttributes) MaxRetentionDays() terra.NumberValue {
	return terra.ReferenceNumber(rp.ref.Append("max_retention_days"))
}

func (rp RetentionPolicyAttributes) OnSourceDiskDelete() terra.StringValue {
	return terra.ReferenceString(rp.ref.Append("on_source_disk_delete"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) DailySchedule() terra.ListValue[DailyScheduleAttributes] {
	return terra.ReferenceList[DailyScheduleAttributes](s.ref.Append("daily_schedule"))
}

func (s ScheduleAttributes) HourlySchedule() terra.ListValue[HourlyScheduleAttributes] {
	return terra.ReferenceList[HourlyScheduleAttributes](s.ref.Append("hourly_schedule"))
}

func (s ScheduleAttributes) WeeklySchedule() terra.ListValue[WeeklyScheduleAttributes] {
	return terra.ReferenceList[WeeklyScheduleAttributes](s.ref.Append("weekly_schedule"))
}

type DailyScheduleAttributes struct {
	ref terra.Reference
}

func (ds DailyScheduleAttributes) InternalRef() terra.Reference {
	return ds.ref
}

func (ds DailyScheduleAttributes) InternalWithRef(ref terra.Reference) DailyScheduleAttributes {
	return DailyScheduleAttributes{ref: ref}
}

func (ds DailyScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return ds.ref.InternalTokens()
}

func (ds DailyScheduleAttributes) DaysInCycle() terra.NumberValue {
	return terra.ReferenceNumber(ds.ref.Append("days_in_cycle"))
}

func (ds DailyScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("start_time"))
}

type HourlyScheduleAttributes struct {
	ref terra.Reference
}

func (hs HourlyScheduleAttributes) InternalRef() terra.Reference {
	return hs.ref
}

func (hs HourlyScheduleAttributes) InternalWithRef(ref terra.Reference) HourlyScheduleAttributes {
	return HourlyScheduleAttributes{ref: ref}
}

func (hs HourlyScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return hs.ref.InternalTokens()
}

func (hs HourlyScheduleAttributes) HoursInCycle() terra.NumberValue {
	return terra.ReferenceNumber(hs.ref.Append("hours_in_cycle"))
}

func (hs HourlyScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceString(hs.ref.Append("start_time"))
}

type WeeklyScheduleAttributes struct {
	ref terra.Reference
}

func (ws WeeklyScheduleAttributes) InternalRef() terra.Reference {
	return ws.ref
}

func (ws WeeklyScheduleAttributes) InternalWithRef(ref terra.Reference) WeeklyScheduleAttributes {
	return WeeklyScheduleAttributes{ref: ref}
}

func (ws WeeklyScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return ws.ref.InternalTokens()
}

func (ws WeeklyScheduleAttributes) DayOfWeeks() terra.SetValue[DayOfWeeksAttributes] {
	return terra.ReferenceSet[DayOfWeeksAttributes](ws.ref.Append("day_of_weeks"))
}

type DayOfWeeksAttributes struct {
	ref terra.Reference
}

func (dow DayOfWeeksAttributes) InternalRef() terra.Reference {
	return dow.ref
}

func (dow DayOfWeeksAttributes) InternalWithRef(ref terra.Reference) DayOfWeeksAttributes {
	return DayOfWeeksAttributes{ref: ref}
}

func (dow DayOfWeeksAttributes) InternalTokens() hclwrite.Tokens {
	return dow.ref.InternalTokens()
}

func (dow DayOfWeeksAttributes) Day() terra.StringValue {
	return terra.ReferenceString(dow.ref.Append("day"))
}

func (dow DayOfWeeksAttributes) StartTime() terra.StringValue {
	return terra.ReferenceString(dow.ref.Append("start_time"))
}

type SnapshotPropertiesAttributes struct {
	ref terra.Reference
}

func (sp SnapshotPropertiesAttributes) InternalRef() terra.Reference {
	return sp.ref
}

func (sp SnapshotPropertiesAttributes) InternalWithRef(ref terra.Reference) SnapshotPropertiesAttributes {
	return SnapshotPropertiesAttributes{ref: ref}
}

func (sp SnapshotPropertiesAttributes) InternalTokens() hclwrite.Tokens {
	return sp.ref.InternalTokens()
}

func (sp SnapshotPropertiesAttributes) ChainName() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("chain_name"))
}

func (sp SnapshotPropertiesAttributes) GuestFlush() terra.BoolValue {
	return terra.ReferenceBool(sp.ref.Append("guest_flush"))
}

func (sp SnapshotPropertiesAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sp.ref.Append("labels"))
}

func (sp SnapshotPropertiesAttributes) StorageLocations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](sp.ref.Append("storage_locations"))
}

type GroupPlacementPolicyState struct {
	AvailabilityDomainCount float64 `json:"availability_domain_count"`
	Collocation             string  `json:"collocation"`
	VmCount                 float64 `json:"vm_count"`
}

type InstanceSchedulePolicyState struct {
	ExpirationTime  string                 `json:"expiration_time"`
	StartTime       string                 `json:"start_time"`
	TimeZone        string                 `json:"time_zone"`
	VmStartSchedule []VmStartScheduleState `json:"vm_start_schedule"`
	VmStopSchedule  []VmStopScheduleState  `json:"vm_stop_schedule"`
}

type VmStartScheduleState struct {
	Schedule string `json:"schedule"`
}

type VmStopScheduleState struct {
	Schedule string `json:"schedule"`
}

type SnapshotSchedulePolicyState struct {
	RetentionPolicy    []RetentionPolicyState    `json:"retention_policy"`
	Schedule           []ScheduleState           `json:"schedule"`
	SnapshotProperties []SnapshotPropertiesState `json:"snapshot_properties"`
}

type RetentionPolicyState struct {
	MaxRetentionDays   float64 `json:"max_retention_days"`
	OnSourceDiskDelete string  `json:"on_source_disk_delete"`
}

type ScheduleState struct {
	DailySchedule  []DailyScheduleState  `json:"daily_schedule"`
	HourlySchedule []HourlyScheduleState `json:"hourly_schedule"`
	WeeklySchedule []WeeklyScheduleState `json:"weekly_schedule"`
}

type DailyScheduleState struct {
	DaysInCycle float64 `json:"days_in_cycle"`
	StartTime   string  `json:"start_time"`
}

type HourlyScheduleState struct {
	HoursInCycle float64 `json:"hours_in_cycle"`
	StartTime    string  `json:"start_time"`
}

type WeeklyScheduleState struct {
	DayOfWeeks []DayOfWeeksState `json:"day_of_weeks"`
}

type DayOfWeeksState struct {
	Day       string `json:"day"`
	StartTime string `json:"start_time"`
}

type SnapshotPropertiesState struct {
	ChainName        string            `json:"chain_name"`
	GuestFlush       bool              `json:"guest_flush"`
	Labels           map[string]string `json:"labels"`
	StorageLocations []string          `json:"storage_locations"`
}
