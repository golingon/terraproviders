// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	sqlsslcert "github.com/golingon/terraproviders/google/4.59.0/sqlsslcert"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSqlSslCert(name string, args SqlSslCertArgs) *SqlSslCert {
	return &SqlSslCert{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SqlSslCert)(nil)

type SqlSslCert struct {
	Name  string
	Args  SqlSslCertArgs
	state *sqlSslCertState
}

func (ssc *SqlSslCert) Type() string {
	return "google_sql_ssl_cert"
}

func (ssc *SqlSslCert) LocalName() string {
	return ssc.Name
}

func (ssc *SqlSslCert) Configuration() interface{} {
	return ssc.Args
}

func (ssc *SqlSslCert) Attributes() sqlSslCertAttributes {
	return sqlSslCertAttributes{ref: terra.ReferenceResource(ssc)}
}

func (ssc *SqlSslCert) ImportState(av io.Reader) error {
	ssc.state = &sqlSslCertState{}
	if err := json.NewDecoder(av).Decode(ssc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssc.Type(), ssc.LocalName(), err)
	}
	return nil
}

func (ssc *SqlSslCert) State() (*sqlSslCertState, bool) {
	return ssc.state, ssc.state != nil
}

func (ssc *SqlSslCert) StateMust() *sqlSslCertState {
	if ssc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssc.Type(), ssc.LocalName()))
	}
	return ssc.state
}

func (ssc *SqlSslCert) DependOn() terra.Reference {
	return terra.ReferenceResource(ssc)
}

type SqlSslCertArgs struct {
	// CommonName: string, required
	CommonName terra.StringValue `hcl:"common_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *sqlsslcert.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SqlSslCert depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sqlSslCertAttributes struct {
	ref terra.Reference
}

func (ssc sqlSslCertAttributes) Cert() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("cert"))
}

func (ssc sqlSslCertAttributes) CertSerialNumber() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("cert_serial_number"))
}

func (ssc sqlSslCertAttributes) CommonName() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("common_name"))
}

func (ssc sqlSslCertAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("create_time"))
}

func (ssc sqlSslCertAttributes) ExpirationTime() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("expiration_time"))
}

func (ssc sqlSslCertAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("id"))
}

func (ssc sqlSslCertAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("instance"))
}

func (ssc sqlSslCertAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("private_key"))
}

func (ssc sqlSslCertAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("project"))
}

func (ssc sqlSslCertAttributes) ServerCaCert() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("server_ca_cert"))
}

func (ssc sqlSslCertAttributes) Sha1Fingerprint() terra.StringValue {
	return terra.ReferenceString(ssc.ref.Append("sha1_fingerprint"))
}

func (ssc sqlSslCertAttributes) Timeouts() sqlsslcert.TimeoutsAttributes {
	return terra.ReferenceSingle[sqlsslcert.TimeoutsAttributes](ssc.ref.Append("timeouts"))
}

type sqlSslCertState struct {
	Cert             string                    `json:"cert"`
	CertSerialNumber string                    `json:"cert_serial_number"`
	CommonName       string                    `json:"common_name"`
	CreateTime       string                    `json:"create_time"`
	ExpirationTime   string                    `json:"expiration_time"`
	Id               string                    `json:"id"`
	Instance         string                    `json:"instance"`
	PrivateKey       string                    `json:"private_key"`
	Project          string                    `json:"project"`
	ServerCaCert     string                    `json:"server_ca_cert"`
	Sha1Fingerprint  string                    `json:"sha1_fingerprint"`
	Timeouts         *sqlsslcert.TimeoutsState `json:"timeouts"`
}
