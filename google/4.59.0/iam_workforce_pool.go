// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	iamworkforcepool "github.com/golingon/terraproviders/google/4.59.0/iamworkforcepool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamWorkforcePool(name string, args IamWorkforcePoolArgs) *IamWorkforcePool {
	return &IamWorkforcePool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamWorkforcePool)(nil)

type IamWorkforcePool struct {
	Name  string
	Args  IamWorkforcePoolArgs
	state *iamWorkforcePoolState
}

func (iwp *IamWorkforcePool) Type() string {
	return "google_iam_workforce_pool"
}

func (iwp *IamWorkforcePool) LocalName() string {
	return iwp.Name
}

func (iwp *IamWorkforcePool) Configuration() interface{} {
	return iwp.Args
}

func (iwp *IamWorkforcePool) Attributes() iamWorkforcePoolAttributes {
	return iamWorkforcePoolAttributes{ref: terra.ReferenceResource(iwp)}
}

func (iwp *IamWorkforcePool) ImportState(av io.Reader) error {
	iwp.state = &iamWorkforcePoolState{}
	if err := json.NewDecoder(av).Decode(iwp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iwp.Type(), iwp.LocalName(), err)
	}
	return nil
}

func (iwp *IamWorkforcePool) State() (*iamWorkforcePoolState, bool) {
	return iwp.state, iwp.state != nil
}

func (iwp *IamWorkforcePool) StateMust() *iamWorkforcePoolState {
	if iwp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iwp.Type(), iwp.LocalName()))
	}
	return iwp.state
}

func (iwp *IamWorkforcePool) DependOn() terra.Reference {
	return terra.ReferenceResource(iwp)
}

type IamWorkforcePoolArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// SessionDuration: string, optional
	SessionDuration terra.StringValue `hcl:"session_duration,attr"`
	// WorkforcePoolId: string, required
	WorkforcePoolId terra.StringValue `hcl:"workforce_pool_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *iamworkforcepool.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IamWorkforcePool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamWorkforcePoolAttributes struct {
	ref terra.Reference
}

func (iwp iamWorkforcePoolAttributes) Description() terra.StringValue {
	return terra.ReferenceString(iwp.ref.Append("description"))
}

func (iwp iamWorkforcePoolAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(iwp.ref.Append("disabled"))
}

func (iwp iamWorkforcePoolAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(iwp.ref.Append("display_name"))
}

func (iwp iamWorkforcePoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iwp.ref.Append("id"))
}

func (iwp iamWorkforcePoolAttributes) Location() terra.StringValue {
	return terra.ReferenceString(iwp.ref.Append("location"))
}

func (iwp iamWorkforcePoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(iwp.ref.Append("name"))
}

func (iwp iamWorkforcePoolAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(iwp.ref.Append("parent"))
}

func (iwp iamWorkforcePoolAttributes) SessionDuration() terra.StringValue {
	return terra.ReferenceString(iwp.ref.Append("session_duration"))
}

func (iwp iamWorkforcePoolAttributes) State() terra.StringValue {
	return terra.ReferenceString(iwp.ref.Append("state"))
}

func (iwp iamWorkforcePoolAttributes) WorkforcePoolId() terra.StringValue {
	return terra.ReferenceString(iwp.ref.Append("workforce_pool_id"))
}

func (iwp iamWorkforcePoolAttributes) Timeouts() iamworkforcepool.TimeoutsAttributes {
	return terra.ReferenceSingle[iamworkforcepool.TimeoutsAttributes](iwp.ref.Append("timeouts"))
}

type iamWorkforcePoolState struct {
	Description     string                          `json:"description"`
	Disabled        bool                            `json:"disabled"`
	DisplayName     string                          `json:"display_name"`
	Id              string                          `json:"id"`
	Location        string                          `json:"location"`
	Name            string                          `json:"name"`
	Parent          string                          `json:"parent"`
	SessionDuration string                          `json:"session_duration"`
	State           string                          `json:"state"`
	WorkforcePoolId string                          `json:"workforce_pool_id"`
	Timeouts        *iamworkforcepool.TimeoutsState `json:"timeouts"`
}
