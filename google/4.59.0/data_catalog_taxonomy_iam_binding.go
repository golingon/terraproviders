// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	datacatalogtaxonomyiambinding "github.com/golingon/terraproviders/google/4.59.0/datacatalogtaxonomyiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataCatalogTaxonomyIamBinding(name string, args DataCatalogTaxonomyIamBindingArgs) *DataCatalogTaxonomyIamBinding {
	return &DataCatalogTaxonomyIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataCatalogTaxonomyIamBinding)(nil)

type DataCatalogTaxonomyIamBinding struct {
	Name  string
	Args  DataCatalogTaxonomyIamBindingArgs
	state *dataCatalogTaxonomyIamBindingState
}

func (dctib *DataCatalogTaxonomyIamBinding) Type() string {
	return "google_data_catalog_taxonomy_iam_binding"
}

func (dctib *DataCatalogTaxonomyIamBinding) LocalName() string {
	return dctib.Name
}

func (dctib *DataCatalogTaxonomyIamBinding) Configuration() interface{} {
	return dctib.Args
}

func (dctib *DataCatalogTaxonomyIamBinding) Attributes() dataCatalogTaxonomyIamBindingAttributes {
	return dataCatalogTaxonomyIamBindingAttributes{ref: terra.ReferenceResource(dctib)}
}

func (dctib *DataCatalogTaxonomyIamBinding) ImportState(av io.Reader) error {
	dctib.state = &dataCatalogTaxonomyIamBindingState{}
	if err := json.NewDecoder(av).Decode(dctib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dctib.Type(), dctib.LocalName(), err)
	}
	return nil
}

func (dctib *DataCatalogTaxonomyIamBinding) State() (*dataCatalogTaxonomyIamBindingState, bool) {
	return dctib.state, dctib.state != nil
}

func (dctib *DataCatalogTaxonomyIamBinding) StateMust() *dataCatalogTaxonomyIamBindingState {
	if dctib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dctib.Type(), dctib.LocalName()))
	}
	return dctib.state
}

func (dctib *DataCatalogTaxonomyIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(dctib)
}

type DataCatalogTaxonomyIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Taxonomy: string, required
	Taxonomy terra.StringValue `hcl:"taxonomy,attr" validate:"required"`
	// Condition: optional
	Condition *datacatalogtaxonomyiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataCatalogTaxonomyIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataCatalogTaxonomyIamBindingAttributes struct {
	ref terra.Reference
}

func (dctib dataCatalogTaxonomyIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dctib.ref.Append("etag"))
}

func (dctib dataCatalogTaxonomyIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dctib.ref.Append("id"))
}

func (dctib dataCatalogTaxonomyIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dctib.ref.Append("members"))
}

func (dctib dataCatalogTaxonomyIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dctib.ref.Append("project"))
}

func (dctib dataCatalogTaxonomyIamBindingAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dctib.ref.Append("region"))
}

func (dctib dataCatalogTaxonomyIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(dctib.ref.Append("role"))
}

func (dctib dataCatalogTaxonomyIamBindingAttributes) Taxonomy() terra.StringValue {
	return terra.ReferenceString(dctib.ref.Append("taxonomy"))
}

func (dctib dataCatalogTaxonomyIamBindingAttributes) Condition() terra.ListValue[datacatalogtaxonomyiambinding.ConditionAttributes] {
	return terra.ReferenceList[datacatalogtaxonomyiambinding.ConditionAttributes](dctib.ref.Append("condition"))
}

type dataCatalogTaxonomyIamBindingState struct {
	Etag      string                                         `json:"etag"`
	Id        string                                         `json:"id"`
	Members   []string                                       `json:"members"`
	Project   string                                         `json:"project"`
	Region    string                                         `json:"region"`
	Role      string                                         `json:"role"`
	Taxonomy  string                                         `json:"taxonomy"`
	Condition []datacatalogtaxonomyiambinding.ConditionState `json:"condition"`
}
