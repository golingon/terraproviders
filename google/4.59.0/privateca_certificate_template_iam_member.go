// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	privatecacertificatetemplateiammember "github.com/golingon/terraproviders/google/4.59.0/privatecacertificatetemplateiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivatecaCertificateTemplateIamMember(name string, args PrivatecaCertificateTemplateIamMemberArgs) *PrivatecaCertificateTemplateIamMember {
	return &PrivatecaCertificateTemplateIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivatecaCertificateTemplateIamMember)(nil)

type PrivatecaCertificateTemplateIamMember struct {
	Name  string
	Args  PrivatecaCertificateTemplateIamMemberArgs
	state *privatecaCertificateTemplateIamMemberState
}

func (pctim *PrivatecaCertificateTemplateIamMember) Type() string {
	return "google_privateca_certificate_template_iam_member"
}

func (pctim *PrivatecaCertificateTemplateIamMember) LocalName() string {
	return pctim.Name
}

func (pctim *PrivatecaCertificateTemplateIamMember) Configuration() interface{} {
	return pctim.Args
}

func (pctim *PrivatecaCertificateTemplateIamMember) Attributes() privatecaCertificateTemplateIamMemberAttributes {
	return privatecaCertificateTemplateIamMemberAttributes{ref: terra.ReferenceResource(pctim)}
}

func (pctim *PrivatecaCertificateTemplateIamMember) ImportState(av io.Reader) error {
	pctim.state = &privatecaCertificateTemplateIamMemberState{}
	if err := json.NewDecoder(av).Decode(pctim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pctim.Type(), pctim.LocalName(), err)
	}
	return nil
}

func (pctim *PrivatecaCertificateTemplateIamMember) State() (*privatecaCertificateTemplateIamMemberState, bool) {
	return pctim.state, pctim.state != nil
}

func (pctim *PrivatecaCertificateTemplateIamMember) StateMust() *privatecaCertificateTemplateIamMemberState {
	if pctim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pctim.Type(), pctim.LocalName()))
	}
	return pctim.state
}

func (pctim *PrivatecaCertificateTemplateIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(pctim)
}

type PrivatecaCertificateTemplateIamMemberArgs struct {
	// CertificateTemplate: string, required
	CertificateTemplate terra.StringValue `hcl:"certificate_template,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *privatecacertificatetemplateiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that PrivatecaCertificateTemplateIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privatecaCertificateTemplateIamMemberAttributes struct {
	ref terra.Reference
}

func (pctim privatecaCertificateTemplateIamMemberAttributes) CertificateTemplate() terra.StringValue {
	return terra.ReferenceString(pctim.ref.Append("certificate_template"))
}

func (pctim privatecaCertificateTemplateIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(pctim.ref.Append("etag"))
}

func (pctim privatecaCertificateTemplateIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pctim.ref.Append("id"))
}

func (pctim privatecaCertificateTemplateIamMemberAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pctim.ref.Append("location"))
}

func (pctim privatecaCertificateTemplateIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(pctim.ref.Append("member"))
}

func (pctim privatecaCertificateTemplateIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(pctim.ref.Append("project"))
}

func (pctim privatecaCertificateTemplateIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(pctim.ref.Append("role"))
}

func (pctim privatecaCertificateTemplateIamMemberAttributes) Condition() terra.ListValue[privatecacertificatetemplateiammember.ConditionAttributes] {
	return terra.ReferenceList[privatecacertificatetemplateiammember.ConditionAttributes](pctim.ref.Append("condition"))
}

type privatecaCertificateTemplateIamMemberState struct {
	CertificateTemplate string                                                 `json:"certificate_template"`
	Etag                string                                                 `json:"etag"`
	Id                  string                                                 `json:"id"`
	Location            string                                                 `json:"location"`
	Member              string                                                 `json:"member"`
	Project             string                                                 `json:"project"`
	Role                string                                                 `json:"role"`
	Condition           []privatecacertificatetemplateiammember.ConditionState `json:"condition"`
}
