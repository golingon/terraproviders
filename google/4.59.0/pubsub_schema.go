// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	pubsubschema "github.com/golingon/terraproviders/google/4.59.0/pubsubschema"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPubsubSchema(name string, args PubsubSchemaArgs) *PubsubSchema {
	return &PubsubSchema{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PubsubSchema)(nil)

type PubsubSchema struct {
	Name  string
	Args  PubsubSchemaArgs
	state *pubsubSchemaState
}

func (ps *PubsubSchema) Type() string {
	return "google_pubsub_schema"
}

func (ps *PubsubSchema) LocalName() string {
	return ps.Name
}

func (ps *PubsubSchema) Configuration() interface{} {
	return ps.Args
}

func (ps *PubsubSchema) Attributes() pubsubSchemaAttributes {
	return pubsubSchemaAttributes{ref: terra.ReferenceResource(ps)}
}

func (ps *PubsubSchema) ImportState(av io.Reader) error {
	ps.state = &pubsubSchemaState{}
	if err := json.NewDecoder(av).Decode(ps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ps.Type(), ps.LocalName(), err)
	}
	return nil
}

func (ps *PubsubSchema) State() (*pubsubSchemaState, bool) {
	return ps.state, ps.state != nil
}

func (ps *PubsubSchema) StateMust() *pubsubSchemaState {
	if ps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ps.Type(), ps.LocalName()))
	}
	return ps.state
}

func (ps *PubsubSchema) DependOn() terra.Reference {
	return terra.ReferenceResource(ps)
}

type PubsubSchemaArgs struct {
	// Definition: string, optional
	Definition terra.StringValue `hcl:"definition,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Timeouts: optional
	Timeouts *pubsubschema.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PubsubSchema depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type pubsubSchemaAttributes struct {
	ref terra.Reference
}

func (ps pubsubSchemaAttributes) Definition() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("definition"))
}

func (ps pubsubSchemaAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("id"))
}

func (ps pubsubSchemaAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("name"))
}

func (ps pubsubSchemaAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("project"))
}

func (ps pubsubSchemaAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("type"))
}

func (ps pubsubSchemaAttributes) Timeouts() pubsubschema.TimeoutsAttributes {
	return terra.ReferenceSingle[pubsubschema.TimeoutsAttributes](ps.ref.Append("timeouts"))
}

type pubsubSchemaState struct {
	Definition string                      `json:"definition"`
	Id         string                      `json:"id"`
	Name       string                      `json:"name"`
	Project    string                      `json:"project"`
	Type       string                      `json:"type"`
	Timeouts   *pubsubschema.TimeoutsState `json:"timeouts"`
}
