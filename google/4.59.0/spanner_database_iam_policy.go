// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpannerDatabaseIamPolicy(name string, args SpannerDatabaseIamPolicyArgs) *SpannerDatabaseIamPolicy {
	return &SpannerDatabaseIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpannerDatabaseIamPolicy)(nil)

type SpannerDatabaseIamPolicy struct {
	Name  string
	Args  SpannerDatabaseIamPolicyArgs
	state *spannerDatabaseIamPolicyState
}

func (sdip *SpannerDatabaseIamPolicy) Type() string {
	return "google_spanner_database_iam_policy"
}

func (sdip *SpannerDatabaseIamPolicy) LocalName() string {
	return sdip.Name
}

func (sdip *SpannerDatabaseIamPolicy) Configuration() interface{} {
	return sdip.Args
}

func (sdip *SpannerDatabaseIamPolicy) Attributes() spannerDatabaseIamPolicyAttributes {
	return spannerDatabaseIamPolicyAttributes{ref: terra.ReferenceResource(sdip)}
}

func (sdip *SpannerDatabaseIamPolicy) ImportState(av io.Reader) error {
	sdip.state = &spannerDatabaseIamPolicyState{}
	if err := json.NewDecoder(av).Decode(sdip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sdip.Type(), sdip.LocalName(), err)
	}
	return nil
}

func (sdip *SpannerDatabaseIamPolicy) State() (*spannerDatabaseIamPolicyState, bool) {
	return sdip.state, sdip.state != nil
}

func (sdip *SpannerDatabaseIamPolicy) StateMust() *spannerDatabaseIamPolicyState {
	if sdip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sdip.Type(), sdip.LocalName()))
	}
	return sdip.state
}

func (sdip *SpannerDatabaseIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(sdip)
}

type SpannerDatabaseIamPolicyArgs struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that SpannerDatabaseIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type spannerDatabaseIamPolicyAttributes struct {
	ref terra.Reference
}

func (sdip spannerDatabaseIamPolicyAttributes) Database() terra.StringValue {
	return terra.ReferenceString(sdip.ref.Append("database"))
}

func (sdip spannerDatabaseIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(sdip.ref.Append("etag"))
}

func (sdip spannerDatabaseIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sdip.ref.Append("id"))
}

func (sdip spannerDatabaseIamPolicyAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(sdip.ref.Append("instance"))
}

func (sdip spannerDatabaseIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(sdip.ref.Append("policy_data"))
}

func (sdip spannerDatabaseIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(sdip.ref.Append("project"))
}

type spannerDatabaseIamPolicyState struct {
	Database   string `json:"database"`
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Instance   string `json:"instance"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
}
