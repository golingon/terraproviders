// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package computereservation

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ShareSettings struct {
	// ShareType: string, optional
	ShareType terra.StringValue `hcl:"share_type,attr"`
	// ProjectMap: min=0
	ProjectMap []ProjectMap `hcl:"project_map,block" validate:"min=0"`
}

type ProjectMap struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// ProjectId: string, optional
	ProjectId terra.StringValue `hcl:"project_id,attr"`
}

type SpecificReservation struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// InstanceProperties: required
	InstanceProperties *InstanceProperties `hcl:"instance_properties,block" validate:"required"`
}

type InstanceProperties struct {
	// MachineType: string, required
	MachineType terra.StringValue `hcl:"machine_type,attr" validate:"required"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// GuestAccelerators: min=0
	GuestAccelerators []GuestAccelerators `hcl:"guest_accelerators,block" validate:"min=0"`
	// LocalSsds: min=0
	LocalSsds []LocalSsds `hcl:"local_ssds,block" validate:"min=0"`
}

type GuestAccelerators struct {
	// AcceleratorCount: number, required
	AcceleratorCount terra.NumberValue `hcl:"accelerator_count,attr" validate:"required"`
	// AcceleratorType: string, required
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr" validate:"required"`
}

type LocalSsds struct {
	// DiskSizeGb: number, required
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr" validate:"required"`
	// Interface: string, optional
	Interface terra.StringValue `hcl:"interface,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ShareSettingsAttributes struct {
	ref terra.Reference
}

func (ss ShareSettingsAttributes) InternalRef() terra.Reference {
	return ss.ref
}

func (ss ShareSettingsAttributes) InternalWithRef(ref terra.Reference) ShareSettingsAttributes {
	return ShareSettingsAttributes{ref: ref}
}

func (ss ShareSettingsAttributes) InternalTokens() hclwrite.Tokens {
	return ss.ref.InternalTokens()
}

func (ss ShareSettingsAttributes) ShareType() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("share_type"))
}

func (ss ShareSettingsAttributes) ProjectMap() terra.SetValue[ProjectMapAttributes] {
	return terra.ReferenceSet[ProjectMapAttributes](ss.ref.Append("project_map"))
}

type ProjectMapAttributes struct {
	ref terra.Reference
}

func (pm ProjectMapAttributes) InternalRef() terra.Reference {
	return pm.ref
}

func (pm ProjectMapAttributes) InternalWithRef(ref terra.Reference) ProjectMapAttributes {
	return ProjectMapAttributes{ref: ref}
}

func (pm ProjectMapAttributes) InternalTokens() hclwrite.Tokens {
	return pm.ref.InternalTokens()
}

func (pm ProjectMapAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pm.ref.Append("id"))
}

func (pm ProjectMapAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceString(pm.ref.Append("project_id"))
}

type SpecificReservationAttributes struct {
	ref terra.Reference
}

func (sr SpecificReservationAttributes) InternalRef() terra.Reference {
	return sr.ref
}

func (sr SpecificReservationAttributes) InternalWithRef(ref terra.Reference) SpecificReservationAttributes {
	return SpecificReservationAttributes{ref: ref}
}

func (sr SpecificReservationAttributes) InternalTokens() hclwrite.Tokens {
	return sr.ref.InternalTokens()
}

func (sr SpecificReservationAttributes) Count() terra.NumberValue {
	return terra.ReferenceNumber(sr.ref.Append("count"))
}

func (sr SpecificReservationAttributes) InUseCount() terra.NumberValue {
	return terra.ReferenceNumber(sr.ref.Append("in_use_count"))
}

func (sr SpecificReservationAttributes) InstanceProperties() terra.ListValue[InstancePropertiesAttributes] {
	return terra.ReferenceList[InstancePropertiesAttributes](sr.ref.Append("instance_properties"))
}

type InstancePropertiesAttributes struct {
	ref terra.Reference
}

func (ip InstancePropertiesAttributes) InternalRef() terra.Reference {
	return ip.ref
}

func (ip InstancePropertiesAttributes) InternalWithRef(ref terra.Reference) InstancePropertiesAttributes {
	return InstancePropertiesAttributes{ref: ref}
}

func (ip InstancePropertiesAttributes) InternalTokens() hclwrite.Tokens {
	return ip.ref.InternalTokens()
}

func (ip InstancePropertiesAttributes) MachineType() terra.StringValue {
	return terra.ReferenceString(ip.ref.Append("machine_type"))
}

func (ip InstancePropertiesAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceString(ip.ref.Append("min_cpu_platform"))
}

func (ip InstancePropertiesAttributes) GuestAccelerators() terra.ListValue[GuestAcceleratorsAttributes] {
	return terra.ReferenceList[GuestAcceleratorsAttributes](ip.ref.Append("guest_accelerators"))
}

func (ip InstancePropertiesAttributes) LocalSsds() terra.ListValue[LocalSsdsAttributes] {
	return terra.ReferenceList[LocalSsdsAttributes](ip.ref.Append("local_ssds"))
}

type GuestAcceleratorsAttributes struct {
	ref terra.Reference
}

func (ga GuestAcceleratorsAttributes) InternalRef() terra.Reference {
	return ga.ref
}

func (ga GuestAcceleratorsAttributes) InternalWithRef(ref terra.Reference) GuestAcceleratorsAttributes {
	return GuestAcceleratorsAttributes{ref: ref}
}

func (ga GuestAcceleratorsAttributes) InternalTokens() hclwrite.Tokens {
	return ga.ref.InternalTokens()
}

func (ga GuestAcceleratorsAttributes) AcceleratorCount() terra.NumberValue {
	return terra.ReferenceNumber(ga.ref.Append("accelerator_count"))
}

func (ga GuestAcceleratorsAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("accelerator_type"))
}

type LocalSsdsAttributes struct {
	ref terra.Reference
}

func (ls LocalSsdsAttributes) InternalRef() terra.Reference {
	return ls.ref
}

func (ls LocalSsdsAttributes) InternalWithRef(ref terra.Reference) LocalSsdsAttributes {
	return LocalSsdsAttributes{ref: ref}
}

func (ls LocalSsdsAttributes) InternalTokens() hclwrite.Tokens {
	return ls.ref.InternalTokens()
}

func (ls LocalSsdsAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceNumber(ls.ref.Append("disk_size_gb"))
}

func (ls LocalSsdsAttributes) Interface() terra.StringValue {
	return terra.ReferenceString(ls.ref.Append("interface"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type ShareSettingsState struct {
	ShareType  string            `json:"share_type"`
	ProjectMap []ProjectMapState `json:"project_map"`
}

type ProjectMapState struct {
	Id        string `json:"id"`
	ProjectId string `json:"project_id"`
}

type SpecificReservationState struct {
	Count              float64                   `json:"count"`
	InUseCount         float64                   `json:"in_use_count"`
	InstanceProperties []InstancePropertiesState `json:"instance_properties"`
}

type InstancePropertiesState struct {
	MachineType       string                   `json:"machine_type"`
	MinCpuPlatform    string                   `json:"min_cpu_platform"`
	GuestAccelerators []GuestAcceleratorsState `json:"guest_accelerators"`
	LocalSsds         []LocalSsdsState         `json:"local_ssds"`
}

type GuestAcceleratorsState struct {
	AcceleratorCount float64 `json:"accelerator_count"`
	AcceleratorType  string  `json:"accelerator_type"`
}

type LocalSsdsState struct {
	DiskSizeGb float64 `json:"disk_size_gb"`
	Interface  string  `json:"interface"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
