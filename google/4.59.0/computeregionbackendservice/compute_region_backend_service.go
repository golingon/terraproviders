// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package computeregionbackendservice

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Backend struct {
	// BalancingMode: string, optional
	BalancingMode terra.StringValue `hcl:"balancing_mode,attr"`
	// CapacityScaler: number, optional
	CapacityScaler terra.NumberValue `hcl:"capacity_scaler,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Failover: bool, optional
	Failover terra.BoolValue `hcl:"failover,attr"`
	// Group: string, required
	Group terra.StringValue `hcl:"group,attr" validate:"required"`
	// MaxConnections: number, optional
	MaxConnections terra.NumberValue `hcl:"max_connections,attr"`
	// MaxConnectionsPerEndpoint: number, optional
	MaxConnectionsPerEndpoint terra.NumberValue `hcl:"max_connections_per_endpoint,attr"`
	// MaxConnectionsPerInstance: number, optional
	MaxConnectionsPerInstance terra.NumberValue `hcl:"max_connections_per_instance,attr"`
	// MaxRate: number, optional
	MaxRate terra.NumberValue `hcl:"max_rate,attr"`
	// MaxRatePerEndpoint: number, optional
	MaxRatePerEndpoint terra.NumberValue `hcl:"max_rate_per_endpoint,attr"`
	// MaxRatePerInstance: number, optional
	MaxRatePerInstance terra.NumberValue `hcl:"max_rate_per_instance,attr"`
	// MaxUtilization: number, optional
	MaxUtilization terra.NumberValue `hcl:"max_utilization,attr"`
}

type CdnPolicy struct {
	// CacheMode: string, optional
	CacheMode terra.StringValue `hcl:"cache_mode,attr"`
	// ClientTtl: number, optional
	ClientTtl terra.NumberValue `hcl:"client_ttl,attr"`
	// DefaultTtl: number, optional
	DefaultTtl terra.NumberValue `hcl:"default_ttl,attr"`
	// MaxTtl: number, optional
	MaxTtl terra.NumberValue `hcl:"max_ttl,attr"`
	// NegativeCaching: bool, optional
	NegativeCaching terra.BoolValue `hcl:"negative_caching,attr"`
	// ServeWhileStale: number, optional
	ServeWhileStale terra.NumberValue `hcl:"serve_while_stale,attr"`
	// SignedUrlCacheMaxAgeSec: number, optional
	SignedUrlCacheMaxAgeSec terra.NumberValue `hcl:"signed_url_cache_max_age_sec,attr"`
	// CacheKeyPolicy: optional
	CacheKeyPolicy *CacheKeyPolicy `hcl:"cache_key_policy,block"`
	// NegativeCachingPolicy: min=0
	NegativeCachingPolicy []NegativeCachingPolicy `hcl:"negative_caching_policy,block" validate:"min=0"`
}

type CacheKeyPolicy struct {
	// IncludeHost: bool, optional
	IncludeHost terra.BoolValue `hcl:"include_host,attr"`
	// IncludeNamedCookies: list of string, optional
	IncludeNamedCookies terra.ListValue[terra.StringValue] `hcl:"include_named_cookies,attr"`
	// IncludeProtocol: bool, optional
	IncludeProtocol terra.BoolValue `hcl:"include_protocol,attr"`
	// IncludeQueryString: bool, optional
	IncludeQueryString terra.BoolValue `hcl:"include_query_string,attr"`
	// QueryStringBlacklist: set of string, optional
	QueryStringBlacklist terra.SetValue[terra.StringValue] `hcl:"query_string_blacklist,attr"`
	// QueryStringWhitelist: set of string, optional
	QueryStringWhitelist terra.SetValue[terra.StringValue] `hcl:"query_string_whitelist,attr"`
}

type NegativeCachingPolicy struct {
	// Code: number, optional
	Code terra.NumberValue `hcl:"code,attr"`
}

type CircuitBreakers struct {
	// MaxConnections: number, optional
	MaxConnections terra.NumberValue `hcl:"max_connections,attr"`
	// MaxPendingRequests: number, optional
	MaxPendingRequests terra.NumberValue `hcl:"max_pending_requests,attr"`
	// MaxRequests: number, optional
	MaxRequests terra.NumberValue `hcl:"max_requests,attr"`
	// MaxRequestsPerConnection: number, optional
	MaxRequestsPerConnection terra.NumberValue `hcl:"max_requests_per_connection,attr"`
	// MaxRetries: number, optional
	MaxRetries terra.NumberValue `hcl:"max_retries,attr"`
}

type ConsistentHash struct {
	// HttpHeaderName: string, optional
	HttpHeaderName terra.StringValue `hcl:"http_header_name,attr"`
	// MinimumRingSize: number, optional
	MinimumRingSize terra.NumberValue `hcl:"minimum_ring_size,attr"`
	// HttpCookie: optional
	HttpCookie *HttpCookie `hcl:"http_cookie,block"`
}

type HttpCookie struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Ttl: optional
	Ttl *Ttl `hcl:"ttl,block"`
}

type Ttl struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: number, required
	Seconds terra.NumberValue `hcl:"seconds,attr" validate:"required"`
}

type FailoverPolicy struct {
	// DisableConnectionDrainOnFailover: bool, optional
	DisableConnectionDrainOnFailover terra.BoolValue `hcl:"disable_connection_drain_on_failover,attr"`
	// DropTrafficIfUnhealthy: bool, optional
	DropTrafficIfUnhealthy terra.BoolValue `hcl:"drop_traffic_if_unhealthy,attr"`
	// FailoverRatio: number, optional
	FailoverRatio terra.NumberValue `hcl:"failover_ratio,attr"`
}

type Iap struct {
	// Oauth2ClientId: string, required
	Oauth2ClientId terra.StringValue `hcl:"oauth2_client_id,attr" validate:"required"`
	// Oauth2ClientSecret: string, required
	Oauth2ClientSecret terra.StringValue `hcl:"oauth2_client_secret,attr" validate:"required"`
}

type LogConfig struct {
	// Enable: bool, optional
	Enable terra.BoolValue `hcl:"enable,attr"`
	// SampleRate: number, optional
	SampleRate terra.NumberValue `hcl:"sample_rate,attr"`
}

type OutlierDetection struct {
	// ConsecutiveErrors: number, optional
	ConsecutiveErrors terra.NumberValue `hcl:"consecutive_errors,attr"`
	// ConsecutiveGatewayFailure: number, optional
	ConsecutiveGatewayFailure terra.NumberValue `hcl:"consecutive_gateway_failure,attr"`
	// EnforcingConsecutiveErrors: number, optional
	EnforcingConsecutiveErrors terra.NumberValue `hcl:"enforcing_consecutive_errors,attr"`
	// EnforcingConsecutiveGatewayFailure: number, optional
	EnforcingConsecutiveGatewayFailure terra.NumberValue `hcl:"enforcing_consecutive_gateway_failure,attr"`
	// EnforcingSuccessRate: number, optional
	EnforcingSuccessRate terra.NumberValue `hcl:"enforcing_success_rate,attr"`
	// MaxEjectionPercent: number, optional
	MaxEjectionPercent terra.NumberValue `hcl:"max_ejection_percent,attr"`
	// SuccessRateMinimumHosts: number, optional
	SuccessRateMinimumHosts terra.NumberValue `hcl:"success_rate_minimum_hosts,attr"`
	// SuccessRateRequestVolume: number, optional
	SuccessRateRequestVolume terra.NumberValue `hcl:"success_rate_request_volume,attr"`
	// SuccessRateStdevFactor: number, optional
	SuccessRateStdevFactor terra.NumberValue `hcl:"success_rate_stdev_factor,attr"`
	// BaseEjectionTime: optional
	BaseEjectionTime *BaseEjectionTime `hcl:"base_ejection_time,block"`
	// Interval: optional
	Interval *Interval `hcl:"interval,block"`
}

type BaseEjectionTime struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: number, required
	Seconds terra.NumberValue `hcl:"seconds,attr" validate:"required"`
}

type Interval struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: number, required
	Seconds terra.NumberValue `hcl:"seconds,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BackendAttributes struct {
	ref terra.Reference
}

func (b BackendAttributes) InternalRef() terra.Reference {
	return b.ref
}

func (b BackendAttributes) InternalWithRef(ref terra.Reference) BackendAttributes {
	return BackendAttributes{ref: ref}
}

func (b BackendAttributes) InternalTokens() hclwrite.Tokens {
	return b.ref.InternalTokens()
}

func (b BackendAttributes) BalancingMode() terra.StringValue {
	return terra.ReferenceString(b.ref.Append("balancing_mode"))
}

func (b BackendAttributes) CapacityScaler() terra.NumberValue {
	return terra.ReferenceNumber(b.ref.Append("capacity_scaler"))
}

func (b BackendAttributes) Description() terra.StringValue {
	return terra.ReferenceString(b.ref.Append("description"))
}

func (b BackendAttributes) Failover() terra.BoolValue {
	return terra.ReferenceBool(b.ref.Append("failover"))
}

func (b BackendAttributes) Group() terra.StringValue {
	return terra.ReferenceString(b.ref.Append("group"))
}

func (b BackendAttributes) MaxConnections() terra.NumberValue {
	return terra.ReferenceNumber(b.ref.Append("max_connections"))
}

func (b BackendAttributes) MaxConnectionsPerEndpoint() terra.NumberValue {
	return terra.ReferenceNumber(b.ref.Append("max_connections_per_endpoint"))
}

func (b BackendAttributes) MaxConnectionsPerInstance() terra.NumberValue {
	return terra.ReferenceNumber(b.ref.Append("max_connections_per_instance"))
}

func (b BackendAttributes) MaxRate() terra.NumberValue {
	return terra.ReferenceNumber(b.ref.Append("max_rate"))
}

func (b BackendAttributes) MaxRatePerEndpoint() terra.NumberValue {
	return terra.ReferenceNumber(b.ref.Append("max_rate_per_endpoint"))
}

func (b BackendAttributes) MaxRatePerInstance() terra.NumberValue {
	return terra.ReferenceNumber(b.ref.Append("max_rate_per_instance"))
}

func (b BackendAttributes) MaxUtilization() terra.NumberValue {
	return terra.ReferenceNumber(b.ref.Append("max_utilization"))
}

type CdnPolicyAttributes struct {
	ref terra.Reference
}

func (cp CdnPolicyAttributes) InternalRef() terra.Reference {
	return cp.ref
}

func (cp CdnPolicyAttributes) InternalWithRef(ref terra.Reference) CdnPolicyAttributes {
	return CdnPolicyAttributes{ref: ref}
}

func (cp CdnPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return cp.ref.InternalTokens()
}

func (cp CdnPolicyAttributes) CacheMode() terra.StringValue {
	return terra.ReferenceString(cp.ref.Append("cache_mode"))
}

func (cp CdnPolicyAttributes) ClientTtl() terra.NumberValue {
	return terra.ReferenceNumber(cp.ref.Append("client_ttl"))
}

func (cp CdnPolicyAttributes) DefaultTtl() terra.NumberValue {
	return terra.ReferenceNumber(cp.ref.Append("default_ttl"))
}

func (cp CdnPolicyAttributes) MaxTtl() terra.NumberValue {
	return terra.ReferenceNumber(cp.ref.Append("max_ttl"))
}

func (cp CdnPolicyAttributes) NegativeCaching() terra.BoolValue {
	return terra.ReferenceBool(cp.ref.Append("negative_caching"))
}

func (cp CdnPolicyAttributes) ServeWhileStale() terra.NumberValue {
	return terra.ReferenceNumber(cp.ref.Append("serve_while_stale"))
}

func (cp CdnPolicyAttributes) SignedUrlCacheMaxAgeSec() terra.NumberValue {
	return terra.ReferenceNumber(cp.ref.Append("signed_url_cache_max_age_sec"))
}

func (cp CdnPolicyAttributes) CacheKeyPolicy() terra.ListValue[CacheKeyPolicyAttributes] {
	return terra.ReferenceList[CacheKeyPolicyAttributes](cp.ref.Append("cache_key_policy"))
}

func (cp CdnPolicyAttributes) NegativeCachingPolicy() terra.ListValue[NegativeCachingPolicyAttributes] {
	return terra.ReferenceList[NegativeCachingPolicyAttributes](cp.ref.Append("negative_caching_policy"))
}

type CacheKeyPolicyAttributes struct {
	ref terra.Reference
}

func (ckp CacheKeyPolicyAttributes) InternalRef() terra.Reference {
	return ckp.ref
}

func (ckp CacheKeyPolicyAttributes) InternalWithRef(ref terra.Reference) CacheKeyPolicyAttributes {
	return CacheKeyPolicyAttributes{ref: ref}
}

func (ckp CacheKeyPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return ckp.ref.InternalTokens()
}

func (ckp CacheKeyPolicyAttributes) IncludeHost() terra.BoolValue {
	return terra.ReferenceBool(ckp.ref.Append("include_host"))
}

func (ckp CacheKeyPolicyAttributes) IncludeNamedCookies() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ckp.ref.Append("include_named_cookies"))
}

func (ckp CacheKeyPolicyAttributes) IncludeProtocol() terra.BoolValue {
	return terra.ReferenceBool(ckp.ref.Append("include_protocol"))
}

func (ckp CacheKeyPolicyAttributes) IncludeQueryString() terra.BoolValue {
	return terra.ReferenceBool(ckp.ref.Append("include_query_string"))
}

func (ckp CacheKeyPolicyAttributes) QueryStringBlacklist() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ckp.ref.Append("query_string_blacklist"))
}

func (ckp CacheKeyPolicyAttributes) QueryStringWhitelist() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ckp.ref.Append("query_string_whitelist"))
}

type NegativeCachingPolicyAttributes struct {
	ref terra.Reference
}

func (ncp NegativeCachingPolicyAttributes) InternalRef() terra.Reference {
	return ncp.ref
}

func (ncp NegativeCachingPolicyAttributes) InternalWithRef(ref terra.Reference) NegativeCachingPolicyAttributes {
	return NegativeCachingPolicyAttributes{ref: ref}
}

func (ncp NegativeCachingPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return ncp.ref.InternalTokens()
}

func (ncp NegativeCachingPolicyAttributes) Code() terra.NumberValue {
	return terra.ReferenceNumber(ncp.ref.Append("code"))
}

type CircuitBreakersAttributes struct {
	ref terra.Reference
}

func (cb CircuitBreakersAttributes) InternalRef() terra.Reference {
	return cb.ref
}

func (cb CircuitBreakersAttributes) InternalWithRef(ref terra.Reference) CircuitBreakersAttributes {
	return CircuitBreakersAttributes{ref: ref}
}

func (cb CircuitBreakersAttributes) InternalTokens() hclwrite.Tokens {
	return cb.ref.InternalTokens()
}

func (cb CircuitBreakersAttributes) MaxConnections() terra.NumberValue {
	return terra.ReferenceNumber(cb.ref.Append("max_connections"))
}

func (cb CircuitBreakersAttributes) MaxPendingRequests() terra.NumberValue {
	return terra.ReferenceNumber(cb.ref.Append("max_pending_requests"))
}

func (cb CircuitBreakersAttributes) MaxRequests() terra.NumberValue {
	return terra.ReferenceNumber(cb.ref.Append("max_requests"))
}

func (cb CircuitBreakersAttributes) MaxRequestsPerConnection() terra.NumberValue {
	return terra.ReferenceNumber(cb.ref.Append("max_requests_per_connection"))
}

func (cb CircuitBreakersAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceNumber(cb.ref.Append("max_retries"))
}

type ConsistentHashAttributes struct {
	ref terra.Reference
}

func (ch ConsistentHashAttributes) InternalRef() terra.Reference {
	return ch.ref
}

func (ch ConsistentHashAttributes) InternalWithRef(ref terra.Reference) ConsistentHashAttributes {
	return ConsistentHashAttributes{ref: ref}
}

func (ch ConsistentHashAttributes) InternalTokens() hclwrite.Tokens {
	return ch.ref.InternalTokens()
}

func (ch ConsistentHashAttributes) HttpHeaderName() terra.StringValue {
	return terra.ReferenceString(ch.ref.Append("http_header_name"))
}

func (ch ConsistentHashAttributes) MinimumRingSize() terra.NumberValue {
	return terra.ReferenceNumber(ch.ref.Append("minimum_ring_size"))
}

func (ch ConsistentHashAttributes) HttpCookie() terra.ListValue[HttpCookieAttributes] {
	return terra.ReferenceList[HttpCookieAttributes](ch.ref.Append("http_cookie"))
}

type HttpCookieAttributes struct {
	ref terra.Reference
}

func (hc HttpCookieAttributes) InternalRef() terra.Reference {
	return hc.ref
}

func (hc HttpCookieAttributes) InternalWithRef(ref terra.Reference) HttpCookieAttributes {
	return HttpCookieAttributes{ref: ref}
}

func (hc HttpCookieAttributes) InternalTokens() hclwrite.Tokens {
	return hc.ref.InternalTokens()
}

func (hc HttpCookieAttributes) Name() terra.StringValue {
	return terra.ReferenceString(hc.ref.Append("name"))
}

func (hc HttpCookieAttributes) Path() terra.StringValue {
	return terra.ReferenceString(hc.ref.Append("path"))
}

func (hc HttpCookieAttributes) Ttl() terra.ListValue[TtlAttributes] {
	return terra.ReferenceList[TtlAttributes](hc.ref.Append("ttl"))
}

type TtlAttributes struct {
	ref terra.Reference
}

func (t TtlAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TtlAttributes) InternalWithRef(ref terra.Reference) TtlAttributes {
	return TtlAttributes{ref: ref}
}

func (t TtlAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TtlAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceNumber(t.ref.Append("nanos"))
}

func (t TtlAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceNumber(t.ref.Append("seconds"))
}

type FailoverPolicyAttributes struct {
	ref terra.Reference
}

func (fp FailoverPolicyAttributes) InternalRef() terra.Reference {
	return fp.ref
}

func (fp FailoverPolicyAttributes) InternalWithRef(ref terra.Reference) FailoverPolicyAttributes {
	return FailoverPolicyAttributes{ref: ref}
}

func (fp FailoverPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return fp.ref.InternalTokens()
}

func (fp FailoverPolicyAttributes) DisableConnectionDrainOnFailover() terra.BoolValue {
	return terra.ReferenceBool(fp.ref.Append("disable_connection_drain_on_failover"))
}

func (fp FailoverPolicyAttributes) DropTrafficIfUnhealthy() terra.BoolValue {
	return terra.ReferenceBool(fp.ref.Append("drop_traffic_if_unhealthy"))
}

func (fp FailoverPolicyAttributes) FailoverRatio() terra.NumberValue {
	return terra.ReferenceNumber(fp.ref.Append("failover_ratio"))
}

type IapAttributes struct {
	ref terra.Reference
}

func (i IapAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i IapAttributes) InternalWithRef(ref terra.Reference) IapAttributes {
	return IapAttributes{ref: ref}
}

func (i IapAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i IapAttributes) Oauth2ClientId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("oauth2_client_id"))
}

func (i IapAttributes) Oauth2ClientSecret() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("oauth2_client_secret"))
}

func (i IapAttributes) Oauth2ClientSecretSha256() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("oauth2_client_secret_sha256"))
}

type LogConfigAttributes struct {
	ref terra.Reference
}

func (lc LogConfigAttributes) InternalRef() terra.Reference {
	return lc.ref
}

func (lc LogConfigAttributes) InternalWithRef(ref terra.Reference) LogConfigAttributes {
	return LogConfigAttributes{ref: ref}
}

func (lc LogConfigAttributes) InternalTokens() hclwrite.Tokens {
	return lc.ref.InternalTokens()
}

func (lc LogConfigAttributes) Enable() terra.BoolValue {
	return terra.ReferenceBool(lc.ref.Append("enable"))
}

func (lc LogConfigAttributes) SampleRate() terra.NumberValue {
	return terra.ReferenceNumber(lc.ref.Append("sample_rate"))
}

type OutlierDetectionAttributes struct {
	ref terra.Reference
}

func (od OutlierDetectionAttributes) InternalRef() terra.Reference {
	return od.ref
}

func (od OutlierDetectionAttributes) InternalWithRef(ref terra.Reference) OutlierDetectionAttributes {
	return OutlierDetectionAttributes{ref: ref}
}

func (od OutlierDetectionAttributes) InternalTokens() hclwrite.Tokens {
	return od.ref.InternalTokens()
}

func (od OutlierDetectionAttributes) ConsecutiveErrors() terra.NumberValue {
	return terra.ReferenceNumber(od.ref.Append("consecutive_errors"))
}

func (od OutlierDetectionAttributes) ConsecutiveGatewayFailure() terra.NumberValue {
	return terra.ReferenceNumber(od.ref.Append("consecutive_gateway_failure"))
}

func (od OutlierDetectionAttributes) EnforcingConsecutiveErrors() terra.NumberValue {
	return terra.ReferenceNumber(od.ref.Append("enforcing_consecutive_errors"))
}

func (od OutlierDetectionAttributes) EnforcingConsecutiveGatewayFailure() terra.NumberValue {
	return terra.ReferenceNumber(od.ref.Append("enforcing_consecutive_gateway_failure"))
}

func (od OutlierDetectionAttributes) EnforcingSuccessRate() terra.NumberValue {
	return terra.ReferenceNumber(od.ref.Append("enforcing_success_rate"))
}

func (od OutlierDetectionAttributes) MaxEjectionPercent() terra.NumberValue {
	return terra.ReferenceNumber(od.ref.Append("max_ejection_percent"))
}

func (od OutlierDetectionAttributes) SuccessRateMinimumHosts() terra.NumberValue {
	return terra.ReferenceNumber(od.ref.Append("success_rate_minimum_hosts"))
}

func (od OutlierDetectionAttributes) SuccessRateRequestVolume() terra.NumberValue {
	return terra.ReferenceNumber(od.ref.Append("success_rate_request_volume"))
}

func (od OutlierDetectionAttributes) SuccessRateStdevFactor() terra.NumberValue {
	return terra.ReferenceNumber(od.ref.Append("success_rate_stdev_factor"))
}

func (od OutlierDetectionAttributes) BaseEjectionTime() terra.ListValue[BaseEjectionTimeAttributes] {
	return terra.ReferenceList[BaseEjectionTimeAttributes](od.ref.Append("base_ejection_time"))
}

func (od OutlierDetectionAttributes) Interval() terra.ListValue[IntervalAttributes] {
	return terra.ReferenceList[IntervalAttributes](od.ref.Append("interval"))
}

type BaseEjectionTimeAttributes struct {
	ref terra.Reference
}

func (bet BaseEjectionTimeAttributes) InternalRef() terra.Reference {
	return bet.ref
}

func (bet BaseEjectionTimeAttributes) InternalWithRef(ref terra.Reference) BaseEjectionTimeAttributes {
	return BaseEjectionTimeAttributes{ref: ref}
}

func (bet BaseEjectionTimeAttributes) InternalTokens() hclwrite.Tokens {
	return bet.ref.InternalTokens()
}

func (bet BaseEjectionTimeAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceNumber(bet.ref.Append("nanos"))
}

func (bet BaseEjectionTimeAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceNumber(bet.ref.Append("seconds"))
}

type IntervalAttributes struct {
	ref terra.Reference
}

func (i IntervalAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i IntervalAttributes) InternalWithRef(ref terra.Reference) IntervalAttributes {
	return IntervalAttributes{ref: ref}
}

func (i IntervalAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i IntervalAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceNumber(i.ref.Append("nanos"))
}

func (i IntervalAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceNumber(i.ref.Append("seconds"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type BackendState struct {
	BalancingMode             string  `json:"balancing_mode"`
	CapacityScaler            float64 `json:"capacity_scaler"`
	Description               string  `json:"description"`
	Failover                  bool    `json:"failover"`
	Group                     string  `json:"group"`
	MaxConnections            float64 `json:"max_connections"`
	MaxConnectionsPerEndpoint float64 `json:"max_connections_per_endpoint"`
	MaxConnectionsPerInstance float64 `json:"max_connections_per_instance"`
	MaxRate                   float64 `json:"max_rate"`
	MaxRatePerEndpoint        float64 `json:"max_rate_per_endpoint"`
	MaxRatePerInstance        float64 `json:"max_rate_per_instance"`
	MaxUtilization            float64 `json:"max_utilization"`
}

type CdnPolicyState struct {
	CacheMode               string                       `json:"cache_mode"`
	ClientTtl               float64                      `json:"client_ttl"`
	DefaultTtl              float64                      `json:"default_ttl"`
	MaxTtl                  float64                      `json:"max_ttl"`
	NegativeCaching         bool                         `json:"negative_caching"`
	ServeWhileStale         float64                      `json:"serve_while_stale"`
	SignedUrlCacheMaxAgeSec float64                      `json:"signed_url_cache_max_age_sec"`
	CacheKeyPolicy          []CacheKeyPolicyState        `json:"cache_key_policy"`
	NegativeCachingPolicy   []NegativeCachingPolicyState `json:"negative_caching_policy"`
}

type CacheKeyPolicyState struct {
	IncludeHost          bool     `json:"include_host"`
	IncludeNamedCookies  []string `json:"include_named_cookies"`
	IncludeProtocol      bool     `json:"include_protocol"`
	IncludeQueryString   bool     `json:"include_query_string"`
	QueryStringBlacklist []string `json:"query_string_blacklist"`
	QueryStringWhitelist []string `json:"query_string_whitelist"`
}

type NegativeCachingPolicyState struct {
	Code float64 `json:"code"`
}

type CircuitBreakersState struct {
	MaxConnections           float64 `json:"max_connections"`
	MaxPendingRequests       float64 `json:"max_pending_requests"`
	MaxRequests              float64 `json:"max_requests"`
	MaxRequestsPerConnection float64 `json:"max_requests_per_connection"`
	MaxRetries               float64 `json:"max_retries"`
}

type ConsistentHashState struct {
	HttpHeaderName  string            `json:"http_header_name"`
	MinimumRingSize float64           `json:"minimum_ring_size"`
	HttpCookie      []HttpCookieState `json:"http_cookie"`
}

type HttpCookieState struct {
	Name string     `json:"name"`
	Path string     `json:"path"`
	Ttl  []TtlState `json:"ttl"`
}

type TtlState struct {
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type FailoverPolicyState struct {
	DisableConnectionDrainOnFailover bool    `json:"disable_connection_drain_on_failover"`
	DropTrafficIfUnhealthy           bool    `json:"drop_traffic_if_unhealthy"`
	FailoverRatio                    float64 `json:"failover_ratio"`
}

type IapState struct {
	Oauth2ClientId           string `json:"oauth2_client_id"`
	Oauth2ClientSecret       string `json:"oauth2_client_secret"`
	Oauth2ClientSecretSha256 string `json:"oauth2_client_secret_sha256"`
}

type LogConfigState struct {
	Enable     bool    `json:"enable"`
	SampleRate float64 `json:"sample_rate"`
}

type OutlierDetectionState struct {
	ConsecutiveErrors                  float64                 `json:"consecutive_errors"`
	ConsecutiveGatewayFailure          float64                 `json:"consecutive_gateway_failure"`
	EnforcingConsecutiveErrors         float64                 `json:"enforcing_consecutive_errors"`
	EnforcingConsecutiveGatewayFailure float64                 `json:"enforcing_consecutive_gateway_failure"`
	EnforcingSuccessRate               float64                 `json:"enforcing_success_rate"`
	MaxEjectionPercent                 float64                 `json:"max_ejection_percent"`
	SuccessRateMinimumHosts            float64                 `json:"success_rate_minimum_hosts"`
	SuccessRateRequestVolume           float64                 `json:"success_rate_request_volume"`
	SuccessRateStdevFactor             float64                 `json:"success_rate_stdev_factor"`
	BaseEjectionTime                   []BaseEjectionTimeState `json:"base_ejection_time"`
	Interval                           []IntervalState         `json:"interval"`
}

type BaseEjectionTimeState struct {
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type IntervalState struct {
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
