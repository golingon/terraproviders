// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package computeinstancefromtemplate

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AttachedDisk struct {
	// DeviceName: string, optional
	DeviceName terra.StringValue `hcl:"device_name,attr"`
	// DiskEncryptionKeyRaw: string, optional
	DiskEncryptionKeyRaw terra.StringValue `hcl:"disk_encryption_key_raw,attr"`
	// DiskEncryptionKeySha256: string, optional
	DiskEncryptionKeySha256 terra.StringValue `hcl:"disk_encryption_key_sha256,attr"`
	// KmsKeySelfLink: string, optional
	KmsKeySelfLink terra.StringValue `hcl:"kms_key_self_link,attr"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
}

type GuestAccelerator struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type ScratchDisk struct {
	// Interface: string, optional
	Interface terra.StringValue `hcl:"interface,attr"`
	// Size: number, optional
	Size terra.NumberValue `hcl:"size,attr"`
}

type ServiceAccount struct {
	// Email: string, optional
	Email terra.StringValue `hcl:"email,attr"`
	// Scopes: set of string, optional
	Scopes terra.SetValue[terra.StringValue] `hcl:"scopes,attr"`
}

type AdvancedMachineFeatures struct {
	// EnableNestedVirtualization: bool, optional
	EnableNestedVirtualization terra.BoolValue `hcl:"enable_nested_virtualization,attr"`
	// ThreadsPerCore: number, optional
	ThreadsPerCore terra.NumberValue `hcl:"threads_per_core,attr"`
	// VisibleCoreCount: number, optional
	VisibleCoreCount terra.NumberValue `hcl:"visible_core_count,attr"`
}

type BootDisk struct {
	// AutoDelete: bool, optional
	AutoDelete terra.BoolValue `hcl:"auto_delete,attr"`
	// DeviceName: string, optional
	DeviceName terra.StringValue `hcl:"device_name,attr"`
	// DiskEncryptionKeyRaw: string, optional
	DiskEncryptionKeyRaw terra.StringValue `hcl:"disk_encryption_key_raw,attr"`
	// KmsKeySelfLink: string, optional
	KmsKeySelfLink terra.StringValue `hcl:"kms_key_self_link,attr"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
	// InitializeParams: optional
	InitializeParams *InitializeParams `hcl:"initialize_params,block"`
}

type InitializeParams struct {
	// Image: string, optional
	Image terra.StringValue `hcl:"image,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Size: number, optional
	Size terra.NumberValue `hcl:"size,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type ConfidentialInstanceConfig struct {
	// EnableConfidentialCompute: bool, required
	EnableConfidentialCompute terra.BoolValue `hcl:"enable_confidential_compute,attr" validate:"required"`
}

type NetworkInterface struct {
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// NetworkIp: string, optional
	NetworkIp terra.StringValue `hcl:"network_ip,attr"`
	// NicType: string, optional
	NicType terra.StringValue `hcl:"nic_type,attr"`
	// QueueCount: number, optional
	QueueCount terra.NumberValue `hcl:"queue_count,attr"`
	// StackType: string, optional
	StackType terra.StringValue `hcl:"stack_type,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// SubnetworkProject: string, optional
	SubnetworkProject terra.StringValue `hcl:"subnetwork_project,attr"`
	// AccessConfig: min=0
	AccessConfig []AccessConfig `hcl:"access_config,block" validate:"min=0"`
	// AliasIpRange: min=0
	AliasIpRange []AliasIpRange `hcl:"alias_ip_range,block" validate:"min=0"`
	// Ipv6AccessConfig: min=0
	Ipv6AccessConfig []Ipv6AccessConfig `hcl:"ipv6_access_config,block" validate:"min=0"`
}

type AccessConfig struct {
	// NatIp: string, optional
	NatIp terra.StringValue `hcl:"nat_ip,attr"`
	// NetworkTier: string, optional
	NetworkTier terra.StringValue `hcl:"network_tier,attr"`
	// PublicPtrDomainName: string, optional
	PublicPtrDomainName terra.StringValue `hcl:"public_ptr_domain_name,attr"`
}

type AliasIpRange struct {
	// IpCidrRange: string, optional
	IpCidrRange terra.StringValue `hcl:"ip_cidr_range,attr"`
	// SubnetworkRangeName: string, optional
	SubnetworkRangeName terra.StringValue `hcl:"subnetwork_range_name,attr"`
}

type Ipv6AccessConfig struct {
	// NetworkTier: string, required
	NetworkTier terra.StringValue `hcl:"network_tier,attr" validate:"required"`
	// PublicPtrDomainName: string, optional
	PublicPtrDomainName terra.StringValue `hcl:"public_ptr_domain_name,attr"`
}

type ReservationAffinity struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// SpecificReservation: optional
	SpecificReservation *SpecificReservation `hcl:"specific_reservation,block"`
}

type SpecificReservation struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type Scheduling struct {
	// AutomaticRestart: bool, optional
	AutomaticRestart terra.BoolValue `hcl:"automatic_restart,attr"`
	// InstanceTerminationAction: string, optional
	InstanceTerminationAction terra.StringValue `hcl:"instance_termination_action,attr"`
	// MinNodeCpus: number, optional
	MinNodeCpus terra.NumberValue `hcl:"min_node_cpus,attr"`
	// OnHostMaintenance: string, optional
	OnHostMaintenance terra.StringValue `hcl:"on_host_maintenance,attr"`
	// Preemptible: bool, optional
	Preemptible terra.BoolValue `hcl:"preemptible,attr"`
	// ProvisioningModel: string, optional
	ProvisioningModel terra.StringValue `hcl:"provisioning_model,attr"`
	// NodeAffinities: min=0
	NodeAffinities []NodeAffinities `hcl:"node_affinities,block" validate:"min=0"`
}

type NodeAffinities struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
	// EnableVtpm: bool, optional
	EnableVtpm terra.BoolValue `hcl:"enable_vtpm,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AttachedDiskAttributes struct {
	ref terra.Reference
}

func (ad AttachedDiskAttributes) InternalRef() terra.Reference {
	return ad.ref
}

func (ad AttachedDiskAttributes) InternalWithRef(ref terra.Reference) AttachedDiskAttributes {
	return AttachedDiskAttributes{ref: ref}
}

func (ad AttachedDiskAttributes) InternalTokens() hclwrite.Tokens {
	return ad.ref.InternalTokens()
}

func (ad AttachedDiskAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("device_name"))
}

func (ad AttachedDiskAttributes) DiskEncryptionKeyRaw() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("disk_encryption_key_raw"))
}

func (ad AttachedDiskAttributes) DiskEncryptionKeySha256() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("disk_encryption_key_sha256"))
}

func (ad AttachedDiskAttributes) KmsKeySelfLink() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("kms_key_self_link"))
}

func (ad AttachedDiskAttributes) Mode() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("mode"))
}

func (ad AttachedDiskAttributes) Source() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("source"))
}

type GuestAcceleratorAttributes struct {
	ref terra.Reference
}

func (ga GuestAcceleratorAttributes) InternalRef() terra.Reference {
	return ga.ref
}

func (ga GuestAcceleratorAttributes) InternalWithRef(ref terra.Reference) GuestAcceleratorAttributes {
	return GuestAcceleratorAttributes{ref: ref}
}

func (ga GuestAcceleratorAttributes) InternalTokens() hclwrite.Tokens {
	return ga.ref.InternalTokens()
}

func (ga GuestAcceleratorAttributes) Count() terra.NumberValue {
	return terra.ReferenceNumber(ga.ref.Append("count"))
}

func (ga GuestAcceleratorAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("type"))
}

type ScratchDiskAttributes struct {
	ref terra.Reference
}

func (sd ScratchDiskAttributes) InternalRef() terra.Reference {
	return sd.ref
}

func (sd ScratchDiskAttributes) InternalWithRef(ref terra.Reference) ScratchDiskAttributes {
	return ScratchDiskAttributes{ref: ref}
}

func (sd ScratchDiskAttributes) InternalTokens() hclwrite.Tokens {
	return sd.ref.InternalTokens()
}

func (sd ScratchDiskAttributes) Interface() terra.StringValue {
	return terra.ReferenceString(sd.ref.Append("interface"))
}

func (sd ScratchDiskAttributes) Size() terra.NumberValue {
	return terra.ReferenceNumber(sd.ref.Append("size"))
}

type ServiceAccountAttributes struct {
	ref terra.Reference
}

func (sa ServiceAccountAttributes) InternalRef() terra.Reference {
	return sa.ref
}

func (sa ServiceAccountAttributes) InternalWithRef(ref terra.Reference) ServiceAccountAttributes {
	return ServiceAccountAttributes{ref: ref}
}

func (sa ServiceAccountAttributes) InternalTokens() hclwrite.Tokens {
	return sa.ref.InternalTokens()
}

func (sa ServiceAccountAttributes) Email() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("email"))
}

func (sa ServiceAccountAttributes) Scopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](sa.ref.Append("scopes"))
}

type AdvancedMachineFeaturesAttributes struct {
	ref terra.Reference
}

func (amf AdvancedMachineFeaturesAttributes) InternalRef() terra.Reference {
	return amf.ref
}

func (amf AdvancedMachineFeaturesAttributes) InternalWithRef(ref terra.Reference) AdvancedMachineFeaturesAttributes {
	return AdvancedMachineFeaturesAttributes{ref: ref}
}

func (amf AdvancedMachineFeaturesAttributes) InternalTokens() hclwrite.Tokens {
	return amf.ref.InternalTokens()
}

func (amf AdvancedMachineFeaturesAttributes) EnableNestedVirtualization() terra.BoolValue {
	return terra.ReferenceBool(amf.ref.Append("enable_nested_virtualization"))
}

func (amf AdvancedMachineFeaturesAttributes) ThreadsPerCore() terra.NumberValue {
	return terra.ReferenceNumber(amf.ref.Append("threads_per_core"))
}

func (amf AdvancedMachineFeaturesAttributes) VisibleCoreCount() terra.NumberValue {
	return terra.ReferenceNumber(amf.ref.Append("visible_core_count"))
}

type BootDiskAttributes struct {
	ref terra.Reference
}

func (bd BootDiskAttributes) InternalRef() terra.Reference {
	return bd.ref
}

func (bd BootDiskAttributes) InternalWithRef(ref terra.Reference) BootDiskAttributes {
	return BootDiskAttributes{ref: ref}
}

func (bd BootDiskAttributes) InternalTokens() hclwrite.Tokens {
	return bd.ref.InternalTokens()
}

func (bd BootDiskAttributes) AutoDelete() terra.BoolValue {
	return terra.ReferenceBool(bd.ref.Append("auto_delete"))
}

func (bd BootDiskAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceString(bd.ref.Append("device_name"))
}

func (bd BootDiskAttributes) DiskEncryptionKeyRaw() terra.StringValue {
	return terra.ReferenceString(bd.ref.Append("disk_encryption_key_raw"))
}

func (bd BootDiskAttributes) DiskEncryptionKeySha256() terra.StringValue {
	return terra.ReferenceString(bd.ref.Append("disk_encryption_key_sha256"))
}

func (bd BootDiskAttributes) KmsKeySelfLink() terra.StringValue {
	return terra.ReferenceString(bd.ref.Append("kms_key_self_link"))
}

func (bd BootDiskAttributes) Mode() terra.StringValue {
	return terra.ReferenceString(bd.ref.Append("mode"))
}

func (bd BootDiskAttributes) Source() terra.StringValue {
	return terra.ReferenceString(bd.ref.Append("source"))
}

func (bd BootDiskAttributes) InitializeParams() terra.ListValue[InitializeParamsAttributes] {
	return terra.ReferenceList[InitializeParamsAttributes](bd.ref.Append("initialize_params"))
}

type InitializeParamsAttributes struct {
	ref terra.Reference
}

func (ip InitializeParamsAttributes) InternalRef() terra.Reference {
	return ip.ref
}

func (ip InitializeParamsAttributes) InternalWithRef(ref terra.Reference) InitializeParamsAttributes {
	return InitializeParamsAttributes{ref: ref}
}

func (ip InitializeParamsAttributes) InternalTokens() hclwrite.Tokens {
	return ip.ref.InternalTokens()
}

func (ip InitializeParamsAttributes) Image() terra.StringValue {
	return terra.ReferenceString(ip.ref.Append("image"))
}

func (ip InitializeParamsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ip.ref.Append("labels"))
}

func (ip InitializeParamsAttributes) Size() terra.NumberValue {
	return terra.ReferenceNumber(ip.ref.Append("size"))
}

func (ip InitializeParamsAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ip.ref.Append("type"))
}

type ConfidentialInstanceConfigAttributes struct {
	ref terra.Reference
}

func (cic ConfidentialInstanceConfigAttributes) InternalRef() terra.Reference {
	return cic.ref
}

func (cic ConfidentialInstanceConfigAttributes) InternalWithRef(ref terra.Reference) ConfidentialInstanceConfigAttributes {
	return ConfidentialInstanceConfigAttributes{ref: ref}
}

func (cic ConfidentialInstanceConfigAttributes) InternalTokens() hclwrite.Tokens {
	return cic.ref.InternalTokens()
}

func (cic ConfidentialInstanceConfigAttributes) EnableConfidentialCompute() terra.BoolValue {
	return terra.ReferenceBool(cic.ref.Append("enable_confidential_compute"))
}

type NetworkInterfaceAttributes struct {
	ref terra.Reference
}

func (ni NetworkInterfaceAttributes) InternalRef() terra.Reference {
	return ni.ref
}

func (ni NetworkInterfaceAttributes) InternalWithRef(ref terra.Reference) NetworkInterfaceAttributes {
	return NetworkInterfaceAttributes{ref: ref}
}

func (ni NetworkInterfaceAttributes) InternalTokens() hclwrite.Tokens {
	return ni.ref.InternalTokens()
}

func (ni NetworkInterfaceAttributes) Ipv6AccessType() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("ipv6_access_type"))
}

func (ni NetworkInterfaceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("name"))
}

func (ni NetworkInterfaceAttributes) Network() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("network"))
}

func (ni NetworkInterfaceAttributes) NetworkIp() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("network_ip"))
}

func (ni NetworkInterfaceAttributes) NicType() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("nic_type"))
}

func (ni NetworkInterfaceAttributes) QueueCount() terra.NumberValue {
	return terra.ReferenceNumber(ni.ref.Append("queue_count"))
}

func (ni NetworkInterfaceAttributes) StackType() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("stack_type"))
}

func (ni NetworkInterfaceAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("subnetwork"))
}

func (ni NetworkInterfaceAttributes) SubnetworkProject() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("subnetwork_project"))
}

func (ni NetworkInterfaceAttributes) AccessConfig() terra.ListValue[AccessConfigAttributes] {
	return terra.ReferenceList[AccessConfigAttributes](ni.ref.Append("access_config"))
}

func (ni NetworkInterfaceAttributes) AliasIpRange() terra.ListValue[AliasIpRangeAttributes] {
	return terra.ReferenceList[AliasIpRangeAttributes](ni.ref.Append("alias_ip_range"))
}

func (ni NetworkInterfaceAttributes) Ipv6AccessConfig() terra.ListValue[Ipv6AccessConfigAttributes] {
	return terra.ReferenceList[Ipv6AccessConfigAttributes](ni.ref.Append("ipv6_access_config"))
}

type AccessConfigAttributes struct {
	ref terra.Reference
}

func (ac AccessConfigAttributes) InternalRef() terra.Reference {
	return ac.ref
}

func (ac AccessConfigAttributes) InternalWithRef(ref terra.Reference) AccessConfigAttributes {
	return AccessConfigAttributes{ref: ref}
}

func (ac AccessConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ac.ref.InternalTokens()
}

func (ac AccessConfigAttributes) NatIp() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("nat_ip"))
}

func (ac AccessConfigAttributes) NetworkTier() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("network_tier"))
}

func (ac AccessConfigAttributes) PublicPtrDomainName() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("public_ptr_domain_name"))
}

type AliasIpRangeAttributes struct {
	ref terra.Reference
}

func (air AliasIpRangeAttributes) InternalRef() terra.Reference {
	return air.ref
}

func (air AliasIpRangeAttributes) InternalWithRef(ref terra.Reference) AliasIpRangeAttributes {
	return AliasIpRangeAttributes{ref: ref}
}

func (air AliasIpRangeAttributes) InternalTokens() hclwrite.Tokens {
	return air.ref.InternalTokens()
}

func (air AliasIpRangeAttributes) IpCidrRange() terra.StringValue {
	return terra.ReferenceString(air.ref.Append("ip_cidr_range"))
}

func (air AliasIpRangeAttributes) SubnetworkRangeName() terra.StringValue {
	return terra.ReferenceString(air.ref.Append("subnetwork_range_name"))
}

type Ipv6AccessConfigAttributes struct {
	ref terra.Reference
}

func (iac Ipv6AccessConfigAttributes) InternalRef() terra.Reference {
	return iac.ref
}

func (iac Ipv6AccessConfigAttributes) InternalWithRef(ref terra.Reference) Ipv6AccessConfigAttributes {
	return Ipv6AccessConfigAttributes{ref: ref}
}

func (iac Ipv6AccessConfigAttributes) InternalTokens() hclwrite.Tokens {
	return iac.ref.InternalTokens()
}

func (iac Ipv6AccessConfigAttributes) ExternalIpv6() terra.StringValue {
	return terra.ReferenceString(iac.ref.Append("external_ipv6"))
}

func (iac Ipv6AccessConfigAttributes) ExternalIpv6PrefixLength() terra.StringValue {
	return terra.ReferenceString(iac.ref.Append("external_ipv6_prefix_length"))
}

func (iac Ipv6AccessConfigAttributes) NetworkTier() terra.StringValue {
	return terra.ReferenceString(iac.ref.Append("network_tier"))
}

func (iac Ipv6AccessConfigAttributes) PublicPtrDomainName() terra.StringValue {
	return terra.ReferenceString(iac.ref.Append("public_ptr_domain_name"))
}

type ReservationAffinityAttributes struct {
	ref terra.Reference
}

func (ra ReservationAffinityAttributes) InternalRef() terra.Reference {
	return ra.ref
}

func (ra ReservationAffinityAttributes) InternalWithRef(ref terra.Reference) ReservationAffinityAttributes {
	return ReservationAffinityAttributes{ref: ref}
}

func (ra ReservationAffinityAttributes) InternalTokens() hclwrite.Tokens {
	return ra.ref.InternalTokens()
}

func (ra ReservationAffinityAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("type"))
}

func (ra ReservationAffinityAttributes) SpecificReservation() terra.ListValue[SpecificReservationAttributes] {
	return terra.ReferenceList[SpecificReservationAttributes](ra.ref.Append("specific_reservation"))
}

type SpecificReservationAttributes struct {
	ref terra.Reference
}

func (sr SpecificReservationAttributes) InternalRef() terra.Reference {
	return sr.ref
}

func (sr SpecificReservationAttributes) InternalWithRef(ref terra.Reference) SpecificReservationAttributes {
	return SpecificReservationAttributes{ref: ref}
}

func (sr SpecificReservationAttributes) InternalTokens() hclwrite.Tokens {
	return sr.ref.InternalTokens()
}

func (sr SpecificReservationAttributes) Key() terra.StringValue {
	return terra.ReferenceString(sr.ref.Append("key"))
}

func (sr SpecificReservationAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](sr.ref.Append("values"))
}

type SchedulingAttributes struct {
	ref terra.Reference
}

func (s SchedulingAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SchedulingAttributes) InternalWithRef(ref terra.Reference) SchedulingAttributes {
	return SchedulingAttributes{ref: ref}
}

func (s SchedulingAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SchedulingAttributes) AutomaticRestart() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("automatic_restart"))
}

func (s SchedulingAttributes) InstanceTerminationAction() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("instance_termination_action"))
}

func (s SchedulingAttributes) MinNodeCpus() terra.NumberValue {
	return terra.ReferenceNumber(s.ref.Append("min_node_cpus"))
}

func (s SchedulingAttributes) OnHostMaintenance() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("on_host_maintenance"))
}

func (s SchedulingAttributes) Preemptible() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("preemptible"))
}

func (s SchedulingAttributes) ProvisioningModel() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("provisioning_model"))
}

func (s SchedulingAttributes) NodeAffinities() terra.SetValue[NodeAffinitiesAttributes] {
	return terra.ReferenceSet[NodeAffinitiesAttributes](s.ref.Append("node_affinities"))
}

type NodeAffinitiesAttributes struct {
	ref terra.Reference
}

func (na NodeAffinitiesAttributes) InternalRef() terra.Reference {
	return na.ref
}

func (na NodeAffinitiesAttributes) InternalWithRef(ref terra.Reference) NodeAffinitiesAttributes {
	return NodeAffinitiesAttributes{ref: ref}
}

func (na NodeAffinitiesAttributes) InternalTokens() hclwrite.Tokens {
	return na.ref.InternalTokens()
}

func (na NodeAffinitiesAttributes) Key() terra.StringValue {
	return terra.ReferenceString(na.ref.Append("key"))
}

func (na NodeAffinitiesAttributes) Operator() terra.StringValue {
	return terra.ReferenceString(na.ref.Append("operator"))
}

func (na NodeAffinitiesAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](na.ref.Append("values"))
}

type ShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic ShieldedInstanceConfigAttributes) InternalRef() terra.Reference {
	return sic.ref
}

func (sic ShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) ShieldedInstanceConfigAttributes {
	return ShieldedInstanceConfigAttributes{ref: ref}
}

func (sic ShieldedInstanceConfigAttributes) InternalTokens() hclwrite.Tokens {
	return sic.ref.InternalTokens()
}

func (sic ShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic ShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceBool(sic.ref.Append("enable_secure_boot"))
}

func (sic ShieldedInstanceConfigAttributes) EnableVtpm() terra.BoolValue {
	return terra.ReferenceBool(sic.ref.Append("enable_vtpm"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type AttachedDiskState struct {
	DeviceName              string `json:"device_name"`
	DiskEncryptionKeyRaw    string `json:"disk_encryption_key_raw"`
	DiskEncryptionKeySha256 string `json:"disk_encryption_key_sha256"`
	KmsKeySelfLink          string `json:"kms_key_self_link"`
	Mode                    string `json:"mode"`
	Source                  string `json:"source"`
}

type GuestAcceleratorState struct {
	Count float64 `json:"count"`
	Type  string  `json:"type"`
}

type ScratchDiskState struct {
	Interface string  `json:"interface"`
	Size      float64 `json:"size"`
}

type ServiceAccountState struct {
	Email  string   `json:"email"`
	Scopes []string `json:"scopes"`
}

type AdvancedMachineFeaturesState struct {
	EnableNestedVirtualization bool    `json:"enable_nested_virtualization"`
	ThreadsPerCore             float64 `json:"threads_per_core"`
	VisibleCoreCount           float64 `json:"visible_core_count"`
}

type BootDiskState struct {
	AutoDelete              bool                    `json:"auto_delete"`
	DeviceName              string                  `json:"device_name"`
	DiskEncryptionKeyRaw    string                  `json:"disk_encryption_key_raw"`
	DiskEncryptionKeySha256 string                  `json:"disk_encryption_key_sha256"`
	KmsKeySelfLink          string                  `json:"kms_key_self_link"`
	Mode                    string                  `json:"mode"`
	Source                  string                  `json:"source"`
	InitializeParams        []InitializeParamsState `json:"initialize_params"`
}

type InitializeParamsState struct {
	Image  string            `json:"image"`
	Labels map[string]string `json:"labels"`
	Size   float64           `json:"size"`
	Type   string            `json:"type"`
}

type ConfidentialInstanceConfigState struct {
	EnableConfidentialCompute bool `json:"enable_confidential_compute"`
}

type NetworkInterfaceState struct {
	Ipv6AccessType    string                  `json:"ipv6_access_type"`
	Name              string                  `json:"name"`
	Network           string                  `json:"network"`
	NetworkIp         string                  `json:"network_ip"`
	NicType           string                  `json:"nic_type"`
	QueueCount        float64                 `json:"queue_count"`
	StackType         string                  `json:"stack_type"`
	Subnetwork        string                  `json:"subnetwork"`
	SubnetworkProject string                  `json:"subnetwork_project"`
	AccessConfig      []AccessConfigState     `json:"access_config"`
	AliasIpRange      []AliasIpRangeState     `json:"alias_ip_range"`
	Ipv6AccessConfig  []Ipv6AccessConfigState `json:"ipv6_access_config"`
}

type AccessConfigState struct {
	NatIp               string `json:"nat_ip"`
	NetworkTier         string `json:"network_tier"`
	PublicPtrDomainName string `json:"public_ptr_domain_name"`
}

type AliasIpRangeState struct {
	IpCidrRange         string `json:"ip_cidr_range"`
	SubnetworkRangeName string `json:"subnetwork_range_name"`
}

type Ipv6AccessConfigState struct {
	ExternalIpv6             string `json:"external_ipv6"`
	ExternalIpv6PrefixLength string `json:"external_ipv6_prefix_length"`
	NetworkTier              string `json:"network_tier"`
	PublicPtrDomainName      string `json:"public_ptr_domain_name"`
}

type ReservationAffinityState struct {
	Type                string                     `json:"type"`
	SpecificReservation []SpecificReservationState `json:"specific_reservation"`
}

type SpecificReservationState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type SchedulingState struct {
	AutomaticRestart          bool                  `json:"automatic_restart"`
	InstanceTerminationAction string                `json:"instance_termination_action"`
	MinNodeCpus               float64               `json:"min_node_cpus"`
	OnHostMaintenance         string                `json:"on_host_maintenance"`
	Preemptible               bool                  `json:"preemptible"`
	ProvisioningModel         string                `json:"provisioning_model"`
	NodeAffinities            []NodeAffinitiesState `json:"node_affinities"`
}

type NodeAffinitiesState struct {
	Key      string   `json:"key"`
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
	EnableVtpm                bool `json:"enable_vtpm"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
