// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datacatalogtag

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Fields struct {
	// BoolValue: bool, optional
	BoolValue terra.BoolValue `hcl:"bool_value,attr"`
	// DoubleValue: number, optional
	DoubleValue terra.NumberValue `hcl:"double_value,attr"`
	// EnumValue: string, optional
	EnumValue terra.StringValue `hcl:"enum_value,attr"`
	// FieldName: string, required
	FieldName terra.StringValue `hcl:"field_name,attr" validate:"required"`
	// StringValue: string, optional
	StringValue terra.StringValue `hcl:"string_value,attr"`
	// TimestampValue: string, optional
	TimestampValue terra.StringValue `hcl:"timestamp_value,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type FieldsAttributes struct {
	ref terra.Reference
}

func (f FieldsAttributes) InternalRef() terra.Reference {
	return f.ref
}

func (f FieldsAttributes) InternalWithRef(ref terra.Reference) FieldsAttributes {
	return FieldsAttributes{ref: ref}
}

func (f FieldsAttributes) InternalTokens() hclwrite.Tokens {
	return f.ref.InternalTokens()
}

func (f FieldsAttributes) BoolValue() terra.BoolValue {
	return terra.ReferenceBool(f.ref.Append("bool_value"))
}

func (f FieldsAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("display_name"))
}

func (f FieldsAttributes) DoubleValue() terra.NumberValue {
	return terra.ReferenceNumber(f.ref.Append("double_value"))
}

func (f FieldsAttributes) EnumValue() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("enum_value"))
}

func (f FieldsAttributes) FieldName() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("field_name"))
}

func (f FieldsAttributes) Order() terra.NumberValue {
	return terra.ReferenceNumber(f.ref.Append("order"))
}

func (f FieldsAttributes) StringValue() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("string_value"))
}

func (f FieldsAttributes) TimestampValue() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("timestamp_value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type FieldsState struct {
	BoolValue      bool    `json:"bool_value"`
	DisplayName    string  `json:"display_name"`
	DoubleValue    float64 `json:"double_value"`
	EnumValue      string  `json:"enum_value"`
	FieldName      string  `json:"field_name"`
	Order          float64 `json:"order"`
	StringValue    string  `json:"string_value"`
	TimestampValue string  `json:"timestamp_value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
