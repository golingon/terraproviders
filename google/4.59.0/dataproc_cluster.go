// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dataproccluster "github.com/golingon/terraproviders/google/4.59.0/dataproccluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataprocCluster(name string, args DataprocClusterArgs) *DataprocCluster {
	return &DataprocCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataprocCluster)(nil)

type DataprocCluster struct {
	Name  string
	Args  DataprocClusterArgs
	state *dataprocClusterState
}

func (dc *DataprocCluster) Type() string {
	return "google_dataproc_cluster"
}

func (dc *DataprocCluster) LocalName() string {
	return dc.Name
}

func (dc *DataprocCluster) Configuration() interface{} {
	return dc.Args
}

func (dc *DataprocCluster) Attributes() dataprocClusterAttributes {
	return dataprocClusterAttributes{ref: terra.ReferenceResource(dc)}
}

func (dc *DataprocCluster) ImportState(av io.Reader) error {
	dc.state = &dataprocClusterState{}
	if err := json.NewDecoder(av).Decode(dc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dc.Type(), dc.LocalName(), err)
	}
	return nil
}

func (dc *DataprocCluster) State() (*dataprocClusterState, bool) {
	return dc.state, dc.state != nil
}

func (dc *DataprocCluster) StateMust() *dataprocClusterState {
	if dc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dc.Type(), dc.LocalName()))
	}
	return dc.state
}

func (dc *DataprocCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(dc)
}

type DataprocClusterArgs struct {
	// GracefulDecommissionTimeout: string, optional
	GracefulDecommissionTimeout terra.StringValue `hcl:"graceful_decommission_timeout,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ClusterConfig: optional
	ClusterConfig *dataproccluster.ClusterConfig `hcl:"cluster_config,block"`
	// Timeouts: optional
	Timeouts *dataproccluster.Timeouts `hcl:"timeouts,block"`
	// VirtualClusterConfig: optional
	VirtualClusterConfig *dataproccluster.VirtualClusterConfig `hcl:"virtual_cluster_config,block"`
	// DependsOn contains resources that DataprocCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataprocClusterAttributes struct {
	ref terra.Reference
}

func (dc dataprocClusterAttributes) GracefulDecommissionTimeout() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("graceful_decommission_timeout"))
}

func (dc dataprocClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("id"))
}

func (dc dataprocClusterAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dc.ref.Append("labels"))
}

func (dc dataprocClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("name"))
}

func (dc dataprocClusterAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("project"))
}

func (dc dataprocClusterAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("region"))
}

func (dc dataprocClusterAttributes) ClusterConfig() terra.ListValue[dataproccluster.ClusterConfigAttributes] {
	return terra.ReferenceList[dataproccluster.ClusterConfigAttributes](dc.ref.Append("cluster_config"))
}

func (dc dataprocClusterAttributes) Timeouts() dataproccluster.TimeoutsAttributes {
	return terra.ReferenceSingle[dataproccluster.TimeoutsAttributes](dc.ref.Append("timeouts"))
}

func (dc dataprocClusterAttributes) VirtualClusterConfig() terra.ListValue[dataproccluster.VirtualClusterConfigAttributes] {
	return terra.ReferenceList[dataproccluster.VirtualClusterConfigAttributes](dc.ref.Append("virtual_cluster_config"))
}

type dataprocClusterState struct {
	GracefulDecommissionTimeout string                                      `json:"graceful_decommission_timeout"`
	Id                          string                                      `json:"id"`
	Labels                      map[string]string                           `json:"labels"`
	Name                        string                                      `json:"name"`
	Project                     string                                      `json:"project"`
	Region                      string                                      `json:"region"`
	ClusterConfig               []dataproccluster.ClusterConfigState        `json:"cluster_config"`
	Timeouts                    *dataproccluster.TimeoutsState              `json:"timeouts"`
	VirtualClusterConfig        []dataproccluster.VirtualClusterConfigState `json:"virtual_cluster_config"`
}
