// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	datasqlcacerts "github.com/golingon/terraproviders/google/4.59.0/datasqlcacerts"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataSqlCaCerts(name string, args DataSqlCaCertsArgs) *DataSqlCaCerts {
	return &DataSqlCaCerts{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataSqlCaCerts)(nil)

type DataSqlCaCerts struct {
	Name string
	Args DataSqlCaCertsArgs
}

func (scc *DataSqlCaCerts) DataSource() string {
	return "google_sql_ca_certs"
}

func (scc *DataSqlCaCerts) LocalName() string {
	return scc.Name
}

func (scc *DataSqlCaCerts) Configuration() interface{} {
	return scc.Args
}

func (scc *DataSqlCaCerts) Attributes() dataSqlCaCertsAttributes {
	return dataSqlCaCertsAttributes{ref: terra.ReferenceDataResource(scc)}
}

type DataSqlCaCertsArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Certs: min=0
	Certs []datasqlcacerts.Certs `hcl:"certs,block" validate:"min=0"`
}
type dataSqlCaCertsAttributes struct {
	ref terra.Reference
}

func (scc dataSqlCaCertsAttributes) ActiveVersion() terra.StringValue {
	return terra.ReferenceString(scc.ref.Append("active_version"))
}

func (scc dataSqlCaCertsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scc.ref.Append("id"))
}

func (scc dataSqlCaCertsAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(scc.ref.Append("instance"))
}

func (scc dataSqlCaCertsAttributes) Project() terra.StringValue {
	return terra.ReferenceString(scc.ref.Append("project"))
}

func (scc dataSqlCaCertsAttributes) Certs() terra.ListValue[datasqlcacerts.CertsAttributes] {
	return terra.ReferenceList[datasqlcacerts.CertsAttributes](scc.ref.Append("certs"))
}
