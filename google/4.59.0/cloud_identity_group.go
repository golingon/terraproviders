// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	cloudidentitygroup "github.com/golingon/terraproviders/google/4.59.0/cloudidentitygroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudIdentityGroup(name string, args CloudIdentityGroupArgs) *CloudIdentityGroup {
	return &CloudIdentityGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudIdentityGroup)(nil)

type CloudIdentityGroup struct {
	Name  string
	Args  CloudIdentityGroupArgs
	state *cloudIdentityGroupState
}

func (cig *CloudIdentityGroup) Type() string {
	return "google_cloud_identity_group"
}

func (cig *CloudIdentityGroup) LocalName() string {
	return cig.Name
}

func (cig *CloudIdentityGroup) Configuration() interface{} {
	return cig.Args
}

func (cig *CloudIdentityGroup) Attributes() cloudIdentityGroupAttributes {
	return cloudIdentityGroupAttributes{ref: terra.ReferenceResource(cig)}
}

func (cig *CloudIdentityGroup) ImportState(av io.Reader) error {
	cig.state = &cloudIdentityGroupState{}
	if err := json.NewDecoder(av).Decode(cig.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cig.Type(), cig.LocalName(), err)
	}
	return nil
}

func (cig *CloudIdentityGroup) State() (*cloudIdentityGroupState, bool) {
	return cig.state, cig.state != nil
}

func (cig *CloudIdentityGroup) StateMust() *cloudIdentityGroupState {
	if cig.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cig.Type(), cig.LocalName()))
	}
	return cig.state
}

func (cig *CloudIdentityGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(cig)
}

type CloudIdentityGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InitialGroupConfig: string, optional
	InitialGroupConfig terra.StringValue `hcl:"initial_group_config,attr"`
	// Labels: map of string, required
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr" validate:"required"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// GroupKey: required
	GroupKey *cloudidentitygroup.GroupKey `hcl:"group_key,block" validate:"required"`
	// Timeouts: optional
	Timeouts *cloudidentitygroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CloudIdentityGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudIdentityGroupAttributes struct {
	ref terra.Reference
}

func (cig cloudIdentityGroupAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(cig.ref.Append("create_time"))
}

func (cig cloudIdentityGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cig.ref.Append("description"))
}

func (cig cloudIdentityGroupAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(cig.ref.Append("display_name"))
}

func (cig cloudIdentityGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cig.ref.Append("id"))
}

func (cig cloudIdentityGroupAttributes) InitialGroupConfig() terra.StringValue {
	return terra.ReferenceString(cig.ref.Append("initial_group_config"))
}

func (cig cloudIdentityGroupAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cig.ref.Append("labels"))
}

func (cig cloudIdentityGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cig.ref.Append("name"))
}

func (cig cloudIdentityGroupAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(cig.ref.Append("parent"))
}

func (cig cloudIdentityGroupAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(cig.ref.Append("update_time"))
}

func (cig cloudIdentityGroupAttributes) GroupKey() terra.ListValue[cloudidentitygroup.GroupKeyAttributes] {
	return terra.ReferenceList[cloudidentitygroup.GroupKeyAttributes](cig.ref.Append("group_key"))
}

func (cig cloudIdentityGroupAttributes) Timeouts() cloudidentitygroup.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudidentitygroup.TimeoutsAttributes](cig.ref.Append("timeouts"))
}

type cloudIdentityGroupState struct {
	CreateTime         string                             `json:"create_time"`
	Description        string                             `json:"description"`
	DisplayName        string                             `json:"display_name"`
	Id                 string                             `json:"id"`
	InitialGroupConfig string                             `json:"initial_group_config"`
	Labels             map[string]string                  `json:"labels"`
	Name               string                             `json:"name"`
	Parent             string                             `json:"parent"`
	UpdateTime         string                             `json:"update_time"`
	GroupKey           []cloudidentitygroup.GroupKeyState `json:"group_key"`
	Timeouts           *cloudidentitygroup.TimeoutsState  `json:"timeouts"`
}
