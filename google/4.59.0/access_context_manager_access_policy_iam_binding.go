// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	accesscontextmanageraccesspolicyiambinding "github.com/golingon/terraproviders/google/4.59.0/accesscontextmanageraccesspolicyiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAccessContextManagerAccessPolicyIamBinding(name string, args AccessContextManagerAccessPolicyIamBindingArgs) *AccessContextManagerAccessPolicyIamBinding {
	return &AccessContextManagerAccessPolicyIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AccessContextManagerAccessPolicyIamBinding)(nil)

type AccessContextManagerAccessPolicyIamBinding struct {
	Name  string
	Args  AccessContextManagerAccessPolicyIamBindingArgs
	state *accessContextManagerAccessPolicyIamBindingState
}

func (acmapib *AccessContextManagerAccessPolicyIamBinding) Type() string {
	return "google_access_context_manager_access_policy_iam_binding"
}

func (acmapib *AccessContextManagerAccessPolicyIamBinding) LocalName() string {
	return acmapib.Name
}

func (acmapib *AccessContextManagerAccessPolicyIamBinding) Configuration() interface{} {
	return acmapib.Args
}

func (acmapib *AccessContextManagerAccessPolicyIamBinding) Attributes() accessContextManagerAccessPolicyIamBindingAttributes {
	return accessContextManagerAccessPolicyIamBindingAttributes{ref: terra.ReferenceResource(acmapib)}
}

func (acmapib *AccessContextManagerAccessPolicyIamBinding) ImportState(av io.Reader) error {
	acmapib.state = &accessContextManagerAccessPolicyIamBindingState{}
	if err := json.NewDecoder(av).Decode(acmapib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acmapib.Type(), acmapib.LocalName(), err)
	}
	return nil
}

func (acmapib *AccessContextManagerAccessPolicyIamBinding) State() (*accessContextManagerAccessPolicyIamBindingState, bool) {
	return acmapib.state, acmapib.state != nil
}

func (acmapib *AccessContextManagerAccessPolicyIamBinding) StateMust() *accessContextManagerAccessPolicyIamBindingState {
	if acmapib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acmapib.Type(), acmapib.LocalName()))
	}
	return acmapib.state
}

func (acmapib *AccessContextManagerAccessPolicyIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(acmapib)
}

type AccessContextManagerAccessPolicyIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *accesscontextmanageraccesspolicyiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that AccessContextManagerAccessPolicyIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type accessContextManagerAccessPolicyIamBindingAttributes struct {
	ref terra.Reference
}

func (acmapib accessContextManagerAccessPolicyIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(acmapib.ref.Append("etag"))
}

func (acmapib accessContextManagerAccessPolicyIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(acmapib.ref.Append("id"))
}

func (acmapib accessContextManagerAccessPolicyIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](acmapib.ref.Append("members"))
}

func (acmapib accessContextManagerAccessPolicyIamBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceString(acmapib.ref.Append("name"))
}

func (acmapib accessContextManagerAccessPolicyIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(acmapib.ref.Append("role"))
}

func (acmapib accessContextManagerAccessPolicyIamBindingAttributes) Condition() terra.ListValue[accesscontextmanageraccesspolicyiambinding.ConditionAttributes] {
	return terra.ReferenceList[accesscontextmanageraccesspolicyiambinding.ConditionAttributes](acmapib.ref.Append("condition"))
}

type accessContextManagerAccessPolicyIamBindingState struct {
	Etag      string                                                      `json:"etag"`
	Id        string                                                      `json:"id"`
	Members   []string                                                    `json:"members"`
	Name      string                                                      `json:"name"`
	Role      string                                                      `json:"role"`
	Condition []accesscontextmanageraccesspolicyiambinding.ConditionState `json:"condition"`
}
