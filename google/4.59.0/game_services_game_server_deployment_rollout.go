// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	gameservicesgameserverdeploymentrollout "github.com/golingon/terraproviders/google/4.59.0/gameservicesgameserverdeploymentrollout"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGameServicesGameServerDeploymentRollout(name string, args GameServicesGameServerDeploymentRolloutArgs) *GameServicesGameServerDeploymentRollout {
	return &GameServicesGameServerDeploymentRollout{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GameServicesGameServerDeploymentRollout)(nil)

type GameServicesGameServerDeploymentRollout struct {
	Name  string
	Args  GameServicesGameServerDeploymentRolloutArgs
	state *gameServicesGameServerDeploymentRolloutState
}

func (gsgsdr *GameServicesGameServerDeploymentRollout) Type() string {
	return "google_game_services_game_server_deployment_rollout"
}

func (gsgsdr *GameServicesGameServerDeploymentRollout) LocalName() string {
	return gsgsdr.Name
}

func (gsgsdr *GameServicesGameServerDeploymentRollout) Configuration() interface{} {
	return gsgsdr.Args
}

func (gsgsdr *GameServicesGameServerDeploymentRollout) Attributes() gameServicesGameServerDeploymentRolloutAttributes {
	return gameServicesGameServerDeploymentRolloutAttributes{ref: terra.ReferenceResource(gsgsdr)}
}

func (gsgsdr *GameServicesGameServerDeploymentRollout) ImportState(av io.Reader) error {
	gsgsdr.state = &gameServicesGameServerDeploymentRolloutState{}
	if err := json.NewDecoder(av).Decode(gsgsdr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsgsdr.Type(), gsgsdr.LocalName(), err)
	}
	return nil
}

func (gsgsdr *GameServicesGameServerDeploymentRollout) State() (*gameServicesGameServerDeploymentRolloutState, bool) {
	return gsgsdr.state, gsgsdr.state != nil
}

func (gsgsdr *GameServicesGameServerDeploymentRollout) StateMust() *gameServicesGameServerDeploymentRolloutState {
	if gsgsdr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsgsdr.Type(), gsgsdr.LocalName()))
	}
	return gsgsdr.state
}

func (gsgsdr *GameServicesGameServerDeploymentRollout) DependOn() terra.Reference {
	return terra.ReferenceResource(gsgsdr)
}

type GameServicesGameServerDeploymentRolloutArgs struct {
	// DefaultGameServerConfig: string, required
	DefaultGameServerConfig terra.StringValue `hcl:"default_game_server_config,attr" validate:"required"`
	// DeploymentId: string, required
	DeploymentId terra.StringValue `hcl:"deployment_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// GameServerConfigOverrides: min=0
	GameServerConfigOverrides []gameservicesgameserverdeploymentrollout.GameServerConfigOverrides `hcl:"game_server_config_overrides,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *gameservicesgameserverdeploymentrollout.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that GameServicesGameServerDeploymentRollout depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type gameServicesGameServerDeploymentRolloutAttributes struct {
	ref terra.Reference
}

func (gsgsdr gameServicesGameServerDeploymentRolloutAttributes) DefaultGameServerConfig() terra.StringValue {
	return terra.ReferenceString(gsgsdr.ref.Append("default_game_server_config"))
}

func (gsgsdr gameServicesGameServerDeploymentRolloutAttributes) DeploymentId() terra.StringValue {
	return terra.ReferenceString(gsgsdr.ref.Append("deployment_id"))
}

func (gsgsdr gameServicesGameServerDeploymentRolloutAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gsgsdr.ref.Append("id"))
}

func (gsgsdr gameServicesGameServerDeploymentRolloutAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gsgsdr.ref.Append("name"))
}

func (gsgsdr gameServicesGameServerDeploymentRolloutAttributes) Project() terra.StringValue {
	return terra.ReferenceString(gsgsdr.ref.Append("project"))
}

func (gsgsdr gameServicesGameServerDeploymentRolloutAttributes) GameServerConfigOverrides() terra.ListValue[gameservicesgameserverdeploymentrollout.GameServerConfigOverridesAttributes] {
	return terra.ReferenceList[gameservicesgameserverdeploymentrollout.GameServerConfigOverridesAttributes](gsgsdr.ref.Append("game_server_config_overrides"))
}

func (gsgsdr gameServicesGameServerDeploymentRolloutAttributes) Timeouts() gameservicesgameserverdeploymentrollout.TimeoutsAttributes {
	return terra.ReferenceSingle[gameservicesgameserverdeploymentrollout.TimeoutsAttributes](gsgsdr.ref.Append("timeouts"))
}

type gameServicesGameServerDeploymentRolloutState struct {
	DefaultGameServerConfig   string                                                                   `json:"default_game_server_config"`
	DeploymentId              string                                                                   `json:"deployment_id"`
	Id                        string                                                                   `json:"id"`
	Name                      string                                                                   `json:"name"`
	Project                   string                                                                   `json:"project"`
	GameServerConfigOverrides []gameservicesgameserverdeploymentrollout.GameServerConfigOverridesState `json:"game_server_config_overrides"`
	Timeouts                  *gameservicesgameserverdeploymentrollout.TimeoutsState                   `json:"timeouts"`
}
