// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	datastreamstream "github.com/golingon/terraproviders/google/4.59.0/datastreamstream"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDatastreamStream(name string, args DatastreamStreamArgs) *DatastreamStream {
	return &DatastreamStream{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatastreamStream)(nil)

type DatastreamStream struct {
	Name  string
	Args  DatastreamStreamArgs
	state *datastreamStreamState
}

func (ds *DatastreamStream) Type() string {
	return "google_datastream_stream"
}

func (ds *DatastreamStream) LocalName() string {
	return ds.Name
}

func (ds *DatastreamStream) Configuration() interface{} {
	return ds.Args
}

func (ds *DatastreamStream) Attributes() datastreamStreamAttributes {
	return datastreamStreamAttributes{ref: terra.ReferenceResource(ds)}
}

func (ds *DatastreamStream) ImportState(av io.Reader) error {
	ds.state = &datastreamStreamState{}
	if err := json.NewDecoder(av).Decode(ds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ds.Type(), ds.LocalName(), err)
	}
	return nil
}

func (ds *DatastreamStream) State() (*datastreamStreamState, bool) {
	return ds.state, ds.state != nil
}

func (ds *DatastreamStream) StateMust() *datastreamStreamState {
	if ds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ds.Type(), ds.LocalName()))
	}
	return ds.state
}

func (ds *DatastreamStream) DependOn() terra.Reference {
	return terra.ReferenceResource(ds)
}

type DatastreamStreamArgs struct {
	// CustomerManagedEncryptionKey: string, optional
	CustomerManagedEncryptionKey terra.StringValue `hcl:"customer_managed_encryption_key,attr"`
	// DesiredState: string, optional
	DesiredState terra.StringValue `hcl:"desired_state,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// StreamId: string, required
	StreamId terra.StringValue `hcl:"stream_id,attr" validate:"required"`
	// BackfillAll: optional
	BackfillAll *datastreamstream.BackfillAll `hcl:"backfill_all,block"`
	// BackfillNone: optional
	BackfillNone *datastreamstream.BackfillNone `hcl:"backfill_none,block"`
	// DestinationConfig: required
	DestinationConfig *datastreamstream.DestinationConfig `hcl:"destination_config,block" validate:"required"`
	// SourceConfig: required
	SourceConfig *datastreamstream.SourceConfig `hcl:"source_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *datastreamstream.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DatastreamStream depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type datastreamStreamAttributes struct {
	ref terra.Reference
}

func (ds datastreamStreamAttributes) CustomerManagedEncryptionKey() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("customer_managed_encryption_key"))
}

func (ds datastreamStreamAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("desired_state"))
}

func (ds datastreamStreamAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("display_name"))
}

func (ds datastreamStreamAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("id"))
}

func (ds datastreamStreamAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ds.ref.Append("labels"))
}

func (ds datastreamStreamAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("location"))
}

func (ds datastreamStreamAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("name"))
}

func (ds datastreamStreamAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("project"))
}

func (ds datastreamStreamAttributes) State() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("state"))
}

func (ds datastreamStreamAttributes) StreamId() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("stream_id"))
}

func (ds datastreamStreamAttributes) BackfillAll() terra.ListValue[datastreamstream.BackfillAllAttributes] {
	return terra.ReferenceList[datastreamstream.BackfillAllAttributes](ds.ref.Append("backfill_all"))
}

func (ds datastreamStreamAttributes) BackfillNone() terra.ListValue[datastreamstream.BackfillNoneAttributes] {
	return terra.ReferenceList[datastreamstream.BackfillNoneAttributes](ds.ref.Append("backfill_none"))
}

func (ds datastreamStreamAttributes) DestinationConfig() terra.ListValue[datastreamstream.DestinationConfigAttributes] {
	return terra.ReferenceList[datastreamstream.DestinationConfigAttributes](ds.ref.Append("destination_config"))
}

func (ds datastreamStreamAttributes) SourceConfig() terra.ListValue[datastreamstream.SourceConfigAttributes] {
	return terra.ReferenceList[datastreamstream.SourceConfigAttributes](ds.ref.Append("source_config"))
}

func (ds datastreamStreamAttributes) Timeouts() datastreamstream.TimeoutsAttributes {
	return terra.ReferenceSingle[datastreamstream.TimeoutsAttributes](ds.ref.Append("timeouts"))
}

type datastreamStreamState struct {
	CustomerManagedEncryptionKey string                                    `json:"customer_managed_encryption_key"`
	DesiredState                 string                                    `json:"desired_state"`
	DisplayName                  string                                    `json:"display_name"`
	Id                           string                                    `json:"id"`
	Labels                       map[string]string                         `json:"labels"`
	Location                     string                                    `json:"location"`
	Name                         string                                    `json:"name"`
	Project                      string                                    `json:"project"`
	State                        string                                    `json:"state"`
	StreamId                     string                                    `json:"stream_id"`
	BackfillAll                  []datastreamstream.BackfillAllState       `json:"backfill_all"`
	BackfillNone                 []datastreamstream.BackfillNoneState      `json:"backfill_none"`
	DestinationConfig            []datastreamstream.DestinationConfigState `json:"destination_config"`
	SourceConfig                 []datastreamstream.SourceConfigState      `json:"source_config"`
	Timeouts                     *datastreamstream.TimeoutsState           `json:"timeouts"`
}
