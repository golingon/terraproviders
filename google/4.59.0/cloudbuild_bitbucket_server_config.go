// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	cloudbuildbitbucketserverconfig "github.com/golingon/terraproviders/google/4.59.0/cloudbuildbitbucketserverconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudbuildBitbucketServerConfig(name string, args CloudbuildBitbucketServerConfigArgs) *CloudbuildBitbucketServerConfig {
	return &CloudbuildBitbucketServerConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudbuildBitbucketServerConfig)(nil)

type CloudbuildBitbucketServerConfig struct {
	Name  string
	Args  CloudbuildBitbucketServerConfigArgs
	state *cloudbuildBitbucketServerConfigState
}

func (cbsc *CloudbuildBitbucketServerConfig) Type() string {
	return "google_cloudbuild_bitbucket_server_config"
}

func (cbsc *CloudbuildBitbucketServerConfig) LocalName() string {
	return cbsc.Name
}

func (cbsc *CloudbuildBitbucketServerConfig) Configuration() interface{} {
	return cbsc.Args
}

func (cbsc *CloudbuildBitbucketServerConfig) Attributes() cloudbuildBitbucketServerConfigAttributes {
	return cloudbuildBitbucketServerConfigAttributes{ref: terra.ReferenceResource(cbsc)}
}

func (cbsc *CloudbuildBitbucketServerConfig) ImportState(av io.Reader) error {
	cbsc.state = &cloudbuildBitbucketServerConfigState{}
	if err := json.NewDecoder(av).Decode(cbsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cbsc.Type(), cbsc.LocalName(), err)
	}
	return nil
}

func (cbsc *CloudbuildBitbucketServerConfig) State() (*cloudbuildBitbucketServerConfigState, bool) {
	return cbsc.state, cbsc.state != nil
}

func (cbsc *CloudbuildBitbucketServerConfig) StateMust() *cloudbuildBitbucketServerConfigState {
	if cbsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cbsc.Type(), cbsc.LocalName()))
	}
	return cbsc.state
}

func (cbsc *CloudbuildBitbucketServerConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(cbsc)
}

type CloudbuildBitbucketServerConfigArgs struct {
	// ApiKey: string, required
	ApiKey terra.StringValue `hcl:"api_key,attr" validate:"required"`
	// ConfigId: string, required
	ConfigId terra.StringValue `hcl:"config_id,attr" validate:"required"`
	// HostUri: string, required
	HostUri terra.StringValue `hcl:"host_uri,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// PeeredNetwork: string, optional
	PeeredNetwork terra.StringValue `hcl:"peered_network,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SslCa: string, optional
	SslCa terra.StringValue `hcl:"ssl_ca,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// ConnectedRepositories: min=0
	ConnectedRepositories []cloudbuildbitbucketserverconfig.ConnectedRepositories `hcl:"connected_repositories,block" validate:"min=0"`
	// Secrets: required
	Secrets *cloudbuildbitbucketserverconfig.Secrets `hcl:"secrets,block" validate:"required"`
	// Timeouts: optional
	Timeouts *cloudbuildbitbucketserverconfig.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CloudbuildBitbucketServerConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudbuildBitbucketServerConfigAttributes struct {
	ref terra.Reference
}

func (cbsc cloudbuildBitbucketServerConfigAttributes) ApiKey() terra.StringValue {
	return terra.ReferenceString(cbsc.ref.Append("api_key"))
}

func (cbsc cloudbuildBitbucketServerConfigAttributes) ConfigId() terra.StringValue {
	return terra.ReferenceString(cbsc.ref.Append("config_id"))
}

func (cbsc cloudbuildBitbucketServerConfigAttributes) HostUri() terra.StringValue {
	return terra.ReferenceString(cbsc.ref.Append("host_uri"))
}

func (cbsc cloudbuildBitbucketServerConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cbsc.ref.Append("id"))
}

func (cbsc cloudbuildBitbucketServerConfigAttributes) Location() terra.StringValue {
	return terra.ReferenceString(cbsc.ref.Append("location"))
}

func (cbsc cloudbuildBitbucketServerConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cbsc.ref.Append("name"))
}

func (cbsc cloudbuildBitbucketServerConfigAttributes) PeeredNetwork() terra.StringValue {
	return terra.ReferenceString(cbsc.ref.Append("peered_network"))
}

func (cbsc cloudbuildBitbucketServerConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cbsc.ref.Append("project"))
}

func (cbsc cloudbuildBitbucketServerConfigAttributes) SslCa() terra.StringValue {
	return terra.ReferenceString(cbsc.ref.Append("ssl_ca"))
}

func (cbsc cloudbuildBitbucketServerConfigAttributes) Username() terra.StringValue {
	return terra.ReferenceString(cbsc.ref.Append("username"))
}

func (cbsc cloudbuildBitbucketServerConfigAttributes) WebhookKey() terra.StringValue {
	return terra.ReferenceString(cbsc.ref.Append("webhook_key"))
}

func (cbsc cloudbuildBitbucketServerConfigAttributes) ConnectedRepositories() terra.SetValue[cloudbuildbitbucketserverconfig.ConnectedRepositoriesAttributes] {
	return terra.ReferenceSet[cloudbuildbitbucketserverconfig.ConnectedRepositoriesAttributes](cbsc.ref.Append("connected_repositories"))
}

func (cbsc cloudbuildBitbucketServerConfigAttributes) Secrets() terra.ListValue[cloudbuildbitbucketserverconfig.SecretsAttributes] {
	return terra.ReferenceList[cloudbuildbitbucketserverconfig.SecretsAttributes](cbsc.ref.Append("secrets"))
}

func (cbsc cloudbuildBitbucketServerConfigAttributes) Timeouts() cloudbuildbitbucketserverconfig.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudbuildbitbucketserverconfig.TimeoutsAttributes](cbsc.ref.Append("timeouts"))
}

type cloudbuildBitbucketServerConfigState struct {
	ApiKey                string                                                       `json:"api_key"`
	ConfigId              string                                                       `json:"config_id"`
	HostUri               string                                                       `json:"host_uri"`
	Id                    string                                                       `json:"id"`
	Location              string                                                       `json:"location"`
	Name                  string                                                       `json:"name"`
	PeeredNetwork         string                                                       `json:"peered_network"`
	Project               string                                                       `json:"project"`
	SslCa                 string                                                       `json:"ssl_ca"`
	Username              string                                                       `json:"username"`
	WebhookKey            string                                                       `json:"webhook_key"`
	ConnectedRepositories []cloudbuildbitbucketserverconfig.ConnectedRepositoriesState `json:"connected_repositories"`
	Secrets               []cloudbuildbitbucketserverconfig.SecretsState               `json:"secrets"`
	Timeouts              *cloudbuildbitbucketserverconfig.TimeoutsState               `json:"timeouts"`
}
