// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package alloydbcluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type BackupSource struct{}

type MigrationSource struct{}

type AutomatedBackupPolicy struct {
	// BackupWindow: string, optional
	BackupWindow terra.StringValue `hcl:"backup_window,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// QuantityBasedRetention: optional
	QuantityBasedRetention *QuantityBasedRetention `hcl:"quantity_based_retention,block"`
	// TimeBasedRetention: optional
	TimeBasedRetention *TimeBasedRetention `hcl:"time_based_retention,block"`
	// WeeklySchedule: optional
	WeeklySchedule *WeeklySchedule `hcl:"weekly_schedule,block"`
}

type QuantityBasedRetention struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
}

type TimeBasedRetention struct {
	// RetentionPeriod: string, optional
	RetentionPeriod terra.StringValue `hcl:"retention_period,attr"`
}

type WeeklySchedule struct {
	// DaysOfWeek: list of string, optional
	DaysOfWeek terra.ListValue[terra.StringValue] `hcl:"days_of_week,attr"`
	// StartTimes: min=1
	StartTimes []StartTimes `hcl:"start_times,block" validate:"min=1"`
}

type StartTimes struct {
	// Hours: number, optional
	Hours terra.NumberValue `hcl:"hours,attr"`
	// Minutes: number, optional
	Minutes terra.NumberValue `hcl:"minutes,attr"`
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: number, optional
	Seconds terra.NumberValue `hcl:"seconds,attr"`
}

type InitialUser struct {
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// User: string, optional
	User terra.StringValue `hcl:"user,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BackupSourceAttributes struct {
	ref terra.Reference
}

func (bs BackupSourceAttributes) InternalRef() terra.Reference {
	return bs.ref
}

func (bs BackupSourceAttributes) InternalWithRef(ref terra.Reference) BackupSourceAttributes {
	return BackupSourceAttributes{ref: ref}
}

func (bs BackupSourceAttributes) InternalTokens() hclwrite.Tokens {
	return bs.ref.InternalTokens()
}

func (bs BackupSourceAttributes) BackupName() terra.StringValue {
	return terra.ReferenceString(bs.ref.Append("backup_name"))
}

type MigrationSourceAttributes struct {
	ref terra.Reference
}

func (ms MigrationSourceAttributes) InternalRef() terra.Reference {
	return ms.ref
}

func (ms MigrationSourceAttributes) InternalWithRef(ref terra.Reference) MigrationSourceAttributes {
	return MigrationSourceAttributes{ref: ref}
}

func (ms MigrationSourceAttributes) InternalTokens() hclwrite.Tokens {
	return ms.ref.InternalTokens()
}

func (ms MigrationSourceAttributes) HostPort() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("host_port"))
}

func (ms MigrationSourceAttributes) ReferenceId() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("reference_id"))
}

func (ms MigrationSourceAttributes) SourceType() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("source_type"))
}

type AutomatedBackupPolicyAttributes struct {
	ref terra.Reference
}

func (abp AutomatedBackupPolicyAttributes) InternalRef() terra.Reference {
	return abp.ref
}

func (abp AutomatedBackupPolicyAttributes) InternalWithRef(ref terra.Reference) AutomatedBackupPolicyAttributes {
	return AutomatedBackupPolicyAttributes{ref: ref}
}

func (abp AutomatedBackupPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return abp.ref.InternalTokens()
}

func (abp AutomatedBackupPolicyAttributes) BackupWindow() terra.StringValue {
	return terra.ReferenceString(abp.ref.Append("backup_window"))
}

func (abp AutomatedBackupPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(abp.ref.Append("enabled"))
}

func (abp AutomatedBackupPolicyAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](abp.ref.Append("labels"))
}

func (abp AutomatedBackupPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(abp.ref.Append("location"))
}

func (abp AutomatedBackupPolicyAttributes) QuantityBasedRetention() terra.ListValue[QuantityBasedRetentionAttributes] {
	return terra.ReferenceList[QuantityBasedRetentionAttributes](abp.ref.Append("quantity_based_retention"))
}

func (abp AutomatedBackupPolicyAttributes) TimeBasedRetention() terra.ListValue[TimeBasedRetentionAttributes] {
	return terra.ReferenceList[TimeBasedRetentionAttributes](abp.ref.Append("time_based_retention"))
}

func (abp AutomatedBackupPolicyAttributes) WeeklySchedule() terra.ListValue[WeeklyScheduleAttributes] {
	return terra.ReferenceList[WeeklyScheduleAttributes](abp.ref.Append("weekly_schedule"))
}

type QuantityBasedRetentionAttributes struct {
	ref terra.Reference
}

func (qbr QuantityBasedRetentionAttributes) InternalRef() terra.Reference {
	return qbr.ref
}

func (qbr QuantityBasedRetentionAttributes) InternalWithRef(ref terra.Reference) QuantityBasedRetentionAttributes {
	return QuantityBasedRetentionAttributes{ref: ref}
}

func (qbr QuantityBasedRetentionAttributes) InternalTokens() hclwrite.Tokens {
	return qbr.ref.InternalTokens()
}

func (qbr QuantityBasedRetentionAttributes) Count() terra.NumberValue {
	return terra.ReferenceNumber(qbr.ref.Append("count"))
}

type TimeBasedRetentionAttributes struct {
	ref terra.Reference
}

func (tbr TimeBasedRetentionAttributes) InternalRef() terra.Reference {
	return tbr.ref
}

func (tbr TimeBasedRetentionAttributes) InternalWithRef(ref terra.Reference) TimeBasedRetentionAttributes {
	return TimeBasedRetentionAttributes{ref: ref}
}

func (tbr TimeBasedRetentionAttributes) InternalTokens() hclwrite.Tokens {
	return tbr.ref.InternalTokens()
}

func (tbr TimeBasedRetentionAttributes) RetentionPeriod() terra.StringValue {
	return terra.ReferenceString(tbr.ref.Append("retention_period"))
}

type WeeklyScheduleAttributes struct {
	ref terra.Reference
}

func (ws WeeklyScheduleAttributes) InternalRef() terra.Reference {
	return ws.ref
}

func (ws WeeklyScheduleAttributes) InternalWithRef(ref terra.Reference) WeeklyScheduleAttributes {
	return WeeklyScheduleAttributes{ref: ref}
}

func (ws WeeklyScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return ws.ref.InternalTokens()
}

func (ws WeeklyScheduleAttributes) DaysOfWeek() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ws.ref.Append("days_of_week"))
}

func (ws WeeklyScheduleAttributes) StartTimes() terra.ListValue[StartTimesAttributes] {
	return terra.ReferenceList[StartTimesAttributes](ws.ref.Append("start_times"))
}

type StartTimesAttributes struct {
	ref terra.Reference
}

func (st StartTimesAttributes) InternalRef() terra.Reference {
	return st.ref
}

func (st StartTimesAttributes) InternalWithRef(ref terra.Reference) StartTimesAttributes {
	return StartTimesAttributes{ref: ref}
}

func (st StartTimesAttributes) InternalTokens() hclwrite.Tokens {
	return st.ref.InternalTokens()
}

func (st StartTimesAttributes) Hours() terra.NumberValue {
	return terra.ReferenceNumber(st.ref.Append("hours"))
}

func (st StartTimesAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceNumber(st.ref.Append("minutes"))
}

func (st StartTimesAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceNumber(st.ref.Append("nanos"))
}

func (st StartTimesAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceNumber(st.ref.Append("seconds"))
}

type InitialUserAttributes struct {
	ref terra.Reference
}

func (iu InitialUserAttributes) InternalRef() terra.Reference {
	return iu.ref
}

func (iu InitialUserAttributes) InternalWithRef(ref terra.Reference) InitialUserAttributes {
	return InitialUserAttributes{ref: ref}
}

func (iu InitialUserAttributes) InternalTokens() hclwrite.Tokens {
	return iu.ref.InternalTokens()
}

func (iu InitialUserAttributes) Password() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("password"))
}

func (iu InitialUserAttributes) User() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("user"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type BackupSourceState struct {
	BackupName string `json:"backup_name"`
}

type MigrationSourceState struct {
	HostPort    string `json:"host_port"`
	ReferenceId string `json:"reference_id"`
	SourceType  string `json:"source_type"`
}

type AutomatedBackupPolicyState struct {
	BackupWindow           string                        `json:"backup_window"`
	Enabled                bool                          `json:"enabled"`
	Labels                 map[string]string             `json:"labels"`
	Location               string                        `json:"location"`
	QuantityBasedRetention []QuantityBasedRetentionState `json:"quantity_based_retention"`
	TimeBasedRetention     []TimeBasedRetentionState     `json:"time_based_retention"`
	WeeklySchedule         []WeeklyScheduleState         `json:"weekly_schedule"`
}

type QuantityBasedRetentionState struct {
	Count float64 `json:"count"`
}

type TimeBasedRetentionState struct {
	RetentionPeriod string `json:"retention_period"`
}

type WeeklyScheduleState struct {
	DaysOfWeek []string          `json:"days_of_week"`
	StartTimes []StartTimesState `json:"start_times"`
}

type StartTimesState struct {
	Hours   float64 `json:"hours"`
	Minutes float64 `json:"minutes"`
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type InitialUserState struct {
	Password string `json:"password"`
	User     string `json:"user"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
