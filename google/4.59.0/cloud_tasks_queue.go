// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	cloudtasksqueue "github.com/golingon/terraproviders/google/4.59.0/cloudtasksqueue"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudTasksQueue(name string, args CloudTasksQueueArgs) *CloudTasksQueue {
	return &CloudTasksQueue{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudTasksQueue)(nil)

type CloudTasksQueue struct {
	Name  string
	Args  CloudTasksQueueArgs
	state *cloudTasksQueueState
}

func (ctq *CloudTasksQueue) Type() string {
	return "google_cloud_tasks_queue"
}

func (ctq *CloudTasksQueue) LocalName() string {
	return ctq.Name
}

func (ctq *CloudTasksQueue) Configuration() interface{} {
	return ctq.Args
}

func (ctq *CloudTasksQueue) Attributes() cloudTasksQueueAttributes {
	return cloudTasksQueueAttributes{ref: terra.ReferenceResource(ctq)}
}

func (ctq *CloudTasksQueue) ImportState(av io.Reader) error {
	ctq.state = &cloudTasksQueueState{}
	if err := json.NewDecoder(av).Decode(ctq.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ctq.Type(), ctq.LocalName(), err)
	}
	return nil
}

func (ctq *CloudTasksQueue) State() (*cloudTasksQueueState, bool) {
	return ctq.state, ctq.state != nil
}

func (ctq *CloudTasksQueue) StateMust() *cloudTasksQueueState {
	if ctq.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ctq.Type(), ctq.LocalName()))
	}
	return ctq.state
}

func (ctq *CloudTasksQueue) DependOn() terra.Reference {
	return terra.ReferenceResource(ctq)
}

type CloudTasksQueueArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// AppEngineRoutingOverride: optional
	AppEngineRoutingOverride *cloudtasksqueue.AppEngineRoutingOverride `hcl:"app_engine_routing_override,block"`
	// RateLimits: optional
	RateLimits *cloudtasksqueue.RateLimits `hcl:"rate_limits,block"`
	// RetryConfig: optional
	RetryConfig *cloudtasksqueue.RetryConfig `hcl:"retry_config,block"`
	// StackdriverLoggingConfig: optional
	StackdriverLoggingConfig *cloudtasksqueue.StackdriverLoggingConfig `hcl:"stackdriver_logging_config,block"`
	// Timeouts: optional
	Timeouts *cloudtasksqueue.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CloudTasksQueue depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudTasksQueueAttributes struct {
	ref terra.Reference
}

func (ctq cloudTasksQueueAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ctq.ref.Append("id"))
}

func (ctq cloudTasksQueueAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ctq.ref.Append("location"))
}

func (ctq cloudTasksQueueAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ctq.ref.Append("name"))
}

func (ctq cloudTasksQueueAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ctq.ref.Append("project"))
}

func (ctq cloudTasksQueueAttributes) AppEngineRoutingOverride() terra.ListValue[cloudtasksqueue.AppEngineRoutingOverrideAttributes] {
	return terra.ReferenceList[cloudtasksqueue.AppEngineRoutingOverrideAttributes](ctq.ref.Append("app_engine_routing_override"))
}

func (ctq cloudTasksQueueAttributes) RateLimits() terra.ListValue[cloudtasksqueue.RateLimitsAttributes] {
	return terra.ReferenceList[cloudtasksqueue.RateLimitsAttributes](ctq.ref.Append("rate_limits"))
}

func (ctq cloudTasksQueueAttributes) RetryConfig() terra.ListValue[cloudtasksqueue.RetryConfigAttributes] {
	return terra.ReferenceList[cloudtasksqueue.RetryConfigAttributes](ctq.ref.Append("retry_config"))
}

func (ctq cloudTasksQueueAttributes) StackdriverLoggingConfig() terra.ListValue[cloudtasksqueue.StackdriverLoggingConfigAttributes] {
	return terra.ReferenceList[cloudtasksqueue.StackdriverLoggingConfigAttributes](ctq.ref.Append("stackdriver_logging_config"))
}

func (ctq cloudTasksQueueAttributes) Timeouts() cloudtasksqueue.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudtasksqueue.TimeoutsAttributes](ctq.ref.Append("timeouts"))
}

type cloudTasksQueueState struct {
	Id                       string                                          `json:"id"`
	Location                 string                                          `json:"location"`
	Name                     string                                          `json:"name"`
	Project                  string                                          `json:"project"`
	AppEngineRoutingOverride []cloudtasksqueue.AppEngineRoutingOverrideState `json:"app_engine_routing_override"`
	RateLimits               []cloudtasksqueue.RateLimitsState               `json:"rate_limits"`
	RetryConfig              []cloudtasksqueue.RetryConfigState              `json:"retry_config"`
	StackdriverLoggingConfig []cloudtasksqueue.StackdriverLoggingConfigState `json:"stackdriver_logging_config"`
	Timeouts                 *cloudtasksqueue.TimeoutsState                  `json:"timeouts"`
}
