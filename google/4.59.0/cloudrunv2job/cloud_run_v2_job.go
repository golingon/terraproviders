// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package cloudrunv2job

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Conditions struct{}

type LatestCreatedExecution struct{}

type TerminalCondition struct{}

type BinaryAuthorization struct {
	// BreakglassJustification: string, optional
	BreakglassJustification terra.StringValue `hcl:"breakglass_justification,attr"`
	// UseDefault: bool, optional
	UseDefault terra.BoolValue `hcl:"use_default,attr"`
}

type Template struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Parallelism: number, optional
	Parallelism terra.NumberValue `hcl:"parallelism,attr"`
	// TaskCount: number, optional
	TaskCount terra.NumberValue `hcl:"task_count,attr"`
	// TemplateTemplate: required
	Template *TemplateTemplate `hcl:"template,block" validate:"required"`
}

type TemplateTemplate struct {
	// EncryptionKey: string, optional
	EncryptionKey terra.StringValue `hcl:"encryption_key,attr"`
	// ExecutionEnvironment: string, optional
	ExecutionEnvironment terra.StringValue `hcl:"execution_environment,attr"`
	// MaxRetries: number, optional
	MaxRetries terra.NumberValue `hcl:"max_retries,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// Timeout: string, optional
	Timeout terra.StringValue `hcl:"timeout,attr"`
	// Containers: min=0
	Containers []Containers `hcl:"containers,block" validate:"min=0"`
	// Volumes: min=0
	Volumes []Volumes `hcl:"volumes,block" validate:"min=0"`
	// VpcAccess: optional
	VpcAccess *VpcAccess `hcl:"vpc_access,block"`
}

type Containers struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Command: list of string, optional
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// WorkingDir: string, optional
	WorkingDir terra.StringValue `hcl:"working_dir,attr"`
	// Env: min=0
	Env []Env `hcl:"env,block" validate:"min=0"`
	// LivenessProbe: optional
	LivenessProbe *LivenessProbe `hcl:"liveness_probe,block"`
	// Ports: min=0
	Ports []Ports `hcl:"ports,block" validate:"min=0"`
	// Resources: optional
	Resources *Resources `hcl:"resources,block"`
	// StartupProbe: optional
	StartupProbe *StartupProbe `hcl:"startup_probe,block"`
	// VolumeMounts: min=0
	VolumeMounts []VolumeMounts `hcl:"volume_mounts,block" validate:"min=0"`
}

type Env struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
	// ValueSource: optional
	ValueSource *ValueSource `hcl:"value_source,block"`
}

type ValueSource struct {
	// SecretKeyRef: optional
	SecretKeyRef *SecretKeyRef `hcl:"secret_key_ref,block"`
}

type SecretKeyRef struct {
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type LivenessProbe struct {
	// FailureThreshold: number, optional
	FailureThreshold terra.NumberValue `hcl:"failure_threshold,attr"`
	// InitialDelaySeconds: number, optional
	InitialDelaySeconds terra.NumberValue `hcl:"initial_delay_seconds,attr"`
	// PeriodSeconds: number, optional
	PeriodSeconds terra.NumberValue `hcl:"period_seconds,attr"`
	// TimeoutSeconds: number, optional
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// LivenessProbeHttpGet: optional
	HttpGet *LivenessProbeHttpGet `hcl:"http_get,block"`
	// LivenessProbeTcpSocket: optional
	TcpSocket *LivenessProbeTcpSocket `hcl:"tcp_socket,block"`
}

type LivenessProbeHttpGet struct {
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// LivenessProbeHttpGetHttpHeaders: min=0
	HttpHeaders []LivenessProbeHttpGetHttpHeaders `hcl:"http_headers,block" validate:"min=0"`
}

type LivenessProbeHttpGetHttpHeaders struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type LivenessProbeTcpSocket struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
}

type Ports struct {
	// ContainerPort: number, optional
	ContainerPort terra.NumberValue `hcl:"container_port,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type Resources struct {
	// Limits: map of string, optional
	Limits terra.MapValue[terra.StringValue] `hcl:"limits,attr"`
}

type StartupProbe struct {
	// FailureThreshold: number, optional
	FailureThreshold terra.NumberValue `hcl:"failure_threshold,attr"`
	// InitialDelaySeconds: number, optional
	InitialDelaySeconds terra.NumberValue `hcl:"initial_delay_seconds,attr"`
	// PeriodSeconds: number, optional
	PeriodSeconds terra.NumberValue `hcl:"period_seconds,attr"`
	// TimeoutSeconds: number, optional
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// StartupProbeHttpGet: optional
	HttpGet *StartupProbeHttpGet `hcl:"http_get,block"`
	// StartupProbeTcpSocket: optional
	TcpSocket *StartupProbeTcpSocket `hcl:"tcp_socket,block"`
}

type StartupProbeHttpGet struct {
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// StartupProbeHttpGetHttpHeaders: min=0
	HttpHeaders []StartupProbeHttpGetHttpHeaders `hcl:"http_headers,block" validate:"min=0"`
}

type StartupProbeHttpGetHttpHeaders struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type StartupProbeTcpSocket struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
}

type VolumeMounts struct {
	// MountPath: string, required
	MountPath terra.StringValue `hcl:"mount_path,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Volumes struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// CloudSqlInstance: optional
	CloudSqlInstance *CloudSqlInstance `hcl:"cloud_sql_instance,block"`
	// Secret: optional
	Secret *Secret `hcl:"secret,block"`
}

type CloudSqlInstance struct {
	// Instances: list of string, optional
	Instances terra.ListValue[terra.StringValue] `hcl:"instances,attr"`
}

type Secret struct {
	// DefaultMode: number, optional
	DefaultMode terra.NumberValue `hcl:"default_mode,attr"`
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
	// Items: min=0
	Items []Items `hcl:"items,block" validate:"min=0"`
}

type Items struct {
	// Mode: number, required
	Mode terra.NumberValue `hcl:"mode,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type VpcAccess struct {
	// Connector: string, optional
	Connector terra.StringValue `hcl:"connector,attr"`
	// Egress: string, optional
	Egress terra.StringValue `hcl:"egress,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) ExecutionReason() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("execution_reason"))
}

func (c ConditionsAttributes) LastTransitionTime() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("last_transition_time"))
}

func (c ConditionsAttributes) Message() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("message"))
}

func (c ConditionsAttributes) Reason() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("reason"))
}

func (c ConditionsAttributes) RevisionReason() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("revision_reason"))
}

func (c ConditionsAttributes) Severity() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("severity"))
}

func (c ConditionsAttributes) State() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("state"))
}

func (c ConditionsAttributes) Type() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("type"))
}

type LatestCreatedExecutionAttributes struct {
	ref terra.Reference
}

func (lce LatestCreatedExecutionAttributes) InternalRef() terra.Reference {
	return lce.ref
}

func (lce LatestCreatedExecutionAttributes) InternalWithRef(ref terra.Reference) LatestCreatedExecutionAttributes {
	return LatestCreatedExecutionAttributes{ref: ref}
}

func (lce LatestCreatedExecutionAttributes) InternalTokens() hclwrite.Tokens {
	return lce.ref.InternalTokens()
}

func (lce LatestCreatedExecutionAttributes) CompletionTime() terra.StringValue {
	return terra.ReferenceString(lce.ref.Append("completion_time"))
}

func (lce LatestCreatedExecutionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(lce.ref.Append("create_time"))
}

func (lce LatestCreatedExecutionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lce.ref.Append("name"))
}

type TerminalConditionAttributes struct {
	ref terra.Reference
}

func (tc TerminalConditionAttributes) InternalRef() terra.Reference {
	return tc.ref
}

func (tc TerminalConditionAttributes) InternalWithRef(ref terra.Reference) TerminalConditionAttributes {
	return TerminalConditionAttributes{ref: ref}
}

func (tc TerminalConditionAttributes) InternalTokens() hclwrite.Tokens {
	return tc.ref.InternalTokens()
}

func (tc TerminalConditionAttributes) ExecutionReason() terra.StringValue {
	return terra.ReferenceString(tc.ref.Append("execution_reason"))
}

func (tc TerminalConditionAttributes) LastTransitionTime() terra.StringValue {
	return terra.ReferenceString(tc.ref.Append("last_transition_time"))
}

func (tc TerminalConditionAttributes) Message() terra.StringValue {
	return terra.ReferenceString(tc.ref.Append("message"))
}

func (tc TerminalConditionAttributes) Reason() terra.StringValue {
	return terra.ReferenceString(tc.ref.Append("reason"))
}

func (tc TerminalConditionAttributes) RevisionReason() terra.StringValue {
	return terra.ReferenceString(tc.ref.Append("revision_reason"))
}

func (tc TerminalConditionAttributes) Severity() terra.StringValue {
	return terra.ReferenceString(tc.ref.Append("severity"))
}

func (tc TerminalConditionAttributes) State() terra.StringValue {
	return terra.ReferenceString(tc.ref.Append("state"))
}

func (tc TerminalConditionAttributes) Type() terra.StringValue {
	return terra.ReferenceString(tc.ref.Append("type"))
}

type BinaryAuthorizationAttributes struct {
	ref terra.Reference
}

func (ba BinaryAuthorizationAttributes) InternalRef() terra.Reference {
	return ba.ref
}

func (ba BinaryAuthorizationAttributes) InternalWithRef(ref terra.Reference) BinaryAuthorizationAttributes {
	return BinaryAuthorizationAttributes{ref: ref}
}

func (ba BinaryAuthorizationAttributes) InternalTokens() hclwrite.Tokens {
	return ba.ref.InternalTokens()
}

func (ba BinaryAuthorizationAttributes) BreakglassJustification() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("breakglass_justification"))
}

func (ba BinaryAuthorizationAttributes) UseDefault() terra.BoolValue {
	return terra.ReferenceBool(ba.ref.Append("use_default"))
}

type TemplateAttributes struct {
	ref terra.Reference
}

func (t TemplateAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TemplateAttributes) InternalWithRef(ref terra.Reference) TemplateAttributes {
	return TemplateAttributes{ref: ref}
}

func (t TemplateAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TemplateAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](t.ref.Append("labels"))
}

func (t TemplateAttributes) Parallelism() terra.NumberValue {
	return terra.ReferenceNumber(t.ref.Append("parallelism"))
}

func (t TemplateAttributes) TaskCount() terra.NumberValue {
	return terra.ReferenceNumber(t.ref.Append("task_count"))
}

func (t TemplateAttributes) Template() terra.ListValue[TemplateTemplateAttributes] {
	return terra.ReferenceList[TemplateTemplateAttributes](t.ref.Append("template"))
}

type TemplateTemplateAttributes struct {
	ref terra.Reference
}

func (t TemplateTemplateAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TemplateTemplateAttributes) InternalWithRef(ref terra.Reference) TemplateTemplateAttributes {
	return TemplateTemplateAttributes{ref: ref}
}

func (t TemplateTemplateAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TemplateTemplateAttributes) EncryptionKey() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("encryption_key"))
}

func (t TemplateTemplateAttributes) ExecutionEnvironment() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("execution_environment"))
}

func (t TemplateTemplateAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceNumber(t.ref.Append("max_retries"))
}

func (t TemplateTemplateAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("service_account"))
}

func (t TemplateTemplateAttributes) Timeout() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("timeout"))
}

func (t TemplateTemplateAttributes) Containers() terra.ListValue[ContainersAttributes] {
	return terra.ReferenceList[ContainersAttributes](t.ref.Append("containers"))
}

func (t TemplateTemplateAttributes) Volumes() terra.ListValue[VolumesAttributes] {
	return terra.ReferenceList[VolumesAttributes](t.ref.Append("volumes"))
}

func (t TemplateTemplateAttributes) VpcAccess() terra.ListValue[VpcAccessAttributes] {
	return terra.ReferenceList[VpcAccessAttributes](t.ref.Append("vpc_access"))
}

type ContainersAttributes struct {
	ref terra.Reference
}

func (c ContainersAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c ContainersAttributes) InternalWithRef(ref terra.Reference) ContainersAttributes {
	return ContainersAttributes{ref: ref}
}

func (c ContainersAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c ContainersAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](c.ref.Append("args"))
}

func (c ContainersAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](c.ref.Append("command"))
}

func (c ContainersAttributes) Image() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("image"))
}

func (c ContainersAttributes) Name() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("name"))
}

func (c ContainersAttributes) WorkingDir() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("working_dir"))
}

func (c ContainersAttributes) Env() terra.ListValue[EnvAttributes] {
	return terra.ReferenceList[EnvAttributes](c.ref.Append("env"))
}

func (c ContainersAttributes) LivenessProbe() terra.ListValue[LivenessProbeAttributes] {
	return terra.ReferenceList[LivenessProbeAttributes](c.ref.Append("liveness_probe"))
}

func (c ContainersAttributes) Ports() terra.ListValue[PortsAttributes] {
	return terra.ReferenceList[PortsAttributes](c.ref.Append("ports"))
}

func (c ContainersAttributes) Resources() terra.ListValue[ResourcesAttributes] {
	return terra.ReferenceList[ResourcesAttributes](c.ref.Append("resources"))
}

func (c ContainersAttributes) StartupProbe() terra.ListValue[StartupProbeAttributes] {
	return terra.ReferenceList[StartupProbeAttributes](c.ref.Append("startup_probe"))
}

func (c ContainersAttributes) VolumeMounts() terra.ListValue[VolumeMountsAttributes] {
	return terra.ReferenceList[VolumeMountsAttributes](c.ref.Append("volume_mounts"))
}

type EnvAttributes struct {
	ref terra.Reference
}

func (e EnvAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e EnvAttributes) InternalWithRef(ref terra.Reference) EnvAttributes {
	return EnvAttributes{ref: ref}
}

func (e EnvAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e EnvAttributes) Name() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("name"))
}

func (e EnvAttributes) Value() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("value"))
}

func (e EnvAttributes) ValueSource() terra.ListValue[ValueSourceAttributes] {
	return terra.ReferenceList[ValueSourceAttributes](e.ref.Append("value_source"))
}

type ValueSourceAttributes struct {
	ref terra.Reference
}

func (vs ValueSourceAttributes) InternalRef() terra.Reference {
	return vs.ref
}

func (vs ValueSourceAttributes) InternalWithRef(ref terra.Reference) ValueSourceAttributes {
	return ValueSourceAttributes{ref: ref}
}

func (vs ValueSourceAttributes) InternalTokens() hclwrite.Tokens {
	return vs.ref.InternalTokens()
}

func (vs ValueSourceAttributes) SecretKeyRef() terra.ListValue[SecretKeyRefAttributes] {
	return terra.ReferenceList[SecretKeyRefAttributes](vs.ref.Append("secret_key_ref"))
}

type SecretKeyRefAttributes struct {
	ref terra.Reference
}

func (skr SecretKeyRefAttributes) InternalRef() terra.Reference {
	return skr.ref
}

func (skr SecretKeyRefAttributes) InternalWithRef(ref terra.Reference) SecretKeyRefAttributes {
	return SecretKeyRefAttributes{ref: ref}
}

func (skr SecretKeyRefAttributes) InternalTokens() hclwrite.Tokens {
	return skr.ref.InternalTokens()
}

func (skr SecretKeyRefAttributes) Secret() terra.StringValue {
	return terra.ReferenceString(skr.ref.Append("secret"))
}

func (skr SecretKeyRefAttributes) Version() terra.StringValue {
	return terra.ReferenceString(skr.ref.Append("version"))
}

type LivenessProbeAttributes struct {
	ref terra.Reference
}

func (lp LivenessProbeAttributes) InternalRef() terra.Reference {
	return lp.ref
}

func (lp LivenessProbeAttributes) InternalWithRef(ref terra.Reference) LivenessProbeAttributes {
	return LivenessProbeAttributes{ref: ref}
}

func (lp LivenessProbeAttributes) InternalTokens() hclwrite.Tokens {
	return lp.ref.InternalTokens()
}

func (lp LivenessProbeAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceNumber(lp.ref.Append("failure_threshold"))
}

func (lp LivenessProbeAttributes) InitialDelaySeconds() terra.NumberValue {
	return terra.ReferenceNumber(lp.ref.Append("initial_delay_seconds"))
}

func (lp LivenessProbeAttributes) PeriodSeconds() terra.NumberValue {
	return terra.ReferenceNumber(lp.ref.Append("period_seconds"))
}

func (lp LivenessProbeAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceNumber(lp.ref.Append("timeout_seconds"))
}

func (lp LivenessProbeAttributes) HttpGet() terra.ListValue[LivenessProbeHttpGetAttributes] {
	return terra.ReferenceList[LivenessProbeHttpGetAttributes](lp.ref.Append("http_get"))
}

func (lp LivenessProbeAttributes) TcpSocket() terra.ListValue[LivenessProbeTcpSocketAttributes] {
	return terra.ReferenceList[LivenessProbeTcpSocketAttributes](lp.ref.Append("tcp_socket"))
}

type LivenessProbeHttpGetAttributes struct {
	ref terra.Reference
}

func (hg LivenessProbeHttpGetAttributes) InternalRef() terra.Reference {
	return hg.ref
}

func (hg LivenessProbeHttpGetAttributes) InternalWithRef(ref terra.Reference) LivenessProbeHttpGetAttributes {
	return LivenessProbeHttpGetAttributes{ref: ref}
}

func (hg LivenessProbeHttpGetAttributes) InternalTokens() hclwrite.Tokens {
	return hg.ref.InternalTokens()
}

func (hg LivenessProbeHttpGetAttributes) Path() terra.StringValue {
	return terra.ReferenceString(hg.ref.Append("path"))
}

func (hg LivenessProbeHttpGetAttributes) HttpHeaders() terra.ListValue[LivenessProbeHttpGetHttpHeadersAttributes] {
	return terra.ReferenceList[LivenessProbeHttpGetHttpHeadersAttributes](hg.ref.Append("http_headers"))
}

type LivenessProbeHttpGetHttpHeadersAttributes struct {
	ref terra.Reference
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) InternalRef() terra.Reference {
	return hh.ref
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) InternalWithRef(ref terra.Reference) LivenessProbeHttpGetHttpHeadersAttributes {
	return LivenessProbeHttpGetHttpHeadersAttributes{ref: ref}
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) InternalTokens() hclwrite.Tokens {
	return hh.ref.InternalTokens()
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) Name() terra.StringValue {
	return terra.ReferenceString(hh.ref.Append("name"))
}

func (hh LivenessProbeHttpGetHttpHeadersAttributes) Value() terra.StringValue {
	return terra.ReferenceString(hh.ref.Append("value"))
}

type LivenessProbeTcpSocketAttributes struct {
	ref terra.Reference
}

func (ts LivenessProbeTcpSocketAttributes) InternalRef() terra.Reference {
	return ts.ref
}

func (ts LivenessProbeTcpSocketAttributes) InternalWithRef(ref terra.Reference) LivenessProbeTcpSocketAttributes {
	return LivenessProbeTcpSocketAttributes{ref: ref}
}

func (ts LivenessProbeTcpSocketAttributes) InternalTokens() hclwrite.Tokens {
	return ts.ref.InternalTokens()
}

func (ts LivenessProbeTcpSocketAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(ts.ref.Append("port"))
}

type PortsAttributes struct {
	ref terra.Reference
}

func (p PortsAttributes) InternalRef() terra.Reference {
	return p.ref
}

func (p PortsAttributes) InternalWithRef(ref terra.Reference) PortsAttributes {
	return PortsAttributes{ref: ref}
}

func (p PortsAttributes) InternalTokens() hclwrite.Tokens {
	return p.ref.InternalTokens()
}

func (p PortsAttributes) ContainerPort() terra.NumberValue {
	return terra.ReferenceNumber(p.ref.Append("container_port"))
}

func (p PortsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("name"))
}

type ResourcesAttributes struct {
	ref terra.Reference
}

func (r ResourcesAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r ResourcesAttributes) InternalWithRef(ref terra.Reference) ResourcesAttributes {
	return ResourcesAttributes{ref: ref}
}

func (r ResourcesAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r ResourcesAttributes) Limits() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](r.ref.Append("limits"))
}

type StartupProbeAttributes struct {
	ref terra.Reference
}

func (sp StartupProbeAttributes) InternalRef() terra.Reference {
	return sp.ref
}

func (sp StartupProbeAttributes) InternalWithRef(ref terra.Reference) StartupProbeAttributes {
	return StartupProbeAttributes{ref: ref}
}

func (sp StartupProbeAttributes) InternalTokens() hclwrite.Tokens {
	return sp.ref.InternalTokens()
}

func (sp StartupProbeAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceNumber(sp.ref.Append("failure_threshold"))
}

func (sp StartupProbeAttributes) InitialDelaySeconds() terra.NumberValue {
	return terra.ReferenceNumber(sp.ref.Append("initial_delay_seconds"))
}

func (sp StartupProbeAttributes) PeriodSeconds() terra.NumberValue {
	return terra.ReferenceNumber(sp.ref.Append("period_seconds"))
}

func (sp StartupProbeAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceNumber(sp.ref.Append("timeout_seconds"))
}

func (sp StartupProbeAttributes) HttpGet() terra.ListValue[StartupProbeHttpGetAttributes] {
	return terra.ReferenceList[StartupProbeHttpGetAttributes](sp.ref.Append("http_get"))
}

func (sp StartupProbeAttributes) TcpSocket() terra.ListValue[StartupProbeTcpSocketAttributes] {
	return terra.ReferenceList[StartupProbeTcpSocketAttributes](sp.ref.Append("tcp_socket"))
}

type StartupProbeHttpGetAttributes struct {
	ref terra.Reference
}

func (hg StartupProbeHttpGetAttributes) InternalRef() terra.Reference {
	return hg.ref
}

func (hg StartupProbeHttpGetAttributes) InternalWithRef(ref terra.Reference) StartupProbeHttpGetAttributes {
	return StartupProbeHttpGetAttributes{ref: ref}
}

func (hg StartupProbeHttpGetAttributes) InternalTokens() hclwrite.Tokens {
	return hg.ref.InternalTokens()
}

func (hg StartupProbeHttpGetAttributes) Path() terra.StringValue {
	return terra.ReferenceString(hg.ref.Append("path"))
}

func (hg StartupProbeHttpGetAttributes) HttpHeaders() terra.ListValue[StartupProbeHttpGetHttpHeadersAttributes] {
	return terra.ReferenceList[StartupProbeHttpGetHttpHeadersAttributes](hg.ref.Append("http_headers"))
}

type StartupProbeHttpGetHttpHeadersAttributes struct {
	ref terra.Reference
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) InternalRef() terra.Reference {
	return hh.ref
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) InternalWithRef(ref terra.Reference) StartupProbeHttpGetHttpHeadersAttributes {
	return StartupProbeHttpGetHttpHeadersAttributes{ref: ref}
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) InternalTokens() hclwrite.Tokens {
	return hh.ref.InternalTokens()
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) Name() terra.StringValue {
	return terra.ReferenceString(hh.ref.Append("name"))
}

func (hh StartupProbeHttpGetHttpHeadersAttributes) Value() terra.StringValue {
	return terra.ReferenceString(hh.ref.Append("value"))
}

type StartupProbeTcpSocketAttributes struct {
	ref terra.Reference
}

func (ts StartupProbeTcpSocketAttributes) InternalRef() terra.Reference {
	return ts.ref
}

func (ts StartupProbeTcpSocketAttributes) InternalWithRef(ref terra.Reference) StartupProbeTcpSocketAttributes {
	return StartupProbeTcpSocketAttributes{ref: ref}
}

func (ts StartupProbeTcpSocketAttributes) InternalTokens() hclwrite.Tokens {
	return ts.ref.InternalTokens()
}

func (ts StartupProbeTcpSocketAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(ts.ref.Append("port"))
}

type VolumeMountsAttributes struct {
	ref terra.Reference
}

func (vm VolumeMountsAttributes) InternalRef() terra.Reference {
	return vm.ref
}

func (vm VolumeMountsAttributes) InternalWithRef(ref terra.Reference) VolumeMountsAttributes {
	return VolumeMountsAttributes{ref: ref}
}

func (vm VolumeMountsAttributes) InternalTokens() hclwrite.Tokens {
	return vm.ref.InternalTokens()
}

func (vm VolumeMountsAttributes) MountPath() terra.StringValue {
	return terra.ReferenceString(vm.ref.Append("mount_path"))
}

func (vm VolumeMountsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vm.ref.Append("name"))
}

type VolumesAttributes struct {
	ref terra.Reference
}

func (v VolumesAttributes) InternalRef() terra.Reference {
	return v.ref
}

func (v VolumesAttributes) InternalWithRef(ref terra.Reference) VolumesAttributes {
	return VolumesAttributes{ref: ref}
}

func (v VolumesAttributes) InternalTokens() hclwrite.Tokens {
	return v.ref.InternalTokens()
}

func (v VolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceString(v.ref.Append("name"))
}

func (v VolumesAttributes) CloudSqlInstance() terra.ListValue[CloudSqlInstanceAttributes] {
	return terra.ReferenceList[CloudSqlInstanceAttributes](v.ref.Append("cloud_sql_instance"))
}

func (v VolumesAttributes) Secret() terra.ListValue[SecretAttributes] {
	return terra.ReferenceList[SecretAttributes](v.ref.Append("secret"))
}

type CloudSqlInstanceAttributes struct {
	ref terra.Reference
}

func (csi CloudSqlInstanceAttributes) InternalRef() terra.Reference {
	return csi.ref
}

func (csi CloudSqlInstanceAttributes) InternalWithRef(ref terra.Reference) CloudSqlInstanceAttributes {
	return CloudSqlInstanceAttributes{ref: ref}
}

func (csi CloudSqlInstanceAttributes) InternalTokens() hclwrite.Tokens {
	return csi.ref.InternalTokens()
}

func (csi CloudSqlInstanceAttributes) Instances() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](csi.ref.Append("instances"))
}

type SecretAttributes struct {
	ref terra.Reference
}

func (s SecretAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SecretAttributes) InternalWithRef(ref terra.Reference) SecretAttributes {
	return SecretAttributes{ref: ref}
}

func (s SecretAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SecretAttributes) DefaultMode() terra.NumberValue {
	return terra.ReferenceNumber(s.ref.Append("default_mode"))
}

func (s SecretAttributes) Secret() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("secret"))
}

func (s SecretAttributes) Items() terra.ListValue[ItemsAttributes] {
	return terra.ReferenceList[ItemsAttributes](s.ref.Append("items"))
}

type ItemsAttributes struct {
	ref terra.Reference
}

func (i ItemsAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i ItemsAttributes) InternalWithRef(ref terra.Reference) ItemsAttributes {
	return ItemsAttributes{ref: ref}
}

func (i ItemsAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i ItemsAttributes) Mode() terra.NumberValue {
	return terra.ReferenceNumber(i.ref.Append("mode"))
}

func (i ItemsAttributes) Path() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("path"))
}

func (i ItemsAttributes) Version() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("version"))
}

type VpcAccessAttributes struct {
	ref terra.Reference
}

func (va VpcAccessAttributes) InternalRef() terra.Reference {
	return va.ref
}

func (va VpcAccessAttributes) InternalWithRef(ref terra.Reference) VpcAccessAttributes {
	return VpcAccessAttributes{ref: ref}
}

func (va VpcAccessAttributes) InternalTokens() hclwrite.Tokens {
	return va.ref.InternalTokens()
}

func (va VpcAccessAttributes) Connector() terra.StringValue {
	return terra.ReferenceString(va.ref.Append("connector"))
}

func (va VpcAccessAttributes) Egress() terra.StringValue {
	return terra.ReferenceString(va.ref.Append("egress"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type ConditionsState struct {
	ExecutionReason    string `json:"execution_reason"`
	LastTransitionTime string `json:"last_transition_time"`
	Message            string `json:"message"`
	Reason             string `json:"reason"`
	RevisionReason     string `json:"revision_reason"`
	Severity           string `json:"severity"`
	State              string `json:"state"`
	Type               string `json:"type"`
}

type LatestCreatedExecutionState struct {
	CompletionTime string `json:"completion_time"`
	CreateTime     string `json:"create_time"`
	Name           string `json:"name"`
}

type TerminalConditionState struct {
	ExecutionReason    string `json:"execution_reason"`
	LastTransitionTime string `json:"last_transition_time"`
	Message            string `json:"message"`
	Reason             string `json:"reason"`
	RevisionReason     string `json:"revision_reason"`
	Severity           string `json:"severity"`
	State              string `json:"state"`
	Type               string `json:"type"`
}

type BinaryAuthorizationState struct {
	BreakglassJustification string `json:"breakglass_justification"`
	UseDefault              bool   `json:"use_default"`
}

type TemplateState struct {
	Labels      map[string]string       `json:"labels"`
	Parallelism float64                 `json:"parallelism"`
	TaskCount   float64                 `json:"task_count"`
	Template    []TemplateTemplateState `json:"template"`
}

type TemplateTemplateState struct {
	EncryptionKey        string            `json:"encryption_key"`
	ExecutionEnvironment string            `json:"execution_environment"`
	MaxRetries           float64           `json:"max_retries"`
	ServiceAccount       string            `json:"service_account"`
	Timeout              string            `json:"timeout"`
	Containers           []ContainersState `json:"containers"`
	Volumes              []VolumesState    `json:"volumes"`
	VpcAccess            []VpcAccessState  `json:"vpc_access"`
}

type ContainersState struct {
	Args          []string             `json:"args"`
	Command       []string             `json:"command"`
	Image         string               `json:"image"`
	Name          string               `json:"name"`
	WorkingDir    string               `json:"working_dir"`
	Env           []EnvState           `json:"env"`
	LivenessProbe []LivenessProbeState `json:"liveness_probe"`
	Ports         []PortsState         `json:"ports"`
	Resources     []ResourcesState     `json:"resources"`
	StartupProbe  []StartupProbeState  `json:"startup_probe"`
	VolumeMounts  []VolumeMountsState  `json:"volume_mounts"`
}

type EnvState struct {
	Name        string             `json:"name"`
	Value       string             `json:"value"`
	ValueSource []ValueSourceState `json:"value_source"`
}

type ValueSourceState struct {
	SecretKeyRef []SecretKeyRefState `json:"secret_key_ref"`
}

type SecretKeyRefState struct {
	Secret  string `json:"secret"`
	Version string `json:"version"`
}

type LivenessProbeState struct {
	FailureThreshold    float64                       `json:"failure_threshold"`
	InitialDelaySeconds float64                       `json:"initial_delay_seconds"`
	PeriodSeconds       float64                       `json:"period_seconds"`
	TimeoutSeconds      float64                       `json:"timeout_seconds"`
	HttpGet             []LivenessProbeHttpGetState   `json:"http_get"`
	TcpSocket           []LivenessProbeTcpSocketState `json:"tcp_socket"`
}

type LivenessProbeHttpGetState struct {
	Path        string                                 `json:"path"`
	HttpHeaders []LivenessProbeHttpGetHttpHeadersState `json:"http_headers"`
}

type LivenessProbeHttpGetHttpHeadersState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type LivenessProbeTcpSocketState struct {
	Port float64 `json:"port"`
}

type PortsState struct {
	ContainerPort float64 `json:"container_port"`
	Name          string  `json:"name"`
}

type ResourcesState struct {
	Limits map[string]string `json:"limits"`
}

type StartupProbeState struct {
	FailureThreshold    float64                      `json:"failure_threshold"`
	InitialDelaySeconds float64                      `json:"initial_delay_seconds"`
	PeriodSeconds       float64                      `json:"period_seconds"`
	TimeoutSeconds      float64                      `json:"timeout_seconds"`
	HttpGet             []StartupProbeHttpGetState   `json:"http_get"`
	TcpSocket           []StartupProbeTcpSocketState `json:"tcp_socket"`
}

type StartupProbeHttpGetState struct {
	Path        string                                `json:"path"`
	HttpHeaders []StartupProbeHttpGetHttpHeadersState `json:"http_headers"`
}

type StartupProbeHttpGetHttpHeadersState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type StartupProbeTcpSocketState struct {
	Port float64 `json:"port"`
}

type VolumeMountsState struct {
	MountPath string `json:"mount_path"`
	Name      string `json:"name"`
}

type VolumesState struct {
	Name             string                  `json:"name"`
	CloudSqlInstance []CloudSqlInstanceState `json:"cloud_sql_instance"`
	Secret           []SecretState           `json:"secret"`
}

type CloudSqlInstanceState struct {
	Instances []string `json:"instances"`
}

type SecretState struct {
	DefaultMode float64      `json:"default_mode"`
	Secret      string       `json:"secret"`
	Items       []ItemsState `json:"items"`
}

type ItemsState struct {
	Mode    float64 `json:"mode"`
	Path    string  `json:"path"`
	Version string  `json:"version"`
}

type VpcAccessState struct {
	Connector string `json:"connector"`
	Egress    string `json:"egress"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
