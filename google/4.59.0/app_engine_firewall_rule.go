// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	appenginefirewallrule "github.com/golingon/terraproviders/google/4.59.0/appenginefirewallrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppEngineFirewallRule(name string, args AppEngineFirewallRuleArgs) *AppEngineFirewallRule {
	return &AppEngineFirewallRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppEngineFirewallRule)(nil)

type AppEngineFirewallRule struct {
	Name  string
	Args  AppEngineFirewallRuleArgs
	state *appEngineFirewallRuleState
}

func (aefr *AppEngineFirewallRule) Type() string {
	return "google_app_engine_firewall_rule"
}

func (aefr *AppEngineFirewallRule) LocalName() string {
	return aefr.Name
}

func (aefr *AppEngineFirewallRule) Configuration() interface{} {
	return aefr.Args
}

func (aefr *AppEngineFirewallRule) Attributes() appEngineFirewallRuleAttributes {
	return appEngineFirewallRuleAttributes{ref: terra.ReferenceResource(aefr)}
}

func (aefr *AppEngineFirewallRule) ImportState(av io.Reader) error {
	aefr.state = &appEngineFirewallRuleState{}
	if err := json.NewDecoder(av).Decode(aefr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aefr.Type(), aefr.LocalName(), err)
	}
	return nil
}

func (aefr *AppEngineFirewallRule) State() (*appEngineFirewallRuleState, bool) {
	return aefr.state, aefr.state != nil
}

func (aefr *AppEngineFirewallRule) StateMust() *appEngineFirewallRuleState {
	if aefr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aefr.Type(), aefr.LocalName()))
	}
	return aefr.state
}

func (aefr *AppEngineFirewallRule) DependOn() terra.Reference {
	return terra.ReferenceResource(aefr)
}

type AppEngineFirewallRuleArgs struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SourceRange: string, required
	SourceRange terra.StringValue `hcl:"source_range,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *appenginefirewallrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AppEngineFirewallRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appEngineFirewallRuleAttributes struct {
	ref terra.Reference
}

func (aefr appEngineFirewallRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceString(aefr.ref.Append("action"))
}

func (aefr appEngineFirewallRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceString(aefr.ref.Append("description"))
}

func (aefr appEngineFirewallRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aefr.ref.Append("id"))
}

func (aefr appEngineFirewallRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(aefr.ref.Append("priority"))
}

func (aefr appEngineFirewallRuleAttributes) Project() terra.StringValue {
	return terra.ReferenceString(aefr.ref.Append("project"))
}

func (aefr appEngineFirewallRuleAttributes) SourceRange() terra.StringValue {
	return terra.ReferenceString(aefr.ref.Append("source_range"))
}

func (aefr appEngineFirewallRuleAttributes) Timeouts() appenginefirewallrule.TimeoutsAttributes {
	return terra.ReferenceSingle[appenginefirewallrule.TimeoutsAttributes](aefr.ref.Append("timeouts"))
}

type appEngineFirewallRuleState struct {
	Action      string                               `json:"action"`
	Description string                               `json:"description"`
	Id          string                               `json:"id"`
	Priority    float64                              `json:"priority"`
	Project     string                               `json:"project"`
	SourceRange string                               `json:"source_range"`
	Timeouts    *appenginefirewallrule.TimeoutsState `json:"timeouts"`
}
