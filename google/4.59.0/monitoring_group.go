// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	monitoringgroup "github.com/golingon/terraproviders/google/4.59.0/monitoringgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitoringGroup(name string, args MonitoringGroupArgs) *MonitoringGroup {
	return &MonitoringGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitoringGroup)(nil)

type MonitoringGroup struct {
	Name  string
	Args  MonitoringGroupArgs
	state *monitoringGroupState
}

func (mg *MonitoringGroup) Type() string {
	return "google_monitoring_group"
}

func (mg *MonitoringGroup) LocalName() string {
	return mg.Name
}

func (mg *MonitoringGroup) Configuration() interface{} {
	return mg.Args
}

func (mg *MonitoringGroup) Attributes() monitoringGroupAttributes {
	return monitoringGroupAttributes{ref: terra.ReferenceResource(mg)}
}

func (mg *MonitoringGroup) ImportState(av io.Reader) error {
	mg.state = &monitoringGroupState{}
	if err := json.NewDecoder(av).Decode(mg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mg.Type(), mg.LocalName(), err)
	}
	return nil
}

func (mg *MonitoringGroup) State() (*monitoringGroupState, bool) {
	return mg.state, mg.state != nil
}

func (mg *MonitoringGroup) StateMust() *monitoringGroupState {
	if mg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mg.Type(), mg.LocalName()))
	}
	return mg.state
}

func (mg *MonitoringGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(mg)
}

type MonitoringGroupArgs struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Filter: string, required
	Filter terra.StringValue `hcl:"filter,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsCluster: bool, optional
	IsCluster terra.BoolValue `hcl:"is_cluster,attr"`
	// ParentName: string, optional
	ParentName terra.StringValue `hcl:"parent_name,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *monitoringgroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MonitoringGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitoringGroupAttributes struct {
	ref terra.Reference
}

func (mg monitoringGroupAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(mg.ref.Append("display_name"))
}

func (mg monitoringGroupAttributes) Filter() terra.StringValue {
	return terra.ReferenceString(mg.ref.Append("filter"))
}

func (mg monitoringGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mg.ref.Append("id"))
}

func (mg monitoringGroupAttributes) IsCluster() terra.BoolValue {
	return terra.ReferenceBool(mg.ref.Append("is_cluster"))
}

func (mg monitoringGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mg.ref.Append("name"))
}

func (mg monitoringGroupAttributes) ParentName() terra.StringValue {
	return terra.ReferenceString(mg.ref.Append("parent_name"))
}

func (mg monitoringGroupAttributes) Project() terra.StringValue {
	return terra.ReferenceString(mg.ref.Append("project"))
}

func (mg monitoringGroupAttributes) Timeouts() monitoringgroup.TimeoutsAttributes {
	return terra.ReferenceSingle[monitoringgroup.TimeoutsAttributes](mg.ref.Append("timeouts"))
}

type monitoringGroupState struct {
	DisplayName string                         `json:"display_name"`
	Filter      string                         `json:"filter"`
	Id          string                         `json:"id"`
	IsCluster   bool                           `json:"is_cluster"`
	Name        string                         `json:"name"`
	ParentName  string                         `json:"parent_name"`
	Project     string                         `json:"project"`
	Timeouts    *monitoringgroup.TimeoutsState `json:"timeouts"`
}
