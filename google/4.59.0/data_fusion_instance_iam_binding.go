// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	datafusioninstanceiambinding "github.com/golingon/terraproviders/google/4.59.0/datafusioninstanceiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFusionInstanceIamBinding(name string, args DataFusionInstanceIamBindingArgs) *DataFusionInstanceIamBinding {
	return &DataFusionInstanceIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFusionInstanceIamBinding)(nil)

type DataFusionInstanceIamBinding struct {
	Name  string
	Args  DataFusionInstanceIamBindingArgs
	state *dataFusionInstanceIamBindingState
}

func (dfiib *DataFusionInstanceIamBinding) Type() string {
	return "google_data_fusion_instance_iam_binding"
}

func (dfiib *DataFusionInstanceIamBinding) LocalName() string {
	return dfiib.Name
}

func (dfiib *DataFusionInstanceIamBinding) Configuration() interface{} {
	return dfiib.Args
}

func (dfiib *DataFusionInstanceIamBinding) Attributes() dataFusionInstanceIamBindingAttributes {
	return dataFusionInstanceIamBindingAttributes{ref: terra.ReferenceResource(dfiib)}
}

func (dfiib *DataFusionInstanceIamBinding) ImportState(av io.Reader) error {
	dfiib.state = &dataFusionInstanceIamBindingState{}
	if err := json.NewDecoder(av).Decode(dfiib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dfiib.Type(), dfiib.LocalName(), err)
	}
	return nil
}

func (dfiib *DataFusionInstanceIamBinding) State() (*dataFusionInstanceIamBindingState, bool) {
	return dfiib.state, dfiib.state != nil
}

func (dfiib *DataFusionInstanceIamBinding) StateMust() *dataFusionInstanceIamBindingState {
	if dfiib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dfiib.Type(), dfiib.LocalName()))
	}
	return dfiib.state
}

func (dfiib *DataFusionInstanceIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(dfiib)
}

type DataFusionInstanceIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *datafusioninstanceiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataFusionInstanceIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFusionInstanceIamBindingAttributes struct {
	ref terra.Reference
}

func (dfiib dataFusionInstanceIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dfiib.ref.Append("etag"))
}

func (dfiib dataFusionInstanceIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dfiib.ref.Append("id"))
}

func (dfiib dataFusionInstanceIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dfiib.ref.Append("members"))
}

func (dfiib dataFusionInstanceIamBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dfiib.ref.Append("name"))
}

func (dfiib dataFusionInstanceIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dfiib.ref.Append("project"))
}

func (dfiib dataFusionInstanceIamBindingAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dfiib.ref.Append("region"))
}

func (dfiib dataFusionInstanceIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(dfiib.ref.Append("role"))
}

func (dfiib dataFusionInstanceIamBindingAttributes) Condition() terra.ListValue[datafusioninstanceiambinding.ConditionAttributes] {
	return terra.ReferenceList[datafusioninstanceiambinding.ConditionAttributes](dfiib.ref.Append("condition"))
}

type dataFusionInstanceIamBindingState struct {
	Etag      string                                        `json:"etag"`
	Id        string                                        `json:"id"`
	Members   []string                                      `json:"members"`
	Name      string                                        `json:"name"`
	Project   string                                        `json:"project"`
	Region    string                                        `json:"region"`
	Role      string                                        `json:"role"`
	Condition []datafusioninstanceiambinding.ConditionState `json:"condition"`
}
