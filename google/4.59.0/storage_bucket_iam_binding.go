// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	storagebucketiambinding "github.com/golingon/terraproviders/google/4.59.0/storagebucketiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStorageBucketIamBinding(name string, args StorageBucketIamBindingArgs) *StorageBucketIamBinding {
	return &StorageBucketIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageBucketIamBinding)(nil)

type StorageBucketIamBinding struct {
	Name  string
	Args  StorageBucketIamBindingArgs
	state *storageBucketIamBindingState
}

func (sbib *StorageBucketIamBinding) Type() string {
	return "google_storage_bucket_iam_binding"
}

func (sbib *StorageBucketIamBinding) LocalName() string {
	return sbib.Name
}

func (sbib *StorageBucketIamBinding) Configuration() interface{} {
	return sbib.Args
}

func (sbib *StorageBucketIamBinding) Attributes() storageBucketIamBindingAttributes {
	return storageBucketIamBindingAttributes{ref: terra.ReferenceResource(sbib)}
}

func (sbib *StorageBucketIamBinding) ImportState(av io.Reader) error {
	sbib.state = &storageBucketIamBindingState{}
	if err := json.NewDecoder(av).Decode(sbib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbib.Type(), sbib.LocalName(), err)
	}
	return nil
}

func (sbib *StorageBucketIamBinding) State() (*storageBucketIamBindingState, bool) {
	return sbib.state, sbib.state != nil
}

func (sbib *StorageBucketIamBinding) StateMust() *storageBucketIamBindingState {
	if sbib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbib.Type(), sbib.LocalName()))
	}
	return sbib.state
}

func (sbib *StorageBucketIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(sbib)
}

type StorageBucketIamBindingArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *storagebucketiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that StorageBucketIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storageBucketIamBindingAttributes struct {
	ref terra.Reference
}

func (sbib storageBucketIamBindingAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbib.ref.Append("bucket"))
}

func (sbib storageBucketIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(sbib.ref.Append("etag"))
}

func (sbib storageBucketIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbib.ref.Append("id"))
}

func (sbib storageBucketIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](sbib.ref.Append("members"))
}

func (sbib storageBucketIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(sbib.ref.Append("role"))
}

func (sbib storageBucketIamBindingAttributes) Condition() terra.ListValue[storagebucketiambinding.ConditionAttributes] {
	return terra.ReferenceList[storagebucketiambinding.ConditionAttributes](sbib.ref.Append("condition"))
}

type storageBucketIamBindingState struct {
	Bucket    string                                   `json:"bucket"`
	Etag      string                                   `json:"etag"`
	Id        string                                   `json:"id"`
	Members   []string                                 `json:"members"`
	Role      string                                   `json:"role"`
	Condition []storagebucketiambinding.ConditionState `json:"condition"`
}
