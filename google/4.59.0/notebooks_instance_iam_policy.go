// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNotebooksInstanceIamPolicy(name string, args NotebooksInstanceIamPolicyArgs) *NotebooksInstanceIamPolicy {
	return &NotebooksInstanceIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NotebooksInstanceIamPolicy)(nil)

type NotebooksInstanceIamPolicy struct {
	Name  string
	Args  NotebooksInstanceIamPolicyArgs
	state *notebooksInstanceIamPolicyState
}

func (niip *NotebooksInstanceIamPolicy) Type() string {
	return "google_notebooks_instance_iam_policy"
}

func (niip *NotebooksInstanceIamPolicy) LocalName() string {
	return niip.Name
}

func (niip *NotebooksInstanceIamPolicy) Configuration() interface{} {
	return niip.Args
}

func (niip *NotebooksInstanceIamPolicy) Attributes() notebooksInstanceIamPolicyAttributes {
	return notebooksInstanceIamPolicyAttributes{ref: terra.ReferenceResource(niip)}
}

func (niip *NotebooksInstanceIamPolicy) ImportState(av io.Reader) error {
	niip.state = &notebooksInstanceIamPolicyState{}
	if err := json.NewDecoder(av).Decode(niip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", niip.Type(), niip.LocalName(), err)
	}
	return nil
}

func (niip *NotebooksInstanceIamPolicy) State() (*notebooksInstanceIamPolicyState, bool) {
	return niip.state, niip.state != nil
}

func (niip *NotebooksInstanceIamPolicy) StateMust() *notebooksInstanceIamPolicyState {
	if niip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", niip.Type(), niip.LocalName()))
	}
	return niip.state
}

func (niip *NotebooksInstanceIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(niip)
}

type NotebooksInstanceIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceName: string, required
	InstanceName terra.StringValue `hcl:"instance_name,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that NotebooksInstanceIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type notebooksInstanceIamPolicyAttributes struct {
	ref terra.Reference
}

func (niip notebooksInstanceIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(niip.ref.Append("etag"))
}

func (niip notebooksInstanceIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(niip.ref.Append("id"))
}

func (niip notebooksInstanceIamPolicyAttributes) InstanceName() terra.StringValue {
	return terra.ReferenceString(niip.ref.Append("instance_name"))
}

func (niip notebooksInstanceIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(niip.ref.Append("location"))
}

func (niip notebooksInstanceIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(niip.ref.Append("policy_data"))
}

func (niip notebooksInstanceIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(niip.ref.Append("project"))
}

type notebooksInstanceIamPolicyState struct {
	Etag         string `json:"etag"`
	Id           string `json:"id"`
	InstanceName string `json:"instance_name"`
	Location     string `json:"location"`
	PolicyData   string `json:"policy_data"`
	Project      string `json:"project"`
}
