// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computesharedvpchostproject "github.com/golingon/terraproviders/google/4.59.0/computesharedvpchostproject"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeSharedVpcHostProject(name string, args ComputeSharedVpcHostProjectArgs) *ComputeSharedVpcHostProject {
	return &ComputeSharedVpcHostProject{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeSharedVpcHostProject)(nil)

type ComputeSharedVpcHostProject struct {
	Name  string
	Args  ComputeSharedVpcHostProjectArgs
	state *computeSharedVpcHostProjectState
}

func (csvhp *ComputeSharedVpcHostProject) Type() string {
	return "google_compute_shared_vpc_host_project"
}

func (csvhp *ComputeSharedVpcHostProject) LocalName() string {
	return csvhp.Name
}

func (csvhp *ComputeSharedVpcHostProject) Configuration() interface{} {
	return csvhp.Args
}

func (csvhp *ComputeSharedVpcHostProject) Attributes() computeSharedVpcHostProjectAttributes {
	return computeSharedVpcHostProjectAttributes{ref: terra.ReferenceResource(csvhp)}
}

func (csvhp *ComputeSharedVpcHostProject) ImportState(av io.Reader) error {
	csvhp.state = &computeSharedVpcHostProjectState{}
	if err := json.NewDecoder(av).Decode(csvhp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csvhp.Type(), csvhp.LocalName(), err)
	}
	return nil
}

func (csvhp *ComputeSharedVpcHostProject) State() (*computeSharedVpcHostProjectState, bool) {
	return csvhp.state, csvhp.state != nil
}

func (csvhp *ComputeSharedVpcHostProject) StateMust() *computeSharedVpcHostProjectState {
	if csvhp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csvhp.Type(), csvhp.LocalName()))
	}
	return csvhp.state
}

func (csvhp *ComputeSharedVpcHostProject) DependOn() terra.Reference {
	return terra.ReferenceResource(csvhp)
}

type ComputeSharedVpcHostProjectArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *computesharedvpchostproject.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeSharedVpcHostProject depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeSharedVpcHostProjectAttributes struct {
	ref terra.Reference
}

func (csvhp computeSharedVpcHostProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceString(csvhp.ref.Append("id"))
}

func (csvhp computeSharedVpcHostProjectAttributes) Project() terra.StringValue {
	return terra.ReferenceString(csvhp.ref.Append("project"))
}

func (csvhp computeSharedVpcHostProjectAttributes) Timeouts() computesharedvpchostproject.TimeoutsAttributes {
	return terra.ReferenceSingle[computesharedvpchostproject.TimeoutsAttributes](csvhp.ref.Append("timeouts"))
}

type computeSharedVpcHostProjectState struct {
	Id       string                                     `json:"id"`
	Project  string                                     `json:"project"`
	Timeouts *computesharedvpchostproject.TimeoutsState `json:"timeouts"`
}
