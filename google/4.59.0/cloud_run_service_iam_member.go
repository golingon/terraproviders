// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	cloudrunserviceiammember "github.com/golingon/terraproviders/google/4.59.0/cloudrunserviceiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudRunServiceIamMember(name string, args CloudRunServiceIamMemberArgs) *CloudRunServiceIamMember {
	return &CloudRunServiceIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudRunServiceIamMember)(nil)

type CloudRunServiceIamMember struct {
	Name  string
	Args  CloudRunServiceIamMemberArgs
	state *cloudRunServiceIamMemberState
}

func (crsim *CloudRunServiceIamMember) Type() string {
	return "google_cloud_run_service_iam_member"
}

func (crsim *CloudRunServiceIamMember) LocalName() string {
	return crsim.Name
}

func (crsim *CloudRunServiceIamMember) Configuration() interface{} {
	return crsim.Args
}

func (crsim *CloudRunServiceIamMember) Attributes() cloudRunServiceIamMemberAttributes {
	return cloudRunServiceIamMemberAttributes{ref: terra.ReferenceResource(crsim)}
}

func (crsim *CloudRunServiceIamMember) ImportState(av io.Reader) error {
	crsim.state = &cloudRunServiceIamMemberState{}
	if err := json.NewDecoder(av).Decode(crsim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crsim.Type(), crsim.LocalName(), err)
	}
	return nil
}

func (crsim *CloudRunServiceIamMember) State() (*cloudRunServiceIamMemberState, bool) {
	return crsim.state, crsim.state != nil
}

func (crsim *CloudRunServiceIamMember) StateMust() *cloudRunServiceIamMemberState {
	if crsim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crsim.Type(), crsim.LocalName()))
	}
	return crsim.state
}

func (crsim *CloudRunServiceIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(crsim)
}

type CloudRunServiceIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// Condition: optional
	Condition *cloudrunserviceiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that CloudRunServiceIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudRunServiceIamMemberAttributes struct {
	ref terra.Reference
}

func (crsim cloudRunServiceIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(crsim.ref.Append("etag"))
}

func (crsim cloudRunServiceIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crsim.ref.Append("id"))
}

func (crsim cloudRunServiceIamMemberAttributes) Location() terra.StringValue {
	return terra.ReferenceString(crsim.ref.Append("location"))
}

func (crsim cloudRunServiceIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(crsim.ref.Append("member"))
}

func (crsim cloudRunServiceIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crsim.ref.Append("project"))
}

func (crsim cloudRunServiceIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(crsim.ref.Append("role"))
}

func (crsim cloudRunServiceIamMemberAttributes) Service() terra.StringValue {
	return terra.ReferenceString(crsim.ref.Append("service"))
}

func (crsim cloudRunServiceIamMemberAttributes) Condition() terra.ListValue[cloudrunserviceiammember.ConditionAttributes] {
	return terra.ReferenceList[cloudrunserviceiammember.ConditionAttributes](crsim.ref.Append("condition"))
}

type cloudRunServiceIamMemberState struct {
	Etag      string                                    `json:"etag"`
	Id        string                                    `json:"id"`
	Location  string                                    `json:"location"`
	Member    string                                    `json:"member"`
	Project   string                                    `json:"project"`
	Role      string                                    `json:"role"`
	Service   string                                    `json:"service"`
	Condition []cloudrunserviceiammember.ConditionState `json:"condition"`
}
