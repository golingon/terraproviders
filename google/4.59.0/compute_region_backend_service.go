// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeregionbackendservice "github.com/golingon/terraproviders/google/4.59.0/computeregionbackendservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeRegionBackendService(name string, args ComputeRegionBackendServiceArgs) *ComputeRegionBackendService {
	return &ComputeRegionBackendService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeRegionBackendService)(nil)

type ComputeRegionBackendService struct {
	Name  string
	Args  ComputeRegionBackendServiceArgs
	state *computeRegionBackendServiceState
}

func (crbs *ComputeRegionBackendService) Type() string {
	return "google_compute_region_backend_service"
}

func (crbs *ComputeRegionBackendService) LocalName() string {
	return crbs.Name
}

func (crbs *ComputeRegionBackendService) Configuration() interface{} {
	return crbs.Args
}

func (crbs *ComputeRegionBackendService) Attributes() computeRegionBackendServiceAttributes {
	return computeRegionBackendServiceAttributes{ref: terra.ReferenceResource(crbs)}
}

func (crbs *ComputeRegionBackendService) ImportState(av io.Reader) error {
	crbs.state = &computeRegionBackendServiceState{}
	if err := json.NewDecoder(av).Decode(crbs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crbs.Type(), crbs.LocalName(), err)
	}
	return nil
}

func (crbs *ComputeRegionBackendService) State() (*computeRegionBackendServiceState, bool) {
	return crbs.state, crbs.state != nil
}

func (crbs *ComputeRegionBackendService) StateMust() *computeRegionBackendServiceState {
	if crbs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crbs.Type(), crbs.LocalName()))
	}
	return crbs.state
}

func (crbs *ComputeRegionBackendService) DependOn() terra.Reference {
	return terra.ReferenceResource(crbs)
}

type ComputeRegionBackendServiceArgs struct {
	// AffinityCookieTtlSec: number, optional
	AffinityCookieTtlSec terra.NumberValue `hcl:"affinity_cookie_ttl_sec,attr"`
	// ConnectionDrainingTimeoutSec: number, optional
	ConnectionDrainingTimeoutSec terra.NumberValue `hcl:"connection_draining_timeout_sec,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnableCdn: bool, optional
	EnableCdn terra.BoolValue `hcl:"enable_cdn,attr"`
	// HealthChecks: set of string, optional
	HealthChecks terra.SetValue[terra.StringValue] `hcl:"health_checks,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoadBalancingScheme: string, optional
	LoadBalancingScheme terra.StringValue `hcl:"load_balancing_scheme,attr"`
	// LocalityLbPolicy: string, optional
	LocalityLbPolicy terra.StringValue `hcl:"locality_lb_policy,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// PortName: string, optional
	PortName terra.StringValue `hcl:"port_name,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// SessionAffinity: string, optional
	SessionAffinity terra.StringValue `hcl:"session_affinity,attr"`
	// TimeoutSec: number, optional
	TimeoutSec terra.NumberValue `hcl:"timeout_sec,attr"`
	// Backend: min=0
	Backend []computeregionbackendservice.Backend `hcl:"backend,block" validate:"min=0"`
	// CdnPolicy: optional
	CdnPolicy *computeregionbackendservice.CdnPolicy `hcl:"cdn_policy,block"`
	// CircuitBreakers: optional
	CircuitBreakers *computeregionbackendservice.CircuitBreakers `hcl:"circuit_breakers,block"`
	// ConsistentHash: optional
	ConsistentHash *computeregionbackendservice.ConsistentHash `hcl:"consistent_hash,block"`
	// FailoverPolicy: optional
	FailoverPolicy *computeregionbackendservice.FailoverPolicy `hcl:"failover_policy,block"`
	// Iap: optional
	Iap *computeregionbackendservice.Iap `hcl:"iap,block"`
	// LogConfig: optional
	LogConfig *computeregionbackendservice.LogConfig `hcl:"log_config,block"`
	// OutlierDetection: optional
	OutlierDetection *computeregionbackendservice.OutlierDetection `hcl:"outlier_detection,block"`
	// Timeouts: optional
	Timeouts *computeregionbackendservice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeRegionBackendService depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeRegionBackendServiceAttributes struct {
	ref terra.Reference
}

func (crbs computeRegionBackendServiceAttributes) AffinityCookieTtlSec() terra.NumberValue {
	return terra.ReferenceNumber(crbs.ref.Append("affinity_cookie_ttl_sec"))
}

func (crbs computeRegionBackendServiceAttributes) ConnectionDrainingTimeoutSec() terra.NumberValue {
	return terra.ReferenceNumber(crbs.ref.Append("connection_draining_timeout_sec"))
}

func (crbs computeRegionBackendServiceAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(crbs.ref.Append("creation_timestamp"))
}

func (crbs computeRegionBackendServiceAttributes) Description() terra.StringValue {
	return terra.ReferenceString(crbs.ref.Append("description"))
}

func (crbs computeRegionBackendServiceAttributes) EnableCdn() terra.BoolValue {
	return terra.ReferenceBool(crbs.ref.Append("enable_cdn"))
}

func (crbs computeRegionBackendServiceAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceString(crbs.ref.Append("fingerprint"))
}

func (crbs computeRegionBackendServiceAttributes) HealthChecks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](crbs.ref.Append("health_checks"))
}

func (crbs computeRegionBackendServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crbs.ref.Append("id"))
}

func (crbs computeRegionBackendServiceAttributes) LoadBalancingScheme() terra.StringValue {
	return terra.ReferenceString(crbs.ref.Append("load_balancing_scheme"))
}

func (crbs computeRegionBackendServiceAttributes) LocalityLbPolicy() terra.StringValue {
	return terra.ReferenceString(crbs.ref.Append("locality_lb_policy"))
}

func (crbs computeRegionBackendServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crbs.ref.Append("name"))
}

func (crbs computeRegionBackendServiceAttributes) Network() terra.StringValue {
	return terra.ReferenceString(crbs.ref.Append("network"))
}

func (crbs computeRegionBackendServiceAttributes) PortName() terra.StringValue {
	return terra.ReferenceString(crbs.ref.Append("port_name"))
}

func (crbs computeRegionBackendServiceAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crbs.ref.Append("project"))
}

func (crbs computeRegionBackendServiceAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(crbs.ref.Append("protocol"))
}

func (crbs computeRegionBackendServiceAttributes) Region() terra.StringValue {
	return terra.ReferenceString(crbs.ref.Append("region"))
}

func (crbs computeRegionBackendServiceAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(crbs.ref.Append("self_link"))
}

func (crbs computeRegionBackendServiceAttributes) SessionAffinity() terra.StringValue {
	return terra.ReferenceString(crbs.ref.Append("session_affinity"))
}

func (crbs computeRegionBackendServiceAttributes) TimeoutSec() terra.NumberValue {
	return terra.ReferenceNumber(crbs.ref.Append("timeout_sec"))
}

func (crbs computeRegionBackendServiceAttributes) Backend() terra.SetValue[computeregionbackendservice.BackendAttributes] {
	return terra.ReferenceSet[computeregionbackendservice.BackendAttributes](crbs.ref.Append("backend"))
}

func (crbs computeRegionBackendServiceAttributes) CdnPolicy() terra.ListValue[computeregionbackendservice.CdnPolicyAttributes] {
	return terra.ReferenceList[computeregionbackendservice.CdnPolicyAttributes](crbs.ref.Append("cdn_policy"))
}

func (crbs computeRegionBackendServiceAttributes) CircuitBreakers() terra.ListValue[computeregionbackendservice.CircuitBreakersAttributes] {
	return terra.ReferenceList[computeregionbackendservice.CircuitBreakersAttributes](crbs.ref.Append("circuit_breakers"))
}

func (crbs computeRegionBackendServiceAttributes) ConsistentHash() terra.ListValue[computeregionbackendservice.ConsistentHashAttributes] {
	return terra.ReferenceList[computeregionbackendservice.ConsistentHashAttributes](crbs.ref.Append("consistent_hash"))
}

func (crbs computeRegionBackendServiceAttributes) FailoverPolicy() terra.ListValue[computeregionbackendservice.FailoverPolicyAttributes] {
	return terra.ReferenceList[computeregionbackendservice.FailoverPolicyAttributes](crbs.ref.Append("failover_policy"))
}

func (crbs computeRegionBackendServiceAttributes) Iap() terra.ListValue[computeregionbackendservice.IapAttributes] {
	return terra.ReferenceList[computeregionbackendservice.IapAttributes](crbs.ref.Append("iap"))
}

func (crbs computeRegionBackendServiceAttributes) LogConfig() terra.ListValue[computeregionbackendservice.LogConfigAttributes] {
	return terra.ReferenceList[computeregionbackendservice.LogConfigAttributes](crbs.ref.Append("log_config"))
}

func (crbs computeRegionBackendServiceAttributes) OutlierDetection() terra.ListValue[computeregionbackendservice.OutlierDetectionAttributes] {
	return terra.ReferenceList[computeregionbackendservice.OutlierDetectionAttributes](crbs.ref.Append("outlier_detection"))
}

func (crbs computeRegionBackendServiceAttributes) Timeouts() computeregionbackendservice.TimeoutsAttributes {
	return terra.ReferenceSingle[computeregionbackendservice.TimeoutsAttributes](crbs.ref.Append("timeouts"))
}

type computeRegionBackendServiceState struct {
	AffinityCookieTtlSec         float64                                             `json:"affinity_cookie_ttl_sec"`
	ConnectionDrainingTimeoutSec float64                                             `json:"connection_draining_timeout_sec"`
	CreationTimestamp            string                                              `json:"creation_timestamp"`
	Description                  string                                              `json:"description"`
	EnableCdn                    bool                                                `json:"enable_cdn"`
	Fingerprint                  string                                              `json:"fingerprint"`
	HealthChecks                 []string                                            `json:"health_checks"`
	Id                           string                                              `json:"id"`
	LoadBalancingScheme          string                                              `json:"load_balancing_scheme"`
	LocalityLbPolicy             string                                              `json:"locality_lb_policy"`
	Name                         string                                              `json:"name"`
	Network                      string                                              `json:"network"`
	PortName                     string                                              `json:"port_name"`
	Project                      string                                              `json:"project"`
	Protocol                     string                                              `json:"protocol"`
	Region                       string                                              `json:"region"`
	SelfLink                     string                                              `json:"self_link"`
	SessionAffinity              string                                              `json:"session_affinity"`
	TimeoutSec                   float64                                             `json:"timeout_sec"`
	Backend                      []computeregionbackendservice.BackendState          `json:"backend"`
	CdnPolicy                    []computeregionbackendservice.CdnPolicyState        `json:"cdn_policy"`
	CircuitBreakers              []computeregionbackendservice.CircuitBreakersState  `json:"circuit_breakers"`
	ConsistentHash               []computeregionbackendservice.ConsistentHashState   `json:"consistent_hash"`
	FailoverPolicy               []computeregionbackendservice.FailoverPolicyState   `json:"failover_policy"`
	Iap                          []computeregionbackendservice.IapState              `json:"iap"`
	LogConfig                    []computeregionbackendservice.LogConfigState        `json:"log_config"`
	OutlierDetection             []computeregionbackendservice.OutlierDetectionState `json:"outlier_detection"`
	Timeouts                     *computeregionbackendservice.TimeoutsState          `json:"timeouts"`
}
