// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	spannerdatabaseiammember "github.com/golingon/terraproviders/google/4.59.0/spannerdatabaseiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpannerDatabaseIamMember(name string, args SpannerDatabaseIamMemberArgs) *SpannerDatabaseIamMember {
	return &SpannerDatabaseIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpannerDatabaseIamMember)(nil)

type SpannerDatabaseIamMember struct {
	Name  string
	Args  SpannerDatabaseIamMemberArgs
	state *spannerDatabaseIamMemberState
}

func (sdim *SpannerDatabaseIamMember) Type() string {
	return "google_spanner_database_iam_member"
}

func (sdim *SpannerDatabaseIamMember) LocalName() string {
	return sdim.Name
}

func (sdim *SpannerDatabaseIamMember) Configuration() interface{} {
	return sdim.Args
}

func (sdim *SpannerDatabaseIamMember) Attributes() spannerDatabaseIamMemberAttributes {
	return spannerDatabaseIamMemberAttributes{ref: terra.ReferenceResource(sdim)}
}

func (sdim *SpannerDatabaseIamMember) ImportState(av io.Reader) error {
	sdim.state = &spannerDatabaseIamMemberState{}
	if err := json.NewDecoder(av).Decode(sdim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sdim.Type(), sdim.LocalName(), err)
	}
	return nil
}

func (sdim *SpannerDatabaseIamMember) State() (*spannerDatabaseIamMemberState, bool) {
	return sdim.state, sdim.state != nil
}

func (sdim *SpannerDatabaseIamMember) StateMust() *spannerDatabaseIamMemberState {
	if sdim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sdim.Type(), sdim.LocalName()))
	}
	return sdim.state
}

func (sdim *SpannerDatabaseIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(sdim)
}

type SpannerDatabaseIamMemberArgs struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *spannerdatabaseiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that SpannerDatabaseIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type spannerDatabaseIamMemberAttributes struct {
	ref terra.Reference
}

func (sdim spannerDatabaseIamMemberAttributes) Database() terra.StringValue {
	return terra.ReferenceString(sdim.ref.Append("database"))
}

func (sdim spannerDatabaseIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(sdim.ref.Append("etag"))
}

func (sdim spannerDatabaseIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sdim.ref.Append("id"))
}

func (sdim spannerDatabaseIamMemberAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(sdim.ref.Append("instance"))
}

func (sdim spannerDatabaseIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(sdim.ref.Append("member"))
}

func (sdim spannerDatabaseIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(sdim.ref.Append("project"))
}

func (sdim spannerDatabaseIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(sdim.ref.Append("role"))
}

func (sdim spannerDatabaseIamMemberAttributes) Condition() terra.ListValue[spannerdatabaseiammember.ConditionAttributes] {
	return terra.ReferenceList[spannerdatabaseiammember.ConditionAttributes](sdim.ref.Append("condition"))
}

type spannerDatabaseIamMemberState struct {
	Database  string                                    `json:"database"`
	Etag      string                                    `json:"etag"`
	Id        string                                    `json:"id"`
	Instance  string                                    `json:"instance"`
	Member    string                                    `json:"member"`
	Project   string                                    `json:"project"`
	Role      string                                    `json:"role"`
	Condition []spannerdatabaseiammember.ConditionState `json:"condition"`
}
