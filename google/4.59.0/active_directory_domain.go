// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	activedirectorydomain "github.com/golingon/terraproviders/google/4.59.0/activedirectorydomain"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewActiveDirectoryDomain(name string, args ActiveDirectoryDomainArgs) *ActiveDirectoryDomain {
	return &ActiveDirectoryDomain{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ActiveDirectoryDomain)(nil)

type ActiveDirectoryDomain struct {
	Name  string
	Args  ActiveDirectoryDomainArgs
	state *activeDirectoryDomainState
}

func (add *ActiveDirectoryDomain) Type() string {
	return "google_active_directory_domain"
}

func (add *ActiveDirectoryDomain) LocalName() string {
	return add.Name
}

func (add *ActiveDirectoryDomain) Configuration() interface{} {
	return add.Args
}

func (add *ActiveDirectoryDomain) Attributes() activeDirectoryDomainAttributes {
	return activeDirectoryDomainAttributes{ref: terra.ReferenceResource(add)}
}

func (add *ActiveDirectoryDomain) ImportState(av io.Reader) error {
	add.state = &activeDirectoryDomainState{}
	if err := json.NewDecoder(av).Decode(add.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", add.Type(), add.LocalName(), err)
	}
	return nil
}

func (add *ActiveDirectoryDomain) State() (*activeDirectoryDomainState, bool) {
	return add.state, add.state != nil
}

func (add *ActiveDirectoryDomain) StateMust() *activeDirectoryDomainState {
	if add.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", add.Type(), add.LocalName()))
	}
	return add.state
}

func (add *ActiveDirectoryDomain) DependOn() terra.Reference {
	return terra.ReferenceResource(add)
}

type ActiveDirectoryDomainArgs struct {
	// Admin: string, optional
	Admin terra.StringValue `hcl:"admin,attr"`
	// AuthorizedNetworks: set of string, optional
	AuthorizedNetworks terra.SetValue[terra.StringValue] `hcl:"authorized_networks,attr"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Locations: list of string, required
	Locations terra.ListValue[terra.StringValue] `hcl:"locations,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ReservedIpRange: string, required
	ReservedIpRange terra.StringValue `hcl:"reserved_ip_range,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *activedirectorydomain.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ActiveDirectoryDomain depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type activeDirectoryDomainAttributes struct {
	ref terra.Reference
}

func (add activeDirectoryDomainAttributes) Admin() terra.StringValue {
	return terra.ReferenceString(add.ref.Append("admin"))
}

func (add activeDirectoryDomainAttributes) AuthorizedNetworks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](add.ref.Append("authorized_networks"))
}

func (add activeDirectoryDomainAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(add.ref.Append("domain_name"))
}

func (add activeDirectoryDomainAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(add.ref.Append("fqdn"))
}

func (add activeDirectoryDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceString(add.ref.Append("id"))
}

func (add activeDirectoryDomainAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](add.ref.Append("labels"))
}

func (add activeDirectoryDomainAttributes) Locations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](add.ref.Append("locations"))
}

func (add activeDirectoryDomainAttributes) Name() terra.StringValue {
	return terra.ReferenceString(add.ref.Append("name"))
}

func (add activeDirectoryDomainAttributes) Project() terra.StringValue {
	return terra.ReferenceString(add.ref.Append("project"))
}

func (add activeDirectoryDomainAttributes) ReservedIpRange() terra.StringValue {
	return terra.ReferenceString(add.ref.Append("reserved_ip_range"))
}

func (add activeDirectoryDomainAttributes) Timeouts() activedirectorydomain.TimeoutsAttributes {
	return terra.ReferenceSingle[activedirectorydomain.TimeoutsAttributes](add.ref.Append("timeouts"))
}

type activeDirectoryDomainState struct {
	Admin              string                               `json:"admin"`
	AuthorizedNetworks []string                             `json:"authorized_networks"`
	DomainName         string                               `json:"domain_name"`
	Fqdn               string                               `json:"fqdn"`
	Id                 string                               `json:"id"`
	Labels             map[string]string                    `json:"labels"`
	Locations          []string                             `json:"locations"`
	Name               string                               `json:"name"`
	Project            string                               `json:"project"`
	ReservedIpRange    string                               `json:"reserved_ip_range"`
	Timeouts           *activedirectorydomain.TimeoutsState `json:"timeouts"`
}
