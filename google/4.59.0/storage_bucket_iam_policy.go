// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStorageBucketIamPolicy(name string, args StorageBucketIamPolicyArgs) *StorageBucketIamPolicy {
	return &StorageBucketIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageBucketIamPolicy)(nil)

type StorageBucketIamPolicy struct {
	Name  string
	Args  StorageBucketIamPolicyArgs
	state *storageBucketIamPolicyState
}

func (sbip *StorageBucketIamPolicy) Type() string {
	return "google_storage_bucket_iam_policy"
}

func (sbip *StorageBucketIamPolicy) LocalName() string {
	return sbip.Name
}

func (sbip *StorageBucketIamPolicy) Configuration() interface{} {
	return sbip.Args
}

func (sbip *StorageBucketIamPolicy) Attributes() storageBucketIamPolicyAttributes {
	return storageBucketIamPolicyAttributes{ref: terra.ReferenceResource(sbip)}
}

func (sbip *StorageBucketIamPolicy) ImportState(av io.Reader) error {
	sbip.state = &storageBucketIamPolicyState{}
	if err := json.NewDecoder(av).Decode(sbip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbip.Type(), sbip.LocalName(), err)
	}
	return nil
}

func (sbip *StorageBucketIamPolicy) State() (*storageBucketIamPolicyState, bool) {
	return sbip.state, sbip.state != nil
}

func (sbip *StorageBucketIamPolicy) StateMust() *storageBucketIamPolicyState {
	if sbip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbip.Type(), sbip.LocalName()))
	}
	return sbip.state
}

func (sbip *StorageBucketIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(sbip)
}

type StorageBucketIamPolicyArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// DependsOn contains resources that StorageBucketIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storageBucketIamPolicyAttributes struct {
	ref terra.Reference
}

func (sbip storageBucketIamPolicyAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbip.ref.Append("bucket"))
}

func (sbip storageBucketIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(sbip.ref.Append("etag"))
}

func (sbip storageBucketIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbip.ref.Append("id"))
}

func (sbip storageBucketIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(sbip.ref.Append("policy_data"))
}

type storageBucketIamPolicyState struct {
	Bucket     string `json:"bucket"`
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	PolicyData string `json:"policy_data"`
}
