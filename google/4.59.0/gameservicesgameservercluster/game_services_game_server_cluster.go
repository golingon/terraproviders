// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package gameservicesgameservercluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ConnectionInfo struct {
	// Namespace: string, required
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
	// GkeClusterReference: required
	GkeClusterReference *GkeClusterReference `hcl:"gke_cluster_reference,block" validate:"required"`
}

type GkeClusterReference struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConnectionInfoAttributes struct {
	ref terra.Reference
}

func (ci ConnectionInfoAttributes) InternalRef() terra.Reference {
	return ci.ref
}

func (ci ConnectionInfoAttributes) InternalWithRef(ref terra.Reference) ConnectionInfoAttributes {
	return ConnectionInfoAttributes{ref: ref}
}

func (ci ConnectionInfoAttributes) InternalTokens() hclwrite.Tokens {
	return ci.ref.InternalTokens()
}

func (ci ConnectionInfoAttributes) Namespace() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("namespace"))
}

func (ci ConnectionInfoAttributes) GkeClusterReference() terra.ListValue[GkeClusterReferenceAttributes] {
	return terra.ReferenceList[GkeClusterReferenceAttributes](ci.ref.Append("gke_cluster_reference"))
}

type GkeClusterReferenceAttributes struct {
	ref terra.Reference
}

func (gcr GkeClusterReferenceAttributes) InternalRef() terra.Reference {
	return gcr.ref
}

func (gcr GkeClusterReferenceAttributes) InternalWithRef(ref terra.Reference) GkeClusterReferenceAttributes {
	return GkeClusterReferenceAttributes{ref: ref}
}

func (gcr GkeClusterReferenceAttributes) InternalTokens() hclwrite.Tokens {
	return gcr.ref.InternalTokens()
}

func (gcr GkeClusterReferenceAttributes) Cluster() terra.StringValue {
	return terra.ReferenceString(gcr.ref.Append("cluster"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type ConnectionInfoState struct {
	Namespace           string                     `json:"namespace"`
	GkeClusterReference []GkeClusterReferenceState `json:"gke_cluster_reference"`
}

type GkeClusterReferenceState struct {
	Cluster string `json:"cluster"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
