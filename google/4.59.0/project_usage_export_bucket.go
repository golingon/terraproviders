// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	projectusageexportbucket "github.com/golingon/terraproviders/google/4.59.0/projectusageexportbucket"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewProjectUsageExportBucket(name string, args ProjectUsageExportBucketArgs) *ProjectUsageExportBucket {
	return &ProjectUsageExportBucket{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ProjectUsageExportBucket)(nil)

type ProjectUsageExportBucket struct {
	Name  string
	Args  ProjectUsageExportBucketArgs
	state *projectUsageExportBucketState
}

func (pueb *ProjectUsageExportBucket) Type() string {
	return "google_project_usage_export_bucket"
}

func (pueb *ProjectUsageExportBucket) LocalName() string {
	return pueb.Name
}

func (pueb *ProjectUsageExportBucket) Configuration() interface{} {
	return pueb.Args
}

func (pueb *ProjectUsageExportBucket) Attributes() projectUsageExportBucketAttributes {
	return projectUsageExportBucketAttributes{ref: terra.ReferenceResource(pueb)}
}

func (pueb *ProjectUsageExportBucket) ImportState(av io.Reader) error {
	pueb.state = &projectUsageExportBucketState{}
	if err := json.NewDecoder(av).Decode(pueb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pueb.Type(), pueb.LocalName(), err)
	}
	return nil
}

func (pueb *ProjectUsageExportBucket) State() (*projectUsageExportBucketState, bool) {
	return pueb.state, pueb.state != nil
}

func (pueb *ProjectUsageExportBucket) StateMust() *projectUsageExportBucketState {
	if pueb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pueb.Type(), pueb.LocalName()))
	}
	return pueb.state
}

func (pueb *ProjectUsageExportBucket) DependOn() terra.Reference {
	return terra.ReferenceResource(pueb)
}

type ProjectUsageExportBucketArgs struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *projectusageexportbucket.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ProjectUsageExportBucket depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type projectUsageExportBucketAttributes struct {
	ref terra.Reference
}

func (pueb projectUsageExportBucketAttributes) BucketName() terra.StringValue {
	return terra.ReferenceString(pueb.ref.Append("bucket_name"))
}

func (pueb projectUsageExportBucketAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pueb.ref.Append("id"))
}

func (pueb projectUsageExportBucketAttributes) Prefix() terra.StringValue {
	return terra.ReferenceString(pueb.ref.Append("prefix"))
}

func (pueb projectUsageExportBucketAttributes) Project() terra.StringValue {
	return terra.ReferenceString(pueb.ref.Append("project"))
}

func (pueb projectUsageExportBucketAttributes) Timeouts() projectusageexportbucket.TimeoutsAttributes {
	return terra.ReferenceSingle[projectusageexportbucket.TimeoutsAttributes](pueb.ref.Append("timeouts"))
}

type projectUsageExportBucketState struct {
	BucketName string                                  `json:"bucket_name"`
	Id         string                                  `json:"id"`
	Prefix     string                                  `json:"prefix"`
	Project    string                                  `json:"project"`
	Timeouts   *projectusageexportbucket.TimeoutsState `json:"timeouts"`
}
