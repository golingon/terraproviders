// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	datacatalogpolicytagiambinding "github.com/golingon/terraproviders/google/4.59.0/datacatalogpolicytagiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataCatalogPolicyTagIamBinding(name string, args DataCatalogPolicyTagIamBindingArgs) *DataCatalogPolicyTagIamBinding {
	return &DataCatalogPolicyTagIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataCatalogPolicyTagIamBinding)(nil)

type DataCatalogPolicyTagIamBinding struct {
	Name  string
	Args  DataCatalogPolicyTagIamBindingArgs
	state *dataCatalogPolicyTagIamBindingState
}

func (dcptib *DataCatalogPolicyTagIamBinding) Type() string {
	return "google_data_catalog_policy_tag_iam_binding"
}

func (dcptib *DataCatalogPolicyTagIamBinding) LocalName() string {
	return dcptib.Name
}

func (dcptib *DataCatalogPolicyTagIamBinding) Configuration() interface{} {
	return dcptib.Args
}

func (dcptib *DataCatalogPolicyTagIamBinding) Attributes() dataCatalogPolicyTagIamBindingAttributes {
	return dataCatalogPolicyTagIamBindingAttributes{ref: terra.ReferenceResource(dcptib)}
}

func (dcptib *DataCatalogPolicyTagIamBinding) ImportState(av io.Reader) error {
	dcptib.state = &dataCatalogPolicyTagIamBindingState{}
	if err := json.NewDecoder(av).Decode(dcptib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcptib.Type(), dcptib.LocalName(), err)
	}
	return nil
}

func (dcptib *DataCatalogPolicyTagIamBinding) State() (*dataCatalogPolicyTagIamBindingState, bool) {
	return dcptib.state, dcptib.state != nil
}

func (dcptib *DataCatalogPolicyTagIamBinding) StateMust() *dataCatalogPolicyTagIamBindingState {
	if dcptib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcptib.Type(), dcptib.LocalName()))
	}
	return dcptib.state
}

func (dcptib *DataCatalogPolicyTagIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(dcptib)
}

type DataCatalogPolicyTagIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// PolicyTag: string, required
	PolicyTag terra.StringValue `hcl:"policy_tag,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *datacatalogpolicytagiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataCatalogPolicyTagIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataCatalogPolicyTagIamBindingAttributes struct {
	ref terra.Reference
}

func (dcptib dataCatalogPolicyTagIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dcptib.ref.Append("etag"))
}

func (dcptib dataCatalogPolicyTagIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dcptib.ref.Append("id"))
}

func (dcptib dataCatalogPolicyTagIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dcptib.ref.Append("members"))
}

func (dcptib dataCatalogPolicyTagIamBindingAttributes) PolicyTag() terra.StringValue {
	return terra.ReferenceString(dcptib.ref.Append("policy_tag"))
}

func (dcptib dataCatalogPolicyTagIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(dcptib.ref.Append("role"))
}

func (dcptib dataCatalogPolicyTagIamBindingAttributes) Condition() terra.ListValue[datacatalogpolicytagiambinding.ConditionAttributes] {
	return terra.ReferenceList[datacatalogpolicytagiambinding.ConditionAttributes](dcptib.ref.Append("condition"))
}

type dataCatalogPolicyTagIamBindingState struct {
	Etag      string                                          `json:"etag"`
	Id        string                                          `json:"id"`
	Members   []string                                        `json:"members"`
	PolicyTag string                                          `json:"policy_tag"`
	Role      string                                          `json:"role"`
	Condition []datacatalogpolicytagiambinding.ConditionState `json:"condition"`
}
