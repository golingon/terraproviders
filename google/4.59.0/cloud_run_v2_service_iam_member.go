// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	cloudrunv2serviceiammember "github.com/golingon/terraproviders/google/4.59.0/cloudrunv2serviceiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudRunV2ServiceIamMember(name string, args CloudRunV2ServiceIamMemberArgs) *CloudRunV2ServiceIamMember {
	return &CloudRunV2ServiceIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudRunV2ServiceIamMember)(nil)

type CloudRunV2ServiceIamMember struct {
	Name  string
	Args  CloudRunV2ServiceIamMemberArgs
	state *cloudRunV2ServiceIamMemberState
}

func (crvsim *CloudRunV2ServiceIamMember) Type() string {
	return "google_cloud_run_v2_service_iam_member"
}

func (crvsim *CloudRunV2ServiceIamMember) LocalName() string {
	return crvsim.Name
}

func (crvsim *CloudRunV2ServiceIamMember) Configuration() interface{} {
	return crvsim.Args
}

func (crvsim *CloudRunV2ServiceIamMember) Attributes() cloudRunV2ServiceIamMemberAttributes {
	return cloudRunV2ServiceIamMemberAttributes{ref: terra.ReferenceResource(crvsim)}
}

func (crvsim *CloudRunV2ServiceIamMember) ImportState(av io.Reader) error {
	crvsim.state = &cloudRunV2ServiceIamMemberState{}
	if err := json.NewDecoder(av).Decode(crvsim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crvsim.Type(), crvsim.LocalName(), err)
	}
	return nil
}

func (crvsim *CloudRunV2ServiceIamMember) State() (*cloudRunV2ServiceIamMemberState, bool) {
	return crvsim.state, crvsim.state != nil
}

func (crvsim *CloudRunV2ServiceIamMember) StateMust() *cloudRunV2ServiceIamMemberState {
	if crvsim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crvsim.Type(), crvsim.LocalName()))
	}
	return crvsim.state
}

func (crvsim *CloudRunV2ServiceIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(crvsim)
}

type CloudRunV2ServiceIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *cloudrunv2serviceiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that CloudRunV2ServiceIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudRunV2ServiceIamMemberAttributes struct {
	ref terra.Reference
}

func (crvsim cloudRunV2ServiceIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(crvsim.ref.Append("etag"))
}

func (crvsim cloudRunV2ServiceIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crvsim.ref.Append("id"))
}

func (crvsim cloudRunV2ServiceIamMemberAttributes) Location() terra.StringValue {
	return terra.ReferenceString(crvsim.ref.Append("location"))
}

func (crvsim cloudRunV2ServiceIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(crvsim.ref.Append("member"))
}

func (crvsim cloudRunV2ServiceIamMemberAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crvsim.ref.Append("name"))
}

func (crvsim cloudRunV2ServiceIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crvsim.ref.Append("project"))
}

func (crvsim cloudRunV2ServiceIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(crvsim.ref.Append("role"))
}

func (crvsim cloudRunV2ServiceIamMemberAttributes) Condition() terra.ListValue[cloudrunv2serviceiammember.ConditionAttributes] {
	return terra.ReferenceList[cloudrunv2serviceiammember.ConditionAttributes](crvsim.ref.Append("condition"))
}

type cloudRunV2ServiceIamMemberState struct {
	Etag      string                                      `json:"etag"`
	Id        string                                      `json:"id"`
	Location  string                                      `json:"location"`
	Member    string                                      `json:"member"`
	Name      string                                      `json:"name"`
	Project   string                                      `json:"project"`
	Role      string                                      `json:"role"`
	Condition []cloudrunv2serviceiammember.ConditionState `json:"condition"`
}
