// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	pubsubsubscriptioniammember "github.com/golingon/terraproviders/google/4.59.0/pubsubsubscriptioniammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPubsubSubscriptionIamMember(name string, args PubsubSubscriptionIamMemberArgs) *PubsubSubscriptionIamMember {
	return &PubsubSubscriptionIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PubsubSubscriptionIamMember)(nil)

type PubsubSubscriptionIamMember struct {
	Name  string
	Args  PubsubSubscriptionIamMemberArgs
	state *pubsubSubscriptionIamMemberState
}

func (psim *PubsubSubscriptionIamMember) Type() string {
	return "google_pubsub_subscription_iam_member"
}

func (psim *PubsubSubscriptionIamMember) LocalName() string {
	return psim.Name
}

func (psim *PubsubSubscriptionIamMember) Configuration() interface{} {
	return psim.Args
}

func (psim *PubsubSubscriptionIamMember) Attributes() pubsubSubscriptionIamMemberAttributes {
	return pubsubSubscriptionIamMemberAttributes{ref: terra.ReferenceResource(psim)}
}

func (psim *PubsubSubscriptionIamMember) ImportState(av io.Reader) error {
	psim.state = &pubsubSubscriptionIamMemberState{}
	if err := json.NewDecoder(av).Decode(psim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", psim.Type(), psim.LocalName(), err)
	}
	return nil
}

func (psim *PubsubSubscriptionIamMember) State() (*pubsubSubscriptionIamMemberState, bool) {
	return psim.state, psim.state != nil
}

func (psim *PubsubSubscriptionIamMember) StateMust() *pubsubSubscriptionIamMemberState {
	if psim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", psim.Type(), psim.LocalName()))
	}
	return psim.state
}

func (psim *PubsubSubscriptionIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(psim)
}

type PubsubSubscriptionIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Subscription: string, required
	Subscription terra.StringValue `hcl:"subscription,attr" validate:"required"`
	// Condition: optional
	Condition *pubsubsubscriptioniammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that PubsubSubscriptionIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type pubsubSubscriptionIamMemberAttributes struct {
	ref terra.Reference
}

func (psim pubsubSubscriptionIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(psim.ref.Append("etag"))
}

func (psim pubsubSubscriptionIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(psim.ref.Append("id"))
}

func (psim pubsubSubscriptionIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(psim.ref.Append("member"))
}

func (psim pubsubSubscriptionIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(psim.ref.Append("project"))
}

func (psim pubsubSubscriptionIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(psim.ref.Append("role"))
}

func (psim pubsubSubscriptionIamMemberAttributes) Subscription() terra.StringValue {
	return terra.ReferenceString(psim.ref.Append("subscription"))
}

func (psim pubsubSubscriptionIamMemberAttributes) Condition() terra.ListValue[pubsubsubscriptioniammember.ConditionAttributes] {
	return terra.ReferenceList[pubsubsubscriptioniammember.ConditionAttributes](psim.ref.Append("condition"))
}

type pubsubSubscriptionIamMemberState struct {
	Etag         string                                       `json:"etag"`
	Id           string                                       `json:"id"`
	Member       string                                       `json:"member"`
	Project      string                                       `json:"project"`
	Role         string                                       `json:"role"`
	Subscription string                                       `json:"subscription"`
	Condition    []pubsubsubscriptioniammember.ConditionState `json:"condition"`
}
