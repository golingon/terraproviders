// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	pubsubtopic "github.com/golingon/terraproviders/google/4.59.0/pubsubtopic"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPubsubTopic(name string, args PubsubTopicArgs) *PubsubTopic {
	return &PubsubTopic{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PubsubTopic)(nil)

type PubsubTopic struct {
	Name  string
	Args  PubsubTopicArgs
	state *pubsubTopicState
}

func (pt *PubsubTopic) Type() string {
	return "google_pubsub_topic"
}

func (pt *PubsubTopic) LocalName() string {
	return pt.Name
}

func (pt *PubsubTopic) Configuration() interface{} {
	return pt.Args
}

func (pt *PubsubTopic) Attributes() pubsubTopicAttributes {
	return pubsubTopicAttributes{ref: terra.ReferenceResource(pt)}
}

func (pt *PubsubTopic) ImportState(av io.Reader) error {
	pt.state = &pubsubTopicState{}
	if err := json.NewDecoder(av).Decode(pt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pt.Type(), pt.LocalName(), err)
	}
	return nil
}

func (pt *PubsubTopic) State() (*pubsubTopicState, bool) {
	return pt.state, pt.state != nil
}

func (pt *PubsubTopic) StateMust() *pubsubTopicState {
	if pt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pt.Type(), pt.LocalName()))
	}
	return pt.state
}

func (pt *PubsubTopic) DependOn() terra.Reference {
	return terra.ReferenceResource(pt)
}

type PubsubTopicArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// MessageRetentionDuration: string, optional
	MessageRetentionDuration terra.StringValue `hcl:"message_retention_duration,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// MessageStoragePolicy: optional
	MessageStoragePolicy *pubsubtopic.MessageStoragePolicy `hcl:"message_storage_policy,block"`
	// SchemaSettings: optional
	SchemaSettings *pubsubtopic.SchemaSettings `hcl:"schema_settings,block"`
	// Timeouts: optional
	Timeouts *pubsubtopic.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PubsubTopic depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type pubsubTopicAttributes struct {
	ref terra.Reference
}

func (pt pubsubTopicAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pt.ref.Append("id"))
}

func (pt pubsubTopicAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceString(pt.ref.Append("kms_key_name"))
}

func (pt pubsubTopicAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pt.ref.Append("labels"))
}

func (pt pubsubTopicAttributes) MessageRetentionDuration() terra.StringValue {
	return terra.ReferenceString(pt.ref.Append("message_retention_duration"))
}

func (pt pubsubTopicAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pt.ref.Append("name"))
}

func (pt pubsubTopicAttributes) Project() terra.StringValue {
	return terra.ReferenceString(pt.ref.Append("project"))
}

func (pt pubsubTopicAttributes) MessageStoragePolicy() terra.ListValue[pubsubtopic.MessageStoragePolicyAttributes] {
	return terra.ReferenceList[pubsubtopic.MessageStoragePolicyAttributes](pt.ref.Append("message_storage_policy"))
}

func (pt pubsubTopicAttributes) SchemaSettings() terra.ListValue[pubsubtopic.SchemaSettingsAttributes] {
	return terra.ReferenceList[pubsubtopic.SchemaSettingsAttributes](pt.ref.Append("schema_settings"))
}

func (pt pubsubTopicAttributes) Timeouts() pubsubtopic.TimeoutsAttributes {
	return terra.ReferenceSingle[pubsubtopic.TimeoutsAttributes](pt.ref.Append("timeouts"))
}

type pubsubTopicState struct {
	Id                       string                                  `json:"id"`
	KmsKeyName               string                                  `json:"kms_key_name"`
	Labels                   map[string]string                       `json:"labels"`
	MessageRetentionDuration string                                  `json:"message_retention_duration"`
	Name                     string                                  `json:"name"`
	Project                  string                                  `json:"project"`
	MessageStoragePolicy     []pubsubtopic.MessageStoragePolicyState `json:"message_storage_policy"`
	SchemaSettings           []pubsubtopic.SchemaSettingsState       `json:"schema_settings"`
	Timeouts                 *pubsubtopic.TimeoutsState              `json:"timeouts"`
}
