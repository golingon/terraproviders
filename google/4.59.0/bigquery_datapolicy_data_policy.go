// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	bigquerydatapolicydatapolicy "github.com/golingon/terraproviders/google/4.59.0/bigquerydatapolicydatapolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigqueryDatapolicyDataPolicy(name string, args BigqueryDatapolicyDataPolicyArgs) *BigqueryDatapolicyDataPolicy {
	return &BigqueryDatapolicyDataPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryDatapolicyDataPolicy)(nil)

type BigqueryDatapolicyDataPolicy struct {
	Name  string
	Args  BigqueryDatapolicyDataPolicyArgs
	state *bigqueryDatapolicyDataPolicyState
}

func (bddp *BigqueryDatapolicyDataPolicy) Type() string {
	return "google_bigquery_datapolicy_data_policy"
}

func (bddp *BigqueryDatapolicyDataPolicy) LocalName() string {
	return bddp.Name
}

func (bddp *BigqueryDatapolicyDataPolicy) Configuration() interface{} {
	return bddp.Args
}

func (bddp *BigqueryDatapolicyDataPolicy) Attributes() bigqueryDatapolicyDataPolicyAttributes {
	return bigqueryDatapolicyDataPolicyAttributes{ref: terra.ReferenceResource(bddp)}
}

func (bddp *BigqueryDatapolicyDataPolicy) ImportState(av io.Reader) error {
	bddp.state = &bigqueryDatapolicyDataPolicyState{}
	if err := json.NewDecoder(av).Decode(bddp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bddp.Type(), bddp.LocalName(), err)
	}
	return nil
}

func (bddp *BigqueryDatapolicyDataPolicy) State() (*bigqueryDatapolicyDataPolicyState, bool) {
	return bddp.state, bddp.state != nil
}

func (bddp *BigqueryDatapolicyDataPolicy) StateMust() *bigqueryDatapolicyDataPolicyState {
	if bddp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bddp.Type(), bddp.LocalName()))
	}
	return bddp.state
}

func (bddp *BigqueryDatapolicyDataPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(bddp)
}

type BigqueryDatapolicyDataPolicyArgs struct {
	// DataPolicyId: string, required
	DataPolicyId terra.StringValue `hcl:"data_policy_id,attr" validate:"required"`
	// DataPolicyType: string, required
	DataPolicyType terra.StringValue `hcl:"data_policy_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// PolicyTag: string, required
	PolicyTag terra.StringValue `hcl:"policy_tag,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DataMaskingPolicy: optional
	DataMaskingPolicy *bigquerydatapolicydatapolicy.DataMaskingPolicy `hcl:"data_masking_policy,block"`
	// Timeouts: optional
	Timeouts *bigquerydatapolicydatapolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BigqueryDatapolicyDataPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigqueryDatapolicyDataPolicyAttributes struct {
	ref terra.Reference
}

func (bddp bigqueryDatapolicyDataPolicyAttributes) DataPolicyId() terra.StringValue {
	return terra.ReferenceString(bddp.ref.Append("data_policy_id"))
}

func (bddp bigqueryDatapolicyDataPolicyAttributes) DataPolicyType() terra.StringValue {
	return terra.ReferenceString(bddp.ref.Append("data_policy_type"))
}

func (bddp bigqueryDatapolicyDataPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bddp.ref.Append("id"))
}

func (bddp bigqueryDatapolicyDataPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bddp.ref.Append("location"))
}

func (bddp bigqueryDatapolicyDataPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bddp.ref.Append("name"))
}

func (bddp bigqueryDatapolicyDataPolicyAttributes) PolicyTag() terra.StringValue {
	return terra.ReferenceString(bddp.ref.Append("policy_tag"))
}

func (bddp bigqueryDatapolicyDataPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bddp.ref.Append("project"))
}

func (bddp bigqueryDatapolicyDataPolicyAttributes) DataMaskingPolicy() terra.ListValue[bigquerydatapolicydatapolicy.DataMaskingPolicyAttributes] {
	return terra.ReferenceList[bigquerydatapolicydatapolicy.DataMaskingPolicyAttributes](bddp.ref.Append("data_masking_policy"))
}

func (bddp bigqueryDatapolicyDataPolicyAttributes) Timeouts() bigquerydatapolicydatapolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[bigquerydatapolicydatapolicy.TimeoutsAttributes](bddp.ref.Append("timeouts"))
}

type bigqueryDatapolicyDataPolicyState struct {
	DataPolicyId      string                                                `json:"data_policy_id"`
	DataPolicyType    string                                                `json:"data_policy_type"`
	Id                string                                                `json:"id"`
	Location          string                                                `json:"location"`
	Name              string                                                `json:"name"`
	PolicyTag         string                                                `json:"policy_tag"`
	Project           string                                                `json:"project"`
	DataMaskingPolicy []bigquerydatapolicydatapolicy.DataMaskingPolicyState `json:"data_masking_policy"`
	Timeouts          *bigquerydatapolicydatapolicy.TimeoutsState           `json:"timeouts"`
}
