// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	beyondcorpappconnection "github.com/golingon/terraproviders/google/4.59.0/beyondcorpappconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBeyondcorpAppConnection(name string, args BeyondcorpAppConnectionArgs) *BeyondcorpAppConnection {
	return &BeyondcorpAppConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BeyondcorpAppConnection)(nil)

type BeyondcorpAppConnection struct {
	Name  string
	Args  BeyondcorpAppConnectionArgs
	state *beyondcorpAppConnectionState
}

func (bac *BeyondcorpAppConnection) Type() string {
	return "google_beyondcorp_app_connection"
}

func (bac *BeyondcorpAppConnection) LocalName() string {
	return bac.Name
}

func (bac *BeyondcorpAppConnection) Configuration() interface{} {
	return bac.Args
}

func (bac *BeyondcorpAppConnection) Attributes() beyondcorpAppConnectionAttributes {
	return beyondcorpAppConnectionAttributes{ref: terra.ReferenceResource(bac)}
}

func (bac *BeyondcorpAppConnection) ImportState(av io.Reader) error {
	bac.state = &beyondcorpAppConnectionState{}
	if err := json.NewDecoder(av).Decode(bac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bac.Type(), bac.LocalName(), err)
	}
	return nil
}

func (bac *BeyondcorpAppConnection) State() (*beyondcorpAppConnectionState, bool) {
	return bac.state, bac.state != nil
}

func (bac *BeyondcorpAppConnection) StateMust() *beyondcorpAppConnectionState {
	if bac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bac.Type(), bac.LocalName()))
	}
	return bac.state
}

func (bac *BeyondcorpAppConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(bac)
}

type BeyondcorpAppConnectionArgs struct {
	// Connectors: list of string, optional
	Connectors terra.ListValue[terra.StringValue] `hcl:"connectors,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// ApplicationEndpoint: required
	ApplicationEndpoint *beyondcorpappconnection.ApplicationEndpoint `hcl:"application_endpoint,block" validate:"required"`
	// Gateway: optional
	Gateway *beyondcorpappconnection.Gateway `hcl:"gateway,block"`
	// Timeouts: optional
	Timeouts *beyondcorpappconnection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BeyondcorpAppConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type beyondcorpAppConnectionAttributes struct {
	ref terra.Reference
}

func (bac beyondcorpAppConnectionAttributes) Connectors() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](bac.ref.Append("connectors"))
}

func (bac beyondcorpAppConnectionAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(bac.ref.Append("display_name"))
}

func (bac beyondcorpAppConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bac.ref.Append("id"))
}

func (bac beyondcorpAppConnectionAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bac.ref.Append("labels"))
}

func (bac beyondcorpAppConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bac.ref.Append("name"))
}

func (bac beyondcorpAppConnectionAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bac.ref.Append("project"))
}

func (bac beyondcorpAppConnectionAttributes) Region() terra.StringValue {
	return terra.ReferenceString(bac.ref.Append("region"))
}

func (bac beyondcorpAppConnectionAttributes) Type() terra.StringValue {
	return terra.ReferenceString(bac.ref.Append("type"))
}

func (bac beyondcorpAppConnectionAttributes) ApplicationEndpoint() terra.ListValue[beyondcorpappconnection.ApplicationEndpointAttributes] {
	return terra.ReferenceList[beyondcorpappconnection.ApplicationEndpointAttributes](bac.ref.Append("application_endpoint"))
}

func (bac beyondcorpAppConnectionAttributes) Gateway() terra.ListValue[beyondcorpappconnection.GatewayAttributes] {
	return terra.ReferenceList[beyondcorpappconnection.GatewayAttributes](bac.ref.Append("gateway"))
}

func (bac beyondcorpAppConnectionAttributes) Timeouts() beyondcorpappconnection.TimeoutsAttributes {
	return terra.ReferenceSingle[beyondcorpappconnection.TimeoutsAttributes](bac.ref.Append("timeouts"))
}

type beyondcorpAppConnectionState struct {
	Connectors          []string                                           `json:"connectors"`
	DisplayName         string                                             `json:"display_name"`
	Id                  string                                             `json:"id"`
	Labels              map[string]string                                  `json:"labels"`
	Name                string                                             `json:"name"`
	Project             string                                             `json:"project"`
	Region              string                                             `json:"region"`
	Type                string                                             `json:"type"`
	ApplicationEndpoint []beyondcorpappconnection.ApplicationEndpointState `json:"application_endpoint"`
	Gateway             []beyondcorpappconnection.GatewayState             `json:"gateway"`
	Timeouts            *beyondcorpappconnection.TimeoutsState             `json:"timeouts"`
}
