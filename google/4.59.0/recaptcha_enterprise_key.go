// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	recaptchaenterprisekey "github.com/golingon/terraproviders/google/4.59.0/recaptchaenterprisekey"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRecaptchaEnterpriseKey(name string, args RecaptchaEnterpriseKeyArgs) *RecaptchaEnterpriseKey {
	return &RecaptchaEnterpriseKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RecaptchaEnterpriseKey)(nil)

type RecaptchaEnterpriseKey struct {
	Name  string
	Args  RecaptchaEnterpriseKeyArgs
	state *recaptchaEnterpriseKeyState
}

func (rek *RecaptchaEnterpriseKey) Type() string {
	return "google_recaptcha_enterprise_key"
}

func (rek *RecaptchaEnterpriseKey) LocalName() string {
	return rek.Name
}

func (rek *RecaptchaEnterpriseKey) Configuration() interface{} {
	return rek.Args
}

func (rek *RecaptchaEnterpriseKey) Attributes() recaptchaEnterpriseKeyAttributes {
	return recaptchaEnterpriseKeyAttributes{ref: terra.ReferenceResource(rek)}
}

func (rek *RecaptchaEnterpriseKey) ImportState(av io.Reader) error {
	rek.state = &recaptchaEnterpriseKeyState{}
	if err := json.NewDecoder(av).Decode(rek.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rek.Type(), rek.LocalName(), err)
	}
	return nil
}

func (rek *RecaptchaEnterpriseKey) State() (*recaptchaEnterpriseKeyState, bool) {
	return rek.state, rek.state != nil
}

func (rek *RecaptchaEnterpriseKey) StateMust() *recaptchaEnterpriseKeyState {
	if rek.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rek.Type(), rek.LocalName()))
	}
	return rek.state
}

func (rek *RecaptchaEnterpriseKey) DependOn() terra.Reference {
	return terra.ReferenceResource(rek)
}

type RecaptchaEnterpriseKeyArgs struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// AndroidSettings: optional
	AndroidSettings *recaptchaenterprisekey.AndroidSettings `hcl:"android_settings,block"`
	// IosSettings: optional
	IosSettings *recaptchaenterprisekey.IosSettings `hcl:"ios_settings,block"`
	// TestingOptions: optional
	TestingOptions *recaptchaenterprisekey.TestingOptions `hcl:"testing_options,block"`
	// Timeouts: optional
	Timeouts *recaptchaenterprisekey.Timeouts `hcl:"timeouts,block"`
	// WebSettings: optional
	WebSettings *recaptchaenterprisekey.WebSettings `hcl:"web_settings,block"`
	// DependsOn contains resources that RecaptchaEnterpriseKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type recaptchaEnterpriseKeyAttributes struct {
	ref terra.Reference
}

func (rek recaptchaEnterpriseKeyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(rek.ref.Append("create_time"))
}

func (rek recaptchaEnterpriseKeyAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(rek.ref.Append("display_name"))
}

func (rek recaptchaEnterpriseKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rek.ref.Append("id"))
}

func (rek recaptchaEnterpriseKeyAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rek.ref.Append("labels"))
}

func (rek recaptchaEnterpriseKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rek.ref.Append("name"))
}

func (rek recaptchaEnterpriseKeyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(rek.ref.Append("project"))
}

func (rek recaptchaEnterpriseKeyAttributes) AndroidSettings() terra.ListValue[recaptchaenterprisekey.AndroidSettingsAttributes] {
	return terra.ReferenceList[recaptchaenterprisekey.AndroidSettingsAttributes](rek.ref.Append("android_settings"))
}

func (rek recaptchaEnterpriseKeyAttributes) IosSettings() terra.ListValue[recaptchaenterprisekey.IosSettingsAttributes] {
	return terra.ReferenceList[recaptchaenterprisekey.IosSettingsAttributes](rek.ref.Append("ios_settings"))
}

func (rek recaptchaEnterpriseKeyAttributes) TestingOptions() terra.ListValue[recaptchaenterprisekey.TestingOptionsAttributes] {
	return terra.ReferenceList[recaptchaenterprisekey.TestingOptionsAttributes](rek.ref.Append("testing_options"))
}

func (rek recaptchaEnterpriseKeyAttributes) Timeouts() recaptchaenterprisekey.TimeoutsAttributes {
	return terra.ReferenceSingle[recaptchaenterprisekey.TimeoutsAttributes](rek.ref.Append("timeouts"))
}

func (rek recaptchaEnterpriseKeyAttributes) WebSettings() terra.ListValue[recaptchaenterprisekey.WebSettingsAttributes] {
	return terra.ReferenceList[recaptchaenterprisekey.WebSettingsAttributes](rek.ref.Append("web_settings"))
}

type recaptchaEnterpriseKeyState struct {
	CreateTime      string                                        `json:"create_time"`
	DisplayName     string                                        `json:"display_name"`
	Id              string                                        `json:"id"`
	Labels          map[string]string                             `json:"labels"`
	Name            string                                        `json:"name"`
	Project         string                                        `json:"project"`
	AndroidSettings []recaptchaenterprisekey.AndroidSettingsState `json:"android_settings"`
	IosSettings     []recaptchaenterprisekey.IosSettingsState     `json:"ios_settings"`
	TestingOptions  []recaptchaenterprisekey.TestingOptionsState  `json:"testing_options"`
	Timeouts        *recaptchaenterprisekey.TimeoutsState         `json:"timeouts"`
	WebSettings     []recaptchaenterprisekey.WebSettingsState     `json:"web_settings"`
}
