// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	gkehubmembership "github.com/golingon/terraproviders/google/4.59.0/gkehubmembership"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGkeHubMembership(name string, args GkeHubMembershipArgs) *GkeHubMembership {
	return &GkeHubMembership{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeHubMembership)(nil)

type GkeHubMembership struct {
	Name  string
	Args  GkeHubMembershipArgs
	state *gkeHubMembershipState
}

func (ghm *GkeHubMembership) Type() string {
	return "google_gke_hub_membership"
}

func (ghm *GkeHubMembership) LocalName() string {
	return ghm.Name
}

func (ghm *GkeHubMembership) Configuration() interface{} {
	return ghm.Args
}

func (ghm *GkeHubMembership) Attributes() gkeHubMembershipAttributes {
	return gkeHubMembershipAttributes{ref: terra.ReferenceResource(ghm)}
}

func (ghm *GkeHubMembership) ImportState(av io.Reader) error {
	ghm.state = &gkeHubMembershipState{}
	if err := json.NewDecoder(av).Decode(ghm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ghm.Type(), ghm.LocalName(), err)
	}
	return nil
}

func (ghm *GkeHubMembership) State() (*gkeHubMembershipState, bool) {
	return ghm.state, ghm.state != nil
}

func (ghm *GkeHubMembership) StateMust() *gkeHubMembershipState {
	if ghm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ghm.Type(), ghm.LocalName()))
	}
	return ghm.state
}

func (ghm *GkeHubMembership) DependOn() terra.Reference {
	return terra.ReferenceResource(ghm)
}

type GkeHubMembershipArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// MembershipId: string, required
	MembershipId terra.StringValue `hcl:"membership_id,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Authority: optional
	Authority *gkehubmembership.Authority `hcl:"authority,block"`
	// Endpoint: optional
	Endpoint *gkehubmembership.Endpoint `hcl:"endpoint,block"`
	// Timeouts: optional
	Timeouts *gkehubmembership.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that GkeHubMembership depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type gkeHubMembershipAttributes struct {
	ref terra.Reference
}

func (ghm gkeHubMembershipAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ghm.ref.Append("id"))
}

func (ghm gkeHubMembershipAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ghm.ref.Append("labels"))
}

func (ghm gkeHubMembershipAttributes) MembershipId() terra.StringValue {
	return terra.ReferenceString(ghm.ref.Append("membership_id"))
}

func (ghm gkeHubMembershipAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ghm.ref.Append("name"))
}

func (ghm gkeHubMembershipAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ghm.ref.Append("project"))
}

func (ghm gkeHubMembershipAttributes) Authority() terra.ListValue[gkehubmembership.AuthorityAttributes] {
	return terra.ReferenceList[gkehubmembership.AuthorityAttributes](ghm.ref.Append("authority"))
}

func (ghm gkeHubMembershipAttributes) Endpoint() terra.ListValue[gkehubmembership.EndpointAttributes] {
	return terra.ReferenceList[gkehubmembership.EndpointAttributes](ghm.ref.Append("endpoint"))
}

func (ghm gkeHubMembershipAttributes) Timeouts() gkehubmembership.TimeoutsAttributes {
	return terra.ReferenceSingle[gkehubmembership.TimeoutsAttributes](ghm.ref.Append("timeouts"))
}

type gkeHubMembershipState struct {
	Id           string                            `json:"id"`
	Labels       map[string]string                 `json:"labels"`
	MembershipId string                            `json:"membership_id"`
	Name         string                            `json:"name"`
	Project      string                            `json:"project"`
	Authority    []gkehubmembership.AuthorityState `json:"authority"`
	Endpoint     []gkehubmembership.EndpointState  `json:"endpoint"`
	Timeouts     *gkehubmembership.TimeoutsState   `json:"timeouts"`
}
