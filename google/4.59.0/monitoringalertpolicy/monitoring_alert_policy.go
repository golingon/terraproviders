// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package monitoringalertpolicy

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CreationRecord struct{}

type AlertStrategy struct {
	// AutoClose: string, optional
	AutoClose terra.StringValue `hcl:"auto_close,attr"`
	// NotificationRateLimit: optional
	NotificationRateLimit *NotificationRateLimit `hcl:"notification_rate_limit,block"`
}

type NotificationRateLimit struct {
	// Period: string, optional
	Period terra.StringValue `hcl:"period,attr"`
}

type Conditions struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// ConditionAbsent: optional
	ConditionAbsent *ConditionAbsent `hcl:"condition_absent,block"`
	// ConditionMatchedLog: optional
	ConditionMatchedLog *ConditionMatchedLog `hcl:"condition_matched_log,block"`
	// ConditionMonitoringQueryLanguage: optional
	ConditionMonitoringQueryLanguage *ConditionMonitoringQueryLanguage `hcl:"condition_monitoring_query_language,block"`
	// ConditionThreshold: optional
	ConditionThreshold *ConditionThreshold `hcl:"condition_threshold,block"`
}

type ConditionAbsent struct {
	// Duration: string, required
	Duration terra.StringValue `hcl:"duration,attr" validate:"required"`
	// Filter: string, optional
	Filter terra.StringValue `hcl:"filter,attr"`
	// ConditionAbsentAggregations: min=0
	Aggregations []ConditionAbsentAggregations `hcl:"aggregations,block" validate:"min=0"`
	// ConditionAbsentTrigger: optional
	Trigger *ConditionAbsentTrigger `hcl:"trigger,block"`
}

type ConditionAbsentAggregations struct {
	// AlignmentPeriod: string, optional
	AlignmentPeriod terra.StringValue `hcl:"alignment_period,attr"`
	// CrossSeriesReducer: string, optional
	CrossSeriesReducer terra.StringValue `hcl:"cross_series_reducer,attr"`
	// GroupByFields: list of string, optional
	GroupByFields terra.ListValue[terra.StringValue] `hcl:"group_by_fields,attr"`
	// PerSeriesAligner: string, optional
	PerSeriesAligner terra.StringValue `hcl:"per_series_aligner,attr"`
}

type ConditionAbsentTrigger struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Percent: number, optional
	Percent terra.NumberValue `hcl:"percent,attr"`
}

type ConditionMatchedLog struct {
	// Filter: string, required
	Filter terra.StringValue `hcl:"filter,attr" validate:"required"`
	// LabelExtractors: map of string, optional
	LabelExtractors terra.MapValue[terra.StringValue] `hcl:"label_extractors,attr"`
}

type ConditionMonitoringQueryLanguage struct {
	// Duration: string, required
	Duration terra.StringValue `hcl:"duration,attr" validate:"required"`
	// EvaluationMissingData: string, optional
	EvaluationMissingData terra.StringValue `hcl:"evaluation_missing_data,attr"`
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// ConditionMonitoringQueryLanguageTrigger: optional
	Trigger *ConditionMonitoringQueryLanguageTrigger `hcl:"trigger,block"`
}

type ConditionMonitoringQueryLanguageTrigger struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Percent: number, optional
	Percent terra.NumberValue `hcl:"percent,attr"`
}

type ConditionThreshold struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// DenominatorFilter: string, optional
	DenominatorFilter terra.StringValue `hcl:"denominator_filter,attr"`
	// Duration: string, required
	Duration terra.StringValue `hcl:"duration,attr" validate:"required"`
	// EvaluationMissingData: string, optional
	EvaluationMissingData terra.StringValue `hcl:"evaluation_missing_data,attr"`
	// Filter: string, optional
	Filter terra.StringValue `hcl:"filter,attr"`
	// ThresholdValue: number, optional
	ThresholdValue terra.NumberValue `hcl:"threshold_value,attr"`
	// ConditionThresholdAggregations: min=0
	Aggregations []ConditionThresholdAggregations `hcl:"aggregations,block" validate:"min=0"`
	// DenominatorAggregations: min=0
	DenominatorAggregations []DenominatorAggregations `hcl:"denominator_aggregations,block" validate:"min=0"`
	// ConditionThresholdTrigger: optional
	Trigger *ConditionThresholdTrigger `hcl:"trigger,block"`
}

type ConditionThresholdAggregations struct {
	// AlignmentPeriod: string, optional
	AlignmentPeriod terra.StringValue `hcl:"alignment_period,attr"`
	// CrossSeriesReducer: string, optional
	CrossSeriesReducer terra.StringValue `hcl:"cross_series_reducer,attr"`
	// GroupByFields: list of string, optional
	GroupByFields terra.ListValue[terra.StringValue] `hcl:"group_by_fields,attr"`
	// PerSeriesAligner: string, optional
	PerSeriesAligner terra.StringValue `hcl:"per_series_aligner,attr"`
}

type DenominatorAggregations struct {
	// AlignmentPeriod: string, optional
	AlignmentPeriod terra.StringValue `hcl:"alignment_period,attr"`
	// CrossSeriesReducer: string, optional
	CrossSeriesReducer terra.StringValue `hcl:"cross_series_reducer,attr"`
	// GroupByFields: list of string, optional
	GroupByFields terra.ListValue[terra.StringValue] `hcl:"group_by_fields,attr"`
	// PerSeriesAligner: string, optional
	PerSeriesAligner terra.StringValue `hcl:"per_series_aligner,attr"`
}

type ConditionThresholdTrigger struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Percent: number, optional
	Percent terra.NumberValue `hcl:"percent,attr"`
}

type Documentation struct {
	// Content: string, optional
	Content terra.StringValue `hcl:"content,attr"`
	// MimeType: string, optional
	MimeType terra.StringValue `hcl:"mime_type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CreationRecordAttributes struct {
	ref terra.Reference
}

func (cr CreationRecordAttributes) InternalRef() terra.Reference {
	return cr.ref
}

func (cr CreationRecordAttributes) InternalWithRef(ref terra.Reference) CreationRecordAttributes {
	return CreationRecordAttributes{ref: ref}
}

func (cr CreationRecordAttributes) InternalTokens() hclwrite.Tokens {
	return cr.ref.InternalTokens()
}

func (cr CreationRecordAttributes) MutateTime() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("mutate_time"))
}

func (cr CreationRecordAttributes) MutatedBy() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("mutated_by"))
}

type AlertStrategyAttributes struct {
	ref terra.Reference
}

func (as AlertStrategyAttributes) InternalRef() terra.Reference {
	return as.ref
}

func (as AlertStrategyAttributes) InternalWithRef(ref terra.Reference) AlertStrategyAttributes {
	return AlertStrategyAttributes{ref: ref}
}

func (as AlertStrategyAttributes) InternalTokens() hclwrite.Tokens {
	return as.ref.InternalTokens()
}

func (as AlertStrategyAttributes) AutoClose() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("auto_close"))
}

func (as AlertStrategyAttributes) NotificationRateLimit() terra.ListValue[NotificationRateLimitAttributes] {
	return terra.ReferenceList[NotificationRateLimitAttributes](as.ref.Append("notification_rate_limit"))
}

type NotificationRateLimitAttributes struct {
	ref terra.Reference
}

func (nrl NotificationRateLimitAttributes) InternalRef() terra.Reference {
	return nrl.ref
}

func (nrl NotificationRateLimitAttributes) InternalWithRef(ref terra.Reference) NotificationRateLimitAttributes {
	return NotificationRateLimitAttributes{ref: ref}
}

func (nrl NotificationRateLimitAttributes) InternalTokens() hclwrite.Tokens {
	return nrl.ref.InternalTokens()
}

func (nrl NotificationRateLimitAttributes) Period() terra.StringValue {
	return terra.ReferenceString(nrl.ref.Append("period"))
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("display_name"))
}

func (c ConditionsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("name"))
}

func (c ConditionsAttributes) ConditionAbsent() terra.ListValue[ConditionAbsentAttributes] {
	return terra.ReferenceList[ConditionAbsentAttributes](c.ref.Append("condition_absent"))
}

func (c ConditionsAttributes) ConditionMatchedLog() terra.ListValue[ConditionMatchedLogAttributes] {
	return terra.ReferenceList[ConditionMatchedLogAttributes](c.ref.Append("condition_matched_log"))
}

func (c ConditionsAttributes) ConditionMonitoringQueryLanguage() terra.ListValue[ConditionMonitoringQueryLanguageAttributes] {
	return terra.ReferenceList[ConditionMonitoringQueryLanguageAttributes](c.ref.Append("condition_monitoring_query_language"))
}

func (c ConditionsAttributes) ConditionThreshold() terra.ListValue[ConditionThresholdAttributes] {
	return terra.ReferenceList[ConditionThresholdAttributes](c.ref.Append("condition_threshold"))
}

type ConditionAbsentAttributes struct {
	ref terra.Reference
}

func (ca ConditionAbsentAttributes) InternalRef() terra.Reference {
	return ca.ref
}

func (ca ConditionAbsentAttributes) InternalWithRef(ref terra.Reference) ConditionAbsentAttributes {
	return ConditionAbsentAttributes{ref: ref}
}

func (ca ConditionAbsentAttributes) InternalTokens() hclwrite.Tokens {
	return ca.ref.InternalTokens()
}

func (ca ConditionAbsentAttributes) Duration() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("duration"))
}

func (ca ConditionAbsentAttributes) Filter() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("filter"))
}

func (ca ConditionAbsentAttributes) Aggregations() terra.ListValue[ConditionAbsentAggregationsAttributes] {
	return terra.ReferenceList[ConditionAbsentAggregationsAttributes](ca.ref.Append("aggregations"))
}

func (ca ConditionAbsentAttributes) Trigger() terra.ListValue[ConditionAbsentTriggerAttributes] {
	return terra.ReferenceList[ConditionAbsentTriggerAttributes](ca.ref.Append("trigger"))
}

type ConditionAbsentAggregationsAttributes struct {
	ref terra.Reference
}

func (a ConditionAbsentAggregationsAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a ConditionAbsentAggregationsAttributes) InternalWithRef(ref terra.Reference) ConditionAbsentAggregationsAttributes {
	return ConditionAbsentAggregationsAttributes{ref: ref}
}

func (a ConditionAbsentAggregationsAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a ConditionAbsentAggregationsAttributes) AlignmentPeriod() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("alignment_period"))
}

func (a ConditionAbsentAggregationsAttributes) CrossSeriesReducer() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("cross_series_reducer"))
}

func (a ConditionAbsentAggregationsAttributes) GroupByFields() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](a.ref.Append("group_by_fields"))
}

func (a ConditionAbsentAggregationsAttributes) PerSeriesAligner() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("per_series_aligner"))
}

type ConditionAbsentTriggerAttributes struct {
	ref terra.Reference
}

func (t ConditionAbsentTriggerAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t ConditionAbsentTriggerAttributes) InternalWithRef(ref terra.Reference) ConditionAbsentTriggerAttributes {
	return ConditionAbsentTriggerAttributes{ref: ref}
}

func (t ConditionAbsentTriggerAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t ConditionAbsentTriggerAttributes) Count() terra.NumberValue {
	return terra.ReferenceNumber(t.ref.Append("count"))
}

func (t ConditionAbsentTriggerAttributes) Percent() terra.NumberValue {
	return terra.ReferenceNumber(t.ref.Append("percent"))
}

type ConditionMatchedLogAttributes struct {
	ref terra.Reference
}

func (cml ConditionMatchedLogAttributes) InternalRef() terra.Reference {
	return cml.ref
}

func (cml ConditionMatchedLogAttributes) InternalWithRef(ref terra.Reference) ConditionMatchedLogAttributes {
	return ConditionMatchedLogAttributes{ref: ref}
}

func (cml ConditionMatchedLogAttributes) InternalTokens() hclwrite.Tokens {
	return cml.ref.InternalTokens()
}

func (cml ConditionMatchedLogAttributes) Filter() terra.StringValue {
	return terra.ReferenceString(cml.ref.Append("filter"))
}

func (cml ConditionMatchedLogAttributes) LabelExtractors() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cml.ref.Append("label_extractors"))
}

type ConditionMonitoringQueryLanguageAttributes struct {
	ref terra.Reference
}

func (cmql ConditionMonitoringQueryLanguageAttributes) InternalRef() terra.Reference {
	return cmql.ref
}

func (cmql ConditionMonitoringQueryLanguageAttributes) InternalWithRef(ref terra.Reference) ConditionMonitoringQueryLanguageAttributes {
	return ConditionMonitoringQueryLanguageAttributes{ref: ref}
}

func (cmql ConditionMonitoringQueryLanguageAttributes) InternalTokens() hclwrite.Tokens {
	return cmql.ref.InternalTokens()
}

func (cmql ConditionMonitoringQueryLanguageAttributes) Duration() terra.StringValue {
	return terra.ReferenceString(cmql.ref.Append("duration"))
}

func (cmql ConditionMonitoringQueryLanguageAttributes) EvaluationMissingData() terra.StringValue {
	return terra.ReferenceString(cmql.ref.Append("evaluation_missing_data"))
}

func (cmql ConditionMonitoringQueryLanguageAttributes) Query() terra.StringValue {
	return terra.ReferenceString(cmql.ref.Append("query"))
}

func (cmql ConditionMonitoringQueryLanguageAttributes) Trigger() terra.ListValue[ConditionMonitoringQueryLanguageTriggerAttributes] {
	return terra.ReferenceList[ConditionMonitoringQueryLanguageTriggerAttributes](cmql.ref.Append("trigger"))
}

type ConditionMonitoringQueryLanguageTriggerAttributes struct {
	ref terra.Reference
}

func (t ConditionMonitoringQueryLanguageTriggerAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t ConditionMonitoringQueryLanguageTriggerAttributes) InternalWithRef(ref terra.Reference) ConditionMonitoringQueryLanguageTriggerAttributes {
	return ConditionMonitoringQueryLanguageTriggerAttributes{ref: ref}
}

func (t ConditionMonitoringQueryLanguageTriggerAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t ConditionMonitoringQueryLanguageTriggerAttributes) Count() terra.NumberValue {
	return terra.ReferenceNumber(t.ref.Append("count"))
}

func (t ConditionMonitoringQueryLanguageTriggerAttributes) Percent() terra.NumberValue {
	return terra.ReferenceNumber(t.ref.Append("percent"))
}

type ConditionThresholdAttributes struct {
	ref terra.Reference
}

func (ct ConditionThresholdAttributes) InternalRef() terra.Reference {
	return ct.ref
}

func (ct ConditionThresholdAttributes) InternalWithRef(ref terra.Reference) ConditionThresholdAttributes {
	return ConditionThresholdAttributes{ref: ref}
}

func (ct ConditionThresholdAttributes) InternalTokens() hclwrite.Tokens {
	return ct.ref.InternalTokens()
}

func (ct ConditionThresholdAttributes) Comparison() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("comparison"))
}

func (ct ConditionThresholdAttributes) DenominatorFilter() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("denominator_filter"))
}

func (ct ConditionThresholdAttributes) Duration() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("duration"))
}

func (ct ConditionThresholdAttributes) EvaluationMissingData() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("evaluation_missing_data"))
}

func (ct ConditionThresholdAttributes) Filter() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("filter"))
}

func (ct ConditionThresholdAttributes) ThresholdValue() terra.NumberValue {
	return terra.ReferenceNumber(ct.ref.Append("threshold_value"))
}

func (ct ConditionThresholdAttributes) Aggregations() terra.ListValue[ConditionThresholdAggregationsAttributes] {
	return terra.ReferenceList[ConditionThresholdAggregationsAttributes](ct.ref.Append("aggregations"))
}

func (ct ConditionThresholdAttributes) DenominatorAggregations() terra.ListValue[DenominatorAggregationsAttributes] {
	return terra.ReferenceList[DenominatorAggregationsAttributes](ct.ref.Append("denominator_aggregations"))
}

func (ct ConditionThresholdAttributes) Trigger() terra.ListValue[ConditionThresholdTriggerAttributes] {
	return terra.ReferenceList[ConditionThresholdTriggerAttributes](ct.ref.Append("trigger"))
}

type ConditionThresholdAggregationsAttributes struct {
	ref terra.Reference
}

func (a ConditionThresholdAggregationsAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a ConditionThresholdAggregationsAttributes) InternalWithRef(ref terra.Reference) ConditionThresholdAggregationsAttributes {
	return ConditionThresholdAggregationsAttributes{ref: ref}
}

func (a ConditionThresholdAggregationsAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a ConditionThresholdAggregationsAttributes) AlignmentPeriod() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("alignment_period"))
}

func (a ConditionThresholdAggregationsAttributes) CrossSeriesReducer() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("cross_series_reducer"))
}

func (a ConditionThresholdAggregationsAttributes) GroupByFields() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](a.ref.Append("group_by_fields"))
}

func (a ConditionThresholdAggregationsAttributes) PerSeriesAligner() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("per_series_aligner"))
}

type DenominatorAggregationsAttributes struct {
	ref terra.Reference
}

func (da DenominatorAggregationsAttributes) InternalRef() terra.Reference {
	return da.ref
}

func (da DenominatorAggregationsAttributes) InternalWithRef(ref terra.Reference) DenominatorAggregationsAttributes {
	return DenominatorAggregationsAttributes{ref: ref}
}

func (da DenominatorAggregationsAttributes) InternalTokens() hclwrite.Tokens {
	return da.ref.InternalTokens()
}

func (da DenominatorAggregationsAttributes) AlignmentPeriod() terra.StringValue {
	return terra.ReferenceString(da.ref.Append("alignment_period"))
}

func (da DenominatorAggregationsAttributes) CrossSeriesReducer() terra.StringValue {
	return terra.ReferenceString(da.ref.Append("cross_series_reducer"))
}

func (da DenominatorAggregationsAttributes) GroupByFields() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](da.ref.Append("group_by_fields"))
}

func (da DenominatorAggregationsAttributes) PerSeriesAligner() terra.StringValue {
	return terra.ReferenceString(da.ref.Append("per_series_aligner"))
}

type ConditionThresholdTriggerAttributes struct {
	ref terra.Reference
}

func (t ConditionThresholdTriggerAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t ConditionThresholdTriggerAttributes) InternalWithRef(ref terra.Reference) ConditionThresholdTriggerAttributes {
	return ConditionThresholdTriggerAttributes{ref: ref}
}

func (t ConditionThresholdTriggerAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t ConditionThresholdTriggerAttributes) Count() terra.NumberValue {
	return terra.ReferenceNumber(t.ref.Append("count"))
}

func (t ConditionThresholdTriggerAttributes) Percent() terra.NumberValue {
	return terra.ReferenceNumber(t.ref.Append("percent"))
}

type DocumentationAttributes struct {
	ref terra.Reference
}

func (d DocumentationAttributes) InternalRef() terra.Reference {
	return d.ref
}

func (d DocumentationAttributes) InternalWithRef(ref terra.Reference) DocumentationAttributes {
	return DocumentationAttributes{ref: ref}
}

func (d DocumentationAttributes) InternalTokens() hclwrite.Tokens {
	return d.ref.InternalTokens()
}

func (d DocumentationAttributes) Content() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("content"))
}

func (d DocumentationAttributes) MimeType() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("mime_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type CreationRecordState struct {
	MutateTime string `json:"mutate_time"`
	MutatedBy  string `json:"mutated_by"`
}

type AlertStrategyState struct {
	AutoClose             string                       `json:"auto_close"`
	NotificationRateLimit []NotificationRateLimitState `json:"notification_rate_limit"`
}

type NotificationRateLimitState struct {
	Period string `json:"period"`
}

type ConditionsState struct {
	DisplayName                      string                                  `json:"display_name"`
	Name                             string                                  `json:"name"`
	ConditionAbsent                  []ConditionAbsentState                  `json:"condition_absent"`
	ConditionMatchedLog              []ConditionMatchedLogState              `json:"condition_matched_log"`
	ConditionMonitoringQueryLanguage []ConditionMonitoringQueryLanguageState `json:"condition_monitoring_query_language"`
	ConditionThreshold               []ConditionThresholdState               `json:"condition_threshold"`
}

type ConditionAbsentState struct {
	Duration     string                             `json:"duration"`
	Filter       string                             `json:"filter"`
	Aggregations []ConditionAbsentAggregationsState `json:"aggregations"`
	Trigger      []ConditionAbsentTriggerState      `json:"trigger"`
}

type ConditionAbsentAggregationsState struct {
	AlignmentPeriod    string   `json:"alignment_period"`
	CrossSeriesReducer string   `json:"cross_series_reducer"`
	GroupByFields      []string `json:"group_by_fields"`
	PerSeriesAligner   string   `json:"per_series_aligner"`
}

type ConditionAbsentTriggerState struct {
	Count   float64 `json:"count"`
	Percent float64 `json:"percent"`
}

type ConditionMatchedLogState struct {
	Filter          string            `json:"filter"`
	LabelExtractors map[string]string `json:"label_extractors"`
}

type ConditionMonitoringQueryLanguageState struct {
	Duration              string                                         `json:"duration"`
	EvaluationMissingData string                                         `json:"evaluation_missing_data"`
	Query                 string                                         `json:"query"`
	Trigger               []ConditionMonitoringQueryLanguageTriggerState `json:"trigger"`
}

type ConditionMonitoringQueryLanguageTriggerState struct {
	Count   float64 `json:"count"`
	Percent float64 `json:"percent"`
}

type ConditionThresholdState struct {
	Comparison              string                                `json:"comparison"`
	DenominatorFilter       string                                `json:"denominator_filter"`
	Duration                string                                `json:"duration"`
	EvaluationMissingData   string                                `json:"evaluation_missing_data"`
	Filter                  string                                `json:"filter"`
	ThresholdValue          float64                               `json:"threshold_value"`
	Aggregations            []ConditionThresholdAggregationsState `json:"aggregations"`
	DenominatorAggregations []DenominatorAggregationsState        `json:"denominator_aggregations"`
	Trigger                 []ConditionThresholdTriggerState      `json:"trigger"`
}

type ConditionThresholdAggregationsState struct {
	AlignmentPeriod    string   `json:"alignment_period"`
	CrossSeriesReducer string   `json:"cross_series_reducer"`
	GroupByFields      []string `json:"group_by_fields"`
	PerSeriesAligner   string   `json:"per_series_aligner"`
}

type DenominatorAggregationsState struct {
	AlignmentPeriod    string   `json:"alignment_period"`
	CrossSeriesReducer string   `json:"cross_series_reducer"`
	GroupByFields      []string `json:"group_by_fields"`
	PerSeriesAligner   string   `json:"per_series_aligner"`
}

type ConditionThresholdTriggerState struct {
	Count   float64 `json:"count"`
	Percent float64 `json:"percent"`
}

type DocumentationState struct {
	Content  string `json:"content"`
	MimeType string `json:"mime_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
