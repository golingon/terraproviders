// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package accesscontextmanageraccesslevelcondition

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type DevicePolicy struct {
	// AllowedDeviceManagementLevels: list of string, optional
	AllowedDeviceManagementLevels terra.ListValue[terra.StringValue] `hcl:"allowed_device_management_levels,attr"`
	// AllowedEncryptionStatuses: list of string, optional
	AllowedEncryptionStatuses terra.ListValue[terra.StringValue] `hcl:"allowed_encryption_statuses,attr"`
	// RequireAdminApproval: bool, optional
	RequireAdminApproval terra.BoolValue `hcl:"require_admin_approval,attr"`
	// RequireCorpOwned: bool, optional
	RequireCorpOwned terra.BoolValue `hcl:"require_corp_owned,attr"`
	// RequireScreenLock: bool, optional
	RequireScreenLock terra.BoolValue `hcl:"require_screen_lock,attr"`
	// OsConstraints: min=0
	OsConstraints []OsConstraints `hcl:"os_constraints,block" validate:"min=0"`
}

type OsConstraints struct {
	// MinimumVersion: string, optional
	MinimumVersion terra.StringValue `hcl:"minimum_version,attr"`
	// OsType: string, required
	OsType terra.StringValue `hcl:"os_type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type DevicePolicyAttributes struct {
	ref terra.Reference
}

func (dp DevicePolicyAttributes) InternalRef() (terra.Reference, error) {
	return dp.ref, nil
}

func (dp DevicePolicyAttributes) InternalWithRef(ref terra.Reference) DevicePolicyAttributes {
	return DevicePolicyAttributes{ref: ref}
}

func (dp DevicePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dp.ref.InternalTokens()
}

func (dp DevicePolicyAttributes) AllowedDeviceManagementLevels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dp.ref.Append("allowed_device_management_levels"))
}

func (dp DevicePolicyAttributes) AllowedEncryptionStatuses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dp.ref.Append("allowed_encryption_statuses"))
}

func (dp DevicePolicyAttributes) RequireAdminApproval() terra.BoolValue {
	return terra.ReferenceAsBool(dp.ref.Append("require_admin_approval"))
}

func (dp DevicePolicyAttributes) RequireCorpOwned() terra.BoolValue {
	return terra.ReferenceAsBool(dp.ref.Append("require_corp_owned"))
}

func (dp DevicePolicyAttributes) RequireScreenLock() terra.BoolValue {
	return terra.ReferenceAsBool(dp.ref.Append("require_screen_lock"))
}

func (dp DevicePolicyAttributes) OsConstraints() terra.ListValue[OsConstraintsAttributes] {
	return terra.ReferenceAsList[OsConstraintsAttributes](dp.ref.Append("os_constraints"))
}

type OsConstraintsAttributes struct {
	ref terra.Reference
}

func (oc OsConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc OsConstraintsAttributes) InternalWithRef(ref terra.Reference) OsConstraintsAttributes {
	return OsConstraintsAttributes{ref: ref}
}

func (oc OsConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc OsConstraintsAttributes) MinimumVersion() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("minimum_version"))
}

func (oc OsConstraintsAttributes) OsType() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("os_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type DevicePolicyState struct {
	AllowedDeviceManagementLevels []string             `json:"allowed_device_management_levels"`
	AllowedEncryptionStatuses     []string             `json:"allowed_encryption_statuses"`
	RequireAdminApproval          bool                 `json:"require_admin_approval"`
	RequireCorpOwned              bool                 `json:"require_corp_owned"`
	RequireScreenLock             bool                 `json:"require_screen_lock"`
	OsConstraints                 []OsConstraintsState `json:"os_constraints"`
}

type OsConstraintsState struct {
	MinimumVersion string `json:"minimum_version"`
	OsType         string `json:"os_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
