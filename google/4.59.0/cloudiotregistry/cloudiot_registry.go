// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package cloudiotregistry

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Credentials struct {
	// PublicKeyCertificate: map of string, required
	PublicKeyCertificate terra.MapValue[terra.StringValue] `hcl:"public_key_certificate,attr" validate:"required"`
}

type EventNotificationConfigs struct {
	// PubsubTopicName: string, required
	PubsubTopicName terra.StringValue `hcl:"pubsub_topic_name,attr" validate:"required"`
	// SubfolderMatches: string, optional
	SubfolderMatches terra.StringValue `hcl:"subfolder_matches,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CredentialsAttributes struct {
	ref terra.Reference
}

func (c CredentialsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CredentialsAttributes) InternalWithRef(ref terra.Reference) CredentialsAttributes {
	return CredentialsAttributes{ref: ref}
}

func (c CredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CredentialsAttributes) PublicKeyCertificate() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("public_key_certificate"))
}

type EventNotificationConfigsAttributes struct {
	ref terra.Reference
}

func (enc EventNotificationConfigsAttributes) InternalRef() (terra.Reference, error) {
	return enc.ref, nil
}

func (enc EventNotificationConfigsAttributes) InternalWithRef(ref terra.Reference) EventNotificationConfigsAttributes {
	return EventNotificationConfigsAttributes{ref: ref}
}

func (enc EventNotificationConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return enc.ref.InternalTokens()
}

func (enc EventNotificationConfigsAttributes) PubsubTopicName() terra.StringValue {
	return terra.ReferenceAsString(enc.ref.Append("pubsub_topic_name"))
}

func (enc EventNotificationConfigsAttributes) SubfolderMatches() terra.StringValue {
	return terra.ReferenceAsString(enc.ref.Append("subfolder_matches"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CredentialsState struct {
	PublicKeyCertificate map[string]string `json:"public_key_certificate"`
}

type EventNotificationConfigsState struct {
	PubsubTopicName  string `json:"pubsub_topic_name"`
	SubfolderMatches string `json:"subfolder_matches"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
