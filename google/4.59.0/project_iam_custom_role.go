// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewProjectIamCustomRole(name string, args ProjectIamCustomRoleArgs) *ProjectIamCustomRole {
	return &ProjectIamCustomRole{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ProjectIamCustomRole)(nil)

type ProjectIamCustomRole struct {
	Name  string
	Args  ProjectIamCustomRoleArgs
	state *projectIamCustomRoleState
}

func (picr *ProjectIamCustomRole) Type() string {
	return "google_project_iam_custom_role"
}

func (picr *ProjectIamCustomRole) LocalName() string {
	return picr.Name
}

func (picr *ProjectIamCustomRole) Configuration() interface{} {
	return picr.Args
}

func (picr *ProjectIamCustomRole) Attributes() projectIamCustomRoleAttributes {
	return projectIamCustomRoleAttributes{ref: terra.ReferenceResource(picr)}
}

func (picr *ProjectIamCustomRole) ImportState(av io.Reader) error {
	picr.state = &projectIamCustomRoleState{}
	if err := json.NewDecoder(av).Decode(picr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", picr.Type(), picr.LocalName(), err)
	}
	return nil
}

func (picr *ProjectIamCustomRole) State() (*projectIamCustomRoleState, bool) {
	return picr.state, picr.state != nil
}

func (picr *ProjectIamCustomRole) StateMust() *projectIamCustomRoleState {
	if picr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", picr.Type(), picr.LocalName()))
	}
	return picr.state
}

func (picr *ProjectIamCustomRole) DependOn() terra.Reference {
	return terra.ReferenceResource(picr)
}

type ProjectIamCustomRoleArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Permissions: set of string, required
	Permissions terra.SetValue[terra.StringValue] `hcl:"permissions,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RoleId: string, required
	RoleId terra.StringValue `hcl:"role_id,attr" validate:"required"`
	// Stage: string, optional
	Stage terra.StringValue `hcl:"stage,attr"`
	// Title: string, required
	Title terra.StringValue `hcl:"title,attr" validate:"required"`
	// DependsOn contains resources that ProjectIamCustomRole depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type projectIamCustomRoleAttributes struct {
	ref terra.Reference
}

func (picr projectIamCustomRoleAttributes) Deleted() terra.BoolValue {
	return terra.ReferenceBool(picr.ref.Append("deleted"))
}

func (picr projectIamCustomRoleAttributes) Description() terra.StringValue {
	return terra.ReferenceString(picr.ref.Append("description"))
}

func (picr projectIamCustomRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(picr.ref.Append("id"))
}

func (picr projectIamCustomRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(picr.ref.Append("name"))
}

func (picr projectIamCustomRoleAttributes) Permissions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](picr.ref.Append("permissions"))
}

func (picr projectIamCustomRoleAttributes) Project() terra.StringValue {
	return terra.ReferenceString(picr.ref.Append("project"))
}

func (picr projectIamCustomRoleAttributes) RoleId() terra.StringValue {
	return terra.ReferenceString(picr.ref.Append("role_id"))
}

func (picr projectIamCustomRoleAttributes) Stage() terra.StringValue {
	return terra.ReferenceString(picr.ref.Append("stage"))
}

func (picr projectIamCustomRoleAttributes) Title() terra.StringValue {
	return terra.ReferenceString(picr.ref.Append("title"))
}

type projectIamCustomRoleState struct {
	Deleted     bool     `json:"deleted"`
	Description string   `json:"description"`
	Id          string   `json:"id"`
	Name        string   `json:"name"`
	Permissions []string `json:"permissions"`
	Project     string   `json:"project"`
	RoleId      string   `json:"role_id"`
	Stage       string   `json:"stage"`
	Title       string   `json:"title"`
}
