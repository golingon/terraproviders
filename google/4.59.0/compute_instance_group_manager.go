// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeinstancegroupmanager "github.com/golingon/terraproviders/google/4.59.0/computeinstancegroupmanager"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeInstanceGroupManager(name string, args ComputeInstanceGroupManagerArgs) *ComputeInstanceGroupManager {
	return &ComputeInstanceGroupManager{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeInstanceGroupManager)(nil)

type ComputeInstanceGroupManager struct {
	Name  string
	Args  ComputeInstanceGroupManagerArgs
	state *computeInstanceGroupManagerState
}

func (cigm *ComputeInstanceGroupManager) Type() string {
	return "google_compute_instance_group_manager"
}

func (cigm *ComputeInstanceGroupManager) LocalName() string {
	return cigm.Name
}

func (cigm *ComputeInstanceGroupManager) Configuration() interface{} {
	return cigm.Args
}

func (cigm *ComputeInstanceGroupManager) Attributes() computeInstanceGroupManagerAttributes {
	return computeInstanceGroupManagerAttributes{ref: terra.ReferenceResource(cigm)}
}

func (cigm *ComputeInstanceGroupManager) ImportState(av io.Reader) error {
	cigm.state = &computeInstanceGroupManagerState{}
	if err := json.NewDecoder(av).Decode(cigm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cigm.Type(), cigm.LocalName(), err)
	}
	return nil
}

func (cigm *ComputeInstanceGroupManager) State() (*computeInstanceGroupManagerState, bool) {
	return cigm.state, cigm.state != nil
}

func (cigm *ComputeInstanceGroupManager) StateMust() *computeInstanceGroupManagerState {
	if cigm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cigm.Type(), cigm.LocalName()))
	}
	return cigm.state
}

func (cigm *ComputeInstanceGroupManager) DependOn() terra.Reference {
	return terra.ReferenceResource(cigm)
}

type ComputeInstanceGroupManagerArgs struct {
	// BaseInstanceName: string, required
	BaseInstanceName terra.StringValue `hcl:"base_instance_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListManagedInstancesResults: string, optional
	ListManagedInstancesResults terra.StringValue `hcl:"list_managed_instances_results,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TargetPools: set of string, optional
	TargetPools terra.SetValue[terra.StringValue] `hcl:"target_pools,attr"`
	// TargetSize: number, optional
	TargetSize terra.NumberValue `hcl:"target_size,attr"`
	// WaitForInstances: bool, optional
	WaitForInstances terra.BoolValue `hcl:"wait_for_instances,attr"`
	// WaitForInstancesStatus: string, optional
	WaitForInstancesStatus terra.StringValue `hcl:"wait_for_instances_status,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Status: min=0
	Status []computeinstancegroupmanager.Status `hcl:"status,block" validate:"min=0"`
	// AutoHealingPolicies: optional
	AutoHealingPolicies *computeinstancegroupmanager.AutoHealingPolicies `hcl:"auto_healing_policies,block"`
	// NamedPort: min=0
	NamedPort []computeinstancegroupmanager.NamedPort `hcl:"named_port,block" validate:"min=0"`
	// StatefulDisk: min=0
	StatefulDisk []computeinstancegroupmanager.StatefulDisk `hcl:"stateful_disk,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *computeinstancegroupmanager.Timeouts `hcl:"timeouts,block"`
	// UpdatePolicy: optional
	UpdatePolicy *computeinstancegroupmanager.UpdatePolicy `hcl:"update_policy,block"`
	// Version: min=1
	Version []computeinstancegroupmanager.Version `hcl:"version,block" validate:"min=1"`
	// DependsOn contains resources that ComputeInstanceGroupManager depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeInstanceGroupManagerAttributes struct {
	ref terra.Reference
}

func (cigm computeInstanceGroupManagerAttributes) BaseInstanceName() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("base_instance_name"))
}

func (cigm computeInstanceGroupManagerAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("description"))
}

func (cigm computeInstanceGroupManagerAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("fingerprint"))
}

func (cigm computeInstanceGroupManagerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("id"))
}

func (cigm computeInstanceGroupManagerAttributes) InstanceGroup() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("instance_group"))
}

func (cigm computeInstanceGroupManagerAttributes) ListManagedInstancesResults() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("list_managed_instances_results"))
}

func (cigm computeInstanceGroupManagerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("name"))
}

func (cigm computeInstanceGroupManagerAttributes) Operation() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("operation"))
}

func (cigm computeInstanceGroupManagerAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("project"))
}

func (cigm computeInstanceGroupManagerAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("self_link"))
}

func (cigm computeInstanceGroupManagerAttributes) TargetPools() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cigm.ref.Append("target_pools"))
}

func (cigm computeInstanceGroupManagerAttributes) TargetSize() terra.NumberValue {
	return terra.ReferenceNumber(cigm.ref.Append("target_size"))
}

func (cigm computeInstanceGroupManagerAttributes) WaitForInstances() terra.BoolValue {
	return terra.ReferenceBool(cigm.ref.Append("wait_for_instances"))
}

func (cigm computeInstanceGroupManagerAttributes) WaitForInstancesStatus() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("wait_for_instances_status"))
}

func (cigm computeInstanceGroupManagerAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("zone"))
}

func (cigm computeInstanceGroupManagerAttributes) Status() terra.ListValue[computeinstancegroupmanager.StatusAttributes] {
	return terra.ReferenceList[computeinstancegroupmanager.StatusAttributes](cigm.ref.Append("status"))
}

func (cigm computeInstanceGroupManagerAttributes) AutoHealingPolicies() terra.ListValue[computeinstancegroupmanager.AutoHealingPoliciesAttributes] {
	return terra.ReferenceList[computeinstancegroupmanager.AutoHealingPoliciesAttributes](cigm.ref.Append("auto_healing_policies"))
}

func (cigm computeInstanceGroupManagerAttributes) NamedPort() terra.SetValue[computeinstancegroupmanager.NamedPortAttributes] {
	return terra.ReferenceSet[computeinstancegroupmanager.NamedPortAttributes](cigm.ref.Append("named_port"))
}

func (cigm computeInstanceGroupManagerAttributes) StatefulDisk() terra.SetValue[computeinstancegroupmanager.StatefulDiskAttributes] {
	return terra.ReferenceSet[computeinstancegroupmanager.StatefulDiskAttributes](cigm.ref.Append("stateful_disk"))
}

func (cigm computeInstanceGroupManagerAttributes) Timeouts() computeinstancegroupmanager.TimeoutsAttributes {
	return terra.ReferenceSingle[computeinstancegroupmanager.TimeoutsAttributes](cigm.ref.Append("timeouts"))
}

func (cigm computeInstanceGroupManagerAttributes) UpdatePolicy() terra.ListValue[computeinstancegroupmanager.UpdatePolicyAttributes] {
	return terra.ReferenceList[computeinstancegroupmanager.UpdatePolicyAttributes](cigm.ref.Append("update_policy"))
}

func (cigm computeInstanceGroupManagerAttributes) Version() terra.ListValue[computeinstancegroupmanager.VersionAttributes] {
	return terra.ReferenceList[computeinstancegroupmanager.VersionAttributes](cigm.ref.Append("version"))
}

type computeInstanceGroupManagerState struct {
	BaseInstanceName            string                                                 `json:"base_instance_name"`
	Description                 string                                                 `json:"description"`
	Fingerprint                 string                                                 `json:"fingerprint"`
	Id                          string                                                 `json:"id"`
	InstanceGroup               string                                                 `json:"instance_group"`
	ListManagedInstancesResults string                                                 `json:"list_managed_instances_results"`
	Name                        string                                                 `json:"name"`
	Operation                   string                                                 `json:"operation"`
	Project                     string                                                 `json:"project"`
	SelfLink                    string                                                 `json:"self_link"`
	TargetPools                 []string                                               `json:"target_pools"`
	TargetSize                  float64                                                `json:"target_size"`
	WaitForInstances            bool                                                   `json:"wait_for_instances"`
	WaitForInstancesStatus      string                                                 `json:"wait_for_instances_status"`
	Zone                        string                                                 `json:"zone"`
	Status                      []computeinstancegroupmanager.StatusState              `json:"status"`
	AutoHealingPolicies         []computeinstancegroupmanager.AutoHealingPoliciesState `json:"auto_healing_policies"`
	NamedPort                   []computeinstancegroupmanager.NamedPortState           `json:"named_port"`
	StatefulDisk                []computeinstancegroupmanager.StatefulDiskState        `json:"stateful_disk"`
	Timeouts                    *computeinstancegroupmanager.TimeoutsState             `json:"timeouts"`
	UpdatePolicy                []computeinstancegroupmanager.UpdatePolicyState        `json:"update_policy"`
	Version                     []computeinstancegroupmanager.VersionState             `json:"version"`
}
