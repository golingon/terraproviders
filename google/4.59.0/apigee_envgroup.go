// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	apigeeenvgroup "github.com/golingon/terraproviders/google/4.59.0/apigeeenvgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApigeeEnvgroup(name string, args ApigeeEnvgroupArgs) *ApigeeEnvgroup {
	return &ApigeeEnvgroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApigeeEnvgroup)(nil)

type ApigeeEnvgroup struct {
	Name  string
	Args  ApigeeEnvgroupArgs
	state *apigeeEnvgroupState
}

func (ae *ApigeeEnvgroup) Type() string {
	return "google_apigee_envgroup"
}

func (ae *ApigeeEnvgroup) LocalName() string {
	return ae.Name
}

func (ae *ApigeeEnvgroup) Configuration() interface{} {
	return ae.Args
}

func (ae *ApigeeEnvgroup) Attributes() apigeeEnvgroupAttributes {
	return apigeeEnvgroupAttributes{ref: terra.ReferenceResource(ae)}
}

func (ae *ApigeeEnvgroup) ImportState(av io.Reader) error {
	ae.state = &apigeeEnvgroupState{}
	if err := json.NewDecoder(av).Decode(ae.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ae.Type(), ae.LocalName(), err)
	}
	return nil
}

func (ae *ApigeeEnvgroup) State() (*apigeeEnvgroupState, bool) {
	return ae.state, ae.state != nil
}

func (ae *ApigeeEnvgroup) StateMust() *apigeeEnvgroupState {
	if ae.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ae.Type(), ae.LocalName()))
	}
	return ae.state
}

func (ae *ApigeeEnvgroup) DependOn() terra.Reference {
	return terra.ReferenceResource(ae)
}

type ApigeeEnvgroupArgs struct {
	// Hostnames: list of string, optional
	Hostnames terra.ListValue[terra.StringValue] `hcl:"hostnames,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OrgId: string, required
	OrgId terra.StringValue `hcl:"org_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *apigeeenvgroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApigeeEnvgroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apigeeEnvgroupAttributes struct {
	ref terra.Reference
}

func (ae apigeeEnvgroupAttributes) Hostnames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ae.ref.Append("hostnames"))
}

func (ae apigeeEnvgroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("id"))
}

func (ae apigeeEnvgroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("name"))
}

func (ae apigeeEnvgroupAttributes) OrgId() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("org_id"))
}

func (ae apigeeEnvgroupAttributes) Timeouts() apigeeenvgroup.TimeoutsAttributes {
	return terra.ReferenceSingle[apigeeenvgroup.TimeoutsAttributes](ae.ref.Append("timeouts"))
}

type apigeeEnvgroupState struct {
	Hostnames []string                      `json:"hostnames"`
	Id        string                        `json:"id"`
	Name      string                        `json:"name"`
	OrgId     string                        `json:"org_id"`
	Timeouts  *apigeeenvgroup.TimeoutsState `json:"timeouts"`
}
