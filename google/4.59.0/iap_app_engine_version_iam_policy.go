// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIapAppEngineVersionIamPolicy(name string, args IapAppEngineVersionIamPolicyArgs) *IapAppEngineVersionIamPolicy {
	return &IapAppEngineVersionIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IapAppEngineVersionIamPolicy)(nil)

type IapAppEngineVersionIamPolicy struct {
	Name  string
	Args  IapAppEngineVersionIamPolicyArgs
	state *iapAppEngineVersionIamPolicyState
}

func (iaevip *IapAppEngineVersionIamPolicy) Type() string {
	return "google_iap_app_engine_version_iam_policy"
}

func (iaevip *IapAppEngineVersionIamPolicy) LocalName() string {
	return iaevip.Name
}

func (iaevip *IapAppEngineVersionIamPolicy) Configuration() interface{} {
	return iaevip.Args
}

func (iaevip *IapAppEngineVersionIamPolicy) Attributes() iapAppEngineVersionIamPolicyAttributes {
	return iapAppEngineVersionIamPolicyAttributes{ref: terra.ReferenceResource(iaevip)}
}

func (iaevip *IapAppEngineVersionIamPolicy) ImportState(av io.Reader) error {
	iaevip.state = &iapAppEngineVersionIamPolicyState{}
	if err := json.NewDecoder(av).Decode(iaevip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iaevip.Type(), iaevip.LocalName(), err)
	}
	return nil
}

func (iaevip *IapAppEngineVersionIamPolicy) State() (*iapAppEngineVersionIamPolicyState, bool) {
	return iaevip.state, iaevip.state != nil
}

func (iaevip *IapAppEngineVersionIamPolicy) StateMust() *iapAppEngineVersionIamPolicyState {
	if iaevip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iaevip.Type(), iaevip.LocalName()))
	}
	return iaevip.state
}

func (iaevip *IapAppEngineVersionIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(iaevip)
}

type IapAppEngineVersionIamPolicyArgs struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// VersionId: string, required
	VersionId terra.StringValue `hcl:"version_id,attr" validate:"required"`
	// DependsOn contains resources that IapAppEngineVersionIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iapAppEngineVersionIamPolicyAttributes struct {
	ref terra.Reference
}

func (iaevip iapAppEngineVersionIamPolicyAttributes) AppId() terra.StringValue {
	return terra.ReferenceString(iaevip.ref.Append("app_id"))
}

func (iaevip iapAppEngineVersionIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(iaevip.ref.Append("etag"))
}

func (iaevip iapAppEngineVersionIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iaevip.ref.Append("id"))
}

func (iaevip iapAppEngineVersionIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(iaevip.ref.Append("policy_data"))
}

func (iaevip iapAppEngineVersionIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(iaevip.ref.Append("project"))
}

func (iaevip iapAppEngineVersionIamPolicyAttributes) Service() terra.StringValue {
	return terra.ReferenceString(iaevip.ref.Append("service"))
}

func (iaevip iapAppEngineVersionIamPolicyAttributes) VersionId() terra.StringValue {
	return terra.ReferenceString(iaevip.ref.Append("version_id"))
}

type iapAppEngineVersionIamPolicyState struct {
	AppId      string `json:"app_id"`
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	Service    string `json:"service"`
	VersionId  string `json:"version_id"`
}
