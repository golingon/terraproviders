// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigtableInstanceIamPolicy(name string, args BigtableInstanceIamPolicyArgs) *BigtableInstanceIamPolicy {
	return &BigtableInstanceIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigtableInstanceIamPolicy)(nil)

type BigtableInstanceIamPolicy struct {
	Name  string
	Args  BigtableInstanceIamPolicyArgs
	state *bigtableInstanceIamPolicyState
}

func (biip *BigtableInstanceIamPolicy) Type() string {
	return "google_bigtable_instance_iam_policy"
}

func (biip *BigtableInstanceIamPolicy) LocalName() string {
	return biip.Name
}

func (biip *BigtableInstanceIamPolicy) Configuration() interface{} {
	return biip.Args
}

func (biip *BigtableInstanceIamPolicy) Attributes() bigtableInstanceIamPolicyAttributes {
	return bigtableInstanceIamPolicyAttributes{ref: terra.ReferenceResource(biip)}
}

func (biip *BigtableInstanceIamPolicy) ImportState(av io.Reader) error {
	biip.state = &bigtableInstanceIamPolicyState{}
	if err := json.NewDecoder(av).Decode(biip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", biip.Type(), biip.LocalName(), err)
	}
	return nil
}

func (biip *BigtableInstanceIamPolicy) State() (*bigtableInstanceIamPolicyState, bool) {
	return biip.state, biip.state != nil
}

func (biip *BigtableInstanceIamPolicy) StateMust() *bigtableInstanceIamPolicyState {
	if biip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", biip.Type(), biip.LocalName()))
	}
	return biip.state
}

func (biip *BigtableInstanceIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(biip)
}

type BigtableInstanceIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that BigtableInstanceIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigtableInstanceIamPolicyAttributes struct {
	ref terra.Reference
}

func (biip bigtableInstanceIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(biip.ref.Append("etag"))
}

func (biip bigtableInstanceIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(biip.ref.Append("id"))
}

func (biip bigtableInstanceIamPolicyAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(biip.ref.Append("instance"))
}

func (biip bigtableInstanceIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(biip.ref.Append("policy_data"))
}

func (biip bigtableInstanceIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(biip.ref.Append("project"))
}

type bigtableInstanceIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Instance   string `json:"instance"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
}
