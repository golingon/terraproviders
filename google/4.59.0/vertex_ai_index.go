// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	vertexaiindex "github.com/golingon/terraproviders/google/4.59.0/vertexaiindex"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVertexAiIndex(name string, args VertexAiIndexArgs) *VertexAiIndex {
	return &VertexAiIndex{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VertexAiIndex)(nil)

type VertexAiIndex struct {
	Name  string
	Args  VertexAiIndexArgs
	state *vertexAiIndexState
}

func (vai *VertexAiIndex) Type() string {
	return "google_vertex_ai_index"
}

func (vai *VertexAiIndex) LocalName() string {
	return vai.Name
}

func (vai *VertexAiIndex) Configuration() interface{} {
	return vai.Args
}

func (vai *VertexAiIndex) Attributes() vertexAiIndexAttributes {
	return vertexAiIndexAttributes{ref: terra.ReferenceResource(vai)}
}

func (vai *VertexAiIndex) ImportState(av io.Reader) error {
	vai.state = &vertexAiIndexState{}
	if err := json.NewDecoder(av).Decode(vai.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vai.Type(), vai.LocalName(), err)
	}
	return nil
}

func (vai *VertexAiIndex) State() (*vertexAiIndexState, bool) {
	return vai.state, vai.state != nil
}

func (vai *VertexAiIndex) StateMust() *vertexAiIndexState {
	if vai.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vai.Type(), vai.LocalName()))
	}
	return vai.state
}

func (vai *VertexAiIndex) DependOn() terra.Reference {
	return terra.ReferenceResource(vai)
}

type VertexAiIndexArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IndexUpdateMethod: string, optional
	IndexUpdateMethod terra.StringValue `hcl:"index_update_method,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// DeployedIndexes: min=0
	DeployedIndexes []vertexaiindex.DeployedIndexes `hcl:"deployed_indexes,block" validate:"min=0"`
	// IndexStats: min=0
	IndexStats []vertexaiindex.IndexStats `hcl:"index_stats,block" validate:"min=0"`
	// Metadata: optional
	Metadata *vertexaiindex.Metadata `hcl:"metadata,block"`
	// Timeouts: optional
	Timeouts *vertexaiindex.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VertexAiIndex depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vertexAiIndexAttributes struct {
	ref terra.Reference
}

func (vai vertexAiIndexAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(vai.ref.Append("create_time"))
}

func (vai vertexAiIndexAttributes) Description() terra.StringValue {
	return terra.ReferenceString(vai.ref.Append("description"))
}

func (vai vertexAiIndexAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(vai.ref.Append("display_name"))
}

func (vai vertexAiIndexAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(vai.ref.Append("etag"))
}

func (vai vertexAiIndexAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vai.ref.Append("id"))
}

func (vai vertexAiIndexAttributes) IndexUpdateMethod() terra.StringValue {
	return terra.ReferenceString(vai.ref.Append("index_update_method"))
}

func (vai vertexAiIndexAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vai.ref.Append("labels"))
}

func (vai vertexAiIndexAttributes) MetadataSchemaUri() terra.StringValue {
	return terra.ReferenceString(vai.ref.Append("metadata_schema_uri"))
}

func (vai vertexAiIndexAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vai.ref.Append("name"))
}

func (vai vertexAiIndexAttributes) Project() terra.StringValue {
	return terra.ReferenceString(vai.ref.Append("project"))
}

func (vai vertexAiIndexAttributes) Region() terra.StringValue {
	return terra.ReferenceString(vai.ref.Append("region"))
}

func (vai vertexAiIndexAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(vai.ref.Append("update_time"))
}

func (vai vertexAiIndexAttributes) DeployedIndexes() terra.ListValue[vertexaiindex.DeployedIndexesAttributes] {
	return terra.ReferenceList[vertexaiindex.DeployedIndexesAttributes](vai.ref.Append("deployed_indexes"))
}

func (vai vertexAiIndexAttributes) IndexStats() terra.ListValue[vertexaiindex.IndexStatsAttributes] {
	return terra.ReferenceList[vertexaiindex.IndexStatsAttributes](vai.ref.Append("index_stats"))
}

func (vai vertexAiIndexAttributes) Metadata() terra.ListValue[vertexaiindex.MetadataAttributes] {
	return terra.ReferenceList[vertexaiindex.MetadataAttributes](vai.ref.Append("metadata"))
}

func (vai vertexAiIndexAttributes) Timeouts() vertexaiindex.TimeoutsAttributes {
	return terra.ReferenceSingle[vertexaiindex.TimeoutsAttributes](vai.ref.Append("timeouts"))
}

type vertexAiIndexState struct {
	CreateTime        string                               `json:"create_time"`
	Description       string                               `json:"description"`
	DisplayName       string                               `json:"display_name"`
	Etag              string                               `json:"etag"`
	Id                string                               `json:"id"`
	IndexUpdateMethod string                               `json:"index_update_method"`
	Labels            map[string]string                    `json:"labels"`
	MetadataSchemaUri string                               `json:"metadata_schema_uri"`
	Name              string                               `json:"name"`
	Project           string                               `json:"project"`
	Region            string                               `json:"region"`
	UpdateTime        string                               `json:"update_time"`
	DeployedIndexes   []vertexaiindex.DeployedIndexesState `json:"deployed_indexes"`
	IndexStats        []vertexaiindex.IndexStatsState      `json:"index_stats"`
	Metadata          []vertexaiindex.MetadataState        `json:"metadata"`
	Timeouts          *vertexaiindex.TimeoutsState         `json:"timeouts"`
}
