// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStorageBucketAcl(name string, args StorageBucketAclArgs) *StorageBucketAcl {
	return &StorageBucketAcl{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageBucketAcl)(nil)

type StorageBucketAcl struct {
	Name  string
	Args  StorageBucketAclArgs
	state *storageBucketAclState
}

func (sba *StorageBucketAcl) Type() string {
	return "google_storage_bucket_acl"
}

func (sba *StorageBucketAcl) LocalName() string {
	return sba.Name
}

func (sba *StorageBucketAcl) Configuration() interface{} {
	return sba.Args
}

func (sba *StorageBucketAcl) Attributes() storageBucketAclAttributes {
	return storageBucketAclAttributes{ref: terra.ReferenceResource(sba)}
}

func (sba *StorageBucketAcl) ImportState(av io.Reader) error {
	sba.state = &storageBucketAclState{}
	if err := json.NewDecoder(av).Decode(sba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sba.Type(), sba.LocalName(), err)
	}
	return nil
}

func (sba *StorageBucketAcl) State() (*storageBucketAclState, bool) {
	return sba.state, sba.state != nil
}

func (sba *StorageBucketAcl) StateMust() *storageBucketAclState {
	if sba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sba.Type(), sba.LocalName()))
	}
	return sba.state
}

func (sba *StorageBucketAcl) DependOn() terra.Reference {
	return terra.ReferenceResource(sba)
}

type StorageBucketAclArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// DefaultAcl: string, optional
	DefaultAcl terra.StringValue `hcl:"default_acl,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PredefinedAcl: string, optional
	PredefinedAcl terra.StringValue `hcl:"predefined_acl,attr"`
	// RoleEntity: list of string, optional
	RoleEntity terra.ListValue[terra.StringValue] `hcl:"role_entity,attr"`
	// DependsOn contains resources that StorageBucketAcl depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storageBucketAclAttributes struct {
	ref terra.Reference
}

func (sba storageBucketAclAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sba.ref.Append("bucket"))
}

func (sba storageBucketAclAttributes) DefaultAcl() terra.StringValue {
	return terra.ReferenceString(sba.ref.Append("default_acl"))
}

func (sba storageBucketAclAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sba.ref.Append("id"))
}

func (sba storageBucketAclAttributes) PredefinedAcl() terra.StringValue {
	return terra.ReferenceString(sba.ref.Append("predefined_acl"))
}

func (sba storageBucketAclAttributes) RoleEntity() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](sba.ref.Append("role_entity"))
}

type storageBucketAclState struct {
	Bucket        string   `json:"bucket"`
	DefaultAcl    string   `json:"default_acl"`
	Id            string   `json:"id"`
	PredefinedAcl string   `json:"predefined_acl"`
	RoleEntity    []string `json:"role_entity"`
}
