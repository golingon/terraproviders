// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	notebooksenvironment "github.com/golingon/terraproviders/google/4.59.0/notebooksenvironment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNotebooksEnvironment(name string, args NotebooksEnvironmentArgs) *NotebooksEnvironment {
	return &NotebooksEnvironment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NotebooksEnvironment)(nil)

type NotebooksEnvironment struct {
	Name  string
	Args  NotebooksEnvironmentArgs
	state *notebooksEnvironmentState
}

func (ne *NotebooksEnvironment) Type() string {
	return "google_notebooks_environment"
}

func (ne *NotebooksEnvironment) LocalName() string {
	return ne.Name
}

func (ne *NotebooksEnvironment) Configuration() interface{} {
	return ne.Args
}

func (ne *NotebooksEnvironment) Attributes() notebooksEnvironmentAttributes {
	return notebooksEnvironmentAttributes{ref: terra.ReferenceResource(ne)}
}

func (ne *NotebooksEnvironment) ImportState(av io.Reader) error {
	ne.state = &notebooksEnvironmentState{}
	if err := json.NewDecoder(av).Decode(ne.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ne.Type(), ne.LocalName(), err)
	}
	return nil
}

func (ne *NotebooksEnvironment) State() (*notebooksEnvironmentState, bool) {
	return ne.state, ne.state != nil
}

func (ne *NotebooksEnvironment) StateMust() *notebooksEnvironmentState {
	if ne.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ne.Type(), ne.LocalName()))
	}
	return ne.state
}

func (ne *NotebooksEnvironment) DependOn() terra.Reference {
	return terra.ReferenceResource(ne)
}

type NotebooksEnvironmentArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PostStartupScript: string, optional
	PostStartupScript terra.StringValue `hcl:"post_startup_script,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ContainerImage: optional
	ContainerImage *notebooksenvironment.ContainerImage `hcl:"container_image,block"`
	// Timeouts: optional
	Timeouts *notebooksenvironment.Timeouts `hcl:"timeouts,block"`
	// VmImage: optional
	VmImage *notebooksenvironment.VmImage `hcl:"vm_image,block"`
	// DependsOn contains resources that NotebooksEnvironment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type notebooksEnvironmentAttributes struct {
	ref terra.Reference
}

func (ne notebooksEnvironmentAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(ne.ref.Append("create_time"))
}

func (ne notebooksEnvironmentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ne.ref.Append("description"))
}

func (ne notebooksEnvironmentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(ne.ref.Append("display_name"))
}

func (ne notebooksEnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ne.ref.Append("id"))
}

func (ne notebooksEnvironmentAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ne.ref.Append("location"))
}

func (ne notebooksEnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ne.ref.Append("name"))
}

func (ne notebooksEnvironmentAttributes) PostStartupScript() terra.StringValue {
	return terra.ReferenceString(ne.ref.Append("post_startup_script"))
}

func (ne notebooksEnvironmentAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ne.ref.Append("project"))
}

func (ne notebooksEnvironmentAttributes) ContainerImage() terra.ListValue[notebooksenvironment.ContainerImageAttributes] {
	return terra.ReferenceList[notebooksenvironment.ContainerImageAttributes](ne.ref.Append("container_image"))
}

func (ne notebooksEnvironmentAttributes) Timeouts() notebooksenvironment.TimeoutsAttributes {
	return terra.ReferenceSingle[notebooksenvironment.TimeoutsAttributes](ne.ref.Append("timeouts"))
}

func (ne notebooksEnvironmentAttributes) VmImage() terra.ListValue[notebooksenvironment.VmImageAttributes] {
	return terra.ReferenceList[notebooksenvironment.VmImageAttributes](ne.ref.Append("vm_image"))
}

type notebooksEnvironmentState struct {
	CreateTime        string                                     `json:"create_time"`
	Description       string                                     `json:"description"`
	DisplayName       string                                     `json:"display_name"`
	Id                string                                     `json:"id"`
	Location          string                                     `json:"location"`
	Name              string                                     `json:"name"`
	PostStartupScript string                                     `json:"post_startup_script"`
	Project           string                                     `json:"project"`
	ContainerImage    []notebooksenvironment.ContainerImageState `json:"container_image"`
	Timeouts          *notebooksenvironment.TimeoutsState        `json:"timeouts"`
	VmImage           []notebooksenvironment.VmImageState        `json:"vm_image"`
}
