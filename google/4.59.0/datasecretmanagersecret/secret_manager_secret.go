// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datasecretmanagersecret

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Replication struct {
	// UserManaged: min=0
	UserManaged []UserManaged `hcl:"user_managed,block" validate:"min=0"`
}

type UserManaged struct {
	// Replicas: min=0
	Replicas []Replicas `hcl:"replicas,block" validate:"min=0"`
}

type Replicas struct {
	// CustomerManagedEncryption: min=0
	CustomerManagedEncryption []CustomerManagedEncryption `hcl:"customer_managed_encryption,block" validate:"min=0"`
}

type CustomerManagedEncryption struct{}

type Rotation struct{}

type Topics struct{}

type ReplicationAttributes struct {
	ref terra.Reference
}

func (r ReplicationAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ReplicationAttributes) InternalWithRef(ref terra.Reference) ReplicationAttributes {
	return ReplicationAttributes{ref: ref}
}

func (r ReplicationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ReplicationAttributes) Automatic() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("automatic"))
}

func (r ReplicationAttributes) UserManaged() terra.ListValue[UserManagedAttributes] {
	return terra.ReferenceAsList[UserManagedAttributes](r.ref.Append("user_managed"))
}

type UserManagedAttributes struct {
	ref terra.Reference
}

func (um UserManagedAttributes) InternalRef() (terra.Reference, error) {
	return um.ref, nil
}

func (um UserManagedAttributes) InternalWithRef(ref terra.Reference) UserManagedAttributes {
	return UserManagedAttributes{ref: ref}
}

func (um UserManagedAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return um.ref.InternalTokens()
}

func (um UserManagedAttributes) Replicas() terra.ListValue[ReplicasAttributes] {
	return terra.ReferenceAsList[ReplicasAttributes](um.ref.Append("replicas"))
}

type ReplicasAttributes struct {
	ref terra.Reference
}

func (r ReplicasAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ReplicasAttributes) InternalWithRef(ref terra.Reference) ReplicasAttributes {
	return ReplicasAttributes{ref: ref}
}

func (r ReplicasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ReplicasAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("location"))
}

func (r ReplicasAttributes) CustomerManagedEncryption() terra.ListValue[CustomerManagedEncryptionAttributes] {
	return terra.ReferenceAsList[CustomerManagedEncryptionAttributes](r.ref.Append("customer_managed_encryption"))
}

type CustomerManagedEncryptionAttributes struct {
	ref terra.Reference
}

func (cme CustomerManagedEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return cme.ref, nil
}

func (cme CustomerManagedEncryptionAttributes) InternalWithRef(ref terra.Reference) CustomerManagedEncryptionAttributes {
	return CustomerManagedEncryptionAttributes{ref: ref}
}

func (cme CustomerManagedEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cme.ref.InternalTokens()
}

func (cme CustomerManagedEncryptionAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(cme.ref.Append("kms_key_name"))
}

type RotationAttributes struct {
	ref terra.Reference
}

func (r RotationAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RotationAttributes) InternalWithRef(ref terra.Reference) RotationAttributes {
	return RotationAttributes{ref: ref}
}

func (r RotationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RotationAttributes) NextRotationTime() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("next_rotation_time"))
}

func (r RotationAttributes) RotationPeriod() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rotation_period"))
}

type TopicsAttributes struct {
	ref terra.Reference
}

func (t TopicsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TopicsAttributes) InternalWithRef(ref terra.Reference) TopicsAttributes {
	return TopicsAttributes{ref: ref}
}

func (t TopicsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TopicsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("name"))
}

type ReplicationState struct {
	Automatic   bool               `json:"automatic"`
	UserManaged []UserManagedState `json:"user_managed"`
}

type UserManagedState struct {
	Replicas []ReplicasState `json:"replicas"`
}

type ReplicasState struct {
	Location                  string                           `json:"location"`
	CustomerManagedEncryption []CustomerManagedEncryptionState `json:"customer_managed_encryption"`
}

type CustomerManagedEncryptionState struct {
	KmsKeyName string `json:"kms_key_name"`
}

type RotationState struct {
	NextRotationTime string `json:"next_rotation_time"`
	RotationPeriod   string `json:"rotation_period"`
}

type TopicsState struct {
	Name string `json:"name"`
}
