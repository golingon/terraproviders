// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	appenginestandardappversion "github.com/golingon/terraproviders/google/4.59.0/appenginestandardappversion"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppEngineStandardAppVersion(name string, args AppEngineStandardAppVersionArgs) *AppEngineStandardAppVersion {
	return &AppEngineStandardAppVersion{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppEngineStandardAppVersion)(nil)

type AppEngineStandardAppVersion struct {
	Name  string
	Args  AppEngineStandardAppVersionArgs
	state *appEngineStandardAppVersionState
}

func (aesav *AppEngineStandardAppVersion) Type() string {
	return "google_app_engine_standard_app_version"
}

func (aesav *AppEngineStandardAppVersion) LocalName() string {
	return aesav.Name
}

func (aesav *AppEngineStandardAppVersion) Configuration() interface{} {
	return aesav.Args
}

func (aesav *AppEngineStandardAppVersion) Attributes() appEngineStandardAppVersionAttributes {
	return appEngineStandardAppVersionAttributes{ref: terra.ReferenceResource(aesav)}
}

func (aesav *AppEngineStandardAppVersion) ImportState(av io.Reader) error {
	aesav.state = &appEngineStandardAppVersionState{}
	if err := json.NewDecoder(av).Decode(aesav.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aesav.Type(), aesav.LocalName(), err)
	}
	return nil
}

func (aesav *AppEngineStandardAppVersion) State() (*appEngineStandardAppVersionState, bool) {
	return aesav.state, aesav.state != nil
}

func (aesav *AppEngineStandardAppVersion) StateMust() *appEngineStandardAppVersionState {
	if aesav.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aesav.Type(), aesav.LocalName()))
	}
	return aesav.state
}

func (aesav *AppEngineStandardAppVersion) DependOn() terra.Reference {
	return terra.ReferenceResource(aesav)
}

type AppEngineStandardAppVersionArgs struct {
	// AppEngineApis: bool, optional
	AppEngineApis terra.BoolValue `hcl:"app_engine_apis,attr"`
	// DeleteServiceOnDestroy: bool, optional
	DeleteServiceOnDestroy terra.BoolValue `hcl:"delete_service_on_destroy,attr"`
	// EnvVariables: map of string, optional
	EnvVariables terra.MapValue[terra.StringValue] `hcl:"env_variables,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InboundServices: set of string, optional
	InboundServices terra.SetValue[terra.StringValue] `hcl:"inbound_services,attr"`
	// InstanceClass: string, optional
	InstanceClass terra.StringValue `hcl:"instance_class,attr"`
	// NoopOnDestroy: bool, optional
	NoopOnDestroy terra.BoolValue `hcl:"noop_on_destroy,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Runtime: string, required
	Runtime terra.StringValue `hcl:"runtime,attr" validate:"required"`
	// RuntimeApiVersion: string, optional
	RuntimeApiVersion terra.StringValue `hcl:"runtime_api_version,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// Threadsafe: bool, optional
	Threadsafe terra.BoolValue `hcl:"threadsafe,attr"`
	// VersionId: string, optional
	VersionId terra.StringValue `hcl:"version_id,attr"`
	// AutomaticScaling: optional
	AutomaticScaling *appenginestandardappversion.AutomaticScaling `hcl:"automatic_scaling,block"`
	// BasicScaling: optional
	BasicScaling *appenginestandardappversion.BasicScaling `hcl:"basic_scaling,block"`
	// Deployment: required
	Deployment *appenginestandardappversion.Deployment `hcl:"deployment,block" validate:"required"`
	// Entrypoint: required
	Entrypoint *appenginestandardappversion.Entrypoint `hcl:"entrypoint,block" validate:"required"`
	// Handlers: min=0
	Handlers []appenginestandardappversion.Handlers `hcl:"handlers,block" validate:"min=0"`
	// Libraries: min=0
	Libraries []appenginestandardappversion.Libraries `hcl:"libraries,block" validate:"min=0"`
	// ManualScaling: optional
	ManualScaling *appenginestandardappversion.ManualScaling `hcl:"manual_scaling,block"`
	// Timeouts: optional
	Timeouts *appenginestandardappversion.Timeouts `hcl:"timeouts,block"`
	// VpcAccessConnector: optional
	VpcAccessConnector *appenginestandardappversion.VpcAccessConnector `hcl:"vpc_access_connector,block"`
	// DependsOn contains resources that AppEngineStandardAppVersion depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appEngineStandardAppVersionAttributes struct {
	ref terra.Reference
}

func (aesav appEngineStandardAppVersionAttributes) AppEngineApis() terra.BoolValue {
	return terra.ReferenceBool(aesav.ref.Append("app_engine_apis"))
}

func (aesav appEngineStandardAppVersionAttributes) DeleteServiceOnDestroy() terra.BoolValue {
	return terra.ReferenceBool(aesav.ref.Append("delete_service_on_destroy"))
}

func (aesav appEngineStandardAppVersionAttributes) EnvVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aesav.ref.Append("env_variables"))
}

func (aesav appEngineStandardAppVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aesav.ref.Append("id"))
}

func (aesav appEngineStandardAppVersionAttributes) InboundServices() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](aesav.ref.Append("inbound_services"))
}

func (aesav appEngineStandardAppVersionAttributes) InstanceClass() terra.StringValue {
	return terra.ReferenceString(aesav.ref.Append("instance_class"))
}

func (aesav appEngineStandardAppVersionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(aesav.ref.Append("name"))
}

func (aesav appEngineStandardAppVersionAttributes) NoopOnDestroy() terra.BoolValue {
	return terra.ReferenceBool(aesav.ref.Append("noop_on_destroy"))
}

func (aesav appEngineStandardAppVersionAttributes) Project() terra.StringValue {
	return terra.ReferenceString(aesav.ref.Append("project"))
}

func (aesav appEngineStandardAppVersionAttributes) Runtime() terra.StringValue {
	return terra.ReferenceString(aesav.ref.Append("runtime"))
}

func (aesav appEngineStandardAppVersionAttributes) RuntimeApiVersion() terra.StringValue {
	return terra.ReferenceString(aesav.ref.Append("runtime_api_version"))
}

func (aesav appEngineStandardAppVersionAttributes) Service() terra.StringValue {
	return terra.ReferenceString(aesav.ref.Append("service"))
}

func (aesav appEngineStandardAppVersionAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceString(aesav.ref.Append("service_account"))
}

func (aesav appEngineStandardAppVersionAttributes) Threadsafe() terra.BoolValue {
	return terra.ReferenceBool(aesav.ref.Append("threadsafe"))
}

func (aesav appEngineStandardAppVersionAttributes) VersionId() terra.StringValue {
	return terra.ReferenceString(aesav.ref.Append("version_id"))
}

func (aesav appEngineStandardAppVersionAttributes) AutomaticScaling() terra.ListValue[appenginestandardappversion.AutomaticScalingAttributes] {
	return terra.ReferenceList[appenginestandardappversion.AutomaticScalingAttributes](aesav.ref.Append("automatic_scaling"))
}

func (aesav appEngineStandardAppVersionAttributes) BasicScaling() terra.ListValue[appenginestandardappversion.BasicScalingAttributes] {
	return terra.ReferenceList[appenginestandardappversion.BasicScalingAttributes](aesav.ref.Append("basic_scaling"))
}

func (aesav appEngineStandardAppVersionAttributes) Deployment() terra.ListValue[appenginestandardappversion.DeploymentAttributes] {
	return terra.ReferenceList[appenginestandardappversion.DeploymentAttributes](aesav.ref.Append("deployment"))
}

func (aesav appEngineStandardAppVersionAttributes) Entrypoint() terra.ListValue[appenginestandardappversion.EntrypointAttributes] {
	return terra.ReferenceList[appenginestandardappversion.EntrypointAttributes](aesav.ref.Append("entrypoint"))
}

func (aesav appEngineStandardAppVersionAttributes) Handlers() terra.ListValue[appenginestandardappversion.HandlersAttributes] {
	return terra.ReferenceList[appenginestandardappversion.HandlersAttributes](aesav.ref.Append("handlers"))
}

func (aesav appEngineStandardAppVersionAttributes) Libraries() terra.ListValue[appenginestandardappversion.LibrariesAttributes] {
	return terra.ReferenceList[appenginestandardappversion.LibrariesAttributes](aesav.ref.Append("libraries"))
}

func (aesav appEngineStandardAppVersionAttributes) ManualScaling() terra.ListValue[appenginestandardappversion.ManualScalingAttributes] {
	return terra.ReferenceList[appenginestandardappversion.ManualScalingAttributes](aesav.ref.Append("manual_scaling"))
}

func (aesav appEngineStandardAppVersionAttributes) Timeouts() appenginestandardappversion.TimeoutsAttributes {
	return terra.ReferenceSingle[appenginestandardappversion.TimeoutsAttributes](aesav.ref.Append("timeouts"))
}

func (aesav appEngineStandardAppVersionAttributes) VpcAccessConnector() terra.ListValue[appenginestandardappversion.VpcAccessConnectorAttributes] {
	return terra.ReferenceList[appenginestandardappversion.VpcAccessConnectorAttributes](aesav.ref.Append("vpc_access_connector"))
}

type appEngineStandardAppVersionState struct {
	AppEngineApis          bool                                                  `json:"app_engine_apis"`
	DeleteServiceOnDestroy bool                                                  `json:"delete_service_on_destroy"`
	EnvVariables           map[string]string                                     `json:"env_variables"`
	Id                     string                                                `json:"id"`
	InboundServices        []string                                              `json:"inbound_services"`
	InstanceClass          string                                                `json:"instance_class"`
	Name                   string                                                `json:"name"`
	NoopOnDestroy          bool                                                  `json:"noop_on_destroy"`
	Project                string                                                `json:"project"`
	Runtime                string                                                `json:"runtime"`
	RuntimeApiVersion      string                                                `json:"runtime_api_version"`
	Service                string                                                `json:"service"`
	ServiceAccount         string                                                `json:"service_account"`
	Threadsafe             bool                                                  `json:"threadsafe"`
	VersionId              string                                                `json:"version_id"`
	AutomaticScaling       []appenginestandardappversion.AutomaticScalingState   `json:"automatic_scaling"`
	BasicScaling           []appenginestandardappversion.BasicScalingState       `json:"basic_scaling"`
	Deployment             []appenginestandardappversion.DeploymentState         `json:"deployment"`
	Entrypoint             []appenginestandardappversion.EntrypointState         `json:"entrypoint"`
	Handlers               []appenginestandardappversion.HandlersState           `json:"handlers"`
	Libraries              []appenginestandardappversion.LibrariesState          `json:"libraries"`
	ManualScaling          []appenginestandardappversion.ManualScalingState      `json:"manual_scaling"`
	Timeouts               *appenginestandardappversion.TimeoutsState            `json:"timeouts"`
	VpcAccessConnector     []appenginestandardappversion.VpcAccessConnectorState `json:"vpc_access_connector"`
}
