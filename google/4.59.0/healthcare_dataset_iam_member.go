// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	healthcaredatasetiammember "github.com/golingon/terraproviders/google/4.59.0/healthcaredatasetiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewHealthcareDatasetIamMember(name string, args HealthcareDatasetIamMemberArgs) *HealthcareDatasetIamMember {
	return &HealthcareDatasetIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HealthcareDatasetIamMember)(nil)

type HealthcareDatasetIamMember struct {
	Name  string
	Args  HealthcareDatasetIamMemberArgs
	state *healthcareDatasetIamMemberState
}

func (hdim *HealthcareDatasetIamMember) Type() string {
	return "google_healthcare_dataset_iam_member"
}

func (hdim *HealthcareDatasetIamMember) LocalName() string {
	return hdim.Name
}

func (hdim *HealthcareDatasetIamMember) Configuration() interface{} {
	return hdim.Args
}

func (hdim *HealthcareDatasetIamMember) Attributes() healthcareDatasetIamMemberAttributes {
	return healthcareDatasetIamMemberAttributes{ref: terra.ReferenceResource(hdim)}
}

func (hdim *HealthcareDatasetIamMember) ImportState(av io.Reader) error {
	hdim.state = &healthcareDatasetIamMemberState{}
	if err := json.NewDecoder(av).Decode(hdim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hdim.Type(), hdim.LocalName(), err)
	}
	return nil
}

func (hdim *HealthcareDatasetIamMember) State() (*healthcareDatasetIamMemberState, bool) {
	return hdim.state, hdim.state != nil
}

func (hdim *HealthcareDatasetIamMember) StateMust() *healthcareDatasetIamMemberState {
	if hdim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hdim.Type(), hdim.LocalName()))
	}
	return hdim.state
}

func (hdim *HealthcareDatasetIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(hdim)
}

type HealthcareDatasetIamMemberArgs struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *healthcaredatasetiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that HealthcareDatasetIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type healthcareDatasetIamMemberAttributes struct {
	ref terra.Reference
}

func (hdim healthcareDatasetIamMemberAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceString(hdim.ref.Append("dataset_id"))
}

func (hdim healthcareDatasetIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(hdim.ref.Append("etag"))
}

func (hdim healthcareDatasetIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(hdim.ref.Append("id"))
}

func (hdim healthcareDatasetIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(hdim.ref.Append("member"))
}

func (hdim healthcareDatasetIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(hdim.ref.Append("role"))
}

func (hdim healthcareDatasetIamMemberAttributes) Condition() terra.ListValue[healthcaredatasetiammember.ConditionAttributes] {
	return terra.ReferenceList[healthcaredatasetiammember.ConditionAttributes](hdim.ref.Append("condition"))
}

type healthcareDatasetIamMemberState struct {
	DatasetId string                                      `json:"dataset_id"`
	Etag      string                                      `json:"etag"`
	Id        string                                      `json:"id"`
	Member    string                                      `json:"member"`
	Role      string                                      `json:"role"`
	Condition []healthcaredatasetiammember.ConditionState `json:"condition"`
}
