// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	spannerdatabaseiambinding "github.com/golingon/terraproviders/google/4.59.0/spannerdatabaseiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpannerDatabaseIamBinding(name string, args SpannerDatabaseIamBindingArgs) *SpannerDatabaseIamBinding {
	return &SpannerDatabaseIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpannerDatabaseIamBinding)(nil)

type SpannerDatabaseIamBinding struct {
	Name  string
	Args  SpannerDatabaseIamBindingArgs
	state *spannerDatabaseIamBindingState
}

func (sdib *SpannerDatabaseIamBinding) Type() string {
	return "google_spanner_database_iam_binding"
}

func (sdib *SpannerDatabaseIamBinding) LocalName() string {
	return sdib.Name
}

func (sdib *SpannerDatabaseIamBinding) Configuration() interface{} {
	return sdib.Args
}

func (sdib *SpannerDatabaseIamBinding) Attributes() spannerDatabaseIamBindingAttributes {
	return spannerDatabaseIamBindingAttributes{ref: terra.ReferenceResource(sdib)}
}

func (sdib *SpannerDatabaseIamBinding) ImportState(av io.Reader) error {
	sdib.state = &spannerDatabaseIamBindingState{}
	if err := json.NewDecoder(av).Decode(sdib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sdib.Type(), sdib.LocalName(), err)
	}
	return nil
}

func (sdib *SpannerDatabaseIamBinding) State() (*spannerDatabaseIamBindingState, bool) {
	return sdib.state, sdib.state != nil
}

func (sdib *SpannerDatabaseIamBinding) StateMust() *spannerDatabaseIamBindingState {
	if sdib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sdib.Type(), sdib.LocalName()))
	}
	return sdib.state
}

func (sdib *SpannerDatabaseIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(sdib)
}

type SpannerDatabaseIamBindingArgs struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *spannerdatabaseiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that SpannerDatabaseIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type spannerDatabaseIamBindingAttributes struct {
	ref terra.Reference
}

func (sdib spannerDatabaseIamBindingAttributes) Database() terra.StringValue {
	return terra.ReferenceString(sdib.ref.Append("database"))
}

func (sdib spannerDatabaseIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(sdib.ref.Append("etag"))
}

func (sdib spannerDatabaseIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sdib.ref.Append("id"))
}

func (sdib spannerDatabaseIamBindingAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(sdib.ref.Append("instance"))
}

func (sdib spannerDatabaseIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](sdib.ref.Append("members"))
}

func (sdib spannerDatabaseIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(sdib.ref.Append("project"))
}

func (sdib spannerDatabaseIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(sdib.ref.Append("role"))
}

func (sdib spannerDatabaseIamBindingAttributes) Condition() terra.ListValue[spannerdatabaseiambinding.ConditionAttributes] {
	return terra.ReferenceList[spannerdatabaseiambinding.ConditionAttributes](sdib.ref.Append("condition"))
}

type spannerDatabaseIamBindingState struct {
	Database  string                                     `json:"database"`
	Etag      string                                     `json:"etag"`
	Id        string                                     `json:"id"`
	Instance  string                                     `json:"instance"`
	Members   []string                                   `json:"members"`
	Project   string                                     `json:"project"`
	Role      string                                     `json:"role"`
	Condition []spannerdatabaseiambinding.ConditionState `json:"condition"`
}
