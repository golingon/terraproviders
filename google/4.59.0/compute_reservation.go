// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computereservation "github.com/golingon/terraproviders/google/4.59.0/computereservation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeReservation(name string, args ComputeReservationArgs) *ComputeReservation {
	return &ComputeReservation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeReservation)(nil)

type ComputeReservation struct {
	Name  string
	Args  ComputeReservationArgs
	state *computeReservationState
}

func (cr *ComputeReservation) Type() string {
	return "google_compute_reservation"
}

func (cr *ComputeReservation) LocalName() string {
	return cr.Name
}

func (cr *ComputeReservation) Configuration() interface{} {
	return cr.Args
}

func (cr *ComputeReservation) Attributes() computeReservationAttributes {
	return computeReservationAttributes{ref: terra.ReferenceResource(cr)}
}

func (cr *ComputeReservation) ImportState(av io.Reader) error {
	cr.state = &computeReservationState{}
	if err := json.NewDecoder(av).Decode(cr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cr.Type(), cr.LocalName(), err)
	}
	return nil
}

func (cr *ComputeReservation) State() (*computeReservationState, bool) {
	return cr.state, cr.state != nil
}

func (cr *ComputeReservation) StateMust() *computeReservationState {
	if cr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cr.Type(), cr.LocalName()))
	}
	return cr.state
}

func (cr *ComputeReservation) DependOn() terra.Reference {
	return terra.ReferenceResource(cr)
}

type ComputeReservationArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SpecificReservationRequired: bool, optional
	SpecificReservationRequired terra.BoolValue `hcl:"specific_reservation_required,attr"`
	// Zone: string, required
	Zone terra.StringValue `hcl:"zone,attr" validate:"required"`
	// ShareSettings: optional
	ShareSettings *computereservation.ShareSettings `hcl:"share_settings,block"`
	// SpecificReservation: required
	SpecificReservation *computereservation.SpecificReservation `hcl:"specific_reservation,block" validate:"required"`
	// Timeouts: optional
	Timeouts *computereservation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeReservation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeReservationAttributes struct {
	ref terra.Reference
}

func (cr computeReservationAttributes) Commitment() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("commitment"))
}

func (cr computeReservationAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("creation_timestamp"))
}

func (cr computeReservationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("description"))
}

func (cr computeReservationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("id"))
}

func (cr computeReservationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("name"))
}

func (cr computeReservationAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("project"))
}

func (cr computeReservationAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("self_link"))
}

func (cr computeReservationAttributes) SpecificReservationRequired() terra.BoolValue {
	return terra.ReferenceBool(cr.ref.Append("specific_reservation_required"))
}

func (cr computeReservationAttributes) Status() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("status"))
}

func (cr computeReservationAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("zone"))
}

func (cr computeReservationAttributes) ShareSettings() terra.ListValue[computereservation.ShareSettingsAttributes] {
	return terra.ReferenceList[computereservation.ShareSettingsAttributes](cr.ref.Append("share_settings"))
}

func (cr computeReservationAttributes) SpecificReservation() terra.ListValue[computereservation.SpecificReservationAttributes] {
	return terra.ReferenceList[computereservation.SpecificReservationAttributes](cr.ref.Append("specific_reservation"))
}

func (cr computeReservationAttributes) Timeouts() computereservation.TimeoutsAttributes {
	return terra.ReferenceSingle[computereservation.TimeoutsAttributes](cr.ref.Append("timeouts"))
}

type computeReservationState struct {
	Commitment                  string                                        `json:"commitment"`
	CreationTimestamp           string                                        `json:"creation_timestamp"`
	Description                 string                                        `json:"description"`
	Id                          string                                        `json:"id"`
	Name                        string                                        `json:"name"`
	Project                     string                                        `json:"project"`
	SelfLink                    string                                        `json:"self_link"`
	SpecificReservationRequired bool                                          `json:"specific_reservation_required"`
	Status                      string                                        `json:"status"`
	Zone                        string                                        `json:"zone"`
	ShareSettings               []computereservation.ShareSettingsState       `json:"share_settings"`
	SpecificReservation         []computereservation.SpecificReservationState `json:"specific_reservation"`
	Timeouts                    *computereservation.TimeoutsState             `json:"timeouts"`
}
