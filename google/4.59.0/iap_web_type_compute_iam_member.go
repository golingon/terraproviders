// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	iapwebtypecomputeiammember "github.com/golingon/terraproviders/google/4.59.0/iapwebtypecomputeiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIapWebTypeComputeIamMember(name string, args IapWebTypeComputeIamMemberArgs) *IapWebTypeComputeIamMember {
	return &IapWebTypeComputeIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IapWebTypeComputeIamMember)(nil)

type IapWebTypeComputeIamMember struct {
	Name  string
	Args  IapWebTypeComputeIamMemberArgs
	state *iapWebTypeComputeIamMemberState
}

func (iwtcim *IapWebTypeComputeIamMember) Type() string {
	return "google_iap_web_type_compute_iam_member"
}

func (iwtcim *IapWebTypeComputeIamMember) LocalName() string {
	return iwtcim.Name
}

func (iwtcim *IapWebTypeComputeIamMember) Configuration() interface{} {
	return iwtcim.Args
}

func (iwtcim *IapWebTypeComputeIamMember) Attributes() iapWebTypeComputeIamMemberAttributes {
	return iapWebTypeComputeIamMemberAttributes{ref: terra.ReferenceResource(iwtcim)}
}

func (iwtcim *IapWebTypeComputeIamMember) ImportState(av io.Reader) error {
	iwtcim.state = &iapWebTypeComputeIamMemberState{}
	if err := json.NewDecoder(av).Decode(iwtcim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iwtcim.Type(), iwtcim.LocalName(), err)
	}
	return nil
}

func (iwtcim *IapWebTypeComputeIamMember) State() (*iapWebTypeComputeIamMemberState, bool) {
	return iwtcim.state, iwtcim.state != nil
}

func (iwtcim *IapWebTypeComputeIamMember) StateMust() *iapWebTypeComputeIamMemberState {
	if iwtcim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iwtcim.Type(), iwtcim.LocalName()))
	}
	return iwtcim.state
}

func (iwtcim *IapWebTypeComputeIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(iwtcim)
}

type IapWebTypeComputeIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *iapwebtypecomputeiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that IapWebTypeComputeIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iapWebTypeComputeIamMemberAttributes struct {
	ref terra.Reference
}

func (iwtcim iapWebTypeComputeIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(iwtcim.ref.Append("etag"))
}

func (iwtcim iapWebTypeComputeIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iwtcim.ref.Append("id"))
}

func (iwtcim iapWebTypeComputeIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(iwtcim.ref.Append("member"))
}

func (iwtcim iapWebTypeComputeIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(iwtcim.ref.Append("project"))
}

func (iwtcim iapWebTypeComputeIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(iwtcim.ref.Append("role"))
}

func (iwtcim iapWebTypeComputeIamMemberAttributes) Condition() terra.ListValue[iapwebtypecomputeiammember.ConditionAttributes] {
	return terra.ReferenceList[iapwebtypecomputeiammember.ConditionAttributes](iwtcim.ref.Append("condition"))
}

type iapWebTypeComputeIamMemberState struct {
	Etag      string                                      `json:"etag"`
	Id        string                                      `json:"id"`
	Member    string                                      `json:"member"`
	Project   string                                      `json:"project"`
	Role      string                                      `json:"role"`
	Condition []iapwebtypecomputeiammember.ConditionState `json:"condition"`
}
