// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	artifactregistryrepositoryiammember "github.com/golingon/terraproviders/google/4.59.0/artifactregistryrepositoryiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewArtifactRegistryRepositoryIamMember(name string, args ArtifactRegistryRepositoryIamMemberArgs) *ArtifactRegistryRepositoryIamMember {
	return &ArtifactRegistryRepositoryIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ArtifactRegistryRepositoryIamMember)(nil)

type ArtifactRegistryRepositoryIamMember struct {
	Name  string
	Args  ArtifactRegistryRepositoryIamMemberArgs
	state *artifactRegistryRepositoryIamMemberState
}

func (arrim *ArtifactRegistryRepositoryIamMember) Type() string {
	return "google_artifact_registry_repository_iam_member"
}

func (arrim *ArtifactRegistryRepositoryIamMember) LocalName() string {
	return arrim.Name
}

func (arrim *ArtifactRegistryRepositoryIamMember) Configuration() interface{} {
	return arrim.Args
}

func (arrim *ArtifactRegistryRepositoryIamMember) Attributes() artifactRegistryRepositoryIamMemberAttributes {
	return artifactRegistryRepositoryIamMemberAttributes{ref: terra.ReferenceResource(arrim)}
}

func (arrim *ArtifactRegistryRepositoryIamMember) ImportState(av io.Reader) error {
	arrim.state = &artifactRegistryRepositoryIamMemberState{}
	if err := json.NewDecoder(av).Decode(arrim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arrim.Type(), arrim.LocalName(), err)
	}
	return nil
}

func (arrim *ArtifactRegistryRepositoryIamMember) State() (*artifactRegistryRepositoryIamMemberState, bool) {
	return arrim.state, arrim.state != nil
}

func (arrim *ArtifactRegistryRepositoryIamMember) StateMust() *artifactRegistryRepositoryIamMemberState {
	if arrim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arrim.Type(), arrim.LocalName()))
	}
	return arrim.state
}

func (arrim *ArtifactRegistryRepositoryIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(arrim)
}

type ArtifactRegistryRepositoryIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *artifactregistryrepositoryiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that ArtifactRegistryRepositoryIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type artifactRegistryRepositoryIamMemberAttributes struct {
	ref terra.Reference
}

func (arrim artifactRegistryRepositoryIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(arrim.ref.Append("etag"))
}

func (arrim artifactRegistryRepositoryIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(arrim.ref.Append("id"))
}

func (arrim artifactRegistryRepositoryIamMemberAttributes) Location() terra.StringValue {
	return terra.ReferenceString(arrim.ref.Append("location"))
}

func (arrim artifactRegistryRepositoryIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(arrim.ref.Append("member"))
}

func (arrim artifactRegistryRepositoryIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(arrim.ref.Append("project"))
}

func (arrim artifactRegistryRepositoryIamMemberAttributes) Repository() terra.StringValue {
	return terra.ReferenceString(arrim.ref.Append("repository"))
}

func (arrim artifactRegistryRepositoryIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(arrim.ref.Append("role"))
}

func (arrim artifactRegistryRepositoryIamMemberAttributes) Condition() terra.ListValue[artifactregistryrepositoryiammember.ConditionAttributes] {
	return terra.ReferenceList[artifactregistryrepositoryiammember.ConditionAttributes](arrim.ref.Append("condition"))
}

type artifactRegistryRepositoryIamMemberState struct {
	Etag       string                                               `json:"etag"`
	Id         string                                               `json:"id"`
	Location   string                                               `json:"location"`
	Member     string                                               `json:"member"`
	Project    string                                               `json:"project"`
	Repository string                                               `json:"repository"`
	Role       string                                               `json:"role"`
	Condition  []artifactregistryrepositoryiammember.ConditionState `json:"condition"`
}
