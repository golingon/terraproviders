// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	datastreamprivateconnection "github.com/golingon/terraproviders/google/4.59.0/datastreamprivateconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDatastreamPrivateConnection(name string, args DatastreamPrivateConnectionArgs) *DatastreamPrivateConnection {
	return &DatastreamPrivateConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatastreamPrivateConnection)(nil)

type DatastreamPrivateConnection struct {
	Name  string
	Args  DatastreamPrivateConnectionArgs
	state *datastreamPrivateConnectionState
}

func (dpc *DatastreamPrivateConnection) Type() string {
	return "google_datastream_private_connection"
}

func (dpc *DatastreamPrivateConnection) LocalName() string {
	return dpc.Name
}

func (dpc *DatastreamPrivateConnection) Configuration() interface{} {
	return dpc.Args
}

func (dpc *DatastreamPrivateConnection) Attributes() datastreamPrivateConnectionAttributes {
	return datastreamPrivateConnectionAttributes{ref: terra.ReferenceResource(dpc)}
}

func (dpc *DatastreamPrivateConnection) ImportState(av io.Reader) error {
	dpc.state = &datastreamPrivateConnectionState{}
	if err := json.NewDecoder(av).Decode(dpc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dpc.Type(), dpc.LocalName(), err)
	}
	return nil
}

func (dpc *DatastreamPrivateConnection) State() (*datastreamPrivateConnectionState, bool) {
	return dpc.state, dpc.state != nil
}

func (dpc *DatastreamPrivateConnection) StateMust() *datastreamPrivateConnectionState {
	if dpc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dpc.Type(), dpc.LocalName()))
	}
	return dpc.state
}

func (dpc *DatastreamPrivateConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(dpc)
}

type DatastreamPrivateConnectionArgs struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// PrivateConnectionId: string, required
	PrivateConnectionId terra.StringValue `hcl:"private_connection_id,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Error: min=0
	Error []datastreamprivateconnection.Error `hcl:"error,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datastreamprivateconnection.Timeouts `hcl:"timeouts,block"`
	// VpcPeeringConfig: required
	VpcPeeringConfig *datastreamprivateconnection.VpcPeeringConfig `hcl:"vpc_peering_config,block" validate:"required"`
	// DependsOn contains resources that DatastreamPrivateConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type datastreamPrivateConnectionAttributes struct {
	ref terra.Reference
}

func (dpc datastreamPrivateConnectionAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(dpc.ref.Append("display_name"))
}

func (dpc datastreamPrivateConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dpc.ref.Append("id"))
}

func (dpc datastreamPrivateConnectionAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dpc.ref.Append("labels"))
}

func (dpc datastreamPrivateConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dpc.ref.Append("location"))
}

func (dpc datastreamPrivateConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dpc.ref.Append("name"))
}

func (dpc datastreamPrivateConnectionAttributes) PrivateConnectionId() terra.StringValue {
	return terra.ReferenceString(dpc.ref.Append("private_connection_id"))
}

func (dpc datastreamPrivateConnectionAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dpc.ref.Append("project"))
}

func (dpc datastreamPrivateConnectionAttributes) State() terra.StringValue {
	return terra.ReferenceString(dpc.ref.Append("state"))
}

func (dpc datastreamPrivateConnectionAttributes) Error() terra.ListValue[datastreamprivateconnection.ErrorAttributes] {
	return terra.ReferenceList[datastreamprivateconnection.ErrorAttributes](dpc.ref.Append("error"))
}

func (dpc datastreamPrivateConnectionAttributes) Timeouts() datastreamprivateconnection.TimeoutsAttributes {
	return terra.ReferenceSingle[datastreamprivateconnection.TimeoutsAttributes](dpc.ref.Append("timeouts"))
}

func (dpc datastreamPrivateConnectionAttributes) VpcPeeringConfig() terra.ListValue[datastreamprivateconnection.VpcPeeringConfigAttributes] {
	return terra.ReferenceList[datastreamprivateconnection.VpcPeeringConfigAttributes](dpc.ref.Append("vpc_peering_config"))
}

type datastreamPrivateConnectionState struct {
	DisplayName         string                                              `json:"display_name"`
	Id                  string                                              `json:"id"`
	Labels              map[string]string                                   `json:"labels"`
	Location            string                                              `json:"location"`
	Name                string                                              `json:"name"`
	PrivateConnectionId string                                              `json:"private_connection_id"`
	Project             string                                              `json:"project"`
	State               string                                              `json:"state"`
	Error               []datastreamprivateconnection.ErrorState            `json:"error"`
	Timeouts            *datastreamprivateconnection.TimeoutsState          `json:"timeouts"`
	VpcPeeringConfig    []datastreamprivateconnection.VpcPeeringConfigState `json:"vpc_peering_config"`
}
