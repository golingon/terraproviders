// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	alloydbcluster "github.com/golingon/terraproviders/google/4.59.0/alloydbcluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAlloydbCluster(name string, args AlloydbClusterArgs) *AlloydbCluster {
	return &AlloydbCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AlloydbCluster)(nil)

type AlloydbCluster struct {
	Name  string
	Args  AlloydbClusterArgs
	state *alloydbClusterState
}

func (ac *AlloydbCluster) Type() string {
	return "google_alloydb_cluster"
}

func (ac *AlloydbCluster) LocalName() string {
	return ac.Name
}

func (ac *AlloydbCluster) Configuration() interface{} {
	return ac.Args
}

func (ac *AlloydbCluster) Attributes() alloydbClusterAttributes {
	return alloydbClusterAttributes{ref: terra.ReferenceResource(ac)}
}

func (ac *AlloydbCluster) ImportState(av io.Reader) error {
	ac.state = &alloydbClusterState{}
	if err := json.NewDecoder(av).Decode(ac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ac.Type(), ac.LocalName(), err)
	}
	return nil
}

func (ac *AlloydbCluster) State() (*alloydbClusterState, bool) {
	return ac.state, ac.state != nil
}

func (ac *AlloydbCluster) StateMust() *alloydbClusterState {
	if ac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ac.Type(), ac.LocalName()))
	}
	return ac.state
}

func (ac *AlloydbCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(ac)
}

type AlloydbClusterArgs struct {
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// BackupSource: min=0
	BackupSource []alloydbcluster.BackupSource `hcl:"backup_source,block" validate:"min=0"`
	// MigrationSource: min=0
	MigrationSource []alloydbcluster.MigrationSource `hcl:"migration_source,block" validate:"min=0"`
	// AutomatedBackupPolicy: optional
	AutomatedBackupPolicy *alloydbcluster.AutomatedBackupPolicy `hcl:"automated_backup_policy,block"`
	// InitialUser: optional
	InitialUser *alloydbcluster.InitialUser `hcl:"initial_user,block"`
	// Timeouts: optional
	Timeouts *alloydbcluster.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AlloydbCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type alloydbClusterAttributes struct {
	ref terra.Reference
}

func (ac alloydbClusterAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("cluster_id"))
}

func (ac alloydbClusterAttributes) DatabaseVersion() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("database_version"))
}

func (ac alloydbClusterAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("display_name"))
}

func (ac alloydbClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("id"))
}

func (ac alloydbClusterAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ac.ref.Append("labels"))
}

func (ac alloydbClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("location"))
}

func (ac alloydbClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("name"))
}

func (ac alloydbClusterAttributes) Network() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("network"))
}

func (ac alloydbClusterAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("project"))
}

func (ac alloydbClusterAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("uid"))
}

func (ac alloydbClusterAttributes) BackupSource() terra.ListValue[alloydbcluster.BackupSourceAttributes] {
	return terra.ReferenceList[alloydbcluster.BackupSourceAttributes](ac.ref.Append("backup_source"))
}

func (ac alloydbClusterAttributes) MigrationSource() terra.ListValue[alloydbcluster.MigrationSourceAttributes] {
	return terra.ReferenceList[alloydbcluster.MigrationSourceAttributes](ac.ref.Append("migration_source"))
}

func (ac alloydbClusterAttributes) AutomatedBackupPolicy() terra.ListValue[alloydbcluster.AutomatedBackupPolicyAttributes] {
	return terra.ReferenceList[alloydbcluster.AutomatedBackupPolicyAttributes](ac.ref.Append("automated_backup_policy"))
}

func (ac alloydbClusterAttributes) InitialUser() terra.ListValue[alloydbcluster.InitialUserAttributes] {
	return terra.ReferenceList[alloydbcluster.InitialUserAttributes](ac.ref.Append("initial_user"))
}

func (ac alloydbClusterAttributes) Timeouts() alloydbcluster.TimeoutsAttributes {
	return terra.ReferenceSingle[alloydbcluster.TimeoutsAttributes](ac.ref.Append("timeouts"))
}

type alloydbClusterState struct {
	ClusterId             string                                      `json:"cluster_id"`
	DatabaseVersion       string                                      `json:"database_version"`
	DisplayName           string                                      `json:"display_name"`
	Id                    string                                      `json:"id"`
	Labels                map[string]string                           `json:"labels"`
	Location              string                                      `json:"location"`
	Name                  string                                      `json:"name"`
	Network               string                                      `json:"network"`
	Project               string                                      `json:"project"`
	Uid                   string                                      `json:"uid"`
	BackupSource          []alloydbcluster.BackupSourceState          `json:"backup_source"`
	MigrationSource       []alloydbcluster.MigrationSourceState       `json:"migration_source"`
	AutomatedBackupPolicy []alloydbcluster.AutomatedBackupPolicyState `json:"automated_backup_policy"`
	InitialUser           []alloydbcluster.InitialUserState           `json:"initial_user"`
	Timeouts              *alloydbcluster.TimeoutsState               `json:"timeouts"`
}
