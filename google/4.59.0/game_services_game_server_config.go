// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	gameservicesgameserverconfig "github.com/golingon/terraproviders/google/4.59.0/gameservicesgameserverconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGameServicesGameServerConfig(name string, args GameServicesGameServerConfigArgs) *GameServicesGameServerConfig {
	return &GameServicesGameServerConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GameServicesGameServerConfig)(nil)

type GameServicesGameServerConfig struct {
	Name  string
	Args  GameServicesGameServerConfigArgs
	state *gameServicesGameServerConfigState
}

func (gsgsc *GameServicesGameServerConfig) Type() string {
	return "google_game_services_game_server_config"
}

func (gsgsc *GameServicesGameServerConfig) LocalName() string {
	return gsgsc.Name
}

func (gsgsc *GameServicesGameServerConfig) Configuration() interface{} {
	return gsgsc.Args
}

func (gsgsc *GameServicesGameServerConfig) Attributes() gameServicesGameServerConfigAttributes {
	return gameServicesGameServerConfigAttributes{ref: terra.ReferenceResource(gsgsc)}
}

func (gsgsc *GameServicesGameServerConfig) ImportState(av io.Reader) error {
	gsgsc.state = &gameServicesGameServerConfigState{}
	if err := json.NewDecoder(av).Decode(gsgsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsgsc.Type(), gsgsc.LocalName(), err)
	}
	return nil
}

func (gsgsc *GameServicesGameServerConfig) State() (*gameServicesGameServerConfigState, bool) {
	return gsgsc.state, gsgsc.state != nil
}

func (gsgsc *GameServicesGameServerConfig) StateMust() *gameServicesGameServerConfigState {
	if gsgsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsgsc.Type(), gsgsc.LocalName()))
	}
	return gsgsc.state
}

func (gsgsc *GameServicesGameServerConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(gsgsc)
}

type GameServicesGameServerConfigArgs struct {
	// ConfigId: string, required
	ConfigId terra.StringValue `hcl:"config_id,attr" validate:"required"`
	// DeploymentId: string, required
	DeploymentId terra.StringValue `hcl:"deployment_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// FleetConfigs: min=1
	FleetConfigs []gameservicesgameserverconfig.FleetConfigs `hcl:"fleet_configs,block" validate:"min=1"`
	// ScalingConfigs: min=0
	ScalingConfigs []gameservicesgameserverconfig.ScalingConfigs `hcl:"scaling_configs,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *gameservicesgameserverconfig.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that GameServicesGameServerConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type gameServicesGameServerConfigAttributes struct {
	ref terra.Reference
}

func (gsgsc gameServicesGameServerConfigAttributes) ConfigId() terra.StringValue {
	return terra.ReferenceString(gsgsc.ref.Append("config_id"))
}

func (gsgsc gameServicesGameServerConfigAttributes) DeploymentId() terra.StringValue {
	return terra.ReferenceString(gsgsc.ref.Append("deployment_id"))
}

func (gsgsc gameServicesGameServerConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceString(gsgsc.ref.Append("description"))
}

func (gsgsc gameServicesGameServerConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gsgsc.ref.Append("id"))
}

func (gsgsc gameServicesGameServerConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gsgsc.ref.Append("labels"))
}

func (gsgsc gameServicesGameServerConfigAttributes) Location() terra.StringValue {
	return terra.ReferenceString(gsgsc.ref.Append("location"))
}

func (gsgsc gameServicesGameServerConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gsgsc.ref.Append("name"))
}

func (gsgsc gameServicesGameServerConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceString(gsgsc.ref.Append("project"))
}

func (gsgsc gameServicesGameServerConfigAttributes) FleetConfigs() terra.ListValue[gameservicesgameserverconfig.FleetConfigsAttributes] {
	return terra.ReferenceList[gameservicesgameserverconfig.FleetConfigsAttributes](gsgsc.ref.Append("fleet_configs"))
}

func (gsgsc gameServicesGameServerConfigAttributes) ScalingConfigs() terra.ListValue[gameservicesgameserverconfig.ScalingConfigsAttributes] {
	return terra.ReferenceList[gameservicesgameserverconfig.ScalingConfigsAttributes](gsgsc.ref.Append("scaling_configs"))
}

func (gsgsc gameServicesGameServerConfigAttributes) Timeouts() gameservicesgameserverconfig.TimeoutsAttributes {
	return terra.ReferenceSingle[gameservicesgameserverconfig.TimeoutsAttributes](gsgsc.ref.Append("timeouts"))
}

type gameServicesGameServerConfigState struct {
	ConfigId       string                                             `json:"config_id"`
	DeploymentId   string                                             `json:"deployment_id"`
	Description    string                                             `json:"description"`
	Id             string                                             `json:"id"`
	Labels         map[string]string                                  `json:"labels"`
	Location       string                                             `json:"location"`
	Name           string                                             `json:"name"`
	Project        string                                             `json:"project"`
	FleetConfigs   []gameservicesgameserverconfig.FleetConfigsState   `json:"fleet_configs"`
	ScalingConfigs []gameservicesgameserverconfig.ScalingConfigsState `json:"scaling_configs"`
	Timeouts       *gameservicesgameserverconfig.TimeoutsState        `json:"timeouts"`
}
