// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIapWebBackendServiceIamPolicy(name string, args IapWebBackendServiceIamPolicyArgs) *IapWebBackendServiceIamPolicy {
	return &IapWebBackendServiceIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IapWebBackendServiceIamPolicy)(nil)

type IapWebBackendServiceIamPolicy struct {
	Name  string
	Args  IapWebBackendServiceIamPolicyArgs
	state *iapWebBackendServiceIamPolicyState
}

func (iwbsip *IapWebBackendServiceIamPolicy) Type() string {
	return "google_iap_web_backend_service_iam_policy"
}

func (iwbsip *IapWebBackendServiceIamPolicy) LocalName() string {
	return iwbsip.Name
}

func (iwbsip *IapWebBackendServiceIamPolicy) Configuration() interface{} {
	return iwbsip.Args
}

func (iwbsip *IapWebBackendServiceIamPolicy) Attributes() iapWebBackendServiceIamPolicyAttributes {
	return iapWebBackendServiceIamPolicyAttributes{ref: terra.ReferenceResource(iwbsip)}
}

func (iwbsip *IapWebBackendServiceIamPolicy) ImportState(av io.Reader) error {
	iwbsip.state = &iapWebBackendServiceIamPolicyState{}
	if err := json.NewDecoder(av).Decode(iwbsip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iwbsip.Type(), iwbsip.LocalName(), err)
	}
	return nil
}

func (iwbsip *IapWebBackendServiceIamPolicy) State() (*iapWebBackendServiceIamPolicyState, bool) {
	return iwbsip.state, iwbsip.state != nil
}

func (iwbsip *IapWebBackendServiceIamPolicy) StateMust() *iapWebBackendServiceIamPolicyState {
	if iwbsip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iwbsip.Type(), iwbsip.LocalName()))
	}
	return iwbsip.state
}

func (iwbsip *IapWebBackendServiceIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(iwbsip)
}

type IapWebBackendServiceIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// WebBackendService: string, required
	WebBackendService terra.StringValue `hcl:"web_backend_service,attr" validate:"required"`
	// DependsOn contains resources that IapWebBackendServiceIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iapWebBackendServiceIamPolicyAttributes struct {
	ref terra.Reference
}

func (iwbsip iapWebBackendServiceIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(iwbsip.ref.Append("etag"))
}

func (iwbsip iapWebBackendServiceIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iwbsip.ref.Append("id"))
}

func (iwbsip iapWebBackendServiceIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(iwbsip.ref.Append("policy_data"))
}

func (iwbsip iapWebBackendServiceIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(iwbsip.ref.Append("project"))
}

func (iwbsip iapWebBackendServiceIamPolicyAttributes) WebBackendService() terra.StringValue {
	return terra.ReferenceString(iwbsip.ref.Append("web_backend_service"))
}

type iapWebBackendServiceIamPolicyState struct {
	Etag              string `json:"etag"`
	Id                string `json:"id"`
	PolicyData        string `json:"policy_data"`
	Project           string `json:"project"`
	WebBackendService string `json:"web_backend_service"`
}
