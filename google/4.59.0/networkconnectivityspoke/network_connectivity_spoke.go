// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package networkconnectivityspoke

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type LinkedInterconnectAttachments struct {
	// SiteToSiteDataTransfer: bool, required
	SiteToSiteDataTransfer terra.BoolValue `hcl:"site_to_site_data_transfer,attr" validate:"required"`
	// Uris: list of string, required
	Uris terra.ListValue[terra.StringValue] `hcl:"uris,attr" validate:"required"`
}

type LinkedRouterApplianceInstances struct {
	// SiteToSiteDataTransfer: bool, required
	SiteToSiteDataTransfer terra.BoolValue `hcl:"site_to_site_data_transfer,attr" validate:"required"`
	// Instances: min=1
	Instances []Instances `hcl:"instances,block" validate:"min=1"`
}

type Instances struct {
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// VirtualMachine: string, optional
	VirtualMachine terra.StringValue `hcl:"virtual_machine,attr"`
}

type LinkedVpnTunnels struct {
	// SiteToSiteDataTransfer: bool, required
	SiteToSiteDataTransfer terra.BoolValue `hcl:"site_to_site_data_transfer,attr" validate:"required"`
	// Uris: list of string, required
	Uris terra.ListValue[terra.StringValue] `hcl:"uris,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type LinkedInterconnectAttachmentsAttributes struct {
	ref terra.Reference
}

func (lia LinkedInterconnectAttachmentsAttributes) InternalRef() terra.Reference {
	return lia.ref
}

func (lia LinkedInterconnectAttachmentsAttributes) InternalWithRef(ref terra.Reference) LinkedInterconnectAttachmentsAttributes {
	return LinkedInterconnectAttachmentsAttributes{ref: ref}
}

func (lia LinkedInterconnectAttachmentsAttributes) InternalTokens() hclwrite.Tokens {
	return lia.ref.InternalTokens()
}

func (lia LinkedInterconnectAttachmentsAttributes) SiteToSiteDataTransfer() terra.BoolValue {
	return terra.ReferenceBool(lia.ref.Append("site_to_site_data_transfer"))
}

func (lia LinkedInterconnectAttachmentsAttributes) Uris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](lia.ref.Append("uris"))
}

type LinkedRouterApplianceInstancesAttributes struct {
	ref terra.Reference
}

func (lrai LinkedRouterApplianceInstancesAttributes) InternalRef() terra.Reference {
	return lrai.ref
}

func (lrai LinkedRouterApplianceInstancesAttributes) InternalWithRef(ref terra.Reference) LinkedRouterApplianceInstancesAttributes {
	return LinkedRouterApplianceInstancesAttributes{ref: ref}
}

func (lrai LinkedRouterApplianceInstancesAttributes) InternalTokens() hclwrite.Tokens {
	return lrai.ref.InternalTokens()
}

func (lrai LinkedRouterApplianceInstancesAttributes) SiteToSiteDataTransfer() terra.BoolValue {
	return terra.ReferenceBool(lrai.ref.Append("site_to_site_data_transfer"))
}

func (lrai LinkedRouterApplianceInstancesAttributes) Instances() terra.ListValue[InstancesAttributes] {
	return terra.ReferenceList[InstancesAttributes](lrai.ref.Append("instances"))
}

type InstancesAttributes struct {
	ref terra.Reference
}

func (i InstancesAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i InstancesAttributes) InternalWithRef(ref terra.Reference) InstancesAttributes {
	return InstancesAttributes{ref: ref}
}

func (i InstancesAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i InstancesAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("ip_address"))
}

func (i InstancesAttributes) VirtualMachine() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("virtual_machine"))
}

type LinkedVpnTunnelsAttributes struct {
	ref terra.Reference
}

func (lvt LinkedVpnTunnelsAttributes) InternalRef() terra.Reference {
	return lvt.ref
}

func (lvt LinkedVpnTunnelsAttributes) InternalWithRef(ref terra.Reference) LinkedVpnTunnelsAttributes {
	return LinkedVpnTunnelsAttributes{ref: ref}
}

func (lvt LinkedVpnTunnelsAttributes) InternalTokens() hclwrite.Tokens {
	return lvt.ref.InternalTokens()
}

func (lvt LinkedVpnTunnelsAttributes) SiteToSiteDataTransfer() terra.BoolValue {
	return terra.ReferenceBool(lvt.ref.Append("site_to_site_data_transfer"))
}

func (lvt LinkedVpnTunnelsAttributes) Uris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](lvt.ref.Append("uris"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type LinkedInterconnectAttachmentsState struct {
	SiteToSiteDataTransfer bool     `json:"site_to_site_data_transfer"`
	Uris                   []string `json:"uris"`
}

type LinkedRouterApplianceInstancesState struct {
	SiteToSiteDataTransfer bool             `json:"site_to_site_data_transfer"`
	Instances              []InstancesState `json:"instances"`
}

type InstancesState struct {
	IpAddress      string `json:"ip_address"`
	VirtualMachine string `json:"virtual_machine"`
}

type LinkedVpnTunnelsState struct {
	SiteToSiteDataTransfer bool     `json:"site_to_site_data_transfer"`
	Uris                   []string `json:"uris"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
