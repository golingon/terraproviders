// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeregiontargettcpproxy "github.com/golingon/terraproviders/google/4.59.0/computeregiontargettcpproxy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeRegionTargetTcpProxy(name string, args ComputeRegionTargetTcpProxyArgs) *ComputeRegionTargetTcpProxy {
	return &ComputeRegionTargetTcpProxy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeRegionTargetTcpProxy)(nil)

type ComputeRegionTargetTcpProxy struct {
	Name  string
	Args  ComputeRegionTargetTcpProxyArgs
	state *computeRegionTargetTcpProxyState
}

func (crttp *ComputeRegionTargetTcpProxy) Type() string {
	return "google_compute_region_target_tcp_proxy"
}

func (crttp *ComputeRegionTargetTcpProxy) LocalName() string {
	return crttp.Name
}

func (crttp *ComputeRegionTargetTcpProxy) Configuration() interface{} {
	return crttp.Args
}

func (crttp *ComputeRegionTargetTcpProxy) Attributes() computeRegionTargetTcpProxyAttributes {
	return computeRegionTargetTcpProxyAttributes{ref: terra.ReferenceResource(crttp)}
}

func (crttp *ComputeRegionTargetTcpProxy) ImportState(av io.Reader) error {
	crttp.state = &computeRegionTargetTcpProxyState{}
	if err := json.NewDecoder(av).Decode(crttp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crttp.Type(), crttp.LocalName(), err)
	}
	return nil
}

func (crttp *ComputeRegionTargetTcpProxy) State() (*computeRegionTargetTcpProxyState, bool) {
	return crttp.state, crttp.state != nil
}

func (crttp *ComputeRegionTargetTcpProxy) StateMust() *computeRegionTargetTcpProxyState {
	if crttp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crttp.Type(), crttp.LocalName()))
	}
	return crttp.state
}

func (crttp *ComputeRegionTargetTcpProxy) DependOn() terra.Reference {
	return terra.ReferenceResource(crttp)
}

type ComputeRegionTargetTcpProxyArgs struct {
	// BackendService: string, required
	BackendService terra.StringValue `hcl:"backend_service,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ProxyBind: bool, optional
	ProxyBind terra.BoolValue `hcl:"proxy_bind,attr"`
	// ProxyHeader: string, optional
	ProxyHeader terra.StringValue `hcl:"proxy_header,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Timeouts: optional
	Timeouts *computeregiontargettcpproxy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeRegionTargetTcpProxy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeRegionTargetTcpProxyAttributes struct {
	ref terra.Reference
}

func (crttp computeRegionTargetTcpProxyAttributes) BackendService() terra.StringValue {
	return terra.ReferenceString(crttp.ref.Append("backend_service"))
}

func (crttp computeRegionTargetTcpProxyAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(crttp.ref.Append("creation_timestamp"))
}

func (crttp computeRegionTargetTcpProxyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(crttp.ref.Append("description"))
}

func (crttp computeRegionTargetTcpProxyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crttp.ref.Append("id"))
}

func (crttp computeRegionTargetTcpProxyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crttp.ref.Append("name"))
}

func (crttp computeRegionTargetTcpProxyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crttp.ref.Append("project"))
}

func (crttp computeRegionTargetTcpProxyAttributes) ProxyBind() terra.BoolValue {
	return terra.ReferenceBool(crttp.ref.Append("proxy_bind"))
}

func (crttp computeRegionTargetTcpProxyAttributes) ProxyHeader() terra.StringValue {
	return terra.ReferenceString(crttp.ref.Append("proxy_header"))
}

func (crttp computeRegionTargetTcpProxyAttributes) ProxyId() terra.NumberValue {
	return terra.ReferenceNumber(crttp.ref.Append("proxy_id"))
}

func (crttp computeRegionTargetTcpProxyAttributes) Region() terra.StringValue {
	return terra.ReferenceString(crttp.ref.Append("region"))
}

func (crttp computeRegionTargetTcpProxyAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(crttp.ref.Append("self_link"))
}

func (crttp computeRegionTargetTcpProxyAttributes) Timeouts() computeregiontargettcpproxy.TimeoutsAttributes {
	return terra.ReferenceSingle[computeregiontargettcpproxy.TimeoutsAttributes](crttp.ref.Append("timeouts"))
}

type computeRegionTargetTcpProxyState struct {
	BackendService    string                                     `json:"backend_service"`
	CreationTimestamp string                                     `json:"creation_timestamp"`
	Description       string                                     `json:"description"`
	Id                string                                     `json:"id"`
	Name              string                                     `json:"name"`
	Project           string                                     `json:"project"`
	ProxyBind         bool                                       `json:"proxy_bind"`
	ProxyHeader       string                                     `json:"proxy_header"`
	ProxyId           float64                                    `json:"proxy_id"`
	Region            string                                     `json:"region"`
	SelfLink          string                                     `json:"self_link"`
	Timeouts          *computeregiontargettcpproxy.TimeoutsState `json:"timeouts"`
}
