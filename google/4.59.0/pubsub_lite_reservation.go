// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	pubsublitereservation "github.com/golingon/terraproviders/google/4.59.0/pubsublitereservation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPubsubLiteReservation(name string, args PubsubLiteReservationArgs) *PubsubLiteReservation {
	return &PubsubLiteReservation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PubsubLiteReservation)(nil)

type PubsubLiteReservation struct {
	Name  string
	Args  PubsubLiteReservationArgs
	state *pubsubLiteReservationState
}

func (plr *PubsubLiteReservation) Type() string {
	return "google_pubsub_lite_reservation"
}

func (plr *PubsubLiteReservation) LocalName() string {
	return plr.Name
}

func (plr *PubsubLiteReservation) Configuration() interface{} {
	return plr.Args
}

func (plr *PubsubLiteReservation) Attributes() pubsubLiteReservationAttributes {
	return pubsubLiteReservationAttributes{ref: terra.ReferenceResource(plr)}
}

func (plr *PubsubLiteReservation) ImportState(av io.Reader) error {
	plr.state = &pubsubLiteReservationState{}
	if err := json.NewDecoder(av).Decode(plr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", plr.Type(), plr.LocalName(), err)
	}
	return nil
}

func (plr *PubsubLiteReservation) State() (*pubsubLiteReservationState, bool) {
	return plr.state, plr.state != nil
}

func (plr *PubsubLiteReservation) StateMust() *pubsubLiteReservationState {
	if plr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", plr.Type(), plr.LocalName()))
	}
	return plr.state
}

func (plr *PubsubLiteReservation) DependOn() terra.Reference {
	return terra.ReferenceResource(plr)
}

type PubsubLiteReservationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ThroughputCapacity: number, required
	ThroughputCapacity terra.NumberValue `hcl:"throughput_capacity,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *pubsublitereservation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PubsubLiteReservation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type pubsubLiteReservationAttributes struct {
	ref terra.Reference
}

func (plr pubsubLiteReservationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(plr.ref.Append("id"))
}

func (plr pubsubLiteReservationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(plr.ref.Append("name"))
}

func (plr pubsubLiteReservationAttributes) Project() terra.StringValue {
	return terra.ReferenceString(plr.ref.Append("project"))
}

func (plr pubsubLiteReservationAttributes) Region() terra.StringValue {
	return terra.ReferenceString(plr.ref.Append("region"))
}

func (plr pubsubLiteReservationAttributes) ThroughputCapacity() terra.NumberValue {
	return terra.ReferenceNumber(plr.ref.Append("throughput_capacity"))
}

func (plr pubsubLiteReservationAttributes) Timeouts() pubsublitereservation.TimeoutsAttributes {
	return terra.ReferenceSingle[pubsublitereservation.TimeoutsAttributes](plr.ref.Append("timeouts"))
}

type pubsubLiteReservationState struct {
	Id                 string                               `json:"id"`
	Name               string                               `json:"name"`
	Project            string                               `json:"project"`
	Region             string                               `json:"region"`
	ThroughputCapacity float64                              `json:"throughput_capacity"`
	Timeouts           *pubsublitereservation.TimeoutsState `json:"timeouts"`
}
