// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	kmscryptokeyversion "github.com/golingon/terraproviders/google/4.59.0/kmscryptokeyversion"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKmsCryptoKeyVersion(name string, args KmsCryptoKeyVersionArgs) *KmsCryptoKeyVersion {
	return &KmsCryptoKeyVersion{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KmsCryptoKeyVersion)(nil)

type KmsCryptoKeyVersion struct {
	Name  string
	Args  KmsCryptoKeyVersionArgs
	state *kmsCryptoKeyVersionState
}

func (kckv *KmsCryptoKeyVersion) Type() string {
	return "google_kms_crypto_key_version"
}

func (kckv *KmsCryptoKeyVersion) LocalName() string {
	return kckv.Name
}

func (kckv *KmsCryptoKeyVersion) Configuration() interface{} {
	return kckv.Args
}

func (kckv *KmsCryptoKeyVersion) Attributes() kmsCryptoKeyVersionAttributes {
	return kmsCryptoKeyVersionAttributes{ref: terra.ReferenceResource(kckv)}
}

func (kckv *KmsCryptoKeyVersion) ImportState(av io.Reader) error {
	kckv.state = &kmsCryptoKeyVersionState{}
	if err := json.NewDecoder(av).Decode(kckv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kckv.Type(), kckv.LocalName(), err)
	}
	return nil
}

func (kckv *KmsCryptoKeyVersion) State() (*kmsCryptoKeyVersionState, bool) {
	return kckv.state, kckv.state != nil
}

func (kckv *KmsCryptoKeyVersion) StateMust() *kmsCryptoKeyVersionState {
	if kckv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kckv.Type(), kckv.LocalName()))
	}
	return kckv.state
}

func (kckv *KmsCryptoKeyVersion) DependOn() terra.Reference {
	return terra.ReferenceResource(kckv)
}

type KmsCryptoKeyVersionArgs struct {
	// CryptoKey: string, required
	CryptoKey terra.StringValue `hcl:"crypto_key,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// Attestation: min=0
	Attestation []kmscryptokeyversion.Attestation `hcl:"attestation,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *kmscryptokeyversion.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that KmsCryptoKeyVersion depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kmsCryptoKeyVersionAttributes struct {
	ref terra.Reference
}

func (kckv kmsCryptoKeyVersionAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceString(kckv.ref.Append("algorithm"))
}

func (kckv kmsCryptoKeyVersionAttributes) CryptoKey() terra.StringValue {
	return terra.ReferenceString(kckv.ref.Append("crypto_key"))
}

func (kckv kmsCryptoKeyVersionAttributes) GenerateTime() terra.StringValue {
	return terra.ReferenceString(kckv.ref.Append("generate_time"))
}

func (kckv kmsCryptoKeyVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kckv.ref.Append("id"))
}

func (kckv kmsCryptoKeyVersionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(kckv.ref.Append("name"))
}

func (kckv kmsCryptoKeyVersionAttributes) ProtectionLevel() terra.StringValue {
	return terra.ReferenceString(kckv.ref.Append("protection_level"))
}

func (kckv kmsCryptoKeyVersionAttributes) State() terra.StringValue {
	return terra.ReferenceString(kckv.ref.Append("state"))
}

func (kckv kmsCryptoKeyVersionAttributes) Attestation() terra.ListValue[kmscryptokeyversion.AttestationAttributes] {
	return terra.ReferenceList[kmscryptokeyversion.AttestationAttributes](kckv.ref.Append("attestation"))
}

func (kckv kmsCryptoKeyVersionAttributes) Timeouts() kmscryptokeyversion.TimeoutsAttributes {
	return terra.ReferenceSingle[kmscryptokeyversion.TimeoutsAttributes](kckv.ref.Append("timeouts"))
}

type kmsCryptoKeyVersionState struct {
	Algorithm       string                                 `json:"algorithm"`
	CryptoKey       string                                 `json:"crypto_key"`
	GenerateTime    string                                 `json:"generate_time"`
	Id              string                                 `json:"id"`
	Name            string                                 `json:"name"`
	ProtectionLevel string                                 `json:"protection_level"`
	State           string                                 `json:"state"`
	Attestation     []kmscryptokeyversion.AttestationState `json:"attestation"`
	Timeouts        *kmscryptokeyversion.TimeoutsState     `json:"timeouts"`
}
