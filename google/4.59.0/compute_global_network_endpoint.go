// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeglobalnetworkendpoint "github.com/golingon/terraproviders/google/4.59.0/computeglobalnetworkendpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeGlobalNetworkEndpoint(name string, args ComputeGlobalNetworkEndpointArgs) *ComputeGlobalNetworkEndpoint {
	return &ComputeGlobalNetworkEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeGlobalNetworkEndpoint)(nil)

type ComputeGlobalNetworkEndpoint struct {
	Name  string
	Args  ComputeGlobalNetworkEndpointArgs
	state *computeGlobalNetworkEndpointState
}

func (cgne *ComputeGlobalNetworkEndpoint) Type() string {
	return "google_compute_global_network_endpoint"
}

func (cgne *ComputeGlobalNetworkEndpoint) LocalName() string {
	return cgne.Name
}

func (cgne *ComputeGlobalNetworkEndpoint) Configuration() interface{} {
	return cgne.Args
}

func (cgne *ComputeGlobalNetworkEndpoint) Attributes() computeGlobalNetworkEndpointAttributes {
	return computeGlobalNetworkEndpointAttributes{ref: terra.ReferenceResource(cgne)}
}

func (cgne *ComputeGlobalNetworkEndpoint) ImportState(av io.Reader) error {
	cgne.state = &computeGlobalNetworkEndpointState{}
	if err := json.NewDecoder(av).Decode(cgne.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cgne.Type(), cgne.LocalName(), err)
	}
	return nil
}

func (cgne *ComputeGlobalNetworkEndpoint) State() (*computeGlobalNetworkEndpointState, bool) {
	return cgne.state, cgne.state != nil
}

func (cgne *ComputeGlobalNetworkEndpoint) StateMust() *computeGlobalNetworkEndpointState {
	if cgne.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cgne.Type(), cgne.LocalName()))
	}
	return cgne.state
}

func (cgne *ComputeGlobalNetworkEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(cgne)
}

type ComputeGlobalNetworkEndpointArgs struct {
	// Fqdn: string, optional
	Fqdn terra.StringValue `hcl:"fqdn,attr"`
	// GlobalNetworkEndpointGroup: string, required
	GlobalNetworkEndpointGroup terra.StringValue `hcl:"global_network_endpoint_group,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *computeglobalnetworkendpoint.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeGlobalNetworkEndpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeGlobalNetworkEndpointAttributes struct {
	ref terra.Reference
}

func (cgne computeGlobalNetworkEndpointAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(cgne.ref.Append("fqdn"))
}

func (cgne computeGlobalNetworkEndpointAttributes) GlobalNetworkEndpointGroup() terra.StringValue {
	return terra.ReferenceString(cgne.ref.Append("global_network_endpoint_group"))
}

func (cgne computeGlobalNetworkEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cgne.ref.Append("id"))
}

func (cgne computeGlobalNetworkEndpointAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceString(cgne.ref.Append("ip_address"))
}

func (cgne computeGlobalNetworkEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(cgne.ref.Append("port"))
}

func (cgne computeGlobalNetworkEndpointAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cgne.ref.Append("project"))
}

func (cgne computeGlobalNetworkEndpointAttributes) Timeouts() computeglobalnetworkendpoint.TimeoutsAttributes {
	return terra.ReferenceSingle[computeglobalnetworkendpoint.TimeoutsAttributes](cgne.ref.Append("timeouts"))
}

type computeGlobalNetworkEndpointState struct {
	Fqdn                       string                                      `json:"fqdn"`
	GlobalNetworkEndpointGroup string                                      `json:"global_network_endpoint_group"`
	Id                         string                                      `json:"id"`
	IpAddress                  string                                      `json:"ip_address"`
	Port                       float64                                     `json:"port"`
	Project                    string                                      `json:"project"`
	Timeouts                   *computeglobalnetworkendpoint.TimeoutsState `json:"timeouts"`
}
