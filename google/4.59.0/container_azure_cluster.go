// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	containerazurecluster "github.com/golingon/terraproviders/google/4.59.0/containerazurecluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewContainerAzureCluster creates a new instance of [ContainerAzureCluster].
func NewContainerAzureCluster(name string, args ContainerAzureClusterArgs) *ContainerAzureCluster {
	return &ContainerAzureCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ContainerAzureCluster)(nil)

// ContainerAzureCluster represents the Terraform resource google_container_azure_cluster.
type ContainerAzureCluster struct {
	Name      string
	Args      ContainerAzureClusterArgs
	state     *containerAzureClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ContainerAzureCluster].
func (cac *ContainerAzureCluster) Type() string {
	return "google_container_azure_cluster"
}

// LocalName returns the local name for [ContainerAzureCluster].
func (cac *ContainerAzureCluster) LocalName() string {
	return cac.Name
}

// Configuration returns the configuration (args) for [ContainerAzureCluster].
func (cac *ContainerAzureCluster) Configuration() interface{} {
	return cac.Args
}

// DependOn is used for other resources to depend on [ContainerAzureCluster].
func (cac *ContainerAzureCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(cac)
}

// Dependencies returns the list of resources [ContainerAzureCluster] depends_on.
func (cac *ContainerAzureCluster) Dependencies() terra.Dependencies {
	return cac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ContainerAzureCluster].
func (cac *ContainerAzureCluster) LifecycleManagement() *terra.Lifecycle {
	return cac.Lifecycle
}

// Attributes returns the attributes for [ContainerAzureCluster].
func (cac *ContainerAzureCluster) Attributes() containerAzureClusterAttributes {
	return containerAzureClusterAttributes{ref: terra.ReferenceResource(cac)}
}

// ImportState imports the given attribute values into [ContainerAzureCluster]'s state.
func (cac *ContainerAzureCluster) ImportState(av io.Reader) error {
	cac.state = &containerAzureClusterState{}
	if err := json.NewDecoder(av).Decode(cac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cac.Type(), cac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ContainerAzureCluster] has state.
func (cac *ContainerAzureCluster) State() (*containerAzureClusterState, bool) {
	return cac.state, cac.state != nil
}

// StateMust returns the state for [ContainerAzureCluster]. Panics if the state is nil.
func (cac *ContainerAzureCluster) StateMust() *containerAzureClusterState {
	if cac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cac.Type(), cac.LocalName()))
	}
	return cac.state
}

// ContainerAzureClusterArgs contains the configurations for google_container_azure_cluster.
type ContainerAzureClusterArgs struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// AzureRegion: string, required
	AzureRegion terra.StringValue `hcl:"azure_region,attr" validate:"required"`
	// Client: string, optional
	Client terra.StringValue `hcl:"client,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ResourceGroupId: string, required
	ResourceGroupId terra.StringValue `hcl:"resource_group_id,attr" validate:"required"`
	// WorkloadIdentityConfig: min=0
	WorkloadIdentityConfig []containerazurecluster.WorkloadIdentityConfig `hcl:"workload_identity_config,block" validate:"min=0"`
	// Authorization: required
	Authorization *containerazurecluster.Authorization `hcl:"authorization,block" validate:"required"`
	// AzureServicesAuthentication: optional
	AzureServicesAuthentication *containerazurecluster.AzureServicesAuthentication `hcl:"azure_services_authentication,block"`
	// ControlPlane: required
	ControlPlane *containerazurecluster.ControlPlane `hcl:"control_plane,block" validate:"required"`
	// Fleet: required
	Fleet *containerazurecluster.Fleet `hcl:"fleet,block" validate:"required"`
	// Networking: required
	Networking *containerazurecluster.Networking `hcl:"networking,block" validate:"required"`
	// Timeouts: optional
	Timeouts *containerazurecluster.Timeouts `hcl:"timeouts,block"`
}
type containerAzureClusterAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cac.ref.Append("annotations"))
}

// AzureRegion returns a reference to field azure_region of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) AzureRegion() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("azure_region"))
}

// Client returns a reference to field client of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) Client() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("client"))
}

// CreateTime returns a reference to field create_time of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("create_time"))
}

// Description returns a reference to field description of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("description"))
}

// Endpoint returns a reference to field endpoint of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("endpoint"))
}

// Etag returns a reference to field etag of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("etag"))
}

// Id returns a reference to field id of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("id"))
}

// Location returns a reference to field location of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("location"))
}

// Name returns a reference to field name of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("name"))
}

// Project returns a reference to field project of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("project"))
}

// Reconciling returns a reference to field reconciling of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceAsBool(cac.ref.Append("reconciling"))
}

// ResourceGroupId returns a reference to field resource_group_id of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) ResourceGroupId() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("resource_group_id"))
}

// State returns a reference to field state of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("state"))
}

// Uid returns a reference to field uid of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_container_azure_cluster.
func (cac containerAzureClusterAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("update_time"))
}

func (cac containerAzureClusterAttributes) WorkloadIdentityConfig() terra.ListValue[containerazurecluster.WorkloadIdentityConfigAttributes] {
	return terra.ReferenceAsList[containerazurecluster.WorkloadIdentityConfigAttributes](cac.ref.Append("workload_identity_config"))
}

func (cac containerAzureClusterAttributes) Authorization() terra.ListValue[containerazurecluster.AuthorizationAttributes] {
	return terra.ReferenceAsList[containerazurecluster.AuthorizationAttributes](cac.ref.Append("authorization"))
}

func (cac containerAzureClusterAttributes) AzureServicesAuthentication() terra.ListValue[containerazurecluster.AzureServicesAuthenticationAttributes] {
	return terra.ReferenceAsList[containerazurecluster.AzureServicesAuthenticationAttributes](cac.ref.Append("azure_services_authentication"))
}

func (cac containerAzureClusterAttributes) ControlPlane() terra.ListValue[containerazurecluster.ControlPlaneAttributes] {
	return terra.ReferenceAsList[containerazurecluster.ControlPlaneAttributes](cac.ref.Append("control_plane"))
}

func (cac containerAzureClusterAttributes) Fleet() terra.ListValue[containerazurecluster.FleetAttributes] {
	return terra.ReferenceAsList[containerazurecluster.FleetAttributes](cac.ref.Append("fleet"))
}

func (cac containerAzureClusterAttributes) Networking() terra.ListValue[containerazurecluster.NetworkingAttributes] {
	return terra.ReferenceAsList[containerazurecluster.NetworkingAttributes](cac.ref.Append("networking"))
}

func (cac containerAzureClusterAttributes) Timeouts() containerazurecluster.TimeoutsAttributes {
	return terra.ReferenceAsSingle[containerazurecluster.TimeoutsAttributes](cac.ref.Append("timeouts"))
}

type containerAzureClusterState struct {
	Annotations                 map[string]string                                        `json:"annotations"`
	AzureRegion                 string                                                   `json:"azure_region"`
	Client                      string                                                   `json:"client"`
	CreateTime                  string                                                   `json:"create_time"`
	Description                 string                                                   `json:"description"`
	Endpoint                    string                                                   `json:"endpoint"`
	Etag                        string                                                   `json:"etag"`
	Id                          string                                                   `json:"id"`
	Location                    string                                                   `json:"location"`
	Name                        string                                                   `json:"name"`
	Project                     string                                                   `json:"project"`
	Reconciling                 bool                                                     `json:"reconciling"`
	ResourceGroupId             string                                                   `json:"resource_group_id"`
	State                       string                                                   `json:"state"`
	Uid                         string                                                   `json:"uid"`
	UpdateTime                  string                                                   `json:"update_time"`
	WorkloadIdentityConfig      []containerazurecluster.WorkloadIdentityConfigState      `json:"workload_identity_config"`
	Authorization               []containerazurecluster.AuthorizationState               `json:"authorization"`
	AzureServicesAuthentication []containerazurecluster.AzureServicesAuthenticationState `json:"azure_services_authentication"`
	ControlPlane                []containerazurecluster.ControlPlaneState                `json:"control_plane"`
	Fleet                       []containerazurecluster.FleetState                       `json:"fleet"`
	Networking                  []containerazurecluster.NetworkingState                  `json:"networking"`
	Timeouts                    *containerazurecluster.TimeoutsState                     `json:"timeouts"`
}
