// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computetargetpool "github.com/golingon/terraproviders/google/4.59.0/computetargetpool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeTargetPool(name string, args ComputeTargetPoolArgs) *ComputeTargetPool {
	return &ComputeTargetPool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeTargetPool)(nil)

type ComputeTargetPool struct {
	Name  string
	Args  ComputeTargetPoolArgs
	state *computeTargetPoolState
}

func (ctp *ComputeTargetPool) Type() string {
	return "google_compute_target_pool"
}

func (ctp *ComputeTargetPool) LocalName() string {
	return ctp.Name
}

func (ctp *ComputeTargetPool) Configuration() interface{} {
	return ctp.Args
}

func (ctp *ComputeTargetPool) Attributes() computeTargetPoolAttributes {
	return computeTargetPoolAttributes{ref: terra.ReferenceResource(ctp)}
}

func (ctp *ComputeTargetPool) ImportState(av io.Reader) error {
	ctp.state = &computeTargetPoolState{}
	if err := json.NewDecoder(av).Decode(ctp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ctp.Type(), ctp.LocalName(), err)
	}
	return nil
}

func (ctp *ComputeTargetPool) State() (*computeTargetPoolState, bool) {
	return ctp.state, ctp.state != nil
}

func (ctp *ComputeTargetPool) StateMust() *computeTargetPoolState {
	if ctp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ctp.Type(), ctp.LocalName()))
	}
	return ctp.state
}

func (ctp *ComputeTargetPool) DependOn() terra.Reference {
	return terra.ReferenceResource(ctp)
}

type ComputeTargetPoolArgs struct {
	// BackupPool: string, optional
	BackupPool terra.StringValue `hcl:"backup_pool,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FailoverRatio: number, optional
	FailoverRatio terra.NumberValue `hcl:"failover_ratio,attr"`
	// HealthChecks: list of string, optional
	HealthChecks terra.ListValue[terra.StringValue] `hcl:"health_checks,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instances: set of string, optional
	Instances terra.SetValue[terra.StringValue] `hcl:"instances,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// SessionAffinity: string, optional
	SessionAffinity terra.StringValue `hcl:"session_affinity,attr"`
	// Timeouts: optional
	Timeouts *computetargetpool.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeTargetPool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeTargetPoolAttributes struct {
	ref terra.Reference
}

func (ctp computeTargetPoolAttributes) BackupPool() terra.StringValue {
	return terra.ReferenceString(ctp.ref.Append("backup_pool"))
}

func (ctp computeTargetPoolAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ctp.ref.Append("description"))
}

func (ctp computeTargetPoolAttributes) FailoverRatio() terra.NumberValue {
	return terra.ReferenceNumber(ctp.ref.Append("failover_ratio"))
}

func (ctp computeTargetPoolAttributes) HealthChecks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ctp.ref.Append("health_checks"))
}

func (ctp computeTargetPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ctp.ref.Append("id"))
}

func (ctp computeTargetPoolAttributes) Instances() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ctp.ref.Append("instances"))
}

func (ctp computeTargetPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ctp.ref.Append("name"))
}

func (ctp computeTargetPoolAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ctp.ref.Append("project"))
}

func (ctp computeTargetPoolAttributes) Region() terra.StringValue {
	return terra.ReferenceString(ctp.ref.Append("region"))
}

func (ctp computeTargetPoolAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(ctp.ref.Append("self_link"))
}

func (ctp computeTargetPoolAttributes) SessionAffinity() terra.StringValue {
	return terra.ReferenceString(ctp.ref.Append("session_affinity"))
}

func (ctp computeTargetPoolAttributes) Timeouts() computetargetpool.TimeoutsAttributes {
	return terra.ReferenceSingle[computetargetpool.TimeoutsAttributes](ctp.ref.Append("timeouts"))
}

type computeTargetPoolState struct {
	BackupPool      string                           `json:"backup_pool"`
	Description     string                           `json:"description"`
	FailoverRatio   float64                          `json:"failover_ratio"`
	HealthChecks    []string                         `json:"health_checks"`
	Id              string                           `json:"id"`
	Instances       []string                         `json:"instances"`
	Name            string                           `json:"name"`
	Project         string                           `json:"project"`
	Region          string                           `json:"region"`
	SelfLink        string                           `json:"self_link"`
	SessionAffinity string                           `json:"session_affinity"`
	Timeouts        *computetargetpool.TimeoutsState `json:"timeouts"`
}
