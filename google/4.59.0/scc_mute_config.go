// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	sccmuteconfig "github.com/golingon/terraproviders/google/4.59.0/sccmuteconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSccMuteConfig(name string, args SccMuteConfigArgs) *SccMuteConfig {
	return &SccMuteConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SccMuteConfig)(nil)

type SccMuteConfig struct {
	Name  string
	Args  SccMuteConfigArgs
	state *sccMuteConfigState
}

func (smc *SccMuteConfig) Type() string {
	return "google_scc_mute_config"
}

func (smc *SccMuteConfig) LocalName() string {
	return smc.Name
}

func (smc *SccMuteConfig) Configuration() interface{} {
	return smc.Args
}

func (smc *SccMuteConfig) Attributes() sccMuteConfigAttributes {
	return sccMuteConfigAttributes{ref: terra.ReferenceResource(smc)}
}

func (smc *SccMuteConfig) ImportState(av io.Reader) error {
	smc.state = &sccMuteConfigState{}
	if err := json.NewDecoder(av).Decode(smc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", smc.Type(), smc.LocalName(), err)
	}
	return nil
}

func (smc *SccMuteConfig) State() (*sccMuteConfigState, bool) {
	return smc.state, smc.state != nil
}

func (smc *SccMuteConfig) StateMust() *sccMuteConfigState {
	if smc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", smc.Type(), smc.LocalName()))
	}
	return smc.state
}

func (smc *SccMuteConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(smc)
}

type SccMuteConfigArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Filter: string, required
	Filter terra.StringValue `hcl:"filter,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MuteConfigId: string, required
	MuteConfigId terra.StringValue `hcl:"mute_config_id,attr" validate:"required"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *sccmuteconfig.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SccMuteConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sccMuteConfigAttributes struct {
	ref terra.Reference
}

func (smc sccMuteConfigAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(smc.ref.Append("create_time"))
}

func (smc sccMuteConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceString(smc.ref.Append("description"))
}

func (smc sccMuteConfigAttributes) Filter() terra.StringValue {
	return terra.ReferenceString(smc.ref.Append("filter"))
}

func (smc sccMuteConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(smc.ref.Append("id"))
}

func (smc sccMuteConfigAttributes) MostRecentEditor() terra.StringValue {
	return terra.ReferenceString(smc.ref.Append("most_recent_editor"))
}

func (smc sccMuteConfigAttributes) MuteConfigId() terra.StringValue {
	return terra.ReferenceString(smc.ref.Append("mute_config_id"))
}

func (smc sccMuteConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceString(smc.ref.Append("name"))
}

func (smc sccMuteConfigAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(smc.ref.Append("parent"))
}

func (smc sccMuteConfigAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(smc.ref.Append("update_time"))
}

func (smc sccMuteConfigAttributes) Timeouts() sccmuteconfig.TimeoutsAttributes {
	return terra.ReferenceSingle[sccmuteconfig.TimeoutsAttributes](smc.ref.Append("timeouts"))
}

type sccMuteConfigState struct {
	CreateTime       string                       `json:"create_time"`
	Description      string                       `json:"description"`
	Filter           string                       `json:"filter"`
	Id               string                       `json:"id"`
	MostRecentEditor string                       `json:"most_recent_editor"`
	MuteConfigId     string                       `json:"mute_config_id"`
	Name             string                       `json:"name"`
	Parent           string                       `json:"parent"`
	UpdateTime       string                       `json:"update_time"`
	Timeouts         *sccmuteconfig.TimeoutsState `json:"timeouts"`
}
