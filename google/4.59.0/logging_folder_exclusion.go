// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLoggingFolderExclusion(name string, args LoggingFolderExclusionArgs) *LoggingFolderExclusion {
	return &LoggingFolderExclusion{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LoggingFolderExclusion)(nil)

type LoggingFolderExclusion struct {
	Name  string
	Args  LoggingFolderExclusionArgs
	state *loggingFolderExclusionState
}

func (lfe *LoggingFolderExclusion) Type() string {
	return "google_logging_folder_exclusion"
}

func (lfe *LoggingFolderExclusion) LocalName() string {
	return lfe.Name
}

func (lfe *LoggingFolderExclusion) Configuration() interface{} {
	return lfe.Args
}

func (lfe *LoggingFolderExclusion) Attributes() loggingFolderExclusionAttributes {
	return loggingFolderExclusionAttributes{ref: terra.ReferenceResource(lfe)}
}

func (lfe *LoggingFolderExclusion) ImportState(av io.Reader) error {
	lfe.state = &loggingFolderExclusionState{}
	if err := json.NewDecoder(av).Decode(lfe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lfe.Type(), lfe.LocalName(), err)
	}
	return nil
}

func (lfe *LoggingFolderExclusion) State() (*loggingFolderExclusionState, bool) {
	return lfe.state, lfe.state != nil
}

func (lfe *LoggingFolderExclusion) StateMust() *loggingFolderExclusionState {
	if lfe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lfe.Type(), lfe.LocalName()))
	}
	return lfe.state
}

func (lfe *LoggingFolderExclusion) DependOn() terra.Reference {
	return terra.ReferenceResource(lfe)
}

type LoggingFolderExclusionArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// Filter: string, required
	Filter terra.StringValue `hcl:"filter,attr" validate:"required"`
	// Folder: string, required
	Folder terra.StringValue `hcl:"folder,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// DependsOn contains resources that LoggingFolderExclusion depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type loggingFolderExclusionAttributes struct {
	ref terra.Reference
}

func (lfe loggingFolderExclusionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(lfe.ref.Append("description"))
}

func (lfe loggingFolderExclusionAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(lfe.ref.Append("disabled"))
}

func (lfe loggingFolderExclusionAttributes) Filter() terra.StringValue {
	return terra.ReferenceString(lfe.ref.Append("filter"))
}

func (lfe loggingFolderExclusionAttributes) Folder() terra.StringValue {
	return terra.ReferenceString(lfe.ref.Append("folder"))
}

func (lfe loggingFolderExclusionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lfe.ref.Append("id"))
}

func (lfe loggingFolderExclusionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lfe.ref.Append("name"))
}

type loggingFolderExclusionState struct {
	Description string `json:"description"`
	Disabled    bool   `json:"disabled"`
	Filter      string `json:"filter"`
	Folder      string `json:"folder"`
	Id          string `json:"id"`
	Name        string `json:"name"`
}
