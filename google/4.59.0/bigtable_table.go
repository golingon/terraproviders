// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	bigtabletable "github.com/golingon/terraproviders/google/4.59.0/bigtabletable"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigtableTable(name string, args BigtableTableArgs) *BigtableTable {
	return &BigtableTable{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigtableTable)(nil)

type BigtableTable struct {
	Name  string
	Args  BigtableTableArgs
	state *bigtableTableState
}

func (bt *BigtableTable) Type() string {
	return "google_bigtable_table"
}

func (bt *BigtableTable) LocalName() string {
	return bt.Name
}

func (bt *BigtableTable) Configuration() interface{} {
	return bt.Args
}

func (bt *BigtableTable) Attributes() bigtableTableAttributes {
	return bigtableTableAttributes{ref: terra.ReferenceResource(bt)}
}

func (bt *BigtableTable) ImportState(av io.Reader) error {
	bt.state = &bigtableTableState{}
	if err := json.NewDecoder(av).Decode(bt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bt.Type(), bt.LocalName(), err)
	}
	return nil
}

func (bt *BigtableTable) State() (*bigtableTableState, bool) {
	return bt.state, bt.state != nil
}

func (bt *BigtableTable) StateMust() *bigtableTableState {
	if bt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bt.Type(), bt.LocalName()))
	}
	return bt.state
}

func (bt *BigtableTable) DependOn() terra.Reference {
	return terra.ReferenceResource(bt)
}

type BigtableTableArgs struct {
	// DeletionProtection: string, optional
	DeletionProtection terra.StringValue `hcl:"deletion_protection,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceName: string, required
	InstanceName terra.StringValue `hcl:"instance_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SplitKeys: list of string, optional
	SplitKeys terra.ListValue[terra.StringValue] `hcl:"split_keys,attr"`
	// ColumnFamily: min=0
	ColumnFamily []bigtabletable.ColumnFamily `hcl:"column_family,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *bigtabletable.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BigtableTable depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigtableTableAttributes struct {
	ref terra.Reference
}

func (bt bigtableTableAttributes) DeletionProtection() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("deletion_protection"))
}

func (bt bigtableTableAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("id"))
}

func (bt bigtableTableAttributes) InstanceName() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("instance_name"))
}

func (bt bigtableTableAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("name"))
}

func (bt bigtableTableAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bt.ref.Append("project"))
}

func (bt bigtableTableAttributes) SplitKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](bt.ref.Append("split_keys"))
}

func (bt bigtableTableAttributes) ColumnFamily() terra.SetValue[bigtabletable.ColumnFamilyAttributes] {
	return terra.ReferenceSet[bigtabletable.ColumnFamilyAttributes](bt.ref.Append("column_family"))
}

func (bt bigtableTableAttributes) Timeouts() bigtabletable.TimeoutsAttributes {
	return terra.ReferenceSingle[bigtabletable.TimeoutsAttributes](bt.ref.Append("timeouts"))
}

type bigtableTableState struct {
	DeletionProtection string                            `json:"deletion_protection"`
	Id                 string                            `json:"id"`
	InstanceName       string                            `json:"instance_name"`
	Name               string                            `json:"name"`
	Project            string                            `json:"project"`
	SplitKeys          []string                          `json:"split_keys"`
	ColumnFamily       []bigtabletable.ColumnFamilyState `json:"column_family"`
	Timeouts           *bigtabletable.TimeoutsState      `json:"timeouts"`
}
