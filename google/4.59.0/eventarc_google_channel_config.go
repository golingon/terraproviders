// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	eventarcgooglechannelconfig "github.com/golingon/terraproviders/google/4.59.0/eventarcgooglechannelconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEventarcGoogleChannelConfig(name string, args EventarcGoogleChannelConfigArgs) *EventarcGoogleChannelConfig {
	return &EventarcGoogleChannelConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EventarcGoogleChannelConfig)(nil)

type EventarcGoogleChannelConfig struct {
	Name  string
	Args  EventarcGoogleChannelConfigArgs
	state *eventarcGoogleChannelConfigState
}

func (egcc *EventarcGoogleChannelConfig) Type() string {
	return "google_eventarc_google_channel_config"
}

func (egcc *EventarcGoogleChannelConfig) LocalName() string {
	return egcc.Name
}

func (egcc *EventarcGoogleChannelConfig) Configuration() interface{} {
	return egcc.Args
}

func (egcc *EventarcGoogleChannelConfig) Attributes() eventarcGoogleChannelConfigAttributes {
	return eventarcGoogleChannelConfigAttributes{ref: terra.ReferenceResource(egcc)}
}

func (egcc *EventarcGoogleChannelConfig) ImportState(av io.Reader) error {
	egcc.state = &eventarcGoogleChannelConfigState{}
	if err := json.NewDecoder(av).Decode(egcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", egcc.Type(), egcc.LocalName(), err)
	}
	return nil
}

func (egcc *EventarcGoogleChannelConfig) State() (*eventarcGoogleChannelConfigState, bool) {
	return egcc.state, egcc.state != nil
}

func (egcc *EventarcGoogleChannelConfig) StateMust() *eventarcGoogleChannelConfigState {
	if egcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", egcc.Type(), egcc.LocalName()))
	}
	return egcc.state
}

func (egcc *EventarcGoogleChannelConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(egcc)
}

type EventarcGoogleChannelConfigArgs struct {
	// CryptoKeyName: string, optional
	CryptoKeyName terra.StringValue `hcl:"crypto_key_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *eventarcgooglechannelconfig.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EventarcGoogleChannelConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eventarcGoogleChannelConfigAttributes struct {
	ref terra.Reference
}

func (egcc eventarcGoogleChannelConfigAttributes) CryptoKeyName() terra.StringValue {
	return terra.ReferenceString(egcc.ref.Append("crypto_key_name"))
}

func (egcc eventarcGoogleChannelConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(egcc.ref.Append("id"))
}

func (egcc eventarcGoogleChannelConfigAttributes) Location() terra.StringValue {
	return terra.ReferenceString(egcc.ref.Append("location"))
}

func (egcc eventarcGoogleChannelConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceString(egcc.ref.Append("name"))
}

func (egcc eventarcGoogleChannelConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceString(egcc.ref.Append("project"))
}

func (egcc eventarcGoogleChannelConfigAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(egcc.ref.Append("update_time"))
}

func (egcc eventarcGoogleChannelConfigAttributes) Timeouts() eventarcgooglechannelconfig.TimeoutsAttributes {
	return terra.ReferenceSingle[eventarcgooglechannelconfig.TimeoutsAttributes](egcc.ref.Append("timeouts"))
}

type eventarcGoogleChannelConfigState struct {
	CryptoKeyName string                                     `json:"crypto_key_name"`
	Id            string                                     `json:"id"`
	Location      string                                     `json:"location"`
	Name          string                                     `json:"name"`
	Project       string                                     `json:"project"`
	UpdateTime    string                                     `json:"update_time"`
	Timeouts      *eventarcgooglechannelconfig.TimeoutsState `json:"timeouts"`
}
