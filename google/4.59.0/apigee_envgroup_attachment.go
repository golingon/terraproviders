// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	apigeeenvgroupattachment "github.com/golingon/terraproviders/google/4.59.0/apigeeenvgroupattachment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApigeeEnvgroupAttachment(name string, args ApigeeEnvgroupAttachmentArgs) *ApigeeEnvgroupAttachment {
	return &ApigeeEnvgroupAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApigeeEnvgroupAttachment)(nil)

type ApigeeEnvgroupAttachment struct {
	Name  string
	Args  ApigeeEnvgroupAttachmentArgs
	state *apigeeEnvgroupAttachmentState
}

func (aea *ApigeeEnvgroupAttachment) Type() string {
	return "google_apigee_envgroup_attachment"
}

func (aea *ApigeeEnvgroupAttachment) LocalName() string {
	return aea.Name
}

func (aea *ApigeeEnvgroupAttachment) Configuration() interface{} {
	return aea.Args
}

func (aea *ApigeeEnvgroupAttachment) Attributes() apigeeEnvgroupAttachmentAttributes {
	return apigeeEnvgroupAttachmentAttributes{ref: terra.ReferenceResource(aea)}
}

func (aea *ApigeeEnvgroupAttachment) ImportState(av io.Reader) error {
	aea.state = &apigeeEnvgroupAttachmentState{}
	if err := json.NewDecoder(av).Decode(aea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aea.Type(), aea.LocalName(), err)
	}
	return nil
}

func (aea *ApigeeEnvgroupAttachment) State() (*apigeeEnvgroupAttachmentState, bool) {
	return aea.state, aea.state != nil
}

func (aea *ApigeeEnvgroupAttachment) StateMust() *apigeeEnvgroupAttachmentState {
	if aea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aea.Type(), aea.LocalName()))
	}
	return aea.state
}

func (aea *ApigeeEnvgroupAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(aea)
}

type ApigeeEnvgroupAttachmentArgs struct {
	// EnvgroupId: string, required
	EnvgroupId terra.StringValue `hcl:"envgroup_id,attr" validate:"required"`
	// Environment: string, required
	Environment terra.StringValue `hcl:"environment,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *apigeeenvgroupattachment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApigeeEnvgroupAttachment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apigeeEnvgroupAttachmentAttributes struct {
	ref terra.Reference
}

func (aea apigeeEnvgroupAttachmentAttributes) EnvgroupId() terra.StringValue {
	return terra.ReferenceString(aea.ref.Append("envgroup_id"))
}

func (aea apigeeEnvgroupAttachmentAttributes) Environment() terra.StringValue {
	return terra.ReferenceString(aea.ref.Append("environment"))
}

func (aea apigeeEnvgroupAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aea.ref.Append("id"))
}

func (aea apigeeEnvgroupAttachmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(aea.ref.Append("name"))
}

func (aea apigeeEnvgroupAttachmentAttributes) Timeouts() apigeeenvgroupattachment.TimeoutsAttributes {
	return terra.ReferenceSingle[apigeeenvgroupattachment.TimeoutsAttributes](aea.ref.Append("timeouts"))
}

type apigeeEnvgroupAttachmentState struct {
	EnvgroupId  string                                  `json:"envgroup_id"`
	Environment string                                  `json:"environment"`
	Id          string                                  `json:"id"`
	Name        string                                  `json:"name"`
	Timeouts    *apigeeenvgroupattachment.TimeoutsState `json:"timeouts"`
}
