// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	iapappengineserviceiammember "github.com/golingon/terraproviders/google/4.59.0/iapappengineserviceiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIapAppEngineServiceIamMember(name string, args IapAppEngineServiceIamMemberArgs) *IapAppEngineServiceIamMember {
	return &IapAppEngineServiceIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IapAppEngineServiceIamMember)(nil)

type IapAppEngineServiceIamMember struct {
	Name  string
	Args  IapAppEngineServiceIamMemberArgs
	state *iapAppEngineServiceIamMemberState
}

func (iaesim *IapAppEngineServiceIamMember) Type() string {
	return "google_iap_app_engine_service_iam_member"
}

func (iaesim *IapAppEngineServiceIamMember) LocalName() string {
	return iaesim.Name
}

func (iaesim *IapAppEngineServiceIamMember) Configuration() interface{} {
	return iaesim.Args
}

func (iaesim *IapAppEngineServiceIamMember) Attributes() iapAppEngineServiceIamMemberAttributes {
	return iapAppEngineServiceIamMemberAttributes{ref: terra.ReferenceResource(iaesim)}
}

func (iaesim *IapAppEngineServiceIamMember) ImportState(av io.Reader) error {
	iaesim.state = &iapAppEngineServiceIamMemberState{}
	if err := json.NewDecoder(av).Decode(iaesim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iaesim.Type(), iaesim.LocalName(), err)
	}
	return nil
}

func (iaesim *IapAppEngineServiceIamMember) State() (*iapAppEngineServiceIamMemberState, bool) {
	return iaesim.state, iaesim.state != nil
}

func (iaesim *IapAppEngineServiceIamMember) StateMust() *iapAppEngineServiceIamMemberState {
	if iaesim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iaesim.Type(), iaesim.LocalName()))
	}
	return iaesim.state
}

func (iaesim *IapAppEngineServiceIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(iaesim)
}

type IapAppEngineServiceIamMemberArgs struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// Condition: optional
	Condition *iapappengineserviceiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that IapAppEngineServiceIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iapAppEngineServiceIamMemberAttributes struct {
	ref terra.Reference
}

func (iaesim iapAppEngineServiceIamMemberAttributes) AppId() terra.StringValue {
	return terra.ReferenceString(iaesim.ref.Append("app_id"))
}

func (iaesim iapAppEngineServiceIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(iaesim.ref.Append("etag"))
}

func (iaesim iapAppEngineServiceIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iaesim.ref.Append("id"))
}

func (iaesim iapAppEngineServiceIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(iaesim.ref.Append("member"))
}

func (iaesim iapAppEngineServiceIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(iaesim.ref.Append("project"))
}

func (iaesim iapAppEngineServiceIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(iaesim.ref.Append("role"))
}

func (iaesim iapAppEngineServiceIamMemberAttributes) Service() terra.StringValue {
	return terra.ReferenceString(iaesim.ref.Append("service"))
}

func (iaesim iapAppEngineServiceIamMemberAttributes) Condition() terra.ListValue[iapappengineserviceiammember.ConditionAttributes] {
	return terra.ReferenceList[iapappengineserviceiammember.ConditionAttributes](iaesim.ref.Append("condition"))
}

type iapAppEngineServiceIamMemberState struct {
	AppId     string                                        `json:"app_id"`
	Etag      string                                        `json:"etag"`
	Id        string                                        `json:"id"`
	Member    string                                        `json:"member"`
	Project   string                                        `json:"project"`
	Role      string                                        `json:"role"`
	Service   string                                        `json:"service"`
	Condition []iapappengineserviceiammember.ConditionState `json:"condition"`
}
