// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	deploymentmanagerdeployment "github.com/golingon/terraproviders/google/4.59.0/deploymentmanagerdeployment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDeploymentManagerDeployment(name string, args DeploymentManagerDeploymentArgs) *DeploymentManagerDeployment {
	return &DeploymentManagerDeployment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DeploymentManagerDeployment)(nil)

type DeploymentManagerDeployment struct {
	Name  string
	Args  DeploymentManagerDeploymentArgs
	state *deploymentManagerDeploymentState
}

func (dmd *DeploymentManagerDeployment) Type() string {
	return "google_deployment_manager_deployment"
}

func (dmd *DeploymentManagerDeployment) LocalName() string {
	return dmd.Name
}

func (dmd *DeploymentManagerDeployment) Configuration() interface{} {
	return dmd.Args
}

func (dmd *DeploymentManagerDeployment) Attributes() deploymentManagerDeploymentAttributes {
	return deploymentManagerDeploymentAttributes{ref: terra.ReferenceResource(dmd)}
}

func (dmd *DeploymentManagerDeployment) ImportState(av io.Reader) error {
	dmd.state = &deploymentManagerDeploymentState{}
	if err := json.NewDecoder(av).Decode(dmd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dmd.Type(), dmd.LocalName(), err)
	}
	return nil
}

func (dmd *DeploymentManagerDeployment) State() (*deploymentManagerDeploymentState, bool) {
	return dmd.state, dmd.state != nil
}

func (dmd *DeploymentManagerDeployment) StateMust() *deploymentManagerDeploymentState {
	if dmd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dmd.Type(), dmd.LocalName()))
	}
	return dmd.state
}

func (dmd *DeploymentManagerDeployment) DependOn() terra.Reference {
	return terra.ReferenceResource(dmd)
}

type DeploymentManagerDeploymentArgs struct {
	// CreatePolicy: string, optional
	CreatePolicy terra.StringValue `hcl:"create_policy,attr"`
	// DeletePolicy: string, optional
	DeletePolicy terra.StringValue `hcl:"delete_policy,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Preview: bool, optional
	Preview terra.BoolValue `hcl:"preview,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Labels: min=0
	Labels []deploymentmanagerdeployment.Labels `hcl:"labels,block" validate:"min=0"`
	// Target: required
	Target *deploymentmanagerdeployment.Target `hcl:"target,block" validate:"required"`
	// Timeouts: optional
	Timeouts *deploymentmanagerdeployment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DeploymentManagerDeployment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type deploymentManagerDeploymentAttributes struct {
	ref terra.Reference
}

func (dmd deploymentManagerDeploymentAttributes) CreatePolicy() terra.StringValue {
	return terra.ReferenceString(dmd.ref.Append("create_policy"))
}

func (dmd deploymentManagerDeploymentAttributes) DeletePolicy() terra.StringValue {
	return terra.ReferenceString(dmd.ref.Append("delete_policy"))
}

func (dmd deploymentManagerDeploymentAttributes) DeploymentId() terra.StringValue {
	return terra.ReferenceString(dmd.ref.Append("deployment_id"))
}

func (dmd deploymentManagerDeploymentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dmd.ref.Append("description"))
}

func (dmd deploymentManagerDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dmd.ref.Append("id"))
}

func (dmd deploymentManagerDeploymentAttributes) Manifest() terra.StringValue {
	return terra.ReferenceString(dmd.ref.Append("manifest"))
}

func (dmd deploymentManagerDeploymentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dmd.ref.Append("name"))
}

func (dmd deploymentManagerDeploymentAttributes) Preview() terra.BoolValue {
	return terra.ReferenceBool(dmd.ref.Append("preview"))
}

func (dmd deploymentManagerDeploymentAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dmd.ref.Append("project"))
}

func (dmd deploymentManagerDeploymentAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(dmd.ref.Append("self_link"))
}

func (dmd deploymentManagerDeploymentAttributes) Labels() terra.SetValue[deploymentmanagerdeployment.LabelsAttributes] {
	return terra.ReferenceSet[deploymentmanagerdeployment.LabelsAttributes](dmd.ref.Append("labels"))
}

func (dmd deploymentManagerDeploymentAttributes) Target() terra.ListValue[deploymentmanagerdeployment.TargetAttributes] {
	return terra.ReferenceList[deploymentmanagerdeployment.TargetAttributes](dmd.ref.Append("target"))
}

func (dmd deploymentManagerDeploymentAttributes) Timeouts() deploymentmanagerdeployment.TimeoutsAttributes {
	return terra.ReferenceSingle[deploymentmanagerdeployment.TimeoutsAttributes](dmd.ref.Append("timeouts"))
}

type deploymentManagerDeploymentState struct {
	CreatePolicy string                                     `json:"create_policy"`
	DeletePolicy string                                     `json:"delete_policy"`
	DeploymentId string                                     `json:"deployment_id"`
	Description  string                                     `json:"description"`
	Id           string                                     `json:"id"`
	Manifest     string                                     `json:"manifest"`
	Name         string                                     `json:"name"`
	Preview      bool                                       `json:"preview"`
	Project      string                                     `json:"project"`
	SelfLink     string                                     `json:"self_link"`
	Labels       []deploymentmanagerdeployment.LabelsState  `json:"labels"`
	Target       []deploymentmanagerdeployment.TargetState  `json:"target"`
	Timeouts     *deploymentmanagerdeployment.TimeoutsState `json:"timeouts"`
}
