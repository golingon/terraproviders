// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package provider

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Batching struct {
	// EnableBatching: bool, optional
	EnableBatching terra.BoolValue `hcl:"enable_batching,attr"`
	// SendAfter: string, optional
	SendAfter terra.StringValue `hcl:"send_after,attr"`
}

type BatchingAttributes struct {
	ref terra.Reference
}

func (b BatchingAttributes) InternalRef() terra.Reference {
	return b.ref
}

func (b BatchingAttributes) InternalWithRef(ref terra.Reference) BatchingAttributes {
	return BatchingAttributes{ref: ref}
}

func (b BatchingAttributes) InternalTokens() hclwrite.Tokens {
	return b.ref.InternalTokens()
}

func (b BatchingAttributes) EnableBatching() terra.BoolValue {
	return terra.ReferenceBool(b.ref.Append("enable_batching"))
}

func (b BatchingAttributes) SendAfter() terra.StringValue {
	return terra.ReferenceString(b.ref.Append("send_after"))
}

type BatchingState struct {
	EnableBatching bool   `json:"enable_batching"`
	SendAfter      string `json:"send_after"`
}
