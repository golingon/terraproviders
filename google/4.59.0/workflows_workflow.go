// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	workflowsworkflow "github.com/golingon/terraproviders/google/4.59.0/workflowsworkflow"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWorkflowsWorkflow(name string, args WorkflowsWorkflowArgs) *WorkflowsWorkflow {
	return &WorkflowsWorkflow{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WorkflowsWorkflow)(nil)

type WorkflowsWorkflow struct {
	Name  string
	Args  WorkflowsWorkflowArgs
	state *workflowsWorkflowState
}

func (ww *WorkflowsWorkflow) Type() string {
	return "google_workflows_workflow"
}

func (ww *WorkflowsWorkflow) LocalName() string {
	return ww.Name
}

func (ww *WorkflowsWorkflow) Configuration() interface{} {
	return ww.Args
}

func (ww *WorkflowsWorkflow) Attributes() workflowsWorkflowAttributes {
	return workflowsWorkflowAttributes{ref: terra.ReferenceResource(ww)}
}

func (ww *WorkflowsWorkflow) ImportState(av io.Reader) error {
	ww.state = &workflowsWorkflowState{}
	if err := json.NewDecoder(av).Decode(ww.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ww.Type(), ww.LocalName(), err)
	}
	return nil
}

func (ww *WorkflowsWorkflow) State() (*workflowsWorkflowState, bool) {
	return ww.state, ww.state != nil
}

func (ww *WorkflowsWorkflow) StateMust() *workflowsWorkflowState {
	if ww.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ww.Type(), ww.LocalName()))
	}
	return ww.state
}

func (ww *WorkflowsWorkflow) DependOn() terra.Reference {
	return terra.ReferenceResource(ww)
}

type WorkflowsWorkflowArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// SourceContents: string, optional
	SourceContents terra.StringValue `hcl:"source_contents,attr"`
	// Timeouts: optional
	Timeouts *workflowsworkflow.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that WorkflowsWorkflow depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type workflowsWorkflowAttributes struct {
	ref terra.Reference
}

func (ww workflowsWorkflowAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(ww.ref.Append("create_time"))
}

func (ww workflowsWorkflowAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ww.ref.Append("description"))
}

func (ww workflowsWorkflowAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ww.ref.Append("id"))
}

func (ww workflowsWorkflowAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ww.ref.Append("labels"))
}

func (ww workflowsWorkflowAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ww.ref.Append("name"))
}

func (ww workflowsWorkflowAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(ww.ref.Append("name_prefix"))
}

func (ww workflowsWorkflowAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ww.ref.Append("project"))
}

func (ww workflowsWorkflowAttributes) Region() terra.StringValue {
	return terra.ReferenceString(ww.ref.Append("region"))
}

func (ww workflowsWorkflowAttributes) RevisionId() terra.StringValue {
	return terra.ReferenceString(ww.ref.Append("revision_id"))
}

func (ww workflowsWorkflowAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceString(ww.ref.Append("service_account"))
}

func (ww workflowsWorkflowAttributes) SourceContents() terra.StringValue {
	return terra.ReferenceString(ww.ref.Append("source_contents"))
}

func (ww workflowsWorkflowAttributes) State() terra.StringValue {
	return terra.ReferenceString(ww.ref.Append("state"))
}

func (ww workflowsWorkflowAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(ww.ref.Append("update_time"))
}

func (ww workflowsWorkflowAttributes) Timeouts() workflowsworkflow.TimeoutsAttributes {
	return terra.ReferenceSingle[workflowsworkflow.TimeoutsAttributes](ww.ref.Append("timeouts"))
}

type workflowsWorkflowState struct {
	CreateTime     string                           `json:"create_time"`
	Description    string                           `json:"description"`
	Id             string                           `json:"id"`
	Labels         map[string]string                `json:"labels"`
	Name           string                           `json:"name"`
	NamePrefix     string                           `json:"name_prefix"`
	Project        string                           `json:"project"`
	Region         string                           `json:"region"`
	RevisionId     string                           `json:"revision_id"`
	ServiceAccount string                           `json:"service_account"`
	SourceContents string                           `json:"source_contents"`
	State          string                           `json:"state"`
	UpdateTime     string                           `json:"update_time"`
	Timeouts       *workflowsworkflow.TimeoutsState `json:"timeouts"`
}
