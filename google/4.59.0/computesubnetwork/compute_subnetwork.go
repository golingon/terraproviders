// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package computesubnetwork

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type SecondaryIpRange struct {
	// IpCidrRange: string, optional
	IpCidrRange terra.StringValue `hcl:"ip_cidr_range,attr"`
	// RangeName: string, optional
	RangeName terra.StringValue `hcl:"range_name,attr"`
}

type LogConfig struct {
	// AggregationInterval: string, optional
	AggregationInterval terra.StringValue `hcl:"aggregation_interval,attr"`
	// FilterExpr: string, optional
	FilterExpr terra.StringValue `hcl:"filter_expr,attr"`
	// FlowSampling: number, optional
	FlowSampling terra.NumberValue `hcl:"flow_sampling,attr"`
	// Metadata: string, optional
	Metadata terra.StringValue `hcl:"metadata,attr"`
	// MetadataFields: set of string, optional
	MetadataFields terra.SetValue[terra.StringValue] `hcl:"metadata_fields,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SecondaryIpRangeAttributes struct {
	ref terra.Reference
}

func (sir SecondaryIpRangeAttributes) InternalRef() terra.Reference {
	return sir.ref
}

func (sir SecondaryIpRangeAttributes) InternalWithRef(ref terra.Reference) SecondaryIpRangeAttributes {
	return SecondaryIpRangeAttributes{ref: ref}
}

func (sir SecondaryIpRangeAttributes) InternalTokens() hclwrite.Tokens {
	return sir.ref.InternalTokens()
}

func (sir SecondaryIpRangeAttributes) IpCidrRange() terra.StringValue {
	return terra.ReferenceString(sir.ref.Append("ip_cidr_range"))
}

func (sir SecondaryIpRangeAttributes) RangeName() terra.StringValue {
	return terra.ReferenceString(sir.ref.Append("range_name"))
}

type LogConfigAttributes struct {
	ref terra.Reference
}

func (lc LogConfigAttributes) InternalRef() terra.Reference {
	return lc.ref
}

func (lc LogConfigAttributes) InternalWithRef(ref terra.Reference) LogConfigAttributes {
	return LogConfigAttributes{ref: ref}
}

func (lc LogConfigAttributes) InternalTokens() hclwrite.Tokens {
	return lc.ref.InternalTokens()
}

func (lc LogConfigAttributes) AggregationInterval() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("aggregation_interval"))
}

func (lc LogConfigAttributes) FilterExpr() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("filter_expr"))
}

func (lc LogConfigAttributes) FlowSampling() terra.NumberValue {
	return terra.ReferenceNumber(lc.ref.Append("flow_sampling"))
}

func (lc LogConfigAttributes) Metadata() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("metadata"))
}

func (lc LogConfigAttributes) MetadataFields() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](lc.ref.Append("metadata_fields"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type SecondaryIpRangeState struct {
	IpCidrRange string `json:"ip_cidr_range"`
	RangeName   string `json:"range_name"`
}

type LogConfigState struct {
	AggregationInterval string   `json:"aggregation_interval"`
	FilterExpr          string   `json:"filter_expr"`
	FlowSampling        float64  `json:"flow_sampling"`
	Metadata            string   `json:"metadata"`
	MetadataFields      []string `json:"metadata_fields"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
