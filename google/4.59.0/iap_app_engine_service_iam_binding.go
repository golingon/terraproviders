// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	iapappengineserviceiambinding "github.com/golingon/terraproviders/google/4.59.0/iapappengineserviceiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIapAppEngineServiceIamBinding(name string, args IapAppEngineServiceIamBindingArgs) *IapAppEngineServiceIamBinding {
	return &IapAppEngineServiceIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IapAppEngineServiceIamBinding)(nil)

type IapAppEngineServiceIamBinding struct {
	Name  string
	Args  IapAppEngineServiceIamBindingArgs
	state *iapAppEngineServiceIamBindingState
}

func (iaesib *IapAppEngineServiceIamBinding) Type() string {
	return "google_iap_app_engine_service_iam_binding"
}

func (iaesib *IapAppEngineServiceIamBinding) LocalName() string {
	return iaesib.Name
}

func (iaesib *IapAppEngineServiceIamBinding) Configuration() interface{} {
	return iaesib.Args
}

func (iaesib *IapAppEngineServiceIamBinding) Attributes() iapAppEngineServiceIamBindingAttributes {
	return iapAppEngineServiceIamBindingAttributes{ref: terra.ReferenceResource(iaesib)}
}

func (iaesib *IapAppEngineServiceIamBinding) ImportState(av io.Reader) error {
	iaesib.state = &iapAppEngineServiceIamBindingState{}
	if err := json.NewDecoder(av).Decode(iaesib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iaesib.Type(), iaesib.LocalName(), err)
	}
	return nil
}

func (iaesib *IapAppEngineServiceIamBinding) State() (*iapAppEngineServiceIamBindingState, bool) {
	return iaesib.state, iaesib.state != nil
}

func (iaesib *IapAppEngineServiceIamBinding) StateMust() *iapAppEngineServiceIamBindingState {
	if iaesib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iaesib.Type(), iaesib.LocalName()))
	}
	return iaesib.state
}

func (iaesib *IapAppEngineServiceIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(iaesib)
}

type IapAppEngineServiceIamBindingArgs struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// Condition: optional
	Condition *iapappengineserviceiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that IapAppEngineServiceIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iapAppEngineServiceIamBindingAttributes struct {
	ref terra.Reference
}

func (iaesib iapAppEngineServiceIamBindingAttributes) AppId() terra.StringValue {
	return terra.ReferenceString(iaesib.ref.Append("app_id"))
}

func (iaesib iapAppEngineServiceIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(iaesib.ref.Append("etag"))
}

func (iaesib iapAppEngineServiceIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iaesib.ref.Append("id"))
}

func (iaesib iapAppEngineServiceIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](iaesib.ref.Append("members"))
}

func (iaesib iapAppEngineServiceIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(iaesib.ref.Append("project"))
}

func (iaesib iapAppEngineServiceIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(iaesib.ref.Append("role"))
}

func (iaesib iapAppEngineServiceIamBindingAttributes) Service() terra.StringValue {
	return terra.ReferenceString(iaesib.ref.Append("service"))
}

func (iaesib iapAppEngineServiceIamBindingAttributes) Condition() terra.ListValue[iapappengineserviceiambinding.ConditionAttributes] {
	return terra.ReferenceList[iapappengineserviceiambinding.ConditionAttributes](iaesib.ref.Append("condition"))
}

type iapAppEngineServiceIamBindingState struct {
	AppId     string                                         `json:"app_id"`
	Etag      string                                         `json:"etag"`
	Id        string                                         `json:"id"`
	Members   []string                                       `json:"members"`
	Project   string                                         `json:"project"`
	Role      string                                         `json:"role"`
	Service   string                                         `json:"service"`
	Condition []iapappengineserviceiambinding.ConditionState `json:"condition"`
}
