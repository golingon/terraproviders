// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vertexaifeaturestore

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type EncryptionSpec struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type OnlineServingConfig struct {
	// FixedNodeCount: number, optional
	FixedNodeCount terra.NumberValue `hcl:"fixed_node_count,attr"`
	// Scaling: optional
	Scaling *Scaling `hcl:"scaling,block"`
}

type Scaling struct {
	// MaxNodeCount: number, required
	MaxNodeCount terra.NumberValue `hcl:"max_node_count,attr" validate:"required"`
	// MinNodeCount: number, required
	MinNodeCount terra.NumberValue `hcl:"min_node_count,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type EncryptionSpecAttributes struct {
	ref terra.Reference
}

func (es EncryptionSpecAttributes) InternalRef() terra.Reference {
	return es.ref
}

func (es EncryptionSpecAttributes) InternalWithRef(ref terra.Reference) EncryptionSpecAttributes {
	return EncryptionSpecAttributes{ref: ref}
}

func (es EncryptionSpecAttributes) InternalTokens() hclwrite.Tokens {
	return es.ref.InternalTokens()
}

func (es EncryptionSpecAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("kms_key_name"))
}

type OnlineServingConfigAttributes struct {
	ref terra.Reference
}

func (osc OnlineServingConfigAttributes) InternalRef() terra.Reference {
	return osc.ref
}

func (osc OnlineServingConfigAttributes) InternalWithRef(ref terra.Reference) OnlineServingConfigAttributes {
	return OnlineServingConfigAttributes{ref: ref}
}

func (osc OnlineServingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return osc.ref.InternalTokens()
}

func (osc OnlineServingConfigAttributes) FixedNodeCount() terra.NumberValue {
	return terra.ReferenceNumber(osc.ref.Append("fixed_node_count"))
}

func (osc OnlineServingConfigAttributes) Scaling() terra.ListValue[ScalingAttributes] {
	return terra.ReferenceList[ScalingAttributes](osc.ref.Append("scaling"))
}

type ScalingAttributes struct {
	ref terra.Reference
}

func (s ScalingAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s ScalingAttributes) InternalWithRef(ref terra.Reference) ScalingAttributes {
	return ScalingAttributes{ref: ref}
}

func (s ScalingAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s ScalingAttributes) MaxNodeCount() terra.NumberValue {
	return terra.ReferenceNumber(s.ref.Append("max_node_count"))
}

func (s ScalingAttributes) MinNodeCount() terra.NumberValue {
	return terra.ReferenceNumber(s.ref.Append("min_node_count"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type EncryptionSpecState struct {
	KmsKeyName string `json:"kms_key_name"`
}

type OnlineServingConfigState struct {
	FixedNodeCount float64        `json:"fixed_node_count"`
	Scaling        []ScalingState `json:"scaling"`
}

type ScalingState struct {
	MaxNodeCount float64 `json:"max_node_count"`
	MinNodeCount float64 `json:"min_node_count"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
