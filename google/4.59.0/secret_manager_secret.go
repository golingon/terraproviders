// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	secretmanagersecret "github.com/golingon/terraproviders/google/4.59.0/secretmanagersecret"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecretManagerSecret(name string, args SecretManagerSecretArgs) *SecretManagerSecret {
	return &SecretManagerSecret{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecretManagerSecret)(nil)

type SecretManagerSecret struct {
	Name  string
	Args  SecretManagerSecretArgs
	state *secretManagerSecretState
}

func (sms *SecretManagerSecret) Type() string {
	return "google_secret_manager_secret"
}

func (sms *SecretManagerSecret) LocalName() string {
	return sms.Name
}

func (sms *SecretManagerSecret) Configuration() interface{} {
	return sms.Args
}

func (sms *SecretManagerSecret) Attributes() secretManagerSecretAttributes {
	return secretManagerSecretAttributes{ref: terra.ReferenceResource(sms)}
}

func (sms *SecretManagerSecret) ImportState(av io.Reader) error {
	sms.state = &secretManagerSecretState{}
	if err := json.NewDecoder(av).Decode(sms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sms.Type(), sms.LocalName(), err)
	}
	return nil
}

func (sms *SecretManagerSecret) State() (*secretManagerSecretState, bool) {
	return sms.state, sms.state != nil
}

func (sms *SecretManagerSecret) StateMust() *secretManagerSecretState {
	if sms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sms.Type(), sms.LocalName()))
	}
	return sms.state
}

func (sms *SecretManagerSecret) DependOn() terra.Reference {
	return terra.ReferenceResource(sms)
}

type SecretManagerSecretArgs struct {
	// ExpireTime: string, optional
	ExpireTime terra.StringValue `hcl:"expire_time,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SecretId: string, required
	SecretId terra.StringValue `hcl:"secret_id,attr" validate:"required"`
	// Ttl: string, optional
	Ttl terra.StringValue `hcl:"ttl,attr"`
	// Replication: required
	Replication *secretmanagersecret.Replication `hcl:"replication,block" validate:"required"`
	// Rotation: optional
	Rotation *secretmanagersecret.Rotation `hcl:"rotation,block"`
	// Timeouts: optional
	Timeouts *secretmanagersecret.Timeouts `hcl:"timeouts,block"`
	// Topics: min=0
	Topics []secretmanagersecret.Topics `hcl:"topics,block" validate:"min=0"`
	// DependsOn contains resources that SecretManagerSecret depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type secretManagerSecretAttributes struct {
	ref terra.Reference
}

func (sms secretManagerSecretAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(sms.ref.Append("create_time"))
}

func (sms secretManagerSecretAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceString(sms.ref.Append("expire_time"))
}

func (sms secretManagerSecretAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sms.ref.Append("id"))
}

func (sms secretManagerSecretAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sms.ref.Append("labels"))
}

func (sms secretManagerSecretAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sms.ref.Append("name"))
}

func (sms secretManagerSecretAttributes) Project() terra.StringValue {
	return terra.ReferenceString(sms.ref.Append("project"))
}

func (sms secretManagerSecretAttributes) SecretId() terra.StringValue {
	return terra.ReferenceString(sms.ref.Append("secret_id"))
}

func (sms secretManagerSecretAttributes) Ttl() terra.StringValue {
	return terra.ReferenceString(sms.ref.Append("ttl"))
}

func (sms secretManagerSecretAttributes) Replication() terra.ListValue[secretmanagersecret.ReplicationAttributes] {
	return terra.ReferenceList[secretmanagersecret.ReplicationAttributes](sms.ref.Append("replication"))
}

func (sms secretManagerSecretAttributes) Rotation() terra.ListValue[secretmanagersecret.RotationAttributes] {
	return terra.ReferenceList[secretmanagersecret.RotationAttributes](sms.ref.Append("rotation"))
}

func (sms secretManagerSecretAttributes) Timeouts() secretmanagersecret.TimeoutsAttributes {
	return terra.ReferenceSingle[secretmanagersecret.TimeoutsAttributes](sms.ref.Append("timeouts"))
}

func (sms secretManagerSecretAttributes) Topics() terra.ListValue[secretmanagersecret.TopicsAttributes] {
	return terra.ReferenceList[secretmanagersecret.TopicsAttributes](sms.ref.Append("topics"))
}

type secretManagerSecretState struct {
	CreateTime  string                                 `json:"create_time"`
	ExpireTime  string                                 `json:"expire_time"`
	Id          string                                 `json:"id"`
	Labels      map[string]string                      `json:"labels"`
	Name        string                                 `json:"name"`
	Project     string                                 `json:"project"`
	SecretId    string                                 `json:"secret_id"`
	Ttl         string                                 `json:"ttl"`
	Replication []secretmanagersecret.ReplicationState `json:"replication"`
	Rotation    []secretmanagersecret.RotationState    `json:"rotation"`
	Timeouts    *secretmanagersecret.TimeoutsState     `json:"timeouts"`
	Topics      []secretmanagersecret.TopicsState      `json:"topics"`
}
