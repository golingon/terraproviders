// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	accesscontextmanagerserviceperimeter "github.com/golingon/terraproviders/google/4.59.0/accesscontextmanagerserviceperimeter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAccessContextManagerServicePerimeter(name string, args AccessContextManagerServicePerimeterArgs) *AccessContextManagerServicePerimeter {
	return &AccessContextManagerServicePerimeter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AccessContextManagerServicePerimeter)(nil)

type AccessContextManagerServicePerimeter struct {
	Name  string
	Args  AccessContextManagerServicePerimeterArgs
	state *accessContextManagerServicePerimeterState
}

func (acmsp *AccessContextManagerServicePerimeter) Type() string {
	return "google_access_context_manager_service_perimeter"
}

func (acmsp *AccessContextManagerServicePerimeter) LocalName() string {
	return acmsp.Name
}

func (acmsp *AccessContextManagerServicePerimeter) Configuration() interface{} {
	return acmsp.Args
}

func (acmsp *AccessContextManagerServicePerimeter) Attributes() accessContextManagerServicePerimeterAttributes {
	return accessContextManagerServicePerimeterAttributes{ref: terra.ReferenceResource(acmsp)}
}

func (acmsp *AccessContextManagerServicePerimeter) ImportState(av io.Reader) error {
	acmsp.state = &accessContextManagerServicePerimeterState{}
	if err := json.NewDecoder(av).Decode(acmsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acmsp.Type(), acmsp.LocalName(), err)
	}
	return nil
}

func (acmsp *AccessContextManagerServicePerimeter) State() (*accessContextManagerServicePerimeterState, bool) {
	return acmsp.state, acmsp.state != nil
}

func (acmsp *AccessContextManagerServicePerimeter) StateMust() *accessContextManagerServicePerimeterState {
	if acmsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acmsp.Type(), acmsp.LocalName()))
	}
	return acmsp.state
}

func (acmsp *AccessContextManagerServicePerimeter) DependOn() terra.Reference {
	return terra.ReferenceResource(acmsp)
}

type AccessContextManagerServicePerimeterArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// PerimeterType: string, optional
	PerimeterType terra.StringValue `hcl:"perimeter_type,attr"`
	// Title: string, required
	Title terra.StringValue `hcl:"title,attr" validate:"required"`
	// UseExplicitDryRunSpec: bool, optional
	UseExplicitDryRunSpec terra.BoolValue `hcl:"use_explicit_dry_run_spec,attr"`
	// Spec: optional
	Spec *accesscontextmanagerserviceperimeter.Spec `hcl:"spec,block"`
	// Status: optional
	Status *accesscontextmanagerserviceperimeter.Status `hcl:"status,block"`
	// Timeouts: optional
	Timeouts *accesscontextmanagerserviceperimeter.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AccessContextManagerServicePerimeter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type accessContextManagerServicePerimeterAttributes struct {
	ref terra.Reference
}

func (acmsp accessContextManagerServicePerimeterAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(acmsp.ref.Append("create_time"))
}

func (acmsp accessContextManagerServicePerimeterAttributes) Description() terra.StringValue {
	return terra.ReferenceString(acmsp.ref.Append("description"))
}

func (acmsp accessContextManagerServicePerimeterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(acmsp.ref.Append("id"))
}

func (acmsp accessContextManagerServicePerimeterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(acmsp.ref.Append("name"))
}

func (acmsp accessContextManagerServicePerimeterAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(acmsp.ref.Append("parent"))
}

func (acmsp accessContextManagerServicePerimeterAttributes) PerimeterType() terra.StringValue {
	return terra.ReferenceString(acmsp.ref.Append("perimeter_type"))
}

func (acmsp accessContextManagerServicePerimeterAttributes) Title() terra.StringValue {
	return terra.ReferenceString(acmsp.ref.Append("title"))
}

func (acmsp accessContextManagerServicePerimeterAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(acmsp.ref.Append("update_time"))
}

func (acmsp accessContextManagerServicePerimeterAttributes) UseExplicitDryRunSpec() terra.BoolValue {
	return terra.ReferenceBool(acmsp.ref.Append("use_explicit_dry_run_spec"))
}

func (acmsp accessContextManagerServicePerimeterAttributes) Spec() terra.ListValue[accesscontextmanagerserviceperimeter.SpecAttributes] {
	return terra.ReferenceList[accesscontextmanagerserviceperimeter.SpecAttributes](acmsp.ref.Append("spec"))
}

func (acmsp accessContextManagerServicePerimeterAttributes) Status() terra.ListValue[accesscontextmanagerserviceperimeter.StatusAttributes] {
	return terra.ReferenceList[accesscontextmanagerserviceperimeter.StatusAttributes](acmsp.ref.Append("status"))
}

func (acmsp accessContextManagerServicePerimeterAttributes) Timeouts() accesscontextmanagerserviceperimeter.TimeoutsAttributes {
	return terra.ReferenceSingle[accesscontextmanagerserviceperimeter.TimeoutsAttributes](acmsp.ref.Append("timeouts"))
}

type accessContextManagerServicePerimeterState struct {
	CreateTime            string                                              `json:"create_time"`
	Description           string                                              `json:"description"`
	Id                    string                                              `json:"id"`
	Name                  string                                              `json:"name"`
	Parent                string                                              `json:"parent"`
	PerimeterType         string                                              `json:"perimeter_type"`
	Title                 string                                              `json:"title"`
	UpdateTime            string                                              `json:"update_time"`
	UseExplicitDryRunSpec bool                                                `json:"use_explicit_dry_run_spec"`
	Spec                  []accesscontextmanagerserviceperimeter.SpecState    `json:"spec"`
	Status                []accesscontextmanagerserviceperimeter.StatusState  `json:"status"`
	Timeouts              *accesscontextmanagerserviceperimeter.TimeoutsState `json:"timeouts"`
}
