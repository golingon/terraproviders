// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dataprocmetastoreserviceiambinding "github.com/golingon/terraproviders/google/4.59.0/dataprocmetastoreserviceiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataprocMetastoreServiceIamBinding(name string, args DataprocMetastoreServiceIamBindingArgs) *DataprocMetastoreServiceIamBinding {
	return &DataprocMetastoreServiceIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataprocMetastoreServiceIamBinding)(nil)

type DataprocMetastoreServiceIamBinding struct {
	Name  string
	Args  DataprocMetastoreServiceIamBindingArgs
	state *dataprocMetastoreServiceIamBindingState
}

func (dmsib *DataprocMetastoreServiceIamBinding) Type() string {
	return "google_dataproc_metastore_service_iam_binding"
}

func (dmsib *DataprocMetastoreServiceIamBinding) LocalName() string {
	return dmsib.Name
}

func (dmsib *DataprocMetastoreServiceIamBinding) Configuration() interface{} {
	return dmsib.Args
}

func (dmsib *DataprocMetastoreServiceIamBinding) Attributes() dataprocMetastoreServiceIamBindingAttributes {
	return dataprocMetastoreServiceIamBindingAttributes{ref: terra.ReferenceResource(dmsib)}
}

func (dmsib *DataprocMetastoreServiceIamBinding) ImportState(av io.Reader) error {
	dmsib.state = &dataprocMetastoreServiceIamBindingState{}
	if err := json.NewDecoder(av).Decode(dmsib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dmsib.Type(), dmsib.LocalName(), err)
	}
	return nil
}

func (dmsib *DataprocMetastoreServiceIamBinding) State() (*dataprocMetastoreServiceIamBindingState, bool) {
	return dmsib.state, dmsib.state != nil
}

func (dmsib *DataprocMetastoreServiceIamBinding) StateMust() *dataprocMetastoreServiceIamBindingState {
	if dmsib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dmsib.Type(), dmsib.LocalName()))
	}
	return dmsib.state
}

func (dmsib *DataprocMetastoreServiceIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(dmsib)
}

type DataprocMetastoreServiceIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// ServiceId: string, required
	ServiceId terra.StringValue `hcl:"service_id,attr" validate:"required"`
	// Condition: optional
	Condition *dataprocmetastoreserviceiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataprocMetastoreServiceIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataprocMetastoreServiceIamBindingAttributes struct {
	ref terra.Reference
}

func (dmsib dataprocMetastoreServiceIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dmsib.ref.Append("etag"))
}

func (dmsib dataprocMetastoreServiceIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dmsib.ref.Append("id"))
}

func (dmsib dataprocMetastoreServiceIamBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dmsib.ref.Append("location"))
}

func (dmsib dataprocMetastoreServiceIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dmsib.ref.Append("members"))
}

func (dmsib dataprocMetastoreServiceIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dmsib.ref.Append("project"))
}

func (dmsib dataprocMetastoreServiceIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(dmsib.ref.Append("role"))
}

func (dmsib dataprocMetastoreServiceIamBindingAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceString(dmsib.ref.Append("service_id"))
}

func (dmsib dataprocMetastoreServiceIamBindingAttributes) Condition() terra.ListValue[dataprocmetastoreserviceiambinding.ConditionAttributes] {
	return terra.ReferenceList[dataprocmetastoreserviceiambinding.ConditionAttributes](dmsib.ref.Append("condition"))
}

type dataprocMetastoreServiceIamBindingState struct {
	Etag      string                                              `json:"etag"`
	Id        string                                              `json:"id"`
	Location  string                                              `json:"location"`
	Members   []string                                            `json:"members"`
	Project   string                                              `json:"project"`
	Role      string                                              `json:"role"`
	ServiceId string                                              `json:"service_id"`
	Condition []dataprocmetastoreserviceiambinding.ConditionState `json:"condition"`
}
