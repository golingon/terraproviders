// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	kmscryptokeyiambinding "github.com/golingon/terraproviders/google/4.59.0/kmscryptokeyiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKmsCryptoKeyIamBinding(name string, args KmsCryptoKeyIamBindingArgs) *KmsCryptoKeyIamBinding {
	return &KmsCryptoKeyIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KmsCryptoKeyIamBinding)(nil)

type KmsCryptoKeyIamBinding struct {
	Name  string
	Args  KmsCryptoKeyIamBindingArgs
	state *kmsCryptoKeyIamBindingState
}

func (kckib *KmsCryptoKeyIamBinding) Type() string {
	return "google_kms_crypto_key_iam_binding"
}

func (kckib *KmsCryptoKeyIamBinding) LocalName() string {
	return kckib.Name
}

func (kckib *KmsCryptoKeyIamBinding) Configuration() interface{} {
	return kckib.Args
}

func (kckib *KmsCryptoKeyIamBinding) Attributes() kmsCryptoKeyIamBindingAttributes {
	return kmsCryptoKeyIamBindingAttributes{ref: terra.ReferenceResource(kckib)}
}

func (kckib *KmsCryptoKeyIamBinding) ImportState(av io.Reader) error {
	kckib.state = &kmsCryptoKeyIamBindingState{}
	if err := json.NewDecoder(av).Decode(kckib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kckib.Type(), kckib.LocalName(), err)
	}
	return nil
}

func (kckib *KmsCryptoKeyIamBinding) State() (*kmsCryptoKeyIamBindingState, bool) {
	return kckib.state, kckib.state != nil
}

func (kckib *KmsCryptoKeyIamBinding) StateMust() *kmsCryptoKeyIamBindingState {
	if kckib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kckib.Type(), kckib.LocalName()))
	}
	return kckib.state
}

func (kckib *KmsCryptoKeyIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(kckib)
}

type KmsCryptoKeyIamBindingArgs struct {
	// CryptoKeyId: string, required
	CryptoKeyId terra.StringValue `hcl:"crypto_key_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *kmscryptokeyiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that KmsCryptoKeyIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kmsCryptoKeyIamBindingAttributes struct {
	ref terra.Reference
}

func (kckib kmsCryptoKeyIamBindingAttributes) CryptoKeyId() terra.StringValue {
	return terra.ReferenceString(kckib.ref.Append("crypto_key_id"))
}

func (kckib kmsCryptoKeyIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(kckib.ref.Append("etag"))
}

func (kckib kmsCryptoKeyIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kckib.ref.Append("id"))
}

func (kckib kmsCryptoKeyIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](kckib.ref.Append("members"))
}

func (kckib kmsCryptoKeyIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(kckib.ref.Append("role"))
}

func (kckib kmsCryptoKeyIamBindingAttributes) Condition() terra.ListValue[kmscryptokeyiambinding.ConditionAttributes] {
	return terra.ReferenceList[kmscryptokeyiambinding.ConditionAttributes](kckib.ref.Append("condition"))
}

type kmsCryptoKeyIamBindingState struct {
	CryptoKeyId string                                  `json:"crypto_key_id"`
	Etag        string                                  `json:"etag"`
	Id          string                                  `json:"id"`
	Members     []string                                `json:"members"`
	Role        string                                  `json:"role"`
	Condition   []kmscryptokeyiambinding.ConditionState `json:"condition"`
}
