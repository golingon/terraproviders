// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package cloudbuildbitbucketserverconfig

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ConnectedRepositories struct {
	// ProjectKey: string, required
	ProjectKey terra.StringValue `hcl:"project_key,attr" validate:"required"`
	// RepoSlug: string, required
	RepoSlug terra.StringValue `hcl:"repo_slug,attr" validate:"required"`
}

type Secrets struct {
	// AdminAccessTokenVersionName: string, required
	AdminAccessTokenVersionName terra.StringValue `hcl:"admin_access_token_version_name,attr" validate:"required"`
	// ReadAccessTokenVersionName: string, required
	ReadAccessTokenVersionName terra.StringValue `hcl:"read_access_token_version_name,attr" validate:"required"`
	// WebhookSecretVersionName: string, required
	WebhookSecretVersionName terra.StringValue `hcl:"webhook_secret_version_name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConnectedRepositoriesAttributes struct {
	ref terra.Reference
}

func (cr ConnectedRepositoriesAttributes) InternalRef() terra.Reference {
	return cr.ref
}

func (cr ConnectedRepositoriesAttributes) InternalWithRef(ref terra.Reference) ConnectedRepositoriesAttributes {
	return ConnectedRepositoriesAttributes{ref: ref}
}

func (cr ConnectedRepositoriesAttributes) InternalTokens() hclwrite.Tokens {
	return cr.ref.InternalTokens()
}

func (cr ConnectedRepositoriesAttributes) ProjectKey() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("project_key"))
}

func (cr ConnectedRepositoriesAttributes) RepoSlug() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("repo_slug"))
}

type SecretsAttributes struct {
	ref terra.Reference
}

func (s SecretsAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SecretsAttributes) InternalWithRef(ref terra.Reference) SecretsAttributes {
	return SecretsAttributes{ref: ref}
}

func (s SecretsAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SecretsAttributes) AdminAccessTokenVersionName() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("admin_access_token_version_name"))
}

func (s SecretsAttributes) ReadAccessTokenVersionName() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("read_access_token_version_name"))
}

func (s SecretsAttributes) WebhookSecretVersionName() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("webhook_secret_version_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type ConnectedRepositoriesState struct {
	ProjectKey string `json:"project_key"`
	RepoSlug   string `json:"repo_slug"`
}

type SecretsState struct {
	AdminAccessTokenVersionName string `json:"admin_access_token_version_name"`
	ReadAccessTokenVersionName  string `json:"read_access_token_version_name"`
	WebhookSecretVersionName    string `json:"webhook_secret_version_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
