// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	bigqueryreservation "github.com/golingon/terraproviders/google/4.59.0/bigqueryreservation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigqueryReservation(name string, args BigqueryReservationArgs) *BigqueryReservation {
	return &BigqueryReservation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryReservation)(nil)

type BigqueryReservation struct {
	Name  string
	Args  BigqueryReservationArgs
	state *bigqueryReservationState
}

func (br *BigqueryReservation) Type() string {
	return "google_bigquery_reservation"
}

func (br *BigqueryReservation) LocalName() string {
	return br.Name
}

func (br *BigqueryReservation) Configuration() interface{} {
	return br.Args
}

func (br *BigqueryReservation) Attributes() bigqueryReservationAttributes {
	return bigqueryReservationAttributes{ref: terra.ReferenceResource(br)}
}

func (br *BigqueryReservation) ImportState(av io.Reader) error {
	br.state = &bigqueryReservationState{}
	if err := json.NewDecoder(av).Decode(br.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", br.Type(), br.LocalName(), err)
	}
	return nil
}

func (br *BigqueryReservation) State() (*bigqueryReservationState, bool) {
	return br.state, br.state != nil
}

func (br *BigqueryReservation) StateMust() *bigqueryReservationState {
	if br.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", br.Type(), br.LocalName()))
	}
	return br.state
}

func (br *BigqueryReservation) DependOn() terra.Reference {
	return terra.ReferenceResource(br)
}

type BigqueryReservationArgs struct {
	// Concurrency: number, optional
	Concurrency terra.NumberValue `hcl:"concurrency,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreIdleSlots: bool, optional
	IgnoreIdleSlots terra.BoolValue `hcl:"ignore_idle_slots,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// MultiRegionAuxiliary: bool, optional
	MultiRegionAuxiliary terra.BoolValue `hcl:"multi_region_auxiliary,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SlotCapacity: number, required
	SlotCapacity terra.NumberValue `hcl:"slot_capacity,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *bigqueryreservation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BigqueryReservation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigqueryReservationAttributes struct {
	ref terra.Reference
}

func (br bigqueryReservationAttributes) Concurrency() terra.NumberValue {
	return terra.ReferenceNumber(br.ref.Append("concurrency"))
}

func (br bigqueryReservationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(br.ref.Append("id"))
}

func (br bigqueryReservationAttributes) IgnoreIdleSlots() terra.BoolValue {
	return terra.ReferenceBool(br.ref.Append("ignore_idle_slots"))
}

func (br bigqueryReservationAttributes) Location() terra.StringValue {
	return terra.ReferenceString(br.ref.Append("location"))
}

func (br bigqueryReservationAttributes) MultiRegionAuxiliary() terra.BoolValue {
	return terra.ReferenceBool(br.ref.Append("multi_region_auxiliary"))
}

func (br bigqueryReservationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(br.ref.Append("name"))
}

func (br bigqueryReservationAttributes) Project() terra.StringValue {
	return terra.ReferenceString(br.ref.Append("project"))
}

func (br bigqueryReservationAttributes) SlotCapacity() terra.NumberValue {
	return terra.ReferenceNumber(br.ref.Append("slot_capacity"))
}

func (br bigqueryReservationAttributes) Timeouts() bigqueryreservation.TimeoutsAttributes {
	return terra.ReferenceSingle[bigqueryreservation.TimeoutsAttributes](br.ref.Append("timeouts"))
}

type bigqueryReservationState struct {
	Concurrency          float64                            `json:"concurrency"`
	Id                   string                             `json:"id"`
	IgnoreIdleSlots      bool                               `json:"ignore_idle_slots"`
	Location             string                             `json:"location"`
	MultiRegionAuxiliary bool                               `json:"multi_region_auxiliary"`
	Name                 string                             `json:"name"`
	Project              string                             `json:"project"`
	SlotCapacity         float64                            `json:"slot_capacity"`
	Timeouts             *bigqueryreservation.TimeoutsState `json:"timeouts"`
}
