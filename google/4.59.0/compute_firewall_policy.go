// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computefirewallpolicy "github.com/golingon/terraproviders/google/4.59.0/computefirewallpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeFirewallPolicy(name string, args ComputeFirewallPolicyArgs) *ComputeFirewallPolicy {
	return &ComputeFirewallPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeFirewallPolicy)(nil)

type ComputeFirewallPolicy struct {
	Name  string
	Args  ComputeFirewallPolicyArgs
	state *computeFirewallPolicyState
}

func (cfp *ComputeFirewallPolicy) Type() string {
	return "google_compute_firewall_policy"
}

func (cfp *ComputeFirewallPolicy) LocalName() string {
	return cfp.Name
}

func (cfp *ComputeFirewallPolicy) Configuration() interface{} {
	return cfp.Args
}

func (cfp *ComputeFirewallPolicy) Attributes() computeFirewallPolicyAttributes {
	return computeFirewallPolicyAttributes{ref: terra.ReferenceResource(cfp)}
}

func (cfp *ComputeFirewallPolicy) ImportState(av io.Reader) error {
	cfp.state = &computeFirewallPolicyState{}
	if err := json.NewDecoder(av).Decode(cfp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cfp.Type(), cfp.LocalName(), err)
	}
	return nil
}

func (cfp *ComputeFirewallPolicy) State() (*computeFirewallPolicyState, bool) {
	return cfp.state, cfp.state != nil
}

func (cfp *ComputeFirewallPolicy) StateMust() *computeFirewallPolicyState {
	if cfp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cfp.Type(), cfp.LocalName()))
	}
	return cfp.state
}

func (cfp *ComputeFirewallPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(cfp)
}

type ComputeFirewallPolicyArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// ShortName: string, required
	ShortName terra.StringValue `hcl:"short_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *computefirewallpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeFirewallPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeFirewallPolicyAttributes struct {
	ref terra.Reference
}

func (cfp computeFirewallPolicyAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(cfp.ref.Append("creation_timestamp"))
}

func (cfp computeFirewallPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cfp.ref.Append("description"))
}

func (cfp computeFirewallPolicyAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceString(cfp.ref.Append("fingerprint"))
}

func (cfp computeFirewallPolicyAttributes) FirewallPolicyId() terra.StringValue {
	return terra.ReferenceString(cfp.ref.Append("firewall_policy_id"))
}

func (cfp computeFirewallPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cfp.ref.Append("id"))
}

func (cfp computeFirewallPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cfp.ref.Append("name"))
}

func (cfp computeFirewallPolicyAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(cfp.ref.Append("parent"))
}

func (cfp computeFirewallPolicyAttributes) RuleTupleCount() terra.NumberValue {
	return terra.ReferenceNumber(cfp.ref.Append("rule_tuple_count"))
}

func (cfp computeFirewallPolicyAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(cfp.ref.Append("self_link"))
}

func (cfp computeFirewallPolicyAttributes) SelfLinkWithId() terra.StringValue {
	return terra.ReferenceString(cfp.ref.Append("self_link_with_id"))
}

func (cfp computeFirewallPolicyAttributes) ShortName() terra.StringValue {
	return terra.ReferenceString(cfp.ref.Append("short_name"))
}

func (cfp computeFirewallPolicyAttributes) Timeouts() computefirewallpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[computefirewallpolicy.TimeoutsAttributes](cfp.ref.Append("timeouts"))
}

type computeFirewallPolicyState struct {
	CreationTimestamp string                               `json:"creation_timestamp"`
	Description       string                               `json:"description"`
	Fingerprint       string                               `json:"fingerprint"`
	FirewallPolicyId  string                               `json:"firewall_policy_id"`
	Id                string                               `json:"id"`
	Name              string                               `json:"name"`
	Parent            string                               `json:"parent"`
	RuleTupleCount    float64                              `json:"rule_tuple_count"`
	SelfLink          string                               `json:"self_link"`
	SelfLinkWithId    string                               `json:"self_link_with_id"`
	ShortName         string                               `json:"short_name"`
	Timeouts          *computefirewallpolicy.TimeoutsState `json:"timeouts"`
}
