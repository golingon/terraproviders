// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	osconfigospolicyassignment "github.com/golingon/terraproviders/google/4.59.0/osconfigospolicyassignment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewOsConfigOsPolicyAssignment(name string, args OsConfigOsPolicyAssignmentArgs) *OsConfigOsPolicyAssignment {
	return &OsConfigOsPolicyAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OsConfigOsPolicyAssignment)(nil)

type OsConfigOsPolicyAssignment struct {
	Name  string
	Args  OsConfigOsPolicyAssignmentArgs
	state *osConfigOsPolicyAssignmentState
}

func (ocopa *OsConfigOsPolicyAssignment) Type() string {
	return "google_os_config_os_policy_assignment"
}

func (ocopa *OsConfigOsPolicyAssignment) LocalName() string {
	return ocopa.Name
}

func (ocopa *OsConfigOsPolicyAssignment) Configuration() interface{} {
	return ocopa.Args
}

func (ocopa *OsConfigOsPolicyAssignment) Attributes() osConfigOsPolicyAssignmentAttributes {
	return osConfigOsPolicyAssignmentAttributes{ref: terra.ReferenceResource(ocopa)}
}

func (ocopa *OsConfigOsPolicyAssignment) ImportState(av io.Reader) error {
	ocopa.state = &osConfigOsPolicyAssignmentState{}
	if err := json.NewDecoder(av).Decode(ocopa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ocopa.Type(), ocopa.LocalName(), err)
	}
	return nil
}

func (ocopa *OsConfigOsPolicyAssignment) State() (*osConfigOsPolicyAssignmentState, bool) {
	return ocopa.state, ocopa.state != nil
}

func (ocopa *OsConfigOsPolicyAssignment) StateMust() *osConfigOsPolicyAssignmentState {
	if ocopa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ocopa.Type(), ocopa.LocalName()))
	}
	return ocopa.state
}

func (ocopa *OsConfigOsPolicyAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(ocopa)
}

type OsConfigOsPolicyAssignmentArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SkipAwaitRollout: bool, optional
	SkipAwaitRollout terra.BoolValue `hcl:"skip_await_rollout,attr"`
	// InstanceFilter: required
	InstanceFilter *osconfigospolicyassignment.InstanceFilter `hcl:"instance_filter,block" validate:"required"`
	// OsPolicies: min=1
	OsPolicies []osconfigospolicyassignment.OsPolicies `hcl:"os_policies,block" validate:"min=1"`
	// Rollout: required
	Rollout *osconfigospolicyassignment.Rollout `hcl:"rollout,block" validate:"required"`
	// Timeouts: optional
	Timeouts *osconfigospolicyassignment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that OsConfigOsPolicyAssignment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type osConfigOsPolicyAssignmentAttributes struct {
	ref terra.Reference
}

func (ocopa osConfigOsPolicyAssignmentAttributes) Baseline() terra.BoolValue {
	return terra.ReferenceBool(ocopa.ref.Append("baseline"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) Deleted() terra.BoolValue {
	return terra.ReferenceBool(ocopa.ref.Append("deleted"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ocopa.ref.Append("description"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ocopa.ref.Append("etag"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ocopa.ref.Append("id"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ocopa.ref.Append("location"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ocopa.ref.Append("name"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ocopa.ref.Append("project"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceBool(ocopa.ref.Append("reconciling"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) RevisionCreateTime() terra.StringValue {
	return terra.ReferenceString(ocopa.ref.Append("revision_create_time"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) RevisionId() terra.StringValue {
	return terra.ReferenceString(ocopa.ref.Append("revision_id"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) RolloutState() terra.StringValue {
	return terra.ReferenceString(ocopa.ref.Append("rollout_state"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) SkipAwaitRollout() terra.BoolValue {
	return terra.ReferenceBool(ocopa.ref.Append("skip_await_rollout"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(ocopa.ref.Append("uid"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) InstanceFilter() terra.ListValue[osconfigospolicyassignment.InstanceFilterAttributes] {
	return terra.ReferenceList[osconfigospolicyassignment.InstanceFilterAttributes](ocopa.ref.Append("instance_filter"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) OsPolicies() terra.ListValue[osconfigospolicyassignment.OsPoliciesAttributes] {
	return terra.ReferenceList[osconfigospolicyassignment.OsPoliciesAttributes](ocopa.ref.Append("os_policies"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) Rollout() terra.ListValue[osconfigospolicyassignment.RolloutAttributes] {
	return terra.ReferenceList[osconfigospolicyassignment.RolloutAttributes](ocopa.ref.Append("rollout"))
}

func (ocopa osConfigOsPolicyAssignmentAttributes) Timeouts() osconfigospolicyassignment.TimeoutsAttributes {
	return terra.ReferenceSingle[osconfigospolicyassignment.TimeoutsAttributes](ocopa.ref.Append("timeouts"))
}

type osConfigOsPolicyAssignmentState struct {
	Baseline           bool                                             `json:"baseline"`
	Deleted            bool                                             `json:"deleted"`
	Description        string                                           `json:"description"`
	Etag               string                                           `json:"etag"`
	Id                 string                                           `json:"id"`
	Location           string                                           `json:"location"`
	Name               string                                           `json:"name"`
	Project            string                                           `json:"project"`
	Reconciling        bool                                             `json:"reconciling"`
	RevisionCreateTime string                                           `json:"revision_create_time"`
	RevisionId         string                                           `json:"revision_id"`
	RolloutState       string                                           `json:"rollout_state"`
	SkipAwaitRollout   bool                                             `json:"skip_await_rollout"`
	Uid                string                                           `json:"uid"`
	InstanceFilter     []osconfigospolicyassignment.InstanceFilterState `json:"instance_filter"`
	OsPolicies         []osconfigospolicyassignment.OsPoliciesState     `json:"os_policies"`
	Rollout            []osconfigospolicyassignment.RolloutState        `json:"rollout"`
	Timeouts           *osconfigospolicyassignment.TimeoutsState        `json:"timeouts"`
}
