// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dataprocworkflowtemplate "github.com/golingon/terraproviders/google/4.59.0/dataprocworkflowtemplate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataprocWorkflowTemplate(name string, args DataprocWorkflowTemplateArgs) *DataprocWorkflowTemplate {
	return &DataprocWorkflowTemplate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataprocWorkflowTemplate)(nil)

type DataprocWorkflowTemplate struct {
	Name  string
	Args  DataprocWorkflowTemplateArgs
	state *dataprocWorkflowTemplateState
}

func (dwt *DataprocWorkflowTemplate) Type() string {
	return "google_dataproc_workflow_template"
}

func (dwt *DataprocWorkflowTemplate) LocalName() string {
	return dwt.Name
}

func (dwt *DataprocWorkflowTemplate) Configuration() interface{} {
	return dwt.Args
}

func (dwt *DataprocWorkflowTemplate) Attributes() dataprocWorkflowTemplateAttributes {
	return dataprocWorkflowTemplateAttributes{ref: terra.ReferenceResource(dwt)}
}

func (dwt *DataprocWorkflowTemplate) ImportState(av io.Reader) error {
	dwt.state = &dataprocWorkflowTemplateState{}
	if err := json.NewDecoder(av).Decode(dwt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dwt.Type(), dwt.LocalName(), err)
	}
	return nil
}

func (dwt *DataprocWorkflowTemplate) State() (*dataprocWorkflowTemplateState, bool) {
	return dwt.state, dwt.state != nil
}

func (dwt *DataprocWorkflowTemplate) StateMust() *dataprocWorkflowTemplateState {
	if dwt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dwt.Type(), dwt.LocalName()))
	}
	return dwt.state
}

func (dwt *DataprocWorkflowTemplate) DependOn() terra.Reference {
	return terra.ReferenceResource(dwt)
}

type DataprocWorkflowTemplateArgs struct {
	// DagTimeout: string, optional
	DagTimeout terra.StringValue `hcl:"dag_timeout,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Version: number, optional
	Version terra.NumberValue `hcl:"version,attr"`
	// Jobs: min=1
	Jobs []dataprocworkflowtemplate.Jobs `hcl:"jobs,block" validate:"min=1"`
	// Parameters: min=0
	Parameters []dataprocworkflowtemplate.Parameters `hcl:"parameters,block" validate:"min=0"`
	// Placement: required
	Placement *dataprocworkflowtemplate.Placement `hcl:"placement,block" validate:"required"`
	// Timeouts: optional
	Timeouts *dataprocworkflowtemplate.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataprocWorkflowTemplate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataprocWorkflowTemplateAttributes struct {
	ref terra.Reference
}

func (dwt dataprocWorkflowTemplateAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(dwt.ref.Append("create_time"))
}

func (dwt dataprocWorkflowTemplateAttributes) DagTimeout() terra.StringValue {
	return terra.ReferenceString(dwt.ref.Append("dag_timeout"))
}

func (dwt dataprocWorkflowTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dwt.ref.Append("id"))
}

func (dwt dataprocWorkflowTemplateAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dwt.ref.Append("labels"))
}

func (dwt dataprocWorkflowTemplateAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dwt.ref.Append("location"))
}

func (dwt dataprocWorkflowTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dwt.ref.Append("name"))
}

func (dwt dataprocWorkflowTemplateAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dwt.ref.Append("project"))
}

func (dwt dataprocWorkflowTemplateAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(dwt.ref.Append("update_time"))
}

func (dwt dataprocWorkflowTemplateAttributes) Version() terra.NumberValue {
	return terra.ReferenceNumber(dwt.ref.Append("version"))
}

func (dwt dataprocWorkflowTemplateAttributes) Jobs() terra.ListValue[dataprocworkflowtemplate.JobsAttributes] {
	return terra.ReferenceList[dataprocworkflowtemplate.JobsAttributes](dwt.ref.Append("jobs"))
}

func (dwt dataprocWorkflowTemplateAttributes) Parameters() terra.ListValue[dataprocworkflowtemplate.ParametersAttributes] {
	return terra.ReferenceList[dataprocworkflowtemplate.ParametersAttributes](dwt.ref.Append("parameters"))
}

func (dwt dataprocWorkflowTemplateAttributes) Placement() terra.ListValue[dataprocworkflowtemplate.PlacementAttributes] {
	return terra.ReferenceList[dataprocworkflowtemplate.PlacementAttributes](dwt.ref.Append("placement"))
}

func (dwt dataprocWorkflowTemplateAttributes) Timeouts() dataprocworkflowtemplate.TimeoutsAttributes {
	return terra.ReferenceSingle[dataprocworkflowtemplate.TimeoutsAttributes](dwt.ref.Append("timeouts"))
}

type dataprocWorkflowTemplateState struct {
	CreateTime string                                     `json:"create_time"`
	DagTimeout string                                     `json:"dag_timeout"`
	Id         string                                     `json:"id"`
	Labels     map[string]string                          `json:"labels"`
	Location   string                                     `json:"location"`
	Name       string                                     `json:"name"`
	Project    string                                     `json:"project"`
	UpdateTime string                                     `json:"update_time"`
	Version    float64                                    `json:"version"`
	Jobs       []dataprocworkflowtemplate.JobsState       `json:"jobs"`
	Parameters []dataprocworkflowtemplate.ParametersState `json:"parameters"`
	Placement  []dataprocworkflowtemplate.PlacementState  `json:"placement"`
	Timeouts   *dataprocworkflowtemplate.TimeoutsState    `json:"timeouts"`
}
