// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	cloudidentitygroupmembership "github.com/golingon/terraproviders/google/4.59.0/cloudidentitygroupmembership"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudIdentityGroupMembership(name string, args CloudIdentityGroupMembershipArgs) *CloudIdentityGroupMembership {
	return &CloudIdentityGroupMembership{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudIdentityGroupMembership)(nil)

type CloudIdentityGroupMembership struct {
	Name  string
	Args  CloudIdentityGroupMembershipArgs
	state *cloudIdentityGroupMembershipState
}

func (cigm *CloudIdentityGroupMembership) Type() string {
	return "google_cloud_identity_group_membership"
}

func (cigm *CloudIdentityGroupMembership) LocalName() string {
	return cigm.Name
}

func (cigm *CloudIdentityGroupMembership) Configuration() interface{} {
	return cigm.Args
}

func (cigm *CloudIdentityGroupMembership) Attributes() cloudIdentityGroupMembershipAttributes {
	return cloudIdentityGroupMembershipAttributes{ref: terra.ReferenceResource(cigm)}
}

func (cigm *CloudIdentityGroupMembership) ImportState(av io.Reader) error {
	cigm.state = &cloudIdentityGroupMembershipState{}
	if err := json.NewDecoder(av).Decode(cigm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cigm.Type(), cigm.LocalName(), err)
	}
	return nil
}

func (cigm *CloudIdentityGroupMembership) State() (*cloudIdentityGroupMembershipState, bool) {
	return cigm.state, cigm.state != nil
}

func (cigm *CloudIdentityGroupMembership) StateMust() *cloudIdentityGroupMembershipState {
	if cigm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cigm.Type(), cigm.LocalName()))
	}
	return cigm.state
}

func (cigm *CloudIdentityGroupMembership) DependOn() terra.Reference {
	return terra.ReferenceResource(cigm)
}

type CloudIdentityGroupMembershipArgs struct {
	// Group: string, required
	Group terra.StringValue `hcl:"group,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PreferredMemberKey: optional
	PreferredMemberKey *cloudidentitygroupmembership.PreferredMemberKey `hcl:"preferred_member_key,block"`
	// Roles: min=1
	Roles []cloudidentitygroupmembership.Roles `hcl:"roles,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *cloudidentitygroupmembership.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CloudIdentityGroupMembership depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudIdentityGroupMembershipAttributes struct {
	ref terra.Reference
}

func (cigm cloudIdentityGroupMembershipAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("create_time"))
}

func (cigm cloudIdentityGroupMembershipAttributes) Group() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("group"))
}

func (cigm cloudIdentityGroupMembershipAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("id"))
}

func (cigm cloudIdentityGroupMembershipAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("name"))
}

func (cigm cloudIdentityGroupMembershipAttributes) Type() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("type"))
}

func (cigm cloudIdentityGroupMembershipAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("update_time"))
}

func (cigm cloudIdentityGroupMembershipAttributes) PreferredMemberKey() terra.ListValue[cloudidentitygroupmembership.PreferredMemberKeyAttributes] {
	return terra.ReferenceList[cloudidentitygroupmembership.PreferredMemberKeyAttributes](cigm.ref.Append("preferred_member_key"))
}

func (cigm cloudIdentityGroupMembershipAttributes) Roles() terra.SetValue[cloudidentitygroupmembership.RolesAttributes] {
	return terra.ReferenceSet[cloudidentitygroupmembership.RolesAttributes](cigm.ref.Append("roles"))
}

func (cigm cloudIdentityGroupMembershipAttributes) Timeouts() cloudidentitygroupmembership.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudidentitygroupmembership.TimeoutsAttributes](cigm.ref.Append("timeouts"))
}

type cloudIdentityGroupMembershipState struct {
	CreateTime         string                                                 `json:"create_time"`
	Group              string                                                 `json:"group"`
	Id                 string                                                 `json:"id"`
	Name               string                                                 `json:"name"`
	Type               string                                                 `json:"type"`
	UpdateTime         string                                                 `json:"update_time"`
	PreferredMemberKey []cloudidentitygroupmembership.PreferredMemberKeyState `json:"preferred_member_key"`
	Roles              []cloudidentitygroupmembership.RolesState              `json:"roles"`
	Timeouts           *cloudidentitygroupmembership.TimeoutsState            `json:"timeouts"`
}
