// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dialogflowcxversion "github.com/golingon/terraproviders/google/4.59.0/dialogflowcxversion"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDialogflowCxVersion(name string, args DialogflowCxVersionArgs) *DialogflowCxVersion {
	return &DialogflowCxVersion{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DialogflowCxVersion)(nil)

type DialogflowCxVersion struct {
	Name  string
	Args  DialogflowCxVersionArgs
	state *dialogflowCxVersionState
}

func (dcv *DialogflowCxVersion) Type() string {
	return "google_dialogflow_cx_version"
}

func (dcv *DialogflowCxVersion) LocalName() string {
	return dcv.Name
}

func (dcv *DialogflowCxVersion) Configuration() interface{} {
	return dcv.Args
}

func (dcv *DialogflowCxVersion) Attributes() dialogflowCxVersionAttributes {
	return dialogflowCxVersionAttributes{ref: terra.ReferenceResource(dcv)}
}

func (dcv *DialogflowCxVersion) ImportState(av io.Reader) error {
	dcv.state = &dialogflowCxVersionState{}
	if err := json.NewDecoder(av).Decode(dcv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcv.Type(), dcv.LocalName(), err)
	}
	return nil
}

func (dcv *DialogflowCxVersion) State() (*dialogflowCxVersionState, bool) {
	return dcv.state, dcv.state != nil
}

func (dcv *DialogflowCxVersion) StateMust() *dialogflowCxVersionState {
	if dcv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcv.Type(), dcv.LocalName()))
	}
	return dcv.state
}

func (dcv *DialogflowCxVersion) DependOn() terra.Reference {
	return terra.ReferenceResource(dcv)
}

type DialogflowCxVersionArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, optional
	Parent terra.StringValue `hcl:"parent,attr"`
	// NluSettings: min=0
	NluSettings []dialogflowcxversion.NluSettings `hcl:"nlu_settings,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dialogflowcxversion.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DialogflowCxVersion depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dialogflowCxVersionAttributes struct {
	ref terra.Reference
}

func (dcv dialogflowCxVersionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(dcv.ref.Append("create_time"))
}

func (dcv dialogflowCxVersionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dcv.ref.Append("description"))
}

func (dcv dialogflowCxVersionAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(dcv.ref.Append("display_name"))
}

func (dcv dialogflowCxVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dcv.ref.Append("id"))
}

func (dcv dialogflowCxVersionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dcv.ref.Append("name"))
}

func (dcv dialogflowCxVersionAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(dcv.ref.Append("parent"))
}

func (dcv dialogflowCxVersionAttributes) State() terra.StringValue {
	return terra.ReferenceString(dcv.ref.Append("state"))
}

func (dcv dialogflowCxVersionAttributes) NluSettings() terra.ListValue[dialogflowcxversion.NluSettingsAttributes] {
	return terra.ReferenceList[dialogflowcxversion.NluSettingsAttributes](dcv.ref.Append("nlu_settings"))
}

func (dcv dialogflowCxVersionAttributes) Timeouts() dialogflowcxversion.TimeoutsAttributes {
	return terra.ReferenceSingle[dialogflowcxversion.TimeoutsAttributes](dcv.ref.Append("timeouts"))
}

type dialogflowCxVersionState struct {
	CreateTime  string                                 `json:"create_time"`
	Description string                                 `json:"description"`
	DisplayName string                                 `json:"display_name"`
	Id          string                                 `json:"id"`
	Name        string                                 `json:"name"`
	Parent      string                                 `json:"parent"`
	State       string                                 `json:"state"`
	NluSettings []dialogflowcxversion.NluSettingsState `json:"nlu_settings"`
	Timeouts    *dialogflowcxversion.TimeoutsState     `json:"timeouts"`
}
