// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dataprocclusteriammember "github.com/golingon/terraproviders/google/4.59.0/dataprocclusteriammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataprocClusterIamMember(name string, args DataprocClusterIamMemberArgs) *DataprocClusterIamMember {
	return &DataprocClusterIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataprocClusterIamMember)(nil)

type DataprocClusterIamMember struct {
	Name  string
	Args  DataprocClusterIamMemberArgs
	state *dataprocClusterIamMemberState
}

func (dcim *DataprocClusterIamMember) Type() string {
	return "google_dataproc_cluster_iam_member"
}

func (dcim *DataprocClusterIamMember) LocalName() string {
	return dcim.Name
}

func (dcim *DataprocClusterIamMember) Configuration() interface{} {
	return dcim.Args
}

func (dcim *DataprocClusterIamMember) Attributes() dataprocClusterIamMemberAttributes {
	return dataprocClusterIamMemberAttributes{ref: terra.ReferenceResource(dcim)}
}

func (dcim *DataprocClusterIamMember) ImportState(av io.Reader) error {
	dcim.state = &dataprocClusterIamMemberState{}
	if err := json.NewDecoder(av).Decode(dcim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcim.Type(), dcim.LocalName(), err)
	}
	return nil
}

func (dcim *DataprocClusterIamMember) State() (*dataprocClusterIamMemberState, bool) {
	return dcim.state, dcim.state != nil
}

func (dcim *DataprocClusterIamMember) StateMust() *dataprocClusterIamMemberState {
	if dcim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcim.Type(), dcim.LocalName()))
	}
	return dcim.state
}

func (dcim *DataprocClusterIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(dcim)
}

type DataprocClusterIamMemberArgs struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *dataprocclusteriammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataprocClusterIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataprocClusterIamMemberAttributes struct {
	ref terra.Reference
}

func (dcim dataprocClusterIamMemberAttributes) Cluster() terra.StringValue {
	return terra.ReferenceString(dcim.ref.Append("cluster"))
}

func (dcim dataprocClusterIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dcim.ref.Append("etag"))
}

func (dcim dataprocClusterIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dcim.ref.Append("id"))
}

func (dcim dataprocClusterIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(dcim.ref.Append("member"))
}

func (dcim dataprocClusterIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dcim.ref.Append("project"))
}

func (dcim dataprocClusterIamMemberAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dcim.ref.Append("region"))
}

func (dcim dataprocClusterIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(dcim.ref.Append("role"))
}

func (dcim dataprocClusterIamMemberAttributes) Condition() terra.ListValue[dataprocclusteriammember.ConditionAttributes] {
	return terra.ReferenceList[dataprocclusteriammember.ConditionAttributes](dcim.ref.Append("condition"))
}

type dataprocClusterIamMemberState struct {
	Cluster   string                                    `json:"cluster"`
	Etag      string                                    `json:"etag"`
	Id        string                                    `json:"id"`
	Member    string                                    `json:"member"`
	Project   string                                    `json:"project"`
	Region    string                                    `json:"region"`
	Role      string                                    `json:"role"`
	Condition []dataprocclusteriammember.ConditionState `json:"condition"`
}
