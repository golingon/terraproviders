// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	privatecacertificatetemplate "github.com/golingon/terraproviders/google/4.59.0/privatecacertificatetemplate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivatecaCertificateTemplate(name string, args PrivatecaCertificateTemplateArgs) *PrivatecaCertificateTemplate {
	return &PrivatecaCertificateTemplate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivatecaCertificateTemplate)(nil)

type PrivatecaCertificateTemplate struct {
	Name  string
	Args  PrivatecaCertificateTemplateArgs
	state *privatecaCertificateTemplateState
}

func (pct *PrivatecaCertificateTemplate) Type() string {
	return "google_privateca_certificate_template"
}

func (pct *PrivatecaCertificateTemplate) LocalName() string {
	return pct.Name
}

func (pct *PrivatecaCertificateTemplate) Configuration() interface{} {
	return pct.Args
}

func (pct *PrivatecaCertificateTemplate) Attributes() privatecaCertificateTemplateAttributes {
	return privatecaCertificateTemplateAttributes{ref: terra.ReferenceResource(pct)}
}

func (pct *PrivatecaCertificateTemplate) ImportState(av io.Reader) error {
	pct.state = &privatecaCertificateTemplateState{}
	if err := json.NewDecoder(av).Decode(pct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pct.Type(), pct.LocalName(), err)
	}
	return nil
}

func (pct *PrivatecaCertificateTemplate) State() (*privatecaCertificateTemplateState, bool) {
	return pct.state, pct.state != nil
}

func (pct *PrivatecaCertificateTemplate) StateMust() *privatecaCertificateTemplateState {
	if pct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pct.Type(), pct.LocalName()))
	}
	return pct.state
}

func (pct *PrivatecaCertificateTemplate) DependOn() terra.Reference {
	return terra.ReferenceResource(pct)
}

type PrivatecaCertificateTemplateArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// IdentityConstraints: optional
	IdentityConstraints *privatecacertificatetemplate.IdentityConstraints `hcl:"identity_constraints,block"`
	// PassthroughExtensions: optional
	PassthroughExtensions *privatecacertificatetemplate.PassthroughExtensions `hcl:"passthrough_extensions,block"`
	// PredefinedValues: optional
	PredefinedValues *privatecacertificatetemplate.PredefinedValues `hcl:"predefined_values,block"`
	// Timeouts: optional
	Timeouts *privatecacertificatetemplate.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PrivatecaCertificateTemplate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privatecaCertificateTemplateAttributes struct {
	ref terra.Reference
}

func (pct privatecaCertificateTemplateAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(pct.ref.Append("create_time"))
}

func (pct privatecaCertificateTemplateAttributes) Description() terra.StringValue {
	return terra.ReferenceString(pct.ref.Append("description"))
}

func (pct privatecaCertificateTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pct.ref.Append("id"))
}

func (pct privatecaCertificateTemplateAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pct.ref.Append("labels"))
}

func (pct privatecaCertificateTemplateAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pct.ref.Append("location"))
}

func (pct privatecaCertificateTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pct.ref.Append("name"))
}

func (pct privatecaCertificateTemplateAttributes) Project() terra.StringValue {
	return terra.ReferenceString(pct.ref.Append("project"))
}

func (pct privatecaCertificateTemplateAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(pct.ref.Append("update_time"))
}

func (pct privatecaCertificateTemplateAttributes) IdentityConstraints() terra.ListValue[privatecacertificatetemplate.IdentityConstraintsAttributes] {
	return terra.ReferenceList[privatecacertificatetemplate.IdentityConstraintsAttributes](pct.ref.Append("identity_constraints"))
}

func (pct privatecaCertificateTemplateAttributes) PassthroughExtensions() terra.ListValue[privatecacertificatetemplate.PassthroughExtensionsAttributes] {
	return terra.ReferenceList[privatecacertificatetemplate.PassthroughExtensionsAttributes](pct.ref.Append("passthrough_extensions"))
}

func (pct privatecaCertificateTemplateAttributes) PredefinedValues() terra.ListValue[privatecacertificatetemplate.PredefinedValuesAttributes] {
	return terra.ReferenceList[privatecacertificatetemplate.PredefinedValuesAttributes](pct.ref.Append("predefined_values"))
}

func (pct privatecaCertificateTemplateAttributes) Timeouts() privatecacertificatetemplate.TimeoutsAttributes {
	return terra.ReferenceSingle[privatecacertificatetemplate.TimeoutsAttributes](pct.ref.Append("timeouts"))
}

type privatecaCertificateTemplateState struct {
	CreateTime            string                                                    `json:"create_time"`
	Description           string                                                    `json:"description"`
	Id                    string                                                    `json:"id"`
	Labels                map[string]string                                         `json:"labels"`
	Location              string                                                    `json:"location"`
	Name                  string                                                    `json:"name"`
	Project               string                                                    `json:"project"`
	UpdateTime            string                                                    `json:"update_time"`
	IdentityConstraints   []privatecacertificatetemplate.IdentityConstraintsState   `json:"identity_constraints"`
	PassthroughExtensions []privatecacertificatetemplate.PassthroughExtensionsState `json:"passthrough_extensions"`
	PredefinedValues      []privatecacertificatetemplate.PredefinedValuesState      `json:"predefined_values"`
	Timeouts              *privatecacertificatetemplate.TimeoutsState               `json:"timeouts"`
}
