// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package computerouter

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Bgp struct {
	// AdvertiseMode: string, optional
	AdvertiseMode terra.StringValue `hcl:"advertise_mode,attr"`
	// AdvertisedGroups: list of string, optional
	AdvertisedGroups terra.ListValue[terra.StringValue] `hcl:"advertised_groups,attr"`
	// Asn: number, required
	Asn terra.NumberValue `hcl:"asn,attr" validate:"required"`
	// KeepaliveInterval: number, optional
	KeepaliveInterval terra.NumberValue `hcl:"keepalive_interval,attr"`
	// AdvertisedIpRanges: min=0
	AdvertisedIpRanges []AdvertisedIpRanges `hcl:"advertised_ip_ranges,block" validate:"min=0"`
}

type AdvertisedIpRanges struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Range: string, required
	Range terra.StringValue `hcl:"range,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BgpAttributes struct {
	ref terra.Reference
}

func (b BgpAttributes) InternalRef() terra.Reference {
	return b.ref
}

func (b BgpAttributes) InternalWithRef(ref terra.Reference) BgpAttributes {
	return BgpAttributes{ref: ref}
}

func (b BgpAttributes) InternalTokens() hclwrite.Tokens {
	return b.ref.InternalTokens()
}

func (b BgpAttributes) AdvertiseMode() terra.StringValue {
	return terra.ReferenceString(b.ref.Append("advertise_mode"))
}

func (b BgpAttributes) AdvertisedGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](b.ref.Append("advertised_groups"))
}

func (b BgpAttributes) Asn() terra.NumberValue {
	return terra.ReferenceNumber(b.ref.Append("asn"))
}

func (b BgpAttributes) KeepaliveInterval() terra.NumberValue {
	return terra.ReferenceNumber(b.ref.Append("keepalive_interval"))
}

func (b BgpAttributes) AdvertisedIpRanges() terra.ListValue[AdvertisedIpRangesAttributes] {
	return terra.ReferenceList[AdvertisedIpRangesAttributes](b.ref.Append("advertised_ip_ranges"))
}

type AdvertisedIpRangesAttributes struct {
	ref terra.Reference
}

func (air AdvertisedIpRangesAttributes) InternalRef() terra.Reference {
	return air.ref
}

func (air AdvertisedIpRangesAttributes) InternalWithRef(ref terra.Reference) AdvertisedIpRangesAttributes {
	return AdvertisedIpRangesAttributes{ref: ref}
}

func (air AdvertisedIpRangesAttributes) InternalTokens() hclwrite.Tokens {
	return air.ref.InternalTokens()
}

func (air AdvertisedIpRangesAttributes) Description() terra.StringValue {
	return terra.ReferenceString(air.ref.Append("description"))
}

func (air AdvertisedIpRangesAttributes) Range() terra.StringValue {
	return terra.ReferenceString(air.ref.Append("range"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type BgpState struct {
	AdvertiseMode      string                    `json:"advertise_mode"`
	AdvertisedGroups   []string                  `json:"advertised_groups"`
	Asn                float64                   `json:"asn"`
	KeepaliveInterval  float64                   `json:"keepalive_interval"`
	AdvertisedIpRanges []AdvertisedIpRangesState `json:"advertised_ip_ranges"`
}

type AdvertisedIpRangesState struct {
	Description string `json:"description"`
	Range       string `json:"range"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
