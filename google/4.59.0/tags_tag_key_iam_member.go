// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	tagstagkeyiammember "github.com/golingon/terraproviders/google/4.59.0/tagstagkeyiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewTagsTagKeyIamMember(name string, args TagsTagKeyIamMemberArgs) *TagsTagKeyIamMember {
	return &TagsTagKeyIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TagsTagKeyIamMember)(nil)

type TagsTagKeyIamMember struct {
	Name  string
	Args  TagsTagKeyIamMemberArgs
	state *tagsTagKeyIamMemberState
}

func (ttkim *TagsTagKeyIamMember) Type() string {
	return "google_tags_tag_key_iam_member"
}

func (ttkim *TagsTagKeyIamMember) LocalName() string {
	return ttkim.Name
}

func (ttkim *TagsTagKeyIamMember) Configuration() interface{} {
	return ttkim.Args
}

func (ttkim *TagsTagKeyIamMember) Attributes() tagsTagKeyIamMemberAttributes {
	return tagsTagKeyIamMemberAttributes{ref: terra.ReferenceResource(ttkim)}
}

func (ttkim *TagsTagKeyIamMember) ImportState(av io.Reader) error {
	ttkim.state = &tagsTagKeyIamMemberState{}
	if err := json.NewDecoder(av).Decode(ttkim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ttkim.Type(), ttkim.LocalName(), err)
	}
	return nil
}

func (ttkim *TagsTagKeyIamMember) State() (*tagsTagKeyIamMemberState, bool) {
	return ttkim.state, ttkim.state != nil
}

func (ttkim *TagsTagKeyIamMember) StateMust() *tagsTagKeyIamMemberState {
	if ttkim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ttkim.Type(), ttkim.LocalName()))
	}
	return ttkim.state
}

func (ttkim *TagsTagKeyIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(ttkim)
}

type TagsTagKeyIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// TagKey: string, required
	TagKey terra.StringValue `hcl:"tag_key,attr" validate:"required"`
	// Condition: optional
	Condition *tagstagkeyiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that TagsTagKeyIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type tagsTagKeyIamMemberAttributes struct {
	ref terra.Reference
}

func (ttkim tagsTagKeyIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ttkim.ref.Append("etag"))
}

func (ttkim tagsTagKeyIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ttkim.ref.Append("id"))
}

func (ttkim tagsTagKeyIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(ttkim.ref.Append("member"))
}

func (ttkim tagsTagKeyIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(ttkim.ref.Append("role"))
}

func (ttkim tagsTagKeyIamMemberAttributes) TagKey() terra.StringValue {
	return terra.ReferenceString(ttkim.ref.Append("tag_key"))
}

func (ttkim tagsTagKeyIamMemberAttributes) Condition() terra.ListValue[tagstagkeyiammember.ConditionAttributes] {
	return terra.ReferenceList[tagstagkeyiammember.ConditionAttributes](ttkim.ref.Append("condition"))
}

type tagsTagKeyIamMemberState struct {
	Etag      string                               `json:"etag"`
	Id        string                               `json:"id"`
	Member    string                               `json:"member"`
	Role      string                               `json:"role"`
	TagKey    string                               `json:"tag_key"`
	Condition []tagstagkeyiammember.ConditionState `json:"condition"`
}
