// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeRegionDiskIamPolicy(name string, args ComputeRegionDiskIamPolicyArgs) *ComputeRegionDiskIamPolicy {
	return &ComputeRegionDiskIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeRegionDiskIamPolicy)(nil)

type ComputeRegionDiskIamPolicy struct {
	Name  string
	Args  ComputeRegionDiskIamPolicyArgs
	state *computeRegionDiskIamPolicyState
}

func (crdip *ComputeRegionDiskIamPolicy) Type() string {
	return "google_compute_region_disk_iam_policy"
}

func (crdip *ComputeRegionDiskIamPolicy) LocalName() string {
	return crdip.Name
}

func (crdip *ComputeRegionDiskIamPolicy) Configuration() interface{} {
	return crdip.Args
}

func (crdip *ComputeRegionDiskIamPolicy) Attributes() computeRegionDiskIamPolicyAttributes {
	return computeRegionDiskIamPolicyAttributes{ref: terra.ReferenceResource(crdip)}
}

func (crdip *ComputeRegionDiskIamPolicy) ImportState(av io.Reader) error {
	crdip.state = &computeRegionDiskIamPolicyState{}
	if err := json.NewDecoder(av).Decode(crdip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crdip.Type(), crdip.LocalName(), err)
	}
	return nil
}

func (crdip *ComputeRegionDiskIamPolicy) State() (*computeRegionDiskIamPolicyState, bool) {
	return crdip.state, crdip.state != nil
}

func (crdip *ComputeRegionDiskIamPolicy) StateMust() *computeRegionDiskIamPolicyState {
	if crdip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crdip.Type(), crdip.LocalName()))
	}
	return crdip.state
}

func (crdip *ComputeRegionDiskIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(crdip)
}

type ComputeRegionDiskIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// DependsOn contains resources that ComputeRegionDiskIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeRegionDiskIamPolicyAttributes struct {
	ref terra.Reference
}

func (crdip computeRegionDiskIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(crdip.ref.Append("etag"))
}

func (crdip computeRegionDiskIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crdip.ref.Append("id"))
}

func (crdip computeRegionDiskIamPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crdip.ref.Append("name"))
}

func (crdip computeRegionDiskIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(crdip.ref.Append("policy_data"))
}

func (crdip computeRegionDiskIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crdip.ref.Append("project"))
}

func (crdip computeRegionDiskIamPolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceString(crdip.ref.Append("region"))
}

type computeRegionDiskIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Name       string `json:"name"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	Region     string `json:"region"`
}
