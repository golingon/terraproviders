// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	loggingfolderbucketconfig "github.com/golingon/terraproviders/google/4.59.0/loggingfolderbucketconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLoggingFolderBucketConfig(name string, args LoggingFolderBucketConfigArgs) *LoggingFolderBucketConfig {
	return &LoggingFolderBucketConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LoggingFolderBucketConfig)(nil)

type LoggingFolderBucketConfig struct {
	Name  string
	Args  LoggingFolderBucketConfigArgs
	state *loggingFolderBucketConfigState
}

func (lfbc *LoggingFolderBucketConfig) Type() string {
	return "google_logging_folder_bucket_config"
}

func (lfbc *LoggingFolderBucketConfig) LocalName() string {
	return lfbc.Name
}

func (lfbc *LoggingFolderBucketConfig) Configuration() interface{} {
	return lfbc.Args
}

func (lfbc *LoggingFolderBucketConfig) Attributes() loggingFolderBucketConfigAttributes {
	return loggingFolderBucketConfigAttributes{ref: terra.ReferenceResource(lfbc)}
}

func (lfbc *LoggingFolderBucketConfig) ImportState(av io.Reader) error {
	lfbc.state = &loggingFolderBucketConfigState{}
	if err := json.NewDecoder(av).Decode(lfbc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lfbc.Type(), lfbc.LocalName(), err)
	}
	return nil
}

func (lfbc *LoggingFolderBucketConfig) State() (*loggingFolderBucketConfigState, bool) {
	return lfbc.state, lfbc.state != nil
}

func (lfbc *LoggingFolderBucketConfig) StateMust() *loggingFolderBucketConfigState {
	if lfbc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lfbc.Type(), lfbc.LocalName()))
	}
	return lfbc.state
}

func (lfbc *LoggingFolderBucketConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(lfbc)
}

type LoggingFolderBucketConfigArgs struct {
	// BucketId: string, required
	BucketId terra.StringValue `hcl:"bucket_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Folder: string, required
	Folder terra.StringValue `hcl:"folder,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// RetentionDays: number, optional
	RetentionDays terra.NumberValue `hcl:"retention_days,attr"`
	// CmekSettings: optional
	CmekSettings *loggingfolderbucketconfig.CmekSettings `hcl:"cmek_settings,block"`
	// DependsOn contains resources that LoggingFolderBucketConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type loggingFolderBucketConfigAttributes struct {
	ref terra.Reference
}

func (lfbc loggingFolderBucketConfigAttributes) BucketId() terra.StringValue {
	return terra.ReferenceString(lfbc.ref.Append("bucket_id"))
}

func (lfbc loggingFolderBucketConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceString(lfbc.ref.Append("description"))
}

func (lfbc loggingFolderBucketConfigAttributes) Folder() terra.StringValue {
	return terra.ReferenceString(lfbc.ref.Append("folder"))
}

func (lfbc loggingFolderBucketConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lfbc.ref.Append("id"))
}

func (lfbc loggingFolderBucketConfigAttributes) LifecycleState() terra.StringValue {
	return terra.ReferenceString(lfbc.ref.Append("lifecycle_state"))
}

func (lfbc loggingFolderBucketConfigAttributes) Location() terra.StringValue {
	return terra.ReferenceString(lfbc.ref.Append("location"))
}

func (lfbc loggingFolderBucketConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lfbc.ref.Append("name"))
}

func (lfbc loggingFolderBucketConfigAttributes) RetentionDays() terra.NumberValue {
	return terra.ReferenceNumber(lfbc.ref.Append("retention_days"))
}

func (lfbc loggingFolderBucketConfigAttributes) CmekSettings() terra.ListValue[loggingfolderbucketconfig.CmekSettingsAttributes] {
	return terra.ReferenceList[loggingfolderbucketconfig.CmekSettingsAttributes](lfbc.ref.Append("cmek_settings"))
}

type loggingFolderBucketConfigState struct {
	BucketId       string                                        `json:"bucket_id"`
	Description    string                                        `json:"description"`
	Folder         string                                        `json:"folder"`
	Id             string                                        `json:"id"`
	LifecycleState string                                        `json:"lifecycle_state"`
	Location       string                                        `json:"location"`
	Name           string                                        `json:"name"`
	RetentionDays  float64                                       `json:"retention_days"`
	CmekSettings   []loggingfolderbucketconfig.CmekSettingsState `json:"cmek_settings"`
}
