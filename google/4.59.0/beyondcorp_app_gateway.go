// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	beyondcorpappgateway "github.com/golingon/terraproviders/google/4.59.0/beyondcorpappgateway"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBeyondcorpAppGateway(name string, args BeyondcorpAppGatewayArgs) *BeyondcorpAppGateway {
	return &BeyondcorpAppGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BeyondcorpAppGateway)(nil)

type BeyondcorpAppGateway struct {
	Name  string
	Args  BeyondcorpAppGatewayArgs
	state *beyondcorpAppGatewayState
}

func (bag *BeyondcorpAppGateway) Type() string {
	return "google_beyondcorp_app_gateway"
}

func (bag *BeyondcorpAppGateway) LocalName() string {
	return bag.Name
}

func (bag *BeyondcorpAppGateway) Configuration() interface{} {
	return bag.Args
}

func (bag *BeyondcorpAppGateway) Attributes() beyondcorpAppGatewayAttributes {
	return beyondcorpAppGatewayAttributes{ref: terra.ReferenceResource(bag)}
}

func (bag *BeyondcorpAppGateway) ImportState(av io.Reader) error {
	bag.state = &beyondcorpAppGatewayState{}
	if err := json.NewDecoder(av).Decode(bag.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bag.Type(), bag.LocalName(), err)
	}
	return nil
}

func (bag *BeyondcorpAppGateway) State() (*beyondcorpAppGatewayState, bool) {
	return bag.state, bag.state != nil
}

func (bag *BeyondcorpAppGateway) StateMust() *beyondcorpAppGatewayState {
	if bag.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bag.Type(), bag.LocalName()))
	}
	return bag.state
}

func (bag *BeyondcorpAppGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(bag)
}

type BeyondcorpAppGatewayArgs struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// HostType: string, optional
	HostType terra.StringValue `hcl:"host_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// AllocatedConnections: min=0
	AllocatedConnections []beyondcorpappgateway.AllocatedConnections `hcl:"allocated_connections,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *beyondcorpappgateway.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BeyondcorpAppGateway depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type beyondcorpAppGatewayAttributes struct {
	ref terra.Reference
}

func (bag beyondcorpAppGatewayAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(bag.ref.Append("display_name"))
}

func (bag beyondcorpAppGatewayAttributes) HostType() terra.StringValue {
	return terra.ReferenceString(bag.ref.Append("host_type"))
}

func (bag beyondcorpAppGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bag.ref.Append("id"))
}

func (bag beyondcorpAppGatewayAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bag.ref.Append("labels"))
}

func (bag beyondcorpAppGatewayAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bag.ref.Append("name"))
}

func (bag beyondcorpAppGatewayAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bag.ref.Append("project"))
}

func (bag beyondcorpAppGatewayAttributes) Region() terra.StringValue {
	return terra.ReferenceString(bag.ref.Append("region"))
}

func (bag beyondcorpAppGatewayAttributes) State() terra.StringValue {
	return terra.ReferenceString(bag.ref.Append("state"))
}

func (bag beyondcorpAppGatewayAttributes) Type() terra.StringValue {
	return terra.ReferenceString(bag.ref.Append("type"))
}

func (bag beyondcorpAppGatewayAttributes) Uri() terra.StringValue {
	return terra.ReferenceString(bag.ref.Append("uri"))
}

func (bag beyondcorpAppGatewayAttributes) AllocatedConnections() terra.ListValue[beyondcorpappgateway.AllocatedConnectionsAttributes] {
	return terra.ReferenceList[beyondcorpappgateway.AllocatedConnectionsAttributes](bag.ref.Append("allocated_connections"))
}

func (bag beyondcorpAppGatewayAttributes) Timeouts() beyondcorpappgateway.TimeoutsAttributes {
	return terra.ReferenceSingle[beyondcorpappgateway.TimeoutsAttributes](bag.ref.Append("timeouts"))
}

type beyondcorpAppGatewayState struct {
	DisplayName          string                                           `json:"display_name"`
	HostType             string                                           `json:"host_type"`
	Id                   string                                           `json:"id"`
	Labels               map[string]string                                `json:"labels"`
	Name                 string                                           `json:"name"`
	Project              string                                           `json:"project"`
	Region               string                                           `json:"region"`
	State                string                                           `json:"state"`
	Type                 string                                           `json:"type"`
	Uri                  string                                           `json:"uri"`
	AllocatedConnections []beyondcorpappgateway.AllocatedConnectionsState `json:"allocated_connections"`
	Timeouts             *beyondcorpappgateway.TimeoutsState              `json:"timeouts"`
}
