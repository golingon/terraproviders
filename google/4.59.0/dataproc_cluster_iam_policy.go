// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataprocClusterIamPolicy(name string, args DataprocClusterIamPolicyArgs) *DataprocClusterIamPolicy {
	return &DataprocClusterIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataprocClusterIamPolicy)(nil)

type DataprocClusterIamPolicy struct {
	Name  string
	Args  DataprocClusterIamPolicyArgs
	state *dataprocClusterIamPolicyState
}

func (dcip *DataprocClusterIamPolicy) Type() string {
	return "google_dataproc_cluster_iam_policy"
}

func (dcip *DataprocClusterIamPolicy) LocalName() string {
	return dcip.Name
}

func (dcip *DataprocClusterIamPolicy) Configuration() interface{} {
	return dcip.Args
}

func (dcip *DataprocClusterIamPolicy) Attributes() dataprocClusterIamPolicyAttributes {
	return dataprocClusterIamPolicyAttributes{ref: terra.ReferenceResource(dcip)}
}

func (dcip *DataprocClusterIamPolicy) ImportState(av io.Reader) error {
	dcip.state = &dataprocClusterIamPolicyState{}
	if err := json.NewDecoder(av).Decode(dcip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcip.Type(), dcip.LocalName(), err)
	}
	return nil
}

func (dcip *DataprocClusterIamPolicy) State() (*dataprocClusterIamPolicyState, bool) {
	return dcip.state, dcip.state != nil
}

func (dcip *DataprocClusterIamPolicy) StateMust() *dataprocClusterIamPolicyState {
	if dcip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcip.Type(), dcip.LocalName()))
	}
	return dcip.state
}

func (dcip *DataprocClusterIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(dcip)
}

type DataprocClusterIamPolicyArgs struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// DependsOn contains resources that DataprocClusterIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataprocClusterIamPolicyAttributes struct {
	ref terra.Reference
}

func (dcip dataprocClusterIamPolicyAttributes) Cluster() terra.StringValue {
	return terra.ReferenceString(dcip.ref.Append("cluster"))
}

func (dcip dataprocClusterIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dcip.ref.Append("etag"))
}

func (dcip dataprocClusterIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dcip.ref.Append("id"))
}

func (dcip dataprocClusterIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(dcip.ref.Append("policy_data"))
}

func (dcip dataprocClusterIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dcip.ref.Append("project"))
}

func (dcip dataprocClusterIamPolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dcip.ref.Append("region"))
}

type dataprocClusterIamPolicyState struct {
	Cluster    string `json:"cluster"`
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	Region     string `json:"region"`
}
