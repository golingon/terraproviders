// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	accesscontextmanageraccesspolicy "github.com/golingon/terraproviders/google/4.59.0/accesscontextmanageraccesspolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAccessContextManagerAccessPolicy(name string, args AccessContextManagerAccessPolicyArgs) *AccessContextManagerAccessPolicy {
	return &AccessContextManagerAccessPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AccessContextManagerAccessPolicy)(nil)

type AccessContextManagerAccessPolicy struct {
	Name  string
	Args  AccessContextManagerAccessPolicyArgs
	state *accessContextManagerAccessPolicyState
}

func (acmap *AccessContextManagerAccessPolicy) Type() string {
	return "google_access_context_manager_access_policy"
}

func (acmap *AccessContextManagerAccessPolicy) LocalName() string {
	return acmap.Name
}

func (acmap *AccessContextManagerAccessPolicy) Configuration() interface{} {
	return acmap.Args
}

func (acmap *AccessContextManagerAccessPolicy) Attributes() accessContextManagerAccessPolicyAttributes {
	return accessContextManagerAccessPolicyAttributes{ref: terra.ReferenceResource(acmap)}
}

func (acmap *AccessContextManagerAccessPolicy) ImportState(av io.Reader) error {
	acmap.state = &accessContextManagerAccessPolicyState{}
	if err := json.NewDecoder(av).Decode(acmap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acmap.Type(), acmap.LocalName(), err)
	}
	return nil
}

func (acmap *AccessContextManagerAccessPolicy) State() (*accessContextManagerAccessPolicyState, bool) {
	return acmap.state, acmap.state != nil
}

func (acmap *AccessContextManagerAccessPolicy) StateMust() *accessContextManagerAccessPolicyState {
	if acmap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acmap.Type(), acmap.LocalName()))
	}
	return acmap.state
}

func (acmap *AccessContextManagerAccessPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(acmap)
}

type AccessContextManagerAccessPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// Scopes: list of string, optional
	Scopes terra.ListValue[terra.StringValue] `hcl:"scopes,attr"`
	// Title: string, required
	Title terra.StringValue `hcl:"title,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *accesscontextmanageraccesspolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AccessContextManagerAccessPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type accessContextManagerAccessPolicyAttributes struct {
	ref terra.Reference
}

func (acmap accessContextManagerAccessPolicyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(acmap.ref.Append("create_time"))
}

func (acmap accessContextManagerAccessPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(acmap.ref.Append("id"))
}

func (acmap accessContextManagerAccessPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(acmap.ref.Append("name"))
}

func (acmap accessContextManagerAccessPolicyAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(acmap.ref.Append("parent"))
}

func (acmap accessContextManagerAccessPolicyAttributes) Scopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](acmap.ref.Append("scopes"))
}

func (acmap accessContextManagerAccessPolicyAttributes) Title() terra.StringValue {
	return terra.ReferenceString(acmap.ref.Append("title"))
}

func (acmap accessContextManagerAccessPolicyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(acmap.ref.Append("update_time"))
}

func (acmap accessContextManagerAccessPolicyAttributes) Timeouts() accesscontextmanageraccesspolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[accesscontextmanageraccesspolicy.TimeoutsAttributes](acmap.ref.Append("timeouts"))
}

type accessContextManagerAccessPolicyState struct {
	CreateTime string                                          `json:"create_time"`
	Id         string                                          `json:"id"`
	Name       string                                          `json:"name"`
	Parent     string                                          `json:"parent"`
	Scopes     []string                                        `json:"scopes"`
	Title      string                                          `json:"title"`
	UpdateTime string                                          `json:"update_time"`
	Timeouts   *accesscontextmanageraccesspolicy.TimeoutsState `json:"timeouts"`
}
