// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	loggingprojectsink "github.com/golingon/terraproviders/google/4.59.0/loggingprojectsink"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLoggingProjectSink(name string, args LoggingProjectSinkArgs) *LoggingProjectSink {
	return &LoggingProjectSink{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LoggingProjectSink)(nil)

type LoggingProjectSink struct {
	Name  string
	Args  LoggingProjectSinkArgs
	state *loggingProjectSinkState
}

func (lps *LoggingProjectSink) Type() string {
	return "google_logging_project_sink"
}

func (lps *LoggingProjectSink) LocalName() string {
	return lps.Name
}

func (lps *LoggingProjectSink) Configuration() interface{} {
	return lps.Args
}

func (lps *LoggingProjectSink) Attributes() loggingProjectSinkAttributes {
	return loggingProjectSinkAttributes{ref: terra.ReferenceResource(lps)}
}

func (lps *LoggingProjectSink) ImportState(av io.Reader) error {
	lps.state = &loggingProjectSinkState{}
	if err := json.NewDecoder(av).Decode(lps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lps.Type(), lps.LocalName(), err)
	}
	return nil
}

func (lps *LoggingProjectSink) State() (*loggingProjectSinkState, bool) {
	return lps.state, lps.state != nil
}

func (lps *LoggingProjectSink) StateMust() *loggingProjectSinkState {
	if lps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lps.Type(), lps.LocalName()))
	}
	return lps.state
}

func (lps *LoggingProjectSink) DependOn() terra.Reference {
	return terra.ReferenceResource(lps)
}

type LoggingProjectSinkArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// Filter: string, optional
	Filter terra.StringValue `hcl:"filter,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// UniqueWriterIdentity: bool, optional
	UniqueWriterIdentity terra.BoolValue `hcl:"unique_writer_identity,attr"`
	// BigqueryOptions: optional
	BigqueryOptions *loggingprojectsink.BigqueryOptions `hcl:"bigquery_options,block"`
	// Exclusions: min=0
	Exclusions []loggingprojectsink.Exclusions `hcl:"exclusions,block" validate:"min=0"`
	// DependsOn contains resources that LoggingProjectSink depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type loggingProjectSinkAttributes struct {
	ref terra.Reference
}

func (lps loggingProjectSinkAttributes) Description() terra.StringValue {
	return terra.ReferenceString(lps.ref.Append("description"))
}

func (lps loggingProjectSinkAttributes) Destination() terra.StringValue {
	return terra.ReferenceString(lps.ref.Append("destination"))
}

func (lps loggingProjectSinkAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(lps.ref.Append("disabled"))
}

func (lps loggingProjectSinkAttributes) Filter() terra.StringValue {
	return terra.ReferenceString(lps.ref.Append("filter"))
}

func (lps loggingProjectSinkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lps.ref.Append("id"))
}

func (lps loggingProjectSinkAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lps.ref.Append("name"))
}

func (lps loggingProjectSinkAttributes) Project() terra.StringValue {
	return terra.ReferenceString(lps.ref.Append("project"))
}

func (lps loggingProjectSinkAttributes) UniqueWriterIdentity() terra.BoolValue {
	return terra.ReferenceBool(lps.ref.Append("unique_writer_identity"))
}

func (lps loggingProjectSinkAttributes) WriterIdentity() terra.StringValue {
	return terra.ReferenceString(lps.ref.Append("writer_identity"))
}

func (lps loggingProjectSinkAttributes) BigqueryOptions() terra.ListValue[loggingprojectsink.BigqueryOptionsAttributes] {
	return terra.ReferenceList[loggingprojectsink.BigqueryOptionsAttributes](lps.ref.Append("bigquery_options"))
}

func (lps loggingProjectSinkAttributes) Exclusions() terra.ListValue[loggingprojectsink.ExclusionsAttributes] {
	return terra.ReferenceList[loggingprojectsink.ExclusionsAttributes](lps.ref.Append("exclusions"))
}

type loggingProjectSinkState struct {
	Description          string                                    `json:"description"`
	Destination          string                                    `json:"destination"`
	Disabled             bool                                      `json:"disabled"`
	Filter               string                                    `json:"filter"`
	Id                   string                                    `json:"id"`
	Name                 string                                    `json:"name"`
	Project              string                                    `json:"project"`
	UniqueWriterIdentity bool                                      `json:"unique_writer_identity"`
	WriterIdentity       string                                    `json:"writer_identity"`
	BigqueryOptions      []loggingprojectsink.BigqueryOptionsState `json:"bigquery_options"`
	Exclusions           []loggingprojectsink.ExclusionsState      `json:"exclusions"`
}
