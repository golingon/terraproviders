// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	folderorganizationpolicy "github.com/golingon/terraproviders/google/4.59.0/folderorganizationpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFolderOrganizationPolicy(name string, args FolderOrganizationPolicyArgs) *FolderOrganizationPolicy {
	return &FolderOrganizationPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FolderOrganizationPolicy)(nil)

type FolderOrganizationPolicy struct {
	Name  string
	Args  FolderOrganizationPolicyArgs
	state *folderOrganizationPolicyState
}

func (fop *FolderOrganizationPolicy) Type() string {
	return "google_folder_organization_policy"
}

func (fop *FolderOrganizationPolicy) LocalName() string {
	return fop.Name
}

func (fop *FolderOrganizationPolicy) Configuration() interface{} {
	return fop.Args
}

func (fop *FolderOrganizationPolicy) Attributes() folderOrganizationPolicyAttributes {
	return folderOrganizationPolicyAttributes{ref: terra.ReferenceResource(fop)}
}

func (fop *FolderOrganizationPolicy) ImportState(av io.Reader) error {
	fop.state = &folderOrganizationPolicyState{}
	if err := json.NewDecoder(av).Decode(fop.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fop.Type(), fop.LocalName(), err)
	}
	return nil
}

func (fop *FolderOrganizationPolicy) State() (*folderOrganizationPolicyState, bool) {
	return fop.state, fop.state != nil
}

func (fop *FolderOrganizationPolicy) StateMust() *folderOrganizationPolicyState {
	if fop.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fop.Type(), fop.LocalName()))
	}
	return fop.state
}

func (fop *FolderOrganizationPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(fop)
}

type FolderOrganizationPolicyArgs struct {
	// Constraint: string, required
	Constraint terra.StringValue `hcl:"constraint,attr" validate:"required"`
	// Folder: string, required
	Folder terra.StringValue `hcl:"folder,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Version: number, optional
	Version terra.NumberValue `hcl:"version,attr"`
	// BooleanPolicy: optional
	BooleanPolicy *folderorganizationpolicy.BooleanPolicy `hcl:"boolean_policy,block"`
	// ListPolicy: optional
	ListPolicy *folderorganizationpolicy.ListPolicy `hcl:"list_policy,block"`
	// RestorePolicy: optional
	RestorePolicy *folderorganizationpolicy.RestorePolicy `hcl:"restore_policy,block"`
	// Timeouts: optional
	Timeouts *folderorganizationpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FolderOrganizationPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type folderOrganizationPolicyAttributes struct {
	ref terra.Reference
}

func (fop folderOrganizationPolicyAttributes) Constraint() terra.StringValue {
	return terra.ReferenceString(fop.ref.Append("constraint"))
}

func (fop folderOrganizationPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(fop.ref.Append("etag"))
}

func (fop folderOrganizationPolicyAttributes) Folder() terra.StringValue {
	return terra.ReferenceString(fop.ref.Append("folder"))
}

func (fop folderOrganizationPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(fop.ref.Append("id"))
}

func (fop folderOrganizationPolicyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(fop.ref.Append("update_time"))
}

func (fop folderOrganizationPolicyAttributes) Version() terra.NumberValue {
	return terra.ReferenceNumber(fop.ref.Append("version"))
}

func (fop folderOrganizationPolicyAttributes) BooleanPolicy() terra.ListValue[folderorganizationpolicy.BooleanPolicyAttributes] {
	return terra.ReferenceList[folderorganizationpolicy.BooleanPolicyAttributes](fop.ref.Append("boolean_policy"))
}

func (fop folderOrganizationPolicyAttributes) ListPolicy() terra.ListValue[folderorganizationpolicy.ListPolicyAttributes] {
	return terra.ReferenceList[folderorganizationpolicy.ListPolicyAttributes](fop.ref.Append("list_policy"))
}

func (fop folderOrganizationPolicyAttributes) RestorePolicy() terra.ListValue[folderorganizationpolicy.RestorePolicyAttributes] {
	return terra.ReferenceList[folderorganizationpolicy.RestorePolicyAttributes](fop.ref.Append("restore_policy"))
}

func (fop folderOrganizationPolicyAttributes) Timeouts() folderorganizationpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[folderorganizationpolicy.TimeoutsAttributes](fop.ref.Append("timeouts"))
}

type folderOrganizationPolicyState struct {
	Constraint    string                                        `json:"constraint"`
	Etag          string                                        `json:"etag"`
	Folder        string                                        `json:"folder"`
	Id            string                                        `json:"id"`
	UpdateTime    string                                        `json:"update_time"`
	Version       float64                                       `json:"version"`
	BooleanPolicy []folderorganizationpolicy.BooleanPolicyState `json:"boolean_policy"`
	ListPolicy    []folderorganizationpolicy.ListPolicyState    `json:"list_policy"`
	RestorePolicy []folderorganizationpolicy.RestorePolicyState `json:"restore_policy"`
	Timeouts      *folderorganizationpolicy.TimeoutsState       `json:"timeouts"`
}
