// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	apigeeenvironment "github.com/golingon/terraproviders/google/4.59.0/apigeeenvironment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApigeeEnvironment(name string, args ApigeeEnvironmentArgs) *ApigeeEnvironment {
	return &ApigeeEnvironment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApigeeEnvironment)(nil)

type ApigeeEnvironment struct {
	Name  string
	Args  ApigeeEnvironmentArgs
	state *apigeeEnvironmentState
}

func (ae *ApigeeEnvironment) Type() string {
	return "google_apigee_environment"
}

func (ae *ApigeeEnvironment) LocalName() string {
	return ae.Name
}

func (ae *ApigeeEnvironment) Configuration() interface{} {
	return ae.Args
}

func (ae *ApigeeEnvironment) Attributes() apigeeEnvironmentAttributes {
	return apigeeEnvironmentAttributes{ref: terra.ReferenceResource(ae)}
}

func (ae *ApigeeEnvironment) ImportState(av io.Reader) error {
	ae.state = &apigeeEnvironmentState{}
	if err := json.NewDecoder(av).Decode(ae.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ae.Type(), ae.LocalName(), err)
	}
	return nil
}

func (ae *ApigeeEnvironment) State() (*apigeeEnvironmentState, bool) {
	return ae.state, ae.state != nil
}

func (ae *ApigeeEnvironment) StateMust() *apigeeEnvironmentState {
	if ae.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ae.Type(), ae.LocalName()))
	}
	return ae.state
}

func (ae *ApigeeEnvironment) DependOn() terra.Reference {
	return terra.ReferenceResource(ae)
}

type ApigeeEnvironmentArgs struct {
	// ApiProxyType: string, optional
	ApiProxyType terra.StringValue `hcl:"api_proxy_type,attr"`
	// DeploymentType: string, optional
	DeploymentType terra.StringValue `hcl:"deployment_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OrgId: string, required
	OrgId terra.StringValue `hcl:"org_id,attr" validate:"required"`
	// NodeConfig: optional
	NodeConfig *apigeeenvironment.NodeConfig `hcl:"node_config,block"`
	// Timeouts: optional
	Timeouts *apigeeenvironment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApigeeEnvironment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apigeeEnvironmentAttributes struct {
	ref terra.Reference
}

func (ae apigeeEnvironmentAttributes) ApiProxyType() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("api_proxy_type"))
}

func (ae apigeeEnvironmentAttributes) DeploymentType() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("deployment_type"))
}

func (ae apigeeEnvironmentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("description"))
}

func (ae apigeeEnvironmentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("display_name"))
}

func (ae apigeeEnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("id"))
}

func (ae apigeeEnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("name"))
}

func (ae apigeeEnvironmentAttributes) OrgId() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("org_id"))
}

func (ae apigeeEnvironmentAttributes) NodeConfig() terra.ListValue[apigeeenvironment.NodeConfigAttributes] {
	return terra.ReferenceList[apigeeenvironment.NodeConfigAttributes](ae.ref.Append("node_config"))
}

func (ae apigeeEnvironmentAttributes) Timeouts() apigeeenvironment.TimeoutsAttributes {
	return terra.ReferenceSingle[apigeeenvironment.TimeoutsAttributes](ae.ref.Append("timeouts"))
}

type apigeeEnvironmentState struct {
	ApiProxyType   string                              `json:"api_proxy_type"`
	DeploymentType string                              `json:"deployment_type"`
	Description    string                              `json:"description"`
	DisplayName    string                              `json:"display_name"`
	Id             string                              `json:"id"`
	Name           string                              `json:"name"`
	OrgId          string                              `json:"org_id"`
	NodeConfig     []apigeeenvironment.NodeConfigState `json:"node_config"`
	Timeouts       *apigeeenvironment.TimeoutsState    `json:"timeouts"`
}
