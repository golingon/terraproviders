// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	binaryauthorizationattestor "github.com/golingon/terraproviders/google/4.59.0/binaryauthorizationattestor"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBinaryAuthorizationAttestor(name string, args BinaryAuthorizationAttestorArgs) *BinaryAuthorizationAttestor {
	return &BinaryAuthorizationAttestor{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BinaryAuthorizationAttestor)(nil)

type BinaryAuthorizationAttestor struct {
	Name  string
	Args  BinaryAuthorizationAttestorArgs
	state *binaryAuthorizationAttestorState
}

func (baa *BinaryAuthorizationAttestor) Type() string {
	return "google_binary_authorization_attestor"
}

func (baa *BinaryAuthorizationAttestor) LocalName() string {
	return baa.Name
}

func (baa *BinaryAuthorizationAttestor) Configuration() interface{} {
	return baa.Args
}

func (baa *BinaryAuthorizationAttestor) Attributes() binaryAuthorizationAttestorAttributes {
	return binaryAuthorizationAttestorAttributes{ref: terra.ReferenceResource(baa)}
}

func (baa *BinaryAuthorizationAttestor) ImportState(av io.Reader) error {
	baa.state = &binaryAuthorizationAttestorState{}
	if err := json.NewDecoder(av).Decode(baa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", baa.Type(), baa.LocalName(), err)
	}
	return nil
}

func (baa *BinaryAuthorizationAttestor) State() (*binaryAuthorizationAttestorState, bool) {
	return baa.state, baa.state != nil
}

func (baa *BinaryAuthorizationAttestor) StateMust() *binaryAuthorizationAttestorState {
	if baa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", baa.Type(), baa.LocalName()))
	}
	return baa.state
}

func (baa *BinaryAuthorizationAttestor) DependOn() terra.Reference {
	return terra.ReferenceResource(baa)
}

type BinaryAuthorizationAttestorArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// AttestationAuthorityNote: required
	AttestationAuthorityNote *binaryauthorizationattestor.AttestationAuthorityNote `hcl:"attestation_authority_note,block" validate:"required"`
	// Timeouts: optional
	Timeouts *binaryauthorizationattestor.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BinaryAuthorizationAttestor depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type binaryAuthorizationAttestorAttributes struct {
	ref terra.Reference
}

func (baa binaryAuthorizationAttestorAttributes) Description() terra.StringValue {
	return terra.ReferenceString(baa.ref.Append("description"))
}

func (baa binaryAuthorizationAttestorAttributes) Id() terra.StringValue {
	return terra.ReferenceString(baa.ref.Append("id"))
}

func (baa binaryAuthorizationAttestorAttributes) Name() terra.StringValue {
	return terra.ReferenceString(baa.ref.Append("name"))
}

func (baa binaryAuthorizationAttestorAttributes) Project() terra.StringValue {
	return terra.ReferenceString(baa.ref.Append("project"))
}

func (baa binaryAuthorizationAttestorAttributes) AttestationAuthorityNote() terra.ListValue[binaryauthorizationattestor.AttestationAuthorityNoteAttributes] {
	return terra.ReferenceList[binaryauthorizationattestor.AttestationAuthorityNoteAttributes](baa.ref.Append("attestation_authority_note"))
}

func (baa binaryAuthorizationAttestorAttributes) Timeouts() binaryauthorizationattestor.TimeoutsAttributes {
	return terra.ReferenceSingle[binaryauthorizationattestor.TimeoutsAttributes](baa.ref.Append("timeouts"))
}

type binaryAuthorizationAttestorState struct {
	Description              string                                                      `json:"description"`
	Id                       string                                                      `json:"id"`
	Name                     string                                                      `json:"name"`
	Project                  string                                                      `json:"project"`
	AttestationAuthorityNote []binaryauthorizationattestor.AttestationAuthorityNoteState `json:"attestation_authority_note"`
	Timeouts                 *binaryauthorizationattestor.TimeoutsState                  `json:"timeouts"`
}
