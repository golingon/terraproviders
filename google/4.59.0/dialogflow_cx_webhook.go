// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dialogflowcxwebhook "github.com/golingon/terraproviders/google/4.59.0/dialogflowcxwebhook"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDialogflowCxWebhook(name string, args DialogflowCxWebhookArgs) *DialogflowCxWebhook {
	return &DialogflowCxWebhook{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DialogflowCxWebhook)(nil)

type DialogflowCxWebhook struct {
	Name  string
	Args  DialogflowCxWebhookArgs
	state *dialogflowCxWebhookState
}

func (dcw *DialogflowCxWebhook) Type() string {
	return "google_dialogflow_cx_webhook"
}

func (dcw *DialogflowCxWebhook) LocalName() string {
	return dcw.Name
}

func (dcw *DialogflowCxWebhook) Configuration() interface{} {
	return dcw.Args
}

func (dcw *DialogflowCxWebhook) Attributes() dialogflowCxWebhookAttributes {
	return dialogflowCxWebhookAttributes{ref: terra.ReferenceResource(dcw)}
}

func (dcw *DialogflowCxWebhook) ImportState(av io.Reader) error {
	dcw.state = &dialogflowCxWebhookState{}
	if err := json.NewDecoder(av).Decode(dcw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcw.Type(), dcw.LocalName(), err)
	}
	return nil
}

func (dcw *DialogflowCxWebhook) State() (*dialogflowCxWebhookState, bool) {
	return dcw.state, dcw.state != nil
}

func (dcw *DialogflowCxWebhook) StateMust() *dialogflowCxWebhookState {
	if dcw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcw.Type(), dcw.LocalName()))
	}
	return dcw.state
}

func (dcw *DialogflowCxWebhook) DependOn() terra.Reference {
	return terra.ReferenceResource(dcw)
}

type DialogflowCxWebhookArgs struct {
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// EnableSpellCorrection: bool, optional
	EnableSpellCorrection terra.BoolValue `hcl:"enable_spell_correction,attr"`
	// EnableStackdriverLogging: bool, optional
	EnableStackdriverLogging terra.BoolValue `hcl:"enable_stackdriver_logging,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, optional
	Parent terra.StringValue `hcl:"parent,attr"`
	// SecuritySettings: string, optional
	SecuritySettings terra.StringValue `hcl:"security_settings,attr"`
	// Timeout: string, optional
	Timeout terra.StringValue `hcl:"timeout,attr"`
	// GenericWebService: optional
	GenericWebService *dialogflowcxwebhook.GenericWebService `hcl:"generic_web_service,block"`
	// ServiceDirectory: optional
	ServiceDirectory *dialogflowcxwebhook.ServiceDirectory `hcl:"service_directory,block"`
	// Timeouts: optional
	Timeouts *dialogflowcxwebhook.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DialogflowCxWebhook depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dialogflowCxWebhookAttributes struct {
	ref terra.Reference
}

func (dcw dialogflowCxWebhookAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(dcw.ref.Append("disabled"))
}

func (dcw dialogflowCxWebhookAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(dcw.ref.Append("display_name"))
}

func (dcw dialogflowCxWebhookAttributes) EnableSpellCorrection() terra.BoolValue {
	return terra.ReferenceBool(dcw.ref.Append("enable_spell_correction"))
}

func (dcw dialogflowCxWebhookAttributes) EnableStackdriverLogging() terra.BoolValue {
	return terra.ReferenceBool(dcw.ref.Append("enable_stackdriver_logging"))
}

func (dcw dialogflowCxWebhookAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dcw.ref.Append("id"))
}

func (dcw dialogflowCxWebhookAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dcw.ref.Append("name"))
}

func (dcw dialogflowCxWebhookAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(dcw.ref.Append("parent"))
}

func (dcw dialogflowCxWebhookAttributes) SecuritySettings() terra.StringValue {
	return terra.ReferenceString(dcw.ref.Append("security_settings"))
}

func (dcw dialogflowCxWebhookAttributes) StartFlow() terra.StringValue {
	return terra.ReferenceString(dcw.ref.Append("start_flow"))
}

func (dcw dialogflowCxWebhookAttributes) Timeout() terra.StringValue {
	return terra.ReferenceString(dcw.ref.Append("timeout"))
}

func (dcw dialogflowCxWebhookAttributes) GenericWebService() terra.ListValue[dialogflowcxwebhook.GenericWebServiceAttributes] {
	return terra.ReferenceList[dialogflowcxwebhook.GenericWebServiceAttributes](dcw.ref.Append("generic_web_service"))
}

func (dcw dialogflowCxWebhookAttributes) ServiceDirectory() terra.ListValue[dialogflowcxwebhook.ServiceDirectoryAttributes] {
	return terra.ReferenceList[dialogflowcxwebhook.ServiceDirectoryAttributes](dcw.ref.Append("service_directory"))
}

func (dcw dialogflowCxWebhookAttributes) Timeouts() dialogflowcxwebhook.TimeoutsAttributes {
	return terra.ReferenceSingle[dialogflowcxwebhook.TimeoutsAttributes](dcw.ref.Append("timeouts"))
}

type dialogflowCxWebhookState struct {
	Disabled                 bool                                         `json:"disabled"`
	DisplayName              string                                       `json:"display_name"`
	EnableSpellCorrection    bool                                         `json:"enable_spell_correction"`
	EnableStackdriverLogging bool                                         `json:"enable_stackdriver_logging"`
	Id                       string                                       `json:"id"`
	Name                     string                                       `json:"name"`
	Parent                   string                                       `json:"parent"`
	SecuritySettings         string                                       `json:"security_settings"`
	StartFlow                string                                       `json:"start_flow"`
	Timeout                  string                                       `json:"timeout"`
	GenericWebService        []dialogflowcxwebhook.GenericWebServiceState `json:"generic_web_service"`
	ServiceDirectory         []dialogflowcxwebhook.ServiceDirectoryState  `json:"service_directory"`
	Timeouts                 *dialogflowcxwebhook.TimeoutsState           `json:"timeouts"`
}
