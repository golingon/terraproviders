// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	identityplatformtenant "github.com/golingon/terraproviders/google/4.59.0/identityplatformtenant"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIdentityPlatformTenant(name string, args IdentityPlatformTenantArgs) *IdentityPlatformTenant {
	return &IdentityPlatformTenant{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IdentityPlatformTenant)(nil)

type IdentityPlatformTenant struct {
	Name  string
	Args  IdentityPlatformTenantArgs
	state *identityPlatformTenantState
}

func (ipt *IdentityPlatformTenant) Type() string {
	return "google_identity_platform_tenant"
}

func (ipt *IdentityPlatformTenant) LocalName() string {
	return ipt.Name
}

func (ipt *IdentityPlatformTenant) Configuration() interface{} {
	return ipt.Args
}

func (ipt *IdentityPlatformTenant) Attributes() identityPlatformTenantAttributes {
	return identityPlatformTenantAttributes{ref: terra.ReferenceResource(ipt)}
}

func (ipt *IdentityPlatformTenant) ImportState(av io.Reader) error {
	ipt.state = &identityPlatformTenantState{}
	if err := json.NewDecoder(av).Decode(ipt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ipt.Type(), ipt.LocalName(), err)
	}
	return nil
}

func (ipt *IdentityPlatformTenant) State() (*identityPlatformTenantState, bool) {
	return ipt.state, ipt.state != nil
}

func (ipt *IdentityPlatformTenant) StateMust() *identityPlatformTenantState {
	if ipt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ipt.Type(), ipt.LocalName()))
	}
	return ipt.state
}

func (ipt *IdentityPlatformTenant) DependOn() terra.Reference {
	return terra.ReferenceResource(ipt)
}

type IdentityPlatformTenantArgs struct {
	// AllowPasswordSignup: bool, optional
	AllowPasswordSignup terra.BoolValue `hcl:"allow_password_signup,attr"`
	// DisableAuth: bool, optional
	DisableAuth terra.BoolValue `hcl:"disable_auth,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// EnableEmailLinkSignin: bool, optional
	EnableEmailLinkSignin terra.BoolValue `hcl:"enable_email_link_signin,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *identityplatformtenant.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IdentityPlatformTenant depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type identityPlatformTenantAttributes struct {
	ref terra.Reference
}

func (ipt identityPlatformTenantAttributes) AllowPasswordSignup() terra.BoolValue {
	return terra.ReferenceBool(ipt.ref.Append("allow_password_signup"))
}

func (ipt identityPlatformTenantAttributes) DisableAuth() terra.BoolValue {
	return terra.ReferenceBool(ipt.ref.Append("disable_auth"))
}

func (ipt identityPlatformTenantAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(ipt.ref.Append("display_name"))
}

func (ipt identityPlatformTenantAttributes) EnableEmailLinkSignin() terra.BoolValue {
	return terra.ReferenceBool(ipt.ref.Append("enable_email_link_signin"))
}

func (ipt identityPlatformTenantAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ipt.ref.Append("id"))
}

func (ipt identityPlatformTenantAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ipt.ref.Append("name"))
}

func (ipt identityPlatformTenantAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ipt.ref.Append("project"))
}

func (ipt identityPlatformTenantAttributes) Timeouts() identityplatformtenant.TimeoutsAttributes {
	return terra.ReferenceSingle[identityplatformtenant.TimeoutsAttributes](ipt.ref.Append("timeouts"))
}

type identityPlatformTenantState struct {
	AllowPasswordSignup   bool                                  `json:"allow_password_signup"`
	DisableAuth           bool                                  `json:"disable_auth"`
	DisplayName           string                                `json:"display_name"`
	EnableEmailLinkSignin bool                                  `json:"enable_email_link_signin"`
	Id                    string                                `json:"id"`
	Name                  string                                `json:"name"`
	Project               string                                `json:"project"`
	Timeouts              *identityplatformtenant.TimeoutsState `json:"timeouts"`
}
