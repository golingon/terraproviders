// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	alloydbbackup "github.com/golingon/terraproviders/google/4.59.0/alloydbbackup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAlloydbBackup(name string, args AlloydbBackupArgs) *AlloydbBackup {
	return &AlloydbBackup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AlloydbBackup)(nil)

type AlloydbBackup struct {
	Name  string
	Args  AlloydbBackupArgs
	state *alloydbBackupState
}

func (ab *AlloydbBackup) Type() string {
	return "google_alloydb_backup"
}

func (ab *AlloydbBackup) LocalName() string {
	return ab.Name
}

func (ab *AlloydbBackup) Configuration() interface{} {
	return ab.Args
}

func (ab *AlloydbBackup) Attributes() alloydbBackupAttributes {
	return alloydbBackupAttributes{ref: terra.ReferenceResource(ab)}
}

func (ab *AlloydbBackup) ImportState(av io.Reader) error {
	ab.state = &alloydbBackupState{}
	if err := json.NewDecoder(av).Decode(ab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ab.Type(), ab.LocalName(), err)
	}
	return nil
}

func (ab *AlloydbBackup) State() (*alloydbBackupState, bool) {
	return ab.state, ab.state != nil
}

func (ab *AlloydbBackup) StateMust() *alloydbBackupState {
	if ab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ab.Type(), ab.LocalName()))
	}
	return ab.state
}

func (ab *AlloydbBackup) DependOn() terra.Reference {
	return terra.ReferenceResource(ab)
}

type AlloydbBackupArgs struct {
	// BackupId: string, required
	BackupId terra.StringValue `hcl:"backup_id,attr" validate:"required"`
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *alloydbbackup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AlloydbBackup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type alloydbBackupAttributes struct {
	ref terra.Reference
}

func (ab alloydbBackupAttributes) BackupId() terra.StringValue {
	return terra.ReferenceString(ab.ref.Append("backup_id"))
}

func (ab alloydbBackupAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceString(ab.ref.Append("cluster_name"))
}

func (ab alloydbBackupAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(ab.ref.Append("create_time"))
}

func (ab alloydbBackupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ab.ref.Append("description"))
}

func (ab alloydbBackupAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ab.ref.Append("etag"))
}

func (ab alloydbBackupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ab.ref.Append("id"))
}

func (ab alloydbBackupAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ab.ref.Append("labels"))
}

func (ab alloydbBackupAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ab.ref.Append("location"))
}

func (ab alloydbBackupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ab.ref.Append("name"))
}

func (ab alloydbBackupAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ab.ref.Append("project"))
}

func (ab alloydbBackupAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceBool(ab.ref.Append("reconciling"))
}

func (ab alloydbBackupAttributes) State() terra.StringValue {
	return terra.ReferenceString(ab.ref.Append("state"))
}

func (ab alloydbBackupAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(ab.ref.Append("uid"))
}

func (ab alloydbBackupAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(ab.ref.Append("update_time"))
}

func (ab alloydbBackupAttributes) Timeouts() alloydbbackup.TimeoutsAttributes {
	return terra.ReferenceSingle[alloydbbackup.TimeoutsAttributes](ab.ref.Append("timeouts"))
}

type alloydbBackupState struct {
	BackupId    string                       `json:"backup_id"`
	ClusterName string                       `json:"cluster_name"`
	CreateTime  string                       `json:"create_time"`
	Description string                       `json:"description"`
	Etag        string                       `json:"etag"`
	Id          string                       `json:"id"`
	Labels      map[string]string            `json:"labels"`
	Location    string                       `json:"location"`
	Name        string                       `json:"name"`
	Project     string                       `json:"project"`
	Reconciling bool                         `json:"reconciling"`
	State       string                       `json:"state"`
	Uid         string                       `json:"uid"`
	UpdateTime  string                       `json:"update_time"`
	Timeouts    *alloydbbackup.TimeoutsState `json:"timeouts"`
}
