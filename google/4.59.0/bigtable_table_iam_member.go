// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	bigtabletableiammember "github.com/golingon/terraproviders/google/4.59.0/bigtabletableiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigtableTableIamMember(name string, args BigtableTableIamMemberArgs) *BigtableTableIamMember {
	return &BigtableTableIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigtableTableIamMember)(nil)

type BigtableTableIamMember struct {
	Name  string
	Args  BigtableTableIamMemberArgs
	state *bigtableTableIamMemberState
}

func (btim *BigtableTableIamMember) Type() string {
	return "google_bigtable_table_iam_member"
}

func (btim *BigtableTableIamMember) LocalName() string {
	return btim.Name
}

func (btim *BigtableTableIamMember) Configuration() interface{} {
	return btim.Args
}

func (btim *BigtableTableIamMember) Attributes() bigtableTableIamMemberAttributes {
	return bigtableTableIamMemberAttributes{ref: terra.ReferenceResource(btim)}
}

func (btim *BigtableTableIamMember) ImportState(av io.Reader) error {
	btim.state = &bigtableTableIamMemberState{}
	if err := json.NewDecoder(av).Decode(btim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", btim.Type(), btim.LocalName(), err)
	}
	return nil
}

func (btim *BigtableTableIamMember) State() (*bigtableTableIamMemberState, bool) {
	return btim.state, btim.state != nil
}

func (btim *BigtableTableIamMember) StateMust() *bigtableTableIamMemberState {
	if btim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", btim.Type(), btim.LocalName()))
	}
	return btim.state
}

func (btim *BigtableTableIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(btim)
}

type BigtableTableIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Table: string, required
	Table terra.StringValue `hcl:"table,attr" validate:"required"`
	// Condition: optional
	Condition *bigtabletableiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that BigtableTableIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigtableTableIamMemberAttributes struct {
	ref terra.Reference
}

func (btim bigtableTableIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(btim.ref.Append("etag"))
}

func (btim bigtableTableIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(btim.ref.Append("id"))
}

func (btim bigtableTableIamMemberAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(btim.ref.Append("instance"))
}

func (btim bigtableTableIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(btim.ref.Append("member"))
}

func (btim bigtableTableIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(btim.ref.Append("project"))
}

func (btim bigtableTableIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(btim.ref.Append("role"))
}

func (btim bigtableTableIamMemberAttributes) Table() terra.StringValue {
	return terra.ReferenceString(btim.ref.Append("table"))
}

func (btim bigtableTableIamMemberAttributes) Condition() terra.ListValue[bigtabletableiammember.ConditionAttributes] {
	return terra.ReferenceList[bigtabletableiammember.ConditionAttributes](btim.ref.Append("condition"))
}

type bigtableTableIamMemberState struct {
	Etag      string                                  `json:"etag"`
	Id        string                                  `json:"id"`
	Instance  string                                  `json:"instance"`
	Member    string                                  `json:"member"`
	Project   string                                  `json:"project"`
	Role      string                                  `json:"role"`
	Table     string                                  `json:"table"`
	Condition []bigtabletableiammember.ConditionState `json:"condition"`
}
