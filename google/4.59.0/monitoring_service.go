// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	monitoringservice "github.com/golingon/terraproviders/google/4.59.0/monitoringservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitoringService(name string, args MonitoringServiceArgs) *MonitoringService {
	return &MonitoringService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitoringService)(nil)

type MonitoringService struct {
	Name  string
	Args  MonitoringServiceArgs
	state *monitoringServiceState
}

func (ms *MonitoringService) Type() string {
	return "google_monitoring_service"
}

func (ms *MonitoringService) LocalName() string {
	return ms.Name
}

func (ms *MonitoringService) Configuration() interface{} {
	return ms.Args
}

func (ms *MonitoringService) Attributes() monitoringServiceAttributes {
	return monitoringServiceAttributes{ref: terra.ReferenceResource(ms)}
}

func (ms *MonitoringService) ImportState(av io.Reader) error {
	ms.state = &monitoringServiceState{}
	if err := json.NewDecoder(av).Decode(ms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ms.Type(), ms.LocalName(), err)
	}
	return nil
}

func (ms *MonitoringService) State() (*monitoringServiceState, bool) {
	return ms.state, ms.state != nil
}

func (ms *MonitoringService) StateMust() *monitoringServiceState {
	if ms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ms.Type(), ms.LocalName()))
	}
	return ms.state
}

func (ms *MonitoringService) DependOn() terra.Reference {
	return terra.ReferenceResource(ms)
}

type MonitoringServiceArgs struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceId: string, required
	ServiceId terra.StringValue `hcl:"service_id,attr" validate:"required"`
	// UserLabels: map of string, optional
	UserLabels terra.MapValue[terra.StringValue] `hcl:"user_labels,attr"`
	// Telemetry: min=0
	Telemetry []monitoringservice.Telemetry `hcl:"telemetry,block" validate:"min=0"`
	// BasicService: optional
	BasicService *monitoringservice.BasicService `hcl:"basic_service,block"`
	// Timeouts: optional
	Timeouts *monitoringservice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MonitoringService depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitoringServiceAttributes struct {
	ref terra.Reference
}

func (ms monitoringServiceAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("display_name"))
}

func (ms monitoringServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("id"))
}

func (ms monitoringServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("name"))
}

func (ms monitoringServiceAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("project"))
}

func (ms monitoringServiceAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("service_id"))
}

func (ms monitoringServiceAttributes) UserLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ms.ref.Append("user_labels"))
}

func (ms monitoringServiceAttributes) Telemetry() terra.ListValue[monitoringservice.TelemetryAttributes] {
	return terra.ReferenceList[monitoringservice.TelemetryAttributes](ms.ref.Append("telemetry"))
}

func (ms monitoringServiceAttributes) BasicService() terra.ListValue[monitoringservice.BasicServiceAttributes] {
	return terra.ReferenceList[monitoringservice.BasicServiceAttributes](ms.ref.Append("basic_service"))
}

func (ms monitoringServiceAttributes) Timeouts() monitoringservice.TimeoutsAttributes {
	return terra.ReferenceSingle[monitoringservice.TimeoutsAttributes](ms.ref.Append("timeouts"))
}

type monitoringServiceState struct {
	DisplayName  string                                `json:"display_name"`
	Id           string                                `json:"id"`
	Name         string                                `json:"name"`
	Project      string                                `json:"project"`
	ServiceId    string                                `json:"service_id"`
	UserLabels   map[string]string                     `json:"user_labels"`
	Telemetry    []monitoringservice.TelemetryState    `json:"telemetry"`
	BasicService []monitoringservice.BasicServiceState `json:"basic_service"`
	Timeouts     *monitoringservice.TimeoutsState      `json:"timeouts"`
}
