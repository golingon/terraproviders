// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewArtifactRegistryRepositoryIamPolicy(name string, args ArtifactRegistryRepositoryIamPolicyArgs) *ArtifactRegistryRepositoryIamPolicy {
	return &ArtifactRegistryRepositoryIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ArtifactRegistryRepositoryIamPolicy)(nil)

type ArtifactRegistryRepositoryIamPolicy struct {
	Name  string
	Args  ArtifactRegistryRepositoryIamPolicyArgs
	state *artifactRegistryRepositoryIamPolicyState
}

func (arrip *ArtifactRegistryRepositoryIamPolicy) Type() string {
	return "google_artifact_registry_repository_iam_policy"
}

func (arrip *ArtifactRegistryRepositoryIamPolicy) LocalName() string {
	return arrip.Name
}

func (arrip *ArtifactRegistryRepositoryIamPolicy) Configuration() interface{} {
	return arrip.Args
}

func (arrip *ArtifactRegistryRepositoryIamPolicy) Attributes() artifactRegistryRepositoryIamPolicyAttributes {
	return artifactRegistryRepositoryIamPolicyAttributes{ref: terra.ReferenceResource(arrip)}
}

func (arrip *ArtifactRegistryRepositoryIamPolicy) ImportState(av io.Reader) error {
	arrip.state = &artifactRegistryRepositoryIamPolicyState{}
	if err := json.NewDecoder(av).Decode(arrip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arrip.Type(), arrip.LocalName(), err)
	}
	return nil
}

func (arrip *ArtifactRegistryRepositoryIamPolicy) State() (*artifactRegistryRepositoryIamPolicyState, bool) {
	return arrip.state, arrip.state != nil
}

func (arrip *ArtifactRegistryRepositoryIamPolicy) StateMust() *artifactRegistryRepositoryIamPolicyState {
	if arrip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arrip.Type(), arrip.LocalName()))
	}
	return arrip.state
}

func (arrip *ArtifactRegistryRepositoryIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(arrip)
}

type ArtifactRegistryRepositoryIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
	// DependsOn contains resources that ArtifactRegistryRepositoryIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type artifactRegistryRepositoryIamPolicyAttributes struct {
	ref terra.Reference
}

func (arrip artifactRegistryRepositoryIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(arrip.ref.Append("etag"))
}

func (arrip artifactRegistryRepositoryIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(arrip.ref.Append("id"))
}

func (arrip artifactRegistryRepositoryIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(arrip.ref.Append("location"))
}

func (arrip artifactRegistryRepositoryIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(arrip.ref.Append("policy_data"))
}

func (arrip artifactRegistryRepositoryIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(arrip.ref.Append("project"))
}

func (arrip artifactRegistryRepositoryIamPolicyAttributes) Repository() terra.StringValue {
	return terra.ReferenceString(arrip.ref.Append("repository"))
}

type artifactRegistryRepositoryIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Location   string `json:"location"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	Repository string `json:"repository"`
}
