// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	apigeenataddress "github.com/golingon/terraproviders/google/4.59.0/apigeenataddress"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApigeeNatAddress(name string, args ApigeeNatAddressArgs) *ApigeeNatAddress {
	return &ApigeeNatAddress{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApigeeNatAddress)(nil)

type ApigeeNatAddress struct {
	Name  string
	Args  ApigeeNatAddressArgs
	state *apigeeNatAddressState
}

func (ana *ApigeeNatAddress) Type() string {
	return "google_apigee_nat_address"
}

func (ana *ApigeeNatAddress) LocalName() string {
	return ana.Name
}

func (ana *ApigeeNatAddress) Configuration() interface{} {
	return ana.Args
}

func (ana *ApigeeNatAddress) Attributes() apigeeNatAddressAttributes {
	return apigeeNatAddressAttributes{ref: terra.ReferenceResource(ana)}
}

func (ana *ApigeeNatAddress) ImportState(av io.Reader) error {
	ana.state = &apigeeNatAddressState{}
	if err := json.NewDecoder(av).Decode(ana.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ana.Type(), ana.LocalName(), err)
	}
	return nil
}

func (ana *ApigeeNatAddress) State() (*apigeeNatAddressState, bool) {
	return ana.state, ana.state != nil
}

func (ana *ApigeeNatAddress) StateMust() *apigeeNatAddressState {
	if ana.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ana.Type(), ana.LocalName()))
	}
	return ana.state
}

func (ana *ApigeeNatAddress) DependOn() terra.Reference {
	return terra.ReferenceResource(ana)
}

type ApigeeNatAddressArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *apigeenataddress.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApigeeNatAddress depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apigeeNatAddressAttributes struct {
	ref terra.Reference
}

func (ana apigeeNatAddressAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ana.ref.Append("id"))
}

func (ana apigeeNatAddressAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceString(ana.ref.Append("instance_id"))
}

func (ana apigeeNatAddressAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceString(ana.ref.Append("ip_address"))
}

func (ana apigeeNatAddressAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ana.ref.Append("name"))
}

func (ana apigeeNatAddressAttributes) State() terra.StringValue {
	return terra.ReferenceString(ana.ref.Append("state"))
}

func (ana apigeeNatAddressAttributes) Timeouts() apigeenataddress.TimeoutsAttributes {
	return terra.ReferenceSingle[apigeenataddress.TimeoutsAttributes](ana.ref.Append("timeouts"))
}

type apigeeNatAddressState struct {
	Id         string                          `json:"id"`
	InstanceId string                          `json:"instance_id"`
	IpAddress  string                          `json:"ip_address"`
	Name       string                          `json:"name"`
	State      string                          `json:"state"`
	Timeouts   *apigeenataddress.TimeoutsState `json:"timeouts"`
}
