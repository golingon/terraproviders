// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package firebaserulesruleset

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Metadata struct{}

type Source struct {
	// Language: string, optional
	Language terra.StringValue `hcl:"language,attr"`
	// Files: min=1
	Files []Files `hcl:"files,block" validate:"min=1"`
}

type Files struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Fingerprint: string, optional
	Fingerprint terra.StringValue `hcl:"fingerprint,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type MetadataAttributes struct {
	ref terra.Reference
}

func (m MetadataAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m MetadataAttributes) InternalWithRef(ref terra.Reference) MetadataAttributes {
	return MetadataAttributes{ref: ref}
}

func (m MetadataAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m MetadataAttributes) Services() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](m.ref.Append("services"))
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) Language() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("language"))
}

func (s SourceAttributes) Files() terra.ListValue[FilesAttributes] {
	return terra.ReferenceList[FilesAttributes](s.ref.Append("files"))
}

type FilesAttributes struct {
	ref terra.Reference
}

func (f FilesAttributes) InternalRef() terra.Reference {
	return f.ref
}

func (f FilesAttributes) InternalWithRef(ref terra.Reference) FilesAttributes {
	return FilesAttributes{ref: ref}
}

func (f FilesAttributes) InternalTokens() hclwrite.Tokens {
	return f.ref.InternalTokens()
}

func (f FilesAttributes) Content() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("content"))
}

func (f FilesAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("fingerprint"))
}

func (f FilesAttributes) Name() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

type MetadataState struct {
	Services []string `json:"services"`
}

type SourceState struct {
	Language string       `json:"language"`
	Files    []FilesState `json:"files"`
}

type FilesState struct {
	Content     string `json:"content"`
	Fingerprint string `json:"fingerprint"`
	Name        string `json:"name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
