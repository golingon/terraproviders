// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	iaptunneliambinding "github.com/golingon/terraproviders/google/4.59.0/iaptunneliambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIapTunnelIamBinding(name string, args IapTunnelIamBindingArgs) *IapTunnelIamBinding {
	return &IapTunnelIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IapTunnelIamBinding)(nil)

type IapTunnelIamBinding struct {
	Name  string
	Args  IapTunnelIamBindingArgs
	state *iapTunnelIamBindingState
}

func (itib *IapTunnelIamBinding) Type() string {
	return "google_iap_tunnel_iam_binding"
}

func (itib *IapTunnelIamBinding) LocalName() string {
	return itib.Name
}

func (itib *IapTunnelIamBinding) Configuration() interface{} {
	return itib.Args
}

func (itib *IapTunnelIamBinding) Attributes() iapTunnelIamBindingAttributes {
	return iapTunnelIamBindingAttributes{ref: terra.ReferenceResource(itib)}
}

func (itib *IapTunnelIamBinding) ImportState(av io.Reader) error {
	itib.state = &iapTunnelIamBindingState{}
	if err := json.NewDecoder(av).Decode(itib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", itib.Type(), itib.LocalName(), err)
	}
	return nil
}

func (itib *IapTunnelIamBinding) State() (*iapTunnelIamBindingState, bool) {
	return itib.state, itib.state != nil
}

func (itib *IapTunnelIamBinding) StateMust() *iapTunnelIamBindingState {
	if itib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", itib.Type(), itib.LocalName()))
	}
	return itib.state
}

func (itib *IapTunnelIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(itib)
}

type IapTunnelIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *iaptunneliambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that IapTunnelIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iapTunnelIamBindingAttributes struct {
	ref terra.Reference
}

func (itib iapTunnelIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(itib.ref.Append("etag"))
}

func (itib iapTunnelIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(itib.ref.Append("id"))
}

func (itib iapTunnelIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](itib.ref.Append("members"))
}

func (itib iapTunnelIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(itib.ref.Append("project"))
}

func (itib iapTunnelIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(itib.ref.Append("role"))
}

func (itib iapTunnelIamBindingAttributes) Condition() terra.ListValue[iaptunneliambinding.ConditionAttributes] {
	return terra.ReferenceList[iaptunneliambinding.ConditionAttributes](itib.ref.Append("condition"))
}

type iapTunnelIamBindingState struct {
	Etag      string                               `json:"etag"`
	Id        string                               `json:"id"`
	Members   []string                             `json:"members"`
	Project   string                               `json:"project"`
	Role      string                               `json:"role"`
	Condition []iaptunneliambinding.ConditionState `json:"condition"`
}
