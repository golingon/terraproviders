// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	tagstagvalue "github.com/golingon/terraproviders/google/4.59.0/tagstagvalue"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewTagsTagValue(name string, args TagsTagValueArgs) *TagsTagValue {
	return &TagsTagValue{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TagsTagValue)(nil)

type TagsTagValue struct {
	Name  string
	Args  TagsTagValueArgs
	state *tagsTagValueState
}

func (ttv *TagsTagValue) Type() string {
	return "google_tags_tag_value"
}

func (ttv *TagsTagValue) LocalName() string {
	return ttv.Name
}

func (ttv *TagsTagValue) Configuration() interface{} {
	return ttv.Args
}

func (ttv *TagsTagValue) Attributes() tagsTagValueAttributes {
	return tagsTagValueAttributes{ref: terra.ReferenceResource(ttv)}
}

func (ttv *TagsTagValue) ImportState(av io.Reader) error {
	ttv.state = &tagsTagValueState{}
	if err := json.NewDecoder(av).Decode(ttv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ttv.Type(), ttv.LocalName(), err)
	}
	return nil
}

func (ttv *TagsTagValue) State() (*tagsTagValueState, bool) {
	return ttv.state, ttv.state != nil
}

func (ttv *TagsTagValue) StateMust() *tagsTagValueState {
	if ttv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ttv.Type(), ttv.LocalName()))
	}
	return ttv.state
}

func (ttv *TagsTagValue) DependOn() terra.Reference {
	return terra.ReferenceResource(ttv)
}

type TagsTagValueArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// ShortName: string, required
	ShortName terra.StringValue `hcl:"short_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *tagstagvalue.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that TagsTagValue depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type tagsTagValueAttributes struct {
	ref terra.Reference
}

func (ttv tagsTagValueAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(ttv.ref.Append("create_time"))
}

func (ttv tagsTagValueAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ttv.ref.Append("description"))
}

func (ttv tagsTagValueAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ttv.ref.Append("id"))
}

func (ttv tagsTagValueAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ttv.ref.Append("name"))
}

func (ttv tagsTagValueAttributes) NamespacedName() terra.StringValue {
	return terra.ReferenceString(ttv.ref.Append("namespaced_name"))
}

func (ttv tagsTagValueAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(ttv.ref.Append("parent"))
}

func (ttv tagsTagValueAttributes) ShortName() terra.StringValue {
	return terra.ReferenceString(ttv.ref.Append("short_name"))
}

func (ttv tagsTagValueAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(ttv.ref.Append("update_time"))
}

func (ttv tagsTagValueAttributes) Timeouts() tagstagvalue.TimeoutsAttributes {
	return terra.ReferenceSingle[tagstagvalue.TimeoutsAttributes](ttv.ref.Append("timeouts"))
}

type tagsTagValueState struct {
	CreateTime     string                      `json:"create_time"`
	Description    string                      `json:"description"`
	Id             string                      `json:"id"`
	Name           string                      `json:"name"`
	NamespacedName string                      `json:"namespaced_name"`
	Parent         string                      `json:"parent"`
	ShortName      string                      `json:"short_name"`
	UpdateTime     string                      `json:"update_time"`
	Timeouts       *tagstagvalue.TimeoutsState `json:"timeouts"`
}
