// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package computeglobalforwardingrule

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type MetadataFilters struct {
	// FilterMatchCriteria: string, required
	FilterMatchCriteria terra.StringValue `hcl:"filter_match_criteria,attr" validate:"required"`
	// FilterLabels: min=1,max=64
	FilterLabels []FilterLabels `hcl:"filter_labels,block" validate:"min=1,max=64"`
}

type FilterLabels struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type MetadataFiltersAttributes struct {
	ref terra.Reference
}

func (mf MetadataFiltersAttributes) InternalRef() terra.Reference {
	return mf.ref
}

func (mf MetadataFiltersAttributes) InternalWithRef(ref terra.Reference) MetadataFiltersAttributes {
	return MetadataFiltersAttributes{ref: ref}
}

func (mf MetadataFiltersAttributes) InternalTokens() hclwrite.Tokens {
	return mf.ref.InternalTokens()
}

func (mf MetadataFiltersAttributes) FilterMatchCriteria() terra.StringValue {
	return terra.ReferenceString(mf.ref.Append("filter_match_criteria"))
}

func (mf MetadataFiltersAttributes) FilterLabels() terra.ListValue[FilterLabelsAttributes] {
	return terra.ReferenceList[FilterLabelsAttributes](mf.ref.Append("filter_labels"))
}

type FilterLabelsAttributes struct {
	ref terra.Reference
}

func (fl FilterLabelsAttributes) InternalRef() terra.Reference {
	return fl.ref
}

func (fl FilterLabelsAttributes) InternalWithRef(ref terra.Reference) FilterLabelsAttributes {
	return FilterLabelsAttributes{ref: ref}
}

func (fl FilterLabelsAttributes) InternalTokens() hclwrite.Tokens {
	return fl.ref.InternalTokens()
}

func (fl FilterLabelsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(fl.ref.Append("name"))
}

func (fl FilterLabelsAttributes) Value() terra.StringValue {
	return terra.ReferenceString(fl.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type MetadataFiltersState struct {
	FilterMatchCriteria string              `json:"filter_match_criteria"`
	FilterLabels        []FilterLabelsState `json:"filter_labels"`
}

type FilterLabelsState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
