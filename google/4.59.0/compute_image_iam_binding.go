// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeimageiambinding "github.com/golingon/terraproviders/google/4.59.0/computeimageiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeImageIamBinding(name string, args ComputeImageIamBindingArgs) *ComputeImageIamBinding {
	return &ComputeImageIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeImageIamBinding)(nil)

type ComputeImageIamBinding struct {
	Name  string
	Args  ComputeImageIamBindingArgs
	state *computeImageIamBindingState
}

func (ciib *ComputeImageIamBinding) Type() string {
	return "google_compute_image_iam_binding"
}

func (ciib *ComputeImageIamBinding) LocalName() string {
	return ciib.Name
}

func (ciib *ComputeImageIamBinding) Configuration() interface{} {
	return ciib.Args
}

func (ciib *ComputeImageIamBinding) Attributes() computeImageIamBindingAttributes {
	return computeImageIamBindingAttributes{ref: terra.ReferenceResource(ciib)}
}

func (ciib *ComputeImageIamBinding) ImportState(av io.Reader) error {
	ciib.state = &computeImageIamBindingState{}
	if err := json.NewDecoder(av).Decode(ciib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ciib.Type(), ciib.LocalName(), err)
	}
	return nil
}

func (ciib *ComputeImageIamBinding) State() (*computeImageIamBindingState, bool) {
	return ciib.state, ciib.state != nil
}

func (ciib *ComputeImageIamBinding) StateMust() *computeImageIamBindingState {
	if ciib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ciib.Type(), ciib.LocalName()))
	}
	return ciib.state
}

func (ciib *ComputeImageIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(ciib)
}

type ComputeImageIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *computeimageiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that ComputeImageIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeImageIamBindingAttributes struct {
	ref terra.Reference
}

func (ciib computeImageIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ciib.ref.Append("etag"))
}

func (ciib computeImageIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ciib.ref.Append("id"))
}

func (ciib computeImageIamBindingAttributes) Image() terra.StringValue {
	return terra.ReferenceString(ciib.ref.Append("image"))
}

func (ciib computeImageIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ciib.ref.Append("members"))
}

func (ciib computeImageIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ciib.ref.Append("project"))
}

func (ciib computeImageIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(ciib.ref.Append("role"))
}

func (ciib computeImageIamBindingAttributes) Condition() terra.ListValue[computeimageiambinding.ConditionAttributes] {
	return terra.ReferenceList[computeimageiambinding.ConditionAttributes](ciib.ref.Append("condition"))
}

type computeImageIamBindingState struct {
	Etag      string                                  `json:"etag"`
	Id        string                                  `json:"id"`
	Image     string                                  `json:"image"`
	Members   []string                                `json:"members"`
	Project   string                                  `json:"project"`
	Role      string                                  `json:"role"`
	Condition []computeimageiambinding.ConditionState `json:"condition"`
}
