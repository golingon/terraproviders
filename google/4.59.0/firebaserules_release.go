// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	firebaserulesrelease "github.com/golingon/terraproviders/google/4.59.0/firebaserulesrelease"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFirebaserulesRelease(name string, args FirebaserulesReleaseArgs) *FirebaserulesRelease {
	return &FirebaserulesRelease{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirebaserulesRelease)(nil)

type FirebaserulesRelease struct {
	Name  string
	Args  FirebaserulesReleaseArgs
	state *firebaserulesReleaseState
}

func (fr *FirebaserulesRelease) Type() string {
	return "google_firebaserules_release"
}

func (fr *FirebaserulesRelease) LocalName() string {
	return fr.Name
}

func (fr *FirebaserulesRelease) Configuration() interface{} {
	return fr.Args
}

func (fr *FirebaserulesRelease) Attributes() firebaserulesReleaseAttributes {
	return firebaserulesReleaseAttributes{ref: terra.ReferenceResource(fr)}
}

func (fr *FirebaserulesRelease) ImportState(av io.Reader) error {
	fr.state = &firebaserulesReleaseState{}
	if err := json.NewDecoder(av).Decode(fr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fr.Type(), fr.LocalName(), err)
	}
	return nil
}

func (fr *FirebaserulesRelease) State() (*firebaserulesReleaseState, bool) {
	return fr.state, fr.state != nil
}

func (fr *FirebaserulesRelease) StateMust() *firebaserulesReleaseState {
	if fr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fr.Type(), fr.LocalName()))
	}
	return fr.state
}

func (fr *FirebaserulesRelease) DependOn() terra.Reference {
	return terra.ReferenceResource(fr)
}

type FirebaserulesReleaseArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RulesetName: string, required
	RulesetName terra.StringValue `hcl:"ruleset_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *firebaserulesrelease.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FirebaserulesRelease depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type firebaserulesReleaseAttributes struct {
	ref terra.Reference
}

func (fr firebaserulesReleaseAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(fr.ref.Append("create_time"))
}

func (fr firebaserulesReleaseAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(fr.ref.Append("disabled"))
}

func (fr firebaserulesReleaseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(fr.ref.Append("id"))
}

func (fr firebaserulesReleaseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(fr.ref.Append("name"))
}

func (fr firebaserulesReleaseAttributes) Project() terra.StringValue {
	return terra.ReferenceString(fr.ref.Append("project"))
}

func (fr firebaserulesReleaseAttributes) RulesetName() terra.StringValue {
	return terra.ReferenceString(fr.ref.Append("ruleset_name"))
}

func (fr firebaserulesReleaseAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(fr.ref.Append("update_time"))
}

func (fr firebaserulesReleaseAttributes) Timeouts() firebaserulesrelease.TimeoutsAttributes {
	return terra.ReferenceSingle[firebaserulesrelease.TimeoutsAttributes](fr.ref.Append("timeouts"))
}

type firebaserulesReleaseState struct {
	CreateTime  string                              `json:"create_time"`
	Disabled    bool                                `json:"disabled"`
	Id          string                              `json:"id"`
	Name        string                              `json:"name"`
	Project     string                              `json:"project"`
	RulesetName string                              `json:"ruleset_name"`
	UpdateTime  string                              `json:"update_time"`
	Timeouts    *firebaserulesrelease.TimeoutsState `json:"timeouts"`
}
