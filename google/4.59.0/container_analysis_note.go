// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	containeranalysisnote "github.com/golingon/terraproviders/google/4.59.0/containeranalysisnote"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewContainerAnalysisNote(name string, args ContainerAnalysisNoteArgs) *ContainerAnalysisNote {
	return &ContainerAnalysisNote{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ContainerAnalysisNote)(nil)

type ContainerAnalysisNote struct {
	Name  string
	Args  ContainerAnalysisNoteArgs
	state *containerAnalysisNoteState
}

func (can *ContainerAnalysisNote) Type() string {
	return "google_container_analysis_note"
}

func (can *ContainerAnalysisNote) LocalName() string {
	return can.Name
}

func (can *ContainerAnalysisNote) Configuration() interface{} {
	return can.Args
}

func (can *ContainerAnalysisNote) Attributes() containerAnalysisNoteAttributes {
	return containerAnalysisNoteAttributes{ref: terra.ReferenceResource(can)}
}

func (can *ContainerAnalysisNote) ImportState(av io.Reader) error {
	can.state = &containerAnalysisNoteState{}
	if err := json.NewDecoder(av).Decode(can.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", can.Type(), can.LocalName(), err)
	}
	return nil
}

func (can *ContainerAnalysisNote) State() (*containerAnalysisNoteState, bool) {
	return can.state, can.state != nil
}

func (can *ContainerAnalysisNote) StateMust() *containerAnalysisNoteState {
	if can.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", can.Type(), can.LocalName()))
	}
	return can.state
}

func (can *ContainerAnalysisNote) DependOn() terra.Reference {
	return terra.ReferenceResource(can)
}

type ContainerAnalysisNoteArgs struct {
	// ExpirationTime: string, optional
	ExpirationTime terra.StringValue `hcl:"expiration_time,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LongDescription: string, optional
	LongDescription terra.StringValue `hcl:"long_description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RelatedNoteNames: set of string, optional
	RelatedNoteNames terra.SetValue[terra.StringValue] `hcl:"related_note_names,attr"`
	// ShortDescription: string, optional
	ShortDescription terra.StringValue `hcl:"short_description,attr"`
	// AttestationAuthority: required
	AttestationAuthority *containeranalysisnote.AttestationAuthority `hcl:"attestation_authority,block" validate:"required"`
	// RelatedUrl: min=0
	RelatedUrl []containeranalysisnote.RelatedUrl `hcl:"related_url,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *containeranalysisnote.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ContainerAnalysisNote depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type containerAnalysisNoteAttributes struct {
	ref terra.Reference
}

func (can containerAnalysisNoteAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(can.ref.Append("create_time"))
}

func (can containerAnalysisNoteAttributes) ExpirationTime() terra.StringValue {
	return terra.ReferenceString(can.ref.Append("expiration_time"))
}

func (can containerAnalysisNoteAttributes) Id() terra.StringValue {
	return terra.ReferenceString(can.ref.Append("id"))
}

func (can containerAnalysisNoteAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(can.ref.Append("kind"))
}

func (can containerAnalysisNoteAttributes) LongDescription() terra.StringValue {
	return terra.ReferenceString(can.ref.Append("long_description"))
}

func (can containerAnalysisNoteAttributes) Name() terra.StringValue {
	return terra.ReferenceString(can.ref.Append("name"))
}

func (can containerAnalysisNoteAttributes) Project() terra.StringValue {
	return terra.ReferenceString(can.ref.Append("project"))
}

func (can containerAnalysisNoteAttributes) RelatedNoteNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](can.ref.Append("related_note_names"))
}

func (can containerAnalysisNoteAttributes) ShortDescription() terra.StringValue {
	return terra.ReferenceString(can.ref.Append("short_description"))
}

func (can containerAnalysisNoteAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(can.ref.Append("update_time"))
}

func (can containerAnalysisNoteAttributes) AttestationAuthority() terra.ListValue[containeranalysisnote.AttestationAuthorityAttributes] {
	return terra.ReferenceList[containeranalysisnote.AttestationAuthorityAttributes](can.ref.Append("attestation_authority"))
}

func (can containerAnalysisNoteAttributes) RelatedUrl() terra.SetValue[containeranalysisnote.RelatedUrlAttributes] {
	return terra.ReferenceSet[containeranalysisnote.RelatedUrlAttributes](can.ref.Append("related_url"))
}

func (can containerAnalysisNoteAttributes) Timeouts() containeranalysisnote.TimeoutsAttributes {
	return terra.ReferenceSingle[containeranalysisnote.TimeoutsAttributes](can.ref.Append("timeouts"))
}

type containerAnalysisNoteState struct {
	CreateTime           string                                            `json:"create_time"`
	ExpirationTime       string                                            `json:"expiration_time"`
	Id                   string                                            `json:"id"`
	Kind                 string                                            `json:"kind"`
	LongDescription      string                                            `json:"long_description"`
	Name                 string                                            `json:"name"`
	Project              string                                            `json:"project"`
	RelatedNoteNames     []string                                          `json:"related_note_names"`
	ShortDescription     string                                            `json:"short_description"`
	UpdateTime           string                                            `json:"update_time"`
	AttestationAuthority []containeranalysisnote.AttestationAuthorityState `json:"attestation_authority"`
	RelatedUrl           []containeranalysisnote.RelatedUrlState           `json:"related_url"`
	Timeouts             *containeranalysisnote.TimeoutsState              `json:"timeouts"`
}
