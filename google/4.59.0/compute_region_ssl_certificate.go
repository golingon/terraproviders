// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeregionsslcertificate "github.com/golingon/terraproviders/google/4.59.0/computeregionsslcertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeRegionSslCertificate(name string, args ComputeRegionSslCertificateArgs) *ComputeRegionSslCertificate {
	return &ComputeRegionSslCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeRegionSslCertificate)(nil)

type ComputeRegionSslCertificate struct {
	Name  string
	Args  ComputeRegionSslCertificateArgs
	state *computeRegionSslCertificateState
}

func (crsc *ComputeRegionSslCertificate) Type() string {
	return "google_compute_region_ssl_certificate"
}

func (crsc *ComputeRegionSslCertificate) LocalName() string {
	return crsc.Name
}

func (crsc *ComputeRegionSslCertificate) Configuration() interface{} {
	return crsc.Args
}

func (crsc *ComputeRegionSslCertificate) Attributes() computeRegionSslCertificateAttributes {
	return computeRegionSslCertificateAttributes{ref: terra.ReferenceResource(crsc)}
}

func (crsc *ComputeRegionSslCertificate) ImportState(av io.Reader) error {
	crsc.state = &computeRegionSslCertificateState{}
	if err := json.NewDecoder(av).Decode(crsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crsc.Type(), crsc.LocalName(), err)
	}
	return nil
}

func (crsc *ComputeRegionSslCertificate) State() (*computeRegionSslCertificateState, bool) {
	return crsc.state, crsc.state != nil
}

func (crsc *ComputeRegionSslCertificate) StateMust() *computeRegionSslCertificateState {
	if crsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crsc.Type(), crsc.LocalName()))
	}
	return crsc.state
}

func (crsc *ComputeRegionSslCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(crsc)
}

type ComputeRegionSslCertificateArgs struct {
	// Certificate: string, required
	Certificate terra.StringValue `hcl:"certificate,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// PrivateKey: string, required
	PrivateKey terra.StringValue `hcl:"private_key,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Timeouts: optional
	Timeouts *computeregionsslcertificate.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeRegionSslCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeRegionSslCertificateAttributes struct {
	ref terra.Reference
}

func (crsc computeRegionSslCertificateAttributes) Certificate() terra.StringValue {
	return terra.ReferenceString(crsc.ref.Append("certificate"))
}

func (crsc computeRegionSslCertificateAttributes) CertificateId() terra.NumberValue {
	return terra.ReferenceNumber(crsc.ref.Append("certificate_id"))
}

func (crsc computeRegionSslCertificateAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(crsc.ref.Append("creation_timestamp"))
}

func (crsc computeRegionSslCertificateAttributes) Description() terra.StringValue {
	return terra.ReferenceString(crsc.ref.Append("description"))
}

func (crsc computeRegionSslCertificateAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceString(crsc.ref.Append("expire_time"))
}

func (crsc computeRegionSslCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crsc.ref.Append("id"))
}

func (crsc computeRegionSslCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crsc.ref.Append("name"))
}

func (crsc computeRegionSslCertificateAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(crsc.ref.Append("name_prefix"))
}

func (crsc computeRegionSslCertificateAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceString(crsc.ref.Append("private_key"))
}

func (crsc computeRegionSslCertificateAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crsc.ref.Append("project"))
}

func (crsc computeRegionSslCertificateAttributes) Region() terra.StringValue {
	return terra.ReferenceString(crsc.ref.Append("region"))
}

func (crsc computeRegionSslCertificateAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(crsc.ref.Append("self_link"))
}

func (crsc computeRegionSslCertificateAttributes) Timeouts() computeregionsslcertificate.TimeoutsAttributes {
	return terra.ReferenceSingle[computeregionsslcertificate.TimeoutsAttributes](crsc.ref.Append("timeouts"))
}

type computeRegionSslCertificateState struct {
	Certificate       string                                     `json:"certificate"`
	CertificateId     float64                                    `json:"certificate_id"`
	CreationTimestamp string                                     `json:"creation_timestamp"`
	Description       string                                     `json:"description"`
	ExpireTime        string                                     `json:"expire_time"`
	Id                string                                     `json:"id"`
	Name              string                                     `json:"name"`
	NamePrefix        string                                     `json:"name_prefix"`
	PrivateKey        string                                     `json:"private_key"`
	Project           string                                     `json:"project"`
	Region            string                                     `json:"region"`
	SelfLink          string                                     `json:"self_link"`
	Timeouts          *computeregionsslcertificate.TimeoutsState `json:"timeouts"`
}
