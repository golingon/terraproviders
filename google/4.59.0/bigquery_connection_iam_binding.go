// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	bigqueryconnectioniambinding "github.com/golingon/terraproviders/google/4.59.0/bigqueryconnectioniambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigqueryConnectionIamBinding(name string, args BigqueryConnectionIamBindingArgs) *BigqueryConnectionIamBinding {
	return &BigqueryConnectionIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryConnectionIamBinding)(nil)

type BigqueryConnectionIamBinding struct {
	Name  string
	Args  BigqueryConnectionIamBindingArgs
	state *bigqueryConnectionIamBindingState
}

func (bcib *BigqueryConnectionIamBinding) Type() string {
	return "google_bigquery_connection_iam_binding"
}

func (bcib *BigqueryConnectionIamBinding) LocalName() string {
	return bcib.Name
}

func (bcib *BigqueryConnectionIamBinding) Configuration() interface{} {
	return bcib.Args
}

func (bcib *BigqueryConnectionIamBinding) Attributes() bigqueryConnectionIamBindingAttributes {
	return bigqueryConnectionIamBindingAttributes{ref: terra.ReferenceResource(bcib)}
}

func (bcib *BigqueryConnectionIamBinding) ImportState(av io.Reader) error {
	bcib.state = &bigqueryConnectionIamBindingState{}
	if err := json.NewDecoder(av).Decode(bcib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bcib.Type(), bcib.LocalName(), err)
	}
	return nil
}

func (bcib *BigqueryConnectionIamBinding) State() (*bigqueryConnectionIamBindingState, bool) {
	return bcib.state, bcib.state != nil
}

func (bcib *BigqueryConnectionIamBinding) StateMust() *bigqueryConnectionIamBindingState {
	if bcib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bcib.Type(), bcib.LocalName()))
	}
	return bcib.state
}

func (bcib *BigqueryConnectionIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(bcib)
}

type BigqueryConnectionIamBindingArgs struct {
	// ConnectionId: string, required
	ConnectionId terra.StringValue `hcl:"connection_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *bigqueryconnectioniambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that BigqueryConnectionIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigqueryConnectionIamBindingAttributes struct {
	ref terra.Reference
}

func (bcib bigqueryConnectionIamBindingAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceString(bcib.ref.Append("connection_id"))
}

func (bcib bigqueryConnectionIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(bcib.ref.Append("etag"))
}

func (bcib bigqueryConnectionIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bcib.ref.Append("id"))
}

func (bcib bigqueryConnectionIamBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bcib.ref.Append("location"))
}

func (bcib bigqueryConnectionIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](bcib.ref.Append("members"))
}

func (bcib bigqueryConnectionIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bcib.ref.Append("project"))
}

func (bcib bigqueryConnectionIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(bcib.ref.Append("role"))
}

func (bcib bigqueryConnectionIamBindingAttributes) Condition() terra.ListValue[bigqueryconnectioniambinding.ConditionAttributes] {
	return terra.ReferenceList[bigqueryconnectioniambinding.ConditionAttributes](bcib.ref.Append("condition"))
}

type bigqueryConnectionIamBindingState struct {
	ConnectionId string                                        `json:"connection_id"`
	Etag         string                                        `json:"etag"`
	Id           string                                        `json:"id"`
	Location     string                                        `json:"location"`
	Members      []string                                      `json:"members"`
	Project      string                                        `json:"project"`
	Role         string                                        `json:"role"`
	Condition    []bigqueryconnectioniambinding.ConditionState `json:"condition"`
}
