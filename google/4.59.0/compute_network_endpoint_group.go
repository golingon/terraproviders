// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computenetworkendpointgroup "github.com/golingon/terraproviders/google/4.59.0/computenetworkendpointgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeNetworkEndpointGroup(name string, args ComputeNetworkEndpointGroupArgs) *ComputeNetworkEndpointGroup {
	return &ComputeNetworkEndpointGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeNetworkEndpointGroup)(nil)

type ComputeNetworkEndpointGroup struct {
	Name  string
	Args  ComputeNetworkEndpointGroupArgs
	state *computeNetworkEndpointGroupState
}

func (cneg *ComputeNetworkEndpointGroup) Type() string {
	return "google_compute_network_endpoint_group"
}

func (cneg *ComputeNetworkEndpointGroup) LocalName() string {
	return cneg.Name
}

func (cneg *ComputeNetworkEndpointGroup) Configuration() interface{} {
	return cneg.Args
}

func (cneg *ComputeNetworkEndpointGroup) Attributes() computeNetworkEndpointGroupAttributes {
	return computeNetworkEndpointGroupAttributes{ref: terra.ReferenceResource(cneg)}
}

func (cneg *ComputeNetworkEndpointGroup) ImportState(av io.Reader) error {
	cneg.state = &computeNetworkEndpointGroupState{}
	if err := json.NewDecoder(av).Decode(cneg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cneg.Type(), cneg.LocalName(), err)
	}
	return nil
}

func (cneg *ComputeNetworkEndpointGroup) State() (*computeNetworkEndpointGroupState, bool) {
	return cneg.state, cneg.state != nil
}

func (cneg *ComputeNetworkEndpointGroup) StateMust() *computeNetworkEndpointGroupState {
	if cneg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cneg.Type(), cneg.LocalName()))
	}
	return cneg.state
}

func (cneg *ComputeNetworkEndpointGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(cneg)
}

type ComputeNetworkEndpointGroupArgs struct {
	// DefaultPort: number, optional
	DefaultPort terra.NumberValue `hcl:"default_port,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// NetworkEndpointType: string, optional
	NetworkEndpointType terra.StringValue `hcl:"network_endpoint_type,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Timeouts: optional
	Timeouts *computenetworkendpointgroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeNetworkEndpointGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeNetworkEndpointGroupAttributes struct {
	ref terra.Reference
}

func (cneg computeNetworkEndpointGroupAttributes) DefaultPort() terra.NumberValue {
	return terra.ReferenceNumber(cneg.ref.Append("default_port"))
}

func (cneg computeNetworkEndpointGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cneg.ref.Append("description"))
}

func (cneg computeNetworkEndpointGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cneg.ref.Append("id"))
}

func (cneg computeNetworkEndpointGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cneg.ref.Append("name"))
}

func (cneg computeNetworkEndpointGroupAttributes) Network() terra.StringValue {
	return terra.ReferenceString(cneg.ref.Append("network"))
}

func (cneg computeNetworkEndpointGroupAttributes) NetworkEndpointType() terra.StringValue {
	return terra.ReferenceString(cneg.ref.Append("network_endpoint_type"))
}

func (cneg computeNetworkEndpointGroupAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cneg.ref.Append("project"))
}

func (cneg computeNetworkEndpointGroupAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(cneg.ref.Append("self_link"))
}

func (cneg computeNetworkEndpointGroupAttributes) Size() terra.NumberValue {
	return terra.ReferenceNumber(cneg.ref.Append("size"))
}

func (cneg computeNetworkEndpointGroupAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceString(cneg.ref.Append("subnetwork"))
}

func (cneg computeNetworkEndpointGroupAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(cneg.ref.Append("zone"))
}

func (cneg computeNetworkEndpointGroupAttributes) Timeouts() computenetworkendpointgroup.TimeoutsAttributes {
	return terra.ReferenceSingle[computenetworkendpointgroup.TimeoutsAttributes](cneg.ref.Append("timeouts"))
}

type computeNetworkEndpointGroupState struct {
	DefaultPort         float64                                    `json:"default_port"`
	Description         string                                     `json:"description"`
	Id                  string                                     `json:"id"`
	Name                string                                     `json:"name"`
	Network             string                                     `json:"network"`
	NetworkEndpointType string                                     `json:"network_endpoint_type"`
	Project             string                                     `json:"project"`
	SelfLink            string                                     `json:"self_link"`
	Size                float64                                    `json:"size"`
	Subnetwork          string                                     `json:"subnetwork"`
	Zone                string                                     `json:"zone"`
	Timeouts            *computenetworkendpointgroup.TimeoutsState `json:"timeouts"`
}
