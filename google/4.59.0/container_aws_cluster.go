// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	containerawscluster "github.com/golingon/terraproviders/google/4.59.0/containerawscluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewContainerAwsCluster(name string, args ContainerAwsClusterArgs) *ContainerAwsCluster {
	return &ContainerAwsCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ContainerAwsCluster)(nil)

type ContainerAwsCluster struct {
	Name  string
	Args  ContainerAwsClusterArgs
	state *containerAwsClusterState
}

func (cac *ContainerAwsCluster) Type() string {
	return "google_container_aws_cluster"
}

func (cac *ContainerAwsCluster) LocalName() string {
	return cac.Name
}

func (cac *ContainerAwsCluster) Configuration() interface{} {
	return cac.Args
}

func (cac *ContainerAwsCluster) Attributes() containerAwsClusterAttributes {
	return containerAwsClusterAttributes{ref: terra.ReferenceResource(cac)}
}

func (cac *ContainerAwsCluster) ImportState(av io.Reader) error {
	cac.state = &containerAwsClusterState{}
	if err := json.NewDecoder(av).Decode(cac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cac.Type(), cac.LocalName(), err)
	}
	return nil
}

func (cac *ContainerAwsCluster) State() (*containerAwsClusterState, bool) {
	return cac.state, cac.state != nil
}

func (cac *ContainerAwsCluster) StateMust() *containerAwsClusterState {
	if cac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cac.Type(), cac.LocalName()))
	}
	return cac.state
}

func (cac *ContainerAwsCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(cac)
}

type ContainerAwsClusterArgs struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// AwsRegion: string, required
	AwsRegion terra.StringValue `hcl:"aws_region,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// WorkloadIdentityConfig: min=0
	WorkloadIdentityConfig []containerawscluster.WorkloadIdentityConfig `hcl:"workload_identity_config,block" validate:"min=0"`
	// Authorization: required
	Authorization *containerawscluster.Authorization `hcl:"authorization,block" validate:"required"`
	// ControlPlane: required
	ControlPlane *containerawscluster.ControlPlane `hcl:"control_plane,block" validate:"required"`
	// Fleet: required
	Fleet *containerawscluster.Fleet `hcl:"fleet,block" validate:"required"`
	// Networking: required
	Networking *containerawscluster.Networking `hcl:"networking,block" validate:"required"`
	// Timeouts: optional
	Timeouts *containerawscluster.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ContainerAwsCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type containerAwsClusterAttributes struct {
	ref terra.Reference
}

func (cac containerAwsClusterAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cac.ref.Append("annotations"))
}

func (cac containerAwsClusterAttributes) AwsRegion() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("aws_region"))
}

func (cac containerAwsClusterAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("create_time"))
}

func (cac containerAwsClusterAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("description"))
}

func (cac containerAwsClusterAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("endpoint"))
}

func (cac containerAwsClusterAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("etag"))
}

func (cac containerAwsClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("id"))
}

func (cac containerAwsClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("location"))
}

func (cac containerAwsClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("name"))
}

func (cac containerAwsClusterAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("project"))
}

func (cac containerAwsClusterAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceBool(cac.ref.Append("reconciling"))
}

func (cac containerAwsClusterAttributes) State() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("state"))
}

func (cac containerAwsClusterAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("uid"))
}

func (cac containerAwsClusterAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("update_time"))
}

func (cac containerAwsClusterAttributes) WorkloadIdentityConfig() terra.ListValue[containerawscluster.WorkloadIdentityConfigAttributes] {
	return terra.ReferenceList[containerawscluster.WorkloadIdentityConfigAttributes](cac.ref.Append("workload_identity_config"))
}

func (cac containerAwsClusterAttributes) Authorization() terra.ListValue[containerawscluster.AuthorizationAttributes] {
	return terra.ReferenceList[containerawscluster.AuthorizationAttributes](cac.ref.Append("authorization"))
}

func (cac containerAwsClusterAttributes) ControlPlane() terra.ListValue[containerawscluster.ControlPlaneAttributes] {
	return terra.ReferenceList[containerawscluster.ControlPlaneAttributes](cac.ref.Append("control_plane"))
}

func (cac containerAwsClusterAttributes) Fleet() terra.ListValue[containerawscluster.FleetAttributes] {
	return terra.ReferenceList[containerawscluster.FleetAttributes](cac.ref.Append("fleet"))
}

func (cac containerAwsClusterAttributes) Networking() terra.ListValue[containerawscluster.NetworkingAttributes] {
	return terra.ReferenceList[containerawscluster.NetworkingAttributes](cac.ref.Append("networking"))
}

func (cac containerAwsClusterAttributes) Timeouts() containerawscluster.TimeoutsAttributes {
	return terra.ReferenceSingle[containerawscluster.TimeoutsAttributes](cac.ref.Append("timeouts"))
}

type containerAwsClusterState struct {
	Annotations            map[string]string                                 `json:"annotations"`
	AwsRegion              string                                            `json:"aws_region"`
	CreateTime             string                                            `json:"create_time"`
	Description            string                                            `json:"description"`
	Endpoint               string                                            `json:"endpoint"`
	Etag                   string                                            `json:"etag"`
	Id                     string                                            `json:"id"`
	Location               string                                            `json:"location"`
	Name                   string                                            `json:"name"`
	Project                string                                            `json:"project"`
	Reconciling            bool                                              `json:"reconciling"`
	State                  string                                            `json:"state"`
	Uid                    string                                            `json:"uid"`
	UpdateTime             string                                            `json:"update_time"`
	WorkloadIdentityConfig []containerawscluster.WorkloadIdentityConfigState `json:"workload_identity_config"`
	Authorization          []containerawscluster.AuthorizationState          `json:"authorization"`
	ControlPlane           []containerawscluster.ControlPlaneState           `json:"control_plane"`
	Fleet                  []containerawscluster.FleetState                  `json:"fleet"`
	Networking             []containerawscluster.NetworkingState             `json:"networking"`
	Timeouts               *containerawscluster.TimeoutsState                `json:"timeouts"`
}
