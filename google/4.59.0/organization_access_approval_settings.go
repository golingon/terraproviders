// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	organizationaccessapprovalsettings "github.com/golingon/terraproviders/google/4.59.0/organizationaccessapprovalsettings"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewOrganizationAccessApprovalSettings(name string, args OrganizationAccessApprovalSettingsArgs) *OrganizationAccessApprovalSettings {
	return &OrganizationAccessApprovalSettings{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OrganizationAccessApprovalSettings)(nil)

type OrganizationAccessApprovalSettings struct {
	Name  string
	Args  OrganizationAccessApprovalSettingsArgs
	state *organizationAccessApprovalSettingsState
}

func (oaas *OrganizationAccessApprovalSettings) Type() string {
	return "google_organization_access_approval_settings"
}

func (oaas *OrganizationAccessApprovalSettings) LocalName() string {
	return oaas.Name
}

func (oaas *OrganizationAccessApprovalSettings) Configuration() interface{} {
	return oaas.Args
}

func (oaas *OrganizationAccessApprovalSettings) Attributes() organizationAccessApprovalSettingsAttributes {
	return organizationAccessApprovalSettingsAttributes{ref: terra.ReferenceResource(oaas)}
}

func (oaas *OrganizationAccessApprovalSettings) ImportState(av io.Reader) error {
	oaas.state = &organizationAccessApprovalSettingsState{}
	if err := json.NewDecoder(av).Decode(oaas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", oaas.Type(), oaas.LocalName(), err)
	}
	return nil
}

func (oaas *OrganizationAccessApprovalSettings) State() (*organizationAccessApprovalSettingsState, bool) {
	return oaas.state, oaas.state != nil
}

func (oaas *OrganizationAccessApprovalSettings) StateMust() *organizationAccessApprovalSettingsState {
	if oaas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", oaas.Type(), oaas.LocalName()))
	}
	return oaas.state
}

func (oaas *OrganizationAccessApprovalSettings) DependOn() terra.Reference {
	return terra.ReferenceResource(oaas)
}

type OrganizationAccessApprovalSettingsArgs struct {
	// ActiveKeyVersion: string, optional
	ActiveKeyVersion terra.StringValue `hcl:"active_key_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NotificationEmails: set of string, optional
	NotificationEmails terra.SetValue[terra.StringValue] `hcl:"notification_emails,attr"`
	// OrganizationId: string, required
	OrganizationId terra.StringValue `hcl:"organization_id,attr" validate:"required"`
	// EnrolledServices: min=1
	EnrolledServices []organizationaccessapprovalsettings.EnrolledServices `hcl:"enrolled_services,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *organizationaccessapprovalsettings.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that OrganizationAccessApprovalSettings depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type organizationAccessApprovalSettingsAttributes struct {
	ref terra.Reference
}

func (oaas organizationAccessApprovalSettingsAttributes) ActiveKeyVersion() terra.StringValue {
	return terra.ReferenceString(oaas.ref.Append("active_key_version"))
}

func (oaas organizationAccessApprovalSettingsAttributes) AncestorHasActiveKeyVersion() terra.BoolValue {
	return terra.ReferenceBool(oaas.ref.Append("ancestor_has_active_key_version"))
}

func (oaas organizationAccessApprovalSettingsAttributes) EnrolledAncestor() terra.BoolValue {
	return terra.ReferenceBool(oaas.ref.Append("enrolled_ancestor"))
}

func (oaas organizationAccessApprovalSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(oaas.ref.Append("id"))
}

func (oaas organizationAccessApprovalSettingsAttributes) InvalidKeyVersion() terra.BoolValue {
	return terra.ReferenceBool(oaas.ref.Append("invalid_key_version"))
}

func (oaas organizationAccessApprovalSettingsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(oaas.ref.Append("name"))
}

func (oaas organizationAccessApprovalSettingsAttributes) NotificationEmails() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](oaas.ref.Append("notification_emails"))
}

func (oaas organizationAccessApprovalSettingsAttributes) OrganizationId() terra.StringValue {
	return terra.ReferenceString(oaas.ref.Append("organization_id"))
}

func (oaas organizationAccessApprovalSettingsAttributes) EnrolledServices() terra.SetValue[organizationaccessapprovalsettings.EnrolledServicesAttributes] {
	return terra.ReferenceSet[organizationaccessapprovalsettings.EnrolledServicesAttributes](oaas.ref.Append("enrolled_services"))
}

func (oaas organizationAccessApprovalSettingsAttributes) Timeouts() organizationaccessapprovalsettings.TimeoutsAttributes {
	return terra.ReferenceSingle[organizationaccessapprovalsettings.TimeoutsAttributes](oaas.ref.Append("timeouts"))
}

type organizationAccessApprovalSettingsState struct {
	ActiveKeyVersion            string                                                     `json:"active_key_version"`
	AncestorHasActiveKeyVersion bool                                                       `json:"ancestor_has_active_key_version"`
	EnrolledAncestor            bool                                                       `json:"enrolled_ancestor"`
	Id                          string                                                     `json:"id"`
	InvalidKeyVersion           bool                                                       `json:"invalid_key_version"`
	Name                        string                                                     `json:"name"`
	NotificationEmails          []string                                                   `json:"notification_emails"`
	OrganizationId              string                                                     `json:"organization_id"`
	EnrolledServices            []organizationaccessapprovalsettings.EnrolledServicesState `json:"enrolled_services"`
	Timeouts                    *organizationaccessapprovalsettings.TimeoutsState          `json:"timeouts"`
}
