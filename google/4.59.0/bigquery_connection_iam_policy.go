// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigqueryConnectionIamPolicy(name string, args BigqueryConnectionIamPolicyArgs) *BigqueryConnectionIamPolicy {
	return &BigqueryConnectionIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryConnectionIamPolicy)(nil)

type BigqueryConnectionIamPolicy struct {
	Name  string
	Args  BigqueryConnectionIamPolicyArgs
	state *bigqueryConnectionIamPolicyState
}

func (bcip *BigqueryConnectionIamPolicy) Type() string {
	return "google_bigquery_connection_iam_policy"
}

func (bcip *BigqueryConnectionIamPolicy) LocalName() string {
	return bcip.Name
}

func (bcip *BigqueryConnectionIamPolicy) Configuration() interface{} {
	return bcip.Args
}

func (bcip *BigqueryConnectionIamPolicy) Attributes() bigqueryConnectionIamPolicyAttributes {
	return bigqueryConnectionIamPolicyAttributes{ref: terra.ReferenceResource(bcip)}
}

func (bcip *BigqueryConnectionIamPolicy) ImportState(av io.Reader) error {
	bcip.state = &bigqueryConnectionIamPolicyState{}
	if err := json.NewDecoder(av).Decode(bcip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bcip.Type(), bcip.LocalName(), err)
	}
	return nil
}

func (bcip *BigqueryConnectionIamPolicy) State() (*bigqueryConnectionIamPolicyState, bool) {
	return bcip.state, bcip.state != nil
}

func (bcip *BigqueryConnectionIamPolicy) StateMust() *bigqueryConnectionIamPolicyState {
	if bcip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bcip.Type(), bcip.LocalName()))
	}
	return bcip.state
}

func (bcip *BigqueryConnectionIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(bcip)
}

type BigqueryConnectionIamPolicyArgs struct {
	// ConnectionId: string, required
	ConnectionId terra.StringValue `hcl:"connection_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that BigqueryConnectionIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigqueryConnectionIamPolicyAttributes struct {
	ref terra.Reference
}

func (bcip bigqueryConnectionIamPolicyAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceString(bcip.ref.Append("connection_id"))
}

func (bcip bigqueryConnectionIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(bcip.ref.Append("etag"))
}

func (bcip bigqueryConnectionIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bcip.ref.Append("id"))
}

func (bcip bigqueryConnectionIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bcip.ref.Append("location"))
}

func (bcip bigqueryConnectionIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(bcip.ref.Append("policy_data"))
}

func (bcip bigqueryConnectionIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bcip.ref.Append("project"))
}

type bigqueryConnectionIamPolicyState struct {
	ConnectionId string `json:"connection_id"`
	Etag         string `json:"etag"`
	Id           string `json:"id"`
	Location     string `json:"location"`
	PolicyData   string `json:"policy_data"`
	Project      string `json:"project"`
}
