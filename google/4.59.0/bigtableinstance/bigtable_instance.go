// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package bigtableinstance

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Cluster struct {
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// NumNodes: number, optional
	NumNodes terra.NumberValue `hcl:"num_nodes,attr"`
	// StorageType: string, optional
	StorageType terra.StringValue `hcl:"storage_type,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// AutoscalingConfig: optional
	AutoscalingConfig *AutoscalingConfig `hcl:"autoscaling_config,block"`
}

type AutoscalingConfig struct {
	// CpuTarget: number, required
	CpuTarget terra.NumberValue `hcl:"cpu_target,attr" validate:"required"`
	// MaxNodes: number, required
	MaxNodes terra.NumberValue `hcl:"max_nodes,attr" validate:"required"`
	// MinNodes: number, required
	MinNodes terra.NumberValue `hcl:"min_nodes,attr" validate:"required"`
	// StorageTarget: number, optional
	StorageTarget terra.NumberValue `hcl:"storage_target,attr"`
}

type ClusterAttributes struct {
	ref terra.Reference
}

func (c ClusterAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c ClusterAttributes) InternalWithRef(ref terra.Reference) ClusterAttributes {
	return ClusterAttributes{ref: ref}
}

func (c ClusterAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c ClusterAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("cluster_id"))
}

func (c ClusterAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("kms_key_name"))
}

func (c ClusterAttributes) NumNodes() terra.NumberValue {
	return terra.ReferenceNumber(c.ref.Append("num_nodes"))
}

func (c ClusterAttributes) StorageType() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("storage_type"))
}

func (c ClusterAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("zone"))
}

func (c ClusterAttributes) AutoscalingConfig() terra.ListValue[AutoscalingConfigAttributes] {
	return terra.ReferenceList[AutoscalingConfigAttributes](c.ref.Append("autoscaling_config"))
}

type AutoscalingConfigAttributes struct {
	ref terra.Reference
}

func (ac AutoscalingConfigAttributes) InternalRef() terra.Reference {
	return ac.ref
}

func (ac AutoscalingConfigAttributes) InternalWithRef(ref terra.Reference) AutoscalingConfigAttributes {
	return AutoscalingConfigAttributes{ref: ref}
}

func (ac AutoscalingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ac.ref.InternalTokens()
}

func (ac AutoscalingConfigAttributes) CpuTarget() terra.NumberValue {
	return terra.ReferenceNumber(ac.ref.Append("cpu_target"))
}

func (ac AutoscalingConfigAttributes) MaxNodes() terra.NumberValue {
	return terra.ReferenceNumber(ac.ref.Append("max_nodes"))
}

func (ac AutoscalingConfigAttributes) MinNodes() terra.NumberValue {
	return terra.ReferenceNumber(ac.ref.Append("min_nodes"))
}

func (ac AutoscalingConfigAttributes) StorageTarget() terra.NumberValue {
	return terra.ReferenceNumber(ac.ref.Append("storage_target"))
}

type ClusterState struct {
	ClusterId         string                   `json:"cluster_id"`
	KmsKeyName        string                   `json:"kms_key_name"`
	NumNodes          float64                  `json:"num_nodes"`
	StorageType       string                   `json:"storage_type"`
	Zone              string                   `json:"zone"`
	AutoscalingConfig []AutoscalingConfigState `json:"autoscaling_config"`
}

type AutoscalingConfigState struct {
	CpuTarget     float64 `json:"cpu_target"`
	MaxNodes      float64 `json:"max_nodes"`
	MinNodes      float64 `json:"min_nodes"`
	StorageTarget float64 `json:"storage_target"`
}
