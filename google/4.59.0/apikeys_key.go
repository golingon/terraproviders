// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	apikeyskey "github.com/golingon/terraproviders/google/4.59.0/apikeyskey"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApikeysKey(name string, args ApikeysKeyArgs) *ApikeysKey {
	return &ApikeysKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApikeysKey)(nil)

type ApikeysKey struct {
	Name  string
	Args  ApikeysKeyArgs
	state *apikeysKeyState
}

func (ak *ApikeysKey) Type() string {
	return "google_apikeys_key"
}

func (ak *ApikeysKey) LocalName() string {
	return ak.Name
}

func (ak *ApikeysKey) Configuration() interface{} {
	return ak.Args
}

func (ak *ApikeysKey) Attributes() apikeysKeyAttributes {
	return apikeysKeyAttributes{ref: terra.ReferenceResource(ak)}
}

func (ak *ApikeysKey) ImportState(av io.Reader) error {
	ak.state = &apikeysKeyState{}
	if err := json.NewDecoder(av).Decode(ak.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ak.Type(), ak.LocalName(), err)
	}
	return nil
}

func (ak *ApikeysKey) State() (*apikeysKeyState, bool) {
	return ak.state, ak.state != nil
}

func (ak *ApikeysKey) StateMust() *apikeysKeyState {
	if ak.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ak.Type(), ak.LocalName()))
	}
	return ak.state
}

func (ak *ApikeysKey) DependOn() terra.Reference {
	return terra.ReferenceResource(ak)
}

type ApikeysKeyArgs struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Restrictions: optional
	Restrictions *apikeyskey.Restrictions `hcl:"restrictions,block"`
	// Timeouts: optional
	Timeouts *apikeyskey.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApikeysKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apikeysKeyAttributes struct {
	ref terra.Reference
}

func (ak apikeysKeyAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(ak.ref.Append("display_name"))
}

func (ak apikeysKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ak.ref.Append("id"))
}

func (ak apikeysKeyAttributes) KeyString() terra.StringValue {
	return terra.ReferenceString(ak.ref.Append("key_string"))
}

func (ak apikeysKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ak.ref.Append("name"))
}

func (ak apikeysKeyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ak.ref.Append("project"))
}

func (ak apikeysKeyAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(ak.ref.Append("uid"))
}

func (ak apikeysKeyAttributes) Restrictions() terra.ListValue[apikeyskey.RestrictionsAttributes] {
	return terra.ReferenceList[apikeyskey.RestrictionsAttributes](ak.ref.Append("restrictions"))
}

func (ak apikeysKeyAttributes) Timeouts() apikeyskey.TimeoutsAttributes {
	return terra.ReferenceSingle[apikeyskey.TimeoutsAttributes](ak.ref.Append("timeouts"))
}

type apikeysKeyState struct {
	DisplayName  string                         `json:"display_name"`
	Id           string                         `json:"id"`
	KeyString    string                         `json:"key_string"`
	Name         string                         `json:"name"`
	Project      string                         `json:"project"`
	Uid          string                         `json:"uid"`
	Restrictions []apikeyskey.RestrictionsState `json:"restrictions"`
	Timeouts     *apikeyskey.TimeoutsState      `json:"timeouts"`
}
