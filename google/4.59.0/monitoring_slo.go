// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	monitoringslo "github.com/golingon/terraproviders/google/4.59.0/monitoringslo"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitoringSlo(name string, args MonitoringSloArgs) *MonitoringSlo {
	return &MonitoringSlo{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitoringSlo)(nil)

type MonitoringSlo struct {
	Name  string
	Args  MonitoringSloArgs
	state *monitoringSloState
}

func (ms *MonitoringSlo) Type() string {
	return "google_monitoring_slo"
}

func (ms *MonitoringSlo) LocalName() string {
	return ms.Name
}

func (ms *MonitoringSlo) Configuration() interface{} {
	return ms.Args
}

func (ms *MonitoringSlo) Attributes() monitoringSloAttributes {
	return monitoringSloAttributes{ref: terra.ReferenceResource(ms)}
}

func (ms *MonitoringSlo) ImportState(av io.Reader) error {
	ms.state = &monitoringSloState{}
	if err := json.NewDecoder(av).Decode(ms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ms.Type(), ms.LocalName(), err)
	}
	return nil
}

func (ms *MonitoringSlo) State() (*monitoringSloState, bool) {
	return ms.state, ms.state != nil
}

func (ms *MonitoringSlo) StateMust() *monitoringSloState {
	if ms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ms.Type(), ms.LocalName()))
	}
	return ms.state
}

func (ms *MonitoringSlo) DependOn() terra.Reference {
	return terra.ReferenceResource(ms)
}

type MonitoringSloArgs struct {
	// CalendarPeriod: string, optional
	CalendarPeriod terra.StringValue `hcl:"calendar_period,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Goal: number, required
	Goal terra.NumberValue `hcl:"goal,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RollingPeriodDays: number, optional
	RollingPeriodDays terra.NumberValue `hcl:"rolling_period_days,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// SloId: string, optional
	SloId terra.StringValue `hcl:"slo_id,attr"`
	// UserLabels: map of string, optional
	UserLabels terra.MapValue[terra.StringValue] `hcl:"user_labels,attr"`
	// BasicSli: optional
	BasicSli *monitoringslo.BasicSli `hcl:"basic_sli,block"`
	// RequestBasedSli: optional
	RequestBasedSli *monitoringslo.RequestBasedSli `hcl:"request_based_sli,block"`
	// Timeouts: optional
	Timeouts *monitoringslo.Timeouts `hcl:"timeouts,block"`
	// WindowsBasedSli: optional
	WindowsBasedSli *monitoringslo.WindowsBasedSli `hcl:"windows_based_sli,block"`
	// DependsOn contains resources that MonitoringSlo depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitoringSloAttributes struct {
	ref terra.Reference
}

func (ms monitoringSloAttributes) CalendarPeriod() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("calendar_period"))
}

func (ms monitoringSloAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("display_name"))
}

func (ms monitoringSloAttributes) Goal() terra.NumberValue {
	return terra.ReferenceNumber(ms.ref.Append("goal"))
}

func (ms monitoringSloAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("id"))
}

func (ms monitoringSloAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("name"))
}

func (ms monitoringSloAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("project"))
}

func (ms monitoringSloAttributes) RollingPeriodDays() terra.NumberValue {
	return terra.ReferenceNumber(ms.ref.Append("rolling_period_days"))
}

func (ms monitoringSloAttributes) Service() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("service"))
}

func (ms monitoringSloAttributes) SloId() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("slo_id"))
}

func (ms monitoringSloAttributes) UserLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ms.ref.Append("user_labels"))
}

func (ms monitoringSloAttributes) BasicSli() terra.ListValue[monitoringslo.BasicSliAttributes] {
	return terra.ReferenceList[monitoringslo.BasicSliAttributes](ms.ref.Append("basic_sli"))
}

func (ms monitoringSloAttributes) RequestBasedSli() terra.ListValue[monitoringslo.RequestBasedSliAttributes] {
	return terra.ReferenceList[monitoringslo.RequestBasedSliAttributes](ms.ref.Append("request_based_sli"))
}

func (ms monitoringSloAttributes) Timeouts() monitoringslo.TimeoutsAttributes {
	return terra.ReferenceSingle[monitoringslo.TimeoutsAttributes](ms.ref.Append("timeouts"))
}

func (ms monitoringSloAttributes) WindowsBasedSli() terra.ListValue[monitoringslo.WindowsBasedSliAttributes] {
	return terra.ReferenceList[monitoringslo.WindowsBasedSliAttributes](ms.ref.Append("windows_based_sli"))
}

type monitoringSloState struct {
	CalendarPeriod    string                               `json:"calendar_period"`
	DisplayName       string                               `json:"display_name"`
	Goal              float64                              `json:"goal"`
	Id                string                               `json:"id"`
	Name              string                               `json:"name"`
	Project           string                               `json:"project"`
	RollingPeriodDays float64                              `json:"rolling_period_days"`
	Service           string                               `json:"service"`
	SloId             string                               `json:"slo_id"`
	UserLabels        map[string]string                    `json:"user_labels"`
	BasicSli          []monitoringslo.BasicSliState        `json:"basic_sli"`
	RequestBasedSli   []monitoringslo.RequestBasedSliState `json:"request_based_sli"`
	Timeouts          *monitoringslo.TimeoutsState         `json:"timeouts"`
	WindowsBasedSli   []monitoringslo.WindowsBasedSliState `json:"windows_based_sli"`
}
