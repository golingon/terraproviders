// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	endpointsserviceiambinding "github.com/golingon/terraproviders/google/4.59.0/endpointsserviceiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEndpointsServiceIamBinding(name string, args EndpointsServiceIamBindingArgs) *EndpointsServiceIamBinding {
	return &EndpointsServiceIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EndpointsServiceIamBinding)(nil)

type EndpointsServiceIamBinding struct {
	Name  string
	Args  EndpointsServiceIamBindingArgs
	state *endpointsServiceIamBindingState
}

func (esib *EndpointsServiceIamBinding) Type() string {
	return "google_endpoints_service_iam_binding"
}

func (esib *EndpointsServiceIamBinding) LocalName() string {
	return esib.Name
}

func (esib *EndpointsServiceIamBinding) Configuration() interface{} {
	return esib.Args
}

func (esib *EndpointsServiceIamBinding) Attributes() endpointsServiceIamBindingAttributes {
	return endpointsServiceIamBindingAttributes{ref: terra.ReferenceResource(esib)}
}

func (esib *EndpointsServiceIamBinding) ImportState(av io.Reader) error {
	esib.state = &endpointsServiceIamBindingState{}
	if err := json.NewDecoder(av).Decode(esib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", esib.Type(), esib.LocalName(), err)
	}
	return nil
}

func (esib *EndpointsServiceIamBinding) State() (*endpointsServiceIamBindingState, bool) {
	return esib.state, esib.state != nil
}

func (esib *EndpointsServiceIamBinding) StateMust() *endpointsServiceIamBindingState {
	if esib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", esib.Type(), esib.LocalName()))
	}
	return esib.state
}

func (esib *EndpointsServiceIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(esib)
}

type EndpointsServiceIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
	// Condition: optional
	Condition *endpointsserviceiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that EndpointsServiceIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type endpointsServiceIamBindingAttributes struct {
	ref terra.Reference
}

func (esib endpointsServiceIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(esib.ref.Append("etag"))
}

func (esib endpointsServiceIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(esib.ref.Append("id"))
}

func (esib endpointsServiceIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](esib.ref.Append("members"))
}

func (esib endpointsServiceIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(esib.ref.Append("role"))
}

func (esib endpointsServiceIamBindingAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceString(esib.ref.Append("service_name"))
}

func (esib endpointsServiceIamBindingAttributes) Condition() terra.ListValue[endpointsserviceiambinding.ConditionAttributes] {
	return terra.ReferenceList[endpointsserviceiambinding.ConditionAttributes](esib.ref.Append("condition"))
}

type endpointsServiceIamBindingState struct {
	Etag        string                                      `json:"etag"`
	Id          string                                      `json:"id"`
	Members     []string                                    `json:"members"`
	Role        string                                      `json:"role"`
	ServiceName string                                      `json:"service_name"`
	Condition   []endpointsserviceiambinding.ConditionState `json:"condition"`
}
