// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computesharedvpcserviceproject "github.com/golingon/terraproviders/google/4.59.0/computesharedvpcserviceproject"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeSharedVpcServiceProject(name string, args ComputeSharedVpcServiceProjectArgs) *ComputeSharedVpcServiceProject {
	return &ComputeSharedVpcServiceProject{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeSharedVpcServiceProject)(nil)

type ComputeSharedVpcServiceProject struct {
	Name  string
	Args  ComputeSharedVpcServiceProjectArgs
	state *computeSharedVpcServiceProjectState
}

func (csvsp *ComputeSharedVpcServiceProject) Type() string {
	return "google_compute_shared_vpc_service_project"
}

func (csvsp *ComputeSharedVpcServiceProject) LocalName() string {
	return csvsp.Name
}

func (csvsp *ComputeSharedVpcServiceProject) Configuration() interface{} {
	return csvsp.Args
}

func (csvsp *ComputeSharedVpcServiceProject) Attributes() computeSharedVpcServiceProjectAttributes {
	return computeSharedVpcServiceProjectAttributes{ref: terra.ReferenceResource(csvsp)}
}

func (csvsp *ComputeSharedVpcServiceProject) ImportState(av io.Reader) error {
	csvsp.state = &computeSharedVpcServiceProjectState{}
	if err := json.NewDecoder(av).Decode(csvsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csvsp.Type(), csvsp.LocalName(), err)
	}
	return nil
}

func (csvsp *ComputeSharedVpcServiceProject) State() (*computeSharedVpcServiceProjectState, bool) {
	return csvsp.state, csvsp.state != nil
}

func (csvsp *ComputeSharedVpcServiceProject) StateMust() *computeSharedVpcServiceProjectState {
	if csvsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csvsp.Type(), csvsp.LocalName()))
	}
	return csvsp.state
}

func (csvsp *ComputeSharedVpcServiceProject) DependOn() terra.Reference {
	return terra.ReferenceResource(csvsp)
}

type ComputeSharedVpcServiceProjectArgs struct {
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// HostProject: string, required
	HostProject terra.StringValue `hcl:"host_project,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServiceProject: string, required
	ServiceProject terra.StringValue `hcl:"service_project,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *computesharedvpcserviceproject.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeSharedVpcServiceProject depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeSharedVpcServiceProjectAttributes struct {
	ref terra.Reference
}

func (csvsp computeSharedVpcServiceProjectAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceString(csvsp.ref.Append("deletion_policy"))
}

func (csvsp computeSharedVpcServiceProjectAttributes) HostProject() terra.StringValue {
	return terra.ReferenceString(csvsp.ref.Append("host_project"))
}

func (csvsp computeSharedVpcServiceProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceString(csvsp.ref.Append("id"))
}

func (csvsp computeSharedVpcServiceProjectAttributes) ServiceProject() terra.StringValue {
	return terra.ReferenceString(csvsp.ref.Append("service_project"))
}

func (csvsp computeSharedVpcServiceProjectAttributes) Timeouts() computesharedvpcserviceproject.TimeoutsAttributes {
	return terra.ReferenceSingle[computesharedvpcserviceproject.TimeoutsAttributes](csvsp.ref.Append("timeouts"))
}

type computeSharedVpcServiceProjectState struct {
	DeletionPolicy string                                        `json:"deletion_policy"`
	HostProject    string                                        `json:"host_project"`
	Id             string                                        `json:"id"`
	ServiceProject string                                        `json:"service_project"`
	Timeouts       *computesharedvpcserviceproject.TimeoutsState `json:"timeouts"`
}
