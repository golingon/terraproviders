// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	sourcereporepositoryiammember "github.com/golingon/terraproviders/google/4.59.0/sourcereporepositoryiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSourcerepoRepositoryIamMember(name string, args SourcerepoRepositoryIamMemberArgs) *SourcerepoRepositoryIamMember {
	return &SourcerepoRepositoryIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SourcerepoRepositoryIamMember)(nil)

type SourcerepoRepositoryIamMember struct {
	Name  string
	Args  SourcerepoRepositoryIamMemberArgs
	state *sourcerepoRepositoryIamMemberState
}

func (srim *SourcerepoRepositoryIamMember) Type() string {
	return "google_sourcerepo_repository_iam_member"
}

func (srim *SourcerepoRepositoryIamMember) LocalName() string {
	return srim.Name
}

func (srim *SourcerepoRepositoryIamMember) Configuration() interface{} {
	return srim.Args
}

func (srim *SourcerepoRepositoryIamMember) Attributes() sourcerepoRepositoryIamMemberAttributes {
	return sourcerepoRepositoryIamMemberAttributes{ref: terra.ReferenceResource(srim)}
}

func (srim *SourcerepoRepositoryIamMember) ImportState(av io.Reader) error {
	srim.state = &sourcerepoRepositoryIamMemberState{}
	if err := json.NewDecoder(av).Decode(srim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", srim.Type(), srim.LocalName(), err)
	}
	return nil
}

func (srim *SourcerepoRepositoryIamMember) State() (*sourcerepoRepositoryIamMemberState, bool) {
	return srim.state, srim.state != nil
}

func (srim *SourcerepoRepositoryIamMember) StateMust() *sourcerepoRepositoryIamMemberState {
	if srim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", srim.Type(), srim.LocalName()))
	}
	return srim.state
}

func (srim *SourcerepoRepositoryIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(srim)
}

type SourcerepoRepositoryIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *sourcereporepositoryiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that SourcerepoRepositoryIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sourcerepoRepositoryIamMemberAttributes struct {
	ref terra.Reference
}

func (srim sourcerepoRepositoryIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(srim.ref.Append("etag"))
}

func (srim sourcerepoRepositoryIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(srim.ref.Append("id"))
}

func (srim sourcerepoRepositoryIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(srim.ref.Append("member"))
}

func (srim sourcerepoRepositoryIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(srim.ref.Append("project"))
}

func (srim sourcerepoRepositoryIamMemberAttributes) Repository() terra.StringValue {
	return terra.ReferenceString(srim.ref.Append("repository"))
}

func (srim sourcerepoRepositoryIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(srim.ref.Append("role"))
}

func (srim sourcerepoRepositoryIamMemberAttributes) Condition() terra.ListValue[sourcereporepositoryiammember.ConditionAttributes] {
	return terra.ReferenceList[sourcereporepositoryiammember.ConditionAttributes](srim.ref.Append("condition"))
}

type sourcerepoRepositoryIamMemberState struct {
	Etag       string                                         `json:"etag"`
	Id         string                                         `json:"id"`
	Member     string                                         `json:"member"`
	Project    string                                         `json:"project"`
	Repository string                                         `json:"repository"`
	Role       string                                         `json:"role"`
	Condition  []sourcereporepositoryiammember.ConditionState `json:"condition"`
}
