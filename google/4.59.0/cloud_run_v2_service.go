// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	cloudrunv2service "github.com/golingon/terraproviders/google/4.59.0/cloudrunv2service"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudRunV2Service(name string, args CloudRunV2ServiceArgs) *CloudRunV2Service {
	return &CloudRunV2Service{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudRunV2Service)(nil)

type CloudRunV2Service struct {
	Name  string
	Args  CloudRunV2ServiceArgs
	state *cloudRunV2ServiceState
}

func (crvs *CloudRunV2Service) Type() string {
	return "google_cloud_run_v2_service"
}

func (crvs *CloudRunV2Service) LocalName() string {
	return crvs.Name
}

func (crvs *CloudRunV2Service) Configuration() interface{} {
	return crvs.Args
}

func (crvs *CloudRunV2Service) Attributes() cloudRunV2ServiceAttributes {
	return cloudRunV2ServiceAttributes{ref: terra.ReferenceResource(crvs)}
}

func (crvs *CloudRunV2Service) ImportState(av io.Reader) error {
	crvs.state = &cloudRunV2ServiceState{}
	if err := json.NewDecoder(av).Decode(crvs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crvs.Type(), crvs.LocalName(), err)
	}
	return nil
}

func (crvs *CloudRunV2Service) State() (*cloudRunV2ServiceState, bool) {
	return crvs.state, crvs.state != nil
}

func (crvs *CloudRunV2Service) StateMust() *cloudRunV2ServiceState {
	if crvs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crvs.Type(), crvs.LocalName()))
	}
	return crvs.state
}

func (crvs *CloudRunV2Service) DependOn() terra.Reference {
	return terra.ReferenceResource(crvs)
}

type CloudRunV2ServiceArgs struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// Client: string, optional
	Client terra.StringValue `hcl:"client,attr"`
	// ClientVersion: string, optional
	ClientVersion terra.StringValue `hcl:"client_version,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Ingress: string, optional
	Ingress terra.StringValue `hcl:"ingress,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LaunchStage: string, optional
	LaunchStage terra.StringValue `hcl:"launch_stage,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Conditions: min=0
	Conditions []cloudrunv2service.Conditions `hcl:"conditions,block" validate:"min=0"`
	// TerminalCondition: min=0
	TerminalCondition []cloudrunv2service.TerminalCondition `hcl:"terminal_condition,block" validate:"min=0"`
	// TrafficStatuses: min=0
	TrafficStatuses []cloudrunv2service.TrafficStatuses `hcl:"traffic_statuses,block" validate:"min=0"`
	// BinaryAuthorization: optional
	BinaryAuthorization *cloudrunv2service.BinaryAuthorization `hcl:"binary_authorization,block"`
	// Template: required
	Template *cloudrunv2service.Template `hcl:"template,block" validate:"required"`
	// Timeouts: optional
	Timeouts *cloudrunv2service.Timeouts `hcl:"timeouts,block"`
	// Traffic: min=0
	Traffic []cloudrunv2service.Traffic `hcl:"traffic,block" validate:"min=0"`
	// DependsOn contains resources that CloudRunV2Service depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudRunV2ServiceAttributes struct {
	ref terra.Reference
}

func (crvs cloudRunV2ServiceAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](crvs.ref.Append("annotations"))
}

func (crvs cloudRunV2ServiceAttributes) Client() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("client"))
}

func (crvs cloudRunV2ServiceAttributes) ClientVersion() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("client_version"))
}

func (crvs cloudRunV2ServiceAttributes) Description() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("description"))
}

func (crvs cloudRunV2ServiceAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("etag"))
}

func (crvs cloudRunV2ServiceAttributes) Generation() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("generation"))
}

func (crvs cloudRunV2ServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("id"))
}

func (crvs cloudRunV2ServiceAttributes) Ingress() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("ingress"))
}

func (crvs cloudRunV2ServiceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](crvs.ref.Append("labels"))
}

func (crvs cloudRunV2ServiceAttributes) LatestCreatedRevision() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("latest_created_revision"))
}

func (crvs cloudRunV2ServiceAttributes) LatestReadyRevision() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("latest_ready_revision"))
}

func (crvs cloudRunV2ServiceAttributes) LaunchStage() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("launch_stage"))
}

func (crvs cloudRunV2ServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("location"))
}

func (crvs cloudRunV2ServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("name"))
}

func (crvs cloudRunV2ServiceAttributes) ObservedGeneration() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("observed_generation"))
}

func (crvs cloudRunV2ServiceAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("project"))
}

func (crvs cloudRunV2ServiceAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceBool(crvs.ref.Append("reconciling"))
}

func (crvs cloudRunV2ServiceAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("uid"))
}

func (crvs cloudRunV2ServiceAttributes) Uri() terra.StringValue {
	return terra.ReferenceString(crvs.ref.Append("uri"))
}

func (crvs cloudRunV2ServiceAttributes) Conditions() terra.ListValue[cloudrunv2service.ConditionsAttributes] {
	return terra.ReferenceList[cloudrunv2service.ConditionsAttributes](crvs.ref.Append("conditions"))
}

func (crvs cloudRunV2ServiceAttributes) TerminalCondition() terra.ListValue[cloudrunv2service.TerminalConditionAttributes] {
	return terra.ReferenceList[cloudrunv2service.TerminalConditionAttributes](crvs.ref.Append("terminal_condition"))
}

func (crvs cloudRunV2ServiceAttributes) TrafficStatuses() terra.ListValue[cloudrunv2service.TrafficStatusesAttributes] {
	return terra.ReferenceList[cloudrunv2service.TrafficStatusesAttributes](crvs.ref.Append("traffic_statuses"))
}

func (crvs cloudRunV2ServiceAttributes) BinaryAuthorization() terra.ListValue[cloudrunv2service.BinaryAuthorizationAttributes] {
	return terra.ReferenceList[cloudrunv2service.BinaryAuthorizationAttributes](crvs.ref.Append("binary_authorization"))
}

func (crvs cloudRunV2ServiceAttributes) Template() terra.ListValue[cloudrunv2service.TemplateAttributes] {
	return terra.ReferenceList[cloudrunv2service.TemplateAttributes](crvs.ref.Append("template"))
}

func (crvs cloudRunV2ServiceAttributes) Timeouts() cloudrunv2service.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudrunv2service.TimeoutsAttributes](crvs.ref.Append("timeouts"))
}

func (crvs cloudRunV2ServiceAttributes) Traffic() terra.ListValue[cloudrunv2service.TrafficAttributes] {
	return terra.ReferenceList[cloudrunv2service.TrafficAttributes](crvs.ref.Append("traffic"))
}

type cloudRunV2ServiceState struct {
	Annotations           map[string]string                            `json:"annotations"`
	Client                string                                       `json:"client"`
	ClientVersion         string                                       `json:"client_version"`
	Description           string                                       `json:"description"`
	Etag                  string                                       `json:"etag"`
	Generation            string                                       `json:"generation"`
	Id                    string                                       `json:"id"`
	Ingress               string                                       `json:"ingress"`
	Labels                map[string]string                            `json:"labels"`
	LatestCreatedRevision string                                       `json:"latest_created_revision"`
	LatestReadyRevision   string                                       `json:"latest_ready_revision"`
	LaunchStage           string                                       `json:"launch_stage"`
	Location              string                                       `json:"location"`
	Name                  string                                       `json:"name"`
	ObservedGeneration    string                                       `json:"observed_generation"`
	Project               string                                       `json:"project"`
	Reconciling           bool                                         `json:"reconciling"`
	Uid                   string                                       `json:"uid"`
	Uri                   string                                       `json:"uri"`
	Conditions            []cloudrunv2service.ConditionsState          `json:"conditions"`
	TerminalCondition     []cloudrunv2service.TerminalConditionState   `json:"terminal_condition"`
	TrafficStatuses       []cloudrunv2service.TrafficStatusesState     `json:"traffic_statuses"`
	BinaryAuthorization   []cloudrunv2service.BinaryAuthorizationState `json:"binary_authorization"`
	Template              []cloudrunv2service.TemplateState            `json:"template"`
	Timeouts              *cloudrunv2service.TimeoutsState             `json:"timeouts"`
	Traffic               []cloudrunv2service.TrafficState             `json:"traffic"`
}
