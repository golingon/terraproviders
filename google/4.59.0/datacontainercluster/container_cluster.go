// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datacontainercluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AddonsConfig struct {
	// CloudrunConfig: min=0
	CloudrunConfig []CloudrunConfig `hcl:"cloudrun_config,block" validate:"min=0"`
	// ConfigConnectorConfig: min=0
	ConfigConnectorConfig []ConfigConnectorConfig `hcl:"config_connector_config,block" validate:"min=0"`
	// DnsCacheConfig: min=0
	DnsCacheConfig []DnsCacheConfig `hcl:"dns_cache_config,block" validate:"min=0"`
	// GcePersistentDiskCsiDriverConfig: min=0
	GcePersistentDiskCsiDriverConfig []GcePersistentDiskCsiDriverConfig `hcl:"gce_persistent_disk_csi_driver_config,block" validate:"min=0"`
	// GcpFilestoreCsiDriverConfig: min=0
	GcpFilestoreCsiDriverConfig []GcpFilestoreCsiDriverConfig `hcl:"gcp_filestore_csi_driver_config,block" validate:"min=0"`
	// GkeBackupAgentConfig: min=0
	GkeBackupAgentConfig []GkeBackupAgentConfig `hcl:"gke_backup_agent_config,block" validate:"min=0"`
	// HorizontalPodAutoscaling: min=0
	HorizontalPodAutoscaling []HorizontalPodAutoscaling `hcl:"horizontal_pod_autoscaling,block" validate:"min=0"`
	// HttpLoadBalancing: min=0
	HttpLoadBalancing []HttpLoadBalancing `hcl:"http_load_balancing,block" validate:"min=0"`
	// NetworkPolicyConfig: min=0
	NetworkPolicyConfig []NetworkPolicyConfig `hcl:"network_policy_config,block" validate:"min=0"`
}

type CloudrunConfig struct{}

type ConfigConnectorConfig struct{}

type DnsCacheConfig struct{}

type GcePersistentDiskCsiDriverConfig struct{}

type GcpFilestoreCsiDriverConfig struct{}

type GkeBackupAgentConfig struct{}

type HorizontalPodAutoscaling struct{}

type HttpLoadBalancing struct{}

type NetworkPolicyConfig struct{}

type AuthenticatorGroupsConfig struct{}

type BinaryAuthorization struct{}

type ClusterAutoscaling struct {
	// AutoProvisioningDefaults: min=0
	AutoProvisioningDefaults []AutoProvisioningDefaults `hcl:"auto_provisioning_defaults,block" validate:"min=0"`
	// ResourceLimits: min=0
	ResourceLimits []ResourceLimits `hcl:"resource_limits,block" validate:"min=0"`
}

type AutoProvisioningDefaults struct {
	// AutoProvisioningDefaultsManagement: min=0
	Management []AutoProvisioningDefaultsManagement `hcl:"management,block" validate:"min=0"`
	// AutoProvisioningDefaultsShieldedInstanceConfig: min=0
	ShieldedInstanceConfig []AutoProvisioningDefaultsShieldedInstanceConfig `hcl:"shielded_instance_config,block" validate:"min=0"`
	// AutoProvisioningDefaultsUpgradeSettings: min=0
	UpgradeSettings []AutoProvisioningDefaultsUpgradeSettings `hcl:"upgrade_settings,block" validate:"min=0"`
}

type AutoProvisioningDefaultsManagement struct {
	// UpgradeOptions: min=0
	UpgradeOptions []UpgradeOptions `hcl:"upgrade_options,block" validate:"min=0"`
}

type UpgradeOptions struct{}

type AutoProvisioningDefaultsShieldedInstanceConfig struct{}

type AutoProvisioningDefaultsUpgradeSettings struct {
	// AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings: min=0
	BlueGreenSettings []AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings `hcl:"blue_green_settings,block" validate:"min=0"`
}

type AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings struct {
	// AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy: min=0
	StandardRolloutPolicy []AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy `hcl:"standard_rollout_policy,block" validate:"min=0"`
}

type AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy struct{}

type ResourceLimits struct{}

type ConfidentialNodes struct{}

type CostManagementConfig struct{}

type DatabaseEncryption struct{}

type DefaultSnatStatus struct{}

type DnsConfig struct{}

type GatewayApiConfig struct{}

type IpAllocationPolicy struct{}

type LoggingConfig struct{}

type MaintenancePolicy struct {
	// DailyMaintenanceWindow: min=0
	DailyMaintenanceWindow []DailyMaintenanceWindow `hcl:"daily_maintenance_window,block" validate:"min=0"`
	// MaintenanceExclusion: min=0
	MaintenanceExclusion []MaintenanceExclusion `hcl:"maintenance_exclusion,block" validate:"min=0"`
	// RecurringWindow: min=0
	RecurringWindow []RecurringWindow `hcl:"recurring_window,block" validate:"min=0"`
}

type DailyMaintenanceWindow struct{}

type MaintenanceExclusion struct {
	// ExclusionOptions: min=0
	ExclusionOptions []ExclusionOptions `hcl:"exclusion_options,block" validate:"min=0"`
}

type ExclusionOptions struct{}

type RecurringWindow struct{}

type MasterAuth struct {
	// ClientCertificateConfig: min=0
	ClientCertificateConfig []ClientCertificateConfig `hcl:"client_certificate_config,block" validate:"min=0"`
}

type ClientCertificateConfig struct{}

type MasterAuthorizedNetworksConfig struct {
	// CidrBlocks: min=0
	CidrBlocks []CidrBlocks `hcl:"cidr_blocks,block" validate:"min=0"`
}

type CidrBlocks struct{}

type MeshCertificates struct{}

type MonitoringConfig struct {
	// ManagedPrometheus: min=0
	ManagedPrometheus []ManagedPrometheus `hcl:"managed_prometheus,block" validate:"min=0"`
}

type ManagedPrometheus struct{}

type NetworkPolicy struct{}

type NodeConfig struct {
	// NodeConfigGcfsConfig: min=0
	GcfsConfig []NodeConfigGcfsConfig `hcl:"gcfs_config,block" validate:"min=0"`
	// NodeConfigGuestAccelerator: min=0
	GuestAccelerator []NodeConfigGuestAccelerator `hcl:"guest_accelerator,block" validate:"min=0"`
	// NodeConfigGvnic: min=0
	Gvnic []NodeConfigGvnic `hcl:"gvnic,block" validate:"min=0"`
	// NodeConfigKubeletConfig: min=0
	KubeletConfig []NodeConfigKubeletConfig `hcl:"kubelet_config,block" validate:"min=0"`
	// NodeConfigLinuxNodeConfig: min=0
	LinuxNodeConfig []NodeConfigLinuxNodeConfig `hcl:"linux_node_config,block" validate:"min=0"`
	// NodeConfigLocalNvmeSsdBlockConfig: min=0
	LocalNvmeSsdBlockConfig []NodeConfigLocalNvmeSsdBlockConfig `hcl:"local_nvme_ssd_block_config,block" validate:"min=0"`
	// NodeConfigReservationAffinity: min=0
	ReservationAffinity []NodeConfigReservationAffinity `hcl:"reservation_affinity,block" validate:"min=0"`
	// NodeConfigShieldedInstanceConfig: min=0
	ShieldedInstanceConfig []NodeConfigShieldedInstanceConfig `hcl:"shielded_instance_config,block" validate:"min=0"`
	// NodeConfigTaint: min=0
	Taint []NodeConfigTaint `hcl:"taint,block" validate:"min=0"`
	// NodeConfigWorkloadMetadataConfig: min=0
	WorkloadMetadataConfig []NodeConfigWorkloadMetadataConfig `hcl:"workload_metadata_config,block" validate:"min=0"`
}

type NodeConfigGcfsConfig struct{}

type NodeConfigGuestAccelerator struct {
	// NodeConfigGuestAcceleratorGpuSharingConfig: min=0
	GpuSharingConfig []NodeConfigGuestAcceleratorGpuSharingConfig `hcl:"gpu_sharing_config,block" validate:"min=0"`
}

type NodeConfigGuestAcceleratorGpuSharingConfig struct{}

type NodeConfigGvnic struct{}

type NodeConfigKubeletConfig struct{}

type NodeConfigLinuxNodeConfig struct{}

type NodeConfigLocalNvmeSsdBlockConfig struct{}

type NodeConfigReservationAffinity struct{}

type NodeConfigShieldedInstanceConfig struct{}

type NodeConfigTaint struct{}

type NodeConfigWorkloadMetadataConfig struct{}

type NodePool struct {
	// Autoscaling: min=0
	Autoscaling []Autoscaling `hcl:"autoscaling,block" validate:"min=0"`
	// NodePoolManagement: min=0
	Management []NodePoolManagement `hcl:"management,block" validate:"min=0"`
	// NetworkConfig: min=0
	NetworkConfig []NetworkConfig `hcl:"network_config,block" validate:"min=0"`
	// NodePoolNodeConfig: min=0
	NodeConfig []NodePoolNodeConfig `hcl:"node_config,block" validate:"min=0"`
	// PlacementPolicy: min=0
	PlacementPolicy []PlacementPolicy `hcl:"placement_policy,block" validate:"min=0"`
	// NodePoolUpgradeSettings: min=0
	UpgradeSettings []NodePoolUpgradeSettings `hcl:"upgrade_settings,block" validate:"min=0"`
}

type Autoscaling struct{}

type NodePoolManagement struct{}

type NetworkConfig struct{}

type NodePoolNodeConfig struct {
	// NodePoolNodeConfigGcfsConfig: min=0
	GcfsConfig []NodePoolNodeConfigGcfsConfig `hcl:"gcfs_config,block" validate:"min=0"`
	// NodePoolNodeConfigGuestAccelerator: min=0
	GuestAccelerator []NodePoolNodeConfigGuestAccelerator `hcl:"guest_accelerator,block" validate:"min=0"`
	// NodePoolNodeConfigGvnic: min=0
	Gvnic []NodePoolNodeConfigGvnic `hcl:"gvnic,block" validate:"min=0"`
	// NodePoolNodeConfigKubeletConfig: min=0
	KubeletConfig []NodePoolNodeConfigKubeletConfig `hcl:"kubelet_config,block" validate:"min=0"`
	// NodePoolNodeConfigLinuxNodeConfig: min=0
	LinuxNodeConfig []NodePoolNodeConfigLinuxNodeConfig `hcl:"linux_node_config,block" validate:"min=0"`
	// NodePoolNodeConfigLocalNvmeSsdBlockConfig: min=0
	LocalNvmeSsdBlockConfig []NodePoolNodeConfigLocalNvmeSsdBlockConfig `hcl:"local_nvme_ssd_block_config,block" validate:"min=0"`
	// NodePoolNodeConfigReservationAffinity: min=0
	ReservationAffinity []NodePoolNodeConfigReservationAffinity `hcl:"reservation_affinity,block" validate:"min=0"`
	// NodePoolNodeConfigShieldedInstanceConfig: min=0
	ShieldedInstanceConfig []NodePoolNodeConfigShieldedInstanceConfig `hcl:"shielded_instance_config,block" validate:"min=0"`
	// NodePoolNodeConfigTaint: min=0
	Taint []NodePoolNodeConfigTaint `hcl:"taint,block" validate:"min=0"`
	// NodePoolNodeConfigWorkloadMetadataConfig: min=0
	WorkloadMetadataConfig []NodePoolNodeConfigWorkloadMetadataConfig `hcl:"workload_metadata_config,block" validate:"min=0"`
}

type NodePoolNodeConfigGcfsConfig struct{}

type NodePoolNodeConfigGuestAccelerator struct {
	// NodePoolNodeConfigGuestAcceleratorGpuSharingConfig: min=0
	GpuSharingConfig []NodePoolNodeConfigGuestAcceleratorGpuSharingConfig `hcl:"gpu_sharing_config,block" validate:"min=0"`
}

type NodePoolNodeConfigGuestAcceleratorGpuSharingConfig struct{}

type NodePoolNodeConfigGvnic struct{}

type NodePoolNodeConfigKubeletConfig struct{}

type NodePoolNodeConfigLinuxNodeConfig struct{}

type NodePoolNodeConfigLocalNvmeSsdBlockConfig struct{}

type NodePoolNodeConfigReservationAffinity struct{}

type NodePoolNodeConfigShieldedInstanceConfig struct{}

type NodePoolNodeConfigTaint struct{}

type NodePoolNodeConfigWorkloadMetadataConfig struct{}

type PlacementPolicy struct{}

type NodePoolUpgradeSettings struct {
	// NodePoolUpgradeSettingsBlueGreenSettings: min=0
	BlueGreenSettings []NodePoolUpgradeSettingsBlueGreenSettings `hcl:"blue_green_settings,block" validate:"min=0"`
}

type NodePoolUpgradeSettingsBlueGreenSettings struct {
	// NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy: min=0
	StandardRolloutPolicy []NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy `hcl:"standard_rollout_policy,block" validate:"min=0"`
}

type NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy struct{}

type NodePoolDefaults struct {
	// NodeConfigDefaults: min=0
	NodeConfigDefaults []NodeConfigDefaults `hcl:"node_config_defaults,block" validate:"min=0"`
}

type NodeConfigDefaults struct{}

type NotificationConfig struct {
	// Pubsub: min=0
	Pubsub []Pubsub `hcl:"pubsub,block" validate:"min=0"`
}

type Pubsub struct {
	// Filter: min=0
	Filter []Filter `hcl:"filter,block" validate:"min=0"`
}

type Filter struct{}

type PrivateClusterConfig struct {
	// MasterGlobalAccessConfig: min=0
	MasterGlobalAccessConfig []MasterGlobalAccessConfig `hcl:"master_global_access_config,block" validate:"min=0"`
}

type MasterGlobalAccessConfig struct{}

type ReleaseChannel struct{}

type ResourceUsageExportConfig struct {
	// BigqueryDestination: min=0
	BigqueryDestination []BigqueryDestination `hcl:"bigquery_destination,block" validate:"min=0"`
}

type BigqueryDestination struct{}

type ServiceExternalIpsConfig struct{}

type VerticalPodAutoscaling struct{}

type WorkloadIdentityConfig struct{}

type AddonsConfigAttributes struct {
	ref terra.Reference
}

func (ac AddonsConfigAttributes) InternalRef() terra.Reference {
	return ac.ref
}

func (ac AddonsConfigAttributes) InternalWithRef(ref terra.Reference) AddonsConfigAttributes {
	return AddonsConfigAttributes{ref: ref}
}

func (ac AddonsConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ac.ref.InternalTokens()
}

func (ac AddonsConfigAttributes) CloudrunConfig() terra.ListValue[CloudrunConfigAttributes] {
	return terra.ReferenceList[CloudrunConfigAttributes](ac.ref.Append("cloudrun_config"))
}

func (ac AddonsConfigAttributes) ConfigConnectorConfig() terra.ListValue[ConfigConnectorConfigAttributes] {
	return terra.ReferenceList[ConfigConnectorConfigAttributes](ac.ref.Append("config_connector_config"))
}

func (ac AddonsConfigAttributes) DnsCacheConfig() terra.ListValue[DnsCacheConfigAttributes] {
	return terra.ReferenceList[DnsCacheConfigAttributes](ac.ref.Append("dns_cache_config"))
}

func (ac AddonsConfigAttributes) GcePersistentDiskCsiDriverConfig() terra.ListValue[GcePersistentDiskCsiDriverConfigAttributes] {
	return terra.ReferenceList[GcePersistentDiskCsiDriverConfigAttributes](ac.ref.Append("gce_persistent_disk_csi_driver_config"))
}

func (ac AddonsConfigAttributes) GcpFilestoreCsiDriverConfig() terra.ListValue[GcpFilestoreCsiDriverConfigAttributes] {
	return terra.ReferenceList[GcpFilestoreCsiDriverConfigAttributes](ac.ref.Append("gcp_filestore_csi_driver_config"))
}

func (ac AddonsConfigAttributes) GkeBackupAgentConfig() terra.ListValue[GkeBackupAgentConfigAttributes] {
	return terra.ReferenceList[GkeBackupAgentConfigAttributes](ac.ref.Append("gke_backup_agent_config"))
}

func (ac AddonsConfigAttributes) HorizontalPodAutoscaling() terra.ListValue[HorizontalPodAutoscalingAttributes] {
	return terra.ReferenceList[HorizontalPodAutoscalingAttributes](ac.ref.Append("horizontal_pod_autoscaling"))
}

func (ac AddonsConfigAttributes) HttpLoadBalancing() terra.ListValue[HttpLoadBalancingAttributes] {
	return terra.ReferenceList[HttpLoadBalancingAttributes](ac.ref.Append("http_load_balancing"))
}

func (ac AddonsConfigAttributes) NetworkPolicyConfig() terra.ListValue[NetworkPolicyConfigAttributes] {
	return terra.ReferenceList[NetworkPolicyConfigAttributes](ac.ref.Append("network_policy_config"))
}

type CloudrunConfigAttributes struct {
	ref terra.Reference
}

func (cc CloudrunConfigAttributes) InternalRef() terra.Reference {
	return cc.ref
}

func (cc CloudrunConfigAttributes) InternalWithRef(ref terra.Reference) CloudrunConfigAttributes {
	return CloudrunConfigAttributes{ref: ref}
}

func (cc CloudrunConfigAttributes) InternalTokens() hclwrite.Tokens {
	return cc.ref.InternalTokens()
}

func (cc CloudrunConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(cc.ref.Append("disabled"))
}

func (cc CloudrunConfigAttributes) LoadBalancerType() terra.StringValue {
	return terra.ReferenceString(cc.ref.Append("load_balancer_type"))
}

type ConfigConnectorConfigAttributes struct {
	ref terra.Reference
}

func (ccc ConfigConnectorConfigAttributes) InternalRef() terra.Reference {
	return ccc.ref
}

func (ccc ConfigConnectorConfigAttributes) InternalWithRef(ref terra.Reference) ConfigConnectorConfigAttributes {
	return ConfigConnectorConfigAttributes{ref: ref}
}

func (ccc ConfigConnectorConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ccc.ref.InternalTokens()
}

func (ccc ConfigConnectorConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(ccc.ref.Append("enabled"))
}

type DnsCacheConfigAttributes struct {
	ref terra.Reference
}

func (dcc DnsCacheConfigAttributes) InternalRef() terra.Reference {
	return dcc.ref
}

func (dcc DnsCacheConfigAttributes) InternalWithRef(ref terra.Reference) DnsCacheConfigAttributes {
	return DnsCacheConfigAttributes{ref: ref}
}

func (dcc DnsCacheConfigAttributes) InternalTokens() hclwrite.Tokens {
	return dcc.ref.InternalTokens()
}

func (dcc DnsCacheConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(dcc.ref.Append("enabled"))
}

type GcePersistentDiskCsiDriverConfigAttributes struct {
	ref terra.Reference
}

func (gpdcdc GcePersistentDiskCsiDriverConfigAttributes) InternalRef() terra.Reference {
	return gpdcdc.ref
}

func (gpdcdc GcePersistentDiskCsiDriverConfigAttributes) InternalWithRef(ref terra.Reference) GcePersistentDiskCsiDriverConfigAttributes {
	return GcePersistentDiskCsiDriverConfigAttributes{ref: ref}
}

func (gpdcdc GcePersistentDiskCsiDriverConfigAttributes) InternalTokens() hclwrite.Tokens {
	return gpdcdc.ref.InternalTokens()
}

func (gpdcdc GcePersistentDiskCsiDriverConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(gpdcdc.ref.Append("enabled"))
}

type GcpFilestoreCsiDriverConfigAttributes struct {
	ref terra.Reference
}

func (gfcdc GcpFilestoreCsiDriverConfigAttributes) InternalRef() terra.Reference {
	return gfcdc.ref
}

func (gfcdc GcpFilestoreCsiDriverConfigAttributes) InternalWithRef(ref terra.Reference) GcpFilestoreCsiDriverConfigAttributes {
	return GcpFilestoreCsiDriverConfigAttributes{ref: ref}
}

func (gfcdc GcpFilestoreCsiDriverConfigAttributes) InternalTokens() hclwrite.Tokens {
	return gfcdc.ref.InternalTokens()
}

func (gfcdc GcpFilestoreCsiDriverConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(gfcdc.ref.Append("enabled"))
}

type GkeBackupAgentConfigAttributes struct {
	ref terra.Reference
}

func (gbac GkeBackupAgentConfigAttributes) InternalRef() terra.Reference {
	return gbac.ref
}

func (gbac GkeBackupAgentConfigAttributes) InternalWithRef(ref terra.Reference) GkeBackupAgentConfigAttributes {
	return GkeBackupAgentConfigAttributes{ref: ref}
}

func (gbac GkeBackupAgentConfigAttributes) InternalTokens() hclwrite.Tokens {
	return gbac.ref.InternalTokens()
}

func (gbac GkeBackupAgentConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(gbac.ref.Append("enabled"))
}

type HorizontalPodAutoscalingAttributes struct {
	ref terra.Reference
}

func (hpa HorizontalPodAutoscalingAttributes) InternalRef() terra.Reference {
	return hpa.ref
}

func (hpa HorizontalPodAutoscalingAttributes) InternalWithRef(ref terra.Reference) HorizontalPodAutoscalingAttributes {
	return HorizontalPodAutoscalingAttributes{ref: ref}
}

func (hpa HorizontalPodAutoscalingAttributes) InternalTokens() hclwrite.Tokens {
	return hpa.ref.InternalTokens()
}

func (hpa HorizontalPodAutoscalingAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(hpa.ref.Append("disabled"))
}

type HttpLoadBalancingAttributes struct {
	ref terra.Reference
}

func (hlb HttpLoadBalancingAttributes) InternalRef() terra.Reference {
	return hlb.ref
}

func (hlb HttpLoadBalancingAttributes) InternalWithRef(ref terra.Reference) HttpLoadBalancingAttributes {
	return HttpLoadBalancingAttributes{ref: ref}
}

func (hlb HttpLoadBalancingAttributes) InternalTokens() hclwrite.Tokens {
	return hlb.ref.InternalTokens()
}

func (hlb HttpLoadBalancingAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(hlb.ref.Append("disabled"))
}

type NetworkPolicyConfigAttributes struct {
	ref terra.Reference
}

func (npc NetworkPolicyConfigAttributes) InternalRef() terra.Reference {
	return npc.ref
}

func (npc NetworkPolicyConfigAttributes) InternalWithRef(ref terra.Reference) NetworkPolicyConfigAttributes {
	return NetworkPolicyConfigAttributes{ref: ref}
}

func (npc NetworkPolicyConfigAttributes) InternalTokens() hclwrite.Tokens {
	return npc.ref.InternalTokens()
}

func (npc NetworkPolicyConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(npc.ref.Append("disabled"))
}

type AuthenticatorGroupsConfigAttributes struct {
	ref terra.Reference
}

func (agc AuthenticatorGroupsConfigAttributes) InternalRef() terra.Reference {
	return agc.ref
}

func (agc AuthenticatorGroupsConfigAttributes) InternalWithRef(ref terra.Reference) AuthenticatorGroupsConfigAttributes {
	return AuthenticatorGroupsConfigAttributes{ref: ref}
}

func (agc AuthenticatorGroupsConfigAttributes) InternalTokens() hclwrite.Tokens {
	return agc.ref.InternalTokens()
}

func (agc AuthenticatorGroupsConfigAttributes) SecurityGroup() terra.StringValue {
	return terra.ReferenceString(agc.ref.Append("security_group"))
}

type BinaryAuthorizationAttributes struct {
	ref terra.Reference
}

func (ba BinaryAuthorizationAttributes) InternalRef() terra.Reference {
	return ba.ref
}

func (ba BinaryAuthorizationAttributes) InternalWithRef(ref terra.Reference) BinaryAuthorizationAttributes {
	return BinaryAuthorizationAttributes{ref: ref}
}

func (ba BinaryAuthorizationAttributes) InternalTokens() hclwrite.Tokens {
	return ba.ref.InternalTokens()
}

func (ba BinaryAuthorizationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(ba.ref.Append("enabled"))
}

func (ba BinaryAuthorizationAttributes) EvaluationMode() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("evaluation_mode"))
}

type ClusterAutoscalingAttributes struct {
	ref terra.Reference
}

func (ca ClusterAutoscalingAttributes) InternalRef() terra.Reference {
	return ca.ref
}

func (ca ClusterAutoscalingAttributes) InternalWithRef(ref terra.Reference) ClusterAutoscalingAttributes {
	return ClusterAutoscalingAttributes{ref: ref}
}

func (ca ClusterAutoscalingAttributes) InternalTokens() hclwrite.Tokens {
	return ca.ref.InternalTokens()
}

func (ca ClusterAutoscalingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(ca.ref.Append("enabled"))
}

func (ca ClusterAutoscalingAttributes) AutoProvisioningDefaults() terra.ListValue[AutoProvisioningDefaultsAttributes] {
	return terra.ReferenceList[AutoProvisioningDefaultsAttributes](ca.ref.Append("auto_provisioning_defaults"))
}

func (ca ClusterAutoscalingAttributes) ResourceLimits() terra.ListValue[ResourceLimitsAttributes] {
	return terra.ReferenceList[ResourceLimitsAttributes](ca.ref.Append("resource_limits"))
}

type AutoProvisioningDefaultsAttributes struct {
	ref terra.Reference
}

func (apd AutoProvisioningDefaultsAttributes) InternalRef() terra.Reference {
	return apd.ref
}

func (apd AutoProvisioningDefaultsAttributes) InternalWithRef(ref terra.Reference) AutoProvisioningDefaultsAttributes {
	return AutoProvisioningDefaultsAttributes{ref: ref}
}

func (apd AutoProvisioningDefaultsAttributes) InternalTokens() hclwrite.Tokens {
	return apd.ref.InternalTokens()
}

func (apd AutoProvisioningDefaultsAttributes) BootDiskKmsKey() terra.StringValue {
	return terra.ReferenceString(apd.ref.Append("boot_disk_kms_key"))
}

func (apd AutoProvisioningDefaultsAttributes) DiskSize() terra.NumberValue {
	return terra.ReferenceNumber(apd.ref.Append("disk_size"))
}

func (apd AutoProvisioningDefaultsAttributes) DiskType() terra.StringValue {
	return terra.ReferenceString(apd.ref.Append("disk_type"))
}

func (apd AutoProvisioningDefaultsAttributes) ImageType() terra.StringValue {
	return terra.ReferenceString(apd.ref.Append("image_type"))
}

func (apd AutoProvisioningDefaultsAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceString(apd.ref.Append("min_cpu_platform"))
}

func (apd AutoProvisioningDefaultsAttributes) OauthScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](apd.ref.Append("oauth_scopes"))
}

func (apd AutoProvisioningDefaultsAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceString(apd.ref.Append("service_account"))
}

func (apd AutoProvisioningDefaultsAttributes) Management() terra.ListValue[AutoProvisioningDefaultsManagementAttributes] {
	return terra.ReferenceList[AutoProvisioningDefaultsManagementAttributes](apd.ref.Append("management"))
}

func (apd AutoProvisioningDefaultsAttributes) ShieldedInstanceConfig() terra.ListValue[AutoProvisioningDefaultsShieldedInstanceConfigAttributes] {
	return terra.ReferenceList[AutoProvisioningDefaultsShieldedInstanceConfigAttributes](apd.ref.Append("shielded_instance_config"))
}

func (apd AutoProvisioningDefaultsAttributes) UpgradeSettings() terra.ListValue[AutoProvisioningDefaultsUpgradeSettingsAttributes] {
	return terra.ReferenceList[AutoProvisioningDefaultsUpgradeSettingsAttributes](apd.ref.Append("upgrade_settings"))
}

type AutoProvisioningDefaultsManagementAttributes struct {
	ref terra.Reference
}

func (m AutoProvisioningDefaultsManagementAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m AutoProvisioningDefaultsManagementAttributes) InternalWithRef(ref terra.Reference) AutoProvisioningDefaultsManagementAttributes {
	return AutoProvisioningDefaultsManagementAttributes{ref: ref}
}

func (m AutoProvisioningDefaultsManagementAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m AutoProvisioningDefaultsManagementAttributes) AutoRepair() terra.BoolValue {
	return terra.ReferenceBool(m.ref.Append("auto_repair"))
}

func (m AutoProvisioningDefaultsManagementAttributes) AutoUpgrade() terra.BoolValue {
	return terra.ReferenceBool(m.ref.Append("auto_upgrade"))
}

func (m AutoProvisioningDefaultsManagementAttributes) UpgradeOptions() terra.ListValue[UpgradeOptionsAttributes] {
	return terra.ReferenceList[UpgradeOptionsAttributes](m.ref.Append("upgrade_options"))
}

type UpgradeOptionsAttributes struct {
	ref terra.Reference
}

func (uo UpgradeOptionsAttributes) InternalRef() terra.Reference {
	return uo.ref
}

func (uo UpgradeOptionsAttributes) InternalWithRef(ref terra.Reference) UpgradeOptionsAttributes {
	return UpgradeOptionsAttributes{ref: ref}
}

func (uo UpgradeOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return uo.ref.InternalTokens()
}

func (uo UpgradeOptionsAttributes) AutoUpgradeStartTime() terra.StringValue {
	return terra.ReferenceString(uo.ref.Append("auto_upgrade_start_time"))
}

func (uo UpgradeOptionsAttributes) Description() terra.StringValue {
	return terra.ReferenceString(uo.ref.Append("description"))
}

type AutoProvisioningDefaultsShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic AutoProvisioningDefaultsShieldedInstanceConfigAttributes) InternalRef() terra.Reference {
	return sic.ref
}

func (sic AutoProvisioningDefaultsShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) AutoProvisioningDefaultsShieldedInstanceConfigAttributes {
	return AutoProvisioningDefaultsShieldedInstanceConfigAttributes{ref: ref}
}

func (sic AutoProvisioningDefaultsShieldedInstanceConfigAttributes) InternalTokens() hclwrite.Tokens {
	return sic.ref.InternalTokens()
}

func (sic AutoProvisioningDefaultsShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic AutoProvisioningDefaultsShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceBool(sic.ref.Append("enable_secure_boot"))
}

type AutoProvisioningDefaultsUpgradeSettingsAttributes struct {
	ref terra.Reference
}

func (us AutoProvisioningDefaultsUpgradeSettingsAttributes) InternalRef() terra.Reference {
	return us.ref
}

func (us AutoProvisioningDefaultsUpgradeSettingsAttributes) InternalWithRef(ref terra.Reference) AutoProvisioningDefaultsUpgradeSettingsAttributes {
	return AutoProvisioningDefaultsUpgradeSettingsAttributes{ref: ref}
}

func (us AutoProvisioningDefaultsUpgradeSettingsAttributes) InternalTokens() hclwrite.Tokens {
	return us.ref.InternalTokens()
}

func (us AutoProvisioningDefaultsUpgradeSettingsAttributes) MaxSurge() terra.NumberValue {
	return terra.ReferenceNumber(us.ref.Append("max_surge"))
}

func (us AutoProvisioningDefaultsUpgradeSettingsAttributes) MaxUnavailable() terra.NumberValue {
	return terra.ReferenceNumber(us.ref.Append("max_unavailable"))
}

func (us AutoProvisioningDefaultsUpgradeSettingsAttributes) Strategy() terra.StringValue {
	return terra.ReferenceString(us.ref.Append("strategy"))
}

func (us AutoProvisioningDefaultsUpgradeSettingsAttributes) BlueGreenSettings() terra.ListValue[AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes] {
	return terra.ReferenceList[AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes](us.ref.Append("blue_green_settings"))
}

type AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes struct {
	ref terra.Reference
}

func (bgs AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) InternalRef() terra.Reference {
	return bgs.ref
}

func (bgs AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) InternalWithRef(ref terra.Reference) AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes {
	return AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes{ref: ref}
}

func (bgs AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) InternalTokens() hclwrite.Tokens {
	return bgs.ref.InternalTokens()
}

func (bgs AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) NodePoolSoakDuration() terra.StringValue {
	return terra.ReferenceString(bgs.ref.Append("node_pool_soak_duration"))
}

func (bgs AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsAttributes) StandardRolloutPolicy() terra.ListValue[AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes] {
	return terra.ReferenceList[AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes](bgs.ref.Append("standard_rollout_policy"))
}

type AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes struct {
	ref terra.Reference
}

func (srp AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalRef() terra.Reference {
	return srp.ref
}

func (srp AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalWithRef(ref terra.Reference) AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes {
	return AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes{ref: ref}
}

func (srp AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return srp.ref.InternalTokens()
}

func (srp AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchNodeCount() terra.NumberValue {
	return terra.ReferenceNumber(srp.ref.Append("batch_node_count"))
}

func (srp AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchPercentage() terra.NumberValue {
	return terra.ReferenceNumber(srp.ref.Append("batch_percentage"))
}

func (srp AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchSoakDuration() terra.StringValue {
	return terra.ReferenceString(srp.ref.Append("batch_soak_duration"))
}

type ResourceLimitsAttributes struct {
	ref terra.Reference
}

func (rl ResourceLimitsAttributes) InternalRef() terra.Reference {
	return rl.ref
}

func (rl ResourceLimitsAttributes) InternalWithRef(ref terra.Reference) ResourceLimitsAttributes {
	return ResourceLimitsAttributes{ref: ref}
}

func (rl ResourceLimitsAttributes) InternalTokens() hclwrite.Tokens {
	return rl.ref.InternalTokens()
}

func (rl ResourceLimitsAttributes) Maximum() terra.NumberValue {
	return terra.ReferenceNumber(rl.ref.Append("maximum"))
}

func (rl ResourceLimitsAttributes) Minimum() terra.NumberValue {
	return terra.ReferenceNumber(rl.ref.Append("minimum"))
}

func (rl ResourceLimitsAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceString(rl.ref.Append("resource_type"))
}

type ConfidentialNodesAttributes struct {
	ref terra.Reference
}

func (cn ConfidentialNodesAttributes) InternalRef() terra.Reference {
	return cn.ref
}

func (cn ConfidentialNodesAttributes) InternalWithRef(ref terra.Reference) ConfidentialNodesAttributes {
	return ConfidentialNodesAttributes{ref: ref}
}

func (cn ConfidentialNodesAttributes) InternalTokens() hclwrite.Tokens {
	return cn.ref.InternalTokens()
}

func (cn ConfidentialNodesAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(cn.ref.Append("enabled"))
}

type CostManagementConfigAttributes struct {
	ref terra.Reference
}

func (cmc CostManagementConfigAttributes) InternalRef() terra.Reference {
	return cmc.ref
}

func (cmc CostManagementConfigAttributes) InternalWithRef(ref terra.Reference) CostManagementConfigAttributes {
	return CostManagementConfigAttributes{ref: ref}
}

func (cmc CostManagementConfigAttributes) InternalTokens() hclwrite.Tokens {
	return cmc.ref.InternalTokens()
}

func (cmc CostManagementConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(cmc.ref.Append("enabled"))
}

type DatabaseEncryptionAttributes struct {
	ref terra.Reference
}

func (de DatabaseEncryptionAttributes) InternalRef() terra.Reference {
	return de.ref
}

func (de DatabaseEncryptionAttributes) InternalWithRef(ref terra.Reference) DatabaseEncryptionAttributes {
	return DatabaseEncryptionAttributes{ref: ref}
}

func (de DatabaseEncryptionAttributes) InternalTokens() hclwrite.Tokens {
	return de.ref.InternalTokens()
}

func (de DatabaseEncryptionAttributes) KeyName() terra.StringValue {
	return terra.ReferenceString(de.ref.Append("key_name"))
}

func (de DatabaseEncryptionAttributes) State() terra.StringValue {
	return terra.ReferenceString(de.ref.Append("state"))
}

type DefaultSnatStatusAttributes struct {
	ref terra.Reference
}

func (dss DefaultSnatStatusAttributes) InternalRef() terra.Reference {
	return dss.ref
}

func (dss DefaultSnatStatusAttributes) InternalWithRef(ref terra.Reference) DefaultSnatStatusAttributes {
	return DefaultSnatStatusAttributes{ref: ref}
}

func (dss DefaultSnatStatusAttributes) InternalTokens() hclwrite.Tokens {
	return dss.ref.InternalTokens()
}

func (dss DefaultSnatStatusAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(dss.ref.Append("disabled"))
}

type DnsConfigAttributes struct {
	ref terra.Reference
}

func (dc DnsConfigAttributes) InternalRef() terra.Reference {
	return dc.ref
}

func (dc DnsConfigAttributes) InternalWithRef(ref terra.Reference) DnsConfigAttributes {
	return DnsConfigAttributes{ref: ref}
}

func (dc DnsConfigAttributes) InternalTokens() hclwrite.Tokens {
	return dc.ref.InternalTokens()
}

func (dc DnsConfigAttributes) ClusterDns() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("cluster_dns"))
}

func (dc DnsConfigAttributes) ClusterDnsDomain() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("cluster_dns_domain"))
}

func (dc DnsConfigAttributes) ClusterDnsScope() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("cluster_dns_scope"))
}

type GatewayApiConfigAttributes struct {
	ref terra.Reference
}

func (gac GatewayApiConfigAttributes) InternalRef() terra.Reference {
	return gac.ref
}

func (gac GatewayApiConfigAttributes) InternalWithRef(ref terra.Reference) GatewayApiConfigAttributes {
	return GatewayApiConfigAttributes{ref: ref}
}

func (gac GatewayApiConfigAttributes) InternalTokens() hclwrite.Tokens {
	return gac.ref.InternalTokens()
}

func (gac GatewayApiConfigAttributes) Channel() terra.StringValue {
	return terra.ReferenceString(gac.ref.Append("channel"))
}

type IpAllocationPolicyAttributes struct {
	ref terra.Reference
}

func (iap IpAllocationPolicyAttributes) InternalRef() terra.Reference {
	return iap.ref
}

func (iap IpAllocationPolicyAttributes) InternalWithRef(ref terra.Reference) IpAllocationPolicyAttributes {
	return IpAllocationPolicyAttributes{ref: ref}
}

func (iap IpAllocationPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return iap.ref.InternalTokens()
}

func (iap IpAllocationPolicyAttributes) ClusterIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceString(iap.ref.Append("cluster_ipv4_cidr_block"))
}

func (iap IpAllocationPolicyAttributes) ClusterSecondaryRangeName() terra.StringValue {
	return terra.ReferenceString(iap.ref.Append("cluster_secondary_range_name"))
}

func (iap IpAllocationPolicyAttributes) ServicesIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceString(iap.ref.Append("services_ipv4_cidr_block"))
}

func (iap IpAllocationPolicyAttributes) ServicesSecondaryRangeName() terra.StringValue {
	return terra.ReferenceString(iap.ref.Append("services_secondary_range_name"))
}

type LoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc LoggingConfigAttributes) InternalRef() terra.Reference {
	return lc.ref
}

func (lc LoggingConfigAttributes) InternalWithRef(ref terra.Reference) LoggingConfigAttributes {
	return LoggingConfigAttributes{ref: ref}
}

func (lc LoggingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return lc.ref.InternalTokens()
}

func (lc LoggingConfigAttributes) EnableComponents() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](lc.ref.Append("enable_components"))
}

type MaintenancePolicyAttributes struct {
	ref terra.Reference
}

func (mp MaintenancePolicyAttributes) InternalRef() terra.Reference {
	return mp.ref
}

func (mp MaintenancePolicyAttributes) InternalWithRef(ref terra.Reference) MaintenancePolicyAttributes {
	return MaintenancePolicyAttributes{ref: ref}
}

func (mp MaintenancePolicyAttributes) InternalTokens() hclwrite.Tokens {
	return mp.ref.InternalTokens()
}

func (mp MaintenancePolicyAttributes) DailyMaintenanceWindow() terra.ListValue[DailyMaintenanceWindowAttributes] {
	return terra.ReferenceList[DailyMaintenanceWindowAttributes](mp.ref.Append("daily_maintenance_window"))
}

func (mp MaintenancePolicyAttributes) MaintenanceExclusion() terra.SetValue[MaintenanceExclusionAttributes] {
	return terra.ReferenceSet[MaintenanceExclusionAttributes](mp.ref.Append("maintenance_exclusion"))
}

func (mp MaintenancePolicyAttributes) RecurringWindow() terra.ListValue[RecurringWindowAttributes] {
	return terra.ReferenceList[RecurringWindowAttributes](mp.ref.Append("recurring_window"))
}

type DailyMaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (dmw DailyMaintenanceWindowAttributes) InternalRef() terra.Reference {
	return dmw.ref
}

func (dmw DailyMaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) DailyMaintenanceWindowAttributes {
	return DailyMaintenanceWindowAttributes{ref: ref}
}

func (dmw DailyMaintenanceWindowAttributes) InternalTokens() hclwrite.Tokens {
	return dmw.ref.InternalTokens()
}

func (dmw DailyMaintenanceWindowAttributes) Duration() terra.StringValue {
	return terra.ReferenceString(dmw.ref.Append("duration"))
}

func (dmw DailyMaintenanceWindowAttributes) StartTime() terra.StringValue {
	return terra.ReferenceString(dmw.ref.Append("start_time"))
}

type MaintenanceExclusionAttributes struct {
	ref terra.Reference
}

func (me MaintenanceExclusionAttributes) InternalRef() terra.Reference {
	return me.ref
}

func (me MaintenanceExclusionAttributes) InternalWithRef(ref terra.Reference) MaintenanceExclusionAttributes {
	return MaintenanceExclusionAttributes{ref: ref}
}

func (me MaintenanceExclusionAttributes) InternalTokens() hclwrite.Tokens {
	return me.ref.InternalTokens()
}

func (me MaintenanceExclusionAttributes) EndTime() terra.StringValue {
	return terra.ReferenceString(me.ref.Append("end_time"))
}

func (me MaintenanceExclusionAttributes) ExclusionName() terra.StringValue {
	return terra.ReferenceString(me.ref.Append("exclusion_name"))
}

func (me MaintenanceExclusionAttributes) StartTime() terra.StringValue {
	return terra.ReferenceString(me.ref.Append("start_time"))
}

func (me MaintenanceExclusionAttributes) ExclusionOptions() terra.ListValue[ExclusionOptionsAttributes] {
	return terra.ReferenceList[ExclusionOptionsAttributes](me.ref.Append("exclusion_options"))
}

type ExclusionOptionsAttributes struct {
	ref terra.Reference
}

func (eo ExclusionOptionsAttributes) InternalRef() terra.Reference {
	return eo.ref
}

func (eo ExclusionOptionsAttributes) InternalWithRef(ref terra.Reference) ExclusionOptionsAttributes {
	return ExclusionOptionsAttributes{ref: ref}
}

func (eo ExclusionOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return eo.ref.InternalTokens()
}

func (eo ExclusionOptionsAttributes) Scope() terra.StringValue {
	return terra.ReferenceString(eo.ref.Append("scope"))
}

type RecurringWindowAttributes struct {
	ref terra.Reference
}

func (rw RecurringWindowAttributes) InternalRef() terra.Reference {
	return rw.ref
}

func (rw RecurringWindowAttributes) InternalWithRef(ref terra.Reference) RecurringWindowAttributes {
	return RecurringWindowAttributes{ref: ref}
}

func (rw RecurringWindowAttributes) InternalTokens() hclwrite.Tokens {
	return rw.ref.InternalTokens()
}

func (rw RecurringWindowAttributes) EndTime() terra.StringValue {
	return terra.ReferenceString(rw.ref.Append("end_time"))
}

func (rw RecurringWindowAttributes) Recurrence() terra.StringValue {
	return terra.ReferenceString(rw.ref.Append("recurrence"))
}

func (rw RecurringWindowAttributes) StartTime() terra.StringValue {
	return terra.ReferenceString(rw.ref.Append("start_time"))
}

type MasterAuthAttributes struct {
	ref terra.Reference
}

func (ma MasterAuthAttributes) InternalRef() terra.Reference {
	return ma.ref
}

func (ma MasterAuthAttributes) InternalWithRef(ref terra.Reference) MasterAuthAttributes {
	return MasterAuthAttributes{ref: ref}
}

func (ma MasterAuthAttributes) InternalTokens() hclwrite.Tokens {
	return ma.ref.InternalTokens()
}

func (ma MasterAuthAttributes) ClientCertificate() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("client_certificate"))
}

func (ma MasterAuthAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("client_key"))
}

func (ma MasterAuthAttributes) ClusterCaCertificate() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("cluster_ca_certificate"))
}

func (ma MasterAuthAttributes) ClientCertificateConfig() terra.ListValue[ClientCertificateConfigAttributes] {
	return terra.ReferenceList[ClientCertificateConfigAttributes](ma.ref.Append("client_certificate_config"))
}

type ClientCertificateConfigAttributes struct {
	ref terra.Reference
}

func (ccc ClientCertificateConfigAttributes) InternalRef() terra.Reference {
	return ccc.ref
}

func (ccc ClientCertificateConfigAttributes) InternalWithRef(ref terra.Reference) ClientCertificateConfigAttributes {
	return ClientCertificateConfigAttributes{ref: ref}
}

func (ccc ClientCertificateConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ccc.ref.InternalTokens()
}

func (ccc ClientCertificateConfigAttributes) IssueClientCertificate() terra.BoolValue {
	return terra.ReferenceBool(ccc.ref.Append("issue_client_certificate"))
}

type MasterAuthorizedNetworksConfigAttributes struct {
	ref terra.Reference
}

func (manc MasterAuthorizedNetworksConfigAttributes) InternalRef() terra.Reference {
	return manc.ref
}

func (manc MasterAuthorizedNetworksConfigAttributes) InternalWithRef(ref terra.Reference) MasterAuthorizedNetworksConfigAttributes {
	return MasterAuthorizedNetworksConfigAttributes{ref: ref}
}

func (manc MasterAuthorizedNetworksConfigAttributes) InternalTokens() hclwrite.Tokens {
	return manc.ref.InternalTokens()
}

func (manc MasterAuthorizedNetworksConfigAttributes) GcpPublicCidrsAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(manc.ref.Append("gcp_public_cidrs_access_enabled"))
}

func (manc MasterAuthorizedNetworksConfigAttributes) CidrBlocks() terra.SetValue[CidrBlocksAttributes] {
	return terra.ReferenceSet[CidrBlocksAttributes](manc.ref.Append("cidr_blocks"))
}

type CidrBlocksAttributes struct {
	ref terra.Reference
}

func (cb CidrBlocksAttributes) InternalRef() terra.Reference {
	return cb.ref
}

func (cb CidrBlocksAttributes) InternalWithRef(ref terra.Reference) CidrBlocksAttributes {
	return CidrBlocksAttributes{ref: ref}
}

func (cb CidrBlocksAttributes) InternalTokens() hclwrite.Tokens {
	return cb.ref.InternalTokens()
}

func (cb CidrBlocksAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceString(cb.ref.Append("cidr_block"))
}

func (cb CidrBlocksAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(cb.ref.Append("display_name"))
}

type MeshCertificatesAttributes struct {
	ref terra.Reference
}

func (mc MeshCertificatesAttributes) InternalRef() terra.Reference {
	return mc.ref
}

func (mc MeshCertificatesAttributes) InternalWithRef(ref terra.Reference) MeshCertificatesAttributes {
	return MeshCertificatesAttributes{ref: ref}
}

func (mc MeshCertificatesAttributes) InternalTokens() hclwrite.Tokens {
	return mc.ref.InternalTokens()
}

func (mc MeshCertificatesAttributes) EnableCertificates() terra.BoolValue {
	return terra.ReferenceBool(mc.ref.Append("enable_certificates"))
}

type MonitoringConfigAttributes struct {
	ref terra.Reference
}

func (mc MonitoringConfigAttributes) InternalRef() terra.Reference {
	return mc.ref
}

func (mc MonitoringConfigAttributes) InternalWithRef(ref terra.Reference) MonitoringConfigAttributes {
	return MonitoringConfigAttributes{ref: ref}
}

func (mc MonitoringConfigAttributes) InternalTokens() hclwrite.Tokens {
	return mc.ref.InternalTokens()
}

func (mc MonitoringConfigAttributes) EnableComponents() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](mc.ref.Append("enable_components"))
}

func (mc MonitoringConfigAttributes) ManagedPrometheus() terra.ListValue[ManagedPrometheusAttributes] {
	return terra.ReferenceList[ManagedPrometheusAttributes](mc.ref.Append("managed_prometheus"))
}

type ManagedPrometheusAttributes struct {
	ref terra.Reference
}

func (mp ManagedPrometheusAttributes) InternalRef() terra.Reference {
	return mp.ref
}

func (mp ManagedPrometheusAttributes) InternalWithRef(ref terra.Reference) ManagedPrometheusAttributes {
	return ManagedPrometheusAttributes{ref: ref}
}

func (mp ManagedPrometheusAttributes) InternalTokens() hclwrite.Tokens {
	return mp.ref.InternalTokens()
}

func (mp ManagedPrometheusAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(mp.ref.Append("enabled"))
}

type NetworkPolicyAttributes struct {
	ref terra.Reference
}

func (np NetworkPolicyAttributes) InternalRef() terra.Reference {
	return np.ref
}

func (np NetworkPolicyAttributes) InternalWithRef(ref terra.Reference) NetworkPolicyAttributes {
	return NetworkPolicyAttributes{ref: ref}
}

func (np NetworkPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return np.ref.InternalTokens()
}

func (np NetworkPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(np.ref.Append("enabled"))
}

func (np NetworkPolicyAttributes) Provider() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("provider"))
}

type NodeConfigAttributes struct {
	ref terra.Reference
}

func (nc NodeConfigAttributes) InternalRef() terra.Reference {
	return nc.ref
}

func (nc NodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigAttributes {
	return NodeConfigAttributes{ref: ref}
}

func (nc NodeConfigAttributes) InternalTokens() hclwrite.Tokens {
	return nc.ref.InternalTokens()
}

func (nc NodeConfigAttributes) BootDiskKmsKey() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("boot_disk_kms_key"))
}

func (nc NodeConfigAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceNumber(nc.ref.Append("disk_size_gb"))
}

func (nc NodeConfigAttributes) DiskType() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("disk_type"))
}

func (nc NodeConfigAttributes) ImageType() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("image_type"))
}

func (nc NodeConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nc.ref.Append("labels"))
}

func (nc NodeConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceNumber(nc.ref.Append("local_ssd_count"))
}

func (nc NodeConfigAttributes) LoggingVariant() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("logging_variant"))
}

func (nc NodeConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("machine_type"))
}

func (nc NodeConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nc.ref.Append("metadata"))
}

func (nc NodeConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("min_cpu_platform"))
}

func (nc NodeConfigAttributes) NodeGroup() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("node_group"))
}

func (nc NodeConfigAttributes) OauthScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nc.ref.Append("oauth_scopes"))
}

func (nc NodeConfigAttributes) Preemptible() terra.BoolValue {
	return terra.ReferenceBool(nc.ref.Append("preemptible"))
}

func (nc NodeConfigAttributes) ResourceLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nc.ref.Append("resource_labels"))
}

func (nc NodeConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("service_account"))
}

func (nc NodeConfigAttributes) Spot() terra.BoolValue {
	return terra.ReferenceBool(nc.ref.Append("spot"))
}

func (nc NodeConfigAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nc.ref.Append("tags"))
}

func (nc NodeConfigAttributes) GcfsConfig() terra.ListValue[NodeConfigGcfsConfigAttributes] {
	return terra.ReferenceList[NodeConfigGcfsConfigAttributes](nc.ref.Append("gcfs_config"))
}

func (nc NodeConfigAttributes) GuestAccelerator() terra.ListValue[NodeConfigGuestAcceleratorAttributes] {
	return terra.ReferenceList[NodeConfigGuestAcceleratorAttributes](nc.ref.Append("guest_accelerator"))
}

func (nc NodeConfigAttributes) Gvnic() terra.ListValue[NodeConfigGvnicAttributes] {
	return terra.ReferenceList[NodeConfigGvnicAttributes](nc.ref.Append("gvnic"))
}

func (nc NodeConfigAttributes) KubeletConfig() terra.ListValue[NodeConfigKubeletConfigAttributes] {
	return terra.ReferenceList[NodeConfigKubeletConfigAttributes](nc.ref.Append("kubelet_config"))
}

func (nc NodeConfigAttributes) LinuxNodeConfig() terra.ListValue[NodeConfigLinuxNodeConfigAttributes] {
	return terra.ReferenceList[NodeConfigLinuxNodeConfigAttributes](nc.ref.Append("linux_node_config"))
}

func (nc NodeConfigAttributes) LocalNvmeSsdBlockConfig() terra.ListValue[NodeConfigLocalNvmeSsdBlockConfigAttributes] {
	return terra.ReferenceList[NodeConfigLocalNvmeSsdBlockConfigAttributes](nc.ref.Append("local_nvme_ssd_block_config"))
}

func (nc NodeConfigAttributes) ReservationAffinity() terra.ListValue[NodeConfigReservationAffinityAttributes] {
	return terra.ReferenceList[NodeConfigReservationAffinityAttributes](nc.ref.Append("reservation_affinity"))
}

func (nc NodeConfigAttributes) ShieldedInstanceConfig() terra.ListValue[NodeConfigShieldedInstanceConfigAttributes] {
	return terra.ReferenceList[NodeConfigShieldedInstanceConfigAttributes](nc.ref.Append("shielded_instance_config"))
}

func (nc NodeConfigAttributes) Taint() terra.ListValue[NodeConfigTaintAttributes] {
	return terra.ReferenceList[NodeConfigTaintAttributes](nc.ref.Append("taint"))
}

func (nc NodeConfigAttributes) WorkloadMetadataConfig() terra.ListValue[NodeConfigWorkloadMetadataConfigAttributes] {
	return terra.ReferenceList[NodeConfigWorkloadMetadataConfigAttributes](nc.ref.Append("workload_metadata_config"))
}

type NodeConfigGcfsConfigAttributes struct {
	ref terra.Reference
}

func (gc NodeConfigGcfsConfigAttributes) InternalRef() terra.Reference {
	return gc.ref
}

func (gc NodeConfigGcfsConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigGcfsConfigAttributes {
	return NodeConfigGcfsConfigAttributes{ref: ref}
}

func (gc NodeConfigGcfsConfigAttributes) InternalTokens() hclwrite.Tokens {
	return gc.ref.InternalTokens()
}

func (gc NodeConfigGcfsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(gc.ref.Append("enabled"))
}

type NodeConfigGuestAcceleratorAttributes struct {
	ref terra.Reference
}

func (ga NodeConfigGuestAcceleratorAttributes) InternalRef() terra.Reference {
	return ga.ref
}

func (ga NodeConfigGuestAcceleratorAttributes) InternalWithRef(ref terra.Reference) NodeConfigGuestAcceleratorAttributes {
	return NodeConfigGuestAcceleratorAttributes{ref: ref}
}

func (ga NodeConfigGuestAcceleratorAttributes) InternalTokens() hclwrite.Tokens {
	return ga.ref.InternalTokens()
}

func (ga NodeConfigGuestAcceleratorAttributes) Count() terra.NumberValue {
	return terra.ReferenceNumber(ga.ref.Append("count"))
}

func (ga NodeConfigGuestAcceleratorAttributes) GpuPartitionSize() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("gpu_partition_size"))
}

func (ga NodeConfigGuestAcceleratorAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("type"))
}

func (ga NodeConfigGuestAcceleratorAttributes) GpuSharingConfig() terra.ListValue[NodeConfigGuestAcceleratorGpuSharingConfigAttributes] {
	return terra.ReferenceList[NodeConfigGuestAcceleratorGpuSharingConfigAttributes](ga.ref.Append("gpu_sharing_config"))
}

type NodeConfigGuestAcceleratorGpuSharingConfigAttributes struct {
	ref terra.Reference
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalRef() terra.Reference {
	return gsc.ref
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigGuestAcceleratorGpuSharingConfigAttributes {
	return NodeConfigGuestAcceleratorGpuSharingConfigAttributes{ref: ref}
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return gsc.ref.InternalTokens()
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) GpuSharingStrategy() terra.StringValue {
	return terra.ReferenceString(gsc.ref.Append("gpu_sharing_strategy"))
}

func (gsc NodeConfigGuestAcceleratorGpuSharingConfigAttributes) MaxSharedClientsPerGpu() terra.NumberValue {
	return terra.ReferenceNumber(gsc.ref.Append("max_shared_clients_per_gpu"))
}

type NodeConfigGvnicAttributes struct {
	ref terra.Reference
}

func (g NodeConfigGvnicAttributes) InternalRef() terra.Reference {
	return g.ref
}

func (g NodeConfigGvnicAttributes) InternalWithRef(ref terra.Reference) NodeConfigGvnicAttributes {
	return NodeConfigGvnicAttributes{ref: ref}
}

func (g NodeConfigGvnicAttributes) InternalTokens() hclwrite.Tokens {
	return g.ref.InternalTokens()
}

func (g NodeConfigGvnicAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(g.ref.Append("enabled"))
}

type NodeConfigKubeletConfigAttributes struct {
	ref terra.Reference
}

func (kc NodeConfigKubeletConfigAttributes) InternalRef() terra.Reference {
	return kc.ref
}

func (kc NodeConfigKubeletConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigKubeletConfigAttributes {
	return NodeConfigKubeletConfigAttributes{ref: ref}
}

func (kc NodeConfigKubeletConfigAttributes) InternalTokens() hclwrite.Tokens {
	return kc.ref.InternalTokens()
}

func (kc NodeConfigKubeletConfigAttributes) CpuCfsQuota() terra.BoolValue {
	return terra.ReferenceBool(kc.ref.Append("cpu_cfs_quota"))
}

func (kc NodeConfigKubeletConfigAttributes) CpuCfsQuotaPeriod() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("cpu_cfs_quota_period"))
}

func (kc NodeConfigKubeletConfigAttributes) CpuManagerPolicy() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("cpu_manager_policy"))
}

func (kc NodeConfigKubeletConfigAttributes) PodPidsLimit() terra.NumberValue {
	return terra.ReferenceNumber(kc.ref.Append("pod_pids_limit"))
}

type NodeConfigLinuxNodeConfigAttributes struct {
	ref terra.Reference
}

func (lnc NodeConfigLinuxNodeConfigAttributes) InternalRef() terra.Reference {
	return lnc.ref
}

func (lnc NodeConfigLinuxNodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigLinuxNodeConfigAttributes {
	return NodeConfigLinuxNodeConfigAttributes{ref: ref}
}

func (lnc NodeConfigLinuxNodeConfigAttributes) InternalTokens() hclwrite.Tokens {
	return lnc.ref.InternalTokens()
}

func (lnc NodeConfigLinuxNodeConfigAttributes) Sysctls() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lnc.ref.Append("sysctls"))
}

type NodeConfigLocalNvmeSsdBlockConfigAttributes struct {
	ref terra.Reference
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) InternalRef() terra.Reference {
	return lnsbc.ref
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigLocalNvmeSsdBlockConfigAttributes {
	return NodeConfigLocalNvmeSsdBlockConfigAttributes{ref: ref}
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) InternalTokens() hclwrite.Tokens {
	return lnsbc.ref.InternalTokens()
}

func (lnsbc NodeConfigLocalNvmeSsdBlockConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceNumber(lnsbc.ref.Append("local_ssd_count"))
}

type NodeConfigReservationAffinityAttributes struct {
	ref terra.Reference
}

func (ra NodeConfigReservationAffinityAttributes) InternalRef() terra.Reference {
	return ra.ref
}

func (ra NodeConfigReservationAffinityAttributes) InternalWithRef(ref terra.Reference) NodeConfigReservationAffinityAttributes {
	return NodeConfigReservationAffinityAttributes{ref: ref}
}

func (ra NodeConfigReservationAffinityAttributes) InternalTokens() hclwrite.Tokens {
	return ra.ref.InternalTokens()
}

func (ra NodeConfigReservationAffinityAttributes) ConsumeReservationType() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("consume_reservation_type"))
}

func (ra NodeConfigReservationAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("key"))
}

func (ra NodeConfigReservationAffinityAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ra.ref.Append("values"))
}

type NodeConfigShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic NodeConfigShieldedInstanceConfigAttributes) InternalRef() terra.Reference {
	return sic.ref
}

func (sic NodeConfigShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigShieldedInstanceConfigAttributes {
	return NodeConfigShieldedInstanceConfigAttributes{ref: ref}
}

func (sic NodeConfigShieldedInstanceConfigAttributes) InternalTokens() hclwrite.Tokens {
	return sic.ref.InternalTokens()
}

func (sic NodeConfigShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic NodeConfigShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceBool(sic.ref.Append("enable_secure_boot"))
}

type NodeConfigTaintAttributes struct {
	ref terra.Reference
}

func (t NodeConfigTaintAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t NodeConfigTaintAttributes) InternalWithRef(ref terra.Reference) NodeConfigTaintAttributes {
	return NodeConfigTaintAttributes{ref: ref}
}

func (t NodeConfigTaintAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t NodeConfigTaintAttributes) Effect() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("effect"))
}

func (t NodeConfigTaintAttributes) Key() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("key"))
}

func (t NodeConfigTaintAttributes) Value() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("value"))
}

type NodeConfigWorkloadMetadataConfigAttributes struct {
	ref terra.Reference
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) InternalRef() terra.Reference {
	return wmc.ref
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigWorkloadMetadataConfigAttributes {
	return NodeConfigWorkloadMetadataConfigAttributes{ref: ref}
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) InternalTokens() hclwrite.Tokens {
	return wmc.ref.InternalTokens()
}

func (wmc NodeConfigWorkloadMetadataConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceString(wmc.ref.Append("mode"))
}

type NodePoolAttributes struct {
	ref terra.Reference
}

func (np NodePoolAttributes) InternalRef() terra.Reference {
	return np.ref
}

func (np NodePoolAttributes) InternalWithRef(ref terra.Reference) NodePoolAttributes {
	return NodePoolAttributes{ref: ref}
}

func (np NodePoolAttributes) InternalTokens() hclwrite.Tokens {
	return np.ref.InternalTokens()
}

func (np NodePoolAttributes) InitialNodeCount() terra.NumberValue {
	return terra.ReferenceNumber(np.ref.Append("initial_node_count"))
}

func (np NodePoolAttributes) InstanceGroupUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](np.ref.Append("instance_group_urls"))
}

func (np NodePoolAttributes) ManagedInstanceGroupUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](np.ref.Append("managed_instance_group_urls"))
}

func (np NodePoolAttributes) MaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceNumber(np.ref.Append("max_pods_per_node"))
}

func (np NodePoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("name"))
}

func (np NodePoolAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("name_prefix"))
}

func (np NodePoolAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceNumber(np.ref.Append("node_count"))
}

func (np NodePoolAttributes) NodeLocations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](np.ref.Append("node_locations"))
}

func (np NodePoolAttributes) Version() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("version"))
}

func (np NodePoolAttributes) Autoscaling() terra.ListValue[AutoscalingAttributes] {
	return terra.ReferenceList[AutoscalingAttributes](np.ref.Append("autoscaling"))
}

func (np NodePoolAttributes) Management() terra.ListValue[NodePoolManagementAttributes] {
	return terra.ReferenceList[NodePoolManagementAttributes](np.ref.Append("management"))
}

func (np NodePoolAttributes) NetworkConfig() terra.ListValue[NetworkConfigAttributes] {
	return terra.ReferenceList[NetworkConfigAttributes](np.ref.Append("network_config"))
}

func (np NodePoolAttributes) NodeConfig() terra.ListValue[NodePoolNodeConfigAttributes] {
	return terra.ReferenceList[NodePoolNodeConfigAttributes](np.ref.Append("node_config"))
}

func (np NodePoolAttributes) PlacementPolicy() terra.ListValue[PlacementPolicyAttributes] {
	return terra.ReferenceList[PlacementPolicyAttributes](np.ref.Append("placement_policy"))
}

func (np NodePoolAttributes) UpgradeSettings() terra.ListValue[NodePoolUpgradeSettingsAttributes] {
	return terra.ReferenceList[NodePoolUpgradeSettingsAttributes](np.ref.Append("upgrade_settings"))
}

type AutoscalingAttributes struct {
	ref terra.Reference
}

func (a AutoscalingAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a AutoscalingAttributes) InternalWithRef(ref terra.Reference) AutoscalingAttributes {
	return AutoscalingAttributes{ref: ref}
}

func (a AutoscalingAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a AutoscalingAttributes) LocationPolicy() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("location_policy"))
}

func (a AutoscalingAttributes) MaxNodeCount() terra.NumberValue {
	return terra.ReferenceNumber(a.ref.Append("max_node_count"))
}

func (a AutoscalingAttributes) MinNodeCount() terra.NumberValue {
	return terra.ReferenceNumber(a.ref.Append("min_node_count"))
}

func (a AutoscalingAttributes) TotalMaxNodeCount() terra.NumberValue {
	return terra.ReferenceNumber(a.ref.Append("total_max_node_count"))
}

func (a AutoscalingAttributes) TotalMinNodeCount() terra.NumberValue {
	return terra.ReferenceNumber(a.ref.Append("total_min_node_count"))
}

type NodePoolManagementAttributes struct {
	ref terra.Reference
}

func (m NodePoolManagementAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m NodePoolManagementAttributes) InternalWithRef(ref terra.Reference) NodePoolManagementAttributes {
	return NodePoolManagementAttributes{ref: ref}
}

func (m NodePoolManagementAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m NodePoolManagementAttributes) AutoRepair() terra.BoolValue {
	return terra.ReferenceBool(m.ref.Append("auto_repair"))
}

func (m NodePoolManagementAttributes) AutoUpgrade() terra.BoolValue {
	return terra.ReferenceBool(m.ref.Append("auto_upgrade"))
}

type NetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigAttributes) InternalRef() terra.Reference {
	return nc.ref
}

func (nc NetworkConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAttributes {
	return NetworkConfigAttributes{ref: ref}
}

func (nc NetworkConfigAttributes) InternalTokens() hclwrite.Tokens {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigAttributes) CreatePodRange() terra.BoolValue {
	return terra.ReferenceBool(nc.ref.Append("create_pod_range"))
}

func (nc NetworkConfigAttributes) EnablePrivateNodes() terra.BoolValue {
	return terra.ReferenceBool(nc.ref.Append("enable_private_nodes"))
}

func (nc NetworkConfigAttributes) PodIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("pod_ipv4_cidr_block"))
}

func (nc NetworkConfigAttributes) PodRange() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("pod_range"))
}

type NodePoolNodeConfigAttributes struct {
	ref terra.Reference
}

func (nc NodePoolNodeConfigAttributes) InternalRef() terra.Reference {
	return nc.ref
}

func (nc NodePoolNodeConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigAttributes {
	return NodePoolNodeConfigAttributes{ref: ref}
}

func (nc NodePoolNodeConfigAttributes) InternalTokens() hclwrite.Tokens {
	return nc.ref.InternalTokens()
}

func (nc NodePoolNodeConfigAttributes) BootDiskKmsKey() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("boot_disk_kms_key"))
}

func (nc NodePoolNodeConfigAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceNumber(nc.ref.Append("disk_size_gb"))
}

func (nc NodePoolNodeConfigAttributes) DiskType() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("disk_type"))
}

func (nc NodePoolNodeConfigAttributes) ImageType() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("image_type"))
}

func (nc NodePoolNodeConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nc.ref.Append("labels"))
}

func (nc NodePoolNodeConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceNumber(nc.ref.Append("local_ssd_count"))
}

func (nc NodePoolNodeConfigAttributes) LoggingVariant() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("logging_variant"))
}

func (nc NodePoolNodeConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("machine_type"))
}

func (nc NodePoolNodeConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nc.ref.Append("metadata"))
}

func (nc NodePoolNodeConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("min_cpu_platform"))
}

func (nc NodePoolNodeConfigAttributes) NodeGroup() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("node_group"))
}

func (nc NodePoolNodeConfigAttributes) OauthScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nc.ref.Append("oauth_scopes"))
}

func (nc NodePoolNodeConfigAttributes) Preemptible() terra.BoolValue {
	return terra.ReferenceBool(nc.ref.Append("preemptible"))
}

func (nc NodePoolNodeConfigAttributes) ResourceLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nc.ref.Append("resource_labels"))
}

func (nc NodePoolNodeConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("service_account"))
}

func (nc NodePoolNodeConfigAttributes) Spot() terra.BoolValue {
	return terra.ReferenceBool(nc.ref.Append("spot"))
}

func (nc NodePoolNodeConfigAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nc.ref.Append("tags"))
}

func (nc NodePoolNodeConfigAttributes) GcfsConfig() terra.ListValue[NodePoolNodeConfigGcfsConfigAttributes] {
	return terra.ReferenceList[NodePoolNodeConfigGcfsConfigAttributes](nc.ref.Append("gcfs_config"))
}

func (nc NodePoolNodeConfigAttributes) GuestAccelerator() terra.ListValue[NodePoolNodeConfigGuestAcceleratorAttributes] {
	return terra.ReferenceList[NodePoolNodeConfigGuestAcceleratorAttributes](nc.ref.Append("guest_accelerator"))
}

func (nc NodePoolNodeConfigAttributes) Gvnic() terra.ListValue[NodePoolNodeConfigGvnicAttributes] {
	return terra.ReferenceList[NodePoolNodeConfigGvnicAttributes](nc.ref.Append("gvnic"))
}

func (nc NodePoolNodeConfigAttributes) KubeletConfig() terra.ListValue[NodePoolNodeConfigKubeletConfigAttributes] {
	return terra.ReferenceList[NodePoolNodeConfigKubeletConfigAttributes](nc.ref.Append("kubelet_config"))
}

func (nc NodePoolNodeConfigAttributes) LinuxNodeConfig() terra.ListValue[NodePoolNodeConfigLinuxNodeConfigAttributes] {
	return terra.ReferenceList[NodePoolNodeConfigLinuxNodeConfigAttributes](nc.ref.Append("linux_node_config"))
}

func (nc NodePoolNodeConfigAttributes) LocalNvmeSsdBlockConfig() terra.ListValue[NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes] {
	return terra.ReferenceList[NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes](nc.ref.Append("local_nvme_ssd_block_config"))
}

func (nc NodePoolNodeConfigAttributes) ReservationAffinity() terra.ListValue[NodePoolNodeConfigReservationAffinityAttributes] {
	return terra.ReferenceList[NodePoolNodeConfigReservationAffinityAttributes](nc.ref.Append("reservation_affinity"))
}

func (nc NodePoolNodeConfigAttributes) ShieldedInstanceConfig() terra.ListValue[NodePoolNodeConfigShieldedInstanceConfigAttributes] {
	return terra.ReferenceList[NodePoolNodeConfigShieldedInstanceConfigAttributes](nc.ref.Append("shielded_instance_config"))
}

func (nc NodePoolNodeConfigAttributes) Taint() terra.ListValue[NodePoolNodeConfigTaintAttributes] {
	return terra.ReferenceList[NodePoolNodeConfigTaintAttributes](nc.ref.Append("taint"))
}

func (nc NodePoolNodeConfigAttributes) WorkloadMetadataConfig() terra.ListValue[NodePoolNodeConfigWorkloadMetadataConfigAttributes] {
	return terra.ReferenceList[NodePoolNodeConfigWorkloadMetadataConfigAttributes](nc.ref.Append("workload_metadata_config"))
}

type NodePoolNodeConfigGcfsConfigAttributes struct {
	ref terra.Reference
}

func (gc NodePoolNodeConfigGcfsConfigAttributes) InternalRef() terra.Reference {
	return gc.ref
}

func (gc NodePoolNodeConfigGcfsConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigGcfsConfigAttributes {
	return NodePoolNodeConfigGcfsConfigAttributes{ref: ref}
}

func (gc NodePoolNodeConfigGcfsConfigAttributes) InternalTokens() hclwrite.Tokens {
	return gc.ref.InternalTokens()
}

func (gc NodePoolNodeConfigGcfsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(gc.ref.Append("enabled"))
}

type NodePoolNodeConfigGuestAcceleratorAttributes struct {
	ref terra.Reference
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) InternalRef() terra.Reference {
	return ga.ref
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigGuestAcceleratorAttributes {
	return NodePoolNodeConfigGuestAcceleratorAttributes{ref: ref}
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) InternalTokens() hclwrite.Tokens {
	return ga.ref.InternalTokens()
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) Count() terra.NumberValue {
	return terra.ReferenceNumber(ga.ref.Append("count"))
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) GpuPartitionSize() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("gpu_partition_size"))
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("type"))
}

func (ga NodePoolNodeConfigGuestAcceleratorAttributes) GpuSharingConfig() terra.ListValue[NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes] {
	return terra.ReferenceList[NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes](ga.ref.Append("gpu_sharing_config"))
}

type NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes struct {
	ref terra.Reference
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalRef() terra.Reference {
	return gsc.ref
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes {
	return NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes{ref: ref}
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return gsc.ref.InternalTokens()
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) GpuSharingStrategy() terra.StringValue {
	return terra.ReferenceString(gsc.ref.Append("gpu_sharing_strategy"))
}

func (gsc NodePoolNodeConfigGuestAcceleratorGpuSharingConfigAttributes) MaxSharedClientsPerGpu() terra.NumberValue {
	return terra.ReferenceNumber(gsc.ref.Append("max_shared_clients_per_gpu"))
}

type NodePoolNodeConfigGvnicAttributes struct {
	ref terra.Reference
}

func (g NodePoolNodeConfigGvnicAttributes) InternalRef() terra.Reference {
	return g.ref
}

func (g NodePoolNodeConfigGvnicAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigGvnicAttributes {
	return NodePoolNodeConfigGvnicAttributes{ref: ref}
}

func (g NodePoolNodeConfigGvnicAttributes) InternalTokens() hclwrite.Tokens {
	return g.ref.InternalTokens()
}

func (g NodePoolNodeConfigGvnicAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(g.ref.Append("enabled"))
}

type NodePoolNodeConfigKubeletConfigAttributes struct {
	ref terra.Reference
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) InternalRef() terra.Reference {
	return kc.ref
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigKubeletConfigAttributes {
	return NodePoolNodeConfigKubeletConfigAttributes{ref: ref}
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) InternalTokens() hclwrite.Tokens {
	return kc.ref.InternalTokens()
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) CpuCfsQuota() terra.BoolValue {
	return terra.ReferenceBool(kc.ref.Append("cpu_cfs_quota"))
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) CpuCfsQuotaPeriod() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("cpu_cfs_quota_period"))
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) CpuManagerPolicy() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("cpu_manager_policy"))
}

func (kc NodePoolNodeConfigKubeletConfigAttributes) PodPidsLimit() terra.NumberValue {
	return terra.ReferenceNumber(kc.ref.Append("pod_pids_limit"))
}

type NodePoolNodeConfigLinuxNodeConfigAttributes struct {
	ref terra.Reference
}

func (lnc NodePoolNodeConfigLinuxNodeConfigAttributes) InternalRef() terra.Reference {
	return lnc.ref
}

func (lnc NodePoolNodeConfigLinuxNodeConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigLinuxNodeConfigAttributes {
	return NodePoolNodeConfigLinuxNodeConfigAttributes{ref: ref}
}

func (lnc NodePoolNodeConfigLinuxNodeConfigAttributes) InternalTokens() hclwrite.Tokens {
	return lnc.ref.InternalTokens()
}

func (lnc NodePoolNodeConfigLinuxNodeConfigAttributes) Sysctls() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lnc.ref.Append("sysctls"))
}

type NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes struct {
	ref terra.Reference
}

func (lnsbc NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes) InternalRef() terra.Reference {
	return lnsbc.ref
}

func (lnsbc NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes {
	return NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes{ref: ref}
}

func (lnsbc NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes) InternalTokens() hclwrite.Tokens {
	return lnsbc.ref.InternalTokens()
}

func (lnsbc NodePoolNodeConfigLocalNvmeSsdBlockConfigAttributes) LocalSsdCount() terra.NumberValue {
	return terra.ReferenceNumber(lnsbc.ref.Append("local_ssd_count"))
}

type NodePoolNodeConfigReservationAffinityAttributes struct {
	ref terra.Reference
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) InternalRef() terra.Reference {
	return ra.ref
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigReservationAffinityAttributes {
	return NodePoolNodeConfigReservationAffinityAttributes{ref: ref}
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) InternalTokens() hclwrite.Tokens {
	return ra.ref.InternalTokens()
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) ConsumeReservationType() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("consume_reservation_type"))
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) Key() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("key"))
}

func (ra NodePoolNodeConfigReservationAffinityAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ra.ref.Append("values"))
}

type NodePoolNodeConfigShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) InternalRef() terra.Reference {
	return sic.ref
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigShieldedInstanceConfigAttributes {
	return NodePoolNodeConfigShieldedInstanceConfigAttributes{ref: ref}
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) InternalTokens() hclwrite.Tokens {
	return sic.ref.InternalTokens()
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic NodePoolNodeConfigShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceBool(sic.ref.Append("enable_secure_boot"))
}

type NodePoolNodeConfigTaintAttributes struct {
	ref terra.Reference
}

func (t NodePoolNodeConfigTaintAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t NodePoolNodeConfigTaintAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigTaintAttributes {
	return NodePoolNodeConfigTaintAttributes{ref: ref}
}

func (t NodePoolNodeConfigTaintAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t NodePoolNodeConfigTaintAttributes) Effect() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("effect"))
}

func (t NodePoolNodeConfigTaintAttributes) Key() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("key"))
}

func (t NodePoolNodeConfigTaintAttributes) Value() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("value"))
}

type NodePoolNodeConfigWorkloadMetadataConfigAttributes struct {
	ref terra.Reference
}

func (wmc NodePoolNodeConfigWorkloadMetadataConfigAttributes) InternalRef() terra.Reference {
	return wmc.ref
}

func (wmc NodePoolNodeConfigWorkloadMetadataConfigAttributes) InternalWithRef(ref terra.Reference) NodePoolNodeConfigWorkloadMetadataConfigAttributes {
	return NodePoolNodeConfigWorkloadMetadataConfigAttributes{ref: ref}
}

func (wmc NodePoolNodeConfigWorkloadMetadataConfigAttributes) InternalTokens() hclwrite.Tokens {
	return wmc.ref.InternalTokens()
}

func (wmc NodePoolNodeConfigWorkloadMetadataConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceString(wmc.ref.Append("mode"))
}

type PlacementPolicyAttributes struct {
	ref terra.Reference
}

func (pp PlacementPolicyAttributes) InternalRef() terra.Reference {
	return pp.ref
}

func (pp PlacementPolicyAttributes) InternalWithRef(ref terra.Reference) PlacementPolicyAttributes {
	return PlacementPolicyAttributes{ref: ref}
}

func (pp PlacementPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return pp.ref.InternalTokens()
}

func (pp PlacementPolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceString(pp.ref.Append("type"))
}

type NodePoolUpgradeSettingsAttributes struct {
	ref terra.Reference
}

func (us NodePoolUpgradeSettingsAttributes) InternalRef() terra.Reference {
	return us.ref
}

func (us NodePoolUpgradeSettingsAttributes) InternalWithRef(ref terra.Reference) NodePoolUpgradeSettingsAttributes {
	return NodePoolUpgradeSettingsAttributes{ref: ref}
}

func (us NodePoolUpgradeSettingsAttributes) InternalTokens() hclwrite.Tokens {
	return us.ref.InternalTokens()
}

func (us NodePoolUpgradeSettingsAttributes) MaxSurge() terra.NumberValue {
	return terra.ReferenceNumber(us.ref.Append("max_surge"))
}

func (us NodePoolUpgradeSettingsAttributes) MaxUnavailable() terra.NumberValue {
	return terra.ReferenceNumber(us.ref.Append("max_unavailable"))
}

func (us NodePoolUpgradeSettingsAttributes) Strategy() terra.StringValue {
	return terra.ReferenceString(us.ref.Append("strategy"))
}

func (us NodePoolUpgradeSettingsAttributes) BlueGreenSettings() terra.ListValue[NodePoolUpgradeSettingsBlueGreenSettingsAttributes] {
	return terra.ReferenceList[NodePoolUpgradeSettingsBlueGreenSettingsAttributes](us.ref.Append("blue_green_settings"))
}

type NodePoolUpgradeSettingsBlueGreenSettingsAttributes struct {
	ref terra.Reference
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) InternalRef() terra.Reference {
	return bgs.ref
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) InternalWithRef(ref terra.Reference) NodePoolUpgradeSettingsBlueGreenSettingsAttributes {
	return NodePoolUpgradeSettingsBlueGreenSettingsAttributes{ref: ref}
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) InternalTokens() hclwrite.Tokens {
	return bgs.ref.InternalTokens()
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) NodePoolSoakDuration() terra.StringValue {
	return terra.ReferenceString(bgs.ref.Append("node_pool_soak_duration"))
}

func (bgs NodePoolUpgradeSettingsBlueGreenSettingsAttributes) StandardRolloutPolicy() terra.ListValue[NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes] {
	return terra.ReferenceList[NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes](bgs.ref.Append("standard_rollout_policy"))
}

type NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes struct {
	ref terra.Reference
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalRef() terra.Reference {
	return srp.ref
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalWithRef(ref terra.Reference) NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes {
	return NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes{ref: ref}
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return srp.ref.InternalTokens()
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchNodeCount() terra.NumberValue {
	return terra.ReferenceNumber(srp.ref.Append("batch_node_count"))
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchPercentage() terra.NumberValue {
	return terra.ReferenceNumber(srp.ref.Append("batch_percentage"))
}

func (srp NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyAttributes) BatchSoakDuration() terra.StringValue {
	return terra.ReferenceString(srp.ref.Append("batch_soak_duration"))
}

type NodePoolDefaultsAttributes struct {
	ref terra.Reference
}

func (npd NodePoolDefaultsAttributes) InternalRef() terra.Reference {
	return npd.ref
}

func (npd NodePoolDefaultsAttributes) InternalWithRef(ref terra.Reference) NodePoolDefaultsAttributes {
	return NodePoolDefaultsAttributes{ref: ref}
}

func (npd NodePoolDefaultsAttributes) InternalTokens() hclwrite.Tokens {
	return npd.ref.InternalTokens()
}

func (npd NodePoolDefaultsAttributes) NodeConfigDefaults() terra.ListValue[NodeConfigDefaultsAttributes] {
	return terra.ReferenceList[NodeConfigDefaultsAttributes](npd.ref.Append("node_config_defaults"))
}

type NodeConfigDefaultsAttributes struct {
	ref terra.Reference
}

func (ncd NodeConfigDefaultsAttributes) InternalRef() terra.Reference {
	return ncd.ref
}

func (ncd NodeConfigDefaultsAttributes) InternalWithRef(ref terra.Reference) NodeConfigDefaultsAttributes {
	return NodeConfigDefaultsAttributes{ref: ref}
}

func (ncd NodeConfigDefaultsAttributes) InternalTokens() hclwrite.Tokens {
	return ncd.ref.InternalTokens()
}

func (ncd NodeConfigDefaultsAttributes) LoggingVariant() terra.StringValue {
	return terra.ReferenceString(ncd.ref.Append("logging_variant"))
}

type NotificationConfigAttributes struct {
	ref terra.Reference
}

func (nc NotificationConfigAttributes) InternalRef() terra.Reference {
	return nc.ref
}

func (nc NotificationConfigAttributes) InternalWithRef(ref terra.Reference) NotificationConfigAttributes {
	return NotificationConfigAttributes{ref: ref}
}

func (nc NotificationConfigAttributes) InternalTokens() hclwrite.Tokens {
	return nc.ref.InternalTokens()
}

func (nc NotificationConfigAttributes) Pubsub() terra.ListValue[PubsubAttributes] {
	return terra.ReferenceList[PubsubAttributes](nc.ref.Append("pubsub"))
}

type PubsubAttributes struct {
	ref terra.Reference
}

func (p PubsubAttributes) InternalRef() terra.Reference {
	return p.ref
}

func (p PubsubAttributes) InternalWithRef(ref terra.Reference) PubsubAttributes {
	return PubsubAttributes{ref: ref}
}

func (p PubsubAttributes) InternalTokens() hclwrite.Tokens {
	return p.ref.InternalTokens()
}

func (p PubsubAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(p.ref.Append("enabled"))
}

func (p PubsubAttributes) Topic() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("topic"))
}

func (p PubsubAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceList[FilterAttributes](p.ref.Append("filter"))
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() terra.Reference {
	return f.ref
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() hclwrite.Tokens {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) EventType() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](f.ref.Append("event_type"))
}

type PrivateClusterConfigAttributes struct {
	ref terra.Reference
}

func (pcc PrivateClusterConfigAttributes) InternalRef() terra.Reference {
	return pcc.ref
}

func (pcc PrivateClusterConfigAttributes) InternalWithRef(ref terra.Reference) PrivateClusterConfigAttributes {
	return PrivateClusterConfigAttributes{ref: ref}
}

func (pcc PrivateClusterConfigAttributes) InternalTokens() hclwrite.Tokens {
	return pcc.ref.InternalTokens()
}

func (pcc PrivateClusterConfigAttributes) EnablePrivateEndpoint() terra.BoolValue {
	return terra.ReferenceBool(pcc.ref.Append("enable_private_endpoint"))
}

func (pcc PrivateClusterConfigAttributes) EnablePrivateNodes() terra.BoolValue {
	return terra.ReferenceBool(pcc.ref.Append("enable_private_nodes"))
}

func (pcc PrivateClusterConfigAttributes) MasterIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceString(pcc.ref.Append("master_ipv4_cidr_block"))
}

func (pcc PrivateClusterConfigAttributes) PeeringName() terra.StringValue {
	return terra.ReferenceString(pcc.ref.Append("peering_name"))
}

func (pcc PrivateClusterConfigAttributes) PrivateEndpoint() terra.StringValue {
	return terra.ReferenceString(pcc.ref.Append("private_endpoint"))
}

func (pcc PrivateClusterConfigAttributes) PrivateEndpointSubnetwork() terra.StringValue {
	return terra.ReferenceString(pcc.ref.Append("private_endpoint_subnetwork"))
}

func (pcc PrivateClusterConfigAttributes) PublicEndpoint() terra.StringValue {
	return terra.ReferenceString(pcc.ref.Append("public_endpoint"))
}

func (pcc PrivateClusterConfigAttributes) MasterGlobalAccessConfig() terra.ListValue[MasterGlobalAccessConfigAttributes] {
	return terra.ReferenceList[MasterGlobalAccessConfigAttributes](pcc.ref.Append("master_global_access_config"))
}

type MasterGlobalAccessConfigAttributes struct {
	ref terra.Reference
}

func (mgac MasterGlobalAccessConfigAttributes) InternalRef() terra.Reference {
	return mgac.ref
}

func (mgac MasterGlobalAccessConfigAttributes) InternalWithRef(ref terra.Reference) MasterGlobalAccessConfigAttributes {
	return MasterGlobalAccessConfigAttributes{ref: ref}
}

func (mgac MasterGlobalAccessConfigAttributes) InternalTokens() hclwrite.Tokens {
	return mgac.ref.InternalTokens()
}

func (mgac MasterGlobalAccessConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(mgac.ref.Append("enabled"))
}

type ReleaseChannelAttributes struct {
	ref terra.Reference
}

func (rc ReleaseChannelAttributes) InternalRef() terra.Reference {
	return rc.ref
}

func (rc ReleaseChannelAttributes) InternalWithRef(ref terra.Reference) ReleaseChannelAttributes {
	return ReleaseChannelAttributes{ref: ref}
}

func (rc ReleaseChannelAttributes) InternalTokens() hclwrite.Tokens {
	return rc.ref.InternalTokens()
}

func (rc ReleaseChannelAttributes) Channel() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("channel"))
}

type ResourceUsageExportConfigAttributes struct {
	ref terra.Reference
}

func (ruec ResourceUsageExportConfigAttributes) InternalRef() terra.Reference {
	return ruec.ref
}

func (ruec ResourceUsageExportConfigAttributes) InternalWithRef(ref terra.Reference) ResourceUsageExportConfigAttributes {
	return ResourceUsageExportConfigAttributes{ref: ref}
}

func (ruec ResourceUsageExportConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ruec.ref.InternalTokens()
}

func (ruec ResourceUsageExportConfigAttributes) EnableNetworkEgressMetering() terra.BoolValue {
	return terra.ReferenceBool(ruec.ref.Append("enable_network_egress_metering"))
}

func (ruec ResourceUsageExportConfigAttributes) EnableResourceConsumptionMetering() terra.BoolValue {
	return terra.ReferenceBool(ruec.ref.Append("enable_resource_consumption_metering"))
}

func (ruec ResourceUsageExportConfigAttributes) BigqueryDestination() terra.ListValue[BigqueryDestinationAttributes] {
	return terra.ReferenceList[BigqueryDestinationAttributes](ruec.ref.Append("bigquery_destination"))
}

type BigqueryDestinationAttributes struct {
	ref terra.Reference
}

func (bd BigqueryDestinationAttributes) InternalRef() terra.Reference {
	return bd.ref
}

func (bd BigqueryDestinationAttributes) InternalWithRef(ref terra.Reference) BigqueryDestinationAttributes {
	return BigqueryDestinationAttributes{ref: ref}
}

func (bd BigqueryDestinationAttributes) InternalTokens() hclwrite.Tokens {
	return bd.ref.InternalTokens()
}

func (bd BigqueryDestinationAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceString(bd.ref.Append("dataset_id"))
}

type ServiceExternalIpsConfigAttributes struct {
	ref terra.Reference
}

func (seic ServiceExternalIpsConfigAttributes) InternalRef() terra.Reference {
	return seic.ref
}

func (seic ServiceExternalIpsConfigAttributes) InternalWithRef(ref terra.Reference) ServiceExternalIpsConfigAttributes {
	return ServiceExternalIpsConfigAttributes{ref: ref}
}

func (seic ServiceExternalIpsConfigAttributes) InternalTokens() hclwrite.Tokens {
	return seic.ref.InternalTokens()
}

func (seic ServiceExternalIpsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(seic.ref.Append("enabled"))
}

type VerticalPodAutoscalingAttributes struct {
	ref terra.Reference
}

func (vpa VerticalPodAutoscalingAttributes) InternalRef() terra.Reference {
	return vpa.ref
}

func (vpa VerticalPodAutoscalingAttributes) InternalWithRef(ref terra.Reference) VerticalPodAutoscalingAttributes {
	return VerticalPodAutoscalingAttributes{ref: ref}
}

func (vpa VerticalPodAutoscalingAttributes) InternalTokens() hclwrite.Tokens {
	return vpa.ref.InternalTokens()
}

func (vpa VerticalPodAutoscalingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(vpa.ref.Append("enabled"))
}

type WorkloadIdentityConfigAttributes struct {
	ref terra.Reference
}

func (wic WorkloadIdentityConfigAttributes) InternalRef() terra.Reference {
	return wic.ref
}

func (wic WorkloadIdentityConfigAttributes) InternalWithRef(ref terra.Reference) WorkloadIdentityConfigAttributes {
	return WorkloadIdentityConfigAttributes{ref: ref}
}

func (wic WorkloadIdentityConfigAttributes) InternalTokens() hclwrite.Tokens {
	return wic.ref.InternalTokens()
}

func (wic WorkloadIdentityConfigAttributes) WorkloadPool() terra.StringValue {
	return terra.ReferenceString(wic.ref.Append("workload_pool"))
}

type AddonsConfigState struct {
	CloudrunConfig                   []CloudrunConfigState                   `json:"cloudrun_config"`
	ConfigConnectorConfig            []ConfigConnectorConfigState            `json:"config_connector_config"`
	DnsCacheConfig                   []DnsCacheConfigState                   `json:"dns_cache_config"`
	GcePersistentDiskCsiDriverConfig []GcePersistentDiskCsiDriverConfigState `json:"gce_persistent_disk_csi_driver_config"`
	GcpFilestoreCsiDriverConfig      []GcpFilestoreCsiDriverConfigState      `json:"gcp_filestore_csi_driver_config"`
	GkeBackupAgentConfig             []GkeBackupAgentConfigState             `json:"gke_backup_agent_config"`
	HorizontalPodAutoscaling         []HorizontalPodAutoscalingState         `json:"horizontal_pod_autoscaling"`
	HttpLoadBalancing                []HttpLoadBalancingState                `json:"http_load_balancing"`
	NetworkPolicyConfig              []NetworkPolicyConfigState              `json:"network_policy_config"`
}

type CloudrunConfigState struct {
	Disabled         bool   `json:"disabled"`
	LoadBalancerType string `json:"load_balancer_type"`
}

type ConfigConnectorConfigState struct {
	Enabled bool `json:"enabled"`
}

type DnsCacheConfigState struct {
	Enabled bool `json:"enabled"`
}

type GcePersistentDiskCsiDriverConfigState struct {
	Enabled bool `json:"enabled"`
}

type GcpFilestoreCsiDriverConfigState struct {
	Enabled bool `json:"enabled"`
}

type GkeBackupAgentConfigState struct {
	Enabled bool `json:"enabled"`
}

type HorizontalPodAutoscalingState struct {
	Disabled bool `json:"disabled"`
}

type HttpLoadBalancingState struct {
	Disabled bool `json:"disabled"`
}

type NetworkPolicyConfigState struct {
	Disabled bool `json:"disabled"`
}

type AuthenticatorGroupsConfigState struct {
	SecurityGroup string `json:"security_group"`
}

type BinaryAuthorizationState struct {
	Enabled        bool   `json:"enabled"`
	EvaluationMode string `json:"evaluation_mode"`
}

type ClusterAutoscalingState struct {
	Enabled                  bool                            `json:"enabled"`
	AutoProvisioningDefaults []AutoProvisioningDefaultsState `json:"auto_provisioning_defaults"`
	ResourceLimits           []ResourceLimitsState           `json:"resource_limits"`
}

type AutoProvisioningDefaultsState struct {
	BootDiskKmsKey         string                                                `json:"boot_disk_kms_key"`
	DiskSize               float64                                               `json:"disk_size"`
	DiskType               string                                                `json:"disk_type"`
	ImageType              string                                                `json:"image_type"`
	MinCpuPlatform         string                                                `json:"min_cpu_platform"`
	OauthScopes            []string                                              `json:"oauth_scopes"`
	ServiceAccount         string                                                `json:"service_account"`
	Management             []AutoProvisioningDefaultsManagementState             `json:"management"`
	ShieldedInstanceConfig []AutoProvisioningDefaultsShieldedInstanceConfigState `json:"shielded_instance_config"`
	UpgradeSettings        []AutoProvisioningDefaultsUpgradeSettingsState        `json:"upgrade_settings"`
}

type AutoProvisioningDefaultsManagementState struct {
	AutoRepair     bool                  `json:"auto_repair"`
	AutoUpgrade    bool                  `json:"auto_upgrade"`
	UpgradeOptions []UpgradeOptionsState `json:"upgrade_options"`
}

type UpgradeOptionsState struct {
	AutoUpgradeStartTime string `json:"auto_upgrade_start_time"`
	Description          string `json:"description"`
}

type AutoProvisioningDefaultsShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
}

type AutoProvisioningDefaultsUpgradeSettingsState struct {
	MaxSurge          float64                                                         `json:"max_surge"`
	MaxUnavailable    float64                                                         `json:"max_unavailable"`
	Strategy          string                                                          `json:"strategy"`
	BlueGreenSettings []AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsState `json:"blue_green_settings"`
}

type AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsState struct {
	NodePoolSoakDuration  string                                                                               `json:"node_pool_soak_duration"`
	StandardRolloutPolicy []AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyState `json:"standard_rollout_policy"`
}

type AutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyState struct {
	BatchNodeCount    float64 `json:"batch_node_count"`
	BatchPercentage   float64 `json:"batch_percentage"`
	BatchSoakDuration string  `json:"batch_soak_duration"`
}

type ResourceLimitsState struct {
	Maximum      float64 `json:"maximum"`
	Minimum      float64 `json:"minimum"`
	ResourceType string  `json:"resource_type"`
}

type ConfidentialNodesState struct {
	Enabled bool `json:"enabled"`
}

type CostManagementConfigState struct {
	Enabled bool `json:"enabled"`
}

type DatabaseEncryptionState struct {
	KeyName string `json:"key_name"`
	State   string `json:"state"`
}

type DefaultSnatStatusState struct {
	Disabled bool `json:"disabled"`
}

type DnsConfigState struct {
	ClusterDns       string `json:"cluster_dns"`
	ClusterDnsDomain string `json:"cluster_dns_domain"`
	ClusterDnsScope  string `json:"cluster_dns_scope"`
}

type GatewayApiConfigState struct {
	Channel string `json:"channel"`
}

type IpAllocationPolicyState struct {
	ClusterIpv4CidrBlock       string `json:"cluster_ipv4_cidr_block"`
	ClusterSecondaryRangeName  string `json:"cluster_secondary_range_name"`
	ServicesIpv4CidrBlock      string `json:"services_ipv4_cidr_block"`
	ServicesSecondaryRangeName string `json:"services_secondary_range_name"`
}

type LoggingConfigState struct {
	EnableComponents []string `json:"enable_components"`
}

type MaintenancePolicyState struct {
	DailyMaintenanceWindow []DailyMaintenanceWindowState `json:"daily_maintenance_window"`
	MaintenanceExclusion   []MaintenanceExclusionState   `json:"maintenance_exclusion"`
	RecurringWindow        []RecurringWindowState        `json:"recurring_window"`
}

type DailyMaintenanceWindowState struct {
	Duration  string `json:"duration"`
	StartTime string `json:"start_time"`
}

type MaintenanceExclusionState struct {
	EndTime          string                  `json:"end_time"`
	ExclusionName    string                  `json:"exclusion_name"`
	StartTime        string                  `json:"start_time"`
	ExclusionOptions []ExclusionOptionsState `json:"exclusion_options"`
}

type ExclusionOptionsState struct {
	Scope string `json:"scope"`
}

type RecurringWindowState struct {
	EndTime    string `json:"end_time"`
	Recurrence string `json:"recurrence"`
	StartTime  string `json:"start_time"`
}

type MasterAuthState struct {
	ClientCertificate       string                         `json:"client_certificate"`
	ClientKey               string                         `json:"client_key"`
	ClusterCaCertificate    string                         `json:"cluster_ca_certificate"`
	ClientCertificateConfig []ClientCertificateConfigState `json:"client_certificate_config"`
}

type ClientCertificateConfigState struct {
	IssueClientCertificate bool `json:"issue_client_certificate"`
}

type MasterAuthorizedNetworksConfigState struct {
	GcpPublicCidrsAccessEnabled bool              `json:"gcp_public_cidrs_access_enabled"`
	CidrBlocks                  []CidrBlocksState `json:"cidr_blocks"`
}

type CidrBlocksState struct {
	CidrBlock   string `json:"cidr_block"`
	DisplayName string `json:"display_name"`
}

type MeshCertificatesState struct {
	EnableCertificates bool `json:"enable_certificates"`
}

type MonitoringConfigState struct {
	EnableComponents  []string                 `json:"enable_components"`
	ManagedPrometheus []ManagedPrometheusState `json:"managed_prometheus"`
}

type ManagedPrometheusState struct {
	Enabled bool `json:"enabled"`
}

type NetworkPolicyState struct {
	Enabled  bool   `json:"enabled"`
	Provider string `json:"provider"`
}

type NodeConfigState struct {
	BootDiskKmsKey          string                                   `json:"boot_disk_kms_key"`
	DiskSizeGb              float64                                  `json:"disk_size_gb"`
	DiskType                string                                   `json:"disk_type"`
	ImageType               string                                   `json:"image_type"`
	Labels                  map[string]string                        `json:"labels"`
	LocalSsdCount           float64                                  `json:"local_ssd_count"`
	LoggingVariant          string                                   `json:"logging_variant"`
	MachineType             string                                   `json:"machine_type"`
	Metadata                map[string]string                        `json:"metadata"`
	MinCpuPlatform          string                                   `json:"min_cpu_platform"`
	NodeGroup               string                                   `json:"node_group"`
	OauthScopes             []string                                 `json:"oauth_scopes"`
	Preemptible             bool                                     `json:"preemptible"`
	ResourceLabels          map[string]string                        `json:"resource_labels"`
	ServiceAccount          string                                   `json:"service_account"`
	Spot                    bool                                     `json:"spot"`
	Tags                    []string                                 `json:"tags"`
	GcfsConfig              []NodeConfigGcfsConfigState              `json:"gcfs_config"`
	GuestAccelerator        []NodeConfigGuestAcceleratorState        `json:"guest_accelerator"`
	Gvnic                   []NodeConfigGvnicState                   `json:"gvnic"`
	KubeletConfig           []NodeConfigKubeletConfigState           `json:"kubelet_config"`
	LinuxNodeConfig         []NodeConfigLinuxNodeConfigState         `json:"linux_node_config"`
	LocalNvmeSsdBlockConfig []NodeConfigLocalNvmeSsdBlockConfigState `json:"local_nvme_ssd_block_config"`
	ReservationAffinity     []NodeConfigReservationAffinityState     `json:"reservation_affinity"`
	ShieldedInstanceConfig  []NodeConfigShieldedInstanceConfigState  `json:"shielded_instance_config"`
	Taint                   []NodeConfigTaintState                   `json:"taint"`
	WorkloadMetadataConfig  []NodeConfigWorkloadMetadataConfigState  `json:"workload_metadata_config"`
}

type NodeConfigGcfsConfigState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigGuestAcceleratorState struct {
	Count            float64                                           `json:"count"`
	GpuPartitionSize string                                            `json:"gpu_partition_size"`
	Type             string                                            `json:"type"`
	GpuSharingConfig []NodeConfigGuestAcceleratorGpuSharingConfigState `json:"gpu_sharing_config"`
}

type NodeConfigGuestAcceleratorGpuSharingConfigState struct {
	GpuSharingStrategy     string  `json:"gpu_sharing_strategy"`
	MaxSharedClientsPerGpu float64 `json:"max_shared_clients_per_gpu"`
}

type NodeConfigGvnicState struct {
	Enabled bool `json:"enabled"`
}

type NodeConfigKubeletConfigState struct {
	CpuCfsQuota       bool    `json:"cpu_cfs_quota"`
	CpuCfsQuotaPeriod string  `json:"cpu_cfs_quota_period"`
	CpuManagerPolicy  string  `json:"cpu_manager_policy"`
	PodPidsLimit      float64 `json:"pod_pids_limit"`
}

type NodeConfigLinuxNodeConfigState struct {
	Sysctls map[string]string `json:"sysctls"`
}

type NodeConfigLocalNvmeSsdBlockConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodeConfigReservationAffinityState struct {
	ConsumeReservationType string   `json:"consume_reservation_type"`
	Key                    string   `json:"key"`
	Values                 []string `json:"values"`
}

type NodeConfigShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
}

type NodeConfigTaintState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type NodeConfigWorkloadMetadataConfigState struct {
	Mode string `json:"mode"`
}

type NodePoolState struct {
	InitialNodeCount         float64                        `json:"initial_node_count"`
	InstanceGroupUrls        []string                       `json:"instance_group_urls"`
	ManagedInstanceGroupUrls []string                       `json:"managed_instance_group_urls"`
	MaxPodsPerNode           float64                        `json:"max_pods_per_node"`
	Name                     string                         `json:"name"`
	NamePrefix               string                         `json:"name_prefix"`
	NodeCount                float64                        `json:"node_count"`
	NodeLocations            []string                       `json:"node_locations"`
	Version                  string                         `json:"version"`
	Autoscaling              []AutoscalingState             `json:"autoscaling"`
	Management               []NodePoolManagementState      `json:"management"`
	NetworkConfig            []NetworkConfigState           `json:"network_config"`
	NodeConfig               []NodePoolNodeConfigState      `json:"node_config"`
	PlacementPolicy          []PlacementPolicyState         `json:"placement_policy"`
	UpgradeSettings          []NodePoolUpgradeSettingsState `json:"upgrade_settings"`
}

type AutoscalingState struct {
	LocationPolicy    string  `json:"location_policy"`
	MaxNodeCount      float64 `json:"max_node_count"`
	MinNodeCount      float64 `json:"min_node_count"`
	TotalMaxNodeCount float64 `json:"total_max_node_count"`
	TotalMinNodeCount float64 `json:"total_min_node_count"`
}

type NodePoolManagementState struct {
	AutoRepair  bool `json:"auto_repair"`
	AutoUpgrade bool `json:"auto_upgrade"`
}

type NetworkConfigState struct {
	CreatePodRange     bool   `json:"create_pod_range"`
	EnablePrivateNodes bool   `json:"enable_private_nodes"`
	PodIpv4CidrBlock   string `json:"pod_ipv4_cidr_block"`
	PodRange           string `json:"pod_range"`
}

type NodePoolNodeConfigState struct {
	BootDiskKmsKey          string                                           `json:"boot_disk_kms_key"`
	DiskSizeGb              float64                                          `json:"disk_size_gb"`
	DiskType                string                                           `json:"disk_type"`
	ImageType               string                                           `json:"image_type"`
	Labels                  map[string]string                                `json:"labels"`
	LocalSsdCount           float64                                          `json:"local_ssd_count"`
	LoggingVariant          string                                           `json:"logging_variant"`
	MachineType             string                                           `json:"machine_type"`
	Metadata                map[string]string                                `json:"metadata"`
	MinCpuPlatform          string                                           `json:"min_cpu_platform"`
	NodeGroup               string                                           `json:"node_group"`
	OauthScopes             []string                                         `json:"oauth_scopes"`
	Preemptible             bool                                             `json:"preemptible"`
	ResourceLabels          map[string]string                                `json:"resource_labels"`
	ServiceAccount          string                                           `json:"service_account"`
	Spot                    bool                                             `json:"spot"`
	Tags                    []string                                         `json:"tags"`
	GcfsConfig              []NodePoolNodeConfigGcfsConfigState              `json:"gcfs_config"`
	GuestAccelerator        []NodePoolNodeConfigGuestAcceleratorState        `json:"guest_accelerator"`
	Gvnic                   []NodePoolNodeConfigGvnicState                   `json:"gvnic"`
	KubeletConfig           []NodePoolNodeConfigKubeletConfigState           `json:"kubelet_config"`
	LinuxNodeConfig         []NodePoolNodeConfigLinuxNodeConfigState         `json:"linux_node_config"`
	LocalNvmeSsdBlockConfig []NodePoolNodeConfigLocalNvmeSsdBlockConfigState `json:"local_nvme_ssd_block_config"`
	ReservationAffinity     []NodePoolNodeConfigReservationAffinityState     `json:"reservation_affinity"`
	ShieldedInstanceConfig  []NodePoolNodeConfigShieldedInstanceConfigState  `json:"shielded_instance_config"`
	Taint                   []NodePoolNodeConfigTaintState                   `json:"taint"`
	WorkloadMetadataConfig  []NodePoolNodeConfigWorkloadMetadataConfigState  `json:"workload_metadata_config"`
}

type NodePoolNodeConfigGcfsConfigState struct {
	Enabled bool `json:"enabled"`
}

type NodePoolNodeConfigGuestAcceleratorState struct {
	Count            float64                                                   `json:"count"`
	GpuPartitionSize string                                                    `json:"gpu_partition_size"`
	Type             string                                                    `json:"type"`
	GpuSharingConfig []NodePoolNodeConfigGuestAcceleratorGpuSharingConfigState `json:"gpu_sharing_config"`
}

type NodePoolNodeConfigGuestAcceleratorGpuSharingConfigState struct {
	GpuSharingStrategy     string  `json:"gpu_sharing_strategy"`
	MaxSharedClientsPerGpu float64 `json:"max_shared_clients_per_gpu"`
}

type NodePoolNodeConfigGvnicState struct {
	Enabled bool `json:"enabled"`
}

type NodePoolNodeConfigKubeletConfigState struct {
	CpuCfsQuota       bool    `json:"cpu_cfs_quota"`
	CpuCfsQuotaPeriod string  `json:"cpu_cfs_quota_period"`
	CpuManagerPolicy  string  `json:"cpu_manager_policy"`
	PodPidsLimit      float64 `json:"pod_pids_limit"`
}

type NodePoolNodeConfigLinuxNodeConfigState struct {
	Sysctls map[string]string `json:"sysctls"`
}

type NodePoolNodeConfigLocalNvmeSsdBlockConfigState struct {
	LocalSsdCount float64 `json:"local_ssd_count"`
}

type NodePoolNodeConfigReservationAffinityState struct {
	ConsumeReservationType string   `json:"consume_reservation_type"`
	Key                    string   `json:"key"`
	Values                 []string `json:"values"`
}

type NodePoolNodeConfigShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
}

type NodePoolNodeConfigTaintState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type NodePoolNodeConfigWorkloadMetadataConfigState struct {
	Mode string `json:"mode"`
}

type PlacementPolicyState struct {
	Type string `json:"type"`
}

type NodePoolUpgradeSettingsState struct {
	MaxSurge          float64                                         `json:"max_surge"`
	MaxUnavailable    float64                                         `json:"max_unavailable"`
	Strategy          string                                          `json:"strategy"`
	BlueGreenSettings []NodePoolUpgradeSettingsBlueGreenSettingsState `json:"blue_green_settings"`
}

type NodePoolUpgradeSettingsBlueGreenSettingsState struct {
	NodePoolSoakDuration  string                                                               `json:"node_pool_soak_duration"`
	StandardRolloutPolicy []NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyState `json:"standard_rollout_policy"`
}

type NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyState struct {
	BatchNodeCount    float64 `json:"batch_node_count"`
	BatchPercentage   float64 `json:"batch_percentage"`
	BatchSoakDuration string  `json:"batch_soak_duration"`
}

type NodePoolDefaultsState struct {
	NodeConfigDefaults []NodeConfigDefaultsState `json:"node_config_defaults"`
}

type NodeConfigDefaultsState struct {
	LoggingVariant string `json:"logging_variant"`
}

type NotificationConfigState struct {
	Pubsub []PubsubState `json:"pubsub"`
}

type PubsubState struct {
	Enabled bool          `json:"enabled"`
	Topic   string        `json:"topic"`
	Filter  []FilterState `json:"filter"`
}

type FilterState struct {
	EventType []string `json:"event_type"`
}

type PrivateClusterConfigState struct {
	EnablePrivateEndpoint     bool                            `json:"enable_private_endpoint"`
	EnablePrivateNodes        bool                            `json:"enable_private_nodes"`
	MasterIpv4CidrBlock       string                          `json:"master_ipv4_cidr_block"`
	PeeringName               string                          `json:"peering_name"`
	PrivateEndpoint           string                          `json:"private_endpoint"`
	PrivateEndpointSubnetwork string                          `json:"private_endpoint_subnetwork"`
	PublicEndpoint            string                          `json:"public_endpoint"`
	MasterGlobalAccessConfig  []MasterGlobalAccessConfigState `json:"master_global_access_config"`
}

type MasterGlobalAccessConfigState struct {
	Enabled bool `json:"enabled"`
}

type ReleaseChannelState struct {
	Channel string `json:"channel"`
}

type ResourceUsageExportConfigState struct {
	EnableNetworkEgressMetering       bool                       `json:"enable_network_egress_metering"`
	EnableResourceConsumptionMetering bool                       `json:"enable_resource_consumption_metering"`
	BigqueryDestination               []BigqueryDestinationState `json:"bigquery_destination"`
}

type BigqueryDestinationState struct {
	DatasetId string `json:"dataset_id"`
}

type ServiceExternalIpsConfigState struct {
	Enabled bool `json:"enabled"`
}

type VerticalPodAutoscalingState struct {
	Enabled bool `json:"enabled"`
}

type WorkloadIdentityConfigState struct {
	WorkloadPool string `json:"workload_pool"`
}
