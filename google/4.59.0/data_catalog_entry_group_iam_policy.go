// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataCatalogEntryGroupIamPolicy(name string, args DataCatalogEntryGroupIamPolicyArgs) *DataCatalogEntryGroupIamPolicy {
	return &DataCatalogEntryGroupIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataCatalogEntryGroupIamPolicy)(nil)

type DataCatalogEntryGroupIamPolicy struct {
	Name  string
	Args  DataCatalogEntryGroupIamPolicyArgs
	state *dataCatalogEntryGroupIamPolicyState
}

func (dcegip *DataCatalogEntryGroupIamPolicy) Type() string {
	return "google_data_catalog_entry_group_iam_policy"
}

func (dcegip *DataCatalogEntryGroupIamPolicy) LocalName() string {
	return dcegip.Name
}

func (dcegip *DataCatalogEntryGroupIamPolicy) Configuration() interface{} {
	return dcegip.Args
}

func (dcegip *DataCatalogEntryGroupIamPolicy) Attributes() dataCatalogEntryGroupIamPolicyAttributes {
	return dataCatalogEntryGroupIamPolicyAttributes{ref: terra.ReferenceResource(dcegip)}
}

func (dcegip *DataCatalogEntryGroupIamPolicy) ImportState(av io.Reader) error {
	dcegip.state = &dataCatalogEntryGroupIamPolicyState{}
	if err := json.NewDecoder(av).Decode(dcegip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcegip.Type(), dcegip.LocalName(), err)
	}
	return nil
}

func (dcegip *DataCatalogEntryGroupIamPolicy) State() (*dataCatalogEntryGroupIamPolicyState, bool) {
	return dcegip.state, dcegip.state != nil
}

func (dcegip *DataCatalogEntryGroupIamPolicy) StateMust() *dataCatalogEntryGroupIamPolicyState {
	if dcegip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcegip.Type(), dcegip.LocalName()))
	}
	return dcegip.state
}

func (dcegip *DataCatalogEntryGroupIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(dcegip)
}

type DataCatalogEntryGroupIamPolicyArgs struct {
	// EntryGroup: string, required
	EntryGroup terra.StringValue `hcl:"entry_group,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// DependsOn contains resources that DataCatalogEntryGroupIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataCatalogEntryGroupIamPolicyAttributes struct {
	ref terra.Reference
}

func (dcegip dataCatalogEntryGroupIamPolicyAttributes) EntryGroup() terra.StringValue {
	return terra.ReferenceString(dcegip.ref.Append("entry_group"))
}

func (dcegip dataCatalogEntryGroupIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dcegip.ref.Append("etag"))
}

func (dcegip dataCatalogEntryGroupIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dcegip.ref.Append("id"))
}

func (dcegip dataCatalogEntryGroupIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(dcegip.ref.Append("policy_data"))
}

func (dcegip dataCatalogEntryGroupIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dcegip.ref.Append("project"))
}

func (dcegip dataCatalogEntryGroupIamPolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dcegip.ref.Append("region"))
}

type dataCatalogEntryGroupIamPolicyState struct {
	EntryGroup string `json:"entry_group"`
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	Region     string `json:"region"`
}
