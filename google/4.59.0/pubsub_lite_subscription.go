// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	pubsublitesubscription "github.com/golingon/terraproviders/google/4.59.0/pubsublitesubscription"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPubsubLiteSubscription(name string, args PubsubLiteSubscriptionArgs) *PubsubLiteSubscription {
	return &PubsubLiteSubscription{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PubsubLiteSubscription)(nil)

type PubsubLiteSubscription struct {
	Name  string
	Args  PubsubLiteSubscriptionArgs
	state *pubsubLiteSubscriptionState
}

func (pls *PubsubLiteSubscription) Type() string {
	return "google_pubsub_lite_subscription"
}

func (pls *PubsubLiteSubscription) LocalName() string {
	return pls.Name
}

func (pls *PubsubLiteSubscription) Configuration() interface{} {
	return pls.Args
}

func (pls *PubsubLiteSubscription) Attributes() pubsubLiteSubscriptionAttributes {
	return pubsubLiteSubscriptionAttributes{ref: terra.ReferenceResource(pls)}
}

func (pls *PubsubLiteSubscription) ImportState(av io.Reader) error {
	pls.state = &pubsubLiteSubscriptionState{}
	if err := json.NewDecoder(av).Decode(pls.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pls.Type(), pls.LocalName(), err)
	}
	return nil
}

func (pls *PubsubLiteSubscription) State() (*pubsubLiteSubscriptionState, bool) {
	return pls.state, pls.state != nil
}

func (pls *PubsubLiteSubscription) StateMust() *pubsubLiteSubscriptionState {
	if pls.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pls.Type(), pls.LocalName()))
	}
	return pls.state
}

func (pls *PubsubLiteSubscription) DependOn() terra.Reference {
	return terra.ReferenceResource(pls)
}

type PubsubLiteSubscriptionArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// DeliveryConfig: optional
	DeliveryConfig *pubsublitesubscription.DeliveryConfig `hcl:"delivery_config,block"`
	// Timeouts: optional
	Timeouts *pubsublitesubscription.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PubsubLiteSubscription depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type pubsubLiteSubscriptionAttributes struct {
	ref terra.Reference
}

func (pls pubsubLiteSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pls.ref.Append("id"))
}

func (pls pubsubLiteSubscriptionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pls.ref.Append("name"))
}

func (pls pubsubLiteSubscriptionAttributes) Project() terra.StringValue {
	return terra.ReferenceString(pls.ref.Append("project"))
}

func (pls pubsubLiteSubscriptionAttributes) Region() terra.StringValue {
	return terra.ReferenceString(pls.ref.Append("region"))
}

func (pls pubsubLiteSubscriptionAttributes) Topic() terra.StringValue {
	return terra.ReferenceString(pls.ref.Append("topic"))
}

func (pls pubsubLiteSubscriptionAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(pls.ref.Append("zone"))
}

func (pls pubsubLiteSubscriptionAttributes) DeliveryConfig() terra.ListValue[pubsublitesubscription.DeliveryConfigAttributes] {
	return terra.ReferenceList[pubsublitesubscription.DeliveryConfigAttributes](pls.ref.Append("delivery_config"))
}

func (pls pubsubLiteSubscriptionAttributes) Timeouts() pubsublitesubscription.TimeoutsAttributes {
	return terra.ReferenceSingle[pubsublitesubscription.TimeoutsAttributes](pls.ref.Append("timeouts"))
}

type pubsubLiteSubscriptionState struct {
	Id             string                                       `json:"id"`
	Name           string                                       `json:"name"`
	Project        string                                       `json:"project"`
	Region         string                                       `json:"region"`
	Topic          string                                       `json:"topic"`
	Zone           string                                       `json:"zone"`
	DeliveryConfig []pubsublitesubscription.DeliveryConfigState `json:"delivery_config"`
	Timeouts       *pubsublitesubscription.TimeoutsState        `json:"timeouts"`
}
