// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	healthcaredataset "github.com/golingon/terraproviders/google/4.59.0/healthcaredataset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewHealthcareDataset(name string, args HealthcareDatasetArgs) *HealthcareDataset {
	return &HealthcareDataset{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HealthcareDataset)(nil)

type HealthcareDataset struct {
	Name  string
	Args  HealthcareDatasetArgs
	state *healthcareDatasetState
}

func (hd *HealthcareDataset) Type() string {
	return "google_healthcare_dataset"
}

func (hd *HealthcareDataset) LocalName() string {
	return hd.Name
}

func (hd *HealthcareDataset) Configuration() interface{} {
	return hd.Args
}

func (hd *HealthcareDataset) Attributes() healthcareDatasetAttributes {
	return healthcareDatasetAttributes{ref: terra.ReferenceResource(hd)}
}

func (hd *HealthcareDataset) ImportState(av io.Reader) error {
	hd.state = &healthcareDatasetState{}
	if err := json.NewDecoder(av).Decode(hd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hd.Type(), hd.LocalName(), err)
	}
	return nil
}

func (hd *HealthcareDataset) State() (*healthcareDatasetState, bool) {
	return hd.state, hd.state != nil
}

func (hd *HealthcareDataset) StateMust() *healthcareDatasetState {
	if hd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hd.Type(), hd.LocalName()))
	}
	return hd.state
}

func (hd *HealthcareDataset) DependOn() terra.Reference {
	return terra.ReferenceResource(hd)
}

type HealthcareDatasetArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
	// Timeouts: optional
	Timeouts *healthcaredataset.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that HealthcareDataset depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type healthcareDatasetAttributes struct {
	ref terra.Reference
}

func (hd healthcareDatasetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(hd.ref.Append("id"))
}

func (hd healthcareDatasetAttributes) Location() terra.StringValue {
	return terra.ReferenceString(hd.ref.Append("location"))
}

func (hd healthcareDatasetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(hd.ref.Append("name"))
}

func (hd healthcareDatasetAttributes) Project() terra.StringValue {
	return terra.ReferenceString(hd.ref.Append("project"))
}

func (hd healthcareDatasetAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(hd.ref.Append("self_link"))
}

func (hd healthcareDatasetAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceString(hd.ref.Append("time_zone"))
}

func (hd healthcareDatasetAttributes) Timeouts() healthcaredataset.TimeoutsAttributes {
	return terra.ReferenceSingle[healthcaredataset.TimeoutsAttributes](hd.ref.Append("timeouts"))
}

type healthcareDatasetState struct {
	Id       string                           `json:"id"`
	Location string                           `json:"location"`
	Name     string                           `json:"name"`
	Project  string                           `json:"project"`
	SelfLink string                           `json:"self_link"`
	TimeZone string                           `json:"time_zone"`
	Timeouts *healthcaredataset.TimeoutsState `json:"timeouts"`
}
