// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	storagehmackey "github.com/golingon/terraproviders/google/4.59.0/storagehmackey"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStorageHmacKey(name string, args StorageHmacKeyArgs) *StorageHmacKey {
	return &StorageHmacKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageHmacKey)(nil)

type StorageHmacKey struct {
	Name  string
	Args  StorageHmacKeyArgs
	state *storageHmacKeyState
}

func (shk *StorageHmacKey) Type() string {
	return "google_storage_hmac_key"
}

func (shk *StorageHmacKey) LocalName() string {
	return shk.Name
}

func (shk *StorageHmacKey) Configuration() interface{} {
	return shk.Args
}

func (shk *StorageHmacKey) Attributes() storageHmacKeyAttributes {
	return storageHmacKeyAttributes{ref: terra.ReferenceResource(shk)}
}

func (shk *StorageHmacKey) ImportState(av io.Reader) error {
	shk.state = &storageHmacKeyState{}
	if err := json.NewDecoder(av).Decode(shk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", shk.Type(), shk.LocalName(), err)
	}
	return nil
}

func (shk *StorageHmacKey) State() (*storageHmacKeyState, bool) {
	return shk.state, shk.state != nil
}

func (shk *StorageHmacKey) StateMust() *storageHmacKeyState {
	if shk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", shk.Type(), shk.LocalName()))
	}
	return shk.state
}

func (shk *StorageHmacKey) DependOn() terra.Reference {
	return terra.ReferenceResource(shk)
}

type StorageHmacKeyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceAccountEmail: string, required
	ServiceAccountEmail terra.StringValue `hcl:"service_account_email,attr" validate:"required"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// Timeouts: optional
	Timeouts *storagehmackey.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StorageHmacKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storageHmacKeyAttributes struct {
	ref terra.Reference
}

func (shk storageHmacKeyAttributes) AccessId() terra.StringValue {
	return terra.ReferenceString(shk.ref.Append("access_id"))
}

func (shk storageHmacKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(shk.ref.Append("id"))
}

func (shk storageHmacKeyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(shk.ref.Append("project"))
}

func (shk storageHmacKeyAttributes) Secret() terra.StringValue {
	return terra.ReferenceString(shk.ref.Append("secret"))
}

func (shk storageHmacKeyAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceString(shk.ref.Append("service_account_email"))
}

func (shk storageHmacKeyAttributes) State() terra.StringValue {
	return terra.ReferenceString(shk.ref.Append("state"))
}

func (shk storageHmacKeyAttributes) TimeCreated() terra.StringValue {
	return terra.ReferenceString(shk.ref.Append("time_created"))
}

func (shk storageHmacKeyAttributes) Updated() terra.StringValue {
	return terra.ReferenceString(shk.ref.Append("updated"))
}

func (shk storageHmacKeyAttributes) Timeouts() storagehmackey.TimeoutsAttributes {
	return terra.ReferenceSingle[storagehmackey.TimeoutsAttributes](shk.ref.Append("timeouts"))
}

type storageHmacKeyState struct {
	AccessId            string                        `json:"access_id"`
	Id                  string                        `json:"id"`
	Project             string                        `json:"project"`
	Secret              string                        `json:"secret"`
	ServiceAccountEmail string                        `json:"service_account_email"`
	State               string                        `json:"state"`
	TimeCreated         string                        `json:"time_created"`
	Updated             string                        `json:"updated"`
	Timeouts            *storagehmackey.TimeoutsState `json:"timeouts"`
}
