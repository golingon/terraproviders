// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package billingbudget

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AllUpdatesRule struct {
	// DisableDefaultIamRecipients: bool, optional
	DisableDefaultIamRecipients terra.BoolValue `hcl:"disable_default_iam_recipients,attr"`
	// MonitoringNotificationChannels: list of string, optional
	MonitoringNotificationChannels terra.ListValue[terra.StringValue] `hcl:"monitoring_notification_channels,attr"`
	// PubsubTopic: string, optional
	PubsubTopic terra.StringValue `hcl:"pubsub_topic,attr"`
	// SchemaVersion: string, optional
	SchemaVersion terra.StringValue `hcl:"schema_version,attr"`
}

type Amount struct {
	// LastPeriodAmount: bool, optional
	LastPeriodAmount terra.BoolValue `hcl:"last_period_amount,attr"`
	// SpecifiedAmount: optional
	SpecifiedAmount *SpecifiedAmount `hcl:"specified_amount,block"`
}

type SpecifiedAmount struct {
	// CurrencyCode: string, optional
	CurrencyCode terra.StringValue `hcl:"currency_code,attr"`
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Units: string, optional
	Units terra.StringValue `hcl:"units,attr"`
}

type BudgetFilter struct {
	// CalendarPeriod: string, optional
	CalendarPeriod terra.StringValue `hcl:"calendar_period,attr"`
	// CreditTypes: list of string, optional
	CreditTypes terra.ListValue[terra.StringValue] `hcl:"credit_types,attr"`
	// CreditTypesTreatment: string, optional
	CreditTypesTreatment terra.StringValue `hcl:"credit_types_treatment,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Projects: set of string, optional
	Projects terra.SetValue[terra.StringValue] `hcl:"projects,attr"`
	// Services: list of string, optional
	Services terra.ListValue[terra.StringValue] `hcl:"services,attr"`
	// Subaccounts: list of string, optional
	Subaccounts terra.ListValue[terra.StringValue] `hcl:"subaccounts,attr"`
	// CustomPeriod: optional
	CustomPeriod *CustomPeriod `hcl:"custom_period,block"`
}

type CustomPeriod struct {
	// EndDate: optional
	EndDate *EndDate `hcl:"end_date,block"`
	// StartDate: required
	StartDate *StartDate `hcl:"start_date,block" validate:"required"`
}

type EndDate struct {
	// Day: number, required
	Day terra.NumberValue `hcl:"day,attr" validate:"required"`
	// Month: number, required
	Month terra.NumberValue `hcl:"month,attr" validate:"required"`
	// Year: number, required
	Year terra.NumberValue `hcl:"year,attr" validate:"required"`
}

type StartDate struct {
	// Day: number, required
	Day terra.NumberValue `hcl:"day,attr" validate:"required"`
	// Month: number, required
	Month terra.NumberValue `hcl:"month,attr" validate:"required"`
	// Year: number, required
	Year terra.NumberValue `hcl:"year,attr" validate:"required"`
}

type ThresholdRules struct {
	// SpendBasis: string, optional
	SpendBasis terra.StringValue `hcl:"spend_basis,attr"`
	// ThresholdPercent: number, required
	ThresholdPercent terra.NumberValue `hcl:"threshold_percent,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AllUpdatesRuleAttributes struct {
	ref terra.Reference
}

func (aur AllUpdatesRuleAttributes) InternalRef() terra.Reference {
	return aur.ref
}

func (aur AllUpdatesRuleAttributes) InternalWithRef(ref terra.Reference) AllUpdatesRuleAttributes {
	return AllUpdatesRuleAttributes{ref: ref}
}

func (aur AllUpdatesRuleAttributes) InternalTokens() hclwrite.Tokens {
	return aur.ref.InternalTokens()
}

func (aur AllUpdatesRuleAttributes) DisableDefaultIamRecipients() terra.BoolValue {
	return terra.ReferenceBool(aur.ref.Append("disable_default_iam_recipients"))
}

func (aur AllUpdatesRuleAttributes) MonitoringNotificationChannels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](aur.ref.Append("monitoring_notification_channels"))
}

func (aur AllUpdatesRuleAttributes) PubsubTopic() terra.StringValue {
	return terra.ReferenceString(aur.ref.Append("pubsub_topic"))
}

func (aur AllUpdatesRuleAttributes) SchemaVersion() terra.StringValue {
	return terra.ReferenceString(aur.ref.Append("schema_version"))
}

type AmountAttributes struct {
	ref terra.Reference
}

func (a AmountAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a AmountAttributes) InternalWithRef(ref terra.Reference) AmountAttributes {
	return AmountAttributes{ref: ref}
}

func (a AmountAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a AmountAttributes) LastPeriodAmount() terra.BoolValue {
	return terra.ReferenceBool(a.ref.Append("last_period_amount"))
}

func (a AmountAttributes) SpecifiedAmount() terra.ListValue[SpecifiedAmountAttributes] {
	return terra.ReferenceList[SpecifiedAmountAttributes](a.ref.Append("specified_amount"))
}

type SpecifiedAmountAttributes struct {
	ref terra.Reference
}

func (sa SpecifiedAmountAttributes) InternalRef() terra.Reference {
	return sa.ref
}

func (sa SpecifiedAmountAttributes) InternalWithRef(ref terra.Reference) SpecifiedAmountAttributes {
	return SpecifiedAmountAttributes{ref: ref}
}

func (sa SpecifiedAmountAttributes) InternalTokens() hclwrite.Tokens {
	return sa.ref.InternalTokens()
}

func (sa SpecifiedAmountAttributes) CurrencyCode() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("currency_code"))
}

func (sa SpecifiedAmountAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceNumber(sa.ref.Append("nanos"))
}

func (sa SpecifiedAmountAttributes) Units() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("units"))
}

type BudgetFilterAttributes struct {
	ref terra.Reference
}

func (bf BudgetFilterAttributes) InternalRef() terra.Reference {
	return bf.ref
}

func (bf BudgetFilterAttributes) InternalWithRef(ref terra.Reference) BudgetFilterAttributes {
	return BudgetFilterAttributes{ref: ref}
}

func (bf BudgetFilterAttributes) InternalTokens() hclwrite.Tokens {
	return bf.ref.InternalTokens()
}

func (bf BudgetFilterAttributes) CalendarPeriod() terra.StringValue {
	return terra.ReferenceString(bf.ref.Append("calendar_period"))
}

func (bf BudgetFilterAttributes) CreditTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](bf.ref.Append("credit_types"))
}

func (bf BudgetFilterAttributes) CreditTypesTreatment() terra.StringValue {
	return terra.ReferenceString(bf.ref.Append("credit_types_treatment"))
}

func (bf BudgetFilterAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bf.ref.Append("labels"))
}

func (bf BudgetFilterAttributes) Projects() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](bf.ref.Append("projects"))
}

func (bf BudgetFilterAttributes) Services() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](bf.ref.Append("services"))
}

func (bf BudgetFilterAttributes) Subaccounts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](bf.ref.Append("subaccounts"))
}

func (bf BudgetFilterAttributes) CustomPeriod() terra.ListValue[CustomPeriodAttributes] {
	return terra.ReferenceList[CustomPeriodAttributes](bf.ref.Append("custom_period"))
}

type CustomPeriodAttributes struct {
	ref terra.Reference
}

func (cp CustomPeriodAttributes) InternalRef() terra.Reference {
	return cp.ref
}

func (cp CustomPeriodAttributes) InternalWithRef(ref terra.Reference) CustomPeriodAttributes {
	return CustomPeriodAttributes{ref: ref}
}

func (cp CustomPeriodAttributes) InternalTokens() hclwrite.Tokens {
	return cp.ref.InternalTokens()
}

func (cp CustomPeriodAttributes) EndDate() terra.ListValue[EndDateAttributes] {
	return terra.ReferenceList[EndDateAttributes](cp.ref.Append("end_date"))
}

func (cp CustomPeriodAttributes) StartDate() terra.ListValue[StartDateAttributes] {
	return terra.ReferenceList[StartDateAttributes](cp.ref.Append("start_date"))
}

type EndDateAttributes struct {
	ref terra.Reference
}

func (ed EndDateAttributes) InternalRef() terra.Reference {
	return ed.ref
}

func (ed EndDateAttributes) InternalWithRef(ref terra.Reference) EndDateAttributes {
	return EndDateAttributes{ref: ref}
}

func (ed EndDateAttributes) InternalTokens() hclwrite.Tokens {
	return ed.ref.InternalTokens()
}

func (ed EndDateAttributes) Day() terra.NumberValue {
	return terra.ReferenceNumber(ed.ref.Append("day"))
}

func (ed EndDateAttributes) Month() terra.NumberValue {
	return terra.ReferenceNumber(ed.ref.Append("month"))
}

func (ed EndDateAttributes) Year() terra.NumberValue {
	return terra.ReferenceNumber(ed.ref.Append("year"))
}

type StartDateAttributes struct {
	ref terra.Reference
}

func (sd StartDateAttributes) InternalRef() terra.Reference {
	return sd.ref
}

func (sd StartDateAttributes) InternalWithRef(ref terra.Reference) StartDateAttributes {
	return StartDateAttributes{ref: ref}
}

func (sd StartDateAttributes) InternalTokens() hclwrite.Tokens {
	return sd.ref.InternalTokens()
}

func (sd StartDateAttributes) Day() terra.NumberValue {
	return terra.ReferenceNumber(sd.ref.Append("day"))
}

func (sd StartDateAttributes) Month() terra.NumberValue {
	return terra.ReferenceNumber(sd.ref.Append("month"))
}

func (sd StartDateAttributes) Year() terra.NumberValue {
	return terra.ReferenceNumber(sd.ref.Append("year"))
}

type ThresholdRulesAttributes struct {
	ref terra.Reference
}

func (tr ThresholdRulesAttributes) InternalRef() terra.Reference {
	return tr.ref
}

func (tr ThresholdRulesAttributes) InternalWithRef(ref terra.Reference) ThresholdRulesAttributes {
	return ThresholdRulesAttributes{ref: ref}
}

func (tr ThresholdRulesAttributes) InternalTokens() hclwrite.Tokens {
	return tr.ref.InternalTokens()
}

func (tr ThresholdRulesAttributes) SpendBasis() terra.StringValue {
	return terra.ReferenceString(tr.ref.Append("spend_basis"))
}

func (tr ThresholdRulesAttributes) ThresholdPercent() terra.NumberValue {
	return terra.ReferenceNumber(tr.ref.Append("threshold_percent"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type AllUpdatesRuleState struct {
	DisableDefaultIamRecipients    bool     `json:"disable_default_iam_recipients"`
	MonitoringNotificationChannels []string `json:"monitoring_notification_channels"`
	PubsubTopic                    string   `json:"pubsub_topic"`
	SchemaVersion                  string   `json:"schema_version"`
}

type AmountState struct {
	LastPeriodAmount bool                   `json:"last_period_amount"`
	SpecifiedAmount  []SpecifiedAmountState `json:"specified_amount"`
}

type SpecifiedAmountState struct {
	CurrencyCode string  `json:"currency_code"`
	Nanos        float64 `json:"nanos"`
	Units        string  `json:"units"`
}

type BudgetFilterState struct {
	CalendarPeriod       string              `json:"calendar_period"`
	CreditTypes          []string            `json:"credit_types"`
	CreditTypesTreatment string              `json:"credit_types_treatment"`
	Labels               map[string]string   `json:"labels"`
	Projects             []string            `json:"projects"`
	Services             []string            `json:"services"`
	Subaccounts          []string            `json:"subaccounts"`
	CustomPeriod         []CustomPeriodState `json:"custom_period"`
}

type CustomPeriodState struct {
	EndDate   []EndDateState   `json:"end_date"`
	StartDate []StartDateState `json:"start_date"`
}

type EndDateState struct {
	Day   float64 `json:"day"`
	Month float64 `json:"month"`
	Year  float64 `json:"year"`
}

type StartDateState struct {
	Day   float64 `json:"day"`
	Month float64 `json:"month"`
	Year  float64 `json:"year"`
}

type ThresholdRulesState struct {
	SpendBasis       string  `json:"spend_basis"`
	ThresholdPercent float64 `json:"threshold_percent"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
