// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGkeHubMembershipIamPolicy(name string, args GkeHubMembershipIamPolicyArgs) *GkeHubMembershipIamPolicy {
	return &GkeHubMembershipIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeHubMembershipIamPolicy)(nil)

type GkeHubMembershipIamPolicy struct {
	Name  string
	Args  GkeHubMembershipIamPolicyArgs
	state *gkeHubMembershipIamPolicyState
}

func (ghmip *GkeHubMembershipIamPolicy) Type() string {
	return "google_gke_hub_membership_iam_policy"
}

func (ghmip *GkeHubMembershipIamPolicy) LocalName() string {
	return ghmip.Name
}

func (ghmip *GkeHubMembershipIamPolicy) Configuration() interface{} {
	return ghmip.Args
}

func (ghmip *GkeHubMembershipIamPolicy) Attributes() gkeHubMembershipIamPolicyAttributes {
	return gkeHubMembershipIamPolicyAttributes{ref: terra.ReferenceResource(ghmip)}
}

func (ghmip *GkeHubMembershipIamPolicy) ImportState(av io.Reader) error {
	ghmip.state = &gkeHubMembershipIamPolicyState{}
	if err := json.NewDecoder(av).Decode(ghmip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ghmip.Type(), ghmip.LocalName(), err)
	}
	return nil
}

func (ghmip *GkeHubMembershipIamPolicy) State() (*gkeHubMembershipIamPolicyState, bool) {
	return ghmip.state, ghmip.state != nil
}

func (ghmip *GkeHubMembershipIamPolicy) StateMust() *gkeHubMembershipIamPolicyState {
	if ghmip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ghmip.Type(), ghmip.LocalName()))
	}
	return ghmip.state
}

func (ghmip *GkeHubMembershipIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ghmip)
}

type GkeHubMembershipIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MembershipId: string, required
	MembershipId terra.StringValue `hcl:"membership_id,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that GkeHubMembershipIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type gkeHubMembershipIamPolicyAttributes struct {
	ref terra.Reference
}

func (ghmip gkeHubMembershipIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ghmip.ref.Append("etag"))
}

func (ghmip gkeHubMembershipIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ghmip.ref.Append("id"))
}

func (ghmip gkeHubMembershipIamPolicyAttributes) MembershipId() terra.StringValue {
	return terra.ReferenceString(ghmip.ref.Append("membership_id"))
}

func (ghmip gkeHubMembershipIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(ghmip.ref.Append("policy_data"))
}

func (ghmip gkeHubMembershipIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ghmip.ref.Append("project"))
}

type gkeHubMembershipIamPolicyState struct {
	Etag         string `json:"etag"`
	Id           string `json:"id"`
	MembershipId string `json:"membership_id"`
	PolicyData   string `json:"policy_data"`
	Project      string `json:"project"`
}
