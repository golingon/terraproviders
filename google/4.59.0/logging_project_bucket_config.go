// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	loggingprojectbucketconfig "github.com/golingon/terraproviders/google/4.59.0/loggingprojectbucketconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLoggingProjectBucketConfig(name string, args LoggingProjectBucketConfigArgs) *LoggingProjectBucketConfig {
	return &LoggingProjectBucketConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LoggingProjectBucketConfig)(nil)

type LoggingProjectBucketConfig struct {
	Name  string
	Args  LoggingProjectBucketConfigArgs
	state *loggingProjectBucketConfigState
}

func (lpbc *LoggingProjectBucketConfig) Type() string {
	return "google_logging_project_bucket_config"
}

func (lpbc *LoggingProjectBucketConfig) LocalName() string {
	return lpbc.Name
}

func (lpbc *LoggingProjectBucketConfig) Configuration() interface{} {
	return lpbc.Args
}

func (lpbc *LoggingProjectBucketConfig) Attributes() loggingProjectBucketConfigAttributes {
	return loggingProjectBucketConfigAttributes{ref: terra.ReferenceResource(lpbc)}
}

func (lpbc *LoggingProjectBucketConfig) ImportState(av io.Reader) error {
	lpbc.state = &loggingProjectBucketConfigState{}
	if err := json.NewDecoder(av).Decode(lpbc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lpbc.Type(), lpbc.LocalName(), err)
	}
	return nil
}

func (lpbc *LoggingProjectBucketConfig) State() (*loggingProjectBucketConfigState, bool) {
	return lpbc.state, lpbc.state != nil
}

func (lpbc *LoggingProjectBucketConfig) StateMust() *loggingProjectBucketConfigState {
	if lpbc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lpbc.Type(), lpbc.LocalName()))
	}
	return lpbc.state
}

func (lpbc *LoggingProjectBucketConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(lpbc)
}

type LoggingProjectBucketConfigArgs struct {
	// BucketId: string, required
	BucketId terra.StringValue `hcl:"bucket_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnableAnalytics: bool, optional
	EnableAnalytics terra.BoolValue `hcl:"enable_analytics,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// RetentionDays: number, optional
	RetentionDays terra.NumberValue `hcl:"retention_days,attr"`
	// CmekSettings: optional
	CmekSettings *loggingprojectbucketconfig.CmekSettings `hcl:"cmek_settings,block"`
	// DependsOn contains resources that LoggingProjectBucketConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type loggingProjectBucketConfigAttributes struct {
	ref terra.Reference
}

func (lpbc loggingProjectBucketConfigAttributes) BucketId() terra.StringValue {
	return terra.ReferenceString(lpbc.ref.Append("bucket_id"))
}

func (lpbc loggingProjectBucketConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceString(lpbc.ref.Append("description"))
}

func (lpbc loggingProjectBucketConfigAttributes) EnableAnalytics() terra.BoolValue {
	return terra.ReferenceBool(lpbc.ref.Append("enable_analytics"))
}

func (lpbc loggingProjectBucketConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lpbc.ref.Append("id"))
}

func (lpbc loggingProjectBucketConfigAttributes) LifecycleState() terra.StringValue {
	return terra.ReferenceString(lpbc.ref.Append("lifecycle_state"))
}

func (lpbc loggingProjectBucketConfigAttributes) Location() terra.StringValue {
	return terra.ReferenceString(lpbc.ref.Append("location"))
}

func (lpbc loggingProjectBucketConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lpbc.ref.Append("name"))
}

func (lpbc loggingProjectBucketConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceString(lpbc.ref.Append("project"))
}

func (lpbc loggingProjectBucketConfigAttributes) RetentionDays() terra.NumberValue {
	return terra.ReferenceNumber(lpbc.ref.Append("retention_days"))
}

func (lpbc loggingProjectBucketConfigAttributes) CmekSettings() terra.ListValue[loggingprojectbucketconfig.CmekSettingsAttributes] {
	return terra.ReferenceList[loggingprojectbucketconfig.CmekSettingsAttributes](lpbc.ref.Append("cmek_settings"))
}

type loggingProjectBucketConfigState struct {
	BucketId        string                                         `json:"bucket_id"`
	Description     string                                         `json:"description"`
	EnableAnalytics bool                                           `json:"enable_analytics"`
	Id              string                                         `json:"id"`
	LifecycleState  string                                         `json:"lifecycle_state"`
	Location        string                                         `json:"location"`
	Name            string                                         `json:"name"`
	Project         string                                         `json:"project"`
	RetentionDays   float64                                        `json:"retention_days"`
	CmekSettings    []loggingprojectbucketconfig.CmekSettingsState `json:"cmek_settings"`
}
