// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computehealthcheck "github.com/golingon/terraproviders/google/4.59.0/computehealthcheck"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeHealthCheck(name string, args ComputeHealthCheckArgs) *ComputeHealthCheck {
	return &ComputeHealthCheck{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeHealthCheck)(nil)

type ComputeHealthCheck struct {
	Name  string
	Args  ComputeHealthCheckArgs
	state *computeHealthCheckState
}

func (chc *ComputeHealthCheck) Type() string {
	return "google_compute_health_check"
}

func (chc *ComputeHealthCheck) LocalName() string {
	return chc.Name
}

func (chc *ComputeHealthCheck) Configuration() interface{} {
	return chc.Args
}

func (chc *ComputeHealthCheck) Attributes() computeHealthCheckAttributes {
	return computeHealthCheckAttributes{ref: terra.ReferenceResource(chc)}
}

func (chc *ComputeHealthCheck) ImportState(av io.Reader) error {
	chc.state = &computeHealthCheckState{}
	if err := json.NewDecoder(av).Decode(chc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", chc.Type(), chc.LocalName(), err)
	}
	return nil
}

func (chc *ComputeHealthCheck) State() (*computeHealthCheckState, bool) {
	return chc.state, chc.state != nil
}

func (chc *ComputeHealthCheck) StateMust() *computeHealthCheckState {
	if chc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", chc.Type(), chc.LocalName()))
	}
	return chc.state
}

func (chc *ComputeHealthCheck) DependOn() terra.Reference {
	return terra.ReferenceResource(chc)
}

type ComputeHealthCheckArgs struct {
	// CheckIntervalSec: number, optional
	CheckIntervalSec terra.NumberValue `hcl:"check_interval_sec,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// HealthyThreshold: number, optional
	HealthyThreshold terra.NumberValue `hcl:"healthy_threshold,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TimeoutSec: number, optional
	TimeoutSec terra.NumberValue `hcl:"timeout_sec,attr"`
	// UnhealthyThreshold: number, optional
	UnhealthyThreshold terra.NumberValue `hcl:"unhealthy_threshold,attr"`
	// GrpcHealthCheck: optional
	GrpcHealthCheck *computehealthcheck.GrpcHealthCheck `hcl:"grpc_health_check,block"`
	// Http2HealthCheck: optional
	Http2HealthCheck *computehealthcheck.Http2HealthCheck `hcl:"http2_health_check,block"`
	// HttpHealthCheck: optional
	HttpHealthCheck *computehealthcheck.HttpHealthCheck `hcl:"http_health_check,block"`
	// HttpsHealthCheck: optional
	HttpsHealthCheck *computehealthcheck.HttpsHealthCheck `hcl:"https_health_check,block"`
	// LogConfig: optional
	LogConfig *computehealthcheck.LogConfig `hcl:"log_config,block"`
	// SslHealthCheck: optional
	SslHealthCheck *computehealthcheck.SslHealthCheck `hcl:"ssl_health_check,block"`
	// TcpHealthCheck: optional
	TcpHealthCheck *computehealthcheck.TcpHealthCheck `hcl:"tcp_health_check,block"`
	// Timeouts: optional
	Timeouts *computehealthcheck.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeHealthCheck depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeHealthCheckAttributes struct {
	ref terra.Reference
}

func (chc computeHealthCheckAttributes) CheckIntervalSec() terra.NumberValue {
	return terra.ReferenceNumber(chc.ref.Append("check_interval_sec"))
}

func (chc computeHealthCheckAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(chc.ref.Append("creation_timestamp"))
}

func (chc computeHealthCheckAttributes) Description() terra.StringValue {
	return terra.ReferenceString(chc.ref.Append("description"))
}

func (chc computeHealthCheckAttributes) HealthyThreshold() terra.NumberValue {
	return terra.ReferenceNumber(chc.ref.Append("healthy_threshold"))
}

func (chc computeHealthCheckAttributes) Id() terra.StringValue {
	return terra.ReferenceString(chc.ref.Append("id"))
}

func (chc computeHealthCheckAttributes) Name() terra.StringValue {
	return terra.ReferenceString(chc.ref.Append("name"))
}

func (chc computeHealthCheckAttributes) Project() terra.StringValue {
	return terra.ReferenceString(chc.ref.Append("project"))
}

func (chc computeHealthCheckAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(chc.ref.Append("self_link"))
}

func (chc computeHealthCheckAttributes) TimeoutSec() terra.NumberValue {
	return terra.ReferenceNumber(chc.ref.Append("timeout_sec"))
}

func (chc computeHealthCheckAttributes) Type() terra.StringValue {
	return terra.ReferenceString(chc.ref.Append("type"))
}

func (chc computeHealthCheckAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceNumber(chc.ref.Append("unhealthy_threshold"))
}

func (chc computeHealthCheckAttributes) GrpcHealthCheck() terra.ListValue[computehealthcheck.GrpcHealthCheckAttributes] {
	return terra.ReferenceList[computehealthcheck.GrpcHealthCheckAttributes](chc.ref.Append("grpc_health_check"))
}

func (chc computeHealthCheckAttributes) Http2HealthCheck() terra.ListValue[computehealthcheck.Http2HealthCheckAttributes] {
	return terra.ReferenceList[computehealthcheck.Http2HealthCheckAttributes](chc.ref.Append("http2_health_check"))
}

func (chc computeHealthCheckAttributes) HttpHealthCheck() terra.ListValue[computehealthcheck.HttpHealthCheckAttributes] {
	return terra.ReferenceList[computehealthcheck.HttpHealthCheckAttributes](chc.ref.Append("http_health_check"))
}

func (chc computeHealthCheckAttributes) HttpsHealthCheck() terra.ListValue[computehealthcheck.HttpsHealthCheckAttributes] {
	return terra.ReferenceList[computehealthcheck.HttpsHealthCheckAttributes](chc.ref.Append("https_health_check"))
}

func (chc computeHealthCheckAttributes) LogConfig() terra.ListValue[computehealthcheck.LogConfigAttributes] {
	return terra.ReferenceList[computehealthcheck.LogConfigAttributes](chc.ref.Append("log_config"))
}

func (chc computeHealthCheckAttributes) SslHealthCheck() terra.ListValue[computehealthcheck.SslHealthCheckAttributes] {
	return terra.ReferenceList[computehealthcheck.SslHealthCheckAttributes](chc.ref.Append("ssl_health_check"))
}

func (chc computeHealthCheckAttributes) TcpHealthCheck() terra.ListValue[computehealthcheck.TcpHealthCheckAttributes] {
	return terra.ReferenceList[computehealthcheck.TcpHealthCheckAttributes](chc.ref.Append("tcp_health_check"))
}

func (chc computeHealthCheckAttributes) Timeouts() computehealthcheck.TimeoutsAttributes {
	return terra.ReferenceSingle[computehealthcheck.TimeoutsAttributes](chc.ref.Append("timeouts"))
}

type computeHealthCheckState struct {
	CheckIntervalSec   float64                                    `json:"check_interval_sec"`
	CreationTimestamp  string                                     `json:"creation_timestamp"`
	Description        string                                     `json:"description"`
	HealthyThreshold   float64                                    `json:"healthy_threshold"`
	Id                 string                                     `json:"id"`
	Name               string                                     `json:"name"`
	Project            string                                     `json:"project"`
	SelfLink           string                                     `json:"self_link"`
	TimeoutSec         float64                                    `json:"timeout_sec"`
	Type               string                                     `json:"type"`
	UnhealthyThreshold float64                                    `json:"unhealthy_threshold"`
	GrpcHealthCheck    []computehealthcheck.GrpcHealthCheckState  `json:"grpc_health_check"`
	Http2HealthCheck   []computehealthcheck.Http2HealthCheckState `json:"http2_health_check"`
	HttpHealthCheck    []computehealthcheck.HttpHealthCheckState  `json:"http_health_check"`
	HttpsHealthCheck   []computehealthcheck.HttpsHealthCheckState `json:"https_health_check"`
	LogConfig          []computehealthcheck.LogConfigState        `json:"log_config"`
	SslHealthCheck     []computehealthcheck.SslHealthCheckState   `json:"ssl_health_check"`
	TcpHealthCheck     []computehealthcheck.TcpHealthCheckState   `json:"tcp_health_check"`
	Timeouts           *computehealthcheck.TimeoutsState          `json:"timeouts"`
}
