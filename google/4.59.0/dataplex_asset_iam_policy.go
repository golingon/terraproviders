// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataplexAssetIamPolicy(name string, args DataplexAssetIamPolicyArgs) *DataplexAssetIamPolicy {
	return &DataplexAssetIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataplexAssetIamPolicy)(nil)

type DataplexAssetIamPolicy struct {
	Name  string
	Args  DataplexAssetIamPolicyArgs
	state *dataplexAssetIamPolicyState
}

func (daip *DataplexAssetIamPolicy) Type() string {
	return "google_dataplex_asset_iam_policy"
}

func (daip *DataplexAssetIamPolicy) LocalName() string {
	return daip.Name
}

func (daip *DataplexAssetIamPolicy) Configuration() interface{} {
	return daip.Args
}

func (daip *DataplexAssetIamPolicy) Attributes() dataplexAssetIamPolicyAttributes {
	return dataplexAssetIamPolicyAttributes{ref: terra.ReferenceResource(daip)}
}

func (daip *DataplexAssetIamPolicy) ImportState(av io.Reader) error {
	daip.state = &dataplexAssetIamPolicyState{}
	if err := json.NewDecoder(av).Decode(daip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", daip.Type(), daip.LocalName(), err)
	}
	return nil
}

func (daip *DataplexAssetIamPolicy) State() (*dataplexAssetIamPolicyState, bool) {
	return daip.state, daip.state != nil
}

func (daip *DataplexAssetIamPolicy) StateMust() *dataplexAssetIamPolicyState {
	if daip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", daip.Type(), daip.LocalName()))
	}
	return daip.state
}

func (daip *DataplexAssetIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(daip)
}

type DataplexAssetIamPolicyArgs struct {
	// Asset: string, required
	Asset terra.StringValue `hcl:"asset,attr" validate:"required"`
	// DataplexZone: string, required
	DataplexZone terra.StringValue `hcl:"dataplex_zone,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Lake: string, required
	Lake terra.StringValue `hcl:"lake,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that DataplexAssetIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataplexAssetIamPolicyAttributes struct {
	ref terra.Reference
}

func (daip dataplexAssetIamPolicyAttributes) Asset() terra.StringValue {
	return terra.ReferenceString(daip.ref.Append("asset"))
}

func (daip dataplexAssetIamPolicyAttributes) DataplexZone() terra.StringValue {
	return terra.ReferenceString(daip.ref.Append("dataplex_zone"))
}

func (daip dataplexAssetIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(daip.ref.Append("etag"))
}

func (daip dataplexAssetIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(daip.ref.Append("id"))
}

func (daip dataplexAssetIamPolicyAttributes) Lake() terra.StringValue {
	return terra.ReferenceString(daip.ref.Append("lake"))
}

func (daip dataplexAssetIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(daip.ref.Append("location"))
}

func (daip dataplexAssetIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(daip.ref.Append("policy_data"))
}

func (daip dataplexAssetIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(daip.ref.Append("project"))
}

type dataplexAssetIamPolicyState struct {
	Asset        string `json:"asset"`
	DataplexZone string `json:"dataplex_zone"`
	Etag         string `json:"etag"`
	Id           string `json:"id"`
	Lake         string `json:"lake"`
	Location     string `json:"location"`
	PolicyData   string `json:"policy_data"`
	Project      string `json:"project"`
}
