// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	tagstagkeyiambinding "github.com/golingon/terraproviders/google/4.59.0/tagstagkeyiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewTagsTagKeyIamBinding(name string, args TagsTagKeyIamBindingArgs) *TagsTagKeyIamBinding {
	return &TagsTagKeyIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TagsTagKeyIamBinding)(nil)

type TagsTagKeyIamBinding struct {
	Name  string
	Args  TagsTagKeyIamBindingArgs
	state *tagsTagKeyIamBindingState
}

func (ttkib *TagsTagKeyIamBinding) Type() string {
	return "google_tags_tag_key_iam_binding"
}

func (ttkib *TagsTagKeyIamBinding) LocalName() string {
	return ttkib.Name
}

func (ttkib *TagsTagKeyIamBinding) Configuration() interface{} {
	return ttkib.Args
}

func (ttkib *TagsTagKeyIamBinding) Attributes() tagsTagKeyIamBindingAttributes {
	return tagsTagKeyIamBindingAttributes{ref: terra.ReferenceResource(ttkib)}
}

func (ttkib *TagsTagKeyIamBinding) ImportState(av io.Reader) error {
	ttkib.state = &tagsTagKeyIamBindingState{}
	if err := json.NewDecoder(av).Decode(ttkib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ttkib.Type(), ttkib.LocalName(), err)
	}
	return nil
}

func (ttkib *TagsTagKeyIamBinding) State() (*tagsTagKeyIamBindingState, bool) {
	return ttkib.state, ttkib.state != nil
}

func (ttkib *TagsTagKeyIamBinding) StateMust() *tagsTagKeyIamBindingState {
	if ttkib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ttkib.Type(), ttkib.LocalName()))
	}
	return ttkib.state
}

func (ttkib *TagsTagKeyIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(ttkib)
}

type TagsTagKeyIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// TagKey: string, required
	TagKey terra.StringValue `hcl:"tag_key,attr" validate:"required"`
	// Condition: optional
	Condition *tagstagkeyiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that TagsTagKeyIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type tagsTagKeyIamBindingAttributes struct {
	ref terra.Reference
}

func (ttkib tagsTagKeyIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ttkib.ref.Append("etag"))
}

func (ttkib tagsTagKeyIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ttkib.ref.Append("id"))
}

func (ttkib tagsTagKeyIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ttkib.ref.Append("members"))
}

func (ttkib tagsTagKeyIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(ttkib.ref.Append("role"))
}

func (ttkib tagsTagKeyIamBindingAttributes) TagKey() terra.StringValue {
	return terra.ReferenceString(ttkib.ref.Append("tag_key"))
}

func (ttkib tagsTagKeyIamBindingAttributes) Condition() terra.ListValue[tagstagkeyiambinding.ConditionAttributes] {
	return terra.ReferenceList[tagstagkeyiambinding.ConditionAttributes](ttkib.ref.Append("condition"))
}

type tagsTagKeyIamBindingState struct {
	Etag      string                                `json:"etag"`
	Id        string                                `json:"id"`
	Members   []string                              `json:"members"`
	Role      string                                `json:"role"`
	TagKey    string                                `json:"tag_key"`
	Condition []tagstagkeyiambinding.ConditionState `json:"condition"`
}
