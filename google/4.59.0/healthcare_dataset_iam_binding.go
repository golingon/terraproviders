// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	healthcaredatasetiambinding "github.com/golingon/terraproviders/google/4.59.0/healthcaredatasetiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewHealthcareDatasetIamBinding(name string, args HealthcareDatasetIamBindingArgs) *HealthcareDatasetIamBinding {
	return &HealthcareDatasetIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HealthcareDatasetIamBinding)(nil)

type HealthcareDatasetIamBinding struct {
	Name  string
	Args  HealthcareDatasetIamBindingArgs
	state *healthcareDatasetIamBindingState
}

func (hdib *HealthcareDatasetIamBinding) Type() string {
	return "google_healthcare_dataset_iam_binding"
}

func (hdib *HealthcareDatasetIamBinding) LocalName() string {
	return hdib.Name
}

func (hdib *HealthcareDatasetIamBinding) Configuration() interface{} {
	return hdib.Args
}

func (hdib *HealthcareDatasetIamBinding) Attributes() healthcareDatasetIamBindingAttributes {
	return healthcareDatasetIamBindingAttributes{ref: terra.ReferenceResource(hdib)}
}

func (hdib *HealthcareDatasetIamBinding) ImportState(av io.Reader) error {
	hdib.state = &healthcareDatasetIamBindingState{}
	if err := json.NewDecoder(av).Decode(hdib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hdib.Type(), hdib.LocalName(), err)
	}
	return nil
}

func (hdib *HealthcareDatasetIamBinding) State() (*healthcareDatasetIamBindingState, bool) {
	return hdib.state, hdib.state != nil
}

func (hdib *HealthcareDatasetIamBinding) StateMust() *healthcareDatasetIamBindingState {
	if hdib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hdib.Type(), hdib.LocalName()))
	}
	return hdib.state
}

func (hdib *HealthcareDatasetIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(hdib)
}

type HealthcareDatasetIamBindingArgs struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *healthcaredatasetiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that HealthcareDatasetIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type healthcareDatasetIamBindingAttributes struct {
	ref terra.Reference
}

func (hdib healthcareDatasetIamBindingAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceString(hdib.ref.Append("dataset_id"))
}

func (hdib healthcareDatasetIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(hdib.ref.Append("etag"))
}

func (hdib healthcareDatasetIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(hdib.ref.Append("id"))
}

func (hdib healthcareDatasetIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](hdib.ref.Append("members"))
}

func (hdib healthcareDatasetIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(hdib.ref.Append("role"))
}

func (hdib healthcareDatasetIamBindingAttributes) Condition() terra.ListValue[healthcaredatasetiambinding.ConditionAttributes] {
	return terra.ReferenceList[healthcaredatasetiambinding.ConditionAttributes](hdib.ref.Append("condition"))
}

type healthcareDatasetIamBindingState struct {
	DatasetId string                                       `json:"dataset_id"`
	Etag      string                                       `json:"etag"`
	Id        string                                       `json:"id"`
	Members   []string                                     `json:"members"`
	Role      string                                       `json:"role"`
	Condition []healthcaredatasetiambinding.ConditionState `json:"condition"`
}
