// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigqueryAnalyticsHubListingIamPolicy(name string, args BigqueryAnalyticsHubListingIamPolicyArgs) *BigqueryAnalyticsHubListingIamPolicy {
	return &BigqueryAnalyticsHubListingIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryAnalyticsHubListingIamPolicy)(nil)

type BigqueryAnalyticsHubListingIamPolicy struct {
	Name  string
	Args  BigqueryAnalyticsHubListingIamPolicyArgs
	state *bigqueryAnalyticsHubListingIamPolicyState
}

func (bahlip *BigqueryAnalyticsHubListingIamPolicy) Type() string {
	return "google_bigquery_analytics_hub_listing_iam_policy"
}

func (bahlip *BigqueryAnalyticsHubListingIamPolicy) LocalName() string {
	return bahlip.Name
}

func (bahlip *BigqueryAnalyticsHubListingIamPolicy) Configuration() interface{} {
	return bahlip.Args
}

func (bahlip *BigqueryAnalyticsHubListingIamPolicy) Attributes() bigqueryAnalyticsHubListingIamPolicyAttributes {
	return bigqueryAnalyticsHubListingIamPolicyAttributes{ref: terra.ReferenceResource(bahlip)}
}

func (bahlip *BigqueryAnalyticsHubListingIamPolicy) ImportState(av io.Reader) error {
	bahlip.state = &bigqueryAnalyticsHubListingIamPolicyState{}
	if err := json.NewDecoder(av).Decode(bahlip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bahlip.Type(), bahlip.LocalName(), err)
	}
	return nil
}

func (bahlip *BigqueryAnalyticsHubListingIamPolicy) State() (*bigqueryAnalyticsHubListingIamPolicyState, bool) {
	return bahlip.state, bahlip.state != nil
}

func (bahlip *BigqueryAnalyticsHubListingIamPolicy) StateMust() *bigqueryAnalyticsHubListingIamPolicyState {
	if bahlip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bahlip.Type(), bahlip.LocalName()))
	}
	return bahlip.state
}

func (bahlip *BigqueryAnalyticsHubListingIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(bahlip)
}

type BigqueryAnalyticsHubListingIamPolicyArgs struct {
	// DataExchangeId: string, required
	DataExchangeId terra.StringValue `hcl:"data_exchange_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListingId: string, required
	ListingId terra.StringValue `hcl:"listing_id,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that BigqueryAnalyticsHubListingIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigqueryAnalyticsHubListingIamPolicyAttributes struct {
	ref terra.Reference
}

func (bahlip bigqueryAnalyticsHubListingIamPolicyAttributes) DataExchangeId() terra.StringValue {
	return terra.ReferenceString(bahlip.ref.Append("data_exchange_id"))
}

func (bahlip bigqueryAnalyticsHubListingIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(bahlip.ref.Append("etag"))
}

func (bahlip bigqueryAnalyticsHubListingIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bahlip.ref.Append("id"))
}

func (bahlip bigqueryAnalyticsHubListingIamPolicyAttributes) ListingId() terra.StringValue {
	return terra.ReferenceString(bahlip.ref.Append("listing_id"))
}

func (bahlip bigqueryAnalyticsHubListingIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bahlip.ref.Append("location"))
}

func (bahlip bigqueryAnalyticsHubListingIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(bahlip.ref.Append("policy_data"))
}

func (bahlip bigqueryAnalyticsHubListingIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bahlip.ref.Append("project"))
}

type bigqueryAnalyticsHubListingIamPolicyState struct {
	DataExchangeId string `json:"data_exchange_id"`
	Etag           string `json:"etag"`
	Id             string `json:"id"`
	ListingId      string `json:"listing_id"`
	Location       string `json:"location"`
	PolicyData     string `json:"policy_data"`
	Project        string `json:"project"`
}
