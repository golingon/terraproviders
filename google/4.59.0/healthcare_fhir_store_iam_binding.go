// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	healthcarefhirstoreiambinding "github.com/golingon/terraproviders/google/4.59.0/healthcarefhirstoreiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewHealthcareFhirStoreIamBinding(name string, args HealthcareFhirStoreIamBindingArgs) *HealthcareFhirStoreIamBinding {
	return &HealthcareFhirStoreIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HealthcareFhirStoreIamBinding)(nil)

type HealthcareFhirStoreIamBinding struct {
	Name  string
	Args  HealthcareFhirStoreIamBindingArgs
	state *healthcareFhirStoreIamBindingState
}

func (hfsib *HealthcareFhirStoreIamBinding) Type() string {
	return "google_healthcare_fhir_store_iam_binding"
}

func (hfsib *HealthcareFhirStoreIamBinding) LocalName() string {
	return hfsib.Name
}

func (hfsib *HealthcareFhirStoreIamBinding) Configuration() interface{} {
	return hfsib.Args
}

func (hfsib *HealthcareFhirStoreIamBinding) Attributes() healthcareFhirStoreIamBindingAttributes {
	return healthcareFhirStoreIamBindingAttributes{ref: terra.ReferenceResource(hfsib)}
}

func (hfsib *HealthcareFhirStoreIamBinding) ImportState(av io.Reader) error {
	hfsib.state = &healthcareFhirStoreIamBindingState{}
	if err := json.NewDecoder(av).Decode(hfsib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hfsib.Type(), hfsib.LocalName(), err)
	}
	return nil
}

func (hfsib *HealthcareFhirStoreIamBinding) State() (*healthcareFhirStoreIamBindingState, bool) {
	return hfsib.state, hfsib.state != nil
}

func (hfsib *HealthcareFhirStoreIamBinding) StateMust() *healthcareFhirStoreIamBindingState {
	if hfsib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hfsib.Type(), hfsib.LocalName()))
	}
	return hfsib.state
}

func (hfsib *HealthcareFhirStoreIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(hfsib)
}

type HealthcareFhirStoreIamBindingArgs struct {
	// FhirStoreId: string, required
	FhirStoreId terra.StringValue `hcl:"fhir_store_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *healthcarefhirstoreiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that HealthcareFhirStoreIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type healthcareFhirStoreIamBindingAttributes struct {
	ref terra.Reference
}

func (hfsib healthcareFhirStoreIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(hfsib.ref.Append("etag"))
}

func (hfsib healthcareFhirStoreIamBindingAttributes) FhirStoreId() terra.StringValue {
	return terra.ReferenceString(hfsib.ref.Append("fhir_store_id"))
}

func (hfsib healthcareFhirStoreIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(hfsib.ref.Append("id"))
}

func (hfsib healthcareFhirStoreIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](hfsib.ref.Append("members"))
}

func (hfsib healthcareFhirStoreIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(hfsib.ref.Append("role"))
}

func (hfsib healthcareFhirStoreIamBindingAttributes) Condition() terra.ListValue[healthcarefhirstoreiambinding.ConditionAttributes] {
	return terra.ReferenceList[healthcarefhirstoreiambinding.ConditionAttributes](hfsib.ref.Append("condition"))
}

type healthcareFhirStoreIamBindingState struct {
	Etag        string                                         `json:"etag"`
	FhirStoreId string                                         `json:"fhir_store_id"`
	Id          string                                         `json:"id"`
	Members     []string                                       `json:"members"`
	Role        string                                         `json:"role"`
	Condition   []healthcarefhirstoreiambinding.ConditionState `json:"condition"`
}
