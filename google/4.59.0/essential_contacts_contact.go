// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	essentialcontactscontact "github.com/golingon/terraproviders/google/4.59.0/essentialcontactscontact"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEssentialContactsContact(name string, args EssentialContactsContactArgs) *EssentialContactsContact {
	return &EssentialContactsContact{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EssentialContactsContact)(nil)

type EssentialContactsContact struct {
	Name  string
	Args  EssentialContactsContactArgs
	state *essentialContactsContactState
}

func (ecc *EssentialContactsContact) Type() string {
	return "google_essential_contacts_contact"
}

func (ecc *EssentialContactsContact) LocalName() string {
	return ecc.Name
}

func (ecc *EssentialContactsContact) Configuration() interface{} {
	return ecc.Args
}

func (ecc *EssentialContactsContact) Attributes() essentialContactsContactAttributes {
	return essentialContactsContactAttributes{ref: terra.ReferenceResource(ecc)}
}

func (ecc *EssentialContactsContact) ImportState(av io.Reader) error {
	ecc.state = &essentialContactsContactState{}
	if err := json.NewDecoder(av).Decode(ecc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ecc.Type(), ecc.LocalName(), err)
	}
	return nil
}

func (ecc *EssentialContactsContact) State() (*essentialContactsContactState, bool) {
	return ecc.state, ecc.state != nil
}

func (ecc *EssentialContactsContact) StateMust() *essentialContactsContactState {
	if ecc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ecc.Type(), ecc.LocalName()))
	}
	return ecc.state
}

func (ecc *EssentialContactsContact) DependOn() terra.Reference {
	return terra.ReferenceResource(ecc)
}

type EssentialContactsContactArgs struct {
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LanguageTag: string, required
	LanguageTag terra.StringValue `hcl:"language_tag,attr" validate:"required"`
	// NotificationCategorySubscriptions: list of string, required
	NotificationCategorySubscriptions terra.ListValue[terra.StringValue] `hcl:"notification_category_subscriptions,attr" validate:"required"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *essentialcontactscontact.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EssentialContactsContact depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type essentialContactsContactAttributes struct {
	ref terra.Reference
}

func (ecc essentialContactsContactAttributes) Email() terra.StringValue {
	return terra.ReferenceString(ecc.ref.Append("email"))
}

func (ecc essentialContactsContactAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ecc.ref.Append("id"))
}

func (ecc essentialContactsContactAttributes) LanguageTag() terra.StringValue {
	return terra.ReferenceString(ecc.ref.Append("language_tag"))
}

func (ecc essentialContactsContactAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ecc.ref.Append("name"))
}

func (ecc essentialContactsContactAttributes) NotificationCategorySubscriptions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ecc.ref.Append("notification_category_subscriptions"))
}

func (ecc essentialContactsContactAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(ecc.ref.Append("parent"))
}

func (ecc essentialContactsContactAttributes) Timeouts() essentialcontactscontact.TimeoutsAttributes {
	return terra.ReferenceSingle[essentialcontactscontact.TimeoutsAttributes](ecc.ref.Append("timeouts"))
}

type essentialContactsContactState struct {
	Email                             string                                  `json:"email"`
	Id                                string                                  `json:"id"`
	LanguageTag                       string                                  `json:"language_tag"`
	Name                              string                                  `json:"name"`
	NotificationCategorySubscriptions []string                                `json:"notification_category_subscriptions"`
	Parent                            string                                  `json:"parent"`
	Timeouts                          *essentialcontactscontact.TimeoutsState `json:"timeouts"`
}
