// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeImageIamPolicy(name string, args ComputeImageIamPolicyArgs) *ComputeImageIamPolicy {
	return &ComputeImageIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeImageIamPolicy)(nil)

type ComputeImageIamPolicy struct {
	Name  string
	Args  ComputeImageIamPolicyArgs
	state *computeImageIamPolicyState
}

func (ciip *ComputeImageIamPolicy) Type() string {
	return "google_compute_image_iam_policy"
}

func (ciip *ComputeImageIamPolicy) LocalName() string {
	return ciip.Name
}

func (ciip *ComputeImageIamPolicy) Configuration() interface{} {
	return ciip.Args
}

func (ciip *ComputeImageIamPolicy) Attributes() computeImageIamPolicyAttributes {
	return computeImageIamPolicyAttributes{ref: terra.ReferenceResource(ciip)}
}

func (ciip *ComputeImageIamPolicy) ImportState(av io.Reader) error {
	ciip.state = &computeImageIamPolicyState{}
	if err := json.NewDecoder(av).Decode(ciip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ciip.Type(), ciip.LocalName(), err)
	}
	return nil
}

func (ciip *ComputeImageIamPolicy) State() (*computeImageIamPolicyState, bool) {
	return ciip.state, ciip.state != nil
}

func (ciip *ComputeImageIamPolicy) StateMust() *computeImageIamPolicyState {
	if ciip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ciip.Type(), ciip.LocalName()))
	}
	return ciip.state
}

func (ciip *ComputeImageIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ciip)
}

type ComputeImageIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that ComputeImageIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeImageIamPolicyAttributes struct {
	ref terra.Reference
}

func (ciip computeImageIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ciip.ref.Append("etag"))
}

func (ciip computeImageIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ciip.ref.Append("id"))
}

func (ciip computeImageIamPolicyAttributes) Image() terra.StringValue {
	return terra.ReferenceString(ciip.ref.Append("image"))
}

func (ciip computeImageIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(ciip.ref.Append("policy_data"))
}

func (ciip computeImageIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ciip.ref.Append("project"))
}

type computeImageIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Image      string `json:"image"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
}
