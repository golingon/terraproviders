// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	datacatalogtagtemplateiambinding "github.com/golingon/terraproviders/google/4.59.0/datacatalogtagtemplateiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataCatalogTagTemplateIamBinding(name string, args DataCatalogTagTemplateIamBindingArgs) *DataCatalogTagTemplateIamBinding {
	return &DataCatalogTagTemplateIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataCatalogTagTemplateIamBinding)(nil)

type DataCatalogTagTemplateIamBinding struct {
	Name  string
	Args  DataCatalogTagTemplateIamBindingArgs
	state *dataCatalogTagTemplateIamBindingState
}

func (dcttib *DataCatalogTagTemplateIamBinding) Type() string {
	return "google_data_catalog_tag_template_iam_binding"
}

func (dcttib *DataCatalogTagTemplateIamBinding) LocalName() string {
	return dcttib.Name
}

func (dcttib *DataCatalogTagTemplateIamBinding) Configuration() interface{} {
	return dcttib.Args
}

func (dcttib *DataCatalogTagTemplateIamBinding) Attributes() dataCatalogTagTemplateIamBindingAttributes {
	return dataCatalogTagTemplateIamBindingAttributes{ref: terra.ReferenceResource(dcttib)}
}

func (dcttib *DataCatalogTagTemplateIamBinding) ImportState(av io.Reader) error {
	dcttib.state = &dataCatalogTagTemplateIamBindingState{}
	if err := json.NewDecoder(av).Decode(dcttib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcttib.Type(), dcttib.LocalName(), err)
	}
	return nil
}

func (dcttib *DataCatalogTagTemplateIamBinding) State() (*dataCatalogTagTemplateIamBindingState, bool) {
	return dcttib.state, dcttib.state != nil
}

func (dcttib *DataCatalogTagTemplateIamBinding) StateMust() *dataCatalogTagTemplateIamBindingState {
	if dcttib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcttib.Type(), dcttib.LocalName()))
	}
	return dcttib.state
}

func (dcttib *DataCatalogTagTemplateIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(dcttib)
}

type DataCatalogTagTemplateIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// TagTemplate: string, required
	TagTemplate terra.StringValue `hcl:"tag_template,attr" validate:"required"`
	// Condition: optional
	Condition *datacatalogtagtemplateiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataCatalogTagTemplateIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataCatalogTagTemplateIamBindingAttributes struct {
	ref terra.Reference
}

func (dcttib dataCatalogTagTemplateIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dcttib.ref.Append("etag"))
}

func (dcttib dataCatalogTagTemplateIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dcttib.ref.Append("id"))
}

func (dcttib dataCatalogTagTemplateIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dcttib.ref.Append("members"))
}

func (dcttib dataCatalogTagTemplateIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dcttib.ref.Append("project"))
}

func (dcttib dataCatalogTagTemplateIamBindingAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dcttib.ref.Append("region"))
}

func (dcttib dataCatalogTagTemplateIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(dcttib.ref.Append("role"))
}

func (dcttib dataCatalogTagTemplateIamBindingAttributes) TagTemplate() terra.StringValue {
	return terra.ReferenceString(dcttib.ref.Append("tag_template"))
}

func (dcttib dataCatalogTagTemplateIamBindingAttributes) Condition() terra.ListValue[datacatalogtagtemplateiambinding.ConditionAttributes] {
	return terra.ReferenceList[datacatalogtagtemplateiambinding.ConditionAttributes](dcttib.ref.Append("condition"))
}

type dataCatalogTagTemplateIamBindingState struct {
	Etag        string                                            `json:"etag"`
	Id          string                                            `json:"id"`
	Members     []string                                          `json:"members"`
	Project     string                                            `json:"project"`
	Region      string                                            `json:"region"`
	Role        string                                            `json:"role"`
	TagTemplate string                                            `json:"tag_template"`
	Condition   []datacatalogtagtemplateiambinding.ConditionState `json:"condition"`
}
