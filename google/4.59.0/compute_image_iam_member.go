// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeimageiammember "github.com/golingon/terraproviders/google/4.59.0/computeimageiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeImageIamMember(name string, args ComputeImageIamMemberArgs) *ComputeImageIamMember {
	return &ComputeImageIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeImageIamMember)(nil)

type ComputeImageIamMember struct {
	Name  string
	Args  ComputeImageIamMemberArgs
	state *computeImageIamMemberState
}

func (ciim *ComputeImageIamMember) Type() string {
	return "google_compute_image_iam_member"
}

func (ciim *ComputeImageIamMember) LocalName() string {
	return ciim.Name
}

func (ciim *ComputeImageIamMember) Configuration() interface{} {
	return ciim.Args
}

func (ciim *ComputeImageIamMember) Attributes() computeImageIamMemberAttributes {
	return computeImageIamMemberAttributes{ref: terra.ReferenceResource(ciim)}
}

func (ciim *ComputeImageIamMember) ImportState(av io.Reader) error {
	ciim.state = &computeImageIamMemberState{}
	if err := json.NewDecoder(av).Decode(ciim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ciim.Type(), ciim.LocalName(), err)
	}
	return nil
}

func (ciim *ComputeImageIamMember) State() (*computeImageIamMemberState, bool) {
	return ciim.state, ciim.state != nil
}

func (ciim *ComputeImageIamMember) StateMust() *computeImageIamMemberState {
	if ciim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ciim.Type(), ciim.LocalName()))
	}
	return ciim.state
}

func (ciim *ComputeImageIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(ciim)
}

type ComputeImageIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *computeimageiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that ComputeImageIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeImageIamMemberAttributes struct {
	ref terra.Reference
}

func (ciim computeImageIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ciim.ref.Append("etag"))
}

func (ciim computeImageIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ciim.ref.Append("id"))
}

func (ciim computeImageIamMemberAttributes) Image() terra.StringValue {
	return terra.ReferenceString(ciim.ref.Append("image"))
}

func (ciim computeImageIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(ciim.ref.Append("member"))
}

func (ciim computeImageIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ciim.ref.Append("project"))
}

func (ciim computeImageIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(ciim.ref.Append("role"))
}

func (ciim computeImageIamMemberAttributes) Condition() terra.ListValue[computeimageiammember.ConditionAttributes] {
	return terra.ReferenceList[computeimageiammember.ConditionAttributes](ciim.ref.Append("condition"))
}

type computeImageIamMemberState struct {
	Etag      string                                 `json:"etag"`
	Id        string                                 `json:"id"`
	Image     string                                 `json:"image"`
	Member    string                                 `json:"member"`
	Project   string                                 `json:"project"`
	Role      string                                 `json:"role"`
	Condition []computeimageiammember.ConditionState `json:"condition"`
}
