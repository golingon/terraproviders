// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package computepacketmirroring

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CollectorIlb struct {
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type Filter struct {
	// CidrRanges: list of string, optional
	CidrRanges terra.ListValue[terra.StringValue] `hcl:"cidr_ranges,attr"`
	// Direction: string, optional
	Direction terra.StringValue `hcl:"direction,attr"`
	// IpProtocols: list of string, optional
	IpProtocols terra.ListValue[terra.StringValue] `hcl:"ip_protocols,attr"`
}

type MirroredResources struct {
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
	// Instances: min=0
	Instances []Instances `hcl:"instances,block" validate:"min=0"`
	// Subnetworks: min=0
	Subnetworks []Subnetworks `hcl:"subnetworks,block" validate:"min=0"`
}

type Instances struct {
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type Subnetworks struct {
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type Network struct {
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CollectorIlbAttributes struct {
	ref terra.Reference
}

func (ci CollectorIlbAttributes) InternalRef() terra.Reference {
	return ci.ref
}

func (ci CollectorIlbAttributes) InternalWithRef(ref terra.Reference) CollectorIlbAttributes {
	return CollectorIlbAttributes{ref: ref}
}

func (ci CollectorIlbAttributes) InternalTokens() hclwrite.Tokens {
	return ci.ref.InternalTokens()
}

func (ci CollectorIlbAttributes) Url() terra.StringValue {
	return terra.ReferenceString(ci.ref.Append("url"))
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() terra.Reference {
	return f.ref
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() hclwrite.Tokens {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) CidrRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](f.ref.Append("cidr_ranges"))
}

func (f FilterAttributes) Direction() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("direction"))
}

func (f FilterAttributes) IpProtocols() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](f.ref.Append("ip_protocols"))
}

type MirroredResourcesAttributes struct {
	ref terra.Reference
}

func (mr MirroredResourcesAttributes) InternalRef() terra.Reference {
	return mr.ref
}

func (mr MirroredResourcesAttributes) InternalWithRef(ref terra.Reference) MirroredResourcesAttributes {
	return MirroredResourcesAttributes{ref: ref}
}

func (mr MirroredResourcesAttributes) InternalTokens() hclwrite.Tokens {
	return mr.ref.InternalTokens()
}

func (mr MirroredResourcesAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](mr.ref.Append("tags"))
}

func (mr MirroredResourcesAttributes) Instances() terra.ListValue[InstancesAttributes] {
	return terra.ReferenceList[InstancesAttributes](mr.ref.Append("instances"))
}

func (mr MirroredResourcesAttributes) Subnetworks() terra.ListValue[SubnetworksAttributes] {
	return terra.ReferenceList[SubnetworksAttributes](mr.ref.Append("subnetworks"))
}

type InstancesAttributes struct {
	ref terra.Reference
}

func (i InstancesAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i InstancesAttributes) InternalWithRef(ref terra.Reference) InstancesAttributes {
	return InstancesAttributes{ref: ref}
}

func (i InstancesAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i InstancesAttributes) Url() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("url"))
}

type SubnetworksAttributes struct {
	ref terra.Reference
}

func (s SubnetworksAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SubnetworksAttributes) InternalWithRef(ref terra.Reference) SubnetworksAttributes {
	return SubnetworksAttributes{ref: ref}
}

func (s SubnetworksAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SubnetworksAttributes) Url() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("url"))
}

type NetworkAttributes struct {
	ref terra.Reference
}

func (n NetworkAttributes) InternalRef() terra.Reference {
	return n.ref
}

func (n NetworkAttributes) InternalWithRef(ref terra.Reference) NetworkAttributes {
	return NetworkAttributes{ref: ref}
}

func (n NetworkAttributes) InternalTokens() hclwrite.Tokens {
	return n.ref.InternalTokens()
}

func (n NetworkAttributes) Url() terra.StringValue {
	return terra.ReferenceString(n.ref.Append("url"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type CollectorIlbState struct {
	Url string `json:"url"`
}

type FilterState struct {
	CidrRanges  []string `json:"cidr_ranges"`
	Direction   string   `json:"direction"`
	IpProtocols []string `json:"ip_protocols"`
}

type MirroredResourcesState struct {
	Tags        []string           `json:"tags"`
	Instances   []InstancesState   `json:"instances"`
	Subnetworks []SubnetworksState `json:"subnetworks"`
}

type InstancesState struct {
	Url string `json:"url"`
}

type SubnetworksState struct {
	Url string `json:"url"`
}

type NetworkState struct {
	Url string `json:"url"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
