// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	pubsubtopiciambinding "github.com/golingon/terraproviders/google/4.59.0/pubsubtopiciambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPubsubTopicIamBinding(name string, args PubsubTopicIamBindingArgs) *PubsubTopicIamBinding {
	return &PubsubTopicIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PubsubTopicIamBinding)(nil)

type PubsubTopicIamBinding struct {
	Name  string
	Args  PubsubTopicIamBindingArgs
	state *pubsubTopicIamBindingState
}

func (ptib *PubsubTopicIamBinding) Type() string {
	return "google_pubsub_topic_iam_binding"
}

func (ptib *PubsubTopicIamBinding) LocalName() string {
	return ptib.Name
}

func (ptib *PubsubTopicIamBinding) Configuration() interface{} {
	return ptib.Args
}

func (ptib *PubsubTopicIamBinding) Attributes() pubsubTopicIamBindingAttributes {
	return pubsubTopicIamBindingAttributes{ref: terra.ReferenceResource(ptib)}
}

func (ptib *PubsubTopicIamBinding) ImportState(av io.Reader) error {
	ptib.state = &pubsubTopicIamBindingState{}
	if err := json.NewDecoder(av).Decode(ptib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ptib.Type(), ptib.LocalName(), err)
	}
	return nil
}

func (ptib *PubsubTopicIamBinding) State() (*pubsubTopicIamBindingState, bool) {
	return ptib.state, ptib.state != nil
}

func (ptib *PubsubTopicIamBinding) StateMust() *pubsubTopicIamBindingState {
	if ptib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ptib.Type(), ptib.LocalName()))
	}
	return ptib.state
}

func (ptib *PubsubTopicIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(ptib)
}

type PubsubTopicIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
	// Condition: optional
	Condition *pubsubtopiciambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that PubsubTopicIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type pubsubTopicIamBindingAttributes struct {
	ref terra.Reference
}

func (ptib pubsubTopicIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ptib.ref.Append("etag"))
}

func (ptib pubsubTopicIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ptib.ref.Append("id"))
}

func (ptib pubsubTopicIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ptib.ref.Append("members"))
}

func (ptib pubsubTopicIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ptib.ref.Append("project"))
}

func (ptib pubsubTopicIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(ptib.ref.Append("role"))
}

func (ptib pubsubTopicIamBindingAttributes) Topic() terra.StringValue {
	return terra.ReferenceString(ptib.ref.Append("topic"))
}

func (ptib pubsubTopicIamBindingAttributes) Condition() terra.ListValue[pubsubtopiciambinding.ConditionAttributes] {
	return terra.ReferenceList[pubsubtopiciambinding.ConditionAttributes](ptib.ref.Append("condition"))
}

type pubsubTopicIamBindingState struct {
	Etag      string                                 `json:"etag"`
	Id        string                                 `json:"id"`
	Members   []string                               `json:"members"`
	Project   string                                 `json:"project"`
	Role      string                                 `json:"role"`
	Topic     string                                 `json:"topic"`
	Condition []pubsubtopiciambinding.ConditionState `json:"condition"`
}
