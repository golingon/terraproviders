// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computehttphealthcheck "github.com/golingon/terraproviders/google/4.59.0/computehttphealthcheck"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeHttpHealthCheck(name string, args ComputeHttpHealthCheckArgs) *ComputeHttpHealthCheck {
	return &ComputeHttpHealthCheck{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeHttpHealthCheck)(nil)

type ComputeHttpHealthCheck struct {
	Name  string
	Args  ComputeHttpHealthCheckArgs
	state *computeHttpHealthCheckState
}

func (chhc *ComputeHttpHealthCheck) Type() string {
	return "google_compute_http_health_check"
}

func (chhc *ComputeHttpHealthCheck) LocalName() string {
	return chhc.Name
}

func (chhc *ComputeHttpHealthCheck) Configuration() interface{} {
	return chhc.Args
}

func (chhc *ComputeHttpHealthCheck) Attributes() computeHttpHealthCheckAttributes {
	return computeHttpHealthCheckAttributes{ref: terra.ReferenceResource(chhc)}
}

func (chhc *ComputeHttpHealthCheck) ImportState(av io.Reader) error {
	chhc.state = &computeHttpHealthCheckState{}
	if err := json.NewDecoder(av).Decode(chhc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", chhc.Type(), chhc.LocalName(), err)
	}
	return nil
}

func (chhc *ComputeHttpHealthCheck) State() (*computeHttpHealthCheckState, bool) {
	return chhc.state, chhc.state != nil
}

func (chhc *ComputeHttpHealthCheck) StateMust() *computeHttpHealthCheckState {
	if chhc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", chhc.Type(), chhc.LocalName()))
	}
	return chhc.state
}

func (chhc *ComputeHttpHealthCheck) DependOn() terra.Reference {
	return terra.ReferenceResource(chhc)
}

type ComputeHttpHealthCheckArgs struct {
	// CheckIntervalSec: number, optional
	CheckIntervalSec terra.NumberValue `hcl:"check_interval_sec,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// HealthyThreshold: number, optional
	HealthyThreshold terra.NumberValue `hcl:"healthy_threshold,attr"`
	// Host: string, optional
	Host terra.StringValue `hcl:"host,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RequestPath: string, optional
	RequestPath terra.StringValue `hcl:"request_path,attr"`
	// TimeoutSec: number, optional
	TimeoutSec terra.NumberValue `hcl:"timeout_sec,attr"`
	// UnhealthyThreshold: number, optional
	UnhealthyThreshold terra.NumberValue `hcl:"unhealthy_threshold,attr"`
	// Timeouts: optional
	Timeouts *computehttphealthcheck.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeHttpHealthCheck depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeHttpHealthCheckAttributes struct {
	ref terra.Reference
}

func (chhc computeHttpHealthCheckAttributes) CheckIntervalSec() terra.NumberValue {
	return terra.ReferenceNumber(chhc.ref.Append("check_interval_sec"))
}

func (chhc computeHttpHealthCheckAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(chhc.ref.Append("creation_timestamp"))
}

func (chhc computeHttpHealthCheckAttributes) Description() terra.StringValue {
	return terra.ReferenceString(chhc.ref.Append("description"))
}

func (chhc computeHttpHealthCheckAttributes) HealthyThreshold() terra.NumberValue {
	return terra.ReferenceNumber(chhc.ref.Append("healthy_threshold"))
}

func (chhc computeHttpHealthCheckAttributes) Host() terra.StringValue {
	return terra.ReferenceString(chhc.ref.Append("host"))
}

func (chhc computeHttpHealthCheckAttributes) Id() terra.StringValue {
	return terra.ReferenceString(chhc.ref.Append("id"))
}

func (chhc computeHttpHealthCheckAttributes) Name() terra.StringValue {
	return terra.ReferenceString(chhc.ref.Append("name"))
}

func (chhc computeHttpHealthCheckAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(chhc.ref.Append("port"))
}

func (chhc computeHttpHealthCheckAttributes) Project() terra.StringValue {
	return terra.ReferenceString(chhc.ref.Append("project"))
}

func (chhc computeHttpHealthCheckAttributes) RequestPath() terra.StringValue {
	return terra.ReferenceString(chhc.ref.Append("request_path"))
}

func (chhc computeHttpHealthCheckAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(chhc.ref.Append("self_link"))
}

func (chhc computeHttpHealthCheckAttributes) TimeoutSec() terra.NumberValue {
	return terra.ReferenceNumber(chhc.ref.Append("timeout_sec"))
}

func (chhc computeHttpHealthCheckAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceNumber(chhc.ref.Append("unhealthy_threshold"))
}

func (chhc computeHttpHealthCheckAttributes) Timeouts() computehttphealthcheck.TimeoutsAttributes {
	return terra.ReferenceSingle[computehttphealthcheck.TimeoutsAttributes](chhc.ref.Append("timeouts"))
}

type computeHttpHealthCheckState struct {
	CheckIntervalSec   float64                               `json:"check_interval_sec"`
	CreationTimestamp  string                                `json:"creation_timestamp"`
	Description        string                                `json:"description"`
	HealthyThreshold   float64                               `json:"healthy_threshold"`
	Host               string                                `json:"host"`
	Id                 string                                `json:"id"`
	Name               string                                `json:"name"`
	Port               float64                               `json:"port"`
	Project            string                                `json:"project"`
	RequestPath        string                                `json:"request_path"`
	SelfLink           string                                `json:"self_link"`
	TimeoutSec         float64                               `json:"timeout_sec"`
	UnhealthyThreshold float64                               `json:"unhealthy_threshold"`
	Timeouts           *computehttphealthcheck.TimeoutsState `json:"timeouts"`
}
