// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	containerazureclient "github.com/golingon/terraproviders/google/4.59.0/containerazureclient"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewContainerAzureClient(name string, args ContainerAzureClientArgs) *ContainerAzureClient {
	return &ContainerAzureClient{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ContainerAzureClient)(nil)

type ContainerAzureClient struct {
	Name  string
	Args  ContainerAzureClientArgs
	state *containerAzureClientState
}

func (cac *ContainerAzureClient) Type() string {
	return "google_container_azure_client"
}

func (cac *ContainerAzureClient) LocalName() string {
	return cac.Name
}

func (cac *ContainerAzureClient) Configuration() interface{} {
	return cac.Args
}

func (cac *ContainerAzureClient) Attributes() containerAzureClientAttributes {
	return containerAzureClientAttributes{ref: terra.ReferenceResource(cac)}
}

func (cac *ContainerAzureClient) ImportState(av io.Reader) error {
	cac.state = &containerAzureClientState{}
	if err := json.NewDecoder(av).Decode(cac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cac.Type(), cac.LocalName(), err)
	}
	return nil
}

func (cac *ContainerAzureClient) State() (*containerAzureClientState, bool) {
	return cac.state, cac.state != nil
}

func (cac *ContainerAzureClient) StateMust() *containerAzureClientState {
	if cac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cac.Type(), cac.LocalName()))
	}
	return cac.state
}

func (cac *ContainerAzureClient) DependOn() terra.Reference {
	return terra.ReferenceResource(cac)
}

type ContainerAzureClientArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *containerazureclient.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ContainerAzureClient depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type containerAzureClientAttributes struct {
	ref terra.Reference
}

func (cac containerAzureClientAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("application_id"))
}

func (cac containerAzureClientAttributes) Certificate() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("certificate"))
}

func (cac containerAzureClientAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("create_time"))
}

func (cac containerAzureClientAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("id"))
}

func (cac containerAzureClientAttributes) Location() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("location"))
}

func (cac containerAzureClientAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("name"))
}

func (cac containerAzureClientAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("project"))
}

func (cac containerAzureClientAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("tenant_id"))
}

func (cac containerAzureClientAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(cac.ref.Append("uid"))
}

func (cac containerAzureClientAttributes) Timeouts() containerazureclient.TimeoutsAttributes {
	return terra.ReferenceSingle[containerazureclient.TimeoutsAttributes](cac.ref.Append("timeouts"))
}

type containerAzureClientState struct {
	ApplicationId string                              `json:"application_id"`
	Certificate   string                              `json:"certificate"`
	CreateTime    string                              `json:"create_time"`
	Id            string                              `json:"id"`
	Location      string                              `json:"location"`
	Name          string                              `json:"name"`
	Project       string                              `json:"project"`
	TenantId      string                              `json:"tenant_id"`
	Uid           string                              `json:"uid"`
	Timeouts      *containerazureclient.TimeoutsState `json:"timeouts"`
}
