// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computenetworkendpoint "github.com/golingon/terraproviders/google/4.59.0/computenetworkendpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeNetworkEndpoint(name string, args ComputeNetworkEndpointArgs) *ComputeNetworkEndpoint {
	return &ComputeNetworkEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeNetworkEndpoint)(nil)

type ComputeNetworkEndpoint struct {
	Name  string
	Args  ComputeNetworkEndpointArgs
	state *computeNetworkEndpointState
}

func (cne *ComputeNetworkEndpoint) Type() string {
	return "google_compute_network_endpoint"
}

func (cne *ComputeNetworkEndpoint) LocalName() string {
	return cne.Name
}

func (cne *ComputeNetworkEndpoint) Configuration() interface{} {
	return cne.Args
}

func (cne *ComputeNetworkEndpoint) Attributes() computeNetworkEndpointAttributes {
	return computeNetworkEndpointAttributes{ref: terra.ReferenceResource(cne)}
}

func (cne *ComputeNetworkEndpoint) ImportState(av io.Reader) error {
	cne.state = &computeNetworkEndpointState{}
	if err := json.NewDecoder(av).Decode(cne.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cne.Type(), cne.LocalName(), err)
	}
	return nil
}

func (cne *ComputeNetworkEndpoint) State() (*computeNetworkEndpointState, bool) {
	return cne.state, cne.state != nil
}

func (cne *ComputeNetworkEndpoint) StateMust() *computeNetworkEndpointState {
	if cne.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cne.Type(), cne.LocalName()))
	}
	return cne.state
}

func (cne *ComputeNetworkEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(cne)
}

type ComputeNetworkEndpointArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, optional
	Instance terra.StringValue `hcl:"instance,attr"`
	// IpAddress: string, required
	IpAddress terra.StringValue `hcl:"ip_address,attr" validate:"required"`
	// NetworkEndpointGroup: string, required
	NetworkEndpointGroup terra.StringValue `hcl:"network_endpoint_group,attr" validate:"required"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Timeouts: optional
	Timeouts *computenetworkendpoint.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeNetworkEndpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeNetworkEndpointAttributes struct {
	ref terra.Reference
}

func (cne computeNetworkEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cne.ref.Append("id"))
}

func (cne computeNetworkEndpointAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(cne.ref.Append("instance"))
}

func (cne computeNetworkEndpointAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceString(cne.ref.Append("ip_address"))
}

func (cne computeNetworkEndpointAttributes) NetworkEndpointGroup() terra.StringValue {
	return terra.ReferenceString(cne.ref.Append("network_endpoint_group"))
}

func (cne computeNetworkEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(cne.ref.Append("port"))
}

func (cne computeNetworkEndpointAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cne.ref.Append("project"))
}

func (cne computeNetworkEndpointAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(cne.ref.Append("zone"))
}

func (cne computeNetworkEndpointAttributes) Timeouts() computenetworkendpoint.TimeoutsAttributes {
	return terra.ReferenceSingle[computenetworkendpoint.TimeoutsAttributes](cne.ref.Append("timeouts"))
}

type computeNetworkEndpointState struct {
	Id                   string                                `json:"id"`
	Instance             string                                `json:"instance"`
	IpAddress            string                                `json:"ip_address"`
	NetworkEndpointGroup string                                `json:"network_endpoint_group"`
	Port                 float64                               `json:"port"`
	Project              string                                `json:"project"`
	Zone                 string                                `json:"zone"`
	Timeouts             *computenetworkendpoint.TimeoutsState `json:"timeouts"`
}
