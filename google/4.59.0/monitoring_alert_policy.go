// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	monitoringalertpolicy "github.com/golingon/terraproviders/google/4.59.0/monitoringalertpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitoringAlertPolicy(name string, args MonitoringAlertPolicyArgs) *MonitoringAlertPolicy {
	return &MonitoringAlertPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitoringAlertPolicy)(nil)

type MonitoringAlertPolicy struct {
	Name  string
	Args  MonitoringAlertPolicyArgs
	state *monitoringAlertPolicyState
}

func (_map *MonitoringAlertPolicy) Type() string {
	return "google_monitoring_alert_policy"
}

func (_map *MonitoringAlertPolicy) LocalName() string {
	return _map.Name
}

func (_map *MonitoringAlertPolicy) Configuration() interface{} {
	return _map.Args
}

func (_map *MonitoringAlertPolicy) Attributes() monitoringAlertPolicyAttributes {
	return monitoringAlertPolicyAttributes{ref: terra.ReferenceResource(_map)}
}

func (_map *MonitoringAlertPolicy) ImportState(av io.Reader) error {
	_map.state = &monitoringAlertPolicyState{}
	if err := json.NewDecoder(av).Decode(_map.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", _map.Type(), _map.LocalName(), err)
	}
	return nil
}

func (_map *MonitoringAlertPolicy) State() (*monitoringAlertPolicyState, bool) {
	return _map.state, _map.state != nil
}

func (_map *MonitoringAlertPolicy) StateMust() *monitoringAlertPolicyState {
	if _map.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", _map.Type(), _map.LocalName()))
	}
	return _map.state
}

func (_map *MonitoringAlertPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(_map)
}

type MonitoringAlertPolicyArgs struct {
	// Combiner: string, required
	Combiner terra.StringValue `hcl:"combiner,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NotificationChannels: list of string, optional
	NotificationChannels terra.ListValue[terra.StringValue] `hcl:"notification_channels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// UserLabels: map of string, optional
	UserLabels terra.MapValue[terra.StringValue] `hcl:"user_labels,attr"`
	// CreationRecord: min=0
	CreationRecord []monitoringalertpolicy.CreationRecord `hcl:"creation_record,block" validate:"min=0"`
	// AlertStrategy: optional
	AlertStrategy *monitoringalertpolicy.AlertStrategy `hcl:"alert_strategy,block"`
	// Conditions: min=1
	Conditions []monitoringalertpolicy.Conditions `hcl:"conditions,block" validate:"min=1"`
	// Documentation: optional
	Documentation *monitoringalertpolicy.Documentation `hcl:"documentation,block"`
	// Timeouts: optional
	Timeouts *monitoringalertpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MonitoringAlertPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitoringAlertPolicyAttributes struct {
	ref terra.Reference
}

func (_map monitoringAlertPolicyAttributes) Combiner() terra.StringValue {
	return terra.ReferenceString(_map.ref.Append("combiner"))
}

func (_map monitoringAlertPolicyAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(_map.ref.Append("display_name"))
}

func (_map monitoringAlertPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(_map.ref.Append("enabled"))
}

func (_map monitoringAlertPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(_map.ref.Append("id"))
}

func (_map monitoringAlertPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(_map.ref.Append("name"))
}

func (_map monitoringAlertPolicyAttributes) NotificationChannels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](_map.ref.Append("notification_channels"))
}

func (_map monitoringAlertPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(_map.ref.Append("project"))
}

func (_map monitoringAlertPolicyAttributes) UserLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](_map.ref.Append("user_labels"))
}

func (_map monitoringAlertPolicyAttributes) CreationRecord() terra.ListValue[monitoringalertpolicy.CreationRecordAttributes] {
	return terra.ReferenceList[monitoringalertpolicy.CreationRecordAttributes](_map.ref.Append("creation_record"))
}

func (_map monitoringAlertPolicyAttributes) AlertStrategy() terra.ListValue[monitoringalertpolicy.AlertStrategyAttributes] {
	return terra.ReferenceList[monitoringalertpolicy.AlertStrategyAttributes](_map.ref.Append("alert_strategy"))
}

func (_map monitoringAlertPolicyAttributes) Conditions() terra.ListValue[monitoringalertpolicy.ConditionsAttributes] {
	return terra.ReferenceList[monitoringalertpolicy.ConditionsAttributes](_map.ref.Append("conditions"))
}

func (_map monitoringAlertPolicyAttributes) Documentation() terra.ListValue[monitoringalertpolicy.DocumentationAttributes] {
	return terra.ReferenceList[monitoringalertpolicy.DocumentationAttributes](_map.ref.Append("documentation"))
}

func (_map monitoringAlertPolicyAttributes) Timeouts() monitoringalertpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[monitoringalertpolicy.TimeoutsAttributes](_map.ref.Append("timeouts"))
}

type monitoringAlertPolicyState struct {
	Combiner             string                                      `json:"combiner"`
	DisplayName          string                                      `json:"display_name"`
	Enabled              bool                                        `json:"enabled"`
	Id                   string                                      `json:"id"`
	Name                 string                                      `json:"name"`
	NotificationChannels []string                                    `json:"notification_channels"`
	Project              string                                      `json:"project"`
	UserLabels           map[string]string                           `json:"user_labels"`
	CreationRecord       []monitoringalertpolicy.CreationRecordState `json:"creation_record"`
	AlertStrategy        []monitoringalertpolicy.AlertStrategyState  `json:"alert_strategy"`
	Conditions           []monitoringalertpolicy.ConditionsState     `json:"conditions"`
	Documentation        []monitoringalertpolicy.DocumentationState  `json:"documentation"`
	Timeouts             *monitoringalertpolicy.TimeoutsState        `json:"timeouts"`
}
