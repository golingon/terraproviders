// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dialogflowcxintent "github.com/golingon/terraproviders/google/4.59.0/dialogflowcxintent"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDialogflowCxIntent(name string, args DialogflowCxIntentArgs) *DialogflowCxIntent {
	return &DialogflowCxIntent{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DialogflowCxIntent)(nil)

type DialogflowCxIntent struct {
	Name  string
	Args  DialogflowCxIntentArgs
	state *dialogflowCxIntentState
}

func (dci *DialogflowCxIntent) Type() string {
	return "google_dialogflow_cx_intent"
}

func (dci *DialogflowCxIntent) LocalName() string {
	return dci.Name
}

func (dci *DialogflowCxIntent) Configuration() interface{} {
	return dci.Args
}

func (dci *DialogflowCxIntent) Attributes() dialogflowCxIntentAttributes {
	return dialogflowCxIntentAttributes{ref: terra.ReferenceResource(dci)}
}

func (dci *DialogflowCxIntent) ImportState(av io.Reader) error {
	dci.state = &dialogflowCxIntentState{}
	if err := json.NewDecoder(av).Decode(dci.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dci.Type(), dci.LocalName(), err)
	}
	return nil
}

func (dci *DialogflowCxIntent) State() (*dialogflowCxIntentState, bool) {
	return dci.state, dci.state != nil
}

func (dci *DialogflowCxIntent) StateMust() *dialogflowCxIntentState {
	if dci.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dci.Type(), dci.LocalName()))
	}
	return dci.state
}

func (dci *DialogflowCxIntent) DependOn() terra.Reference {
	return terra.ReferenceResource(dci)
}

type DialogflowCxIntentArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsFallback: bool, optional
	IsFallback terra.BoolValue `hcl:"is_fallback,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LanguageCode: string, optional
	LanguageCode terra.StringValue `hcl:"language_code,attr"`
	// Parent: string, optional
	Parent terra.StringValue `hcl:"parent,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Parameters: min=0
	Parameters []dialogflowcxintent.Parameters `hcl:"parameters,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dialogflowcxintent.Timeouts `hcl:"timeouts,block"`
	// TrainingPhrases: min=0
	TrainingPhrases []dialogflowcxintent.TrainingPhrases `hcl:"training_phrases,block" validate:"min=0"`
	// DependsOn contains resources that DialogflowCxIntent depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dialogflowCxIntentAttributes struct {
	ref terra.Reference
}

func (dci dialogflowCxIntentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dci.ref.Append("description"))
}

func (dci dialogflowCxIntentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(dci.ref.Append("display_name"))
}

func (dci dialogflowCxIntentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dci.ref.Append("id"))
}

func (dci dialogflowCxIntentAttributes) IsFallback() terra.BoolValue {
	return terra.ReferenceBool(dci.ref.Append("is_fallback"))
}

func (dci dialogflowCxIntentAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dci.ref.Append("labels"))
}

func (dci dialogflowCxIntentAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceString(dci.ref.Append("language_code"))
}

func (dci dialogflowCxIntentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dci.ref.Append("name"))
}

func (dci dialogflowCxIntentAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(dci.ref.Append("parent"))
}

func (dci dialogflowCxIntentAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(dci.ref.Append("priority"))
}

func (dci dialogflowCxIntentAttributes) Parameters() terra.ListValue[dialogflowcxintent.ParametersAttributes] {
	return terra.ReferenceList[dialogflowcxintent.ParametersAttributes](dci.ref.Append("parameters"))
}

func (dci dialogflowCxIntentAttributes) Timeouts() dialogflowcxintent.TimeoutsAttributes {
	return terra.ReferenceSingle[dialogflowcxintent.TimeoutsAttributes](dci.ref.Append("timeouts"))
}

func (dci dialogflowCxIntentAttributes) TrainingPhrases() terra.ListValue[dialogflowcxintent.TrainingPhrasesAttributes] {
	return terra.ReferenceList[dialogflowcxintent.TrainingPhrasesAttributes](dci.ref.Append("training_phrases"))
}

type dialogflowCxIntentState struct {
	Description     string                                    `json:"description"`
	DisplayName     string                                    `json:"display_name"`
	Id              string                                    `json:"id"`
	IsFallback      bool                                      `json:"is_fallback"`
	Labels          map[string]string                         `json:"labels"`
	LanguageCode    string                                    `json:"language_code"`
	Name            string                                    `json:"name"`
	Parent          string                                    `json:"parent"`
	Priority        float64                                   `json:"priority"`
	Parameters      []dialogflowcxintent.ParametersState      `json:"parameters"`
	Timeouts        *dialogflowcxintent.TimeoutsState         `json:"timeouts"`
	TrainingPhrases []dialogflowcxintent.TrainingPhrasesState `json:"training_phrases"`
}
