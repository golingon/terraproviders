// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	binaryauthorizationpolicy "github.com/golingon/terraproviders/google/4.59.0/binaryauthorizationpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBinaryAuthorizationPolicy(name string, args BinaryAuthorizationPolicyArgs) *BinaryAuthorizationPolicy {
	return &BinaryAuthorizationPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BinaryAuthorizationPolicy)(nil)

type BinaryAuthorizationPolicy struct {
	Name  string
	Args  BinaryAuthorizationPolicyArgs
	state *binaryAuthorizationPolicyState
}

func (bap *BinaryAuthorizationPolicy) Type() string {
	return "google_binary_authorization_policy"
}

func (bap *BinaryAuthorizationPolicy) LocalName() string {
	return bap.Name
}

func (bap *BinaryAuthorizationPolicy) Configuration() interface{} {
	return bap.Args
}

func (bap *BinaryAuthorizationPolicy) Attributes() binaryAuthorizationPolicyAttributes {
	return binaryAuthorizationPolicyAttributes{ref: terra.ReferenceResource(bap)}
}

func (bap *BinaryAuthorizationPolicy) ImportState(av io.Reader) error {
	bap.state = &binaryAuthorizationPolicyState{}
	if err := json.NewDecoder(av).Decode(bap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bap.Type(), bap.LocalName(), err)
	}
	return nil
}

func (bap *BinaryAuthorizationPolicy) State() (*binaryAuthorizationPolicyState, bool) {
	return bap.state, bap.state != nil
}

func (bap *BinaryAuthorizationPolicy) StateMust() *binaryAuthorizationPolicyState {
	if bap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bap.Type(), bap.LocalName()))
	}
	return bap.state
}

func (bap *BinaryAuthorizationPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(bap)
}

type BinaryAuthorizationPolicyArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GlobalPolicyEvaluationMode: string, optional
	GlobalPolicyEvaluationMode terra.StringValue `hcl:"global_policy_evaluation_mode,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// AdmissionWhitelistPatterns: min=0
	AdmissionWhitelistPatterns []binaryauthorizationpolicy.AdmissionWhitelistPatterns `hcl:"admission_whitelist_patterns,block" validate:"min=0"`
	// ClusterAdmissionRules: min=0
	ClusterAdmissionRules []binaryauthorizationpolicy.ClusterAdmissionRules `hcl:"cluster_admission_rules,block" validate:"min=0"`
	// DefaultAdmissionRule: required
	DefaultAdmissionRule *binaryauthorizationpolicy.DefaultAdmissionRule `hcl:"default_admission_rule,block" validate:"required"`
	// Timeouts: optional
	Timeouts *binaryauthorizationpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BinaryAuthorizationPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type binaryAuthorizationPolicyAttributes struct {
	ref terra.Reference
}

func (bap binaryAuthorizationPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(bap.ref.Append("description"))
}

func (bap binaryAuthorizationPolicyAttributes) GlobalPolicyEvaluationMode() terra.StringValue {
	return terra.ReferenceString(bap.ref.Append("global_policy_evaluation_mode"))
}

func (bap binaryAuthorizationPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bap.ref.Append("id"))
}

func (bap binaryAuthorizationPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bap.ref.Append("project"))
}

func (bap binaryAuthorizationPolicyAttributes) AdmissionWhitelistPatterns() terra.ListValue[binaryauthorizationpolicy.AdmissionWhitelistPatternsAttributes] {
	return terra.ReferenceList[binaryauthorizationpolicy.AdmissionWhitelistPatternsAttributes](bap.ref.Append("admission_whitelist_patterns"))
}

func (bap binaryAuthorizationPolicyAttributes) ClusterAdmissionRules() terra.SetValue[binaryauthorizationpolicy.ClusterAdmissionRulesAttributes] {
	return terra.ReferenceSet[binaryauthorizationpolicy.ClusterAdmissionRulesAttributes](bap.ref.Append("cluster_admission_rules"))
}

func (bap binaryAuthorizationPolicyAttributes) DefaultAdmissionRule() terra.ListValue[binaryauthorizationpolicy.DefaultAdmissionRuleAttributes] {
	return terra.ReferenceList[binaryauthorizationpolicy.DefaultAdmissionRuleAttributes](bap.ref.Append("default_admission_rule"))
}

func (bap binaryAuthorizationPolicyAttributes) Timeouts() binaryauthorizationpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[binaryauthorizationpolicy.TimeoutsAttributes](bap.ref.Append("timeouts"))
}

type binaryAuthorizationPolicyState struct {
	Description                string                                                      `json:"description"`
	GlobalPolicyEvaluationMode string                                                      `json:"global_policy_evaluation_mode"`
	Id                         string                                                      `json:"id"`
	Project                    string                                                      `json:"project"`
	AdmissionWhitelistPatterns []binaryauthorizationpolicy.AdmissionWhitelistPatternsState `json:"admission_whitelist_patterns"`
	ClusterAdmissionRules      []binaryauthorizationpolicy.ClusterAdmissionRulesState      `json:"cluster_admission_rules"`
	DefaultAdmissionRule       []binaryauthorizationpolicy.DefaultAdmissionRuleState       `json:"default_admission_rule"`
	Timeouts                   *binaryauthorizationpolicy.TimeoutsState                    `json:"timeouts"`
}
