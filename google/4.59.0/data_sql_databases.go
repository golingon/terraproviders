// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	datasqldatabases "github.com/golingon/terraproviders/google/4.59.0/datasqldatabases"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataSqlDatabases(name string, args DataSqlDatabasesArgs) *DataSqlDatabases {
	return &DataSqlDatabases{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataSqlDatabases)(nil)

type DataSqlDatabases struct {
	Name string
	Args DataSqlDatabasesArgs
}

func (sd *DataSqlDatabases) DataSource() string {
	return "google_sql_databases"
}

func (sd *DataSqlDatabases) LocalName() string {
	return sd.Name
}

func (sd *DataSqlDatabases) Configuration() interface{} {
	return sd.Args
}

func (sd *DataSqlDatabases) Attributes() dataSqlDatabasesAttributes {
	return dataSqlDatabasesAttributes{ref: terra.ReferenceDataResource(sd)}
}

type DataSqlDatabasesArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Databases: min=0
	Databases []datasqldatabases.Databases `hcl:"databases,block" validate:"min=0"`
}
type dataSqlDatabasesAttributes struct {
	ref terra.Reference
}

func (sd dataSqlDatabasesAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sd.ref.Append("id"))
}

func (sd dataSqlDatabasesAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(sd.ref.Append("instance"))
}

func (sd dataSqlDatabasesAttributes) Project() terra.StringValue {
	return terra.ReferenceString(sd.ref.Append("project"))
}

func (sd dataSqlDatabasesAttributes) Databases() terra.ListValue[datasqldatabases.DatabasesAttributes] {
	return terra.ReferenceList[datasqldatabases.DatabasesAttributes](sd.ref.Append("databases"))
}
