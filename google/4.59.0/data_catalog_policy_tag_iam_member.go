// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	datacatalogpolicytagiammember "github.com/golingon/terraproviders/google/4.59.0/datacatalogpolicytagiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataCatalogPolicyTagIamMember(name string, args DataCatalogPolicyTagIamMemberArgs) *DataCatalogPolicyTagIamMember {
	return &DataCatalogPolicyTagIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataCatalogPolicyTagIamMember)(nil)

type DataCatalogPolicyTagIamMember struct {
	Name  string
	Args  DataCatalogPolicyTagIamMemberArgs
	state *dataCatalogPolicyTagIamMemberState
}

func (dcptim *DataCatalogPolicyTagIamMember) Type() string {
	return "google_data_catalog_policy_tag_iam_member"
}

func (dcptim *DataCatalogPolicyTagIamMember) LocalName() string {
	return dcptim.Name
}

func (dcptim *DataCatalogPolicyTagIamMember) Configuration() interface{} {
	return dcptim.Args
}

func (dcptim *DataCatalogPolicyTagIamMember) Attributes() dataCatalogPolicyTagIamMemberAttributes {
	return dataCatalogPolicyTagIamMemberAttributes{ref: terra.ReferenceResource(dcptim)}
}

func (dcptim *DataCatalogPolicyTagIamMember) ImportState(av io.Reader) error {
	dcptim.state = &dataCatalogPolicyTagIamMemberState{}
	if err := json.NewDecoder(av).Decode(dcptim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcptim.Type(), dcptim.LocalName(), err)
	}
	return nil
}

func (dcptim *DataCatalogPolicyTagIamMember) State() (*dataCatalogPolicyTagIamMemberState, bool) {
	return dcptim.state, dcptim.state != nil
}

func (dcptim *DataCatalogPolicyTagIamMember) StateMust() *dataCatalogPolicyTagIamMemberState {
	if dcptim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcptim.Type(), dcptim.LocalName()))
	}
	return dcptim.state
}

func (dcptim *DataCatalogPolicyTagIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(dcptim)
}

type DataCatalogPolicyTagIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// PolicyTag: string, required
	PolicyTag terra.StringValue `hcl:"policy_tag,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *datacatalogpolicytagiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataCatalogPolicyTagIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataCatalogPolicyTagIamMemberAttributes struct {
	ref terra.Reference
}

func (dcptim dataCatalogPolicyTagIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dcptim.ref.Append("etag"))
}

func (dcptim dataCatalogPolicyTagIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dcptim.ref.Append("id"))
}

func (dcptim dataCatalogPolicyTagIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(dcptim.ref.Append("member"))
}

func (dcptim dataCatalogPolicyTagIamMemberAttributes) PolicyTag() terra.StringValue {
	return terra.ReferenceString(dcptim.ref.Append("policy_tag"))
}

func (dcptim dataCatalogPolicyTagIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(dcptim.ref.Append("role"))
}

func (dcptim dataCatalogPolicyTagIamMemberAttributes) Condition() terra.ListValue[datacatalogpolicytagiammember.ConditionAttributes] {
	return terra.ReferenceList[datacatalogpolicytagiammember.ConditionAttributes](dcptim.ref.Append("condition"))
}

type dataCatalogPolicyTagIamMemberState struct {
	Etag      string                                         `json:"etag"`
	Id        string                                         `json:"id"`
	Member    string                                         `json:"member"`
	PolicyTag string                                         `json:"policy_tag"`
	Role      string                                         `json:"role"`
	Condition []datacatalogpolicytagiammember.ConditionState `json:"condition"`
}
