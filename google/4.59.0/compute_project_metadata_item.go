// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeprojectmetadataitem "github.com/golingon/terraproviders/google/4.59.0/computeprojectmetadataitem"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeProjectMetadataItem(name string, args ComputeProjectMetadataItemArgs) *ComputeProjectMetadataItem {
	return &ComputeProjectMetadataItem{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeProjectMetadataItem)(nil)

type ComputeProjectMetadataItem struct {
	Name  string
	Args  ComputeProjectMetadataItemArgs
	state *computeProjectMetadataItemState
}

func (cpmi *ComputeProjectMetadataItem) Type() string {
	return "google_compute_project_metadata_item"
}

func (cpmi *ComputeProjectMetadataItem) LocalName() string {
	return cpmi.Name
}

func (cpmi *ComputeProjectMetadataItem) Configuration() interface{} {
	return cpmi.Args
}

func (cpmi *ComputeProjectMetadataItem) Attributes() computeProjectMetadataItemAttributes {
	return computeProjectMetadataItemAttributes{ref: terra.ReferenceResource(cpmi)}
}

func (cpmi *ComputeProjectMetadataItem) ImportState(av io.Reader) error {
	cpmi.state = &computeProjectMetadataItemState{}
	if err := json.NewDecoder(av).Decode(cpmi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cpmi.Type(), cpmi.LocalName(), err)
	}
	return nil
}

func (cpmi *ComputeProjectMetadataItem) State() (*computeProjectMetadataItemState, bool) {
	return cpmi.state, cpmi.state != nil
}

func (cpmi *ComputeProjectMetadataItem) StateMust() *computeProjectMetadataItemState {
	if cpmi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cpmi.Type(), cpmi.LocalName()))
	}
	return cpmi.state
}

func (cpmi *ComputeProjectMetadataItem) DependOn() terra.Reference {
	return terra.ReferenceResource(cpmi)
}

type ComputeProjectMetadataItemArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *computeprojectmetadataitem.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeProjectMetadataItem depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeProjectMetadataItemAttributes struct {
	ref terra.Reference
}

func (cpmi computeProjectMetadataItemAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cpmi.ref.Append("id"))
}

func (cpmi computeProjectMetadataItemAttributes) Key() terra.StringValue {
	return terra.ReferenceString(cpmi.ref.Append("key"))
}

func (cpmi computeProjectMetadataItemAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cpmi.ref.Append("project"))
}

func (cpmi computeProjectMetadataItemAttributes) Value() terra.StringValue {
	return terra.ReferenceString(cpmi.ref.Append("value"))
}

func (cpmi computeProjectMetadataItemAttributes) Timeouts() computeprojectmetadataitem.TimeoutsAttributes {
	return terra.ReferenceSingle[computeprojectmetadataitem.TimeoutsAttributes](cpmi.ref.Append("timeouts"))
}

type computeProjectMetadataItemState struct {
	Id       string                                    `json:"id"`
	Key      string                                    `json:"key"`
	Project  string                                    `json:"project"`
	Value    string                                    `json:"value"`
	Timeouts *computeprojectmetadataitem.TimeoutsState `json:"timeouts"`
}
