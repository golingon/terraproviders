// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computebackendbucketsignedurlkey "github.com/golingon/terraproviders/google/4.59.0/computebackendbucketsignedurlkey"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeBackendBucketSignedUrlKey(name string, args ComputeBackendBucketSignedUrlKeyArgs) *ComputeBackendBucketSignedUrlKey {
	return &ComputeBackendBucketSignedUrlKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeBackendBucketSignedUrlKey)(nil)

type ComputeBackendBucketSignedUrlKey struct {
	Name  string
	Args  ComputeBackendBucketSignedUrlKeyArgs
	state *computeBackendBucketSignedUrlKeyState
}

func (cbbsuk *ComputeBackendBucketSignedUrlKey) Type() string {
	return "google_compute_backend_bucket_signed_url_key"
}

func (cbbsuk *ComputeBackendBucketSignedUrlKey) LocalName() string {
	return cbbsuk.Name
}

func (cbbsuk *ComputeBackendBucketSignedUrlKey) Configuration() interface{} {
	return cbbsuk.Args
}

func (cbbsuk *ComputeBackendBucketSignedUrlKey) Attributes() computeBackendBucketSignedUrlKeyAttributes {
	return computeBackendBucketSignedUrlKeyAttributes{ref: terra.ReferenceResource(cbbsuk)}
}

func (cbbsuk *ComputeBackendBucketSignedUrlKey) ImportState(av io.Reader) error {
	cbbsuk.state = &computeBackendBucketSignedUrlKeyState{}
	if err := json.NewDecoder(av).Decode(cbbsuk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cbbsuk.Type(), cbbsuk.LocalName(), err)
	}
	return nil
}

func (cbbsuk *ComputeBackendBucketSignedUrlKey) State() (*computeBackendBucketSignedUrlKeyState, bool) {
	return cbbsuk.state, cbbsuk.state != nil
}

func (cbbsuk *ComputeBackendBucketSignedUrlKey) StateMust() *computeBackendBucketSignedUrlKeyState {
	if cbbsuk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cbbsuk.Type(), cbbsuk.LocalName()))
	}
	return cbbsuk.state
}

func (cbbsuk *ComputeBackendBucketSignedUrlKey) DependOn() terra.Reference {
	return terra.ReferenceResource(cbbsuk)
}

type ComputeBackendBucketSignedUrlKeyArgs struct {
	// BackendBucket: string, required
	BackendBucket terra.StringValue `hcl:"backend_bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyValue: string, required
	KeyValue terra.StringValue `hcl:"key_value,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *computebackendbucketsignedurlkey.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeBackendBucketSignedUrlKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeBackendBucketSignedUrlKeyAttributes struct {
	ref terra.Reference
}

func (cbbsuk computeBackendBucketSignedUrlKeyAttributes) BackendBucket() terra.StringValue {
	return terra.ReferenceString(cbbsuk.ref.Append("backend_bucket"))
}

func (cbbsuk computeBackendBucketSignedUrlKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cbbsuk.ref.Append("id"))
}

func (cbbsuk computeBackendBucketSignedUrlKeyAttributes) KeyValue() terra.StringValue {
	return terra.ReferenceString(cbbsuk.ref.Append("key_value"))
}

func (cbbsuk computeBackendBucketSignedUrlKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cbbsuk.ref.Append("name"))
}

func (cbbsuk computeBackendBucketSignedUrlKeyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cbbsuk.ref.Append("project"))
}

func (cbbsuk computeBackendBucketSignedUrlKeyAttributes) Timeouts() computebackendbucketsignedurlkey.TimeoutsAttributes {
	return terra.ReferenceSingle[computebackendbucketsignedurlkey.TimeoutsAttributes](cbbsuk.ref.Append("timeouts"))
}

type computeBackendBucketSignedUrlKeyState struct {
	BackendBucket string                                          `json:"backend_bucket"`
	Id            string                                          `json:"id"`
	KeyValue      string                                          `json:"key_value"`
	Name          string                                          `json:"name"`
	Project       string                                          `json:"project"`
	Timeouts      *computebackendbucketsignedurlkey.TimeoutsState `json:"timeouts"`
}
