// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	cloudidsendpoint "github.com/golingon/terraproviders/google/4.59.0/cloudidsendpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudIdsEndpoint(name string, args CloudIdsEndpointArgs) *CloudIdsEndpoint {
	return &CloudIdsEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudIdsEndpoint)(nil)

type CloudIdsEndpoint struct {
	Name  string
	Args  CloudIdsEndpointArgs
	state *cloudIdsEndpointState
}

func (cie *CloudIdsEndpoint) Type() string {
	return "google_cloud_ids_endpoint"
}

func (cie *CloudIdsEndpoint) LocalName() string {
	return cie.Name
}

func (cie *CloudIdsEndpoint) Configuration() interface{} {
	return cie.Args
}

func (cie *CloudIdsEndpoint) Attributes() cloudIdsEndpointAttributes {
	return cloudIdsEndpointAttributes{ref: terra.ReferenceResource(cie)}
}

func (cie *CloudIdsEndpoint) ImportState(av io.Reader) error {
	cie.state = &cloudIdsEndpointState{}
	if err := json.NewDecoder(av).Decode(cie.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cie.Type(), cie.LocalName(), err)
	}
	return nil
}

func (cie *CloudIdsEndpoint) State() (*cloudIdsEndpointState, bool) {
	return cie.state, cie.state != nil
}

func (cie *CloudIdsEndpoint) StateMust() *cloudIdsEndpointState {
	if cie.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cie.Type(), cie.LocalName()))
	}
	return cie.state
}

func (cie *CloudIdsEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(cie)
}

type CloudIdsEndpointArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Severity: string, required
	Severity terra.StringValue `hcl:"severity,attr" validate:"required"`
	// ThreatExceptions: list of string, optional
	ThreatExceptions terra.ListValue[terra.StringValue] `hcl:"threat_exceptions,attr"`
	// Timeouts: optional
	Timeouts *cloudidsendpoint.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CloudIdsEndpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudIdsEndpointAttributes struct {
	ref terra.Reference
}

func (cie cloudIdsEndpointAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(cie.ref.Append("create_time"))
}

func (cie cloudIdsEndpointAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cie.ref.Append("description"))
}

func (cie cloudIdsEndpointAttributes) EndpointForwardingRule() terra.StringValue {
	return terra.ReferenceString(cie.ref.Append("endpoint_forwarding_rule"))
}

func (cie cloudIdsEndpointAttributes) EndpointIp() terra.StringValue {
	return terra.ReferenceString(cie.ref.Append("endpoint_ip"))
}

func (cie cloudIdsEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cie.ref.Append("id"))
}

func (cie cloudIdsEndpointAttributes) Location() terra.StringValue {
	return terra.ReferenceString(cie.ref.Append("location"))
}

func (cie cloudIdsEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cie.ref.Append("name"))
}

func (cie cloudIdsEndpointAttributes) Network() terra.StringValue {
	return terra.ReferenceString(cie.ref.Append("network"))
}

func (cie cloudIdsEndpointAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cie.ref.Append("project"))
}

func (cie cloudIdsEndpointAttributes) Severity() terra.StringValue {
	return terra.ReferenceString(cie.ref.Append("severity"))
}

func (cie cloudIdsEndpointAttributes) ThreatExceptions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cie.ref.Append("threat_exceptions"))
}

func (cie cloudIdsEndpointAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(cie.ref.Append("update_time"))
}

func (cie cloudIdsEndpointAttributes) Timeouts() cloudidsendpoint.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudidsendpoint.TimeoutsAttributes](cie.ref.Append("timeouts"))
}

type cloudIdsEndpointState struct {
	CreateTime             string                          `json:"create_time"`
	Description            string                          `json:"description"`
	EndpointForwardingRule string                          `json:"endpoint_forwarding_rule"`
	EndpointIp             string                          `json:"endpoint_ip"`
	Id                     string                          `json:"id"`
	Location               string                          `json:"location"`
	Name                   string                          `json:"name"`
	Network                string                          `json:"network"`
	Project                string                          `json:"project"`
	Severity               string                          `json:"severity"`
	ThreatExceptions       []string                        `json:"threat_exceptions"`
	UpdateTime             string                          `json:"update_time"`
	Timeouts               *cloudidsendpoint.TimeoutsState `json:"timeouts"`
}
