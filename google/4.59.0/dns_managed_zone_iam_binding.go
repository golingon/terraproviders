// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dnsmanagedzoneiambinding "github.com/golingon/terraproviders/google/4.59.0/dnsmanagedzoneiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDnsManagedZoneIamBinding(name string, args DnsManagedZoneIamBindingArgs) *DnsManagedZoneIamBinding {
	return &DnsManagedZoneIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DnsManagedZoneIamBinding)(nil)

type DnsManagedZoneIamBinding struct {
	Name  string
	Args  DnsManagedZoneIamBindingArgs
	state *dnsManagedZoneIamBindingState
}

func (dmzib *DnsManagedZoneIamBinding) Type() string {
	return "google_dns_managed_zone_iam_binding"
}

func (dmzib *DnsManagedZoneIamBinding) LocalName() string {
	return dmzib.Name
}

func (dmzib *DnsManagedZoneIamBinding) Configuration() interface{} {
	return dmzib.Args
}

func (dmzib *DnsManagedZoneIamBinding) Attributes() dnsManagedZoneIamBindingAttributes {
	return dnsManagedZoneIamBindingAttributes{ref: terra.ReferenceResource(dmzib)}
}

func (dmzib *DnsManagedZoneIamBinding) ImportState(av io.Reader) error {
	dmzib.state = &dnsManagedZoneIamBindingState{}
	if err := json.NewDecoder(av).Decode(dmzib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dmzib.Type(), dmzib.LocalName(), err)
	}
	return nil
}

func (dmzib *DnsManagedZoneIamBinding) State() (*dnsManagedZoneIamBindingState, bool) {
	return dmzib.state, dmzib.state != nil
}

func (dmzib *DnsManagedZoneIamBinding) StateMust() *dnsManagedZoneIamBindingState {
	if dmzib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dmzib.Type(), dmzib.LocalName()))
	}
	return dmzib.state
}

func (dmzib *DnsManagedZoneIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(dmzib)
}

type DnsManagedZoneIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagedZone: string, required
	ManagedZone terra.StringValue `hcl:"managed_zone,attr" validate:"required"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *dnsmanagedzoneiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DnsManagedZoneIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dnsManagedZoneIamBindingAttributes struct {
	ref terra.Reference
}

func (dmzib dnsManagedZoneIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dmzib.ref.Append("etag"))
}

func (dmzib dnsManagedZoneIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dmzib.ref.Append("id"))
}

func (dmzib dnsManagedZoneIamBindingAttributes) ManagedZone() terra.StringValue {
	return terra.ReferenceString(dmzib.ref.Append("managed_zone"))
}

func (dmzib dnsManagedZoneIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dmzib.ref.Append("members"))
}

func (dmzib dnsManagedZoneIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dmzib.ref.Append("project"))
}

func (dmzib dnsManagedZoneIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(dmzib.ref.Append("role"))
}

func (dmzib dnsManagedZoneIamBindingAttributes) Condition() terra.ListValue[dnsmanagedzoneiambinding.ConditionAttributes] {
	return terra.ReferenceList[dnsmanagedzoneiambinding.ConditionAttributes](dmzib.ref.Append("condition"))
}

type dnsManagedZoneIamBindingState struct {
	Etag        string                                    `json:"etag"`
	Id          string                                    `json:"id"`
	ManagedZone string                                    `json:"managed_zone"`
	Members     []string                                  `json:"members"`
	Project     string                                    `json:"project"`
	Role        string                                    `json:"role"`
	Condition   []dnsmanagedzoneiambinding.ConditionState `json:"condition"`
}
