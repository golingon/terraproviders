// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	monitoringmetricdescriptor "github.com/golingon/terraproviders/google/4.59.0/monitoringmetricdescriptor"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitoringMetricDescriptor(name string, args MonitoringMetricDescriptorArgs) *MonitoringMetricDescriptor {
	return &MonitoringMetricDescriptor{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitoringMetricDescriptor)(nil)

type MonitoringMetricDescriptor struct {
	Name  string
	Args  MonitoringMetricDescriptorArgs
	state *monitoringMetricDescriptorState
}

func (mmd *MonitoringMetricDescriptor) Type() string {
	return "google_monitoring_metric_descriptor"
}

func (mmd *MonitoringMetricDescriptor) LocalName() string {
	return mmd.Name
}

func (mmd *MonitoringMetricDescriptor) Configuration() interface{} {
	return mmd.Args
}

func (mmd *MonitoringMetricDescriptor) Attributes() monitoringMetricDescriptorAttributes {
	return monitoringMetricDescriptorAttributes{ref: terra.ReferenceResource(mmd)}
}

func (mmd *MonitoringMetricDescriptor) ImportState(av io.Reader) error {
	mmd.state = &monitoringMetricDescriptorState{}
	if err := json.NewDecoder(av).Decode(mmd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mmd.Type(), mmd.LocalName(), err)
	}
	return nil
}

func (mmd *MonitoringMetricDescriptor) State() (*monitoringMetricDescriptorState, bool) {
	return mmd.state, mmd.state != nil
}

func (mmd *MonitoringMetricDescriptor) StateMust() *monitoringMetricDescriptorState {
	if mmd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mmd.Type(), mmd.LocalName()))
	}
	return mmd.state
}

func (mmd *MonitoringMetricDescriptor) DependOn() terra.Reference {
	return terra.ReferenceResource(mmd)
}

type MonitoringMetricDescriptorArgs struct {
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LaunchStage: string, optional
	LaunchStage terra.StringValue `hcl:"launch_stage,attr"`
	// MetricKind: string, required
	MetricKind terra.StringValue `hcl:"metric_kind,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Unit: string, optional
	Unit terra.StringValue `hcl:"unit,attr"`
	// ValueType: string, required
	ValueType terra.StringValue `hcl:"value_type,attr" validate:"required"`
	// Labels: min=0
	Labels []monitoringmetricdescriptor.Labels `hcl:"labels,block" validate:"min=0"`
	// Metadata: optional
	Metadata *monitoringmetricdescriptor.Metadata `hcl:"metadata,block"`
	// Timeouts: optional
	Timeouts *monitoringmetricdescriptor.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MonitoringMetricDescriptor depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitoringMetricDescriptorAttributes struct {
	ref terra.Reference
}

func (mmd monitoringMetricDescriptorAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mmd.ref.Append("description"))
}

func (mmd monitoringMetricDescriptorAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(mmd.ref.Append("display_name"))
}

func (mmd monitoringMetricDescriptorAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mmd.ref.Append("id"))
}

func (mmd monitoringMetricDescriptorAttributes) LaunchStage() terra.StringValue {
	return terra.ReferenceString(mmd.ref.Append("launch_stage"))
}

func (mmd monitoringMetricDescriptorAttributes) MetricKind() terra.StringValue {
	return terra.ReferenceString(mmd.ref.Append("metric_kind"))
}

func (mmd monitoringMetricDescriptorAttributes) MonitoredResourceTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](mmd.ref.Append("monitored_resource_types"))
}

func (mmd monitoringMetricDescriptorAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mmd.ref.Append("name"))
}

func (mmd monitoringMetricDescriptorAttributes) Project() terra.StringValue {
	return terra.ReferenceString(mmd.ref.Append("project"))
}

func (mmd monitoringMetricDescriptorAttributes) Type() terra.StringValue {
	return terra.ReferenceString(mmd.ref.Append("type"))
}

func (mmd monitoringMetricDescriptorAttributes) Unit() terra.StringValue {
	return terra.ReferenceString(mmd.ref.Append("unit"))
}

func (mmd monitoringMetricDescriptorAttributes) ValueType() terra.StringValue {
	return terra.ReferenceString(mmd.ref.Append("value_type"))
}

func (mmd monitoringMetricDescriptorAttributes) Labels() terra.SetValue[monitoringmetricdescriptor.LabelsAttributes] {
	return terra.ReferenceSet[monitoringmetricdescriptor.LabelsAttributes](mmd.ref.Append("labels"))
}

func (mmd monitoringMetricDescriptorAttributes) Metadata() terra.ListValue[monitoringmetricdescriptor.MetadataAttributes] {
	return terra.ReferenceList[monitoringmetricdescriptor.MetadataAttributes](mmd.ref.Append("metadata"))
}

func (mmd monitoringMetricDescriptorAttributes) Timeouts() monitoringmetricdescriptor.TimeoutsAttributes {
	return terra.ReferenceSingle[monitoringmetricdescriptor.TimeoutsAttributes](mmd.ref.Append("timeouts"))
}

type monitoringMetricDescriptorState struct {
	Description            string                                     `json:"description"`
	DisplayName            string                                     `json:"display_name"`
	Id                     string                                     `json:"id"`
	LaunchStage            string                                     `json:"launch_stage"`
	MetricKind             string                                     `json:"metric_kind"`
	MonitoredResourceTypes []string                                   `json:"monitored_resource_types"`
	Name                   string                                     `json:"name"`
	Project                string                                     `json:"project"`
	Type                   string                                     `json:"type"`
	Unit                   string                                     `json:"unit"`
	ValueType              string                                     `json:"value_type"`
	Labels                 []monitoringmetricdescriptor.LabelsState   `json:"labels"`
	Metadata               []monitoringmetricdescriptor.MetadataState `json:"metadata"`
	Timeouts               *monitoringmetricdescriptor.TimeoutsState  `json:"timeouts"`
}
