// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewProjectIamPolicy(name string, args ProjectIamPolicyArgs) *ProjectIamPolicy {
	return &ProjectIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ProjectIamPolicy)(nil)

type ProjectIamPolicy struct {
	Name  string
	Args  ProjectIamPolicyArgs
	state *projectIamPolicyState
}

func (pip *ProjectIamPolicy) Type() string {
	return "google_project_iam_policy"
}

func (pip *ProjectIamPolicy) LocalName() string {
	return pip.Name
}

func (pip *ProjectIamPolicy) Configuration() interface{} {
	return pip.Args
}

func (pip *ProjectIamPolicy) Attributes() projectIamPolicyAttributes {
	return projectIamPolicyAttributes{ref: terra.ReferenceResource(pip)}
}

func (pip *ProjectIamPolicy) ImportState(av io.Reader) error {
	pip.state = &projectIamPolicyState{}
	if err := json.NewDecoder(av).Decode(pip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pip.Type(), pip.LocalName(), err)
	}
	return nil
}

func (pip *ProjectIamPolicy) State() (*projectIamPolicyState, bool) {
	return pip.state, pip.state != nil
}

func (pip *ProjectIamPolicy) StateMust() *projectIamPolicyState {
	if pip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pip.Type(), pip.LocalName()))
	}
	return pip.state
}

func (pip *ProjectIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(pip)
}

type ProjectIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// DependsOn contains resources that ProjectIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type projectIamPolicyAttributes struct {
	ref terra.Reference
}

func (pip projectIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(pip.ref.Append("etag"))
}

func (pip projectIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pip.ref.Append("id"))
}

func (pip projectIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(pip.ref.Append("policy_data"))
}

func (pip projectIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(pip.ref.Append("project"))
}

type projectIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
}
