// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeregionnetworkfirewallpolicy "github.com/golingon/terraproviders/google/4.59.0/computeregionnetworkfirewallpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeRegionNetworkFirewallPolicy(name string, args ComputeRegionNetworkFirewallPolicyArgs) *ComputeRegionNetworkFirewallPolicy {
	return &ComputeRegionNetworkFirewallPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeRegionNetworkFirewallPolicy)(nil)

type ComputeRegionNetworkFirewallPolicy struct {
	Name  string
	Args  ComputeRegionNetworkFirewallPolicyArgs
	state *computeRegionNetworkFirewallPolicyState
}

func (crnfp *ComputeRegionNetworkFirewallPolicy) Type() string {
	return "google_compute_region_network_firewall_policy"
}

func (crnfp *ComputeRegionNetworkFirewallPolicy) LocalName() string {
	return crnfp.Name
}

func (crnfp *ComputeRegionNetworkFirewallPolicy) Configuration() interface{} {
	return crnfp.Args
}

func (crnfp *ComputeRegionNetworkFirewallPolicy) Attributes() computeRegionNetworkFirewallPolicyAttributes {
	return computeRegionNetworkFirewallPolicyAttributes{ref: terra.ReferenceResource(crnfp)}
}

func (crnfp *ComputeRegionNetworkFirewallPolicy) ImportState(av io.Reader) error {
	crnfp.state = &computeRegionNetworkFirewallPolicyState{}
	if err := json.NewDecoder(av).Decode(crnfp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crnfp.Type(), crnfp.LocalName(), err)
	}
	return nil
}

func (crnfp *ComputeRegionNetworkFirewallPolicy) State() (*computeRegionNetworkFirewallPolicyState, bool) {
	return crnfp.state, crnfp.state != nil
}

func (crnfp *ComputeRegionNetworkFirewallPolicy) StateMust() *computeRegionNetworkFirewallPolicyState {
	if crnfp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crnfp.Type(), crnfp.LocalName()))
	}
	return crnfp.state
}

func (crnfp *ComputeRegionNetworkFirewallPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(crnfp)
}

type ComputeRegionNetworkFirewallPolicyArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Timeouts: optional
	Timeouts *computeregionnetworkfirewallpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeRegionNetworkFirewallPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeRegionNetworkFirewallPolicyAttributes struct {
	ref terra.Reference
}

func (crnfp computeRegionNetworkFirewallPolicyAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(crnfp.ref.Append("creation_timestamp"))
}

func (crnfp computeRegionNetworkFirewallPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(crnfp.ref.Append("description"))
}

func (crnfp computeRegionNetworkFirewallPolicyAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceString(crnfp.ref.Append("fingerprint"))
}

func (crnfp computeRegionNetworkFirewallPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crnfp.ref.Append("id"))
}

func (crnfp computeRegionNetworkFirewallPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crnfp.ref.Append("name"))
}

func (crnfp computeRegionNetworkFirewallPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crnfp.ref.Append("project"))
}

func (crnfp computeRegionNetworkFirewallPolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceString(crnfp.ref.Append("region"))
}

func (crnfp computeRegionNetworkFirewallPolicyAttributes) RegionNetworkFirewallPolicyId() terra.StringValue {
	return terra.ReferenceString(crnfp.ref.Append("region_network_firewall_policy_id"))
}

func (crnfp computeRegionNetworkFirewallPolicyAttributes) RuleTupleCount() terra.NumberValue {
	return terra.ReferenceNumber(crnfp.ref.Append("rule_tuple_count"))
}

func (crnfp computeRegionNetworkFirewallPolicyAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(crnfp.ref.Append("self_link"))
}

func (crnfp computeRegionNetworkFirewallPolicyAttributes) SelfLinkWithId() terra.StringValue {
	return terra.ReferenceString(crnfp.ref.Append("self_link_with_id"))
}

func (crnfp computeRegionNetworkFirewallPolicyAttributes) Timeouts() computeregionnetworkfirewallpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[computeregionnetworkfirewallpolicy.TimeoutsAttributes](crnfp.ref.Append("timeouts"))
}

type computeRegionNetworkFirewallPolicyState struct {
	CreationTimestamp             string                                            `json:"creation_timestamp"`
	Description                   string                                            `json:"description"`
	Fingerprint                   string                                            `json:"fingerprint"`
	Id                            string                                            `json:"id"`
	Name                          string                                            `json:"name"`
	Project                       string                                            `json:"project"`
	Region                        string                                            `json:"region"`
	RegionNetworkFirewallPolicyId string                                            `json:"region_network_firewall_policy_id"`
	RuleTupleCount                float64                                           `json:"rule_tuple_count"`
	SelfLink                      string                                            `json:"self_link"`
	SelfLinkWithId                string                                            `json:"self_link_with_id"`
	Timeouts                      *computeregionnetworkfirewallpolicy.TimeoutsState `json:"timeouts"`
}
