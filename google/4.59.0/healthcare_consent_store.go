// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	healthcareconsentstore "github.com/golingon/terraproviders/google/4.59.0/healthcareconsentstore"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewHealthcareConsentStore(name string, args HealthcareConsentStoreArgs) *HealthcareConsentStore {
	return &HealthcareConsentStore{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HealthcareConsentStore)(nil)

type HealthcareConsentStore struct {
	Name  string
	Args  HealthcareConsentStoreArgs
	state *healthcareConsentStoreState
}

func (hcs *HealthcareConsentStore) Type() string {
	return "google_healthcare_consent_store"
}

func (hcs *HealthcareConsentStore) LocalName() string {
	return hcs.Name
}

func (hcs *HealthcareConsentStore) Configuration() interface{} {
	return hcs.Args
}

func (hcs *HealthcareConsentStore) Attributes() healthcareConsentStoreAttributes {
	return healthcareConsentStoreAttributes{ref: terra.ReferenceResource(hcs)}
}

func (hcs *HealthcareConsentStore) ImportState(av io.Reader) error {
	hcs.state = &healthcareConsentStoreState{}
	if err := json.NewDecoder(av).Decode(hcs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hcs.Type(), hcs.LocalName(), err)
	}
	return nil
}

func (hcs *HealthcareConsentStore) State() (*healthcareConsentStoreState, bool) {
	return hcs.state, hcs.state != nil
}

func (hcs *HealthcareConsentStore) StateMust() *healthcareConsentStoreState {
	if hcs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hcs.Type(), hcs.LocalName()))
	}
	return hcs.state
}

func (hcs *HealthcareConsentStore) DependOn() terra.Reference {
	return terra.ReferenceResource(hcs)
}

type HealthcareConsentStoreArgs struct {
	// Dataset: string, required
	Dataset terra.StringValue `hcl:"dataset,attr" validate:"required"`
	// DefaultConsentTtl: string, optional
	DefaultConsentTtl terra.StringValue `hcl:"default_consent_ttl,attr"`
	// EnableConsentCreateOnUpdate: bool, optional
	EnableConsentCreateOnUpdate terra.BoolValue `hcl:"enable_consent_create_on_update,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *healthcareconsentstore.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that HealthcareConsentStore depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type healthcareConsentStoreAttributes struct {
	ref terra.Reference
}

func (hcs healthcareConsentStoreAttributes) Dataset() terra.StringValue {
	return terra.ReferenceString(hcs.ref.Append("dataset"))
}

func (hcs healthcareConsentStoreAttributes) DefaultConsentTtl() terra.StringValue {
	return terra.ReferenceString(hcs.ref.Append("default_consent_ttl"))
}

func (hcs healthcareConsentStoreAttributes) EnableConsentCreateOnUpdate() terra.BoolValue {
	return terra.ReferenceBool(hcs.ref.Append("enable_consent_create_on_update"))
}

func (hcs healthcareConsentStoreAttributes) Id() terra.StringValue {
	return terra.ReferenceString(hcs.ref.Append("id"))
}

func (hcs healthcareConsentStoreAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](hcs.ref.Append("labels"))
}

func (hcs healthcareConsentStoreAttributes) Name() terra.StringValue {
	return terra.ReferenceString(hcs.ref.Append("name"))
}

func (hcs healthcareConsentStoreAttributes) Timeouts() healthcareconsentstore.TimeoutsAttributes {
	return terra.ReferenceSingle[healthcareconsentstore.TimeoutsAttributes](hcs.ref.Append("timeouts"))
}

type healthcareConsentStoreState struct {
	Dataset                     string                                `json:"dataset"`
	DefaultConsentTtl           string                                `json:"default_consent_ttl"`
	EnableConsentCreateOnUpdate bool                                  `json:"enable_consent_create_on_update"`
	Id                          string                                `json:"id"`
	Labels                      map[string]string                     `json:"labels"`
	Name                        string                                `json:"name"`
	Timeouts                    *healthcareconsentstore.TimeoutsState `json:"timeouts"`
}
