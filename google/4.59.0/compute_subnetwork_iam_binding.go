// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computesubnetworkiambinding "github.com/golingon/terraproviders/google/4.59.0/computesubnetworkiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeSubnetworkIamBinding(name string, args ComputeSubnetworkIamBindingArgs) *ComputeSubnetworkIamBinding {
	return &ComputeSubnetworkIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeSubnetworkIamBinding)(nil)

type ComputeSubnetworkIamBinding struct {
	Name  string
	Args  ComputeSubnetworkIamBindingArgs
	state *computeSubnetworkIamBindingState
}

func (csib *ComputeSubnetworkIamBinding) Type() string {
	return "google_compute_subnetwork_iam_binding"
}

func (csib *ComputeSubnetworkIamBinding) LocalName() string {
	return csib.Name
}

func (csib *ComputeSubnetworkIamBinding) Configuration() interface{} {
	return csib.Args
}

func (csib *ComputeSubnetworkIamBinding) Attributes() computeSubnetworkIamBindingAttributes {
	return computeSubnetworkIamBindingAttributes{ref: terra.ReferenceResource(csib)}
}

func (csib *ComputeSubnetworkIamBinding) ImportState(av io.Reader) error {
	csib.state = &computeSubnetworkIamBindingState{}
	if err := json.NewDecoder(av).Decode(csib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csib.Type(), csib.LocalName(), err)
	}
	return nil
}

func (csib *ComputeSubnetworkIamBinding) State() (*computeSubnetworkIamBindingState, bool) {
	return csib.state, csib.state != nil
}

func (csib *ComputeSubnetworkIamBinding) StateMust() *computeSubnetworkIamBindingState {
	if csib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csib.Type(), csib.LocalName()))
	}
	return csib.state
}

func (csib *ComputeSubnetworkIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(csib)
}

type ComputeSubnetworkIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Subnetwork: string, required
	Subnetwork terra.StringValue `hcl:"subnetwork,attr" validate:"required"`
	// Condition: optional
	Condition *computesubnetworkiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that ComputeSubnetworkIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeSubnetworkIamBindingAttributes struct {
	ref terra.Reference
}

func (csib computeSubnetworkIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(csib.ref.Append("etag"))
}

func (csib computeSubnetworkIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(csib.ref.Append("id"))
}

func (csib computeSubnetworkIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](csib.ref.Append("members"))
}

func (csib computeSubnetworkIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(csib.ref.Append("project"))
}

func (csib computeSubnetworkIamBindingAttributes) Region() terra.StringValue {
	return terra.ReferenceString(csib.ref.Append("region"))
}

func (csib computeSubnetworkIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(csib.ref.Append("role"))
}

func (csib computeSubnetworkIamBindingAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceString(csib.ref.Append("subnetwork"))
}

func (csib computeSubnetworkIamBindingAttributes) Condition() terra.ListValue[computesubnetworkiambinding.ConditionAttributes] {
	return terra.ReferenceList[computesubnetworkiambinding.ConditionAttributes](csib.ref.Append("condition"))
}

type computeSubnetworkIamBindingState struct {
	Etag       string                                       `json:"etag"`
	Id         string                                       `json:"id"`
	Members    []string                                     `json:"members"`
	Project    string                                       `json:"project"`
	Region     string                                       `json:"region"`
	Role       string                                       `json:"role"`
	Subnetwork string                                       `json:"subnetwork"`
	Condition  []computesubnetworkiambinding.ConditionState `json:"condition"`
}
