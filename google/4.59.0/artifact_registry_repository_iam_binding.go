// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	artifactregistryrepositoryiambinding "github.com/golingon/terraproviders/google/4.59.0/artifactregistryrepositoryiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewArtifactRegistryRepositoryIamBinding(name string, args ArtifactRegistryRepositoryIamBindingArgs) *ArtifactRegistryRepositoryIamBinding {
	return &ArtifactRegistryRepositoryIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ArtifactRegistryRepositoryIamBinding)(nil)

type ArtifactRegistryRepositoryIamBinding struct {
	Name  string
	Args  ArtifactRegistryRepositoryIamBindingArgs
	state *artifactRegistryRepositoryIamBindingState
}

func (arrib *ArtifactRegistryRepositoryIamBinding) Type() string {
	return "google_artifact_registry_repository_iam_binding"
}

func (arrib *ArtifactRegistryRepositoryIamBinding) LocalName() string {
	return arrib.Name
}

func (arrib *ArtifactRegistryRepositoryIamBinding) Configuration() interface{} {
	return arrib.Args
}

func (arrib *ArtifactRegistryRepositoryIamBinding) Attributes() artifactRegistryRepositoryIamBindingAttributes {
	return artifactRegistryRepositoryIamBindingAttributes{ref: terra.ReferenceResource(arrib)}
}

func (arrib *ArtifactRegistryRepositoryIamBinding) ImportState(av io.Reader) error {
	arrib.state = &artifactRegistryRepositoryIamBindingState{}
	if err := json.NewDecoder(av).Decode(arrib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arrib.Type(), arrib.LocalName(), err)
	}
	return nil
}

func (arrib *ArtifactRegistryRepositoryIamBinding) State() (*artifactRegistryRepositoryIamBindingState, bool) {
	return arrib.state, arrib.state != nil
}

func (arrib *ArtifactRegistryRepositoryIamBinding) StateMust() *artifactRegistryRepositoryIamBindingState {
	if arrib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arrib.Type(), arrib.LocalName()))
	}
	return arrib.state
}

func (arrib *ArtifactRegistryRepositoryIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(arrib)
}

type ArtifactRegistryRepositoryIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *artifactregistryrepositoryiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that ArtifactRegistryRepositoryIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type artifactRegistryRepositoryIamBindingAttributes struct {
	ref terra.Reference
}

func (arrib artifactRegistryRepositoryIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(arrib.ref.Append("etag"))
}

func (arrib artifactRegistryRepositoryIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(arrib.ref.Append("id"))
}

func (arrib artifactRegistryRepositoryIamBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceString(arrib.ref.Append("location"))
}

func (arrib artifactRegistryRepositoryIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](arrib.ref.Append("members"))
}

func (arrib artifactRegistryRepositoryIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(arrib.ref.Append("project"))
}

func (arrib artifactRegistryRepositoryIamBindingAttributes) Repository() terra.StringValue {
	return terra.ReferenceString(arrib.ref.Append("repository"))
}

func (arrib artifactRegistryRepositoryIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(arrib.ref.Append("role"))
}

func (arrib artifactRegistryRepositoryIamBindingAttributes) Condition() terra.ListValue[artifactregistryrepositoryiambinding.ConditionAttributes] {
	return terra.ReferenceList[artifactregistryrepositoryiambinding.ConditionAttributes](arrib.ref.Append("condition"))
}

type artifactRegistryRepositoryIamBindingState struct {
	Etag       string                                                `json:"etag"`
	Id         string                                                `json:"id"`
	Location   string                                                `json:"location"`
	Members    []string                                              `json:"members"`
	Project    string                                                `json:"project"`
	Repository string                                                `json:"repository"`
	Role       string                                                `json:"role"`
	Condition  []artifactregistryrepositoryiambinding.ConditionState `json:"condition"`
}
