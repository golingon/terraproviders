// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package privatecacertificateauthority

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AccessUrls struct{}

type Config struct {
	// SubjectConfig: required
	SubjectConfig *SubjectConfig `hcl:"subject_config,block" validate:"required"`
	// X509Config: required
	X509Config *X509Config `hcl:"x509_config,block" validate:"required"`
}

type SubjectConfig struct {
	// Subject: required
	Subject *Subject `hcl:"subject,block" validate:"required"`
	// SubjectAltName: optional
	SubjectAltName *SubjectAltName `hcl:"subject_alt_name,block"`
}

type Subject struct {
	// CommonName: string, required
	CommonName terra.StringValue `hcl:"common_name,attr" validate:"required"`
	// CountryCode: string, optional
	CountryCode terra.StringValue `hcl:"country_code,attr"`
	// Locality: string, optional
	Locality terra.StringValue `hcl:"locality,attr"`
	// Organization: string, required
	Organization terra.StringValue `hcl:"organization,attr" validate:"required"`
	// OrganizationalUnit: string, optional
	OrganizationalUnit terra.StringValue `hcl:"organizational_unit,attr"`
	// PostalCode: string, optional
	PostalCode terra.StringValue `hcl:"postal_code,attr"`
	// Province: string, optional
	Province terra.StringValue `hcl:"province,attr"`
	// StreetAddress: string, optional
	StreetAddress terra.StringValue `hcl:"street_address,attr"`
}

type SubjectAltName struct {
	// DnsNames: list of string, optional
	DnsNames terra.ListValue[terra.StringValue] `hcl:"dns_names,attr"`
	// EmailAddresses: list of string, optional
	EmailAddresses terra.ListValue[terra.StringValue] `hcl:"email_addresses,attr"`
	// IpAddresses: list of string, optional
	IpAddresses terra.ListValue[terra.StringValue] `hcl:"ip_addresses,attr"`
	// Uris: list of string, optional
	Uris terra.ListValue[terra.StringValue] `hcl:"uris,attr"`
}

type X509Config struct {
	// AiaOcspServers: list of string, optional
	AiaOcspServers terra.ListValue[terra.StringValue] `hcl:"aia_ocsp_servers,attr"`
	// AdditionalExtensions: min=0
	AdditionalExtensions []AdditionalExtensions `hcl:"additional_extensions,block" validate:"min=0"`
	// CaOptions: required
	CaOptions *CaOptions `hcl:"ca_options,block" validate:"required"`
	// KeyUsage: required
	KeyUsage *KeyUsage `hcl:"key_usage,block" validate:"required"`
	// NameConstraints: optional
	NameConstraints *NameConstraints `hcl:"name_constraints,block"`
	// PolicyIds: min=0
	PolicyIds []PolicyIds `hcl:"policy_ids,block" validate:"min=0"`
}

type AdditionalExtensions struct {
	// Critical: bool, required
	Critical terra.BoolValue `hcl:"critical,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// ObjectId: required
	ObjectId *ObjectId `hcl:"object_id,block" validate:"required"`
}

type ObjectId struct {
	// ObjectIdPath: list of number, required
	ObjectIdPath terra.ListValue[terra.NumberValue] `hcl:"object_id_path,attr" validate:"required"`
}

type CaOptions struct {
	// IsCa: bool, required
	IsCa terra.BoolValue `hcl:"is_ca,attr" validate:"required"`
	// MaxIssuerPathLength: number, optional
	MaxIssuerPathLength terra.NumberValue `hcl:"max_issuer_path_length,attr"`
	// NonCa: bool, optional
	NonCa terra.BoolValue `hcl:"non_ca,attr"`
	// ZeroMaxIssuerPathLength: bool, optional
	ZeroMaxIssuerPathLength terra.BoolValue `hcl:"zero_max_issuer_path_length,attr"`
}

type KeyUsage struct {
	// BaseKeyUsage: required
	BaseKeyUsage *BaseKeyUsage `hcl:"base_key_usage,block" validate:"required"`
	// ExtendedKeyUsage: required
	ExtendedKeyUsage *ExtendedKeyUsage `hcl:"extended_key_usage,block" validate:"required"`
	// UnknownExtendedKeyUsages: min=0
	UnknownExtendedKeyUsages []UnknownExtendedKeyUsages `hcl:"unknown_extended_key_usages,block" validate:"min=0"`
}

type BaseKeyUsage struct {
	// CertSign: bool, optional
	CertSign terra.BoolValue `hcl:"cert_sign,attr"`
	// ContentCommitment: bool, optional
	ContentCommitment terra.BoolValue `hcl:"content_commitment,attr"`
	// CrlSign: bool, optional
	CrlSign terra.BoolValue `hcl:"crl_sign,attr"`
	// DataEncipherment: bool, optional
	DataEncipherment terra.BoolValue `hcl:"data_encipherment,attr"`
	// DecipherOnly: bool, optional
	DecipherOnly terra.BoolValue `hcl:"decipher_only,attr"`
	// DigitalSignature: bool, optional
	DigitalSignature terra.BoolValue `hcl:"digital_signature,attr"`
	// EncipherOnly: bool, optional
	EncipherOnly terra.BoolValue `hcl:"encipher_only,attr"`
	// KeyAgreement: bool, optional
	KeyAgreement terra.BoolValue `hcl:"key_agreement,attr"`
	// KeyEncipherment: bool, optional
	KeyEncipherment terra.BoolValue `hcl:"key_encipherment,attr"`
}

type ExtendedKeyUsage struct {
	// ClientAuth: bool, optional
	ClientAuth terra.BoolValue `hcl:"client_auth,attr"`
	// CodeSigning: bool, optional
	CodeSigning terra.BoolValue `hcl:"code_signing,attr"`
	// EmailProtection: bool, optional
	EmailProtection terra.BoolValue `hcl:"email_protection,attr"`
	// OcspSigning: bool, optional
	OcspSigning terra.BoolValue `hcl:"ocsp_signing,attr"`
	// ServerAuth: bool, optional
	ServerAuth terra.BoolValue `hcl:"server_auth,attr"`
	// TimeStamping: bool, optional
	TimeStamping terra.BoolValue `hcl:"time_stamping,attr"`
}

type UnknownExtendedKeyUsages struct {
	// ObjectIdPath: list of number, required
	ObjectIdPath terra.ListValue[terra.NumberValue] `hcl:"object_id_path,attr" validate:"required"`
}

type NameConstraints struct {
	// Critical: bool, required
	Critical terra.BoolValue `hcl:"critical,attr" validate:"required"`
	// ExcludedDnsNames: list of string, optional
	ExcludedDnsNames terra.ListValue[terra.StringValue] `hcl:"excluded_dns_names,attr"`
	// ExcludedEmailAddresses: list of string, optional
	ExcludedEmailAddresses terra.ListValue[terra.StringValue] `hcl:"excluded_email_addresses,attr"`
	// ExcludedIpRanges: list of string, optional
	ExcludedIpRanges terra.ListValue[terra.StringValue] `hcl:"excluded_ip_ranges,attr"`
	// ExcludedUris: list of string, optional
	ExcludedUris terra.ListValue[terra.StringValue] `hcl:"excluded_uris,attr"`
	// PermittedDnsNames: list of string, optional
	PermittedDnsNames terra.ListValue[terra.StringValue] `hcl:"permitted_dns_names,attr"`
	// PermittedEmailAddresses: list of string, optional
	PermittedEmailAddresses terra.ListValue[terra.StringValue] `hcl:"permitted_email_addresses,attr"`
	// PermittedIpRanges: list of string, optional
	PermittedIpRanges terra.ListValue[terra.StringValue] `hcl:"permitted_ip_ranges,attr"`
	// PermittedUris: list of string, optional
	PermittedUris terra.ListValue[terra.StringValue] `hcl:"permitted_uris,attr"`
}

type PolicyIds struct {
	// ObjectIdPath: list of number, required
	ObjectIdPath terra.ListValue[terra.NumberValue] `hcl:"object_id_path,attr" validate:"required"`
}

type KeySpec struct {
	// Algorithm: string, optional
	Algorithm terra.StringValue `hcl:"algorithm,attr"`
	// CloudKmsKeyVersion: string, optional
	CloudKmsKeyVersion terra.StringValue `hcl:"cloud_kms_key_version,attr"`
}

type SubordinateConfig struct {
	// CertificateAuthority: string, optional
	CertificateAuthority terra.StringValue `hcl:"certificate_authority,attr"`
	// PemIssuerChain: optional
	PemIssuerChain *PemIssuerChain `hcl:"pem_issuer_chain,block"`
}

type PemIssuerChain struct {
	// PemCertificates: list of string, optional
	PemCertificates terra.ListValue[terra.StringValue] `hcl:"pem_certificates,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AccessUrlsAttributes struct {
	ref terra.Reference
}

func (au AccessUrlsAttributes) InternalRef() terra.Reference {
	return au.ref
}

func (au AccessUrlsAttributes) InternalWithRef(ref terra.Reference) AccessUrlsAttributes {
	return AccessUrlsAttributes{ref: ref}
}

func (au AccessUrlsAttributes) InternalTokens() hclwrite.Tokens {
	return au.ref.InternalTokens()
}

func (au AccessUrlsAttributes) CaCertificateAccessUrl() terra.StringValue {
	return terra.ReferenceString(au.ref.Append("ca_certificate_access_url"))
}

func (au AccessUrlsAttributes) CrlAccessUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](au.ref.Append("crl_access_urls"))
}

type ConfigAttributes struct {
	ref terra.Reference
}

func (c ConfigAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c ConfigAttributes) InternalWithRef(ref terra.Reference) ConfigAttributes {
	return ConfigAttributes{ref: ref}
}

func (c ConfigAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c ConfigAttributes) SubjectConfig() terra.ListValue[SubjectConfigAttributes] {
	return terra.ReferenceList[SubjectConfigAttributes](c.ref.Append("subject_config"))
}

func (c ConfigAttributes) X509Config() terra.ListValue[X509ConfigAttributes] {
	return terra.ReferenceList[X509ConfigAttributes](c.ref.Append("x509_config"))
}

type SubjectConfigAttributes struct {
	ref terra.Reference
}

func (sc SubjectConfigAttributes) InternalRef() terra.Reference {
	return sc.ref
}

func (sc SubjectConfigAttributes) InternalWithRef(ref terra.Reference) SubjectConfigAttributes {
	return SubjectConfigAttributes{ref: ref}
}

func (sc SubjectConfigAttributes) InternalTokens() hclwrite.Tokens {
	return sc.ref.InternalTokens()
}

func (sc SubjectConfigAttributes) Subject() terra.ListValue[SubjectAttributes] {
	return terra.ReferenceList[SubjectAttributes](sc.ref.Append("subject"))
}

func (sc SubjectConfigAttributes) SubjectAltName() terra.ListValue[SubjectAltNameAttributes] {
	return terra.ReferenceList[SubjectAltNameAttributes](sc.ref.Append("subject_alt_name"))
}

type SubjectAttributes struct {
	ref terra.Reference
}

func (s SubjectAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SubjectAttributes) InternalWithRef(ref terra.Reference) SubjectAttributes {
	return SubjectAttributes{ref: ref}
}

func (s SubjectAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SubjectAttributes) CommonName() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("common_name"))
}

func (s SubjectAttributes) CountryCode() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("country_code"))
}

func (s SubjectAttributes) Locality() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("locality"))
}

func (s SubjectAttributes) Organization() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("organization"))
}

func (s SubjectAttributes) OrganizationalUnit() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("organizational_unit"))
}

func (s SubjectAttributes) PostalCode() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("postal_code"))
}

func (s SubjectAttributes) Province() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("province"))
}

func (s SubjectAttributes) StreetAddress() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("street_address"))
}

type SubjectAltNameAttributes struct {
	ref terra.Reference
}

func (san SubjectAltNameAttributes) InternalRef() terra.Reference {
	return san.ref
}

func (san SubjectAltNameAttributes) InternalWithRef(ref terra.Reference) SubjectAltNameAttributes {
	return SubjectAltNameAttributes{ref: ref}
}

func (san SubjectAltNameAttributes) InternalTokens() hclwrite.Tokens {
	return san.ref.InternalTokens()
}

func (san SubjectAltNameAttributes) DnsNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](san.ref.Append("dns_names"))
}

func (san SubjectAltNameAttributes) EmailAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](san.ref.Append("email_addresses"))
}

func (san SubjectAltNameAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](san.ref.Append("ip_addresses"))
}

func (san SubjectAltNameAttributes) Uris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](san.ref.Append("uris"))
}

type X509ConfigAttributes struct {
	ref terra.Reference
}

func (xc X509ConfigAttributes) InternalRef() terra.Reference {
	return xc.ref
}

func (xc X509ConfigAttributes) InternalWithRef(ref terra.Reference) X509ConfigAttributes {
	return X509ConfigAttributes{ref: ref}
}

func (xc X509ConfigAttributes) InternalTokens() hclwrite.Tokens {
	return xc.ref.InternalTokens()
}

func (xc X509ConfigAttributes) AiaOcspServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](xc.ref.Append("aia_ocsp_servers"))
}

func (xc X509ConfigAttributes) AdditionalExtensions() terra.ListValue[AdditionalExtensionsAttributes] {
	return terra.ReferenceList[AdditionalExtensionsAttributes](xc.ref.Append("additional_extensions"))
}

func (xc X509ConfigAttributes) CaOptions() terra.ListValue[CaOptionsAttributes] {
	return terra.ReferenceList[CaOptionsAttributes](xc.ref.Append("ca_options"))
}

func (xc X509ConfigAttributes) KeyUsage() terra.ListValue[KeyUsageAttributes] {
	return terra.ReferenceList[KeyUsageAttributes](xc.ref.Append("key_usage"))
}

func (xc X509ConfigAttributes) NameConstraints() terra.ListValue[NameConstraintsAttributes] {
	return terra.ReferenceList[NameConstraintsAttributes](xc.ref.Append("name_constraints"))
}

func (xc X509ConfigAttributes) PolicyIds() terra.ListValue[PolicyIdsAttributes] {
	return terra.ReferenceList[PolicyIdsAttributes](xc.ref.Append("policy_ids"))
}

type AdditionalExtensionsAttributes struct {
	ref terra.Reference
}

func (ae AdditionalExtensionsAttributes) InternalRef() terra.Reference {
	return ae.ref
}

func (ae AdditionalExtensionsAttributes) InternalWithRef(ref terra.Reference) AdditionalExtensionsAttributes {
	return AdditionalExtensionsAttributes{ref: ref}
}

func (ae AdditionalExtensionsAttributes) InternalTokens() hclwrite.Tokens {
	return ae.ref.InternalTokens()
}

func (ae AdditionalExtensionsAttributes) Critical() terra.BoolValue {
	return terra.ReferenceBool(ae.ref.Append("critical"))
}

func (ae AdditionalExtensionsAttributes) Value() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("value"))
}

func (ae AdditionalExtensionsAttributes) ObjectId() terra.ListValue[ObjectIdAttributes] {
	return terra.ReferenceList[ObjectIdAttributes](ae.ref.Append("object_id"))
}

type ObjectIdAttributes struct {
	ref terra.Reference
}

func (oi ObjectIdAttributes) InternalRef() terra.Reference {
	return oi.ref
}

func (oi ObjectIdAttributes) InternalWithRef(ref terra.Reference) ObjectIdAttributes {
	return ObjectIdAttributes{ref: ref}
}

func (oi ObjectIdAttributes) InternalTokens() hclwrite.Tokens {
	return oi.ref.InternalTokens()
}

func (oi ObjectIdAttributes) ObjectIdPath() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceList[terra.NumberValue](oi.ref.Append("object_id_path"))
}

type CaOptionsAttributes struct {
	ref terra.Reference
}

func (co CaOptionsAttributes) InternalRef() terra.Reference {
	return co.ref
}

func (co CaOptionsAttributes) InternalWithRef(ref terra.Reference) CaOptionsAttributes {
	return CaOptionsAttributes{ref: ref}
}

func (co CaOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return co.ref.InternalTokens()
}

func (co CaOptionsAttributes) IsCa() terra.BoolValue {
	return terra.ReferenceBool(co.ref.Append("is_ca"))
}

func (co CaOptionsAttributes) MaxIssuerPathLength() terra.NumberValue {
	return terra.ReferenceNumber(co.ref.Append("max_issuer_path_length"))
}

func (co CaOptionsAttributes) NonCa() terra.BoolValue {
	return terra.ReferenceBool(co.ref.Append("non_ca"))
}

func (co CaOptionsAttributes) ZeroMaxIssuerPathLength() terra.BoolValue {
	return terra.ReferenceBool(co.ref.Append("zero_max_issuer_path_length"))
}

type KeyUsageAttributes struct {
	ref terra.Reference
}

func (ku KeyUsageAttributes) InternalRef() terra.Reference {
	return ku.ref
}

func (ku KeyUsageAttributes) InternalWithRef(ref terra.Reference) KeyUsageAttributes {
	return KeyUsageAttributes{ref: ref}
}

func (ku KeyUsageAttributes) InternalTokens() hclwrite.Tokens {
	return ku.ref.InternalTokens()
}

func (ku KeyUsageAttributes) BaseKeyUsage() terra.ListValue[BaseKeyUsageAttributes] {
	return terra.ReferenceList[BaseKeyUsageAttributes](ku.ref.Append("base_key_usage"))
}

func (ku KeyUsageAttributes) ExtendedKeyUsage() terra.ListValue[ExtendedKeyUsageAttributes] {
	return terra.ReferenceList[ExtendedKeyUsageAttributes](ku.ref.Append("extended_key_usage"))
}

func (ku KeyUsageAttributes) UnknownExtendedKeyUsages() terra.ListValue[UnknownExtendedKeyUsagesAttributes] {
	return terra.ReferenceList[UnknownExtendedKeyUsagesAttributes](ku.ref.Append("unknown_extended_key_usages"))
}

type BaseKeyUsageAttributes struct {
	ref terra.Reference
}

func (bku BaseKeyUsageAttributes) InternalRef() terra.Reference {
	return bku.ref
}

func (bku BaseKeyUsageAttributes) InternalWithRef(ref terra.Reference) BaseKeyUsageAttributes {
	return BaseKeyUsageAttributes{ref: ref}
}

func (bku BaseKeyUsageAttributes) InternalTokens() hclwrite.Tokens {
	return bku.ref.InternalTokens()
}

func (bku BaseKeyUsageAttributes) CertSign() terra.BoolValue {
	return terra.ReferenceBool(bku.ref.Append("cert_sign"))
}

func (bku BaseKeyUsageAttributes) ContentCommitment() terra.BoolValue {
	return terra.ReferenceBool(bku.ref.Append("content_commitment"))
}

func (bku BaseKeyUsageAttributes) CrlSign() terra.BoolValue {
	return terra.ReferenceBool(bku.ref.Append("crl_sign"))
}

func (bku BaseKeyUsageAttributes) DataEncipherment() terra.BoolValue {
	return terra.ReferenceBool(bku.ref.Append("data_encipherment"))
}

func (bku BaseKeyUsageAttributes) DecipherOnly() terra.BoolValue {
	return terra.ReferenceBool(bku.ref.Append("decipher_only"))
}

func (bku BaseKeyUsageAttributes) DigitalSignature() terra.BoolValue {
	return terra.ReferenceBool(bku.ref.Append("digital_signature"))
}

func (bku BaseKeyUsageAttributes) EncipherOnly() terra.BoolValue {
	return terra.ReferenceBool(bku.ref.Append("encipher_only"))
}

func (bku BaseKeyUsageAttributes) KeyAgreement() terra.BoolValue {
	return terra.ReferenceBool(bku.ref.Append("key_agreement"))
}

func (bku BaseKeyUsageAttributes) KeyEncipherment() terra.BoolValue {
	return terra.ReferenceBool(bku.ref.Append("key_encipherment"))
}

type ExtendedKeyUsageAttributes struct {
	ref terra.Reference
}

func (eku ExtendedKeyUsageAttributes) InternalRef() terra.Reference {
	return eku.ref
}

func (eku ExtendedKeyUsageAttributes) InternalWithRef(ref terra.Reference) ExtendedKeyUsageAttributes {
	return ExtendedKeyUsageAttributes{ref: ref}
}

func (eku ExtendedKeyUsageAttributes) InternalTokens() hclwrite.Tokens {
	return eku.ref.InternalTokens()
}

func (eku ExtendedKeyUsageAttributes) ClientAuth() terra.BoolValue {
	return terra.ReferenceBool(eku.ref.Append("client_auth"))
}

func (eku ExtendedKeyUsageAttributes) CodeSigning() terra.BoolValue {
	return terra.ReferenceBool(eku.ref.Append("code_signing"))
}

func (eku ExtendedKeyUsageAttributes) EmailProtection() terra.BoolValue {
	return terra.ReferenceBool(eku.ref.Append("email_protection"))
}

func (eku ExtendedKeyUsageAttributes) OcspSigning() terra.BoolValue {
	return terra.ReferenceBool(eku.ref.Append("ocsp_signing"))
}

func (eku ExtendedKeyUsageAttributes) ServerAuth() terra.BoolValue {
	return terra.ReferenceBool(eku.ref.Append("server_auth"))
}

func (eku ExtendedKeyUsageAttributes) TimeStamping() terra.BoolValue {
	return terra.ReferenceBool(eku.ref.Append("time_stamping"))
}

type UnknownExtendedKeyUsagesAttributes struct {
	ref terra.Reference
}

func (ueku UnknownExtendedKeyUsagesAttributes) InternalRef() terra.Reference {
	return ueku.ref
}

func (ueku UnknownExtendedKeyUsagesAttributes) InternalWithRef(ref terra.Reference) UnknownExtendedKeyUsagesAttributes {
	return UnknownExtendedKeyUsagesAttributes{ref: ref}
}

func (ueku UnknownExtendedKeyUsagesAttributes) InternalTokens() hclwrite.Tokens {
	return ueku.ref.InternalTokens()
}

func (ueku UnknownExtendedKeyUsagesAttributes) ObjectIdPath() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceList[terra.NumberValue](ueku.ref.Append("object_id_path"))
}

type NameConstraintsAttributes struct {
	ref terra.Reference
}

func (nc NameConstraintsAttributes) InternalRef() terra.Reference {
	return nc.ref
}

func (nc NameConstraintsAttributes) InternalWithRef(ref terra.Reference) NameConstraintsAttributes {
	return NameConstraintsAttributes{ref: ref}
}

func (nc NameConstraintsAttributes) InternalTokens() hclwrite.Tokens {
	return nc.ref.InternalTokens()
}

func (nc NameConstraintsAttributes) Critical() terra.BoolValue {
	return terra.ReferenceBool(nc.ref.Append("critical"))
}

func (nc NameConstraintsAttributes) ExcludedDnsNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nc.ref.Append("excluded_dns_names"))
}

func (nc NameConstraintsAttributes) ExcludedEmailAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nc.ref.Append("excluded_email_addresses"))
}

func (nc NameConstraintsAttributes) ExcludedIpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nc.ref.Append("excluded_ip_ranges"))
}

func (nc NameConstraintsAttributes) ExcludedUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nc.ref.Append("excluded_uris"))
}

func (nc NameConstraintsAttributes) PermittedDnsNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nc.ref.Append("permitted_dns_names"))
}

func (nc NameConstraintsAttributes) PermittedEmailAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nc.ref.Append("permitted_email_addresses"))
}

func (nc NameConstraintsAttributes) PermittedIpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nc.ref.Append("permitted_ip_ranges"))
}

func (nc NameConstraintsAttributes) PermittedUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nc.ref.Append("permitted_uris"))
}

type PolicyIdsAttributes struct {
	ref terra.Reference
}

func (pi PolicyIdsAttributes) InternalRef() terra.Reference {
	return pi.ref
}

func (pi PolicyIdsAttributes) InternalWithRef(ref terra.Reference) PolicyIdsAttributes {
	return PolicyIdsAttributes{ref: ref}
}

func (pi PolicyIdsAttributes) InternalTokens() hclwrite.Tokens {
	return pi.ref.InternalTokens()
}

func (pi PolicyIdsAttributes) ObjectIdPath() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceList[terra.NumberValue](pi.ref.Append("object_id_path"))
}

type KeySpecAttributes struct {
	ref terra.Reference
}

func (ks KeySpecAttributes) InternalRef() terra.Reference {
	return ks.ref
}

func (ks KeySpecAttributes) InternalWithRef(ref terra.Reference) KeySpecAttributes {
	return KeySpecAttributes{ref: ref}
}

func (ks KeySpecAttributes) InternalTokens() hclwrite.Tokens {
	return ks.ref.InternalTokens()
}

func (ks KeySpecAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceString(ks.ref.Append("algorithm"))
}

func (ks KeySpecAttributes) CloudKmsKeyVersion() terra.StringValue {
	return terra.ReferenceString(ks.ref.Append("cloud_kms_key_version"))
}

type SubordinateConfigAttributes struct {
	ref terra.Reference
}

func (sc SubordinateConfigAttributes) InternalRef() terra.Reference {
	return sc.ref
}

func (sc SubordinateConfigAttributes) InternalWithRef(ref terra.Reference) SubordinateConfigAttributes {
	return SubordinateConfigAttributes{ref: ref}
}

func (sc SubordinateConfigAttributes) InternalTokens() hclwrite.Tokens {
	return sc.ref.InternalTokens()
}

func (sc SubordinateConfigAttributes) CertificateAuthority() terra.StringValue {
	return terra.ReferenceString(sc.ref.Append("certificate_authority"))
}

func (sc SubordinateConfigAttributes) PemIssuerChain() terra.ListValue[PemIssuerChainAttributes] {
	return terra.ReferenceList[PemIssuerChainAttributes](sc.ref.Append("pem_issuer_chain"))
}

type PemIssuerChainAttributes struct {
	ref terra.Reference
}

func (pic PemIssuerChainAttributes) InternalRef() terra.Reference {
	return pic.ref
}

func (pic PemIssuerChainAttributes) InternalWithRef(ref terra.Reference) PemIssuerChainAttributes {
	return PemIssuerChainAttributes{ref: ref}
}

func (pic PemIssuerChainAttributes) InternalTokens() hclwrite.Tokens {
	return pic.ref.InternalTokens()
}

func (pic PemIssuerChainAttributes) PemCertificates() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](pic.ref.Append("pem_certificates"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type AccessUrlsState struct {
	CaCertificateAccessUrl string   `json:"ca_certificate_access_url"`
	CrlAccessUrls          []string `json:"crl_access_urls"`
}

type ConfigState struct {
	SubjectConfig []SubjectConfigState `json:"subject_config"`
	X509Config    []X509ConfigState    `json:"x509_config"`
}

type SubjectConfigState struct {
	Subject        []SubjectState        `json:"subject"`
	SubjectAltName []SubjectAltNameState `json:"subject_alt_name"`
}

type SubjectState struct {
	CommonName         string `json:"common_name"`
	CountryCode        string `json:"country_code"`
	Locality           string `json:"locality"`
	Organization       string `json:"organization"`
	OrganizationalUnit string `json:"organizational_unit"`
	PostalCode         string `json:"postal_code"`
	Province           string `json:"province"`
	StreetAddress      string `json:"street_address"`
}

type SubjectAltNameState struct {
	DnsNames       []string `json:"dns_names"`
	EmailAddresses []string `json:"email_addresses"`
	IpAddresses    []string `json:"ip_addresses"`
	Uris           []string `json:"uris"`
}

type X509ConfigState struct {
	AiaOcspServers       []string                    `json:"aia_ocsp_servers"`
	AdditionalExtensions []AdditionalExtensionsState `json:"additional_extensions"`
	CaOptions            []CaOptionsState            `json:"ca_options"`
	KeyUsage             []KeyUsageState             `json:"key_usage"`
	NameConstraints      []NameConstraintsState      `json:"name_constraints"`
	PolicyIds            []PolicyIdsState            `json:"policy_ids"`
}

type AdditionalExtensionsState struct {
	Critical bool            `json:"critical"`
	Value    string          `json:"value"`
	ObjectId []ObjectIdState `json:"object_id"`
}

type ObjectIdState struct {
	ObjectIdPath []float64 `json:"object_id_path"`
}

type CaOptionsState struct {
	IsCa                    bool    `json:"is_ca"`
	MaxIssuerPathLength     float64 `json:"max_issuer_path_length"`
	NonCa                   bool    `json:"non_ca"`
	ZeroMaxIssuerPathLength bool    `json:"zero_max_issuer_path_length"`
}

type KeyUsageState struct {
	BaseKeyUsage             []BaseKeyUsageState             `json:"base_key_usage"`
	ExtendedKeyUsage         []ExtendedKeyUsageState         `json:"extended_key_usage"`
	UnknownExtendedKeyUsages []UnknownExtendedKeyUsagesState `json:"unknown_extended_key_usages"`
}

type BaseKeyUsageState struct {
	CertSign          bool `json:"cert_sign"`
	ContentCommitment bool `json:"content_commitment"`
	CrlSign           bool `json:"crl_sign"`
	DataEncipherment  bool `json:"data_encipherment"`
	DecipherOnly      bool `json:"decipher_only"`
	DigitalSignature  bool `json:"digital_signature"`
	EncipherOnly      bool `json:"encipher_only"`
	KeyAgreement      bool `json:"key_agreement"`
	KeyEncipherment   bool `json:"key_encipherment"`
}

type ExtendedKeyUsageState struct {
	ClientAuth      bool `json:"client_auth"`
	CodeSigning     bool `json:"code_signing"`
	EmailProtection bool `json:"email_protection"`
	OcspSigning     bool `json:"ocsp_signing"`
	ServerAuth      bool `json:"server_auth"`
	TimeStamping    bool `json:"time_stamping"`
}

type UnknownExtendedKeyUsagesState struct {
	ObjectIdPath []float64 `json:"object_id_path"`
}

type NameConstraintsState struct {
	Critical                bool     `json:"critical"`
	ExcludedDnsNames        []string `json:"excluded_dns_names"`
	ExcludedEmailAddresses  []string `json:"excluded_email_addresses"`
	ExcludedIpRanges        []string `json:"excluded_ip_ranges"`
	ExcludedUris            []string `json:"excluded_uris"`
	PermittedDnsNames       []string `json:"permitted_dns_names"`
	PermittedEmailAddresses []string `json:"permitted_email_addresses"`
	PermittedIpRanges       []string `json:"permitted_ip_ranges"`
	PermittedUris           []string `json:"permitted_uris"`
}

type PolicyIdsState struct {
	ObjectIdPath []float64 `json:"object_id_path"`
}

type KeySpecState struct {
	Algorithm          string `json:"algorithm"`
	CloudKmsKeyVersion string `json:"cloud_kms_key_version"`
}

type SubordinateConfigState struct {
	CertificateAuthority string                `json:"certificate_authority"`
	PemIssuerChain       []PemIssuerChainState `json:"pem_issuer_chain"`
}

type PemIssuerChainState struct {
	PemCertificates []string `json:"pem_certificates"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
