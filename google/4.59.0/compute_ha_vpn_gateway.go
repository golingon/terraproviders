// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computehavpngateway "github.com/golingon/terraproviders/google/4.59.0/computehavpngateway"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeHaVpnGateway(name string, args ComputeHaVpnGatewayArgs) *ComputeHaVpnGateway {
	return &ComputeHaVpnGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeHaVpnGateway)(nil)

type ComputeHaVpnGateway struct {
	Name  string
	Args  ComputeHaVpnGatewayArgs
	state *computeHaVpnGatewayState
}

func (chvg *ComputeHaVpnGateway) Type() string {
	return "google_compute_ha_vpn_gateway"
}

func (chvg *ComputeHaVpnGateway) LocalName() string {
	return chvg.Name
}

func (chvg *ComputeHaVpnGateway) Configuration() interface{} {
	return chvg.Args
}

func (chvg *ComputeHaVpnGateway) Attributes() computeHaVpnGatewayAttributes {
	return computeHaVpnGatewayAttributes{ref: terra.ReferenceResource(chvg)}
}

func (chvg *ComputeHaVpnGateway) ImportState(av io.Reader) error {
	chvg.state = &computeHaVpnGatewayState{}
	if err := json.NewDecoder(av).Decode(chvg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", chvg.Type(), chvg.LocalName(), err)
	}
	return nil
}

func (chvg *ComputeHaVpnGateway) State() (*computeHaVpnGatewayState, bool) {
	return chvg.state, chvg.state != nil
}

func (chvg *ComputeHaVpnGateway) StateMust() *computeHaVpnGatewayState {
	if chvg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", chvg.Type(), chvg.LocalName()))
	}
	return chvg.state
}

func (chvg *ComputeHaVpnGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(chvg)
}

type ComputeHaVpnGatewayArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Timeouts: optional
	Timeouts *computehavpngateway.Timeouts `hcl:"timeouts,block"`
	// VpnInterfaces: min=0
	VpnInterfaces []computehavpngateway.VpnInterfaces `hcl:"vpn_interfaces,block" validate:"min=0"`
	// DependsOn contains resources that ComputeHaVpnGateway depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeHaVpnGatewayAttributes struct {
	ref terra.Reference
}

func (chvg computeHaVpnGatewayAttributes) Description() terra.StringValue {
	return terra.ReferenceString(chvg.ref.Append("description"))
}

func (chvg computeHaVpnGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceString(chvg.ref.Append("id"))
}

func (chvg computeHaVpnGatewayAttributes) Name() terra.StringValue {
	return terra.ReferenceString(chvg.ref.Append("name"))
}

func (chvg computeHaVpnGatewayAttributes) Network() terra.StringValue {
	return terra.ReferenceString(chvg.ref.Append("network"))
}

func (chvg computeHaVpnGatewayAttributes) Project() terra.StringValue {
	return terra.ReferenceString(chvg.ref.Append("project"))
}

func (chvg computeHaVpnGatewayAttributes) Region() terra.StringValue {
	return terra.ReferenceString(chvg.ref.Append("region"))
}

func (chvg computeHaVpnGatewayAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(chvg.ref.Append("self_link"))
}

func (chvg computeHaVpnGatewayAttributes) Timeouts() computehavpngateway.TimeoutsAttributes {
	return terra.ReferenceSingle[computehavpngateway.TimeoutsAttributes](chvg.ref.Append("timeouts"))
}

func (chvg computeHaVpnGatewayAttributes) VpnInterfaces() terra.ListValue[computehavpngateway.VpnInterfacesAttributes] {
	return terra.ReferenceList[computehavpngateway.VpnInterfacesAttributes](chvg.ref.Append("vpn_interfaces"))
}

type computeHaVpnGatewayState struct {
	Description   string                                   `json:"description"`
	Id            string                                   `json:"id"`
	Name          string                                   `json:"name"`
	Network       string                                   `json:"network"`
	Project       string                                   `json:"project"`
	Region        string                                   `json:"region"`
	SelfLink      string                                   `json:"self_link"`
	Timeouts      *computehavpngateway.TimeoutsState       `json:"timeouts"`
	VpnInterfaces []computehavpngateway.VpnInterfacesState `json:"vpn_interfaces"`
}
