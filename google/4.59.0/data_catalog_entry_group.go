// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	datacatalogentrygroup "github.com/golingon/terraproviders/google/4.59.0/datacatalogentrygroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataCatalogEntryGroup(name string, args DataCatalogEntryGroupArgs) *DataCatalogEntryGroup {
	return &DataCatalogEntryGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataCatalogEntryGroup)(nil)

type DataCatalogEntryGroup struct {
	Name  string
	Args  DataCatalogEntryGroupArgs
	state *dataCatalogEntryGroupState
}

func (dceg *DataCatalogEntryGroup) Type() string {
	return "google_data_catalog_entry_group"
}

func (dceg *DataCatalogEntryGroup) LocalName() string {
	return dceg.Name
}

func (dceg *DataCatalogEntryGroup) Configuration() interface{} {
	return dceg.Args
}

func (dceg *DataCatalogEntryGroup) Attributes() dataCatalogEntryGroupAttributes {
	return dataCatalogEntryGroupAttributes{ref: terra.ReferenceResource(dceg)}
}

func (dceg *DataCatalogEntryGroup) ImportState(av io.Reader) error {
	dceg.state = &dataCatalogEntryGroupState{}
	if err := json.NewDecoder(av).Decode(dceg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dceg.Type(), dceg.LocalName(), err)
	}
	return nil
}

func (dceg *DataCatalogEntryGroup) State() (*dataCatalogEntryGroupState, bool) {
	return dceg.state, dceg.state != nil
}

func (dceg *DataCatalogEntryGroup) StateMust() *dataCatalogEntryGroupState {
	if dceg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dceg.Type(), dceg.LocalName()))
	}
	return dceg.state
}

func (dceg *DataCatalogEntryGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(dceg)
}

type DataCatalogEntryGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// EntryGroupId: string, required
	EntryGroupId terra.StringValue `hcl:"entry_group_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Timeouts: optional
	Timeouts *datacatalogentrygroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataCatalogEntryGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataCatalogEntryGroupAttributes struct {
	ref terra.Reference
}

func (dceg dataCatalogEntryGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dceg.ref.Append("description"))
}

func (dceg dataCatalogEntryGroupAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(dceg.ref.Append("display_name"))
}

func (dceg dataCatalogEntryGroupAttributes) EntryGroupId() terra.StringValue {
	return terra.ReferenceString(dceg.ref.Append("entry_group_id"))
}

func (dceg dataCatalogEntryGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dceg.ref.Append("id"))
}

func (dceg dataCatalogEntryGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dceg.ref.Append("name"))
}

func (dceg dataCatalogEntryGroupAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dceg.ref.Append("project"))
}

func (dceg dataCatalogEntryGroupAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dceg.ref.Append("region"))
}

func (dceg dataCatalogEntryGroupAttributes) Timeouts() datacatalogentrygroup.TimeoutsAttributes {
	return terra.ReferenceSingle[datacatalogentrygroup.TimeoutsAttributes](dceg.ref.Append("timeouts"))
}

type dataCatalogEntryGroupState struct {
	Description  string                               `json:"description"`
	DisplayName  string                               `json:"display_name"`
	EntryGroupId string                               `json:"entry_group_id"`
	Id           string                               `json:"id"`
	Name         string                               `json:"name"`
	Project      string                               `json:"project"`
	Region       string                               `json:"region"`
	Timeouts     *datacatalogentrygroup.TimeoutsState `json:"timeouts"`
}
