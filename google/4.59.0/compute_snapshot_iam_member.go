// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computesnapshotiammember "github.com/golingon/terraproviders/google/4.59.0/computesnapshotiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeSnapshotIamMember(name string, args ComputeSnapshotIamMemberArgs) *ComputeSnapshotIamMember {
	return &ComputeSnapshotIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeSnapshotIamMember)(nil)

type ComputeSnapshotIamMember struct {
	Name  string
	Args  ComputeSnapshotIamMemberArgs
	state *computeSnapshotIamMemberState
}

func (csim *ComputeSnapshotIamMember) Type() string {
	return "google_compute_snapshot_iam_member"
}

func (csim *ComputeSnapshotIamMember) LocalName() string {
	return csim.Name
}

func (csim *ComputeSnapshotIamMember) Configuration() interface{} {
	return csim.Args
}

func (csim *ComputeSnapshotIamMember) Attributes() computeSnapshotIamMemberAttributes {
	return computeSnapshotIamMemberAttributes{ref: terra.ReferenceResource(csim)}
}

func (csim *ComputeSnapshotIamMember) ImportState(av io.Reader) error {
	csim.state = &computeSnapshotIamMemberState{}
	if err := json.NewDecoder(av).Decode(csim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csim.Type(), csim.LocalName(), err)
	}
	return nil
}

func (csim *ComputeSnapshotIamMember) State() (*computeSnapshotIamMemberState, bool) {
	return csim.state, csim.state != nil
}

func (csim *ComputeSnapshotIamMember) StateMust() *computeSnapshotIamMemberState {
	if csim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csim.Type(), csim.LocalName()))
	}
	return csim.state
}

func (csim *ComputeSnapshotIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(csim)
}

type ComputeSnapshotIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *computesnapshotiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that ComputeSnapshotIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeSnapshotIamMemberAttributes struct {
	ref terra.Reference
}

func (csim computeSnapshotIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(csim.ref.Append("etag"))
}

func (csim computeSnapshotIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(csim.ref.Append("id"))
}

func (csim computeSnapshotIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(csim.ref.Append("member"))
}

func (csim computeSnapshotIamMemberAttributes) Name() terra.StringValue {
	return terra.ReferenceString(csim.ref.Append("name"))
}

func (csim computeSnapshotIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(csim.ref.Append("project"))
}

func (csim computeSnapshotIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(csim.ref.Append("role"))
}

func (csim computeSnapshotIamMemberAttributes) Condition() terra.ListValue[computesnapshotiammember.ConditionAttributes] {
	return terra.ReferenceList[computesnapshotiammember.ConditionAttributes](csim.ref.Append("condition"))
}

type computeSnapshotIamMemberState struct {
	Etag      string                                    `json:"etag"`
	Id        string                                    `json:"id"`
	Member    string                                    `json:"member"`
	Name      string                                    `json:"name"`
	Project   string                                    `json:"project"`
	Role      string                                    `json:"role"`
	Condition []computesnapshotiammember.ConditionState `json:"condition"`
}
