// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	containerawsnodepool "github.com/golingon/terraproviders/google/4.59.0/containerawsnodepool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewContainerAwsNodePool(name string, args ContainerAwsNodePoolArgs) *ContainerAwsNodePool {
	return &ContainerAwsNodePool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ContainerAwsNodePool)(nil)

type ContainerAwsNodePool struct {
	Name  string
	Args  ContainerAwsNodePoolArgs
	state *containerAwsNodePoolState
}

func (canp *ContainerAwsNodePool) Type() string {
	return "google_container_aws_node_pool"
}

func (canp *ContainerAwsNodePool) LocalName() string {
	return canp.Name
}

func (canp *ContainerAwsNodePool) Configuration() interface{} {
	return canp.Args
}

func (canp *ContainerAwsNodePool) Attributes() containerAwsNodePoolAttributes {
	return containerAwsNodePoolAttributes{ref: terra.ReferenceResource(canp)}
}

func (canp *ContainerAwsNodePool) ImportState(av io.Reader) error {
	canp.state = &containerAwsNodePoolState{}
	if err := json.NewDecoder(av).Decode(canp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", canp.Type(), canp.LocalName(), err)
	}
	return nil
}

func (canp *ContainerAwsNodePool) State() (*containerAwsNodePoolState, bool) {
	return canp.state, canp.state != nil
}

func (canp *ContainerAwsNodePool) StateMust() *containerAwsNodePoolState {
	if canp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", canp.Type(), canp.LocalName()))
	}
	return canp.state
}

func (canp *ContainerAwsNodePool) DependOn() terra.Reference {
	return terra.ReferenceResource(canp)
}

type ContainerAwsNodePoolArgs struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// Autoscaling: required
	Autoscaling *containerawsnodepool.Autoscaling `hcl:"autoscaling,block" validate:"required"`
	// Config: required
	Config *containerawsnodepool.Config `hcl:"config,block" validate:"required"`
	// MaxPodsConstraint: required
	MaxPodsConstraint *containerawsnodepool.MaxPodsConstraint `hcl:"max_pods_constraint,block" validate:"required"`
	// Timeouts: optional
	Timeouts *containerawsnodepool.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ContainerAwsNodePool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type containerAwsNodePoolAttributes struct {
	ref terra.Reference
}

func (canp containerAwsNodePoolAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](canp.ref.Append("annotations"))
}

func (canp containerAwsNodePoolAttributes) Cluster() terra.StringValue {
	return terra.ReferenceString(canp.ref.Append("cluster"))
}

func (canp containerAwsNodePoolAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(canp.ref.Append("create_time"))
}

func (canp containerAwsNodePoolAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(canp.ref.Append("etag"))
}

func (canp containerAwsNodePoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(canp.ref.Append("id"))
}

func (canp containerAwsNodePoolAttributes) Location() terra.StringValue {
	return terra.ReferenceString(canp.ref.Append("location"))
}

func (canp containerAwsNodePoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(canp.ref.Append("name"))
}

func (canp containerAwsNodePoolAttributes) Project() terra.StringValue {
	return terra.ReferenceString(canp.ref.Append("project"))
}

func (canp containerAwsNodePoolAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceBool(canp.ref.Append("reconciling"))
}

func (canp containerAwsNodePoolAttributes) State() terra.StringValue {
	return terra.ReferenceString(canp.ref.Append("state"))
}

func (canp containerAwsNodePoolAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(canp.ref.Append("subnet_id"))
}

func (canp containerAwsNodePoolAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(canp.ref.Append("uid"))
}

func (canp containerAwsNodePoolAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(canp.ref.Append("update_time"))
}

func (canp containerAwsNodePoolAttributes) Version() terra.StringValue {
	return terra.ReferenceString(canp.ref.Append("version"))
}

func (canp containerAwsNodePoolAttributes) Autoscaling() terra.ListValue[containerawsnodepool.AutoscalingAttributes] {
	return terra.ReferenceList[containerawsnodepool.AutoscalingAttributes](canp.ref.Append("autoscaling"))
}

func (canp containerAwsNodePoolAttributes) Config() terra.ListValue[containerawsnodepool.ConfigAttributes] {
	return terra.ReferenceList[containerawsnodepool.ConfigAttributes](canp.ref.Append("config"))
}

func (canp containerAwsNodePoolAttributes) MaxPodsConstraint() terra.ListValue[containerawsnodepool.MaxPodsConstraintAttributes] {
	return terra.ReferenceList[containerawsnodepool.MaxPodsConstraintAttributes](canp.ref.Append("max_pods_constraint"))
}

func (canp containerAwsNodePoolAttributes) Timeouts() containerawsnodepool.TimeoutsAttributes {
	return terra.ReferenceSingle[containerawsnodepool.TimeoutsAttributes](canp.ref.Append("timeouts"))
}

type containerAwsNodePoolState struct {
	Annotations       map[string]string                             `json:"annotations"`
	Cluster           string                                        `json:"cluster"`
	CreateTime        string                                        `json:"create_time"`
	Etag              string                                        `json:"etag"`
	Id                string                                        `json:"id"`
	Location          string                                        `json:"location"`
	Name              string                                        `json:"name"`
	Project           string                                        `json:"project"`
	Reconciling       bool                                          `json:"reconciling"`
	State             string                                        `json:"state"`
	SubnetId          string                                        `json:"subnet_id"`
	Uid               string                                        `json:"uid"`
	UpdateTime        string                                        `json:"update_time"`
	Version           string                                        `json:"version"`
	Autoscaling       []containerawsnodepool.AutoscalingState       `json:"autoscaling"`
	Config            []containerawsnodepool.ConfigState            `json:"config"`
	MaxPodsConstraint []containerawsnodepool.MaxPodsConstraintState `json:"max_pods_constraint"`
	Timeouts          *containerawsnodepool.TimeoutsState           `json:"timeouts"`
}
