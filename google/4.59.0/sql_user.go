// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	sqluser "github.com/golingon/terraproviders/google/4.59.0/sqluser"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSqlUser(name string, args SqlUserArgs) *SqlUser {
	return &SqlUser{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SqlUser)(nil)

type SqlUser struct {
	Name  string
	Args  SqlUserArgs
	state *sqlUserState
}

func (su *SqlUser) Type() string {
	return "google_sql_user"
}

func (su *SqlUser) LocalName() string {
	return su.Name
}

func (su *SqlUser) Configuration() interface{} {
	return su.Args
}

func (su *SqlUser) Attributes() sqlUserAttributes {
	return sqlUserAttributes{ref: terra.ReferenceResource(su)}
}

func (su *SqlUser) ImportState(av io.Reader) error {
	su.state = &sqlUserState{}
	if err := json.NewDecoder(av).Decode(su.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", su.Type(), su.LocalName(), err)
	}
	return nil
}

func (su *SqlUser) State() (*sqlUserState, bool) {
	return su.state, su.state != nil
}

func (su *SqlUser) StateMust() *sqlUserState {
	if su.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", su.Type(), su.LocalName()))
	}
	return su.state
}

func (su *SqlUser) DependOn() terra.Reference {
	return terra.ReferenceResource(su)
}

type SqlUserArgs struct {
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// Host: string, optional
	Host terra.StringValue `hcl:"host,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// SqlServerUserDetails: min=0
	SqlServerUserDetails []sqluser.SqlServerUserDetails `hcl:"sql_server_user_details,block" validate:"min=0"`
	// PasswordPolicy: optional
	PasswordPolicy *sqluser.PasswordPolicy `hcl:"password_policy,block"`
	// Timeouts: optional
	Timeouts *sqluser.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SqlUser depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sqlUserAttributes struct {
	ref terra.Reference
}

func (su sqlUserAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceString(su.ref.Append("deletion_policy"))
}

func (su sqlUserAttributes) Host() terra.StringValue {
	return terra.ReferenceString(su.ref.Append("host"))
}

func (su sqlUserAttributes) Id() terra.StringValue {
	return terra.ReferenceString(su.ref.Append("id"))
}

func (su sqlUserAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(su.ref.Append("instance"))
}

func (su sqlUserAttributes) Name() terra.StringValue {
	return terra.ReferenceString(su.ref.Append("name"))
}

func (su sqlUserAttributes) Password() terra.StringValue {
	return terra.ReferenceString(su.ref.Append("password"))
}

func (su sqlUserAttributes) Project() terra.StringValue {
	return terra.ReferenceString(su.ref.Append("project"))
}

func (su sqlUserAttributes) Type() terra.StringValue {
	return terra.ReferenceString(su.ref.Append("type"))
}

func (su sqlUserAttributes) SqlServerUserDetails() terra.ListValue[sqluser.SqlServerUserDetailsAttributes] {
	return terra.ReferenceList[sqluser.SqlServerUserDetailsAttributes](su.ref.Append("sql_server_user_details"))
}

func (su sqlUserAttributes) PasswordPolicy() terra.ListValue[sqluser.PasswordPolicyAttributes] {
	return terra.ReferenceList[sqluser.PasswordPolicyAttributes](su.ref.Append("password_policy"))
}

func (su sqlUserAttributes) Timeouts() sqluser.TimeoutsAttributes {
	return terra.ReferenceSingle[sqluser.TimeoutsAttributes](su.ref.Append("timeouts"))
}

type sqlUserState struct {
	DeletionPolicy       string                              `json:"deletion_policy"`
	Host                 string                              `json:"host"`
	Id                   string                              `json:"id"`
	Instance             string                              `json:"instance"`
	Name                 string                              `json:"name"`
	Password             string                              `json:"password"`
	Project              string                              `json:"project"`
	Type                 string                              `json:"type"`
	SqlServerUserDetails []sqluser.SqlServerUserDetailsState `json:"sql_server_user_details"`
	PasswordPolicy       []sqluser.PasswordPolicyState       `json:"password_policy"`
	Timeouts             *sqluser.TimeoutsState              `json:"timeouts"`
}
