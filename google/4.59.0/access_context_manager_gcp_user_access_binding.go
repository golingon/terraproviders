// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	accesscontextmanagergcpuseraccessbinding "github.com/golingon/terraproviders/google/4.59.0/accesscontextmanagergcpuseraccessbinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAccessContextManagerGcpUserAccessBinding(name string, args AccessContextManagerGcpUserAccessBindingArgs) *AccessContextManagerGcpUserAccessBinding {
	return &AccessContextManagerGcpUserAccessBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AccessContextManagerGcpUserAccessBinding)(nil)

type AccessContextManagerGcpUserAccessBinding struct {
	Name  string
	Args  AccessContextManagerGcpUserAccessBindingArgs
	state *accessContextManagerGcpUserAccessBindingState
}

func (acmguab *AccessContextManagerGcpUserAccessBinding) Type() string {
	return "google_access_context_manager_gcp_user_access_binding"
}

func (acmguab *AccessContextManagerGcpUserAccessBinding) LocalName() string {
	return acmguab.Name
}

func (acmguab *AccessContextManagerGcpUserAccessBinding) Configuration() interface{} {
	return acmguab.Args
}

func (acmguab *AccessContextManagerGcpUserAccessBinding) Attributes() accessContextManagerGcpUserAccessBindingAttributes {
	return accessContextManagerGcpUserAccessBindingAttributes{ref: terra.ReferenceResource(acmguab)}
}

func (acmguab *AccessContextManagerGcpUserAccessBinding) ImportState(av io.Reader) error {
	acmguab.state = &accessContextManagerGcpUserAccessBindingState{}
	if err := json.NewDecoder(av).Decode(acmguab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acmguab.Type(), acmguab.LocalName(), err)
	}
	return nil
}

func (acmguab *AccessContextManagerGcpUserAccessBinding) State() (*accessContextManagerGcpUserAccessBindingState, bool) {
	return acmguab.state, acmguab.state != nil
}

func (acmguab *AccessContextManagerGcpUserAccessBinding) StateMust() *accessContextManagerGcpUserAccessBindingState {
	if acmguab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acmguab.Type(), acmguab.LocalName()))
	}
	return acmguab.state
}

func (acmguab *AccessContextManagerGcpUserAccessBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(acmguab)
}

type AccessContextManagerGcpUserAccessBindingArgs struct {
	// AccessLevels: list of string, required
	AccessLevels terra.ListValue[terra.StringValue] `hcl:"access_levels,attr" validate:"required"`
	// GroupKey: string, required
	GroupKey terra.StringValue `hcl:"group_key,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OrganizationId: string, required
	OrganizationId terra.StringValue `hcl:"organization_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *accesscontextmanagergcpuseraccessbinding.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AccessContextManagerGcpUserAccessBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type accessContextManagerGcpUserAccessBindingAttributes struct {
	ref terra.Reference
}

func (acmguab accessContextManagerGcpUserAccessBindingAttributes) AccessLevels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](acmguab.ref.Append("access_levels"))
}

func (acmguab accessContextManagerGcpUserAccessBindingAttributes) GroupKey() terra.StringValue {
	return terra.ReferenceString(acmguab.ref.Append("group_key"))
}

func (acmguab accessContextManagerGcpUserAccessBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(acmguab.ref.Append("id"))
}

func (acmguab accessContextManagerGcpUserAccessBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceString(acmguab.ref.Append("name"))
}

func (acmguab accessContextManagerGcpUserAccessBindingAttributes) OrganizationId() terra.StringValue {
	return terra.ReferenceString(acmguab.ref.Append("organization_id"))
}

func (acmguab accessContextManagerGcpUserAccessBindingAttributes) Timeouts() accesscontextmanagergcpuseraccessbinding.TimeoutsAttributes {
	return terra.ReferenceSingle[accesscontextmanagergcpuseraccessbinding.TimeoutsAttributes](acmguab.ref.Append("timeouts"))
}

type accessContextManagerGcpUserAccessBindingState struct {
	AccessLevels   []string                                                `json:"access_levels"`
	GroupKey       string                                                  `json:"group_key"`
	Id             string                                                  `json:"id"`
	Name           string                                                  `json:"name"`
	OrganizationId string                                                  `json:"organization_id"`
	Timeouts       *accesscontextmanagergcpuseraccessbinding.TimeoutsState `json:"timeouts"`
}
