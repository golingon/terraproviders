// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	gameservicesgameserverdeployment "github.com/golingon/terraproviders/google/4.59.0/gameservicesgameserverdeployment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGameServicesGameServerDeployment(name string, args GameServicesGameServerDeploymentArgs) *GameServicesGameServerDeployment {
	return &GameServicesGameServerDeployment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GameServicesGameServerDeployment)(nil)

type GameServicesGameServerDeployment struct {
	Name  string
	Args  GameServicesGameServerDeploymentArgs
	state *gameServicesGameServerDeploymentState
}

func (gsgsd *GameServicesGameServerDeployment) Type() string {
	return "google_game_services_game_server_deployment"
}

func (gsgsd *GameServicesGameServerDeployment) LocalName() string {
	return gsgsd.Name
}

func (gsgsd *GameServicesGameServerDeployment) Configuration() interface{} {
	return gsgsd.Args
}

func (gsgsd *GameServicesGameServerDeployment) Attributes() gameServicesGameServerDeploymentAttributes {
	return gameServicesGameServerDeploymentAttributes{ref: terra.ReferenceResource(gsgsd)}
}

func (gsgsd *GameServicesGameServerDeployment) ImportState(av io.Reader) error {
	gsgsd.state = &gameServicesGameServerDeploymentState{}
	if err := json.NewDecoder(av).Decode(gsgsd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsgsd.Type(), gsgsd.LocalName(), err)
	}
	return nil
}

func (gsgsd *GameServicesGameServerDeployment) State() (*gameServicesGameServerDeploymentState, bool) {
	return gsgsd.state, gsgsd.state != nil
}

func (gsgsd *GameServicesGameServerDeployment) StateMust() *gameServicesGameServerDeploymentState {
	if gsgsd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsgsd.Type(), gsgsd.LocalName()))
	}
	return gsgsd.state
}

func (gsgsd *GameServicesGameServerDeployment) DependOn() terra.Reference {
	return terra.ReferenceResource(gsgsd)
}

type GameServicesGameServerDeploymentArgs struct {
	// DeploymentId: string, required
	DeploymentId terra.StringValue `hcl:"deployment_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *gameservicesgameserverdeployment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that GameServicesGameServerDeployment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type gameServicesGameServerDeploymentAttributes struct {
	ref terra.Reference
}

func (gsgsd gameServicesGameServerDeploymentAttributes) DeploymentId() terra.StringValue {
	return terra.ReferenceString(gsgsd.ref.Append("deployment_id"))
}

func (gsgsd gameServicesGameServerDeploymentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(gsgsd.ref.Append("description"))
}

func (gsgsd gameServicesGameServerDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gsgsd.ref.Append("id"))
}

func (gsgsd gameServicesGameServerDeploymentAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gsgsd.ref.Append("labels"))
}

func (gsgsd gameServicesGameServerDeploymentAttributes) Location() terra.StringValue {
	return terra.ReferenceString(gsgsd.ref.Append("location"))
}

func (gsgsd gameServicesGameServerDeploymentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gsgsd.ref.Append("name"))
}

func (gsgsd gameServicesGameServerDeploymentAttributes) Project() terra.StringValue {
	return terra.ReferenceString(gsgsd.ref.Append("project"))
}

func (gsgsd gameServicesGameServerDeploymentAttributes) Timeouts() gameservicesgameserverdeployment.TimeoutsAttributes {
	return terra.ReferenceSingle[gameservicesgameserverdeployment.TimeoutsAttributes](gsgsd.ref.Append("timeouts"))
}

type gameServicesGameServerDeploymentState struct {
	DeploymentId string                                          `json:"deployment_id"`
	Description  string                                          `json:"description"`
	Id           string                                          `json:"id"`
	Labels       map[string]string                               `json:"labels"`
	Location     string                                          `json:"location"`
	Name         string                                          `json:"name"`
	Project      string                                          `json:"project"`
	Timeouts     *gameservicesgameserverdeployment.TimeoutsState `json:"timeouts"`
}
