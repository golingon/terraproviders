// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	iaptunneliammember "github.com/golingon/terraproviders/google/4.59.0/iaptunneliammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIapTunnelIamMember(name string, args IapTunnelIamMemberArgs) *IapTunnelIamMember {
	return &IapTunnelIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IapTunnelIamMember)(nil)

type IapTunnelIamMember struct {
	Name  string
	Args  IapTunnelIamMemberArgs
	state *iapTunnelIamMemberState
}

func (itim *IapTunnelIamMember) Type() string {
	return "google_iap_tunnel_iam_member"
}

func (itim *IapTunnelIamMember) LocalName() string {
	return itim.Name
}

func (itim *IapTunnelIamMember) Configuration() interface{} {
	return itim.Args
}

func (itim *IapTunnelIamMember) Attributes() iapTunnelIamMemberAttributes {
	return iapTunnelIamMemberAttributes{ref: terra.ReferenceResource(itim)}
}

func (itim *IapTunnelIamMember) ImportState(av io.Reader) error {
	itim.state = &iapTunnelIamMemberState{}
	if err := json.NewDecoder(av).Decode(itim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", itim.Type(), itim.LocalName(), err)
	}
	return nil
}

func (itim *IapTunnelIamMember) State() (*iapTunnelIamMemberState, bool) {
	return itim.state, itim.state != nil
}

func (itim *IapTunnelIamMember) StateMust() *iapTunnelIamMemberState {
	if itim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", itim.Type(), itim.LocalName()))
	}
	return itim.state
}

func (itim *IapTunnelIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(itim)
}

type IapTunnelIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *iaptunneliammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that IapTunnelIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iapTunnelIamMemberAttributes struct {
	ref terra.Reference
}

func (itim iapTunnelIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(itim.ref.Append("etag"))
}

func (itim iapTunnelIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(itim.ref.Append("id"))
}

func (itim iapTunnelIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(itim.ref.Append("member"))
}

func (itim iapTunnelIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(itim.ref.Append("project"))
}

func (itim iapTunnelIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(itim.ref.Append("role"))
}

func (itim iapTunnelIamMemberAttributes) Condition() terra.ListValue[iaptunneliammember.ConditionAttributes] {
	return terra.ReferenceList[iaptunneliammember.ConditionAttributes](itim.ref.Append("condition"))
}

type iapTunnelIamMemberState struct {
	Etag      string                              `json:"etag"`
	Id        string                              `json:"id"`
	Member    string                              `json:"member"`
	Project   string                              `json:"project"`
	Role      string                              `json:"role"`
	Condition []iaptunneliammember.ConditionState `json:"condition"`
}
