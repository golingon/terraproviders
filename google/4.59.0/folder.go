// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	folder "github.com/golingon/terraproviders/google/4.59.0/folder"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFolder(name string, args FolderArgs) *Folder {
	return &Folder{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Folder)(nil)

type Folder struct {
	Name  string
	Args  FolderArgs
	state *folderState
}

func (f *Folder) Type() string {
	return "google_folder"
}

func (f *Folder) LocalName() string {
	return f.Name
}

func (f *Folder) Configuration() interface{} {
	return f.Args
}

func (f *Folder) Attributes() folderAttributes {
	return folderAttributes{ref: terra.ReferenceResource(f)}
}

func (f *Folder) ImportState(av io.Reader) error {
	f.state = &folderState{}
	if err := json.NewDecoder(av).Decode(f.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", f.Type(), f.LocalName(), err)
	}
	return nil
}

func (f *Folder) State() (*folderState, bool) {
	return f.state, f.state != nil
}

func (f *Folder) StateMust() *folderState {
	if f.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", f.Type(), f.LocalName()))
	}
	return f.state
}

func (f *Folder) DependOn() terra.Reference {
	return terra.ReferenceResource(f)
}

type FolderArgs struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *folder.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Folder depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type folderAttributes struct {
	ref terra.Reference
}

func (f folderAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("create_time"))
}

func (f folderAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("display_name"))
}

func (f folderAttributes) FolderId() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("folder_id"))
}

func (f folderAttributes) Id() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("id"))
}

func (f folderAttributes) LifecycleState() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("lifecycle_state"))
}

func (f folderAttributes) Name() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("name"))
}

func (f folderAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("parent"))
}

func (f folderAttributes) Timeouts() folder.TimeoutsAttributes {
	return terra.ReferenceSingle[folder.TimeoutsAttributes](f.ref.Append("timeouts"))
}

type folderState struct {
	CreateTime     string                `json:"create_time"`
	DisplayName    string                `json:"display_name"`
	FolderId       string                `json:"folder_id"`
	Id             string                `json:"id"`
	LifecycleState string                `json:"lifecycle_state"`
	Name           string                `json:"name"`
	Parent         string                `json:"parent"`
	Timeouts       *folder.TimeoutsState `json:"timeouts"`
}
