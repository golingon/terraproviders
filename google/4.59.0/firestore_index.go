// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	firestoreindex "github.com/golingon/terraproviders/google/4.59.0/firestoreindex"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFirestoreIndex(name string, args FirestoreIndexArgs) *FirestoreIndex {
	return &FirestoreIndex{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirestoreIndex)(nil)

type FirestoreIndex struct {
	Name  string
	Args  FirestoreIndexArgs
	state *firestoreIndexState
}

func (fi *FirestoreIndex) Type() string {
	return "google_firestore_index"
}

func (fi *FirestoreIndex) LocalName() string {
	return fi.Name
}

func (fi *FirestoreIndex) Configuration() interface{} {
	return fi.Args
}

func (fi *FirestoreIndex) Attributes() firestoreIndexAttributes {
	return firestoreIndexAttributes{ref: terra.ReferenceResource(fi)}
}

func (fi *FirestoreIndex) ImportState(av io.Reader) error {
	fi.state = &firestoreIndexState{}
	if err := json.NewDecoder(av).Decode(fi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fi.Type(), fi.LocalName(), err)
	}
	return nil
}

func (fi *FirestoreIndex) State() (*firestoreIndexState, bool) {
	return fi.state, fi.state != nil
}

func (fi *FirestoreIndex) StateMust() *firestoreIndexState {
	if fi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fi.Type(), fi.LocalName()))
	}
	return fi.state
}

func (fi *FirestoreIndex) DependOn() terra.Reference {
	return terra.ReferenceResource(fi)
}

type FirestoreIndexArgs struct {
	// Collection: string, required
	Collection terra.StringValue `hcl:"collection,attr" validate:"required"`
	// Database: string, optional
	Database terra.StringValue `hcl:"database,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// QueryScope: string, optional
	QueryScope terra.StringValue `hcl:"query_scope,attr"`
	// Fields: min=2
	Fields []firestoreindex.Fields `hcl:"fields,block" validate:"min=2"`
	// Timeouts: optional
	Timeouts *firestoreindex.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FirestoreIndex depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type firestoreIndexAttributes struct {
	ref terra.Reference
}

func (fi firestoreIndexAttributes) Collection() terra.StringValue {
	return terra.ReferenceString(fi.ref.Append("collection"))
}

func (fi firestoreIndexAttributes) Database() terra.StringValue {
	return terra.ReferenceString(fi.ref.Append("database"))
}

func (fi firestoreIndexAttributes) Id() terra.StringValue {
	return terra.ReferenceString(fi.ref.Append("id"))
}

func (fi firestoreIndexAttributes) Name() terra.StringValue {
	return terra.ReferenceString(fi.ref.Append("name"))
}

func (fi firestoreIndexAttributes) Project() terra.StringValue {
	return terra.ReferenceString(fi.ref.Append("project"))
}

func (fi firestoreIndexAttributes) QueryScope() terra.StringValue {
	return terra.ReferenceString(fi.ref.Append("query_scope"))
}

func (fi firestoreIndexAttributes) Fields() terra.ListValue[firestoreindex.FieldsAttributes] {
	return terra.ReferenceList[firestoreindex.FieldsAttributes](fi.ref.Append("fields"))
}

func (fi firestoreIndexAttributes) Timeouts() firestoreindex.TimeoutsAttributes {
	return terra.ReferenceSingle[firestoreindex.TimeoutsAttributes](fi.ref.Append("timeouts"))
}

type firestoreIndexState struct {
	Collection string                        `json:"collection"`
	Database   string                        `json:"database"`
	Id         string                        `json:"id"`
	Name       string                        `json:"name"`
	Project    string                        `json:"project"`
	QueryScope string                        `json:"query_scope"`
	Fields     []firestoreindex.FieldsState  `json:"fields"`
	Timeouts   *firestoreindex.TimeoutsState `json:"timeouts"`
}
