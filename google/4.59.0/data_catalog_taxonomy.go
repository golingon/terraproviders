// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	datacatalogtaxonomy "github.com/golingon/terraproviders/google/4.59.0/datacatalogtaxonomy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataCatalogTaxonomy(name string, args DataCatalogTaxonomyArgs) *DataCatalogTaxonomy {
	return &DataCatalogTaxonomy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataCatalogTaxonomy)(nil)

type DataCatalogTaxonomy struct {
	Name  string
	Args  DataCatalogTaxonomyArgs
	state *dataCatalogTaxonomyState
}

func (dct *DataCatalogTaxonomy) Type() string {
	return "google_data_catalog_taxonomy"
}

func (dct *DataCatalogTaxonomy) LocalName() string {
	return dct.Name
}

func (dct *DataCatalogTaxonomy) Configuration() interface{} {
	return dct.Args
}

func (dct *DataCatalogTaxonomy) Attributes() dataCatalogTaxonomyAttributes {
	return dataCatalogTaxonomyAttributes{ref: terra.ReferenceResource(dct)}
}

func (dct *DataCatalogTaxonomy) ImportState(av io.Reader) error {
	dct.state = &dataCatalogTaxonomyState{}
	if err := json.NewDecoder(av).Decode(dct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dct.Type(), dct.LocalName(), err)
	}
	return nil
}

func (dct *DataCatalogTaxonomy) State() (*dataCatalogTaxonomyState, bool) {
	return dct.state, dct.state != nil
}

func (dct *DataCatalogTaxonomy) StateMust() *dataCatalogTaxonomyState {
	if dct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dct.Type(), dct.LocalName()))
	}
	return dct.state
}

func (dct *DataCatalogTaxonomy) DependOn() terra.Reference {
	return terra.ReferenceResource(dct)
}

type DataCatalogTaxonomyArgs struct {
	// ActivatedPolicyTypes: list of string, optional
	ActivatedPolicyTypes terra.ListValue[terra.StringValue] `hcl:"activated_policy_types,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Timeouts: optional
	Timeouts *datacatalogtaxonomy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataCatalogTaxonomy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataCatalogTaxonomyAttributes struct {
	ref terra.Reference
}

func (dct dataCatalogTaxonomyAttributes) ActivatedPolicyTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dct.ref.Append("activated_policy_types"))
}

func (dct dataCatalogTaxonomyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dct.ref.Append("description"))
}

func (dct dataCatalogTaxonomyAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(dct.ref.Append("display_name"))
}

func (dct dataCatalogTaxonomyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dct.ref.Append("id"))
}

func (dct dataCatalogTaxonomyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dct.ref.Append("name"))
}

func (dct dataCatalogTaxonomyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dct.ref.Append("project"))
}

func (dct dataCatalogTaxonomyAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dct.ref.Append("region"))
}

func (dct dataCatalogTaxonomyAttributes) Timeouts() datacatalogtaxonomy.TimeoutsAttributes {
	return terra.ReferenceSingle[datacatalogtaxonomy.TimeoutsAttributes](dct.ref.Append("timeouts"))
}

type dataCatalogTaxonomyState struct {
	ActivatedPolicyTypes []string                           `json:"activated_policy_types"`
	Description          string                             `json:"description"`
	DisplayName          string                             `json:"display_name"`
	Id                   string                             `json:"id"`
	Name                 string                             `json:"name"`
	Project              string                             `json:"project"`
	Region               string                             `json:"region"`
	Timeouts             *datacatalogtaxonomy.TimeoutsState `json:"timeouts"`
}
