// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudTasksQueueIamPolicy(name string, args CloudTasksQueueIamPolicyArgs) *CloudTasksQueueIamPolicy {
	return &CloudTasksQueueIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudTasksQueueIamPolicy)(nil)

type CloudTasksQueueIamPolicy struct {
	Name  string
	Args  CloudTasksQueueIamPolicyArgs
	state *cloudTasksQueueIamPolicyState
}

func (ctqip *CloudTasksQueueIamPolicy) Type() string {
	return "google_cloud_tasks_queue_iam_policy"
}

func (ctqip *CloudTasksQueueIamPolicy) LocalName() string {
	return ctqip.Name
}

func (ctqip *CloudTasksQueueIamPolicy) Configuration() interface{} {
	return ctqip.Args
}

func (ctqip *CloudTasksQueueIamPolicy) Attributes() cloudTasksQueueIamPolicyAttributes {
	return cloudTasksQueueIamPolicyAttributes{ref: terra.ReferenceResource(ctqip)}
}

func (ctqip *CloudTasksQueueIamPolicy) ImportState(av io.Reader) error {
	ctqip.state = &cloudTasksQueueIamPolicyState{}
	if err := json.NewDecoder(av).Decode(ctqip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ctqip.Type(), ctqip.LocalName(), err)
	}
	return nil
}

func (ctqip *CloudTasksQueueIamPolicy) State() (*cloudTasksQueueIamPolicyState, bool) {
	return ctqip.state, ctqip.state != nil
}

func (ctqip *CloudTasksQueueIamPolicy) StateMust() *cloudTasksQueueIamPolicyState {
	if ctqip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ctqip.Type(), ctqip.LocalName()))
	}
	return ctqip.state
}

func (ctqip *CloudTasksQueueIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ctqip)
}

type CloudTasksQueueIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that CloudTasksQueueIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudTasksQueueIamPolicyAttributes struct {
	ref terra.Reference
}

func (ctqip cloudTasksQueueIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ctqip.ref.Append("etag"))
}

func (ctqip cloudTasksQueueIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ctqip.ref.Append("id"))
}

func (ctqip cloudTasksQueueIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ctqip.ref.Append("location"))
}

func (ctqip cloudTasksQueueIamPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ctqip.ref.Append("name"))
}

func (ctqip cloudTasksQueueIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(ctqip.ref.Append("policy_data"))
}

func (ctqip cloudTasksQueueIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ctqip.ref.Append("project"))
}

type cloudTasksQueueIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Location   string `json:"location"`
	Name       string `json:"name"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
}
