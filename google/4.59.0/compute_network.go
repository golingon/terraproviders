// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computenetwork "github.com/golingon/terraproviders/google/4.59.0/computenetwork"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeNetwork(name string, args ComputeNetworkArgs) *ComputeNetwork {
	return &ComputeNetwork{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeNetwork)(nil)

type ComputeNetwork struct {
	Name  string
	Args  ComputeNetworkArgs
	state *computeNetworkState
}

func (cn *ComputeNetwork) Type() string {
	return "google_compute_network"
}

func (cn *ComputeNetwork) LocalName() string {
	return cn.Name
}

func (cn *ComputeNetwork) Configuration() interface{} {
	return cn.Args
}

func (cn *ComputeNetwork) Attributes() computeNetworkAttributes {
	return computeNetworkAttributes{ref: terra.ReferenceResource(cn)}
}

func (cn *ComputeNetwork) ImportState(av io.Reader) error {
	cn.state = &computeNetworkState{}
	if err := json.NewDecoder(av).Decode(cn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cn.Type(), cn.LocalName(), err)
	}
	return nil
}

func (cn *ComputeNetwork) State() (*computeNetworkState, bool) {
	return cn.state, cn.state != nil
}

func (cn *ComputeNetwork) StateMust() *computeNetworkState {
	if cn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cn.Type(), cn.LocalName()))
	}
	return cn.state
}

func (cn *ComputeNetwork) DependOn() terra.Reference {
	return terra.ReferenceResource(cn)
}

type ComputeNetworkArgs struct {
	// AutoCreateSubnetworks: bool, optional
	AutoCreateSubnetworks terra.BoolValue `hcl:"auto_create_subnetworks,attr"`
	// DeleteDefaultRoutesOnCreate: bool, optional
	DeleteDefaultRoutesOnCreate terra.BoolValue `hcl:"delete_default_routes_on_create,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnableUlaInternalIpv6: bool, optional
	EnableUlaInternalIpv6 terra.BoolValue `hcl:"enable_ula_internal_ipv6,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InternalIpv6Range: string, optional
	InternalIpv6Range terra.StringValue `hcl:"internal_ipv6_range,attr"`
	// Mtu: number, optional
	Mtu terra.NumberValue `hcl:"mtu,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RoutingMode: string, optional
	RoutingMode terra.StringValue `hcl:"routing_mode,attr"`
	// Timeouts: optional
	Timeouts *computenetwork.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeNetwork depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeNetworkAttributes struct {
	ref terra.Reference
}

func (cn computeNetworkAttributes) AutoCreateSubnetworks() terra.BoolValue {
	return terra.ReferenceBool(cn.ref.Append("auto_create_subnetworks"))
}

func (cn computeNetworkAttributes) DeleteDefaultRoutesOnCreate() terra.BoolValue {
	return terra.ReferenceBool(cn.ref.Append("delete_default_routes_on_create"))
}

func (cn computeNetworkAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cn.ref.Append("description"))
}

func (cn computeNetworkAttributes) EnableUlaInternalIpv6() terra.BoolValue {
	return terra.ReferenceBool(cn.ref.Append("enable_ula_internal_ipv6"))
}

func (cn computeNetworkAttributes) GatewayIpv4() terra.StringValue {
	return terra.ReferenceString(cn.ref.Append("gateway_ipv4"))
}

func (cn computeNetworkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cn.ref.Append("id"))
}

func (cn computeNetworkAttributes) InternalIpv6Range() terra.StringValue {
	return terra.ReferenceString(cn.ref.Append("internal_ipv6_range"))
}

func (cn computeNetworkAttributes) Mtu() terra.NumberValue {
	return terra.ReferenceNumber(cn.ref.Append("mtu"))
}

func (cn computeNetworkAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cn.ref.Append("name"))
}

func (cn computeNetworkAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cn.ref.Append("project"))
}

func (cn computeNetworkAttributes) RoutingMode() terra.StringValue {
	return terra.ReferenceString(cn.ref.Append("routing_mode"))
}

func (cn computeNetworkAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(cn.ref.Append("self_link"))
}

func (cn computeNetworkAttributes) Timeouts() computenetwork.TimeoutsAttributes {
	return terra.ReferenceSingle[computenetwork.TimeoutsAttributes](cn.ref.Append("timeouts"))
}

type computeNetworkState struct {
	AutoCreateSubnetworks       bool                          `json:"auto_create_subnetworks"`
	DeleteDefaultRoutesOnCreate bool                          `json:"delete_default_routes_on_create"`
	Description                 string                        `json:"description"`
	EnableUlaInternalIpv6       bool                          `json:"enable_ula_internal_ipv6"`
	GatewayIpv4                 string                        `json:"gateway_ipv4"`
	Id                          string                        `json:"id"`
	InternalIpv6Range           string                        `json:"internal_ipv6_range"`
	Mtu                         float64                       `json:"mtu"`
	Name                        string                        `json:"name"`
	Project                     string                        `json:"project"`
	RoutingMode                 string                        `json:"routing_mode"`
	SelfLink                    string                        `json:"self_link"`
	Timeouts                    *computenetwork.TimeoutsState `json:"timeouts"`
}
