// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeDiskIamPolicy(name string, args ComputeDiskIamPolicyArgs) *ComputeDiskIamPolicy {
	return &ComputeDiskIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeDiskIamPolicy)(nil)

type ComputeDiskIamPolicy struct {
	Name  string
	Args  ComputeDiskIamPolicyArgs
	state *computeDiskIamPolicyState
}

func (cdip *ComputeDiskIamPolicy) Type() string {
	return "google_compute_disk_iam_policy"
}

func (cdip *ComputeDiskIamPolicy) LocalName() string {
	return cdip.Name
}

func (cdip *ComputeDiskIamPolicy) Configuration() interface{} {
	return cdip.Args
}

func (cdip *ComputeDiskIamPolicy) Attributes() computeDiskIamPolicyAttributes {
	return computeDiskIamPolicyAttributes{ref: terra.ReferenceResource(cdip)}
}

func (cdip *ComputeDiskIamPolicy) ImportState(av io.Reader) error {
	cdip.state = &computeDiskIamPolicyState{}
	if err := json.NewDecoder(av).Decode(cdip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cdip.Type(), cdip.LocalName(), err)
	}
	return nil
}

func (cdip *ComputeDiskIamPolicy) State() (*computeDiskIamPolicyState, bool) {
	return cdip.state, cdip.state != nil
}

func (cdip *ComputeDiskIamPolicy) StateMust() *computeDiskIamPolicyState {
	if cdip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cdip.Type(), cdip.LocalName()))
	}
	return cdip.state
}

func (cdip *ComputeDiskIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(cdip)
}

type ComputeDiskIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// DependsOn contains resources that ComputeDiskIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeDiskIamPolicyAttributes struct {
	ref terra.Reference
}

func (cdip computeDiskIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(cdip.ref.Append("etag"))
}

func (cdip computeDiskIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cdip.ref.Append("id"))
}

func (cdip computeDiskIamPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cdip.ref.Append("name"))
}

func (cdip computeDiskIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(cdip.ref.Append("policy_data"))
}

func (cdip computeDiskIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cdip.ref.Append("project"))
}

func (cdip computeDiskIamPolicyAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(cdip.ref.Append("zone"))
}

type computeDiskIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Name       string `json:"name"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	Zone       string `json:"zone"`
}
