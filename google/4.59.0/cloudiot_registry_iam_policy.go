// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudiotRegistryIamPolicy(name string, args CloudiotRegistryIamPolicyArgs) *CloudiotRegistryIamPolicy {
	return &CloudiotRegistryIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudiotRegistryIamPolicy)(nil)

type CloudiotRegistryIamPolicy struct {
	Name  string
	Args  CloudiotRegistryIamPolicyArgs
	state *cloudiotRegistryIamPolicyState
}

func (crip *CloudiotRegistryIamPolicy) Type() string {
	return "google_cloudiot_registry_iam_policy"
}

func (crip *CloudiotRegistryIamPolicy) LocalName() string {
	return crip.Name
}

func (crip *CloudiotRegistryIamPolicy) Configuration() interface{} {
	return crip.Args
}

func (crip *CloudiotRegistryIamPolicy) Attributes() cloudiotRegistryIamPolicyAttributes {
	return cloudiotRegistryIamPolicyAttributes{ref: terra.ReferenceResource(crip)}
}

func (crip *CloudiotRegistryIamPolicy) ImportState(av io.Reader) error {
	crip.state = &cloudiotRegistryIamPolicyState{}
	if err := json.NewDecoder(av).Decode(crip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crip.Type(), crip.LocalName(), err)
	}
	return nil
}

func (crip *CloudiotRegistryIamPolicy) State() (*cloudiotRegistryIamPolicyState, bool) {
	return crip.state, crip.state != nil
}

func (crip *CloudiotRegistryIamPolicy) StateMust() *cloudiotRegistryIamPolicyState {
	if crip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crip.Type(), crip.LocalName()))
	}
	return crip.state
}

func (crip *CloudiotRegistryIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(crip)
}

type CloudiotRegistryIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// DependsOn contains resources that CloudiotRegistryIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudiotRegistryIamPolicyAttributes struct {
	ref terra.Reference
}

func (crip cloudiotRegistryIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(crip.ref.Append("etag"))
}

func (crip cloudiotRegistryIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crip.ref.Append("id"))
}

func (crip cloudiotRegistryIamPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crip.ref.Append("name"))
}

func (crip cloudiotRegistryIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(crip.ref.Append("policy_data"))
}

func (crip cloudiotRegistryIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crip.ref.Append("project"))
}

func (crip cloudiotRegistryIamPolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceString(crip.ref.Append("region"))
}

type cloudiotRegistryIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Name       string `json:"name"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	Region     string `json:"region"`
}
