// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	iapwebiambinding "github.com/golingon/terraproviders/google/4.59.0/iapwebiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIapWebIamBinding(name string, args IapWebIamBindingArgs) *IapWebIamBinding {
	return &IapWebIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IapWebIamBinding)(nil)

type IapWebIamBinding struct {
	Name  string
	Args  IapWebIamBindingArgs
	state *iapWebIamBindingState
}

func (iwib *IapWebIamBinding) Type() string {
	return "google_iap_web_iam_binding"
}

func (iwib *IapWebIamBinding) LocalName() string {
	return iwib.Name
}

func (iwib *IapWebIamBinding) Configuration() interface{} {
	return iwib.Args
}

func (iwib *IapWebIamBinding) Attributes() iapWebIamBindingAttributes {
	return iapWebIamBindingAttributes{ref: terra.ReferenceResource(iwib)}
}

func (iwib *IapWebIamBinding) ImportState(av io.Reader) error {
	iwib.state = &iapWebIamBindingState{}
	if err := json.NewDecoder(av).Decode(iwib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iwib.Type(), iwib.LocalName(), err)
	}
	return nil
}

func (iwib *IapWebIamBinding) State() (*iapWebIamBindingState, bool) {
	return iwib.state, iwib.state != nil
}

func (iwib *IapWebIamBinding) StateMust() *iapWebIamBindingState {
	if iwib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iwib.Type(), iwib.LocalName()))
	}
	return iwib.state
}

func (iwib *IapWebIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(iwib)
}

type IapWebIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *iapwebiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that IapWebIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iapWebIamBindingAttributes struct {
	ref terra.Reference
}

func (iwib iapWebIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(iwib.ref.Append("etag"))
}

func (iwib iapWebIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iwib.ref.Append("id"))
}

func (iwib iapWebIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](iwib.ref.Append("members"))
}

func (iwib iapWebIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(iwib.ref.Append("project"))
}

func (iwib iapWebIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(iwib.ref.Append("role"))
}

func (iwib iapWebIamBindingAttributes) Condition() terra.ListValue[iapwebiambinding.ConditionAttributes] {
	return terra.ReferenceList[iapwebiambinding.ConditionAttributes](iwib.ref.Append("condition"))
}

type iapWebIamBindingState struct {
	Etag      string                            `json:"etag"`
	Id        string                            `json:"id"`
	Members   []string                          `json:"members"`
	Project   string                            `json:"project"`
	Role      string                            `json:"role"`
	Condition []iapwebiambinding.ConditionState `json:"condition"`
}
