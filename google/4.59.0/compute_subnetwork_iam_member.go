// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computesubnetworkiammember "github.com/golingon/terraproviders/google/4.59.0/computesubnetworkiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeSubnetworkIamMember(name string, args ComputeSubnetworkIamMemberArgs) *ComputeSubnetworkIamMember {
	return &ComputeSubnetworkIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeSubnetworkIamMember)(nil)

type ComputeSubnetworkIamMember struct {
	Name  string
	Args  ComputeSubnetworkIamMemberArgs
	state *computeSubnetworkIamMemberState
}

func (csim *ComputeSubnetworkIamMember) Type() string {
	return "google_compute_subnetwork_iam_member"
}

func (csim *ComputeSubnetworkIamMember) LocalName() string {
	return csim.Name
}

func (csim *ComputeSubnetworkIamMember) Configuration() interface{} {
	return csim.Args
}

func (csim *ComputeSubnetworkIamMember) Attributes() computeSubnetworkIamMemberAttributes {
	return computeSubnetworkIamMemberAttributes{ref: terra.ReferenceResource(csim)}
}

func (csim *ComputeSubnetworkIamMember) ImportState(av io.Reader) error {
	csim.state = &computeSubnetworkIamMemberState{}
	if err := json.NewDecoder(av).Decode(csim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csim.Type(), csim.LocalName(), err)
	}
	return nil
}

func (csim *ComputeSubnetworkIamMember) State() (*computeSubnetworkIamMemberState, bool) {
	return csim.state, csim.state != nil
}

func (csim *ComputeSubnetworkIamMember) StateMust() *computeSubnetworkIamMemberState {
	if csim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csim.Type(), csim.LocalName()))
	}
	return csim.state
}

func (csim *ComputeSubnetworkIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(csim)
}

type ComputeSubnetworkIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Subnetwork: string, required
	Subnetwork terra.StringValue `hcl:"subnetwork,attr" validate:"required"`
	// Condition: optional
	Condition *computesubnetworkiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that ComputeSubnetworkIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeSubnetworkIamMemberAttributes struct {
	ref terra.Reference
}

func (csim computeSubnetworkIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(csim.ref.Append("etag"))
}

func (csim computeSubnetworkIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(csim.ref.Append("id"))
}

func (csim computeSubnetworkIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(csim.ref.Append("member"))
}

func (csim computeSubnetworkIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(csim.ref.Append("project"))
}

func (csim computeSubnetworkIamMemberAttributes) Region() terra.StringValue {
	return terra.ReferenceString(csim.ref.Append("region"))
}

func (csim computeSubnetworkIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(csim.ref.Append("role"))
}

func (csim computeSubnetworkIamMemberAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceString(csim.ref.Append("subnetwork"))
}

func (csim computeSubnetworkIamMemberAttributes) Condition() terra.ListValue[computesubnetworkiammember.ConditionAttributes] {
	return terra.ReferenceList[computesubnetworkiammember.ConditionAttributes](csim.ref.Append("condition"))
}

type computeSubnetworkIamMemberState struct {
	Etag       string                                      `json:"etag"`
	Id         string                                      `json:"id"`
	Member     string                                      `json:"member"`
	Project    string                                      `json:"project"`
	Region     string                                      `json:"region"`
	Role       string                                      `json:"role"`
	Subnetwork string                                      `json:"subnetwork"`
	Condition  []computesubnetworkiammember.ConditionState `json:"condition"`
}
