// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	projectaccessapprovalsettings "github.com/golingon/terraproviders/google/4.59.0/projectaccessapprovalsettings"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewProjectAccessApprovalSettings(name string, args ProjectAccessApprovalSettingsArgs) *ProjectAccessApprovalSettings {
	return &ProjectAccessApprovalSettings{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ProjectAccessApprovalSettings)(nil)

type ProjectAccessApprovalSettings struct {
	Name  string
	Args  ProjectAccessApprovalSettingsArgs
	state *projectAccessApprovalSettingsState
}

func (paas *ProjectAccessApprovalSettings) Type() string {
	return "google_project_access_approval_settings"
}

func (paas *ProjectAccessApprovalSettings) LocalName() string {
	return paas.Name
}

func (paas *ProjectAccessApprovalSettings) Configuration() interface{} {
	return paas.Args
}

func (paas *ProjectAccessApprovalSettings) Attributes() projectAccessApprovalSettingsAttributes {
	return projectAccessApprovalSettingsAttributes{ref: terra.ReferenceResource(paas)}
}

func (paas *ProjectAccessApprovalSettings) ImportState(av io.Reader) error {
	paas.state = &projectAccessApprovalSettingsState{}
	if err := json.NewDecoder(av).Decode(paas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", paas.Type(), paas.LocalName(), err)
	}
	return nil
}

func (paas *ProjectAccessApprovalSettings) State() (*projectAccessApprovalSettingsState, bool) {
	return paas.state, paas.state != nil
}

func (paas *ProjectAccessApprovalSettings) StateMust() *projectAccessApprovalSettingsState {
	if paas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", paas.Type(), paas.LocalName()))
	}
	return paas.state
}

func (paas *ProjectAccessApprovalSettings) DependOn() terra.Reference {
	return terra.ReferenceResource(paas)
}

type ProjectAccessApprovalSettingsArgs struct {
	// ActiveKeyVersion: string, optional
	ActiveKeyVersion terra.StringValue `hcl:"active_key_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NotificationEmails: set of string, optional
	NotificationEmails terra.SetValue[terra.StringValue] `hcl:"notification_emails,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// EnrolledServices: min=1
	EnrolledServices []projectaccessapprovalsettings.EnrolledServices `hcl:"enrolled_services,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *projectaccessapprovalsettings.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ProjectAccessApprovalSettings depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type projectAccessApprovalSettingsAttributes struct {
	ref terra.Reference
}

func (paas projectAccessApprovalSettingsAttributes) ActiveKeyVersion() terra.StringValue {
	return terra.ReferenceString(paas.ref.Append("active_key_version"))
}

func (paas projectAccessApprovalSettingsAttributes) AncestorHasActiveKeyVersion() terra.BoolValue {
	return terra.ReferenceBool(paas.ref.Append("ancestor_has_active_key_version"))
}

func (paas projectAccessApprovalSettingsAttributes) EnrolledAncestor() terra.BoolValue {
	return terra.ReferenceBool(paas.ref.Append("enrolled_ancestor"))
}

func (paas projectAccessApprovalSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(paas.ref.Append("id"))
}

func (paas projectAccessApprovalSettingsAttributes) InvalidKeyVersion() terra.BoolValue {
	return terra.ReferenceBool(paas.ref.Append("invalid_key_version"))
}

func (paas projectAccessApprovalSettingsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(paas.ref.Append("name"))
}

func (paas projectAccessApprovalSettingsAttributes) NotificationEmails() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](paas.ref.Append("notification_emails"))
}

func (paas projectAccessApprovalSettingsAttributes) Project() terra.StringValue {
	return terra.ReferenceString(paas.ref.Append("project"))
}

func (paas projectAccessApprovalSettingsAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceString(paas.ref.Append("project_id"))
}

func (paas projectAccessApprovalSettingsAttributes) EnrolledServices() terra.SetValue[projectaccessapprovalsettings.EnrolledServicesAttributes] {
	return terra.ReferenceSet[projectaccessapprovalsettings.EnrolledServicesAttributes](paas.ref.Append("enrolled_services"))
}

func (paas projectAccessApprovalSettingsAttributes) Timeouts() projectaccessapprovalsettings.TimeoutsAttributes {
	return terra.ReferenceSingle[projectaccessapprovalsettings.TimeoutsAttributes](paas.ref.Append("timeouts"))
}

type projectAccessApprovalSettingsState struct {
	ActiveKeyVersion            string                                                `json:"active_key_version"`
	AncestorHasActiveKeyVersion bool                                                  `json:"ancestor_has_active_key_version"`
	EnrolledAncestor            bool                                                  `json:"enrolled_ancestor"`
	Id                          string                                                `json:"id"`
	InvalidKeyVersion           bool                                                  `json:"invalid_key_version"`
	Name                        string                                                `json:"name"`
	NotificationEmails          []string                                              `json:"notification_emails"`
	Project                     string                                                `json:"project"`
	ProjectId                   string                                                `json:"project_id"`
	EnrolledServices            []projectaccessapprovalsettings.EnrolledServicesState `json:"enrolled_services"`
	Timeouts                    *projectaccessapprovalsettings.TimeoutsState          `json:"timeouts"`
}
