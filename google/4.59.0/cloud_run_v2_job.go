// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	cloudrunv2job "github.com/golingon/terraproviders/google/4.59.0/cloudrunv2job"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudRunV2Job(name string, args CloudRunV2JobArgs) *CloudRunV2Job {
	return &CloudRunV2Job{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudRunV2Job)(nil)

type CloudRunV2Job struct {
	Name  string
	Args  CloudRunV2JobArgs
	state *cloudRunV2JobState
}

func (crvj *CloudRunV2Job) Type() string {
	return "google_cloud_run_v2_job"
}

func (crvj *CloudRunV2Job) LocalName() string {
	return crvj.Name
}

func (crvj *CloudRunV2Job) Configuration() interface{} {
	return crvj.Args
}

func (crvj *CloudRunV2Job) Attributes() cloudRunV2JobAttributes {
	return cloudRunV2JobAttributes{ref: terra.ReferenceResource(crvj)}
}

func (crvj *CloudRunV2Job) ImportState(av io.Reader) error {
	crvj.state = &cloudRunV2JobState{}
	if err := json.NewDecoder(av).Decode(crvj.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crvj.Type(), crvj.LocalName(), err)
	}
	return nil
}

func (crvj *CloudRunV2Job) State() (*cloudRunV2JobState, bool) {
	return crvj.state, crvj.state != nil
}

func (crvj *CloudRunV2Job) StateMust() *cloudRunV2JobState {
	if crvj.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crvj.Type(), crvj.LocalName()))
	}
	return crvj.state
}

func (crvj *CloudRunV2Job) DependOn() terra.Reference {
	return terra.ReferenceResource(crvj)
}

type CloudRunV2JobArgs struct {
	// Client: string, optional
	Client terra.StringValue `hcl:"client,attr"`
	// ClientVersion: string, optional
	ClientVersion terra.StringValue `hcl:"client_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LaunchStage: string, optional
	LaunchStage terra.StringValue `hcl:"launch_stage,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Conditions: min=0
	Conditions []cloudrunv2job.Conditions `hcl:"conditions,block" validate:"min=0"`
	// LatestCreatedExecution: min=0
	LatestCreatedExecution []cloudrunv2job.LatestCreatedExecution `hcl:"latest_created_execution,block" validate:"min=0"`
	// TerminalCondition: min=0
	TerminalCondition []cloudrunv2job.TerminalCondition `hcl:"terminal_condition,block" validate:"min=0"`
	// BinaryAuthorization: optional
	BinaryAuthorization *cloudrunv2job.BinaryAuthorization `hcl:"binary_authorization,block"`
	// Template: required
	Template *cloudrunv2job.Template `hcl:"template,block" validate:"required"`
	// Timeouts: optional
	Timeouts *cloudrunv2job.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CloudRunV2Job depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudRunV2JobAttributes struct {
	ref terra.Reference
}

func (crvj cloudRunV2JobAttributes) Client() terra.StringValue {
	return terra.ReferenceString(crvj.ref.Append("client"))
}

func (crvj cloudRunV2JobAttributes) ClientVersion() terra.StringValue {
	return terra.ReferenceString(crvj.ref.Append("client_version"))
}

func (crvj cloudRunV2JobAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(crvj.ref.Append("etag"))
}

func (crvj cloudRunV2JobAttributes) ExecutionCount() terra.NumberValue {
	return terra.ReferenceNumber(crvj.ref.Append("execution_count"))
}

func (crvj cloudRunV2JobAttributes) Generation() terra.StringValue {
	return terra.ReferenceString(crvj.ref.Append("generation"))
}

func (crvj cloudRunV2JobAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crvj.ref.Append("id"))
}

func (crvj cloudRunV2JobAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](crvj.ref.Append("labels"))
}

func (crvj cloudRunV2JobAttributes) LaunchStage() terra.StringValue {
	return terra.ReferenceString(crvj.ref.Append("launch_stage"))
}

func (crvj cloudRunV2JobAttributes) Location() terra.StringValue {
	return terra.ReferenceString(crvj.ref.Append("location"))
}

func (crvj cloudRunV2JobAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crvj.ref.Append("name"))
}

func (crvj cloudRunV2JobAttributes) ObservedGeneration() terra.StringValue {
	return terra.ReferenceString(crvj.ref.Append("observed_generation"))
}

func (crvj cloudRunV2JobAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crvj.ref.Append("project"))
}

func (crvj cloudRunV2JobAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceBool(crvj.ref.Append("reconciling"))
}

func (crvj cloudRunV2JobAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(crvj.ref.Append("uid"))
}

func (crvj cloudRunV2JobAttributes) Conditions() terra.ListValue[cloudrunv2job.ConditionsAttributes] {
	return terra.ReferenceList[cloudrunv2job.ConditionsAttributes](crvj.ref.Append("conditions"))
}

func (crvj cloudRunV2JobAttributes) LatestCreatedExecution() terra.ListValue[cloudrunv2job.LatestCreatedExecutionAttributes] {
	return terra.ReferenceList[cloudrunv2job.LatestCreatedExecutionAttributes](crvj.ref.Append("latest_created_execution"))
}

func (crvj cloudRunV2JobAttributes) TerminalCondition() terra.ListValue[cloudrunv2job.TerminalConditionAttributes] {
	return terra.ReferenceList[cloudrunv2job.TerminalConditionAttributes](crvj.ref.Append("terminal_condition"))
}

func (crvj cloudRunV2JobAttributes) BinaryAuthorization() terra.ListValue[cloudrunv2job.BinaryAuthorizationAttributes] {
	return terra.ReferenceList[cloudrunv2job.BinaryAuthorizationAttributes](crvj.ref.Append("binary_authorization"))
}

func (crvj cloudRunV2JobAttributes) Template() terra.ListValue[cloudrunv2job.TemplateAttributes] {
	return terra.ReferenceList[cloudrunv2job.TemplateAttributes](crvj.ref.Append("template"))
}

func (crvj cloudRunV2JobAttributes) Timeouts() cloudrunv2job.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudrunv2job.TimeoutsAttributes](crvj.ref.Append("timeouts"))
}

type cloudRunV2JobState struct {
	Client                 string                                      `json:"client"`
	ClientVersion          string                                      `json:"client_version"`
	Etag                   string                                      `json:"etag"`
	ExecutionCount         float64                                     `json:"execution_count"`
	Generation             string                                      `json:"generation"`
	Id                     string                                      `json:"id"`
	Labels                 map[string]string                           `json:"labels"`
	LaunchStage            string                                      `json:"launch_stage"`
	Location               string                                      `json:"location"`
	Name                   string                                      `json:"name"`
	ObservedGeneration     string                                      `json:"observed_generation"`
	Project                string                                      `json:"project"`
	Reconciling            bool                                        `json:"reconciling"`
	Uid                    string                                      `json:"uid"`
	Conditions             []cloudrunv2job.ConditionsState             `json:"conditions"`
	LatestCreatedExecution []cloudrunv2job.LatestCreatedExecutionState `json:"latest_created_execution"`
	TerminalCondition      []cloudrunv2job.TerminalConditionState      `json:"terminal_condition"`
	BinaryAuthorization    []cloudrunv2job.BinaryAuthorizationState    `json:"binary_authorization"`
	Template               []cloudrunv2job.TemplateState               `json:"template"`
	Timeouts               *cloudrunv2job.TimeoutsState                `json:"timeouts"`
}
