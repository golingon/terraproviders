// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dnsmanagedzone "github.com/golingon/terraproviders/google/4.59.0/dnsmanagedzone"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDnsManagedZone(name string, args DnsManagedZoneArgs) *DnsManagedZone {
	return &DnsManagedZone{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DnsManagedZone)(nil)

type DnsManagedZone struct {
	Name  string
	Args  DnsManagedZoneArgs
	state *dnsManagedZoneState
}

func (dmz *DnsManagedZone) Type() string {
	return "google_dns_managed_zone"
}

func (dmz *DnsManagedZone) LocalName() string {
	return dmz.Name
}

func (dmz *DnsManagedZone) Configuration() interface{} {
	return dmz.Args
}

func (dmz *DnsManagedZone) Attributes() dnsManagedZoneAttributes {
	return dnsManagedZoneAttributes{ref: terra.ReferenceResource(dmz)}
}

func (dmz *DnsManagedZone) ImportState(av io.Reader) error {
	dmz.state = &dnsManagedZoneState{}
	if err := json.NewDecoder(av).Decode(dmz.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dmz.Type(), dmz.LocalName(), err)
	}
	return nil
}

func (dmz *DnsManagedZone) State() (*dnsManagedZoneState, bool) {
	return dmz.state, dmz.state != nil
}

func (dmz *DnsManagedZone) StateMust() *dnsManagedZoneState {
	if dmz.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dmz.Type(), dmz.LocalName()))
	}
	return dmz.state
}

func (dmz *DnsManagedZone) DependOn() terra.Reference {
	return terra.ReferenceResource(dmz)
}

type DnsManagedZoneArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DnsName: string, required
	DnsName terra.StringValue `hcl:"dns_name,attr" validate:"required"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Visibility: string, optional
	Visibility terra.StringValue `hcl:"visibility,attr"`
	// CloudLoggingConfig: optional
	CloudLoggingConfig *dnsmanagedzone.CloudLoggingConfig `hcl:"cloud_logging_config,block"`
	// DnssecConfig: optional
	DnssecConfig *dnsmanagedzone.DnssecConfig `hcl:"dnssec_config,block"`
	// ForwardingConfig: optional
	ForwardingConfig *dnsmanagedzone.ForwardingConfig `hcl:"forwarding_config,block"`
	// PeeringConfig: optional
	PeeringConfig *dnsmanagedzone.PeeringConfig `hcl:"peering_config,block"`
	// PrivateVisibilityConfig: optional
	PrivateVisibilityConfig *dnsmanagedzone.PrivateVisibilityConfig `hcl:"private_visibility_config,block"`
	// Timeouts: optional
	Timeouts *dnsmanagedzone.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DnsManagedZone depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dnsManagedZoneAttributes struct {
	ref terra.Reference
}

func (dmz dnsManagedZoneAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceString(dmz.ref.Append("creation_time"))
}

func (dmz dnsManagedZoneAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dmz.ref.Append("description"))
}

func (dmz dnsManagedZoneAttributes) DnsName() terra.StringValue {
	return terra.ReferenceString(dmz.ref.Append("dns_name"))
}

func (dmz dnsManagedZoneAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceBool(dmz.ref.Append("force_destroy"))
}

func (dmz dnsManagedZoneAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dmz.ref.Append("id"))
}

func (dmz dnsManagedZoneAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dmz.ref.Append("labels"))
}

func (dmz dnsManagedZoneAttributes) ManagedZoneId() terra.NumberValue {
	return terra.ReferenceNumber(dmz.ref.Append("managed_zone_id"))
}

func (dmz dnsManagedZoneAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dmz.ref.Append("name"))
}

func (dmz dnsManagedZoneAttributes) NameServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dmz.ref.Append("name_servers"))
}

func (dmz dnsManagedZoneAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dmz.ref.Append("project"))
}

func (dmz dnsManagedZoneAttributes) Visibility() terra.StringValue {
	return terra.ReferenceString(dmz.ref.Append("visibility"))
}

func (dmz dnsManagedZoneAttributes) CloudLoggingConfig() terra.ListValue[dnsmanagedzone.CloudLoggingConfigAttributes] {
	return terra.ReferenceList[dnsmanagedzone.CloudLoggingConfigAttributes](dmz.ref.Append("cloud_logging_config"))
}

func (dmz dnsManagedZoneAttributes) DnssecConfig() terra.ListValue[dnsmanagedzone.DnssecConfigAttributes] {
	return terra.ReferenceList[dnsmanagedzone.DnssecConfigAttributes](dmz.ref.Append("dnssec_config"))
}

func (dmz dnsManagedZoneAttributes) ForwardingConfig() terra.ListValue[dnsmanagedzone.ForwardingConfigAttributes] {
	return terra.ReferenceList[dnsmanagedzone.ForwardingConfigAttributes](dmz.ref.Append("forwarding_config"))
}

func (dmz dnsManagedZoneAttributes) PeeringConfig() terra.ListValue[dnsmanagedzone.PeeringConfigAttributes] {
	return terra.ReferenceList[dnsmanagedzone.PeeringConfigAttributes](dmz.ref.Append("peering_config"))
}

func (dmz dnsManagedZoneAttributes) PrivateVisibilityConfig() terra.ListValue[dnsmanagedzone.PrivateVisibilityConfigAttributes] {
	return terra.ReferenceList[dnsmanagedzone.PrivateVisibilityConfigAttributes](dmz.ref.Append("private_visibility_config"))
}

func (dmz dnsManagedZoneAttributes) Timeouts() dnsmanagedzone.TimeoutsAttributes {
	return terra.ReferenceSingle[dnsmanagedzone.TimeoutsAttributes](dmz.ref.Append("timeouts"))
}

type dnsManagedZoneState struct {
	CreationTime            string                                        `json:"creation_time"`
	Description             string                                        `json:"description"`
	DnsName                 string                                        `json:"dns_name"`
	ForceDestroy            bool                                          `json:"force_destroy"`
	Id                      string                                        `json:"id"`
	Labels                  map[string]string                             `json:"labels"`
	ManagedZoneId           float64                                       `json:"managed_zone_id"`
	Name                    string                                        `json:"name"`
	NameServers             []string                                      `json:"name_servers"`
	Project                 string                                        `json:"project"`
	Visibility              string                                        `json:"visibility"`
	CloudLoggingConfig      []dnsmanagedzone.CloudLoggingConfigState      `json:"cloud_logging_config"`
	DnssecConfig            []dnsmanagedzone.DnssecConfigState            `json:"dnssec_config"`
	ForwardingConfig        []dnsmanagedzone.ForwardingConfigState        `json:"forwarding_config"`
	PeeringConfig           []dnsmanagedzone.PeeringConfigState           `json:"peering_config"`
	PrivateVisibilityConfig []dnsmanagedzone.PrivateVisibilityConfigState `json:"private_visibility_config"`
	Timeouts                *dnsmanagedzone.TimeoutsState                 `json:"timeouts"`
}
