// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	gkebackupbackupplan "github.com/golingon/terraproviders/google/4.59.0/gkebackupbackupplan"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGkeBackupBackupPlan(name string, args GkeBackupBackupPlanArgs) *GkeBackupBackupPlan {
	return &GkeBackupBackupPlan{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeBackupBackupPlan)(nil)

type GkeBackupBackupPlan struct {
	Name  string
	Args  GkeBackupBackupPlanArgs
	state *gkeBackupBackupPlanState
}

func (gbbp *GkeBackupBackupPlan) Type() string {
	return "google_gke_backup_backup_plan"
}

func (gbbp *GkeBackupBackupPlan) LocalName() string {
	return gbbp.Name
}

func (gbbp *GkeBackupBackupPlan) Configuration() interface{} {
	return gbbp.Args
}

func (gbbp *GkeBackupBackupPlan) Attributes() gkeBackupBackupPlanAttributes {
	return gkeBackupBackupPlanAttributes{ref: terra.ReferenceResource(gbbp)}
}

func (gbbp *GkeBackupBackupPlan) ImportState(av io.Reader) error {
	gbbp.state = &gkeBackupBackupPlanState{}
	if err := json.NewDecoder(av).Decode(gbbp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbbp.Type(), gbbp.LocalName(), err)
	}
	return nil
}

func (gbbp *GkeBackupBackupPlan) State() (*gkeBackupBackupPlanState, bool) {
	return gbbp.state, gbbp.state != nil
}

func (gbbp *GkeBackupBackupPlan) StateMust() *gkeBackupBackupPlanState {
	if gbbp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbbp.Type(), gbbp.LocalName()))
	}
	return gbbp.state
}

func (gbbp *GkeBackupBackupPlan) DependOn() terra.Reference {
	return terra.ReferenceResource(gbbp)
}

type GkeBackupBackupPlanArgs struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// Deactivated: bool, optional
	Deactivated terra.BoolValue `hcl:"deactivated,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// BackupConfig: optional
	BackupConfig *gkebackupbackupplan.BackupConfig `hcl:"backup_config,block"`
	// BackupSchedule: optional
	BackupSchedule *gkebackupbackupplan.BackupSchedule `hcl:"backup_schedule,block"`
	// RetentionPolicy: optional
	RetentionPolicy *gkebackupbackupplan.RetentionPolicy `hcl:"retention_policy,block"`
	// Timeouts: optional
	Timeouts *gkebackupbackupplan.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that GkeBackupBackupPlan depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type gkeBackupBackupPlanAttributes struct {
	ref terra.Reference
}

func (gbbp gkeBackupBackupPlanAttributes) Cluster() terra.StringValue {
	return terra.ReferenceString(gbbp.ref.Append("cluster"))
}

func (gbbp gkeBackupBackupPlanAttributes) Deactivated() terra.BoolValue {
	return terra.ReferenceBool(gbbp.ref.Append("deactivated"))
}

func (gbbp gkeBackupBackupPlanAttributes) Description() terra.StringValue {
	return terra.ReferenceString(gbbp.ref.Append("description"))
}

func (gbbp gkeBackupBackupPlanAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(gbbp.ref.Append("etag"))
}

func (gbbp gkeBackupBackupPlanAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gbbp.ref.Append("id"))
}

func (gbbp gkeBackupBackupPlanAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gbbp.ref.Append("labels"))
}

func (gbbp gkeBackupBackupPlanAttributes) Location() terra.StringValue {
	return terra.ReferenceString(gbbp.ref.Append("location"))
}

func (gbbp gkeBackupBackupPlanAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gbbp.ref.Append("name"))
}

func (gbbp gkeBackupBackupPlanAttributes) Project() terra.StringValue {
	return terra.ReferenceString(gbbp.ref.Append("project"))
}

func (gbbp gkeBackupBackupPlanAttributes) ProtectedPodCount() terra.NumberValue {
	return terra.ReferenceNumber(gbbp.ref.Append("protected_pod_count"))
}

func (gbbp gkeBackupBackupPlanAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(gbbp.ref.Append("uid"))
}

func (gbbp gkeBackupBackupPlanAttributes) BackupConfig() terra.ListValue[gkebackupbackupplan.BackupConfigAttributes] {
	return terra.ReferenceList[gkebackupbackupplan.BackupConfigAttributes](gbbp.ref.Append("backup_config"))
}

func (gbbp gkeBackupBackupPlanAttributes) BackupSchedule() terra.ListValue[gkebackupbackupplan.BackupScheduleAttributes] {
	return terra.ReferenceList[gkebackupbackupplan.BackupScheduleAttributes](gbbp.ref.Append("backup_schedule"))
}

func (gbbp gkeBackupBackupPlanAttributes) RetentionPolicy() terra.ListValue[gkebackupbackupplan.RetentionPolicyAttributes] {
	return terra.ReferenceList[gkebackupbackupplan.RetentionPolicyAttributes](gbbp.ref.Append("retention_policy"))
}

func (gbbp gkeBackupBackupPlanAttributes) Timeouts() gkebackupbackupplan.TimeoutsAttributes {
	return terra.ReferenceSingle[gkebackupbackupplan.TimeoutsAttributes](gbbp.ref.Append("timeouts"))
}

type gkeBackupBackupPlanState struct {
	Cluster           string                                     `json:"cluster"`
	Deactivated       bool                                       `json:"deactivated"`
	Description       string                                     `json:"description"`
	Etag              string                                     `json:"etag"`
	Id                string                                     `json:"id"`
	Labels            map[string]string                          `json:"labels"`
	Location          string                                     `json:"location"`
	Name              string                                     `json:"name"`
	Project           string                                     `json:"project"`
	ProtectedPodCount float64                                    `json:"protected_pod_count"`
	Uid               string                                     `json:"uid"`
	BackupConfig      []gkebackupbackupplan.BackupConfigState    `json:"backup_config"`
	BackupSchedule    []gkebackupbackupplan.BackupScheduleState  `json:"backup_schedule"`
	RetentionPolicy   []gkebackupbackupplan.RetentionPolicyState `json:"retention_policy"`
	Timeouts          *gkebackupbackupplan.TimeoutsState         `json:"timeouts"`
}
