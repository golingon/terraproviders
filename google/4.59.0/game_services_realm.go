// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	gameservicesrealm "github.com/golingon/terraproviders/google/4.59.0/gameservicesrealm"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGameServicesRealm(name string, args GameServicesRealmArgs) *GameServicesRealm {
	return &GameServicesRealm{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GameServicesRealm)(nil)

type GameServicesRealm struct {
	Name  string
	Args  GameServicesRealmArgs
	state *gameServicesRealmState
}

func (gsr *GameServicesRealm) Type() string {
	return "google_game_services_realm"
}

func (gsr *GameServicesRealm) LocalName() string {
	return gsr.Name
}

func (gsr *GameServicesRealm) Configuration() interface{} {
	return gsr.Args
}

func (gsr *GameServicesRealm) Attributes() gameServicesRealmAttributes {
	return gameServicesRealmAttributes{ref: terra.ReferenceResource(gsr)}
}

func (gsr *GameServicesRealm) ImportState(av io.Reader) error {
	gsr.state = &gameServicesRealmState{}
	if err := json.NewDecoder(av).Decode(gsr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsr.Type(), gsr.LocalName(), err)
	}
	return nil
}

func (gsr *GameServicesRealm) State() (*gameServicesRealmState, bool) {
	return gsr.state, gsr.state != nil
}

func (gsr *GameServicesRealm) StateMust() *gameServicesRealmState {
	if gsr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsr.Type(), gsr.LocalName()))
	}
	return gsr.state
}

func (gsr *GameServicesRealm) DependOn() terra.Reference {
	return terra.ReferenceResource(gsr)
}

type GameServicesRealmArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RealmId: string, required
	RealmId terra.StringValue `hcl:"realm_id,attr" validate:"required"`
	// TimeZone: string, required
	TimeZone terra.StringValue `hcl:"time_zone,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *gameservicesrealm.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that GameServicesRealm depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type gameServicesRealmAttributes struct {
	ref terra.Reference
}

func (gsr gameServicesRealmAttributes) Description() terra.StringValue {
	return terra.ReferenceString(gsr.ref.Append("description"))
}

func (gsr gameServicesRealmAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(gsr.ref.Append("etag"))
}

func (gsr gameServicesRealmAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gsr.ref.Append("id"))
}

func (gsr gameServicesRealmAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gsr.ref.Append("labels"))
}

func (gsr gameServicesRealmAttributes) Location() terra.StringValue {
	return terra.ReferenceString(gsr.ref.Append("location"))
}

func (gsr gameServicesRealmAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gsr.ref.Append("name"))
}

func (gsr gameServicesRealmAttributes) Project() terra.StringValue {
	return terra.ReferenceString(gsr.ref.Append("project"))
}

func (gsr gameServicesRealmAttributes) RealmId() terra.StringValue {
	return terra.ReferenceString(gsr.ref.Append("realm_id"))
}

func (gsr gameServicesRealmAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceString(gsr.ref.Append("time_zone"))
}

func (gsr gameServicesRealmAttributes) Timeouts() gameservicesrealm.TimeoutsAttributes {
	return terra.ReferenceSingle[gameservicesrealm.TimeoutsAttributes](gsr.ref.Append("timeouts"))
}

type gameServicesRealmState struct {
	Description string                           `json:"description"`
	Etag        string                           `json:"etag"`
	Id          string                           `json:"id"`
	Labels      map[string]string                `json:"labels"`
	Location    string                           `json:"location"`
	Name        string                           `json:"name"`
	Project     string                           `json:"project"`
	RealmId     string                           `json:"realm_id"`
	TimeZone    string                           `json:"time_zone"`
	Timeouts    *gameservicesrealm.TimeoutsState `json:"timeouts"`
}
