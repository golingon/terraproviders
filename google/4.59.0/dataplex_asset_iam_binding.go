// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dataplexassetiambinding "github.com/golingon/terraproviders/google/4.59.0/dataplexassetiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataplexAssetIamBinding(name string, args DataplexAssetIamBindingArgs) *DataplexAssetIamBinding {
	return &DataplexAssetIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataplexAssetIamBinding)(nil)

type DataplexAssetIamBinding struct {
	Name  string
	Args  DataplexAssetIamBindingArgs
	state *dataplexAssetIamBindingState
}

func (daib *DataplexAssetIamBinding) Type() string {
	return "google_dataplex_asset_iam_binding"
}

func (daib *DataplexAssetIamBinding) LocalName() string {
	return daib.Name
}

func (daib *DataplexAssetIamBinding) Configuration() interface{} {
	return daib.Args
}

func (daib *DataplexAssetIamBinding) Attributes() dataplexAssetIamBindingAttributes {
	return dataplexAssetIamBindingAttributes{ref: terra.ReferenceResource(daib)}
}

func (daib *DataplexAssetIamBinding) ImportState(av io.Reader) error {
	daib.state = &dataplexAssetIamBindingState{}
	if err := json.NewDecoder(av).Decode(daib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", daib.Type(), daib.LocalName(), err)
	}
	return nil
}

func (daib *DataplexAssetIamBinding) State() (*dataplexAssetIamBindingState, bool) {
	return daib.state, daib.state != nil
}

func (daib *DataplexAssetIamBinding) StateMust() *dataplexAssetIamBindingState {
	if daib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", daib.Type(), daib.LocalName()))
	}
	return daib.state
}

func (daib *DataplexAssetIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(daib)
}

type DataplexAssetIamBindingArgs struct {
	// Asset: string, required
	Asset terra.StringValue `hcl:"asset,attr" validate:"required"`
	// DataplexZone: string, required
	DataplexZone terra.StringValue `hcl:"dataplex_zone,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Lake: string, required
	Lake terra.StringValue `hcl:"lake,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *dataplexassetiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataplexAssetIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataplexAssetIamBindingAttributes struct {
	ref terra.Reference
}

func (daib dataplexAssetIamBindingAttributes) Asset() terra.StringValue {
	return terra.ReferenceString(daib.ref.Append("asset"))
}

func (daib dataplexAssetIamBindingAttributes) DataplexZone() terra.StringValue {
	return terra.ReferenceString(daib.ref.Append("dataplex_zone"))
}

func (daib dataplexAssetIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(daib.ref.Append("etag"))
}

func (daib dataplexAssetIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(daib.ref.Append("id"))
}

func (daib dataplexAssetIamBindingAttributes) Lake() terra.StringValue {
	return terra.ReferenceString(daib.ref.Append("lake"))
}

func (daib dataplexAssetIamBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceString(daib.ref.Append("location"))
}

func (daib dataplexAssetIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](daib.ref.Append("members"))
}

func (daib dataplexAssetIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(daib.ref.Append("project"))
}

func (daib dataplexAssetIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(daib.ref.Append("role"))
}

func (daib dataplexAssetIamBindingAttributes) Condition() terra.ListValue[dataplexassetiambinding.ConditionAttributes] {
	return terra.ReferenceList[dataplexassetiambinding.ConditionAttributes](daib.ref.Append("condition"))
}

type dataplexAssetIamBindingState struct {
	Asset        string                                   `json:"asset"`
	DataplexZone string                                   `json:"dataplex_zone"`
	Etag         string                                   `json:"etag"`
	Id           string                                   `json:"id"`
	Lake         string                                   `json:"lake"`
	Location     string                                   `json:"location"`
	Members      []string                                 `json:"members"`
	Project      string                                   `json:"project"`
	Role         string                                   `json:"role"`
	Condition    []dataplexassetiambinding.ConditionState `json:"condition"`
}
