// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	vertexaitensorboard "github.com/golingon/terraproviders/google/4.59.0/vertexaitensorboard"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVertexAiTensorboard(name string, args VertexAiTensorboardArgs) *VertexAiTensorboard {
	return &VertexAiTensorboard{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VertexAiTensorboard)(nil)

type VertexAiTensorboard struct {
	Name  string
	Args  VertexAiTensorboardArgs
	state *vertexAiTensorboardState
}

func (vat *VertexAiTensorboard) Type() string {
	return "google_vertex_ai_tensorboard"
}

func (vat *VertexAiTensorboard) LocalName() string {
	return vat.Name
}

func (vat *VertexAiTensorboard) Configuration() interface{} {
	return vat.Args
}

func (vat *VertexAiTensorboard) Attributes() vertexAiTensorboardAttributes {
	return vertexAiTensorboardAttributes{ref: terra.ReferenceResource(vat)}
}

func (vat *VertexAiTensorboard) ImportState(av io.Reader) error {
	vat.state = &vertexAiTensorboardState{}
	if err := json.NewDecoder(av).Decode(vat.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vat.Type(), vat.LocalName(), err)
	}
	return nil
}

func (vat *VertexAiTensorboard) State() (*vertexAiTensorboardState, bool) {
	return vat.state, vat.state != nil
}

func (vat *VertexAiTensorboard) StateMust() *vertexAiTensorboardState {
	if vat.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vat.Type(), vat.LocalName()))
	}
	return vat.state
}

func (vat *VertexAiTensorboard) DependOn() terra.Reference {
	return terra.ReferenceResource(vat)
}

type VertexAiTensorboardArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// EncryptionSpec: optional
	EncryptionSpec *vertexaitensorboard.EncryptionSpec `hcl:"encryption_spec,block"`
	// Timeouts: optional
	Timeouts *vertexaitensorboard.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VertexAiTensorboard depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vertexAiTensorboardAttributes struct {
	ref terra.Reference
}

func (vat vertexAiTensorboardAttributes) BlobStoragePathPrefix() terra.StringValue {
	return terra.ReferenceString(vat.ref.Append("blob_storage_path_prefix"))
}

func (vat vertexAiTensorboardAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(vat.ref.Append("create_time"))
}

func (vat vertexAiTensorboardAttributes) Description() terra.StringValue {
	return terra.ReferenceString(vat.ref.Append("description"))
}

func (vat vertexAiTensorboardAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(vat.ref.Append("display_name"))
}

func (vat vertexAiTensorboardAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vat.ref.Append("id"))
}

func (vat vertexAiTensorboardAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vat.ref.Append("labels"))
}

func (vat vertexAiTensorboardAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vat.ref.Append("name"))
}

func (vat vertexAiTensorboardAttributes) Project() terra.StringValue {
	return terra.ReferenceString(vat.ref.Append("project"))
}

func (vat vertexAiTensorboardAttributes) Region() terra.StringValue {
	return terra.ReferenceString(vat.ref.Append("region"))
}

func (vat vertexAiTensorboardAttributes) RunCount() terra.StringValue {
	return terra.ReferenceString(vat.ref.Append("run_count"))
}

func (vat vertexAiTensorboardAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(vat.ref.Append("update_time"))
}

func (vat vertexAiTensorboardAttributes) EncryptionSpec() terra.ListValue[vertexaitensorboard.EncryptionSpecAttributes] {
	return terra.ReferenceList[vertexaitensorboard.EncryptionSpecAttributes](vat.ref.Append("encryption_spec"))
}

func (vat vertexAiTensorboardAttributes) Timeouts() vertexaitensorboard.TimeoutsAttributes {
	return terra.ReferenceSingle[vertexaitensorboard.TimeoutsAttributes](vat.ref.Append("timeouts"))
}

type vertexAiTensorboardState struct {
	BlobStoragePathPrefix string                                    `json:"blob_storage_path_prefix"`
	CreateTime            string                                    `json:"create_time"`
	Description           string                                    `json:"description"`
	DisplayName           string                                    `json:"display_name"`
	Id                    string                                    `json:"id"`
	Labels                map[string]string                         `json:"labels"`
	Name                  string                                    `json:"name"`
	Project               string                                    `json:"project"`
	Region                string                                    `json:"region"`
	RunCount              string                                    `json:"run_count"`
	UpdateTime            string                                    `json:"update_time"`
	EncryptionSpec        []vertexaitensorboard.EncryptionSpecState `json:"encryption_spec"`
	Timeouts              *vertexaitensorboard.TimeoutsState        `json:"timeouts"`
}
