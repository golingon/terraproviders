// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	spannerinstance "github.com/golingon/terraproviders/google/4.59.0/spannerinstance"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpannerInstance(name string, args SpannerInstanceArgs) *SpannerInstance {
	return &SpannerInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpannerInstance)(nil)

type SpannerInstance struct {
	Name  string
	Args  SpannerInstanceArgs
	state *spannerInstanceState
}

func (si *SpannerInstance) Type() string {
	return "google_spanner_instance"
}

func (si *SpannerInstance) LocalName() string {
	return si.Name
}

func (si *SpannerInstance) Configuration() interface{} {
	return si.Args
}

func (si *SpannerInstance) Attributes() spannerInstanceAttributes {
	return spannerInstanceAttributes{ref: terra.ReferenceResource(si)}
}

func (si *SpannerInstance) ImportState(av io.Reader) error {
	si.state = &spannerInstanceState{}
	if err := json.NewDecoder(av).Decode(si.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", si.Type(), si.LocalName(), err)
	}
	return nil
}

func (si *SpannerInstance) State() (*spannerInstanceState, bool) {
	return si.state, si.state != nil
}

func (si *SpannerInstance) StateMust() *spannerInstanceState {
	if si.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", si.Type(), si.LocalName()))
	}
	return si.state
}

func (si *SpannerInstance) DependOn() terra.Reference {
	return terra.ReferenceResource(si)
}

type SpannerInstanceArgs struct {
	// Config: string, required
	Config terra.StringValue `hcl:"config,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NumNodes: number, optional
	NumNodes terra.NumberValue `hcl:"num_nodes,attr"`
	// ProcessingUnits: number, optional
	ProcessingUnits terra.NumberValue `hcl:"processing_units,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *spannerinstance.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SpannerInstance depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type spannerInstanceAttributes struct {
	ref terra.Reference
}

func (si spannerInstanceAttributes) Config() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("config"))
}

func (si spannerInstanceAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("display_name"))
}

func (si spannerInstanceAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceBool(si.ref.Append("force_destroy"))
}

func (si spannerInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("id"))
}

func (si spannerInstanceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](si.ref.Append("labels"))
}

func (si spannerInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("name"))
}

func (si spannerInstanceAttributes) NumNodes() terra.NumberValue {
	return terra.ReferenceNumber(si.ref.Append("num_nodes"))
}

func (si spannerInstanceAttributes) ProcessingUnits() terra.NumberValue {
	return terra.ReferenceNumber(si.ref.Append("processing_units"))
}

func (si spannerInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("project"))
}

func (si spannerInstanceAttributes) State() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("state"))
}

func (si spannerInstanceAttributes) Timeouts() spannerinstance.TimeoutsAttributes {
	return terra.ReferenceSingle[spannerinstance.TimeoutsAttributes](si.ref.Append("timeouts"))
}

type spannerInstanceState struct {
	Config          string                         `json:"config"`
	DisplayName     string                         `json:"display_name"`
	ForceDestroy    bool                           `json:"force_destroy"`
	Id              string                         `json:"id"`
	Labels          map[string]string              `json:"labels"`
	Name            string                         `json:"name"`
	NumNodes        float64                        `json:"num_nodes"`
	ProcessingUnits float64                        `json:"processing_units"`
	Project         string                         `json:"project"`
	State           string                         `json:"state"`
	Timeouts        *spannerinstance.TimeoutsState `json:"timeouts"`
}
