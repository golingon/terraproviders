// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dataprocmetastoreserviceiammember "github.com/golingon/terraproviders/google/4.59.0/dataprocmetastoreserviceiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataprocMetastoreServiceIamMember(name string, args DataprocMetastoreServiceIamMemberArgs) *DataprocMetastoreServiceIamMember {
	return &DataprocMetastoreServiceIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataprocMetastoreServiceIamMember)(nil)

type DataprocMetastoreServiceIamMember struct {
	Name  string
	Args  DataprocMetastoreServiceIamMemberArgs
	state *dataprocMetastoreServiceIamMemberState
}

func (dmsim *DataprocMetastoreServiceIamMember) Type() string {
	return "google_dataproc_metastore_service_iam_member"
}

func (dmsim *DataprocMetastoreServiceIamMember) LocalName() string {
	return dmsim.Name
}

func (dmsim *DataprocMetastoreServiceIamMember) Configuration() interface{} {
	return dmsim.Args
}

func (dmsim *DataprocMetastoreServiceIamMember) Attributes() dataprocMetastoreServiceIamMemberAttributes {
	return dataprocMetastoreServiceIamMemberAttributes{ref: terra.ReferenceResource(dmsim)}
}

func (dmsim *DataprocMetastoreServiceIamMember) ImportState(av io.Reader) error {
	dmsim.state = &dataprocMetastoreServiceIamMemberState{}
	if err := json.NewDecoder(av).Decode(dmsim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dmsim.Type(), dmsim.LocalName(), err)
	}
	return nil
}

func (dmsim *DataprocMetastoreServiceIamMember) State() (*dataprocMetastoreServiceIamMemberState, bool) {
	return dmsim.state, dmsim.state != nil
}

func (dmsim *DataprocMetastoreServiceIamMember) StateMust() *dataprocMetastoreServiceIamMemberState {
	if dmsim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dmsim.Type(), dmsim.LocalName()))
	}
	return dmsim.state
}

func (dmsim *DataprocMetastoreServiceIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(dmsim)
}

type DataprocMetastoreServiceIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// ServiceId: string, required
	ServiceId terra.StringValue `hcl:"service_id,attr" validate:"required"`
	// Condition: optional
	Condition *dataprocmetastoreserviceiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataprocMetastoreServiceIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataprocMetastoreServiceIamMemberAttributes struct {
	ref terra.Reference
}

func (dmsim dataprocMetastoreServiceIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dmsim.ref.Append("etag"))
}

func (dmsim dataprocMetastoreServiceIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dmsim.ref.Append("id"))
}

func (dmsim dataprocMetastoreServiceIamMemberAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dmsim.ref.Append("location"))
}

func (dmsim dataprocMetastoreServiceIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(dmsim.ref.Append("member"))
}

func (dmsim dataprocMetastoreServiceIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dmsim.ref.Append("project"))
}

func (dmsim dataprocMetastoreServiceIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(dmsim.ref.Append("role"))
}

func (dmsim dataprocMetastoreServiceIamMemberAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceString(dmsim.ref.Append("service_id"))
}

func (dmsim dataprocMetastoreServiceIamMemberAttributes) Condition() terra.ListValue[dataprocmetastoreserviceiammember.ConditionAttributes] {
	return terra.ReferenceList[dataprocmetastoreserviceiammember.ConditionAttributes](dmsim.ref.Append("condition"))
}

type dataprocMetastoreServiceIamMemberState struct {
	Etag      string                                             `json:"etag"`
	Id        string                                             `json:"id"`
	Location  string                                             `json:"location"`
	Member    string                                             `json:"member"`
	Project   string                                             `json:"project"`
	Role      string                                             `json:"role"`
	ServiceId string                                             `json:"service_id"`
	Condition []dataprocmetastoreserviceiammember.ConditionState `json:"condition"`
}
