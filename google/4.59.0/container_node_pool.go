// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	containernodepool "github.com/golingon/terraproviders/google/4.59.0/containernodepool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewContainerNodePool(name string, args ContainerNodePoolArgs) *ContainerNodePool {
	return &ContainerNodePool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ContainerNodePool)(nil)

type ContainerNodePool struct {
	Name  string
	Args  ContainerNodePoolArgs
	state *containerNodePoolState
}

func (cnp *ContainerNodePool) Type() string {
	return "google_container_node_pool"
}

func (cnp *ContainerNodePool) LocalName() string {
	return cnp.Name
}

func (cnp *ContainerNodePool) Configuration() interface{} {
	return cnp.Args
}

func (cnp *ContainerNodePool) Attributes() containerNodePoolAttributes {
	return containerNodePoolAttributes{ref: terra.ReferenceResource(cnp)}
}

func (cnp *ContainerNodePool) ImportState(av io.Reader) error {
	cnp.state = &containerNodePoolState{}
	if err := json.NewDecoder(av).Decode(cnp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cnp.Type(), cnp.LocalName(), err)
	}
	return nil
}

func (cnp *ContainerNodePool) State() (*containerNodePoolState, bool) {
	return cnp.state, cnp.state != nil
}

func (cnp *ContainerNodePool) StateMust() *containerNodePoolState {
	if cnp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cnp.Type(), cnp.LocalName()))
	}
	return cnp.state
}

func (cnp *ContainerNodePool) DependOn() terra.Reference {
	return terra.ReferenceResource(cnp)
}

type ContainerNodePoolArgs struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InitialNodeCount: number, optional
	InitialNodeCount terra.NumberValue `hcl:"initial_node_count,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// MaxPodsPerNode: number, optional
	MaxPodsPerNode terra.NumberValue `hcl:"max_pods_per_node,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// NodeCount: number, optional
	NodeCount terra.NumberValue `hcl:"node_count,attr"`
	// NodeLocations: set of string, optional
	NodeLocations terra.SetValue[terra.StringValue] `hcl:"node_locations,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// Autoscaling: optional
	Autoscaling *containernodepool.Autoscaling `hcl:"autoscaling,block"`
	// Management: optional
	Management *containernodepool.Management `hcl:"management,block"`
	// NetworkConfig: optional
	NetworkConfig *containernodepool.NetworkConfig `hcl:"network_config,block"`
	// NodeConfig: optional
	NodeConfig *containernodepool.NodeConfig `hcl:"node_config,block"`
	// PlacementPolicy: optional
	PlacementPolicy *containernodepool.PlacementPolicy `hcl:"placement_policy,block"`
	// Timeouts: optional
	Timeouts *containernodepool.Timeouts `hcl:"timeouts,block"`
	// UpgradeSettings: optional
	UpgradeSettings *containernodepool.UpgradeSettings `hcl:"upgrade_settings,block"`
	// DependsOn contains resources that ContainerNodePool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type containerNodePoolAttributes struct {
	ref terra.Reference
}

func (cnp containerNodePoolAttributes) Cluster() terra.StringValue {
	return terra.ReferenceString(cnp.ref.Append("cluster"))
}

func (cnp containerNodePoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cnp.ref.Append("id"))
}

func (cnp containerNodePoolAttributes) InitialNodeCount() terra.NumberValue {
	return terra.ReferenceNumber(cnp.ref.Append("initial_node_count"))
}

func (cnp containerNodePoolAttributes) InstanceGroupUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cnp.ref.Append("instance_group_urls"))
}

func (cnp containerNodePoolAttributes) Location() terra.StringValue {
	return terra.ReferenceString(cnp.ref.Append("location"))
}

func (cnp containerNodePoolAttributes) ManagedInstanceGroupUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cnp.ref.Append("managed_instance_group_urls"))
}

func (cnp containerNodePoolAttributes) MaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceNumber(cnp.ref.Append("max_pods_per_node"))
}

func (cnp containerNodePoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cnp.ref.Append("name"))
}

func (cnp containerNodePoolAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(cnp.ref.Append("name_prefix"))
}

func (cnp containerNodePoolAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceNumber(cnp.ref.Append("node_count"))
}

func (cnp containerNodePoolAttributes) NodeLocations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cnp.ref.Append("node_locations"))
}

func (cnp containerNodePoolAttributes) Operation() terra.StringValue {
	return terra.ReferenceString(cnp.ref.Append("operation"))
}

func (cnp containerNodePoolAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cnp.ref.Append("project"))
}

func (cnp containerNodePoolAttributes) Version() terra.StringValue {
	return terra.ReferenceString(cnp.ref.Append("version"))
}

func (cnp containerNodePoolAttributes) Autoscaling() terra.ListValue[containernodepool.AutoscalingAttributes] {
	return terra.ReferenceList[containernodepool.AutoscalingAttributes](cnp.ref.Append("autoscaling"))
}

func (cnp containerNodePoolAttributes) Management() terra.ListValue[containernodepool.ManagementAttributes] {
	return terra.ReferenceList[containernodepool.ManagementAttributes](cnp.ref.Append("management"))
}

func (cnp containerNodePoolAttributes) NetworkConfig() terra.ListValue[containernodepool.NetworkConfigAttributes] {
	return terra.ReferenceList[containernodepool.NetworkConfigAttributes](cnp.ref.Append("network_config"))
}

func (cnp containerNodePoolAttributes) NodeConfig() terra.ListValue[containernodepool.NodeConfigAttributes] {
	return terra.ReferenceList[containernodepool.NodeConfigAttributes](cnp.ref.Append("node_config"))
}

func (cnp containerNodePoolAttributes) PlacementPolicy() terra.ListValue[containernodepool.PlacementPolicyAttributes] {
	return terra.ReferenceList[containernodepool.PlacementPolicyAttributes](cnp.ref.Append("placement_policy"))
}

func (cnp containerNodePoolAttributes) Timeouts() containernodepool.TimeoutsAttributes {
	return terra.ReferenceSingle[containernodepool.TimeoutsAttributes](cnp.ref.Append("timeouts"))
}

func (cnp containerNodePoolAttributes) UpgradeSettings() terra.ListValue[containernodepool.UpgradeSettingsAttributes] {
	return terra.ReferenceList[containernodepool.UpgradeSettingsAttributes](cnp.ref.Append("upgrade_settings"))
}

type containerNodePoolState struct {
	Cluster                  string                                   `json:"cluster"`
	Id                       string                                   `json:"id"`
	InitialNodeCount         float64                                  `json:"initial_node_count"`
	InstanceGroupUrls        []string                                 `json:"instance_group_urls"`
	Location                 string                                   `json:"location"`
	ManagedInstanceGroupUrls []string                                 `json:"managed_instance_group_urls"`
	MaxPodsPerNode           float64                                  `json:"max_pods_per_node"`
	Name                     string                                   `json:"name"`
	NamePrefix               string                                   `json:"name_prefix"`
	NodeCount                float64                                  `json:"node_count"`
	NodeLocations            []string                                 `json:"node_locations"`
	Operation                string                                   `json:"operation"`
	Project                  string                                   `json:"project"`
	Version                  string                                   `json:"version"`
	Autoscaling              []containernodepool.AutoscalingState     `json:"autoscaling"`
	Management               []containernodepool.ManagementState      `json:"management"`
	NetworkConfig            []containernodepool.NetworkConfigState   `json:"network_config"`
	NodeConfig               []containernodepool.NodeConfigState      `json:"node_config"`
	PlacementPolicy          []containernodepool.PlacementPolicyState `json:"placement_policy"`
	Timeouts                 *containernodepool.TimeoutsState         `json:"timeouts"`
	UpgradeSettings          []containernodepool.UpgradeSettingsState `json:"upgrade_settings"`
}
