// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	datacomputeinstancegroupmanager "github.com/golingon/terraproviders/google/4.59.0/datacomputeinstancegroupmanager"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataComputeInstanceGroupManager(name string, args DataComputeInstanceGroupManagerArgs) *DataComputeInstanceGroupManager {
	return &DataComputeInstanceGroupManager{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataComputeInstanceGroupManager)(nil)

type DataComputeInstanceGroupManager struct {
	Name string
	Args DataComputeInstanceGroupManagerArgs
}

func (cigm *DataComputeInstanceGroupManager) DataSource() string {
	return "google_compute_instance_group_manager"
}

func (cigm *DataComputeInstanceGroupManager) LocalName() string {
	return cigm.Name
}

func (cigm *DataComputeInstanceGroupManager) Configuration() interface{} {
	return cigm.Args
}

func (cigm *DataComputeInstanceGroupManager) Attributes() dataComputeInstanceGroupManagerAttributes {
	return dataComputeInstanceGroupManagerAttributes{ref: terra.ReferenceDataResource(cigm)}
}

type DataComputeInstanceGroupManagerArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SelfLink: string, optional
	SelfLink terra.StringValue `hcl:"self_link,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// AutoHealingPolicies: min=0
	AutoHealingPolicies []datacomputeinstancegroupmanager.AutoHealingPolicies `hcl:"auto_healing_policies,block" validate:"min=0"`
	// NamedPort: min=0
	NamedPort []datacomputeinstancegroupmanager.NamedPort `hcl:"named_port,block" validate:"min=0"`
	// StatefulDisk: min=0
	StatefulDisk []datacomputeinstancegroupmanager.StatefulDisk `hcl:"stateful_disk,block" validate:"min=0"`
	// Status: min=0
	Status []datacomputeinstancegroupmanager.Status `hcl:"status,block" validate:"min=0"`
	// UpdatePolicy: min=0
	UpdatePolicy []datacomputeinstancegroupmanager.UpdatePolicy `hcl:"update_policy,block" validate:"min=0"`
	// Version: min=0
	Version []datacomputeinstancegroupmanager.Version `hcl:"version,block" validate:"min=0"`
}
type dataComputeInstanceGroupManagerAttributes struct {
	ref terra.Reference
}

func (cigm dataComputeInstanceGroupManagerAttributes) BaseInstanceName() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("base_instance_name"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("description"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("fingerprint"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("id"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) InstanceGroup() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("instance_group"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) ListManagedInstancesResults() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("list_managed_instances_results"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("name"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) Operation() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("operation"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("project"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("self_link"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) TargetPools() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cigm.ref.Append("target_pools"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) TargetSize() terra.NumberValue {
	return terra.ReferenceNumber(cigm.ref.Append("target_size"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) WaitForInstances() terra.BoolValue {
	return terra.ReferenceBool(cigm.ref.Append("wait_for_instances"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) WaitForInstancesStatus() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("wait_for_instances_status"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(cigm.ref.Append("zone"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) AutoHealingPolicies() terra.ListValue[datacomputeinstancegroupmanager.AutoHealingPoliciesAttributes] {
	return terra.ReferenceList[datacomputeinstancegroupmanager.AutoHealingPoliciesAttributes](cigm.ref.Append("auto_healing_policies"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) NamedPort() terra.SetValue[datacomputeinstancegroupmanager.NamedPortAttributes] {
	return terra.ReferenceSet[datacomputeinstancegroupmanager.NamedPortAttributes](cigm.ref.Append("named_port"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) StatefulDisk() terra.SetValue[datacomputeinstancegroupmanager.StatefulDiskAttributes] {
	return terra.ReferenceSet[datacomputeinstancegroupmanager.StatefulDiskAttributes](cigm.ref.Append("stateful_disk"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) Status() terra.ListValue[datacomputeinstancegroupmanager.StatusAttributes] {
	return terra.ReferenceList[datacomputeinstancegroupmanager.StatusAttributes](cigm.ref.Append("status"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) UpdatePolicy() terra.ListValue[datacomputeinstancegroupmanager.UpdatePolicyAttributes] {
	return terra.ReferenceList[datacomputeinstancegroupmanager.UpdatePolicyAttributes](cigm.ref.Append("update_policy"))
}

func (cigm dataComputeInstanceGroupManagerAttributes) Version() terra.ListValue[datacomputeinstancegroupmanager.VersionAttributes] {
	return terra.ReferenceList[datacomputeinstancegroupmanager.VersionAttributes](cigm.ref.Append("version"))
}
