// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package sqluser

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type SqlServerUserDetails struct{}

type PasswordPolicy struct {
	// AllowedFailedAttempts: number, optional
	AllowedFailedAttempts terra.NumberValue `hcl:"allowed_failed_attempts,attr"`
	// EnableFailedAttemptsCheck: bool, optional
	EnableFailedAttemptsCheck terra.BoolValue `hcl:"enable_failed_attempts_check,attr"`
	// EnablePasswordVerification: bool, optional
	EnablePasswordVerification terra.BoolValue `hcl:"enable_password_verification,attr"`
	// PasswordExpirationDuration: string, optional
	PasswordExpirationDuration terra.StringValue `hcl:"password_expiration_duration,attr"`
	// Status: min=0
	Status []Status `hcl:"status,block" validate:"min=0"`
}

type Status struct{}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SqlServerUserDetailsAttributes struct {
	ref terra.Reference
}

func (ssud SqlServerUserDetailsAttributes) InternalRef() terra.Reference {
	return ssud.ref
}

func (ssud SqlServerUserDetailsAttributes) InternalWithRef(ref terra.Reference) SqlServerUserDetailsAttributes {
	return SqlServerUserDetailsAttributes{ref: ref}
}

func (ssud SqlServerUserDetailsAttributes) InternalTokens() hclwrite.Tokens {
	return ssud.ref.InternalTokens()
}

func (ssud SqlServerUserDetailsAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(ssud.ref.Append("disabled"))
}

func (ssud SqlServerUserDetailsAttributes) ServerRoles() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ssud.ref.Append("server_roles"))
}

type PasswordPolicyAttributes struct {
	ref terra.Reference
}

func (pp PasswordPolicyAttributes) InternalRef() terra.Reference {
	return pp.ref
}

func (pp PasswordPolicyAttributes) InternalWithRef(ref terra.Reference) PasswordPolicyAttributes {
	return PasswordPolicyAttributes{ref: ref}
}

func (pp PasswordPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return pp.ref.InternalTokens()
}

func (pp PasswordPolicyAttributes) AllowedFailedAttempts() terra.NumberValue {
	return terra.ReferenceNumber(pp.ref.Append("allowed_failed_attempts"))
}

func (pp PasswordPolicyAttributes) EnableFailedAttemptsCheck() terra.BoolValue {
	return terra.ReferenceBool(pp.ref.Append("enable_failed_attempts_check"))
}

func (pp PasswordPolicyAttributes) EnablePasswordVerification() terra.BoolValue {
	return terra.ReferenceBool(pp.ref.Append("enable_password_verification"))
}

func (pp PasswordPolicyAttributes) PasswordExpirationDuration() terra.StringValue {
	return terra.ReferenceString(pp.ref.Append("password_expiration_duration"))
}

func (pp PasswordPolicyAttributes) Status() terra.ListValue[StatusAttributes] {
	return terra.ReferenceList[StatusAttributes](pp.ref.Append("status"))
}

type StatusAttributes struct {
	ref terra.Reference
}

func (s StatusAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s StatusAttributes) InternalWithRef(ref terra.Reference) StatusAttributes {
	return StatusAttributes{ref: ref}
}

func (s StatusAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s StatusAttributes) Locked() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("locked"))
}

func (s StatusAttributes) PasswordExpirationTime() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("password_expiration_time"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type SqlServerUserDetailsState struct {
	Disabled    bool     `json:"disabled"`
	ServerRoles []string `json:"server_roles"`
}

type PasswordPolicyState struct {
	AllowedFailedAttempts      float64       `json:"allowed_failed_attempts"`
	EnableFailedAttemptsCheck  bool          `json:"enable_failed_attempts_check"`
	EnablePasswordVerification bool          `json:"enable_password_verification"`
	PasswordExpirationDuration string        `json:"password_expiration_duration"`
	Status                     []StatusState `json:"status"`
}

type StatusState struct {
	Locked                 bool   `json:"locked"`
	PasswordExpirationTime string `json:"password_expiration_time"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
