// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	privatecacertificate "github.com/golingon/terraproviders/google/4.59.0/privatecacertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivatecaCertificate(name string, args PrivatecaCertificateArgs) *PrivatecaCertificate {
	return &PrivatecaCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivatecaCertificate)(nil)

type PrivatecaCertificate struct {
	Name  string
	Args  PrivatecaCertificateArgs
	state *privatecaCertificateState
}

func (pc *PrivatecaCertificate) Type() string {
	return "google_privateca_certificate"
}

func (pc *PrivatecaCertificate) LocalName() string {
	return pc.Name
}

func (pc *PrivatecaCertificate) Configuration() interface{} {
	return pc.Args
}

func (pc *PrivatecaCertificate) Attributes() privatecaCertificateAttributes {
	return privatecaCertificateAttributes{ref: terra.ReferenceResource(pc)}
}

func (pc *PrivatecaCertificate) ImportState(av io.Reader) error {
	pc.state = &privatecaCertificateState{}
	if err := json.NewDecoder(av).Decode(pc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pc.Type(), pc.LocalName(), err)
	}
	return nil
}

func (pc *PrivatecaCertificate) State() (*privatecaCertificateState, bool) {
	return pc.state, pc.state != nil
}

func (pc *PrivatecaCertificate) StateMust() *privatecaCertificateState {
	if pc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pc.Type(), pc.LocalName()))
	}
	return pc.state
}

func (pc *PrivatecaCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(pc)
}

type PrivatecaCertificateArgs struct {
	// CertificateAuthority: string, optional
	CertificateAuthority terra.StringValue `hcl:"certificate_authority,attr"`
	// CertificateTemplate: string, optional
	CertificateTemplate terra.StringValue `hcl:"certificate_template,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Lifetime: string, optional
	Lifetime terra.StringValue `hcl:"lifetime,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PemCsr: string, optional
	PemCsr terra.StringValue `hcl:"pem_csr,attr"`
	// Pool: string, required
	Pool terra.StringValue `hcl:"pool,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// CertificateDescription: min=0
	CertificateDescription []privatecacertificate.CertificateDescription `hcl:"certificate_description,block" validate:"min=0"`
	// RevocationDetails: min=0
	RevocationDetails []privatecacertificate.RevocationDetails `hcl:"revocation_details,block" validate:"min=0"`
	// Config: optional
	Config *privatecacertificate.Config `hcl:"config,block"`
	// Timeouts: optional
	Timeouts *privatecacertificate.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PrivatecaCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privatecaCertificateAttributes struct {
	ref terra.Reference
}

func (pc privatecaCertificateAttributes) CertificateAuthority() terra.StringValue {
	return terra.ReferenceString(pc.ref.Append("certificate_authority"))
}

func (pc privatecaCertificateAttributes) CertificateTemplate() terra.StringValue {
	return terra.ReferenceString(pc.ref.Append("certificate_template"))
}

func (pc privatecaCertificateAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(pc.ref.Append("create_time"))
}

func (pc privatecaCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pc.ref.Append("id"))
}

func (pc privatecaCertificateAttributes) IssuerCertificateAuthority() terra.StringValue {
	return terra.ReferenceString(pc.ref.Append("issuer_certificate_authority"))
}

func (pc privatecaCertificateAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pc.ref.Append("labels"))
}

func (pc privatecaCertificateAttributes) Lifetime() terra.StringValue {
	return terra.ReferenceString(pc.ref.Append("lifetime"))
}

func (pc privatecaCertificateAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pc.ref.Append("location"))
}

func (pc privatecaCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pc.ref.Append("name"))
}

func (pc privatecaCertificateAttributes) PemCertificate() terra.StringValue {
	return terra.ReferenceString(pc.ref.Append("pem_certificate"))
}

func (pc privatecaCertificateAttributes) PemCertificateChain() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](pc.ref.Append("pem_certificate_chain"))
}

func (pc privatecaCertificateAttributes) PemCertificates() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](pc.ref.Append("pem_certificates"))
}

func (pc privatecaCertificateAttributes) PemCsr() terra.StringValue {
	return terra.ReferenceString(pc.ref.Append("pem_csr"))
}

func (pc privatecaCertificateAttributes) Pool() terra.StringValue {
	return terra.ReferenceString(pc.ref.Append("pool"))
}

func (pc privatecaCertificateAttributes) Project() terra.StringValue {
	return terra.ReferenceString(pc.ref.Append("project"))
}

func (pc privatecaCertificateAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(pc.ref.Append("update_time"))
}

func (pc privatecaCertificateAttributes) CertificateDescription() terra.ListValue[privatecacertificate.CertificateDescriptionAttributes] {
	return terra.ReferenceList[privatecacertificate.CertificateDescriptionAttributes](pc.ref.Append("certificate_description"))
}

func (pc privatecaCertificateAttributes) RevocationDetails() terra.ListValue[privatecacertificate.RevocationDetailsAttributes] {
	return terra.ReferenceList[privatecacertificate.RevocationDetailsAttributes](pc.ref.Append("revocation_details"))
}

func (pc privatecaCertificateAttributes) Config() terra.ListValue[privatecacertificate.ConfigAttributes] {
	return terra.ReferenceList[privatecacertificate.ConfigAttributes](pc.ref.Append("config"))
}

func (pc privatecaCertificateAttributes) Timeouts() privatecacertificate.TimeoutsAttributes {
	return terra.ReferenceSingle[privatecacertificate.TimeoutsAttributes](pc.ref.Append("timeouts"))
}

type privatecaCertificateState struct {
	CertificateAuthority       string                                             `json:"certificate_authority"`
	CertificateTemplate        string                                             `json:"certificate_template"`
	CreateTime                 string                                             `json:"create_time"`
	Id                         string                                             `json:"id"`
	IssuerCertificateAuthority string                                             `json:"issuer_certificate_authority"`
	Labels                     map[string]string                                  `json:"labels"`
	Lifetime                   string                                             `json:"lifetime"`
	Location                   string                                             `json:"location"`
	Name                       string                                             `json:"name"`
	PemCertificate             string                                             `json:"pem_certificate"`
	PemCertificateChain        []string                                           `json:"pem_certificate_chain"`
	PemCertificates            []string                                           `json:"pem_certificates"`
	PemCsr                     string                                             `json:"pem_csr"`
	Pool                       string                                             `json:"pool"`
	Project                    string                                             `json:"project"`
	UpdateTime                 string                                             `json:"update_time"`
	CertificateDescription     []privatecacertificate.CertificateDescriptionState `json:"certificate_description"`
	RevocationDetails          []privatecacertificate.RevocationDetailsState      `json:"revocation_details"`
	Config                     []privatecacertificate.ConfigState                 `json:"config"`
	Timeouts                   *privatecacertificate.TimeoutsState                `json:"timeouts"`
}
