// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dataplexassetiammember "github.com/golingon/terraproviders/google/4.59.0/dataplexassetiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataplexAssetIamMember(name string, args DataplexAssetIamMemberArgs) *DataplexAssetIamMember {
	return &DataplexAssetIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataplexAssetIamMember)(nil)

type DataplexAssetIamMember struct {
	Name  string
	Args  DataplexAssetIamMemberArgs
	state *dataplexAssetIamMemberState
}

func (daim *DataplexAssetIamMember) Type() string {
	return "google_dataplex_asset_iam_member"
}

func (daim *DataplexAssetIamMember) LocalName() string {
	return daim.Name
}

func (daim *DataplexAssetIamMember) Configuration() interface{} {
	return daim.Args
}

func (daim *DataplexAssetIamMember) Attributes() dataplexAssetIamMemberAttributes {
	return dataplexAssetIamMemberAttributes{ref: terra.ReferenceResource(daim)}
}

func (daim *DataplexAssetIamMember) ImportState(av io.Reader) error {
	daim.state = &dataplexAssetIamMemberState{}
	if err := json.NewDecoder(av).Decode(daim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", daim.Type(), daim.LocalName(), err)
	}
	return nil
}

func (daim *DataplexAssetIamMember) State() (*dataplexAssetIamMemberState, bool) {
	return daim.state, daim.state != nil
}

func (daim *DataplexAssetIamMember) StateMust() *dataplexAssetIamMemberState {
	if daim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", daim.Type(), daim.LocalName()))
	}
	return daim.state
}

func (daim *DataplexAssetIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(daim)
}

type DataplexAssetIamMemberArgs struct {
	// Asset: string, required
	Asset terra.StringValue `hcl:"asset,attr" validate:"required"`
	// DataplexZone: string, required
	DataplexZone terra.StringValue `hcl:"dataplex_zone,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Lake: string, required
	Lake terra.StringValue `hcl:"lake,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *dataplexassetiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataplexAssetIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataplexAssetIamMemberAttributes struct {
	ref terra.Reference
}

func (daim dataplexAssetIamMemberAttributes) Asset() terra.StringValue {
	return terra.ReferenceString(daim.ref.Append("asset"))
}

func (daim dataplexAssetIamMemberAttributes) DataplexZone() terra.StringValue {
	return terra.ReferenceString(daim.ref.Append("dataplex_zone"))
}

func (daim dataplexAssetIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(daim.ref.Append("etag"))
}

func (daim dataplexAssetIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(daim.ref.Append("id"))
}

func (daim dataplexAssetIamMemberAttributes) Lake() terra.StringValue {
	return terra.ReferenceString(daim.ref.Append("lake"))
}

func (daim dataplexAssetIamMemberAttributes) Location() terra.StringValue {
	return terra.ReferenceString(daim.ref.Append("location"))
}

func (daim dataplexAssetIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(daim.ref.Append("member"))
}

func (daim dataplexAssetIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(daim.ref.Append("project"))
}

func (daim dataplexAssetIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(daim.ref.Append("role"))
}

func (daim dataplexAssetIamMemberAttributes) Condition() terra.ListValue[dataplexassetiammember.ConditionAttributes] {
	return terra.ReferenceList[dataplexassetiammember.ConditionAttributes](daim.ref.Append("condition"))
}

type dataplexAssetIamMemberState struct {
	Asset        string                                  `json:"asset"`
	DataplexZone string                                  `json:"dataplex_zone"`
	Etag         string                                  `json:"etag"`
	Id           string                                  `json:"id"`
	Lake         string                                  `json:"lake"`
	Location     string                                  `json:"location"`
	Member       string                                  `json:"member"`
	Project      string                                  `json:"project"`
	Role         string                                  `json:"role"`
	Condition    []dataplexassetiammember.ConditionState `json:"condition"`
}
