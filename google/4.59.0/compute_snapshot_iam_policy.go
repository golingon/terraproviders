// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeSnapshotIamPolicy(name string, args ComputeSnapshotIamPolicyArgs) *ComputeSnapshotIamPolicy {
	return &ComputeSnapshotIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeSnapshotIamPolicy)(nil)

type ComputeSnapshotIamPolicy struct {
	Name  string
	Args  ComputeSnapshotIamPolicyArgs
	state *computeSnapshotIamPolicyState
}

func (csip *ComputeSnapshotIamPolicy) Type() string {
	return "google_compute_snapshot_iam_policy"
}

func (csip *ComputeSnapshotIamPolicy) LocalName() string {
	return csip.Name
}

func (csip *ComputeSnapshotIamPolicy) Configuration() interface{} {
	return csip.Args
}

func (csip *ComputeSnapshotIamPolicy) Attributes() computeSnapshotIamPolicyAttributes {
	return computeSnapshotIamPolicyAttributes{ref: terra.ReferenceResource(csip)}
}

func (csip *ComputeSnapshotIamPolicy) ImportState(av io.Reader) error {
	csip.state = &computeSnapshotIamPolicyState{}
	if err := json.NewDecoder(av).Decode(csip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csip.Type(), csip.LocalName(), err)
	}
	return nil
}

func (csip *ComputeSnapshotIamPolicy) State() (*computeSnapshotIamPolicyState, bool) {
	return csip.state, csip.state != nil
}

func (csip *ComputeSnapshotIamPolicy) StateMust() *computeSnapshotIamPolicyState {
	if csip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csip.Type(), csip.LocalName()))
	}
	return csip.state
}

func (csip *ComputeSnapshotIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(csip)
}

type ComputeSnapshotIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that ComputeSnapshotIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeSnapshotIamPolicyAttributes struct {
	ref terra.Reference
}

func (csip computeSnapshotIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(csip.ref.Append("etag"))
}

func (csip computeSnapshotIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(csip.ref.Append("id"))
}

func (csip computeSnapshotIamPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(csip.ref.Append("name"))
}

func (csip computeSnapshotIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(csip.ref.Append("policy_data"))
}

func (csip computeSnapshotIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(csip.ref.Append("project"))
}

type computeSnapshotIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Name       string `json:"name"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
}
