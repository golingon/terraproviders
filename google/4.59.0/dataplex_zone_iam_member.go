// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dataplexzoneiammember "github.com/golingon/terraproviders/google/4.59.0/dataplexzoneiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataplexZoneIamMember(name string, args DataplexZoneIamMemberArgs) *DataplexZoneIamMember {
	return &DataplexZoneIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataplexZoneIamMember)(nil)

type DataplexZoneIamMember struct {
	Name  string
	Args  DataplexZoneIamMemberArgs
	state *dataplexZoneIamMemberState
}

func (dzim *DataplexZoneIamMember) Type() string {
	return "google_dataplex_zone_iam_member"
}

func (dzim *DataplexZoneIamMember) LocalName() string {
	return dzim.Name
}

func (dzim *DataplexZoneIamMember) Configuration() interface{} {
	return dzim.Args
}

func (dzim *DataplexZoneIamMember) Attributes() dataplexZoneIamMemberAttributes {
	return dataplexZoneIamMemberAttributes{ref: terra.ReferenceResource(dzim)}
}

func (dzim *DataplexZoneIamMember) ImportState(av io.Reader) error {
	dzim.state = &dataplexZoneIamMemberState{}
	if err := json.NewDecoder(av).Decode(dzim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dzim.Type(), dzim.LocalName(), err)
	}
	return nil
}

func (dzim *DataplexZoneIamMember) State() (*dataplexZoneIamMemberState, bool) {
	return dzim.state, dzim.state != nil
}

func (dzim *DataplexZoneIamMember) StateMust() *dataplexZoneIamMemberState {
	if dzim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dzim.Type(), dzim.LocalName()))
	}
	return dzim.state
}

func (dzim *DataplexZoneIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(dzim)
}

type DataplexZoneIamMemberArgs struct {
	// DataplexZone: string, required
	DataplexZone terra.StringValue `hcl:"dataplex_zone,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Lake: string, required
	Lake terra.StringValue `hcl:"lake,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *dataplexzoneiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataplexZoneIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataplexZoneIamMemberAttributes struct {
	ref terra.Reference
}

func (dzim dataplexZoneIamMemberAttributes) DataplexZone() terra.StringValue {
	return terra.ReferenceString(dzim.ref.Append("dataplex_zone"))
}

func (dzim dataplexZoneIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dzim.ref.Append("etag"))
}

func (dzim dataplexZoneIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dzim.ref.Append("id"))
}

func (dzim dataplexZoneIamMemberAttributes) Lake() terra.StringValue {
	return terra.ReferenceString(dzim.ref.Append("lake"))
}

func (dzim dataplexZoneIamMemberAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dzim.ref.Append("location"))
}

func (dzim dataplexZoneIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(dzim.ref.Append("member"))
}

func (dzim dataplexZoneIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dzim.ref.Append("project"))
}

func (dzim dataplexZoneIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(dzim.ref.Append("role"))
}

func (dzim dataplexZoneIamMemberAttributes) Condition() terra.ListValue[dataplexzoneiammember.ConditionAttributes] {
	return terra.ReferenceList[dataplexzoneiammember.ConditionAttributes](dzim.ref.Append("condition"))
}

type dataplexZoneIamMemberState struct {
	DataplexZone string                                 `json:"dataplex_zone"`
	Etag         string                                 `json:"etag"`
	Id           string                                 `json:"id"`
	Lake         string                                 `json:"lake"`
	Location     string                                 `json:"location"`
	Member       string                                 `json:"member"`
	Project      string                                 `json:"project"`
	Role         string                                 `json:"role"`
	Condition    []dataplexzoneiammember.ConditionState `json:"condition"`
}
