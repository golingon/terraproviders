// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	bigquerytableiambinding "github.com/golingon/terraproviders/google/4.59.0/bigquerytableiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigqueryTableIamBinding(name string, args BigqueryTableIamBindingArgs) *BigqueryTableIamBinding {
	return &BigqueryTableIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryTableIamBinding)(nil)

type BigqueryTableIamBinding struct {
	Name  string
	Args  BigqueryTableIamBindingArgs
	state *bigqueryTableIamBindingState
}

func (btib *BigqueryTableIamBinding) Type() string {
	return "google_bigquery_table_iam_binding"
}

func (btib *BigqueryTableIamBinding) LocalName() string {
	return btib.Name
}

func (btib *BigqueryTableIamBinding) Configuration() interface{} {
	return btib.Args
}

func (btib *BigqueryTableIamBinding) Attributes() bigqueryTableIamBindingAttributes {
	return bigqueryTableIamBindingAttributes{ref: terra.ReferenceResource(btib)}
}

func (btib *BigqueryTableIamBinding) ImportState(av io.Reader) error {
	btib.state = &bigqueryTableIamBindingState{}
	if err := json.NewDecoder(av).Decode(btib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", btib.Type(), btib.LocalName(), err)
	}
	return nil
}

func (btib *BigqueryTableIamBinding) State() (*bigqueryTableIamBindingState, bool) {
	return btib.state, btib.state != nil
}

func (btib *BigqueryTableIamBinding) StateMust() *bigqueryTableIamBindingState {
	if btib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", btib.Type(), btib.LocalName()))
	}
	return btib.state
}

func (btib *BigqueryTableIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(btib)
}

type BigqueryTableIamBindingArgs struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
	// Condition: optional
	Condition *bigquerytableiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that BigqueryTableIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigqueryTableIamBindingAttributes struct {
	ref terra.Reference
}

func (btib bigqueryTableIamBindingAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceString(btib.ref.Append("dataset_id"))
}

func (btib bigqueryTableIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(btib.ref.Append("etag"))
}

func (btib bigqueryTableIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(btib.ref.Append("id"))
}

func (btib bigqueryTableIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](btib.ref.Append("members"))
}

func (btib bigqueryTableIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(btib.ref.Append("project"))
}

func (btib bigqueryTableIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(btib.ref.Append("role"))
}

func (btib bigqueryTableIamBindingAttributes) TableId() terra.StringValue {
	return terra.ReferenceString(btib.ref.Append("table_id"))
}

func (btib bigqueryTableIamBindingAttributes) Condition() terra.ListValue[bigquerytableiambinding.ConditionAttributes] {
	return terra.ReferenceList[bigquerytableiambinding.ConditionAttributes](btib.ref.Append("condition"))
}

type bigqueryTableIamBindingState struct {
	DatasetId string                                   `json:"dataset_id"`
	Etag      string                                   `json:"etag"`
	Id        string                                   `json:"id"`
	Members   []string                                 `json:"members"`
	Project   string                                   `json:"project"`
	Role      string                                   `json:"role"`
	TableId   string                                   `json:"table_id"`
	Condition []bigquerytableiambinding.ConditionState `json:"condition"`
}
