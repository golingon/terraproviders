// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewTagsTagValueIamPolicy(name string, args TagsTagValueIamPolicyArgs) *TagsTagValueIamPolicy {
	return &TagsTagValueIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TagsTagValueIamPolicy)(nil)

type TagsTagValueIamPolicy struct {
	Name  string
	Args  TagsTagValueIamPolicyArgs
	state *tagsTagValueIamPolicyState
}

func (ttvip *TagsTagValueIamPolicy) Type() string {
	return "google_tags_tag_value_iam_policy"
}

func (ttvip *TagsTagValueIamPolicy) LocalName() string {
	return ttvip.Name
}

func (ttvip *TagsTagValueIamPolicy) Configuration() interface{} {
	return ttvip.Args
}

func (ttvip *TagsTagValueIamPolicy) Attributes() tagsTagValueIamPolicyAttributes {
	return tagsTagValueIamPolicyAttributes{ref: terra.ReferenceResource(ttvip)}
}

func (ttvip *TagsTagValueIamPolicy) ImportState(av io.Reader) error {
	ttvip.state = &tagsTagValueIamPolicyState{}
	if err := json.NewDecoder(av).Decode(ttvip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ttvip.Type(), ttvip.LocalName(), err)
	}
	return nil
}

func (ttvip *TagsTagValueIamPolicy) State() (*tagsTagValueIamPolicyState, bool) {
	return ttvip.state, ttvip.state != nil
}

func (ttvip *TagsTagValueIamPolicy) StateMust() *tagsTagValueIamPolicyState {
	if ttvip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ttvip.Type(), ttvip.LocalName()))
	}
	return ttvip.state
}

func (ttvip *TagsTagValueIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ttvip)
}

type TagsTagValueIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// TagValue: string, required
	TagValue terra.StringValue `hcl:"tag_value,attr" validate:"required"`
	// DependsOn contains resources that TagsTagValueIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type tagsTagValueIamPolicyAttributes struct {
	ref terra.Reference
}

func (ttvip tagsTagValueIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ttvip.ref.Append("etag"))
}

func (ttvip tagsTagValueIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ttvip.ref.Append("id"))
}

func (ttvip tagsTagValueIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(ttvip.ref.Append("policy_data"))
}

func (ttvip tagsTagValueIamPolicyAttributes) TagValue() terra.StringValue {
	return terra.ReferenceString(ttvip.ref.Append("tag_value"))
}

type tagsTagValueIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	PolicyData string `json:"policy_data"`
	TagValue   string `json:"tag_value"`
}
