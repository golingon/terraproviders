// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	bigqueryreservationassignment "github.com/golingon/terraproviders/google/4.59.0/bigqueryreservationassignment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigqueryReservationAssignment(name string, args BigqueryReservationAssignmentArgs) *BigqueryReservationAssignment {
	return &BigqueryReservationAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryReservationAssignment)(nil)

type BigqueryReservationAssignment struct {
	Name  string
	Args  BigqueryReservationAssignmentArgs
	state *bigqueryReservationAssignmentState
}

func (bra *BigqueryReservationAssignment) Type() string {
	return "google_bigquery_reservation_assignment"
}

func (bra *BigqueryReservationAssignment) LocalName() string {
	return bra.Name
}

func (bra *BigqueryReservationAssignment) Configuration() interface{} {
	return bra.Args
}

func (bra *BigqueryReservationAssignment) Attributes() bigqueryReservationAssignmentAttributes {
	return bigqueryReservationAssignmentAttributes{ref: terra.ReferenceResource(bra)}
}

func (bra *BigqueryReservationAssignment) ImportState(av io.Reader) error {
	bra.state = &bigqueryReservationAssignmentState{}
	if err := json.NewDecoder(av).Decode(bra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bra.Type(), bra.LocalName(), err)
	}
	return nil
}

func (bra *BigqueryReservationAssignment) State() (*bigqueryReservationAssignmentState, bool) {
	return bra.state, bra.state != nil
}

func (bra *BigqueryReservationAssignment) StateMust() *bigqueryReservationAssignmentState {
	if bra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bra.Type(), bra.LocalName()))
	}
	return bra.state
}

func (bra *BigqueryReservationAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(bra)
}

type BigqueryReservationAssignmentArgs struct {
	// Assignee: string, required
	Assignee terra.StringValue `hcl:"assignee,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// JobType: string, required
	JobType terra.StringValue `hcl:"job_type,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Reservation: string, required
	Reservation terra.StringValue `hcl:"reservation,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *bigqueryreservationassignment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BigqueryReservationAssignment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigqueryReservationAssignmentAttributes struct {
	ref terra.Reference
}

func (bra bigqueryReservationAssignmentAttributes) Assignee() terra.StringValue {
	return terra.ReferenceString(bra.ref.Append("assignee"))
}

func (bra bigqueryReservationAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bra.ref.Append("id"))
}

func (bra bigqueryReservationAssignmentAttributes) JobType() terra.StringValue {
	return terra.ReferenceString(bra.ref.Append("job_type"))
}

func (bra bigqueryReservationAssignmentAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bra.ref.Append("location"))
}

func (bra bigqueryReservationAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bra.ref.Append("name"))
}

func (bra bigqueryReservationAssignmentAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bra.ref.Append("project"))
}

func (bra bigqueryReservationAssignmentAttributes) Reservation() terra.StringValue {
	return terra.ReferenceString(bra.ref.Append("reservation"))
}

func (bra bigqueryReservationAssignmentAttributes) State() terra.StringValue {
	return terra.ReferenceString(bra.ref.Append("state"))
}

func (bra bigqueryReservationAssignmentAttributes) Timeouts() bigqueryreservationassignment.TimeoutsAttributes {
	return terra.ReferenceSingle[bigqueryreservationassignment.TimeoutsAttributes](bra.ref.Append("timeouts"))
}

type bigqueryReservationAssignmentState struct {
	Assignee    string                                       `json:"assignee"`
	Id          string                                       `json:"id"`
	JobType     string                                       `json:"job_type"`
	Location    string                                       `json:"location"`
	Name        string                                       `json:"name"`
	Project     string                                       `json:"project"`
	Reservation string                                       `json:"reservation"`
	State       string                                       `json:"state"`
	Timeouts    *bigqueryreservationassignment.TimeoutsState `json:"timeouts"`
}
