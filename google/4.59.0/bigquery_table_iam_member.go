// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	bigquerytableiammember "github.com/golingon/terraproviders/google/4.59.0/bigquerytableiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigqueryTableIamMember(name string, args BigqueryTableIamMemberArgs) *BigqueryTableIamMember {
	return &BigqueryTableIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryTableIamMember)(nil)

type BigqueryTableIamMember struct {
	Name  string
	Args  BigqueryTableIamMemberArgs
	state *bigqueryTableIamMemberState
}

func (btim *BigqueryTableIamMember) Type() string {
	return "google_bigquery_table_iam_member"
}

func (btim *BigqueryTableIamMember) LocalName() string {
	return btim.Name
}

func (btim *BigqueryTableIamMember) Configuration() interface{} {
	return btim.Args
}

func (btim *BigqueryTableIamMember) Attributes() bigqueryTableIamMemberAttributes {
	return bigqueryTableIamMemberAttributes{ref: terra.ReferenceResource(btim)}
}

func (btim *BigqueryTableIamMember) ImportState(av io.Reader) error {
	btim.state = &bigqueryTableIamMemberState{}
	if err := json.NewDecoder(av).Decode(btim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", btim.Type(), btim.LocalName(), err)
	}
	return nil
}

func (btim *BigqueryTableIamMember) State() (*bigqueryTableIamMemberState, bool) {
	return btim.state, btim.state != nil
}

func (btim *BigqueryTableIamMember) StateMust() *bigqueryTableIamMemberState {
	if btim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", btim.Type(), btim.LocalName()))
	}
	return btim.state
}

func (btim *BigqueryTableIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(btim)
}

type BigqueryTableIamMemberArgs struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
	// Condition: optional
	Condition *bigquerytableiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that BigqueryTableIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigqueryTableIamMemberAttributes struct {
	ref terra.Reference
}

func (btim bigqueryTableIamMemberAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceString(btim.ref.Append("dataset_id"))
}

func (btim bigqueryTableIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(btim.ref.Append("etag"))
}

func (btim bigqueryTableIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(btim.ref.Append("id"))
}

func (btim bigqueryTableIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(btim.ref.Append("member"))
}

func (btim bigqueryTableIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(btim.ref.Append("project"))
}

func (btim bigqueryTableIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(btim.ref.Append("role"))
}

func (btim bigqueryTableIamMemberAttributes) TableId() terra.StringValue {
	return terra.ReferenceString(btim.ref.Append("table_id"))
}

func (btim bigqueryTableIamMemberAttributes) Condition() terra.ListValue[bigquerytableiammember.ConditionAttributes] {
	return terra.ReferenceList[bigquerytableiammember.ConditionAttributes](btim.ref.Append("condition"))
}

type bigqueryTableIamMemberState struct {
	DatasetId string                                  `json:"dataset_id"`
	Etag      string                                  `json:"etag"`
	Id        string                                  `json:"id"`
	Member    string                                  `json:"member"`
	Project   string                                  `json:"project"`
	Role      string                                  `json:"role"`
	TableId   string                                  `json:"table_id"`
	Condition []bigquerytableiammember.ConditionState `json:"condition"`
}
