// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	bigtableappprofile "github.com/golingon/terraproviders/google/4.59.0/bigtableappprofile"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigtableAppProfile(name string, args BigtableAppProfileArgs) *BigtableAppProfile {
	return &BigtableAppProfile{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigtableAppProfile)(nil)

type BigtableAppProfile struct {
	Name  string
	Args  BigtableAppProfileArgs
	state *bigtableAppProfileState
}

func (bap *BigtableAppProfile) Type() string {
	return "google_bigtable_app_profile"
}

func (bap *BigtableAppProfile) LocalName() string {
	return bap.Name
}

func (bap *BigtableAppProfile) Configuration() interface{} {
	return bap.Args
}

func (bap *BigtableAppProfile) Attributes() bigtableAppProfileAttributes {
	return bigtableAppProfileAttributes{ref: terra.ReferenceResource(bap)}
}

func (bap *BigtableAppProfile) ImportState(av io.Reader) error {
	bap.state = &bigtableAppProfileState{}
	if err := json.NewDecoder(av).Decode(bap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bap.Type(), bap.LocalName(), err)
	}
	return nil
}

func (bap *BigtableAppProfile) State() (*bigtableAppProfileState, bool) {
	return bap.state, bap.state != nil
}

func (bap *BigtableAppProfile) StateMust() *bigtableAppProfileState {
	if bap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bap.Type(), bap.LocalName()))
	}
	return bap.state
}

func (bap *BigtableAppProfile) DependOn() terra.Reference {
	return terra.ReferenceResource(bap)
}

type BigtableAppProfileArgs struct {
	// AppProfileId: string, required
	AppProfileId terra.StringValue `hcl:"app_profile_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreWarnings: bool, optional
	IgnoreWarnings terra.BoolValue `hcl:"ignore_warnings,attr"`
	// Instance: string, optional
	Instance terra.StringValue `hcl:"instance,attr"`
	// MultiClusterRoutingClusterIds: list of string, optional
	MultiClusterRoutingClusterIds terra.ListValue[terra.StringValue] `hcl:"multi_cluster_routing_cluster_ids,attr"`
	// MultiClusterRoutingUseAny: bool, optional
	MultiClusterRoutingUseAny terra.BoolValue `hcl:"multi_cluster_routing_use_any,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SingleClusterRouting: optional
	SingleClusterRouting *bigtableappprofile.SingleClusterRouting `hcl:"single_cluster_routing,block"`
	// Timeouts: optional
	Timeouts *bigtableappprofile.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BigtableAppProfile depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigtableAppProfileAttributes struct {
	ref terra.Reference
}

func (bap bigtableAppProfileAttributes) AppProfileId() terra.StringValue {
	return terra.ReferenceString(bap.ref.Append("app_profile_id"))
}

func (bap bigtableAppProfileAttributes) Description() terra.StringValue {
	return terra.ReferenceString(bap.ref.Append("description"))
}

func (bap bigtableAppProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bap.ref.Append("id"))
}

func (bap bigtableAppProfileAttributes) IgnoreWarnings() terra.BoolValue {
	return terra.ReferenceBool(bap.ref.Append("ignore_warnings"))
}

func (bap bigtableAppProfileAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(bap.ref.Append("instance"))
}

func (bap bigtableAppProfileAttributes) MultiClusterRoutingClusterIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](bap.ref.Append("multi_cluster_routing_cluster_ids"))
}

func (bap bigtableAppProfileAttributes) MultiClusterRoutingUseAny() terra.BoolValue {
	return terra.ReferenceBool(bap.ref.Append("multi_cluster_routing_use_any"))
}

func (bap bigtableAppProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bap.ref.Append("name"))
}

func (bap bigtableAppProfileAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bap.ref.Append("project"))
}

func (bap bigtableAppProfileAttributes) SingleClusterRouting() terra.ListValue[bigtableappprofile.SingleClusterRoutingAttributes] {
	return terra.ReferenceList[bigtableappprofile.SingleClusterRoutingAttributes](bap.ref.Append("single_cluster_routing"))
}

func (bap bigtableAppProfileAttributes) Timeouts() bigtableappprofile.TimeoutsAttributes {
	return terra.ReferenceSingle[bigtableappprofile.TimeoutsAttributes](bap.ref.Append("timeouts"))
}

type bigtableAppProfileState struct {
	AppProfileId                  string                                         `json:"app_profile_id"`
	Description                   string                                         `json:"description"`
	Id                            string                                         `json:"id"`
	IgnoreWarnings                bool                                           `json:"ignore_warnings"`
	Instance                      string                                         `json:"instance"`
	MultiClusterRoutingClusterIds []string                                       `json:"multi_cluster_routing_cluster_ids"`
	MultiClusterRoutingUseAny     bool                                           `json:"multi_cluster_routing_use_any"`
	Name                          string                                         `json:"name"`
	Project                       string                                         `json:"project"`
	SingleClusterRouting          []bigtableappprofile.SingleClusterRoutingState `json:"single_cluster_routing"`
	Timeouts                      *bigtableappprofile.TimeoutsState              `json:"timeouts"`
}
