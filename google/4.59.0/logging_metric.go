// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	loggingmetric "github.com/golingon/terraproviders/google/4.59.0/loggingmetric"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLoggingMetric(name string, args LoggingMetricArgs) *LoggingMetric {
	return &LoggingMetric{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LoggingMetric)(nil)

type LoggingMetric struct {
	Name  string
	Args  LoggingMetricArgs
	state *loggingMetricState
}

func (lm *LoggingMetric) Type() string {
	return "google_logging_metric"
}

func (lm *LoggingMetric) LocalName() string {
	return lm.Name
}

func (lm *LoggingMetric) Configuration() interface{} {
	return lm.Args
}

func (lm *LoggingMetric) Attributes() loggingMetricAttributes {
	return loggingMetricAttributes{ref: terra.ReferenceResource(lm)}
}

func (lm *LoggingMetric) ImportState(av io.Reader) error {
	lm.state = &loggingMetricState{}
	if err := json.NewDecoder(av).Decode(lm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lm.Type(), lm.LocalName(), err)
	}
	return nil
}

func (lm *LoggingMetric) State() (*loggingMetricState, bool) {
	return lm.state, lm.state != nil
}

func (lm *LoggingMetric) StateMust() *loggingMetricState {
	if lm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lm.Type(), lm.LocalName()))
	}
	return lm.state
}

func (lm *LoggingMetric) DependOn() terra.Reference {
	return terra.ReferenceResource(lm)
}

type LoggingMetricArgs struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Filter: string, required
	Filter terra.StringValue `hcl:"filter,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LabelExtractors: map of string, optional
	LabelExtractors terra.MapValue[terra.StringValue] `hcl:"label_extractors,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ValueExtractor: string, optional
	ValueExtractor terra.StringValue `hcl:"value_extractor,attr"`
	// BucketOptions: optional
	BucketOptions *loggingmetric.BucketOptions `hcl:"bucket_options,block"`
	// MetricDescriptor: optional
	MetricDescriptor *loggingmetric.MetricDescriptor `hcl:"metric_descriptor,block"`
	// Timeouts: optional
	Timeouts *loggingmetric.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LoggingMetric depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type loggingMetricAttributes struct {
	ref terra.Reference
}

func (lm loggingMetricAttributes) BucketName() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("bucket_name"))
}

func (lm loggingMetricAttributes) Description() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("description"))
}

func (lm loggingMetricAttributes) Filter() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("filter"))
}

func (lm loggingMetricAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("id"))
}

func (lm loggingMetricAttributes) LabelExtractors() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lm.ref.Append("label_extractors"))
}

func (lm loggingMetricAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("name"))
}

func (lm loggingMetricAttributes) Project() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("project"))
}

func (lm loggingMetricAttributes) ValueExtractor() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("value_extractor"))
}

func (lm loggingMetricAttributes) BucketOptions() terra.ListValue[loggingmetric.BucketOptionsAttributes] {
	return terra.ReferenceList[loggingmetric.BucketOptionsAttributes](lm.ref.Append("bucket_options"))
}

func (lm loggingMetricAttributes) MetricDescriptor() terra.ListValue[loggingmetric.MetricDescriptorAttributes] {
	return terra.ReferenceList[loggingmetric.MetricDescriptorAttributes](lm.ref.Append("metric_descriptor"))
}

func (lm loggingMetricAttributes) Timeouts() loggingmetric.TimeoutsAttributes {
	return terra.ReferenceSingle[loggingmetric.TimeoutsAttributes](lm.ref.Append("timeouts"))
}

type loggingMetricState struct {
	BucketName       string                                `json:"bucket_name"`
	Description      string                                `json:"description"`
	Filter           string                                `json:"filter"`
	Id               string                                `json:"id"`
	LabelExtractors  map[string]string                     `json:"label_extractors"`
	Name             string                                `json:"name"`
	Project          string                                `json:"project"`
	ValueExtractor   string                                `json:"value_extractor"`
	BucketOptions    []loggingmetric.BucketOptionsState    `json:"bucket_options"`
	MetricDescriptor []loggingmetric.MetricDescriptorState `json:"metric_descriptor"`
	Timeouts         *loggingmetric.TimeoutsState          `json:"timeouts"`
}
