// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGkeBackupBackupPlanIamPolicy(name string, args GkeBackupBackupPlanIamPolicyArgs) *GkeBackupBackupPlanIamPolicy {
	return &GkeBackupBackupPlanIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeBackupBackupPlanIamPolicy)(nil)

type GkeBackupBackupPlanIamPolicy struct {
	Name  string
	Args  GkeBackupBackupPlanIamPolicyArgs
	state *gkeBackupBackupPlanIamPolicyState
}

func (gbbpip *GkeBackupBackupPlanIamPolicy) Type() string {
	return "google_gke_backup_backup_plan_iam_policy"
}

func (gbbpip *GkeBackupBackupPlanIamPolicy) LocalName() string {
	return gbbpip.Name
}

func (gbbpip *GkeBackupBackupPlanIamPolicy) Configuration() interface{} {
	return gbbpip.Args
}

func (gbbpip *GkeBackupBackupPlanIamPolicy) Attributes() gkeBackupBackupPlanIamPolicyAttributes {
	return gkeBackupBackupPlanIamPolicyAttributes{ref: terra.ReferenceResource(gbbpip)}
}

func (gbbpip *GkeBackupBackupPlanIamPolicy) ImportState(av io.Reader) error {
	gbbpip.state = &gkeBackupBackupPlanIamPolicyState{}
	if err := json.NewDecoder(av).Decode(gbbpip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbbpip.Type(), gbbpip.LocalName(), err)
	}
	return nil
}

func (gbbpip *GkeBackupBackupPlanIamPolicy) State() (*gkeBackupBackupPlanIamPolicyState, bool) {
	return gbbpip.state, gbbpip.state != nil
}

func (gbbpip *GkeBackupBackupPlanIamPolicy) StateMust() *gkeBackupBackupPlanIamPolicyState {
	if gbbpip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbbpip.Type(), gbbpip.LocalName()))
	}
	return gbbpip.state
}

func (gbbpip *GkeBackupBackupPlanIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(gbbpip)
}

type GkeBackupBackupPlanIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that GkeBackupBackupPlanIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type gkeBackupBackupPlanIamPolicyAttributes struct {
	ref terra.Reference
}

func (gbbpip gkeBackupBackupPlanIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(gbbpip.ref.Append("etag"))
}

func (gbbpip gkeBackupBackupPlanIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gbbpip.ref.Append("id"))
}

func (gbbpip gkeBackupBackupPlanIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(gbbpip.ref.Append("location"))
}

func (gbbpip gkeBackupBackupPlanIamPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gbbpip.ref.Append("name"))
}

func (gbbpip gkeBackupBackupPlanIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(gbbpip.ref.Append("policy_data"))
}

func (gbbpip gkeBackupBackupPlanIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(gbbpip.ref.Append("project"))
}

type gkeBackupBackupPlanIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Location   string `json:"location"`
	Name       string `json:"name"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
}
