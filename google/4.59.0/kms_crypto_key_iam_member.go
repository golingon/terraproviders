// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	kmscryptokeyiammember "github.com/golingon/terraproviders/google/4.59.0/kmscryptokeyiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKmsCryptoKeyIamMember(name string, args KmsCryptoKeyIamMemberArgs) *KmsCryptoKeyIamMember {
	return &KmsCryptoKeyIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KmsCryptoKeyIamMember)(nil)

type KmsCryptoKeyIamMember struct {
	Name  string
	Args  KmsCryptoKeyIamMemberArgs
	state *kmsCryptoKeyIamMemberState
}

func (kckim *KmsCryptoKeyIamMember) Type() string {
	return "google_kms_crypto_key_iam_member"
}

func (kckim *KmsCryptoKeyIamMember) LocalName() string {
	return kckim.Name
}

func (kckim *KmsCryptoKeyIamMember) Configuration() interface{} {
	return kckim.Args
}

func (kckim *KmsCryptoKeyIamMember) Attributes() kmsCryptoKeyIamMemberAttributes {
	return kmsCryptoKeyIamMemberAttributes{ref: terra.ReferenceResource(kckim)}
}

func (kckim *KmsCryptoKeyIamMember) ImportState(av io.Reader) error {
	kckim.state = &kmsCryptoKeyIamMemberState{}
	if err := json.NewDecoder(av).Decode(kckim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kckim.Type(), kckim.LocalName(), err)
	}
	return nil
}

func (kckim *KmsCryptoKeyIamMember) State() (*kmsCryptoKeyIamMemberState, bool) {
	return kckim.state, kckim.state != nil
}

func (kckim *KmsCryptoKeyIamMember) StateMust() *kmsCryptoKeyIamMemberState {
	if kckim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kckim.Type(), kckim.LocalName()))
	}
	return kckim.state
}

func (kckim *KmsCryptoKeyIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(kckim)
}

type KmsCryptoKeyIamMemberArgs struct {
	// CryptoKeyId: string, required
	CryptoKeyId terra.StringValue `hcl:"crypto_key_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *kmscryptokeyiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that KmsCryptoKeyIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kmsCryptoKeyIamMemberAttributes struct {
	ref terra.Reference
}

func (kckim kmsCryptoKeyIamMemberAttributes) CryptoKeyId() terra.StringValue {
	return terra.ReferenceString(kckim.ref.Append("crypto_key_id"))
}

func (kckim kmsCryptoKeyIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(kckim.ref.Append("etag"))
}

func (kckim kmsCryptoKeyIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kckim.ref.Append("id"))
}

func (kckim kmsCryptoKeyIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(kckim.ref.Append("member"))
}

func (kckim kmsCryptoKeyIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(kckim.ref.Append("role"))
}

func (kckim kmsCryptoKeyIamMemberAttributes) Condition() terra.ListValue[kmscryptokeyiammember.ConditionAttributes] {
	return terra.ReferenceList[kmscryptokeyiammember.ConditionAttributes](kckim.ref.Append("condition"))
}

type kmsCryptoKeyIamMemberState struct {
	CryptoKeyId string                                 `json:"crypto_key_id"`
	Etag        string                                 `json:"etag"`
	Id          string                                 `json:"id"`
	Member      string                                 `json:"member"`
	Role        string                                 `json:"role"`
	Condition   []kmscryptokeyiammember.ConditionState `json:"condition"`
}
