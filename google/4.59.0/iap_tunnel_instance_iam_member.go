// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	iaptunnelinstanceiammember "github.com/golingon/terraproviders/google/4.59.0/iaptunnelinstanceiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIapTunnelInstanceIamMember(name string, args IapTunnelInstanceIamMemberArgs) *IapTunnelInstanceIamMember {
	return &IapTunnelInstanceIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IapTunnelInstanceIamMember)(nil)

type IapTunnelInstanceIamMember struct {
	Name  string
	Args  IapTunnelInstanceIamMemberArgs
	state *iapTunnelInstanceIamMemberState
}

func (itiim *IapTunnelInstanceIamMember) Type() string {
	return "google_iap_tunnel_instance_iam_member"
}

func (itiim *IapTunnelInstanceIamMember) LocalName() string {
	return itiim.Name
}

func (itiim *IapTunnelInstanceIamMember) Configuration() interface{} {
	return itiim.Args
}

func (itiim *IapTunnelInstanceIamMember) Attributes() iapTunnelInstanceIamMemberAttributes {
	return iapTunnelInstanceIamMemberAttributes{ref: terra.ReferenceResource(itiim)}
}

func (itiim *IapTunnelInstanceIamMember) ImportState(av io.Reader) error {
	itiim.state = &iapTunnelInstanceIamMemberState{}
	if err := json.NewDecoder(av).Decode(itiim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", itiim.Type(), itiim.LocalName(), err)
	}
	return nil
}

func (itiim *IapTunnelInstanceIamMember) State() (*iapTunnelInstanceIamMemberState, bool) {
	return itiim.state, itiim.state != nil
}

func (itiim *IapTunnelInstanceIamMember) StateMust() *iapTunnelInstanceIamMemberState {
	if itiim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", itiim.Type(), itiim.LocalName()))
	}
	return itiim.state
}

func (itiim *IapTunnelInstanceIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(itiim)
}

type IapTunnelInstanceIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Condition: optional
	Condition *iaptunnelinstanceiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that IapTunnelInstanceIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iapTunnelInstanceIamMemberAttributes struct {
	ref terra.Reference
}

func (itiim iapTunnelInstanceIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(itiim.ref.Append("etag"))
}

func (itiim iapTunnelInstanceIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(itiim.ref.Append("id"))
}

func (itiim iapTunnelInstanceIamMemberAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(itiim.ref.Append("instance"))
}

func (itiim iapTunnelInstanceIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(itiim.ref.Append("member"))
}

func (itiim iapTunnelInstanceIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(itiim.ref.Append("project"))
}

func (itiim iapTunnelInstanceIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(itiim.ref.Append("role"))
}

func (itiim iapTunnelInstanceIamMemberAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(itiim.ref.Append("zone"))
}

func (itiim iapTunnelInstanceIamMemberAttributes) Condition() terra.ListValue[iaptunnelinstanceiammember.ConditionAttributes] {
	return terra.ReferenceList[iaptunnelinstanceiammember.ConditionAttributes](itiim.ref.Append("condition"))
}

type iapTunnelInstanceIamMemberState struct {
	Etag      string                                      `json:"etag"`
	Id        string                                      `json:"id"`
	Instance  string                                      `json:"instance"`
	Member    string                                      `json:"member"`
	Project   string                                      `json:"project"`
	Role      string                                      `json:"role"`
	Zone      string                                      `json:"zone"`
	Condition []iaptunnelinstanceiammember.ConditionState `json:"condition"`
}
