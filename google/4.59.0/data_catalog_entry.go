// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	datacatalogentry "github.com/golingon/terraproviders/google/4.59.0/datacatalogentry"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataCatalogEntry(name string, args DataCatalogEntryArgs) *DataCatalogEntry {
	return &DataCatalogEntry{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataCatalogEntry)(nil)

type DataCatalogEntry struct {
	Name  string
	Args  DataCatalogEntryArgs
	state *dataCatalogEntryState
}

func (dce *DataCatalogEntry) Type() string {
	return "google_data_catalog_entry"
}

func (dce *DataCatalogEntry) LocalName() string {
	return dce.Name
}

func (dce *DataCatalogEntry) Configuration() interface{} {
	return dce.Args
}

func (dce *DataCatalogEntry) Attributes() dataCatalogEntryAttributes {
	return dataCatalogEntryAttributes{ref: terra.ReferenceResource(dce)}
}

func (dce *DataCatalogEntry) ImportState(av io.Reader) error {
	dce.state = &dataCatalogEntryState{}
	if err := json.NewDecoder(av).Decode(dce.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dce.Type(), dce.LocalName(), err)
	}
	return nil
}

func (dce *DataCatalogEntry) State() (*dataCatalogEntryState, bool) {
	return dce.state, dce.state != nil
}

func (dce *DataCatalogEntry) StateMust() *dataCatalogEntryState {
	if dce.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dce.Type(), dce.LocalName()))
	}
	return dce.state
}

func (dce *DataCatalogEntry) DependOn() terra.Reference {
	return terra.ReferenceResource(dce)
}

type DataCatalogEntryArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// EntryGroup: string, required
	EntryGroup terra.StringValue `hcl:"entry_group,attr" validate:"required"`
	// EntryId: string, required
	EntryId terra.StringValue `hcl:"entry_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkedResource: string, optional
	LinkedResource terra.StringValue `hcl:"linked_resource,attr"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// UserSpecifiedSystem: string, optional
	UserSpecifiedSystem terra.StringValue `hcl:"user_specified_system,attr"`
	// UserSpecifiedType: string, optional
	UserSpecifiedType terra.StringValue `hcl:"user_specified_type,attr"`
	// BigqueryDateShardedSpec: min=0
	BigqueryDateShardedSpec []datacatalogentry.BigqueryDateShardedSpec `hcl:"bigquery_date_sharded_spec,block" validate:"min=0"`
	// BigqueryTableSpec: min=0
	BigqueryTableSpec []datacatalogentry.BigqueryTableSpec `hcl:"bigquery_table_spec,block" validate:"min=0"`
	// GcsFilesetSpec: optional
	GcsFilesetSpec *datacatalogentry.GcsFilesetSpec `hcl:"gcs_fileset_spec,block"`
	// Timeouts: optional
	Timeouts *datacatalogentry.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataCatalogEntry depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataCatalogEntryAttributes struct {
	ref terra.Reference
}

func (dce dataCatalogEntryAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dce.ref.Append("description"))
}

func (dce dataCatalogEntryAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(dce.ref.Append("display_name"))
}

func (dce dataCatalogEntryAttributes) EntryGroup() terra.StringValue {
	return terra.ReferenceString(dce.ref.Append("entry_group"))
}

func (dce dataCatalogEntryAttributes) EntryId() terra.StringValue {
	return terra.ReferenceString(dce.ref.Append("entry_id"))
}

func (dce dataCatalogEntryAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dce.ref.Append("id"))
}

func (dce dataCatalogEntryAttributes) IntegratedSystem() terra.StringValue {
	return terra.ReferenceString(dce.ref.Append("integrated_system"))
}

func (dce dataCatalogEntryAttributes) LinkedResource() terra.StringValue {
	return terra.ReferenceString(dce.ref.Append("linked_resource"))
}

func (dce dataCatalogEntryAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dce.ref.Append("name"))
}

func (dce dataCatalogEntryAttributes) Schema() terra.StringValue {
	return terra.ReferenceString(dce.ref.Append("schema"))
}

func (dce dataCatalogEntryAttributes) Type() terra.StringValue {
	return terra.ReferenceString(dce.ref.Append("type"))
}

func (dce dataCatalogEntryAttributes) UserSpecifiedSystem() terra.StringValue {
	return terra.ReferenceString(dce.ref.Append("user_specified_system"))
}

func (dce dataCatalogEntryAttributes) UserSpecifiedType() terra.StringValue {
	return terra.ReferenceString(dce.ref.Append("user_specified_type"))
}

func (dce dataCatalogEntryAttributes) BigqueryDateShardedSpec() terra.ListValue[datacatalogentry.BigqueryDateShardedSpecAttributes] {
	return terra.ReferenceList[datacatalogentry.BigqueryDateShardedSpecAttributes](dce.ref.Append("bigquery_date_sharded_spec"))
}

func (dce dataCatalogEntryAttributes) BigqueryTableSpec() terra.ListValue[datacatalogentry.BigqueryTableSpecAttributes] {
	return terra.ReferenceList[datacatalogentry.BigqueryTableSpecAttributes](dce.ref.Append("bigquery_table_spec"))
}

func (dce dataCatalogEntryAttributes) GcsFilesetSpec() terra.ListValue[datacatalogentry.GcsFilesetSpecAttributes] {
	return terra.ReferenceList[datacatalogentry.GcsFilesetSpecAttributes](dce.ref.Append("gcs_fileset_spec"))
}

func (dce dataCatalogEntryAttributes) Timeouts() datacatalogentry.TimeoutsAttributes {
	return terra.ReferenceSingle[datacatalogentry.TimeoutsAttributes](dce.ref.Append("timeouts"))
}

type dataCatalogEntryState struct {
	Description             string                                          `json:"description"`
	DisplayName             string                                          `json:"display_name"`
	EntryGroup              string                                          `json:"entry_group"`
	EntryId                 string                                          `json:"entry_id"`
	Id                      string                                          `json:"id"`
	IntegratedSystem        string                                          `json:"integrated_system"`
	LinkedResource          string                                          `json:"linked_resource"`
	Name                    string                                          `json:"name"`
	Schema                  string                                          `json:"schema"`
	Type                    string                                          `json:"type"`
	UserSpecifiedSystem     string                                          `json:"user_specified_system"`
	UserSpecifiedType       string                                          `json:"user_specified_type"`
	BigqueryDateShardedSpec []datacatalogentry.BigqueryDateShardedSpecState `json:"bigquery_date_sharded_spec"`
	BigqueryTableSpec       []datacatalogentry.BigqueryTableSpecState       `json:"bigquery_table_spec"`
	GcsFilesetSpec          []datacatalogentry.GcsFilesetSpecState          `json:"gcs_fileset_spec"`
	Timeouts                *datacatalogentry.TimeoutsState                 `json:"timeouts"`
}
