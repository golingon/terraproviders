// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	folderaccessapprovalsettings "github.com/golingon/terraproviders/google/4.59.0/folderaccessapprovalsettings"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFolderAccessApprovalSettings(name string, args FolderAccessApprovalSettingsArgs) *FolderAccessApprovalSettings {
	return &FolderAccessApprovalSettings{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FolderAccessApprovalSettings)(nil)

type FolderAccessApprovalSettings struct {
	Name  string
	Args  FolderAccessApprovalSettingsArgs
	state *folderAccessApprovalSettingsState
}

func (faas *FolderAccessApprovalSettings) Type() string {
	return "google_folder_access_approval_settings"
}

func (faas *FolderAccessApprovalSettings) LocalName() string {
	return faas.Name
}

func (faas *FolderAccessApprovalSettings) Configuration() interface{} {
	return faas.Args
}

func (faas *FolderAccessApprovalSettings) Attributes() folderAccessApprovalSettingsAttributes {
	return folderAccessApprovalSettingsAttributes{ref: terra.ReferenceResource(faas)}
}

func (faas *FolderAccessApprovalSettings) ImportState(av io.Reader) error {
	faas.state = &folderAccessApprovalSettingsState{}
	if err := json.NewDecoder(av).Decode(faas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", faas.Type(), faas.LocalName(), err)
	}
	return nil
}

func (faas *FolderAccessApprovalSettings) State() (*folderAccessApprovalSettingsState, bool) {
	return faas.state, faas.state != nil
}

func (faas *FolderAccessApprovalSettings) StateMust() *folderAccessApprovalSettingsState {
	if faas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", faas.Type(), faas.LocalName()))
	}
	return faas.state
}

func (faas *FolderAccessApprovalSettings) DependOn() terra.Reference {
	return terra.ReferenceResource(faas)
}

type FolderAccessApprovalSettingsArgs struct {
	// ActiveKeyVersion: string, optional
	ActiveKeyVersion terra.StringValue `hcl:"active_key_version,attr"`
	// FolderId: string, required
	FolderId terra.StringValue `hcl:"folder_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NotificationEmails: set of string, optional
	NotificationEmails terra.SetValue[terra.StringValue] `hcl:"notification_emails,attr"`
	// EnrolledServices: min=1
	EnrolledServices []folderaccessapprovalsettings.EnrolledServices `hcl:"enrolled_services,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *folderaccessapprovalsettings.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FolderAccessApprovalSettings depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type folderAccessApprovalSettingsAttributes struct {
	ref terra.Reference
}

func (faas folderAccessApprovalSettingsAttributes) ActiveKeyVersion() terra.StringValue {
	return terra.ReferenceString(faas.ref.Append("active_key_version"))
}

func (faas folderAccessApprovalSettingsAttributes) AncestorHasActiveKeyVersion() terra.BoolValue {
	return terra.ReferenceBool(faas.ref.Append("ancestor_has_active_key_version"))
}

func (faas folderAccessApprovalSettingsAttributes) EnrolledAncestor() terra.BoolValue {
	return terra.ReferenceBool(faas.ref.Append("enrolled_ancestor"))
}

func (faas folderAccessApprovalSettingsAttributes) FolderId() terra.StringValue {
	return terra.ReferenceString(faas.ref.Append("folder_id"))
}

func (faas folderAccessApprovalSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(faas.ref.Append("id"))
}

func (faas folderAccessApprovalSettingsAttributes) InvalidKeyVersion() terra.BoolValue {
	return terra.ReferenceBool(faas.ref.Append("invalid_key_version"))
}

func (faas folderAccessApprovalSettingsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(faas.ref.Append("name"))
}

func (faas folderAccessApprovalSettingsAttributes) NotificationEmails() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](faas.ref.Append("notification_emails"))
}

func (faas folderAccessApprovalSettingsAttributes) EnrolledServices() terra.SetValue[folderaccessapprovalsettings.EnrolledServicesAttributes] {
	return terra.ReferenceSet[folderaccessapprovalsettings.EnrolledServicesAttributes](faas.ref.Append("enrolled_services"))
}

func (faas folderAccessApprovalSettingsAttributes) Timeouts() folderaccessapprovalsettings.TimeoutsAttributes {
	return terra.ReferenceSingle[folderaccessapprovalsettings.TimeoutsAttributes](faas.ref.Append("timeouts"))
}

type folderAccessApprovalSettingsState struct {
	ActiveKeyVersion            string                                               `json:"active_key_version"`
	AncestorHasActiveKeyVersion bool                                                 `json:"ancestor_has_active_key_version"`
	EnrolledAncestor            bool                                                 `json:"enrolled_ancestor"`
	FolderId                    string                                               `json:"folder_id"`
	Id                          string                                               `json:"id"`
	InvalidKeyVersion           bool                                                 `json:"invalid_key_version"`
	Name                        string                                               `json:"name"`
	NotificationEmails          []string                                             `json:"notification_emails"`
	EnrolledServices            []folderaccessapprovalsettings.EnrolledServicesState `json:"enrolled_services"`
	Timeouts                    *folderaccessapprovalsettings.TimeoutsState          `json:"timeouts"`
}
