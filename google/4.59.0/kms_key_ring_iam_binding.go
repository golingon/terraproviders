// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	kmskeyringiambinding "github.com/golingon/terraproviders/google/4.59.0/kmskeyringiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKmsKeyRingIamBinding(name string, args KmsKeyRingIamBindingArgs) *KmsKeyRingIamBinding {
	return &KmsKeyRingIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KmsKeyRingIamBinding)(nil)

type KmsKeyRingIamBinding struct {
	Name  string
	Args  KmsKeyRingIamBindingArgs
	state *kmsKeyRingIamBindingState
}

func (kkrib *KmsKeyRingIamBinding) Type() string {
	return "google_kms_key_ring_iam_binding"
}

func (kkrib *KmsKeyRingIamBinding) LocalName() string {
	return kkrib.Name
}

func (kkrib *KmsKeyRingIamBinding) Configuration() interface{} {
	return kkrib.Args
}

func (kkrib *KmsKeyRingIamBinding) Attributes() kmsKeyRingIamBindingAttributes {
	return kmsKeyRingIamBindingAttributes{ref: terra.ReferenceResource(kkrib)}
}

func (kkrib *KmsKeyRingIamBinding) ImportState(av io.Reader) error {
	kkrib.state = &kmsKeyRingIamBindingState{}
	if err := json.NewDecoder(av).Decode(kkrib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kkrib.Type(), kkrib.LocalName(), err)
	}
	return nil
}

func (kkrib *KmsKeyRingIamBinding) State() (*kmsKeyRingIamBindingState, bool) {
	return kkrib.state, kkrib.state != nil
}

func (kkrib *KmsKeyRingIamBinding) StateMust() *kmsKeyRingIamBindingState {
	if kkrib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kkrib.Type(), kkrib.LocalName()))
	}
	return kkrib.state
}

func (kkrib *KmsKeyRingIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(kkrib)
}

type KmsKeyRingIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyRingId: string, required
	KeyRingId terra.StringValue `hcl:"key_ring_id,attr" validate:"required"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *kmskeyringiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that KmsKeyRingIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kmsKeyRingIamBindingAttributes struct {
	ref terra.Reference
}

func (kkrib kmsKeyRingIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(kkrib.ref.Append("etag"))
}

func (kkrib kmsKeyRingIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kkrib.ref.Append("id"))
}

func (kkrib kmsKeyRingIamBindingAttributes) KeyRingId() terra.StringValue {
	return terra.ReferenceString(kkrib.ref.Append("key_ring_id"))
}

func (kkrib kmsKeyRingIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](kkrib.ref.Append("members"))
}

func (kkrib kmsKeyRingIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(kkrib.ref.Append("role"))
}

func (kkrib kmsKeyRingIamBindingAttributes) Condition() terra.ListValue[kmskeyringiambinding.ConditionAttributes] {
	return terra.ReferenceList[kmskeyringiambinding.ConditionAttributes](kkrib.ref.Append("condition"))
}

type kmsKeyRingIamBindingState struct {
	Etag      string                                `json:"etag"`
	Id        string                                `json:"id"`
	KeyRingId string                                `json:"key_ring_id"`
	Members   []string                              `json:"members"`
	Role      string                                `json:"role"`
	Condition []kmskeyringiambinding.ConditionState `json:"condition"`
}
