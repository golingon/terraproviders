// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	certificatemanagercertificatemap "github.com/golingon/terraproviders/google/4.59.0/certificatemanagercertificatemap"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCertificateManagerCertificateMap(name string, args CertificateManagerCertificateMapArgs) *CertificateManagerCertificateMap {
	return &CertificateManagerCertificateMap{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CertificateManagerCertificateMap)(nil)

type CertificateManagerCertificateMap struct {
	Name  string
	Args  CertificateManagerCertificateMapArgs
	state *certificateManagerCertificateMapState
}

func (cmcm *CertificateManagerCertificateMap) Type() string {
	return "google_certificate_manager_certificate_map"
}

func (cmcm *CertificateManagerCertificateMap) LocalName() string {
	return cmcm.Name
}

func (cmcm *CertificateManagerCertificateMap) Configuration() interface{} {
	return cmcm.Args
}

func (cmcm *CertificateManagerCertificateMap) Attributes() certificateManagerCertificateMapAttributes {
	return certificateManagerCertificateMapAttributes{ref: terra.ReferenceResource(cmcm)}
}

func (cmcm *CertificateManagerCertificateMap) ImportState(av io.Reader) error {
	cmcm.state = &certificateManagerCertificateMapState{}
	if err := json.NewDecoder(av).Decode(cmcm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cmcm.Type(), cmcm.LocalName(), err)
	}
	return nil
}

func (cmcm *CertificateManagerCertificateMap) State() (*certificateManagerCertificateMapState, bool) {
	return cmcm.state, cmcm.state != nil
}

func (cmcm *CertificateManagerCertificateMap) StateMust() *certificateManagerCertificateMapState {
	if cmcm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cmcm.Type(), cmcm.LocalName()))
	}
	return cmcm.state
}

func (cmcm *CertificateManagerCertificateMap) DependOn() terra.Reference {
	return terra.ReferenceResource(cmcm)
}

type CertificateManagerCertificateMapArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// GclbTargets: min=0
	GclbTargets []certificatemanagercertificatemap.GclbTargets `hcl:"gclb_targets,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *certificatemanagercertificatemap.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CertificateManagerCertificateMap depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type certificateManagerCertificateMapAttributes struct {
	ref terra.Reference
}

func (cmcm certificateManagerCertificateMapAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(cmcm.ref.Append("create_time"))
}

func (cmcm certificateManagerCertificateMapAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cmcm.ref.Append("description"))
}

func (cmcm certificateManagerCertificateMapAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cmcm.ref.Append("id"))
}

func (cmcm certificateManagerCertificateMapAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cmcm.ref.Append("labels"))
}

func (cmcm certificateManagerCertificateMapAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cmcm.ref.Append("name"))
}

func (cmcm certificateManagerCertificateMapAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cmcm.ref.Append("project"))
}

func (cmcm certificateManagerCertificateMapAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(cmcm.ref.Append("update_time"))
}

func (cmcm certificateManagerCertificateMapAttributes) GclbTargets() terra.ListValue[certificatemanagercertificatemap.GclbTargetsAttributes] {
	return terra.ReferenceList[certificatemanagercertificatemap.GclbTargetsAttributes](cmcm.ref.Append("gclb_targets"))
}

func (cmcm certificateManagerCertificateMapAttributes) Timeouts() certificatemanagercertificatemap.TimeoutsAttributes {
	return terra.ReferenceSingle[certificatemanagercertificatemap.TimeoutsAttributes](cmcm.ref.Append("timeouts"))
}

type certificateManagerCertificateMapState struct {
	CreateTime  string                                              `json:"create_time"`
	Description string                                              `json:"description"`
	Id          string                                              `json:"id"`
	Labels      map[string]string                                   `json:"labels"`
	Name        string                                              `json:"name"`
	Project     string                                              `json:"project"`
	UpdateTime  string                                              `json:"update_time"`
	GclbTargets []certificatemanagercertificatemap.GclbTargetsState `json:"gclb_targets"`
	Timeouts    *certificatemanagercertificatemap.TimeoutsState     `json:"timeouts"`
}
