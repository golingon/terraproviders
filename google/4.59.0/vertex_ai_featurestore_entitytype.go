// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	vertexaifeaturestoreentitytype "github.com/golingon/terraproviders/google/4.59.0/vertexaifeaturestoreentitytype"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVertexAiFeaturestoreEntitytype(name string, args VertexAiFeaturestoreEntitytypeArgs) *VertexAiFeaturestoreEntitytype {
	return &VertexAiFeaturestoreEntitytype{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VertexAiFeaturestoreEntitytype)(nil)

type VertexAiFeaturestoreEntitytype struct {
	Name  string
	Args  VertexAiFeaturestoreEntitytypeArgs
	state *vertexAiFeaturestoreEntitytypeState
}

func (vafe *VertexAiFeaturestoreEntitytype) Type() string {
	return "google_vertex_ai_featurestore_entitytype"
}

func (vafe *VertexAiFeaturestoreEntitytype) LocalName() string {
	return vafe.Name
}

func (vafe *VertexAiFeaturestoreEntitytype) Configuration() interface{} {
	return vafe.Args
}

func (vafe *VertexAiFeaturestoreEntitytype) Attributes() vertexAiFeaturestoreEntitytypeAttributes {
	return vertexAiFeaturestoreEntitytypeAttributes{ref: terra.ReferenceResource(vafe)}
}

func (vafe *VertexAiFeaturestoreEntitytype) ImportState(av io.Reader) error {
	vafe.state = &vertexAiFeaturestoreEntitytypeState{}
	if err := json.NewDecoder(av).Decode(vafe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vafe.Type(), vafe.LocalName(), err)
	}
	return nil
}

func (vafe *VertexAiFeaturestoreEntitytype) State() (*vertexAiFeaturestoreEntitytypeState, bool) {
	return vafe.state, vafe.state != nil
}

func (vafe *VertexAiFeaturestoreEntitytype) StateMust() *vertexAiFeaturestoreEntitytypeState {
	if vafe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vafe.Type(), vafe.LocalName()))
	}
	return vafe.state
}

func (vafe *VertexAiFeaturestoreEntitytype) DependOn() terra.Reference {
	return terra.ReferenceResource(vafe)
}

type VertexAiFeaturestoreEntitytypeArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Featurestore: string, required
	Featurestore terra.StringValue `hcl:"featurestore,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// MonitoringConfig: optional
	MonitoringConfig *vertexaifeaturestoreentitytype.MonitoringConfig `hcl:"monitoring_config,block"`
	// Timeouts: optional
	Timeouts *vertexaifeaturestoreentitytype.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VertexAiFeaturestoreEntitytype depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vertexAiFeaturestoreEntitytypeAttributes struct {
	ref terra.Reference
}

func (vafe vertexAiFeaturestoreEntitytypeAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(vafe.ref.Append("create_time"))
}

func (vafe vertexAiFeaturestoreEntitytypeAttributes) Description() terra.StringValue {
	return terra.ReferenceString(vafe.ref.Append("description"))
}

func (vafe vertexAiFeaturestoreEntitytypeAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(vafe.ref.Append("etag"))
}

func (vafe vertexAiFeaturestoreEntitytypeAttributes) Featurestore() terra.StringValue {
	return terra.ReferenceString(vafe.ref.Append("featurestore"))
}

func (vafe vertexAiFeaturestoreEntitytypeAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vafe.ref.Append("id"))
}

func (vafe vertexAiFeaturestoreEntitytypeAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vafe.ref.Append("labels"))
}

func (vafe vertexAiFeaturestoreEntitytypeAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vafe.ref.Append("name"))
}

func (vafe vertexAiFeaturestoreEntitytypeAttributes) Region() terra.StringValue {
	return terra.ReferenceString(vafe.ref.Append("region"))
}

func (vafe vertexAiFeaturestoreEntitytypeAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(vafe.ref.Append("update_time"))
}

func (vafe vertexAiFeaturestoreEntitytypeAttributes) MonitoringConfig() terra.ListValue[vertexaifeaturestoreentitytype.MonitoringConfigAttributes] {
	return terra.ReferenceList[vertexaifeaturestoreentitytype.MonitoringConfigAttributes](vafe.ref.Append("monitoring_config"))
}

func (vafe vertexAiFeaturestoreEntitytypeAttributes) Timeouts() vertexaifeaturestoreentitytype.TimeoutsAttributes {
	return terra.ReferenceSingle[vertexaifeaturestoreentitytype.TimeoutsAttributes](vafe.ref.Append("timeouts"))
}

type vertexAiFeaturestoreEntitytypeState struct {
	CreateTime       string                                                 `json:"create_time"`
	Description      string                                                 `json:"description"`
	Etag             string                                                 `json:"etag"`
	Featurestore     string                                                 `json:"featurestore"`
	Id               string                                                 `json:"id"`
	Labels           map[string]string                                      `json:"labels"`
	Name             string                                                 `json:"name"`
	Region           string                                                 `json:"region"`
	UpdateTime       string                                                 `json:"update_time"`
	MonitoringConfig []vertexaifeaturestoreentitytype.MonitoringConfigState `json:"monitoring_config"`
	Timeouts         *vertexaifeaturestoreentitytype.TimeoutsState          `json:"timeouts"`
}
