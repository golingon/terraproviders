// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	bigquerydatapolicydatapolicyiambinding "github.com/golingon/terraproviders/google/4.59.0/bigquerydatapolicydatapolicyiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigqueryDatapolicyDataPolicyIamBinding(name string, args BigqueryDatapolicyDataPolicyIamBindingArgs) *BigqueryDatapolicyDataPolicyIamBinding {
	return &BigqueryDatapolicyDataPolicyIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryDatapolicyDataPolicyIamBinding)(nil)

type BigqueryDatapolicyDataPolicyIamBinding struct {
	Name  string
	Args  BigqueryDatapolicyDataPolicyIamBindingArgs
	state *bigqueryDatapolicyDataPolicyIamBindingState
}

func (bddpib *BigqueryDatapolicyDataPolicyIamBinding) Type() string {
	return "google_bigquery_datapolicy_data_policy_iam_binding"
}

func (bddpib *BigqueryDatapolicyDataPolicyIamBinding) LocalName() string {
	return bddpib.Name
}

func (bddpib *BigqueryDatapolicyDataPolicyIamBinding) Configuration() interface{} {
	return bddpib.Args
}

func (bddpib *BigqueryDatapolicyDataPolicyIamBinding) Attributes() bigqueryDatapolicyDataPolicyIamBindingAttributes {
	return bigqueryDatapolicyDataPolicyIamBindingAttributes{ref: terra.ReferenceResource(bddpib)}
}

func (bddpib *BigqueryDatapolicyDataPolicyIamBinding) ImportState(av io.Reader) error {
	bddpib.state = &bigqueryDatapolicyDataPolicyIamBindingState{}
	if err := json.NewDecoder(av).Decode(bddpib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bddpib.Type(), bddpib.LocalName(), err)
	}
	return nil
}

func (bddpib *BigqueryDatapolicyDataPolicyIamBinding) State() (*bigqueryDatapolicyDataPolicyIamBindingState, bool) {
	return bddpib.state, bddpib.state != nil
}

func (bddpib *BigqueryDatapolicyDataPolicyIamBinding) StateMust() *bigqueryDatapolicyDataPolicyIamBindingState {
	if bddpib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bddpib.Type(), bddpib.LocalName()))
	}
	return bddpib.state
}

func (bddpib *BigqueryDatapolicyDataPolicyIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(bddpib)
}

type BigqueryDatapolicyDataPolicyIamBindingArgs struct {
	// DataPolicyId: string, required
	DataPolicyId terra.StringValue `hcl:"data_policy_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *bigquerydatapolicydatapolicyiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that BigqueryDatapolicyDataPolicyIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigqueryDatapolicyDataPolicyIamBindingAttributes struct {
	ref terra.Reference
}

func (bddpib bigqueryDatapolicyDataPolicyIamBindingAttributes) DataPolicyId() terra.StringValue {
	return terra.ReferenceString(bddpib.ref.Append("data_policy_id"))
}

func (bddpib bigqueryDatapolicyDataPolicyIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(bddpib.ref.Append("etag"))
}

func (bddpib bigqueryDatapolicyDataPolicyIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bddpib.ref.Append("id"))
}

func (bddpib bigqueryDatapolicyDataPolicyIamBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bddpib.ref.Append("location"))
}

func (bddpib bigqueryDatapolicyDataPolicyIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](bddpib.ref.Append("members"))
}

func (bddpib bigqueryDatapolicyDataPolicyIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bddpib.ref.Append("project"))
}

func (bddpib bigqueryDatapolicyDataPolicyIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(bddpib.ref.Append("role"))
}

func (bddpib bigqueryDatapolicyDataPolicyIamBindingAttributes) Condition() terra.ListValue[bigquerydatapolicydatapolicyiambinding.ConditionAttributes] {
	return terra.ReferenceList[bigquerydatapolicydatapolicyiambinding.ConditionAttributes](bddpib.ref.Append("condition"))
}

type bigqueryDatapolicyDataPolicyIamBindingState struct {
	DataPolicyId string                                                  `json:"data_policy_id"`
	Etag         string                                                  `json:"etag"`
	Id           string                                                  `json:"id"`
	Location     string                                                  `json:"location"`
	Members      []string                                                `json:"members"`
	Project      string                                                  `json:"project"`
	Role         string                                                  `json:"role"`
	Condition    []bigquerydatapolicydatapolicyiambinding.ConditionState `json:"condition"`
}
