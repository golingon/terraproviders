// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	bigqueryconnection "github.com/golingon/terraproviders/google/4.59.0/bigqueryconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigqueryConnection(name string, args BigqueryConnectionArgs) *BigqueryConnection {
	return &BigqueryConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryConnection)(nil)

type BigqueryConnection struct {
	Name  string
	Args  BigqueryConnectionArgs
	state *bigqueryConnectionState
}

func (bc *BigqueryConnection) Type() string {
	return "google_bigquery_connection"
}

func (bc *BigqueryConnection) LocalName() string {
	return bc.Name
}

func (bc *BigqueryConnection) Configuration() interface{} {
	return bc.Args
}

func (bc *BigqueryConnection) Attributes() bigqueryConnectionAttributes {
	return bigqueryConnectionAttributes{ref: terra.ReferenceResource(bc)}
}

func (bc *BigqueryConnection) ImportState(av io.Reader) error {
	bc.state = &bigqueryConnectionState{}
	if err := json.NewDecoder(av).Decode(bc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bc.Type(), bc.LocalName(), err)
	}
	return nil
}

func (bc *BigqueryConnection) State() (*bigqueryConnectionState, bool) {
	return bc.state, bc.state != nil
}

func (bc *BigqueryConnection) StateMust() *bigqueryConnectionState {
	if bc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bc.Type(), bc.LocalName()))
	}
	return bc.state
}

func (bc *BigqueryConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(bc)
}

type BigqueryConnectionArgs struct {
	// ConnectionId: string, optional
	ConnectionId terra.StringValue `hcl:"connection_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FriendlyName: string, optional
	FriendlyName terra.StringValue `hcl:"friendly_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Aws: optional
	Aws *bigqueryconnection.Aws `hcl:"aws,block"`
	// Azure: optional
	Azure *bigqueryconnection.Azure `hcl:"azure,block"`
	// CloudResource: optional
	CloudResource *bigqueryconnection.CloudResource `hcl:"cloud_resource,block"`
	// CloudSpanner: optional
	CloudSpanner *bigqueryconnection.CloudSpanner `hcl:"cloud_spanner,block"`
	// CloudSql: optional
	CloudSql *bigqueryconnection.CloudSql `hcl:"cloud_sql,block"`
	// Timeouts: optional
	Timeouts *bigqueryconnection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BigqueryConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigqueryConnectionAttributes struct {
	ref terra.Reference
}

func (bc bigqueryConnectionAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("connection_id"))
}

func (bc bigqueryConnectionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("description"))
}

func (bc bigqueryConnectionAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("friendly_name"))
}

func (bc bigqueryConnectionAttributes) HasCredential() terra.BoolValue {
	return terra.ReferenceBool(bc.ref.Append("has_credential"))
}

func (bc bigqueryConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("id"))
}

func (bc bigqueryConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("location"))
}

func (bc bigqueryConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("name"))
}

func (bc bigqueryConnectionAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("project"))
}

func (bc bigqueryConnectionAttributes) Aws() terra.ListValue[bigqueryconnection.AwsAttributes] {
	return terra.ReferenceList[bigqueryconnection.AwsAttributes](bc.ref.Append("aws"))
}

func (bc bigqueryConnectionAttributes) Azure() terra.ListValue[bigqueryconnection.AzureAttributes] {
	return terra.ReferenceList[bigqueryconnection.AzureAttributes](bc.ref.Append("azure"))
}

func (bc bigqueryConnectionAttributes) CloudResource() terra.ListValue[bigqueryconnection.CloudResourceAttributes] {
	return terra.ReferenceList[bigqueryconnection.CloudResourceAttributes](bc.ref.Append("cloud_resource"))
}

func (bc bigqueryConnectionAttributes) CloudSpanner() terra.ListValue[bigqueryconnection.CloudSpannerAttributes] {
	return terra.ReferenceList[bigqueryconnection.CloudSpannerAttributes](bc.ref.Append("cloud_spanner"))
}

func (bc bigqueryConnectionAttributes) CloudSql() terra.ListValue[bigqueryconnection.CloudSqlAttributes] {
	return terra.ReferenceList[bigqueryconnection.CloudSqlAttributes](bc.ref.Append("cloud_sql"))
}

func (bc bigqueryConnectionAttributes) Timeouts() bigqueryconnection.TimeoutsAttributes {
	return terra.ReferenceSingle[bigqueryconnection.TimeoutsAttributes](bc.ref.Append("timeouts"))
}

type bigqueryConnectionState struct {
	ConnectionId  string                                  `json:"connection_id"`
	Description   string                                  `json:"description"`
	FriendlyName  string                                  `json:"friendly_name"`
	HasCredential bool                                    `json:"has_credential"`
	Id            string                                  `json:"id"`
	Location      string                                  `json:"location"`
	Name          string                                  `json:"name"`
	Project       string                                  `json:"project"`
	Aws           []bigqueryconnection.AwsState           `json:"aws"`
	Azure         []bigqueryconnection.AzureState         `json:"azure"`
	CloudResource []bigqueryconnection.CloudResourceState `json:"cloud_resource"`
	CloudSpanner  []bigqueryconnection.CloudSpannerState  `json:"cloud_spanner"`
	CloudSql      []bigqueryconnection.CloudSqlState      `json:"cloud_sql"`
	Timeouts      *bigqueryconnection.TimeoutsState       `json:"timeouts"`
}
