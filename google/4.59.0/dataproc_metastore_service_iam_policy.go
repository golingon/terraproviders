// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataprocMetastoreServiceIamPolicy(name string, args DataprocMetastoreServiceIamPolicyArgs) *DataprocMetastoreServiceIamPolicy {
	return &DataprocMetastoreServiceIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataprocMetastoreServiceIamPolicy)(nil)

type DataprocMetastoreServiceIamPolicy struct {
	Name  string
	Args  DataprocMetastoreServiceIamPolicyArgs
	state *dataprocMetastoreServiceIamPolicyState
}

func (dmsip *DataprocMetastoreServiceIamPolicy) Type() string {
	return "google_dataproc_metastore_service_iam_policy"
}

func (dmsip *DataprocMetastoreServiceIamPolicy) LocalName() string {
	return dmsip.Name
}

func (dmsip *DataprocMetastoreServiceIamPolicy) Configuration() interface{} {
	return dmsip.Args
}

func (dmsip *DataprocMetastoreServiceIamPolicy) Attributes() dataprocMetastoreServiceIamPolicyAttributes {
	return dataprocMetastoreServiceIamPolicyAttributes{ref: terra.ReferenceResource(dmsip)}
}

func (dmsip *DataprocMetastoreServiceIamPolicy) ImportState(av io.Reader) error {
	dmsip.state = &dataprocMetastoreServiceIamPolicyState{}
	if err := json.NewDecoder(av).Decode(dmsip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dmsip.Type(), dmsip.LocalName(), err)
	}
	return nil
}

func (dmsip *DataprocMetastoreServiceIamPolicy) State() (*dataprocMetastoreServiceIamPolicyState, bool) {
	return dmsip.state, dmsip.state != nil
}

func (dmsip *DataprocMetastoreServiceIamPolicy) StateMust() *dataprocMetastoreServiceIamPolicyState {
	if dmsip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dmsip.Type(), dmsip.LocalName()))
	}
	return dmsip.state
}

func (dmsip *DataprocMetastoreServiceIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(dmsip)
}

type DataprocMetastoreServiceIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceId: string, required
	ServiceId terra.StringValue `hcl:"service_id,attr" validate:"required"`
	// DependsOn contains resources that DataprocMetastoreServiceIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataprocMetastoreServiceIamPolicyAttributes struct {
	ref terra.Reference
}

func (dmsip dataprocMetastoreServiceIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dmsip.ref.Append("etag"))
}

func (dmsip dataprocMetastoreServiceIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dmsip.ref.Append("id"))
}

func (dmsip dataprocMetastoreServiceIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dmsip.ref.Append("location"))
}

func (dmsip dataprocMetastoreServiceIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(dmsip.ref.Append("policy_data"))
}

func (dmsip dataprocMetastoreServiceIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dmsip.ref.Append("project"))
}

func (dmsip dataprocMetastoreServiceIamPolicyAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceString(dmsip.ref.Append("service_id"))
}

type dataprocMetastoreServiceIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Location   string `json:"location"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	ServiceId  string `json:"service_id"`
}
