// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	appenginedomainmapping "github.com/golingon/terraproviders/google/4.59.0/appenginedomainmapping"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppEngineDomainMapping(name string, args AppEngineDomainMappingArgs) *AppEngineDomainMapping {
	return &AppEngineDomainMapping{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppEngineDomainMapping)(nil)

type AppEngineDomainMapping struct {
	Name  string
	Args  AppEngineDomainMappingArgs
	state *appEngineDomainMappingState
}

func (aedm *AppEngineDomainMapping) Type() string {
	return "google_app_engine_domain_mapping"
}

func (aedm *AppEngineDomainMapping) LocalName() string {
	return aedm.Name
}

func (aedm *AppEngineDomainMapping) Configuration() interface{} {
	return aedm.Args
}

func (aedm *AppEngineDomainMapping) Attributes() appEngineDomainMappingAttributes {
	return appEngineDomainMappingAttributes{ref: terra.ReferenceResource(aedm)}
}

func (aedm *AppEngineDomainMapping) ImportState(av io.Reader) error {
	aedm.state = &appEngineDomainMappingState{}
	if err := json.NewDecoder(av).Decode(aedm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aedm.Type(), aedm.LocalName(), err)
	}
	return nil
}

func (aedm *AppEngineDomainMapping) State() (*appEngineDomainMappingState, bool) {
	return aedm.state, aedm.state != nil
}

func (aedm *AppEngineDomainMapping) StateMust() *appEngineDomainMappingState {
	if aedm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aedm.Type(), aedm.LocalName()))
	}
	return aedm.state
}

func (aedm *AppEngineDomainMapping) DependOn() terra.Reference {
	return terra.ReferenceResource(aedm)
}

type AppEngineDomainMappingArgs struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OverrideStrategy: string, optional
	OverrideStrategy terra.StringValue `hcl:"override_strategy,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ResourceRecords: min=0
	ResourceRecords []appenginedomainmapping.ResourceRecords `hcl:"resource_records,block" validate:"min=0"`
	// SslSettings: optional
	SslSettings *appenginedomainmapping.SslSettings `hcl:"ssl_settings,block"`
	// Timeouts: optional
	Timeouts *appenginedomainmapping.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AppEngineDomainMapping depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appEngineDomainMappingAttributes struct {
	ref terra.Reference
}

func (aedm appEngineDomainMappingAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(aedm.ref.Append("domain_name"))
}

func (aedm appEngineDomainMappingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aedm.ref.Append("id"))
}

func (aedm appEngineDomainMappingAttributes) Name() terra.StringValue {
	return terra.ReferenceString(aedm.ref.Append("name"))
}

func (aedm appEngineDomainMappingAttributes) OverrideStrategy() terra.StringValue {
	return terra.ReferenceString(aedm.ref.Append("override_strategy"))
}

func (aedm appEngineDomainMappingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(aedm.ref.Append("project"))
}

func (aedm appEngineDomainMappingAttributes) ResourceRecords() terra.ListValue[appenginedomainmapping.ResourceRecordsAttributes] {
	return terra.ReferenceList[appenginedomainmapping.ResourceRecordsAttributes](aedm.ref.Append("resource_records"))
}

func (aedm appEngineDomainMappingAttributes) SslSettings() terra.ListValue[appenginedomainmapping.SslSettingsAttributes] {
	return terra.ReferenceList[appenginedomainmapping.SslSettingsAttributes](aedm.ref.Append("ssl_settings"))
}

func (aedm appEngineDomainMappingAttributes) Timeouts() appenginedomainmapping.TimeoutsAttributes {
	return terra.ReferenceSingle[appenginedomainmapping.TimeoutsAttributes](aedm.ref.Append("timeouts"))
}

type appEngineDomainMappingState struct {
	DomainName       string                                        `json:"domain_name"`
	Id               string                                        `json:"id"`
	Name             string                                        `json:"name"`
	OverrideStrategy string                                        `json:"override_strategy"`
	Project          string                                        `json:"project"`
	ResourceRecords  []appenginedomainmapping.ResourceRecordsState `json:"resource_records"`
	SslSettings      []appenginedomainmapping.SslSettingsState     `json:"ssl_settings"`
	Timeouts         *appenginedomainmapping.TimeoutsState         `json:"timeouts"`
}
