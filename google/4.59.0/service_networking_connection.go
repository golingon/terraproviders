// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	servicenetworkingconnection "github.com/golingon/terraproviders/google/4.59.0/servicenetworkingconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServiceNetworkingConnection(name string, args ServiceNetworkingConnectionArgs) *ServiceNetworkingConnection {
	return &ServiceNetworkingConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServiceNetworkingConnection)(nil)

type ServiceNetworkingConnection struct {
	Name  string
	Args  ServiceNetworkingConnectionArgs
	state *serviceNetworkingConnectionState
}

func (snc *ServiceNetworkingConnection) Type() string {
	return "google_service_networking_connection"
}

func (snc *ServiceNetworkingConnection) LocalName() string {
	return snc.Name
}

func (snc *ServiceNetworkingConnection) Configuration() interface{} {
	return snc.Args
}

func (snc *ServiceNetworkingConnection) Attributes() serviceNetworkingConnectionAttributes {
	return serviceNetworkingConnectionAttributes{ref: terra.ReferenceResource(snc)}
}

func (snc *ServiceNetworkingConnection) ImportState(av io.Reader) error {
	snc.state = &serviceNetworkingConnectionState{}
	if err := json.NewDecoder(av).Decode(snc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", snc.Type(), snc.LocalName(), err)
	}
	return nil
}

func (snc *ServiceNetworkingConnection) State() (*serviceNetworkingConnectionState, bool) {
	return snc.state, snc.state != nil
}

func (snc *ServiceNetworkingConnection) StateMust() *serviceNetworkingConnectionState {
	if snc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", snc.Type(), snc.LocalName()))
	}
	return snc.state
}

func (snc *ServiceNetworkingConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(snc)
}

type ServiceNetworkingConnectionArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// ReservedPeeringRanges: list of string, required
	ReservedPeeringRanges terra.ListValue[terra.StringValue] `hcl:"reserved_peering_ranges,attr" validate:"required"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *servicenetworkingconnection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServiceNetworkingConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type serviceNetworkingConnectionAttributes struct {
	ref terra.Reference
}

func (snc serviceNetworkingConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(snc.ref.Append("id"))
}

func (snc serviceNetworkingConnectionAttributes) Network() terra.StringValue {
	return terra.ReferenceString(snc.ref.Append("network"))
}

func (snc serviceNetworkingConnectionAttributes) Peering() terra.StringValue {
	return terra.ReferenceString(snc.ref.Append("peering"))
}

func (snc serviceNetworkingConnectionAttributes) ReservedPeeringRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](snc.ref.Append("reserved_peering_ranges"))
}

func (snc serviceNetworkingConnectionAttributes) Service() terra.StringValue {
	return terra.ReferenceString(snc.ref.Append("service"))
}

func (snc serviceNetworkingConnectionAttributes) Timeouts() servicenetworkingconnection.TimeoutsAttributes {
	return terra.ReferenceSingle[servicenetworkingconnection.TimeoutsAttributes](snc.ref.Append("timeouts"))
}

type serviceNetworkingConnectionState struct {
	Id                    string                                     `json:"id"`
	Network               string                                     `json:"network"`
	Peering               string                                     `json:"peering"`
	ReservedPeeringRanges []string                                   `json:"reserved_peering_ranges"`
	Service               string                                     `json:"service"`
	Timeouts              *servicenetworkingconnection.TimeoutsState `json:"timeouts"`
}
