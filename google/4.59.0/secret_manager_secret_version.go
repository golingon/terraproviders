// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	secretmanagersecretversion "github.com/golingon/terraproviders/google/4.59.0/secretmanagersecretversion"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecretManagerSecretVersion(name string, args SecretManagerSecretVersionArgs) *SecretManagerSecretVersion {
	return &SecretManagerSecretVersion{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecretManagerSecretVersion)(nil)

type SecretManagerSecretVersion struct {
	Name  string
	Args  SecretManagerSecretVersionArgs
	state *secretManagerSecretVersionState
}

func (smsv *SecretManagerSecretVersion) Type() string {
	return "google_secret_manager_secret_version"
}

func (smsv *SecretManagerSecretVersion) LocalName() string {
	return smsv.Name
}

func (smsv *SecretManagerSecretVersion) Configuration() interface{} {
	return smsv.Args
}

func (smsv *SecretManagerSecretVersion) Attributes() secretManagerSecretVersionAttributes {
	return secretManagerSecretVersionAttributes{ref: terra.ReferenceResource(smsv)}
}

func (smsv *SecretManagerSecretVersion) ImportState(av io.Reader) error {
	smsv.state = &secretManagerSecretVersionState{}
	if err := json.NewDecoder(av).Decode(smsv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", smsv.Type(), smsv.LocalName(), err)
	}
	return nil
}

func (smsv *SecretManagerSecretVersion) State() (*secretManagerSecretVersionState, bool) {
	return smsv.state, smsv.state != nil
}

func (smsv *SecretManagerSecretVersion) StateMust() *secretManagerSecretVersionState {
	if smsv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", smsv.Type(), smsv.LocalName()))
	}
	return smsv.state
}

func (smsv *SecretManagerSecretVersion) DependOn() terra.Reference {
	return terra.ReferenceResource(smsv)
}

type SecretManagerSecretVersionArgs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
	// SecretData: string, required
	SecretData terra.StringValue `hcl:"secret_data,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *secretmanagersecretversion.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SecretManagerSecretVersion depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type secretManagerSecretVersionAttributes struct {
	ref terra.Reference
}

func (smsv secretManagerSecretVersionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(smsv.ref.Append("create_time"))
}

func (smsv secretManagerSecretVersionAttributes) DestroyTime() terra.StringValue {
	return terra.ReferenceString(smsv.ref.Append("destroy_time"))
}

func (smsv secretManagerSecretVersionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(smsv.ref.Append("enabled"))
}

func (smsv secretManagerSecretVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(smsv.ref.Append("id"))
}

func (smsv secretManagerSecretVersionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(smsv.ref.Append("name"))
}

func (smsv secretManagerSecretVersionAttributes) Secret() terra.StringValue {
	return terra.ReferenceString(smsv.ref.Append("secret"))
}

func (smsv secretManagerSecretVersionAttributes) SecretData() terra.StringValue {
	return terra.ReferenceString(smsv.ref.Append("secret_data"))
}

func (smsv secretManagerSecretVersionAttributes) Version() terra.StringValue {
	return terra.ReferenceString(smsv.ref.Append("version"))
}

func (smsv secretManagerSecretVersionAttributes) Timeouts() secretmanagersecretversion.TimeoutsAttributes {
	return terra.ReferenceSingle[secretmanagersecretversion.TimeoutsAttributes](smsv.ref.Append("timeouts"))
}

type secretManagerSecretVersionState struct {
	CreateTime  string                                    `json:"create_time"`
	DestroyTime string                                    `json:"destroy_time"`
	Enabled     bool                                      `json:"enabled"`
	Id          string                                    `json:"id"`
	Name        string                                    `json:"name"`
	Secret      string                                    `json:"secret"`
	SecretData  string                                    `json:"secret_data"`
	Version     string                                    `json:"version"`
	Timeouts    *secretmanagersecretversion.TimeoutsState `json:"timeouts"`
}
