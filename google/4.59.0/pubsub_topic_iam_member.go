// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	pubsubtopiciammember "github.com/golingon/terraproviders/google/4.59.0/pubsubtopiciammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPubsubTopicIamMember(name string, args PubsubTopicIamMemberArgs) *PubsubTopicIamMember {
	return &PubsubTopicIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PubsubTopicIamMember)(nil)

type PubsubTopicIamMember struct {
	Name  string
	Args  PubsubTopicIamMemberArgs
	state *pubsubTopicIamMemberState
}

func (ptim *PubsubTopicIamMember) Type() string {
	return "google_pubsub_topic_iam_member"
}

func (ptim *PubsubTopicIamMember) LocalName() string {
	return ptim.Name
}

func (ptim *PubsubTopicIamMember) Configuration() interface{} {
	return ptim.Args
}

func (ptim *PubsubTopicIamMember) Attributes() pubsubTopicIamMemberAttributes {
	return pubsubTopicIamMemberAttributes{ref: terra.ReferenceResource(ptim)}
}

func (ptim *PubsubTopicIamMember) ImportState(av io.Reader) error {
	ptim.state = &pubsubTopicIamMemberState{}
	if err := json.NewDecoder(av).Decode(ptim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ptim.Type(), ptim.LocalName(), err)
	}
	return nil
}

func (ptim *PubsubTopicIamMember) State() (*pubsubTopicIamMemberState, bool) {
	return ptim.state, ptim.state != nil
}

func (ptim *PubsubTopicIamMember) StateMust() *pubsubTopicIamMemberState {
	if ptim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ptim.Type(), ptim.LocalName()))
	}
	return ptim.state
}

func (ptim *PubsubTopicIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(ptim)
}

type PubsubTopicIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
	// Condition: optional
	Condition *pubsubtopiciammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that PubsubTopicIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type pubsubTopicIamMemberAttributes struct {
	ref terra.Reference
}

func (ptim pubsubTopicIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ptim.ref.Append("etag"))
}

func (ptim pubsubTopicIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ptim.ref.Append("id"))
}

func (ptim pubsubTopicIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(ptim.ref.Append("member"))
}

func (ptim pubsubTopicIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ptim.ref.Append("project"))
}

func (ptim pubsubTopicIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(ptim.ref.Append("role"))
}

func (ptim pubsubTopicIamMemberAttributes) Topic() terra.StringValue {
	return terra.ReferenceString(ptim.ref.Append("topic"))
}

func (ptim pubsubTopicIamMemberAttributes) Condition() terra.ListValue[pubsubtopiciammember.ConditionAttributes] {
	return terra.ReferenceList[pubsubtopiciammember.ConditionAttributes](ptim.ref.Append("condition"))
}

type pubsubTopicIamMemberState struct {
	Etag      string                                `json:"etag"`
	Id        string                                `json:"id"`
	Member    string                                `json:"member"`
	Project   string                                `json:"project"`
	Role      string                                `json:"role"`
	Topic     string                                `json:"topic"`
	Condition []pubsubtopiciammember.ConditionState `json:"condition"`
}
