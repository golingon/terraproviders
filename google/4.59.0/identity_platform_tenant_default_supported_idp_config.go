// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	identityplatformtenantdefaultsupportedidpconfig "github.com/golingon/terraproviders/google/4.59.0/identityplatformtenantdefaultsupportedidpconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIdentityPlatformTenantDefaultSupportedIdpConfig(name string, args IdentityPlatformTenantDefaultSupportedIdpConfigArgs) *IdentityPlatformTenantDefaultSupportedIdpConfig {
	return &IdentityPlatformTenantDefaultSupportedIdpConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IdentityPlatformTenantDefaultSupportedIdpConfig)(nil)

type IdentityPlatformTenantDefaultSupportedIdpConfig struct {
	Name  string
	Args  IdentityPlatformTenantDefaultSupportedIdpConfigArgs
	state *identityPlatformTenantDefaultSupportedIdpConfigState
}

func (iptdsic *IdentityPlatformTenantDefaultSupportedIdpConfig) Type() string {
	return "google_identity_platform_tenant_default_supported_idp_config"
}

func (iptdsic *IdentityPlatformTenantDefaultSupportedIdpConfig) LocalName() string {
	return iptdsic.Name
}

func (iptdsic *IdentityPlatformTenantDefaultSupportedIdpConfig) Configuration() interface{} {
	return iptdsic.Args
}

func (iptdsic *IdentityPlatformTenantDefaultSupportedIdpConfig) Attributes() identityPlatformTenantDefaultSupportedIdpConfigAttributes {
	return identityPlatformTenantDefaultSupportedIdpConfigAttributes{ref: terra.ReferenceResource(iptdsic)}
}

func (iptdsic *IdentityPlatformTenantDefaultSupportedIdpConfig) ImportState(av io.Reader) error {
	iptdsic.state = &identityPlatformTenantDefaultSupportedIdpConfigState{}
	if err := json.NewDecoder(av).Decode(iptdsic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iptdsic.Type(), iptdsic.LocalName(), err)
	}
	return nil
}

func (iptdsic *IdentityPlatformTenantDefaultSupportedIdpConfig) State() (*identityPlatformTenantDefaultSupportedIdpConfigState, bool) {
	return iptdsic.state, iptdsic.state != nil
}

func (iptdsic *IdentityPlatformTenantDefaultSupportedIdpConfig) StateMust() *identityPlatformTenantDefaultSupportedIdpConfigState {
	if iptdsic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iptdsic.Type(), iptdsic.LocalName()))
	}
	return iptdsic.state
}

func (iptdsic *IdentityPlatformTenantDefaultSupportedIdpConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(iptdsic)
}

type IdentityPlatformTenantDefaultSupportedIdpConfigArgs struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, required
	ClientSecret terra.StringValue `hcl:"client_secret,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdpId: string, required
	IdpId terra.StringValue `hcl:"idp_id,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Tenant: string, required
	Tenant terra.StringValue `hcl:"tenant,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *identityplatformtenantdefaultsupportedidpconfig.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IdentityPlatformTenantDefaultSupportedIdpConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type identityPlatformTenantDefaultSupportedIdpConfigAttributes struct {
	ref terra.Reference
}

func (iptdsic identityPlatformTenantDefaultSupportedIdpConfigAttributes) ClientId() terra.StringValue {
	return terra.ReferenceString(iptdsic.ref.Append("client_id"))
}

func (iptdsic identityPlatformTenantDefaultSupportedIdpConfigAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceString(iptdsic.ref.Append("client_secret"))
}

func (iptdsic identityPlatformTenantDefaultSupportedIdpConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(iptdsic.ref.Append("enabled"))
}

func (iptdsic identityPlatformTenantDefaultSupportedIdpConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iptdsic.ref.Append("id"))
}

func (iptdsic identityPlatformTenantDefaultSupportedIdpConfigAttributes) IdpId() terra.StringValue {
	return terra.ReferenceString(iptdsic.ref.Append("idp_id"))
}

func (iptdsic identityPlatformTenantDefaultSupportedIdpConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceString(iptdsic.ref.Append("name"))
}

func (iptdsic identityPlatformTenantDefaultSupportedIdpConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceString(iptdsic.ref.Append("project"))
}

func (iptdsic identityPlatformTenantDefaultSupportedIdpConfigAttributes) Tenant() terra.StringValue {
	return terra.ReferenceString(iptdsic.ref.Append("tenant"))
}

func (iptdsic identityPlatformTenantDefaultSupportedIdpConfigAttributes) Timeouts() identityplatformtenantdefaultsupportedidpconfig.TimeoutsAttributes {
	return terra.ReferenceSingle[identityplatformtenantdefaultsupportedidpconfig.TimeoutsAttributes](iptdsic.ref.Append("timeouts"))
}

type identityPlatformTenantDefaultSupportedIdpConfigState struct {
	ClientId     string                                                         `json:"client_id"`
	ClientSecret string                                                         `json:"client_secret"`
	Enabled      bool                                                           `json:"enabled"`
	Id           string                                                         `json:"id"`
	IdpId        string                                                         `json:"idp_id"`
	Name         string                                                         `json:"name"`
	Project      string                                                         `json:"project"`
	Tenant       string                                                         `json:"tenant"`
	Timeouts     *identityplatformtenantdefaultsupportedidpconfig.TimeoutsState `json:"timeouts"`
}
