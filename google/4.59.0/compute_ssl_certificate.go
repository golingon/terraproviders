// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computesslcertificate "github.com/golingon/terraproviders/google/4.59.0/computesslcertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeSslCertificate(name string, args ComputeSslCertificateArgs) *ComputeSslCertificate {
	return &ComputeSslCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeSslCertificate)(nil)

type ComputeSslCertificate struct {
	Name  string
	Args  ComputeSslCertificateArgs
	state *computeSslCertificateState
}

func (csc *ComputeSslCertificate) Type() string {
	return "google_compute_ssl_certificate"
}

func (csc *ComputeSslCertificate) LocalName() string {
	return csc.Name
}

func (csc *ComputeSslCertificate) Configuration() interface{} {
	return csc.Args
}

func (csc *ComputeSslCertificate) Attributes() computeSslCertificateAttributes {
	return computeSslCertificateAttributes{ref: terra.ReferenceResource(csc)}
}

func (csc *ComputeSslCertificate) ImportState(av io.Reader) error {
	csc.state = &computeSslCertificateState{}
	if err := json.NewDecoder(av).Decode(csc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csc.Type(), csc.LocalName(), err)
	}
	return nil
}

func (csc *ComputeSslCertificate) State() (*computeSslCertificateState, bool) {
	return csc.state, csc.state != nil
}

func (csc *ComputeSslCertificate) StateMust() *computeSslCertificateState {
	if csc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csc.Type(), csc.LocalName()))
	}
	return csc.state
}

func (csc *ComputeSslCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(csc)
}

type ComputeSslCertificateArgs struct {
	// Certificate: string, required
	Certificate terra.StringValue `hcl:"certificate,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// PrivateKey: string, required
	PrivateKey terra.StringValue `hcl:"private_key,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *computesslcertificate.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeSslCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeSslCertificateAttributes struct {
	ref terra.Reference
}

func (csc computeSslCertificateAttributes) Certificate() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("certificate"))
}

func (csc computeSslCertificateAttributes) CertificateId() terra.NumberValue {
	return terra.ReferenceNumber(csc.ref.Append("certificate_id"))
}

func (csc computeSslCertificateAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("creation_timestamp"))
}

func (csc computeSslCertificateAttributes) Description() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("description"))
}

func (csc computeSslCertificateAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("expire_time"))
}

func (csc computeSslCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("id"))
}

func (csc computeSslCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("name"))
}

func (csc computeSslCertificateAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("name_prefix"))
}

func (csc computeSslCertificateAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("private_key"))
}

func (csc computeSslCertificateAttributes) Project() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("project"))
}

func (csc computeSslCertificateAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("self_link"))
}

func (csc computeSslCertificateAttributes) Timeouts() computesslcertificate.TimeoutsAttributes {
	return terra.ReferenceSingle[computesslcertificate.TimeoutsAttributes](csc.ref.Append("timeouts"))
}

type computeSslCertificateState struct {
	Certificate       string                               `json:"certificate"`
	CertificateId     float64                              `json:"certificate_id"`
	CreationTimestamp string                               `json:"creation_timestamp"`
	Description       string                               `json:"description"`
	ExpireTime        string                               `json:"expire_time"`
	Id                string                               `json:"id"`
	Name              string                               `json:"name"`
	NamePrefix        string                               `json:"name_prefix"`
	PrivateKey        string                               `json:"private_key"`
	Project           string                               `json:"project"`
	SelfLink          string                               `json:"self_link"`
	Timeouts          *computesslcertificate.TimeoutsState `json:"timeouts"`
}
