// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeprojectdefaultnetworktier "github.com/golingon/terraproviders/google/4.59.0/computeprojectdefaultnetworktier"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeProjectDefaultNetworkTier(name string, args ComputeProjectDefaultNetworkTierArgs) *ComputeProjectDefaultNetworkTier {
	return &ComputeProjectDefaultNetworkTier{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeProjectDefaultNetworkTier)(nil)

type ComputeProjectDefaultNetworkTier struct {
	Name  string
	Args  ComputeProjectDefaultNetworkTierArgs
	state *computeProjectDefaultNetworkTierState
}

func (cpdnt *ComputeProjectDefaultNetworkTier) Type() string {
	return "google_compute_project_default_network_tier"
}

func (cpdnt *ComputeProjectDefaultNetworkTier) LocalName() string {
	return cpdnt.Name
}

func (cpdnt *ComputeProjectDefaultNetworkTier) Configuration() interface{} {
	return cpdnt.Args
}

func (cpdnt *ComputeProjectDefaultNetworkTier) Attributes() computeProjectDefaultNetworkTierAttributes {
	return computeProjectDefaultNetworkTierAttributes{ref: terra.ReferenceResource(cpdnt)}
}

func (cpdnt *ComputeProjectDefaultNetworkTier) ImportState(av io.Reader) error {
	cpdnt.state = &computeProjectDefaultNetworkTierState{}
	if err := json.NewDecoder(av).Decode(cpdnt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cpdnt.Type(), cpdnt.LocalName(), err)
	}
	return nil
}

func (cpdnt *ComputeProjectDefaultNetworkTier) State() (*computeProjectDefaultNetworkTierState, bool) {
	return cpdnt.state, cpdnt.state != nil
}

func (cpdnt *ComputeProjectDefaultNetworkTier) StateMust() *computeProjectDefaultNetworkTierState {
	if cpdnt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cpdnt.Type(), cpdnt.LocalName()))
	}
	return cpdnt.state
}

func (cpdnt *ComputeProjectDefaultNetworkTier) DependOn() terra.Reference {
	return terra.ReferenceResource(cpdnt)
}

type ComputeProjectDefaultNetworkTierArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetworkTier: string, required
	NetworkTier terra.StringValue `hcl:"network_tier,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *computeprojectdefaultnetworktier.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeProjectDefaultNetworkTier depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeProjectDefaultNetworkTierAttributes struct {
	ref terra.Reference
}

func (cpdnt computeProjectDefaultNetworkTierAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cpdnt.ref.Append("id"))
}

func (cpdnt computeProjectDefaultNetworkTierAttributes) NetworkTier() terra.StringValue {
	return terra.ReferenceString(cpdnt.ref.Append("network_tier"))
}

func (cpdnt computeProjectDefaultNetworkTierAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cpdnt.ref.Append("project"))
}

func (cpdnt computeProjectDefaultNetworkTierAttributes) Timeouts() computeprojectdefaultnetworktier.TimeoutsAttributes {
	return terra.ReferenceSingle[computeprojectdefaultnetworktier.TimeoutsAttributes](cpdnt.ref.Append("timeouts"))
}

type computeProjectDefaultNetworkTierState struct {
	Id          string                                          `json:"id"`
	NetworkTier string                                          `json:"network_tier"`
	Project     string                                          `json:"project"`
	Timeouts    *computeprojectdefaultnetworktier.TimeoutsState `json:"timeouts"`
}
