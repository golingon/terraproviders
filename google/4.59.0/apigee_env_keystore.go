// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	apigeeenvkeystore "github.com/golingon/terraproviders/google/4.59.0/apigeeenvkeystore"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApigeeEnvKeystore(name string, args ApigeeEnvKeystoreArgs) *ApigeeEnvKeystore {
	return &ApigeeEnvKeystore{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApigeeEnvKeystore)(nil)

type ApigeeEnvKeystore struct {
	Name  string
	Args  ApigeeEnvKeystoreArgs
	state *apigeeEnvKeystoreState
}

func (aek *ApigeeEnvKeystore) Type() string {
	return "google_apigee_env_keystore"
}

func (aek *ApigeeEnvKeystore) LocalName() string {
	return aek.Name
}

func (aek *ApigeeEnvKeystore) Configuration() interface{} {
	return aek.Args
}

func (aek *ApigeeEnvKeystore) Attributes() apigeeEnvKeystoreAttributes {
	return apigeeEnvKeystoreAttributes{ref: terra.ReferenceResource(aek)}
}

func (aek *ApigeeEnvKeystore) ImportState(av io.Reader) error {
	aek.state = &apigeeEnvKeystoreState{}
	if err := json.NewDecoder(av).Decode(aek.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aek.Type(), aek.LocalName(), err)
	}
	return nil
}

func (aek *ApigeeEnvKeystore) State() (*apigeeEnvKeystoreState, bool) {
	return aek.state, aek.state != nil
}

func (aek *ApigeeEnvKeystore) StateMust() *apigeeEnvKeystoreState {
	if aek.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aek.Type(), aek.LocalName()))
	}
	return aek.state
}

func (aek *ApigeeEnvKeystore) DependOn() terra.Reference {
	return terra.ReferenceResource(aek)
}

type ApigeeEnvKeystoreArgs struct {
	// EnvId: string, required
	EnvId terra.StringValue `hcl:"env_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Timeouts: optional
	Timeouts *apigeeenvkeystore.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApigeeEnvKeystore depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apigeeEnvKeystoreAttributes struct {
	ref terra.Reference
}

func (aek apigeeEnvKeystoreAttributes) Aliases() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](aek.ref.Append("aliases"))
}

func (aek apigeeEnvKeystoreAttributes) EnvId() terra.StringValue {
	return terra.ReferenceString(aek.ref.Append("env_id"))
}

func (aek apigeeEnvKeystoreAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aek.ref.Append("id"))
}

func (aek apigeeEnvKeystoreAttributes) Name() terra.StringValue {
	return terra.ReferenceString(aek.ref.Append("name"))
}

func (aek apigeeEnvKeystoreAttributes) Timeouts() apigeeenvkeystore.TimeoutsAttributes {
	return terra.ReferenceSingle[apigeeenvkeystore.TimeoutsAttributes](aek.ref.Append("timeouts"))
}

type apigeeEnvKeystoreState struct {
	Aliases  []string                         `json:"aliases"`
	EnvId    string                           `json:"env_id"`
	Id       string                           `json:"id"`
	Name     string                           `json:"name"`
	Timeouts *apigeeenvkeystore.TimeoutsState `json:"timeouts"`
}
