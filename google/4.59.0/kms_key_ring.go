// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	kmskeyring "github.com/golingon/terraproviders/google/4.59.0/kmskeyring"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKmsKeyRing(name string, args KmsKeyRingArgs) *KmsKeyRing {
	return &KmsKeyRing{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KmsKeyRing)(nil)

type KmsKeyRing struct {
	Name  string
	Args  KmsKeyRingArgs
	state *kmsKeyRingState
}

func (kkr *KmsKeyRing) Type() string {
	return "google_kms_key_ring"
}

func (kkr *KmsKeyRing) LocalName() string {
	return kkr.Name
}

func (kkr *KmsKeyRing) Configuration() interface{} {
	return kkr.Args
}

func (kkr *KmsKeyRing) Attributes() kmsKeyRingAttributes {
	return kmsKeyRingAttributes{ref: terra.ReferenceResource(kkr)}
}

func (kkr *KmsKeyRing) ImportState(av io.Reader) error {
	kkr.state = &kmsKeyRingState{}
	if err := json.NewDecoder(av).Decode(kkr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kkr.Type(), kkr.LocalName(), err)
	}
	return nil
}

func (kkr *KmsKeyRing) State() (*kmsKeyRingState, bool) {
	return kkr.state, kkr.state != nil
}

func (kkr *KmsKeyRing) StateMust() *kmsKeyRingState {
	if kkr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kkr.Type(), kkr.LocalName()))
	}
	return kkr.state
}

func (kkr *KmsKeyRing) DependOn() terra.Reference {
	return terra.ReferenceResource(kkr)
}

type KmsKeyRingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *kmskeyring.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that KmsKeyRing depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kmsKeyRingAttributes struct {
	ref terra.Reference
}

func (kkr kmsKeyRingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kkr.ref.Append("id"))
}

func (kkr kmsKeyRingAttributes) Location() terra.StringValue {
	return terra.ReferenceString(kkr.ref.Append("location"))
}

func (kkr kmsKeyRingAttributes) Name() terra.StringValue {
	return terra.ReferenceString(kkr.ref.Append("name"))
}

func (kkr kmsKeyRingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(kkr.ref.Append("project"))
}

func (kkr kmsKeyRingAttributes) Timeouts() kmskeyring.TimeoutsAttributes {
	return terra.ReferenceSingle[kmskeyring.TimeoutsAttributes](kkr.ref.Append("timeouts"))
}

type kmsKeyRingState struct {
	Id       string                    `json:"id"`
	Location string                    `json:"location"`
	Name     string                    `json:"name"`
	Project  string                    `json:"project"`
	Timeouts *kmskeyring.TimeoutsState `json:"timeouts"`
}
