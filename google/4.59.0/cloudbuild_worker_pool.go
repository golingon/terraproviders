// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	cloudbuildworkerpool "github.com/golingon/terraproviders/google/4.59.0/cloudbuildworkerpool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudbuildWorkerPool(name string, args CloudbuildWorkerPoolArgs) *CloudbuildWorkerPool {
	return &CloudbuildWorkerPool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudbuildWorkerPool)(nil)

type CloudbuildWorkerPool struct {
	Name  string
	Args  CloudbuildWorkerPoolArgs
	state *cloudbuildWorkerPoolState
}

func (cwp *CloudbuildWorkerPool) Type() string {
	return "google_cloudbuild_worker_pool"
}

func (cwp *CloudbuildWorkerPool) LocalName() string {
	return cwp.Name
}

func (cwp *CloudbuildWorkerPool) Configuration() interface{} {
	return cwp.Args
}

func (cwp *CloudbuildWorkerPool) Attributes() cloudbuildWorkerPoolAttributes {
	return cloudbuildWorkerPoolAttributes{ref: terra.ReferenceResource(cwp)}
}

func (cwp *CloudbuildWorkerPool) ImportState(av io.Reader) error {
	cwp.state = &cloudbuildWorkerPoolState{}
	if err := json.NewDecoder(av).Decode(cwp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cwp.Type(), cwp.LocalName(), err)
	}
	return nil
}

func (cwp *CloudbuildWorkerPool) State() (*cloudbuildWorkerPoolState, bool) {
	return cwp.state, cwp.state != nil
}

func (cwp *CloudbuildWorkerPool) StateMust() *cloudbuildWorkerPoolState {
	if cwp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cwp.Type(), cwp.LocalName()))
	}
	return cwp.state
}

func (cwp *CloudbuildWorkerPool) DependOn() terra.Reference {
	return terra.ReferenceResource(cwp)
}

type CloudbuildWorkerPoolArgs struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// NetworkConfig: optional
	NetworkConfig *cloudbuildworkerpool.NetworkConfig `hcl:"network_config,block"`
	// Timeouts: optional
	Timeouts *cloudbuildworkerpool.Timeouts `hcl:"timeouts,block"`
	// WorkerConfig: optional
	WorkerConfig *cloudbuildworkerpool.WorkerConfig `hcl:"worker_config,block"`
	// DependsOn contains resources that CloudbuildWorkerPool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudbuildWorkerPoolAttributes struct {
	ref terra.Reference
}

func (cwp cloudbuildWorkerPoolAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cwp.ref.Append("annotations"))
}

func (cwp cloudbuildWorkerPoolAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(cwp.ref.Append("create_time"))
}

func (cwp cloudbuildWorkerPoolAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceString(cwp.ref.Append("delete_time"))
}

func (cwp cloudbuildWorkerPoolAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(cwp.ref.Append("display_name"))
}

func (cwp cloudbuildWorkerPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cwp.ref.Append("id"))
}

func (cwp cloudbuildWorkerPoolAttributes) Location() terra.StringValue {
	return terra.ReferenceString(cwp.ref.Append("location"))
}

func (cwp cloudbuildWorkerPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cwp.ref.Append("name"))
}

func (cwp cloudbuildWorkerPoolAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cwp.ref.Append("project"))
}

func (cwp cloudbuildWorkerPoolAttributes) State() terra.StringValue {
	return terra.ReferenceString(cwp.ref.Append("state"))
}

func (cwp cloudbuildWorkerPoolAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(cwp.ref.Append("uid"))
}

func (cwp cloudbuildWorkerPoolAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(cwp.ref.Append("update_time"))
}

func (cwp cloudbuildWorkerPoolAttributes) NetworkConfig() terra.ListValue[cloudbuildworkerpool.NetworkConfigAttributes] {
	return terra.ReferenceList[cloudbuildworkerpool.NetworkConfigAttributes](cwp.ref.Append("network_config"))
}

func (cwp cloudbuildWorkerPoolAttributes) Timeouts() cloudbuildworkerpool.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudbuildworkerpool.TimeoutsAttributes](cwp.ref.Append("timeouts"))
}

func (cwp cloudbuildWorkerPoolAttributes) WorkerConfig() terra.ListValue[cloudbuildworkerpool.WorkerConfigAttributes] {
	return terra.ReferenceList[cloudbuildworkerpool.WorkerConfigAttributes](cwp.ref.Append("worker_config"))
}

type cloudbuildWorkerPoolState struct {
	Annotations   map[string]string                         `json:"annotations"`
	CreateTime    string                                    `json:"create_time"`
	DeleteTime    string                                    `json:"delete_time"`
	DisplayName   string                                    `json:"display_name"`
	Id            string                                    `json:"id"`
	Location      string                                    `json:"location"`
	Name          string                                    `json:"name"`
	Project       string                                    `json:"project"`
	State         string                                    `json:"state"`
	Uid           string                                    `json:"uid"`
	UpdateTime    string                                    `json:"update_time"`
	NetworkConfig []cloudbuildworkerpool.NetworkConfigState `json:"network_config"`
	Timeouts      *cloudbuildworkerpool.TimeoutsState       `json:"timeouts"`
	WorkerConfig  []cloudbuildworkerpool.WorkerConfigState  `json:"worker_config"`
}
