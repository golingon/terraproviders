// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	datacatalogtagtemplate "github.com/golingon/terraproviders/google/4.59.0/datacatalogtagtemplate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataCatalogTagTemplate(name string, args DataCatalogTagTemplateArgs) *DataCatalogTagTemplate {
	return &DataCatalogTagTemplate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataCatalogTagTemplate)(nil)

type DataCatalogTagTemplate struct {
	Name  string
	Args  DataCatalogTagTemplateArgs
	state *dataCatalogTagTemplateState
}

func (dctt *DataCatalogTagTemplate) Type() string {
	return "google_data_catalog_tag_template"
}

func (dctt *DataCatalogTagTemplate) LocalName() string {
	return dctt.Name
}

func (dctt *DataCatalogTagTemplate) Configuration() interface{} {
	return dctt.Args
}

func (dctt *DataCatalogTagTemplate) Attributes() dataCatalogTagTemplateAttributes {
	return dataCatalogTagTemplateAttributes{ref: terra.ReferenceResource(dctt)}
}

func (dctt *DataCatalogTagTemplate) ImportState(av io.Reader) error {
	dctt.state = &dataCatalogTagTemplateState{}
	if err := json.NewDecoder(av).Decode(dctt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dctt.Type(), dctt.LocalName(), err)
	}
	return nil
}

func (dctt *DataCatalogTagTemplate) State() (*dataCatalogTagTemplateState, bool) {
	return dctt.state, dctt.state != nil
}

func (dctt *DataCatalogTagTemplate) StateMust() *dataCatalogTagTemplateState {
	if dctt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dctt.Type(), dctt.LocalName()))
	}
	return dctt.state
}

func (dctt *DataCatalogTagTemplate) DependOn() terra.Reference {
	return terra.ReferenceResource(dctt)
}

type DataCatalogTagTemplateArgs struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// ForceDelete: bool, optional
	ForceDelete terra.BoolValue `hcl:"force_delete,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// TagTemplateId: string, required
	TagTemplateId terra.StringValue `hcl:"tag_template_id,attr" validate:"required"`
	// Fields: min=1
	Fields []datacatalogtagtemplate.Fields `hcl:"fields,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *datacatalogtagtemplate.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataCatalogTagTemplate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataCatalogTagTemplateAttributes struct {
	ref terra.Reference
}

func (dctt dataCatalogTagTemplateAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(dctt.ref.Append("display_name"))
}

func (dctt dataCatalogTagTemplateAttributes) ForceDelete() terra.BoolValue {
	return terra.ReferenceBool(dctt.ref.Append("force_delete"))
}

func (dctt dataCatalogTagTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dctt.ref.Append("id"))
}

func (dctt dataCatalogTagTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dctt.ref.Append("name"))
}

func (dctt dataCatalogTagTemplateAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dctt.ref.Append("project"))
}

func (dctt dataCatalogTagTemplateAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dctt.ref.Append("region"))
}

func (dctt dataCatalogTagTemplateAttributes) TagTemplateId() terra.StringValue {
	return terra.ReferenceString(dctt.ref.Append("tag_template_id"))
}

func (dctt dataCatalogTagTemplateAttributes) Fields() terra.SetValue[datacatalogtagtemplate.FieldsAttributes] {
	return terra.ReferenceSet[datacatalogtagtemplate.FieldsAttributes](dctt.ref.Append("fields"))
}

func (dctt dataCatalogTagTemplateAttributes) Timeouts() datacatalogtagtemplate.TimeoutsAttributes {
	return terra.ReferenceSingle[datacatalogtagtemplate.TimeoutsAttributes](dctt.ref.Append("timeouts"))
}

type dataCatalogTagTemplateState struct {
	DisplayName   string                                `json:"display_name"`
	ForceDelete   bool                                  `json:"force_delete"`
	Id            string                                `json:"id"`
	Name          string                                `json:"name"`
	Project       string                                `json:"project"`
	Region        string                                `json:"region"`
	TagTemplateId string                                `json:"tag_template_id"`
	Fields        []datacatalogtagtemplate.FieldsState  `json:"fields"`
	Timeouts      *datacatalogtagtemplate.TimeoutsState `json:"timeouts"`
}
