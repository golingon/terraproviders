// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServiceAccountIamPolicy(name string, args ServiceAccountIamPolicyArgs) *ServiceAccountIamPolicy {
	return &ServiceAccountIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServiceAccountIamPolicy)(nil)

type ServiceAccountIamPolicy struct {
	Name  string
	Args  ServiceAccountIamPolicyArgs
	state *serviceAccountIamPolicyState
}

func (saip *ServiceAccountIamPolicy) Type() string {
	return "google_service_account_iam_policy"
}

func (saip *ServiceAccountIamPolicy) LocalName() string {
	return saip.Name
}

func (saip *ServiceAccountIamPolicy) Configuration() interface{} {
	return saip.Args
}

func (saip *ServiceAccountIamPolicy) Attributes() serviceAccountIamPolicyAttributes {
	return serviceAccountIamPolicyAttributes{ref: terra.ReferenceResource(saip)}
}

func (saip *ServiceAccountIamPolicy) ImportState(av io.Reader) error {
	saip.state = &serviceAccountIamPolicyState{}
	if err := json.NewDecoder(av).Decode(saip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", saip.Type(), saip.LocalName(), err)
	}
	return nil
}

func (saip *ServiceAccountIamPolicy) State() (*serviceAccountIamPolicyState, bool) {
	return saip.state, saip.state != nil
}

func (saip *ServiceAccountIamPolicy) StateMust() *serviceAccountIamPolicyState {
	if saip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", saip.Type(), saip.LocalName()))
	}
	return saip.state
}

func (saip *ServiceAccountIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(saip)
}

type ServiceAccountIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// ServiceAccountId: string, required
	ServiceAccountId terra.StringValue `hcl:"service_account_id,attr" validate:"required"`
	// DependsOn contains resources that ServiceAccountIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type serviceAccountIamPolicyAttributes struct {
	ref terra.Reference
}

func (saip serviceAccountIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(saip.ref.Append("etag"))
}

func (saip serviceAccountIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(saip.ref.Append("id"))
}

func (saip serviceAccountIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(saip.ref.Append("policy_data"))
}

func (saip serviceAccountIamPolicyAttributes) ServiceAccountId() terra.StringValue {
	return terra.ReferenceString(saip.ref.Append("service_account_id"))
}

type serviceAccountIamPolicyState struct {
	Etag             string `json:"etag"`
	Id               string `json:"id"`
	PolicyData       string `json:"policy_data"`
	ServiceAccountId string `json:"service_account_id"`
}
