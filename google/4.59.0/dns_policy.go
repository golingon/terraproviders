// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dnspolicy "github.com/golingon/terraproviders/google/4.59.0/dnspolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDnsPolicy(name string, args DnsPolicyArgs) *DnsPolicy {
	return &DnsPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DnsPolicy)(nil)

type DnsPolicy struct {
	Name  string
	Args  DnsPolicyArgs
	state *dnsPolicyState
}

func (dp *DnsPolicy) Type() string {
	return "google_dns_policy"
}

func (dp *DnsPolicy) LocalName() string {
	return dp.Name
}

func (dp *DnsPolicy) Configuration() interface{} {
	return dp.Args
}

func (dp *DnsPolicy) Attributes() dnsPolicyAttributes {
	return dnsPolicyAttributes{ref: terra.ReferenceResource(dp)}
}

func (dp *DnsPolicy) ImportState(av io.Reader) error {
	dp.state = &dnsPolicyState{}
	if err := json.NewDecoder(av).Decode(dp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dp.Type(), dp.LocalName(), err)
	}
	return nil
}

func (dp *DnsPolicy) State() (*dnsPolicyState, bool) {
	return dp.state, dp.state != nil
}

func (dp *DnsPolicy) StateMust() *dnsPolicyState {
	if dp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dp.Type(), dp.LocalName()))
	}
	return dp.state
}

func (dp *DnsPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(dp)
}

type DnsPolicyArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnableInboundForwarding: bool, optional
	EnableInboundForwarding terra.BoolValue `hcl:"enable_inbound_forwarding,attr"`
	// EnableLogging: bool, optional
	EnableLogging terra.BoolValue `hcl:"enable_logging,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// AlternativeNameServerConfig: optional
	AlternativeNameServerConfig *dnspolicy.AlternativeNameServerConfig `hcl:"alternative_name_server_config,block"`
	// Networks: min=0
	Networks []dnspolicy.Networks `hcl:"networks,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dnspolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DnsPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dnsPolicyAttributes struct {
	ref terra.Reference
}

func (dp dnsPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("description"))
}

func (dp dnsPolicyAttributes) EnableInboundForwarding() terra.BoolValue {
	return terra.ReferenceBool(dp.ref.Append("enable_inbound_forwarding"))
}

func (dp dnsPolicyAttributes) EnableLogging() terra.BoolValue {
	return terra.ReferenceBool(dp.ref.Append("enable_logging"))
}

func (dp dnsPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("id"))
}

func (dp dnsPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("name"))
}

func (dp dnsPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("project"))
}

func (dp dnsPolicyAttributes) AlternativeNameServerConfig() terra.ListValue[dnspolicy.AlternativeNameServerConfigAttributes] {
	return terra.ReferenceList[dnspolicy.AlternativeNameServerConfigAttributes](dp.ref.Append("alternative_name_server_config"))
}

func (dp dnsPolicyAttributes) Networks() terra.SetValue[dnspolicy.NetworksAttributes] {
	return terra.ReferenceSet[dnspolicy.NetworksAttributes](dp.ref.Append("networks"))
}

func (dp dnsPolicyAttributes) Timeouts() dnspolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[dnspolicy.TimeoutsAttributes](dp.ref.Append("timeouts"))
}

type dnsPolicyState struct {
	Description                 string                                       `json:"description"`
	EnableInboundForwarding     bool                                         `json:"enable_inbound_forwarding"`
	EnableLogging               bool                                         `json:"enable_logging"`
	Id                          string                                       `json:"id"`
	Name                        string                                       `json:"name"`
	Project                     string                                       `json:"project"`
	AlternativeNameServerConfig []dnspolicy.AlternativeNameServerConfigState `json:"alternative_name_server_config"`
	Networks                    []dnspolicy.NetworksState                    `json:"networks"`
	Timeouts                    *dnspolicy.TimeoutsState                     `json:"timeouts"`
}
