// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewHealthcareDicomStoreIamPolicy(name string, args HealthcareDicomStoreIamPolicyArgs) *HealthcareDicomStoreIamPolicy {
	return &HealthcareDicomStoreIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HealthcareDicomStoreIamPolicy)(nil)

type HealthcareDicomStoreIamPolicy struct {
	Name  string
	Args  HealthcareDicomStoreIamPolicyArgs
	state *healthcareDicomStoreIamPolicyState
}

func (hdsip *HealthcareDicomStoreIamPolicy) Type() string {
	return "google_healthcare_dicom_store_iam_policy"
}

func (hdsip *HealthcareDicomStoreIamPolicy) LocalName() string {
	return hdsip.Name
}

func (hdsip *HealthcareDicomStoreIamPolicy) Configuration() interface{} {
	return hdsip.Args
}

func (hdsip *HealthcareDicomStoreIamPolicy) Attributes() healthcareDicomStoreIamPolicyAttributes {
	return healthcareDicomStoreIamPolicyAttributes{ref: terra.ReferenceResource(hdsip)}
}

func (hdsip *HealthcareDicomStoreIamPolicy) ImportState(av io.Reader) error {
	hdsip.state = &healthcareDicomStoreIamPolicyState{}
	if err := json.NewDecoder(av).Decode(hdsip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hdsip.Type(), hdsip.LocalName(), err)
	}
	return nil
}

func (hdsip *HealthcareDicomStoreIamPolicy) State() (*healthcareDicomStoreIamPolicyState, bool) {
	return hdsip.state, hdsip.state != nil
}

func (hdsip *HealthcareDicomStoreIamPolicy) StateMust() *healthcareDicomStoreIamPolicyState {
	if hdsip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hdsip.Type(), hdsip.LocalName()))
	}
	return hdsip.state
}

func (hdsip *HealthcareDicomStoreIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(hdsip)
}

type HealthcareDicomStoreIamPolicyArgs struct {
	// DicomStoreId: string, required
	DicomStoreId terra.StringValue `hcl:"dicom_store_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// DependsOn contains resources that HealthcareDicomStoreIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type healthcareDicomStoreIamPolicyAttributes struct {
	ref terra.Reference
}

func (hdsip healthcareDicomStoreIamPolicyAttributes) DicomStoreId() terra.StringValue {
	return terra.ReferenceString(hdsip.ref.Append("dicom_store_id"))
}

func (hdsip healthcareDicomStoreIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(hdsip.ref.Append("etag"))
}

func (hdsip healthcareDicomStoreIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(hdsip.ref.Append("id"))
}

func (hdsip healthcareDicomStoreIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(hdsip.ref.Append("policy_data"))
}

type healthcareDicomStoreIamPolicyState struct {
	DicomStoreId string `json:"dicom_store_id"`
	Etag         string `json:"etag"`
	Id           string `json:"id"`
	PolicyData   string `json:"policy_data"`
}
