// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	certificatemanagercertificatemapentry "github.com/golingon/terraproviders/google/4.59.0/certificatemanagercertificatemapentry"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCertificateManagerCertificateMapEntry(name string, args CertificateManagerCertificateMapEntryArgs) *CertificateManagerCertificateMapEntry {
	return &CertificateManagerCertificateMapEntry{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CertificateManagerCertificateMapEntry)(nil)

type CertificateManagerCertificateMapEntry struct {
	Name  string
	Args  CertificateManagerCertificateMapEntryArgs
	state *certificateManagerCertificateMapEntryState
}

func (cmcme *CertificateManagerCertificateMapEntry) Type() string {
	return "google_certificate_manager_certificate_map_entry"
}

func (cmcme *CertificateManagerCertificateMapEntry) LocalName() string {
	return cmcme.Name
}

func (cmcme *CertificateManagerCertificateMapEntry) Configuration() interface{} {
	return cmcme.Args
}

func (cmcme *CertificateManagerCertificateMapEntry) Attributes() certificateManagerCertificateMapEntryAttributes {
	return certificateManagerCertificateMapEntryAttributes{ref: terra.ReferenceResource(cmcme)}
}

func (cmcme *CertificateManagerCertificateMapEntry) ImportState(av io.Reader) error {
	cmcme.state = &certificateManagerCertificateMapEntryState{}
	if err := json.NewDecoder(av).Decode(cmcme.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cmcme.Type(), cmcme.LocalName(), err)
	}
	return nil
}

func (cmcme *CertificateManagerCertificateMapEntry) State() (*certificateManagerCertificateMapEntryState, bool) {
	return cmcme.state, cmcme.state != nil
}

func (cmcme *CertificateManagerCertificateMapEntry) StateMust() *certificateManagerCertificateMapEntryState {
	if cmcme.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cmcme.Type(), cmcme.LocalName()))
	}
	return cmcme.state
}

func (cmcme *CertificateManagerCertificateMapEntry) DependOn() terra.Reference {
	return terra.ReferenceResource(cmcme)
}

type CertificateManagerCertificateMapEntryArgs struct {
	// Certificates: list of string, required
	Certificates terra.ListValue[terra.StringValue] `hcl:"certificates,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Hostname: string, optional
	Hostname terra.StringValue `hcl:"hostname,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Map: string, required
	Map terra.StringValue `hcl:"map,attr" validate:"required"`
	// Matcher: string, optional
	Matcher terra.StringValue `hcl:"matcher,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *certificatemanagercertificatemapentry.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CertificateManagerCertificateMapEntry depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type certificateManagerCertificateMapEntryAttributes struct {
	ref terra.Reference
}

func (cmcme certificateManagerCertificateMapEntryAttributes) Certificates() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cmcme.ref.Append("certificates"))
}

func (cmcme certificateManagerCertificateMapEntryAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(cmcme.ref.Append("create_time"))
}

func (cmcme certificateManagerCertificateMapEntryAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cmcme.ref.Append("description"))
}

func (cmcme certificateManagerCertificateMapEntryAttributes) Hostname() terra.StringValue {
	return terra.ReferenceString(cmcme.ref.Append("hostname"))
}

func (cmcme certificateManagerCertificateMapEntryAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cmcme.ref.Append("id"))
}

func (cmcme certificateManagerCertificateMapEntryAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cmcme.ref.Append("labels"))
}

func (cmcme certificateManagerCertificateMapEntryAttributes) Map() terra.StringValue {
	return terra.ReferenceString(cmcme.ref.Append("map"))
}

func (cmcme certificateManagerCertificateMapEntryAttributes) Matcher() terra.StringValue {
	return terra.ReferenceString(cmcme.ref.Append("matcher"))
}

func (cmcme certificateManagerCertificateMapEntryAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cmcme.ref.Append("name"))
}

func (cmcme certificateManagerCertificateMapEntryAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cmcme.ref.Append("project"))
}

func (cmcme certificateManagerCertificateMapEntryAttributes) State() terra.StringValue {
	return terra.ReferenceString(cmcme.ref.Append("state"))
}

func (cmcme certificateManagerCertificateMapEntryAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(cmcme.ref.Append("update_time"))
}

func (cmcme certificateManagerCertificateMapEntryAttributes) Timeouts() certificatemanagercertificatemapentry.TimeoutsAttributes {
	return terra.ReferenceSingle[certificatemanagercertificatemapentry.TimeoutsAttributes](cmcme.ref.Append("timeouts"))
}

type certificateManagerCertificateMapEntryState struct {
	Certificates []string                                             `json:"certificates"`
	CreateTime   string                                               `json:"create_time"`
	Description  string                                               `json:"description"`
	Hostname     string                                               `json:"hostname"`
	Id           string                                               `json:"id"`
	Labels       map[string]string                                    `json:"labels"`
	Map          string                                               `json:"map"`
	Matcher      string                                               `json:"matcher"`
	Name         string                                               `json:"name"`
	Project      string                                               `json:"project"`
	State        string                                               `json:"state"`
	UpdateTime   string                                               `json:"update_time"`
	Timeouts     *certificatemanagercertificatemapentry.TimeoutsState `json:"timeouts"`
}
