// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	redisinstance "github.com/golingon/terraproviders/google/4.59.0/redisinstance"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedisInstance(name string, args RedisInstanceArgs) *RedisInstance {
	return &RedisInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedisInstance)(nil)

type RedisInstance struct {
	Name  string
	Args  RedisInstanceArgs
	state *redisInstanceState
}

func (ri *RedisInstance) Type() string {
	return "google_redis_instance"
}

func (ri *RedisInstance) LocalName() string {
	return ri.Name
}

func (ri *RedisInstance) Configuration() interface{} {
	return ri.Args
}

func (ri *RedisInstance) Attributes() redisInstanceAttributes {
	return redisInstanceAttributes{ref: terra.ReferenceResource(ri)}
}

func (ri *RedisInstance) ImportState(av io.Reader) error {
	ri.state = &redisInstanceState{}
	if err := json.NewDecoder(av).Decode(ri.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ri.Type(), ri.LocalName(), err)
	}
	return nil
}

func (ri *RedisInstance) State() (*redisInstanceState, bool) {
	return ri.state, ri.state != nil
}

func (ri *RedisInstance) StateMust() *redisInstanceState {
	if ri.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ri.Type(), ri.LocalName()))
	}
	return ri.state
}

func (ri *RedisInstance) DependOn() terra.Reference {
	return terra.ReferenceResource(ri)
}

type RedisInstanceArgs struct {
	// AlternativeLocationId: string, optional
	AlternativeLocationId terra.StringValue `hcl:"alternative_location_id,attr"`
	// AuthEnabled: bool, optional
	AuthEnabled terra.BoolValue `hcl:"auth_enabled,attr"`
	// AuthorizedNetwork: string, optional
	AuthorizedNetwork terra.StringValue `hcl:"authorized_network,attr"`
	// ConnectMode: string, optional
	ConnectMode terra.StringValue `hcl:"connect_mode,attr"`
	// CustomerManagedKey: string, optional
	CustomerManagedKey terra.StringValue `hcl:"customer_managed_key,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LocationId: string, optional
	LocationId terra.StringValue `hcl:"location_id,attr"`
	// MemorySizeGb: number, required
	MemorySizeGb terra.NumberValue `hcl:"memory_size_gb,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ReadReplicasMode: string, optional
	ReadReplicasMode terra.StringValue `hcl:"read_replicas_mode,attr"`
	// RedisConfigs: map of string, optional
	RedisConfigs terra.MapValue[terra.StringValue] `hcl:"redis_configs,attr"`
	// RedisVersion: string, optional
	RedisVersion terra.StringValue `hcl:"redis_version,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ReplicaCount: number, optional
	ReplicaCount terra.NumberValue `hcl:"replica_count,attr"`
	// ReservedIpRange: string, optional
	ReservedIpRange terra.StringValue `hcl:"reserved_ip_range,attr"`
	// SecondaryIpRange: string, optional
	SecondaryIpRange terra.StringValue `hcl:"secondary_ip_range,attr"`
	// Tier: string, optional
	Tier terra.StringValue `hcl:"tier,attr"`
	// TransitEncryptionMode: string, optional
	TransitEncryptionMode terra.StringValue `hcl:"transit_encryption_mode,attr"`
	// Nodes: min=0
	Nodes []redisinstance.Nodes `hcl:"nodes,block" validate:"min=0"`
	// ServerCaCerts: min=0
	ServerCaCerts []redisinstance.ServerCaCerts `hcl:"server_ca_certs,block" validate:"min=0"`
	// MaintenancePolicy: optional
	MaintenancePolicy *redisinstance.MaintenancePolicy `hcl:"maintenance_policy,block"`
	// MaintenanceSchedule: optional
	MaintenanceSchedule *redisinstance.MaintenanceSchedule `hcl:"maintenance_schedule,block"`
	// PersistenceConfig: optional
	PersistenceConfig *redisinstance.PersistenceConfig `hcl:"persistence_config,block"`
	// Timeouts: optional
	Timeouts *redisinstance.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RedisInstance depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redisInstanceAttributes struct {
	ref terra.Reference
}

func (ri redisInstanceAttributes) AlternativeLocationId() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("alternative_location_id"))
}

func (ri redisInstanceAttributes) AuthEnabled() terra.BoolValue {
	return terra.ReferenceBool(ri.ref.Append("auth_enabled"))
}

func (ri redisInstanceAttributes) AuthString() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("auth_string"))
}

func (ri redisInstanceAttributes) AuthorizedNetwork() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("authorized_network"))
}

func (ri redisInstanceAttributes) ConnectMode() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("connect_mode"))
}

func (ri redisInstanceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("create_time"))
}

func (ri redisInstanceAttributes) CurrentLocationId() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("current_location_id"))
}

func (ri redisInstanceAttributes) CustomerManagedKey() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("customer_managed_key"))
}

func (ri redisInstanceAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("display_name"))
}

func (ri redisInstanceAttributes) Host() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("host"))
}

func (ri redisInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("id"))
}

func (ri redisInstanceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ri.ref.Append("labels"))
}

func (ri redisInstanceAttributes) LocationId() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("location_id"))
}

func (ri redisInstanceAttributes) MemorySizeGb() terra.NumberValue {
	return terra.ReferenceNumber(ri.ref.Append("memory_size_gb"))
}

func (ri redisInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("name"))
}

func (ri redisInstanceAttributes) PersistenceIamIdentity() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("persistence_iam_identity"))
}

func (ri redisInstanceAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(ri.ref.Append("port"))
}

func (ri redisInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("project"))
}

func (ri redisInstanceAttributes) ReadEndpoint() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("read_endpoint"))
}

func (ri redisInstanceAttributes) ReadEndpointPort() terra.NumberValue {
	return terra.ReferenceNumber(ri.ref.Append("read_endpoint_port"))
}

func (ri redisInstanceAttributes) ReadReplicasMode() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("read_replicas_mode"))
}

func (ri redisInstanceAttributes) RedisConfigs() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ri.ref.Append("redis_configs"))
}

func (ri redisInstanceAttributes) RedisVersion() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("redis_version"))
}

func (ri redisInstanceAttributes) Region() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("region"))
}

func (ri redisInstanceAttributes) ReplicaCount() terra.NumberValue {
	return terra.ReferenceNumber(ri.ref.Append("replica_count"))
}

func (ri redisInstanceAttributes) ReservedIpRange() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("reserved_ip_range"))
}

func (ri redisInstanceAttributes) SecondaryIpRange() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("secondary_ip_range"))
}

func (ri redisInstanceAttributes) Tier() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("tier"))
}

func (ri redisInstanceAttributes) TransitEncryptionMode() terra.StringValue {
	return terra.ReferenceString(ri.ref.Append("transit_encryption_mode"))
}

func (ri redisInstanceAttributes) Nodes() terra.ListValue[redisinstance.NodesAttributes] {
	return terra.ReferenceList[redisinstance.NodesAttributes](ri.ref.Append("nodes"))
}

func (ri redisInstanceAttributes) ServerCaCerts() terra.ListValue[redisinstance.ServerCaCertsAttributes] {
	return terra.ReferenceList[redisinstance.ServerCaCertsAttributes](ri.ref.Append("server_ca_certs"))
}

func (ri redisInstanceAttributes) MaintenancePolicy() terra.ListValue[redisinstance.MaintenancePolicyAttributes] {
	return terra.ReferenceList[redisinstance.MaintenancePolicyAttributes](ri.ref.Append("maintenance_policy"))
}

func (ri redisInstanceAttributes) MaintenanceSchedule() terra.ListValue[redisinstance.MaintenanceScheduleAttributes] {
	return terra.ReferenceList[redisinstance.MaintenanceScheduleAttributes](ri.ref.Append("maintenance_schedule"))
}

func (ri redisInstanceAttributes) PersistenceConfig() terra.ListValue[redisinstance.PersistenceConfigAttributes] {
	return terra.ReferenceList[redisinstance.PersistenceConfigAttributes](ri.ref.Append("persistence_config"))
}

func (ri redisInstanceAttributes) Timeouts() redisinstance.TimeoutsAttributes {
	return terra.ReferenceSingle[redisinstance.TimeoutsAttributes](ri.ref.Append("timeouts"))
}

type redisInstanceState struct {
	AlternativeLocationId  string                                   `json:"alternative_location_id"`
	AuthEnabled            bool                                     `json:"auth_enabled"`
	AuthString             string                                   `json:"auth_string"`
	AuthorizedNetwork      string                                   `json:"authorized_network"`
	ConnectMode            string                                   `json:"connect_mode"`
	CreateTime             string                                   `json:"create_time"`
	CurrentLocationId      string                                   `json:"current_location_id"`
	CustomerManagedKey     string                                   `json:"customer_managed_key"`
	DisplayName            string                                   `json:"display_name"`
	Host                   string                                   `json:"host"`
	Id                     string                                   `json:"id"`
	Labels                 map[string]string                        `json:"labels"`
	LocationId             string                                   `json:"location_id"`
	MemorySizeGb           float64                                  `json:"memory_size_gb"`
	Name                   string                                   `json:"name"`
	PersistenceIamIdentity string                                   `json:"persistence_iam_identity"`
	Port                   float64                                  `json:"port"`
	Project                string                                   `json:"project"`
	ReadEndpoint           string                                   `json:"read_endpoint"`
	ReadEndpointPort       float64                                  `json:"read_endpoint_port"`
	ReadReplicasMode       string                                   `json:"read_replicas_mode"`
	RedisConfigs           map[string]string                        `json:"redis_configs"`
	RedisVersion           string                                   `json:"redis_version"`
	Region                 string                                   `json:"region"`
	ReplicaCount           float64                                  `json:"replica_count"`
	ReservedIpRange        string                                   `json:"reserved_ip_range"`
	SecondaryIpRange       string                                   `json:"secondary_ip_range"`
	Tier                   string                                   `json:"tier"`
	TransitEncryptionMode  string                                   `json:"transit_encryption_mode"`
	Nodes                  []redisinstance.NodesState               `json:"nodes"`
	ServerCaCerts          []redisinstance.ServerCaCertsState       `json:"server_ca_certs"`
	MaintenancePolicy      []redisinstance.MaintenancePolicyState   `json:"maintenance_policy"`
	MaintenanceSchedule    []redisinstance.MaintenanceScheduleState `json:"maintenance_schedule"`
	PersistenceConfig      []redisinstance.PersistenceConfigState   `json:"persistence_config"`
	Timeouts               *redisinstance.TimeoutsState             `json:"timeouts"`
}
