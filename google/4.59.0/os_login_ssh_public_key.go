// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	osloginsshpublickey "github.com/golingon/terraproviders/google/4.59.0/osloginsshpublickey"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewOsLoginSshPublicKey(name string, args OsLoginSshPublicKeyArgs) *OsLoginSshPublicKey {
	return &OsLoginSshPublicKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OsLoginSshPublicKey)(nil)

type OsLoginSshPublicKey struct {
	Name  string
	Args  OsLoginSshPublicKeyArgs
	state *osLoginSshPublicKeyState
}

func (olspk *OsLoginSshPublicKey) Type() string {
	return "google_os_login_ssh_public_key"
}

func (olspk *OsLoginSshPublicKey) LocalName() string {
	return olspk.Name
}

func (olspk *OsLoginSshPublicKey) Configuration() interface{} {
	return olspk.Args
}

func (olspk *OsLoginSshPublicKey) Attributes() osLoginSshPublicKeyAttributes {
	return osLoginSshPublicKeyAttributes{ref: terra.ReferenceResource(olspk)}
}

func (olspk *OsLoginSshPublicKey) ImportState(av io.Reader) error {
	olspk.state = &osLoginSshPublicKeyState{}
	if err := json.NewDecoder(av).Decode(olspk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", olspk.Type(), olspk.LocalName(), err)
	}
	return nil
}

func (olspk *OsLoginSshPublicKey) State() (*osLoginSshPublicKeyState, bool) {
	return olspk.state, olspk.state != nil
}

func (olspk *OsLoginSshPublicKey) StateMust() *osLoginSshPublicKeyState {
	if olspk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", olspk.Type(), olspk.LocalName()))
	}
	return olspk.state
}

func (olspk *OsLoginSshPublicKey) DependOn() terra.Reference {
	return terra.ReferenceResource(olspk)
}

type OsLoginSshPublicKeyArgs struct {
	// ExpirationTimeUsec: string, optional
	ExpirationTimeUsec terra.StringValue `hcl:"expiration_time_usec,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// User: string, required
	User terra.StringValue `hcl:"user,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *osloginsshpublickey.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that OsLoginSshPublicKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type osLoginSshPublicKeyAttributes struct {
	ref terra.Reference
}

func (olspk osLoginSshPublicKeyAttributes) ExpirationTimeUsec() terra.StringValue {
	return terra.ReferenceString(olspk.ref.Append("expiration_time_usec"))
}

func (olspk osLoginSshPublicKeyAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceString(olspk.ref.Append("fingerprint"))
}

func (olspk osLoginSshPublicKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(olspk.ref.Append("id"))
}

func (olspk osLoginSshPublicKeyAttributes) Key() terra.StringValue {
	return terra.ReferenceString(olspk.ref.Append("key"))
}

func (olspk osLoginSshPublicKeyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(olspk.ref.Append("project"))
}

func (olspk osLoginSshPublicKeyAttributes) User() terra.StringValue {
	return terra.ReferenceString(olspk.ref.Append("user"))
}

func (olspk osLoginSshPublicKeyAttributes) Timeouts() osloginsshpublickey.TimeoutsAttributes {
	return terra.ReferenceSingle[osloginsshpublickey.TimeoutsAttributes](olspk.ref.Append("timeouts"))
}

type osLoginSshPublicKeyState struct {
	ExpirationTimeUsec string                             `json:"expiration_time_usec"`
	Fingerprint        string                             `json:"fingerprint"`
	Id                 string                             `json:"id"`
	Key                string                             `json:"key"`
	Project            string                             `json:"project"`
	User               string                             `json:"user"`
	Timeouts           *osloginsshpublickey.TimeoutsState `json:"timeouts"`
}
