// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	servicenetworkingpeereddnsdomain "github.com/golingon/terraproviders/google/4.59.0/servicenetworkingpeereddnsdomain"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServiceNetworkingPeeredDnsDomain(name string, args ServiceNetworkingPeeredDnsDomainArgs) *ServiceNetworkingPeeredDnsDomain {
	return &ServiceNetworkingPeeredDnsDomain{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServiceNetworkingPeeredDnsDomain)(nil)

type ServiceNetworkingPeeredDnsDomain struct {
	Name  string
	Args  ServiceNetworkingPeeredDnsDomainArgs
	state *serviceNetworkingPeeredDnsDomainState
}

func (snpdd *ServiceNetworkingPeeredDnsDomain) Type() string {
	return "google_service_networking_peered_dns_domain"
}

func (snpdd *ServiceNetworkingPeeredDnsDomain) LocalName() string {
	return snpdd.Name
}

func (snpdd *ServiceNetworkingPeeredDnsDomain) Configuration() interface{} {
	return snpdd.Args
}

func (snpdd *ServiceNetworkingPeeredDnsDomain) Attributes() serviceNetworkingPeeredDnsDomainAttributes {
	return serviceNetworkingPeeredDnsDomainAttributes{ref: terra.ReferenceResource(snpdd)}
}

func (snpdd *ServiceNetworkingPeeredDnsDomain) ImportState(av io.Reader) error {
	snpdd.state = &serviceNetworkingPeeredDnsDomainState{}
	if err := json.NewDecoder(av).Decode(snpdd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", snpdd.Type(), snpdd.LocalName(), err)
	}
	return nil
}

func (snpdd *ServiceNetworkingPeeredDnsDomain) State() (*serviceNetworkingPeeredDnsDomainState, bool) {
	return snpdd.state, snpdd.state != nil
}

func (snpdd *ServiceNetworkingPeeredDnsDomain) StateMust() *serviceNetworkingPeeredDnsDomainState {
	if snpdd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", snpdd.Type(), snpdd.LocalName()))
	}
	return snpdd.state
}

func (snpdd *ServiceNetworkingPeeredDnsDomain) DependOn() terra.Reference {
	return terra.ReferenceResource(snpdd)
}

type ServiceNetworkingPeeredDnsDomainArgs struct {
	// DnsSuffix: string, required
	DnsSuffix terra.StringValue `hcl:"dns_suffix,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
	// Timeouts: optional
	Timeouts *servicenetworkingpeereddnsdomain.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServiceNetworkingPeeredDnsDomain depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type serviceNetworkingPeeredDnsDomainAttributes struct {
	ref terra.Reference
}

func (snpdd serviceNetworkingPeeredDnsDomainAttributes) DnsSuffix() terra.StringValue {
	return terra.ReferenceString(snpdd.ref.Append("dns_suffix"))
}

func (snpdd serviceNetworkingPeeredDnsDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceString(snpdd.ref.Append("id"))
}

func (snpdd serviceNetworkingPeeredDnsDomainAttributes) Name() terra.StringValue {
	return terra.ReferenceString(snpdd.ref.Append("name"))
}

func (snpdd serviceNetworkingPeeredDnsDomainAttributes) Network() terra.StringValue {
	return terra.ReferenceString(snpdd.ref.Append("network"))
}

func (snpdd serviceNetworkingPeeredDnsDomainAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(snpdd.ref.Append("parent"))
}

func (snpdd serviceNetworkingPeeredDnsDomainAttributes) Project() terra.StringValue {
	return terra.ReferenceString(snpdd.ref.Append("project"))
}

func (snpdd serviceNetworkingPeeredDnsDomainAttributes) Service() terra.StringValue {
	return terra.ReferenceString(snpdd.ref.Append("service"))
}

func (snpdd serviceNetworkingPeeredDnsDomainAttributes) Timeouts() servicenetworkingpeereddnsdomain.TimeoutsAttributes {
	return terra.ReferenceSingle[servicenetworkingpeereddnsdomain.TimeoutsAttributes](snpdd.ref.Append("timeouts"))
}

type serviceNetworkingPeeredDnsDomainState struct {
	DnsSuffix string                                          `json:"dns_suffix"`
	Id        string                                          `json:"id"`
	Name      string                                          `json:"name"`
	Network   string                                          `json:"network"`
	Parent    string                                          `json:"parent"`
	Project   string                                          `json:"project"`
	Service   string                                          `json:"service"`
	Timeouts  *servicenetworkingpeereddnsdomain.TimeoutsState `json:"timeouts"`
}
