// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeregionurlmap "github.com/golingon/terraproviders/google/4.59.0/computeregionurlmap"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeRegionUrlMap(name string, args ComputeRegionUrlMapArgs) *ComputeRegionUrlMap {
	return &ComputeRegionUrlMap{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeRegionUrlMap)(nil)

type ComputeRegionUrlMap struct {
	Name  string
	Args  ComputeRegionUrlMapArgs
	state *computeRegionUrlMapState
}

func (crum *ComputeRegionUrlMap) Type() string {
	return "google_compute_region_url_map"
}

func (crum *ComputeRegionUrlMap) LocalName() string {
	return crum.Name
}

func (crum *ComputeRegionUrlMap) Configuration() interface{} {
	return crum.Args
}

func (crum *ComputeRegionUrlMap) Attributes() computeRegionUrlMapAttributes {
	return computeRegionUrlMapAttributes{ref: terra.ReferenceResource(crum)}
}

func (crum *ComputeRegionUrlMap) ImportState(av io.Reader) error {
	crum.state = &computeRegionUrlMapState{}
	if err := json.NewDecoder(av).Decode(crum.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crum.Type(), crum.LocalName(), err)
	}
	return nil
}

func (crum *ComputeRegionUrlMap) State() (*computeRegionUrlMapState, bool) {
	return crum.state, crum.state != nil
}

func (crum *ComputeRegionUrlMap) StateMust() *computeRegionUrlMapState {
	if crum.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crum.Type(), crum.LocalName()))
	}
	return crum.state
}

func (crum *ComputeRegionUrlMap) DependOn() terra.Reference {
	return terra.ReferenceResource(crum)
}

type ComputeRegionUrlMapArgs struct {
	// DefaultService: string, optional
	DefaultService terra.StringValue `hcl:"default_service,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// DefaultRouteAction: optional
	DefaultRouteAction *computeregionurlmap.DefaultRouteAction `hcl:"default_route_action,block"`
	// DefaultUrlRedirect: optional
	DefaultUrlRedirect *computeregionurlmap.DefaultUrlRedirect `hcl:"default_url_redirect,block"`
	// HostRule: min=0
	HostRule []computeregionurlmap.HostRule `hcl:"host_rule,block" validate:"min=0"`
	// PathMatcher: min=0
	PathMatcher []computeregionurlmap.PathMatcher `hcl:"path_matcher,block" validate:"min=0"`
	// Test: min=0
	Test []computeregionurlmap.Test `hcl:"test,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *computeregionurlmap.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeRegionUrlMap depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeRegionUrlMapAttributes struct {
	ref terra.Reference
}

func (crum computeRegionUrlMapAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(crum.ref.Append("creation_timestamp"))
}

func (crum computeRegionUrlMapAttributes) DefaultService() terra.StringValue {
	return terra.ReferenceString(crum.ref.Append("default_service"))
}

func (crum computeRegionUrlMapAttributes) Description() terra.StringValue {
	return terra.ReferenceString(crum.ref.Append("description"))
}

func (crum computeRegionUrlMapAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceString(crum.ref.Append("fingerprint"))
}

func (crum computeRegionUrlMapAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crum.ref.Append("id"))
}

func (crum computeRegionUrlMapAttributes) MapId() terra.NumberValue {
	return terra.ReferenceNumber(crum.ref.Append("map_id"))
}

func (crum computeRegionUrlMapAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crum.ref.Append("name"))
}

func (crum computeRegionUrlMapAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crum.ref.Append("project"))
}

func (crum computeRegionUrlMapAttributes) Region() terra.StringValue {
	return terra.ReferenceString(crum.ref.Append("region"))
}

func (crum computeRegionUrlMapAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(crum.ref.Append("self_link"))
}

func (crum computeRegionUrlMapAttributes) DefaultRouteAction() terra.ListValue[computeregionurlmap.DefaultRouteActionAttributes] {
	return terra.ReferenceList[computeregionurlmap.DefaultRouteActionAttributes](crum.ref.Append("default_route_action"))
}

func (crum computeRegionUrlMapAttributes) DefaultUrlRedirect() terra.ListValue[computeregionurlmap.DefaultUrlRedirectAttributes] {
	return terra.ReferenceList[computeregionurlmap.DefaultUrlRedirectAttributes](crum.ref.Append("default_url_redirect"))
}

func (crum computeRegionUrlMapAttributes) HostRule() terra.SetValue[computeregionurlmap.HostRuleAttributes] {
	return terra.ReferenceSet[computeregionurlmap.HostRuleAttributes](crum.ref.Append("host_rule"))
}

func (crum computeRegionUrlMapAttributes) PathMatcher() terra.ListValue[computeregionurlmap.PathMatcherAttributes] {
	return terra.ReferenceList[computeregionurlmap.PathMatcherAttributes](crum.ref.Append("path_matcher"))
}

func (crum computeRegionUrlMapAttributes) Test() terra.ListValue[computeregionurlmap.TestAttributes] {
	return terra.ReferenceList[computeregionurlmap.TestAttributes](crum.ref.Append("test"))
}

func (crum computeRegionUrlMapAttributes) Timeouts() computeregionurlmap.TimeoutsAttributes {
	return terra.ReferenceSingle[computeregionurlmap.TimeoutsAttributes](crum.ref.Append("timeouts"))
}

type computeRegionUrlMapState struct {
	CreationTimestamp  string                                        `json:"creation_timestamp"`
	DefaultService     string                                        `json:"default_service"`
	Description        string                                        `json:"description"`
	Fingerprint        string                                        `json:"fingerprint"`
	Id                 string                                        `json:"id"`
	MapId              float64                                       `json:"map_id"`
	Name               string                                        `json:"name"`
	Project            string                                        `json:"project"`
	Region             string                                        `json:"region"`
	SelfLink           string                                        `json:"self_link"`
	DefaultRouteAction []computeregionurlmap.DefaultRouteActionState `json:"default_route_action"`
	DefaultUrlRedirect []computeregionurlmap.DefaultUrlRedirectState `json:"default_url_redirect"`
	HostRule           []computeregionurlmap.HostRuleState           `json:"host_rule"`
	PathMatcher        []computeregionurlmap.PathMatcherState        `json:"path_matcher"`
	Test               []computeregionurlmap.TestState               `json:"test"`
	Timeouts           *computeregionurlmap.TimeoutsState            `json:"timeouts"`
}
