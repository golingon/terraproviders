// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dataplexzone "github.com/golingon/terraproviders/google/4.59.0/dataplexzone"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataplexZone(name string, args DataplexZoneArgs) *DataplexZone {
	return &DataplexZone{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataplexZone)(nil)

type DataplexZone struct {
	Name  string
	Args  DataplexZoneArgs
	state *dataplexZoneState
}

func (dz *DataplexZone) Type() string {
	return "google_dataplex_zone"
}

func (dz *DataplexZone) LocalName() string {
	return dz.Name
}

func (dz *DataplexZone) Configuration() interface{} {
	return dz.Args
}

func (dz *DataplexZone) Attributes() dataplexZoneAttributes {
	return dataplexZoneAttributes{ref: terra.ReferenceResource(dz)}
}

func (dz *DataplexZone) ImportState(av io.Reader) error {
	dz.state = &dataplexZoneState{}
	if err := json.NewDecoder(av).Decode(dz.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dz.Type(), dz.LocalName(), err)
	}
	return nil
}

func (dz *DataplexZone) State() (*dataplexZoneState, bool) {
	return dz.state, dz.state != nil
}

func (dz *DataplexZone) StateMust() *dataplexZoneState {
	if dz.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dz.Type(), dz.LocalName()))
	}
	return dz.state
}

func (dz *DataplexZone) DependOn() terra.Reference {
	return terra.ReferenceResource(dz)
}

type DataplexZoneArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Lake: string, required
	Lake terra.StringValue `hcl:"lake,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// AssetStatus: min=0
	AssetStatus []dataplexzone.AssetStatus `hcl:"asset_status,block" validate:"min=0"`
	// DiscoverySpec: required
	DiscoverySpec *dataplexzone.DiscoverySpec `hcl:"discovery_spec,block" validate:"required"`
	// ResourceSpec: required
	ResourceSpec *dataplexzone.ResourceSpec `hcl:"resource_spec,block" validate:"required"`
	// Timeouts: optional
	Timeouts *dataplexzone.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataplexZone depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataplexZoneAttributes struct {
	ref terra.Reference
}

func (dz dataplexZoneAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("create_time"))
}

func (dz dataplexZoneAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("description"))
}

func (dz dataplexZoneAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("display_name"))
}

func (dz dataplexZoneAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("id"))
}

func (dz dataplexZoneAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dz.ref.Append("labels"))
}

func (dz dataplexZoneAttributes) Lake() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("lake"))
}

func (dz dataplexZoneAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("location"))
}

func (dz dataplexZoneAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("name"))
}

func (dz dataplexZoneAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("project"))
}

func (dz dataplexZoneAttributes) State() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("state"))
}

func (dz dataplexZoneAttributes) Type() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("type"))
}

func (dz dataplexZoneAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("uid"))
}

func (dz dataplexZoneAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("update_time"))
}

func (dz dataplexZoneAttributes) AssetStatus() terra.ListValue[dataplexzone.AssetStatusAttributes] {
	return terra.ReferenceList[dataplexzone.AssetStatusAttributes](dz.ref.Append("asset_status"))
}

func (dz dataplexZoneAttributes) DiscoverySpec() terra.ListValue[dataplexzone.DiscoverySpecAttributes] {
	return terra.ReferenceList[dataplexzone.DiscoverySpecAttributes](dz.ref.Append("discovery_spec"))
}

func (dz dataplexZoneAttributes) ResourceSpec() terra.ListValue[dataplexzone.ResourceSpecAttributes] {
	return terra.ReferenceList[dataplexzone.ResourceSpecAttributes](dz.ref.Append("resource_spec"))
}

func (dz dataplexZoneAttributes) Timeouts() dataplexzone.TimeoutsAttributes {
	return terra.ReferenceSingle[dataplexzone.TimeoutsAttributes](dz.ref.Append("timeouts"))
}

type dataplexZoneState struct {
	CreateTime    string                            `json:"create_time"`
	Description   string                            `json:"description"`
	DisplayName   string                            `json:"display_name"`
	Id            string                            `json:"id"`
	Labels        map[string]string                 `json:"labels"`
	Lake          string                            `json:"lake"`
	Location      string                            `json:"location"`
	Name          string                            `json:"name"`
	Project       string                            `json:"project"`
	State         string                            `json:"state"`
	Type          string                            `json:"type"`
	Uid           string                            `json:"uid"`
	UpdateTime    string                            `json:"update_time"`
	AssetStatus   []dataplexzone.AssetStatusState   `json:"asset_status"`
	DiscoverySpec []dataplexzone.DiscoverySpecState `json:"discovery_spec"`
	ResourceSpec  []dataplexzone.ResourceSpecState  `json:"resource_spec"`
	Timeouts      *dataplexzone.TimeoutsState       `json:"timeouts"`
}
