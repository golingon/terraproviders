// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	monitoringuptimecheckconfig "github.com/golingon/terraproviders/google/4.59.0/monitoringuptimecheckconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitoringUptimeCheckConfig(name string, args MonitoringUptimeCheckConfigArgs) *MonitoringUptimeCheckConfig {
	return &MonitoringUptimeCheckConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitoringUptimeCheckConfig)(nil)

type MonitoringUptimeCheckConfig struct {
	Name  string
	Args  MonitoringUptimeCheckConfigArgs
	state *monitoringUptimeCheckConfigState
}

func (mucc *MonitoringUptimeCheckConfig) Type() string {
	return "google_monitoring_uptime_check_config"
}

func (mucc *MonitoringUptimeCheckConfig) LocalName() string {
	return mucc.Name
}

func (mucc *MonitoringUptimeCheckConfig) Configuration() interface{} {
	return mucc.Args
}

func (mucc *MonitoringUptimeCheckConfig) Attributes() monitoringUptimeCheckConfigAttributes {
	return monitoringUptimeCheckConfigAttributes{ref: terra.ReferenceResource(mucc)}
}

func (mucc *MonitoringUptimeCheckConfig) ImportState(av io.Reader) error {
	mucc.state = &monitoringUptimeCheckConfigState{}
	if err := json.NewDecoder(av).Decode(mucc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mucc.Type(), mucc.LocalName(), err)
	}
	return nil
}

func (mucc *MonitoringUptimeCheckConfig) State() (*monitoringUptimeCheckConfigState, bool) {
	return mucc.state, mucc.state != nil
}

func (mucc *MonitoringUptimeCheckConfig) StateMust() *monitoringUptimeCheckConfigState {
	if mucc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mucc.Type(), mucc.LocalName()))
	}
	return mucc.state
}

func (mucc *MonitoringUptimeCheckConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(mucc)
}

type MonitoringUptimeCheckConfigArgs struct {
	// CheckerType: string, optional
	CheckerType terra.StringValue `hcl:"checker_type,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Period: string, optional
	Period terra.StringValue `hcl:"period,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SelectedRegions: list of string, optional
	SelectedRegions terra.ListValue[terra.StringValue] `hcl:"selected_regions,attr"`
	// Timeout: string, required
	Timeout terra.StringValue `hcl:"timeout,attr" validate:"required"`
	// ContentMatchers: min=0
	ContentMatchers []monitoringuptimecheckconfig.ContentMatchers `hcl:"content_matchers,block" validate:"min=0"`
	// HttpCheck: optional
	HttpCheck *monitoringuptimecheckconfig.HttpCheck `hcl:"http_check,block"`
	// MonitoredResource: optional
	MonitoredResource *monitoringuptimecheckconfig.MonitoredResource `hcl:"monitored_resource,block"`
	// ResourceGroup: optional
	ResourceGroup *monitoringuptimecheckconfig.ResourceGroup `hcl:"resource_group,block"`
	// TcpCheck: optional
	TcpCheck *monitoringuptimecheckconfig.TcpCheck `hcl:"tcp_check,block"`
	// Timeouts: optional
	Timeouts *monitoringuptimecheckconfig.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MonitoringUptimeCheckConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitoringUptimeCheckConfigAttributes struct {
	ref terra.Reference
}

func (mucc monitoringUptimeCheckConfigAttributes) CheckerType() terra.StringValue {
	return terra.ReferenceString(mucc.ref.Append("checker_type"))
}

func (mucc monitoringUptimeCheckConfigAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(mucc.ref.Append("display_name"))
}

func (mucc monitoringUptimeCheckConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mucc.ref.Append("id"))
}

func (mucc monitoringUptimeCheckConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mucc.ref.Append("name"))
}

func (mucc monitoringUptimeCheckConfigAttributes) Period() terra.StringValue {
	return terra.ReferenceString(mucc.ref.Append("period"))
}

func (mucc monitoringUptimeCheckConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceString(mucc.ref.Append("project"))
}

func (mucc monitoringUptimeCheckConfigAttributes) SelectedRegions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](mucc.ref.Append("selected_regions"))
}

func (mucc monitoringUptimeCheckConfigAttributes) Timeout() terra.StringValue {
	return terra.ReferenceString(mucc.ref.Append("timeout"))
}

func (mucc monitoringUptimeCheckConfigAttributes) UptimeCheckId() terra.StringValue {
	return terra.ReferenceString(mucc.ref.Append("uptime_check_id"))
}

func (mucc monitoringUptimeCheckConfigAttributes) ContentMatchers() terra.ListValue[monitoringuptimecheckconfig.ContentMatchersAttributes] {
	return terra.ReferenceList[monitoringuptimecheckconfig.ContentMatchersAttributes](mucc.ref.Append("content_matchers"))
}

func (mucc monitoringUptimeCheckConfigAttributes) HttpCheck() terra.ListValue[monitoringuptimecheckconfig.HttpCheckAttributes] {
	return terra.ReferenceList[monitoringuptimecheckconfig.HttpCheckAttributes](mucc.ref.Append("http_check"))
}

func (mucc monitoringUptimeCheckConfigAttributes) MonitoredResource() terra.ListValue[monitoringuptimecheckconfig.MonitoredResourceAttributes] {
	return terra.ReferenceList[monitoringuptimecheckconfig.MonitoredResourceAttributes](mucc.ref.Append("monitored_resource"))
}

func (mucc monitoringUptimeCheckConfigAttributes) ResourceGroup() terra.ListValue[monitoringuptimecheckconfig.ResourceGroupAttributes] {
	return terra.ReferenceList[monitoringuptimecheckconfig.ResourceGroupAttributes](mucc.ref.Append("resource_group"))
}

func (mucc monitoringUptimeCheckConfigAttributes) TcpCheck() terra.ListValue[monitoringuptimecheckconfig.TcpCheckAttributes] {
	return terra.ReferenceList[monitoringuptimecheckconfig.TcpCheckAttributes](mucc.ref.Append("tcp_check"))
}

func (mucc monitoringUptimeCheckConfigAttributes) Timeouts() monitoringuptimecheckconfig.TimeoutsAttributes {
	return terra.ReferenceSingle[monitoringuptimecheckconfig.TimeoutsAttributes](mucc.ref.Append("timeouts"))
}

type monitoringUptimeCheckConfigState struct {
	CheckerType       string                                               `json:"checker_type"`
	DisplayName       string                                               `json:"display_name"`
	Id                string                                               `json:"id"`
	Name              string                                               `json:"name"`
	Period            string                                               `json:"period"`
	Project           string                                               `json:"project"`
	SelectedRegions   []string                                             `json:"selected_regions"`
	Timeout           string                                               `json:"timeout"`
	UptimeCheckId     string                                               `json:"uptime_check_id"`
	ContentMatchers   []monitoringuptimecheckconfig.ContentMatchersState   `json:"content_matchers"`
	HttpCheck         []monitoringuptimecheckconfig.HttpCheckState         `json:"http_check"`
	MonitoredResource []monitoringuptimecheckconfig.MonitoredResourceState `json:"monitored_resource"`
	ResourceGroup     []monitoringuptimecheckconfig.ResourceGroupState     `json:"resource_group"`
	TcpCheck          []monitoringuptimecheckconfig.TcpCheckState          `json:"tcp_check"`
	Timeouts          *monitoringuptimecheckconfig.TimeoutsState           `json:"timeouts"`
}
