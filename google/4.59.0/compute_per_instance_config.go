// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeperinstanceconfig "github.com/golingon/terraproviders/google/4.59.0/computeperinstanceconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputePerInstanceConfig(name string, args ComputePerInstanceConfigArgs) *ComputePerInstanceConfig {
	return &ComputePerInstanceConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputePerInstanceConfig)(nil)

type ComputePerInstanceConfig struct {
	Name  string
	Args  ComputePerInstanceConfigArgs
	state *computePerInstanceConfigState
}

func (cpic *ComputePerInstanceConfig) Type() string {
	return "google_compute_per_instance_config"
}

func (cpic *ComputePerInstanceConfig) LocalName() string {
	return cpic.Name
}

func (cpic *ComputePerInstanceConfig) Configuration() interface{} {
	return cpic.Args
}

func (cpic *ComputePerInstanceConfig) Attributes() computePerInstanceConfigAttributes {
	return computePerInstanceConfigAttributes{ref: terra.ReferenceResource(cpic)}
}

func (cpic *ComputePerInstanceConfig) ImportState(av io.Reader) error {
	cpic.state = &computePerInstanceConfigState{}
	if err := json.NewDecoder(av).Decode(cpic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cpic.Type(), cpic.LocalName(), err)
	}
	return nil
}

func (cpic *ComputePerInstanceConfig) State() (*computePerInstanceConfigState, bool) {
	return cpic.state, cpic.state != nil
}

func (cpic *ComputePerInstanceConfig) StateMust() *computePerInstanceConfigState {
	if cpic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cpic.Type(), cpic.LocalName()))
	}
	return cpic.state
}

func (cpic *ComputePerInstanceConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(cpic)
}

type ComputePerInstanceConfigArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceGroupManager: string, required
	InstanceGroupManager terra.StringValue `hcl:"instance_group_manager,attr" validate:"required"`
	// MinimalAction: string, optional
	MinimalAction terra.StringValue `hcl:"minimal_action,attr"`
	// MostDisruptiveAllowedAction: string, optional
	MostDisruptiveAllowedAction terra.StringValue `hcl:"most_disruptive_allowed_action,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RemoveInstanceStateOnDestroy: bool, optional
	RemoveInstanceStateOnDestroy terra.BoolValue `hcl:"remove_instance_state_on_destroy,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// PreservedState: optional
	PreservedState *computeperinstanceconfig.PreservedState `hcl:"preserved_state,block"`
	// Timeouts: optional
	Timeouts *computeperinstanceconfig.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputePerInstanceConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computePerInstanceConfigAttributes struct {
	ref terra.Reference
}

func (cpic computePerInstanceConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cpic.ref.Append("id"))
}

func (cpic computePerInstanceConfigAttributes) InstanceGroupManager() terra.StringValue {
	return terra.ReferenceString(cpic.ref.Append("instance_group_manager"))
}

func (cpic computePerInstanceConfigAttributes) MinimalAction() terra.StringValue {
	return terra.ReferenceString(cpic.ref.Append("minimal_action"))
}

func (cpic computePerInstanceConfigAttributes) MostDisruptiveAllowedAction() terra.StringValue {
	return terra.ReferenceString(cpic.ref.Append("most_disruptive_allowed_action"))
}

func (cpic computePerInstanceConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cpic.ref.Append("name"))
}

func (cpic computePerInstanceConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cpic.ref.Append("project"))
}

func (cpic computePerInstanceConfigAttributes) RemoveInstanceStateOnDestroy() terra.BoolValue {
	return terra.ReferenceBool(cpic.ref.Append("remove_instance_state_on_destroy"))
}

func (cpic computePerInstanceConfigAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(cpic.ref.Append("zone"))
}

func (cpic computePerInstanceConfigAttributes) PreservedState() terra.ListValue[computeperinstanceconfig.PreservedStateAttributes] {
	return terra.ReferenceList[computeperinstanceconfig.PreservedStateAttributes](cpic.ref.Append("preserved_state"))
}

func (cpic computePerInstanceConfigAttributes) Timeouts() computeperinstanceconfig.TimeoutsAttributes {
	return terra.ReferenceSingle[computeperinstanceconfig.TimeoutsAttributes](cpic.ref.Append("timeouts"))
}

type computePerInstanceConfigState struct {
	Id                           string                                         `json:"id"`
	InstanceGroupManager         string                                         `json:"instance_group_manager"`
	MinimalAction                string                                         `json:"minimal_action"`
	MostDisruptiveAllowedAction  string                                         `json:"most_disruptive_allowed_action"`
	Name                         string                                         `json:"name"`
	Project                      string                                         `json:"project"`
	RemoveInstanceStateOnDestroy bool                                           `json:"remove_instance_state_on_destroy"`
	Zone                         string                                         `json:"zone"`
	PreservedState               []computeperinstanceconfig.PreservedStateState `json:"preserved_state"`
	Timeouts                     *computeperinstanceconfig.TimeoutsState        `json:"timeouts"`
}
