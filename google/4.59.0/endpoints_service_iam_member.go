// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	endpointsserviceiammember "github.com/golingon/terraproviders/google/4.59.0/endpointsserviceiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEndpointsServiceIamMember(name string, args EndpointsServiceIamMemberArgs) *EndpointsServiceIamMember {
	return &EndpointsServiceIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EndpointsServiceIamMember)(nil)

type EndpointsServiceIamMember struct {
	Name  string
	Args  EndpointsServiceIamMemberArgs
	state *endpointsServiceIamMemberState
}

func (esim *EndpointsServiceIamMember) Type() string {
	return "google_endpoints_service_iam_member"
}

func (esim *EndpointsServiceIamMember) LocalName() string {
	return esim.Name
}

func (esim *EndpointsServiceIamMember) Configuration() interface{} {
	return esim.Args
}

func (esim *EndpointsServiceIamMember) Attributes() endpointsServiceIamMemberAttributes {
	return endpointsServiceIamMemberAttributes{ref: terra.ReferenceResource(esim)}
}

func (esim *EndpointsServiceIamMember) ImportState(av io.Reader) error {
	esim.state = &endpointsServiceIamMemberState{}
	if err := json.NewDecoder(av).Decode(esim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", esim.Type(), esim.LocalName(), err)
	}
	return nil
}

func (esim *EndpointsServiceIamMember) State() (*endpointsServiceIamMemberState, bool) {
	return esim.state, esim.state != nil
}

func (esim *EndpointsServiceIamMember) StateMust() *endpointsServiceIamMemberState {
	if esim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", esim.Type(), esim.LocalName()))
	}
	return esim.state
}

func (esim *EndpointsServiceIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(esim)
}

type EndpointsServiceIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
	// Condition: optional
	Condition *endpointsserviceiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that EndpointsServiceIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type endpointsServiceIamMemberAttributes struct {
	ref terra.Reference
}

func (esim endpointsServiceIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(esim.ref.Append("etag"))
}

func (esim endpointsServiceIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(esim.ref.Append("id"))
}

func (esim endpointsServiceIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(esim.ref.Append("member"))
}

func (esim endpointsServiceIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(esim.ref.Append("role"))
}

func (esim endpointsServiceIamMemberAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceString(esim.ref.Append("service_name"))
}

func (esim endpointsServiceIamMemberAttributes) Condition() terra.ListValue[endpointsserviceiammember.ConditionAttributes] {
	return terra.ReferenceList[endpointsserviceiammember.ConditionAttributes](esim.ref.Append("condition"))
}

type endpointsServiceIamMemberState struct {
	Etag        string                                     `json:"etag"`
	Id          string                                     `json:"id"`
	Member      string                                     `json:"member"`
	Role        string                                     `json:"role"`
	ServiceName string                                     `json:"service_name"`
	Condition   []endpointsserviceiammember.ConditionState `json:"condition"`
}
