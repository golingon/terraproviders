// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	billingaccountiambinding "github.com/golingon/terraproviders/google/4.59.0/billingaccountiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBillingAccountIamBinding(name string, args BillingAccountIamBindingArgs) *BillingAccountIamBinding {
	return &BillingAccountIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BillingAccountIamBinding)(nil)

type BillingAccountIamBinding struct {
	Name  string
	Args  BillingAccountIamBindingArgs
	state *billingAccountIamBindingState
}

func (baib *BillingAccountIamBinding) Type() string {
	return "google_billing_account_iam_binding"
}

func (baib *BillingAccountIamBinding) LocalName() string {
	return baib.Name
}

func (baib *BillingAccountIamBinding) Configuration() interface{} {
	return baib.Args
}

func (baib *BillingAccountIamBinding) Attributes() billingAccountIamBindingAttributes {
	return billingAccountIamBindingAttributes{ref: terra.ReferenceResource(baib)}
}

func (baib *BillingAccountIamBinding) ImportState(av io.Reader) error {
	baib.state = &billingAccountIamBindingState{}
	if err := json.NewDecoder(av).Decode(baib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", baib.Type(), baib.LocalName(), err)
	}
	return nil
}

func (baib *BillingAccountIamBinding) State() (*billingAccountIamBindingState, bool) {
	return baib.state, baib.state != nil
}

func (baib *BillingAccountIamBinding) StateMust() *billingAccountIamBindingState {
	if baib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", baib.Type(), baib.LocalName()))
	}
	return baib.state
}

func (baib *BillingAccountIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(baib)
}

type BillingAccountIamBindingArgs struct {
	// BillingAccountId: string, required
	BillingAccountId terra.StringValue `hcl:"billing_account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *billingaccountiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that BillingAccountIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type billingAccountIamBindingAttributes struct {
	ref terra.Reference
}

func (baib billingAccountIamBindingAttributes) BillingAccountId() terra.StringValue {
	return terra.ReferenceString(baib.ref.Append("billing_account_id"))
}

func (baib billingAccountIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(baib.ref.Append("etag"))
}

func (baib billingAccountIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(baib.ref.Append("id"))
}

func (baib billingAccountIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](baib.ref.Append("members"))
}

func (baib billingAccountIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(baib.ref.Append("role"))
}

func (baib billingAccountIamBindingAttributes) Condition() terra.ListValue[billingaccountiambinding.ConditionAttributes] {
	return terra.ReferenceList[billingaccountiambinding.ConditionAttributes](baib.ref.Append("condition"))
}

type billingAccountIamBindingState struct {
	BillingAccountId string                                    `json:"billing_account_id"`
	Etag             string                                    `json:"etag"`
	Id               string                                    `json:"id"`
	Members          []string                                  `json:"members"`
	Role             string                                    `json:"role"`
	Condition        []billingaccountiambinding.ConditionState `json:"condition"`
}
