// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dataprocjobiammember "github.com/golingon/terraproviders/google/4.59.0/dataprocjobiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataprocJobIamMember(name string, args DataprocJobIamMemberArgs) *DataprocJobIamMember {
	return &DataprocJobIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataprocJobIamMember)(nil)

type DataprocJobIamMember struct {
	Name  string
	Args  DataprocJobIamMemberArgs
	state *dataprocJobIamMemberState
}

func (djim *DataprocJobIamMember) Type() string {
	return "google_dataproc_job_iam_member"
}

func (djim *DataprocJobIamMember) LocalName() string {
	return djim.Name
}

func (djim *DataprocJobIamMember) Configuration() interface{} {
	return djim.Args
}

func (djim *DataprocJobIamMember) Attributes() dataprocJobIamMemberAttributes {
	return dataprocJobIamMemberAttributes{ref: terra.ReferenceResource(djim)}
}

func (djim *DataprocJobIamMember) ImportState(av io.Reader) error {
	djim.state = &dataprocJobIamMemberState{}
	if err := json.NewDecoder(av).Decode(djim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", djim.Type(), djim.LocalName(), err)
	}
	return nil
}

func (djim *DataprocJobIamMember) State() (*dataprocJobIamMemberState, bool) {
	return djim.state, djim.state != nil
}

func (djim *DataprocJobIamMember) StateMust() *dataprocJobIamMemberState {
	if djim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", djim.Type(), djim.LocalName()))
	}
	return djim.state
}

func (djim *DataprocJobIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(djim)
}

type DataprocJobIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// JobId: string, required
	JobId terra.StringValue `hcl:"job_id,attr" validate:"required"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *dataprocjobiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataprocJobIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataprocJobIamMemberAttributes struct {
	ref terra.Reference
}

func (djim dataprocJobIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(djim.ref.Append("etag"))
}

func (djim dataprocJobIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(djim.ref.Append("id"))
}

func (djim dataprocJobIamMemberAttributes) JobId() terra.StringValue {
	return terra.ReferenceString(djim.ref.Append("job_id"))
}

func (djim dataprocJobIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(djim.ref.Append("member"))
}

func (djim dataprocJobIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(djim.ref.Append("project"))
}

func (djim dataprocJobIamMemberAttributes) Region() terra.StringValue {
	return terra.ReferenceString(djim.ref.Append("region"))
}

func (djim dataprocJobIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(djim.ref.Append("role"))
}

func (djim dataprocJobIamMemberAttributes) Condition() terra.ListValue[dataprocjobiammember.ConditionAttributes] {
	return terra.ReferenceList[dataprocjobiammember.ConditionAttributes](djim.ref.Append("condition"))
}

type dataprocJobIamMemberState struct {
	Etag      string                                `json:"etag"`
	Id        string                                `json:"id"`
	JobId     string                                `json:"job_id"`
	Member    string                                `json:"member"`
	Project   string                                `json:"project"`
	Region    string                                `json:"region"`
	Role      string                                `json:"role"`
	Condition []dataprocjobiammember.ConditionState `json:"condition"`
}
