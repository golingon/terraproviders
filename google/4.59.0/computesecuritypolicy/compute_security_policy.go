// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package computesecuritypolicy

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AdaptiveProtectionConfig struct {
	// Layer7DdosDefenseConfig: optional
	Layer7DdosDefenseConfig *Layer7DdosDefenseConfig `hcl:"layer_7_ddos_defense_config,block"`
}

type Layer7DdosDefenseConfig struct {
	// Enable: bool, optional
	Enable terra.BoolValue `hcl:"enable,attr"`
	// RuleVisibility: string, optional
	RuleVisibility terra.StringValue `hcl:"rule_visibility,attr"`
}

type AdvancedOptionsConfig struct {
	// JsonParsing: string, optional
	JsonParsing terra.StringValue `hcl:"json_parsing,attr"`
	// LogLevel: string, optional
	LogLevel terra.StringValue `hcl:"log_level,attr"`
	// JsonCustomConfig: optional
	JsonCustomConfig *JsonCustomConfig `hcl:"json_custom_config,block"`
}

type JsonCustomConfig struct {
	// ContentTypes: set of string, required
	ContentTypes terra.SetValue[terra.StringValue] `hcl:"content_types,attr" validate:"required"`
}

type RecaptchaOptionsConfig struct {
	// RedirectSiteKey: string, required
	RedirectSiteKey terra.StringValue `hcl:"redirect_site_key,attr" validate:"required"`
}

type Rule struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Preview: bool, optional
	Preview terra.BoolValue `hcl:"preview,attr"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// HeaderAction: optional
	HeaderAction *HeaderAction `hcl:"header_action,block"`
	// Match: required
	Match *Match `hcl:"match,block" validate:"required"`
	// RateLimitOptions: optional
	RateLimitOptions *RateLimitOptions `hcl:"rate_limit_options,block"`
	// RedirectOptions: optional
	RedirectOptions *RedirectOptions `hcl:"redirect_options,block"`
}

type HeaderAction struct {
	// RequestHeadersToAdds: min=1
	RequestHeadersToAdds []RequestHeadersToAdds `hcl:"request_headers_to_adds,block" validate:"min=1"`
}

type RequestHeadersToAdds struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, optional
	HeaderValue terra.StringValue `hcl:"header_value,attr"`
}

type Match struct {
	// VersionedExpr: string, optional
	VersionedExpr terra.StringValue `hcl:"versioned_expr,attr"`
	// Config: optional
	Config *Config `hcl:"config,block"`
	// Expr: optional
	Expr *Expr `hcl:"expr,block"`
}

type Config struct {
	// SrcIpRanges: set of string, required
	SrcIpRanges terra.SetValue[terra.StringValue] `hcl:"src_ip_ranges,attr" validate:"required"`
}

type Expr struct {
	// Expression: string, required
	Expression terra.StringValue `hcl:"expression,attr" validate:"required"`
}

type RateLimitOptions struct {
	// BanDurationSec: number, optional
	BanDurationSec terra.NumberValue `hcl:"ban_duration_sec,attr"`
	// ConformAction: string, required
	ConformAction terra.StringValue `hcl:"conform_action,attr" validate:"required"`
	// EnforceOnKey: string, optional
	EnforceOnKey terra.StringValue `hcl:"enforce_on_key,attr"`
	// EnforceOnKeyName: string, optional
	EnforceOnKeyName terra.StringValue `hcl:"enforce_on_key_name,attr"`
	// ExceedAction: string, required
	ExceedAction terra.StringValue `hcl:"exceed_action,attr" validate:"required"`
	// BanThreshold: optional
	BanThreshold *BanThreshold `hcl:"ban_threshold,block"`
	// ExceedRedirectOptions: optional
	ExceedRedirectOptions *ExceedRedirectOptions `hcl:"exceed_redirect_options,block"`
	// RateLimitThreshold: required
	RateLimitThreshold *RateLimitThreshold `hcl:"rate_limit_threshold,block" validate:"required"`
}

type BanThreshold struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// IntervalSec: number, required
	IntervalSec terra.NumberValue `hcl:"interval_sec,attr" validate:"required"`
}

type ExceedRedirectOptions struct {
	// Target: string, optional
	Target terra.StringValue `hcl:"target,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type RateLimitThreshold struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// IntervalSec: number, required
	IntervalSec terra.NumberValue `hcl:"interval_sec,attr" validate:"required"`
}

type RedirectOptions struct {
	// Target: string, optional
	Target terra.StringValue `hcl:"target,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AdaptiveProtectionConfigAttributes struct {
	ref terra.Reference
}

func (apc AdaptiveProtectionConfigAttributes) InternalRef() terra.Reference {
	return apc.ref
}

func (apc AdaptiveProtectionConfigAttributes) InternalWithRef(ref terra.Reference) AdaptiveProtectionConfigAttributes {
	return AdaptiveProtectionConfigAttributes{ref: ref}
}

func (apc AdaptiveProtectionConfigAttributes) InternalTokens() hclwrite.Tokens {
	return apc.ref.InternalTokens()
}

func (apc AdaptiveProtectionConfigAttributes) Layer7DdosDefenseConfig() terra.ListValue[Layer7DdosDefenseConfigAttributes] {
	return terra.ReferenceList[Layer7DdosDefenseConfigAttributes](apc.ref.Append("layer_7_ddos_defense_config"))
}

type Layer7DdosDefenseConfigAttributes struct {
	ref terra.Reference
}

func (l7ddc Layer7DdosDefenseConfigAttributes) InternalRef() terra.Reference {
	return l7ddc.ref
}

func (l7ddc Layer7DdosDefenseConfigAttributes) InternalWithRef(ref terra.Reference) Layer7DdosDefenseConfigAttributes {
	return Layer7DdosDefenseConfigAttributes{ref: ref}
}

func (l7ddc Layer7DdosDefenseConfigAttributes) InternalTokens() hclwrite.Tokens {
	return l7ddc.ref.InternalTokens()
}

func (l7ddc Layer7DdosDefenseConfigAttributes) Enable() terra.BoolValue {
	return terra.ReferenceBool(l7ddc.ref.Append("enable"))
}

func (l7ddc Layer7DdosDefenseConfigAttributes) RuleVisibility() terra.StringValue {
	return terra.ReferenceString(l7ddc.ref.Append("rule_visibility"))
}

type AdvancedOptionsConfigAttributes struct {
	ref terra.Reference
}

func (aoc AdvancedOptionsConfigAttributes) InternalRef() terra.Reference {
	return aoc.ref
}

func (aoc AdvancedOptionsConfigAttributes) InternalWithRef(ref terra.Reference) AdvancedOptionsConfigAttributes {
	return AdvancedOptionsConfigAttributes{ref: ref}
}

func (aoc AdvancedOptionsConfigAttributes) InternalTokens() hclwrite.Tokens {
	return aoc.ref.InternalTokens()
}

func (aoc AdvancedOptionsConfigAttributes) JsonParsing() terra.StringValue {
	return terra.ReferenceString(aoc.ref.Append("json_parsing"))
}

func (aoc AdvancedOptionsConfigAttributes) LogLevel() terra.StringValue {
	return terra.ReferenceString(aoc.ref.Append("log_level"))
}

func (aoc AdvancedOptionsConfigAttributes) JsonCustomConfig() terra.ListValue[JsonCustomConfigAttributes] {
	return terra.ReferenceList[JsonCustomConfigAttributes](aoc.ref.Append("json_custom_config"))
}

type JsonCustomConfigAttributes struct {
	ref terra.Reference
}

func (jcc JsonCustomConfigAttributes) InternalRef() terra.Reference {
	return jcc.ref
}

func (jcc JsonCustomConfigAttributes) InternalWithRef(ref terra.Reference) JsonCustomConfigAttributes {
	return JsonCustomConfigAttributes{ref: ref}
}

func (jcc JsonCustomConfigAttributes) InternalTokens() hclwrite.Tokens {
	return jcc.ref.InternalTokens()
}

func (jcc JsonCustomConfigAttributes) ContentTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](jcc.ref.Append("content_types"))
}

type RecaptchaOptionsConfigAttributes struct {
	ref terra.Reference
}

func (roc RecaptchaOptionsConfigAttributes) InternalRef() terra.Reference {
	return roc.ref
}

func (roc RecaptchaOptionsConfigAttributes) InternalWithRef(ref terra.Reference) RecaptchaOptionsConfigAttributes {
	return RecaptchaOptionsConfigAttributes{ref: ref}
}

func (roc RecaptchaOptionsConfigAttributes) InternalTokens() hclwrite.Tokens {
	return roc.ref.InternalTokens()
}

func (roc RecaptchaOptionsConfigAttributes) RedirectSiteKey() terra.StringValue {
	return terra.ReferenceString(roc.ref.Append("redirect_site_key"))
}

type RuleAttributes struct {
	ref terra.Reference
}

func (r RuleAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RuleAttributes) InternalWithRef(ref terra.Reference) RuleAttributes {
	return RuleAttributes{ref: ref}
}

func (r RuleAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RuleAttributes) Action() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("action"))
}

func (r RuleAttributes) Description() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("description"))
}

func (r RuleAttributes) Preview() terra.BoolValue {
	return terra.ReferenceBool(r.ref.Append("preview"))
}

func (r RuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("priority"))
}

func (r RuleAttributes) HeaderAction() terra.ListValue[HeaderActionAttributes] {
	return terra.ReferenceList[HeaderActionAttributes](r.ref.Append("header_action"))
}

func (r RuleAttributes) Match() terra.ListValue[MatchAttributes] {
	return terra.ReferenceList[MatchAttributes](r.ref.Append("match"))
}

func (r RuleAttributes) RateLimitOptions() terra.ListValue[RateLimitOptionsAttributes] {
	return terra.ReferenceList[RateLimitOptionsAttributes](r.ref.Append("rate_limit_options"))
}

func (r RuleAttributes) RedirectOptions() terra.ListValue[RedirectOptionsAttributes] {
	return terra.ReferenceList[RedirectOptionsAttributes](r.ref.Append("redirect_options"))
}

type HeaderActionAttributes struct {
	ref terra.Reference
}

func (ha HeaderActionAttributes) InternalRef() terra.Reference {
	return ha.ref
}

func (ha HeaderActionAttributes) InternalWithRef(ref terra.Reference) HeaderActionAttributes {
	return HeaderActionAttributes{ref: ref}
}

func (ha HeaderActionAttributes) InternalTokens() hclwrite.Tokens {
	return ha.ref.InternalTokens()
}

func (ha HeaderActionAttributes) RequestHeadersToAdds() terra.ListValue[RequestHeadersToAddsAttributes] {
	return terra.ReferenceList[RequestHeadersToAddsAttributes](ha.ref.Append("request_headers_to_adds"))
}

type RequestHeadersToAddsAttributes struct {
	ref terra.Reference
}

func (rhta RequestHeadersToAddsAttributes) InternalRef() terra.Reference {
	return rhta.ref
}

func (rhta RequestHeadersToAddsAttributes) InternalWithRef(ref terra.Reference) RequestHeadersToAddsAttributes {
	return RequestHeadersToAddsAttributes{ref: ref}
}

func (rhta RequestHeadersToAddsAttributes) InternalTokens() hclwrite.Tokens {
	return rhta.ref.InternalTokens()
}

func (rhta RequestHeadersToAddsAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceString(rhta.ref.Append("header_name"))
}

func (rhta RequestHeadersToAddsAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceString(rhta.ref.Append("header_value"))
}

type MatchAttributes struct {
	ref terra.Reference
}

func (m MatchAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m MatchAttributes) InternalWithRef(ref terra.Reference) MatchAttributes {
	return MatchAttributes{ref: ref}
}

func (m MatchAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m MatchAttributes) VersionedExpr() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("versioned_expr"))
}

func (m MatchAttributes) Config() terra.ListValue[ConfigAttributes] {
	return terra.ReferenceList[ConfigAttributes](m.ref.Append("config"))
}

func (m MatchAttributes) Expr() terra.ListValue[ExprAttributes] {
	return terra.ReferenceList[ExprAttributes](m.ref.Append("expr"))
}

type ConfigAttributes struct {
	ref terra.Reference
}

func (c ConfigAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c ConfigAttributes) InternalWithRef(ref terra.Reference) ConfigAttributes {
	return ConfigAttributes{ref: ref}
}

func (c ConfigAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c ConfigAttributes) SrcIpRanges() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](c.ref.Append("src_ip_ranges"))
}

type ExprAttributes struct {
	ref terra.Reference
}

func (e ExprAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e ExprAttributes) InternalWithRef(ref terra.Reference) ExprAttributes {
	return ExprAttributes{ref: ref}
}

func (e ExprAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e ExprAttributes) Expression() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("expression"))
}

type RateLimitOptionsAttributes struct {
	ref terra.Reference
}

func (rlo RateLimitOptionsAttributes) InternalRef() terra.Reference {
	return rlo.ref
}

func (rlo RateLimitOptionsAttributes) InternalWithRef(ref terra.Reference) RateLimitOptionsAttributes {
	return RateLimitOptionsAttributes{ref: ref}
}

func (rlo RateLimitOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return rlo.ref.InternalTokens()
}

func (rlo RateLimitOptionsAttributes) BanDurationSec() terra.NumberValue {
	return terra.ReferenceNumber(rlo.ref.Append("ban_duration_sec"))
}

func (rlo RateLimitOptionsAttributes) ConformAction() terra.StringValue {
	return terra.ReferenceString(rlo.ref.Append("conform_action"))
}

func (rlo RateLimitOptionsAttributes) EnforceOnKey() terra.StringValue {
	return terra.ReferenceString(rlo.ref.Append("enforce_on_key"))
}

func (rlo RateLimitOptionsAttributes) EnforceOnKeyName() terra.StringValue {
	return terra.ReferenceString(rlo.ref.Append("enforce_on_key_name"))
}

func (rlo RateLimitOptionsAttributes) ExceedAction() terra.StringValue {
	return terra.ReferenceString(rlo.ref.Append("exceed_action"))
}

func (rlo RateLimitOptionsAttributes) BanThreshold() terra.ListValue[BanThresholdAttributes] {
	return terra.ReferenceList[BanThresholdAttributes](rlo.ref.Append("ban_threshold"))
}

func (rlo RateLimitOptionsAttributes) ExceedRedirectOptions() terra.ListValue[ExceedRedirectOptionsAttributes] {
	return terra.ReferenceList[ExceedRedirectOptionsAttributes](rlo.ref.Append("exceed_redirect_options"))
}

func (rlo RateLimitOptionsAttributes) RateLimitThreshold() terra.ListValue[RateLimitThresholdAttributes] {
	return terra.ReferenceList[RateLimitThresholdAttributes](rlo.ref.Append("rate_limit_threshold"))
}

type BanThresholdAttributes struct {
	ref terra.Reference
}

func (bt BanThresholdAttributes) InternalRef() terra.Reference {
	return bt.ref
}

func (bt BanThresholdAttributes) InternalWithRef(ref terra.Reference) BanThresholdAttributes {
	return BanThresholdAttributes{ref: ref}
}

func (bt BanThresholdAttributes) InternalTokens() hclwrite.Tokens {
	return bt.ref.InternalTokens()
}

func (bt BanThresholdAttributes) Count() terra.NumberValue {
	return terra.ReferenceNumber(bt.ref.Append("count"))
}

func (bt BanThresholdAttributes) IntervalSec() terra.NumberValue {
	return terra.ReferenceNumber(bt.ref.Append("interval_sec"))
}

type ExceedRedirectOptionsAttributes struct {
	ref terra.Reference
}

func (ero ExceedRedirectOptionsAttributes) InternalRef() terra.Reference {
	return ero.ref
}

func (ero ExceedRedirectOptionsAttributes) InternalWithRef(ref terra.Reference) ExceedRedirectOptionsAttributes {
	return ExceedRedirectOptionsAttributes{ref: ref}
}

func (ero ExceedRedirectOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return ero.ref.InternalTokens()
}

func (ero ExceedRedirectOptionsAttributes) Target() terra.StringValue {
	return terra.ReferenceString(ero.ref.Append("target"))
}

func (ero ExceedRedirectOptionsAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ero.ref.Append("type"))
}

type RateLimitThresholdAttributes struct {
	ref terra.Reference
}

func (rlt RateLimitThresholdAttributes) InternalRef() terra.Reference {
	return rlt.ref
}

func (rlt RateLimitThresholdAttributes) InternalWithRef(ref terra.Reference) RateLimitThresholdAttributes {
	return RateLimitThresholdAttributes{ref: ref}
}

func (rlt RateLimitThresholdAttributes) InternalTokens() hclwrite.Tokens {
	return rlt.ref.InternalTokens()
}

func (rlt RateLimitThresholdAttributes) Count() terra.NumberValue {
	return terra.ReferenceNumber(rlt.ref.Append("count"))
}

func (rlt RateLimitThresholdAttributes) IntervalSec() terra.NumberValue {
	return terra.ReferenceNumber(rlt.ref.Append("interval_sec"))
}

type RedirectOptionsAttributes struct {
	ref terra.Reference
}

func (ro RedirectOptionsAttributes) InternalRef() terra.Reference {
	return ro.ref
}

func (ro RedirectOptionsAttributes) InternalWithRef(ref terra.Reference) RedirectOptionsAttributes {
	return RedirectOptionsAttributes{ref: ref}
}

func (ro RedirectOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return ro.ref.InternalTokens()
}

func (ro RedirectOptionsAttributes) Target() terra.StringValue {
	return terra.ReferenceString(ro.ref.Append("target"))
}

func (ro RedirectOptionsAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ro.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type AdaptiveProtectionConfigState struct {
	Layer7DdosDefenseConfig []Layer7DdosDefenseConfigState `json:"layer_7_ddos_defense_config"`
}

type Layer7DdosDefenseConfigState struct {
	Enable         bool   `json:"enable"`
	RuleVisibility string `json:"rule_visibility"`
}

type AdvancedOptionsConfigState struct {
	JsonParsing      string                  `json:"json_parsing"`
	LogLevel         string                  `json:"log_level"`
	JsonCustomConfig []JsonCustomConfigState `json:"json_custom_config"`
}

type JsonCustomConfigState struct {
	ContentTypes []string `json:"content_types"`
}

type RecaptchaOptionsConfigState struct {
	RedirectSiteKey string `json:"redirect_site_key"`
}

type RuleState struct {
	Action           string                  `json:"action"`
	Description      string                  `json:"description"`
	Preview          bool                    `json:"preview"`
	Priority         float64                 `json:"priority"`
	HeaderAction     []HeaderActionState     `json:"header_action"`
	Match            []MatchState            `json:"match"`
	RateLimitOptions []RateLimitOptionsState `json:"rate_limit_options"`
	RedirectOptions  []RedirectOptionsState  `json:"redirect_options"`
}

type HeaderActionState struct {
	RequestHeadersToAdds []RequestHeadersToAddsState `json:"request_headers_to_adds"`
}

type RequestHeadersToAddsState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
}

type MatchState struct {
	VersionedExpr string        `json:"versioned_expr"`
	Config        []ConfigState `json:"config"`
	Expr          []ExprState   `json:"expr"`
}

type ConfigState struct {
	SrcIpRanges []string `json:"src_ip_ranges"`
}

type ExprState struct {
	Expression string `json:"expression"`
}

type RateLimitOptionsState struct {
	BanDurationSec        float64                      `json:"ban_duration_sec"`
	ConformAction         string                       `json:"conform_action"`
	EnforceOnKey          string                       `json:"enforce_on_key"`
	EnforceOnKeyName      string                       `json:"enforce_on_key_name"`
	ExceedAction          string                       `json:"exceed_action"`
	BanThreshold          []BanThresholdState          `json:"ban_threshold"`
	ExceedRedirectOptions []ExceedRedirectOptionsState `json:"exceed_redirect_options"`
	RateLimitThreshold    []RateLimitThresholdState    `json:"rate_limit_threshold"`
}

type BanThresholdState struct {
	Count       float64 `json:"count"`
	IntervalSec float64 `json:"interval_sec"`
}

type ExceedRedirectOptionsState struct {
	Target string `json:"target"`
	Type   string `json:"type"`
}

type RateLimitThresholdState struct {
	Count       float64 `json:"count"`
	IntervalSec float64 `json:"interval_sec"`
}

type RedirectOptionsState struct {
	Target string `json:"target"`
	Type   string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
