// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	accesscontextmanagerserviceperimeters "github.com/golingon/terraproviders/google/4.59.0/accesscontextmanagerserviceperimeters"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAccessContextManagerServicePerimeters(name string, args AccessContextManagerServicePerimetersArgs) *AccessContextManagerServicePerimeters {
	return &AccessContextManagerServicePerimeters{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AccessContextManagerServicePerimeters)(nil)

type AccessContextManagerServicePerimeters struct {
	Name  string
	Args  AccessContextManagerServicePerimetersArgs
	state *accessContextManagerServicePerimetersState
}

func (acmsp *AccessContextManagerServicePerimeters) Type() string {
	return "google_access_context_manager_service_perimeters"
}

func (acmsp *AccessContextManagerServicePerimeters) LocalName() string {
	return acmsp.Name
}

func (acmsp *AccessContextManagerServicePerimeters) Configuration() interface{} {
	return acmsp.Args
}

func (acmsp *AccessContextManagerServicePerimeters) Attributes() accessContextManagerServicePerimetersAttributes {
	return accessContextManagerServicePerimetersAttributes{ref: terra.ReferenceResource(acmsp)}
}

func (acmsp *AccessContextManagerServicePerimeters) ImportState(av io.Reader) error {
	acmsp.state = &accessContextManagerServicePerimetersState{}
	if err := json.NewDecoder(av).Decode(acmsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acmsp.Type(), acmsp.LocalName(), err)
	}
	return nil
}

func (acmsp *AccessContextManagerServicePerimeters) State() (*accessContextManagerServicePerimetersState, bool) {
	return acmsp.state, acmsp.state != nil
}

func (acmsp *AccessContextManagerServicePerimeters) StateMust() *accessContextManagerServicePerimetersState {
	if acmsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acmsp.Type(), acmsp.LocalName()))
	}
	return acmsp.state
}

func (acmsp *AccessContextManagerServicePerimeters) DependOn() terra.Reference {
	return terra.ReferenceResource(acmsp)
}

type AccessContextManagerServicePerimetersArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// ServicePerimeters: min=0
	ServicePerimeters []accesscontextmanagerserviceperimeters.ServicePerimeters `hcl:"service_perimeters,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *accesscontextmanagerserviceperimeters.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AccessContextManagerServicePerimeters depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type accessContextManagerServicePerimetersAttributes struct {
	ref terra.Reference
}

func (acmsp accessContextManagerServicePerimetersAttributes) Id() terra.StringValue {
	return terra.ReferenceString(acmsp.ref.Append("id"))
}

func (acmsp accessContextManagerServicePerimetersAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(acmsp.ref.Append("parent"))
}

func (acmsp accessContextManagerServicePerimetersAttributes) ServicePerimeters() terra.SetValue[accesscontextmanagerserviceperimeters.ServicePerimetersAttributes] {
	return terra.ReferenceSet[accesscontextmanagerserviceperimeters.ServicePerimetersAttributes](acmsp.ref.Append("service_perimeters"))
}

func (acmsp accessContextManagerServicePerimetersAttributes) Timeouts() accesscontextmanagerserviceperimeters.TimeoutsAttributes {
	return terra.ReferenceSingle[accesscontextmanagerserviceperimeters.TimeoutsAttributes](acmsp.ref.Append("timeouts"))
}

type accessContextManagerServicePerimetersState struct {
	Id                string                                                         `json:"id"`
	Parent            string                                                         `json:"parent"`
	ServicePerimeters []accesscontextmanagerserviceperimeters.ServicePerimetersState `json:"service_perimeters"`
	Timeouts          *accesscontextmanagerserviceperimeters.TimeoutsState           `json:"timeouts"`
}
