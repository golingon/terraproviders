// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	sqldatabaseinstance "github.com/golingon/terraproviders/google/4.59.0/sqldatabaseinstance"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSqlDatabaseInstance(name string, args SqlDatabaseInstanceArgs) *SqlDatabaseInstance {
	return &SqlDatabaseInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SqlDatabaseInstance)(nil)

type SqlDatabaseInstance struct {
	Name  string
	Args  SqlDatabaseInstanceArgs
	state *sqlDatabaseInstanceState
}

func (sdi *SqlDatabaseInstance) Type() string {
	return "google_sql_database_instance"
}

func (sdi *SqlDatabaseInstance) LocalName() string {
	return sdi.Name
}

func (sdi *SqlDatabaseInstance) Configuration() interface{} {
	return sdi.Args
}

func (sdi *SqlDatabaseInstance) Attributes() sqlDatabaseInstanceAttributes {
	return sqlDatabaseInstanceAttributes{ref: terra.ReferenceResource(sdi)}
}

func (sdi *SqlDatabaseInstance) ImportState(av io.Reader) error {
	sdi.state = &sqlDatabaseInstanceState{}
	if err := json.NewDecoder(av).Decode(sdi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sdi.Type(), sdi.LocalName(), err)
	}
	return nil
}

func (sdi *SqlDatabaseInstance) State() (*sqlDatabaseInstanceState, bool) {
	return sdi.state, sdi.state != nil
}

func (sdi *SqlDatabaseInstance) StateMust() *sqlDatabaseInstanceState {
	if sdi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sdi.Type(), sdi.LocalName()))
	}
	return sdi.state
}

func (sdi *SqlDatabaseInstance) DependOn() terra.Reference {
	return terra.ReferenceResource(sdi)
}

type SqlDatabaseInstanceArgs struct {
	// DatabaseVersion: string, required
	DatabaseVersion terra.StringValue `hcl:"database_version,attr" validate:"required"`
	// DeletionProtection: bool, optional
	DeletionProtection terra.BoolValue `hcl:"deletion_protection,attr"`
	// EncryptionKeyName: string, optional
	EncryptionKeyName terra.StringValue `hcl:"encryption_key_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceType: string, optional
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// MaintenanceVersion: string, optional
	MaintenanceVersion terra.StringValue `hcl:"maintenance_version,attr"`
	// MasterInstanceName: string, optional
	MasterInstanceName terra.StringValue `hcl:"master_instance_name,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// RootPassword: string, optional
	RootPassword terra.StringValue `hcl:"root_password,attr"`
	// IpAddress: min=0
	IpAddress []sqldatabaseinstance.IpAddress `hcl:"ip_address,block" validate:"min=0"`
	// ServerCaCert: min=0
	ServerCaCert []sqldatabaseinstance.ServerCaCert `hcl:"server_ca_cert,block" validate:"min=0"`
	// Clone: optional
	Clone *sqldatabaseinstance.Clone `hcl:"clone,block"`
	// ReplicaConfiguration: optional
	ReplicaConfiguration *sqldatabaseinstance.ReplicaConfiguration `hcl:"replica_configuration,block"`
	// RestoreBackupContext: optional
	RestoreBackupContext *sqldatabaseinstance.RestoreBackupContext `hcl:"restore_backup_context,block"`
	// Settings: optional
	Settings *sqldatabaseinstance.Settings `hcl:"settings,block"`
	// Timeouts: optional
	Timeouts *sqldatabaseinstance.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SqlDatabaseInstance depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sqlDatabaseInstanceAttributes struct {
	ref terra.Reference
}

func (sdi sqlDatabaseInstanceAttributes) AvailableMaintenanceVersions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](sdi.ref.Append("available_maintenance_versions"))
}

func (sdi sqlDatabaseInstanceAttributes) ConnectionName() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("connection_name"))
}

func (sdi sqlDatabaseInstanceAttributes) DatabaseVersion() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("database_version"))
}

func (sdi sqlDatabaseInstanceAttributes) DeletionProtection() terra.BoolValue {
	return terra.ReferenceBool(sdi.ref.Append("deletion_protection"))
}

func (sdi sqlDatabaseInstanceAttributes) EncryptionKeyName() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("encryption_key_name"))
}

func (sdi sqlDatabaseInstanceAttributes) FirstIpAddress() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("first_ip_address"))
}

func (sdi sqlDatabaseInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("id"))
}

func (sdi sqlDatabaseInstanceAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("instance_type"))
}

func (sdi sqlDatabaseInstanceAttributes) MaintenanceVersion() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("maintenance_version"))
}

func (sdi sqlDatabaseInstanceAttributes) MasterInstanceName() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("master_instance_name"))
}

func (sdi sqlDatabaseInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("name"))
}

func (sdi sqlDatabaseInstanceAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("private_ip_address"))
}

func (sdi sqlDatabaseInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("project"))
}

func (sdi sqlDatabaseInstanceAttributes) PublicIpAddress() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("public_ip_address"))
}

func (sdi sqlDatabaseInstanceAttributes) Region() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("region"))
}

func (sdi sqlDatabaseInstanceAttributes) RootPassword() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("root_password"))
}

func (sdi sqlDatabaseInstanceAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("self_link"))
}

func (sdi sqlDatabaseInstanceAttributes) ServiceAccountEmailAddress() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("service_account_email_address"))
}

func (sdi sqlDatabaseInstanceAttributes) IpAddress() terra.ListValue[sqldatabaseinstance.IpAddressAttributes] {
	return terra.ReferenceList[sqldatabaseinstance.IpAddressAttributes](sdi.ref.Append("ip_address"))
}

func (sdi sqlDatabaseInstanceAttributes) ServerCaCert() terra.ListValue[sqldatabaseinstance.ServerCaCertAttributes] {
	return terra.ReferenceList[sqldatabaseinstance.ServerCaCertAttributes](sdi.ref.Append("server_ca_cert"))
}

func (sdi sqlDatabaseInstanceAttributes) Clone() terra.ListValue[sqldatabaseinstance.CloneAttributes] {
	return terra.ReferenceList[sqldatabaseinstance.CloneAttributes](sdi.ref.Append("clone"))
}

func (sdi sqlDatabaseInstanceAttributes) ReplicaConfiguration() terra.ListValue[sqldatabaseinstance.ReplicaConfigurationAttributes] {
	return terra.ReferenceList[sqldatabaseinstance.ReplicaConfigurationAttributes](sdi.ref.Append("replica_configuration"))
}

func (sdi sqlDatabaseInstanceAttributes) RestoreBackupContext() terra.ListValue[sqldatabaseinstance.RestoreBackupContextAttributes] {
	return terra.ReferenceList[sqldatabaseinstance.RestoreBackupContextAttributes](sdi.ref.Append("restore_backup_context"))
}

func (sdi sqlDatabaseInstanceAttributes) Settings() terra.ListValue[sqldatabaseinstance.SettingsAttributes] {
	return terra.ReferenceList[sqldatabaseinstance.SettingsAttributes](sdi.ref.Append("settings"))
}

func (sdi sqlDatabaseInstanceAttributes) Timeouts() sqldatabaseinstance.TimeoutsAttributes {
	return terra.ReferenceSingle[sqldatabaseinstance.TimeoutsAttributes](sdi.ref.Append("timeouts"))
}

type sqlDatabaseInstanceState struct {
	AvailableMaintenanceVersions []string                                        `json:"available_maintenance_versions"`
	ConnectionName               string                                          `json:"connection_name"`
	DatabaseVersion              string                                          `json:"database_version"`
	DeletionProtection           bool                                            `json:"deletion_protection"`
	EncryptionKeyName            string                                          `json:"encryption_key_name"`
	FirstIpAddress               string                                          `json:"first_ip_address"`
	Id                           string                                          `json:"id"`
	InstanceType                 string                                          `json:"instance_type"`
	MaintenanceVersion           string                                          `json:"maintenance_version"`
	MasterInstanceName           string                                          `json:"master_instance_name"`
	Name                         string                                          `json:"name"`
	PrivateIpAddress             string                                          `json:"private_ip_address"`
	Project                      string                                          `json:"project"`
	PublicIpAddress              string                                          `json:"public_ip_address"`
	Region                       string                                          `json:"region"`
	RootPassword                 string                                          `json:"root_password"`
	SelfLink                     string                                          `json:"self_link"`
	ServiceAccountEmailAddress   string                                          `json:"service_account_email_address"`
	IpAddress                    []sqldatabaseinstance.IpAddressState            `json:"ip_address"`
	ServerCaCert                 []sqldatabaseinstance.ServerCaCertState         `json:"server_ca_cert"`
	Clone                        []sqldatabaseinstance.CloneState                `json:"clone"`
	ReplicaConfiguration         []sqldatabaseinstance.ReplicaConfigurationState `json:"replica_configuration"`
	RestoreBackupContext         []sqldatabaseinstance.RestoreBackupContextState `json:"restore_backup_context"`
	Settings                     []sqldatabaseinstance.SettingsState             `json:"settings"`
	Timeouts                     *sqldatabaseinstance.TimeoutsState              `json:"timeouts"`
}
