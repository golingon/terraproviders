// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computerouter "github.com/golingon/terraproviders/google/4.59.0/computerouter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeRouter(name string, args ComputeRouterArgs) *ComputeRouter {
	return &ComputeRouter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeRouter)(nil)

type ComputeRouter struct {
	Name  string
	Args  ComputeRouterArgs
	state *computeRouterState
}

func (cr *ComputeRouter) Type() string {
	return "google_compute_router"
}

func (cr *ComputeRouter) LocalName() string {
	return cr.Name
}

func (cr *ComputeRouter) Configuration() interface{} {
	return cr.Args
}

func (cr *ComputeRouter) Attributes() computeRouterAttributes {
	return computeRouterAttributes{ref: terra.ReferenceResource(cr)}
}

func (cr *ComputeRouter) ImportState(av io.Reader) error {
	cr.state = &computeRouterState{}
	if err := json.NewDecoder(av).Decode(cr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cr.Type(), cr.LocalName(), err)
	}
	return nil
}

func (cr *ComputeRouter) State() (*computeRouterState, bool) {
	return cr.state, cr.state != nil
}

func (cr *ComputeRouter) StateMust() *computeRouterState {
	if cr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cr.Type(), cr.LocalName()))
	}
	return cr.state
}

func (cr *ComputeRouter) DependOn() terra.Reference {
	return terra.ReferenceResource(cr)
}

type ComputeRouterArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EncryptedInterconnectRouter: bool, optional
	EncryptedInterconnectRouter terra.BoolValue `hcl:"encrypted_interconnect_router,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Bgp: optional
	Bgp *computerouter.Bgp `hcl:"bgp,block"`
	// Timeouts: optional
	Timeouts *computerouter.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeRouter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeRouterAttributes struct {
	ref terra.Reference
}

func (cr computeRouterAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("creation_timestamp"))
}

func (cr computeRouterAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("description"))
}

func (cr computeRouterAttributes) EncryptedInterconnectRouter() terra.BoolValue {
	return terra.ReferenceBool(cr.ref.Append("encrypted_interconnect_router"))
}

func (cr computeRouterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("id"))
}

func (cr computeRouterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("name"))
}

func (cr computeRouterAttributes) Network() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("network"))
}

func (cr computeRouterAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("project"))
}

func (cr computeRouterAttributes) Region() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("region"))
}

func (cr computeRouterAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("self_link"))
}

func (cr computeRouterAttributes) Bgp() terra.ListValue[computerouter.BgpAttributes] {
	return terra.ReferenceList[computerouter.BgpAttributes](cr.ref.Append("bgp"))
}

func (cr computeRouterAttributes) Timeouts() computerouter.TimeoutsAttributes {
	return terra.ReferenceSingle[computerouter.TimeoutsAttributes](cr.ref.Append("timeouts"))
}

type computeRouterState struct {
	CreationTimestamp           string                       `json:"creation_timestamp"`
	Description                 string                       `json:"description"`
	EncryptedInterconnectRouter bool                         `json:"encrypted_interconnect_router"`
	Id                          string                       `json:"id"`
	Name                        string                       `json:"name"`
	Network                     string                       `json:"network"`
	Project                     string                       `json:"project"`
	Region                      string                       `json:"region"`
	SelfLink                    string                       `json:"self_link"`
	Bgp                         []computerouter.BgpState     `json:"bgp"`
	Timeouts                    *computerouter.TimeoutsState `json:"timeouts"`
}
