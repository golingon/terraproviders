// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computesslpolicy "github.com/golingon/terraproviders/google/4.59.0/computesslpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeSslPolicy(name string, args ComputeSslPolicyArgs) *ComputeSslPolicy {
	return &ComputeSslPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeSslPolicy)(nil)

type ComputeSslPolicy struct {
	Name  string
	Args  ComputeSslPolicyArgs
	state *computeSslPolicyState
}

func (csp *ComputeSslPolicy) Type() string {
	return "google_compute_ssl_policy"
}

func (csp *ComputeSslPolicy) LocalName() string {
	return csp.Name
}

func (csp *ComputeSslPolicy) Configuration() interface{} {
	return csp.Args
}

func (csp *ComputeSslPolicy) Attributes() computeSslPolicyAttributes {
	return computeSslPolicyAttributes{ref: terra.ReferenceResource(csp)}
}

func (csp *ComputeSslPolicy) ImportState(av io.Reader) error {
	csp.state = &computeSslPolicyState{}
	if err := json.NewDecoder(av).Decode(csp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csp.Type(), csp.LocalName(), err)
	}
	return nil
}

func (csp *ComputeSslPolicy) State() (*computeSslPolicyState, bool) {
	return csp.state, csp.state != nil
}

func (csp *ComputeSslPolicy) StateMust() *computeSslPolicyState {
	if csp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csp.Type(), csp.LocalName()))
	}
	return csp.state
}

func (csp *ComputeSslPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(csp)
}

type ComputeSslPolicyArgs struct {
	// CustomFeatures: set of string, optional
	CustomFeatures terra.SetValue[terra.StringValue] `hcl:"custom_features,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MinTlsVersion: string, optional
	MinTlsVersion terra.StringValue `hcl:"min_tls_version,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Profile: string, optional
	Profile terra.StringValue `hcl:"profile,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *computesslpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeSslPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeSslPolicyAttributes struct {
	ref terra.Reference
}

func (csp computeSslPolicyAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(csp.ref.Append("creation_timestamp"))
}

func (csp computeSslPolicyAttributes) CustomFeatures() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](csp.ref.Append("custom_features"))
}

func (csp computeSslPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(csp.ref.Append("description"))
}

func (csp computeSslPolicyAttributes) EnabledFeatures() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](csp.ref.Append("enabled_features"))
}

func (csp computeSslPolicyAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceString(csp.ref.Append("fingerprint"))
}

func (csp computeSslPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(csp.ref.Append("id"))
}

func (csp computeSslPolicyAttributes) MinTlsVersion() terra.StringValue {
	return terra.ReferenceString(csp.ref.Append("min_tls_version"))
}

func (csp computeSslPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(csp.ref.Append("name"))
}

func (csp computeSslPolicyAttributes) Profile() terra.StringValue {
	return terra.ReferenceString(csp.ref.Append("profile"))
}

func (csp computeSslPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(csp.ref.Append("project"))
}

func (csp computeSslPolicyAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(csp.ref.Append("self_link"))
}

func (csp computeSslPolicyAttributes) Timeouts() computesslpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[computesslpolicy.TimeoutsAttributes](csp.ref.Append("timeouts"))
}

type computeSslPolicyState struct {
	CreationTimestamp string                          `json:"creation_timestamp"`
	CustomFeatures    []string                        `json:"custom_features"`
	Description       string                          `json:"description"`
	EnabledFeatures   []string                        `json:"enabled_features"`
	Fingerprint       string                          `json:"fingerprint"`
	Id                string                          `json:"id"`
	MinTlsVersion     string                          `json:"min_tls_version"`
	Name              string                          `json:"name"`
	Profile           string                          `json:"profile"`
	Project           string                          `json:"project"`
	SelfLink          string                          `json:"self_link"`
	Timeouts          *computesslpolicy.TimeoutsState `json:"timeouts"`
}
