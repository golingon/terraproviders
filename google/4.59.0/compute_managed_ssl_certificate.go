// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computemanagedsslcertificate "github.com/golingon/terraproviders/google/4.59.0/computemanagedsslcertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeManagedSslCertificate(name string, args ComputeManagedSslCertificateArgs) *ComputeManagedSslCertificate {
	return &ComputeManagedSslCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeManagedSslCertificate)(nil)

type ComputeManagedSslCertificate struct {
	Name  string
	Args  ComputeManagedSslCertificateArgs
	state *computeManagedSslCertificateState
}

func (cmsc *ComputeManagedSslCertificate) Type() string {
	return "google_compute_managed_ssl_certificate"
}

func (cmsc *ComputeManagedSslCertificate) LocalName() string {
	return cmsc.Name
}

func (cmsc *ComputeManagedSslCertificate) Configuration() interface{} {
	return cmsc.Args
}

func (cmsc *ComputeManagedSslCertificate) Attributes() computeManagedSslCertificateAttributes {
	return computeManagedSslCertificateAttributes{ref: terra.ReferenceResource(cmsc)}
}

func (cmsc *ComputeManagedSslCertificate) ImportState(av io.Reader) error {
	cmsc.state = &computeManagedSslCertificateState{}
	if err := json.NewDecoder(av).Decode(cmsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cmsc.Type(), cmsc.LocalName(), err)
	}
	return nil
}

func (cmsc *ComputeManagedSslCertificate) State() (*computeManagedSslCertificateState, bool) {
	return cmsc.state, cmsc.state != nil
}

func (cmsc *ComputeManagedSslCertificate) StateMust() *computeManagedSslCertificateState {
	if cmsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cmsc.Type(), cmsc.LocalName()))
	}
	return cmsc.state
}

func (cmsc *ComputeManagedSslCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(cmsc)
}

type ComputeManagedSslCertificateArgs struct {
	// CertificateId: number, optional
	CertificateId terra.NumberValue `hcl:"certificate_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Managed: optional
	Managed *computemanagedsslcertificate.Managed `hcl:"managed,block"`
	// Timeouts: optional
	Timeouts *computemanagedsslcertificate.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeManagedSslCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeManagedSslCertificateAttributes struct {
	ref terra.Reference
}

func (cmsc computeManagedSslCertificateAttributes) CertificateId() terra.NumberValue {
	return terra.ReferenceNumber(cmsc.ref.Append("certificate_id"))
}

func (cmsc computeManagedSslCertificateAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(cmsc.ref.Append("creation_timestamp"))
}

func (cmsc computeManagedSslCertificateAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cmsc.ref.Append("description"))
}

func (cmsc computeManagedSslCertificateAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceString(cmsc.ref.Append("expire_time"))
}

func (cmsc computeManagedSslCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cmsc.ref.Append("id"))
}

func (cmsc computeManagedSslCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cmsc.ref.Append("name"))
}

func (cmsc computeManagedSslCertificateAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cmsc.ref.Append("project"))
}

func (cmsc computeManagedSslCertificateAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(cmsc.ref.Append("self_link"))
}

func (cmsc computeManagedSslCertificateAttributes) SubjectAlternativeNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cmsc.ref.Append("subject_alternative_names"))
}

func (cmsc computeManagedSslCertificateAttributes) Type() terra.StringValue {
	return terra.ReferenceString(cmsc.ref.Append("type"))
}

func (cmsc computeManagedSslCertificateAttributes) Managed() terra.ListValue[computemanagedsslcertificate.ManagedAttributes] {
	return terra.ReferenceList[computemanagedsslcertificate.ManagedAttributes](cmsc.ref.Append("managed"))
}

func (cmsc computeManagedSslCertificateAttributes) Timeouts() computemanagedsslcertificate.TimeoutsAttributes {
	return terra.ReferenceSingle[computemanagedsslcertificate.TimeoutsAttributes](cmsc.ref.Append("timeouts"))
}

type computeManagedSslCertificateState struct {
	CertificateId           float64                                     `json:"certificate_id"`
	CreationTimestamp       string                                      `json:"creation_timestamp"`
	Description             string                                      `json:"description"`
	ExpireTime              string                                      `json:"expire_time"`
	Id                      string                                      `json:"id"`
	Name                    string                                      `json:"name"`
	Project                 string                                      `json:"project"`
	SelfLink                string                                      `json:"self_link"`
	SubjectAlternativeNames []string                                    `json:"subject_alternative_names"`
	Type                    string                                      `json:"type"`
	Managed                 []computemanagedsslcertificate.ManagedState `json:"managed"`
	Timeouts                *computemanagedsslcertificate.TimeoutsState `json:"timeouts"`
}
