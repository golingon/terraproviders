// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeglobaladdress "github.com/golingon/terraproviders/google/4.59.0/computeglobaladdress"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeGlobalAddress(name string, args ComputeGlobalAddressArgs) *ComputeGlobalAddress {
	return &ComputeGlobalAddress{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeGlobalAddress)(nil)

type ComputeGlobalAddress struct {
	Name  string
	Args  ComputeGlobalAddressArgs
	state *computeGlobalAddressState
}

func (cga *ComputeGlobalAddress) Type() string {
	return "google_compute_global_address"
}

func (cga *ComputeGlobalAddress) LocalName() string {
	return cga.Name
}

func (cga *ComputeGlobalAddress) Configuration() interface{} {
	return cga.Args
}

func (cga *ComputeGlobalAddress) Attributes() computeGlobalAddressAttributes {
	return computeGlobalAddressAttributes{ref: terra.ReferenceResource(cga)}
}

func (cga *ComputeGlobalAddress) ImportState(av io.Reader) error {
	cga.state = &computeGlobalAddressState{}
	if err := json.NewDecoder(av).Decode(cga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cga.Type(), cga.LocalName(), err)
	}
	return nil
}

func (cga *ComputeGlobalAddress) State() (*computeGlobalAddressState, bool) {
	return cga.state, cga.state != nil
}

func (cga *ComputeGlobalAddress) StateMust() *computeGlobalAddressState {
	if cga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cga.Type(), cga.LocalName()))
	}
	return cga.state
}

func (cga *ComputeGlobalAddress) DependOn() terra.Reference {
	return terra.ReferenceResource(cga)
}

type ComputeGlobalAddressArgs struct {
	// Address: string, optional
	Address terra.StringValue `hcl:"address,attr"`
	// AddressType: string, optional
	AddressType terra.StringValue `hcl:"address_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpVersion: string, optional
	IpVersion terra.StringValue `hcl:"ip_version,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// PrefixLength: number, optional
	PrefixLength terra.NumberValue `hcl:"prefix_length,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Purpose: string, optional
	Purpose terra.StringValue `hcl:"purpose,attr"`
	// Timeouts: optional
	Timeouts *computeglobaladdress.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeGlobalAddress depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeGlobalAddressAttributes struct {
	ref terra.Reference
}

func (cga computeGlobalAddressAttributes) Address() terra.StringValue {
	return terra.ReferenceString(cga.ref.Append("address"))
}

func (cga computeGlobalAddressAttributes) AddressType() terra.StringValue {
	return terra.ReferenceString(cga.ref.Append("address_type"))
}

func (cga computeGlobalAddressAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(cga.ref.Append("creation_timestamp"))
}

func (cga computeGlobalAddressAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cga.ref.Append("description"))
}

func (cga computeGlobalAddressAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cga.ref.Append("id"))
}

func (cga computeGlobalAddressAttributes) IpVersion() terra.StringValue {
	return terra.ReferenceString(cga.ref.Append("ip_version"))
}

func (cga computeGlobalAddressAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cga.ref.Append("name"))
}

func (cga computeGlobalAddressAttributes) Network() terra.StringValue {
	return terra.ReferenceString(cga.ref.Append("network"))
}

func (cga computeGlobalAddressAttributes) PrefixLength() terra.NumberValue {
	return terra.ReferenceNumber(cga.ref.Append("prefix_length"))
}

func (cga computeGlobalAddressAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cga.ref.Append("project"))
}

func (cga computeGlobalAddressAttributes) Purpose() terra.StringValue {
	return terra.ReferenceString(cga.ref.Append("purpose"))
}

func (cga computeGlobalAddressAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(cga.ref.Append("self_link"))
}

func (cga computeGlobalAddressAttributes) Timeouts() computeglobaladdress.TimeoutsAttributes {
	return terra.ReferenceSingle[computeglobaladdress.TimeoutsAttributes](cga.ref.Append("timeouts"))
}

type computeGlobalAddressState struct {
	Address           string                              `json:"address"`
	AddressType       string                              `json:"address_type"`
	CreationTimestamp string                              `json:"creation_timestamp"`
	Description       string                              `json:"description"`
	Id                string                              `json:"id"`
	IpVersion         string                              `json:"ip_version"`
	Name              string                              `json:"name"`
	Network           string                              `json:"network"`
	PrefixLength      float64                             `json:"prefix_length"`
	Project           string                              `json:"project"`
	Purpose           string                              `json:"purpose"`
	SelfLink          string                              `json:"self_link"`
	Timeouts          *computeglobaladdress.TimeoutsState `json:"timeouts"`
}
