// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dialogflowcxentitytype "github.com/golingon/terraproviders/google/4.59.0/dialogflowcxentitytype"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDialogflowCxEntityType(name string, args DialogflowCxEntityTypeArgs) *DialogflowCxEntityType {
	return &DialogflowCxEntityType{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DialogflowCxEntityType)(nil)

type DialogflowCxEntityType struct {
	Name  string
	Args  DialogflowCxEntityTypeArgs
	state *dialogflowCxEntityTypeState
}

func (dcet *DialogflowCxEntityType) Type() string {
	return "google_dialogflow_cx_entity_type"
}

func (dcet *DialogflowCxEntityType) LocalName() string {
	return dcet.Name
}

func (dcet *DialogflowCxEntityType) Configuration() interface{} {
	return dcet.Args
}

func (dcet *DialogflowCxEntityType) Attributes() dialogflowCxEntityTypeAttributes {
	return dialogflowCxEntityTypeAttributes{ref: terra.ReferenceResource(dcet)}
}

func (dcet *DialogflowCxEntityType) ImportState(av io.Reader) error {
	dcet.state = &dialogflowCxEntityTypeState{}
	if err := json.NewDecoder(av).Decode(dcet.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcet.Type(), dcet.LocalName(), err)
	}
	return nil
}

func (dcet *DialogflowCxEntityType) State() (*dialogflowCxEntityTypeState, bool) {
	return dcet.state, dcet.state != nil
}

func (dcet *DialogflowCxEntityType) StateMust() *dialogflowCxEntityTypeState {
	if dcet.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcet.Type(), dcet.LocalName()))
	}
	return dcet.state
}

func (dcet *DialogflowCxEntityType) DependOn() terra.Reference {
	return terra.ReferenceResource(dcet)
}

type DialogflowCxEntityTypeArgs struct {
	// AutoExpansionMode: string, optional
	AutoExpansionMode terra.StringValue `hcl:"auto_expansion_mode,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// EnableFuzzyExtraction: bool, optional
	EnableFuzzyExtraction terra.BoolValue `hcl:"enable_fuzzy_extraction,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, required
	Kind terra.StringValue `hcl:"kind,attr" validate:"required"`
	// LanguageCode: string, optional
	LanguageCode terra.StringValue `hcl:"language_code,attr"`
	// Parent: string, optional
	Parent terra.StringValue `hcl:"parent,attr"`
	// Redact: bool, optional
	Redact terra.BoolValue `hcl:"redact,attr"`
	// Entities: min=1
	Entities []dialogflowcxentitytype.Entities `hcl:"entities,block" validate:"min=1"`
	// ExcludedPhrases: min=0
	ExcludedPhrases []dialogflowcxentitytype.ExcludedPhrases `hcl:"excluded_phrases,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dialogflowcxentitytype.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DialogflowCxEntityType depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dialogflowCxEntityTypeAttributes struct {
	ref terra.Reference
}

func (dcet dialogflowCxEntityTypeAttributes) AutoExpansionMode() terra.StringValue {
	return terra.ReferenceString(dcet.ref.Append("auto_expansion_mode"))
}

func (dcet dialogflowCxEntityTypeAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(dcet.ref.Append("display_name"))
}

func (dcet dialogflowCxEntityTypeAttributes) EnableFuzzyExtraction() terra.BoolValue {
	return terra.ReferenceBool(dcet.ref.Append("enable_fuzzy_extraction"))
}

func (dcet dialogflowCxEntityTypeAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dcet.ref.Append("id"))
}

func (dcet dialogflowCxEntityTypeAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(dcet.ref.Append("kind"))
}

func (dcet dialogflowCxEntityTypeAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceString(dcet.ref.Append("language_code"))
}

func (dcet dialogflowCxEntityTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dcet.ref.Append("name"))
}

func (dcet dialogflowCxEntityTypeAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(dcet.ref.Append("parent"))
}

func (dcet dialogflowCxEntityTypeAttributes) Redact() terra.BoolValue {
	return terra.ReferenceBool(dcet.ref.Append("redact"))
}

func (dcet dialogflowCxEntityTypeAttributes) Entities() terra.ListValue[dialogflowcxentitytype.EntitiesAttributes] {
	return terra.ReferenceList[dialogflowcxentitytype.EntitiesAttributes](dcet.ref.Append("entities"))
}

func (dcet dialogflowCxEntityTypeAttributes) ExcludedPhrases() terra.ListValue[dialogflowcxentitytype.ExcludedPhrasesAttributes] {
	return terra.ReferenceList[dialogflowcxentitytype.ExcludedPhrasesAttributes](dcet.ref.Append("excluded_phrases"))
}

func (dcet dialogflowCxEntityTypeAttributes) Timeouts() dialogflowcxentitytype.TimeoutsAttributes {
	return terra.ReferenceSingle[dialogflowcxentitytype.TimeoutsAttributes](dcet.ref.Append("timeouts"))
}

type dialogflowCxEntityTypeState struct {
	AutoExpansionMode     string                                        `json:"auto_expansion_mode"`
	DisplayName           string                                        `json:"display_name"`
	EnableFuzzyExtraction bool                                          `json:"enable_fuzzy_extraction"`
	Id                    string                                        `json:"id"`
	Kind                  string                                        `json:"kind"`
	LanguageCode          string                                        `json:"language_code"`
	Name                  string                                        `json:"name"`
	Parent                string                                        `json:"parent"`
	Redact                bool                                          `json:"redact"`
	Entities              []dialogflowcxentitytype.EntitiesState        `json:"entities"`
	ExcludedPhrases       []dialogflowcxentitytype.ExcludedPhrasesState `json:"excluded_phrases"`
	Timeouts              *dialogflowcxentitytype.TimeoutsState         `json:"timeouts"`
}
