// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivatecaCaPoolIamPolicy(name string, args PrivatecaCaPoolIamPolicyArgs) *PrivatecaCaPoolIamPolicy {
	return &PrivatecaCaPoolIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivatecaCaPoolIamPolicy)(nil)

type PrivatecaCaPoolIamPolicy struct {
	Name  string
	Args  PrivatecaCaPoolIamPolicyArgs
	state *privatecaCaPoolIamPolicyState
}

func (pcpip *PrivatecaCaPoolIamPolicy) Type() string {
	return "google_privateca_ca_pool_iam_policy"
}

func (pcpip *PrivatecaCaPoolIamPolicy) LocalName() string {
	return pcpip.Name
}

func (pcpip *PrivatecaCaPoolIamPolicy) Configuration() interface{} {
	return pcpip.Args
}

func (pcpip *PrivatecaCaPoolIamPolicy) Attributes() privatecaCaPoolIamPolicyAttributes {
	return privatecaCaPoolIamPolicyAttributes{ref: terra.ReferenceResource(pcpip)}
}

func (pcpip *PrivatecaCaPoolIamPolicy) ImportState(av io.Reader) error {
	pcpip.state = &privatecaCaPoolIamPolicyState{}
	if err := json.NewDecoder(av).Decode(pcpip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pcpip.Type(), pcpip.LocalName(), err)
	}
	return nil
}

func (pcpip *PrivatecaCaPoolIamPolicy) State() (*privatecaCaPoolIamPolicyState, bool) {
	return pcpip.state, pcpip.state != nil
}

func (pcpip *PrivatecaCaPoolIamPolicy) StateMust() *privatecaCaPoolIamPolicyState {
	if pcpip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pcpip.Type(), pcpip.LocalName()))
	}
	return pcpip.state
}

func (pcpip *PrivatecaCaPoolIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(pcpip)
}

type PrivatecaCaPoolIamPolicyArgs struct {
	// CaPool: string, required
	CaPool terra.StringValue `hcl:"ca_pool,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that PrivatecaCaPoolIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privatecaCaPoolIamPolicyAttributes struct {
	ref terra.Reference
}

func (pcpip privatecaCaPoolIamPolicyAttributes) CaPool() terra.StringValue {
	return terra.ReferenceString(pcpip.ref.Append("ca_pool"))
}

func (pcpip privatecaCaPoolIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(pcpip.ref.Append("etag"))
}

func (pcpip privatecaCaPoolIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pcpip.ref.Append("id"))
}

func (pcpip privatecaCaPoolIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pcpip.ref.Append("location"))
}

func (pcpip privatecaCaPoolIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(pcpip.ref.Append("policy_data"))
}

func (pcpip privatecaCaPoolIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(pcpip.ref.Append("project"))
}

type privatecaCaPoolIamPolicyState struct {
	CaPool     string `json:"ca_pool"`
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Location   string `json:"location"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
}
