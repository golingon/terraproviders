// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeforwardingrule "github.com/golingon/terraproviders/google/4.59.0/computeforwardingrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeForwardingRule(name string, args ComputeForwardingRuleArgs) *ComputeForwardingRule {
	return &ComputeForwardingRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeForwardingRule)(nil)

type ComputeForwardingRule struct {
	Name  string
	Args  ComputeForwardingRuleArgs
	state *computeForwardingRuleState
}

func (cfr *ComputeForwardingRule) Type() string {
	return "google_compute_forwarding_rule"
}

func (cfr *ComputeForwardingRule) LocalName() string {
	return cfr.Name
}

func (cfr *ComputeForwardingRule) Configuration() interface{} {
	return cfr.Args
}

func (cfr *ComputeForwardingRule) Attributes() computeForwardingRuleAttributes {
	return computeForwardingRuleAttributes{ref: terra.ReferenceResource(cfr)}
}

func (cfr *ComputeForwardingRule) ImportState(av io.Reader) error {
	cfr.state = &computeForwardingRuleState{}
	if err := json.NewDecoder(av).Decode(cfr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cfr.Type(), cfr.LocalName(), err)
	}
	return nil
}

func (cfr *ComputeForwardingRule) State() (*computeForwardingRuleState, bool) {
	return cfr.state, cfr.state != nil
}

func (cfr *ComputeForwardingRule) StateMust() *computeForwardingRuleState {
	if cfr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cfr.Type(), cfr.LocalName()))
	}
	return cfr.state
}

func (cfr *ComputeForwardingRule) DependOn() terra.Reference {
	return terra.ReferenceResource(cfr)
}

type ComputeForwardingRuleArgs struct {
	// AllPorts: bool, optional
	AllPorts terra.BoolValue `hcl:"all_ports,attr"`
	// AllowGlobalAccess: bool, optional
	AllowGlobalAccess terra.BoolValue `hcl:"allow_global_access,attr"`
	// BackendService: string, optional
	BackendService terra.StringValue `hcl:"backend_service,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// IpProtocol: string, optional
	IpProtocol terra.StringValue `hcl:"ip_protocol,attr"`
	// IsMirroringCollector: bool, optional
	IsMirroringCollector terra.BoolValue `hcl:"is_mirroring_collector,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LoadBalancingScheme: string, optional
	LoadBalancingScheme terra.StringValue `hcl:"load_balancing_scheme,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// NetworkTier: string, optional
	NetworkTier terra.StringValue `hcl:"network_tier,attr"`
	// PortRange: string, optional
	PortRange terra.StringValue `hcl:"port_range,attr"`
	// Ports: set of string, optional
	Ports terra.SetValue[terra.StringValue] `hcl:"ports,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ServiceLabel: string, optional
	ServiceLabel terra.StringValue `hcl:"service_label,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// Target: string, optional
	Target terra.StringValue `hcl:"target,attr"`
	// ServiceDirectoryRegistrations: min=0
	ServiceDirectoryRegistrations []computeforwardingrule.ServiceDirectoryRegistrations `hcl:"service_directory_registrations,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *computeforwardingrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeForwardingRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeForwardingRuleAttributes struct {
	ref terra.Reference
}

func (cfr computeForwardingRuleAttributes) AllPorts() terra.BoolValue {
	return terra.ReferenceBool(cfr.ref.Append("all_ports"))
}

func (cfr computeForwardingRuleAttributes) AllowGlobalAccess() terra.BoolValue {
	return terra.ReferenceBool(cfr.ref.Append("allow_global_access"))
}

func (cfr computeForwardingRuleAttributes) BackendService() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("backend_service"))
}

func (cfr computeForwardingRuleAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("creation_timestamp"))
}

func (cfr computeForwardingRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("description"))
}

func (cfr computeForwardingRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("id"))
}

func (cfr computeForwardingRuleAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("ip_address"))
}

func (cfr computeForwardingRuleAttributes) IpProtocol() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("ip_protocol"))
}

func (cfr computeForwardingRuleAttributes) IsMirroringCollector() terra.BoolValue {
	return terra.ReferenceBool(cfr.ref.Append("is_mirroring_collector"))
}

func (cfr computeForwardingRuleAttributes) LabelFingerprint() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("label_fingerprint"))
}

func (cfr computeForwardingRuleAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cfr.ref.Append("labels"))
}

func (cfr computeForwardingRuleAttributes) LoadBalancingScheme() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("load_balancing_scheme"))
}

func (cfr computeForwardingRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("name"))
}

func (cfr computeForwardingRuleAttributes) Network() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("network"))
}

func (cfr computeForwardingRuleAttributes) NetworkTier() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("network_tier"))
}

func (cfr computeForwardingRuleAttributes) PortRange() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("port_range"))
}

func (cfr computeForwardingRuleAttributes) Ports() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cfr.ref.Append("ports"))
}

func (cfr computeForwardingRuleAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("project"))
}

func (cfr computeForwardingRuleAttributes) PscConnectionId() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("psc_connection_id"))
}

func (cfr computeForwardingRuleAttributes) PscConnectionStatus() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("psc_connection_status"))
}

func (cfr computeForwardingRuleAttributes) Region() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("region"))
}

func (cfr computeForwardingRuleAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("self_link"))
}

func (cfr computeForwardingRuleAttributes) ServiceLabel() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("service_label"))
}

func (cfr computeForwardingRuleAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("service_name"))
}

func (cfr computeForwardingRuleAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("subnetwork"))
}

func (cfr computeForwardingRuleAttributes) Target() terra.StringValue {
	return terra.ReferenceString(cfr.ref.Append("target"))
}

func (cfr computeForwardingRuleAttributes) ServiceDirectoryRegistrations() terra.ListValue[computeforwardingrule.ServiceDirectoryRegistrationsAttributes] {
	return terra.ReferenceList[computeforwardingrule.ServiceDirectoryRegistrationsAttributes](cfr.ref.Append("service_directory_registrations"))
}

func (cfr computeForwardingRuleAttributes) Timeouts() computeforwardingrule.TimeoutsAttributes {
	return terra.ReferenceSingle[computeforwardingrule.TimeoutsAttributes](cfr.ref.Append("timeouts"))
}

type computeForwardingRuleState struct {
	AllPorts                      bool                                                       `json:"all_ports"`
	AllowGlobalAccess             bool                                                       `json:"allow_global_access"`
	BackendService                string                                                     `json:"backend_service"`
	CreationTimestamp             string                                                     `json:"creation_timestamp"`
	Description                   string                                                     `json:"description"`
	Id                            string                                                     `json:"id"`
	IpAddress                     string                                                     `json:"ip_address"`
	IpProtocol                    string                                                     `json:"ip_protocol"`
	IsMirroringCollector          bool                                                       `json:"is_mirroring_collector"`
	LabelFingerprint              string                                                     `json:"label_fingerprint"`
	Labels                        map[string]string                                          `json:"labels"`
	LoadBalancingScheme           string                                                     `json:"load_balancing_scheme"`
	Name                          string                                                     `json:"name"`
	Network                       string                                                     `json:"network"`
	NetworkTier                   string                                                     `json:"network_tier"`
	PortRange                     string                                                     `json:"port_range"`
	Ports                         []string                                                   `json:"ports"`
	Project                       string                                                     `json:"project"`
	PscConnectionId               string                                                     `json:"psc_connection_id"`
	PscConnectionStatus           string                                                     `json:"psc_connection_status"`
	Region                        string                                                     `json:"region"`
	SelfLink                      string                                                     `json:"self_link"`
	ServiceLabel                  string                                                     `json:"service_label"`
	ServiceName                   string                                                     `json:"service_name"`
	Subnetwork                    string                                                     `json:"subnetwork"`
	Target                        string                                                     `json:"target"`
	ServiceDirectoryRegistrations []computeforwardingrule.ServiceDirectoryRegistrationsState `json:"service_directory_registrations"`
	Timeouts                      *computeforwardingrule.TimeoutsState                       `json:"timeouts"`
}
