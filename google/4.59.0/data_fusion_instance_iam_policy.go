// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFusionInstanceIamPolicy(name string, args DataFusionInstanceIamPolicyArgs) *DataFusionInstanceIamPolicy {
	return &DataFusionInstanceIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFusionInstanceIamPolicy)(nil)

type DataFusionInstanceIamPolicy struct {
	Name  string
	Args  DataFusionInstanceIamPolicyArgs
	state *dataFusionInstanceIamPolicyState
}

func (dfiip *DataFusionInstanceIamPolicy) Type() string {
	return "google_data_fusion_instance_iam_policy"
}

func (dfiip *DataFusionInstanceIamPolicy) LocalName() string {
	return dfiip.Name
}

func (dfiip *DataFusionInstanceIamPolicy) Configuration() interface{} {
	return dfiip.Args
}

func (dfiip *DataFusionInstanceIamPolicy) Attributes() dataFusionInstanceIamPolicyAttributes {
	return dataFusionInstanceIamPolicyAttributes{ref: terra.ReferenceResource(dfiip)}
}

func (dfiip *DataFusionInstanceIamPolicy) ImportState(av io.Reader) error {
	dfiip.state = &dataFusionInstanceIamPolicyState{}
	if err := json.NewDecoder(av).Decode(dfiip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dfiip.Type(), dfiip.LocalName(), err)
	}
	return nil
}

func (dfiip *DataFusionInstanceIamPolicy) State() (*dataFusionInstanceIamPolicyState, bool) {
	return dfiip.state, dfiip.state != nil
}

func (dfiip *DataFusionInstanceIamPolicy) StateMust() *dataFusionInstanceIamPolicyState {
	if dfiip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dfiip.Type(), dfiip.LocalName()))
	}
	return dfiip.state
}

func (dfiip *DataFusionInstanceIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(dfiip)
}

type DataFusionInstanceIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// DependsOn contains resources that DataFusionInstanceIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFusionInstanceIamPolicyAttributes struct {
	ref terra.Reference
}

func (dfiip dataFusionInstanceIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dfiip.ref.Append("etag"))
}

func (dfiip dataFusionInstanceIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dfiip.ref.Append("id"))
}

func (dfiip dataFusionInstanceIamPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dfiip.ref.Append("name"))
}

func (dfiip dataFusionInstanceIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(dfiip.ref.Append("policy_data"))
}

func (dfiip dataFusionInstanceIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dfiip.ref.Append("project"))
}

func (dfiip dataFusionInstanceIamPolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dfiip.ref.Append("region"))
}

type dataFusionInstanceIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Name       string `json:"name"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	Region     string `json:"region"`
}
