// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	composerenvironment "github.com/golingon/terraproviders/google/4.59.0/composerenvironment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComposerEnvironment(name string, args ComposerEnvironmentArgs) *ComposerEnvironment {
	return &ComposerEnvironment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComposerEnvironment)(nil)

type ComposerEnvironment struct {
	Name  string
	Args  ComposerEnvironmentArgs
	state *composerEnvironmentState
}

func (ce *ComposerEnvironment) Type() string {
	return "google_composer_environment"
}

func (ce *ComposerEnvironment) LocalName() string {
	return ce.Name
}

func (ce *ComposerEnvironment) Configuration() interface{} {
	return ce.Args
}

func (ce *ComposerEnvironment) Attributes() composerEnvironmentAttributes {
	return composerEnvironmentAttributes{ref: terra.ReferenceResource(ce)}
}

func (ce *ComposerEnvironment) ImportState(av io.Reader) error {
	ce.state = &composerEnvironmentState{}
	if err := json.NewDecoder(av).Decode(ce.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ce.Type(), ce.LocalName(), err)
	}
	return nil
}

func (ce *ComposerEnvironment) State() (*composerEnvironmentState, bool) {
	return ce.state, ce.state != nil
}

func (ce *ComposerEnvironment) StateMust() *composerEnvironmentState {
	if ce.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ce.Type(), ce.LocalName()))
	}
	return ce.state
}

func (ce *ComposerEnvironment) DependOn() terra.Reference {
	return terra.ReferenceResource(ce)
}

type ComposerEnvironmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Config: optional
	Config *composerenvironment.Config `hcl:"config,block"`
	// Timeouts: optional
	Timeouts *composerenvironment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComposerEnvironment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type composerEnvironmentAttributes struct {
	ref terra.Reference
}

func (ce composerEnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("id"))
}

func (ce composerEnvironmentAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ce.ref.Append("labels"))
}

func (ce composerEnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("name"))
}

func (ce composerEnvironmentAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("project"))
}

func (ce composerEnvironmentAttributes) Region() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("region"))
}

func (ce composerEnvironmentAttributes) Config() terra.ListValue[composerenvironment.ConfigAttributes] {
	return terra.ReferenceList[composerenvironment.ConfigAttributes](ce.ref.Append("config"))
}

func (ce composerEnvironmentAttributes) Timeouts() composerenvironment.TimeoutsAttributes {
	return terra.ReferenceSingle[composerenvironment.TimeoutsAttributes](ce.ref.Append("timeouts"))
}

type composerEnvironmentState struct {
	Id       string                             `json:"id"`
	Labels   map[string]string                  `json:"labels"`
	Name     string                             `json:"name"`
	Project  string                             `json:"project"`
	Region   string                             `json:"region"`
	Config   []composerenvironment.ConfigState  `json:"config"`
	Timeouts *composerenvironment.TimeoutsState `json:"timeouts"`
}
