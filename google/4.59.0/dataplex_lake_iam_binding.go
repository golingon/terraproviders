// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dataplexlakeiambinding "github.com/golingon/terraproviders/google/4.59.0/dataplexlakeiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataplexLakeIamBinding(name string, args DataplexLakeIamBindingArgs) *DataplexLakeIamBinding {
	return &DataplexLakeIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataplexLakeIamBinding)(nil)

type DataplexLakeIamBinding struct {
	Name  string
	Args  DataplexLakeIamBindingArgs
	state *dataplexLakeIamBindingState
}

func (dlib *DataplexLakeIamBinding) Type() string {
	return "google_dataplex_lake_iam_binding"
}

func (dlib *DataplexLakeIamBinding) LocalName() string {
	return dlib.Name
}

func (dlib *DataplexLakeIamBinding) Configuration() interface{} {
	return dlib.Args
}

func (dlib *DataplexLakeIamBinding) Attributes() dataplexLakeIamBindingAttributes {
	return dataplexLakeIamBindingAttributes{ref: terra.ReferenceResource(dlib)}
}

func (dlib *DataplexLakeIamBinding) ImportState(av io.Reader) error {
	dlib.state = &dataplexLakeIamBindingState{}
	if err := json.NewDecoder(av).Decode(dlib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dlib.Type(), dlib.LocalName(), err)
	}
	return nil
}

func (dlib *DataplexLakeIamBinding) State() (*dataplexLakeIamBindingState, bool) {
	return dlib.state, dlib.state != nil
}

func (dlib *DataplexLakeIamBinding) StateMust() *dataplexLakeIamBindingState {
	if dlib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dlib.Type(), dlib.LocalName()))
	}
	return dlib.state
}

func (dlib *DataplexLakeIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(dlib)
}

type DataplexLakeIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Lake: string, required
	Lake terra.StringValue `hcl:"lake,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *dataplexlakeiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataplexLakeIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataplexLakeIamBindingAttributes struct {
	ref terra.Reference
}

func (dlib dataplexLakeIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dlib.ref.Append("etag"))
}

func (dlib dataplexLakeIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dlib.ref.Append("id"))
}

func (dlib dataplexLakeIamBindingAttributes) Lake() terra.StringValue {
	return terra.ReferenceString(dlib.ref.Append("lake"))
}

func (dlib dataplexLakeIamBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dlib.ref.Append("location"))
}

func (dlib dataplexLakeIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dlib.ref.Append("members"))
}

func (dlib dataplexLakeIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dlib.ref.Append("project"))
}

func (dlib dataplexLakeIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(dlib.ref.Append("role"))
}

func (dlib dataplexLakeIamBindingAttributes) Condition() terra.ListValue[dataplexlakeiambinding.ConditionAttributes] {
	return terra.ReferenceList[dataplexlakeiambinding.ConditionAttributes](dlib.ref.Append("condition"))
}

type dataplexLakeIamBindingState struct {
	Etag      string                                  `json:"etag"`
	Id        string                                  `json:"id"`
	Lake      string                                  `json:"lake"`
	Location  string                                  `json:"location"`
	Members   []string                                `json:"members"`
	Project   string                                  `json:"project"`
	Role      string                                  `json:"role"`
	Condition []dataplexlakeiambinding.ConditionState `json:"condition"`
}
