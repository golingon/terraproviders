// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	monitoringdashboard "github.com/golingon/terraproviders/google/4.59.0/monitoringdashboard"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitoringDashboard(name string, args MonitoringDashboardArgs) *MonitoringDashboard {
	return &MonitoringDashboard{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitoringDashboard)(nil)

type MonitoringDashboard struct {
	Name  string
	Args  MonitoringDashboardArgs
	state *monitoringDashboardState
}

func (md *MonitoringDashboard) Type() string {
	return "google_monitoring_dashboard"
}

func (md *MonitoringDashboard) LocalName() string {
	return md.Name
}

func (md *MonitoringDashboard) Configuration() interface{} {
	return md.Args
}

func (md *MonitoringDashboard) Attributes() monitoringDashboardAttributes {
	return monitoringDashboardAttributes{ref: terra.ReferenceResource(md)}
}

func (md *MonitoringDashboard) ImportState(av io.Reader) error {
	md.state = &monitoringDashboardState{}
	if err := json.NewDecoder(av).Decode(md.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", md.Type(), md.LocalName(), err)
	}
	return nil
}

func (md *MonitoringDashboard) State() (*monitoringDashboardState, bool) {
	return md.state, md.state != nil
}

func (md *MonitoringDashboard) StateMust() *monitoringDashboardState {
	if md.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", md.Type(), md.LocalName()))
	}
	return md.state
}

func (md *MonitoringDashboard) DependOn() terra.Reference {
	return terra.ReferenceResource(md)
}

type MonitoringDashboardArgs struct {
	// DashboardJson: string, required
	DashboardJson terra.StringValue `hcl:"dashboard_json,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *monitoringdashboard.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MonitoringDashboard depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitoringDashboardAttributes struct {
	ref terra.Reference
}

func (md monitoringDashboardAttributes) DashboardJson() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("dashboard_json"))
}

func (md monitoringDashboardAttributes) Id() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("id"))
}

func (md monitoringDashboardAttributes) Project() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("project"))
}

func (md monitoringDashboardAttributes) Timeouts() monitoringdashboard.TimeoutsAttributes {
	return terra.ReferenceSingle[monitoringdashboard.TimeoutsAttributes](md.ref.Append("timeouts"))
}

type monitoringDashboardState struct {
	DashboardJson string                             `json:"dashboard_json"`
	Id            string                             `json:"id"`
	Project       string                             `json:"project"`
	Timeouts      *monitoringdashboard.TimeoutsState `json:"timeouts"`
}
