// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	certificatemanagerdnsauthorization "github.com/golingon/terraproviders/google/4.59.0/certificatemanagerdnsauthorization"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCertificateManagerDnsAuthorization(name string, args CertificateManagerDnsAuthorizationArgs) *CertificateManagerDnsAuthorization {
	return &CertificateManagerDnsAuthorization{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CertificateManagerDnsAuthorization)(nil)

type CertificateManagerDnsAuthorization struct {
	Name  string
	Args  CertificateManagerDnsAuthorizationArgs
	state *certificateManagerDnsAuthorizationState
}

func (cmda *CertificateManagerDnsAuthorization) Type() string {
	return "google_certificate_manager_dns_authorization"
}

func (cmda *CertificateManagerDnsAuthorization) LocalName() string {
	return cmda.Name
}

func (cmda *CertificateManagerDnsAuthorization) Configuration() interface{} {
	return cmda.Args
}

func (cmda *CertificateManagerDnsAuthorization) Attributes() certificateManagerDnsAuthorizationAttributes {
	return certificateManagerDnsAuthorizationAttributes{ref: terra.ReferenceResource(cmda)}
}

func (cmda *CertificateManagerDnsAuthorization) ImportState(av io.Reader) error {
	cmda.state = &certificateManagerDnsAuthorizationState{}
	if err := json.NewDecoder(av).Decode(cmda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cmda.Type(), cmda.LocalName(), err)
	}
	return nil
}

func (cmda *CertificateManagerDnsAuthorization) State() (*certificateManagerDnsAuthorizationState, bool) {
	return cmda.state, cmda.state != nil
}

func (cmda *CertificateManagerDnsAuthorization) StateMust() *certificateManagerDnsAuthorizationState {
	if cmda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cmda.Type(), cmda.LocalName()))
	}
	return cmda.state
}

func (cmda *CertificateManagerDnsAuthorization) DependOn() terra.Reference {
	return terra.ReferenceResource(cmda)
}

type CertificateManagerDnsAuthorizationArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Domain: string, required
	Domain terra.StringValue `hcl:"domain,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DnsResourceRecord: min=0
	DnsResourceRecord []certificatemanagerdnsauthorization.DnsResourceRecord `hcl:"dns_resource_record,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *certificatemanagerdnsauthorization.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CertificateManagerDnsAuthorization depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type certificateManagerDnsAuthorizationAttributes struct {
	ref terra.Reference
}

func (cmda certificateManagerDnsAuthorizationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cmda.ref.Append("description"))
}

func (cmda certificateManagerDnsAuthorizationAttributes) Domain() terra.StringValue {
	return terra.ReferenceString(cmda.ref.Append("domain"))
}

func (cmda certificateManagerDnsAuthorizationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cmda.ref.Append("id"))
}

func (cmda certificateManagerDnsAuthorizationAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cmda.ref.Append("labels"))
}

func (cmda certificateManagerDnsAuthorizationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cmda.ref.Append("name"))
}

func (cmda certificateManagerDnsAuthorizationAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cmda.ref.Append("project"))
}

func (cmda certificateManagerDnsAuthorizationAttributes) DnsResourceRecord() terra.ListValue[certificatemanagerdnsauthorization.DnsResourceRecordAttributes] {
	return terra.ReferenceList[certificatemanagerdnsauthorization.DnsResourceRecordAttributes](cmda.ref.Append("dns_resource_record"))
}

func (cmda certificateManagerDnsAuthorizationAttributes) Timeouts() certificatemanagerdnsauthorization.TimeoutsAttributes {
	return terra.ReferenceSingle[certificatemanagerdnsauthorization.TimeoutsAttributes](cmda.ref.Append("timeouts"))
}

type certificateManagerDnsAuthorizationState struct {
	Description       string                                                      `json:"description"`
	Domain            string                                                      `json:"domain"`
	Id                string                                                      `json:"id"`
	Labels            map[string]string                                           `json:"labels"`
	Name              string                                                      `json:"name"`
	Project           string                                                      `json:"project"`
	DnsResourceRecord []certificatemanagerdnsauthorization.DnsResourceRecordState `json:"dns_resource_record"`
	Timeouts          *certificatemanagerdnsauthorization.TimeoutsState           `json:"timeouts"`
}
