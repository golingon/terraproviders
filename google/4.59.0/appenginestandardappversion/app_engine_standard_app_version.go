// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package appenginestandardappversion

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AutomaticScaling struct {
	// MaxConcurrentRequests: number, optional
	MaxConcurrentRequests terra.NumberValue `hcl:"max_concurrent_requests,attr"`
	// MaxIdleInstances: number, optional
	MaxIdleInstances terra.NumberValue `hcl:"max_idle_instances,attr"`
	// MaxPendingLatency: string, optional
	MaxPendingLatency terra.StringValue `hcl:"max_pending_latency,attr"`
	// MinIdleInstances: number, optional
	MinIdleInstances terra.NumberValue `hcl:"min_idle_instances,attr"`
	// MinPendingLatency: string, optional
	MinPendingLatency terra.StringValue `hcl:"min_pending_latency,attr"`
	// StandardSchedulerSettings: optional
	StandardSchedulerSettings *StandardSchedulerSettings `hcl:"standard_scheduler_settings,block"`
}

type StandardSchedulerSettings struct {
	// MaxInstances: number, optional
	MaxInstances terra.NumberValue `hcl:"max_instances,attr"`
	// MinInstances: number, optional
	MinInstances terra.NumberValue `hcl:"min_instances,attr"`
	// TargetCpuUtilization: number, optional
	TargetCpuUtilization terra.NumberValue `hcl:"target_cpu_utilization,attr"`
	// TargetThroughputUtilization: number, optional
	TargetThroughputUtilization terra.NumberValue `hcl:"target_throughput_utilization,attr"`
}

type BasicScaling struct {
	// IdleTimeout: string, optional
	IdleTimeout terra.StringValue `hcl:"idle_timeout,attr"`
	// MaxInstances: number, required
	MaxInstances terra.NumberValue `hcl:"max_instances,attr" validate:"required"`
}

type Deployment struct {
	// Files: min=0
	Files []Files `hcl:"files,block" validate:"min=0"`
	// Zip: optional
	Zip *Zip `hcl:"zip,block"`
}

type Files struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Sha1Sum: string, optional
	Sha1Sum terra.StringValue `hcl:"sha1_sum,attr"`
	// SourceUrl: string, required
	SourceUrl terra.StringValue `hcl:"source_url,attr" validate:"required"`
}

type Zip struct {
	// FilesCount: number, optional
	FilesCount terra.NumberValue `hcl:"files_count,attr"`
	// SourceUrl: string, required
	SourceUrl terra.StringValue `hcl:"source_url,attr" validate:"required"`
}

type Entrypoint struct {
	// Shell: string, required
	Shell terra.StringValue `hcl:"shell,attr" validate:"required"`
}

type Handlers struct {
	// AuthFailAction: string, optional
	AuthFailAction terra.StringValue `hcl:"auth_fail_action,attr"`
	// Login: string, optional
	Login terra.StringValue `hcl:"login,attr"`
	// RedirectHttpResponseCode: string, optional
	RedirectHttpResponseCode terra.StringValue `hcl:"redirect_http_response_code,attr"`
	// SecurityLevel: string, optional
	SecurityLevel terra.StringValue `hcl:"security_level,attr"`
	// UrlRegex: string, optional
	UrlRegex terra.StringValue `hcl:"url_regex,attr"`
	// Script: optional
	Script *Script `hcl:"script,block"`
	// StaticFiles: optional
	StaticFiles *StaticFiles `hcl:"static_files,block"`
}

type Script struct {
	// ScriptPath: string, required
	ScriptPath terra.StringValue `hcl:"script_path,attr" validate:"required"`
}

type StaticFiles struct {
	// ApplicationReadable: bool, optional
	ApplicationReadable terra.BoolValue `hcl:"application_readable,attr"`
	// Expiration: string, optional
	Expiration terra.StringValue `hcl:"expiration,attr"`
	// HttpHeaders: map of string, optional
	HttpHeaders terra.MapValue[terra.StringValue] `hcl:"http_headers,attr"`
	// MimeType: string, optional
	MimeType terra.StringValue `hcl:"mime_type,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// RequireMatchingFile: bool, optional
	RequireMatchingFile terra.BoolValue `hcl:"require_matching_file,attr"`
	// UploadPathRegex: string, optional
	UploadPathRegex terra.StringValue `hcl:"upload_path_regex,attr"`
}

type Libraries struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type ManualScaling struct {
	// Instances: number, required
	Instances terra.NumberValue `hcl:"instances,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VpcAccessConnector struct {
	// EgressSetting: string, optional
	EgressSetting terra.StringValue `hcl:"egress_setting,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type AutomaticScalingAttributes struct {
	ref terra.Reference
}

func (as AutomaticScalingAttributes) InternalRef() terra.Reference {
	return as.ref
}

func (as AutomaticScalingAttributes) InternalWithRef(ref terra.Reference) AutomaticScalingAttributes {
	return AutomaticScalingAttributes{ref: ref}
}

func (as AutomaticScalingAttributes) InternalTokens() hclwrite.Tokens {
	return as.ref.InternalTokens()
}

func (as AutomaticScalingAttributes) MaxConcurrentRequests() terra.NumberValue {
	return terra.ReferenceNumber(as.ref.Append("max_concurrent_requests"))
}

func (as AutomaticScalingAttributes) MaxIdleInstances() terra.NumberValue {
	return terra.ReferenceNumber(as.ref.Append("max_idle_instances"))
}

func (as AutomaticScalingAttributes) MaxPendingLatency() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("max_pending_latency"))
}

func (as AutomaticScalingAttributes) MinIdleInstances() terra.NumberValue {
	return terra.ReferenceNumber(as.ref.Append("min_idle_instances"))
}

func (as AutomaticScalingAttributes) MinPendingLatency() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("min_pending_latency"))
}

func (as AutomaticScalingAttributes) StandardSchedulerSettings() terra.ListValue[StandardSchedulerSettingsAttributes] {
	return terra.ReferenceList[StandardSchedulerSettingsAttributes](as.ref.Append("standard_scheduler_settings"))
}

type StandardSchedulerSettingsAttributes struct {
	ref terra.Reference
}

func (sss StandardSchedulerSettingsAttributes) InternalRef() terra.Reference {
	return sss.ref
}

func (sss StandardSchedulerSettingsAttributes) InternalWithRef(ref terra.Reference) StandardSchedulerSettingsAttributes {
	return StandardSchedulerSettingsAttributes{ref: ref}
}

func (sss StandardSchedulerSettingsAttributes) InternalTokens() hclwrite.Tokens {
	return sss.ref.InternalTokens()
}

func (sss StandardSchedulerSettingsAttributes) MaxInstances() terra.NumberValue {
	return terra.ReferenceNumber(sss.ref.Append("max_instances"))
}

func (sss StandardSchedulerSettingsAttributes) MinInstances() terra.NumberValue {
	return terra.ReferenceNumber(sss.ref.Append("min_instances"))
}

func (sss StandardSchedulerSettingsAttributes) TargetCpuUtilization() terra.NumberValue {
	return terra.ReferenceNumber(sss.ref.Append("target_cpu_utilization"))
}

func (sss StandardSchedulerSettingsAttributes) TargetThroughputUtilization() terra.NumberValue {
	return terra.ReferenceNumber(sss.ref.Append("target_throughput_utilization"))
}

type BasicScalingAttributes struct {
	ref terra.Reference
}

func (bs BasicScalingAttributes) InternalRef() terra.Reference {
	return bs.ref
}

func (bs BasicScalingAttributes) InternalWithRef(ref terra.Reference) BasicScalingAttributes {
	return BasicScalingAttributes{ref: ref}
}

func (bs BasicScalingAttributes) InternalTokens() hclwrite.Tokens {
	return bs.ref.InternalTokens()
}

func (bs BasicScalingAttributes) IdleTimeout() terra.StringValue {
	return terra.ReferenceString(bs.ref.Append("idle_timeout"))
}

func (bs BasicScalingAttributes) MaxInstances() terra.NumberValue {
	return terra.ReferenceNumber(bs.ref.Append("max_instances"))
}

type DeploymentAttributes struct {
	ref terra.Reference
}

func (d DeploymentAttributes) InternalRef() terra.Reference {
	return d.ref
}

func (d DeploymentAttributes) InternalWithRef(ref terra.Reference) DeploymentAttributes {
	return DeploymentAttributes{ref: ref}
}

func (d DeploymentAttributes) InternalTokens() hclwrite.Tokens {
	return d.ref.InternalTokens()
}

func (d DeploymentAttributes) Files() terra.SetValue[FilesAttributes] {
	return terra.ReferenceSet[FilesAttributes](d.ref.Append("files"))
}

func (d DeploymentAttributes) Zip() terra.ListValue[ZipAttributes] {
	return terra.ReferenceList[ZipAttributes](d.ref.Append("zip"))
}

type FilesAttributes struct {
	ref terra.Reference
}

func (f FilesAttributes) InternalRef() terra.Reference {
	return f.ref
}

func (f FilesAttributes) InternalWithRef(ref terra.Reference) FilesAttributes {
	return FilesAttributes{ref: ref}
}

func (f FilesAttributes) InternalTokens() hclwrite.Tokens {
	return f.ref.InternalTokens()
}

func (f FilesAttributes) Name() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("name"))
}

func (f FilesAttributes) Sha1Sum() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("sha1_sum"))
}

func (f FilesAttributes) SourceUrl() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("source_url"))
}

type ZipAttributes struct {
	ref terra.Reference
}

func (z ZipAttributes) InternalRef() terra.Reference {
	return z.ref
}

func (z ZipAttributes) InternalWithRef(ref terra.Reference) ZipAttributes {
	return ZipAttributes{ref: ref}
}

func (z ZipAttributes) InternalTokens() hclwrite.Tokens {
	return z.ref.InternalTokens()
}

func (z ZipAttributes) FilesCount() terra.NumberValue {
	return terra.ReferenceNumber(z.ref.Append("files_count"))
}

func (z ZipAttributes) SourceUrl() terra.StringValue {
	return terra.ReferenceString(z.ref.Append("source_url"))
}

type EntrypointAttributes struct {
	ref terra.Reference
}

func (e EntrypointAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e EntrypointAttributes) InternalWithRef(ref terra.Reference) EntrypointAttributes {
	return EntrypointAttributes{ref: ref}
}

func (e EntrypointAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e EntrypointAttributes) Shell() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("shell"))
}

type HandlersAttributes struct {
	ref terra.Reference
}

func (h HandlersAttributes) InternalRef() terra.Reference {
	return h.ref
}

func (h HandlersAttributes) InternalWithRef(ref terra.Reference) HandlersAttributes {
	return HandlersAttributes{ref: ref}
}

func (h HandlersAttributes) InternalTokens() hclwrite.Tokens {
	return h.ref.InternalTokens()
}

func (h HandlersAttributes) AuthFailAction() terra.StringValue {
	return terra.ReferenceString(h.ref.Append("auth_fail_action"))
}

func (h HandlersAttributes) Login() terra.StringValue {
	return terra.ReferenceString(h.ref.Append("login"))
}

func (h HandlersAttributes) RedirectHttpResponseCode() terra.StringValue {
	return terra.ReferenceString(h.ref.Append("redirect_http_response_code"))
}

func (h HandlersAttributes) SecurityLevel() terra.StringValue {
	return terra.ReferenceString(h.ref.Append("security_level"))
}

func (h HandlersAttributes) UrlRegex() terra.StringValue {
	return terra.ReferenceString(h.ref.Append("url_regex"))
}

func (h HandlersAttributes) Script() terra.ListValue[ScriptAttributes] {
	return terra.ReferenceList[ScriptAttributes](h.ref.Append("script"))
}

func (h HandlersAttributes) StaticFiles() terra.ListValue[StaticFilesAttributes] {
	return terra.ReferenceList[StaticFilesAttributes](h.ref.Append("static_files"))
}

type ScriptAttributes struct {
	ref terra.Reference
}

func (s ScriptAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s ScriptAttributes) InternalWithRef(ref terra.Reference) ScriptAttributes {
	return ScriptAttributes{ref: ref}
}

func (s ScriptAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s ScriptAttributes) ScriptPath() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("script_path"))
}

type StaticFilesAttributes struct {
	ref terra.Reference
}

func (sf StaticFilesAttributes) InternalRef() terra.Reference {
	return sf.ref
}

func (sf StaticFilesAttributes) InternalWithRef(ref terra.Reference) StaticFilesAttributes {
	return StaticFilesAttributes{ref: ref}
}

func (sf StaticFilesAttributes) InternalTokens() hclwrite.Tokens {
	return sf.ref.InternalTokens()
}

func (sf StaticFilesAttributes) ApplicationReadable() terra.BoolValue {
	return terra.ReferenceBool(sf.ref.Append("application_readable"))
}

func (sf StaticFilesAttributes) Expiration() terra.StringValue {
	return terra.ReferenceString(sf.ref.Append("expiration"))
}

func (sf StaticFilesAttributes) HttpHeaders() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sf.ref.Append("http_headers"))
}

func (sf StaticFilesAttributes) MimeType() terra.StringValue {
	return terra.ReferenceString(sf.ref.Append("mime_type"))
}

func (sf StaticFilesAttributes) Path() terra.StringValue {
	return terra.ReferenceString(sf.ref.Append("path"))
}

func (sf StaticFilesAttributes) RequireMatchingFile() terra.BoolValue {
	return terra.ReferenceBool(sf.ref.Append("require_matching_file"))
}

func (sf StaticFilesAttributes) UploadPathRegex() terra.StringValue {
	return terra.ReferenceString(sf.ref.Append("upload_path_regex"))
}

type LibrariesAttributes struct {
	ref terra.Reference
}

func (l LibrariesAttributes) InternalRef() terra.Reference {
	return l.ref
}

func (l LibrariesAttributes) InternalWithRef(ref terra.Reference) LibrariesAttributes {
	return LibrariesAttributes{ref: ref}
}

func (l LibrariesAttributes) InternalTokens() hclwrite.Tokens {
	return l.ref.InternalTokens()
}

func (l LibrariesAttributes) Name() terra.StringValue {
	return terra.ReferenceString(l.ref.Append("name"))
}

func (l LibrariesAttributes) Version() terra.StringValue {
	return terra.ReferenceString(l.ref.Append("version"))
}

type ManualScalingAttributes struct {
	ref terra.Reference
}

func (ms ManualScalingAttributes) InternalRef() terra.Reference {
	return ms.ref
}

func (ms ManualScalingAttributes) InternalWithRef(ref terra.Reference) ManualScalingAttributes {
	return ManualScalingAttributes{ref: ref}
}

func (ms ManualScalingAttributes) InternalTokens() hclwrite.Tokens {
	return ms.ref.InternalTokens()
}

func (ms ManualScalingAttributes) Instances() terra.NumberValue {
	return terra.ReferenceNumber(ms.ref.Append("instances"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type VpcAccessConnectorAttributes struct {
	ref terra.Reference
}

func (vac VpcAccessConnectorAttributes) InternalRef() terra.Reference {
	return vac.ref
}

func (vac VpcAccessConnectorAttributes) InternalWithRef(ref terra.Reference) VpcAccessConnectorAttributes {
	return VpcAccessConnectorAttributes{ref: ref}
}

func (vac VpcAccessConnectorAttributes) InternalTokens() hclwrite.Tokens {
	return vac.ref.InternalTokens()
}

func (vac VpcAccessConnectorAttributes) EgressSetting() terra.StringValue {
	return terra.ReferenceString(vac.ref.Append("egress_setting"))
}

func (vac VpcAccessConnectorAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vac.ref.Append("name"))
}

type AutomaticScalingState struct {
	MaxConcurrentRequests     float64                          `json:"max_concurrent_requests"`
	MaxIdleInstances          float64                          `json:"max_idle_instances"`
	MaxPendingLatency         string                           `json:"max_pending_latency"`
	MinIdleInstances          float64                          `json:"min_idle_instances"`
	MinPendingLatency         string                           `json:"min_pending_latency"`
	StandardSchedulerSettings []StandardSchedulerSettingsState `json:"standard_scheduler_settings"`
}

type StandardSchedulerSettingsState struct {
	MaxInstances                float64 `json:"max_instances"`
	MinInstances                float64 `json:"min_instances"`
	TargetCpuUtilization        float64 `json:"target_cpu_utilization"`
	TargetThroughputUtilization float64 `json:"target_throughput_utilization"`
}

type BasicScalingState struct {
	IdleTimeout  string  `json:"idle_timeout"`
	MaxInstances float64 `json:"max_instances"`
}

type DeploymentState struct {
	Files []FilesState `json:"files"`
	Zip   []ZipState   `json:"zip"`
}

type FilesState struct {
	Name      string `json:"name"`
	Sha1Sum   string `json:"sha1_sum"`
	SourceUrl string `json:"source_url"`
}

type ZipState struct {
	FilesCount float64 `json:"files_count"`
	SourceUrl  string  `json:"source_url"`
}

type EntrypointState struct {
	Shell string `json:"shell"`
}

type HandlersState struct {
	AuthFailAction           string             `json:"auth_fail_action"`
	Login                    string             `json:"login"`
	RedirectHttpResponseCode string             `json:"redirect_http_response_code"`
	SecurityLevel            string             `json:"security_level"`
	UrlRegex                 string             `json:"url_regex"`
	Script                   []ScriptState      `json:"script"`
	StaticFiles              []StaticFilesState `json:"static_files"`
}

type ScriptState struct {
	ScriptPath string `json:"script_path"`
}

type StaticFilesState struct {
	ApplicationReadable bool              `json:"application_readable"`
	Expiration          string            `json:"expiration"`
	HttpHeaders         map[string]string `json:"http_headers"`
	MimeType            string            `json:"mime_type"`
	Path                string            `json:"path"`
	RequireMatchingFile bool              `json:"require_matching_file"`
	UploadPathRegex     string            `json:"upload_path_regex"`
}

type LibrariesState struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

type ManualScalingState struct {
	Instances float64 `json:"instances"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VpcAccessConnectorState struct {
	EgressSetting string `json:"egress_setting"`
	Name          string `json:"name"`
}
