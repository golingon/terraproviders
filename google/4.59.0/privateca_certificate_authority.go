// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	privatecacertificateauthority "github.com/golingon/terraproviders/google/4.59.0/privatecacertificateauthority"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivatecaCertificateAuthority(name string, args PrivatecaCertificateAuthorityArgs) *PrivatecaCertificateAuthority {
	return &PrivatecaCertificateAuthority{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivatecaCertificateAuthority)(nil)

type PrivatecaCertificateAuthority struct {
	Name  string
	Args  PrivatecaCertificateAuthorityArgs
	state *privatecaCertificateAuthorityState
}

func (pca *PrivatecaCertificateAuthority) Type() string {
	return "google_privateca_certificate_authority"
}

func (pca *PrivatecaCertificateAuthority) LocalName() string {
	return pca.Name
}

func (pca *PrivatecaCertificateAuthority) Configuration() interface{} {
	return pca.Args
}

func (pca *PrivatecaCertificateAuthority) Attributes() privatecaCertificateAuthorityAttributes {
	return privatecaCertificateAuthorityAttributes{ref: terra.ReferenceResource(pca)}
}

func (pca *PrivatecaCertificateAuthority) ImportState(av io.Reader) error {
	pca.state = &privatecaCertificateAuthorityState{}
	if err := json.NewDecoder(av).Decode(pca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pca.Type(), pca.LocalName(), err)
	}
	return nil
}

func (pca *PrivatecaCertificateAuthority) State() (*privatecaCertificateAuthorityState, bool) {
	return pca.state, pca.state != nil
}

func (pca *PrivatecaCertificateAuthority) StateMust() *privatecaCertificateAuthorityState {
	if pca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pca.Type(), pca.LocalName()))
	}
	return pca.state
}

func (pca *PrivatecaCertificateAuthority) DependOn() terra.Reference {
	return terra.ReferenceResource(pca)
}

type PrivatecaCertificateAuthorityArgs struct {
	// CertificateAuthorityId: string, required
	CertificateAuthorityId terra.StringValue `hcl:"certificate_authority_id,attr" validate:"required"`
	// DeletionProtection: bool, optional
	DeletionProtection terra.BoolValue `hcl:"deletion_protection,attr"`
	// DesiredState: string, optional
	DesiredState terra.StringValue `hcl:"desired_state,attr"`
	// GcsBucket: string, optional
	GcsBucket terra.StringValue `hcl:"gcs_bucket,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreActiveCertificatesOnDeletion: bool, optional
	IgnoreActiveCertificatesOnDeletion terra.BoolValue `hcl:"ignore_active_certificates_on_deletion,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Lifetime: string, optional
	Lifetime terra.StringValue `hcl:"lifetime,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// PemCaCertificate: string, optional
	PemCaCertificate terra.StringValue `hcl:"pem_ca_certificate,attr"`
	// Pool: string, required
	Pool terra.StringValue `hcl:"pool,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SkipGracePeriod: bool, optional
	SkipGracePeriod terra.BoolValue `hcl:"skip_grace_period,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// AccessUrls: min=0
	AccessUrls []privatecacertificateauthority.AccessUrls `hcl:"access_urls,block" validate:"min=0"`
	// Config: required
	Config *privatecacertificateauthority.Config `hcl:"config,block" validate:"required"`
	// KeySpec: required
	KeySpec *privatecacertificateauthority.KeySpec `hcl:"key_spec,block" validate:"required"`
	// SubordinateConfig: optional
	SubordinateConfig *privatecacertificateauthority.SubordinateConfig `hcl:"subordinate_config,block"`
	// Timeouts: optional
	Timeouts *privatecacertificateauthority.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PrivatecaCertificateAuthority depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privatecaCertificateAuthorityAttributes struct {
	ref terra.Reference
}

func (pca privatecaCertificateAuthorityAttributes) CertificateAuthorityId() terra.StringValue {
	return terra.ReferenceString(pca.ref.Append("certificate_authority_id"))
}

func (pca privatecaCertificateAuthorityAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(pca.ref.Append("create_time"))
}

func (pca privatecaCertificateAuthorityAttributes) DeletionProtection() terra.BoolValue {
	return terra.ReferenceBool(pca.ref.Append("deletion_protection"))
}

func (pca privatecaCertificateAuthorityAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceString(pca.ref.Append("desired_state"))
}

func (pca privatecaCertificateAuthorityAttributes) GcsBucket() terra.StringValue {
	return terra.ReferenceString(pca.ref.Append("gcs_bucket"))
}

func (pca privatecaCertificateAuthorityAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pca.ref.Append("id"))
}

func (pca privatecaCertificateAuthorityAttributes) IgnoreActiveCertificatesOnDeletion() terra.BoolValue {
	return terra.ReferenceBool(pca.ref.Append("ignore_active_certificates_on_deletion"))
}

func (pca privatecaCertificateAuthorityAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pca.ref.Append("labels"))
}

func (pca privatecaCertificateAuthorityAttributes) Lifetime() terra.StringValue {
	return terra.ReferenceString(pca.ref.Append("lifetime"))
}

func (pca privatecaCertificateAuthorityAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pca.ref.Append("location"))
}

func (pca privatecaCertificateAuthorityAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pca.ref.Append("name"))
}

func (pca privatecaCertificateAuthorityAttributes) PemCaCertificate() terra.StringValue {
	return terra.ReferenceString(pca.ref.Append("pem_ca_certificate"))
}

func (pca privatecaCertificateAuthorityAttributes) PemCaCertificates() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](pca.ref.Append("pem_ca_certificates"))
}

func (pca privatecaCertificateAuthorityAttributes) Pool() terra.StringValue {
	return terra.ReferenceString(pca.ref.Append("pool"))
}

func (pca privatecaCertificateAuthorityAttributes) Project() terra.StringValue {
	return terra.ReferenceString(pca.ref.Append("project"))
}

func (pca privatecaCertificateAuthorityAttributes) SkipGracePeriod() terra.BoolValue {
	return terra.ReferenceBool(pca.ref.Append("skip_grace_period"))
}

func (pca privatecaCertificateAuthorityAttributes) State() terra.StringValue {
	return terra.ReferenceString(pca.ref.Append("state"))
}

func (pca privatecaCertificateAuthorityAttributes) Type() terra.StringValue {
	return terra.ReferenceString(pca.ref.Append("type"))
}

func (pca privatecaCertificateAuthorityAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(pca.ref.Append("update_time"))
}

func (pca privatecaCertificateAuthorityAttributes) AccessUrls() terra.ListValue[privatecacertificateauthority.AccessUrlsAttributes] {
	return terra.ReferenceList[privatecacertificateauthority.AccessUrlsAttributes](pca.ref.Append("access_urls"))
}

func (pca privatecaCertificateAuthorityAttributes) Config() terra.ListValue[privatecacertificateauthority.ConfigAttributes] {
	return terra.ReferenceList[privatecacertificateauthority.ConfigAttributes](pca.ref.Append("config"))
}

func (pca privatecaCertificateAuthorityAttributes) KeySpec() terra.ListValue[privatecacertificateauthority.KeySpecAttributes] {
	return terra.ReferenceList[privatecacertificateauthority.KeySpecAttributes](pca.ref.Append("key_spec"))
}

func (pca privatecaCertificateAuthorityAttributes) SubordinateConfig() terra.ListValue[privatecacertificateauthority.SubordinateConfigAttributes] {
	return terra.ReferenceList[privatecacertificateauthority.SubordinateConfigAttributes](pca.ref.Append("subordinate_config"))
}

func (pca privatecaCertificateAuthorityAttributes) Timeouts() privatecacertificateauthority.TimeoutsAttributes {
	return terra.ReferenceSingle[privatecacertificateauthority.TimeoutsAttributes](pca.ref.Append("timeouts"))
}

type privatecaCertificateAuthorityState struct {
	CertificateAuthorityId             string                                                 `json:"certificate_authority_id"`
	CreateTime                         string                                                 `json:"create_time"`
	DeletionProtection                 bool                                                   `json:"deletion_protection"`
	DesiredState                       string                                                 `json:"desired_state"`
	GcsBucket                          string                                                 `json:"gcs_bucket"`
	Id                                 string                                                 `json:"id"`
	IgnoreActiveCertificatesOnDeletion bool                                                   `json:"ignore_active_certificates_on_deletion"`
	Labels                             map[string]string                                      `json:"labels"`
	Lifetime                           string                                                 `json:"lifetime"`
	Location                           string                                                 `json:"location"`
	Name                               string                                                 `json:"name"`
	PemCaCertificate                   string                                                 `json:"pem_ca_certificate"`
	PemCaCertificates                  []string                                               `json:"pem_ca_certificates"`
	Pool                               string                                                 `json:"pool"`
	Project                            string                                                 `json:"project"`
	SkipGracePeriod                    bool                                                   `json:"skip_grace_period"`
	State                              string                                                 `json:"state"`
	Type                               string                                                 `json:"type"`
	UpdateTime                         string                                                 `json:"update_time"`
	AccessUrls                         []privatecacertificateauthority.AccessUrlsState        `json:"access_urls"`
	Config                             []privatecacertificateauthority.ConfigState            `json:"config"`
	KeySpec                            []privatecacertificateauthority.KeySpecState           `json:"key_spec"`
	SubordinateConfig                  []privatecacertificateauthority.SubordinateConfigState `json:"subordinate_config"`
	Timeouts                           *privatecacertificateauthority.TimeoutsState           `json:"timeouts"`
}
