// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	sccsourceiambinding "github.com/golingon/terraproviders/google/4.59.0/sccsourceiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSccSourceIamBinding(name string, args SccSourceIamBindingArgs) *SccSourceIamBinding {
	return &SccSourceIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SccSourceIamBinding)(nil)

type SccSourceIamBinding struct {
	Name  string
	Args  SccSourceIamBindingArgs
	state *sccSourceIamBindingState
}

func (ssib *SccSourceIamBinding) Type() string {
	return "google_scc_source_iam_binding"
}

func (ssib *SccSourceIamBinding) LocalName() string {
	return ssib.Name
}

func (ssib *SccSourceIamBinding) Configuration() interface{} {
	return ssib.Args
}

func (ssib *SccSourceIamBinding) Attributes() sccSourceIamBindingAttributes {
	return sccSourceIamBindingAttributes{ref: terra.ReferenceResource(ssib)}
}

func (ssib *SccSourceIamBinding) ImportState(av io.Reader) error {
	ssib.state = &sccSourceIamBindingState{}
	if err := json.NewDecoder(av).Decode(ssib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssib.Type(), ssib.LocalName(), err)
	}
	return nil
}

func (ssib *SccSourceIamBinding) State() (*sccSourceIamBindingState, bool) {
	return ssib.state, ssib.state != nil
}

func (ssib *SccSourceIamBinding) StateMust() *sccSourceIamBindingState {
	if ssib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssib.Type(), ssib.LocalName()))
	}
	return ssib.state
}

func (ssib *SccSourceIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(ssib)
}

type SccSourceIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Organization: string, required
	Organization terra.StringValue `hcl:"organization,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// Condition: optional
	Condition *sccsourceiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that SccSourceIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sccSourceIamBindingAttributes struct {
	ref terra.Reference
}

func (ssib sccSourceIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ssib.ref.Append("etag"))
}

func (ssib sccSourceIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssib.ref.Append("id"))
}

func (ssib sccSourceIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ssib.ref.Append("members"))
}

func (ssib sccSourceIamBindingAttributes) Organization() terra.StringValue {
	return terra.ReferenceString(ssib.ref.Append("organization"))
}

func (ssib sccSourceIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(ssib.ref.Append("role"))
}

func (ssib sccSourceIamBindingAttributes) Source() terra.StringValue {
	return terra.ReferenceString(ssib.ref.Append("source"))
}

func (ssib sccSourceIamBindingAttributes) Condition() terra.ListValue[sccsourceiambinding.ConditionAttributes] {
	return terra.ReferenceList[sccsourceiambinding.ConditionAttributes](ssib.ref.Append("condition"))
}

type sccSourceIamBindingState struct {
	Etag         string                               `json:"etag"`
	Id           string                               `json:"id"`
	Members      []string                             `json:"members"`
	Organization string                               `json:"organization"`
	Role         string                               `json:"role"`
	Source       string                               `json:"source"`
	Condition    []sccsourceiambinding.ConditionState `json:"condition"`
}
