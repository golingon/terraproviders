// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	kmskeyringiammember "github.com/golingon/terraproviders/google/4.59.0/kmskeyringiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKmsKeyRingIamMember(name string, args KmsKeyRingIamMemberArgs) *KmsKeyRingIamMember {
	return &KmsKeyRingIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KmsKeyRingIamMember)(nil)

type KmsKeyRingIamMember struct {
	Name  string
	Args  KmsKeyRingIamMemberArgs
	state *kmsKeyRingIamMemberState
}

func (kkrim *KmsKeyRingIamMember) Type() string {
	return "google_kms_key_ring_iam_member"
}

func (kkrim *KmsKeyRingIamMember) LocalName() string {
	return kkrim.Name
}

func (kkrim *KmsKeyRingIamMember) Configuration() interface{} {
	return kkrim.Args
}

func (kkrim *KmsKeyRingIamMember) Attributes() kmsKeyRingIamMemberAttributes {
	return kmsKeyRingIamMemberAttributes{ref: terra.ReferenceResource(kkrim)}
}

func (kkrim *KmsKeyRingIamMember) ImportState(av io.Reader) error {
	kkrim.state = &kmsKeyRingIamMemberState{}
	if err := json.NewDecoder(av).Decode(kkrim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kkrim.Type(), kkrim.LocalName(), err)
	}
	return nil
}

func (kkrim *KmsKeyRingIamMember) State() (*kmsKeyRingIamMemberState, bool) {
	return kkrim.state, kkrim.state != nil
}

func (kkrim *KmsKeyRingIamMember) StateMust() *kmsKeyRingIamMemberState {
	if kkrim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kkrim.Type(), kkrim.LocalName()))
	}
	return kkrim.state
}

func (kkrim *KmsKeyRingIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(kkrim)
}

type KmsKeyRingIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyRingId: string, required
	KeyRingId terra.StringValue `hcl:"key_ring_id,attr" validate:"required"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *kmskeyringiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that KmsKeyRingIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kmsKeyRingIamMemberAttributes struct {
	ref terra.Reference
}

func (kkrim kmsKeyRingIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(kkrim.ref.Append("etag"))
}

func (kkrim kmsKeyRingIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kkrim.ref.Append("id"))
}

func (kkrim kmsKeyRingIamMemberAttributes) KeyRingId() terra.StringValue {
	return terra.ReferenceString(kkrim.ref.Append("key_ring_id"))
}

func (kkrim kmsKeyRingIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(kkrim.ref.Append("member"))
}

func (kkrim kmsKeyRingIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(kkrim.ref.Append("role"))
}

func (kkrim kmsKeyRingIamMemberAttributes) Condition() terra.ListValue[kmskeyringiammember.ConditionAttributes] {
	return terra.ReferenceList[kmskeyringiammember.ConditionAttributes](kkrim.ref.Append("condition"))
}

type kmsKeyRingIamMemberState struct {
	Etag      string                               `json:"etag"`
	Id        string                               `json:"id"`
	KeyRingId string                               `json:"key_ring_id"`
	Member    string                               `json:"member"`
	Role      string                               `json:"role"`
	Condition []kmskeyringiammember.ConditionState `json:"condition"`
}
