// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	accesscontextmanageraccesspolicyiammember "github.com/golingon/terraproviders/google/4.59.0/accesscontextmanageraccesspolicyiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAccessContextManagerAccessPolicyIamMember(name string, args AccessContextManagerAccessPolicyIamMemberArgs) *AccessContextManagerAccessPolicyIamMember {
	return &AccessContextManagerAccessPolicyIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AccessContextManagerAccessPolicyIamMember)(nil)

type AccessContextManagerAccessPolicyIamMember struct {
	Name  string
	Args  AccessContextManagerAccessPolicyIamMemberArgs
	state *accessContextManagerAccessPolicyIamMemberState
}

func (acmapim *AccessContextManagerAccessPolicyIamMember) Type() string {
	return "google_access_context_manager_access_policy_iam_member"
}

func (acmapim *AccessContextManagerAccessPolicyIamMember) LocalName() string {
	return acmapim.Name
}

func (acmapim *AccessContextManagerAccessPolicyIamMember) Configuration() interface{} {
	return acmapim.Args
}

func (acmapim *AccessContextManagerAccessPolicyIamMember) Attributes() accessContextManagerAccessPolicyIamMemberAttributes {
	return accessContextManagerAccessPolicyIamMemberAttributes{ref: terra.ReferenceResource(acmapim)}
}

func (acmapim *AccessContextManagerAccessPolicyIamMember) ImportState(av io.Reader) error {
	acmapim.state = &accessContextManagerAccessPolicyIamMemberState{}
	if err := json.NewDecoder(av).Decode(acmapim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acmapim.Type(), acmapim.LocalName(), err)
	}
	return nil
}

func (acmapim *AccessContextManagerAccessPolicyIamMember) State() (*accessContextManagerAccessPolicyIamMemberState, bool) {
	return acmapim.state, acmapim.state != nil
}

func (acmapim *AccessContextManagerAccessPolicyIamMember) StateMust() *accessContextManagerAccessPolicyIamMemberState {
	if acmapim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acmapim.Type(), acmapim.LocalName()))
	}
	return acmapim.state
}

func (acmapim *AccessContextManagerAccessPolicyIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(acmapim)
}

type AccessContextManagerAccessPolicyIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *accesscontextmanageraccesspolicyiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that AccessContextManagerAccessPolicyIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type accessContextManagerAccessPolicyIamMemberAttributes struct {
	ref terra.Reference
}

func (acmapim accessContextManagerAccessPolicyIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(acmapim.ref.Append("etag"))
}

func (acmapim accessContextManagerAccessPolicyIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(acmapim.ref.Append("id"))
}

func (acmapim accessContextManagerAccessPolicyIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(acmapim.ref.Append("member"))
}

func (acmapim accessContextManagerAccessPolicyIamMemberAttributes) Name() terra.StringValue {
	return terra.ReferenceString(acmapim.ref.Append("name"))
}

func (acmapim accessContextManagerAccessPolicyIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(acmapim.ref.Append("role"))
}

func (acmapim accessContextManagerAccessPolicyIamMemberAttributes) Condition() terra.ListValue[accesscontextmanageraccesspolicyiammember.ConditionAttributes] {
	return terra.ReferenceList[accesscontextmanageraccesspolicyiammember.ConditionAttributes](acmapim.ref.Append("condition"))
}

type accessContextManagerAccessPolicyIamMemberState struct {
	Etag      string                                                     `json:"etag"`
	Id        string                                                     `json:"id"`
	Member    string                                                     `json:"member"`
	Name      string                                                     `json:"name"`
	Role      string                                                     `json:"role"`
	Condition []accesscontextmanageraccesspolicyiammember.ConditionState `json:"condition"`
}
