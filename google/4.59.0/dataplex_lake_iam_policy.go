// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataplexLakeIamPolicy(name string, args DataplexLakeIamPolicyArgs) *DataplexLakeIamPolicy {
	return &DataplexLakeIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataplexLakeIamPolicy)(nil)

type DataplexLakeIamPolicy struct {
	Name  string
	Args  DataplexLakeIamPolicyArgs
	state *dataplexLakeIamPolicyState
}

func (dlip *DataplexLakeIamPolicy) Type() string {
	return "google_dataplex_lake_iam_policy"
}

func (dlip *DataplexLakeIamPolicy) LocalName() string {
	return dlip.Name
}

func (dlip *DataplexLakeIamPolicy) Configuration() interface{} {
	return dlip.Args
}

func (dlip *DataplexLakeIamPolicy) Attributes() dataplexLakeIamPolicyAttributes {
	return dataplexLakeIamPolicyAttributes{ref: terra.ReferenceResource(dlip)}
}

func (dlip *DataplexLakeIamPolicy) ImportState(av io.Reader) error {
	dlip.state = &dataplexLakeIamPolicyState{}
	if err := json.NewDecoder(av).Decode(dlip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dlip.Type(), dlip.LocalName(), err)
	}
	return nil
}

func (dlip *DataplexLakeIamPolicy) State() (*dataplexLakeIamPolicyState, bool) {
	return dlip.state, dlip.state != nil
}

func (dlip *DataplexLakeIamPolicy) StateMust() *dataplexLakeIamPolicyState {
	if dlip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dlip.Type(), dlip.LocalName()))
	}
	return dlip.state
}

func (dlip *DataplexLakeIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(dlip)
}

type DataplexLakeIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Lake: string, required
	Lake terra.StringValue `hcl:"lake,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that DataplexLakeIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataplexLakeIamPolicyAttributes struct {
	ref terra.Reference
}

func (dlip dataplexLakeIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dlip.ref.Append("etag"))
}

func (dlip dataplexLakeIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dlip.ref.Append("id"))
}

func (dlip dataplexLakeIamPolicyAttributes) Lake() terra.StringValue {
	return terra.ReferenceString(dlip.ref.Append("lake"))
}

func (dlip dataplexLakeIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dlip.ref.Append("location"))
}

func (dlip dataplexLakeIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(dlip.ref.Append("policy_data"))
}

func (dlip dataplexLakeIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dlip.ref.Append("project"))
}

type dataplexLakeIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	Lake       string `json:"lake"`
	Location   string `json:"location"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
}
