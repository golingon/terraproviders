// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	serviceaccountiammember "github.com/golingon/terraproviders/google/4.59.0/serviceaccountiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServiceAccountIamMember(name string, args ServiceAccountIamMemberArgs) *ServiceAccountIamMember {
	return &ServiceAccountIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServiceAccountIamMember)(nil)

type ServiceAccountIamMember struct {
	Name  string
	Args  ServiceAccountIamMemberArgs
	state *serviceAccountIamMemberState
}

func (saim *ServiceAccountIamMember) Type() string {
	return "google_service_account_iam_member"
}

func (saim *ServiceAccountIamMember) LocalName() string {
	return saim.Name
}

func (saim *ServiceAccountIamMember) Configuration() interface{} {
	return saim.Args
}

func (saim *ServiceAccountIamMember) Attributes() serviceAccountIamMemberAttributes {
	return serviceAccountIamMemberAttributes{ref: terra.ReferenceResource(saim)}
}

func (saim *ServiceAccountIamMember) ImportState(av io.Reader) error {
	saim.state = &serviceAccountIamMemberState{}
	if err := json.NewDecoder(av).Decode(saim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", saim.Type(), saim.LocalName(), err)
	}
	return nil
}

func (saim *ServiceAccountIamMember) State() (*serviceAccountIamMemberState, bool) {
	return saim.state, saim.state != nil
}

func (saim *ServiceAccountIamMember) StateMust() *serviceAccountIamMemberState {
	if saim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", saim.Type(), saim.LocalName()))
	}
	return saim.state
}

func (saim *ServiceAccountIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(saim)
}

type ServiceAccountIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// ServiceAccountId: string, required
	ServiceAccountId terra.StringValue `hcl:"service_account_id,attr" validate:"required"`
	// Condition: optional
	Condition *serviceaccountiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that ServiceAccountIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type serviceAccountIamMemberAttributes struct {
	ref terra.Reference
}

func (saim serviceAccountIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(saim.ref.Append("etag"))
}

func (saim serviceAccountIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(saim.ref.Append("id"))
}

func (saim serviceAccountIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(saim.ref.Append("member"))
}

func (saim serviceAccountIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(saim.ref.Append("role"))
}

func (saim serviceAccountIamMemberAttributes) ServiceAccountId() terra.StringValue {
	return terra.ReferenceString(saim.ref.Append("service_account_id"))
}

func (saim serviceAccountIamMemberAttributes) Condition() terra.ListValue[serviceaccountiammember.ConditionAttributes] {
	return terra.ReferenceList[serviceaccountiammember.ConditionAttributes](saim.ref.Append("condition"))
}

type serviceAccountIamMemberState struct {
	Etag             string                                   `json:"etag"`
	Id               string                                   `json:"id"`
	Member           string                                   `json:"member"`
	Role             string                                   `json:"role"`
	ServiceAccountId string                                   `json:"service_account_id"`
	Condition        []serviceaccountiammember.ConditionState `json:"condition"`
}
