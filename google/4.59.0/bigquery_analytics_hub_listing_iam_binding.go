// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	bigqueryanalyticshublistingiambinding "github.com/golingon/terraproviders/google/4.59.0/bigqueryanalyticshublistingiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigqueryAnalyticsHubListingIamBinding(name string, args BigqueryAnalyticsHubListingIamBindingArgs) *BigqueryAnalyticsHubListingIamBinding {
	return &BigqueryAnalyticsHubListingIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryAnalyticsHubListingIamBinding)(nil)

type BigqueryAnalyticsHubListingIamBinding struct {
	Name  string
	Args  BigqueryAnalyticsHubListingIamBindingArgs
	state *bigqueryAnalyticsHubListingIamBindingState
}

func (bahlib *BigqueryAnalyticsHubListingIamBinding) Type() string {
	return "google_bigquery_analytics_hub_listing_iam_binding"
}

func (bahlib *BigqueryAnalyticsHubListingIamBinding) LocalName() string {
	return bahlib.Name
}

func (bahlib *BigqueryAnalyticsHubListingIamBinding) Configuration() interface{} {
	return bahlib.Args
}

func (bahlib *BigqueryAnalyticsHubListingIamBinding) Attributes() bigqueryAnalyticsHubListingIamBindingAttributes {
	return bigqueryAnalyticsHubListingIamBindingAttributes{ref: terra.ReferenceResource(bahlib)}
}

func (bahlib *BigqueryAnalyticsHubListingIamBinding) ImportState(av io.Reader) error {
	bahlib.state = &bigqueryAnalyticsHubListingIamBindingState{}
	if err := json.NewDecoder(av).Decode(bahlib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bahlib.Type(), bahlib.LocalName(), err)
	}
	return nil
}

func (bahlib *BigqueryAnalyticsHubListingIamBinding) State() (*bigqueryAnalyticsHubListingIamBindingState, bool) {
	return bahlib.state, bahlib.state != nil
}

func (bahlib *BigqueryAnalyticsHubListingIamBinding) StateMust() *bigqueryAnalyticsHubListingIamBindingState {
	if bahlib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bahlib.Type(), bahlib.LocalName()))
	}
	return bahlib.state
}

func (bahlib *BigqueryAnalyticsHubListingIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(bahlib)
}

type BigqueryAnalyticsHubListingIamBindingArgs struct {
	// DataExchangeId: string, required
	DataExchangeId terra.StringValue `hcl:"data_exchange_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListingId: string, required
	ListingId terra.StringValue `hcl:"listing_id,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *bigqueryanalyticshublistingiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that BigqueryAnalyticsHubListingIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigqueryAnalyticsHubListingIamBindingAttributes struct {
	ref terra.Reference
}

func (bahlib bigqueryAnalyticsHubListingIamBindingAttributes) DataExchangeId() terra.StringValue {
	return terra.ReferenceString(bahlib.ref.Append("data_exchange_id"))
}

func (bahlib bigqueryAnalyticsHubListingIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(bahlib.ref.Append("etag"))
}

func (bahlib bigqueryAnalyticsHubListingIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bahlib.ref.Append("id"))
}

func (bahlib bigqueryAnalyticsHubListingIamBindingAttributes) ListingId() terra.StringValue {
	return terra.ReferenceString(bahlib.ref.Append("listing_id"))
}

func (bahlib bigqueryAnalyticsHubListingIamBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bahlib.ref.Append("location"))
}

func (bahlib bigqueryAnalyticsHubListingIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](bahlib.ref.Append("members"))
}

func (bahlib bigqueryAnalyticsHubListingIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bahlib.ref.Append("project"))
}

func (bahlib bigqueryAnalyticsHubListingIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(bahlib.ref.Append("role"))
}

func (bahlib bigqueryAnalyticsHubListingIamBindingAttributes) Condition() terra.ListValue[bigqueryanalyticshublistingiambinding.ConditionAttributes] {
	return terra.ReferenceList[bigqueryanalyticshublistingiambinding.ConditionAttributes](bahlib.ref.Append("condition"))
}

type bigqueryAnalyticsHubListingIamBindingState struct {
	DataExchangeId string                                                 `json:"data_exchange_id"`
	Etag           string                                                 `json:"etag"`
	Id             string                                                 `json:"id"`
	ListingId      string                                                 `json:"listing_id"`
	Location       string                                                 `json:"location"`
	Members        []string                                               `json:"members"`
	Project        string                                                 `json:"project"`
	Role           string                                                 `json:"role"`
	Condition      []bigqueryanalyticshublistingiambinding.ConditionState `json:"condition"`
}
