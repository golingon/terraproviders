// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	projectiamauditconfig "github.com/golingon/terraproviders/google/4.59.0/projectiamauditconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewProjectIamAuditConfig(name string, args ProjectIamAuditConfigArgs) *ProjectIamAuditConfig {
	return &ProjectIamAuditConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ProjectIamAuditConfig)(nil)

type ProjectIamAuditConfig struct {
	Name  string
	Args  ProjectIamAuditConfigArgs
	state *projectIamAuditConfigState
}

func (piac *ProjectIamAuditConfig) Type() string {
	return "google_project_iam_audit_config"
}

func (piac *ProjectIamAuditConfig) LocalName() string {
	return piac.Name
}

func (piac *ProjectIamAuditConfig) Configuration() interface{} {
	return piac.Args
}

func (piac *ProjectIamAuditConfig) Attributes() projectIamAuditConfigAttributes {
	return projectIamAuditConfigAttributes{ref: terra.ReferenceResource(piac)}
}

func (piac *ProjectIamAuditConfig) ImportState(av io.Reader) error {
	piac.state = &projectIamAuditConfigState{}
	if err := json.NewDecoder(av).Decode(piac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", piac.Type(), piac.LocalName(), err)
	}
	return nil
}

func (piac *ProjectIamAuditConfig) State() (*projectIamAuditConfigState, bool) {
	return piac.state, piac.state != nil
}

func (piac *ProjectIamAuditConfig) StateMust() *projectIamAuditConfigState {
	if piac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", piac.Type(), piac.LocalName()))
	}
	return piac.state
}

func (piac *ProjectIamAuditConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(piac)
}

type ProjectIamAuditConfigArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// AuditLogConfig: min=1
	AuditLogConfig []projectiamauditconfig.AuditLogConfig `hcl:"audit_log_config,block" validate:"min=1"`
	// DependsOn contains resources that ProjectIamAuditConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type projectIamAuditConfigAttributes struct {
	ref terra.Reference
}

func (piac projectIamAuditConfigAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(piac.ref.Append("etag"))
}

func (piac projectIamAuditConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(piac.ref.Append("id"))
}

func (piac projectIamAuditConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceString(piac.ref.Append("project"))
}

func (piac projectIamAuditConfigAttributes) Service() terra.StringValue {
	return terra.ReferenceString(piac.ref.Append("service"))
}

func (piac projectIamAuditConfigAttributes) AuditLogConfig() terra.SetValue[projectiamauditconfig.AuditLogConfigAttributes] {
	return terra.ReferenceSet[projectiamauditconfig.AuditLogConfigAttributes](piac.ref.Append("audit_log_config"))
}

type projectIamAuditConfigState struct {
	Etag           string                                      `json:"etag"`
	Id             string                                      `json:"id"`
	Project        string                                      `json:"project"`
	Service        string                                      `json:"service"`
	AuditLogConfig []projectiamauditconfig.AuditLogConfigState `json:"audit_log_config"`
}
