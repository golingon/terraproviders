// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	documentaiprocessordefaultversion "github.com/golingon/terraproviders/google/4.59.0/documentaiprocessordefaultversion"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDocumentAiProcessorDefaultVersion(name string, args DocumentAiProcessorDefaultVersionArgs) *DocumentAiProcessorDefaultVersion {
	return &DocumentAiProcessorDefaultVersion{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DocumentAiProcessorDefaultVersion)(nil)

type DocumentAiProcessorDefaultVersion struct {
	Name  string
	Args  DocumentAiProcessorDefaultVersionArgs
	state *documentAiProcessorDefaultVersionState
}

func (dapdv *DocumentAiProcessorDefaultVersion) Type() string {
	return "google_document_ai_processor_default_version"
}

func (dapdv *DocumentAiProcessorDefaultVersion) LocalName() string {
	return dapdv.Name
}

func (dapdv *DocumentAiProcessorDefaultVersion) Configuration() interface{} {
	return dapdv.Args
}

func (dapdv *DocumentAiProcessorDefaultVersion) Attributes() documentAiProcessorDefaultVersionAttributes {
	return documentAiProcessorDefaultVersionAttributes{ref: terra.ReferenceResource(dapdv)}
}

func (dapdv *DocumentAiProcessorDefaultVersion) ImportState(av io.Reader) error {
	dapdv.state = &documentAiProcessorDefaultVersionState{}
	if err := json.NewDecoder(av).Decode(dapdv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dapdv.Type(), dapdv.LocalName(), err)
	}
	return nil
}

func (dapdv *DocumentAiProcessorDefaultVersion) State() (*documentAiProcessorDefaultVersionState, bool) {
	return dapdv.state, dapdv.state != nil
}

func (dapdv *DocumentAiProcessorDefaultVersion) StateMust() *documentAiProcessorDefaultVersionState {
	if dapdv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dapdv.Type(), dapdv.LocalName()))
	}
	return dapdv.state
}

func (dapdv *DocumentAiProcessorDefaultVersion) DependOn() terra.Reference {
	return terra.ReferenceResource(dapdv)
}

type DocumentAiProcessorDefaultVersionArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Processor: string, required
	Processor terra.StringValue `hcl:"processor,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *documentaiprocessordefaultversion.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DocumentAiProcessorDefaultVersion depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type documentAiProcessorDefaultVersionAttributes struct {
	ref terra.Reference
}

func (dapdv documentAiProcessorDefaultVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dapdv.ref.Append("id"))
}

func (dapdv documentAiProcessorDefaultVersionAttributes) Processor() terra.StringValue {
	return terra.ReferenceString(dapdv.ref.Append("processor"))
}

func (dapdv documentAiProcessorDefaultVersionAttributes) Version() terra.StringValue {
	return terra.ReferenceString(dapdv.ref.Append("version"))
}

func (dapdv documentAiProcessorDefaultVersionAttributes) Timeouts() documentaiprocessordefaultversion.TimeoutsAttributes {
	return terra.ReferenceSingle[documentaiprocessordefaultversion.TimeoutsAttributes](dapdv.ref.Append("timeouts"))
}

type documentAiProcessorDefaultVersionState struct {
	Id        string                                           `json:"id"`
	Processor string                                           `json:"processor"`
	Version   string                                           `json:"version"`
	Timeouts  *documentaiprocessordefaultversion.TimeoutsState `json:"timeouts"`
}
