// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dialogflowentitytype "github.com/golingon/terraproviders/google/4.59.0/dialogflowentitytype"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDialogflowEntityType(name string, args DialogflowEntityTypeArgs) *DialogflowEntityType {
	return &DialogflowEntityType{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DialogflowEntityType)(nil)

type DialogflowEntityType struct {
	Name  string
	Args  DialogflowEntityTypeArgs
	state *dialogflowEntityTypeState
}

func (det *DialogflowEntityType) Type() string {
	return "google_dialogflow_entity_type"
}

func (det *DialogflowEntityType) LocalName() string {
	return det.Name
}

func (det *DialogflowEntityType) Configuration() interface{} {
	return det.Args
}

func (det *DialogflowEntityType) Attributes() dialogflowEntityTypeAttributes {
	return dialogflowEntityTypeAttributes{ref: terra.ReferenceResource(det)}
}

func (det *DialogflowEntityType) ImportState(av io.Reader) error {
	det.state = &dialogflowEntityTypeState{}
	if err := json.NewDecoder(av).Decode(det.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", det.Type(), det.LocalName(), err)
	}
	return nil
}

func (det *DialogflowEntityType) State() (*dialogflowEntityTypeState, bool) {
	return det.state, det.state != nil
}

func (det *DialogflowEntityType) StateMust() *dialogflowEntityTypeState {
	if det.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", det.Type(), det.LocalName()))
	}
	return det.state
}

func (det *DialogflowEntityType) DependOn() terra.Reference {
	return terra.ReferenceResource(det)
}

type DialogflowEntityTypeArgs struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// EnableFuzzyExtraction: bool, optional
	EnableFuzzyExtraction terra.BoolValue `hcl:"enable_fuzzy_extraction,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, required
	Kind terra.StringValue `hcl:"kind,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Entities: min=0
	Entities []dialogflowentitytype.Entities `hcl:"entities,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dialogflowentitytype.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DialogflowEntityType depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dialogflowEntityTypeAttributes struct {
	ref terra.Reference
}

func (det dialogflowEntityTypeAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(det.ref.Append("display_name"))
}

func (det dialogflowEntityTypeAttributes) EnableFuzzyExtraction() terra.BoolValue {
	return terra.ReferenceBool(det.ref.Append("enable_fuzzy_extraction"))
}

func (det dialogflowEntityTypeAttributes) Id() terra.StringValue {
	return terra.ReferenceString(det.ref.Append("id"))
}

func (det dialogflowEntityTypeAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(det.ref.Append("kind"))
}

func (det dialogflowEntityTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceString(det.ref.Append("name"))
}

func (det dialogflowEntityTypeAttributes) Project() terra.StringValue {
	return terra.ReferenceString(det.ref.Append("project"))
}

func (det dialogflowEntityTypeAttributes) Entities() terra.ListValue[dialogflowentitytype.EntitiesAttributes] {
	return terra.ReferenceList[dialogflowentitytype.EntitiesAttributes](det.ref.Append("entities"))
}

func (det dialogflowEntityTypeAttributes) Timeouts() dialogflowentitytype.TimeoutsAttributes {
	return terra.ReferenceSingle[dialogflowentitytype.TimeoutsAttributes](det.ref.Append("timeouts"))
}

type dialogflowEntityTypeState struct {
	DisplayName           string                               `json:"display_name"`
	EnableFuzzyExtraction bool                                 `json:"enable_fuzzy_extraction"`
	Id                    string                               `json:"id"`
	Kind                  string                               `json:"kind"`
	Name                  string                               `json:"name"`
	Project               string                               `json:"project"`
	Entities              []dialogflowentitytype.EntitiesState `json:"entities"`
	Timeouts              *dialogflowentitytype.TimeoutsState  `json:"timeouts"`
}
