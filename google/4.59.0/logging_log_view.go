// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	logginglogview "github.com/golingon/terraproviders/google/4.59.0/logginglogview"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLoggingLogView(name string, args LoggingLogViewArgs) *LoggingLogView {
	return &LoggingLogView{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LoggingLogView)(nil)

type LoggingLogView struct {
	Name  string
	Args  LoggingLogViewArgs
	state *loggingLogViewState
}

func (llv *LoggingLogView) Type() string {
	return "google_logging_log_view"
}

func (llv *LoggingLogView) LocalName() string {
	return llv.Name
}

func (llv *LoggingLogView) Configuration() interface{} {
	return llv.Args
}

func (llv *LoggingLogView) Attributes() loggingLogViewAttributes {
	return loggingLogViewAttributes{ref: terra.ReferenceResource(llv)}
}

func (llv *LoggingLogView) ImportState(av io.Reader) error {
	llv.state = &loggingLogViewState{}
	if err := json.NewDecoder(av).Decode(llv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", llv.Type(), llv.LocalName(), err)
	}
	return nil
}

func (llv *LoggingLogView) State() (*loggingLogViewState, bool) {
	return llv.state, llv.state != nil
}

func (llv *LoggingLogView) StateMust() *loggingLogViewState {
	if llv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", llv.Type(), llv.LocalName()))
	}
	return llv.state
}

func (llv *LoggingLogView) DependOn() terra.Reference {
	return terra.ReferenceResource(llv)
}

type LoggingLogViewArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Filter: string, optional
	Filter terra.StringValue `hcl:"filter,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parent: string, optional
	Parent terra.StringValue `hcl:"parent,attr"`
	// Timeouts: optional
	Timeouts *logginglogview.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LoggingLogView depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type loggingLogViewAttributes struct {
	ref terra.Reference
}

func (llv loggingLogViewAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(llv.ref.Append("bucket"))
}

func (llv loggingLogViewAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(llv.ref.Append("create_time"))
}

func (llv loggingLogViewAttributes) Description() terra.StringValue {
	return terra.ReferenceString(llv.ref.Append("description"))
}

func (llv loggingLogViewAttributes) Filter() terra.StringValue {
	return terra.ReferenceString(llv.ref.Append("filter"))
}

func (llv loggingLogViewAttributes) Id() terra.StringValue {
	return terra.ReferenceString(llv.ref.Append("id"))
}

func (llv loggingLogViewAttributes) Location() terra.StringValue {
	return terra.ReferenceString(llv.ref.Append("location"))
}

func (llv loggingLogViewAttributes) Name() terra.StringValue {
	return terra.ReferenceString(llv.ref.Append("name"))
}

func (llv loggingLogViewAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(llv.ref.Append("parent"))
}

func (llv loggingLogViewAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(llv.ref.Append("update_time"))
}

func (llv loggingLogViewAttributes) Timeouts() logginglogview.TimeoutsAttributes {
	return terra.ReferenceSingle[logginglogview.TimeoutsAttributes](llv.ref.Append("timeouts"))
}

type loggingLogViewState struct {
	Bucket      string                        `json:"bucket"`
	CreateTime  string                        `json:"create_time"`
	Description string                        `json:"description"`
	Filter      string                        `json:"filter"`
	Id          string                        `json:"id"`
	Location    string                        `json:"location"`
	Name        string                        `json:"name"`
	Parent      string                        `json:"parent"`
	UpdateTime  string                        `json:"update_time"`
	Timeouts    *logginglogview.TimeoutsState `json:"timeouts"`
}
