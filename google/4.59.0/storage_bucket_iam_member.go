// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	storagebucketiammember "github.com/golingon/terraproviders/google/4.59.0/storagebucketiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStorageBucketIamMember(name string, args StorageBucketIamMemberArgs) *StorageBucketIamMember {
	return &StorageBucketIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageBucketIamMember)(nil)

type StorageBucketIamMember struct {
	Name  string
	Args  StorageBucketIamMemberArgs
	state *storageBucketIamMemberState
}

func (sbim *StorageBucketIamMember) Type() string {
	return "google_storage_bucket_iam_member"
}

func (sbim *StorageBucketIamMember) LocalName() string {
	return sbim.Name
}

func (sbim *StorageBucketIamMember) Configuration() interface{} {
	return sbim.Args
}

func (sbim *StorageBucketIamMember) Attributes() storageBucketIamMemberAttributes {
	return storageBucketIamMemberAttributes{ref: terra.ReferenceResource(sbim)}
}

func (sbim *StorageBucketIamMember) ImportState(av io.Reader) error {
	sbim.state = &storageBucketIamMemberState{}
	if err := json.NewDecoder(av).Decode(sbim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbim.Type(), sbim.LocalName(), err)
	}
	return nil
}

func (sbim *StorageBucketIamMember) State() (*storageBucketIamMemberState, bool) {
	return sbim.state, sbim.state != nil
}

func (sbim *StorageBucketIamMember) StateMust() *storageBucketIamMemberState {
	if sbim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbim.Type(), sbim.LocalName()))
	}
	return sbim.state
}

func (sbim *StorageBucketIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(sbim)
}

type StorageBucketIamMemberArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *storagebucketiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that StorageBucketIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storageBucketIamMemberAttributes struct {
	ref terra.Reference
}

func (sbim storageBucketIamMemberAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbim.ref.Append("bucket"))
}

func (sbim storageBucketIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(sbim.ref.Append("etag"))
}

func (sbim storageBucketIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbim.ref.Append("id"))
}

func (sbim storageBucketIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(sbim.ref.Append("member"))
}

func (sbim storageBucketIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(sbim.ref.Append("role"))
}

func (sbim storageBucketIamMemberAttributes) Condition() terra.ListValue[storagebucketiammember.ConditionAttributes] {
	return terra.ReferenceList[storagebucketiammember.ConditionAttributes](sbim.ref.Append("condition"))
}

type storageBucketIamMemberState struct {
	Bucket    string                                  `json:"bucket"`
	Etag      string                                  `json:"etag"`
	Id        string                                  `json:"id"`
	Member    string                                  `json:"member"`
	Role      string                                  `json:"role"`
	Condition []storagebucketiammember.ConditionState `json:"condition"`
}
