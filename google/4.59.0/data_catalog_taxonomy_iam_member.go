// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	datacatalogtaxonomyiammember "github.com/golingon/terraproviders/google/4.59.0/datacatalogtaxonomyiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataCatalogTaxonomyIamMember(name string, args DataCatalogTaxonomyIamMemberArgs) *DataCatalogTaxonomyIamMember {
	return &DataCatalogTaxonomyIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataCatalogTaxonomyIamMember)(nil)

type DataCatalogTaxonomyIamMember struct {
	Name  string
	Args  DataCatalogTaxonomyIamMemberArgs
	state *dataCatalogTaxonomyIamMemberState
}

func (dctim *DataCatalogTaxonomyIamMember) Type() string {
	return "google_data_catalog_taxonomy_iam_member"
}

func (dctim *DataCatalogTaxonomyIamMember) LocalName() string {
	return dctim.Name
}

func (dctim *DataCatalogTaxonomyIamMember) Configuration() interface{} {
	return dctim.Args
}

func (dctim *DataCatalogTaxonomyIamMember) Attributes() dataCatalogTaxonomyIamMemberAttributes {
	return dataCatalogTaxonomyIamMemberAttributes{ref: terra.ReferenceResource(dctim)}
}

func (dctim *DataCatalogTaxonomyIamMember) ImportState(av io.Reader) error {
	dctim.state = &dataCatalogTaxonomyIamMemberState{}
	if err := json.NewDecoder(av).Decode(dctim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dctim.Type(), dctim.LocalName(), err)
	}
	return nil
}

func (dctim *DataCatalogTaxonomyIamMember) State() (*dataCatalogTaxonomyIamMemberState, bool) {
	return dctim.state, dctim.state != nil
}

func (dctim *DataCatalogTaxonomyIamMember) StateMust() *dataCatalogTaxonomyIamMemberState {
	if dctim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dctim.Type(), dctim.LocalName()))
	}
	return dctim.state
}

func (dctim *DataCatalogTaxonomyIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(dctim)
}

type DataCatalogTaxonomyIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Taxonomy: string, required
	Taxonomy terra.StringValue `hcl:"taxonomy,attr" validate:"required"`
	// Condition: optional
	Condition *datacatalogtaxonomyiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataCatalogTaxonomyIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataCatalogTaxonomyIamMemberAttributes struct {
	ref terra.Reference
}

func (dctim dataCatalogTaxonomyIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dctim.ref.Append("etag"))
}

func (dctim dataCatalogTaxonomyIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dctim.ref.Append("id"))
}

func (dctim dataCatalogTaxonomyIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(dctim.ref.Append("member"))
}

func (dctim dataCatalogTaxonomyIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dctim.ref.Append("project"))
}

func (dctim dataCatalogTaxonomyIamMemberAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dctim.ref.Append("region"))
}

func (dctim dataCatalogTaxonomyIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(dctim.ref.Append("role"))
}

func (dctim dataCatalogTaxonomyIamMemberAttributes) Taxonomy() terra.StringValue {
	return terra.ReferenceString(dctim.ref.Append("taxonomy"))
}

func (dctim dataCatalogTaxonomyIamMemberAttributes) Condition() terra.ListValue[datacatalogtaxonomyiammember.ConditionAttributes] {
	return terra.ReferenceList[datacatalogtaxonomyiammember.ConditionAttributes](dctim.ref.Append("condition"))
}

type dataCatalogTaxonomyIamMemberState struct {
	Etag      string                                        `json:"etag"`
	Id        string                                        `json:"id"`
	Member    string                                        `json:"member"`
	Project   string                                        `json:"project"`
	Region    string                                        `json:"region"`
	Role      string                                        `json:"role"`
	Taxonomy  string                                        `json:"taxonomy"`
	Condition []datacatalogtaxonomyiammember.ConditionState `json:"condition"`
}
