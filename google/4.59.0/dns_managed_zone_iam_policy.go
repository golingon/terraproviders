// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDnsManagedZoneIamPolicy(name string, args DnsManagedZoneIamPolicyArgs) *DnsManagedZoneIamPolicy {
	return &DnsManagedZoneIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DnsManagedZoneIamPolicy)(nil)

type DnsManagedZoneIamPolicy struct {
	Name  string
	Args  DnsManagedZoneIamPolicyArgs
	state *dnsManagedZoneIamPolicyState
}

func (dmzip *DnsManagedZoneIamPolicy) Type() string {
	return "google_dns_managed_zone_iam_policy"
}

func (dmzip *DnsManagedZoneIamPolicy) LocalName() string {
	return dmzip.Name
}

func (dmzip *DnsManagedZoneIamPolicy) Configuration() interface{} {
	return dmzip.Args
}

func (dmzip *DnsManagedZoneIamPolicy) Attributes() dnsManagedZoneIamPolicyAttributes {
	return dnsManagedZoneIamPolicyAttributes{ref: terra.ReferenceResource(dmzip)}
}

func (dmzip *DnsManagedZoneIamPolicy) ImportState(av io.Reader) error {
	dmzip.state = &dnsManagedZoneIamPolicyState{}
	if err := json.NewDecoder(av).Decode(dmzip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dmzip.Type(), dmzip.LocalName(), err)
	}
	return nil
}

func (dmzip *DnsManagedZoneIamPolicy) State() (*dnsManagedZoneIamPolicyState, bool) {
	return dmzip.state, dmzip.state != nil
}

func (dmzip *DnsManagedZoneIamPolicy) StateMust() *dnsManagedZoneIamPolicyState {
	if dmzip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dmzip.Type(), dmzip.LocalName()))
	}
	return dmzip.state
}

func (dmzip *DnsManagedZoneIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(dmzip)
}

type DnsManagedZoneIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagedZone: string, required
	ManagedZone terra.StringValue `hcl:"managed_zone,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that DnsManagedZoneIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dnsManagedZoneIamPolicyAttributes struct {
	ref terra.Reference
}

func (dmzip dnsManagedZoneIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dmzip.ref.Append("etag"))
}

func (dmzip dnsManagedZoneIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dmzip.ref.Append("id"))
}

func (dmzip dnsManagedZoneIamPolicyAttributes) ManagedZone() terra.StringValue {
	return terra.ReferenceString(dmzip.ref.Append("managed_zone"))
}

func (dmzip dnsManagedZoneIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(dmzip.ref.Append("policy_data"))
}

func (dmzip dnsManagedZoneIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dmzip.ref.Append("project"))
}

type dnsManagedZoneIamPolicyState struct {
	Etag        string `json:"etag"`
	Id          string `json:"id"`
	ManagedZone string `json:"managed_zone"`
	PolicyData  string `json:"policy_data"`
	Project     string `json:"project"`
}
