// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeinterconnectattachment "github.com/golingon/terraproviders/google/4.59.0/computeinterconnectattachment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeInterconnectAttachment(name string, args ComputeInterconnectAttachmentArgs) *ComputeInterconnectAttachment {
	return &ComputeInterconnectAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeInterconnectAttachment)(nil)

type ComputeInterconnectAttachment struct {
	Name  string
	Args  ComputeInterconnectAttachmentArgs
	state *computeInterconnectAttachmentState
}

func (cia *ComputeInterconnectAttachment) Type() string {
	return "google_compute_interconnect_attachment"
}

func (cia *ComputeInterconnectAttachment) LocalName() string {
	return cia.Name
}

func (cia *ComputeInterconnectAttachment) Configuration() interface{} {
	return cia.Args
}

func (cia *ComputeInterconnectAttachment) Attributes() computeInterconnectAttachmentAttributes {
	return computeInterconnectAttachmentAttributes{ref: terra.ReferenceResource(cia)}
}

func (cia *ComputeInterconnectAttachment) ImportState(av io.Reader) error {
	cia.state = &computeInterconnectAttachmentState{}
	if err := json.NewDecoder(av).Decode(cia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cia.Type(), cia.LocalName(), err)
	}
	return nil
}

func (cia *ComputeInterconnectAttachment) State() (*computeInterconnectAttachmentState, bool) {
	return cia.state, cia.state != nil
}

func (cia *ComputeInterconnectAttachment) StateMust() *computeInterconnectAttachmentState {
	if cia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cia.Type(), cia.LocalName()))
	}
	return cia.state
}

func (cia *ComputeInterconnectAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(cia)
}

type ComputeInterconnectAttachmentArgs struct {
	// AdminEnabled: bool, optional
	AdminEnabled terra.BoolValue `hcl:"admin_enabled,attr"`
	// Bandwidth: string, optional
	Bandwidth terra.StringValue `hcl:"bandwidth,attr"`
	// CandidateSubnets: list of string, optional
	CandidateSubnets terra.ListValue[terra.StringValue] `hcl:"candidate_subnets,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EdgeAvailabilityDomain: string, optional
	EdgeAvailabilityDomain terra.StringValue `hcl:"edge_availability_domain,attr"`
	// Encryption: string, optional
	Encryption terra.StringValue `hcl:"encryption,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Interconnect: string, optional
	Interconnect terra.StringValue `hcl:"interconnect,attr"`
	// IpsecInternalAddresses: list of string, optional
	IpsecInternalAddresses terra.ListValue[terra.StringValue] `hcl:"ipsec_internal_addresses,attr"`
	// Mtu: string, optional
	Mtu terra.StringValue `hcl:"mtu,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Router: string, required
	Router terra.StringValue `hcl:"router,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// VlanTag8021Q: number, optional
	VlanTag8021Q terra.NumberValue `hcl:"vlan_tag8021q,attr"`
	// PrivateInterconnectInfo: min=0
	PrivateInterconnectInfo []computeinterconnectattachment.PrivateInterconnectInfo `hcl:"private_interconnect_info,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *computeinterconnectattachment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeInterconnectAttachment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeInterconnectAttachmentAttributes struct {
	ref terra.Reference
}

func (cia computeInterconnectAttachmentAttributes) AdminEnabled() terra.BoolValue {
	return terra.ReferenceBool(cia.ref.Append("admin_enabled"))
}

func (cia computeInterconnectAttachmentAttributes) Bandwidth() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("bandwidth"))
}

func (cia computeInterconnectAttachmentAttributes) CandidateSubnets() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cia.ref.Append("candidate_subnets"))
}

func (cia computeInterconnectAttachmentAttributes) CloudRouterIpAddress() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("cloud_router_ip_address"))
}

func (cia computeInterconnectAttachmentAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("creation_timestamp"))
}

func (cia computeInterconnectAttachmentAttributes) CustomerRouterIpAddress() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("customer_router_ip_address"))
}

func (cia computeInterconnectAttachmentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("description"))
}

func (cia computeInterconnectAttachmentAttributes) EdgeAvailabilityDomain() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("edge_availability_domain"))
}

func (cia computeInterconnectAttachmentAttributes) Encryption() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("encryption"))
}

func (cia computeInterconnectAttachmentAttributes) GoogleReferenceId() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("google_reference_id"))
}

func (cia computeInterconnectAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("id"))
}

func (cia computeInterconnectAttachmentAttributes) Interconnect() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("interconnect"))
}

func (cia computeInterconnectAttachmentAttributes) IpsecInternalAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cia.ref.Append("ipsec_internal_addresses"))
}

func (cia computeInterconnectAttachmentAttributes) Mtu() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("mtu"))
}

func (cia computeInterconnectAttachmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("name"))
}

func (cia computeInterconnectAttachmentAttributes) PairingKey() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("pairing_key"))
}

func (cia computeInterconnectAttachmentAttributes) PartnerAsn() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("partner_asn"))
}

func (cia computeInterconnectAttachmentAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("project"))
}

func (cia computeInterconnectAttachmentAttributes) Region() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("region"))
}

func (cia computeInterconnectAttachmentAttributes) Router() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("router"))
}

func (cia computeInterconnectAttachmentAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("self_link"))
}

func (cia computeInterconnectAttachmentAttributes) State() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("state"))
}

func (cia computeInterconnectAttachmentAttributes) Type() terra.StringValue {
	return terra.ReferenceString(cia.ref.Append("type"))
}

func (cia computeInterconnectAttachmentAttributes) VlanTag8021Q() terra.NumberValue {
	return terra.ReferenceNumber(cia.ref.Append("vlan_tag8021q"))
}

func (cia computeInterconnectAttachmentAttributes) PrivateInterconnectInfo() terra.ListValue[computeinterconnectattachment.PrivateInterconnectInfoAttributes] {
	return terra.ReferenceList[computeinterconnectattachment.PrivateInterconnectInfoAttributes](cia.ref.Append("private_interconnect_info"))
}

func (cia computeInterconnectAttachmentAttributes) Timeouts() computeinterconnectattachment.TimeoutsAttributes {
	return terra.ReferenceSingle[computeinterconnectattachment.TimeoutsAttributes](cia.ref.Append("timeouts"))
}

type computeInterconnectAttachmentState struct {
	AdminEnabled            bool                                                         `json:"admin_enabled"`
	Bandwidth               string                                                       `json:"bandwidth"`
	CandidateSubnets        []string                                                     `json:"candidate_subnets"`
	CloudRouterIpAddress    string                                                       `json:"cloud_router_ip_address"`
	CreationTimestamp       string                                                       `json:"creation_timestamp"`
	CustomerRouterIpAddress string                                                       `json:"customer_router_ip_address"`
	Description             string                                                       `json:"description"`
	EdgeAvailabilityDomain  string                                                       `json:"edge_availability_domain"`
	Encryption              string                                                       `json:"encryption"`
	GoogleReferenceId       string                                                       `json:"google_reference_id"`
	Id                      string                                                       `json:"id"`
	Interconnect            string                                                       `json:"interconnect"`
	IpsecInternalAddresses  []string                                                     `json:"ipsec_internal_addresses"`
	Mtu                     string                                                       `json:"mtu"`
	Name                    string                                                       `json:"name"`
	PairingKey              string                                                       `json:"pairing_key"`
	PartnerAsn              string                                                       `json:"partner_asn"`
	Project                 string                                                       `json:"project"`
	Region                  string                                                       `json:"region"`
	Router                  string                                                       `json:"router"`
	SelfLink                string                                                       `json:"self_link"`
	State                   string                                                       `json:"state"`
	Type                    string                                                       `json:"type"`
	VlanTag8021Q            float64                                                      `json:"vlan_tag8021q"`
	PrivateInterconnectInfo []computeinterconnectattachment.PrivateInterconnectInfoState `json:"private_interconnect_info"`
	Timeouts                *computeinterconnectattachment.TimeoutsState                 `json:"timeouts"`
}
