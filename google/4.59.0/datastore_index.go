// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	datastoreindex "github.com/golingon/terraproviders/google/4.59.0/datastoreindex"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDatastoreIndex(name string, args DatastoreIndexArgs) *DatastoreIndex {
	return &DatastoreIndex{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatastoreIndex)(nil)

type DatastoreIndex struct {
	Name  string
	Args  DatastoreIndexArgs
	state *datastoreIndexState
}

func (di *DatastoreIndex) Type() string {
	return "google_datastore_index"
}

func (di *DatastoreIndex) LocalName() string {
	return di.Name
}

func (di *DatastoreIndex) Configuration() interface{} {
	return di.Args
}

func (di *DatastoreIndex) Attributes() datastoreIndexAttributes {
	return datastoreIndexAttributes{ref: terra.ReferenceResource(di)}
}

func (di *DatastoreIndex) ImportState(av io.Reader) error {
	di.state = &datastoreIndexState{}
	if err := json.NewDecoder(av).Decode(di.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", di.Type(), di.LocalName(), err)
	}
	return nil
}

func (di *DatastoreIndex) State() (*datastoreIndexState, bool) {
	return di.state, di.state != nil
}

func (di *DatastoreIndex) StateMust() *datastoreIndexState {
	if di.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", di.Type(), di.LocalName()))
	}
	return di.state
}

func (di *DatastoreIndex) DependOn() terra.Reference {
	return terra.ReferenceResource(di)
}

type DatastoreIndexArgs struct {
	// Ancestor: string, optional
	Ancestor terra.StringValue `hcl:"ancestor,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, required
	Kind terra.StringValue `hcl:"kind,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Properties: min=0
	Properties []datastoreindex.Properties `hcl:"properties,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datastoreindex.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DatastoreIndex depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type datastoreIndexAttributes struct {
	ref terra.Reference
}

func (di datastoreIndexAttributes) Ancestor() terra.StringValue {
	return terra.ReferenceString(di.ref.Append("ancestor"))
}

func (di datastoreIndexAttributes) Id() terra.StringValue {
	return terra.ReferenceString(di.ref.Append("id"))
}

func (di datastoreIndexAttributes) IndexId() terra.StringValue {
	return terra.ReferenceString(di.ref.Append("index_id"))
}

func (di datastoreIndexAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(di.ref.Append("kind"))
}

func (di datastoreIndexAttributes) Project() terra.StringValue {
	return terra.ReferenceString(di.ref.Append("project"))
}

func (di datastoreIndexAttributes) Properties() terra.ListValue[datastoreindex.PropertiesAttributes] {
	return terra.ReferenceList[datastoreindex.PropertiesAttributes](di.ref.Append("properties"))
}

func (di datastoreIndexAttributes) Timeouts() datastoreindex.TimeoutsAttributes {
	return terra.ReferenceSingle[datastoreindex.TimeoutsAttributes](di.ref.Append("timeouts"))
}

type datastoreIndexState struct {
	Ancestor   string                           `json:"ancestor"`
	Id         string                           `json:"id"`
	IndexId    string                           `json:"index_id"`
	Kind       string                           `json:"kind"`
	Project    string                           `json:"project"`
	Properties []datastoreindex.PropertiesState `json:"properties"`
	Timeouts   *datastoreindex.TimeoutsState    `json:"timeouts"`
}
