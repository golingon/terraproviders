// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	filestoresnapshot "github.com/golingon/terraproviders/google/4.59.0/filestoresnapshot"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFilestoreSnapshot(name string, args FilestoreSnapshotArgs) *FilestoreSnapshot {
	return &FilestoreSnapshot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FilestoreSnapshot)(nil)

type FilestoreSnapshot struct {
	Name  string
	Args  FilestoreSnapshotArgs
	state *filestoreSnapshotState
}

func (fs *FilestoreSnapshot) Type() string {
	return "google_filestore_snapshot"
}

func (fs *FilestoreSnapshot) LocalName() string {
	return fs.Name
}

func (fs *FilestoreSnapshot) Configuration() interface{} {
	return fs.Args
}

func (fs *FilestoreSnapshot) Attributes() filestoreSnapshotAttributes {
	return filestoreSnapshotAttributes{ref: terra.ReferenceResource(fs)}
}

func (fs *FilestoreSnapshot) ImportState(av io.Reader) error {
	fs.state = &filestoreSnapshotState{}
	if err := json.NewDecoder(av).Decode(fs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fs.Type(), fs.LocalName(), err)
	}
	return nil
}

func (fs *FilestoreSnapshot) State() (*filestoreSnapshotState, bool) {
	return fs.state, fs.state != nil
}

func (fs *FilestoreSnapshot) StateMust() *filestoreSnapshotState {
	if fs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fs.Type(), fs.LocalName()))
	}
	return fs.state
}

func (fs *FilestoreSnapshot) DependOn() terra.Reference {
	return terra.ReferenceResource(fs)
}

type FilestoreSnapshotArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *filestoresnapshot.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FilestoreSnapshot depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type filestoreSnapshotAttributes struct {
	ref terra.Reference
}

func (fs filestoreSnapshotAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(fs.ref.Append("create_time"))
}

func (fs filestoreSnapshotAttributes) Description() terra.StringValue {
	return terra.ReferenceString(fs.ref.Append("description"))
}

func (fs filestoreSnapshotAttributes) FilesystemUsedBytes() terra.StringValue {
	return terra.ReferenceString(fs.ref.Append("filesystem_used_bytes"))
}

func (fs filestoreSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceString(fs.ref.Append("id"))
}

func (fs filestoreSnapshotAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(fs.ref.Append("instance"))
}

func (fs filestoreSnapshotAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](fs.ref.Append("labels"))
}

func (fs filestoreSnapshotAttributes) Location() terra.StringValue {
	return terra.ReferenceString(fs.ref.Append("location"))
}

func (fs filestoreSnapshotAttributes) Name() terra.StringValue {
	return terra.ReferenceString(fs.ref.Append("name"))
}

func (fs filestoreSnapshotAttributes) Project() terra.StringValue {
	return terra.ReferenceString(fs.ref.Append("project"))
}

func (fs filestoreSnapshotAttributes) State() terra.StringValue {
	return terra.ReferenceString(fs.ref.Append("state"))
}

func (fs filestoreSnapshotAttributes) Timeouts() filestoresnapshot.TimeoutsAttributes {
	return terra.ReferenceSingle[filestoresnapshot.TimeoutsAttributes](fs.ref.Append("timeouts"))
}

type filestoreSnapshotState struct {
	CreateTime          string                           `json:"create_time"`
	Description         string                           `json:"description"`
	FilesystemUsedBytes string                           `json:"filesystem_used_bytes"`
	Id                  string                           `json:"id"`
	Instance            string                           `json:"instance"`
	Labels              map[string]string                `json:"labels"`
	Location            string                           `json:"location"`
	Name                string                           `json:"name"`
	Project             string                           `json:"project"`
	State               string                           `json:"state"`
	Timeouts            *filestoresnapshot.TimeoutsState `json:"timeouts"`
}
