// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	storagetransferagentpool "github.com/golingon/terraproviders/google/4.59.0/storagetransferagentpool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStorageTransferAgentPool(name string, args StorageTransferAgentPoolArgs) *StorageTransferAgentPool {
	return &StorageTransferAgentPool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageTransferAgentPool)(nil)

type StorageTransferAgentPool struct {
	Name  string
	Args  StorageTransferAgentPoolArgs
	state *storageTransferAgentPoolState
}

func (stap *StorageTransferAgentPool) Type() string {
	return "google_storage_transfer_agent_pool"
}

func (stap *StorageTransferAgentPool) LocalName() string {
	return stap.Name
}

func (stap *StorageTransferAgentPool) Configuration() interface{} {
	return stap.Args
}

func (stap *StorageTransferAgentPool) Attributes() storageTransferAgentPoolAttributes {
	return storageTransferAgentPoolAttributes{ref: terra.ReferenceResource(stap)}
}

func (stap *StorageTransferAgentPool) ImportState(av io.Reader) error {
	stap.state = &storageTransferAgentPoolState{}
	if err := json.NewDecoder(av).Decode(stap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", stap.Type(), stap.LocalName(), err)
	}
	return nil
}

func (stap *StorageTransferAgentPool) State() (*storageTransferAgentPoolState, bool) {
	return stap.state, stap.state != nil
}

func (stap *StorageTransferAgentPool) StateMust() *storageTransferAgentPoolState {
	if stap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", stap.Type(), stap.LocalName()))
	}
	return stap.state
}

func (stap *StorageTransferAgentPool) DependOn() terra.Reference {
	return terra.ReferenceResource(stap)
}

type StorageTransferAgentPoolArgs struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// BandwidthLimit: optional
	BandwidthLimit *storagetransferagentpool.BandwidthLimit `hcl:"bandwidth_limit,block"`
	// Timeouts: optional
	Timeouts *storagetransferagentpool.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StorageTransferAgentPool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storageTransferAgentPoolAttributes struct {
	ref terra.Reference
}

func (stap storageTransferAgentPoolAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(stap.ref.Append("display_name"))
}

func (stap storageTransferAgentPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(stap.ref.Append("id"))
}

func (stap storageTransferAgentPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(stap.ref.Append("name"))
}

func (stap storageTransferAgentPoolAttributes) Project() terra.StringValue {
	return terra.ReferenceString(stap.ref.Append("project"))
}

func (stap storageTransferAgentPoolAttributes) State() terra.StringValue {
	return terra.ReferenceString(stap.ref.Append("state"))
}

func (stap storageTransferAgentPoolAttributes) BandwidthLimit() terra.ListValue[storagetransferagentpool.BandwidthLimitAttributes] {
	return terra.ReferenceList[storagetransferagentpool.BandwidthLimitAttributes](stap.ref.Append("bandwidth_limit"))
}

func (stap storageTransferAgentPoolAttributes) Timeouts() storagetransferagentpool.TimeoutsAttributes {
	return terra.ReferenceSingle[storagetransferagentpool.TimeoutsAttributes](stap.ref.Append("timeouts"))
}

type storageTransferAgentPoolState struct {
	DisplayName    string                                         `json:"display_name"`
	Id             string                                         `json:"id"`
	Name           string                                         `json:"name"`
	Project        string                                         `json:"project"`
	State          string                                         `json:"state"`
	BandwidthLimit []storagetransferagentpool.BandwidthLimitState `json:"bandwidth_limit"`
	Timeouts       *storagetransferagentpool.TimeoutsState        `json:"timeouts"`
}
