// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	privatecacapool "github.com/golingon/terraproviders/google/4.59.0/privatecacapool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivatecaCaPool(name string, args PrivatecaCaPoolArgs) *PrivatecaCaPool {
	return &PrivatecaCaPool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivatecaCaPool)(nil)

type PrivatecaCaPool struct {
	Name  string
	Args  PrivatecaCaPoolArgs
	state *privatecaCaPoolState
}

func (pcp *PrivatecaCaPool) Type() string {
	return "google_privateca_ca_pool"
}

func (pcp *PrivatecaCaPool) LocalName() string {
	return pcp.Name
}

func (pcp *PrivatecaCaPool) Configuration() interface{} {
	return pcp.Args
}

func (pcp *PrivatecaCaPool) Attributes() privatecaCaPoolAttributes {
	return privatecaCaPoolAttributes{ref: terra.ReferenceResource(pcp)}
}

func (pcp *PrivatecaCaPool) ImportState(av io.Reader) error {
	pcp.state = &privatecaCaPoolState{}
	if err := json.NewDecoder(av).Decode(pcp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pcp.Type(), pcp.LocalName(), err)
	}
	return nil
}

func (pcp *PrivatecaCaPool) State() (*privatecaCaPoolState, bool) {
	return pcp.state, pcp.state != nil
}

func (pcp *PrivatecaCaPool) StateMust() *privatecaCaPoolState {
	if pcp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pcp.Type(), pcp.LocalName()))
	}
	return pcp.state
}

func (pcp *PrivatecaCaPool) DependOn() terra.Reference {
	return terra.ReferenceResource(pcp)
}

type PrivatecaCaPoolArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Tier: string, required
	Tier terra.StringValue `hcl:"tier,attr" validate:"required"`
	// IssuancePolicy: optional
	IssuancePolicy *privatecacapool.IssuancePolicy `hcl:"issuance_policy,block"`
	// PublishingOptions: optional
	PublishingOptions *privatecacapool.PublishingOptions `hcl:"publishing_options,block"`
	// Timeouts: optional
	Timeouts *privatecacapool.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PrivatecaCaPool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privatecaCaPoolAttributes struct {
	ref terra.Reference
}

func (pcp privatecaCaPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pcp.ref.Append("id"))
}

func (pcp privatecaCaPoolAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pcp.ref.Append("labels"))
}

func (pcp privatecaCaPoolAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pcp.ref.Append("location"))
}

func (pcp privatecaCaPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pcp.ref.Append("name"))
}

func (pcp privatecaCaPoolAttributes) Project() terra.StringValue {
	return terra.ReferenceString(pcp.ref.Append("project"))
}

func (pcp privatecaCaPoolAttributes) Tier() terra.StringValue {
	return terra.ReferenceString(pcp.ref.Append("tier"))
}

func (pcp privatecaCaPoolAttributes) IssuancePolicy() terra.ListValue[privatecacapool.IssuancePolicyAttributes] {
	return terra.ReferenceList[privatecacapool.IssuancePolicyAttributes](pcp.ref.Append("issuance_policy"))
}

func (pcp privatecaCaPoolAttributes) PublishingOptions() terra.ListValue[privatecacapool.PublishingOptionsAttributes] {
	return terra.ReferenceList[privatecacapool.PublishingOptionsAttributes](pcp.ref.Append("publishing_options"))
}

func (pcp privatecaCaPoolAttributes) Timeouts() privatecacapool.TimeoutsAttributes {
	return terra.ReferenceSingle[privatecacapool.TimeoutsAttributes](pcp.ref.Append("timeouts"))
}

type privatecaCaPoolState struct {
	Id                string                                   `json:"id"`
	Labels            map[string]string                        `json:"labels"`
	Location          string                                   `json:"location"`
	Name              string                                   `json:"name"`
	Project           string                                   `json:"project"`
	Tier              string                                   `json:"tier"`
	IssuancePolicy    []privatecacapool.IssuancePolicyState    `json:"issuance_policy"`
	PublishingOptions []privatecacapool.PublishingOptionsState `json:"publishing_options"`
	Timeouts          *privatecacapool.TimeoutsState           `json:"timeouts"`
}
