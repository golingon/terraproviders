// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	kmssecretciphertext "github.com/golingon/terraproviders/google/4.59.0/kmssecretciphertext"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKmsSecretCiphertext(name string, args KmsSecretCiphertextArgs) *KmsSecretCiphertext {
	return &KmsSecretCiphertext{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KmsSecretCiphertext)(nil)

type KmsSecretCiphertext struct {
	Name  string
	Args  KmsSecretCiphertextArgs
	state *kmsSecretCiphertextState
}

func (ksc *KmsSecretCiphertext) Type() string {
	return "google_kms_secret_ciphertext"
}

func (ksc *KmsSecretCiphertext) LocalName() string {
	return ksc.Name
}

func (ksc *KmsSecretCiphertext) Configuration() interface{} {
	return ksc.Args
}

func (ksc *KmsSecretCiphertext) Attributes() kmsSecretCiphertextAttributes {
	return kmsSecretCiphertextAttributes{ref: terra.ReferenceResource(ksc)}
}

func (ksc *KmsSecretCiphertext) ImportState(av io.Reader) error {
	ksc.state = &kmsSecretCiphertextState{}
	if err := json.NewDecoder(av).Decode(ksc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ksc.Type(), ksc.LocalName(), err)
	}
	return nil
}

func (ksc *KmsSecretCiphertext) State() (*kmsSecretCiphertextState, bool) {
	return ksc.state, ksc.state != nil
}

func (ksc *KmsSecretCiphertext) StateMust() *kmsSecretCiphertextState {
	if ksc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ksc.Type(), ksc.LocalName()))
	}
	return ksc.state
}

func (ksc *KmsSecretCiphertext) DependOn() terra.Reference {
	return terra.ReferenceResource(ksc)
}

type KmsSecretCiphertextArgs struct {
	// AdditionalAuthenticatedData: string, optional
	AdditionalAuthenticatedData terra.StringValue `hcl:"additional_authenticated_data,attr"`
	// CryptoKey: string, required
	CryptoKey terra.StringValue `hcl:"crypto_key,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Plaintext: string, required
	Plaintext terra.StringValue `hcl:"plaintext,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *kmssecretciphertext.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that KmsSecretCiphertext depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kmsSecretCiphertextAttributes struct {
	ref terra.Reference
}

func (ksc kmsSecretCiphertextAttributes) AdditionalAuthenticatedData() terra.StringValue {
	return terra.ReferenceString(ksc.ref.Append("additional_authenticated_data"))
}

func (ksc kmsSecretCiphertextAttributes) Ciphertext() terra.StringValue {
	return terra.ReferenceString(ksc.ref.Append("ciphertext"))
}

func (ksc kmsSecretCiphertextAttributes) CryptoKey() terra.StringValue {
	return terra.ReferenceString(ksc.ref.Append("crypto_key"))
}

func (ksc kmsSecretCiphertextAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ksc.ref.Append("id"))
}

func (ksc kmsSecretCiphertextAttributes) Plaintext() terra.StringValue {
	return terra.ReferenceString(ksc.ref.Append("plaintext"))
}

func (ksc kmsSecretCiphertextAttributes) Timeouts() kmssecretciphertext.TimeoutsAttributes {
	return terra.ReferenceSingle[kmssecretciphertext.TimeoutsAttributes](ksc.ref.Append("timeouts"))
}

type kmsSecretCiphertextState struct {
	AdditionalAuthenticatedData string                             `json:"additional_authenticated_data"`
	Ciphertext                  string                             `json:"ciphertext"`
	CryptoKey                   string                             `json:"crypto_key"`
	Id                          string                             `json:"id"`
	Plaintext                   string                             `json:"plaintext"`
	Timeouts                    *kmssecretciphertext.TimeoutsState `json:"timeouts"`
}
