// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	cloudfunctions2functioniammember "github.com/golingon/terraproviders/google/4.59.0/cloudfunctions2functioniammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudfunctions2FunctionIamMember(name string, args Cloudfunctions2FunctionIamMemberArgs) *Cloudfunctions2FunctionIamMember {
	return &Cloudfunctions2FunctionIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Cloudfunctions2FunctionIamMember)(nil)

type Cloudfunctions2FunctionIamMember struct {
	Name  string
	Args  Cloudfunctions2FunctionIamMemberArgs
	state *cloudfunctions2FunctionIamMemberState
}

func (cfim *Cloudfunctions2FunctionIamMember) Type() string {
	return "google_cloudfunctions2_function_iam_member"
}

func (cfim *Cloudfunctions2FunctionIamMember) LocalName() string {
	return cfim.Name
}

func (cfim *Cloudfunctions2FunctionIamMember) Configuration() interface{} {
	return cfim.Args
}

func (cfim *Cloudfunctions2FunctionIamMember) Attributes() cloudfunctions2FunctionIamMemberAttributes {
	return cloudfunctions2FunctionIamMemberAttributes{ref: terra.ReferenceResource(cfim)}
}

func (cfim *Cloudfunctions2FunctionIamMember) ImportState(av io.Reader) error {
	cfim.state = &cloudfunctions2FunctionIamMemberState{}
	if err := json.NewDecoder(av).Decode(cfim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cfim.Type(), cfim.LocalName(), err)
	}
	return nil
}

func (cfim *Cloudfunctions2FunctionIamMember) State() (*cloudfunctions2FunctionIamMemberState, bool) {
	return cfim.state, cfim.state != nil
}

func (cfim *Cloudfunctions2FunctionIamMember) StateMust() *cloudfunctions2FunctionIamMemberState {
	if cfim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cfim.Type(), cfim.LocalName()))
	}
	return cfim.state
}

func (cfim *Cloudfunctions2FunctionIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(cfim)
}

type Cloudfunctions2FunctionIamMemberArgs struct {
	// CloudFunction: string, required
	CloudFunction terra.StringValue `hcl:"cloud_function,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *cloudfunctions2functioniammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that Cloudfunctions2FunctionIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudfunctions2FunctionIamMemberAttributes struct {
	ref terra.Reference
}

func (cfim cloudfunctions2FunctionIamMemberAttributes) CloudFunction() terra.StringValue {
	return terra.ReferenceString(cfim.ref.Append("cloud_function"))
}

func (cfim cloudfunctions2FunctionIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(cfim.ref.Append("etag"))
}

func (cfim cloudfunctions2FunctionIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cfim.ref.Append("id"))
}

func (cfim cloudfunctions2FunctionIamMemberAttributes) Location() terra.StringValue {
	return terra.ReferenceString(cfim.ref.Append("location"))
}

func (cfim cloudfunctions2FunctionIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(cfim.ref.Append("member"))
}

func (cfim cloudfunctions2FunctionIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cfim.ref.Append("project"))
}

func (cfim cloudfunctions2FunctionIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(cfim.ref.Append("role"))
}

func (cfim cloudfunctions2FunctionIamMemberAttributes) Condition() terra.ListValue[cloudfunctions2functioniammember.ConditionAttributes] {
	return terra.ReferenceList[cloudfunctions2functioniammember.ConditionAttributes](cfim.ref.Append("condition"))
}

type cloudfunctions2FunctionIamMemberState struct {
	CloudFunction string                                            `json:"cloud_function"`
	Etag          string                                            `json:"etag"`
	Id            string                                            `json:"id"`
	Location      string                                            `json:"location"`
	Member        string                                            `json:"member"`
	Project       string                                            `json:"project"`
	Role          string                                            `json:"role"`
	Condition     []cloudfunctions2functioniammember.ConditionState `json:"condition"`
}
