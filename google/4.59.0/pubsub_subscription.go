// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	pubsubsubscription "github.com/golingon/terraproviders/google/4.59.0/pubsubsubscription"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPubsubSubscription(name string, args PubsubSubscriptionArgs) *PubsubSubscription {
	return &PubsubSubscription{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PubsubSubscription)(nil)

type PubsubSubscription struct {
	Name  string
	Args  PubsubSubscriptionArgs
	state *pubsubSubscriptionState
}

func (ps *PubsubSubscription) Type() string {
	return "google_pubsub_subscription"
}

func (ps *PubsubSubscription) LocalName() string {
	return ps.Name
}

func (ps *PubsubSubscription) Configuration() interface{} {
	return ps.Args
}

func (ps *PubsubSubscription) Attributes() pubsubSubscriptionAttributes {
	return pubsubSubscriptionAttributes{ref: terra.ReferenceResource(ps)}
}

func (ps *PubsubSubscription) ImportState(av io.Reader) error {
	ps.state = &pubsubSubscriptionState{}
	if err := json.NewDecoder(av).Decode(ps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ps.Type(), ps.LocalName(), err)
	}
	return nil
}

func (ps *PubsubSubscription) State() (*pubsubSubscriptionState, bool) {
	return ps.state, ps.state != nil
}

func (ps *PubsubSubscription) StateMust() *pubsubSubscriptionState {
	if ps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ps.Type(), ps.LocalName()))
	}
	return ps.state
}

func (ps *PubsubSubscription) DependOn() terra.Reference {
	return terra.ReferenceResource(ps)
}

type PubsubSubscriptionArgs struct {
	// AckDeadlineSeconds: number, optional
	AckDeadlineSeconds terra.NumberValue `hcl:"ack_deadline_seconds,attr"`
	// EnableExactlyOnceDelivery: bool, optional
	EnableExactlyOnceDelivery terra.BoolValue `hcl:"enable_exactly_once_delivery,attr"`
	// EnableMessageOrdering: bool, optional
	EnableMessageOrdering terra.BoolValue `hcl:"enable_message_ordering,attr"`
	// Filter: string, optional
	Filter terra.StringValue `hcl:"filter,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// MessageRetentionDuration: string, optional
	MessageRetentionDuration terra.StringValue `hcl:"message_retention_duration,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RetainAckedMessages: bool, optional
	RetainAckedMessages terra.BoolValue `hcl:"retain_acked_messages,attr"`
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
	// BigqueryConfig: optional
	BigqueryConfig *pubsubsubscription.BigqueryConfig `hcl:"bigquery_config,block"`
	// DeadLetterPolicy: optional
	DeadLetterPolicy *pubsubsubscription.DeadLetterPolicy `hcl:"dead_letter_policy,block"`
	// ExpirationPolicy: optional
	ExpirationPolicy *pubsubsubscription.ExpirationPolicy `hcl:"expiration_policy,block"`
	// PushConfig: optional
	PushConfig *pubsubsubscription.PushConfig `hcl:"push_config,block"`
	// RetryPolicy: optional
	RetryPolicy *pubsubsubscription.RetryPolicy `hcl:"retry_policy,block"`
	// Timeouts: optional
	Timeouts *pubsubsubscription.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PubsubSubscription depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type pubsubSubscriptionAttributes struct {
	ref terra.Reference
}

func (ps pubsubSubscriptionAttributes) AckDeadlineSeconds() terra.NumberValue {
	return terra.ReferenceNumber(ps.ref.Append("ack_deadline_seconds"))
}

func (ps pubsubSubscriptionAttributes) EnableExactlyOnceDelivery() terra.BoolValue {
	return terra.ReferenceBool(ps.ref.Append("enable_exactly_once_delivery"))
}

func (ps pubsubSubscriptionAttributes) EnableMessageOrdering() terra.BoolValue {
	return terra.ReferenceBool(ps.ref.Append("enable_message_ordering"))
}

func (ps pubsubSubscriptionAttributes) Filter() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("filter"))
}

func (ps pubsubSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("id"))
}

func (ps pubsubSubscriptionAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ps.ref.Append("labels"))
}

func (ps pubsubSubscriptionAttributes) MessageRetentionDuration() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("message_retention_duration"))
}

func (ps pubsubSubscriptionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("name"))
}

func (ps pubsubSubscriptionAttributes) Project() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("project"))
}

func (ps pubsubSubscriptionAttributes) RetainAckedMessages() terra.BoolValue {
	return terra.ReferenceBool(ps.ref.Append("retain_acked_messages"))
}

func (ps pubsubSubscriptionAttributes) Topic() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("topic"))
}

func (ps pubsubSubscriptionAttributes) BigqueryConfig() terra.ListValue[pubsubsubscription.BigqueryConfigAttributes] {
	return terra.ReferenceList[pubsubsubscription.BigqueryConfigAttributes](ps.ref.Append("bigquery_config"))
}

func (ps pubsubSubscriptionAttributes) DeadLetterPolicy() terra.ListValue[pubsubsubscription.DeadLetterPolicyAttributes] {
	return terra.ReferenceList[pubsubsubscription.DeadLetterPolicyAttributes](ps.ref.Append("dead_letter_policy"))
}

func (ps pubsubSubscriptionAttributes) ExpirationPolicy() terra.ListValue[pubsubsubscription.ExpirationPolicyAttributes] {
	return terra.ReferenceList[pubsubsubscription.ExpirationPolicyAttributes](ps.ref.Append("expiration_policy"))
}

func (ps pubsubSubscriptionAttributes) PushConfig() terra.ListValue[pubsubsubscription.PushConfigAttributes] {
	return terra.ReferenceList[pubsubsubscription.PushConfigAttributes](ps.ref.Append("push_config"))
}

func (ps pubsubSubscriptionAttributes) RetryPolicy() terra.ListValue[pubsubsubscription.RetryPolicyAttributes] {
	return terra.ReferenceList[pubsubsubscription.RetryPolicyAttributes](ps.ref.Append("retry_policy"))
}

func (ps pubsubSubscriptionAttributes) Timeouts() pubsubsubscription.TimeoutsAttributes {
	return terra.ReferenceSingle[pubsubsubscription.TimeoutsAttributes](ps.ref.Append("timeouts"))
}

type pubsubSubscriptionState struct {
	AckDeadlineSeconds        float64                                    `json:"ack_deadline_seconds"`
	EnableExactlyOnceDelivery bool                                       `json:"enable_exactly_once_delivery"`
	EnableMessageOrdering     bool                                       `json:"enable_message_ordering"`
	Filter                    string                                     `json:"filter"`
	Id                        string                                     `json:"id"`
	Labels                    map[string]string                          `json:"labels"`
	MessageRetentionDuration  string                                     `json:"message_retention_duration"`
	Name                      string                                     `json:"name"`
	Project                   string                                     `json:"project"`
	RetainAckedMessages       bool                                       `json:"retain_acked_messages"`
	Topic                     string                                     `json:"topic"`
	BigqueryConfig            []pubsubsubscription.BigqueryConfigState   `json:"bigquery_config"`
	DeadLetterPolicy          []pubsubsubscription.DeadLetterPolicyState `json:"dead_letter_policy"`
	ExpirationPolicy          []pubsubsubscription.ExpirationPolicyState `json:"expiration_policy"`
	PushConfig                []pubsubsubscription.PushConfigState       `json:"push_config"`
	RetryPolicy               []pubsubsubscription.RetryPolicyState      `json:"retry_policy"`
	Timeouts                  *pubsubsubscription.TimeoutsState          `json:"timeouts"`
}
