// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package beyondcorpappconnection

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ApplicationEndpoint struct {
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type Gateway struct {
	// AppGateway: string, required
	AppGateway terra.StringValue `hcl:"app_gateway,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ApplicationEndpointAttributes struct {
	ref terra.Reference
}

func (ae ApplicationEndpointAttributes) InternalRef() terra.Reference {
	return ae.ref
}

func (ae ApplicationEndpointAttributes) InternalWithRef(ref terra.Reference) ApplicationEndpointAttributes {
	return ApplicationEndpointAttributes{ref: ref}
}

func (ae ApplicationEndpointAttributes) InternalTokens() hclwrite.Tokens {
	return ae.ref.InternalTokens()
}

func (ae ApplicationEndpointAttributes) Host() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("host"))
}

func (ae ApplicationEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(ae.ref.Append("port"))
}

type GatewayAttributes struct {
	ref terra.Reference
}

func (g GatewayAttributes) InternalRef() terra.Reference {
	return g.ref
}

func (g GatewayAttributes) InternalWithRef(ref terra.Reference) GatewayAttributes {
	return GatewayAttributes{ref: ref}
}

func (g GatewayAttributes) InternalTokens() hclwrite.Tokens {
	return g.ref.InternalTokens()
}

func (g GatewayAttributes) AppGateway() terra.StringValue {
	return terra.ReferenceString(g.ref.Append("app_gateway"))
}

func (g GatewayAttributes) IngressPort() terra.NumberValue {
	return terra.ReferenceNumber(g.ref.Append("ingress_port"))
}

func (g GatewayAttributes) Type() terra.StringValue {
	return terra.ReferenceString(g.ref.Append("type"))
}

func (g GatewayAttributes) Uri() terra.StringValue {
	return terra.ReferenceString(g.ref.Append("uri"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type ApplicationEndpointState struct {
	Host string  `json:"host"`
	Port float64 `json:"port"`
}

type GatewayState struct {
	AppGateway  string  `json:"app_gateway"`
	IngressPort float64 `json:"ingress_port"`
	Type        string  `json:"type"`
	Uri         string  `json:"uri"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
