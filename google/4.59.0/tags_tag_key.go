// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	tagstagkey "github.com/golingon/terraproviders/google/4.59.0/tagstagkey"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewTagsTagKey(name string, args TagsTagKeyArgs) *TagsTagKey {
	return &TagsTagKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TagsTagKey)(nil)

type TagsTagKey struct {
	Name  string
	Args  TagsTagKeyArgs
	state *tagsTagKeyState
}

func (ttk *TagsTagKey) Type() string {
	return "google_tags_tag_key"
}

func (ttk *TagsTagKey) LocalName() string {
	return ttk.Name
}

func (ttk *TagsTagKey) Configuration() interface{} {
	return ttk.Args
}

func (ttk *TagsTagKey) Attributes() tagsTagKeyAttributes {
	return tagsTagKeyAttributes{ref: terra.ReferenceResource(ttk)}
}

func (ttk *TagsTagKey) ImportState(av io.Reader) error {
	ttk.state = &tagsTagKeyState{}
	if err := json.NewDecoder(av).Decode(ttk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ttk.Type(), ttk.LocalName(), err)
	}
	return nil
}

func (ttk *TagsTagKey) State() (*tagsTagKeyState, bool) {
	return ttk.state, ttk.state != nil
}

func (ttk *TagsTagKey) StateMust() *tagsTagKeyState {
	if ttk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ttk.Type(), ttk.LocalName()))
	}
	return ttk.state
}

func (ttk *TagsTagKey) DependOn() terra.Reference {
	return terra.ReferenceResource(ttk)
}

type TagsTagKeyArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// Purpose: string, optional
	Purpose terra.StringValue `hcl:"purpose,attr"`
	// PurposeData: map of string, optional
	PurposeData terra.MapValue[terra.StringValue] `hcl:"purpose_data,attr"`
	// ShortName: string, required
	ShortName terra.StringValue `hcl:"short_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *tagstagkey.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that TagsTagKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type tagsTagKeyAttributes struct {
	ref terra.Reference
}

func (ttk tagsTagKeyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(ttk.ref.Append("create_time"))
}

func (ttk tagsTagKeyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ttk.ref.Append("description"))
}

func (ttk tagsTagKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ttk.ref.Append("id"))
}

func (ttk tagsTagKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ttk.ref.Append("name"))
}

func (ttk tagsTagKeyAttributes) NamespacedName() terra.StringValue {
	return terra.ReferenceString(ttk.ref.Append("namespaced_name"))
}

func (ttk tagsTagKeyAttributes) Parent() terra.StringValue {
	return terra.ReferenceString(ttk.ref.Append("parent"))
}

func (ttk tagsTagKeyAttributes) Purpose() terra.StringValue {
	return terra.ReferenceString(ttk.ref.Append("purpose"))
}

func (ttk tagsTagKeyAttributes) PurposeData() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ttk.ref.Append("purpose_data"))
}

func (ttk tagsTagKeyAttributes) ShortName() terra.StringValue {
	return terra.ReferenceString(ttk.ref.Append("short_name"))
}

func (ttk tagsTagKeyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(ttk.ref.Append("update_time"))
}

func (ttk tagsTagKeyAttributes) Timeouts() tagstagkey.TimeoutsAttributes {
	return terra.ReferenceSingle[tagstagkey.TimeoutsAttributes](ttk.ref.Append("timeouts"))
}

type tagsTagKeyState struct {
	CreateTime     string                    `json:"create_time"`
	Description    string                    `json:"description"`
	Id             string                    `json:"id"`
	Name           string                    `json:"name"`
	NamespacedName string                    `json:"namespaced_name"`
	Parent         string                    `json:"parent"`
	Purpose        string                    `json:"purpose"`
	PurposeData    map[string]string         `json:"purpose_data"`
	ShortName      string                    `json:"short_name"`
	UpdateTime     string                    `json:"update_time"`
	Timeouts       *tagstagkey.TimeoutsState `json:"timeouts"`
}
