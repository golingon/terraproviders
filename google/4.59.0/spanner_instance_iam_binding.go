// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	spannerinstanceiambinding "github.com/golingon/terraproviders/google/4.59.0/spannerinstanceiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpannerInstanceIamBinding(name string, args SpannerInstanceIamBindingArgs) *SpannerInstanceIamBinding {
	return &SpannerInstanceIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpannerInstanceIamBinding)(nil)

type SpannerInstanceIamBinding struct {
	Name  string
	Args  SpannerInstanceIamBindingArgs
	state *spannerInstanceIamBindingState
}

func (siib *SpannerInstanceIamBinding) Type() string {
	return "google_spanner_instance_iam_binding"
}

func (siib *SpannerInstanceIamBinding) LocalName() string {
	return siib.Name
}

func (siib *SpannerInstanceIamBinding) Configuration() interface{} {
	return siib.Args
}

func (siib *SpannerInstanceIamBinding) Attributes() spannerInstanceIamBindingAttributes {
	return spannerInstanceIamBindingAttributes{ref: terra.ReferenceResource(siib)}
}

func (siib *SpannerInstanceIamBinding) ImportState(av io.Reader) error {
	siib.state = &spannerInstanceIamBindingState{}
	if err := json.NewDecoder(av).Decode(siib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", siib.Type(), siib.LocalName(), err)
	}
	return nil
}

func (siib *SpannerInstanceIamBinding) State() (*spannerInstanceIamBindingState, bool) {
	return siib.state, siib.state != nil
}

func (siib *SpannerInstanceIamBinding) StateMust() *spannerInstanceIamBindingState {
	if siib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", siib.Type(), siib.LocalName()))
	}
	return siib.state
}

func (siib *SpannerInstanceIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(siib)
}

type SpannerInstanceIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *spannerinstanceiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that SpannerInstanceIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type spannerInstanceIamBindingAttributes struct {
	ref terra.Reference
}

func (siib spannerInstanceIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(siib.ref.Append("etag"))
}

func (siib spannerInstanceIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(siib.ref.Append("id"))
}

func (siib spannerInstanceIamBindingAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(siib.ref.Append("instance"))
}

func (siib spannerInstanceIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](siib.ref.Append("members"))
}

func (siib spannerInstanceIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(siib.ref.Append("project"))
}

func (siib spannerInstanceIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(siib.ref.Append("role"))
}

func (siib spannerInstanceIamBindingAttributes) Condition() terra.ListValue[spannerinstanceiambinding.ConditionAttributes] {
	return terra.ReferenceList[spannerinstanceiambinding.ConditionAttributes](siib.ref.Append("condition"))
}

type spannerInstanceIamBindingState struct {
	Etag      string                                     `json:"etag"`
	Id        string                                     `json:"id"`
	Instance  string                                     `json:"instance"`
	Members   []string                                   `json:"members"`
	Project   string                                     `json:"project"`
	Role      string                                     `json:"role"`
	Condition []spannerinstanceiambinding.ConditionState `json:"condition"`
}
