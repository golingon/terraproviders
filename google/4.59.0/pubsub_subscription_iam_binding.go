// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	pubsubsubscriptioniambinding "github.com/golingon/terraproviders/google/4.59.0/pubsubsubscriptioniambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPubsubSubscriptionIamBinding(name string, args PubsubSubscriptionIamBindingArgs) *PubsubSubscriptionIamBinding {
	return &PubsubSubscriptionIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PubsubSubscriptionIamBinding)(nil)

type PubsubSubscriptionIamBinding struct {
	Name  string
	Args  PubsubSubscriptionIamBindingArgs
	state *pubsubSubscriptionIamBindingState
}

func (psib *PubsubSubscriptionIamBinding) Type() string {
	return "google_pubsub_subscription_iam_binding"
}

func (psib *PubsubSubscriptionIamBinding) LocalName() string {
	return psib.Name
}

func (psib *PubsubSubscriptionIamBinding) Configuration() interface{} {
	return psib.Args
}

func (psib *PubsubSubscriptionIamBinding) Attributes() pubsubSubscriptionIamBindingAttributes {
	return pubsubSubscriptionIamBindingAttributes{ref: terra.ReferenceResource(psib)}
}

func (psib *PubsubSubscriptionIamBinding) ImportState(av io.Reader) error {
	psib.state = &pubsubSubscriptionIamBindingState{}
	if err := json.NewDecoder(av).Decode(psib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", psib.Type(), psib.LocalName(), err)
	}
	return nil
}

func (psib *PubsubSubscriptionIamBinding) State() (*pubsubSubscriptionIamBindingState, bool) {
	return psib.state, psib.state != nil
}

func (psib *PubsubSubscriptionIamBinding) StateMust() *pubsubSubscriptionIamBindingState {
	if psib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", psib.Type(), psib.LocalName()))
	}
	return psib.state
}

func (psib *PubsubSubscriptionIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(psib)
}

type PubsubSubscriptionIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Subscription: string, required
	Subscription terra.StringValue `hcl:"subscription,attr" validate:"required"`
	// Condition: optional
	Condition *pubsubsubscriptioniambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that PubsubSubscriptionIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type pubsubSubscriptionIamBindingAttributes struct {
	ref terra.Reference
}

func (psib pubsubSubscriptionIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(psib.ref.Append("etag"))
}

func (psib pubsubSubscriptionIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(psib.ref.Append("id"))
}

func (psib pubsubSubscriptionIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](psib.ref.Append("members"))
}

func (psib pubsubSubscriptionIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(psib.ref.Append("project"))
}

func (psib pubsubSubscriptionIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(psib.ref.Append("role"))
}

func (psib pubsubSubscriptionIamBindingAttributes) Subscription() terra.StringValue {
	return terra.ReferenceString(psib.ref.Append("subscription"))
}

func (psib pubsubSubscriptionIamBindingAttributes) Condition() terra.ListValue[pubsubsubscriptioniambinding.ConditionAttributes] {
	return terra.ReferenceList[pubsubsubscriptioniambinding.ConditionAttributes](psib.ref.Append("condition"))
}

type pubsubSubscriptionIamBindingState struct {
	Etag         string                                        `json:"etag"`
	Id           string                                        `json:"id"`
	Members      []string                                      `json:"members"`
	Project      string                                        `json:"project"`
	Role         string                                        `json:"role"`
	Subscription string                                        `json:"subscription"`
	Condition    []pubsubsubscriptioniambinding.ConditionState `json:"condition"`
}
