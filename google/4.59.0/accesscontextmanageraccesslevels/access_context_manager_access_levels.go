// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package accesscontextmanageraccesslevels

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AccessLevels struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Title: string, required
	Title terra.StringValue `hcl:"title,attr" validate:"required"`
	// Basic: optional
	Basic *Basic `hcl:"basic,block"`
	// Custom: optional
	Custom *Custom `hcl:"custom,block"`
}

type Basic struct {
	// CombiningFunction: string, optional
	CombiningFunction terra.StringValue `hcl:"combining_function,attr"`
	// Conditions: min=1
	Conditions []Conditions `hcl:"conditions,block" validate:"min=1"`
}

type Conditions struct {
	// IpSubnetworks: list of string, optional
	IpSubnetworks terra.ListValue[terra.StringValue] `hcl:"ip_subnetworks,attr"`
	// Members: list of string, optional
	Members terra.ListValue[terra.StringValue] `hcl:"members,attr"`
	// Negate: bool, optional
	Negate terra.BoolValue `hcl:"negate,attr"`
	// Regions: list of string, optional
	Regions terra.ListValue[terra.StringValue] `hcl:"regions,attr"`
	// RequiredAccessLevels: list of string, optional
	RequiredAccessLevels terra.ListValue[terra.StringValue] `hcl:"required_access_levels,attr"`
	// DevicePolicy: optional
	DevicePolicy *DevicePolicy `hcl:"device_policy,block"`
}

type DevicePolicy struct {
	// AllowedDeviceManagementLevels: list of string, optional
	AllowedDeviceManagementLevels terra.ListValue[terra.StringValue] `hcl:"allowed_device_management_levels,attr"`
	// AllowedEncryptionStatuses: list of string, optional
	AllowedEncryptionStatuses terra.ListValue[terra.StringValue] `hcl:"allowed_encryption_statuses,attr"`
	// RequireAdminApproval: bool, optional
	RequireAdminApproval terra.BoolValue `hcl:"require_admin_approval,attr"`
	// RequireCorpOwned: bool, optional
	RequireCorpOwned terra.BoolValue `hcl:"require_corp_owned,attr"`
	// RequireScreenLock: bool, optional
	RequireScreenLock terra.BoolValue `hcl:"require_screen_lock,attr"`
	// OsConstraints: min=0
	OsConstraints []OsConstraints `hcl:"os_constraints,block" validate:"min=0"`
}

type OsConstraints struct {
	// MinimumVersion: string, optional
	MinimumVersion terra.StringValue `hcl:"minimum_version,attr"`
	// OsType: string, required
	OsType terra.StringValue `hcl:"os_type,attr" validate:"required"`
}

type Custom struct {
	// Expr: required
	Expr *Expr `hcl:"expr,block" validate:"required"`
}

type Expr struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Expression: string, required
	Expression terra.StringValue `hcl:"expression,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Title: string, optional
	Title terra.StringValue `hcl:"title,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AccessLevelsAttributes struct {
	ref terra.Reference
}

func (al AccessLevelsAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al AccessLevelsAttributes) InternalWithRef(ref terra.Reference) AccessLevelsAttributes {
	return AccessLevelsAttributes{ref: ref}
}

func (al AccessLevelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al AccessLevelsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("description"))
}

func (al AccessLevelsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("name"))
}

func (al AccessLevelsAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("title"))
}

func (al AccessLevelsAttributes) Basic() terra.ListValue[BasicAttributes] {
	return terra.ReferenceAsList[BasicAttributes](al.ref.Append("basic"))
}

func (al AccessLevelsAttributes) Custom() terra.ListValue[CustomAttributes] {
	return terra.ReferenceAsList[CustomAttributes](al.ref.Append("custom"))
}

type BasicAttributes struct {
	ref terra.Reference
}

func (b BasicAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BasicAttributes) InternalWithRef(ref terra.Reference) BasicAttributes {
	return BasicAttributes{ref: ref}
}

func (b BasicAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BasicAttributes) CombiningFunction() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("combining_function"))
}

func (b BasicAttributes) Conditions() terra.ListValue[ConditionsAttributes] {
	return terra.ReferenceAsList[ConditionsAttributes](b.ref.Append("conditions"))
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) IpSubnetworks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("ip_subnetworks"))
}

func (c ConditionsAttributes) Members() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("members"))
}

func (c ConditionsAttributes) Negate() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("negate"))
}

func (c ConditionsAttributes) Regions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("regions"))
}

func (c ConditionsAttributes) RequiredAccessLevels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("required_access_levels"))
}

func (c ConditionsAttributes) DevicePolicy() terra.ListValue[DevicePolicyAttributes] {
	return terra.ReferenceAsList[DevicePolicyAttributes](c.ref.Append("device_policy"))
}

type DevicePolicyAttributes struct {
	ref terra.Reference
}

func (dp DevicePolicyAttributes) InternalRef() (terra.Reference, error) {
	return dp.ref, nil
}

func (dp DevicePolicyAttributes) InternalWithRef(ref terra.Reference) DevicePolicyAttributes {
	return DevicePolicyAttributes{ref: ref}
}

func (dp DevicePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dp.ref.InternalTokens()
}

func (dp DevicePolicyAttributes) AllowedDeviceManagementLevels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dp.ref.Append("allowed_device_management_levels"))
}

func (dp DevicePolicyAttributes) AllowedEncryptionStatuses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dp.ref.Append("allowed_encryption_statuses"))
}

func (dp DevicePolicyAttributes) RequireAdminApproval() terra.BoolValue {
	return terra.ReferenceAsBool(dp.ref.Append("require_admin_approval"))
}

func (dp DevicePolicyAttributes) RequireCorpOwned() terra.BoolValue {
	return terra.ReferenceAsBool(dp.ref.Append("require_corp_owned"))
}

func (dp DevicePolicyAttributes) RequireScreenLock() terra.BoolValue {
	return terra.ReferenceAsBool(dp.ref.Append("require_screen_lock"))
}

func (dp DevicePolicyAttributes) OsConstraints() terra.ListValue[OsConstraintsAttributes] {
	return terra.ReferenceAsList[OsConstraintsAttributes](dp.ref.Append("os_constraints"))
}

type OsConstraintsAttributes struct {
	ref terra.Reference
}

func (oc OsConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc OsConstraintsAttributes) InternalWithRef(ref terra.Reference) OsConstraintsAttributes {
	return OsConstraintsAttributes{ref: ref}
}

func (oc OsConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc OsConstraintsAttributes) MinimumVersion() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("minimum_version"))
}

func (oc OsConstraintsAttributes) OsType() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("os_type"))
}

type CustomAttributes struct {
	ref terra.Reference
}

func (c CustomAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CustomAttributes) InternalWithRef(ref terra.Reference) CustomAttributes {
	return CustomAttributes{ref: ref}
}

func (c CustomAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CustomAttributes) Expr() terra.ListValue[ExprAttributes] {
	return terra.ReferenceAsList[ExprAttributes](c.ref.Append("expr"))
}

type ExprAttributes struct {
	ref terra.Reference
}

func (e ExprAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ExprAttributes) InternalWithRef(ref terra.Reference) ExprAttributes {
	return ExprAttributes{ref: ref}
}

func (e ExprAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ExprAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("description"))
}

func (e ExprAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("expression"))
}

func (e ExprAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("location"))
}

func (e ExprAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("title"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AccessLevelsState struct {
	Description string        `json:"description"`
	Name        string        `json:"name"`
	Title       string        `json:"title"`
	Basic       []BasicState  `json:"basic"`
	Custom      []CustomState `json:"custom"`
}

type BasicState struct {
	CombiningFunction string            `json:"combining_function"`
	Conditions        []ConditionsState `json:"conditions"`
}

type ConditionsState struct {
	IpSubnetworks        []string            `json:"ip_subnetworks"`
	Members              []string            `json:"members"`
	Negate               bool                `json:"negate"`
	Regions              []string            `json:"regions"`
	RequiredAccessLevels []string            `json:"required_access_levels"`
	DevicePolicy         []DevicePolicyState `json:"device_policy"`
}

type DevicePolicyState struct {
	AllowedDeviceManagementLevels []string             `json:"allowed_device_management_levels"`
	AllowedEncryptionStatuses     []string             `json:"allowed_encryption_statuses"`
	RequireAdminApproval          bool                 `json:"require_admin_approval"`
	RequireCorpOwned              bool                 `json:"require_corp_owned"`
	RequireScreenLock             bool                 `json:"require_screen_lock"`
	OsConstraints                 []OsConstraintsState `json:"os_constraints"`
}

type OsConstraintsState struct {
	MinimumVersion string `json:"minimum_version"`
	OsType         string `json:"os_type"`
}

type CustomState struct {
	Expr []ExprState `json:"expr"`
}

type ExprState struct {
	Description string `json:"description"`
	Expression  string `json:"expression"`
	Location    string `json:"location"`
	Title       string `json:"title"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
