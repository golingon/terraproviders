// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dataflowjob "github.com/golingon/terraproviders/google/4.59.0/dataflowjob"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataflowJob(name string, args DataflowJobArgs) *DataflowJob {
	return &DataflowJob{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataflowJob)(nil)

type DataflowJob struct {
	Name  string
	Args  DataflowJobArgs
	state *dataflowJobState
}

func (dj *DataflowJob) Type() string {
	return "google_dataflow_job"
}

func (dj *DataflowJob) LocalName() string {
	return dj.Name
}

func (dj *DataflowJob) Configuration() interface{} {
	return dj.Args
}

func (dj *DataflowJob) Attributes() dataflowJobAttributes {
	return dataflowJobAttributes{ref: terra.ReferenceResource(dj)}
}

func (dj *DataflowJob) ImportState(av io.Reader) error {
	dj.state = &dataflowJobState{}
	if err := json.NewDecoder(av).Decode(dj.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dj.Type(), dj.LocalName(), err)
	}
	return nil
}

func (dj *DataflowJob) State() (*dataflowJobState, bool) {
	return dj.state, dj.state != nil
}

func (dj *DataflowJob) StateMust() *dataflowJobState {
	if dj.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dj.Type(), dj.LocalName()))
	}
	return dj.state
}

func (dj *DataflowJob) DependOn() terra.Reference {
	return terra.ReferenceResource(dj)
}

type DataflowJobArgs struct {
	// AdditionalExperiments: set of string, optional
	AdditionalExperiments terra.SetValue[terra.StringValue] `hcl:"additional_experiments,attr"`
	// EnableStreamingEngine: bool, optional
	EnableStreamingEngine terra.BoolValue `hcl:"enable_streaming_engine,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpConfiguration: string, optional
	IpConfiguration terra.StringValue `hcl:"ip_configuration,attr"`
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MaxWorkers: number, optional
	MaxWorkers terra.NumberValue `hcl:"max_workers,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// OnDelete: string, optional
	OnDelete terra.StringValue `hcl:"on_delete,attr"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ServiceAccountEmail: string, optional
	ServiceAccountEmail terra.StringValue `hcl:"service_account_email,attr"`
	// SkipWaitOnJobTermination: bool, optional
	SkipWaitOnJobTermination terra.BoolValue `hcl:"skip_wait_on_job_termination,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// TempGcsLocation: string, required
	TempGcsLocation terra.StringValue `hcl:"temp_gcs_location,attr" validate:"required"`
	// TemplateGcsPath: string, required
	TemplateGcsPath terra.StringValue `hcl:"template_gcs_path,attr" validate:"required"`
	// TransformNameMapping: map of string, optional
	TransformNameMapping terra.MapValue[terra.StringValue] `hcl:"transform_name_mapping,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Timeouts: optional
	Timeouts *dataflowjob.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataflowJob depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataflowJobAttributes struct {
	ref terra.Reference
}

func (dj dataflowJobAttributes) AdditionalExperiments() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dj.ref.Append("additional_experiments"))
}

func (dj dataflowJobAttributes) EnableStreamingEngine() terra.BoolValue {
	return terra.ReferenceBool(dj.ref.Append("enable_streaming_engine"))
}

func (dj dataflowJobAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("id"))
}

func (dj dataflowJobAttributes) IpConfiguration() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("ip_configuration"))
}

func (dj dataflowJobAttributes) JobId() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("job_id"))
}

func (dj dataflowJobAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("kms_key_name"))
}

func (dj dataflowJobAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dj.ref.Append("labels"))
}

func (dj dataflowJobAttributes) MachineType() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("machine_type"))
}

func (dj dataflowJobAttributes) MaxWorkers() terra.NumberValue {
	return terra.ReferenceNumber(dj.ref.Append("max_workers"))
}

func (dj dataflowJobAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("name"))
}

func (dj dataflowJobAttributes) Network() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("network"))
}

func (dj dataflowJobAttributes) OnDelete() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("on_delete"))
}

func (dj dataflowJobAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dj.ref.Append("parameters"))
}

func (dj dataflowJobAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("project"))
}

func (dj dataflowJobAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("region"))
}

func (dj dataflowJobAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("service_account_email"))
}

func (dj dataflowJobAttributes) SkipWaitOnJobTermination() terra.BoolValue {
	return terra.ReferenceBool(dj.ref.Append("skip_wait_on_job_termination"))
}

func (dj dataflowJobAttributes) State() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("state"))
}

func (dj dataflowJobAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("subnetwork"))
}

func (dj dataflowJobAttributes) TempGcsLocation() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("temp_gcs_location"))
}

func (dj dataflowJobAttributes) TemplateGcsPath() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("template_gcs_path"))
}

func (dj dataflowJobAttributes) TransformNameMapping() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dj.ref.Append("transform_name_mapping"))
}

func (dj dataflowJobAttributes) Type() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("type"))
}

func (dj dataflowJobAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(dj.ref.Append("zone"))
}

func (dj dataflowJobAttributes) Timeouts() dataflowjob.TimeoutsAttributes {
	return terra.ReferenceSingle[dataflowjob.TimeoutsAttributes](dj.ref.Append("timeouts"))
}

type dataflowJobState struct {
	AdditionalExperiments    []string                   `json:"additional_experiments"`
	EnableStreamingEngine    bool                       `json:"enable_streaming_engine"`
	Id                       string                     `json:"id"`
	IpConfiguration          string                     `json:"ip_configuration"`
	JobId                    string                     `json:"job_id"`
	KmsKeyName               string                     `json:"kms_key_name"`
	Labels                   map[string]string          `json:"labels"`
	MachineType              string                     `json:"machine_type"`
	MaxWorkers               float64                    `json:"max_workers"`
	Name                     string                     `json:"name"`
	Network                  string                     `json:"network"`
	OnDelete                 string                     `json:"on_delete"`
	Parameters               map[string]string          `json:"parameters"`
	Project                  string                     `json:"project"`
	Region                   string                     `json:"region"`
	ServiceAccountEmail      string                     `json:"service_account_email"`
	SkipWaitOnJobTermination bool                       `json:"skip_wait_on_job_termination"`
	State                    string                     `json:"state"`
	Subnetwork               string                     `json:"subnetwork"`
	TempGcsLocation          string                     `json:"temp_gcs_location"`
	TemplateGcsPath          string                     `json:"template_gcs_path"`
	TransformNameMapping     map[string]string          `json:"transform_name_mapping"`
	Type                     string                     `json:"type"`
	Zone                     string                     `json:"zone"`
	Timeouts                 *dataflowjob.TimeoutsState `json:"timeouts"`
}
