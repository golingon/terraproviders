// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package gameservicesgameserverdeploymentrollout

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type GameServerConfigOverrides struct {
	// ConfigVersion: string, optional
	ConfigVersion terra.StringValue `hcl:"config_version,attr"`
	// RealmsSelector: optional
	RealmsSelector *RealmsSelector `hcl:"realms_selector,block"`
}

type RealmsSelector struct {
	// Realms: list of string, optional
	Realms terra.ListValue[terra.StringValue] `hcl:"realms,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type GameServerConfigOverridesAttributes struct {
	ref terra.Reference
}

func (gsco GameServerConfigOverridesAttributes) InternalRef() (terra.Reference, error) {
	return gsco.ref, nil
}

func (gsco GameServerConfigOverridesAttributes) InternalWithRef(ref terra.Reference) GameServerConfigOverridesAttributes {
	return GameServerConfigOverridesAttributes{ref: ref}
}

func (gsco GameServerConfigOverridesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gsco.ref.InternalTokens()
}

func (gsco GameServerConfigOverridesAttributes) ConfigVersion() terra.StringValue {
	return terra.ReferenceAsString(gsco.ref.Append("config_version"))
}

func (gsco GameServerConfigOverridesAttributes) RealmsSelector() terra.ListValue[RealmsSelectorAttributes] {
	return terra.ReferenceAsList[RealmsSelectorAttributes](gsco.ref.Append("realms_selector"))
}

type RealmsSelectorAttributes struct {
	ref terra.Reference
}

func (rs RealmsSelectorAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RealmsSelectorAttributes) InternalWithRef(ref terra.Reference) RealmsSelectorAttributes {
	return RealmsSelectorAttributes{ref: ref}
}

func (rs RealmsSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RealmsSelectorAttributes) Realms() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rs.ref.Append("realms"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type GameServerConfigOverridesState struct {
	ConfigVersion  string                `json:"config_version"`
	RealmsSelector []RealmsSelectorState `json:"realms_selector"`
}

type RealmsSelectorState struct {
	Realms []string `json:"realms"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
