// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	iamworkloadidentitypool "github.com/golingon/terraproviders/google/4.59.0/iamworkloadidentitypool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamWorkloadIdentityPool(name string, args IamWorkloadIdentityPoolArgs) *IamWorkloadIdentityPool {
	return &IamWorkloadIdentityPool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamWorkloadIdentityPool)(nil)

type IamWorkloadIdentityPool struct {
	Name  string
	Args  IamWorkloadIdentityPoolArgs
	state *iamWorkloadIdentityPoolState
}

func (iwip *IamWorkloadIdentityPool) Type() string {
	return "google_iam_workload_identity_pool"
}

func (iwip *IamWorkloadIdentityPool) LocalName() string {
	return iwip.Name
}

func (iwip *IamWorkloadIdentityPool) Configuration() interface{} {
	return iwip.Args
}

func (iwip *IamWorkloadIdentityPool) Attributes() iamWorkloadIdentityPoolAttributes {
	return iamWorkloadIdentityPoolAttributes{ref: terra.ReferenceResource(iwip)}
}

func (iwip *IamWorkloadIdentityPool) ImportState(av io.Reader) error {
	iwip.state = &iamWorkloadIdentityPoolState{}
	if err := json.NewDecoder(av).Decode(iwip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iwip.Type(), iwip.LocalName(), err)
	}
	return nil
}

func (iwip *IamWorkloadIdentityPool) State() (*iamWorkloadIdentityPoolState, bool) {
	return iwip.state, iwip.state != nil
}

func (iwip *IamWorkloadIdentityPool) StateMust() *iamWorkloadIdentityPoolState {
	if iwip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iwip.Type(), iwip.LocalName()))
	}
	return iwip.state
}

func (iwip *IamWorkloadIdentityPool) DependOn() terra.Reference {
	return terra.ReferenceResource(iwip)
}

type IamWorkloadIdentityPoolArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// WorkloadIdentityPoolId: string, required
	WorkloadIdentityPoolId terra.StringValue `hcl:"workload_identity_pool_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *iamworkloadidentitypool.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IamWorkloadIdentityPool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamWorkloadIdentityPoolAttributes struct {
	ref terra.Reference
}

func (iwip iamWorkloadIdentityPoolAttributes) Description() terra.StringValue {
	return terra.ReferenceString(iwip.ref.Append("description"))
}

func (iwip iamWorkloadIdentityPoolAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(iwip.ref.Append("disabled"))
}

func (iwip iamWorkloadIdentityPoolAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(iwip.ref.Append("display_name"))
}

func (iwip iamWorkloadIdentityPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iwip.ref.Append("id"))
}

func (iwip iamWorkloadIdentityPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(iwip.ref.Append("name"))
}

func (iwip iamWorkloadIdentityPoolAttributes) Project() terra.StringValue {
	return terra.ReferenceString(iwip.ref.Append("project"))
}

func (iwip iamWorkloadIdentityPoolAttributes) State() terra.StringValue {
	return terra.ReferenceString(iwip.ref.Append("state"))
}

func (iwip iamWorkloadIdentityPoolAttributes) WorkloadIdentityPoolId() terra.StringValue {
	return terra.ReferenceString(iwip.ref.Append("workload_identity_pool_id"))
}

func (iwip iamWorkloadIdentityPoolAttributes) Timeouts() iamworkloadidentitypool.TimeoutsAttributes {
	return terra.ReferenceSingle[iamworkloadidentitypool.TimeoutsAttributes](iwip.ref.Append("timeouts"))
}

type iamWorkloadIdentityPoolState struct {
	Description            string                                 `json:"description"`
	Disabled               bool                                   `json:"disabled"`
	DisplayName            string                                 `json:"display_name"`
	Id                     string                                 `json:"id"`
	Name                   string                                 `json:"name"`
	Project                string                                 `json:"project"`
	State                  string                                 `json:"state"`
	WorkloadIdentityPoolId string                                 `json:"workload_identity_pool_id"`
	Timeouts               *iamworkloadidentitypool.TimeoutsState `json:"timeouts"`
}
