// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dataplexlakeiammember "github.com/golingon/terraproviders/google/4.59.0/dataplexlakeiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataplexLakeIamMember(name string, args DataplexLakeIamMemberArgs) *DataplexLakeIamMember {
	return &DataplexLakeIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataplexLakeIamMember)(nil)

type DataplexLakeIamMember struct {
	Name  string
	Args  DataplexLakeIamMemberArgs
	state *dataplexLakeIamMemberState
}

func (dlim *DataplexLakeIamMember) Type() string {
	return "google_dataplex_lake_iam_member"
}

func (dlim *DataplexLakeIamMember) LocalName() string {
	return dlim.Name
}

func (dlim *DataplexLakeIamMember) Configuration() interface{} {
	return dlim.Args
}

func (dlim *DataplexLakeIamMember) Attributes() dataplexLakeIamMemberAttributes {
	return dataplexLakeIamMemberAttributes{ref: terra.ReferenceResource(dlim)}
}

func (dlim *DataplexLakeIamMember) ImportState(av io.Reader) error {
	dlim.state = &dataplexLakeIamMemberState{}
	if err := json.NewDecoder(av).Decode(dlim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dlim.Type(), dlim.LocalName(), err)
	}
	return nil
}

func (dlim *DataplexLakeIamMember) State() (*dataplexLakeIamMemberState, bool) {
	return dlim.state, dlim.state != nil
}

func (dlim *DataplexLakeIamMember) StateMust() *dataplexLakeIamMemberState {
	if dlim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dlim.Type(), dlim.LocalName()))
	}
	return dlim.state
}

func (dlim *DataplexLakeIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(dlim)
}

type DataplexLakeIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Lake: string, required
	Lake terra.StringValue `hcl:"lake,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *dataplexlakeiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataplexLakeIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataplexLakeIamMemberAttributes struct {
	ref terra.Reference
}

func (dlim dataplexLakeIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dlim.ref.Append("etag"))
}

func (dlim dataplexLakeIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dlim.ref.Append("id"))
}

func (dlim dataplexLakeIamMemberAttributes) Lake() terra.StringValue {
	return terra.ReferenceString(dlim.ref.Append("lake"))
}

func (dlim dataplexLakeIamMemberAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dlim.ref.Append("location"))
}

func (dlim dataplexLakeIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(dlim.ref.Append("member"))
}

func (dlim dataplexLakeIamMemberAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dlim.ref.Append("project"))
}

func (dlim dataplexLakeIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(dlim.ref.Append("role"))
}

func (dlim dataplexLakeIamMemberAttributes) Condition() terra.ListValue[dataplexlakeiammember.ConditionAttributes] {
	return terra.ReferenceList[dataplexlakeiammember.ConditionAttributes](dlim.ref.Append("condition"))
}

type dataplexLakeIamMemberState struct {
	Etag      string                                 `json:"etag"`
	Id        string                                 `json:"id"`
	Lake      string                                 `json:"lake"`
	Location  string                                 `json:"location"`
	Member    string                                 `json:"member"`
	Project   string                                 `json:"project"`
	Role      string                                 `json:"role"`
	Condition []dataplexlakeiammember.ConditionState `json:"condition"`
}
