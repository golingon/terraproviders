// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	tagstagvalueiammember "github.com/golingon/terraproviders/google/4.59.0/tagstagvalueiammember"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewTagsTagValueIamMember(name string, args TagsTagValueIamMemberArgs) *TagsTagValueIamMember {
	return &TagsTagValueIamMember{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TagsTagValueIamMember)(nil)

type TagsTagValueIamMember struct {
	Name  string
	Args  TagsTagValueIamMemberArgs
	state *tagsTagValueIamMemberState
}

func (ttvim *TagsTagValueIamMember) Type() string {
	return "google_tags_tag_value_iam_member"
}

func (ttvim *TagsTagValueIamMember) LocalName() string {
	return ttvim.Name
}

func (ttvim *TagsTagValueIamMember) Configuration() interface{} {
	return ttvim.Args
}

func (ttvim *TagsTagValueIamMember) Attributes() tagsTagValueIamMemberAttributes {
	return tagsTagValueIamMemberAttributes{ref: terra.ReferenceResource(ttvim)}
}

func (ttvim *TagsTagValueIamMember) ImportState(av io.Reader) error {
	ttvim.state = &tagsTagValueIamMemberState{}
	if err := json.NewDecoder(av).Decode(ttvim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ttvim.Type(), ttvim.LocalName(), err)
	}
	return nil
}

func (ttvim *TagsTagValueIamMember) State() (*tagsTagValueIamMemberState, bool) {
	return ttvim.state, ttvim.state != nil
}

func (ttvim *TagsTagValueIamMember) StateMust() *tagsTagValueIamMemberState {
	if ttvim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ttvim.Type(), ttvim.LocalName()))
	}
	return ttvim.state
}

func (ttvim *TagsTagValueIamMember) DependOn() terra.Reference {
	return terra.ReferenceResource(ttvim)
}

type TagsTagValueIamMemberArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// TagValue: string, required
	TagValue terra.StringValue `hcl:"tag_value,attr" validate:"required"`
	// Condition: optional
	Condition *tagstagvalueiammember.Condition `hcl:"condition,block"`
	// DependsOn contains resources that TagsTagValueIamMember depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type tagsTagValueIamMemberAttributes struct {
	ref terra.Reference
}

func (ttvim tagsTagValueIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ttvim.ref.Append("etag"))
}

func (ttvim tagsTagValueIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ttvim.ref.Append("id"))
}

func (ttvim tagsTagValueIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceString(ttvim.ref.Append("member"))
}

func (ttvim tagsTagValueIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceString(ttvim.ref.Append("role"))
}

func (ttvim tagsTagValueIamMemberAttributes) TagValue() terra.StringValue {
	return terra.ReferenceString(ttvim.ref.Append("tag_value"))
}

func (ttvim tagsTagValueIamMemberAttributes) Condition() terra.ListValue[tagstagvalueiammember.ConditionAttributes] {
	return terra.ReferenceList[tagstagvalueiammember.ConditionAttributes](ttvim.ref.Append("condition"))
}

type tagsTagValueIamMemberState struct {
	Etag      string                                 `json:"etag"`
	Id        string                                 `json:"id"`
	Member    string                                 `json:"member"`
	Role      string                                 `json:"role"`
	TagValue  string                                 `json:"tag_value"`
	Condition []tagstagvalueiammember.ConditionState `json:"condition"`
}
