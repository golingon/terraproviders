// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	iamworkforcepoolprovider "github.com/golingon/terraproviders/google/4.59.0/iamworkforcepoolprovider"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamWorkforcePoolProvider(name string, args IamWorkforcePoolProviderArgs) *IamWorkforcePoolProvider {
	return &IamWorkforcePoolProvider{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamWorkforcePoolProvider)(nil)

type IamWorkforcePoolProvider struct {
	Name  string
	Args  IamWorkforcePoolProviderArgs
	state *iamWorkforcePoolProviderState
}

func (iwpp *IamWorkforcePoolProvider) Type() string {
	return "google_iam_workforce_pool_provider"
}

func (iwpp *IamWorkforcePoolProvider) LocalName() string {
	return iwpp.Name
}

func (iwpp *IamWorkforcePoolProvider) Configuration() interface{} {
	return iwpp.Args
}

func (iwpp *IamWorkforcePoolProvider) Attributes() iamWorkforcePoolProviderAttributes {
	return iamWorkforcePoolProviderAttributes{ref: terra.ReferenceResource(iwpp)}
}

func (iwpp *IamWorkforcePoolProvider) ImportState(av io.Reader) error {
	iwpp.state = &iamWorkforcePoolProviderState{}
	if err := json.NewDecoder(av).Decode(iwpp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iwpp.Type(), iwpp.LocalName(), err)
	}
	return nil
}

func (iwpp *IamWorkforcePoolProvider) State() (*iamWorkforcePoolProviderState, bool) {
	return iwpp.state, iwpp.state != nil
}

func (iwpp *IamWorkforcePoolProvider) StateMust() *iamWorkforcePoolProviderState {
	if iwpp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iwpp.Type(), iwpp.LocalName()))
	}
	return iwpp.state
}

func (iwpp *IamWorkforcePoolProvider) DependOn() terra.Reference {
	return terra.ReferenceResource(iwpp)
}

type IamWorkforcePoolProviderArgs struct {
	// AttributeCondition: string, optional
	AttributeCondition terra.StringValue `hcl:"attribute_condition,attr"`
	// AttributeMapping: map of string, optional
	AttributeMapping terra.MapValue[terra.StringValue] `hcl:"attribute_mapping,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ProviderId: string, required
	ProviderId terra.StringValue `hcl:"provider_id,attr" validate:"required"`
	// WorkforcePoolId: string, required
	WorkforcePoolId terra.StringValue `hcl:"workforce_pool_id,attr" validate:"required"`
	// Oidc: optional
	Oidc *iamworkforcepoolprovider.Oidc `hcl:"oidc,block"`
	// Saml: optional
	Saml *iamworkforcepoolprovider.Saml `hcl:"saml,block"`
	// Timeouts: optional
	Timeouts *iamworkforcepoolprovider.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IamWorkforcePoolProvider depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamWorkforcePoolProviderAttributes struct {
	ref terra.Reference
}

func (iwpp iamWorkforcePoolProviderAttributes) AttributeCondition() terra.StringValue {
	return terra.ReferenceString(iwpp.ref.Append("attribute_condition"))
}

func (iwpp iamWorkforcePoolProviderAttributes) AttributeMapping() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](iwpp.ref.Append("attribute_mapping"))
}

func (iwpp iamWorkforcePoolProviderAttributes) Description() terra.StringValue {
	return terra.ReferenceString(iwpp.ref.Append("description"))
}

func (iwpp iamWorkforcePoolProviderAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(iwpp.ref.Append("disabled"))
}

func (iwpp iamWorkforcePoolProviderAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(iwpp.ref.Append("display_name"))
}

func (iwpp iamWorkforcePoolProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iwpp.ref.Append("id"))
}

func (iwpp iamWorkforcePoolProviderAttributes) Location() terra.StringValue {
	return terra.ReferenceString(iwpp.ref.Append("location"))
}

func (iwpp iamWorkforcePoolProviderAttributes) Name() terra.StringValue {
	return terra.ReferenceString(iwpp.ref.Append("name"))
}

func (iwpp iamWorkforcePoolProviderAttributes) ProviderId() terra.StringValue {
	return terra.ReferenceString(iwpp.ref.Append("provider_id"))
}

func (iwpp iamWorkforcePoolProviderAttributes) State() terra.StringValue {
	return terra.ReferenceString(iwpp.ref.Append("state"))
}

func (iwpp iamWorkforcePoolProviderAttributes) WorkforcePoolId() terra.StringValue {
	return terra.ReferenceString(iwpp.ref.Append("workforce_pool_id"))
}

func (iwpp iamWorkforcePoolProviderAttributes) Oidc() terra.ListValue[iamworkforcepoolprovider.OidcAttributes] {
	return terra.ReferenceList[iamworkforcepoolprovider.OidcAttributes](iwpp.ref.Append("oidc"))
}

func (iwpp iamWorkforcePoolProviderAttributes) Saml() terra.ListValue[iamworkforcepoolprovider.SamlAttributes] {
	return terra.ReferenceList[iamworkforcepoolprovider.SamlAttributes](iwpp.ref.Append("saml"))
}

func (iwpp iamWorkforcePoolProviderAttributes) Timeouts() iamworkforcepoolprovider.TimeoutsAttributes {
	return terra.ReferenceSingle[iamworkforcepoolprovider.TimeoutsAttributes](iwpp.ref.Append("timeouts"))
}

type iamWorkforcePoolProviderState struct {
	AttributeCondition string                                  `json:"attribute_condition"`
	AttributeMapping   map[string]string                       `json:"attribute_mapping"`
	Description        string                                  `json:"description"`
	Disabled           bool                                    `json:"disabled"`
	DisplayName        string                                  `json:"display_name"`
	Id                 string                                  `json:"id"`
	Location           string                                  `json:"location"`
	Name               string                                  `json:"name"`
	ProviderId         string                                  `json:"provider_id"`
	State              string                                  `json:"state"`
	WorkforcePoolId    string                                  `json:"workforce_pool_id"`
	Oidc               []iamworkforcepoolprovider.OidcState    `json:"oidc"`
	Saml               []iamworkforcepoolprovider.SamlState    `json:"saml"`
	Timeouts           *iamworkforcepoolprovider.TimeoutsState `json:"timeouts"`
}
