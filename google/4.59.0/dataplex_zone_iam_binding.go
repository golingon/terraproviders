// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	dataplexzoneiambinding "github.com/golingon/terraproviders/google/4.59.0/dataplexzoneiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataplexZoneIamBinding(name string, args DataplexZoneIamBindingArgs) *DataplexZoneIamBinding {
	return &DataplexZoneIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataplexZoneIamBinding)(nil)

type DataplexZoneIamBinding struct {
	Name  string
	Args  DataplexZoneIamBindingArgs
	state *dataplexZoneIamBindingState
}

func (dzib *DataplexZoneIamBinding) Type() string {
	return "google_dataplex_zone_iam_binding"
}

func (dzib *DataplexZoneIamBinding) LocalName() string {
	return dzib.Name
}

func (dzib *DataplexZoneIamBinding) Configuration() interface{} {
	return dzib.Args
}

func (dzib *DataplexZoneIamBinding) Attributes() dataplexZoneIamBindingAttributes {
	return dataplexZoneIamBindingAttributes{ref: terra.ReferenceResource(dzib)}
}

func (dzib *DataplexZoneIamBinding) ImportState(av io.Reader) error {
	dzib.state = &dataplexZoneIamBindingState{}
	if err := json.NewDecoder(av).Decode(dzib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dzib.Type(), dzib.LocalName(), err)
	}
	return nil
}

func (dzib *DataplexZoneIamBinding) State() (*dataplexZoneIamBindingState, bool) {
	return dzib.state, dzib.state != nil
}

func (dzib *DataplexZoneIamBinding) StateMust() *dataplexZoneIamBindingState {
	if dzib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dzib.Type(), dzib.LocalName()))
	}
	return dzib.state
}

func (dzib *DataplexZoneIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(dzib)
}

type DataplexZoneIamBindingArgs struct {
	// DataplexZone: string, required
	DataplexZone terra.StringValue `hcl:"dataplex_zone,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Lake: string, required
	Lake terra.StringValue `hcl:"lake,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *dataplexzoneiambinding.Condition `hcl:"condition,block"`
	// DependsOn contains resources that DataplexZoneIamBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataplexZoneIamBindingAttributes struct {
	ref terra.Reference
}

func (dzib dataplexZoneIamBindingAttributes) DataplexZone() terra.StringValue {
	return terra.ReferenceString(dzib.ref.Append("dataplex_zone"))
}

func (dzib dataplexZoneIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(dzib.ref.Append("etag"))
}

func (dzib dataplexZoneIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dzib.ref.Append("id"))
}

func (dzib dataplexZoneIamBindingAttributes) Lake() terra.StringValue {
	return terra.ReferenceString(dzib.ref.Append("lake"))
}

func (dzib dataplexZoneIamBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dzib.ref.Append("location"))
}

func (dzib dataplexZoneIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dzib.ref.Append("members"))
}

func (dzib dataplexZoneIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceString(dzib.ref.Append("project"))
}

func (dzib dataplexZoneIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceString(dzib.ref.Append("role"))
}

func (dzib dataplexZoneIamBindingAttributes) Condition() terra.ListValue[dataplexzoneiambinding.ConditionAttributes] {
	return terra.ReferenceList[dataplexzoneiambinding.ConditionAttributes](dzib.ref.Append("condition"))
}

type dataplexZoneIamBindingState struct {
	DataplexZone string                                  `json:"dataplex_zone"`
	Etag         string                                  `json:"etag"`
	Id           string                                  `json:"id"`
	Lake         string                                  `json:"lake"`
	Location     string                                  `json:"location"`
	Members      []string                                `json:"members"`
	Project      string                                  `json:"project"`
	Role         string                                  `json:"role"`
	Condition    []dataplexzoneiambinding.ConditionState `json:"condition"`
}
