// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	loggingfoldersink "github.com/golingon/terraproviders/google/4.59.0/loggingfoldersink"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLoggingFolderSink(name string, args LoggingFolderSinkArgs) *LoggingFolderSink {
	return &LoggingFolderSink{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LoggingFolderSink)(nil)

type LoggingFolderSink struct {
	Name  string
	Args  LoggingFolderSinkArgs
	state *loggingFolderSinkState
}

func (lfs *LoggingFolderSink) Type() string {
	return "google_logging_folder_sink"
}

func (lfs *LoggingFolderSink) LocalName() string {
	return lfs.Name
}

func (lfs *LoggingFolderSink) Configuration() interface{} {
	return lfs.Args
}

func (lfs *LoggingFolderSink) Attributes() loggingFolderSinkAttributes {
	return loggingFolderSinkAttributes{ref: terra.ReferenceResource(lfs)}
}

func (lfs *LoggingFolderSink) ImportState(av io.Reader) error {
	lfs.state = &loggingFolderSinkState{}
	if err := json.NewDecoder(av).Decode(lfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lfs.Type(), lfs.LocalName(), err)
	}
	return nil
}

func (lfs *LoggingFolderSink) State() (*loggingFolderSinkState, bool) {
	return lfs.state, lfs.state != nil
}

func (lfs *LoggingFolderSink) StateMust() *loggingFolderSinkState {
	if lfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lfs.Type(), lfs.LocalName()))
	}
	return lfs.state
}

func (lfs *LoggingFolderSink) DependOn() terra.Reference {
	return terra.ReferenceResource(lfs)
}

type LoggingFolderSinkArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// Filter: string, optional
	Filter terra.StringValue `hcl:"filter,attr"`
	// Folder: string, required
	Folder terra.StringValue `hcl:"folder,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IncludeChildren: bool, optional
	IncludeChildren terra.BoolValue `hcl:"include_children,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// BigqueryOptions: optional
	BigqueryOptions *loggingfoldersink.BigqueryOptions `hcl:"bigquery_options,block"`
	// Exclusions: min=0
	Exclusions []loggingfoldersink.Exclusions `hcl:"exclusions,block" validate:"min=0"`
	// DependsOn contains resources that LoggingFolderSink depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type loggingFolderSinkAttributes struct {
	ref terra.Reference
}

func (lfs loggingFolderSinkAttributes) Description() terra.StringValue {
	return terra.ReferenceString(lfs.ref.Append("description"))
}

func (lfs loggingFolderSinkAttributes) Destination() terra.StringValue {
	return terra.ReferenceString(lfs.ref.Append("destination"))
}

func (lfs loggingFolderSinkAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(lfs.ref.Append("disabled"))
}

func (lfs loggingFolderSinkAttributes) Filter() terra.StringValue {
	return terra.ReferenceString(lfs.ref.Append("filter"))
}

func (lfs loggingFolderSinkAttributes) Folder() terra.StringValue {
	return terra.ReferenceString(lfs.ref.Append("folder"))
}

func (lfs loggingFolderSinkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lfs.ref.Append("id"))
}

func (lfs loggingFolderSinkAttributes) IncludeChildren() terra.BoolValue {
	return terra.ReferenceBool(lfs.ref.Append("include_children"))
}

func (lfs loggingFolderSinkAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lfs.ref.Append("name"))
}

func (lfs loggingFolderSinkAttributes) WriterIdentity() terra.StringValue {
	return terra.ReferenceString(lfs.ref.Append("writer_identity"))
}

func (lfs loggingFolderSinkAttributes) BigqueryOptions() terra.ListValue[loggingfoldersink.BigqueryOptionsAttributes] {
	return terra.ReferenceList[loggingfoldersink.BigqueryOptionsAttributes](lfs.ref.Append("bigquery_options"))
}

func (lfs loggingFolderSinkAttributes) Exclusions() terra.ListValue[loggingfoldersink.ExclusionsAttributes] {
	return terra.ReferenceList[loggingfoldersink.ExclusionsAttributes](lfs.ref.Append("exclusions"))
}

type loggingFolderSinkState struct {
	Description     string                                   `json:"description"`
	Destination     string                                   `json:"destination"`
	Disabled        bool                                     `json:"disabled"`
	Filter          string                                   `json:"filter"`
	Folder          string                                   `json:"folder"`
	Id              string                                   `json:"id"`
	IncludeChildren bool                                     `json:"include_children"`
	Name            string                                   `json:"name"`
	WriterIdentity  string                                   `json:"writer_identity"`
	BigqueryOptions []loggingfoldersink.BigqueryOptionsState `json:"bigquery_options"`
	Exclusions      []loggingfoldersink.ExclusionsState      `json:"exclusions"`
}
