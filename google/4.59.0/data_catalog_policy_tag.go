// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	datacatalogpolicytag "github.com/golingon/terraproviders/google/4.59.0/datacatalogpolicytag"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataCatalogPolicyTag(name string, args DataCatalogPolicyTagArgs) *DataCatalogPolicyTag {
	return &DataCatalogPolicyTag{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataCatalogPolicyTag)(nil)

type DataCatalogPolicyTag struct {
	Name  string
	Args  DataCatalogPolicyTagArgs
	state *dataCatalogPolicyTagState
}

func (dcpt *DataCatalogPolicyTag) Type() string {
	return "google_data_catalog_policy_tag"
}

func (dcpt *DataCatalogPolicyTag) LocalName() string {
	return dcpt.Name
}

func (dcpt *DataCatalogPolicyTag) Configuration() interface{} {
	return dcpt.Args
}

func (dcpt *DataCatalogPolicyTag) Attributes() dataCatalogPolicyTagAttributes {
	return dataCatalogPolicyTagAttributes{ref: terra.ReferenceResource(dcpt)}
}

func (dcpt *DataCatalogPolicyTag) ImportState(av io.Reader) error {
	dcpt.state = &dataCatalogPolicyTagState{}
	if err := json.NewDecoder(av).Decode(dcpt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcpt.Type(), dcpt.LocalName(), err)
	}
	return nil
}

func (dcpt *DataCatalogPolicyTag) State() (*dataCatalogPolicyTagState, bool) {
	return dcpt.state, dcpt.state != nil
}

func (dcpt *DataCatalogPolicyTag) StateMust() *dataCatalogPolicyTagState {
	if dcpt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcpt.Type(), dcpt.LocalName()))
	}
	return dcpt.state
}

func (dcpt *DataCatalogPolicyTag) DependOn() terra.Reference {
	return terra.ReferenceResource(dcpt)
}

type DataCatalogPolicyTagArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ParentPolicyTag: string, optional
	ParentPolicyTag terra.StringValue `hcl:"parent_policy_tag,attr"`
	// Taxonomy: string, required
	Taxonomy terra.StringValue `hcl:"taxonomy,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *datacatalogpolicytag.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataCatalogPolicyTag depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataCatalogPolicyTagAttributes struct {
	ref terra.Reference
}

func (dcpt dataCatalogPolicyTagAttributes) ChildPolicyTags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dcpt.ref.Append("child_policy_tags"))
}

func (dcpt dataCatalogPolicyTagAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dcpt.ref.Append("description"))
}

func (dcpt dataCatalogPolicyTagAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(dcpt.ref.Append("display_name"))
}

func (dcpt dataCatalogPolicyTagAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dcpt.ref.Append("id"))
}

func (dcpt dataCatalogPolicyTagAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dcpt.ref.Append("name"))
}

func (dcpt dataCatalogPolicyTagAttributes) ParentPolicyTag() terra.StringValue {
	return terra.ReferenceString(dcpt.ref.Append("parent_policy_tag"))
}

func (dcpt dataCatalogPolicyTagAttributes) Taxonomy() terra.StringValue {
	return terra.ReferenceString(dcpt.ref.Append("taxonomy"))
}

func (dcpt dataCatalogPolicyTagAttributes) Timeouts() datacatalogpolicytag.TimeoutsAttributes {
	return terra.ReferenceSingle[datacatalogpolicytag.TimeoutsAttributes](dcpt.ref.Append("timeouts"))
}

type dataCatalogPolicyTagState struct {
	ChildPolicyTags []string                            `json:"child_policy_tags"`
	Description     string                              `json:"description"`
	DisplayName     string                              `json:"display_name"`
	Id              string                              `json:"id"`
	Name            string                              `json:"name"`
	ParentPolicyTag string                              `json:"parent_policy_tag"`
	Taxonomy        string                              `json:"taxonomy"`
	Timeouts        *datacatalogpolicytag.TimeoutsState `json:"timeouts"`
}
