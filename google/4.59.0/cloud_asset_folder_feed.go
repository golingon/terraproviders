// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	cloudassetfolderfeed "github.com/golingon/terraproviders/google/4.59.0/cloudassetfolderfeed"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudAssetFolderFeed(name string, args CloudAssetFolderFeedArgs) *CloudAssetFolderFeed {
	return &CloudAssetFolderFeed{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudAssetFolderFeed)(nil)

type CloudAssetFolderFeed struct {
	Name  string
	Args  CloudAssetFolderFeedArgs
	state *cloudAssetFolderFeedState
}

func (caff *CloudAssetFolderFeed) Type() string {
	return "google_cloud_asset_folder_feed"
}

func (caff *CloudAssetFolderFeed) LocalName() string {
	return caff.Name
}

func (caff *CloudAssetFolderFeed) Configuration() interface{} {
	return caff.Args
}

func (caff *CloudAssetFolderFeed) Attributes() cloudAssetFolderFeedAttributes {
	return cloudAssetFolderFeedAttributes{ref: terra.ReferenceResource(caff)}
}

func (caff *CloudAssetFolderFeed) ImportState(av io.Reader) error {
	caff.state = &cloudAssetFolderFeedState{}
	if err := json.NewDecoder(av).Decode(caff.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", caff.Type(), caff.LocalName(), err)
	}
	return nil
}

func (caff *CloudAssetFolderFeed) State() (*cloudAssetFolderFeedState, bool) {
	return caff.state, caff.state != nil
}

func (caff *CloudAssetFolderFeed) StateMust() *cloudAssetFolderFeedState {
	if caff.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", caff.Type(), caff.LocalName()))
	}
	return caff.state
}

func (caff *CloudAssetFolderFeed) DependOn() terra.Reference {
	return terra.ReferenceResource(caff)
}

type CloudAssetFolderFeedArgs struct {
	// AssetNames: list of string, optional
	AssetNames terra.ListValue[terra.StringValue] `hcl:"asset_names,attr"`
	// AssetTypes: list of string, optional
	AssetTypes terra.ListValue[terra.StringValue] `hcl:"asset_types,attr"`
	// BillingProject: string, required
	BillingProject terra.StringValue `hcl:"billing_project,attr" validate:"required"`
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// FeedId: string, required
	FeedId terra.StringValue `hcl:"feed_id,attr" validate:"required"`
	// Folder: string, required
	Folder terra.StringValue `hcl:"folder,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Condition: optional
	Condition *cloudassetfolderfeed.Condition `hcl:"condition,block"`
	// FeedOutputConfig: required
	FeedOutputConfig *cloudassetfolderfeed.FeedOutputConfig `hcl:"feed_output_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *cloudassetfolderfeed.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CloudAssetFolderFeed depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudAssetFolderFeedAttributes struct {
	ref terra.Reference
}

func (caff cloudAssetFolderFeedAttributes) AssetNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](caff.ref.Append("asset_names"))
}

func (caff cloudAssetFolderFeedAttributes) AssetTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](caff.ref.Append("asset_types"))
}

func (caff cloudAssetFolderFeedAttributes) BillingProject() terra.StringValue {
	return terra.ReferenceString(caff.ref.Append("billing_project"))
}

func (caff cloudAssetFolderFeedAttributes) ContentType() terra.StringValue {
	return terra.ReferenceString(caff.ref.Append("content_type"))
}

func (caff cloudAssetFolderFeedAttributes) FeedId() terra.StringValue {
	return terra.ReferenceString(caff.ref.Append("feed_id"))
}

func (caff cloudAssetFolderFeedAttributes) Folder() terra.StringValue {
	return terra.ReferenceString(caff.ref.Append("folder"))
}

func (caff cloudAssetFolderFeedAttributes) FolderId() terra.StringValue {
	return terra.ReferenceString(caff.ref.Append("folder_id"))
}

func (caff cloudAssetFolderFeedAttributes) Id() terra.StringValue {
	return terra.ReferenceString(caff.ref.Append("id"))
}

func (caff cloudAssetFolderFeedAttributes) Name() terra.StringValue {
	return terra.ReferenceString(caff.ref.Append("name"))
}

func (caff cloudAssetFolderFeedAttributes) Condition() terra.ListValue[cloudassetfolderfeed.ConditionAttributes] {
	return terra.ReferenceList[cloudassetfolderfeed.ConditionAttributes](caff.ref.Append("condition"))
}

func (caff cloudAssetFolderFeedAttributes) FeedOutputConfig() terra.ListValue[cloudassetfolderfeed.FeedOutputConfigAttributes] {
	return terra.ReferenceList[cloudassetfolderfeed.FeedOutputConfigAttributes](caff.ref.Append("feed_output_config"))
}

func (caff cloudAssetFolderFeedAttributes) Timeouts() cloudassetfolderfeed.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudassetfolderfeed.TimeoutsAttributes](caff.ref.Append("timeouts"))
}

type cloudAssetFolderFeedState struct {
	AssetNames       []string                                     `json:"asset_names"`
	AssetTypes       []string                                     `json:"asset_types"`
	BillingProject   string                                       `json:"billing_project"`
	ContentType      string                                       `json:"content_type"`
	FeedId           string                                       `json:"feed_id"`
	Folder           string                                       `json:"folder"`
	FolderId         string                                       `json:"folder_id"`
	Id               string                                       `json:"id"`
	Name             string                                       `json:"name"`
	Condition        []cloudassetfolderfeed.ConditionState        `json:"condition"`
	FeedOutputConfig []cloudassetfolderfeed.FeedOutputConfigState `json:"feed_output_config"`
	Timeouts         *cloudassetfolderfeed.TimeoutsState          `json:"timeouts"`
}
