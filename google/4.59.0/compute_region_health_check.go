// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeregionhealthcheck "github.com/golingon/terraproviders/google/4.59.0/computeregionhealthcheck"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeRegionHealthCheck(name string, args ComputeRegionHealthCheckArgs) *ComputeRegionHealthCheck {
	return &ComputeRegionHealthCheck{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeRegionHealthCheck)(nil)

type ComputeRegionHealthCheck struct {
	Name  string
	Args  ComputeRegionHealthCheckArgs
	state *computeRegionHealthCheckState
}

func (crhc *ComputeRegionHealthCheck) Type() string {
	return "google_compute_region_health_check"
}

func (crhc *ComputeRegionHealthCheck) LocalName() string {
	return crhc.Name
}

func (crhc *ComputeRegionHealthCheck) Configuration() interface{} {
	return crhc.Args
}

func (crhc *ComputeRegionHealthCheck) Attributes() computeRegionHealthCheckAttributes {
	return computeRegionHealthCheckAttributes{ref: terra.ReferenceResource(crhc)}
}

func (crhc *ComputeRegionHealthCheck) ImportState(av io.Reader) error {
	crhc.state = &computeRegionHealthCheckState{}
	if err := json.NewDecoder(av).Decode(crhc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crhc.Type(), crhc.LocalName(), err)
	}
	return nil
}

func (crhc *ComputeRegionHealthCheck) State() (*computeRegionHealthCheckState, bool) {
	return crhc.state, crhc.state != nil
}

func (crhc *ComputeRegionHealthCheck) StateMust() *computeRegionHealthCheckState {
	if crhc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crhc.Type(), crhc.LocalName()))
	}
	return crhc.state
}

func (crhc *ComputeRegionHealthCheck) DependOn() terra.Reference {
	return terra.ReferenceResource(crhc)
}

type ComputeRegionHealthCheckArgs struct {
	// CheckIntervalSec: number, optional
	CheckIntervalSec terra.NumberValue `hcl:"check_interval_sec,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// HealthyThreshold: number, optional
	HealthyThreshold terra.NumberValue `hcl:"healthy_threshold,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// TimeoutSec: number, optional
	TimeoutSec terra.NumberValue `hcl:"timeout_sec,attr"`
	// UnhealthyThreshold: number, optional
	UnhealthyThreshold terra.NumberValue `hcl:"unhealthy_threshold,attr"`
	// GrpcHealthCheck: optional
	GrpcHealthCheck *computeregionhealthcheck.GrpcHealthCheck `hcl:"grpc_health_check,block"`
	// Http2HealthCheck: optional
	Http2HealthCheck *computeregionhealthcheck.Http2HealthCheck `hcl:"http2_health_check,block"`
	// HttpHealthCheck: optional
	HttpHealthCheck *computeregionhealthcheck.HttpHealthCheck `hcl:"http_health_check,block"`
	// HttpsHealthCheck: optional
	HttpsHealthCheck *computeregionhealthcheck.HttpsHealthCheck `hcl:"https_health_check,block"`
	// LogConfig: optional
	LogConfig *computeregionhealthcheck.LogConfig `hcl:"log_config,block"`
	// SslHealthCheck: optional
	SslHealthCheck *computeregionhealthcheck.SslHealthCheck `hcl:"ssl_health_check,block"`
	// TcpHealthCheck: optional
	TcpHealthCheck *computeregionhealthcheck.TcpHealthCheck `hcl:"tcp_health_check,block"`
	// Timeouts: optional
	Timeouts *computeregionhealthcheck.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeRegionHealthCheck depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeRegionHealthCheckAttributes struct {
	ref terra.Reference
}

func (crhc computeRegionHealthCheckAttributes) CheckIntervalSec() terra.NumberValue {
	return terra.ReferenceNumber(crhc.ref.Append("check_interval_sec"))
}

func (crhc computeRegionHealthCheckAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(crhc.ref.Append("creation_timestamp"))
}

func (crhc computeRegionHealthCheckAttributes) Description() terra.StringValue {
	return terra.ReferenceString(crhc.ref.Append("description"))
}

func (crhc computeRegionHealthCheckAttributes) HealthyThreshold() terra.NumberValue {
	return terra.ReferenceNumber(crhc.ref.Append("healthy_threshold"))
}

func (crhc computeRegionHealthCheckAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crhc.ref.Append("id"))
}

func (crhc computeRegionHealthCheckAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crhc.ref.Append("name"))
}

func (crhc computeRegionHealthCheckAttributes) Project() terra.StringValue {
	return terra.ReferenceString(crhc.ref.Append("project"))
}

func (crhc computeRegionHealthCheckAttributes) Region() terra.StringValue {
	return terra.ReferenceString(crhc.ref.Append("region"))
}

func (crhc computeRegionHealthCheckAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceString(crhc.ref.Append("self_link"))
}

func (crhc computeRegionHealthCheckAttributes) TimeoutSec() terra.NumberValue {
	return terra.ReferenceNumber(crhc.ref.Append("timeout_sec"))
}

func (crhc computeRegionHealthCheckAttributes) Type() terra.StringValue {
	return terra.ReferenceString(crhc.ref.Append("type"))
}

func (crhc computeRegionHealthCheckAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceNumber(crhc.ref.Append("unhealthy_threshold"))
}

func (crhc computeRegionHealthCheckAttributes) GrpcHealthCheck() terra.ListValue[computeregionhealthcheck.GrpcHealthCheckAttributes] {
	return terra.ReferenceList[computeregionhealthcheck.GrpcHealthCheckAttributes](crhc.ref.Append("grpc_health_check"))
}

func (crhc computeRegionHealthCheckAttributes) Http2HealthCheck() terra.ListValue[computeregionhealthcheck.Http2HealthCheckAttributes] {
	return terra.ReferenceList[computeregionhealthcheck.Http2HealthCheckAttributes](crhc.ref.Append("http2_health_check"))
}

func (crhc computeRegionHealthCheckAttributes) HttpHealthCheck() terra.ListValue[computeregionhealthcheck.HttpHealthCheckAttributes] {
	return terra.ReferenceList[computeregionhealthcheck.HttpHealthCheckAttributes](crhc.ref.Append("http_health_check"))
}

func (crhc computeRegionHealthCheckAttributes) HttpsHealthCheck() terra.ListValue[computeregionhealthcheck.HttpsHealthCheckAttributes] {
	return terra.ReferenceList[computeregionhealthcheck.HttpsHealthCheckAttributes](crhc.ref.Append("https_health_check"))
}

func (crhc computeRegionHealthCheckAttributes) LogConfig() terra.ListValue[computeregionhealthcheck.LogConfigAttributes] {
	return terra.ReferenceList[computeregionhealthcheck.LogConfigAttributes](crhc.ref.Append("log_config"))
}

func (crhc computeRegionHealthCheckAttributes) SslHealthCheck() terra.ListValue[computeregionhealthcheck.SslHealthCheckAttributes] {
	return terra.ReferenceList[computeregionhealthcheck.SslHealthCheckAttributes](crhc.ref.Append("ssl_health_check"))
}

func (crhc computeRegionHealthCheckAttributes) TcpHealthCheck() terra.ListValue[computeregionhealthcheck.TcpHealthCheckAttributes] {
	return terra.ReferenceList[computeregionhealthcheck.TcpHealthCheckAttributes](crhc.ref.Append("tcp_health_check"))
}

func (crhc computeRegionHealthCheckAttributes) Timeouts() computeregionhealthcheck.TimeoutsAttributes {
	return terra.ReferenceSingle[computeregionhealthcheck.TimeoutsAttributes](crhc.ref.Append("timeouts"))
}

type computeRegionHealthCheckState struct {
	CheckIntervalSec   float64                                          `json:"check_interval_sec"`
	CreationTimestamp  string                                           `json:"creation_timestamp"`
	Description        string                                           `json:"description"`
	HealthyThreshold   float64                                          `json:"healthy_threshold"`
	Id                 string                                           `json:"id"`
	Name               string                                           `json:"name"`
	Project            string                                           `json:"project"`
	Region             string                                           `json:"region"`
	SelfLink           string                                           `json:"self_link"`
	TimeoutSec         float64                                          `json:"timeout_sec"`
	Type               string                                           `json:"type"`
	UnhealthyThreshold float64                                          `json:"unhealthy_threshold"`
	GrpcHealthCheck    []computeregionhealthcheck.GrpcHealthCheckState  `json:"grpc_health_check"`
	Http2HealthCheck   []computeregionhealthcheck.Http2HealthCheckState `json:"http2_health_check"`
	HttpHealthCheck    []computeregionhealthcheck.HttpHealthCheckState  `json:"http_health_check"`
	HttpsHealthCheck   []computeregionhealthcheck.HttpsHealthCheckState `json:"https_health_check"`
	LogConfig          []computeregionhealthcheck.LogConfigState        `json:"log_config"`
	SslHealthCheck     []computeregionhealthcheck.SslHealthCheckState   `json:"ssl_health_check"`
	TcpHealthCheck     []computeregionhealthcheck.TcpHealthCheckState   `json:"tcp_health_check"`
	Timeouts           *computeregionhealthcheck.TimeoutsState          `json:"timeouts"`
}
