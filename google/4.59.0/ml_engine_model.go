// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	mlenginemodel "github.com/golingon/terraproviders/google/4.59.0/mlenginemodel"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMlEngineModel(name string, args MlEngineModelArgs) *MlEngineModel {
	return &MlEngineModel{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MlEngineModel)(nil)

type MlEngineModel struct {
	Name  string
	Args  MlEngineModelArgs
	state *mlEngineModelState
}

func (mem *MlEngineModel) Type() string {
	return "google_ml_engine_model"
}

func (mem *MlEngineModel) LocalName() string {
	return mem.Name
}

func (mem *MlEngineModel) Configuration() interface{} {
	return mem.Args
}

func (mem *MlEngineModel) Attributes() mlEngineModelAttributes {
	return mlEngineModelAttributes{ref: terra.ReferenceResource(mem)}
}

func (mem *MlEngineModel) ImportState(av io.Reader) error {
	mem.state = &mlEngineModelState{}
	if err := json.NewDecoder(av).Decode(mem.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mem.Type(), mem.LocalName(), err)
	}
	return nil
}

func (mem *MlEngineModel) State() (*mlEngineModelState, bool) {
	return mem.state, mem.state != nil
}

func (mem *MlEngineModel) StateMust() *mlEngineModelState {
	if mem.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mem.Type(), mem.LocalName()))
	}
	return mem.state
}

func (mem *MlEngineModel) DependOn() terra.Reference {
	return terra.ReferenceResource(mem)
}

type MlEngineModelArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OnlinePredictionConsoleLogging: bool, optional
	OnlinePredictionConsoleLogging terra.BoolValue `hcl:"online_prediction_console_logging,attr"`
	// OnlinePredictionLogging: bool, optional
	OnlinePredictionLogging terra.BoolValue `hcl:"online_prediction_logging,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Regions: list of string, optional
	Regions terra.ListValue[terra.StringValue] `hcl:"regions,attr"`
	// DefaultVersion: optional
	DefaultVersion *mlenginemodel.DefaultVersion `hcl:"default_version,block"`
	// Timeouts: optional
	Timeouts *mlenginemodel.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MlEngineModel depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mlEngineModelAttributes struct {
	ref terra.Reference
}

func (mem mlEngineModelAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mem.ref.Append("description"))
}

func (mem mlEngineModelAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mem.ref.Append("id"))
}

func (mem mlEngineModelAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mem.ref.Append("labels"))
}

func (mem mlEngineModelAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mem.ref.Append("name"))
}

func (mem mlEngineModelAttributes) OnlinePredictionConsoleLogging() terra.BoolValue {
	return terra.ReferenceBool(mem.ref.Append("online_prediction_console_logging"))
}

func (mem mlEngineModelAttributes) OnlinePredictionLogging() terra.BoolValue {
	return terra.ReferenceBool(mem.ref.Append("online_prediction_logging"))
}

func (mem mlEngineModelAttributes) Project() terra.StringValue {
	return terra.ReferenceString(mem.ref.Append("project"))
}

func (mem mlEngineModelAttributes) Regions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](mem.ref.Append("regions"))
}

func (mem mlEngineModelAttributes) DefaultVersion() terra.ListValue[mlenginemodel.DefaultVersionAttributes] {
	return terra.ReferenceList[mlenginemodel.DefaultVersionAttributes](mem.ref.Append("default_version"))
}

func (mem mlEngineModelAttributes) Timeouts() mlenginemodel.TimeoutsAttributes {
	return terra.ReferenceSingle[mlenginemodel.TimeoutsAttributes](mem.ref.Append("timeouts"))
}

type mlEngineModelState struct {
	Description                    string                              `json:"description"`
	Id                             string                              `json:"id"`
	Labels                         map[string]string                   `json:"labels"`
	Name                           string                              `json:"name"`
	OnlinePredictionConsoleLogging bool                                `json:"online_prediction_console_logging"`
	OnlinePredictionLogging        bool                                `json:"online_prediction_logging"`
	Project                        string                              `json:"project"`
	Regions                        []string                            `json:"regions"`
	DefaultVersion                 []mlenginemodel.DefaultVersionState `json:"default_version"`
	Timeouts                       *mlenginemodel.TimeoutsState        `json:"timeouts"`
}
