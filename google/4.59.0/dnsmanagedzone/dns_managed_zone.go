// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dnsmanagedzone

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CloudLoggingConfig struct {
	// EnableLogging: bool, required
	EnableLogging terra.BoolValue `hcl:"enable_logging,attr" validate:"required"`
}

type DnssecConfig struct {
	// Kind: string, optional
	Kind terra.StringValue `hcl:"kind,attr"`
	// NonExistence: string, optional
	NonExistence terra.StringValue `hcl:"non_existence,attr"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// DefaultKeySpecs: min=0
	DefaultKeySpecs []DefaultKeySpecs `hcl:"default_key_specs,block" validate:"min=0"`
}

type DefaultKeySpecs struct {
	// Algorithm: string, optional
	Algorithm terra.StringValue `hcl:"algorithm,attr"`
	// KeyLength: number, optional
	KeyLength terra.NumberValue `hcl:"key_length,attr"`
	// KeyType: string, optional
	KeyType terra.StringValue `hcl:"key_type,attr"`
	// Kind: string, optional
	Kind terra.StringValue `hcl:"kind,attr"`
}

type ForwardingConfig struct {
	// TargetNameServers: min=1
	TargetNameServers []TargetNameServers `hcl:"target_name_servers,block" validate:"min=1"`
}

type TargetNameServers struct {
	// ForwardingPath: string, optional
	ForwardingPath terra.StringValue `hcl:"forwarding_path,attr"`
	// Ipv4Address: string, required
	Ipv4Address terra.StringValue `hcl:"ipv4_address,attr" validate:"required"`
}

type PeeringConfig struct {
	// TargetNetwork: required
	TargetNetwork *TargetNetwork `hcl:"target_network,block" validate:"required"`
}

type TargetNetwork struct {
	// NetworkUrl: string, required
	NetworkUrl terra.StringValue `hcl:"network_url,attr" validate:"required"`
}

type PrivateVisibilityConfig struct {
	// GkeClusters: min=0
	GkeClusters []GkeClusters `hcl:"gke_clusters,block" validate:"min=0"`
	// Networks: min=1
	Networks []Networks `hcl:"networks,block" validate:"min=1"`
}

type GkeClusters struct {
	// GkeClusterName: string, required
	GkeClusterName terra.StringValue `hcl:"gke_cluster_name,attr" validate:"required"`
}

type Networks struct {
	// NetworkUrl: string, required
	NetworkUrl terra.StringValue `hcl:"network_url,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CloudLoggingConfigAttributes struct {
	ref terra.Reference
}

func (clc CloudLoggingConfigAttributes) InternalRef() terra.Reference {
	return clc.ref
}

func (clc CloudLoggingConfigAttributes) InternalWithRef(ref terra.Reference) CloudLoggingConfigAttributes {
	return CloudLoggingConfigAttributes{ref: ref}
}

func (clc CloudLoggingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return clc.ref.InternalTokens()
}

func (clc CloudLoggingConfigAttributes) EnableLogging() terra.BoolValue {
	return terra.ReferenceBool(clc.ref.Append("enable_logging"))
}

type DnssecConfigAttributes struct {
	ref terra.Reference
}

func (dc DnssecConfigAttributes) InternalRef() terra.Reference {
	return dc.ref
}

func (dc DnssecConfigAttributes) InternalWithRef(ref terra.Reference) DnssecConfigAttributes {
	return DnssecConfigAttributes{ref: ref}
}

func (dc DnssecConfigAttributes) InternalTokens() hclwrite.Tokens {
	return dc.ref.InternalTokens()
}

func (dc DnssecConfigAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("kind"))
}

func (dc DnssecConfigAttributes) NonExistence() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("non_existence"))
}

func (dc DnssecConfigAttributes) State() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("state"))
}

func (dc DnssecConfigAttributes) DefaultKeySpecs() terra.ListValue[DefaultKeySpecsAttributes] {
	return terra.ReferenceList[DefaultKeySpecsAttributes](dc.ref.Append("default_key_specs"))
}

type DefaultKeySpecsAttributes struct {
	ref terra.Reference
}

func (dks DefaultKeySpecsAttributes) InternalRef() terra.Reference {
	return dks.ref
}

func (dks DefaultKeySpecsAttributes) InternalWithRef(ref terra.Reference) DefaultKeySpecsAttributes {
	return DefaultKeySpecsAttributes{ref: ref}
}

func (dks DefaultKeySpecsAttributes) InternalTokens() hclwrite.Tokens {
	return dks.ref.InternalTokens()
}

func (dks DefaultKeySpecsAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceString(dks.ref.Append("algorithm"))
}

func (dks DefaultKeySpecsAttributes) KeyLength() terra.NumberValue {
	return terra.ReferenceNumber(dks.ref.Append("key_length"))
}

func (dks DefaultKeySpecsAttributes) KeyType() terra.StringValue {
	return terra.ReferenceString(dks.ref.Append("key_type"))
}

func (dks DefaultKeySpecsAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(dks.ref.Append("kind"))
}

type ForwardingConfigAttributes struct {
	ref terra.Reference
}

func (fc ForwardingConfigAttributes) InternalRef() terra.Reference {
	return fc.ref
}

func (fc ForwardingConfigAttributes) InternalWithRef(ref terra.Reference) ForwardingConfigAttributes {
	return ForwardingConfigAttributes{ref: ref}
}

func (fc ForwardingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return fc.ref.InternalTokens()
}

func (fc ForwardingConfigAttributes) TargetNameServers() terra.SetValue[TargetNameServersAttributes] {
	return terra.ReferenceSet[TargetNameServersAttributes](fc.ref.Append("target_name_servers"))
}

type TargetNameServersAttributes struct {
	ref terra.Reference
}

func (tns TargetNameServersAttributes) InternalRef() terra.Reference {
	return tns.ref
}

func (tns TargetNameServersAttributes) InternalWithRef(ref terra.Reference) TargetNameServersAttributes {
	return TargetNameServersAttributes{ref: ref}
}

func (tns TargetNameServersAttributes) InternalTokens() hclwrite.Tokens {
	return tns.ref.InternalTokens()
}

func (tns TargetNameServersAttributes) ForwardingPath() terra.StringValue {
	return terra.ReferenceString(tns.ref.Append("forwarding_path"))
}

func (tns TargetNameServersAttributes) Ipv4Address() terra.StringValue {
	return terra.ReferenceString(tns.ref.Append("ipv4_address"))
}

type PeeringConfigAttributes struct {
	ref terra.Reference
}

func (pc PeeringConfigAttributes) InternalRef() terra.Reference {
	return pc.ref
}

func (pc PeeringConfigAttributes) InternalWithRef(ref terra.Reference) PeeringConfigAttributes {
	return PeeringConfigAttributes{ref: ref}
}

func (pc PeeringConfigAttributes) InternalTokens() hclwrite.Tokens {
	return pc.ref.InternalTokens()
}

func (pc PeeringConfigAttributes) TargetNetwork() terra.ListValue[TargetNetworkAttributes] {
	return terra.ReferenceList[TargetNetworkAttributes](pc.ref.Append("target_network"))
}

type TargetNetworkAttributes struct {
	ref terra.Reference
}

func (tn TargetNetworkAttributes) InternalRef() terra.Reference {
	return tn.ref
}

func (tn TargetNetworkAttributes) InternalWithRef(ref terra.Reference) TargetNetworkAttributes {
	return TargetNetworkAttributes{ref: ref}
}

func (tn TargetNetworkAttributes) InternalTokens() hclwrite.Tokens {
	return tn.ref.InternalTokens()
}

func (tn TargetNetworkAttributes) NetworkUrl() terra.StringValue {
	return terra.ReferenceString(tn.ref.Append("network_url"))
}

type PrivateVisibilityConfigAttributes struct {
	ref terra.Reference
}

func (pvc PrivateVisibilityConfigAttributes) InternalRef() terra.Reference {
	return pvc.ref
}

func (pvc PrivateVisibilityConfigAttributes) InternalWithRef(ref terra.Reference) PrivateVisibilityConfigAttributes {
	return PrivateVisibilityConfigAttributes{ref: ref}
}

func (pvc PrivateVisibilityConfigAttributes) InternalTokens() hclwrite.Tokens {
	return pvc.ref.InternalTokens()
}

func (pvc PrivateVisibilityConfigAttributes) GkeClusters() terra.ListValue[GkeClustersAttributes] {
	return terra.ReferenceList[GkeClustersAttributes](pvc.ref.Append("gke_clusters"))
}

func (pvc PrivateVisibilityConfigAttributes) Networks() terra.SetValue[NetworksAttributes] {
	return terra.ReferenceSet[NetworksAttributes](pvc.ref.Append("networks"))
}

type GkeClustersAttributes struct {
	ref terra.Reference
}

func (gc GkeClustersAttributes) InternalRef() terra.Reference {
	return gc.ref
}

func (gc GkeClustersAttributes) InternalWithRef(ref terra.Reference) GkeClustersAttributes {
	return GkeClustersAttributes{ref: ref}
}

func (gc GkeClustersAttributes) InternalTokens() hclwrite.Tokens {
	return gc.ref.InternalTokens()
}

func (gc GkeClustersAttributes) GkeClusterName() terra.StringValue {
	return terra.ReferenceString(gc.ref.Append("gke_cluster_name"))
}

type NetworksAttributes struct {
	ref terra.Reference
}

func (n NetworksAttributes) InternalRef() terra.Reference {
	return n.ref
}

func (n NetworksAttributes) InternalWithRef(ref terra.Reference) NetworksAttributes {
	return NetworksAttributes{ref: ref}
}

func (n NetworksAttributes) InternalTokens() hclwrite.Tokens {
	return n.ref.InternalTokens()
}

func (n NetworksAttributes) NetworkUrl() terra.StringValue {
	return terra.ReferenceString(n.ref.Append("network_url"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type CloudLoggingConfigState struct {
	EnableLogging bool `json:"enable_logging"`
}

type DnssecConfigState struct {
	Kind            string                 `json:"kind"`
	NonExistence    string                 `json:"non_existence"`
	State           string                 `json:"state"`
	DefaultKeySpecs []DefaultKeySpecsState `json:"default_key_specs"`
}

type DefaultKeySpecsState struct {
	Algorithm string  `json:"algorithm"`
	KeyLength float64 `json:"key_length"`
	KeyType   string  `json:"key_type"`
	Kind      string  `json:"kind"`
}

type ForwardingConfigState struct {
	TargetNameServers []TargetNameServersState `json:"target_name_servers"`
}

type TargetNameServersState struct {
	ForwardingPath string `json:"forwarding_path"`
	Ipv4Address    string `json:"ipv4_address"`
}

type PeeringConfigState struct {
	TargetNetwork []TargetNetworkState `json:"target_network"`
}

type TargetNetworkState struct {
	NetworkUrl string `json:"network_url"`
}

type PrivateVisibilityConfigState struct {
	GkeClusters []GkeClustersState `json:"gke_clusters"`
	Networks    []NetworksState    `json:"networks"`
}

type GkeClustersState struct {
	GkeClusterName string `json:"gke_cluster_name"`
}

type NetworksState struct {
	NetworkUrl string `json:"network_url"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
