// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBigqueryDatasetIamPolicy(name string, args BigqueryDatasetIamPolicyArgs) *BigqueryDatasetIamPolicy {
	return &BigqueryDatasetIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BigqueryDatasetIamPolicy)(nil)

type BigqueryDatasetIamPolicy struct {
	Name  string
	Args  BigqueryDatasetIamPolicyArgs
	state *bigqueryDatasetIamPolicyState
}

func (bdip *BigqueryDatasetIamPolicy) Type() string {
	return "google_bigquery_dataset_iam_policy"
}

func (bdip *BigqueryDatasetIamPolicy) LocalName() string {
	return bdip.Name
}

func (bdip *BigqueryDatasetIamPolicy) Configuration() interface{} {
	return bdip.Args
}

func (bdip *BigqueryDatasetIamPolicy) Attributes() bigqueryDatasetIamPolicyAttributes {
	return bigqueryDatasetIamPolicyAttributes{ref: terra.ReferenceResource(bdip)}
}

func (bdip *BigqueryDatasetIamPolicy) ImportState(av io.Reader) error {
	bdip.state = &bigqueryDatasetIamPolicyState{}
	if err := json.NewDecoder(av).Decode(bdip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bdip.Type(), bdip.LocalName(), err)
	}
	return nil
}

func (bdip *BigqueryDatasetIamPolicy) State() (*bigqueryDatasetIamPolicyState, bool) {
	return bdip.state, bdip.state != nil
}

func (bdip *BigqueryDatasetIamPolicy) StateMust() *bigqueryDatasetIamPolicyState {
	if bdip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bdip.Type(), bdip.LocalName()))
	}
	return bdip.state
}

func (bdip *BigqueryDatasetIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(bdip)
}

type BigqueryDatasetIamPolicyArgs struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DependsOn contains resources that BigqueryDatasetIamPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bigqueryDatasetIamPolicyAttributes struct {
	ref terra.Reference
}

func (bdip bigqueryDatasetIamPolicyAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceString(bdip.ref.Append("dataset_id"))
}

func (bdip bigqueryDatasetIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(bdip.ref.Append("etag"))
}

func (bdip bigqueryDatasetIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bdip.ref.Append("id"))
}

func (bdip bigqueryDatasetIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceString(bdip.ref.Append("policy_data"))
}

func (bdip bigqueryDatasetIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceString(bdip.ref.Append("project"))
}

type bigqueryDatasetIamPolicyState struct {
	DatasetId  string `json:"dataset_id"`
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
}
