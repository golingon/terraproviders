// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package notebooksruntime

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Metrics struct{}

type AccessConfig struct {
	// AccessType: string, optional
	AccessType terra.StringValue `hcl:"access_type,attr"`
	// RuntimeOwner: string, optional
	RuntimeOwner terra.StringValue `hcl:"runtime_owner,attr"`
}

type SoftwareConfig struct {
	// CustomGpuDriverPath: string, optional
	CustomGpuDriverPath terra.StringValue `hcl:"custom_gpu_driver_path,attr"`
	// EnableHealthMonitoring: bool, optional
	EnableHealthMonitoring terra.BoolValue `hcl:"enable_health_monitoring,attr"`
	// IdleShutdown: bool, optional
	IdleShutdown terra.BoolValue `hcl:"idle_shutdown,attr"`
	// IdleShutdownTimeout: number, optional
	IdleShutdownTimeout terra.NumberValue `hcl:"idle_shutdown_timeout,attr"`
	// InstallGpuDriver: bool, optional
	InstallGpuDriver terra.BoolValue `hcl:"install_gpu_driver,attr"`
	// NotebookUpgradeSchedule: string, optional
	NotebookUpgradeSchedule terra.StringValue `hcl:"notebook_upgrade_schedule,attr"`
	// PostStartupScript: string, optional
	PostStartupScript terra.StringValue `hcl:"post_startup_script,attr"`
	// PostStartupScriptBehavior: string, optional
	PostStartupScriptBehavior terra.StringValue `hcl:"post_startup_script_behavior,attr"`
	// Kernels: min=0
	Kernels []Kernels `hcl:"kernels,block" validate:"min=0"`
}

type Kernels struct {
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
	// Tag: string, optional
	Tag terra.StringValue `hcl:"tag,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VirtualMachine struct {
	// VirtualMachineConfig: optional
	VirtualMachineConfig *VirtualMachineConfig `hcl:"virtual_machine_config,block"`
}

type VirtualMachineConfig struct {
	// InternalIpOnly: bool, optional
	InternalIpOnly terra.BoolValue `hcl:"internal_ip_only,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// MachineType: string, required
	MachineType terra.StringValue `hcl:"machine_type,attr" validate:"required"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// NicType: string, optional
	NicType terra.StringValue `hcl:"nic_type,attr"`
	// ReservedIpRange: string, optional
	ReservedIpRange terra.StringValue `hcl:"reserved_ip_range,attr"`
	// Subnet: string, optional
	Subnet terra.StringValue `hcl:"subnet,attr"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
	// AcceleratorConfig: optional
	AcceleratorConfig *AcceleratorConfig `hcl:"accelerator_config,block"`
	// ContainerImages: min=0
	ContainerImages []ContainerImages `hcl:"container_images,block" validate:"min=0"`
	// DataDisk: required
	DataDisk *DataDisk `hcl:"data_disk,block" validate:"required"`
	// EncryptionConfig: optional
	EncryptionConfig *EncryptionConfig `hcl:"encryption_config,block"`
	// ShieldedInstanceConfig: optional
	ShieldedInstanceConfig *ShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
}

type AcceleratorConfig struct {
	// CoreCount: number, optional
	CoreCount terra.NumberValue `hcl:"core_count,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type ContainerImages struct {
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
	// Tag: string, optional
	Tag terra.StringValue `hcl:"tag,attr"`
}

type DataDisk struct {
	// Interface: string, optional
	Interface terra.StringValue `hcl:"interface,attr"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// InitializeParams: optional
	InitializeParams *InitializeParams `hcl:"initialize_params,block"`
}

type InitializeParams struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DiskName: string, optional
	DiskName terra.StringValue `hcl:"disk_name,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// DiskType: string, optional
	DiskType terra.StringValue `hcl:"disk_type,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
}

type EncryptionConfig struct {
	// KmsKey: string, optional
	KmsKey terra.StringValue `hcl:"kms_key,attr"`
}

type ShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
	// EnableVtpm: bool, optional
	EnableVtpm terra.BoolValue `hcl:"enable_vtpm,attr"`
}

type MetricsAttributes struct {
	ref terra.Reference
}

func (m MetricsAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MetricsAttributes) InternalWithRef(ref terra.Reference) MetricsAttributes {
	return MetricsAttributes{ref: ref}
}

func (m MetricsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MetricsAttributes) SystemMetrics() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("system_metrics"))
}

type AccessConfigAttributes struct {
	ref terra.Reference
}

func (ac AccessConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AccessConfigAttributes) InternalWithRef(ref terra.Reference) AccessConfigAttributes {
	return AccessConfigAttributes{ref: ref}
}

func (ac AccessConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AccessConfigAttributes) AccessType() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("access_type"))
}

func (ac AccessConfigAttributes) ProxyUri() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("proxy_uri"))
}

func (ac AccessConfigAttributes) RuntimeOwner() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("runtime_owner"))
}

type SoftwareConfigAttributes struct {
	ref terra.Reference
}

func (sc SoftwareConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SoftwareConfigAttributes) InternalWithRef(ref terra.Reference) SoftwareConfigAttributes {
	return SoftwareConfigAttributes{ref: ref}
}

func (sc SoftwareConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SoftwareConfigAttributes) CustomGpuDriverPath() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("custom_gpu_driver_path"))
}

func (sc SoftwareConfigAttributes) EnableHealthMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("enable_health_monitoring"))
}

func (sc SoftwareConfigAttributes) IdleShutdown() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("idle_shutdown"))
}

func (sc SoftwareConfigAttributes) IdleShutdownTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("idle_shutdown_timeout"))
}

func (sc SoftwareConfigAttributes) InstallGpuDriver() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("install_gpu_driver"))
}

func (sc SoftwareConfigAttributes) NotebookUpgradeSchedule() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("notebook_upgrade_schedule"))
}

func (sc SoftwareConfigAttributes) PostStartupScript() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("post_startup_script"))
}

func (sc SoftwareConfigAttributes) PostStartupScriptBehavior() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("post_startup_script_behavior"))
}

func (sc SoftwareConfigAttributes) Upgradeable() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("upgradeable"))
}

func (sc SoftwareConfigAttributes) Kernels() terra.ListValue[KernelsAttributes] {
	return terra.ReferenceAsList[KernelsAttributes](sc.ref.Append("kernels"))
}

type KernelsAttributes struct {
	ref terra.Reference
}

func (k KernelsAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k KernelsAttributes) InternalWithRef(ref terra.Reference) KernelsAttributes {
	return KernelsAttributes{ref: ref}
}

func (k KernelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k KernelsAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("repository"))
}

func (k KernelsAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("tag"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VirtualMachineAttributes struct {
	ref terra.Reference
}

func (vm VirtualMachineAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm VirtualMachineAttributes) InternalWithRef(ref terra.Reference) VirtualMachineAttributes {
	return VirtualMachineAttributes{ref: ref}
}

func (vm VirtualMachineAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm VirtualMachineAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("instance_id"))
}

func (vm VirtualMachineAttributes) InstanceName() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("instance_name"))
}

func (vm VirtualMachineAttributes) VirtualMachineConfig() terra.ListValue[VirtualMachineConfigAttributes] {
	return terra.ReferenceAsList[VirtualMachineConfigAttributes](vm.ref.Append("virtual_machine_config"))
}

type VirtualMachineConfigAttributes struct {
	ref terra.Reference
}

func (vmc VirtualMachineConfigAttributes) InternalRef() (terra.Reference, error) {
	return vmc.ref, nil
}

func (vmc VirtualMachineConfigAttributes) InternalWithRef(ref terra.Reference) VirtualMachineConfigAttributes {
	return VirtualMachineConfigAttributes{ref: ref}
}

func (vmc VirtualMachineConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vmc.ref.InternalTokens()
}

func (vmc VirtualMachineConfigAttributes) GuestAttributes() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vmc.ref.Append("guest_attributes"))
}

func (vmc VirtualMachineConfigAttributes) InternalIpOnly() terra.BoolValue {
	return terra.ReferenceAsBool(vmc.ref.Append("internal_ip_only"))
}

func (vmc VirtualMachineConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vmc.ref.Append("labels"))
}

func (vmc VirtualMachineConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(vmc.ref.Append("machine_type"))
}

func (vmc VirtualMachineConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vmc.ref.Append("metadata"))
}

func (vmc VirtualMachineConfigAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(vmc.ref.Append("network"))
}

func (vmc VirtualMachineConfigAttributes) NicType() terra.StringValue {
	return terra.ReferenceAsString(vmc.ref.Append("nic_type"))
}

func (vmc VirtualMachineConfigAttributes) ReservedIpRange() terra.StringValue {
	return terra.ReferenceAsString(vmc.ref.Append("reserved_ip_range"))
}

func (vmc VirtualMachineConfigAttributes) Subnet() terra.StringValue {
	return terra.ReferenceAsString(vmc.ref.Append("subnet"))
}

func (vmc VirtualMachineConfigAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vmc.ref.Append("tags"))
}

func (vmc VirtualMachineConfigAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(vmc.ref.Append("zone"))
}

func (vmc VirtualMachineConfigAttributes) AcceleratorConfig() terra.ListValue[AcceleratorConfigAttributes] {
	return terra.ReferenceAsList[AcceleratorConfigAttributes](vmc.ref.Append("accelerator_config"))
}

func (vmc VirtualMachineConfigAttributes) ContainerImages() terra.ListValue[ContainerImagesAttributes] {
	return terra.ReferenceAsList[ContainerImagesAttributes](vmc.ref.Append("container_images"))
}

func (vmc VirtualMachineConfigAttributes) DataDisk() terra.ListValue[DataDiskAttributes] {
	return terra.ReferenceAsList[DataDiskAttributes](vmc.ref.Append("data_disk"))
}

func (vmc VirtualMachineConfigAttributes) EncryptionConfig() terra.ListValue[EncryptionConfigAttributes] {
	return terra.ReferenceAsList[EncryptionConfigAttributes](vmc.ref.Append("encryption_config"))
}

func (vmc VirtualMachineConfigAttributes) ShieldedInstanceConfig() terra.ListValue[ShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[ShieldedInstanceConfigAttributes](vmc.ref.Append("shielded_instance_config"))
}

type AcceleratorConfigAttributes struct {
	ref terra.Reference
}

func (ac AcceleratorConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AcceleratorConfigAttributes) InternalWithRef(ref terra.Reference) AcceleratorConfigAttributes {
	return AcceleratorConfigAttributes{ref: ref}
}

func (ac AcceleratorConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AcceleratorConfigAttributes) CoreCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("core_count"))
}

func (ac AcceleratorConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("type"))
}

type ContainerImagesAttributes struct {
	ref terra.Reference
}

func (ci ContainerImagesAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci ContainerImagesAttributes) InternalWithRef(ref terra.Reference) ContainerImagesAttributes {
	return ContainerImagesAttributes{ref: ref}
}

func (ci ContainerImagesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci ContainerImagesAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("repository"))
}

func (ci ContainerImagesAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("tag"))
}

type DataDiskAttributes struct {
	ref terra.Reference
}

func (dd DataDiskAttributes) InternalRef() (terra.Reference, error) {
	return dd.ref, nil
}

func (dd DataDiskAttributes) InternalWithRef(ref terra.Reference) DataDiskAttributes {
	return DataDiskAttributes{ref: ref}
}

func (dd DataDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dd.ref.InternalTokens()
}

func (dd DataDiskAttributes) AutoDelete() terra.BoolValue {
	return terra.ReferenceAsBool(dd.ref.Append("auto_delete"))
}

func (dd DataDiskAttributes) Boot() terra.BoolValue {
	return terra.ReferenceAsBool(dd.ref.Append("boot"))
}

func (dd DataDiskAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("device_name"))
}

func (dd DataDiskAttributes) GuestOsFeatures() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dd.ref.Append("guest_os_features"))
}

func (dd DataDiskAttributes) Index() terra.NumberValue {
	return terra.ReferenceAsNumber(dd.ref.Append("index"))
}

func (dd DataDiskAttributes) Interface() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("interface"))
}

func (dd DataDiskAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("kind"))
}

func (dd DataDiskAttributes) Licenses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dd.ref.Append("licenses"))
}

func (dd DataDiskAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("mode"))
}

func (dd DataDiskAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("source"))
}

func (dd DataDiskAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("type"))
}

func (dd DataDiskAttributes) InitializeParams() terra.ListValue[InitializeParamsAttributes] {
	return terra.ReferenceAsList[InitializeParamsAttributes](dd.ref.Append("initialize_params"))
}

type InitializeParamsAttributes struct {
	ref terra.Reference
}

func (ip InitializeParamsAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip InitializeParamsAttributes) InternalWithRef(ref terra.Reference) InitializeParamsAttributes {
	return InitializeParamsAttributes{ref: ref}
}

func (ip InitializeParamsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip InitializeParamsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("description"))
}

func (ip InitializeParamsAttributes) DiskName() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("disk_name"))
}

func (ip InitializeParamsAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(ip.ref.Append("disk_size_gb"))
}

func (ip InitializeParamsAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("disk_type"))
}

func (ip InitializeParamsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ip.ref.Append("labels"))
}

type EncryptionConfigAttributes struct {
	ref terra.Reference
}

func (ec EncryptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EncryptionConfigAttributes) InternalWithRef(ref terra.Reference) EncryptionConfigAttributes {
	return EncryptionConfigAttributes{ref: ref}
}

func (ec EncryptionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EncryptionConfigAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key"))
}

type ShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic ShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic ShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) ShieldedInstanceConfigAttributes {
	return ShieldedInstanceConfigAttributes{ref: ref}
}

func (sic ShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic ShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic ShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

func (sic ShieldedInstanceConfigAttributes) EnableVtpm() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_vtpm"))
}

type MetricsState struct {
	SystemMetrics map[string]string `json:"system_metrics"`
}

type AccessConfigState struct {
	AccessType   string `json:"access_type"`
	ProxyUri     string `json:"proxy_uri"`
	RuntimeOwner string `json:"runtime_owner"`
}

type SoftwareConfigState struct {
	CustomGpuDriverPath       string         `json:"custom_gpu_driver_path"`
	EnableHealthMonitoring    bool           `json:"enable_health_monitoring"`
	IdleShutdown              bool           `json:"idle_shutdown"`
	IdleShutdownTimeout       float64        `json:"idle_shutdown_timeout"`
	InstallGpuDriver          bool           `json:"install_gpu_driver"`
	NotebookUpgradeSchedule   string         `json:"notebook_upgrade_schedule"`
	PostStartupScript         string         `json:"post_startup_script"`
	PostStartupScriptBehavior string         `json:"post_startup_script_behavior"`
	Upgradeable               bool           `json:"upgradeable"`
	Kernels                   []KernelsState `json:"kernels"`
}

type KernelsState struct {
	Repository string `json:"repository"`
	Tag        string `json:"tag"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VirtualMachineState struct {
	InstanceId           string                      `json:"instance_id"`
	InstanceName         string                      `json:"instance_name"`
	VirtualMachineConfig []VirtualMachineConfigState `json:"virtual_machine_config"`
}

type VirtualMachineConfigState struct {
	GuestAttributes        map[string]string             `json:"guest_attributes"`
	InternalIpOnly         bool                          `json:"internal_ip_only"`
	Labels                 map[string]string             `json:"labels"`
	MachineType            string                        `json:"machine_type"`
	Metadata               map[string]string             `json:"metadata"`
	Network                string                        `json:"network"`
	NicType                string                        `json:"nic_type"`
	ReservedIpRange        string                        `json:"reserved_ip_range"`
	Subnet                 string                        `json:"subnet"`
	Tags                   []string                      `json:"tags"`
	Zone                   string                        `json:"zone"`
	AcceleratorConfig      []AcceleratorConfigState      `json:"accelerator_config"`
	ContainerImages        []ContainerImagesState        `json:"container_images"`
	DataDisk               []DataDiskState               `json:"data_disk"`
	EncryptionConfig       []EncryptionConfigState       `json:"encryption_config"`
	ShieldedInstanceConfig []ShieldedInstanceConfigState `json:"shielded_instance_config"`
}

type AcceleratorConfigState struct {
	CoreCount float64 `json:"core_count"`
	Type      string  `json:"type"`
}

type ContainerImagesState struct {
	Repository string `json:"repository"`
	Tag        string `json:"tag"`
}

type DataDiskState struct {
	AutoDelete       bool                    `json:"auto_delete"`
	Boot             bool                    `json:"boot"`
	DeviceName       string                  `json:"device_name"`
	GuestOsFeatures  []string                `json:"guest_os_features"`
	Index            float64                 `json:"index"`
	Interface        string                  `json:"interface"`
	Kind             string                  `json:"kind"`
	Licenses         []string                `json:"licenses"`
	Mode             string                  `json:"mode"`
	Source           string                  `json:"source"`
	Type             string                  `json:"type"`
	InitializeParams []InitializeParamsState `json:"initialize_params"`
}

type InitializeParamsState struct {
	Description string            `json:"description"`
	DiskName    string            `json:"disk_name"`
	DiskSizeGb  float64           `json:"disk_size_gb"`
	DiskType    string            `json:"disk_type"`
	Labels      map[string]string `json:"labels"`
}

type EncryptionConfigState struct {
	KmsKey string `json:"kms_key"`
}

type ShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
	EnableVtpm                bool `json:"enable_vtpm"`
}
