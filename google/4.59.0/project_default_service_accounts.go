// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	projectdefaultserviceaccounts "github.com/golingon/terraproviders/google/4.59.0/projectdefaultserviceaccounts"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewProjectDefaultServiceAccounts(name string, args ProjectDefaultServiceAccountsArgs) *ProjectDefaultServiceAccounts {
	return &ProjectDefaultServiceAccounts{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ProjectDefaultServiceAccounts)(nil)

type ProjectDefaultServiceAccounts struct {
	Name  string
	Args  ProjectDefaultServiceAccountsArgs
	state *projectDefaultServiceAccountsState
}

func (pdsa *ProjectDefaultServiceAccounts) Type() string {
	return "google_project_default_service_accounts"
}

func (pdsa *ProjectDefaultServiceAccounts) LocalName() string {
	return pdsa.Name
}

func (pdsa *ProjectDefaultServiceAccounts) Configuration() interface{} {
	return pdsa.Args
}

func (pdsa *ProjectDefaultServiceAccounts) Attributes() projectDefaultServiceAccountsAttributes {
	return projectDefaultServiceAccountsAttributes{ref: terra.ReferenceResource(pdsa)}
}

func (pdsa *ProjectDefaultServiceAccounts) ImportState(av io.Reader) error {
	pdsa.state = &projectDefaultServiceAccountsState{}
	if err := json.NewDecoder(av).Decode(pdsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pdsa.Type(), pdsa.LocalName(), err)
	}
	return nil
}

func (pdsa *ProjectDefaultServiceAccounts) State() (*projectDefaultServiceAccountsState, bool) {
	return pdsa.state, pdsa.state != nil
}

func (pdsa *ProjectDefaultServiceAccounts) StateMust() *projectDefaultServiceAccountsState {
	if pdsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pdsa.Type(), pdsa.LocalName()))
	}
	return pdsa.state
}

func (pdsa *ProjectDefaultServiceAccounts) DependOn() terra.Reference {
	return terra.ReferenceResource(pdsa)
}

type ProjectDefaultServiceAccountsArgs struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// RestorePolicy: string, optional
	RestorePolicy terra.StringValue `hcl:"restore_policy,attr"`
	// Timeouts: optional
	Timeouts *projectdefaultserviceaccounts.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ProjectDefaultServiceAccounts depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type projectDefaultServiceAccountsAttributes struct {
	ref terra.Reference
}

func (pdsa projectDefaultServiceAccountsAttributes) Action() terra.StringValue {
	return terra.ReferenceString(pdsa.ref.Append("action"))
}

func (pdsa projectDefaultServiceAccountsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pdsa.ref.Append("id"))
}

func (pdsa projectDefaultServiceAccountsAttributes) Project() terra.StringValue {
	return terra.ReferenceString(pdsa.ref.Append("project"))
}

func (pdsa projectDefaultServiceAccountsAttributes) RestorePolicy() terra.StringValue {
	return terra.ReferenceString(pdsa.ref.Append("restore_policy"))
}

func (pdsa projectDefaultServiceAccountsAttributes) ServiceAccounts() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pdsa.ref.Append("service_accounts"))
}

func (pdsa projectDefaultServiceAccountsAttributes) Timeouts() projectdefaultserviceaccounts.TimeoutsAttributes {
	return terra.ReferenceSingle[projectdefaultserviceaccounts.TimeoutsAttributes](pdsa.ref.Append("timeouts"))
}

type projectDefaultServiceAccountsState struct {
	Action          string                                       `json:"action"`
	Id              string                                       `json:"id"`
	Project         string                                       `json:"project"`
	RestorePolicy   string                                       `json:"restore_policy"`
	ServiceAccounts map[string]string                            `json:"service_accounts"`
	Timeouts        *projectdefaultserviceaccounts.TimeoutsState `json:"timeouts"`
}
