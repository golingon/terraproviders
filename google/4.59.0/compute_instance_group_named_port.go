// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computeinstancegroupnamedport "github.com/golingon/terraproviders/google/4.59.0/computeinstancegroupnamedport"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComputeInstanceGroupNamedPort(name string, args ComputeInstanceGroupNamedPortArgs) *ComputeInstanceGroupNamedPort {
	return &ComputeInstanceGroupNamedPort{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeInstanceGroupNamedPort)(nil)

type ComputeInstanceGroupNamedPort struct {
	Name  string
	Args  ComputeInstanceGroupNamedPortArgs
	state *computeInstanceGroupNamedPortState
}

func (cignp *ComputeInstanceGroupNamedPort) Type() string {
	return "google_compute_instance_group_named_port"
}

func (cignp *ComputeInstanceGroupNamedPort) LocalName() string {
	return cignp.Name
}

func (cignp *ComputeInstanceGroupNamedPort) Configuration() interface{} {
	return cignp.Args
}

func (cignp *ComputeInstanceGroupNamedPort) Attributes() computeInstanceGroupNamedPortAttributes {
	return computeInstanceGroupNamedPortAttributes{ref: terra.ReferenceResource(cignp)}
}

func (cignp *ComputeInstanceGroupNamedPort) ImportState(av io.Reader) error {
	cignp.state = &computeInstanceGroupNamedPortState{}
	if err := json.NewDecoder(av).Decode(cignp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cignp.Type(), cignp.LocalName(), err)
	}
	return nil
}

func (cignp *ComputeInstanceGroupNamedPort) State() (*computeInstanceGroupNamedPortState, bool) {
	return cignp.state, cignp.state != nil
}

func (cignp *ComputeInstanceGroupNamedPort) StateMust() *computeInstanceGroupNamedPortState {
	if cignp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cignp.Type(), cignp.LocalName()))
	}
	return cignp.state
}

func (cignp *ComputeInstanceGroupNamedPort) DependOn() terra.Reference {
	return terra.ReferenceResource(cignp)
}

type ComputeInstanceGroupNamedPortArgs struct {
	// Group: string, required
	Group terra.StringValue `hcl:"group,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Timeouts: optional
	Timeouts *computeinstancegroupnamedport.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ComputeInstanceGroupNamedPort depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type computeInstanceGroupNamedPortAttributes struct {
	ref terra.Reference
}

func (cignp computeInstanceGroupNamedPortAttributes) Group() terra.StringValue {
	return terra.ReferenceString(cignp.ref.Append("group"))
}

func (cignp computeInstanceGroupNamedPortAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cignp.ref.Append("id"))
}

func (cignp computeInstanceGroupNamedPortAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cignp.ref.Append("name"))
}

func (cignp computeInstanceGroupNamedPortAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(cignp.ref.Append("port"))
}

func (cignp computeInstanceGroupNamedPortAttributes) Project() terra.StringValue {
	return terra.ReferenceString(cignp.ref.Append("project"))
}

func (cignp computeInstanceGroupNamedPortAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(cignp.ref.Append("zone"))
}

func (cignp computeInstanceGroupNamedPortAttributes) Timeouts() computeinstancegroupnamedport.TimeoutsAttributes {
	return terra.ReferenceSingle[computeinstancegroupnamedport.TimeoutsAttributes](cignp.ref.Append("timeouts"))
}

type computeInstanceGroupNamedPortState struct {
	Group    string                                       `json:"group"`
	Id       string                                       `json:"id"`
	Name     string                                       `json:"name"`
	Port     float64                                      `json:"port"`
	Project  string                                       `json:"project"`
	Zone     string                                       `json:"zone"`
	Timeouts *computeinstancegroupnamedport.TimeoutsState `json:"timeouts"`
}
