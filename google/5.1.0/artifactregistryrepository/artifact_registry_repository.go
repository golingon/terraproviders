// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package artifactregistryrepository

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type DockerConfig struct {
	// ImmutableTags: bool, optional
	ImmutableTags terra.BoolValue `hcl:"immutable_tags,attr"`
}

type MavenConfig struct {
	// AllowSnapshotOverwrites: bool, optional
	AllowSnapshotOverwrites terra.BoolValue `hcl:"allow_snapshot_overwrites,attr"`
	// VersionPolicy: string, optional
	VersionPolicy terra.StringValue `hcl:"version_policy,attr"`
}

type RemoteRepositoryConfig struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// AptRepository: optional
	AptRepository *AptRepository `hcl:"apt_repository,block"`
	// DockerRepository: optional
	DockerRepository *DockerRepository `hcl:"docker_repository,block"`
	// MavenRepository: optional
	MavenRepository *MavenRepository `hcl:"maven_repository,block"`
	// NpmRepository: optional
	NpmRepository *NpmRepository `hcl:"npm_repository,block"`
	// PythonRepository: optional
	PythonRepository *PythonRepository `hcl:"python_repository,block"`
	// YumRepository: optional
	YumRepository *YumRepository `hcl:"yum_repository,block"`
}

type AptRepository struct {
	// AptRepositoryPublicRepository: optional
	PublicRepository *AptRepositoryPublicRepository `hcl:"public_repository,block"`
}

type AptRepositoryPublicRepository struct {
	// RepositoryBase: string, required
	RepositoryBase terra.StringValue `hcl:"repository_base,attr" validate:"required"`
	// RepositoryPath: string, required
	RepositoryPath terra.StringValue `hcl:"repository_path,attr" validate:"required"`
}

type DockerRepository struct {
	// PublicRepository: string, optional
	PublicRepository terra.StringValue `hcl:"public_repository,attr"`
}

type MavenRepository struct {
	// PublicRepository: string, optional
	PublicRepository terra.StringValue `hcl:"public_repository,attr"`
}

type NpmRepository struct {
	// PublicRepository: string, optional
	PublicRepository terra.StringValue `hcl:"public_repository,attr"`
}

type PythonRepository struct {
	// PublicRepository: string, optional
	PublicRepository terra.StringValue `hcl:"public_repository,attr"`
}

type YumRepository struct {
	// YumRepositoryPublicRepository: optional
	PublicRepository *YumRepositoryPublicRepository `hcl:"public_repository,block"`
}

type YumRepositoryPublicRepository struct {
	// RepositoryBase: string, required
	RepositoryBase terra.StringValue `hcl:"repository_base,attr" validate:"required"`
	// RepositoryPath: string, required
	RepositoryPath terra.StringValue `hcl:"repository_path,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VirtualRepositoryConfig struct {
	// UpstreamPolicies: min=0
	UpstreamPolicies []UpstreamPolicies `hcl:"upstream_policies,block" validate:"min=0"`
}

type UpstreamPolicies struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Repository: string, optional
	Repository terra.StringValue `hcl:"repository,attr"`
}

type DockerConfigAttributes struct {
	ref terra.Reference
}

func (dc DockerConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DockerConfigAttributes) InternalWithRef(ref terra.Reference) DockerConfigAttributes {
	return DockerConfigAttributes{ref: ref}
}

func (dc DockerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DockerConfigAttributes) ImmutableTags() terra.BoolValue {
	return terra.ReferenceAsBool(dc.ref.Append("immutable_tags"))
}

type MavenConfigAttributes struct {
	ref terra.Reference
}

func (mc MavenConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MavenConfigAttributes) InternalWithRef(ref terra.Reference) MavenConfigAttributes {
	return MavenConfigAttributes{ref: ref}
}

func (mc MavenConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MavenConfigAttributes) AllowSnapshotOverwrites() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("allow_snapshot_overwrites"))
}

func (mc MavenConfigAttributes) VersionPolicy() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("version_policy"))
}

type RemoteRepositoryConfigAttributes struct {
	ref terra.Reference
}

func (rrc RemoteRepositoryConfigAttributes) InternalRef() (terra.Reference, error) {
	return rrc.ref, nil
}

func (rrc RemoteRepositoryConfigAttributes) InternalWithRef(ref terra.Reference) RemoteRepositoryConfigAttributes {
	return RemoteRepositoryConfigAttributes{ref: ref}
}

func (rrc RemoteRepositoryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rrc.ref.InternalTokens()
}

func (rrc RemoteRepositoryConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(rrc.ref.Append("description"))
}

func (rrc RemoteRepositoryConfigAttributes) AptRepository() terra.ListValue[AptRepositoryAttributes] {
	return terra.ReferenceAsList[AptRepositoryAttributes](rrc.ref.Append("apt_repository"))
}

func (rrc RemoteRepositoryConfigAttributes) DockerRepository() terra.ListValue[DockerRepositoryAttributes] {
	return terra.ReferenceAsList[DockerRepositoryAttributes](rrc.ref.Append("docker_repository"))
}

func (rrc RemoteRepositoryConfigAttributes) MavenRepository() terra.ListValue[MavenRepositoryAttributes] {
	return terra.ReferenceAsList[MavenRepositoryAttributes](rrc.ref.Append("maven_repository"))
}

func (rrc RemoteRepositoryConfigAttributes) NpmRepository() terra.ListValue[NpmRepositoryAttributes] {
	return terra.ReferenceAsList[NpmRepositoryAttributes](rrc.ref.Append("npm_repository"))
}

func (rrc RemoteRepositoryConfigAttributes) PythonRepository() terra.ListValue[PythonRepositoryAttributes] {
	return terra.ReferenceAsList[PythonRepositoryAttributes](rrc.ref.Append("python_repository"))
}

func (rrc RemoteRepositoryConfigAttributes) YumRepository() terra.ListValue[YumRepositoryAttributes] {
	return terra.ReferenceAsList[YumRepositoryAttributes](rrc.ref.Append("yum_repository"))
}

type AptRepositoryAttributes struct {
	ref terra.Reference
}

func (ar AptRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return ar.ref, nil
}

func (ar AptRepositoryAttributes) InternalWithRef(ref terra.Reference) AptRepositoryAttributes {
	return AptRepositoryAttributes{ref: ref}
}

func (ar AptRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ar.ref.InternalTokens()
}

func (ar AptRepositoryAttributes) PublicRepository() terra.ListValue[AptRepositoryPublicRepositoryAttributes] {
	return terra.ReferenceAsList[AptRepositoryPublicRepositoryAttributes](ar.ref.Append("public_repository"))
}

type AptRepositoryPublicRepositoryAttributes struct {
	ref terra.Reference
}

func (pr AptRepositoryPublicRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr AptRepositoryPublicRepositoryAttributes) InternalWithRef(ref terra.Reference) AptRepositoryPublicRepositoryAttributes {
	return AptRepositoryPublicRepositoryAttributes{ref: ref}
}

func (pr AptRepositoryPublicRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr AptRepositoryPublicRepositoryAttributes) RepositoryBase() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("repository_base"))
}

func (pr AptRepositoryPublicRepositoryAttributes) RepositoryPath() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("repository_path"))
}

type DockerRepositoryAttributes struct {
	ref terra.Reference
}

func (dr DockerRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr DockerRepositoryAttributes) InternalWithRef(ref terra.Reference) DockerRepositoryAttributes {
	return DockerRepositoryAttributes{ref: ref}
}

func (dr DockerRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr DockerRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("public_repository"))
}

type MavenRepositoryAttributes struct {
	ref terra.Reference
}

func (mr MavenRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr MavenRepositoryAttributes) InternalWithRef(ref terra.Reference) MavenRepositoryAttributes {
	return MavenRepositoryAttributes{ref: ref}
}

func (mr MavenRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr MavenRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("public_repository"))
}

type NpmRepositoryAttributes struct {
	ref terra.Reference
}

func (nr NpmRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return nr.ref, nil
}

func (nr NpmRepositoryAttributes) InternalWithRef(ref terra.Reference) NpmRepositoryAttributes {
	return NpmRepositoryAttributes{ref: ref}
}

func (nr NpmRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nr.ref.InternalTokens()
}

func (nr NpmRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(nr.ref.Append("public_repository"))
}

type PythonRepositoryAttributes struct {
	ref terra.Reference
}

func (pr PythonRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr PythonRepositoryAttributes) InternalWithRef(ref terra.Reference) PythonRepositoryAttributes {
	return PythonRepositoryAttributes{ref: ref}
}

func (pr PythonRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr PythonRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("public_repository"))
}

type YumRepositoryAttributes struct {
	ref terra.Reference
}

func (yr YumRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return yr.ref, nil
}

func (yr YumRepositoryAttributes) InternalWithRef(ref terra.Reference) YumRepositoryAttributes {
	return YumRepositoryAttributes{ref: ref}
}

func (yr YumRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return yr.ref.InternalTokens()
}

func (yr YumRepositoryAttributes) PublicRepository() terra.ListValue[YumRepositoryPublicRepositoryAttributes] {
	return terra.ReferenceAsList[YumRepositoryPublicRepositoryAttributes](yr.ref.Append("public_repository"))
}

type YumRepositoryPublicRepositoryAttributes struct {
	ref terra.Reference
}

func (pr YumRepositoryPublicRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr YumRepositoryPublicRepositoryAttributes) InternalWithRef(ref terra.Reference) YumRepositoryPublicRepositoryAttributes {
	return YumRepositoryPublicRepositoryAttributes{ref: ref}
}

func (pr YumRepositoryPublicRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr YumRepositoryPublicRepositoryAttributes) RepositoryBase() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("repository_base"))
}

func (pr YumRepositoryPublicRepositoryAttributes) RepositoryPath() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("repository_path"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VirtualRepositoryConfigAttributes struct {
	ref terra.Reference
}

func (vrc VirtualRepositoryConfigAttributes) InternalRef() (terra.Reference, error) {
	return vrc.ref, nil
}

func (vrc VirtualRepositoryConfigAttributes) InternalWithRef(ref terra.Reference) VirtualRepositoryConfigAttributes {
	return VirtualRepositoryConfigAttributes{ref: ref}
}

func (vrc VirtualRepositoryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vrc.ref.InternalTokens()
}

func (vrc VirtualRepositoryConfigAttributes) UpstreamPolicies() terra.ListValue[UpstreamPoliciesAttributes] {
	return terra.ReferenceAsList[UpstreamPoliciesAttributes](vrc.ref.Append("upstream_policies"))
}

type UpstreamPoliciesAttributes struct {
	ref terra.Reference
}

func (up UpstreamPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return up.ref, nil
}

func (up UpstreamPoliciesAttributes) InternalWithRef(ref terra.Reference) UpstreamPoliciesAttributes {
	return UpstreamPoliciesAttributes{ref: ref}
}

func (up UpstreamPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return up.ref.InternalTokens()
}

func (up UpstreamPoliciesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("id"))
}

func (up UpstreamPoliciesAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(up.ref.Append("priority"))
}

func (up UpstreamPoliciesAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("repository"))
}

type DockerConfigState struct {
	ImmutableTags bool `json:"immutable_tags"`
}

type MavenConfigState struct {
	AllowSnapshotOverwrites bool   `json:"allow_snapshot_overwrites"`
	VersionPolicy           string `json:"version_policy"`
}

type RemoteRepositoryConfigState struct {
	Description      string                  `json:"description"`
	AptRepository    []AptRepositoryState    `json:"apt_repository"`
	DockerRepository []DockerRepositoryState `json:"docker_repository"`
	MavenRepository  []MavenRepositoryState  `json:"maven_repository"`
	NpmRepository    []NpmRepositoryState    `json:"npm_repository"`
	PythonRepository []PythonRepositoryState `json:"python_repository"`
	YumRepository    []YumRepositoryState    `json:"yum_repository"`
}

type AptRepositoryState struct {
	PublicRepository []AptRepositoryPublicRepositoryState `json:"public_repository"`
}

type AptRepositoryPublicRepositoryState struct {
	RepositoryBase string `json:"repository_base"`
	RepositoryPath string `json:"repository_path"`
}

type DockerRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type MavenRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type NpmRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type PythonRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type YumRepositoryState struct {
	PublicRepository []YumRepositoryPublicRepositoryState `json:"public_repository"`
}

type YumRepositoryPublicRepositoryState struct {
	RepositoryBase string `json:"repository_base"`
	RepositoryPath string `json:"repository_path"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VirtualRepositoryConfigState struct {
	UpstreamPolicies []UpstreamPoliciesState `json:"upstream_policies"`
}

type UpstreamPoliciesState struct {
	Id         string  `json:"id"`
	Priority   float64 `json:"priority"`
	Repository string  `json:"repository"`
}
