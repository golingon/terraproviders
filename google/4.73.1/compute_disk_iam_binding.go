// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	computediskiambinding "github.com/golingon/terraproviders/google/4.73.1/computediskiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewComputeDiskIamBinding creates a new instance of [ComputeDiskIamBinding].
func NewComputeDiskIamBinding(name string, args ComputeDiskIamBindingArgs) *ComputeDiskIamBinding {
	return &ComputeDiskIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComputeDiskIamBinding)(nil)

// ComputeDiskIamBinding represents the Terraform resource google_compute_disk_iam_binding.
type ComputeDiskIamBinding struct {
	Name      string
	Args      ComputeDiskIamBindingArgs
	state     *computeDiskIamBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ComputeDiskIamBinding].
func (cdib *ComputeDiskIamBinding) Type() string {
	return "google_compute_disk_iam_binding"
}

// LocalName returns the local name for [ComputeDiskIamBinding].
func (cdib *ComputeDiskIamBinding) LocalName() string {
	return cdib.Name
}

// Configuration returns the configuration (args) for [ComputeDiskIamBinding].
func (cdib *ComputeDiskIamBinding) Configuration() interface{} {
	return cdib.Args
}

// DependOn is used for other resources to depend on [ComputeDiskIamBinding].
func (cdib *ComputeDiskIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(cdib)
}

// Dependencies returns the list of resources [ComputeDiskIamBinding] depends_on.
func (cdib *ComputeDiskIamBinding) Dependencies() terra.Dependencies {
	return cdib.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ComputeDiskIamBinding].
func (cdib *ComputeDiskIamBinding) LifecycleManagement() *terra.Lifecycle {
	return cdib.Lifecycle
}

// Attributes returns the attributes for [ComputeDiskIamBinding].
func (cdib *ComputeDiskIamBinding) Attributes() computeDiskIamBindingAttributes {
	return computeDiskIamBindingAttributes{ref: terra.ReferenceResource(cdib)}
}

// ImportState imports the given attribute values into [ComputeDiskIamBinding]'s state.
func (cdib *ComputeDiskIamBinding) ImportState(av io.Reader) error {
	cdib.state = &computeDiskIamBindingState{}
	if err := json.NewDecoder(av).Decode(cdib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cdib.Type(), cdib.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ComputeDiskIamBinding] has state.
func (cdib *ComputeDiskIamBinding) State() (*computeDiskIamBindingState, bool) {
	return cdib.state, cdib.state != nil
}

// StateMust returns the state for [ComputeDiskIamBinding]. Panics if the state is nil.
func (cdib *ComputeDiskIamBinding) StateMust() *computeDiskIamBindingState {
	if cdib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cdib.Type(), cdib.LocalName()))
	}
	return cdib.state
}

// ComputeDiskIamBindingArgs contains the configurations for google_compute_disk_iam_binding.
type ComputeDiskIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Condition: optional
	Condition *computediskiambinding.Condition `hcl:"condition,block"`
}
type computeDiskIamBindingAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_compute_disk_iam_binding.
func (cdib computeDiskIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(cdib.ref.Append("etag"))
}

// Id returns a reference to field id of google_compute_disk_iam_binding.
func (cdib computeDiskIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cdib.ref.Append("id"))
}

// Members returns a reference to field members of google_compute_disk_iam_binding.
func (cdib computeDiskIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cdib.ref.Append("members"))
}

// Name returns a reference to field name of google_compute_disk_iam_binding.
func (cdib computeDiskIamBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cdib.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_disk_iam_binding.
func (cdib computeDiskIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(cdib.ref.Append("project"))
}

// Role returns a reference to field role of google_compute_disk_iam_binding.
func (cdib computeDiskIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(cdib.ref.Append("role"))
}

// Zone returns a reference to field zone of google_compute_disk_iam_binding.
func (cdib computeDiskIamBindingAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(cdib.ref.Append("zone"))
}

func (cdib computeDiskIamBindingAttributes) Condition() terra.ListValue[computediskiambinding.ConditionAttributes] {
	return terra.ReferenceAsList[computediskiambinding.ConditionAttributes](cdib.ref.Append("condition"))
}

type computeDiskIamBindingState struct {
	Etag      string                                 `json:"etag"`
	Id        string                                 `json:"id"`
	Members   []string                               `json:"members"`
	Name      string                                 `json:"name"`
	Project   string                                 `json:"project"`
	Role      string                                 `json:"role"`
	Zone      string                                 `json:"zone"`
	Condition []computediskiambinding.ConditionState `json:"condition"`
}
