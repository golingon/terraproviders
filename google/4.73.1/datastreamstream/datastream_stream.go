// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datastreamstream

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type BackfillAll struct {
	// MysqlExcludedObjects: optional
	MysqlExcludedObjects *MysqlExcludedObjects `hcl:"mysql_excluded_objects,block"`
	// OracleExcludedObjects: optional
	OracleExcludedObjects *OracleExcludedObjects `hcl:"oracle_excluded_objects,block"`
	// PostgresqlExcludedObjects: optional
	PostgresqlExcludedObjects *PostgresqlExcludedObjects `hcl:"postgresql_excluded_objects,block"`
}

type MysqlExcludedObjects struct {
	// MysqlExcludedObjectsMysqlDatabases: min=1
	MysqlDatabases []MysqlExcludedObjectsMysqlDatabases `hcl:"mysql_databases,block" validate:"min=1"`
}

type MysqlExcludedObjectsMysqlDatabases struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// MysqlExcludedObjectsMysqlDatabasesMysqlTables: min=0
	MysqlTables []MysqlExcludedObjectsMysqlDatabasesMysqlTables `hcl:"mysql_tables,block" validate:"min=0"`
}

type MysqlExcludedObjectsMysqlDatabasesMysqlTables struct {
	// Table: string, required
	Table terra.StringValue `hcl:"table,attr" validate:"required"`
	// MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumns: min=0
	MysqlColumns []MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumns `hcl:"mysql_columns,block" validate:"min=0"`
}

type MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumns struct {
	// Collation: string, optional
	Collation terra.StringValue `hcl:"collation,attr"`
	// Column: string, optional
	Column terra.StringValue `hcl:"column,attr"`
	// DataType: string, optional
	DataType terra.StringValue `hcl:"data_type,attr"`
	// Nullable: bool, optional
	Nullable terra.BoolValue `hcl:"nullable,attr"`
	// OrdinalPosition: number, optional
	OrdinalPosition terra.NumberValue `hcl:"ordinal_position,attr"`
	// PrimaryKey: bool, optional
	PrimaryKey terra.BoolValue `hcl:"primary_key,attr"`
}

type OracleExcludedObjects struct {
	// OracleExcludedObjectsOracleSchemas: min=1
	OracleSchemas []OracleExcludedObjectsOracleSchemas `hcl:"oracle_schemas,block" validate:"min=1"`
}

type OracleExcludedObjectsOracleSchemas struct {
	// Schema: string, required
	Schema terra.StringValue `hcl:"schema,attr" validate:"required"`
	// OracleExcludedObjectsOracleSchemasOracleTables: min=0
	OracleTables []OracleExcludedObjectsOracleSchemasOracleTables `hcl:"oracle_tables,block" validate:"min=0"`
}

type OracleExcludedObjectsOracleSchemasOracleTables struct {
	// Table: string, required
	Table terra.StringValue `hcl:"table,attr" validate:"required"`
	// OracleExcludedObjectsOracleSchemasOracleTablesOracleColumns: min=0
	OracleColumns []OracleExcludedObjectsOracleSchemasOracleTablesOracleColumns `hcl:"oracle_columns,block" validate:"min=0"`
}

type OracleExcludedObjectsOracleSchemasOracleTablesOracleColumns struct {
	// Column: string, optional
	Column terra.StringValue `hcl:"column,attr"`
	// DataType: string, optional
	DataType terra.StringValue `hcl:"data_type,attr"`
}

type PostgresqlExcludedObjects struct {
	// PostgresqlExcludedObjectsPostgresqlSchemas: min=1
	PostgresqlSchemas []PostgresqlExcludedObjectsPostgresqlSchemas `hcl:"postgresql_schemas,block" validate:"min=1"`
}

type PostgresqlExcludedObjectsPostgresqlSchemas struct {
	// Schema: string, required
	Schema terra.StringValue `hcl:"schema,attr" validate:"required"`
	// PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTables: min=0
	PostgresqlTables []PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTables `hcl:"postgresql_tables,block" validate:"min=0"`
}

type PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTables struct {
	// Table: string, required
	Table terra.StringValue `hcl:"table,attr" validate:"required"`
	// PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumns: min=0
	PostgresqlColumns []PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumns `hcl:"postgresql_columns,block" validate:"min=0"`
}

type PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumns struct {
	// Column: string, optional
	Column terra.StringValue `hcl:"column,attr"`
	// DataType: string, optional
	DataType terra.StringValue `hcl:"data_type,attr"`
	// Nullable: bool, optional
	Nullable terra.BoolValue `hcl:"nullable,attr"`
	// OrdinalPosition: number, optional
	OrdinalPosition terra.NumberValue `hcl:"ordinal_position,attr"`
	// PrimaryKey: bool, optional
	PrimaryKey terra.BoolValue `hcl:"primary_key,attr"`
}

type BackfillNone struct{}

type DestinationConfig struct {
	// DestinationConnectionProfile: string, required
	DestinationConnectionProfile terra.StringValue `hcl:"destination_connection_profile,attr" validate:"required"`
	// BigqueryDestinationConfig: optional
	BigqueryDestinationConfig *BigqueryDestinationConfig `hcl:"bigquery_destination_config,block"`
	// GcsDestinationConfig: optional
	GcsDestinationConfig *GcsDestinationConfig `hcl:"gcs_destination_config,block"`
}

type BigqueryDestinationConfig struct {
	// DataFreshness: string, optional
	DataFreshness terra.StringValue `hcl:"data_freshness,attr"`
	// SingleTargetDataset: optional
	SingleTargetDataset *SingleTargetDataset `hcl:"single_target_dataset,block"`
	// SourceHierarchyDatasets: optional
	SourceHierarchyDatasets *SourceHierarchyDatasets `hcl:"source_hierarchy_datasets,block"`
}

type SingleTargetDataset struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
}

type SourceHierarchyDatasets struct {
	// DatasetTemplate: required
	DatasetTemplate *DatasetTemplate `hcl:"dataset_template,block" validate:"required"`
}

type DatasetTemplate struct {
	// DatasetIdPrefix: string, optional
	DatasetIdPrefix terra.StringValue `hcl:"dataset_id_prefix,attr"`
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
}

type GcsDestinationConfig struct {
	// FileRotationInterval: string, optional
	FileRotationInterval terra.StringValue `hcl:"file_rotation_interval,attr"`
	// FileRotationMb: number, optional
	FileRotationMb terra.NumberValue `hcl:"file_rotation_mb,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// AvroFileFormat: optional
	AvroFileFormat *AvroFileFormat `hcl:"avro_file_format,block"`
	// JsonFileFormat: optional
	JsonFileFormat *JsonFileFormat `hcl:"json_file_format,block"`
}

type AvroFileFormat struct{}

type JsonFileFormat struct {
	// Compression: string, optional
	Compression terra.StringValue `hcl:"compression,attr"`
	// SchemaFileFormat: string, optional
	SchemaFileFormat terra.StringValue `hcl:"schema_file_format,attr"`
}

type SourceConfig struct {
	// SourceConnectionProfile: string, required
	SourceConnectionProfile terra.StringValue `hcl:"source_connection_profile,attr" validate:"required"`
	// MysqlSourceConfig: optional
	MysqlSourceConfig *MysqlSourceConfig `hcl:"mysql_source_config,block"`
	// OracleSourceConfig: optional
	OracleSourceConfig *OracleSourceConfig `hcl:"oracle_source_config,block"`
	// PostgresqlSourceConfig: optional
	PostgresqlSourceConfig *PostgresqlSourceConfig `hcl:"postgresql_source_config,block"`
}

type MysqlSourceConfig struct {
	// MaxConcurrentBackfillTasks: number, optional
	MaxConcurrentBackfillTasks terra.NumberValue `hcl:"max_concurrent_backfill_tasks,attr"`
	// MaxConcurrentCdcTasks: number, optional
	MaxConcurrentCdcTasks terra.NumberValue `hcl:"max_concurrent_cdc_tasks,attr"`
	// MysqlSourceConfigExcludeObjects: optional
	ExcludeObjects *MysqlSourceConfigExcludeObjects `hcl:"exclude_objects,block"`
	// MysqlSourceConfigIncludeObjects: optional
	IncludeObjects *MysqlSourceConfigIncludeObjects `hcl:"include_objects,block"`
}

type MysqlSourceConfigExcludeObjects struct {
	// ExcludeObjectsMysqlDatabases: min=1
	MysqlDatabases []ExcludeObjectsMysqlDatabases `hcl:"mysql_databases,block" validate:"min=1"`
}

type ExcludeObjectsMysqlDatabases struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// ExcludeObjectsMysqlDatabasesMysqlTables: min=0
	MysqlTables []ExcludeObjectsMysqlDatabasesMysqlTables `hcl:"mysql_tables,block" validate:"min=0"`
}

type ExcludeObjectsMysqlDatabasesMysqlTables struct {
	// Table: string, required
	Table terra.StringValue `hcl:"table,attr" validate:"required"`
	// ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumns: min=0
	MysqlColumns []ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumns `hcl:"mysql_columns,block" validate:"min=0"`
}

type ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumns struct {
	// Collation: string, optional
	Collation terra.StringValue `hcl:"collation,attr"`
	// Column: string, optional
	Column terra.StringValue `hcl:"column,attr"`
	// DataType: string, optional
	DataType terra.StringValue `hcl:"data_type,attr"`
	// Nullable: bool, optional
	Nullable terra.BoolValue `hcl:"nullable,attr"`
	// OrdinalPosition: number, optional
	OrdinalPosition terra.NumberValue `hcl:"ordinal_position,attr"`
	// PrimaryKey: bool, optional
	PrimaryKey terra.BoolValue `hcl:"primary_key,attr"`
}

type MysqlSourceConfigIncludeObjects struct {
	// IncludeObjectsMysqlDatabases: min=1
	MysqlDatabases []IncludeObjectsMysqlDatabases `hcl:"mysql_databases,block" validate:"min=1"`
}

type IncludeObjectsMysqlDatabases struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// IncludeObjectsMysqlDatabasesMysqlTables: min=0
	MysqlTables []IncludeObjectsMysqlDatabasesMysqlTables `hcl:"mysql_tables,block" validate:"min=0"`
}

type IncludeObjectsMysqlDatabasesMysqlTables struct {
	// Table: string, required
	Table terra.StringValue `hcl:"table,attr" validate:"required"`
	// IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumns: min=0
	MysqlColumns []IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumns `hcl:"mysql_columns,block" validate:"min=0"`
}

type IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumns struct {
	// Collation: string, optional
	Collation terra.StringValue `hcl:"collation,attr"`
	// Column: string, optional
	Column terra.StringValue `hcl:"column,attr"`
	// DataType: string, optional
	DataType terra.StringValue `hcl:"data_type,attr"`
	// Nullable: bool, optional
	Nullable terra.BoolValue `hcl:"nullable,attr"`
	// OrdinalPosition: number, optional
	OrdinalPosition terra.NumberValue `hcl:"ordinal_position,attr"`
	// PrimaryKey: bool, optional
	PrimaryKey terra.BoolValue `hcl:"primary_key,attr"`
}

type OracleSourceConfig struct {
	// MaxConcurrentBackfillTasks: number, optional
	MaxConcurrentBackfillTasks terra.NumberValue `hcl:"max_concurrent_backfill_tasks,attr"`
	// MaxConcurrentCdcTasks: number, optional
	MaxConcurrentCdcTasks terra.NumberValue `hcl:"max_concurrent_cdc_tasks,attr"`
	// DropLargeObjects: optional
	DropLargeObjects *DropLargeObjects `hcl:"drop_large_objects,block"`
	// OracleSourceConfigExcludeObjects: optional
	ExcludeObjects *OracleSourceConfigExcludeObjects `hcl:"exclude_objects,block"`
	// OracleSourceConfigIncludeObjects: optional
	IncludeObjects *OracleSourceConfigIncludeObjects `hcl:"include_objects,block"`
	// StreamLargeObjects: optional
	StreamLargeObjects *StreamLargeObjects `hcl:"stream_large_objects,block"`
}

type DropLargeObjects struct{}

type OracleSourceConfigExcludeObjects struct {
	// ExcludeObjectsOracleSchemas: min=1
	OracleSchemas []ExcludeObjectsOracleSchemas `hcl:"oracle_schemas,block" validate:"min=1"`
}

type ExcludeObjectsOracleSchemas struct {
	// Schema: string, required
	Schema terra.StringValue `hcl:"schema,attr" validate:"required"`
	// ExcludeObjectsOracleSchemasOracleTables: min=0
	OracleTables []ExcludeObjectsOracleSchemasOracleTables `hcl:"oracle_tables,block" validate:"min=0"`
}

type ExcludeObjectsOracleSchemasOracleTables struct {
	// Table: string, required
	Table terra.StringValue `hcl:"table,attr" validate:"required"`
	// ExcludeObjectsOracleSchemasOracleTablesOracleColumns: min=0
	OracleColumns []ExcludeObjectsOracleSchemasOracleTablesOracleColumns `hcl:"oracle_columns,block" validate:"min=0"`
}

type ExcludeObjectsOracleSchemasOracleTablesOracleColumns struct {
	// Column: string, optional
	Column terra.StringValue `hcl:"column,attr"`
	// DataType: string, optional
	DataType terra.StringValue `hcl:"data_type,attr"`
}

type OracleSourceConfigIncludeObjects struct {
	// IncludeObjectsOracleSchemas: min=1
	OracleSchemas []IncludeObjectsOracleSchemas `hcl:"oracle_schemas,block" validate:"min=1"`
}

type IncludeObjectsOracleSchemas struct {
	// Schema: string, required
	Schema terra.StringValue `hcl:"schema,attr" validate:"required"`
	// IncludeObjectsOracleSchemasOracleTables: min=0
	OracleTables []IncludeObjectsOracleSchemasOracleTables `hcl:"oracle_tables,block" validate:"min=0"`
}

type IncludeObjectsOracleSchemasOracleTables struct {
	// Table: string, required
	Table terra.StringValue `hcl:"table,attr" validate:"required"`
	// IncludeObjectsOracleSchemasOracleTablesOracleColumns: min=0
	OracleColumns []IncludeObjectsOracleSchemasOracleTablesOracleColumns `hcl:"oracle_columns,block" validate:"min=0"`
}

type IncludeObjectsOracleSchemasOracleTablesOracleColumns struct {
	// Column: string, optional
	Column terra.StringValue `hcl:"column,attr"`
	// DataType: string, optional
	DataType terra.StringValue `hcl:"data_type,attr"`
}

type StreamLargeObjects struct{}

type PostgresqlSourceConfig struct {
	// MaxConcurrentBackfillTasks: number, optional
	MaxConcurrentBackfillTasks terra.NumberValue `hcl:"max_concurrent_backfill_tasks,attr"`
	// Publication: string, required
	Publication terra.StringValue `hcl:"publication,attr" validate:"required"`
	// ReplicationSlot: string, required
	ReplicationSlot terra.StringValue `hcl:"replication_slot,attr" validate:"required"`
	// PostgresqlSourceConfigExcludeObjects: optional
	ExcludeObjects *PostgresqlSourceConfigExcludeObjects `hcl:"exclude_objects,block"`
	// PostgresqlSourceConfigIncludeObjects: optional
	IncludeObjects *PostgresqlSourceConfigIncludeObjects `hcl:"include_objects,block"`
}

type PostgresqlSourceConfigExcludeObjects struct {
	// ExcludeObjectsPostgresqlSchemas: min=1
	PostgresqlSchemas []ExcludeObjectsPostgresqlSchemas `hcl:"postgresql_schemas,block" validate:"min=1"`
}

type ExcludeObjectsPostgresqlSchemas struct {
	// Schema: string, required
	Schema terra.StringValue `hcl:"schema,attr" validate:"required"`
	// ExcludeObjectsPostgresqlSchemasPostgresqlTables: min=0
	PostgresqlTables []ExcludeObjectsPostgresqlSchemasPostgresqlTables `hcl:"postgresql_tables,block" validate:"min=0"`
}

type ExcludeObjectsPostgresqlSchemasPostgresqlTables struct {
	// Table: string, required
	Table terra.StringValue `hcl:"table,attr" validate:"required"`
	// ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumns: min=0
	PostgresqlColumns []ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumns `hcl:"postgresql_columns,block" validate:"min=0"`
}

type ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumns struct {
	// Column: string, optional
	Column terra.StringValue `hcl:"column,attr"`
	// DataType: string, optional
	DataType terra.StringValue `hcl:"data_type,attr"`
	// Nullable: bool, optional
	Nullable terra.BoolValue `hcl:"nullable,attr"`
	// OrdinalPosition: number, optional
	OrdinalPosition terra.NumberValue `hcl:"ordinal_position,attr"`
	// PrimaryKey: bool, optional
	PrimaryKey terra.BoolValue `hcl:"primary_key,attr"`
}

type PostgresqlSourceConfigIncludeObjects struct {
	// IncludeObjectsPostgresqlSchemas: min=1
	PostgresqlSchemas []IncludeObjectsPostgresqlSchemas `hcl:"postgresql_schemas,block" validate:"min=1"`
}

type IncludeObjectsPostgresqlSchemas struct {
	// Schema: string, required
	Schema terra.StringValue `hcl:"schema,attr" validate:"required"`
	// IncludeObjectsPostgresqlSchemasPostgresqlTables: min=0
	PostgresqlTables []IncludeObjectsPostgresqlSchemasPostgresqlTables `hcl:"postgresql_tables,block" validate:"min=0"`
}

type IncludeObjectsPostgresqlSchemasPostgresqlTables struct {
	// Table: string, required
	Table terra.StringValue `hcl:"table,attr" validate:"required"`
	// IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumns: min=0
	PostgresqlColumns []IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumns `hcl:"postgresql_columns,block" validate:"min=0"`
}

type IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumns struct {
	// Column: string, optional
	Column terra.StringValue `hcl:"column,attr"`
	// DataType: string, optional
	DataType terra.StringValue `hcl:"data_type,attr"`
	// Nullable: bool, optional
	Nullable terra.BoolValue `hcl:"nullable,attr"`
	// OrdinalPosition: number, optional
	OrdinalPosition terra.NumberValue `hcl:"ordinal_position,attr"`
	// PrimaryKey: bool, optional
	PrimaryKey terra.BoolValue `hcl:"primary_key,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BackfillAllAttributes struct {
	ref terra.Reference
}

func (ba BackfillAllAttributes) InternalRef() (terra.Reference, error) {
	return ba.ref, nil
}

func (ba BackfillAllAttributes) InternalWithRef(ref terra.Reference) BackfillAllAttributes {
	return BackfillAllAttributes{ref: ref}
}

func (ba BackfillAllAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ba.ref.InternalTokens()
}

func (ba BackfillAllAttributes) MysqlExcludedObjects() terra.ListValue[MysqlExcludedObjectsAttributes] {
	return terra.ReferenceAsList[MysqlExcludedObjectsAttributes](ba.ref.Append("mysql_excluded_objects"))
}

func (ba BackfillAllAttributes) OracleExcludedObjects() terra.ListValue[OracleExcludedObjectsAttributes] {
	return terra.ReferenceAsList[OracleExcludedObjectsAttributes](ba.ref.Append("oracle_excluded_objects"))
}

func (ba BackfillAllAttributes) PostgresqlExcludedObjects() terra.ListValue[PostgresqlExcludedObjectsAttributes] {
	return terra.ReferenceAsList[PostgresqlExcludedObjectsAttributes](ba.ref.Append("postgresql_excluded_objects"))
}

type MysqlExcludedObjectsAttributes struct {
	ref terra.Reference
}

func (meo MysqlExcludedObjectsAttributes) InternalRef() (terra.Reference, error) {
	return meo.ref, nil
}

func (meo MysqlExcludedObjectsAttributes) InternalWithRef(ref terra.Reference) MysqlExcludedObjectsAttributes {
	return MysqlExcludedObjectsAttributes{ref: ref}
}

func (meo MysqlExcludedObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return meo.ref.InternalTokens()
}

func (meo MysqlExcludedObjectsAttributes) MysqlDatabases() terra.ListValue[MysqlExcludedObjectsMysqlDatabasesAttributes] {
	return terra.ReferenceAsList[MysqlExcludedObjectsMysqlDatabasesAttributes](meo.ref.Append("mysql_databases"))
}

type MysqlExcludedObjectsMysqlDatabasesAttributes struct {
	ref terra.Reference
}

func (md MysqlExcludedObjectsMysqlDatabasesAttributes) InternalRef() (terra.Reference, error) {
	return md.ref, nil
}

func (md MysqlExcludedObjectsMysqlDatabasesAttributes) InternalWithRef(ref terra.Reference) MysqlExcludedObjectsMysqlDatabasesAttributes {
	return MysqlExcludedObjectsMysqlDatabasesAttributes{ref: ref}
}

func (md MysqlExcludedObjectsMysqlDatabasesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return md.ref.InternalTokens()
}

func (md MysqlExcludedObjectsMysqlDatabasesAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("database"))
}

func (md MysqlExcludedObjectsMysqlDatabasesAttributes) MysqlTables() terra.ListValue[MysqlExcludedObjectsMysqlDatabasesMysqlTablesAttributes] {
	return terra.ReferenceAsList[MysqlExcludedObjectsMysqlDatabasesMysqlTablesAttributes](md.ref.Append("mysql_tables"))
}

type MysqlExcludedObjectsMysqlDatabasesMysqlTablesAttributes struct {
	ref terra.Reference
}

func (mt MysqlExcludedObjectsMysqlDatabasesMysqlTablesAttributes) InternalRef() (terra.Reference, error) {
	return mt.ref, nil
}

func (mt MysqlExcludedObjectsMysqlDatabasesMysqlTablesAttributes) InternalWithRef(ref terra.Reference) MysqlExcludedObjectsMysqlDatabasesMysqlTablesAttributes {
	return MysqlExcludedObjectsMysqlDatabasesMysqlTablesAttributes{ref: ref}
}

func (mt MysqlExcludedObjectsMysqlDatabasesMysqlTablesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mt.ref.InternalTokens()
}

func (mt MysqlExcludedObjectsMysqlDatabasesMysqlTablesAttributes) Table() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("table"))
}

func (mt MysqlExcludedObjectsMysqlDatabasesMysqlTablesAttributes) MysqlColumns() terra.ListValue[MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes] {
	return terra.ReferenceAsList[MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes](mt.ref.Append("mysql_columns"))
}

type MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes struct {
	ref terra.Reference
}

func (mc MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) InternalWithRef(ref terra.Reference) MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes {
	return MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes{ref: ref}
}

func (mc MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) Collation() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("collation"))
}

func (mc MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("column"))
}

func (mc MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) DataType() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("data_type"))
}

func (mc MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) Length() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("length"))
}

func (mc MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) Nullable() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("nullable"))
}

func (mc MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) OrdinalPosition() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("ordinal_position"))
}

func (mc MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) PrimaryKey() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("primary_key"))
}

type OracleExcludedObjectsAttributes struct {
	ref terra.Reference
}

func (oeo OracleExcludedObjectsAttributes) InternalRef() (terra.Reference, error) {
	return oeo.ref, nil
}

func (oeo OracleExcludedObjectsAttributes) InternalWithRef(ref terra.Reference) OracleExcludedObjectsAttributes {
	return OracleExcludedObjectsAttributes{ref: ref}
}

func (oeo OracleExcludedObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oeo.ref.InternalTokens()
}

func (oeo OracleExcludedObjectsAttributes) OracleSchemas() terra.ListValue[OracleExcludedObjectsOracleSchemasAttributes] {
	return terra.ReferenceAsList[OracleExcludedObjectsOracleSchemasAttributes](oeo.ref.Append("oracle_schemas"))
}

type OracleExcludedObjectsOracleSchemasAttributes struct {
	ref terra.Reference
}

func (os OracleExcludedObjectsOracleSchemasAttributes) InternalRef() (terra.Reference, error) {
	return os.ref, nil
}

func (os OracleExcludedObjectsOracleSchemasAttributes) InternalWithRef(ref terra.Reference) OracleExcludedObjectsOracleSchemasAttributes {
	return OracleExcludedObjectsOracleSchemasAttributes{ref: ref}
}

func (os OracleExcludedObjectsOracleSchemasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return os.ref.InternalTokens()
}

func (os OracleExcludedObjectsOracleSchemasAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(os.ref.Append("schema"))
}

func (os OracleExcludedObjectsOracleSchemasAttributes) OracleTables() terra.ListValue[OracleExcludedObjectsOracleSchemasOracleTablesAttributes] {
	return terra.ReferenceAsList[OracleExcludedObjectsOracleSchemasOracleTablesAttributes](os.ref.Append("oracle_tables"))
}

type OracleExcludedObjectsOracleSchemasOracleTablesAttributes struct {
	ref terra.Reference
}

func (ot OracleExcludedObjectsOracleSchemasOracleTablesAttributes) InternalRef() (terra.Reference, error) {
	return ot.ref, nil
}

func (ot OracleExcludedObjectsOracleSchemasOracleTablesAttributes) InternalWithRef(ref terra.Reference) OracleExcludedObjectsOracleSchemasOracleTablesAttributes {
	return OracleExcludedObjectsOracleSchemasOracleTablesAttributes{ref: ref}
}

func (ot OracleExcludedObjectsOracleSchemasOracleTablesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ot.ref.InternalTokens()
}

func (ot OracleExcludedObjectsOracleSchemasOracleTablesAttributes) Table() terra.StringValue {
	return terra.ReferenceAsString(ot.ref.Append("table"))
}

func (ot OracleExcludedObjectsOracleSchemasOracleTablesAttributes) OracleColumns() terra.ListValue[OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes] {
	return terra.ReferenceAsList[OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes](ot.ref.Append("oracle_columns"))
}

type OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes struct {
	ref terra.Reference
}

func (oc OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes) InternalWithRef(ref terra.Reference) OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes {
	return OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes{ref: ref}
}

func (oc OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("column"))
}

func (oc OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes) DataType() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("data_type"))
}

func (oc OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("encoding"))
}

func (oc OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Length() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("length"))
}

func (oc OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Nullable() terra.BoolValue {
	return terra.ReferenceAsBool(oc.ref.Append("nullable"))
}

func (oc OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes) OrdinalPosition() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("ordinal_position"))
}

func (oc OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Precision() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("precision"))
}

func (oc OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes) PrimaryKey() terra.BoolValue {
	return terra.ReferenceAsBool(oc.ref.Append("primary_key"))
}

func (oc OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Scale() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("scale"))
}

type PostgresqlExcludedObjectsAttributes struct {
	ref terra.Reference
}

func (peo PostgresqlExcludedObjectsAttributes) InternalRef() (terra.Reference, error) {
	return peo.ref, nil
}

func (peo PostgresqlExcludedObjectsAttributes) InternalWithRef(ref terra.Reference) PostgresqlExcludedObjectsAttributes {
	return PostgresqlExcludedObjectsAttributes{ref: ref}
}

func (peo PostgresqlExcludedObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return peo.ref.InternalTokens()
}

func (peo PostgresqlExcludedObjectsAttributes) PostgresqlSchemas() terra.ListValue[PostgresqlExcludedObjectsPostgresqlSchemasAttributes] {
	return terra.ReferenceAsList[PostgresqlExcludedObjectsPostgresqlSchemasAttributes](peo.ref.Append("postgresql_schemas"))
}

type PostgresqlExcludedObjectsPostgresqlSchemasAttributes struct {
	ref terra.Reference
}

func (ps PostgresqlExcludedObjectsPostgresqlSchemasAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps PostgresqlExcludedObjectsPostgresqlSchemasAttributes) InternalWithRef(ref terra.Reference) PostgresqlExcludedObjectsPostgresqlSchemasAttributes {
	return PostgresqlExcludedObjectsPostgresqlSchemasAttributes{ref: ref}
}

func (ps PostgresqlExcludedObjectsPostgresqlSchemasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps PostgresqlExcludedObjectsPostgresqlSchemasAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("schema"))
}

func (ps PostgresqlExcludedObjectsPostgresqlSchemasAttributes) PostgresqlTables() terra.ListValue[PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesAttributes] {
	return terra.ReferenceAsList[PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesAttributes](ps.ref.Append("postgresql_tables"))
}

type PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesAttributes struct {
	ref terra.Reference
}

func (pt PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesAttributes) InternalRef() (terra.Reference, error) {
	return pt.ref, nil
}

func (pt PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesAttributes) InternalWithRef(ref terra.Reference) PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesAttributes {
	return PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesAttributes{ref: ref}
}

func (pt PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pt.ref.InternalTokens()
}

func (pt PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesAttributes) Table() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("table"))
}

func (pt PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesAttributes) PostgresqlColumns() terra.ListValue[PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes] {
	return terra.ReferenceAsList[PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes](pt.ref.Append("postgresql_columns"))
}

type PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes struct {
	ref terra.Reference
}

func (pc PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) InternalWithRef(ref terra.Reference) PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes {
	return PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes{ref: ref}
}

func (pc PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("column"))
}

func (pc PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) DataType() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("data_type"))
}

func (pc PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Length() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("length"))
}

func (pc PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Nullable() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("nullable"))
}

func (pc PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) OrdinalPosition() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("ordinal_position"))
}

func (pc PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Precision() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("precision"))
}

func (pc PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) PrimaryKey() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("primary_key"))
}

func (pc PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Scale() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("scale"))
}

type BackfillNoneAttributes struct {
	ref terra.Reference
}

func (bn BackfillNoneAttributes) InternalRef() (terra.Reference, error) {
	return bn.ref, nil
}

func (bn BackfillNoneAttributes) InternalWithRef(ref terra.Reference) BackfillNoneAttributes {
	return BackfillNoneAttributes{ref: ref}
}

func (bn BackfillNoneAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bn.ref.InternalTokens()
}

type DestinationConfigAttributes struct {
	ref terra.Reference
}

func (dc DestinationConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DestinationConfigAttributes) InternalWithRef(ref terra.Reference) DestinationConfigAttributes {
	return DestinationConfigAttributes{ref: ref}
}

func (dc DestinationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DestinationConfigAttributes) DestinationConnectionProfile() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("destination_connection_profile"))
}

func (dc DestinationConfigAttributes) BigqueryDestinationConfig() terra.ListValue[BigqueryDestinationConfigAttributes] {
	return terra.ReferenceAsList[BigqueryDestinationConfigAttributes](dc.ref.Append("bigquery_destination_config"))
}

func (dc DestinationConfigAttributes) GcsDestinationConfig() terra.ListValue[GcsDestinationConfigAttributes] {
	return terra.ReferenceAsList[GcsDestinationConfigAttributes](dc.ref.Append("gcs_destination_config"))
}

type BigqueryDestinationConfigAttributes struct {
	ref terra.Reference
}

func (bdc BigqueryDestinationConfigAttributes) InternalRef() (terra.Reference, error) {
	return bdc.ref, nil
}

func (bdc BigqueryDestinationConfigAttributes) InternalWithRef(ref terra.Reference) BigqueryDestinationConfigAttributes {
	return BigqueryDestinationConfigAttributes{ref: ref}
}

func (bdc BigqueryDestinationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bdc.ref.InternalTokens()
}

func (bdc BigqueryDestinationConfigAttributes) DataFreshness() terra.StringValue {
	return terra.ReferenceAsString(bdc.ref.Append("data_freshness"))
}

func (bdc BigqueryDestinationConfigAttributes) SingleTargetDataset() terra.ListValue[SingleTargetDatasetAttributes] {
	return terra.ReferenceAsList[SingleTargetDatasetAttributes](bdc.ref.Append("single_target_dataset"))
}

func (bdc BigqueryDestinationConfigAttributes) SourceHierarchyDatasets() terra.ListValue[SourceHierarchyDatasetsAttributes] {
	return terra.ReferenceAsList[SourceHierarchyDatasetsAttributes](bdc.ref.Append("source_hierarchy_datasets"))
}

type SingleTargetDatasetAttributes struct {
	ref terra.Reference
}

func (std SingleTargetDatasetAttributes) InternalRef() (terra.Reference, error) {
	return std.ref, nil
}

func (std SingleTargetDatasetAttributes) InternalWithRef(ref terra.Reference) SingleTargetDatasetAttributes {
	return SingleTargetDatasetAttributes{ref: ref}
}

func (std SingleTargetDatasetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return std.ref.InternalTokens()
}

func (std SingleTargetDatasetAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(std.ref.Append("dataset_id"))
}

type SourceHierarchyDatasetsAttributes struct {
	ref terra.Reference
}

func (shd SourceHierarchyDatasetsAttributes) InternalRef() (terra.Reference, error) {
	return shd.ref, nil
}

func (shd SourceHierarchyDatasetsAttributes) InternalWithRef(ref terra.Reference) SourceHierarchyDatasetsAttributes {
	return SourceHierarchyDatasetsAttributes{ref: ref}
}

func (shd SourceHierarchyDatasetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return shd.ref.InternalTokens()
}

func (shd SourceHierarchyDatasetsAttributes) DatasetTemplate() terra.ListValue[DatasetTemplateAttributes] {
	return terra.ReferenceAsList[DatasetTemplateAttributes](shd.ref.Append("dataset_template"))
}

type DatasetTemplateAttributes struct {
	ref terra.Reference
}

func (dt DatasetTemplateAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt DatasetTemplateAttributes) InternalWithRef(ref terra.Reference) DatasetTemplateAttributes {
	return DatasetTemplateAttributes{ref: ref}
}

func (dt DatasetTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt DatasetTemplateAttributes) DatasetIdPrefix() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("dataset_id_prefix"))
}

func (dt DatasetTemplateAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("kms_key_name"))
}

func (dt DatasetTemplateAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("location"))
}

type GcsDestinationConfigAttributes struct {
	ref terra.Reference
}

func (gdc GcsDestinationConfigAttributes) InternalRef() (terra.Reference, error) {
	return gdc.ref, nil
}

func (gdc GcsDestinationConfigAttributes) InternalWithRef(ref terra.Reference) GcsDestinationConfigAttributes {
	return GcsDestinationConfigAttributes{ref: ref}
}

func (gdc GcsDestinationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gdc.ref.InternalTokens()
}

func (gdc GcsDestinationConfigAttributes) FileRotationInterval() terra.StringValue {
	return terra.ReferenceAsString(gdc.ref.Append("file_rotation_interval"))
}

func (gdc GcsDestinationConfigAttributes) FileRotationMb() terra.NumberValue {
	return terra.ReferenceAsNumber(gdc.ref.Append("file_rotation_mb"))
}

func (gdc GcsDestinationConfigAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(gdc.ref.Append("path"))
}

func (gdc GcsDestinationConfigAttributes) AvroFileFormat() terra.ListValue[AvroFileFormatAttributes] {
	return terra.ReferenceAsList[AvroFileFormatAttributes](gdc.ref.Append("avro_file_format"))
}

func (gdc GcsDestinationConfigAttributes) JsonFileFormat() terra.ListValue[JsonFileFormatAttributes] {
	return terra.ReferenceAsList[JsonFileFormatAttributes](gdc.ref.Append("json_file_format"))
}

type AvroFileFormatAttributes struct {
	ref terra.Reference
}

func (aff AvroFileFormatAttributes) InternalRef() (terra.Reference, error) {
	return aff.ref, nil
}

func (aff AvroFileFormatAttributes) InternalWithRef(ref terra.Reference) AvroFileFormatAttributes {
	return AvroFileFormatAttributes{ref: ref}
}

func (aff AvroFileFormatAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aff.ref.InternalTokens()
}

type JsonFileFormatAttributes struct {
	ref terra.Reference
}

func (jff JsonFileFormatAttributes) InternalRef() (terra.Reference, error) {
	return jff.ref, nil
}

func (jff JsonFileFormatAttributes) InternalWithRef(ref terra.Reference) JsonFileFormatAttributes {
	return JsonFileFormatAttributes{ref: ref}
}

func (jff JsonFileFormatAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jff.ref.InternalTokens()
}

func (jff JsonFileFormatAttributes) Compression() terra.StringValue {
	return terra.ReferenceAsString(jff.ref.Append("compression"))
}

func (jff JsonFileFormatAttributes) SchemaFileFormat() terra.StringValue {
	return terra.ReferenceAsString(jff.ref.Append("schema_file_format"))
}

type SourceConfigAttributes struct {
	ref terra.Reference
}

func (sc SourceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SourceConfigAttributes) InternalWithRef(ref terra.Reference) SourceConfigAttributes {
	return SourceConfigAttributes{ref: ref}
}

func (sc SourceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SourceConfigAttributes) SourceConnectionProfile() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("source_connection_profile"))
}

func (sc SourceConfigAttributes) MysqlSourceConfig() terra.ListValue[MysqlSourceConfigAttributes] {
	return terra.ReferenceAsList[MysqlSourceConfigAttributes](sc.ref.Append("mysql_source_config"))
}

func (sc SourceConfigAttributes) OracleSourceConfig() terra.ListValue[OracleSourceConfigAttributes] {
	return terra.ReferenceAsList[OracleSourceConfigAttributes](sc.ref.Append("oracle_source_config"))
}

func (sc SourceConfigAttributes) PostgresqlSourceConfig() terra.ListValue[PostgresqlSourceConfigAttributes] {
	return terra.ReferenceAsList[PostgresqlSourceConfigAttributes](sc.ref.Append("postgresql_source_config"))
}

type MysqlSourceConfigAttributes struct {
	ref terra.Reference
}

func (msc MysqlSourceConfigAttributes) InternalRef() (terra.Reference, error) {
	return msc.ref, nil
}

func (msc MysqlSourceConfigAttributes) InternalWithRef(ref terra.Reference) MysqlSourceConfigAttributes {
	return MysqlSourceConfigAttributes{ref: ref}
}

func (msc MysqlSourceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return msc.ref.InternalTokens()
}

func (msc MysqlSourceConfigAttributes) MaxConcurrentBackfillTasks() terra.NumberValue {
	return terra.ReferenceAsNumber(msc.ref.Append("max_concurrent_backfill_tasks"))
}

func (msc MysqlSourceConfigAttributes) MaxConcurrentCdcTasks() terra.NumberValue {
	return terra.ReferenceAsNumber(msc.ref.Append("max_concurrent_cdc_tasks"))
}

func (msc MysqlSourceConfigAttributes) ExcludeObjects() terra.ListValue[MysqlSourceConfigExcludeObjectsAttributes] {
	return terra.ReferenceAsList[MysqlSourceConfigExcludeObjectsAttributes](msc.ref.Append("exclude_objects"))
}

func (msc MysqlSourceConfigAttributes) IncludeObjects() terra.ListValue[MysqlSourceConfigIncludeObjectsAttributes] {
	return terra.ReferenceAsList[MysqlSourceConfigIncludeObjectsAttributes](msc.ref.Append("include_objects"))
}

type MysqlSourceConfigExcludeObjectsAttributes struct {
	ref terra.Reference
}

func (eo MysqlSourceConfigExcludeObjectsAttributes) InternalRef() (terra.Reference, error) {
	return eo.ref, nil
}

func (eo MysqlSourceConfigExcludeObjectsAttributes) InternalWithRef(ref terra.Reference) MysqlSourceConfigExcludeObjectsAttributes {
	return MysqlSourceConfigExcludeObjectsAttributes{ref: ref}
}

func (eo MysqlSourceConfigExcludeObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eo.ref.InternalTokens()
}

func (eo MysqlSourceConfigExcludeObjectsAttributes) MysqlDatabases() terra.ListValue[ExcludeObjectsMysqlDatabasesAttributes] {
	return terra.ReferenceAsList[ExcludeObjectsMysqlDatabasesAttributes](eo.ref.Append("mysql_databases"))
}

type ExcludeObjectsMysqlDatabasesAttributes struct {
	ref terra.Reference
}

func (md ExcludeObjectsMysqlDatabasesAttributes) InternalRef() (terra.Reference, error) {
	return md.ref, nil
}

func (md ExcludeObjectsMysqlDatabasesAttributes) InternalWithRef(ref terra.Reference) ExcludeObjectsMysqlDatabasesAttributes {
	return ExcludeObjectsMysqlDatabasesAttributes{ref: ref}
}

func (md ExcludeObjectsMysqlDatabasesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return md.ref.InternalTokens()
}

func (md ExcludeObjectsMysqlDatabasesAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("database"))
}

func (md ExcludeObjectsMysqlDatabasesAttributes) MysqlTables() terra.ListValue[ExcludeObjectsMysqlDatabasesMysqlTablesAttributes] {
	return terra.ReferenceAsList[ExcludeObjectsMysqlDatabasesMysqlTablesAttributes](md.ref.Append("mysql_tables"))
}

type ExcludeObjectsMysqlDatabasesMysqlTablesAttributes struct {
	ref terra.Reference
}

func (mt ExcludeObjectsMysqlDatabasesMysqlTablesAttributes) InternalRef() (terra.Reference, error) {
	return mt.ref, nil
}

func (mt ExcludeObjectsMysqlDatabasesMysqlTablesAttributes) InternalWithRef(ref terra.Reference) ExcludeObjectsMysqlDatabasesMysqlTablesAttributes {
	return ExcludeObjectsMysqlDatabasesMysqlTablesAttributes{ref: ref}
}

func (mt ExcludeObjectsMysqlDatabasesMysqlTablesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mt.ref.InternalTokens()
}

func (mt ExcludeObjectsMysqlDatabasesMysqlTablesAttributes) Table() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("table"))
}

func (mt ExcludeObjectsMysqlDatabasesMysqlTablesAttributes) MysqlColumns() terra.ListValue[ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes] {
	return terra.ReferenceAsList[ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes](mt.ref.Append("mysql_columns"))
}

type ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes struct {
	ref terra.Reference
}

func (mc ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) InternalWithRef(ref terra.Reference) ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes {
	return ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes{ref: ref}
}

func (mc ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) Collation() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("collation"))
}

func (mc ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("column"))
}

func (mc ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) DataType() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("data_type"))
}

func (mc ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) Length() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("length"))
}

func (mc ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) Nullable() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("nullable"))
}

func (mc ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) OrdinalPosition() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("ordinal_position"))
}

func (mc ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) PrimaryKey() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("primary_key"))
}

type MysqlSourceConfigIncludeObjectsAttributes struct {
	ref terra.Reference
}

func (io MysqlSourceConfigIncludeObjectsAttributes) InternalRef() (terra.Reference, error) {
	return io.ref, nil
}

func (io MysqlSourceConfigIncludeObjectsAttributes) InternalWithRef(ref terra.Reference) MysqlSourceConfigIncludeObjectsAttributes {
	return MysqlSourceConfigIncludeObjectsAttributes{ref: ref}
}

func (io MysqlSourceConfigIncludeObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return io.ref.InternalTokens()
}

func (io MysqlSourceConfigIncludeObjectsAttributes) MysqlDatabases() terra.ListValue[IncludeObjectsMysqlDatabasesAttributes] {
	return terra.ReferenceAsList[IncludeObjectsMysqlDatabasesAttributes](io.ref.Append("mysql_databases"))
}

type IncludeObjectsMysqlDatabasesAttributes struct {
	ref terra.Reference
}

func (md IncludeObjectsMysqlDatabasesAttributes) InternalRef() (terra.Reference, error) {
	return md.ref, nil
}

func (md IncludeObjectsMysqlDatabasesAttributes) InternalWithRef(ref terra.Reference) IncludeObjectsMysqlDatabasesAttributes {
	return IncludeObjectsMysqlDatabasesAttributes{ref: ref}
}

func (md IncludeObjectsMysqlDatabasesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return md.ref.InternalTokens()
}

func (md IncludeObjectsMysqlDatabasesAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("database"))
}

func (md IncludeObjectsMysqlDatabasesAttributes) MysqlTables() terra.ListValue[IncludeObjectsMysqlDatabasesMysqlTablesAttributes] {
	return terra.ReferenceAsList[IncludeObjectsMysqlDatabasesMysqlTablesAttributes](md.ref.Append("mysql_tables"))
}

type IncludeObjectsMysqlDatabasesMysqlTablesAttributes struct {
	ref terra.Reference
}

func (mt IncludeObjectsMysqlDatabasesMysqlTablesAttributes) InternalRef() (terra.Reference, error) {
	return mt.ref, nil
}

func (mt IncludeObjectsMysqlDatabasesMysqlTablesAttributes) InternalWithRef(ref terra.Reference) IncludeObjectsMysqlDatabasesMysqlTablesAttributes {
	return IncludeObjectsMysqlDatabasesMysqlTablesAttributes{ref: ref}
}

func (mt IncludeObjectsMysqlDatabasesMysqlTablesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mt.ref.InternalTokens()
}

func (mt IncludeObjectsMysqlDatabasesMysqlTablesAttributes) Table() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("table"))
}

func (mt IncludeObjectsMysqlDatabasesMysqlTablesAttributes) MysqlColumns() terra.ListValue[IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes] {
	return terra.ReferenceAsList[IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes](mt.ref.Append("mysql_columns"))
}

type IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes struct {
	ref terra.Reference
}

func (mc IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) InternalWithRef(ref terra.Reference) IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes {
	return IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes{ref: ref}
}

func (mc IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) Collation() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("collation"))
}

func (mc IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("column"))
}

func (mc IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) DataType() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("data_type"))
}

func (mc IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) Length() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("length"))
}

func (mc IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) Nullable() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("nullable"))
}

func (mc IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) OrdinalPosition() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("ordinal_position"))
}

func (mc IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsAttributes) PrimaryKey() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("primary_key"))
}

type OracleSourceConfigAttributes struct {
	ref terra.Reference
}

func (osc OracleSourceConfigAttributes) InternalRef() (terra.Reference, error) {
	return osc.ref, nil
}

func (osc OracleSourceConfigAttributes) InternalWithRef(ref terra.Reference) OracleSourceConfigAttributes {
	return OracleSourceConfigAttributes{ref: ref}
}

func (osc OracleSourceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return osc.ref.InternalTokens()
}

func (osc OracleSourceConfigAttributes) MaxConcurrentBackfillTasks() terra.NumberValue {
	return terra.ReferenceAsNumber(osc.ref.Append("max_concurrent_backfill_tasks"))
}

func (osc OracleSourceConfigAttributes) MaxConcurrentCdcTasks() terra.NumberValue {
	return terra.ReferenceAsNumber(osc.ref.Append("max_concurrent_cdc_tasks"))
}

func (osc OracleSourceConfigAttributes) DropLargeObjects() terra.ListValue[DropLargeObjectsAttributes] {
	return terra.ReferenceAsList[DropLargeObjectsAttributes](osc.ref.Append("drop_large_objects"))
}

func (osc OracleSourceConfigAttributes) ExcludeObjects() terra.ListValue[OracleSourceConfigExcludeObjectsAttributes] {
	return terra.ReferenceAsList[OracleSourceConfigExcludeObjectsAttributes](osc.ref.Append("exclude_objects"))
}

func (osc OracleSourceConfigAttributes) IncludeObjects() terra.ListValue[OracleSourceConfigIncludeObjectsAttributes] {
	return terra.ReferenceAsList[OracleSourceConfigIncludeObjectsAttributes](osc.ref.Append("include_objects"))
}

func (osc OracleSourceConfigAttributes) StreamLargeObjects() terra.ListValue[StreamLargeObjectsAttributes] {
	return terra.ReferenceAsList[StreamLargeObjectsAttributes](osc.ref.Append("stream_large_objects"))
}

type DropLargeObjectsAttributes struct {
	ref terra.Reference
}

func (dlo DropLargeObjectsAttributes) InternalRef() (terra.Reference, error) {
	return dlo.ref, nil
}

func (dlo DropLargeObjectsAttributes) InternalWithRef(ref terra.Reference) DropLargeObjectsAttributes {
	return DropLargeObjectsAttributes{ref: ref}
}

func (dlo DropLargeObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dlo.ref.InternalTokens()
}

type OracleSourceConfigExcludeObjectsAttributes struct {
	ref terra.Reference
}

func (eo OracleSourceConfigExcludeObjectsAttributes) InternalRef() (terra.Reference, error) {
	return eo.ref, nil
}

func (eo OracleSourceConfigExcludeObjectsAttributes) InternalWithRef(ref terra.Reference) OracleSourceConfigExcludeObjectsAttributes {
	return OracleSourceConfigExcludeObjectsAttributes{ref: ref}
}

func (eo OracleSourceConfigExcludeObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eo.ref.InternalTokens()
}

func (eo OracleSourceConfigExcludeObjectsAttributes) OracleSchemas() terra.ListValue[ExcludeObjectsOracleSchemasAttributes] {
	return terra.ReferenceAsList[ExcludeObjectsOracleSchemasAttributes](eo.ref.Append("oracle_schemas"))
}

type ExcludeObjectsOracleSchemasAttributes struct {
	ref terra.Reference
}

func (os ExcludeObjectsOracleSchemasAttributes) InternalRef() (terra.Reference, error) {
	return os.ref, nil
}

func (os ExcludeObjectsOracleSchemasAttributes) InternalWithRef(ref terra.Reference) ExcludeObjectsOracleSchemasAttributes {
	return ExcludeObjectsOracleSchemasAttributes{ref: ref}
}

func (os ExcludeObjectsOracleSchemasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return os.ref.InternalTokens()
}

func (os ExcludeObjectsOracleSchemasAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(os.ref.Append("schema"))
}

func (os ExcludeObjectsOracleSchemasAttributes) OracleTables() terra.ListValue[ExcludeObjectsOracleSchemasOracleTablesAttributes] {
	return terra.ReferenceAsList[ExcludeObjectsOracleSchemasOracleTablesAttributes](os.ref.Append("oracle_tables"))
}

type ExcludeObjectsOracleSchemasOracleTablesAttributes struct {
	ref terra.Reference
}

func (ot ExcludeObjectsOracleSchemasOracleTablesAttributes) InternalRef() (terra.Reference, error) {
	return ot.ref, nil
}

func (ot ExcludeObjectsOracleSchemasOracleTablesAttributes) InternalWithRef(ref terra.Reference) ExcludeObjectsOracleSchemasOracleTablesAttributes {
	return ExcludeObjectsOracleSchemasOracleTablesAttributes{ref: ref}
}

func (ot ExcludeObjectsOracleSchemasOracleTablesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ot.ref.InternalTokens()
}

func (ot ExcludeObjectsOracleSchemasOracleTablesAttributes) Table() terra.StringValue {
	return terra.ReferenceAsString(ot.ref.Append("table"))
}

func (ot ExcludeObjectsOracleSchemasOracleTablesAttributes) OracleColumns() terra.ListValue[ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes] {
	return terra.ReferenceAsList[ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes](ot.ref.Append("oracle_columns"))
}

type ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes struct {
	ref terra.Reference
}

func (oc ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) InternalWithRef(ref terra.Reference) ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes {
	return ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes{ref: ref}
}

func (oc ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("column"))
}

func (oc ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) DataType() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("data_type"))
}

func (oc ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("encoding"))
}

func (oc ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Length() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("length"))
}

func (oc ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Nullable() terra.BoolValue {
	return terra.ReferenceAsBool(oc.ref.Append("nullable"))
}

func (oc ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) OrdinalPosition() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("ordinal_position"))
}

func (oc ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Precision() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("precision"))
}

func (oc ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) PrimaryKey() terra.BoolValue {
	return terra.ReferenceAsBool(oc.ref.Append("primary_key"))
}

func (oc ExcludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Scale() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("scale"))
}

type OracleSourceConfigIncludeObjectsAttributes struct {
	ref terra.Reference
}

func (io OracleSourceConfigIncludeObjectsAttributes) InternalRef() (terra.Reference, error) {
	return io.ref, nil
}

func (io OracleSourceConfigIncludeObjectsAttributes) InternalWithRef(ref terra.Reference) OracleSourceConfigIncludeObjectsAttributes {
	return OracleSourceConfigIncludeObjectsAttributes{ref: ref}
}

func (io OracleSourceConfigIncludeObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return io.ref.InternalTokens()
}

func (io OracleSourceConfigIncludeObjectsAttributes) OracleSchemas() terra.ListValue[IncludeObjectsOracleSchemasAttributes] {
	return terra.ReferenceAsList[IncludeObjectsOracleSchemasAttributes](io.ref.Append("oracle_schemas"))
}

type IncludeObjectsOracleSchemasAttributes struct {
	ref terra.Reference
}

func (os IncludeObjectsOracleSchemasAttributes) InternalRef() (terra.Reference, error) {
	return os.ref, nil
}

func (os IncludeObjectsOracleSchemasAttributes) InternalWithRef(ref terra.Reference) IncludeObjectsOracleSchemasAttributes {
	return IncludeObjectsOracleSchemasAttributes{ref: ref}
}

func (os IncludeObjectsOracleSchemasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return os.ref.InternalTokens()
}

func (os IncludeObjectsOracleSchemasAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(os.ref.Append("schema"))
}

func (os IncludeObjectsOracleSchemasAttributes) OracleTables() terra.ListValue[IncludeObjectsOracleSchemasOracleTablesAttributes] {
	return terra.ReferenceAsList[IncludeObjectsOracleSchemasOracleTablesAttributes](os.ref.Append("oracle_tables"))
}

type IncludeObjectsOracleSchemasOracleTablesAttributes struct {
	ref terra.Reference
}

func (ot IncludeObjectsOracleSchemasOracleTablesAttributes) InternalRef() (terra.Reference, error) {
	return ot.ref, nil
}

func (ot IncludeObjectsOracleSchemasOracleTablesAttributes) InternalWithRef(ref terra.Reference) IncludeObjectsOracleSchemasOracleTablesAttributes {
	return IncludeObjectsOracleSchemasOracleTablesAttributes{ref: ref}
}

func (ot IncludeObjectsOracleSchemasOracleTablesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ot.ref.InternalTokens()
}

func (ot IncludeObjectsOracleSchemasOracleTablesAttributes) Table() terra.StringValue {
	return terra.ReferenceAsString(ot.ref.Append("table"))
}

func (ot IncludeObjectsOracleSchemasOracleTablesAttributes) OracleColumns() terra.ListValue[IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes] {
	return terra.ReferenceAsList[IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes](ot.ref.Append("oracle_columns"))
}

type IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes struct {
	ref terra.Reference
}

func (oc IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) InternalWithRef(ref terra.Reference) IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes {
	return IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes{ref: ref}
}

func (oc IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("column"))
}

func (oc IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) DataType() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("data_type"))
}

func (oc IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("encoding"))
}

func (oc IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Length() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("length"))
}

func (oc IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Nullable() terra.BoolValue {
	return terra.ReferenceAsBool(oc.ref.Append("nullable"))
}

func (oc IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) OrdinalPosition() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("ordinal_position"))
}

func (oc IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Precision() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("precision"))
}

func (oc IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) PrimaryKey() terra.BoolValue {
	return terra.ReferenceAsBool(oc.ref.Append("primary_key"))
}

func (oc IncludeObjectsOracleSchemasOracleTablesOracleColumnsAttributes) Scale() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("scale"))
}

type StreamLargeObjectsAttributes struct {
	ref terra.Reference
}

func (slo StreamLargeObjectsAttributes) InternalRef() (terra.Reference, error) {
	return slo.ref, nil
}

func (slo StreamLargeObjectsAttributes) InternalWithRef(ref terra.Reference) StreamLargeObjectsAttributes {
	return StreamLargeObjectsAttributes{ref: ref}
}

func (slo StreamLargeObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return slo.ref.InternalTokens()
}

type PostgresqlSourceConfigAttributes struct {
	ref terra.Reference
}

func (psc PostgresqlSourceConfigAttributes) InternalRef() (terra.Reference, error) {
	return psc.ref, nil
}

func (psc PostgresqlSourceConfigAttributes) InternalWithRef(ref terra.Reference) PostgresqlSourceConfigAttributes {
	return PostgresqlSourceConfigAttributes{ref: ref}
}

func (psc PostgresqlSourceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return psc.ref.InternalTokens()
}

func (psc PostgresqlSourceConfigAttributes) MaxConcurrentBackfillTasks() terra.NumberValue {
	return terra.ReferenceAsNumber(psc.ref.Append("max_concurrent_backfill_tasks"))
}

func (psc PostgresqlSourceConfigAttributes) Publication() terra.StringValue {
	return terra.ReferenceAsString(psc.ref.Append("publication"))
}

func (psc PostgresqlSourceConfigAttributes) ReplicationSlot() terra.StringValue {
	return terra.ReferenceAsString(psc.ref.Append("replication_slot"))
}

func (psc PostgresqlSourceConfigAttributes) ExcludeObjects() terra.ListValue[PostgresqlSourceConfigExcludeObjectsAttributes] {
	return terra.ReferenceAsList[PostgresqlSourceConfigExcludeObjectsAttributes](psc.ref.Append("exclude_objects"))
}

func (psc PostgresqlSourceConfigAttributes) IncludeObjects() terra.ListValue[PostgresqlSourceConfigIncludeObjectsAttributes] {
	return terra.ReferenceAsList[PostgresqlSourceConfigIncludeObjectsAttributes](psc.ref.Append("include_objects"))
}

type PostgresqlSourceConfigExcludeObjectsAttributes struct {
	ref terra.Reference
}

func (eo PostgresqlSourceConfigExcludeObjectsAttributes) InternalRef() (terra.Reference, error) {
	return eo.ref, nil
}

func (eo PostgresqlSourceConfigExcludeObjectsAttributes) InternalWithRef(ref terra.Reference) PostgresqlSourceConfigExcludeObjectsAttributes {
	return PostgresqlSourceConfigExcludeObjectsAttributes{ref: ref}
}

func (eo PostgresqlSourceConfigExcludeObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eo.ref.InternalTokens()
}

func (eo PostgresqlSourceConfigExcludeObjectsAttributes) PostgresqlSchemas() terra.ListValue[ExcludeObjectsPostgresqlSchemasAttributes] {
	return terra.ReferenceAsList[ExcludeObjectsPostgresqlSchemasAttributes](eo.ref.Append("postgresql_schemas"))
}

type ExcludeObjectsPostgresqlSchemasAttributes struct {
	ref terra.Reference
}

func (ps ExcludeObjectsPostgresqlSchemasAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps ExcludeObjectsPostgresqlSchemasAttributes) InternalWithRef(ref terra.Reference) ExcludeObjectsPostgresqlSchemasAttributes {
	return ExcludeObjectsPostgresqlSchemasAttributes{ref: ref}
}

func (ps ExcludeObjectsPostgresqlSchemasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps ExcludeObjectsPostgresqlSchemasAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("schema"))
}

func (ps ExcludeObjectsPostgresqlSchemasAttributes) PostgresqlTables() terra.ListValue[ExcludeObjectsPostgresqlSchemasPostgresqlTablesAttributes] {
	return terra.ReferenceAsList[ExcludeObjectsPostgresqlSchemasPostgresqlTablesAttributes](ps.ref.Append("postgresql_tables"))
}

type ExcludeObjectsPostgresqlSchemasPostgresqlTablesAttributes struct {
	ref terra.Reference
}

func (pt ExcludeObjectsPostgresqlSchemasPostgresqlTablesAttributes) InternalRef() (terra.Reference, error) {
	return pt.ref, nil
}

func (pt ExcludeObjectsPostgresqlSchemasPostgresqlTablesAttributes) InternalWithRef(ref terra.Reference) ExcludeObjectsPostgresqlSchemasPostgresqlTablesAttributes {
	return ExcludeObjectsPostgresqlSchemasPostgresqlTablesAttributes{ref: ref}
}

func (pt ExcludeObjectsPostgresqlSchemasPostgresqlTablesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pt.ref.InternalTokens()
}

func (pt ExcludeObjectsPostgresqlSchemasPostgresqlTablesAttributes) Table() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("table"))
}

func (pt ExcludeObjectsPostgresqlSchemasPostgresqlTablesAttributes) PostgresqlColumns() terra.ListValue[ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes] {
	return terra.ReferenceAsList[ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes](pt.ref.Append("postgresql_columns"))
}

type ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes struct {
	ref terra.Reference
}

func (pc ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) InternalWithRef(ref terra.Reference) ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes {
	return ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes{ref: ref}
}

func (pc ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("column"))
}

func (pc ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) DataType() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("data_type"))
}

func (pc ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Length() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("length"))
}

func (pc ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Nullable() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("nullable"))
}

func (pc ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) OrdinalPosition() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("ordinal_position"))
}

func (pc ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Precision() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("precision"))
}

func (pc ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) PrimaryKey() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("primary_key"))
}

func (pc ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Scale() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("scale"))
}

type PostgresqlSourceConfigIncludeObjectsAttributes struct {
	ref terra.Reference
}

func (io PostgresqlSourceConfigIncludeObjectsAttributes) InternalRef() (terra.Reference, error) {
	return io.ref, nil
}

func (io PostgresqlSourceConfigIncludeObjectsAttributes) InternalWithRef(ref terra.Reference) PostgresqlSourceConfigIncludeObjectsAttributes {
	return PostgresqlSourceConfigIncludeObjectsAttributes{ref: ref}
}

func (io PostgresqlSourceConfigIncludeObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return io.ref.InternalTokens()
}

func (io PostgresqlSourceConfigIncludeObjectsAttributes) PostgresqlSchemas() terra.ListValue[IncludeObjectsPostgresqlSchemasAttributes] {
	return terra.ReferenceAsList[IncludeObjectsPostgresqlSchemasAttributes](io.ref.Append("postgresql_schemas"))
}

type IncludeObjectsPostgresqlSchemasAttributes struct {
	ref terra.Reference
}

func (ps IncludeObjectsPostgresqlSchemasAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps IncludeObjectsPostgresqlSchemasAttributes) InternalWithRef(ref terra.Reference) IncludeObjectsPostgresqlSchemasAttributes {
	return IncludeObjectsPostgresqlSchemasAttributes{ref: ref}
}

func (ps IncludeObjectsPostgresqlSchemasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps IncludeObjectsPostgresqlSchemasAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("schema"))
}

func (ps IncludeObjectsPostgresqlSchemasAttributes) PostgresqlTables() terra.ListValue[IncludeObjectsPostgresqlSchemasPostgresqlTablesAttributes] {
	return terra.ReferenceAsList[IncludeObjectsPostgresqlSchemasPostgresqlTablesAttributes](ps.ref.Append("postgresql_tables"))
}

type IncludeObjectsPostgresqlSchemasPostgresqlTablesAttributes struct {
	ref terra.Reference
}

func (pt IncludeObjectsPostgresqlSchemasPostgresqlTablesAttributes) InternalRef() (terra.Reference, error) {
	return pt.ref, nil
}

func (pt IncludeObjectsPostgresqlSchemasPostgresqlTablesAttributes) InternalWithRef(ref terra.Reference) IncludeObjectsPostgresqlSchemasPostgresqlTablesAttributes {
	return IncludeObjectsPostgresqlSchemasPostgresqlTablesAttributes{ref: ref}
}

func (pt IncludeObjectsPostgresqlSchemasPostgresqlTablesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pt.ref.InternalTokens()
}

func (pt IncludeObjectsPostgresqlSchemasPostgresqlTablesAttributes) Table() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("table"))
}

func (pt IncludeObjectsPostgresqlSchemasPostgresqlTablesAttributes) PostgresqlColumns() terra.ListValue[IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes] {
	return terra.ReferenceAsList[IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes](pt.ref.Append("postgresql_columns"))
}

type IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes struct {
	ref terra.Reference
}

func (pc IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) InternalWithRef(ref terra.Reference) IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes {
	return IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes{ref: ref}
}

func (pc IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("column"))
}

func (pc IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) DataType() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("data_type"))
}

func (pc IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Length() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("length"))
}

func (pc IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Nullable() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("nullable"))
}

func (pc IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) OrdinalPosition() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("ordinal_position"))
}

func (pc IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Precision() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("precision"))
}

func (pc IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) PrimaryKey() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("primary_key"))
}

func (pc IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsAttributes) Scale() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("scale"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BackfillAllState struct {
	MysqlExcludedObjects      []MysqlExcludedObjectsState      `json:"mysql_excluded_objects"`
	OracleExcludedObjects     []OracleExcludedObjectsState     `json:"oracle_excluded_objects"`
	PostgresqlExcludedObjects []PostgresqlExcludedObjectsState `json:"postgresql_excluded_objects"`
}

type MysqlExcludedObjectsState struct {
	MysqlDatabases []MysqlExcludedObjectsMysqlDatabasesState `json:"mysql_databases"`
}

type MysqlExcludedObjectsMysqlDatabasesState struct {
	Database    string                                               `json:"database"`
	MysqlTables []MysqlExcludedObjectsMysqlDatabasesMysqlTablesState `json:"mysql_tables"`
}

type MysqlExcludedObjectsMysqlDatabasesMysqlTablesState struct {
	Table        string                                                           `json:"table"`
	MysqlColumns []MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsState `json:"mysql_columns"`
}

type MysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsState struct {
	Collation       string  `json:"collation"`
	Column          string  `json:"column"`
	DataType        string  `json:"data_type"`
	Length          float64 `json:"length"`
	Nullable        bool    `json:"nullable"`
	OrdinalPosition float64 `json:"ordinal_position"`
	PrimaryKey      bool    `json:"primary_key"`
}

type OracleExcludedObjectsState struct {
	OracleSchemas []OracleExcludedObjectsOracleSchemasState `json:"oracle_schemas"`
}

type OracleExcludedObjectsOracleSchemasState struct {
	Schema       string                                                `json:"schema"`
	OracleTables []OracleExcludedObjectsOracleSchemasOracleTablesState `json:"oracle_tables"`
}

type OracleExcludedObjectsOracleSchemasOracleTablesState struct {
	Table         string                                                             `json:"table"`
	OracleColumns []OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsState `json:"oracle_columns"`
}

type OracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsState struct {
	Column          string  `json:"column"`
	DataType        string  `json:"data_type"`
	Encoding        string  `json:"encoding"`
	Length          float64 `json:"length"`
	Nullable        bool    `json:"nullable"`
	OrdinalPosition float64 `json:"ordinal_position"`
	Precision       float64 `json:"precision"`
	PrimaryKey      bool    `json:"primary_key"`
	Scale           float64 `json:"scale"`
}

type PostgresqlExcludedObjectsState struct {
	PostgresqlSchemas []PostgresqlExcludedObjectsPostgresqlSchemasState `json:"postgresql_schemas"`
}

type PostgresqlExcludedObjectsPostgresqlSchemasState struct {
	Schema           string                                                            `json:"schema"`
	PostgresqlTables []PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesState `json:"postgresql_tables"`
}

type PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesState struct {
	Table             string                                                                             `json:"table"`
	PostgresqlColumns []PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsState `json:"postgresql_columns"`
}

type PostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsState struct {
	Column          string  `json:"column"`
	DataType        string  `json:"data_type"`
	Length          float64 `json:"length"`
	Nullable        bool    `json:"nullable"`
	OrdinalPosition float64 `json:"ordinal_position"`
	Precision       float64 `json:"precision"`
	PrimaryKey      bool    `json:"primary_key"`
	Scale           float64 `json:"scale"`
}

type BackfillNoneState struct{}

type DestinationConfigState struct {
	DestinationConnectionProfile string                           `json:"destination_connection_profile"`
	BigqueryDestinationConfig    []BigqueryDestinationConfigState `json:"bigquery_destination_config"`
	GcsDestinationConfig         []GcsDestinationConfigState      `json:"gcs_destination_config"`
}

type BigqueryDestinationConfigState struct {
	DataFreshness           string                         `json:"data_freshness"`
	SingleTargetDataset     []SingleTargetDatasetState     `json:"single_target_dataset"`
	SourceHierarchyDatasets []SourceHierarchyDatasetsState `json:"source_hierarchy_datasets"`
}

type SingleTargetDatasetState struct {
	DatasetId string `json:"dataset_id"`
}

type SourceHierarchyDatasetsState struct {
	DatasetTemplate []DatasetTemplateState `json:"dataset_template"`
}

type DatasetTemplateState struct {
	DatasetIdPrefix string `json:"dataset_id_prefix"`
	KmsKeyName      string `json:"kms_key_name"`
	Location        string `json:"location"`
}

type GcsDestinationConfigState struct {
	FileRotationInterval string                `json:"file_rotation_interval"`
	FileRotationMb       float64               `json:"file_rotation_mb"`
	Path                 string                `json:"path"`
	AvroFileFormat       []AvroFileFormatState `json:"avro_file_format"`
	JsonFileFormat       []JsonFileFormatState `json:"json_file_format"`
}

type AvroFileFormatState struct{}

type JsonFileFormatState struct {
	Compression      string `json:"compression"`
	SchemaFileFormat string `json:"schema_file_format"`
}

type SourceConfigState struct {
	SourceConnectionProfile string                        `json:"source_connection_profile"`
	MysqlSourceConfig       []MysqlSourceConfigState      `json:"mysql_source_config"`
	OracleSourceConfig      []OracleSourceConfigState     `json:"oracle_source_config"`
	PostgresqlSourceConfig  []PostgresqlSourceConfigState `json:"postgresql_source_config"`
}

type MysqlSourceConfigState struct {
	MaxConcurrentBackfillTasks float64                                `json:"max_concurrent_backfill_tasks"`
	MaxConcurrentCdcTasks      float64                                `json:"max_concurrent_cdc_tasks"`
	ExcludeObjects             []MysqlSourceConfigExcludeObjectsState `json:"exclude_objects"`
	IncludeObjects             []MysqlSourceConfigIncludeObjectsState `json:"include_objects"`
}

type MysqlSourceConfigExcludeObjectsState struct {
	MysqlDatabases []ExcludeObjectsMysqlDatabasesState `json:"mysql_databases"`
}

type ExcludeObjectsMysqlDatabasesState struct {
	Database    string                                         `json:"database"`
	MysqlTables []ExcludeObjectsMysqlDatabasesMysqlTablesState `json:"mysql_tables"`
}

type ExcludeObjectsMysqlDatabasesMysqlTablesState struct {
	Table        string                                                     `json:"table"`
	MysqlColumns []ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsState `json:"mysql_columns"`
}

type ExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsState struct {
	Collation       string  `json:"collation"`
	Column          string  `json:"column"`
	DataType        string  `json:"data_type"`
	Length          float64 `json:"length"`
	Nullable        bool    `json:"nullable"`
	OrdinalPosition float64 `json:"ordinal_position"`
	PrimaryKey      bool    `json:"primary_key"`
}

type MysqlSourceConfigIncludeObjectsState struct {
	MysqlDatabases []IncludeObjectsMysqlDatabasesState `json:"mysql_databases"`
}

type IncludeObjectsMysqlDatabasesState struct {
	Database    string                                         `json:"database"`
	MysqlTables []IncludeObjectsMysqlDatabasesMysqlTablesState `json:"mysql_tables"`
}

type IncludeObjectsMysqlDatabasesMysqlTablesState struct {
	Table        string                                                     `json:"table"`
	MysqlColumns []IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsState `json:"mysql_columns"`
}

type IncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsState struct {
	Collation       string  `json:"collation"`
	Column          string  `json:"column"`
	DataType        string  `json:"data_type"`
	Length          float64 `json:"length"`
	Nullable        bool    `json:"nullable"`
	OrdinalPosition float64 `json:"ordinal_position"`
	PrimaryKey      bool    `json:"primary_key"`
}

type OracleSourceConfigState struct {
	MaxConcurrentBackfillTasks float64                                 `json:"max_concurrent_backfill_tasks"`
	MaxConcurrentCdcTasks      float64                                 `json:"max_concurrent_cdc_tasks"`
	DropLargeObjects           []DropLargeObjectsState                 `json:"drop_large_objects"`
	ExcludeObjects             []OracleSourceConfigExcludeObjectsState `json:"exclude_objects"`
	IncludeObjects             []OracleSourceConfigIncludeObjectsState `json:"include_objects"`
	StreamLargeObjects         []StreamLargeObjectsState               `json:"stream_large_objects"`
}

type DropLargeObjectsState struct{}

type OracleSourceConfigExcludeObjectsState struct {
	OracleSchemas []ExcludeObjectsOracleSchemasState `json:"oracle_schemas"`
}

type ExcludeObjectsOracleSchemasState struct {
	Schema       string                                         `json:"schema"`
	OracleTables []ExcludeObjectsOracleSchemasOracleTablesState `json:"oracle_tables"`
}

type ExcludeObjectsOracleSchemasOracleTablesState struct {
	Table         string                                                      `json:"table"`
	OracleColumns []ExcludeObjectsOracleSchemasOracleTablesOracleColumnsState `json:"oracle_columns"`
}

type ExcludeObjectsOracleSchemasOracleTablesOracleColumnsState struct {
	Column          string  `json:"column"`
	DataType        string  `json:"data_type"`
	Encoding        string  `json:"encoding"`
	Length          float64 `json:"length"`
	Nullable        bool    `json:"nullable"`
	OrdinalPosition float64 `json:"ordinal_position"`
	Precision       float64 `json:"precision"`
	PrimaryKey      bool    `json:"primary_key"`
	Scale           float64 `json:"scale"`
}

type OracleSourceConfigIncludeObjectsState struct {
	OracleSchemas []IncludeObjectsOracleSchemasState `json:"oracle_schemas"`
}

type IncludeObjectsOracleSchemasState struct {
	Schema       string                                         `json:"schema"`
	OracleTables []IncludeObjectsOracleSchemasOracleTablesState `json:"oracle_tables"`
}

type IncludeObjectsOracleSchemasOracleTablesState struct {
	Table         string                                                      `json:"table"`
	OracleColumns []IncludeObjectsOracleSchemasOracleTablesOracleColumnsState `json:"oracle_columns"`
}

type IncludeObjectsOracleSchemasOracleTablesOracleColumnsState struct {
	Column          string  `json:"column"`
	DataType        string  `json:"data_type"`
	Encoding        string  `json:"encoding"`
	Length          float64 `json:"length"`
	Nullable        bool    `json:"nullable"`
	OrdinalPosition float64 `json:"ordinal_position"`
	Precision       float64 `json:"precision"`
	PrimaryKey      bool    `json:"primary_key"`
	Scale           float64 `json:"scale"`
}

type StreamLargeObjectsState struct{}

type PostgresqlSourceConfigState struct {
	MaxConcurrentBackfillTasks float64                                     `json:"max_concurrent_backfill_tasks"`
	Publication                string                                      `json:"publication"`
	ReplicationSlot            string                                      `json:"replication_slot"`
	ExcludeObjects             []PostgresqlSourceConfigExcludeObjectsState `json:"exclude_objects"`
	IncludeObjects             []PostgresqlSourceConfigIncludeObjectsState `json:"include_objects"`
}

type PostgresqlSourceConfigExcludeObjectsState struct {
	PostgresqlSchemas []ExcludeObjectsPostgresqlSchemasState `json:"postgresql_schemas"`
}

type ExcludeObjectsPostgresqlSchemasState struct {
	Schema           string                                                 `json:"schema"`
	PostgresqlTables []ExcludeObjectsPostgresqlSchemasPostgresqlTablesState `json:"postgresql_tables"`
}

type ExcludeObjectsPostgresqlSchemasPostgresqlTablesState struct {
	Table             string                                                                  `json:"table"`
	PostgresqlColumns []ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsState `json:"postgresql_columns"`
}

type ExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsState struct {
	Column          string  `json:"column"`
	DataType        string  `json:"data_type"`
	Length          float64 `json:"length"`
	Nullable        bool    `json:"nullable"`
	OrdinalPosition float64 `json:"ordinal_position"`
	Precision       float64 `json:"precision"`
	PrimaryKey      bool    `json:"primary_key"`
	Scale           float64 `json:"scale"`
}

type PostgresqlSourceConfigIncludeObjectsState struct {
	PostgresqlSchemas []IncludeObjectsPostgresqlSchemasState `json:"postgresql_schemas"`
}

type IncludeObjectsPostgresqlSchemasState struct {
	Schema           string                                                 `json:"schema"`
	PostgresqlTables []IncludeObjectsPostgresqlSchemasPostgresqlTablesState `json:"postgresql_tables"`
}

type IncludeObjectsPostgresqlSchemasPostgresqlTablesState struct {
	Table             string                                                                  `json:"table"`
	PostgresqlColumns []IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsState `json:"postgresql_columns"`
}

type IncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsState struct {
	Column          string  `json:"column"`
	DataType        string  `json:"data_type"`
	Length          float64 `json:"length"`
	Nullable        bool    `json:"nullable"`
	OrdinalPosition float64 `json:"ordinal_position"`
	Precision       float64 `json:"precision"`
	PrimaryKey      bool    `json:"primary_key"`
	Scale           float64 `json:"scale"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
