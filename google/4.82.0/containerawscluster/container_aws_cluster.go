// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package containerawscluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type WorkloadIdentityConfig struct{}

type Authorization struct {
	// AdminUsers: min=1
	AdminUsers []AdminUsers `hcl:"admin_users,block" validate:"min=1"`
}

type AdminUsers struct {
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type ControlPlane struct {
	// IamInstanceProfile: string, required
	IamInstanceProfile terra.StringValue `hcl:"iam_instance_profile,attr" validate:"required"`
	// InstanceType: string, optional
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// SecurityGroupIds: list of string, optional
	SecurityGroupIds terra.ListValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds: list of string, required
	SubnetIds terra.ListValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// AwsServicesAuthentication: required
	AwsServicesAuthentication *AwsServicesAuthentication `hcl:"aws_services_authentication,block" validate:"required"`
	// ConfigEncryption: required
	ConfigEncryption *ConfigEncryption `hcl:"config_encryption,block" validate:"required"`
	// DatabaseEncryption: required
	DatabaseEncryption *DatabaseEncryption `hcl:"database_encryption,block" validate:"required"`
	// MainVolume: optional
	MainVolume *MainVolume `hcl:"main_volume,block"`
	// ProxyConfig: optional
	ProxyConfig *ProxyConfig `hcl:"proxy_config,block"`
	// RootVolume: optional
	RootVolume *RootVolume `hcl:"root_volume,block"`
	// SshConfig: optional
	SshConfig *SshConfig `hcl:"ssh_config,block"`
}

type AwsServicesAuthentication struct {
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// RoleSessionName: string, optional
	RoleSessionName terra.StringValue `hcl:"role_session_name,attr"`
}

type ConfigEncryption struct {
	// KmsKeyArn: string, required
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr" validate:"required"`
}

type DatabaseEncryption struct {
	// KmsKeyArn: string, required
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr" validate:"required"`
}

type MainVolume struct {
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// SizeGib: number, optional
	SizeGib terra.NumberValue `hcl:"size_gib,attr"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// VolumeType: string, optional
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type ProxyConfig struct {
	// SecretArn: string, required
	SecretArn terra.StringValue `hcl:"secret_arn,attr" validate:"required"`
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type RootVolume struct {
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// SizeGib: number, optional
	SizeGib terra.NumberValue `hcl:"size_gib,attr"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// VolumeType: string, optional
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type SshConfig struct {
	// Ec2KeyPair: string, required
	Ec2KeyPair terra.StringValue `hcl:"ec2_key_pair,attr" validate:"required"`
}

type Fleet struct {
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}

type Networking struct {
	// PerNodePoolSgRulesDisabled: bool, optional
	PerNodePoolSgRulesDisabled terra.BoolValue `hcl:"per_node_pool_sg_rules_disabled,attr"`
	// PodAddressCidrBlocks: list of string, required
	PodAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"pod_address_cidr_blocks,attr" validate:"required"`
	// ServiceAddressCidrBlocks: list of string, required
	ServiceAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"service_address_cidr_blocks,attr" validate:"required"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type WorkloadIdentityConfigAttributes struct {
	ref terra.Reference
}

func (wic WorkloadIdentityConfigAttributes) InternalRef() (terra.Reference, error) {
	return wic.ref, nil
}

func (wic WorkloadIdentityConfigAttributes) InternalWithRef(ref terra.Reference) WorkloadIdentityConfigAttributes {
	return WorkloadIdentityConfigAttributes{ref: ref}
}

func (wic WorkloadIdentityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wic.ref.InternalTokens()
}

func (wic WorkloadIdentityConfigAttributes) IdentityProvider() terra.StringValue {
	return terra.ReferenceAsString(wic.ref.Append("identity_provider"))
}

func (wic WorkloadIdentityConfigAttributes) IssuerUri() terra.StringValue {
	return terra.ReferenceAsString(wic.ref.Append("issuer_uri"))
}

func (wic WorkloadIdentityConfigAttributes) WorkloadPool() terra.StringValue {
	return terra.ReferenceAsString(wic.ref.Append("workload_pool"))
}

type AuthorizationAttributes struct {
	ref terra.Reference
}

func (a AuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthorizationAttributes) InternalWithRef(ref terra.Reference) AuthorizationAttributes {
	return AuthorizationAttributes{ref: ref}
}

func (a AuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthorizationAttributes) AdminUsers() terra.ListValue[AdminUsersAttributes] {
	return terra.ReferenceAsList[AdminUsersAttributes](a.ref.Append("admin_users"))
}

type AdminUsersAttributes struct {
	ref terra.Reference
}

func (au AdminUsersAttributes) InternalRef() (terra.Reference, error) {
	return au.ref, nil
}

func (au AdminUsersAttributes) InternalWithRef(ref terra.Reference) AdminUsersAttributes {
	return AdminUsersAttributes{ref: ref}
}

func (au AdminUsersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return au.ref.InternalTokens()
}

func (au AdminUsersAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("username"))
}

type ControlPlaneAttributes struct {
	ref terra.Reference
}

func (cp ControlPlaneAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp ControlPlaneAttributes) InternalWithRef(ref terra.Reference) ControlPlaneAttributes {
	return ControlPlaneAttributes{ref: ref}
}

func (cp ControlPlaneAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp ControlPlaneAttributes) IamInstanceProfile() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("iam_instance_profile"))
}

func (cp ControlPlaneAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("instance_type"))
}

func (cp ControlPlaneAttributes) SecurityGroupIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("security_group_ids"))
}

func (cp ControlPlaneAttributes) SubnetIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("subnet_ids"))
}

func (cp ControlPlaneAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cp.ref.Append("tags"))
}

func (cp ControlPlaneAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("version"))
}

func (cp ControlPlaneAttributes) AwsServicesAuthentication() terra.ListValue[AwsServicesAuthenticationAttributes] {
	return terra.ReferenceAsList[AwsServicesAuthenticationAttributes](cp.ref.Append("aws_services_authentication"))
}

func (cp ControlPlaneAttributes) ConfigEncryption() terra.ListValue[ConfigEncryptionAttributes] {
	return terra.ReferenceAsList[ConfigEncryptionAttributes](cp.ref.Append("config_encryption"))
}

func (cp ControlPlaneAttributes) DatabaseEncryption() terra.ListValue[DatabaseEncryptionAttributes] {
	return terra.ReferenceAsList[DatabaseEncryptionAttributes](cp.ref.Append("database_encryption"))
}

func (cp ControlPlaneAttributes) MainVolume() terra.ListValue[MainVolumeAttributes] {
	return terra.ReferenceAsList[MainVolumeAttributes](cp.ref.Append("main_volume"))
}

func (cp ControlPlaneAttributes) ProxyConfig() terra.ListValue[ProxyConfigAttributes] {
	return terra.ReferenceAsList[ProxyConfigAttributes](cp.ref.Append("proxy_config"))
}

func (cp ControlPlaneAttributes) RootVolume() terra.ListValue[RootVolumeAttributes] {
	return terra.ReferenceAsList[RootVolumeAttributes](cp.ref.Append("root_volume"))
}

func (cp ControlPlaneAttributes) SshConfig() terra.ListValue[SshConfigAttributes] {
	return terra.ReferenceAsList[SshConfigAttributes](cp.ref.Append("ssh_config"))
}

type AwsServicesAuthenticationAttributes struct {
	ref terra.Reference
}

func (asa AwsServicesAuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return asa.ref, nil
}

func (asa AwsServicesAuthenticationAttributes) InternalWithRef(ref terra.Reference) AwsServicesAuthenticationAttributes {
	return AwsServicesAuthenticationAttributes{ref: ref}
}

func (asa AwsServicesAuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asa.ref.InternalTokens()
}

func (asa AwsServicesAuthenticationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("role_arn"))
}

func (asa AwsServicesAuthenticationAttributes) RoleSessionName() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("role_session_name"))
}

type ConfigEncryptionAttributes struct {
	ref terra.Reference
}

func (ce ConfigEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return ce.ref, nil
}

func (ce ConfigEncryptionAttributes) InternalWithRef(ref terra.Reference) ConfigEncryptionAttributes {
	return ConfigEncryptionAttributes{ref: ref}
}

func (ce ConfigEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ce.ref.InternalTokens()
}

func (ce ConfigEncryptionAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(ce.ref.Append("kms_key_arn"))
}

type DatabaseEncryptionAttributes struct {
	ref terra.Reference
}

func (de DatabaseEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de DatabaseEncryptionAttributes) InternalWithRef(ref terra.Reference) DatabaseEncryptionAttributes {
	return DatabaseEncryptionAttributes{ref: ref}
}

func (de DatabaseEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de DatabaseEncryptionAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("kms_key_arn"))
}

type MainVolumeAttributes struct {
	ref terra.Reference
}

func (mv MainVolumeAttributes) InternalRef() (terra.Reference, error) {
	return mv.ref, nil
}

func (mv MainVolumeAttributes) InternalWithRef(ref terra.Reference) MainVolumeAttributes {
	return MainVolumeAttributes{ref: ref}
}

func (mv MainVolumeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mv.ref.InternalTokens()
}

func (mv MainVolumeAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(mv.ref.Append("iops"))
}

func (mv MainVolumeAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(mv.ref.Append("kms_key_arn"))
}

func (mv MainVolumeAttributes) SizeGib() terra.NumberValue {
	return terra.ReferenceAsNumber(mv.ref.Append("size_gib"))
}

func (mv MainVolumeAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(mv.ref.Append("throughput"))
}

func (mv MainVolumeAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(mv.ref.Append("volume_type"))
}

type ProxyConfigAttributes struct {
	ref terra.Reference
}

func (pc ProxyConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc ProxyConfigAttributes) InternalWithRef(ref terra.Reference) ProxyConfigAttributes {
	return ProxyConfigAttributes{ref: ref}
}

func (pc ProxyConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc ProxyConfigAttributes) SecretArn() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("secret_arn"))
}

func (pc ProxyConfigAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("secret_version"))
}

type RootVolumeAttributes struct {
	ref terra.Reference
}

func (rv RootVolumeAttributes) InternalRef() (terra.Reference, error) {
	return rv.ref, nil
}

func (rv RootVolumeAttributes) InternalWithRef(ref terra.Reference) RootVolumeAttributes {
	return RootVolumeAttributes{ref: ref}
}

func (rv RootVolumeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rv.ref.InternalTokens()
}

func (rv RootVolumeAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(rv.ref.Append("iops"))
}

func (rv RootVolumeAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(rv.ref.Append("kms_key_arn"))
}

func (rv RootVolumeAttributes) SizeGib() terra.NumberValue {
	return terra.ReferenceAsNumber(rv.ref.Append("size_gib"))
}

func (rv RootVolumeAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(rv.ref.Append("throughput"))
}

func (rv RootVolumeAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(rv.ref.Append("volume_type"))
}

type SshConfigAttributes struct {
	ref terra.Reference
}

func (sc SshConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SshConfigAttributes) InternalWithRef(ref terra.Reference) SshConfigAttributes {
	return SshConfigAttributes{ref: ref}
}

func (sc SshConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SshConfigAttributes) Ec2KeyPair() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("ec2_key_pair"))
}

type FleetAttributes struct {
	ref terra.Reference
}

func (f FleetAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FleetAttributes) InternalWithRef(ref terra.Reference) FleetAttributes {
	return FleetAttributes{ref: ref}
}

func (f FleetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FleetAttributes) Membership() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("membership"))
}

func (f FleetAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("project"))
}

type NetworkingAttributes struct {
	ref terra.Reference
}

func (n NetworkingAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NetworkingAttributes) InternalWithRef(ref terra.Reference) NetworkingAttributes {
	return NetworkingAttributes{ref: ref}
}

func (n NetworkingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NetworkingAttributes) PerNodePoolSgRulesDisabled() terra.BoolValue {
	return terra.ReferenceAsBool(n.ref.Append("per_node_pool_sg_rules_disabled"))
}

func (n NetworkingAttributes) PodAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("pod_address_cidr_blocks"))
}

func (n NetworkingAttributes) ServiceAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("service_address_cidr_blocks"))
}

func (n NetworkingAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("vpc_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type WorkloadIdentityConfigState struct {
	IdentityProvider string `json:"identity_provider"`
	IssuerUri        string `json:"issuer_uri"`
	WorkloadPool     string `json:"workload_pool"`
}

type AuthorizationState struct {
	AdminUsers []AdminUsersState `json:"admin_users"`
}

type AdminUsersState struct {
	Username string `json:"username"`
}

type ControlPlaneState struct {
	IamInstanceProfile        string                           `json:"iam_instance_profile"`
	InstanceType              string                           `json:"instance_type"`
	SecurityGroupIds          []string                         `json:"security_group_ids"`
	SubnetIds                 []string                         `json:"subnet_ids"`
	Tags                      map[string]string                `json:"tags"`
	Version                   string                           `json:"version"`
	AwsServicesAuthentication []AwsServicesAuthenticationState `json:"aws_services_authentication"`
	ConfigEncryption          []ConfigEncryptionState          `json:"config_encryption"`
	DatabaseEncryption        []DatabaseEncryptionState        `json:"database_encryption"`
	MainVolume                []MainVolumeState                `json:"main_volume"`
	ProxyConfig               []ProxyConfigState               `json:"proxy_config"`
	RootVolume                []RootVolumeState                `json:"root_volume"`
	SshConfig                 []SshConfigState                 `json:"ssh_config"`
}

type AwsServicesAuthenticationState struct {
	RoleArn         string `json:"role_arn"`
	RoleSessionName string `json:"role_session_name"`
}

type ConfigEncryptionState struct {
	KmsKeyArn string `json:"kms_key_arn"`
}

type DatabaseEncryptionState struct {
	KmsKeyArn string `json:"kms_key_arn"`
}

type MainVolumeState struct {
	Iops       float64 `json:"iops"`
	KmsKeyArn  string  `json:"kms_key_arn"`
	SizeGib    float64 `json:"size_gib"`
	Throughput float64 `json:"throughput"`
	VolumeType string  `json:"volume_type"`
}

type ProxyConfigState struct {
	SecretArn     string `json:"secret_arn"`
	SecretVersion string `json:"secret_version"`
}

type RootVolumeState struct {
	Iops       float64 `json:"iops"`
	KmsKeyArn  string  `json:"kms_key_arn"`
	SizeGib    float64 `json:"size_gib"`
	Throughput float64 `json:"throughput"`
	VolumeType string  `json:"volume_type"`
}

type SshConfigState struct {
	Ec2KeyPair string `json:"ec2_key_pair"`
}

type FleetState struct {
	Membership string `json:"membership"`
	Project    string `json:"project"`
}

type NetworkingState struct {
	PerNodePoolSgRulesDisabled bool     `json:"per_node_pool_sg_rules_disabled"`
	PodAddressCidrBlocks       []string `json:"pod_address_cidr_blocks"`
	ServiceAddressCidrBlocks   []string `json:"service_address_cidr_blocks"`
	VpcId                      string   `json:"vpc_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
