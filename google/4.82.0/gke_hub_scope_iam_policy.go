// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGkeHubScopeIamPolicy creates a new instance of [GkeHubScopeIamPolicy].
func NewGkeHubScopeIamPolicy(name string, args GkeHubScopeIamPolicyArgs) *GkeHubScopeIamPolicy {
	return &GkeHubScopeIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeHubScopeIamPolicy)(nil)

// GkeHubScopeIamPolicy represents the Terraform resource google_gke_hub_scope_iam_policy.
type GkeHubScopeIamPolicy struct {
	Name      string
	Args      GkeHubScopeIamPolicyArgs
	state     *gkeHubScopeIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GkeHubScopeIamPolicy].
func (ghsip *GkeHubScopeIamPolicy) Type() string {
	return "google_gke_hub_scope_iam_policy"
}

// LocalName returns the local name for [GkeHubScopeIamPolicy].
func (ghsip *GkeHubScopeIamPolicy) LocalName() string {
	return ghsip.Name
}

// Configuration returns the configuration (args) for [GkeHubScopeIamPolicy].
func (ghsip *GkeHubScopeIamPolicy) Configuration() interface{} {
	return ghsip.Args
}

// DependOn is used for other resources to depend on [GkeHubScopeIamPolicy].
func (ghsip *GkeHubScopeIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ghsip)
}

// Dependencies returns the list of resources [GkeHubScopeIamPolicy] depends_on.
func (ghsip *GkeHubScopeIamPolicy) Dependencies() terra.Dependencies {
	return ghsip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GkeHubScopeIamPolicy].
func (ghsip *GkeHubScopeIamPolicy) LifecycleManagement() *terra.Lifecycle {
	return ghsip.Lifecycle
}

// Attributes returns the attributes for [GkeHubScopeIamPolicy].
func (ghsip *GkeHubScopeIamPolicy) Attributes() gkeHubScopeIamPolicyAttributes {
	return gkeHubScopeIamPolicyAttributes{ref: terra.ReferenceResource(ghsip)}
}

// ImportState imports the given attribute values into [GkeHubScopeIamPolicy]'s state.
func (ghsip *GkeHubScopeIamPolicy) ImportState(av io.Reader) error {
	ghsip.state = &gkeHubScopeIamPolicyState{}
	if err := json.NewDecoder(av).Decode(ghsip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ghsip.Type(), ghsip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GkeHubScopeIamPolicy] has state.
func (ghsip *GkeHubScopeIamPolicy) State() (*gkeHubScopeIamPolicyState, bool) {
	return ghsip.state, ghsip.state != nil
}

// StateMust returns the state for [GkeHubScopeIamPolicy]. Panics if the state is nil.
func (ghsip *GkeHubScopeIamPolicy) StateMust() *gkeHubScopeIamPolicyState {
	if ghsip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ghsip.Type(), ghsip.LocalName()))
	}
	return ghsip.state
}

// GkeHubScopeIamPolicyArgs contains the configurations for google_gke_hub_scope_iam_policy.
type GkeHubScopeIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ScopeId: string, required
	ScopeId terra.StringValue `hcl:"scope_id,attr" validate:"required"`
}
type gkeHubScopeIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_gke_hub_scope_iam_policy.
func (ghsip gkeHubScopeIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(ghsip.ref.Append("etag"))
}

// Id returns a reference to field id of google_gke_hub_scope_iam_policy.
func (ghsip gkeHubScopeIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ghsip.ref.Append("id"))
}

// PolicyData returns a reference to field policy_data of google_gke_hub_scope_iam_policy.
func (ghsip gkeHubScopeIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(ghsip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_gke_hub_scope_iam_policy.
func (ghsip gkeHubScopeIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ghsip.ref.Append("project"))
}

// ScopeId returns a reference to field scope_id of google_gke_hub_scope_iam_policy.
func (ghsip gkeHubScopeIamPolicyAttributes) ScopeId() terra.StringValue {
	return terra.ReferenceAsString(ghsip.ref.Append("scope_id"))
}

type gkeHubScopeIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	ScopeId    string `json:"scope_id"`
}
