// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package bigquerydatatransferconfig

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type EmailPreferences struct {
	// EnableFailureEmail: bool, required
	EnableFailureEmail terra.BoolValue `hcl:"enable_failure_email,attr" validate:"required"`
}

type ScheduleOptions struct {
	// DisableAutoScheduling: bool, optional
	DisableAutoScheduling terra.BoolValue `hcl:"disable_auto_scheduling,attr"`
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
}

type SensitiveParams struct {
	// SecretAccessKey: string, required
	SecretAccessKey terra.StringValue `hcl:"secret_access_key,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type EmailPreferencesAttributes struct {
	ref terra.Reference
}

func (ep EmailPreferencesAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep EmailPreferencesAttributes) InternalWithRef(ref terra.Reference) EmailPreferencesAttributes {
	return EmailPreferencesAttributes{ref: ref}
}

func (ep EmailPreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep EmailPreferencesAttributes) EnableFailureEmail() terra.BoolValue {
	return terra.ReferenceAsBool(ep.ref.Append("enable_failure_email"))
}

type ScheduleOptionsAttributes struct {
	ref terra.Reference
}

func (so ScheduleOptionsAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so ScheduleOptionsAttributes) InternalWithRef(ref terra.Reference) ScheduleOptionsAttributes {
	return ScheduleOptionsAttributes{ref: ref}
}

func (so ScheduleOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so ScheduleOptionsAttributes) DisableAutoScheduling() terra.BoolValue {
	return terra.ReferenceAsBool(so.ref.Append("disable_auto_scheduling"))
}

func (so ScheduleOptionsAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("end_time"))
}

func (so ScheduleOptionsAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("start_time"))
}

type SensitiveParamsAttributes struct {
	ref terra.Reference
}

func (sp SensitiveParamsAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SensitiveParamsAttributes) InternalWithRef(ref terra.Reference) SensitiveParamsAttributes {
	return SensitiveParamsAttributes{ref: ref}
}

func (sp SensitiveParamsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SensitiveParamsAttributes) SecretAccessKey() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("secret_access_key"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EmailPreferencesState struct {
	EnableFailureEmail bool `json:"enable_failure_email"`
}

type ScheduleOptionsState struct {
	DisableAutoScheduling bool   `json:"disable_auto_scheduling"`
	EndTime               string `json:"end_time"`
	StartTime             string `json:"start_time"`
}

type SensitiveParamsState struct {
	SecretAccessKey string `json:"secret_access_key"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
