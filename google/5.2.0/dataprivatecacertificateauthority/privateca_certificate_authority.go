// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataprivatecacertificateauthority

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AccessUrls struct{}

type Config struct {
	// SubjectConfig: min=0
	SubjectConfig []SubjectConfig `hcl:"subject_config,block" validate:"min=0"`
	// X509Config: min=0
	X509Config []X509Config `hcl:"x509_config,block" validate:"min=0"`
}

type SubjectConfig struct {
	// Subject: min=0
	Subject []Subject `hcl:"subject,block" validate:"min=0"`
	// SubjectAltName: min=0
	SubjectAltName []SubjectAltName `hcl:"subject_alt_name,block" validate:"min=0"`
}

type Subject struct{}

type SubjectAltName struct{}

type X509Config struct {
	// AdditionalExtensions: min=0
	AdditionalExtensions []AdditionalExtensions `hcl:"additional_extensions,block" validate:"min=0"`
	// CaOptions: min=0
	CaOptions []CaOptions `hcl:"ca_options,block" validate:"min=0"`
	// KeyUsage: min=0
	KeyUsage []KeyUsage `hcl:"key_usage,block" validate:"min=0"`
	// NameConstraints: min=0
	NameConstraints []NameConstraints `hcl:"name_constraints,block" validate:"min=0"`
	// PolicyIds: min=0
	PolicyIds []PolicyIds `hcl:"policy_ids,block" validate:"min=0"`
}

type AdditionalExtensions struct {
	// ObjectId: min=0
	ObjectId []ObjectId `hcl:"object_id,block" validate:"min=0"`
}

type ObjectId struct{}

type CaOptions struct{}

type KeyUsage struct {
	// BaseKeyUsage: min=0
	BaseKeyUsage []BaseKeyUsage `hcl:"base_key_usage,block" validate:"min=0"`
	// ExtendedKeyUsage: min=0
	ExtendedKeyUsage []ExtendedKeyUsage `hcl:"extended_key_usage,block" validate:"min=0"`
	// UnknownExtendedKeyUsages: min=0
	UnknownExtendedKeyUsages []UnknownExtendedKeyUsages `hcl:"unknown_extended_key_usages,block" validate:"min=0"`
}

type BaseKeyUsage struct{}

type ExtendedKeyUsage struct{}

type UnknownExtendedKeyUsages struct{}

type NameConstraints struct{}

type PolicyIds struct{}

type KeySpec struct{}

type SubordinateConfig struct {
	// PemIssuerChain: min=0
	PemIssuerChain []PemIssuerChain `hcl:"pem_issuer_chain,block" validate:"min=0"`
}

type PemIssuerChain struct{}

type AccessUrlsAttributes struct {
	ref terra.Reference
}

func (au AccessUrlsAttributes) InternalRef() (terra.Reference, error) {
	return au.ref, nil
}

func (au AccessUrlsAttributes) InternalWithRef(ref terra.Reference) AccessUrlsAttributes {
	return AccessUrlsAttributes{ref: ref}
}

func (au AccessUrlsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return au.ref.InternalTokens()
}

func (au AccessUrlsAttributes) CaCertificateAccessUrl() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("ca_certificate_access_url"))
}

func (au AccessUrlsAttributes) CrlAccessUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](au.ref.Append("crl_access_urls"))
}

type ConfigAttributes struct {
	ref terra.Reference
}

func (c ConfigAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigAttributes) InternalWithRef(ref terra.Reference) ConfigAttributes {
	return ConfigAttributes{ref: ref}
}

func (c ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigAttributes) SubjectConfig() terra.ListValue[SubjectConfigAttributes] {
	return terra.ReferenceAsList[SubjectConfigAttributes](c.ref.Append("subject_config"))
}

func (c ConfigAttributes) X509Config() terra.ListValue[X509ConfigAttributes] {
	return terra.ReferenceAsList[X509ConfigAttributes](c.ref.Append("x509_config"))
}

type SubjectConfigAttributes struct {
	ref terra.Reference
}

func (sc SubjectConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SubjectConfigAttributes) InternalWithRef(ref terra.Reference) SubjectConfigAttributes {
	return SubjectConfigAttributes{ref: ref}
}

func (sc SubjectConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SubjectConfigAttributes) Subject() terra.ListValue[SubjectAttributes] {
	return terra.ReferenceAsList[SubjectAttributes](sc.ref.Append("subject"))
}

func (sc SubjectConfigAttributes) SubjectAltName() terra.ListValue[SubjectAltNameAttributes] {
	return terra.ReferenceAsList[SubjectAltNameAttributes](sc.ref.Append("subject_alt_name"))
}

type SubjectAttributes struct {
	ref terra.Reference
}

func (s SubjectAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SubjectAttributes) InternalWithRef(ref terra.Reference) SubjectAttributes {
	return SubjectAttributes{ref: ref}
}

func (s SubjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SubjectAttributes) CommonName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("common_name"))
}

func (s SubjectAttributes) CountryCode() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("country_code"))
}

func (s SubjectAttributes) Locality() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("locality"))
}

func (s SubjectAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("organization"))
}

func (s SubjectAttributes) OrganizationalUnit() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("organizational_unit"))
}

func (s SubjectAttributes) PostalCode() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("postal_code"))
}

func (s SubjectAttributes) Province() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("province"))
}

func (s SubjectAttributes) StreetAddress() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("street_address"))
}

type SubjectAltNameAttributes struct {
	ref terra.Reference
}

func (san SubjectAltNameAttributes) InternalRef() (terra.Reference, error) {
	return san.ref, nil
}

func (san SubjectAltNameAttributes) InternalWithRef(ref terra.Reference) SubjectAltNameAttributes {
	return SubjectAltNameAttributes{ref: ref}
}

func (san SubjectAltNameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return san.ref.InternalTokens()
}

func (san SubjectAltNameAttributes) DnsNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](san.ref.Append("dns_names"))
}

func (san SubjectAltNameAttributes) EmailAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](san.ref.Append("email_addresses"))
}

func (san SubjectAltNameAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](san.ref.Append("ip_addresses"))
}

func (san SubjectAltNameAttributes) Uris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](san.ref.Append("uris"))
}

type X509ConfigAttributes struct {
	ref terra.Reference
}

func (xc X509ConfigAttributes) InternalRef() (terra.Reference, error) {
	return xc.ref, nil
}

func (xc X509ConfigAttributes) InternalWithRef(ref terra.Reference) X509ConfigAttributes {
	return X509ConfigAttributes{ref: ref}
}

func (xc X509ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return xc.ref.InternalTokens()
}

func (xc X509ConfigAttributes) AiaOcspServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](xc.ref.Append("aia_ocsp_servers"))
}

func (xc X509ConfigAttributes) AdditionalExtensions() terra.ListValue[AdditionalExtensionsAttributes] {
	return terra.ReferenceAsList[AdditionalExtensionsAttributes](xc.ref.Append("additional_extensions"))
}

func (xc X509ConfigAttributes) CaOptions() terra.ListValue[CaOptionsAttributes] {
	return terra.ReferenceAsList[CaOptionsAttributes](xc.ref.Append("ca_options"))
}

func (xc X509ConfigAttributes) KeyUsage() terra.ListValue[KeyUsageAttributes] {
	return terra.ReferenceAsList[KeyUsageAttributes](xc.ref.Append("key_usage"))
}

func (xc X509ConfigAttributes) NameConstraints() terra.ListValue[NameConstraintsAttributes] {
	return terra.ReferenceAsList[NameConstraintsAttributes](xc.ref.Append("name_constraints"))
}

func (xc X509ConfigAttributes) PolicyIds() terra.ListValue[PolicyIdsAttributes] {
	return terra.ReferenceAsList[PolicyIdsAttributes](xc.ref.Append("policy_ids"))
}

type AdditionalExtensionsAttributes struct {
	ref terra.Reference
}

func (ae AdditionalExtensionsAttributes) InternalRef() (terra.Reference, error) {
	return ae.ref, nil
}

func (ae AdditionalExtensionsAttributes) InternalWithRef(ref terra.Reference) AdditionalExtensionsAttributes {
	return AdditionalExtensionsAttributes{ref: ref}
}

func (ae AdditionalExtensionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ae.ref.InternalTokens()
}

func (ae AdditionalExtensionsAttributes) Critical() terra.BoolValue {
	return terra.ReferenceAsBool(ae.ref.Append("critical"))
}

func (ae AdditionalExtensionsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("value"))
}

func (ae AdditionalExtensionsAttributes) ObjectId() terra.ListValue[ObjectIdAttributes] {
	return terra.ReferenceAsList[ObjectIdAttributes](ae.ref.Append("object_id"))
}

type ObjectIdAttributes struct {
	ref terra.Reference
}

func (oi ObjectIdAttributes) InternalRef() (terra.Reference, error) {
	return oi.ref, nil
}

func (oi ObjectIdAttributes) InternalWithRef(ref terra.Reference) ObjectIdAttributes {
	return ObjectIdAttributes{ref: ref}
}

func (oi ObjectIdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oi.ref.InternalTokens()
}

func (oi ObjectIdAttributes) ObjectIdPath() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](oi.ref.Append("object_id_path"))
}

type CaOptionsAttributes struct {
	ref terra.Reference
}

func (co CaOptionsAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co CaOptionsAttributes) InternalWithRef(ref terra.Reference) CaOptionsAttributes {
	return CaOptionsAttributes{ref: ref}
}

func (co CaOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co CaOptionsAttributes) IsCa() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("is_ca"))
}

func (co CaOptionsAttributes) MaxIssuerPathLength() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("max_issuer_path_length"))
}

func (co CaOptionsAttributes) NonCa() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("non_ca"))
}

func (co CaOptionsAttributes) ZeroMaxIssuerPathLength() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("zero_max_issuer_path_length"))
}

type KeyUsageAttributes struct {
	ref terra.Reference
}

func (ku KeyUsageAttributes) InternalRef() (terra.Reference, error) {
	return ku.ref, nil
}

func (ku KeyUsageAttributes) InternalWithRef(ref terra.Reference) KeyUsageAttributes {
	return KeyUsageAttributes{ref: ref}
}

func (ku KeyUsageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ku.ref.InternalTokens()
}

func (ku KeyUsageAttributes) BaseKeyUsage() terra.ListValue[BaseKeyUsageAttributes] {
	return terra.ReferenceAsList[BaseKeyUsageAttributes](ku.ref.Append("base_key_usage"))
}

func (ku KeyUsageAttributes) ExtendedKeyUsage() terra.ListValue[ExtendedKeyUsageAttributes] {
	return terra.ReferenceAsList[ExtendedKeyUsageAttributes](ku.ref.Append("extended_key_usage"))
}

func (ku KeyUsageAttributes) UnknownExtendedKeyUsages() terra.ListValue[UnknownExtendedKeyUsagesAttributes] {
	return terra.ReferenceAsList[UnknownExtendedKeyUsagesAttributes](ku.ref.Append("unknown_extended_key_usages"))
}

type BaseKeyUsageAttributes struct {
	ref terra.Reference
}

func (bku BaseKeyUsageAttributes) InternalRef() (terra.Reference, error) {
	return bku.ref, nil
}

func (bku BaseKeyUsageAttributes) InternalWithRef(ref terra.Reference) BaseKeyUsageAttributes {
	return BaseKeyUsageAttributes{ref: ref}
}

func (bku BaseKeyUsageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bku.ref.InternalTokens()
}

func (bku BaseKeyUsageAttributes) CertSign() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("cert_sign"))
}

func (bku BaseKeyUsageAttributes) ContentCommitment() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("content_commitment"))
}

func (bku BaseKeyUsageAttributes) CrlSign() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("crl_sign"))
}

func (bku BaseKeyUsageAttributes) DataEncipherment() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("data_encipherment"))
}

func (bku BaseKeyUsageAttributes) DecipherOnly() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("decipher_only"))
}

func (bku BaseKeyUsageAttributes) DigitalSignature() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("digital_signature"))
}

func (bku BaseKeyUsageAttributes) EncipherOnly() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("encipher_only"))
}

func (bku BaseKeyUsageAttributes) KeyAgreement() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("key_agreement"))
}

func (bku BaseKeyUsageAttributes) KeyEncipherment() terra.BoolValue {
	return terra.ReferenceAsBool(bku.ref.Append("key_encipherment"))
}

type ExtendedKeyUsageAttributes struct {
	ref terra.Reference
}

func (eku ExtendedKeyUsageAttributes) InternalRef() (terra.Reference, error) {
	return eku.ref, nil
}

func (eku ExtendedKeyUsageAttributes) InternalWithRef(ref terra.Reference) ExtendedKeyUsageAttributes {
	return ExtendedKeyUsageAttributes{ref: ref}
}

func (eku ExtendedKeyUsageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eku.ref.InternalTokens()
}

func (eku ExtendedKeyUsageAttributes) ClientAuth() terra.BoolValue {
	return terra.ReferenceAsBool(eku.ref.Append("client_auth"))
}

func (eku ExtendedKeyUsageAttributes) CodeSigning() terra.BoolValue {
	return terra.ReferenceAsBool(eku.ref.Append("code_signing"))
}

func (eku ExtendedKeyUsageAttributes) EmailProtection() terra.BoolValue {
	return terra.ReferenceAsBool(eku.ref.Append("email_protection"))
}

func (eku ExtendedKeyUsageAttributes) OcspSigning() terra.BoolValue {
	return terra.ReferenceAsBool(eku.ref.Append("ocsp_signing"))
}

func (eku ExtendedKeyUsageAttributes) ServerAuth() terra.BoolValue {
	return terra.ReferenceAsBool(eku.ref.Append("server_auth"))
}

func (eku ExtendedKeyUsageAttributes) TimeStamping() terra.BoolValue {
	return terra.ReferenceAsBool(eku.ref.Append("time_stamping"))
}

type UnknownExtendedKeyUsagesAttributes struct {
	ref terra.Reference
}

func (ueku UnknownExtendedKeyUsagesAttributes) InternalRef() (terra.Reference, error) {
	return ueku.ref, nil
}

func (ueku UnknownExtendedKeyUsagesAttributes) InternalWithRef(ref terra.Reference) UnknownExtendedKeyUsagesAttributes {
	return UnknownExtendedKeyUsagesAttributes{ref: ref}
}

func (ueku UnknownExtendedKeyUsagesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ueku.ref.InternalTokens()
}

func (ueku UnknownExtendedKeyUsagesAttributes) ObjectIdPath() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](ueku.ref.Append("object_id_path"))
}

type NameConstraintsAttributes struct {
	ref terra.Reference
}

func (nc NameConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NameConstraintsAttributes) InternalWithRef(ref terra.Reference) NameConstraintsAttributes {
	return NameConstraintsAttributes{ref: ref}
}

func (nc NameConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NameConstraintsAttributes) Critical() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("critical"))
}

func (nc NameConstraintsAttributes) ExcludedDnsNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("excluded_dns_names"))
}

func (nc NameConstraintsAttributes) ExcludedEmailAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("excluded_email_addresses"))
}

func (nc NameConstraintsAttributes) ExcludedIpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("excluded_ip_ranges"))
}

func (nc NameConstraintsAttributes) ExcludedUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("excluded_uris"))
}

func (nc NameConstraintsAttributes) PermittedDnsNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("permitted_dns_names"))
}

func (nc NameConstraintsAttributes) PermittedEmailAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("permitted_email_addresses"))
}

func (nc NameConstraintsAttributes) PermittedIpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("permitted_ip_ranges"))
}

func (nc NameConstraintsAttributes) PermittedUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("permitted_uris"))
}

type PolicyIdsAttributes struct {
	ref terra.Reference
}

func (pi PolicyIdsAttributes) InternalRef() (terra.Reference, error) {
	return pi.ref, nil
}

func (pi PolicyIdsAttributes) InternalWithRef(ref terra.Reference) PolicyIdsAttributes {
	return PolicyIdsAttributes{ref: ref}
}

func (pi PolicyIdsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pi.ref.InternalTokens()
}

func (pi PolicyIdsAttributes) ObjectIdPath() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](pi.ref.Append("object_id_path"))
}

type KeySpecAttributes struct {
	ref terra.Reference
}

func (ks KeySpecAttributes) InternalRef() (terra.Reference, error) {
	return ks.ref, nil
}

func (ks KeySpecAttributes) InternalWithRef(ref terra.Reference) KeySpecAttributes {
	return KeySpecAttributes{ref: ref}
}

func (ks KeySpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ks.ref.InternalTokens()
}

func (ks KeySpecAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("algorithm"))
}

func (ks KeySpecAttributes) CloudKmsKeyVersion() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("cloud_kms_key_version"))
}

type SubordinateConfigAttributes struct {
	ref terra.Reference
}

func (sc SubordinateConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SubordinateConfigAttributes) InternalWithRef(ref terra.Reference) SubordinateConfigAttributes {
	return SubordinateConfigAttributes{ref: ref}
}

func (sc SubordinateConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SubordinateConfigAttributes) CertificateAuthority() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("certificate_authority"))
}

func (sc SubordinateConfigAttributes) PemIssuerChain() terra.ListValue[PemIssuerChainAttributes] {
	return terra.ReferenceAsList[PemIssuerChainAttributes](sc.ref.Append("pem_issuer_chain"))
}

type PemIssuerChainAttributes struct {
	ref terra.Reference
}

func (pic PemIssuerChainAttributes) InternalRef() (terra.Reference, error) {
	return pic.ref, nil
}

func (pic PemIssuerChainAttributes) InternalWithRef(ref terra.Reference) PemIssuerChainAttributes {
	return PemIssuerChainAttributes{ref: ref}
}

func (pic PemIssuerChainAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pic.ref.InternalTokens()
}

func (pic PemIssuerChainAttributes) PemCertificates() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pic.ref.Append("pem_certificates"))
}

type AccessUrlsState struct {
	CaCertificateAccessUrl string   `json:"ca_certificate_access_url"`
	CrlAccessUrls          []string `json:"crl_access_urls"`
}

type ConfigState struct {
	SubjectConfig []SubjectConfigState `json:"subject_config"`
	X509Config    []X509ConfigState    `json:"x509_config"`
}

type SubjectConfigState struct {
	Subject        []SubjectState        `json:"subject"`
	SubjectAltName []SubjectAltNameState `json:"subject_alt_name"`
}

type SubjectState struct {
	CommonName         string `json:"common_name"`
	CountryCode        string `json:"country_code"`
	Locality           string `json:"locality"`
	Organization       string `json:"organization"`
	OrganizationalUnit string `json:"organizational_unit"`
	PostalCode         string `json:"postal_code"`
	Province           string `json:"province"`
	StreetAddress      string `json:"street_address"`
}

type SubjectAltNameState struct {
	DnsNames       []string `json:"dns_names"`
	EmailAddresses []string `json:"email_addresses"`
	IpAddresses    []string `json:"ip_addresses"`
	Uris           []string `json:"uris"`
}

type X509ConfigState struct {
	AiaOcspServers       []string                    `json:"aia_ocsp_servers"`
	AdditionalExtensions []AdditionalExtensionsState `json:"additional_extensions"`
	CaOptions            []CaOptionsState            `json:"ca_options"`
	KeyUsage             []KeyUsageState             `json:"key_usage"`
	NameConstraints      []NameConstraintsState      `json:"name_constraints"`
	PolicyIds            []PolicyIdsState            `json:"policy_ids"`
}

type AdditionalExtensionsState struct {
	Critical bool            `json:"critical"`
	Value    string          `json:"value"`
	ObjectId []ObjectIdState `json:"object_id"`
}

type ObjectIdState struct {
	ObjectIdPath []float64 `json:"object_id_path"`
}

type CaOptionsState struct {
	IsCa                    bool    `json:"is_ca"`
	MaxIssuerPathLength     float64 `json:"max_issuer_path_length"`
	NonCa                   bool    `json:"non_ca"`
	ZeroMaxIssuerPathLength bool    `json:"zero_max_issuer_path_length"`
}

type KeyUsageState struct {
	BaseKeyUsage             []BaseKeyUsageState             `json:"base_key_usage"`
	ExtendedKeyUsage         []ExtendedKeyUsageState         `json:"extended_key_usage"`
	UnknownExtendedKeyUsages []UnknownExtendedKeyUsagesState `json:"unknown_extended_key_usages"`
}

type BaseKeyUsageState struct {
	CertSign          bool `json:"cert_sign"`
	ContentCommitment bool `json:"content_commitment"`
	CrlSign           bool `json:"crl_sign"`
	DataEncipherment  bool `json:"data_encipherment"`
	DecipherOnly      bool `json:"decipher_only"`
	DigitalSignature  bool `json:"digital_signature"`
	EncipherOnly      bool `json:"encipher_only"`
	KeyAgreement      bool `json:"key_agreement"`
	KeyEncipherment   bool `json:"key_encipherment"`
}

type ExtendedKeyUsageState struct {
	ClientAuth      bool `json:"client_auth"`
	CodeSigning     bool `json:"code_signing"`
	EmailProtection bool `json:"email_protection"`
	OcspSigning     bool `json:"ocsp_signing"`
	ServerAuth      bool `json:"server_auth"`
	TimeStamping    bool `json:"time_stamping"`
}

type UnknownExtendedKeyUsagesState struct {
	ObjectIdPath []float64 `json:"object_id_path"`
}

type NameConstraintsState struct {
	Critical                bool     `json:"critical"`
	ExcludedDnsNames        []string `json:"excluded_dns_names"`
	ExcludedEmailAddresses  []string `json:"excluded_email_addresses"`
	ExcludedIpRanges        []string `json:"excluded_ip_ranges"`
	ExcludedUris            []string `json:"excluded_uris"`
	PermittedDnsNames       []string `json:"permitted_dns_names"`
	PermittedEmailAddresses []string `json:"permitted_email_addresses"`
	PermittedIpRanges       []string `json:"permitted_ip_ranges"`
	PermittedUris           []string `json:"permitted_uris"`
}

type PolicyIdsState struct {
	ObjectIdPath []float64 `json:"object_id_path"`
}

type KeySpecState struct {
	Algorithm          string `json:"algorithm"`
	CloudKmsKeyVersion string `json:"cloud_kms_key_version"`
}

type SubordinateConfigState struct {
	CertificateAuthority string                `json:"certificate_authority"`
	PemIssuerChain       []PemIssuerChainState `json:"pem_issuer_chain"`
}

type PemIssuerChainState struct {
	PemCertificates []string `json:"pem_certificates"`
}
