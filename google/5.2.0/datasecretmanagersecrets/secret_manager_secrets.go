// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datasecretmanagersecrets

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Secrets struct {
	// Replication: min=0
	Replication []Replication `hcl:"replication,block" validate:"min=0"`
	// Rotation: min=0
	Rotation []Rotation `hcl:"rotation,block" validate:"min=0"`
	// Topics: min=0
	Topics []Topics `hcl:"topics,block" validate:"min=0"`
}

type Replication struct {
	// Auto: min=0
	Auto []Auto `hcl:"auto,block" validate:"min=0"`
	// UserManaged: min=0
	UserManaged []UserManaged `hcl:"user_managed,block" validate:"min=0"`
}

type Auto struct {
	// AutoCustomerManagedEncryption: min=0
	CustomerManagedEncryption []AutoCustomerManagedEncryption `hcl:"customer_managed_encryption,block" validate:"min=0"`
}

type AutoCustomerManagedEncryption struct{}

type UserManaged struct {
	// Replicas: min=0
	Replicas []Replicas `hcl:"replicas,block" validate:"min=0"`
}

type Replicas struct {
	// ReplicasCustomerManagedEncryption: min=0
	CustomerManagedEncryption []ReplicasCustomerManagedEncryption `hcl:"customer_managed_encryption,block" validate:"min=0"`
}

type ReplicasCustomerManagedEncryption struct{}

type Rotation struct{}

type Topics struct{}

type SecretsAttributes struct {
	ref terra.Reference
}

func (s SecretsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SecretsAttributes) InternalWithRef(ref terra.Reference) SecretsAttributes {
	return SecretsAttributes{ref: ref}
}

func (s SecretsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SecretsAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("annotations"))
}

func (s SecretsAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("create_time"))
}

func (s SecretsAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("effective_annotations"))
}

func (s SecretsAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("effective_labels"))
}

func (s SecretsAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("expire_time"))
}

func (s SecretsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("labels"))
}

func (s SecretsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s SecretsAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("project"))
}

func (s SecretsAttributes) SecretId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret_id"))
}

func (s SecretsAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("terraform_labels"))
}

func (s SecretsAttributes) Ttl() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("ttl"))
}

func (s SecretsAttributes) VersionAliases() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("version_aliases"))
}

func (s SecretsAttributes) Replication() terra.ListValue[ReplicationAttributes] {
	return terra.ReferenceAsList[ReplicationAttributes](s.ref.Append("replication"))
}

func (s SecretsAttributes) Rotation() terra.ListValue[RotationAttributes] {
	return terra.ReferenceAsList[RotationAttributes](s.ref.Append("rotation"))
}

func (s SecretsAttributes) Topics() terra.ListValue[TopicsAttributes] {
	return terra.ReferenceAsList[TopicsAttributes](s.ref.Append("topics"))
}

type ReplicationAttributes struct {
	ref terra.Reference
}

func (r ReplicationAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ReplicationAttributes) InternalWithRef(ref terra.Reference) ReplicationAttributes {
	return ReplicationAttributes{ref: ref}
}

func (r ReplicationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ReplicationAttributes) Auto() terra.ListValue[AutoAttributes] {
	return terra.ReferenceAsList[AutoAttributes](r.ref.Append("auto"))
}

func (r ReplicationAttributes) UserManaged() terra.ListValue[UserManagedAttributes] {
	return terra.ReferenceAsList[UserManagedAttributes](r.ref.Append("user_managed"))
}

type AutoAttributes struct {
	ref terra.Reference
}

func (a AutoAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AutoAttributes) InternalWithRef(ref terra.Reference) AutoAttributes {
	return AutoAttributes{ref: ref}
}

func (a AutoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AutoAttributes) CustomerManagedEncryption() terra.ListValue[AutoCustomerManagedEncryptionAttributes] {
	return terra.ReferenceAsList[AutoCustomerManagedEncryptionAttributes](a.ref.Append("customer_managed_encryption"))
}

type AutoCustomerManagedEncryptionAttributes struct {
	ref terra.Reference
}

func (cme AutoCustomerManagedEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return cme.ref, nil
}

func (cme AutoCustomerManagedEncryptionAttributes) InternalWithRef(ref terra.Reference) AutoCustomerManagedEncryptionAttributes {
	return AutoCustomerManagedEncryptionAttributes{ref: ref}
}

func (cme AutoCustomerManagedEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cme.ref.InternalTokens()
}

func (cme AutoCustomerManagedEncryptionAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(cme.ref.Append("kms_key_name"))
}

type UserManagedAttributes struct {
	ref terra.Reference
}

func (um UserManagedAttributes) InternalRef() (terra.Reference, error) {
	return um.ref, nil
}

func (um UserManagedAttributes) InternalWithRef(ref terra.Reference) UserManagedAttributes {
	return UserManagedAttributes{ref: ref}
}

func (um UserManagedAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return um.ref.InternalTokens()
}

func (um UserManagedAttributes) Replicas() terra.ListValue[ReplicasAttributes] {
	return terra.ReferenceAsList[ReplicasAttributes](um.ref.Append("replicas"))
}

type ReplicasAttributes struct {
	ref terra.Reference
}

func (r ReplicasAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ReplicasAttributes) InternalWithRef(ref terra.Reference) ReplicasAttributes {
	return ReplicasAttributes{ref: ref}
}

func (r ReplicasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ReplicasAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("location"))
}

func (r ReplicasAttributes) CustomerManagedEncryption() terra.ListValue[ReplicasCustomerManagedEncryptionAttributes] {
	return terra.ReferenceAsList[ReplicasCustomerManagedEncryptionAttributes](r.ref.Append("customer_managed_encryption"))
}

type ReplicasCustomerManagedEncryptionAttributes struct {
	ref terra.Reference
}

func (cme ReplicasCustomerManagedEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return cme.ref, nil
}

func (cme ReplicasCustomerManagedEncryptionAttributes) InternalWithRef(ref terra.Reference) ReplicasCustomerManagedEncryptionAttributes {
	return ReplicasCustomerManagedEncryptionAttributes{ref: ref}
}

func (cme ReplicasCustomerManagedEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cme.ref.InternalTokens()
}

func (cme ReplicasCustomerManagedEncryptionAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(cme.ref.Append("kms_key_name"))
}

type RotationAttributes struct {
	ref terra.Reference
}

func (r RotationAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RotationAttributes) InternalWithRef(ref terra.Reference) RotationAttributes {
	return RotationAttributes{ref: ref}
}

func (r RotationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RotationAttributes) NextRotationTime() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("next_rotation_time"))
}

func (r RotationAttributes) RotationPeriod() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rotation_period"))
}

type TopicsAttributes struct {
	ref terra.Reference
}

func (t TopicsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TopicsAttributes) InternalWithRef(ref terra.Reference) TopicsAttributes {
	return TopicsAttributes{ref: ref}
}

func (t TopicsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TopicsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("name"))
}

type SecretsState struct {
	Annotations          map[string]string  `json:"annotations"`
	CreateTime           string             `json:"create_time"`
	EffectiveAnnotations map[string]string  `json:"effective_annotations"`
	EffectiveLabels      map[string]string  `json:"effective_labels"`
	ExpireTime           string             `json:"expire_time"`
	Labels               map[string]string  `json:"labels"`
	Name                 string             `json:"name"`
	Project              string             `json:"project"`
	SecretId             string             `json:"secret_id"`
	TerraformLabels      map[string]string  `json:"terraform_labels"`
	Ttl                  string             `json:"ttl"`
	VersionAliases       map[string]string  `json:"version_aliases"`
	Replication          []ReplicationState `json:"replication"`
	Rotation             []RotationState    `json:"rotation"`
	Topics               []TopicsState      `json:"topics"`
}

type ReplicationState struct {
	Auto        []AutoState        `json:"auto"`
	UserManaged []UserManagedState `json:"user_managed"`
}

type AutoState struct {
	CustomerManagedEncryption []AutoCustomerManagedEncryptionState `json:"customer_managed_encryption"`
}

type AutoCustomerManagedEncryptionState struct {
	KmsKeyName string `json:"kms_key_name"`
}

type UserManagedState struct {
	Replicas []ReplicasState `json:"replicas"`
}

type ReplicasState struct {
	Location                  string                                   `json:"location"`
	CustomerManagedEncryption []ReplicasCustomerManagedEncryptionState `json:"customer_managed_encryption"`
}

type ReplicasCustomerManagedEncryptionState struct {
	KmsKeyName string `json:"kms_key_name"`
}

type RotationState struct {
	NextRotationTime string `json:"next_rotation_time"`
	RotationPeriod   string `json:"rotation_period"`
}

type TopicsState struct {
	Name string `json:"name"`
}
