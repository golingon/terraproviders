// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package firestorebackupschedule

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type DailyRecurrence struct{}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type WeeklyRecurrence struct {
	// Day: string, optional
	Day terra.StringValue `hcl:"day,attr"`
}

type DailyRecurrenceAttributes struct {
	ref terra.Reference
}

func (dr DailyRecurrenceAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr DailyRecurrenceAttributes) InternalWithRef(ref terra.Reference) DailyRecurrenceAttributes {
	return DailyRecurrenceAttributes{ref: ref}
}

func (dr DailyRecurrenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type WeeklyRecurrenceAttributes struct {
	ref terra.Reference
}

func (wr WeeklyRecurrenceAttributes) InternalRef() (terra.Reference, error) {
	return wr.ref, nil
}

func (wr WeeklyRecurrenceAttributes) InternalWithRef(ref terra.Reference) WeeklyRecurrenceAttributes {
	return WeeklyRecurrenceAttributes{ref: ref}
}

func (wr WeeklyRecurrenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wr.ref.InternalTokens()
}

func (wr WeeklyRecurrenceAttributes) Day() terra.StringValue {
	return terra.ReferenceAsString(wr.ref.Append("day"))
}

type DailyRecurrenceState struct{}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type WeeklyRecurrenceState struct {
	Day string `json:"day"`
}
