// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	alloydbuser "github.com/golingon/terraproviders/google/5.2.0/alloydbuser"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAlloydbUser creates a new instance of [AlloydbUser].
func NewAlloydbUser(name string, args AlloydbUserArgs) *AlloydbUser {
	return &AlloydbUser{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AlloydbUser)(nil)

// AlloydbUser represents the Terraform resource google_alloydb_user.
type AlloydbUser struct {
	Name      string
	Args      AlloydbUserArgs
	state     *alloydbUserState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AlloydbUser].
func (au *AlloydbUser) Type() string {
	return "google_alloydb_user"
}

// LocalName returns the local name for [AlloydbUser].
func (au *AlloydbUser) LocalName() string {
	return au.Name
}

// Configuration returns the configuration (args) for [AlloydbUser].
func (au *AlloydbUser) Configuration() interface{} {
	return au.Args
}

// DependOn is used for other resources to depend on [AlloydbUser].
func (au *AlloydbUser) DependOn() terra.Reference {
	return terra.ReferenceResource(au)
}

// Dependencies returns the list of resources [AlloydbUser] depends_on.
func (au *AlloydbUser) Dependencies() terra.Dependencies {
	return au.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AlloydbUser].
func (au *AlloydbUser) LifecycleManagement() *terra.Lifecycle {
	return au.Lifecycle
}

// Attributes returns the attributes for [AlloydbUser].
func (au *AlloydbUser) Attributes() alloydbUserAttributes {
	return alloydbUserAttributes{ref: terra.ReferenceResource(au)}
}

// ImportState imports the given attribute values into [AlloydbUser]'s state.
func (au *AlloydbUser) ImportState(av io.Reader) error {
	au.state = &alloydbUserState{}
	if err := json.NewDecoder(av).Decode(au.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", au.Type(), au.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AlloydbUser] has state.
func (au *AlloydbUser) State() (*alloydbUserState, bool) {
	return au.state, au.state != nil
}

// StateMust returns the state for [AlloydbUser]. Panics if the state is nil.
func (au *AlloydbUser) StateMust() *alloydbUserState {
	if au.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", au.Type(), au.LocalName()))
	}
	return au.state
}

// AlloydbUserArgs contains the configurations for google_alloydb_user.
type AlloydbUserArgs struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// DatabaseRoles: list of string, optional
	DatabaseRoles terra.ListValue[terra.StringValue] `hcl:"database_roles,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// UserId: string, required
	UserId terra.StringValue `hcl:"user_id,attr" validate:"required"`
	// UserType: string, required
	UserType terra.StringValue `hcl:"user_type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *alloydbuser.Timeouts `hcl:"timeouts,block"`
}
type alloydbUserAttributes struct {
	ref terra.Reference
}

// Cluster returns a reference to field cluster of google_alloydb_user.
func (au alloydbUserAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("cluster"))
}

// DatabaseRoles returns a reference to field database_roles of google_alloydb_user.
func (au alloydbUserAttributes) DatabaseRoles() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](au.ref.Append("database_roles"))
}

// Id returns a reference to field id of google_alloydb_user.
func (au alloydbUserAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("id"))
}

// Name returns a reference to field name of google_alloydb_user.
func (au alloydbUserAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("name"))
}

// Password returns a reference to field password of google_alloydb_user.
func (au alloydbUserAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("password"))
}

// UserId returns a reference to field user_id of google_alloydb_user.
func (au alloydbUserAttributes) UserId() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("user_id"))
}

// UserType returns a reference to field user_type of google_alloydb_user.
func (au alloydbUserAttributes) UserType() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("user_type"))
}

func (au alloydbUserAttributes) Timeouts() alloydbuser.TimeoutsAttributes {
	return terra.ReferenceAsSingle[alloydbuser.TimeoutsAttributes](au.ref.Append("timeouts"))
}

type alloydbUserState struct {
	Cluster       string                     `json:"cluster"`
	DatabaseRoles []string                   `json:"database_roles"`
	Id            string                     `json:"id"`
	Name          string                     `json:"name"`
	Password      string                     `json:"password"`
	UserId        string                     `json:"user_id"`
	UserType      string                     `json:"user_type"`
	Timeouts      *alloydbuser.TimeoutsState `json:"timeouts"`
}
