// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package cloudrunv2job

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Conditions struct{}

type LatestCreatedExecution struct{}

type TerminalCondition struct{}

type BinaryAuthorization struct {
	// BreakglassJustification: string, optional
	BreakglassJustification terra.StringValue `hcl:"breakglass_justification,attr"`
	// UseDefault: bool, optional
	UseDefault terra.BoolValue `hcl:"use_default,attr"`
}

type Template struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Parallelism: number, optional
	Parallelism terra.NumberValue `hcl:"parallelism,attr"`
	// TaskCount: number, optional
	TaskCount terra.NumberValue `hcl:"task_count,attr"`
	// TemplateTemplate: required
	Template *TemplateTemplate `hcl:"template,block" validate:"required"`
}

type TemplateTemplate struct {
	// EncryptionKey: string, optional
	EncryptionKey terra.StringValue `hcl:"encryption_key,attr"`
	// ExecutionEnvironment: string, optional
	ExecutionEnvironment terra.StringValue `hcl:"execution_environment,attr"`
	// MaxRetries: number, optional
	MaxRetries terra.NumberValue `hcl:"max_retries,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// Timeout: string, optional
	Timeout terra.StringValue `hcl:"timeout,attr"`
	// Containers: min=0
	Containers []Containers `hcl:"containers,block" validate:"min=0"`
	// Volumes: min=0
	Volumes []Volumes `hcl:"volumes,block" validate:"min=0"`
	// VpcAccess: optional
	VpcAccess *VpcAccess `hcl:"vpc_access,block"`
}

type Containers struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Command: list of string, optional
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// WorkingDir: string, optional
	WorkingDir terra.StringValue `hcl:"working_dir,attr"`
	// Env: min=0
	Env []Env `hcl:"env,block" validate:"min=0"`
	// Ports: min=0
	Ports []Ports `hcl:"ports,block" validate:"min=0"`
	// Resources: optional
	Resources *Resources `hcl:"resources,block"`
	// VolumeMounts: min=0
	VolumeMounts []VolumeMounts `hcl:"volume_mounts,block" validate:"min=0"`
}

type Env struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
	// ValueSource: optional
	ValueSource *ValueSource `hcl:"value_source,block"`
}

type ValueSource struct {
	// SecretKeyRef: optional
	SecretKeyRef *SecretKeyRef `hcl:"secret_key_ref,block"`
}

type SecretKeyRef struct {
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type Ports struct {
	// ContainerPort: number, optional
	ContainerPort terra.NumberValue `hcl:"container_port,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type Resources struct {
	// Limits: map of string, optional
	Limits terra.MapValue[terra.StringValue] `hcl:"limits,attr"`
}

type VolumeMounts struct {
	// MountPath: string, required
	MountPath terra.StringValue `hcl:"mount_path,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Volumes struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// CloudSqlInstance: optional
	CloudSqlInstance *CloudSqlInstance `hcl:"cloud_sql_instance,block"`
	// Secret: optional
	Secret *Secret `hcl:"secret,block"`
}

type CloudSqlInstance struct {
	// Instances: list of string, optional
	Instances terra.ListValue[terra.StringValue] `hcl:"instances,attr"`
}

type Secret struct {
	// DefaultMode: number, optional
	DefaultMode terra.NumberValue `hcl:"default_mode,attr"`
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
	// Items: min=0
	Items []Items `hcl:"items,block" validate:"min=0"`
}

type Items struct {
	// Mode: number, optional
	Mode terra.NumberValue `hcl:"mode,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type VpcAccess struct {
	// Connector: string, optional
	Connector terra.StringValue `hcl:"connector,attr"`
	// Egress: string, optional
	Egress terra.StringValue `hcl:"egress,attr"`
	// NetworkInterfaces: min=0
	NetworkInterfaces []NetworkInterfaces `hcl:"network_interfaces,block" validate:"min=0"`
}

type NetworkInterfaces struct {
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) ExecutionReason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("execution_reason"))
}

func (c ConditionsAttributes) LastTransitionTime() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("last_transition_time"))
}

func (c ConditionsAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("message"))
}

func (c ConditionsAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("reason"))
}

func (c ConditionsAttributes) RevisionReason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("revision_reason"))
}

func (c ConditionsAttributes) Severity() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("severity"))
}

func (c ConditionsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("state"))
}

func (c ConditionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type LatestCreatedExecutionAttributes struct {
	ref terra.Reference
}

func (lce LatestCreatedExecutionAttributes) InternalRef() (terra.Reference, error) {
	return lce.ref, nil
}

func (lce LatestCreatedExecutionAttributes) InternalWithRef(ref terra.Reference) LatestCreatedExecutionAttributes {
	return LatestCreatedExecutionAttributes{ref: ref}
}

func (lce LatestCreatedExecutionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lce.ref.InternalTokens()
}

func (lce LatestCreatedExecutionAttributes) CompletionTime() terra.StringValue {
	return terra.ReferenceAsString(lce.ref.Append("completion_time"))
}

func (lce LatestCreatedExecutionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(lce.ref.Append("create_time"))
}

func (lce LatestCreatedExecutionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lce.ref.Append("name"))
}

type TerminalConditionAttributes struct {
	ref terra.Reference
}

func (tc TerminalConditionAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TerminalConditionAttributes) InternalWithRef(ref terra.Reference) TerminalConditionAttributes {
	return TerminalConditionAttributes{ref: ref}
}

func (tc TerminalConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TerminalConditionAttributes) ExecutionReason() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("execution_reason"))
}

func (tc TerminalConditionAttributes) LastTransitionTime() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("last_transition_time"))
}

func (tc TerminalConditionAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("message"))
}

func (tc TerminalConditionAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("reason"))
}

func (tc TerminalConditionAttributes) RevisionReason() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("revision_reason"))
}

func (tc TerminalConditionAttributes) Severity() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("severity"))
}

func (tc TerminalConditionAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("state"))
}

func (tc TerminalConditionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("type"))
}

type BinaryAuthorizationAttributes struct {
	ref terra.Reference
}

func (ba BinaryAuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return ba.ref, nil
}

func (ba BinaryAuthorizationAttributes) InternalWithRef(ref terra.Reference) BinaryAuthorizationAttributes {
	return BinaryAuthorizationAttributes{ref: ref}
}

func (ba BinaryAuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ba.ref.InternalTokens()
}

func (ba BinaryAuthorizationAttributes) BreakglassJustification() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("breakglass_justification"))
}

func (ba BinaryAuthorizationAttributes) UseDefault() terra.BoolValue {
	return terra.ReferenceAsBool(ba.ref.Append("use_default"))
}

type TemplateAttributes struct {
	ref terra.Reference
}

func (t TemplateAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TemplateAttributes) InternalWithRef(ref terra.Reference) TemplateAttributes {
	return TemplateAttributes{ref: ref}
}

func (t TemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TemplateAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](t.ref.Append("annotations"))
}

func (t TemplateAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](t.ref.Append("labels"))
}

func (t TemplateAttributes) Parallelism() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("parallelism"))
}

func (t TemplateAttributes) TaskCount() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("task_count"))
}

func (t TemplateAttributes) Template() terra.ListValue[TemplateTemplateAttributes] {
	return terra.ReferenceAsList[TemplateTemplateAttributes](t.ref.Append("template"))
}

type TemplateTemplateAttributes struct {
	ref terra.Reference
}

func (t TemplateTemplateAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TemplateTemplateAttributes) InternalWithRef(ref terra.Reference) TemplateTemplateAttributes {
	return TemplateTemplateAttributes{ref: ref}
}

func (t TemplateTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TemplateTemplateAttributes) EncryptionKey() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("encryption_key"))
}

func (t TemplateTemplateAttributes) ExecutionEnvironment() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("execution_environment"))
}

func (t TemplateTemplateAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("max_retries"))
}

func (t TemplateTemplateAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("service_account"))
}

func (t TemplateTemplateAttributes) Timeout() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("timeout"))
}

func (t TemplateTemplateAttributes) Containers() terra.ListValue[ContainersAttributes] {
	return terra.ReferenceAsList[ContainersAttributes](t.ref.Append("containers"))
}

func (t TemplateTemplateAttributes) Volumes() terra.ListValue[VolumesAttributes] {
	return terra.ReferenceAsList[VolumesAttributes](t.ref.Append("volumes"))
}

func (t TemplateTemplateAttributes) VpcAccess() terra.ListValue[VpcAccessAttributes] {
	return terra.ReferenceAsList[VpcAccessAttributes](t.ref.Append("vpc_access"))
}

type ContainersAttributes struct {
	ref terra.Reference
}

func (c ContainersAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ContainersAttributes) InternalWithRef(ref terra.Reference) ContainersAttributes {
	return ContainersAttributes{ref: ref}
}

func (c ContainersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ContainersAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("args"))
}

func (c ContainersAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("command"))
}

func (c ContainersAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c ContainersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c ContainersAttributes) WorkingDir() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("working_dir"))
}

func (c ContainersAttributes) Env() terra.ListValue[EnvAttributes] {
	return terra.ReferenceAsList[EnvAttributes](c.ref.Append("env"))
}

func (c ContainersAttributes) Ports() terra.ListValue[PortsAttributes] {
	return terra.ReferenceAsList[PortsAttributes](c.ref.Append("ports"))
}

func (c ContainersAttributes) Resources() terra.ListValue[ResourcesAttributes] {
	return terra.ReferenceAsList[ResourcesAttributes](c.ref.Append("resources"))
}

func (c ContainersAttributes) VolumeMounts() terra.ListValue[VolumeMountsAttributes] {
	return terra.ReferenceAsList[VolumeMountsAttributes](c.ref.Append("volume_mounts"))
}

type EnvAttributes struct {
	ref terra.Reference
}

func (e EnvAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EnvAttributes) InternalWithRef(ref terra.Reference) EnvAttributes {
	return EnvAttributes{ref: ref}
}

func (e EnvAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EnvAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e EnvAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

func (e EnvAttributes) ValueSource() terra.ListValue[ValueSourceAttributes] {
	return terra.ReferenceAsList[ValueSourceAttributes](e.ref.Append("value_source"))
}

type ValueSourceAttributes struct {
	ref terra.Reference
}

func (vs ValueSourceAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs ValueSourceAttributes) InternalWithRef(ref terra.Reference) ValueSourceAttributes {
	return ValueSourceAttributes{ref: ref}
}

func (vs ValueSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs ValueSourceAttributes) SecretKeyRef() terra.ListValue[SecretKeyRefAttributes] {
	return terra.ReferenceAsList[SecretKeyRefAttributes](vs.ref.Append("secret_key_ref"))
}

type SecretKeyRefAttributes struct {
	ref terra.Reference
}

func (skr SecretKeyRefAttributes) InternalRef() (terra.Reference, error) {
	return skr.ref, nil
}

func (skr SecretKeyRefAttributes) InternalWithRef(ref terra.Reference) SecretKeyRefAttributes {
	return SecretKeyRefAttributes{ref: ref}
}

func (skr SecretKeyRefAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return skr.ref.InternalTokens()
}

func (skr SecretKeyRefAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(skr.ref.Append("secret"))
}

func (skr SecretKeyRefAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(skr.ref.Append("version"))
}

type PortsAttributes struct {
	ref terra.Reference
}

func (p PortsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PortsAttributes) InternalWithRef(ref terra.Reference) PortsAttributes {
	return PortsAttributes{ref: ref}
}

func (p PortsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PortsAttributes) ContainerPort() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("container_port"))
}

func (p PortsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

type ResourcesAttributes struct {
	ref terra.Reference
}

func (r ResourcesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ResourcesAttributes) InternalWithRef(ref terra.Reference) ResourcesAttributes {
	return ResourcesAttributes{ref: ref}
}

func (r ResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ResourcesAttributes) Limits() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("limits"))
}

type VolumeMountsAttributes struct {
	ref terra.Reference
}

func (vm VolumeMountsAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm VolumeMountsAttributes) InternalWithRef(ref terra.Reference) VolumeMountsAttributes {
	return VolumeMountsAttributes{ref: ref}
}

func (vm VolumeMountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm VolumeMountsAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("mount_path"))
}

func (vm VolumeMountsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("name"))
}

type VolumesAttributes struct {
	ref terra.Reference
}

func (v VolumesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VolumesAttributes) InternalWithRef(ref terra.Reference) VolumesAttributes {
	return VolumesAttributes{ref: ref}
}

func (v VolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v VolumesAttributes) CloudSqlInstance() terra.ListValue[CloudSqlInstanceAttributes] {
	return terra.ReferenceAsList[CloudSqlInstanceAttributes](v.ref.Append("cloud_sql_instance"))
}

func (v VolumesAttributes) Secret() terra.ListValue[SecretAttributes] {
	return terra.ReferenceAsList[SecretAttributes](v.ref.Append("secret"))
}

type CloudSqlInstanceAttributes struct {
	ref terra.Reference
}

func (csi CloudSqlInstanceAttributes) InternalRef() (terra.Reference, error) {
	return csi.ref, nil
}

func (csi CloudSqlInstanceAttributes) InternalWithRef(ref terra.Reference) CloudSqlInstanceAttributes {
	return CloudSqlInstanceAttributes{ref: ref}
}

func (csi CloudSqlInstanceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return csi.ref.InternalTokens()
}

func (csi CloudSqlInstanceAttributes) Instances() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](csi.ref.Append("instances"))
}

type SecretAttributes struct {
	ref terra.Reference
}

func (s SecretAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SecretAttributes) InternalWithRef(ref terra.Reference) SecretAttributes {
	return SecretAttributes{ref: ref}
}

func (s SecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SecretAttributes) DefaultMode() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("default_mode"))
}

func (s SecretAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret"))
}

func (s SecretAttributes) Items() terra.ListValue[ItemsAttributes] {
	return terra.ReferenceAsList[ItemsAttributes](s.ref.Append("items"))
}

type ItemsAttributes struct {
	ref terra.Reference
}

func (i ItemsAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i ItemsAttributes) InternalWithRef(ref terra.Reference) ItemsAttributes {
	return ItemsAttributes{ref: ref}
}

func (i ItemsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i ItemsAttributes) Mode() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("mode"))
}

func (i ItemsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("path"))
}

func (i ItemsAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("version"))
}

type VpcAccessAttributes struct {
	ref terra.Reference
}

func (va VpcAccessAttributes) InternalRef() (terra.Reference, error) {
	return va.ref, nil
}

func (va VpcAccessAttributes) InternalWithRef(ref terra.Reference) VpcAccessAttributes {
	return VpcAccessAttributes{ref: ref}
}

func (va VpcAccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return va.ref.InternalTokens()
}

func (va VpcAccessAttributes) Connector() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("connector"))
}

func (va VpcAccessAttributes) Egress() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("egress"))
}

func (va VpcAccessAttributes) NetworkInterfaces() terra.ListValue[NetworkInterfacesAttributes] {
	return terra.ReferenceAsList[NetworkInterfacesAttributes](va.ref.Append("network_interfaces"))
}

type NetworkInterfacesAttributes struct {
	ref terra.Reference
}

func (ni NetworkInterfacesAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni NetworkInterfacesAttributes) InternalWithRef(ref terra.Reference) NetworkInterfacesAttributes {
	return NetworkInterfacesAttributes{ref: ref}
}

func (ni NetworkInterfacesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni NetworkInterfacesAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("network"))
}

func (ni NetworkInterfacesAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("subnetwork"))
}

func (ni NetworkInterfacesAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ni.ref.Append("tags"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConditionsState struct {
	ExecutionReason    string `json:"execution_reason"`
	LastTransitionTime string `json:"last_transition_time"`
	Message            string `json:"message"`
	Reason             string `json:"reason"`
	RevisionReason     string `json:"revision_reason"`
	Severity           string `json:"severity"`
	State              string `json:"state"`
	Type               string `json:"type"`
}

type LatestCreatedExecutionState struct {
	CompletionTime string `json:"completion_time"`
	CreateTime     string `json:"create_time"`
	Name           string `json:"name"`
}

type TerminalConditionState struct {
	ExecutionReason    string `json:"execution_reason"`
	LastTransitionTime string `json:"last_transition_time"`
	Message            string `json:"message"`
	Reason             string `json:"reason"`
	RevisionReason     string `json:"revision_reason"`
	Severity           string `json:"severity"`
	State              string `json:"state"`
	Type               string `json:"type"`
}

type BinaryAuthorizationState struct {
	BreakglassJustification string `json:"breakglass_justification"`
	UseDefault              bool   `json:"use_default"`
}

type TemplateState struct {
	Annotations map[string]string       `json:"annotations"`
	Labels      map[string]string       `json:"labels"`
	Parallelism float64                 `json:"parallelism"`
	TaskCount   float64                 `json:"task_count"`
	Template    []TemplateTemplateState `json:"template"`
}

type TemplateTemplateState struct {
	EncryptionKey        string            `json:"encryption_key"`
	ExecutionEnvironment string            `json:"execution_environment"`
	MaxRetries           float64           `json:"max_retries"`
	ServiceAccount       string            `json:"service_account"`
	Timeout              string            `json:"timeout"`
	Containers           []ContainersState `json:"containers"`
	Volumes              []VolumesState    `json:"volumes"`
	VpcAccess            []VpcAccessState  `json:"vpc_access"`
}

type ContainersState struct {
	Args         []string            `json:"args"`
	Command      []string            `json:"command"`
	Image        string              `json:"image"`
	Name         string              `json:"name"`
	WorkingDir   string              `json:"working_dir"`
	Env          []EnvState          `json:"env"`
	Ports        []PortsState        `json:"ports"`
	Resources    []ResourcesState    `json:"resources"`
	VolumeMounts []VolumeMountsState `json:"volume_mounts"`
}

type EnvState struct {
	Name        string             `json:"name"`
	Value       string             `json:"value"`
	ValueSource []ValueSourceState `json:"value_source"`
}

type ValueSourceState struct {
	SecretKeyRef []SecretKeyRefState `json:"secret_key_ref"`
}

type SecretKeyRefState struct {
	Secret  string `json:"secret"`
	Version string `json:"version"`
}

type PortsState struct {
	ContainerPort float64 `json:"container_port"`
	Name          string  `json:"name"`
}

type ResourcesState struct {
	Limits map[string]string `json:"limits"`
}

type VolumeMountsState struct {
	MountPath string `json:"mount_path"`
	Name      string `json:"name"`
}

type VolumesState struct {
	Name             string                  `json:"name"`
	CloudSqlInstance []CloudSqlInstanceState `json:"cloud_sql_instance"`
	Secret           []SecretState           `json:"secret"`
}

type CloudSqlInstanceState struct {
	Instances []string `json:"instances"`
}

type SecretState struct {
	DefaultMode float64      `json:"default_mode"`
	Secret      string       `json:"secret"`
	Items       []ItemsState `json:"items"`
}

type ItemsState struct {
	Mode    float64 `json:"mode"`
	Path    string  `json:"path"`
	Version string  `json:"version"`
}

type VpcAccessState struct {
	Connector         string                   `json:"connector"`
	Egress            string                   `json:"egress"`
	NetworkInterfaces []NetworkInterfacesState `json:"network_interfaces"`
}

type NetworkInterfacesState struct {
	Network    string   `json:"network"`
	Subnetwork string   `json:"subnetwork"`
	Tags       []string `json:"tags"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
