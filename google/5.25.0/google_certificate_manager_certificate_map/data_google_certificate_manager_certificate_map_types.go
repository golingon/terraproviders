// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_certificate_manager_certificate_map

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataGclbTargetsAttributes struct {
	ref terra.Reference
}

func (gt DataGclbTargetsAttributes) InternalRef() (terra.Reference, error) {
	return gt.ref, nil
}

func (gt DataGclbTargetsAttributes) InternalWithRef(ref terra.Reference) DataGclbTargetsAttributes {
	return DataGclbTargetsAttributes{ref: ref}
}

func (gt DataGclbTargetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gt.ref.InternalTokens()
}

func (gt DataGclbTargetsAttributes) TargetHttpsProxy() terra.StringValue {
	return terra.ReferenceAsString(gt.ref.Append("target_https_proxy"))
}

func (gt DataGclbTargetsAttributes) TargetSslProxy() terra.StringValue {
	return terra.ReferenceAsString(gt.ref.Append("target_ssl_proxy"))
}

func (gt DataGclbTargetsAttributes) IpConfigs() terra.ListValue[DataGclbTargetsIpConfigsAttributes] {
	return terra.ReferenceAsList[DataGclbTargetsIpConfigsAttributes](gt.ref.Append("ip_configs"))
}

type DataGclbTargetsIpConfigsAttributes struct {
	ref terra.Reference
}

func (ic DataGclbTargetsIpConfigsAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic DataGclbTargetsIpConfigsAttributes) InternalWithRef(ref terra.Reference) DataGclbTargetsIpConfigsAttributes {
	return DataGclbTargetsIpConfigsAttributes{ref: ref}
}

func (ic DataGclbTargetsIpConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic DataGclbTargetsIpConfigsAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("ip_address"))
}

func (ic DataGclbTargetsIpConfigsAttributes) Ports() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](ic.ref.Append("ports"))
}

type DataGclbTargetsState struct {
	TargetHttpsProxy string                          `json:"target_https_proxy"`
	TargetSslProxy   string                          `json:"target_ssl_proxy"`
	IpConfigs        []DataGclbTargetsIpConfigsState `json:"ip_configs"`
}

type DataGclbTargetsIpConfigsState struct {
	IpAddress string    `json:"ip_address"`
	Ports     []float64 `json:"ports"`
}
