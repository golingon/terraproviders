// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_workflows_workflow

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_workflows_workflow.
type Resource struct {
	Name      string
	Args      Args
	state     *googleWorkflowsWorkflowState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gww *Resource) Type() string {
	return "google_workflows_workflow"
}

// LocalName returns the local name for [Resource].
func (gww *Resource) LocalName() string {
	return gww.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gww *Resource) Configuration() interface{} {
	return gww.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gww *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gww)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gww *Resource) Dependencies() terra.Dependencies {
	return gww.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gww *Resource) LifecycleManagement() *terra.Lifecycle {
	return gww.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gww *Resource) Attributes() googleWorkflowsWorkflowAttributes {
	return googleWorkflowsWorkflowAttributes{ref: terra.ReferenceResource(gww)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gww *Resource) ImportState(state io.Reader) error {
	gww.state = &googleWorkflowsWorkflowState{}
	if err := json.NewDecoder(state).Decode(gww.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gww.Type(), gww.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gww *Resource) State() (*googleWorkflowsWorkflowState, bool) {
	return gww.state, gww.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gww *Resource) StateMust() *googleWorkflowsWorkflowState {
	if gww.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gww.Type(), gww.LocalName()))
	}
	return gww.state
}

// Args contains the configurations for google_workflows_workflow.
type Args struct {
	// CallLogLevel: string, optional
	CallLogLevel terra.StringValue `hcl:"call_log_level,attr"`
	// CryptoKeyName: string, optional
	CryptoKeyName terra.StringValue `hcl:"crypto_key_name,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// SourceContents: string, optional
	SourceContents terra.StringValue `hcl:"source_contents,attr"`
	// UserEnvVars: map of string, optional
	UserEnvVars terra.MapValue[terra.StringValue] `hcl:"user_env_vars,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleWorkflowsWorkflowAttributes struct {
	ref terra.Reference
}

// CallLogLevel returns a reference to field call_log_level of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) CallLogLevel() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("call_log_level"))
}

// CreateTime returns a reference to field create_time of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("create_time"))
}

// CryptoKeyName returns a reference to field crypto_key_name of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) CryptoKeyName() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("crypto_key_name"))
}

// Description returns a reference to field description of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gww.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("id"))
}

// Labels returns a reference to field labels of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gww.ref.Append("labels"))
}

// Name returns a reference to field name of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("name_prefix"))
}

// Project returns a reference to field project of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("project"))
}

// Region returns a reference to field region of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("region"))
}

// RevisionId returns a reference to field revision_id of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) RevisionId() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("revision_id"))
}

// ServiceAccount returns a reference to field service_account of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("service_account"))
}

// SourceContents returns a reference to field source_contents of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) SourceContents() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("source_contents"))
}

// State returns a reference to field state of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gww.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gww.ref.Append("update_time"))
}

// UserEnvVars returns a reference to field user_env_vars of google_workflows_workflow.
func (gww googleWorkflowsWorkflowAttributes) UserEnvVars() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gww.ref.Append("user_env_vars"))
}

func (gww googleWorkflowsWorkflowAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gww.ref.Append("timeouts"))
}

type googleWorkflowsWorkflowState struct {
	CallLogLevel    string            `json:"call_log_level"`
	CreateTime      string            `json:"create_time"`
	CryptoKeyName   string            `json:"crypto_key_name"`
	Description     string            `json:"description"`
	EffectiveLabels map[string]string `json:"effective_labels"`
	Id              string            `json:"id"`
	Labels          map[string]string `json:"labels"`
	Name            string            `json:"name"`
	NamePrefix      string            `json:"name_prefix"`
	Project         string            `json:"project"`
	Region          string            `json:"region"`
	RevisionId      string            `json:"revision_id"`
	ServiceAccount  string            `json:"service_account"`
	SourceContents  string            `json:"source_contents"`
	State           string            `json:"state"`
	TerraformLabels map[string]string `json:"terraform_labels"`
	UpdateTime      string            `json:"update_time"`
	UserEnvVars     map[string]string `json:"user_env_vars"`
	Timeouts        *TimeoutsState    `json:"timeouts"`
}
