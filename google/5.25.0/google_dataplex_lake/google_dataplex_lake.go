// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataplex_lake

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dataplex_lake.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataplexLakeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdl *Resource) Type() string {
	return "google_dataplex_lake"
}

// LocalName returns the local name for [Resource].
func (gdl *Resource) LocalName() string {
	return gdl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdl *Resource) Configuration() interface{} {
	return gdl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdl *Resource) Dependencies() terra.Dependencies {
	return gdl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdl *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdl *Resource) Attributes() googleDataplexLakeAttributes {
	return googleDataplexLakeAttributes{ref: terra.ReferenceResource(gdl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdl *Resource) ImportState(state io.Reader) error {
	gdl.state = &googleDataplexLakeState{}
	if err := json.NewDecoder(state).Decode(gdl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdl.Type(), gdl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdl *Resource) State() (*googleDataplexLakeState, bool) {
	return gdl.state, gdl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdl *Resource) StateMust() *googleDataplexLakeState {
	if gdl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdl.Type(), gdl.LocalName()))
	}
	return gdl.state
}

// Args contains the configurations for google_dataplex_lake.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Metastore: optional
	Metastore *Metastore `hcl:"metastore,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDataplexLakeAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_dataplex_lake.
func (gdl googleDataplexLakeAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gdl.ref.Append("create_time"))
}

// Description returns a reference to field description of google_dataplex_lake.
func (gdl googleDataplexLakeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdl.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_dataplex_lake.
func (gdl googleDataplexLakeAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdl.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_dataplex_lake.
func (gdl googleDataplexLakeAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdl.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_dataplex_lake.
func (gdl googleDataplexLakeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdl.ref.Append("id"))
}

// Labels returns a reference to field labels of google_dataplex_lake.
func (gdl googleDataplexLakeAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdl.ref.Append("labels"))
}

// Location returns a reference to field location of google_dataplex_lake.
func (gdl googleDataplexLakeAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gdl.ref.Append("location"))
}

// Name returns a reference to field name of google_dataplex_lake.
func (gdl googleDataplexLakeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdl.ref.Append("name"))
}

// Project returns a reference to field project of google_dataplex_lake.
func (gdl googleDataplexLakeAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdl.ref.Append("project"))
}

// ServiceAccount returns a reference to field service_account of google_dataplex_lake.
func (gdl googleDataplexLakeAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(gdl.ref.Append("service_account"))
}

// State returns a reference to field state of google_dataplex_lake.
func (gdl googleDataplexLakeAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gdl.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_dataplex_lake.
func (gdl googleDataplexLakeAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdl.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_dataplex_lake.
func (gdl googleDataplexLakeAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gdl.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_dataplex_lake.
func (gdl googleDataplexLakeAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gdl.ref.Append("update_time"))
}

func (gdl googleDataplexLakeAttributes) AssetStatus() terra.ListValue[AssetStatusAttributes] {
	return terra.ReferenceAsList[AssetStatusAttributes](gdl.ref.Append("asset_status"))
}

func (gdl googleDataplexLakeAttributes) MetastoreStatus() terra.ListValue[MetastoreStatusAttributes] {
	return terra.ReferenceAsList[MetastoreStatusAttributes](gdl.ref.Append("metastore_status"))
}

func (gdl googleDataplexLakeAttributes) Metastore() terra.ListValue[MetastoreAttributes] {
	return terra.ReferenceAsList[MetastoreAttributes](gdl.ref.Append("metastore"))
}

func (gdl googleDataplexLakeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdl.ref.Append("timeouts"))
}

type googleDataplexLakeState struct {
	CreateTime      string                 `json:"create_time"`
	Description     string                 `json:"description"`
	DisplayName     string                 `json:"display_name"`
	EffectiveLabels map[string]string      `json:"effective_labels"`
	Id              string                 `json:"id"`
	Labels          map[string]string      `json:"labels"`
	Location        string                 `json:"location"`
	Name            string                 `json:"name"`
	Project         string                 `json:"project"`
	ServiceAccount  string                 `json:"service_account"`
	State           string                 `json:"state"`
	TerraformLabels map[string]string      `json:"terraform_labels"`
	Uid             string                 `json:"uid"`
	UpdateTime      string                 `json:"update_time"`
	AssetStatus     []AssetStatusState     `json:"asset_status"`
	MetastoreStatus []MetastoreStatusState `json:"metastore_status"`
	Metastore       []MetastoreState       `json:"metastore"`
	Timeouts        *TimeoutsState         `json:"timeouts"`
}
