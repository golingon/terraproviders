// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firestore_database

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firestore_database.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirestoreDatabaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfd *Resource) Type() string {
	return "google_firestore_database"
}

// LocalName returns the local name for [Resource].
func (gfd *Resource) LocalName() string {
	return gfd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfd *Resource) Configuration() interface{} {
	return gfd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfd *Resource) Dependencies() terra.Dependencies {
	return gfd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfd *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfd *Resource) Attributes() googleFirestoreDatabaseAttributes {
	return googleFirestoreDatabaseAttributes{ref: terra.ReferenceResource(gfd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfd *Resource) ImportState(state io.Reader) error {
	gfd.state = &googleFirestoreDatabaseState{}
	if err := json.NewDecoder(state).Decode(gfd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfd.Type(), gfd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfd *Resource) State() (*googleFirestoreDatabaseState, bool) {
	return gfd.state, gfd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfd *Resource) StateMust() *googleFirestoreDatabaseState {
	if gfd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfd.Type(), gfd.LocalName()))
	}
	return gfd.state
}

// Args contains the configurations for google_firestore_database.
type Args struct {
	// AppEngineIntegrationMode: string, optional
	AppEngineIntegrationMode terra.StringValue `hcl:"app_engine_integration_mode,attr"`
	// ConcurrencyMode: string, optional
	ConcurrencyMode terra.StringValue `hcl:"concurrency_mode,attr"`
	// DeleteProtectionState: string, optional
	DeleteProtectionState terra.StringValue `hcl:"delete_protection_state,attr"`
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LocationId: string, required
	LocationId terra.StringValue `hcl:"location_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PointInTimeRecoveryEnablement: string, optional
	PointInTimeRecoveryEnablement terra.StringValue `hcl:"point_in_time_recovery_enablement,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirestoreDatabaseAttributes struct {
	ref terra.Reference
}

// AppEngineIntegrationMode returns a reference to field app_engine_integration_mode of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) AppEngineIntegrationMode() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("app_engine_integration_mode"))
}

// ConcurrencyMode returns a reference to field concurrency_mode of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) ConcurrencyMode() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("concurrency_mode"))
}

// CreateTime returns a reference to field create_time of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("create_time"))
}

// DeleteProtectionState returns a reference to field delete_protection_state of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) DeleteProtectionState() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("delete_protection_state"))
}

// DeletionPolicy returns a reference to field deletion_policy of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("deletion_policy"))
}

// EarliestVersionTime returns a reference to field earliest_version_time of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) EarliestVersionTime() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("earliest_version_time"))
}

// Etag returns a reference to field etag of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("etag"))
}

// Id returns a reference to field id of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("id"))
}

// KeyPrefix returns a reference to field key_prefix of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("key_prefix"))
}

// LocationId returns a reference to field location_id of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) LocationId() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("location_id"))
}

// Name returns a reference to field name of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("name"))
}

// PointInTimeRecoveryEnablement returns a reference to field point_in_time_recovery_enablement of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) PointInTimeRecoveryEnablement() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("point_in_time_recovery_enablement"))
}

// Project returns a reference to field project of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("project"))
}

// Type returns a reference to field type of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("type"))
}

// Uid returns a reference to field uid of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("update_time"))
}

// VersionRetentionPeriod returns a reference to field version_retention_period of google_firestore_database.
func (gfd googleFirestoreDatabaseAttributes) VersionRetentionPeriod() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("version_retention_period"))
}

func (gfd googleFirestoreDatabaseAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfd.ref.Append("timeouts"))
}

type googleFirestoreDatabaseState struct {
	AppEngineIntegrationMode      string         `json:"app_engine_integration_mode"`
	ConcurrencyMode               string         `json:"concurrency_mode"`
	CreateTime                    string         `json:"create_time"`
	DeleteProtectionState         string         `json:"delete_protection_state"`
	DeletionPolicy                string         `json:"deletion_policy"`
	EarliestVersionTime           string         `json:"earliest_version_time"`
	Etag                          string         `json:"etag"`
	Id                            string         `json:"id"`
	KeyPrefix                     string         `json:"key_prefix"`
	LocationId                    string         `json:"location_id"`
	Name                          string         `json:"name"`
	PointInTimeRecoveryEnablement string         `json:"point_in_time_recovery_enablement"`
	Project                       string         `json:"project"`
	Type                          string         `json:"type"`
	Uid                           string         `json:"uid"`
	UpdateTime                    string         `json:"update_time"`
	VersionRetentionPeriod        string         `json:"version_retention_period"`
	Timeouts                      *TimeoutsState `json:"timeouts"`
}
