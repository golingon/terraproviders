// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_pubsub_subscription

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_pubsub_subscription.
type Resource struct {
	Name      string
	Args      Args
	state     *googlePubsubSubscriptionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gps *Resource) Type() string {
	return "google_pubsub_subscription"
}

// LocalName returns the local name for [Resource].
func (gps *Resource) LocalName() string {
	return gps.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gps *Resource) Configuration() interface{} {
	return gps.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gps *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gps)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gps *Resource) Dependencies() terra.Dependencies {
	return gps.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gps *Resource) LifecycleManagement() *terra.Lifecycle {
	return gps.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gps *Resource) Attributes() googlePubsubSubscriptionAttributes {
	return googlePubsubSubscriptionAttributes{ref: terra.ReferenceResource(gps)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gps *Resource) ImportState(state io.Reader) error {
	gps.state = &googlePubsubSubscriptionState{}
	if err := json.NewDecoder(state).Decode(gps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gps.Type(), gps.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gps *Resource) State() (*googlePubsubSubscriptionState, bool) {
	return gps.state, gps.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gps *Resource) StateMust() *googlePubsubSubscriptionState {
	if gps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gps.Type(), gps.LocalName()))
	}
	return gps.state
}

// Args contains the configurations for google_pubsub_subscription.
type Args struct {
	// AckDeadlineSeconds: number, optional
	AckDeadlineSeconds terra.NumberValue `hcl:"ack_deadline_seconds,attr"`
	// EnableExactlyOnceDelivery: bool, optional
	EnableExactlyOnceDelivery terra.BoolValue `hcl:"enable_exactly_once_delivery,attr"`
	// EnableMessageOrdering: bool, optional
	EnableMessageOrdering terra.BoolValue `hcl:"enable_message_ordering,attr"`
	// Filter: string, optional
	Filter terra.StringValue `hcl:"filter,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// MessageRetentionDuration: string, optional
	MessageRetentionDuration terra.StringValue `hcl:"message_retention_duration,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RetainAckedMessages: bool, optional
	RetainAckedMessages terra.BoolValue `hcl:"retain_acked_messages,attr"`
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
	// BigqueryConfig: optional
	BigqueryConfig *BigqueryConfig `hcl:"bigquery_config,block"`
	// CloudStorageConfig: optional
	CloudStorageConfig *CloudStorageConfig `hcl:"cloud_storage_config,block"`
	// DeadLetterPolicy: optional
	DeadLetterPolicy *DeadLetterPolicy `hcl:"dead_letter_policy,block"`
	// ExpirationPolicy: optional
	ExpirationPolicy *ExpirationPolicy `hcl:"expiration_policy,block"`
	// PushConfig: optional
	PushConfig *PushConfig `hcl:"push_config,block"`
	// RetryPolicy: optional
	RetryPolicy *RetryPolicy `hcl:"retry_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googlePubsubSubscriptionAttributes struct {
	ref terra.Reference
}

// AckDeadlineSeconds returns a reference to field ack_deadline_seconds of google_pubsub_subscription.
func (gps googlePubsubSubscriptionAttributes) AckDeadlineSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(gps.ref.Append("ack_deadline_seconds"))
}

// EffectiveLabels returns a reference to field effective_labels of google_pubsub_subscription.
func (gps googlePubsubSubscriptionAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gps.ref.Append("effective_labels"))
}

// EnableExactlyOnceDelivery returns a reference to field enable_exactly_once_delivery of google_pubsub_subscription.
func (gps googlePubsubSubscriptionAttributes) EnableExactlyOnceDelivery() terra.BoolValue {
	return terra.ReferenceAsBool(gps.ref.Append("enable_exactly_once_delivery"))
}

// EnableMessageOrdering returns a reference to field enable_message_ordering of google_pubsub_subscription.
func (gps googlePubsubSubscriptionAttributes) EnableMessageOrdering() terra.BoolValue {
	return terra.ReferenceAsBool(gps.ref.Append("enable_message_ordering"))
}

// Filter returns a reference to field filter of google_pubsub_subscription.
func (gps googlePubsubSubscriptionAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(gps.ref.Append("filter"))
}

// Id returns a reference to field id of google_pubsub_subscription.
func (gps googlePubsubSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gps.ref.Append("id"))
}

// Labels returns a reference to field labels of google_pubsub_subscription.
func (gps googlePubsubSubscriptionAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gps.ref.Append("labels"))
}

// MessageRetentionDuration returns a reference to field message_retention_duration of google_pubsub_subscription.
func (gps googlePubsubSubscriptionAttributes) MessageRetentionDuration() terra.StringValue {
	return terra.ReferenceAsString(gps.ref.Append("message_retention_duration"))
}

// Name returns a reference to field name of google_pubsub_subscription.
func (gps googlePubsubSubscriptionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gps.ref.Append("name"))
}

// Project returns a reference to field project of google_pubsub_subscription.
func (gps googlePubsubSubscriptionAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gps.ref.Append("project"))
}

// RetainAckedMessages returns a reference to field retain_acked_messages of google_pubsub_subscription.
func (gps googlePubsubSubscriptionAttributes) RetainAckedMessages() terra.BoolValue {
	return terra.ReferenceAsBool(gps.ref.Append("retain_acked_messages"))
}

// TerraformLabels returns a reference to field terraform_labels of google_pubsub_subscription.
func (gps googlePubsubSubscriptionAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gps.ref.Append("terraform_labels"))
}

// Topic returns a reference to field topic of google_pubsub_subscription.
func (gps googlePubsubSubscriptionAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(gps.ref.Append("topic"))
}

func (gps googlePubsubSubscriptionAttributes) BigqueryConfig() terra.ListValue[BigqueryConfigAttributes] {
	return terra.ReferenceAsList[BigqueryConfigAttributes](gps.ref.Append("bigquery_config"))
}

func (gps googlePubsubSubscriptionAttributes) CloudStorageConfig() terra.ListValue[CloudStorageConfigAttributes] {
	return terra.ReferenceAsList[CloudStorageConfigAttributes](gps.ref.Append("cloud_storage_config"))
}

func (gps googlePubsubSubscriptionAttributes) DeadLetterPolicy() terra.ListValue[DeadLetterPolicyAttributes] {
	return terra.ReferenceAsList[DeadLetterPolicyAttributes](gps.ref.Append("dead_letter_policy"))
}

func (gps googlePubsubSubscriptionAttributes) ExpirationPolicy() terra.ListValue[ExpirationPolicyAttributes] {
	return terra.ReferenceAsList[ExpirationPolicyAttributes](gps.ref.Append("expiration_policy"))
}

func (gps googlePubsubSubscriptionAttributes) PushConfig() terra.ListValue[PushConfigAttributes] {
	return terra.ReferenceAsList[PushConfigAttributes](gps.ref.Append("push_config"))
}

func (gps googlePubsubSubscriptionAttributes) RetryPolicy() terra.ListValue[RetryPolicyAttributes] {
	return terra.ReferenceAsList[RetryPolicyAttributes](gps.ref.Append("retry_policy"))
}

func (gps googlePubsubSubscriptionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gps.ref.Append("timeouts"))
}

type googlePubsubSubscriptionState struct {
	AckDeadlineSeconds        float64                   `json:"ack_deadline_seconds"`
	EffectiveLabels           map[string]string         `json:"effective_labels"`
	EnableExactlyOnceDelivery bool                      `json:"enable_exactly_once_delivery"`
	EnableMessageOrdering     bool                      `json:"enable_message_ordering"`
	Filter                    string                    `json:"filter"`
	Id                        string                    `json:"id"`
	Labels                    map[string]string         `json:"labels"`
	MessageRetentionDuration  string                    `json:"message_retention_duration"`
	Name                      string                    `json:"name"`
	Project                   string                    `json:"project"`
	RetainAckedMessages       bool                      `json:"retain_acked_messages"`
	TerraformLabels           map[string]string         `json:"terraform_labels"`
	Topic                     string                    `json:"topic"`
	BigqueryConfig            []BigqueryConfigState     `json:"bigquery_config"`
	CloudStorageConfig        []CloudStorageConfigState `json:"cloud_storage_config"`
	DeadLetterPolicy          []DeadLetterPolicyState   `json:"dead_letter_policy"`
	ExpirationPolicy          []ExpirationPolicyState   `json:"expiration_policy"`
	PushConfig                []PushConfigState         `json:"push_config"`
	RetryPolicy               []RetryPolicyState        `json:"retry_policy"`
	Timeouts                  *TimeoutsState            `json:"timeouts"`
}
