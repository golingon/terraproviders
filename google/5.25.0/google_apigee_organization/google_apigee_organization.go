// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apigee_organization

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_apigee_organization.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApigeeOrganizationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gao *Resource) Type() string {
	return "google_apigee_organization"
}

// LocalName returns the local name for [Resource].
func (gao *Resource) LocalName() string {
	return gao.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gao *Resource) Configuration() interface{} {
	return gao.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gao *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gao)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gao *Resource) Dependencies() terra.Dependencies {
	return gao.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gao *Resource) LifecycleManagement() *terra.Lifecycle {
	return gao.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gao *Resource) Attributes() googleApigeeOrganizationAttributes {
	return googleApigeeOrganizationAttributes{ref: terra.ReferenceResource(gao)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gao *Resource) ImportState(state io.Reader) error {
	gao.state = &googleApigeeOrganizationState{}
	if err := json.NewDecoder(state).Decode(gao.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gao.Type(), gao.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gao *Resource) State() (*googleApigeeOrganizationState, bool) {
	return gao.state, gao.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gao *Resource) StateMust() *googleApigeeOrganizationState {
	if gao.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gao.Type(), gao.LocalName()))
	}
	return gao.state
}

// Args contains the configurations for google_apigee_organization.
type Args struct {
	// AnalyticsRegion: string, optional
	AnalyticsRegion terra.StringValue `hcl:"analytics_region,attr"`
	// AuthorizedNetwork: string, optional
	AuthorizedNetwork terra.StringValue `hcl:"authorized_network,attr"`
	// BillingType: string, optional
	BillingType terra.StringValue `hcl:"billing_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableVpcPeering: bool, optional
	DisableVpcPeering terra.BoolValue `hcl:"disable_vpc_peering,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// Retention: string, optional
	Retention terra.StringValue `hcl:"retention,attr"`
	// RuntimeDatabaseEncryptionKeyName: string, optional
	RuntimeDatabaseEncryptionKeyName terra.StringValue `hcl:"runtime_database_encryption_key_name,attr"`
	// RuntimeType: string, optional
	RuntimeType terra.StringValue `hcl:"runtime_type,attr"`
	// Properties: optional
	Properties *Properties `hcl:"properties,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApigeeOrganizationAttributes struct {
	ref terra.Reference
}

// AnalyticsRegion returns a reference to field analytics_region of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) AnalyticsRegion() terra.StringValue {
	return terra.ReferenceAsString(gao.ref.Append("analytics_region"))
}

// ApigeeProjectId returns a reference to field apigee_project_id of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) ApigeeProjectId() terra.StringValue {
	return terra.ReferenceAsString(gao.ref.Append("apigee_project_id"))
}

// AuthorizedNetwork returns a reference to field authorized_network of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) AuthorizedNetwork() terra.StringValue {
	return terra.ReferenceAsString(gao.ref.Append("authorized_network"))
}

// BillingType returns a reference to field billing_type of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) BillingType() terra.StringValue {
	return terra.ReferenceAsString(gao.ref.Append("billing_type"))
}

// CaCertificate returns a reference to field ca_certificate of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) CaCertificate() terra.StringValue {
	return terra.ReferenceAsString(gao.ref.Append("ca_certificate"))
}

// Description returns a reference to field description of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gao.ref.Append("description"))
}

// DisableVpcPeering returns a reference to field disable_vpc_peering of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) DisableVpcPeering() terra.BoolValue {
	return terra.ReferenceAsBool(gao.ref.Append("disable_vpc_peering"))
}

// DisplayName returns a reference to field display_name of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gao.ref.Append("display_name"))
}

// Id returns a reference to field id of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gao.ref.Append("id"))
}

// Name returns a reference to field name of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gao.ref.Append("name"))
}

// ProjectId returns a reference to field project_id of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(gao.ref.Append("project_id"))
}

// Retention returns a reference to field retention of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) Retention() terra.StringValue {
	return terra.ReferenceAsString(gao.ref.Append("retention"))
}

// RuntimeDatabaseEncryptionKeyName returns a reference to field runtime_database_encryption_key_name of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) RuntimeDatabaseEncryptionKeyName() terra.StringValue {
	return terra.ReferenceAsString(gao.ref.Append("runtime_database_encryption_key_name"))
}

// RuntimeType returns a reference to field runtime_type of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) RuntimeType() terra.StringValue {
	return terra.ReferenceAsString(gao.ref.Append("runtime_type"))
}

// SubscriptionType returns a reference to field subscription_type of google_apigee_organization.
func (gao googleApigeeOrganizationAttributes) SubscriptionType() terra.StringValue {
	return terra.ReferenceAsString(gao.ref.Append("subscription_type"))
}

func (gao googleApigeeOrganizationAttributes) Properties() terra.ListValue[PropertiesAttributes] {
	return terra.ReferenceAsList[PropertiesAttributes](gao.ref.Append("properties"))
}

func (gao googleApigeeOrganizationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gao.ref.Append("timeouts"))
}

type googleApigeeOrganizationState struct {
	AnalyticsRegion                  string            `json:"analytics_region"`
	ApigeeProjectId                  string            `json:"apigee_project_id"`
	AuthorizedNetwork                string            `json:"authorized_network"`
	BillingType                      string            `json:"billing_type"`
	CaCertificate                    string            `json:"ca_certificate"`
	Description                      string            `json:"description"`
	DisableVpcPeering                bool              `json:"disable_vpc_peering"`
	DisplayName                      string            `json:"display_name"`
	Id                               string            `json:"id"`
	Name                             string            `json:"name"`
	ProjectId                        string            `json:"project_id"`
	Retention                        string            `json:"retention"`
	RuntimeDatabaseEncryptionKeyName string            `json:"runtime_database_encryption_key_name"`
	RuntimeType                      string            `json:"runtime_type"`
	SubscriptionType                 string            `json:"subscription_type"`
	Properties                       []PropertiesState `json:"properties"`
	Timeouts                         *TimeoutsState    `json:"timeouts"`
}
