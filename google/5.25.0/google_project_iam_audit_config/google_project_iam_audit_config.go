// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_project_iam_audit_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_project_iam_audit_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleProjectIamAuditConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gpiac *Resource) Type() string {
	return "google_project_iam_audit_config"
}

// LocalName returns the local name for [Resource].
func (gpiac *Resource) LocalName() string {
	return gpiac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gpiac *Resource) Configuration() interface{} {
	return gpiac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gpiac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gpiac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gpiac *Resource) Dependencies() terra.Dependencies {
	return gpiac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gpiac *Resource) LifecycleManagement() *terra.Lifecycle {
	return gpiac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gpiac *Resource) Attributes() googleProjectIamAuditConfigAttributes {
	return googleProjectIamAuditConfigAttributes{ref: terra.ReferenceResource(gpiac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gpiac *Resource) ImportState(state io.Reader) error {
	gpiac.state = &googleProjectIamAuditConfigState{}
	if err := json.NewDecoder(state).Decode(gpiac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gpiac.Type(), gpiac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gpiac *Resource) State() (*googleProjectIamAuditConfigState, bool) {
	return gpiac.state, gpiac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gpiac *Resource) StateMust() *googleProjectIamAuditConfigState {
	if gpiac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gpiac.Type(), gpiac.LocalName()))
	}
	return gpiac.state
}

// Args contains the configurations for google_project_iam_audit_config.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// AuditLogConfig: min=1
	AuditLogConfig []AuditLogConfig `hcl:"audit_log_config,block" validate:"min=1"`
}

type googleProjectIamAuditConfigAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_project_iam_audit_config.
func (gpiac googleProjectIamAuditConfigAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gpiac.ref.Append("etag"))
}

// Id returns a reference to field id of google_project_iam_audit_config.
func (gpiac googleProjectIamAuditConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gpiac.ref.Append("id"))
}

// Project returns a reference to field project of google_project_iam_audit_config.
func (gpiac googleProjectIamAuditConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gpiac.ref.Append("project"))
}

// Service returns a reference to field service of google_project_iam_audit_config.
func (gpiac googleProjectIamAuditConfigAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(gpiac.ref.Append("service"))
}

func (gpiac googleProjectIamAuditConfigAttributes) AuditLogConfig() terra.SetValue[AuditLogConfigAttributes] {
	return terra.ReferenceAsSet[AuditLogConfigAttributes](gpiac.ref.Append("audit_log_config"))
}

type googleProjectIamAuditConfigState struct {
	Etag           string                `json:"etag"`
	Id             string                `json:"id"`
	Project        string                `json:"project"`
	Service        string                `json:"service"`
	AuditLogConfig []AuditLogConfigState `json:"audit_log_config"`
}
