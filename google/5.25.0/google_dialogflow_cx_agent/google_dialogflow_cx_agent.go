// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dialogflow_cx_agent

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dialogflow_cx_agent.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDialogflowCxAgentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdca *Resource) Type() string {
	return "google_dialogflow_cx_agent"
}

// LocalName returns the local name for [Resource].
func (gdca *Resource) LocalName() string {
	return gdca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdca *Resource) Configuration() interface{} {
	return gdca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdca *Resource) Dependencies() terra.Dependencies {
	return gdca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdca *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdca *Resource) Attributes() googleDialogflowCxAgentAttributes {
	return googleDialogflowCxAgentAttributes{ref: terra.ReferenceResource(gdca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdca *Resource) ImportState(state io.Reader) error {
	gdca.state = &googleDialogflowCxAgentState{}
	if err := json.NewDecoder(state).Decode(gdca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdca.Type(), gdca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdca *Resource) State() (*googleDialogflowCxAgentState, bool) {
	return gdca.state, gdca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdca *Resource) StateMust() *googleDialogflowCxAgentState {
	if gdca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdca.Type(), gdca.LocalName()))
	}
	return gdca.state
}

// Args contains the configurations for google_dialogflow_cx_agent.
type Args struct {
	// AvatarUri: string, optional
	AvatarUri terra.StringValue `hcl:"avatar_uri,attr"`
	// DefaultLanguageCode: string, required
	DefaultLanguageCode terra.StringValue `hcl:"default_language_code,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// EnableSpellCorrection: bool, optional
	EnableSpellCorrection terra.BoolValue `hcl:"enable_spell_correction,attr"`
	// EnableStackdriverLogging: bool, optional
	EnableStackdriverLogging terra.BoolValue `hcl:"enable_stackdriver_logging,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SecuritySettings: string, optional
	SecuritySettings terra.StringValue `hcl:"security_settings,attr"`
	// SupportedLanguageCodes: list of string, optional
	SupportedLanguageCodes terra.ListValue[terra.StringValue] `hcl:"supported_language_codes,attr"`
	// TimeZone: string, required
	TimeZone terra.StringValue `hcl:"time_zone,attr" validate:"required"`
	// AdvancedSettings: optional
	AdvancedSettings *AdvancedSettings `hcl:"advanced_settings,block"`
	// GitIntegrationSettings: optional
	GitIntegrationSettings *GitIntegrationSettings `hcl:"git_integration_settings,block"`
	// SpeechToTextSettings: optional
	SpeechToTextSettings *SpeechToTextSettings `hcl:"speech_to_text_settings,block"`
	// TextToSpeechSettings: optional
	TextToSpeechSettings *TextToSpeechSettings `hcl:"text_to_speech_settings,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDialogflowCxAgentAttributes struct {
	ref terra.Reference
}

// AvatarUri returns a reference to field avatar_uri of google_dialogflow_cx_agent.
func (gdca googleDialogflowCxAgentAttributes) AvatarUri() terra.StringValue {
	return terra.ReferenceAsString(gdca.ref.Append("avatar_uri"))
}

// DefaultLanguageCode returns a reference to field default_language_code of google_dialogflow_cx_agent.
func (gdca googleDialogflowCxAgentAttributes) DefaultLanguageCode() terra.StringValue {
	return terra.ReferenceAsString(gdca.ref.Append("default_language_code"))
}

// Description returns a reference to field description of google_dialogflow_cx_agent.
func (gdca googleDialogflowCxAgentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdca.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_dialogflow_cx_agent.
func (gdca googleDialogflowCxAgentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdca.ref.Append("display_name"))
}

// EnableSpellCorrection returns a reference to field enable_spell_correction of google_dialogflow_cx_agent.
func (gdca googleDialogflowCxAgentAttributes) EnableSpellCorrection() terra.BoolValue {
	return terra.ReferenceAsBool(gdca.ref.Append("enable_spell_correction"))
}

// EnableStackdriverLogging returns a reference to field enable_stackdriver_logging of google_dialogflow_cx_agent.
func (gdca googleDialogflowCxAgentAttributes) EnableStackdriverLogging() terra.BoolValue {
	return terra.ReferenceAsBool(gdca.ref.Append("enable_stackdriver_logging"))
}

// Id returns a reference to field id of google_dialogflow_cx_agent.
func (gdca googleDialogflowCxAgentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdca.ref.Append("id"))
}

// Location returns a reference to field location of google_dialogflow_cx_agent.
func (gdca googleDialogflowCxAgentAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gdca.ref.Append("location"))
}

// Name returns a reference to field name of google_dialogflow_cx_agent.
func (gdca googleDialogflowCxAgentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdca.ref.Append("name"))
}

// Project returns a reference to field project of google_dialogflow_cx_agent.
func (gdca googleDialogflowCxAgentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdca.ref.Append("project"))
}

// SecuritySettings returns a reference to field security_settings of google_dialogflow_cx_agent.
func (gdca googleDialogflowCxAgentAttributes) SecuritySettings() terra.StringValue {
	return terra.ReferenceAsString(gdca.ref.Append("security_settings"))
}

// StartFlow returns a reference to field start_flow of google_dialogflow_cx_agent.
func (gdca googleDialogflowCxAgentAttributes) StartFlow() terra.StringValue {
	return terra.ReferenceAsString(gdca.ref.Append("start_flow"))
}

// SupportedLanguageCodes returns a reference to field supported_language_codes of google_dialogflow_cx_agent.
func (gdca googleDialogflowCxAgentAttributes) SupportedLanguageCodes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gdca.ref.Append("supported_language_codes"))
}

// TimeZone returns a reference to field time_zone of google_dialogflow_cx_agent.
func (gdca googleDialogflowCxAgentAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(gdca.ref.Append("time_zone"))
}

func (gdca googleDialogflowCxAgentAttributes) AdvancedSettings() terra.ListValue[AdvancedSettingsAttributes] {
	return terra.ReferenceAsList[AdvancedSettingsAttributes](gdca.ref.Append("advanced_settings"))
}

func (gdca googleDialogflowCxAgentAttributes) GitIntegrationSettings() terra.ListValue[GitIntegrationSettingsAttributes] {
	return terra.ReferenceAsList[GitIntegrationSettingsAttributes](gdca.ref.Append("git_integration_settings"))
}

func (gdca googleDialogflowCxAgentAttributes) SpeechToTextSettings() terra.ListValue[SpeechToTextSettingsAttributes] {
	return terra.ReferenceAsList[SpeechToTextSettingsAttributes](gdca.ref.Append("speech_to_text_settings"))
}

func (gdca googleDialogflowCxAgentAttributes) TextToSpeechSettings() terra.ListValue[TextToSpeechSettingsAttributes] {
	return terra.ReferenceAsList[TextToSpeechSettingsAttributes](gdca.ref.Append("text_to_speech_settings"))
}

func (gdca googleDialogflowCxAgentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdca.ref.Append("timeouts"))
}

type googleDialogflowCxAgentState struct {
	AvatarUri                string                        `json:"avatar_uri"`
	DefaultLanguageCode      string                        `json:"default_language_code"`
	Description              string                        `json:"description"`
	DisplayName              string                        `json:"display_name"`
	EnableSpellCorrection    bool                          `json:"enable_spell_correction"`
	EnableStackdriverLogging bool                          `json:"enable_stackdriver_logging"`
	Id                       string                        `json:"id"`
	Location                 string                        `json:"location"`
	Name                     string                        `json:"name"`
	Project                  string                        `json:"project"`
	SecuritySettings         string                        `json:"security_settings"`
	StartFlow                string                        `json:"start_flow"`
	SupportedLanguageCodes   []string                      `json:"supported_language_codes"`
	TimeZone                 string                        `json:"time_zone"`
	AdvancedSettings         []AdvancedSettingsState       `json:"advanced_settings"`
	GitIntegrationSettings   []GitIntegrationSettingsState `json:"git_integration_settings"`
	SpeechToTextSettings     []SpeechToTextSettingsState   `json:"speech_to_text_settings"`
	TextToSpeechSettings     []TextToSpeechSettingsState   `json:"text_to_speech_settings"`
	Timeouts                 *TimeoutsState                `json:"timeouts"`
}
