// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloudbuild_trigger

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataApprovalConfigAttributes struct {
	ref terra.Reference
}

func (ac DataApprovalConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac DataApprovalConfigAttributes) InternalWithRef(ref terra.Reference) DataApprovalConfigAttributes {
	return DataApprovalConfigAttributes{ref: ref}
}

func (ac DataApprovalConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac DataApprovalConfigAttributes) ApprovalRequired() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("approval_required"))
}

type DataBitbucketServerTriggerConfigAttributes struct {
	ref terra.Reference
}

func (bstc DataBitbucketServerTriggerConfigAttributes) InternalRef() (terra.Reference, error) {
	return bstc.ref, nil
}

func (bstc DataBitbucketServerTriggerConfigAttributes) InternalWithRef(ref terra.Reference) DataBitbucketServerTriggerConfigAttributes {
	return DataBitbucketServerTriggerConfigAttributes{ref: ref}
}

func (bstc DataBitbucketServerTriggerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bstc.ref.InternalTokens()
}

func (bstc DataBitbucketServerTriggerConfigAttributes) BitbucketServerConfigResource() terra.StringValue {
	return terra.ReferenceAsString(bstc.ref.Append("bitbucket_server_config_resource"))
}

func (bstc DataBitbucketServerTriggerConfigAttributes) ProjectKey() terra.StringValue {
	return terra.ReferenceAsString(bstc.ref.Append("project_key"))
}

func (bstc DataBitbucketServerTriggerConfigAttributes) RepoSlug() terra.StringValue {
	return terra.ReferenceAsString(bstc.ref.Append("repo_slug"))
}

func (bstc DataBitbucketServerTriggerConfigAttributes) PullRequest() terra.ListValue[DataBitbucketServerTriggerConfigPullRequestAttributes] {
	return terra.ReferenceAsList[DataBitbucketServerTriggerConfigPullRequestAttributes](bstc.ref.Append("pull_request"))
}

func (bstc DataBitbucketServerTriggerConfigAttributes) Push() terra.ListValue[DataBitbucketServerTriggerConfigPushAttributes] {
	return terra.ReferenceAsList[DataBitbucketServerTriggerConfigPushAttributes](bstc.ref.Append("push"))
}

type DataBitbucketServerTriggerConfigPullRequestAttributes struct {
	ref terra.Reference
}

func (pr DataBitbucketServerTriggerConfigPullRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr DataBitbucketServerTriggerConfigPullRequestAttributes) InternalWithRef(ref terra.Reference) DataBitbucketServerTriggerConfigPullRequestAttributes {
	return DataBitbucketServerTriggerConfigPullRequestAttributes{ref: ref}
}

func (pr DataBitbucketServerTriggerConfigPullRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr DataBitbucketServerTriggerConfigPullRequestAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("branch"))
}

func (pr DataBitbucketServerTriggerConfigPullRequestAttributes) CommentControl() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("comment_control"))
}

func (pr DataBitbucketServerTriggerConfigPullRequestAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(pr.ref.Append("invert_regex"))
}

type DataBitbucketServerTriggerConfigPushAttributes struct {
	ref terra.Reference
}

func (p DataBitbucketServerTriggerConfigPushAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DataBitbucketServerTriggerConfigPushAttributes) InternalWithRef(ref terra.Reference) DataBitbucketServerTriggerConfigPushAttributes {
	return DataBitbucketServerTriggerConfigPushAttributes{ref: ref}
}

func (p DataBitbucketServerTriggerConfigPushAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DataBitbucketServerTriggerConfigPushAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("branch"))
}

func (p DataBitbucketServerTriggerConfigPushAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("invert_regex"))
}

func (p DataBitbucketServerTriggerConfigPushAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("tag"))
}

type DataBuildAttributes struct {
	ref terra.Reference
}

func (b DataBuildAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b DataBuildAttributes) InternalWithRef(ref terra.Reference) DataBuildAttributes {
	return DataBuildAttributes{ref: ref}
}

func (b DataBuildAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b DataBuildAttributes) Images() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](b.ref.Append("images"))
}

func (b DataBuildAttributes) LogsBucket() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("logs_bucket"))
}

func (b DataBuildAttributes) QueueTtl() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("queue_ttl"))
}

func (b DataBuildAttributes) Substitutions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](b.ref.Append("substitutions"))
}

func (b DataBuildAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](b.ref.Append("tags"))
}

func (b DataBuildAttributes) Timeout() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("timeout"))
}

func (b DataBuildAttributes) Artifacts() terra.ListValue[DataBuildArtifactsAttributes] {
	return terra.ReferenceAsList[DataBuildArtifactsAttributes](b.ref.Append("artifacts"))
}

func (b DataBuildAttributes) AvailableSecrets() terra.ListValue[DataBuildAvailableSecretsAttributes] {
	return terra.ReferenceAsList[DataBuildAvailableSecretsAttributes](b.ref.Append("available_secrets"))
}

func (b DataBuildAttributes) Options() terra.ListValue[DataBuildOptionsAttributes] {
	return terra.ReferenceAsList[DataBuildOptionsAttributes](b.ref.Append("options"))
}

func (b DataBuildAttributes) Secret() terra.ListValue[DataBuildSecretAttributes] {
	return terra.ReferenceAsList[DataBuildSecretAttributes](b.ref.Append("secret"))
}

func (b DataBuildAttributes) Source() terra.ListValue[DataBuildSourceAttributes] {
	return terra.ReferenceAsList[DataBuildSourceAttributes](b.ref.Append("source"))
}

func (b DataBuildAttributes) Step() terra.ListValue[DataBuildStepAttributes] {
	return terra.ReferenceAsList[DataBuildStepAttributes](b.ref.Append("step"))
}

type DataBuildArtifactsAttributes struct {
	ref terra.Reference
}

func (a DataBuildArtifactsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DataBuildArtifactsAttributes) InternalWithRef(ref terra.Reference) DataBuildArtifactsAttributes {
	return DataBuildArtifactsAttributes{ref: ref}
}

func (a DataBuildArtifactsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DataBuildArtifactsAttributes) Images() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("images"))
}

func (a DataBuildArtifactsAttributes) MavenArtifacts() terra.ListValue[DataBuildArtifactsMavenArtifactsAttributes] {
	return terra.ReferenceAsList[DataBuildArtifactsMavenArtifactsAttributes](a.ref.Append("maven_artifacts"))
}

func (a DataBuildArtifactsAttributes) NpmPackages() terra.ListValue[DataBuildArtifactsNpmPackagesAttributes] {
	return terra.ReferenceAsList[DataBuildArtifactsNpmPackagesAttributes](a.ref.Append("npm_packages"))
}

func (a DataBuildArtifactsAttributes) Objects() terra.ListValue[DataBuildArtifactsObjectsAttributes] {
	return terra.ReferenceAsList[DataBuildArtifactsObjectsAttributes](a.ref.Append("objects"))
}

func (a DataBuildArtifactsAttributes) PythonPackages() terra.ListValue[DataBuildArtifactsPythonPackagesAttributes] {
	return terra.ReferenceAsList[DataBuildArtifactsPythonPackagesAttributes](a.ref.Append("python_packages"))
}

type DataBuildArtifactsMavenArtifactsAttributes struct {
	ref terra.Reference
}

func (ma DataBuildArtifactsMavenArtifactsAttributes) InternalRef() (terra.Reference, error) {
	return ma.ref, nil
}

func (ma DataBuildArtifactsMavenArtifactsAttributes) InternalWithRef(ref terra.Reference) DataBuildArtifactsMavenArtifactsAttributes {
	return DataBuildArtifactsMavenArtifactsAttributes{ref: ref}
}

func (ma DataBuildArtifactsMavenArtifactsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ma.ref.InternalTokens()
}

func (ma DataBuildArtifactsMavenArtifactsAttributes) ArtifactId() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("artifact_id"))
}

func (ma DataBuildArtifactsMavenArtifactsAttributes) GroupId() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("group_id"))
}

func (ma DataBuildArtifactsMavenArtifactsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("path"))
}

func (ma DataBuildArtifactsMavenArtifactsAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("repository"))
}

func (ma DataBuildArtifactsMavenArtifactsAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("version"))
}

type DataBuildArtifactsNpmPackagesAttributes struct {
	ref terra.Reference
}

func (np DataBuildArtifactsNpmPackagesAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np DataBuildArtifactsNpmPackagesAttributes) InternalWithRef(ref terra.Reference) DataBuildArtifactsNpmPackagesAttributes {
	return DataBuildArtifactsNpmPackagesAttributes{ref: ref}
}

func (np DataBuildArtifactsNpmPackagesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np DataBuildArtifactsNpmPackagesAttributes) PackagePath() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("package_path"))
}

func (np DataBuildArtifactsNpmPackagesAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("repository"))
}

type DataBuildArtifactsObjectsAttributes struct {
	ref terra.Reference
}

func (o DataBuildArtifactsObjectsAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o DataBuildArtifactsObjectsAttributes) InternalWithRef(ref terra.Reference) DataBuildArtifactsObjectsAttributes {
	return DataBuildArtifactsObjectsAttributes{ref: ref}
}

func (o DataBuildArtifactsObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o DataBuildArtifactsObjectsAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("location"))
}

func (o DataBuildArtifactsObjectsAttributes) Paths() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](o.ref.Append("paths"))
}

func (o DataBuildArtifactsObjectsAttributes) Timing() terra.ListValue[DataBuildArtifactsObjectsTimingAttributes] {
	return terra.ReferenceAsList[DataBuildArtifactsObjectsTimingAttributes](o.ref.Append("timing"))
}

type DataBuildArtifactsObjectsTimingAttributes struct {
	ref terra.Reference
}

func (t DataBuildArtifactsObjectsTimingAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataBuildArtifactsObjectsTimingAttributes) InternalWithRef(ref terra.Reference) DataBuildArtifactsObjectsTimingAttributes {
	return DataBuildArtifactsObjectsTimingAttributes{ref: ref}
}

func (t DataBuildArtifactsObjectsTimingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataBuildArtifactsObjectsTimingAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("end_time"))
}

func (t DataBuildArtifactsObjectsTimingAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("start_time"))
}

type DataBuildArtifactsPythonPackagesAttributes struct {
	ref terra.Reference
}

func (pp DataBuildArtifactsPythonPackagesAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp DataBuildArtifactsPythonPackagesAttributes) InternalWithRef(ref terra.Reference) DataBuildArtifactsPythonPackagesAttributes {
	return DataBuildArtifactsPythonPackagesAttributes{ref: ref}
}

func (pp DataBuildArtifactsPythonPackagesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp DataBuildArtifactsPythonPackagesAttributes) Paths() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pp.ref.Append("paths"))
}

func (pp DataBuildArtifactsPythonPackagesAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("repository"))
}

type DataBuildAvailableSecretsAttributes struct {
	ref terra.Reference
}

func (as DataBuildAvailableSecretsAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as DataBuildAvailableSecretsAttributes) InternalWithRef(ref terra.Reference) DataBuildAvailableSecretsAttributes {
	return DataBuildAvailableSecretsAttributes{ref: ref}
}

func (as DataBuildAvailableSecretsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as DataBuildAvailableSecretsAttributes) SecretManager() terra.ListValue[DataBuildAvailableSecretsSecretManagerAttributes] {
	return terra.ReferenceAsList[DataBuildAvailableSecretsSecretManagerAttributes](as.ref.Append("secret_manager"))
}

type DataBuildAvailableSecretsSecretManagerAttributes struct {
	ref terra.Reference
}

func (sm DataBuildAvailableSecretsSecretManagerAttributes) InternalRef() (terra.Reference, error) {
	return sm.ref, nil
}

func (sm DataBuildAvailableSecretsSecretManagerAttributes) InternalWithRef(ref terra.Reference) DataBuildAvailableSecretsSecretManagerAttributes {
	return DataBuildAvailableSecretsSecretManagerAttributes{ref: ref}
}

func (sm DataBuildAvailableSecretsSecretManagerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sm.ref.InternalTokens()
}

func (sm DataBuildAvailableSecretsSecretManagerAttributes) Env() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("env"))
}

func (sm DataBuildAvailableSecretsSecretManagerAttributes) VersionName() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("version_name"))
}

type DataBuildOptionsAttributes struct {
	ref terra.Reference
}

func (o DataBuildOptionsAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o DataBuildOptionsAttributes) InternalWithRef(ref terra.Reference) DataBuildOptionsAttributes {
	return DataBuildOptionsAttributes{ref: ref}
}

func (o DataBuildOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o DataBuildOptionsAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("disk_size_gb"))
}

func (o DataBuildOptionsAttributes) DynamicSubstitutions() terra.BoolValue {
	return terra.ReferenceAsBool(o.ref.Append("dynamic_substitutions"))
}

func (o DataBuildOptionsAttributes) Env() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](o.ref.Append("env"))
}

func (o DataBuildOptionsAttributes) LogStreamingOption() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("log_streaming_option"))
}

func (o DataBuildOptionsAttributes) Logging() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("logging"))
}

func (o DataBuildOptionsAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("machine_type"))
}

func (o DataBuildOptionsAttributes) RequestedVerifyOption() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("requested_verify_option"))
}

func (o DataBuildOptionsAttributes) SecretEnv() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](o.ref.Append("secret_env"))
}

func (o DataBuildOptionsAttributes) SourceProvenanceHash() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](o.ref.Append("source_provenance_hash"))
}

func (o DataBuildOptionsAttributes) SubstitutionOption() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("substitution_option"))
}

func (o DataBuildOptionsAttributes) WorkerPool() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("worker_pool"))
}

func (o DataBuildOptionsAttributes) Volumes() terra.ListValue[DataBuildOptionsVolumesAttributes] {
	return terra.ReferenceAsList[DataBuildOptionsVolumesAttributes](o.ref.Append("volumes"))
}

type DataBuildOptionsVolumesAttributes struct {
	ref terra.Reference
}

func (v DataBuildOptionsVolumesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v DataBuildOptionsVolumesAttributes) InternalWithRef(ref terra.Reference) DataBuildOptionsVolumesAttributes {
	return DataBuildOptionsVolumesAttributes{ref: ref}
}

func (v DataBuildOptionsVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v DataBuildOptionsVolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v DataBuildOptionsVolumesAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("path"))
}

type DataBuildSecretAttributes struct {
	ref terra.Reference
}

func (s DataBuildSecretAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataBuildSecretAttributes) InternalWithRef(ref terra.Reference) DataBuildSecretAttributes {
	return DataBuildSecretAttributes{ref: ref}
}

func (s DataBuildSecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataBuildSecretAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("kms_key_name"))
}

func (s DataBuildSecretAttributes) SecretEnv() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("secret_env"))
}

type DataBuildSourceAttributes struct {
	ref terra.Reference
}

func (s DataBuildSourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataBuildSourceAttributes) InternalWithRef(ref terra.Reference) DataBuildSourceAttributes {
	return DataBuildSourceAttributes{ref: ref}
}

func (s DataBuildSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataBuildSourceAttributes) RepoSource() terra.ListValue[DataBuildSourceRepoSourceAttributes] {
	return terra.ReferenceAsList[DataBuildSourceRepoSourceAttributes](s.ref.Append("repo_source"))
}

func (s DataBuildSourceAttributes) StorageSource() terra.ListValue[DataBuildSourceStorageSourceAttributes] {
	return terra.ReferenceAsList[DataBuildSourceStorageSourceAttributes](s.ref.Append("storage_source"))
}

type DataBuildSourceRepoSourceAttributes struct {
	ref terra.Reference
}

func (rs DataBuildSourceRepoSourceAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs DataBuildSourceRepoSourceAttributes) InternalWithRef(ref terra.Reference) DataBuildSourceRepoSourceAttributes {
	return DataBuildSourceRepoSourceAttributes{ref: ref}
}

func (rs DataBuildSourceRepoSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs DataBuildSourceRepoSourceAttributes) BranchName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("branch_name"))
}

func (rs DataBuildSourceRepoSourceAttributes) CommitSha() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("commit_sha"))
}

func (rs DataBuildSourceRepoSourceAttributes) Dir() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("dir"))
}

func (rs DataBuildSourceRepoSourceAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(rs.ref.Append("invert_regex"))
}

func (rs DataBuildSourceRepoSourceAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("project_id"))
}

func (rs DataBuildSourceRepoSourceAttributes) RepoName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("repo_name"))
}

func (rs DataBuildSourceRepoSourceAttributes) Substitutions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rs.ref.Append("substitutions"))
}

func (rs DataBuildSourceRepoSourceAttributes) TagName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("tag_name"))
}

type DataBuildSourceStorageSourceAttributes struct {
	ref terra.Reference
}

func (ss DataBuildSourceStorageSourceAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss DataBuildSourceStorageSourceAttributes) InternalWithRef(ref terra.Reference) DataBuildSourceStorageSourceAttributes {
	return DataBuildSourceStorageSourceAttributes{ref: ref}
}

func (ss DataBuildSourceStorageSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss DataBuildSourceStorageSourceAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("bucket"))
}

func (ss DataBuildSourceStorageSourceAttributes) Generation() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("generation"))
}

func (ss DataBuildSourceStorageSourceAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("object"))
}

type DataBuildStepAttributes struct {
	ref terra.Reference
}

func (s DataBuildStepAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataBuildStepAttributes) InternalWithRef(ref terra.Reference) DataBuildStepAttributes {
	return DataBuildStepAttributes{ref: ref}
}

func (s DataBuildStepAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataBuildStepAttributes) AllowExitCodes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](s.ref.Append("allow_exit_codes"))
}

func (s DataBuildStepAttributes) AllowFailure() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("allow_failure"))
}

func (s DataBuildStepAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("args"))
}

func (s DataBuildStepAttributes) Dir() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("dir"))
}

func (s DataBuildStepAttributes) Entrypoint() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("entrypoint"))
}

func (s DataBuildStepAttributes) Env() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("env"))
}

func (s DataBuildStepAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("id"))
}

func (s DataBuildStepAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s DataBuildStepAttributes) Script() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("script"))
}

func (s DataBuildStepAttributes) SecretEnv() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("secret_env"))
}

func (s DataBuildStepAttributes) Timeout() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("timeout"))
}

func (s DataBuildStepAttributes) Timing() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("timing"))
}

func (s DataBuildStepAttributes) WaitFor() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("wait_for"))
}

func (s DataBuildStepAttributes) Volumes() terra.ListValue[DataBuildStepVolumesAttributes] {
	return terra.ReferenceAsList[DataBuildStepVolumesAttributes](s.ref.Append("volumes"))
}

type DataBuildStepVolumesAttributes struct {
	ref terra.Reference
}

func (v DataBuildStepVolumesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v DataBuildStepVolumesAttributes) InternalWithRef(ref terra.Reference) DataBuildStepVolumesAttributes {
	return DataBuildStepVolumesAttributes{ref: ref}
}

func (v DataBuildStepVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v DataBuildStepVolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v DataBuildStepVolumesAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("path"))
}

type DataGitFileSourceAttributes struct {
	ref terra.Reference
}

func (gfs DataGitFileSourceAttributes) InternalRef() (terra.Reference, error) {
	return gfs.ref, nil
}

func (gfs DataGitFileSourceAttributes) InternalWithRef(ref terra.Reference) DataGitFileSourceAttributes {
	return DataGitFileSourceAttributes{ref: ref}
}

func (gfs DataGitFileSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gfs.ref.InternalTokens()
}

func (gfs DataGitFileSourceAttributes) BitbucketServerConfig() terra.StringValue {
	return terra.ReferenceAsString(gfs.ref.Append("bitbucket_server_config"))
}

func (gfs DataGitFileSourceAttributes) GithubEnterpriseConfig() terra.StringValue {
	return terra.ReferenceAsString(gfs.ref.Append("github_enterprise_config"))
}

func (gfs DataGitFileSourceAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(gfs.ref.Append("path"))
}

func (gfs DataGitFileSourceAttributes) RepoType() terra.StringValue {
	return terra.ReferenceAsString(gfs.ref.Append("repo_type"))
}

func (gfs DataGitFileSourceAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(gfs.ref.Append("repository"))
}

func (gfs DataGitFileSourceAttributes) Revision() terra.StringValue {
	return terra.ReferenceAsString(gfs.ref.Append("revision"))
}

func (gfs DataGitFileSourceAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(gfs.ref.Append("uri"))
}

type DataGithubAttributes struct {
	ref terra.Reference
}

func (g DataGithubAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g DataGithubAttributes) InternalWithRef(ref terra.Reference) DataGithubAttributes {
	return DataGithubAttributes{ref: ref}
}

func (g DataGithubAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g DataGithubAttributes) EnterpriseConfigResourceName() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("enterprise_config_resource_name"))
}

func (g DataGithubAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("name"))
}

func (g DataGithubAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("owner"))
}

func (g DataGithubAttributes) PullRequest() terra.ListValue[DataGithubPullRequestAttributes] {
	return terra.ReferenceAsList[DataGithubPullRequestAttributes](g.ref.Append("pull_request"))
}

func (g DataGithubAttributes) Push() terra.ListValue[DataGithubPushAttributes] {
	return terra.ReferenceAsList[DataGithubPushAttributes](g.ref.Append("push"))
}

type DataGithubPullRequestAttributes struct {
	ref terra.Reference
}

func (pr DataGithubPullRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr DataGithubPullRequestAttributes) InternalWithRef(ref terra.Reference) DataGithubPullRequestAttributes {
	return DataGithubPullRequestAttributes{ref: ref}
}

func (pr DataGithubPullRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr DataGithubPullRequestAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("branch"))
}

func (pr DataGithubPullRequestAttributes) CommentControl() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("comment_control"))
}

func (pr DataGithubPullRequestAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(pr.ref.Append("invert_regex"))
}

type DataGithubPushAttributes struct {
	ref terra.Reference
}

func (p DataGithubPushAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DataGithubPushAttributes) InternalWithRef(ref terra.Reference) DataGithubPushAttributes {
	return DataGithubPushAttributes{ref: ref}
}

func (p DataGithubPushAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DataGithubPushAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("branch"))
}

func (p DataGithubPushAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("invert_regex"))
}

func (p DataGithubPushAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("tag"))
}

type DataPubsubConfigAttributes struct {
	ref terra.Reference
}

func (pc DataPubsubConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc DataPubsubConfigAttributes) InternalWithRef(ref terra.Reference) DataPubsubConfigAttributes {
	return DataPubsubConfigAttributes{ref: ref}
}

func (pc DataPubsubConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc DataPubsubConfigAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("service_account_email"))
}

func (pc DataPubsubConfigAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("state"))
}

func (pc DataPubsubConfigAttributes) Subscription() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("subscription"))
}

func (pc DataPubsubConfigAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("topic"))
}

type DataRepositoryEventConfigAttributes struct {
	ref terra.Reference
}

func (rec DataRepositoryEventConfigAttributes) InternalRef() (terra.Reference, error) {
	return rec.ref, nil
}

func (rec DataRepositoryEventConfigAttributes) InternalWithRef(ref terra.Reference) DataRepositoryEventConfigAttributes {
	return DataRepositoryEventConfigAttributes{ref: ref}
}

func (rec DataRepositoryEventConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rec.ref.InternalTokens()
}

func (rec DataRepositoryEventConfigAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(rec.ref.Append("repository"))
}

func (rec DataRepositoryEventConfigAttributes) PullRequest() terra.ListValue[DataRepositoryEventConfigPullRequestAttributes] {
	return terra.ReferenceAsList[DataRepositoryEventConfigPullRequestAttributes](rec.ref.Append("pull_request"))
}

func (rec DataRepositoryEventConfigAttributes) Push() terra.ListValue[DataRepositoryEventConfigPushAttributes] {
	return terra.ReferenceAsList[DataRepositoryEventConfigPushAttributes](rec.ref.Append("push"))
}

type DataRepositoryEventConfigPullRequestAttributes struct {
	ref terra.Reference
}

func (pr DataRepositoryEventConfigPullRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr DataRepositoryEventConfigPullRequestAttributes) InternalWithRef(ref terra.Reference) DataRepositoryEventConfigPullRequestAttributes {
	return DataRepositoryEventConfigPullRequestAttributes{ref: ref}
}

func (pr DataRepositoryEventConfigPullRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr DataRepositoryEventConfigPullRequestAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("branch"))
}

func (pr DataRepositoryEventConfigPullRequestAttributes) CommentControl() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("comment_control"))
}

func (pr DataRepositoryEventConfigPullRequestAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(pr.ref.Append("invert_regex"))
}

type DataRepositoryEventConfigPushAttributes struct {
	ref terra.Reference
}

func (p DataRepositoryEventConfigPushAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DataRepositoryEventConfigPushAttributes) InternalWithRef(ref terra.Reference) DataRepositoryEventConfigPushAttributes {
	return DataRepositoryEventConfigPushAttributes{ref: ref}
}

func (p DataRepositoryEventConfigPushAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DataRepositoryEventConfigPushAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("branch"))
}

func (p DataRepositoryEventConfigPushAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("invert_regex"))
}

func (p DataRepositoryEventConfigPushAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("tag"))
}

type DataSourceToBuildAttributes struct {
	ref terra.Reference
}

func (stb DataSourceToBuildAttributes) InternalRef() (terra.Reference, error) {
	return stb.ref, nil
}

func (stb DataSourceToBuildAttributes) InternalWithRef(ref terra.Reference) DataSourceToBuildAttributes {
	return DataSourceToBuildAttributes{ref: ref}
}

func (stb DataSourceToBuildAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return stb.ref.InternalTokens()
}

func (stb DataSourceToBuildAttributes) BitbucketServerConfig() terra.StringValue {
	return terra.ReferenceAsString(stb.ref.Append("bitbucket_server_config"))
}

func (stb DataSourceToBuildAttributes) GithubEnterpriseConfig() terra.StringValue {
	return terra.ReferenceAsString(stb.ref.Append("github_enterprise_config"))
}

func (stb DataSourceToBuildAttributes) Ref() terra.StringValue {
	return terra.ReferenceAsString(stb.ref.Append("ref"))
}

func (stb DataSourceToBuildAttributes) RepoType() terra.StringValue {
	return terra.ReferenceAsString(stb.ref.Append("repo_type"))
}

func (stb DataSourceToBuildAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(stb.ref.Append("repository"))
}

func (stb DataSourceToBuildAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(stb.ref.Append("uri"))
}

type DataTriggerTemplateAttributes struct {
	ref terra.Reference
}

func (tt DataTriggerTemplateAttributes) InternalRef() (terra.Reference, error) {
	return tt.ref, nil
}

func (tt DataTriggerTemplateAttributes) InternalWithRef(ref terra.Reference) DataTriggerTemplateAttributes {
	return DataTriggerTemplateAttributes{ref: ref}
}

func (tt DataTriggerTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tt.ref.InternalTokens()
}

func (tt DataTriggerTemplateAttributes) BranchName() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("branch_name"))
}

func (tt DataTriggerTemplateAttributes) CommitSha() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("commit_sha"))
}

func (tt DataTriggerTemplateAttributes) Dir() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("dir"))
}

func (tt DataTriggerTemplateAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(tt.ref.Append("invert_regex"))
}

func (tt DataTriggerTemplateAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("project_id"))
}

func (tt DataTriggerTemplateAttributes) RepoName() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("repo_name"))
}

func (tt DataTriggerTemplateAttributes) TagName() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("tag_name"))
}

type DataWebhookConfigAttributes struct {
	ref terra.Reference
}

func (wc DataWebhookConfigAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc DataWebhookConfigAttributes) InternalWithRef(ref terra.Reference) DataWebhookConfigAttributes {
	return DataWebhookConfigAttributes{ref: ref}
}

func (wc DataWebhookConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc DataWebhookConfigAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("secret"))
}

func (wc DataWebhookConfigAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("state"))
}

type DataApprovalConfigState struct {
	ApprovalRequired bool `json:"approval_required"`
}

type DataBitbucketServerTriggerConfigState struct {
	BitbucketServerConfigResource string                                             `json:"bitbucket_server_config_resource"`
	ProjectKey                    string                                             `json:"project_key"`
	RepoSlug                      string                                             `json:"repo_slug"`
	PullRequest                   []DataBitbucketServerTriggerConfigPullRequestState `json:"pull_request"`
	Push                          []DataBitbucketServerTriggerConfigPushState        `json:"push"`
}

type DataBitbucketServerTriggerConfigPullRequestState struct {
	Branch         string `json:"branch"`
	CommentControl string `json:"comment_control"`
	InvertRegex    bool   `json:"invert_regex"`
}

type DataBitbucketServerTriggerConfigPushState struct {
	Branch      string `json:"branch"`
	InvertRegex bool   `json:"invert_regex"`
	Tag         string `json:"tag"`
}

type DataBuildState struct {
	Images           []string                         `json:"images"`
	LogsBucket       string                           `json:"logs_bucket"`
	QueueTtl         string                           `json:"queue_ttl"`
	Substitutions    map[string]string                `json:"substitutions"`
	Tags             []string                         `json:"tags"`
	Timeout          string                           `json:"timeout"`
	Artifacts        []DataBuildArtifactsState        `json:"artifacts"`
	AvailableSecrets []DataBuildAvailableSecretsState `json:"available_secrets"`
	Options          []DataBuildOptionsState          `json:"options"`
	Secret           []DataBuildSecretState           `json:"secret"`
	Source           []DataBuildSourceState           `json:"source"`
	Step             []DataBuildStepState             `json:"step"`
}

type DataBuildArtifactsState struct {
	Images         []string                                `json:"images"`
	MavenArtifacts []DataBuildArtifactsMavenArtifactsState `json:"maven_artifacts"`
	NpmPackages    []DataBuildArtifactsNpmPackagesState    `json:"npm_packages"`
	Objects        []DataBuildArtifactsObjectsState        `json:"objects"`
	PythonPackages []DataBuildArtifactsPythonPackagesState `json:"python_packages"`
}

type DataBuildArtifactsMavenArtifactsState struct {
	ArtifactId string `json:"artifact_id"`
	GroupId    string `json:"group_id"`
	Path       string `json:"path"`
	Repository string `json:"repository"`
	Version    string `json:"version"`
}

type DataBuildArtifactsNpmPackagesState struct {
	PackagePath string `json:"package_path"`
	Repository  string `json:"repository"`
}

type DataBuildArtifactsObjectsState struct {
	Location string                                 `json:"location"`
	Paths    []string                               `json:"paths"`
	Timing   []DataBuildArtifactsObjectsTimingState `json:"timing"`
}

type DataBuildArtifactsObjectsTimingState struct {
	EndTime   string `json:"end_time"`
	StartTime string `json:"start_time"`
}

type DataBuildArtifactsPythonPackagesState struct {
	Paths      []string `json:"paths"`
	Repository string   `json:"repository"`
}

type DataBuildAvailableSecretsState struct {
	SecretManager []DataBuildAvailableSecretsSecretManagerState `json:"secret_manager"`
}

type DataBuildAvailableSecretsSecretManagerState struct {
	Env         string `json:"env"`
	VersionName string `json:"version_name"`
}

type DataBuildOptionsState struct {
	DiskSizeGb            float64                        `json:"disk_size_gb"`
	DynamicSubstitutions  bool                           `json:"dynamic_substitutions"`
	Env                   []string                       `json:"env"`
	LogStreamingOption    string                         `json:"log_streaming_option"`
	Logging               string                         `json:"logging"`
	MachineType           string                         `json:"machine_type"`
	RequestedVerifyOption string                         `json:"requested_verify_option"`
	SecretEnv             []string                       `json:"secret_env"`
	SourceProvenanceHash  []string                       `json:"source_provenance_hash"`
	SubstitutionOption    string                         `json:"substitution_option"`
	WorkerPool            string                         `json:"worker_pool"`
	Volumes               []DataBuildOptionsVolumesState `json:"volumes"`
}

type DataBuildOptionsVolumesState struct {
	Name string `json:"name"`
	Path string `json:"path"`
}

type DataBuildSecretState struct {
	KmsKeyName string            `json:"kms_key_name"`
	SecretEnv  map[string]string `json:"secret_env"`
}

type DataBuildSourceState struct {
	RepoSource    []DataBuildSourceRepoSourceState    `json:"repo_source"`
	StorageSource []DataBuildSourceStorageSourceState `json:"storage_source"`
}

type DataBuildSourceRepoSourceState struct {
	BranchName    string            `json:"branch_name"`
	CommitSha     string            `json:"commit_sha"`
	Dir           string            `json:"dir"`
	InvertRegex   bool              `json:"invert_regex"`
	ProjectId     string            `json:"project_id"`
	RepoName      string            `json:"repo_name"`
	Substitutions map[string]string `json:"substitutions"`
	TagName       string            `json:"tag_name"`
}

type DataBuildSourceStorageSourceState struct {
	Bucket     string `json:"bucket"`
	Generation string `json:"generation"`
	Object     string `json:"object"`
}

type DataBuildStepState struct {
	AllowExitCodes []float64                   `json:"allow_exit_codes"`
	AllowFailure   bool                        `json:"allow_failure"`
	Args           []string                    `json:"args"`
	Dir            string                      `json:"dir"`
	Entrypoint     string                      `json:"entrypoint"`
	Env            []string                    `json:"env"`
	Id             string                      `json:"id"`
	Name           string                      `json:"name"`
	Script         string                      `json:"script"`
	SecretEnv      []string                    `json:"secret_env"`
	Timeout        string                      `json:"timeout"`
	Timing         string                      `json:"timing"`
	WaitFor        []string                    `json:"wait_for"`
	Volumes        []DataBuildStepVolumesState `json:"volumes"`
}

type DataBuildStepVolumesState struct {
	Name string `json:"name"`
	Path string `json:"path"`
}

type DataGitFileSourceState struct {
	BitbucketServerConfig  string `json:"bitbucket_server_config"`
	GithubEnterpriseConfig string `json:"github_enterprise_config"`
	Path                   string `json:"path"`
	RepoType               string `json:"repo_type"`
	Repository             string `json:"repository"`
	Revision               string `json:"revision"`
	Uri                    string `json:"uri"`
}

type DataGithubState struct {
	EnterpriseConfigResourceName string                       `json:"enterprise_config_resource_name"`
	Name                         string                       `json:"name"`
	Owner                        string                       `json:"owner"`
	PullRequest                  []DataGithubPullRequestState `json:"pull_request"`
	Push                         []DataGithubPushState        `json:"push"`
}

type DataGithubPullRequestState struct {
	Branch         string `json:"branch"`
	CommentControl string `json:"comment_control"`
	InvertRegex    bool   `json:"invert_regex"`
}

type DataGithubPushState struct {
	Branch      string `json:"branch"`
	InvertRegex bool   `json:"invert_regex"`
	Tag         string `json:"tag"`
}

type DataPubsubConfigState struct {
	ServiceAccountEmail string `json:"service_account_email"`
	State               string `json:"state"`
	Subscription        string `json:"subscription"`
	Topic               string `json:"topic"`
}

type DataRepositoryEventConfigState struct {
	Repository  string                                      `json:"repository"`
	PullRequest []DataRepositoryEventConfigPullRequestState `json:"pull_request"`
	Push        []DataRepositoryEventConfigPushState        `json:"push"`
}

type DataRepositoryEventConfigPullRequestState struct {
	Branch         string `json:"branch"`
	CommentControl string `json:"comment_control"`
	InvertRegex    bool   `json:"invert_regex"`
}

type DataRepositoryEventConfigPushState struct {
	Branch      string `json:"branch"`
	InvertRegex bool   `json:"invert_regex"`
	Tag         string `json:"tag"`
}

type DataSourceToBuildState struct {
	BitbucketServerConfig  string `json:"bitbucket_server_config"`
	GithubEnterpriseConfig string `json:"github_enterprise_config"`
	Ref                    string `json:"ref"`
	RepoType               string `json:"repo_type"`
	Repository             string `json:"repository"`
	Uri                    string `json:"uri"`
}

type DataTriggerTemplateState struct {
	BranchName  string `json:"branch_name"`
	CommitSha   string `json:"commit_sha"`
	Dir         string `json:"dir"`
	InvertRegex bool   `json:"invert_regex"`
	ProjectId   string `json:"project_id"`
	RepoName    string `json:"repo_name"`
	TagName     string `json:"tag_name"`
}

type DataWebhookConfigState struct {
	Secret string `json:"secret"`
	State  string `json:"state"`
}
