// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataproc_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dataproc_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataprocClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdc *Resource) Type() string {
	return "google_dataproc_cluster"
}

// LocalName returns the local name for [Resource].
func (gdc *Resource) LocalName() string {
	return gdc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdc *Resource) Configuration() interface{} {
	return gdc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdc *Resource) Dependencies() terra.Dependencies {
	return gdc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdc *Resource) Attributes() googleDataprocClusterAttributes {
	return googleDataprocClusterAttributes{ref: terra.ReferenceResource(gdc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdc *Resource) ImportState(state io.Reader) error {
	gdc.state = &googleDataprocClusterState{}
	if err := json.NewDecoder(state).Decode(gdc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdc.Type(), gdc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdc *Resource) State() (*googleDataprocClusterState, bool) {
	return gdc.state, gdc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdc *Resource) StateMust() *googleDataprocClusterState {
	if gdc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdc.Type(), gdc.LocalName()))
	}
	return gdc.state
}

// Args contains the configurations for google_dataproc_cluster.
type Args struct {
	// GracefulDecommissionTimeout: string, optional
	GracefulDecommissionTimeout terra.StringValue `hcl:"graceful_decommission_timeout,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ClusterConfig: optional
	ClusterConfig *ClusterConfig `hcl:"cluster_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VirtualClusterConfig: optional
	VirtualClusterConfig *VirtualClusterConfig `hcl:"virtual_cluster_config,block"`
}

type googleDataprocClusterAttributes struct {
	ref terra.Reference
}

// EffectiveLabels returns a reference to field effective_labels of google_dataproc_cluster.
func (gdc googleDataprocClusterAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdc.ref.Append("effective_labels"))
}

// GracefulDecommissionTimeout returns a reference to field graceful_decommission_timeout of google_dataproc_cluster.
func (gdc googleDataprocClusterAttributes) GracefulDecommissionTimeout() terra.StringValue {
	return terra.ReferenceAsString(gdc.ref.Append("graceful_decommission_timeout"))
}

// Id returns a reference to field id of google_dataproc_cluster.
func (gdc googleDataprocClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdc.ref.Append("id"))
}

// Labels returns a reference to field labels of google_dataproc_cluster.
func (gdc googleDataprocClusterAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdc.ref.Append("labels"))
}

// Name returns a reference to field name of google_dataproc_cluster.
func (gdc googleDataprocClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdc.ref.Append("name"))
}

// Project returns a reference to field project of google_dataproc_cluster.
func (gdc googleDataprocClusterAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdc.ref.Append("project"))
}

// Region returns a reference to field region of google_dataproc_cluster.
func (gdc googleDataprocClusterAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gdc.ref.Append("region"))
}

// TerraformLabels returns a reference to field terraform_labels of google_dataproc_cluster.
func (gdc googleDataprocClusterAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdc.ref.Append("terraform_labels"))
}

func (gdc googleDataprocClusterAttributes) ClusterConfig() terra.ListValue[ClusterConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigAttributes](gdc.ref.Append("cluster_config"))
}

func (gdc googleDataprocClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdc.ref.Append("timeouts"))
}

func (gdc googleDataprocClusterAttributes) VirtualClusterConfig() terra.ListValue[VirtualClusterConfigAttributes] {
	return terra.ReferenceAsList[VirtualClusterConfigAttributes](gdc.ref.Append("virtual_cluster_config"))
}

type googleDataprocClusterState struct {
	EffectiveLabels             map[string]string           `json:"effective_labels"`
	GracefulDecommissionTimeout string                      `json:"graceful_decommission_timeout"`
	Id                          string                      `json:"id"`
	Labels                      map[string]string           `json:"labels"`
	Name                        string                      `json:"name"`
	Project                     string                      `json:"project"`
	Region                      string                      `json:"region"`
	TerraformLabels             map[string]string           `json:"terraform_labels"`
	ClusterConfig               []ClusterConfigState        `json:"cluster_config"`
	Timeouts                    *TimeoutsState              `json:"timeouts"`
	VirtualClusterConfig        []VirtualClusterConfigState `json:"virtual_cluster_config"`
}
