// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_logging_linked_dataset

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_logging_linked_dataset.
type Resource struct {
	Name      string
	Args      Args
	state     *googleLoggingLinkedDatasetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (glld *Resource) Type() string {
	return "google_logging_linked_dataset"
}

// LocalName returns the local name for [Resource].
func (glld *Resource) LocalName() string {
	return glld.Name
}

// Configuration returns the configuration (args) for [Resource].
func (glld *Resource) Configuration() interface{} {
	return glld.Args
}

// DependOn is used for other resources to depend on [Resource].
func (glld *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(glld)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (glld *Resource) Dependencies() terra.Dependencies {
	return glld.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (glld *Resource) LifecycleManagement() *terra.Lifecycle {
	return glld.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (glld *Resource) Attributes() googleLoggingLinkedDatasetAttributes {
	return googleLoggingLinkedDatasetAttributes{ref: terra.ReferenceResource(glld)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (glld *Resource) ImportState(state io.Reader) error {
	glld.state = &googleLoggingLinkedDatasetState{}
	if err := json.NewDecoder(state).Decode(glld.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", glld.Type(), glld.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (glld *Resource) State() (*googleLoggingLinkedDatasetState, bool) {
	return glld.state, glld.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (glld *Resource) StateMust() *googleLoggingLinkedDatasetState {
	if glld.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", glld.Type(), glld.LocalName()))
	}
	return glld.state
}

// Args contains the configurations for google_logging_linked_dataset.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkId: string, required
	LinkId terra.StringValue `hcl:"link_id,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Parent: string, optional
	Parent terra.StringValue `hcl:"parent,attr"`
	// BigqueryDataset: min=0
	BigqueryDataset []BigqueryDataset `hcl:"bigquery_dataset,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleLoggingLinkedDatasetAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of google_logging_linked_dataset.
func (glld googleLoggingLinkedDatasetAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(glld.ref.Append("bucket"))
}

// CreateTime returns a reference to field create_time of google_logging_linked_dataset.
func (glld googleLoggingLinkedDatasetAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(glld.ref.Append("create_time"))
}

// Description returns a reference to field description of google_logging_linked_dataset.
func (glld googleLoggingLinkedDatasetAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(glld.ref.Append("description"))
}

// Id returns a reference to field id of google_logging_linked_dataset.
func (glld googleLoggingLinkedDatasetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(glld.ref.Append("id"))
}

// LifecycleState returns a reference to field lifecycle_state of google_logging_linked_dataset.
func (glld googleLoggingLinkedDatasetAttributes) LifecycleState() terra.StringValue {
	return terra.ReferenceAsString(glld.ref.Append("lifecycle_state"))
}

// LinkId returns a reference to field link_id of google_logging_linked_dataset.
func (glld googleLoggingLinkedDatasetAttributes) LinkId() terra.StringValue {
	return terra.ReferenceAsString(glld.ref.Append("link_id"))
}

// Location returns a reference to field location of google_logging_linked_dataset.
func (glld googleLoggingLinkedDatasetAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(glld.ref.Append("location"))
}

// Name returns a reference to field name of google_logging_linked_dataset.
func (glld googleLoggingLinkedDatasetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(glld.ref.Append("name"))
}

// Parent returns a reference to field parent of google_logging_linked_dataset.
func (glld googleLoggingLinkedDatasetAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(glld.ref.Append("parent"))
}

func (glld googleLoggingLinkedDatasetAttributes) BigqueryDataset() terra.ListValue[BigqueryDatasetAttributes] {
	return terra.ReferenceAsList[BigqueryDatasetAttributes](glld.ref.Append("bigquery_dataset"))
}

func (glld googleLoggingLinkedDatasetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](glld.ref.Append("timeouts"))
}

type googleLoggingLinkedDatasetState struct {
	Bucket          string                 `json:"bucket"`
	CreateTime      string                 `json:"create_time"`
	Description     string                 `json:"description"`
	Id              string                 `json:"id"`
	LifecycleState  string                 `json:"lifecycle_state"`
	LinkId          string                 `json:"link_id"`
	Location        string                 `json:"location"`
	Name            string                 `json:"name"`
	Parent          string                 `json:"parent"`
	BigqueryDataset []BigqueryDatasetState `json:"bigquery_dataset"`
	Timeouts        *TimeoutsState         `json:"timeouts"`
}
