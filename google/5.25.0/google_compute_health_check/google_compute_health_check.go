// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_health_check

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_health_check.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeHealthCheckState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gchc *Resource) Type() string {
	return "google_compute_health_check"
}

// LocalName returns the local name for [Resource].
func (gchc *Resource) LocalName() string {
	return gchc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gchc *Resource) Configuration() interface{} {
	return gchc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gchc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gchc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gchc *Resource) Dependencies() terra.Dependencies {
	return gchc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gchc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gchc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gchc *Resource) Attributes() googleComputeHealthCheckAttributes {
	return googleComputeHealthCheckAttributes{ref: terra.ReferenceResource(gchc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gchc *Resource) ImportState(state io.Reader) error {
	gchc.state = &googleComputeHealthCheckState{}
	if err := json.NewDecoder(state).Decode(gchc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gchc.Type(), gchc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gchc *Resource) State() (*googleComputeHealthCheckState, bool) {
	return gchc.state, gchc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gchc *Resource) StateMust() *googleComputeHealthCheckState {
	if gchc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gchc.Type(), gchc.LocalName()))
	}
	return gchc.state
}

// Args contains the configurations for google_compute_health_check.
type Args struct {
	// CheckIntervalSec: number, optional
	CheckIntervalSec terra.NumberValue `hcl:"check_interval_sec,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// HealthyThreshold: number, optional
	HealthyThreshold terra.NumberValue `hcl:"healthy_threshold,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TimeoutSec: number, optional
	TimeoutSec terra.NumberValue `hcl:"timeout_sec,attr"`
	// UnhealthyThreshold: number, optional
	UnhealthyThreshold terra.NumberValue `hcl:"unhealthy_threshold,attr"`
	// GrpcHealthCheck: optional
	GrpcHealthCheck *GrpcHealthCheck `hcl:"grpc_health_check,block"`
	// Http2HealthCheck: optional
	Http2HealthCheck *Http2HealthCheck `hcl:"http2_health_check,block"`
	// HttpHealthCheck: optional
	HttpHealthCheck *HttpHealthCheck `hcl:"http_health_check,block"`
	// HttpsHealthCheck: optional
	HttpsHealthCheck *HttpsHealthCheck `hcl:"https_health_check,block"`
	// LogConfig: optional
	LogConfig *LogConfig `hcl:"log_config,block"`
	// SslHealthCheck: optional
	SslHealthCheck *SslHealthCheck `hcl:"ssl_health_check,block"`
	// TcpHealthCheck: optional
	TcpHealthCheck *TcpHealthCheck `hcl:"tcp_health_check,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeHealthCheckAttributes struct {
	ref terra.Reference
}

// CheckIntervalSec returns a reference to field check_interval_sec of google_compute_health_check.
func (gchc googleComputeHealthCheckAttributes) CheckIntervalSec() terra.NumberValue {
	return terra.ReferenceAsNumber(gchc.ref.Append("check_interval_sec"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_health_check.
func (gchc googleComputeHealthCheckAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gchc.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_health_check.
func (gchc googleComputeHealthCheckAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gchc.ref.Append("description"))
}

// HealthyThreshold returns a reference to field healthy_threshold of google_compute_health_check.
func (gchc googleComputeHealthCheckAttributes) HealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(gchc.ref.Append("healthy_threshold"))
}

// Id returns a reference to field id of google_compute_health_check.
func (gchc googleComputeHealthCheckAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gchc.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_health_check.
func (gchc googleComputeHealthCheckAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gchc.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_health_check.
func (gchc googleComputeHealthCheckAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gchc.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_compute_health_check.
func (gchc googleComputeHealthCheckAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gchc.ref.Append("self_link"))
}

// TimeoutSec returns a reference to field timeout_sec of google_compute_health_check.
func (gchc googleComputeHealthCheckAttributes) TimeoutSec() terra.NumberValue {
	return terra.ReferenceAsNumber(gchc.ref.Append("timeout_sec"))
}

// Type returns a reference to field type of google_compute_health_check.
func (gchc googleComputeHealthCheckAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gchc.ref.Append("type"))
}

// UnhealthyThreshold returns a reference to field unhealthy_threshold of google_compute_health_check.
func (gchc googleComputeHealthCheckAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(gchc.ref.Append("unhealthy_threshold"))
}

func (gchc googleComputeHealthCheckAttributes) GrpcHealthCheck() terra.ListValue[GrpcHealthCheckAttributes] {
	return terra.ReferenceAsList[GrpcHealthCheckAttributes](gchc.ref.Append("grpc_health_check"))
}

func (gchc googleComputeHealthCheckAttributes) Http2HealthCheck() terra.ListValue[Http2HealthCheckAttributes] {
	return terra.ReferenceAsList[Http2HealthCheckAttributes](gchc.ref.Append("http2_health_check"))
}

func (gchc googleComputeHealthCheckAttributes) HttpHealthCheck() terra.ListValue[HttpHealthCheckAttributes] {
	return terra.ReferenceAsList[HttpHealthCheckAttributes](gchc.ref.Append("http_health_check"))
}

func (gchc googleComputeHealthCheckAttributes) HttpsHealthCheck() terra.ListValue[HttpsHealthCheckAttributes] {
	return terra.ReferenceAsList[HttpsHealthCheckAttributes](gchc.ref.Append("https_health_check"))
}

func (gchc googleComputeHealthCheckAttributes) LogConfig() terra.ListValue[LogConfigAttributes] {
	return terra.ReferenceAsList[LogConfigAttributes](gchc.ref.Append("log_config"))
}

func (gchc googleComputeHealthCheckAttributes) SslHealthCheck() terra.ListValue[SslHealthCheckAttributes] {
	return terra.ReferenceAsList[SslHealthCheckAttributes](gchc.ref.Append("ssl_health_check"))
}

func (gchc googleComputeHealthCheckAttributes) TcpHealthCheck() terra.ListValue[TcpHealthCheckAttributes] {
	return terra.ReferenceAsList[TcpHealthCheckAttributes](gchc.ref.Append("tcp_health_check"))
}

func (gchc googleComputeHealthCheckAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gchc.ref.Append("timeouts"))
}

type googleComputeHealthCheckState struct {
	CheckIntervalSec   float64                 `json:"check_interval_sec"`
	CreationTimestamp  string                  `json:"creation_timestamp"`
	Description        string                  `json:"description"`
	HealthyThreshold   float64                 `json:"healthy_threshold"`
	Id                 string                  `json:"id"`
	Name               string                  `json:"name"`
	Project            string                  `json:"project"`
	SelfLink           string                  `json:"self_link"`
	TimeoutSec         float64                 `json:"timeout_sec"`
	Type               string                  `json:"type"`
	UnhealthyThreshold float64                 `json:"unhealthy_threshold"`
	GrpcHealthCheck    []GrpcHealthCheckState  `json:"grpc_health_check"`
	Http2HealthCheck   []Http2HealthCheckState `json:"http2_health_check"`
	HttpHealthCheck    []HttpHealthCheckState  `json:"http_health_check"`
	HttpsHealthCheck   []HttpsHealthCheckState `json:"https_health_check"`
	LogConfig          []LogConfigState        `json:"log_config"`
	SslHealthCheck     []SslHealthCheckState   `json:"ssl_health_check"`
	TcpHealthCheck     []TcpHealthCheckState   `json:"tcp_health_check"`
	Timeouts           *TimeoutsState          `json:"timeouts"`
}
