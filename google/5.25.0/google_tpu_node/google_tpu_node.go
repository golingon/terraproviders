// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_tpu_node

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_tpu_node.
type Resource struct {
	Name      string
	Args      Args
	state     *googleTpuNodeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gtn *Resource) Type() string {
	return "google_tpu_node"
}

// LocalName returns the local name for [Resource].
func (gtn *Resource) LocalName() string {
	return gtn.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gtn *Resource) Configuration() interface{} {
	return gtn.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gtn *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gtn)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gtn *Resource) Dependencies() terra.Dependencies {
	return gtn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gtn *Resource) LifecycleManagement() *terra.Lifecycle {
	return gtn.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gtn *Resource) Attributes() googleTpuNodeAttributes {
	return googleTpuNodeAttributes{ref: terra.ReferenceResource(gtn)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gtn *Resource) ImportState(state io.Reader) error {
	gtn.state = &googleTpuNodeState{}
	if err := json.NewDecoder(state).Decode(gtn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gtn.Type(), gtn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gtn *Resource) State() (*googleTpuNodeState, bool) {
	return gtn.state, gtn.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gtn *Resource) StateMust() *googleTpuNodeState {
	if gtn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gtn.Type(), gtn.LocalName()))
	}
	return gtn.state
}

// Args contains the configurations for google_tpu_node.
type Args struct {
	// AcceleratorType: string, required
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr" validate:"required"`
	// CidrBlock: string, optional
	CidrBlock terra.StringValue `hcl:"cidr_block,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TensorflowVersion: string, required
	TensorflowVersion terra.StringValue `hcl:"tensorflow_version,attr" validate:"required"`
	// UseServiceNetworking: bool, optional
	UseServiceNetworking terra.BoolValue `hcl:"use_service_networking,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// SchedulingConfig: optional
	SchedulingConfig *SchedulingConfig `hcl:"scheduling_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleTpuNodeAttributes struct {
	ref terra.Reference
}

// AcceleratorType returns a reference to field accelerator_type of google_tpu_node.
func (gtn googleTpuNodeAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(gtn.ref.Append("accelerator_type"))
}

// CidrBlock returns a reference to field cidr_block of google_tpu_node.
func (gtn googleTpuNodeAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(gtn.ref.Append("cidr_block"))
}

// Description returns a reference to field description of google_tpu_node.
func (gtn googleTpuNodeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gtn.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_tpu_node.
func (gtn googleTpuNodeAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gtn.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_tpu_node.
func (gtn googleTpuNodeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gtn.ref.Append("id"))
}

// Labels returns a reference to field labels of google_tpu_node.
func (gtn googleTpuNodeAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gtn.ref.Append("labels"))
}

// Name returns a reference to field name of google_tpu_node.
func (gtn googleTpuNodeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gtn.ref.Append("name"))
}

// Network returns a reference to field network of google_tpu_node.
func (gtn googleTpuNodeAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gtn.ref.Append("network"))
}

// Project returns a reference to field project of google_tpu_node.
func (gtn googleTpuNodeAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gtn.ref.Append("project"))
}

// ServiceAccount returns a reference to field service_account of google_tpu_node.
func (gtn googleTpuNodeAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(gtn.ref.Append("service_account"))
}

// TensorflowVersion returns a reference to field tensorflow_version of google_tpu_node.
func (gtn googleTpuNodeAttributes) TensorflowVersion() terra.StringValue {
	return terra.ReferenceAsString(gtn.ref.Append("tensorflow_version"))
}

// TerraformLabels returns a reference to field terraform_labels of google_tpu_node.
func (gtn googleTpuNodeAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gtn.ref.Append("terraform_labels"))
}

// UseServiceNetworking returns a reference to field use_service_networking of google_tpu_node.
func (gtn googleTpuNodeAttributes) UseServiceNetworking() terra.BoolValue {
	return terra.ReferenceAsBool(gtn.ref.Append("use_service_networking"))
}

// Zone returns a reference to field zone of google_tpu_node.
func (gtn googleTpuNodeAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gtn.ref.Append("zone"))
}

func (gtn googleTpuNodeAttributes) NetworkEndpoints() terra.ListValue[NetworkEndpointsAttributes] {
	return terra.ReferenceAsList[NetworkEndpointsAttributes](gtn.ref.Append("network_endpoints"))
}

func (gtn googleTpuNodeAttributes) SchedulingConfig() terra.ListValue[SchedulingConfigAttributes] {
	return terra.ReferenceAsList[SchedulingConfigAttributes](gtn.ref.Append("scheduling_config"))
}

func (gtn googleTpuNodeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gtn.ref.Append("timeouts"))
}

type googleTpuNodeState struct {
	AcceleratorType      string                  `json:"accelerator_type"`
	CidrBlock            string                  `json:"cidr_block"`
	Description          string                  `json:"description"`
	EffectiveLabels      map[string]string       `json:"effective_labels"`
	Id                   string                  `json:"id"`
	Labels               map[string]string       `json:"labels"`
	Name                 string                  `json:"name"`
	Network              string                  `json:"network"`
	Project              string                  `json:"project"`
	ServiceAccount       string                  `json:"service_account"`
	TensorflowVersion    string                  `json:"tensorflow_version"`
	TerraformLabels      map[string]string       `json:"terraform_labels"`
	UseServiceNetworking bool                    `json:"use_service_networking"`
	Zone                 string                  `json:"zone"`
	NetworkEndpoints     []NetworkEndpointsState `json:"network_endpoints"`
	SchedulingConfig     []SchedulingConfigState `json:"scheduling_config"`
	Timeouts             *TimeoutsState          `json:"timeouts"`
}
