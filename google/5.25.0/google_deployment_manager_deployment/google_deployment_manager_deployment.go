// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_deployment_manager_deployment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_deployment_manager_deployment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDeploymentManagerDeploymentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdmd *Resource) Type() string {
	return "google_deployment_manager_deployment"
}

// LocalName returns the local name for [Resource].
func (gdmd *Resource) LocalName() string {
	return gdmd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdmd *Resource) Configuration() interface{} {
	return gdmd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdmd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdmd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdmd *Resource) Dependencies() terra.Dependencies {
	return gdmd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdmd *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdmd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdmd *Resource) Attributes() googleDeploymentManagerDeploymentAttributes {
	return googleDeploymentManagerDeploymentAttributes{ref: terra.ReferenceResource(gdmd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdmd *Resource) ImportState(state io.Reader) error {
	gdmd.state = &googleDeploymentManagerDeploymentState{}
	if err := json.NewDecoder(state).Decode(gdmd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdmd.Type(), gdmd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdmd *Resource) State() (*googleDeploymentManagerDeploymentState, bool) {
	return gdmd.state, gdmd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdmd *Resource) StateMust() *googleDeploymentManagerDeploymentState {
	if gdmd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdmd.Type(), gdmd.LocalName()))
	}
	return gdmd.state
}

// Args contains the configurations for google_deployment_manager_deployment.
type Args struct {
	// CreatePolicy: string, optional
	CreatePolicy terra.StringValue `hcl:"create_policy,attr"`
	// DeletePolicy: string, optional
	DeletePolicy terra.StringValue `hcl:"delete_policy,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Preview: bool, optional
	Preview terra.BoolValue `hcl:"preview,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Labels: min=0
	Labels []Labels `hcl:"labels,block" validate:"min=0"`
	// Target: required
	Target *Target `hcl:"target,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDeploymentManagerDeploymentAttributes struct {
	ref terra.Reference
}

// CreatePolicy returns a reference to field create_policy of google_deployment_manager_deployment.
func (gdmd googleDeploymentManagerDeploymentAttributes) CreatePolicy() terra.StringValue {
	return terra.ReferenceAsString(gdmd.ref.Append("create_policy"))
}

// DeletePolicy returns a reference to field delete_policy of google_deployment_manager_deployment.
func (gdmd googleDeploymentManagerDeploymentAttributes) DeletePolicy() terra.StringValue {
	return terra.ReferenceAsString(gdmd.ref.Append("delete_policy"))
}

// DeploymentId returns a reference to field deployment_id of google_deployment_manager_deployment.
func (gdmd googleDeploymentManagerDeploymentAttributes) DeploymentId() terra.StringValue {
	return terra.ReferenceAsString(gdmd.ref.Append("deployment_id"))
}

// Description returns a reference to field description of google_deployment_manager_deployment.
func (gdmd googleDeploymentManagerDeploymentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdmd.ref.Append("description"))
}

// Id returns a reference to field id of google_deployment_manager_deployment.
func (gdmd googleDeploymentManagerDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdmd.ref.Append("id"))
}

// Manifest returns a reference to field manifest of google_deployment_manager_deployment.
func (gdmd googleDeploymentManagerDeploymentAttributes) Manifest() terra.StringValue {
	return terra.ReferenceAsString(gdmd.ref.Append("manifest"))
}

// Name returns a reference to field name of google_deployment_manager_deployment.
func (gdmd googleDeploymentManagerDeploymentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdmd.ref.Append("name"))
}

// Preview returns a reference to field preview of google_deployment_manager_deployment.
func (gdmd googleDeploymentManagerDeploymentAttributes) Preview() terra.BoolValue {
	return terra.ReferenceAsBool(gdmd.ref.Append("preview"))
}

// Project returns a reference to field project of google_deployment_manager_deployment.
func (gdmd googleDeploymentManagerDeploymentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdmd.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_deployment_manager_deployment.
func (gdmd googleDeploymentManagerDeploymentAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gdmd.ref.Append("self_link"))
}

func (gdmd googleDeploymentManagerDeploymentAttributes) Labels() terra.SetValue[LabelsAttributes] {
	return terra.ReferenceAsSet[LabelsAttributes](gdmd.ref.Append("labels"))
}

func (gdmd googleDeploymentManagerDeploymentAttributes) Target() terra.ListValue[TargetAttributes] {
	return terra.ReferenceAsList[TargetAttributes](gdmd.ref.Append("target"))
}

func (gdmd googleDeploymentManagerDeploymentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdmd.ref.Append("timeouts"))
}

type googleDeploymentManagerDeploymentState struct {
	CreatePolicy string         `json:"create_policy"`
	DeletePolicy string         `json:"delete_policy"`
	DeploymentId string         `json:"deployment_id"`
	Description  string         `json:"description"`
	Id           string         `json:"id"`
	Manifest     string         `json:"manifest"`
	Name         string         `json:"name"`
	Preview      bool           `json:"preview"`
	Project      string         `json:"project"`
	SelfLink     string         `json:"self_link"`
	Labels       []LabelsState  `json:"labels"`
	Target       []TargetState  `json:"target"`
	Timeouts     *TimeoutsState `json:"timeouts"`
}
