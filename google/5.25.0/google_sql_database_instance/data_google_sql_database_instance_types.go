// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_sql_database_instance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataCloneAttributes struct {
	ref terra.Reference
}

func (c DataCloneAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataCloneAttributes) InternalWithRef(ref terra.Reference) DataCloneAttributes {
	return DataCloneAttributes{ref: ref}
}

func (c DataCloneAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataCloneAttributes) AllocatedIpRange() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("allocated_ip_range"))
}

func (c DataCloneAttributes) DatabaseNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("database_names"))
}

func (c DataCloneAttributes) PointInTime() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("point_in_time"))
}

func (c DataCloneAttributes) PreferredZone() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("preferred_zone"))
}

func (c DataCloneAttributes) SourceInstanceName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("source_instance_name"))
}

type DataIpAddressAttributes struct {
	ref terra.Reference
}

func (ia DataIpAddressAttributes) InternalRef() (terra.Reference, error) {
	return ia.ref, nil
}

func (ia DataIpAddressAttributes) InternalWithRef(ref terra.Reference) DataIpAddressAttributes {
	return DataIpAddressAttributes{ref: ref}
}

func (ia DataIpAddressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ia.ref.InternalTokens()
}

func (ia DataIpAddressAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("ip_address"))
}

func (ia DataIpAddressAttributes) TimeToRetire() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("time_to_retire"))
}

func (ia DataIpAddressAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("type"))
}

type DataReplicaConfigurationAttributes struct {
	ref terra.Reference
}

func (rc DataReplicaConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc DataReplicaConfigurationAttributes) InternalWithRef(ref terra.Reference) DataReplicaConfigurationAttributes {
	return DataReplicaConfigurationAttributes{ref: ref}
}

func (rc DataReplicaConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc DataReplicaConfigurationAttributes) CaCertificate() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("ca_certificate"))
}

func (rc DataReplicaConfigurationAttributes) ClientCertificate() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("client_certificate"))
}

func (rc DataReplicaConfigurationAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("client_key"))
}

func (rc DataReplicaConfigurationAttributes) ConnectRetryInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("connect_retry_interval"))
}

func (rc DataReplicaConfigurationAttributes) DumpFilePath() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("dump_file_path"))
}

func (rc DataReplicaConfigurationAttributes) FailoverTarget() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("failover_target"))
}

func (rc DataReplicaConfigurationAttributes) MasterHeartbeatPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("master_heartbeat_period"))
}

func (rc DataReplicaConfigurationAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("password"))
}

func (rc DataReplicaConfigurationAttributes) SslCipher() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("ssl_cipher"))
}

func (rc DataReplicaConfigurationAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("username"))
}

func (rc DataReplicaConfigurationAttributes) VerifyServerCertificate() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("verify_server_certificate"))
}

type DataRestoreBackupContextAttributes struct {
	ref terra.Reference
}

func (rbc DataRestoreBackupContextAttributes) InternalRef() (terra.Reference, error) {
	return rbc.ref, nil
}

func (rbc DataRestoreBackupContextAttributes) InternalWithRef(ref terra.Reference) DataRestoreBackupContextAttributes {
	return DataRestoreBackupContextAttributes{ref: ref}
}

func (rbc DataRestoreBackupContextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rbc.ref.InternalTokens()
}

func (rbc DataRestoreBackupContextAttributes) BackupRunId() terra.NumberValue {
	return terra.ReferenceAsNumber(rbc.ref.Append("backup_run_id"))
}

func (rbc DataRestoreBackupContextAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(rbc.ref.Append("instance_id"))
}

func (rbc DataRestoreBackupContextAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(rbc.ref.Append("project"))
}

type DataServerCaCertAttributes struct {
	ref terra.Reference
}

func (scc DataServerCaCertAttributes) InternalRef() (terra.Reference, error) {
	return scc.ref, nil
}

func (scc DataServerCaCertAttributes) InternalWithRef(ref terra.Reference) DataServerCaCertAttributes {
	return DataServerCaCertAttributes{ref: ref}
}

func (scc DataServerCaCertAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return scc.ref.InternalTokens()
}

func (scc DataServerCaCertAttributes) Cert() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("cert"))
}

func (scc DataServerCaCertAttributes) CommonName() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("common_name"))
}

func (scc DataServerCaCertAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("create_time"))
}

func (scc DataServerCaCertAttributes) ExpirationTime() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("expiration_time"))
}

func (scc DataServerCaCertAttributes) Sha1Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("sha1_fingerprint"))
}

type DataSettingsAttributes struct {
	ref terra.Reference
}

func (s DataSettingsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataSettingsAttributes) InternalWithRef(ref terra.Reference) DataSettingsAttributes {
	return DataSettingsAttributes{ref: ref}
}

func (s DataSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataSettingsAttributes) ActivationPolicy() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("activation_policy"))
}

func (s DataSettingsAttributes) AvailabilityType() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("availability_type"))
}

func (s DataSettingsAttributes) Collation() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("collation"))
}

func (s DataSettingsAttributes) ConnectorEnforcement() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("connector_enforcement"))
}

func (s DataSettingsAttributes) DeletionProtectionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("deletion_protection_enabled"))
}

func (s DataSettingsAttributes) DiskAutoresize() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("disk_autoresize"))
}

func (s DataSettingsAttributes) DiskAutoresizeLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("disk_autoresize_limit"))
}

func (s DataSettingsAttributes) DiskSize() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("disk_size"))
}

func (s DataSettingsAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("disk_type"))
}

func (s DataSettingsAttributes) Edition() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("edition"))
}

func (s DataSettingsAttributes) EnableGoogleMlIntegration() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("enable_google_ml_integration"))
}

func (s DataSettingsAttributes) PricingPlan() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("pricing_plan"))
}

func (s DataSettingsAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("tier"))
}

func (s DataSettingsAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("time_zone"))
}

func (s DataSettingsAttributes) UserLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("user_labels"))
}

func (s DataSettingsAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("version"))
}

func (s DataSettingsAttributes) ActiveDirectoryConfig() terra.ListValue[DataSettingsActiveDirectoryConfigAttributes] {
	return terra.ReferenceAsList[DataSettingsActiveDirectoryConfigAttributes](s.ref.Append("active_directory_config"))
}

func (s DataSettingsAttributes) AdvancedMachineFeatures() terra.ListValue[DataSettingsAdvancedMachineFeaturesAttributes] {
	return terra.ReferenceAsList[DataSettingsAdvancedMachineFeaturesAttributes](s.ref.Append("advanced_machine_features"))
}

func (s DataSettingsAttributes) BackupConfiguration() terra.ListValue[DataSettingsBackupConfigurationAttributes] {
	return terra.ReferenceAsList[DataSettingsBackupConfigurationAttributes](s.ref.Append("backup_configuration"))
}

func (s DataSettingsAttributes) DataCacheConfig() terra.ListValue[DataSettingsDataCacheConfigAttributes] {
	return terra.ReferenceAsList[DataSettingsDataCacheConfigAttributes](s.ref.Append("data_cache_config"))
}

func (s DataSettingsAttributes) DatabaseFlags() terra.SetValue[DataSettingsDatabaseFlagsAttributes] {
	return terra.ReferenceAsSet[DataSettingsDatabaseFlagsAttributes](s.ref.Append("database_flags"))
}

func (s DataSettingsAttributes) DenyMaintenancePeriod() terra.ListValue[DataSettingsDenyMaintenancePeriodAttributes] {
	return terra.ReferenceAsList[DataSettingsDenyMaintenancePeriodAttributes](s.ref.Append("deny_maintenance_period"))
}

func (s DataSettingsAttributes) InsightsConfig() terra.ListValue[DataSettingsInsightsConfigAttributes] {
	return terra.ReferenceAsList[DataSettingsInsightsConfigAttributes](s.ref.Append("insights_config"))
}

func (s DataSettingsAttributes) IpConfiguration() terra.ListValue[DataSettingsIpConfigurationAttributes] {
	return terra.ReferenceAsList[DataSettingsIpConfigurationAttributes](s.ref.Append("ip_configuration"))
}

func (s DataSettingsAttributes) LocationPreference() terra.ListValue[DataSettingsLocationPreferenceAttributes] {
	return terra.ReferenceAsList[DataSettingsLocationPreferenceAttributes](s.ref.Append("location_preference"))
}

func (s DataSettingsAttributes) MaintenanceWindow() terra.ListValue[DataSettingsMaintenanceWindowAttributes] {
	return terra.ReferenceAsList[DataSettingsMaintenanceWindowAttributes](s.ref.Append("maintenance_window"))
}

func (s DataSettingsAttributes) PasswordValidationPolicy() terra.ListValue[DataSettingsPasswordValidationPolicyAttributes] {
	return terra.ReferenceAsList[DataSettingsPasswordValidationPolicyAttributes](s.ref.Append("password_validation_policy"))
}

func (s DataSettingsAttributes) SqlServerAuditConfig() terra.ListValue[DataSettingsSqlServerAuditConfigAttributes] {
	return terra.ReferenceAsList[DataSettingsSqlServerAuditConfigAttributes](s.ref.Append("sql_server_audit_config"))
}

type DataSettingsActiveDirectoryConfigAttributes struct {
	ref terra.Reference
}

func (adc DataSettingsActiveDirectoryConfigAttributes) InternalRef() (terra.Reference, error) {
	return adc.ref, nil
}

func (adc DataSettingsActiveDirectoryConfigAttributes) InternalWithRef(ref terra.Reference) DataSettingsActiveDirectoryConfigAttributes {
	return DataSettingsActiveDirectoryConfigAttributes{ref: ref}
}

func (adc DataSettingsActiveDirectoryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return adc.ref.InternalTokens()
}

func (adc DataSettingsActiveDirectoryConfigAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("domain"))
}

type DataSettingsAdvancedMachineFeaturesAttributes struct {
	ref terra.Reference
}

func (amf DataSettingsAdvancedMachineFeaturesAttributes) InternalRef() (terra.Reference, error) {
	return amf.ref, nil
}

func (amf DataSettingsAdvancedMachineFeaturesAttributes) InternalWithRef(ref terra.Reference) DataSettingsAdvancedMachineFeaturesAttributes {
	return DataSettingsAdvancedMachineFeaturesAttributes{ref: ref}
}

func (amf DataSettingsAdvancedMachineFeaturesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return amf.ref.InternalTokens()
}

func (amf DataSettingsAdvancedMachineFeaturesAttributes) ThreadsPerCore() terra.NumberValue {
	return terra.ReferenceAsNumber(amf.ref.Append("threads_per_core"))
}

type DataSettingsBackupConfigurationAttributes struct {
	ref terra.Reference
}

func (bc DataSettingsBackupConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return bc.ref, nil
}

func (bc DataSettingsBackupConfigurationAttributes) InternalWithRef(ref terra.Reference) DataSettingsBackupConfigurationAttributes {
	return DataSettingsBackupConfigurationAttributes{ref: ref}
}

func (bc DataSettingsBackupConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bc.ref.InternalTokens()
}

func (bc DataSettingsBackupConfigurationAttributes) BinaryLogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(bc.ref.Append("binary_log_enabled"))
}

func (bc DataSettingsBackupConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(bc.ref.Append("enabled"))
}

func (bc DataSettingsBackupConfigurationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("location"))
}

func (bc DataSettingsBackupConfigurationAttributes) PointInTimeRecoveryEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(bc.ref.Append("point_in_time_recovery_enabled"))
}

func (bc DataSettingsBackupConfigurationAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("start_time"))
}

func (bc DataSettingsBackupConfigurationAttributes) TransactionLogRetentionDays() terra.NumberValue {
	return terra.ReferenceAsNumber(bc.ref.Append("transaction_log_retention_days"))
}

func (bc DataSettingsBackupConfigurationAttributes) BackupRetentionSettings() terra.ListValue[DataSettingsBackupConfigurationBackupRetentionSettingsAttributes] {
	return terra.ReferenceAsList[DataSettingsBackupConfigurationBackupRetentionSettingsAttributes](bc.ref.Append("backup_retention_settings"))
}

type DataSettingsBackupConfigurationBackupRetentionSettingsAttributes struct {
	ref terra.Reference
}

func (brs DataSettingsBackupConfigurationBackupRetentionSettingsAttributes) InternalRef() (terra.Reference, error) {
	return brs.ref, nil
}

func (brs DataSettingsBackupConfigurationBackupRetentionSettingsAttributes) InternalWithRef(ref terra.Reference) DataSettingsBackupConfigurationBackupRetentionSettingsAttributes {
	return DataSettingsBackupConfigurationBackupRetentionSettingsAttributes{ref: ref}
}

func (brs DataSettingsBackupConfigurationBackupRetentionSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return brs.ref.InternalTokens()
}

func (brs DataSettingsBackupConfigurationBackupRetentionSettingsAttributes) RetainedBackups() terra.NumberValue {
	return terra.ReferenceAsNumber(brs.ref.Append("retained_backups"))
}

func (brs DataSettingsBackupConfigurationBackupRetentionSettingsAttributes) RetentionUnit() terra.StringValue {
	return terra.ReferenceAsString(brs.ref.Append("retention_unit"))
}

type DataSettingsDataCacheConfigAttributes struct {
	ref terra.Reference
}

func (dcc DataSettingsDataCacheConfigAttributes) InternalRef() (terra.Reference, error) {
	return dcc.ref, nil
}

func (dcc DataSettingsDataCacheConfigAttributes) InternalWithRef(ref terra.Reference) DataSettingsDataCacheConfigAttributes {
	return DataSettingsDataCacheConfigAttributes{ref: ref}
}

func (dcc DataSettingsDataCacheConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcc.ref.InternalTokens()
}

func (dcc DataSettingsDataCacheConfigAttributes) DataCacheEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(dcc.ref.Append("data_cache_enabled"))
}

type DataSettingsDatabaseFlagsAttributes struct {
	ref terra.Reference
}

func (df DataSettingsDatabaseFlagsAttributes) InternalRef() (terra.Reference, error) {
	return df.ref, nil
}

func (df DataSettingsDatabaseFlagsAttributes) InternalWithRef(ref terra.Reference) DataSettingsDatabaseFlagsAttributes {
	return DataSettingsDatabaseFlagsAttributes{ref: ref}
}

func (df DataSettingsDatabaseFlagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return df.ref.InternalTokens()
}

func (df DataSettingsDatabaseFlagsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(df.ref.Append("name"))
}

func (df DataSettingsDatabaseFlagsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(df.ref.Append("value"))
}

type DataSettingsDenyMaintenancePeriodAttributes struct {
	ref terra.Reference
}

func (dmp DataSettingsDenyMaintenancePeriodAttributes) InternalRef() (terra.Reference, error) {
	return dmp.ref, nil
}

func (dmp DataSettingsDenyMaintenancePeriodAttributes) InternalWithRef(ref terra.Reference) DataSettingsDenyMaintenancePeriodAttributes {
	return DataSettingsDenyMaintenancePeriodAttributes{ref: ref}
}

func (dmp DataSettingsDenyMaintenancePeriodAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dmp.ref.InternalTokens()
}

func (dmp DataSettingsDenyMaintenancePeriodAttributes) EndDate() terra.StringValue {
	return terra.ReferenceAsString(dmp.ref.Append("end_date"))
}

func (dmp DataSettingsDenyMaintenancePeriodAttributes) StartDate() terra.StringValue {
	return terra.ReferenceAsString(dmp.ref.Append("start_date"))
}

func (dmp DataSettingsDenyMaintenancePeriodAttributes) Time() terra.StringValue {
	return terra.ReferenceAsString(dmp.ref.Append("time"))
}

type DataSettingsInsightsConfigAttributes struct {
	ref terra.Reference
}

func (ic DataSettingsInsightsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic DataSettingsInsightsConfigAttributes) InternalWithRef(ref terra.Reference) DataSettingsInsightsConfigAttributes {
	return DataSettingsInsightsConfigAttributes{ref: ref}
}

func (ic DataSettingsInsightsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic DataSettingsInsightsConfigAttributes) QueryInsightsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("query_insights_enabled"))
}

func (ic DataSettingsInsightsConfigAttributes) QueryPlansPerMinute() terra.NumberValue {
	return terra.ReferenceAsNumber(ic.ref.Append("query_plans_per_minute"))
}

func (ic DataSettingsInsightsConfigAttributes) QueryStringLength() terra.NumberValue {
	return terra.ReferenceAsNumber(ic.ref.Append("query_string_length"))
}

func (ic DataSettingsInsightsConfigAttributes) RecordApplicationTags() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("record_application_tags"))
}

func (ic DataSettingsInsightsConfigAttributes) RecordClientAddress() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("record_client_address"))
}

type DataSettingsIpConfigurationAttributes struct {
	ref terra.Reference
}

func (ic DataSettingsIpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic DataSettingsIpConfigurationAttributes) InternalWithRef(ref terra.Reference) DataSettingsIpConfigurationAttributes {
	return DataSettingsIpConfigurationAttributes{ref: ref}
}

func (ic DataSettingsIpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic DataSettingsIpConfigurationAttributes) AllocatedIpRange() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("allocated_ip_range"))
}

func (ic DataSettingsIpConfigurationAttributes) EnablePrivatePathForGoogleCloudServices() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("enable_private_path_for_google_cloud_services"))
}

func (ic DataSettingsIpConfigurationAttributes) Ipv4Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("ipv4_enabled"))
}

func (ic DataSettingsIpConfigurationAttributes) PrivateNetwork() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("private_network"))
}

func (ic DataSettingsIpConfigurationAttributes) RequireSsl() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("require_ssl"))
}

func (ic DataSettingsIpConfigurationAttributes) SslMode() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("ssl_mode"))
}

func (ic DataSettingsIpConfigurationAttributes) AuthorizedNetworks() terra.SetValue[DataSettingsIpConfigurationAuthorizedNetworksAttributes] {
	return terra.ReferenceAsSet[DataSettingsIpConfigurationAuthorizedNetworksAttributes](ic.ref.Append("authorized_networks"))
}

func (ic DataSettingsIpConfigurationAttributes) PscConfig() terra.SetValue[DataSettingsIpConfigurationPscConfigAttributes] {
	return terra.ReferenceAsSet[DataSettingsIpConfigurationPscConfigAttributes](ic.ref.Append("psc_config"))
}

type DataSettingsIpConfigurationAuthorizedNetworksAttributes struct {
	ref terra.Reference
}

func (an DataSettingsIpConfigurationAuthorizedNetworksAttributes) InternalRef() (terra.Reference, error) {
	return an.ref, nil
}

func (an DataSettingsIpConfigurationAuthorizedNetworksAttributes) InternalWithRef(ref terra.Reference) DataSettingsIpConfigurationAuthorizedNetworksAttributes {
	return DataSettingsIpConfigurationAuthorizedNetworksAttributes{ref: ref}
}

func (an DataSettingsIpConfigurationAuthorizedNetworksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return an.ref.InternalTokens()
}

func (an DataSettingsIpConfigurationAuthorizedNetworksAttributes) ExpirationTime() terra.StringValue {
	return terra.ReferenceAsString(an.ref.Append("expiration_time"))
}

func (an DataSettingsIpConfigurationAuthorizedNetworksAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(an.ref.Append("name"))
}

func (an DataSettingsIpConfigurationAuthorizedNetworksAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(an.ref.Append("value"))
}

type DataSettingsIpConfigurationPscConfigAttributes struct {
	ref terra.Reference
}

func (pc DataSettingsIpConfigurationPscConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc DataSettingsIpConfigurationPscConfigAttributes) InternalWithRef(ref terra.Reference) DataSettingsIpConfigurationPscConfigAttributes {
	return DataSettingsIpConfigurationPscConfigAttributes{ref: ref}
}

func (pc DataSettingsIpConfigurationPscConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc DataSettingsIpConfigurationPscConfigAttributes) AllowedConsumerProjects() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pc.ref.Append("allowed_consumer_projects"))
}

func (pc DataSettingsIpConfigurationPscConfigAttributes) PscEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("psc_enabled"))
}

type DataSettingsLocationPreferenceAttributes struct {
	ref terra.Reference
}

func (lp DataSettingsLocationPreferenceAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp DataSettingsLocationPreferenceAttributes) InternalWithRef(ref terra.Reference) DataSettingsLocationPreferenceAttributes {
	return DataSettingsLocationPreferenceAttributes{ref: ref}
}

func (lp DataSettingsLocationPreferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp DataSettingsLocationPreferenceAttributes) FollowGaeApplication() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("follow_gae_application"))
}

func (lp DataSettingsLocationPreferenceAttributes) SecondaryZone() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("secondary_zone"))
}

func (lp DataSettingsLocationPreferenceAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("zone"))
}

type DataSettingsMaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (mw DataSettingsMaintenanceWindowAttributes) InternalRef() (terra.Reference, error) {
	return mw.ref, nil
}

func (mw DataSettingsMaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) DataSettingsMaintenanceWindowAttributes {
	return DataSettingsMaintenanceWindowAttributes{ref: ref}
}

func (mw DataSettingsMaintenanceWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mw.ref.InternalTokens()
}

func (mw DataSettingsMaintenanceWindowAttributes) Day() terra.NumberValue {
	return terra.ReferenceAsNumber(mw.ref.Append("day"))
}

func (mw DataSettingsMaintenanceWindowAttributes) Hour() terra.NumberValue {
	return terra.ReferenceAsNumber(mw.ref.Append("hour"))
}

func (mw DataSettingsMaintenanceWindowAttributes) UpdateTrack() terra.StringValue {
	return terra.ReferenceAsString(mw.ref.Append("update_track"))
}

type DataSettingsPasswordValidationPolicyAttributes struct {
	ref terra.Reference
}

func (pvp DataSettingsPasswordValidationPolicyAttributes) InternalRef() (terra.Reference, error) {
	return pvp.ref, nil
}

func (pvp DataSettingsPasswordValidationPolicyAttributes) InternalWithRef(ref terra.Reference) DataSettingsPasswordValidationPolicyAttributes {
	return DataSettingsPasswordValidationPolicyAttributes{ref: ref}
}

func (pvp DataSettingsPasswordValidationPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pvp.ref.InternalTokens()
}

func (pvp DataSettingsPasswordValidationPolicyAttributes) Complexity() terra.StringValue {
	return terra.ReferenceAsString(pvp.ref.Append("complexity"))
}

func (pvp DataSettingsPasswordValidationPolicyAttributes) DisallowUsernameSubstring() terra.BoolValue {
	return terra.ReferenceAsBool(pvp.ref.Append("disallow_username_substring"))
}

func (pvp DataSettingsPasswordValidationPolicyAttributes) EnablePasswordPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(pvp.ref.Append("enable_password_policy"))
}

func (pvp DataSettingsPasswordValidationPolicyAttributes) MinLength() terra.NumberValue {
	return terra.ReferenceAsNumber(pvp.ref.Append("min_length"))
}

func (pvp DataSettingsPasswordValidationPolicyAttributes) PasswordChangeInterval() terra.StringValue {
	return terra.ReferenceAsString(pvp.ref.Append("password_change_interval"))
}

func (pvp DataSettingsPasswordValidationPolicyAttributes) ReuseInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(pvp.ref.Append("reuse_interval"))
}

type DataSettingsSqlServerAuditConfigAttributes struct {
	ref terra.Reference
}

func (ssac DataSettingsSqlServerAuditConfigAttributes) InternalRef() (terra.Reference, error) {
	return ssac.ref, nil
}

func (ssac DataSettingsSqlServerAuditConfigAttributes) InternalWithRef(ref terra.Reference) DataSettingsSqlServerAuditConfigAttributes {
	return DataSettingsSqlServerAuditConfigAttributes{ref: ref}
}

func (ssac DataSettingsSqlServerAuditConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssac.ref.InternalTokens()
}

func (ssac DataSettingsSqlServerAuditConfigAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(ssac.ref.Append("bucket"))
}

func (ssac DataSettingsSqlServerAuditConfigAttributes) RetentionInterval() terra.StringValue {
	return terra.ReferenceAsString(ssac.ref.Append("retention_interval"))
}

func (ssac DataSettingsSqlServerAuditConfigAttributes) UploadInterval() terra.StringValue {
	return terra.ReferenceAsString(ssac.ref.Append("upload_interval"))
}

type DataCloneState struct {
	AllocatedIpRange   string   `json:"allocated_ip_range"`
	DatabaseNames      []string `json:"database_names"`
	PointInTime        string   `json:"point_in_time"`
	PreferredZone      string   `json:"preferred_zone"`
	SourceInstanceName string   `json:"source_instance_name"`
}

type DataIpAddressState struct {
	IpAddress    string `json:"ip_address"`
	TimeToRetire string `json:"time_to_retire"`
	Type         string `json:"type"`
}

type DataReplicaConfigurationState struct {
	CaCertificate           string  `json:"ca_certificate"`
	ClientCertificate       string  `json:"client_certificate"`
	ClientKey               string  `json:"client_key"`
	ConnectRetryInterval    float64 `json:"connect_retry_interval"`
	DumpFilePath            string  `json:"dump_file_path"`
	FailoverTarget          bool    `json:"failover_target"`
	MasterHeartbeatPeriod   float64 `json:"master_heartbeat_period"`
	Password                string  `json:"password"`
	SslCipher               string  `json:"ssl_cipher"`
	Username                string  `json:"username"`
	VerifyServerCertificate bool    `json:"verify_server_certificate"`
}

type DataRestoreBackupContextState struct {
	BackupRunId float64 `json:"backup_run_id"`
	InstanceId  string  `json:"instance_id"`
	Project     string  `json:"project"`
}

type DataServerCaCertState struct {
	Cert            string `json:"cert"`
	CommonName      string `json:"common_name"`
	CreateTime      string `json:"create_time"`
	ExpirationTime  string `json:"expiration_time"`
	Sha1Fingerprint string `json:"sha1_fingerprint"`
}

type DataSettingsState struct {
	ActivationPolicy          string                                      `json:"activation_policy"`
	AvailabilityType          string                                      `json:"availability_type"`
	Collation                 string                                      `json:"collation"`
	ConnectorEnforcement      string                                      `json:"connector_enforcement"`
	DeletionProtectionEnabled bool                                        `json:"deletion_protection_enabled"`
	DiskAutoresize            bool                                        `json:"disk_autoresize"`
	DiskAutoresizeLimit       float64                                     `json:"disk_autoresize_limit"`
	DiskSize                  float64                                     `json:"disk_size"`
	DiskType                  string                                      `json:"disk_type"`
	Edition                   string                                      `json:"edition"`
	EnableGoogleMlIntegration bool                                        `json:"enable_google_ml_integration"`
	PricingPlan               string                                      `json:"pricing_plan"`
	Tier                      string                                      `json:"tier"`
	TimeZone                  string                                      `json:"time_zone"`
	UserLabels                map[string]string                           `json:"user_labels"`
	Version                   float64                                     `json:"version"`
	ActiveDirectoryConfig     []DataSettingsActiveDirectoryConfigState    `json:"active_directory_config"`
	AdvancedMachineFeatures   []DataSettingsAdvancedMachineFeaturesState  `json:"advanced_machine_features"`
	BackupConfiguration       []DataSettingsBackupConfigurationState      `json:"backup_configuration"`
	DataCacheConfig           []DataSettingsDataCacheConfigState          `json:"data_cache_config"`
	DatabaseFlags             []DataSettingsDatabaseFlagsState            `json:"database_flags"`
	DenyMaintenancePeriod     []DataSettingsDenyMaintenancePeriodState    `json:"deny_maintenance_period"`
	InsightsConfig            []DataSettingsInsightsConfigState           `json:"insights_config"`
	IpConfiguration           []DataSettingsIpConfigurationState          `json:"ip_configuration"`
	LocationPreference        []DataSettingsLocationPreferenceState       `json:"location_preference"`
	MaintenanceWindow         []DataSettingsMaintenanceWindowState        `json:"maintenance_window"`
	PasswordValidationPolicy  []DataSettingsPasswordValidationPolicyState `json:"password_validation_policy"`
	SqlServerAuditConfig      []DataSettingsSqlServerAuditConfigState     `json:"sql_server_audit_config"`
}

type DataSettingsActiveDirectoryConfigState struct {
	Domain string `json:"domain"`
}

type DataSettingsAdvancedMachineFeaturesState struct {
	ThreadsPerCore float64 `json:"threads_per_core"`
}

type DataSettingsBackupConfigurationState struct {
	BinaryLogEnabled            bool                                                          `json:"binary_log_enabled"`
	Enabled                     bool                                                          `json:"enabled"`
	Location                    string                                                        `json:"location"`
	PointInTimeRecoveryEnabled  bool                                                          `json:"point_in_time_recovery_enabled"`
	StartTime                   string                                                        `json:"start_time"`
	TransactionLogRetentionDays float64                                                       `json:"transaction_log_retention_days"`
	BackupRetentionSettings     []DataSettingsBackupConfigurationBackupRetentionSettingsState `json:"backup_retention_settings"`
}

type DataSettingsBackupConfigurationBackupRetentionSettingsState struct {
	RetainedBackups float64 `json:"retained_backups"`
	RetentionUnit   string  `json:"retention_unit"`
}

type DataSettingsDataCacheConfigState struct {
	DataCacheEnabled bool `json:"data_cache_enabled"`
}

type DataSettingsDatabaseFlagsState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type DataSettingsDenyMaintenancePeriodState struct {
	EndDate   string `json:"end_date"`
	StartDate string `json:"start_date"`
	Time      string `json:"time"`
}

type DataSettingsInsightsConfigState struct {
	QueryInsightsEnabled  bool    `json:"query_insights_enabled"`
	QueryPlansPerMinute   float64 `json:"query_plans_per_minute"`
	QueryStringLength     float64 `json:"query_string_length"`
	RecordApplicationTags bool    `json:"record_application_tags"`
	RecordClientAddress   bool    `json:"record_client_address"`
}

type DataSettingsIpConfigurationState struct {
	AllocatedIpRange                        string                                               `json:"allocated_ip_range"`
	EnablePrivatePathForGoogleCloudServices bool                                                 `json:"enable_private_path_for_google_cloud_services"`
	Ipv4Enabled                             bool                                                 `json:"ipv4_enabled"`
	PrivateNetwork                          string                                               `json:"private_network"`
	RequireSsl                              bool                                                 `json:"require_ssl"`
	SslMode                                 string                                               `json:"ssl_mode"`
	AuthorizedNetworks                      []DataSettingsIpConfigurationAuthorizedNetworksState `json:"authorized_networks"`
	PscConfig                               []DataSettingsIpConfigurationPscConfigState          `json:"psc_config"`
}

type DataSettingsIpConfigurationAuthorizedNetworksState struct {
	ExpirationTime string `json:"expiration_time"`
	Name           string `json:"name"`
	Value          string `json:"value"`
}

type DataSettingsIpConfigurationPscConfigState struct {
	AllowedConsumerProjects []string `json:"allowed_consumer_projects"`
	PscEnabled              bool     `json:"psc_enabled"`
}

type DataSettingsLocationPreferenceState struct {
	FollowGaeApplication string `json:"follow_gae_application"`
	SecondaryZone        string `json:"secondary_zone"`
	Zone                 string `json:"zone"`
}

type DataSettingsMaintenanceWindowState struct {
	Day         float64 `json:"day"`
	Hour        float64 `json:"hour"`
	UpdateTrack string  `json:"update_track"`
}

type DataSettingsPasswordValidationPolicyState struct {
	Complexity                string  `json:"complexity"`
	DisallowUsernameSubstring bool    `json:"disallow_username_substring"`
	EnablePasswordPolicy      bool    `json:"enable_password_policy"`
	MinLength                 float64 `json:"min_length"`
	PasswordChangeInterval    string  `json:"password_change_interval"`
	ReuseInterval             float64 `json:"reuse_interval"`
}

type DataSettingsSqlServerAuditConfigState struct {
	Bucket            string `json:"bucket"`
	RetentionInterval string `json:"retention_interval"`
	UploadInterval    string `json:"upload_interval"`
}
