// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_sql_database_instance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Clone struct {
	// AllocatedIpRange: string, optional
	AllocatedIpRange terra.StringValue `hcl:"allocated_ip_range,attr"`
	// DatabaseNames: list of string, optional
	DatabaseNames terra.ListValue[terra.StringValue] `hcl:"database_names,attr"`
	// PointInTime: string, optional
	PointInTime terra.StringValue `hcl:"point_in_time,attr"`
	// PreferredZone: string, optional
	PreferredZone terra.StringValue `hcl:"preferred_zone,attr"`
	// SourceInstanceName: string, required
	SourceInstanceName terra.StringValue `hcl:"source_instance_name,attr" validate:"required"`
}

type ReplicaConfiguration struct {
	// CaCertificate: string, optional
	CaCertificate terra.StringValue `hcl:"ca_certificate,attr"`
	// ClientCertificate: string, optional
	ClientCertificate terra.StringValue `hcl:"client_certificate,attr"`
	// ClientKey: string, optional
	ClientKey terra.StringValue `hcl:"client_key,attr"`
	// ConnectRetryInterval: number, optional
	ConnectRetryInterval terra.NumberValue `hcl:"connect_retry_interval,attr"`
	// DumpFilePath: string, optional
	DumpFilePath terra.StringValue `hcl:"dump_file_path,attr"`
	// FailoverTarget: bool, optional
	FailoverTarget terra.BoolValue `hcl:"failover_target,attr"`
	// MasterHeartbeatPeriod: number, optional
	MasterHeartbeatPeriod terra.NumberValue `hcl:"master_heartbeat_period,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// SslCipher: string, optional
	SslCipher terra.StringValue `hcl:"ssl_cipher,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// VerifyServerCertificate: bool, optional
	VerifyServerCertificate terra.BoolValue `hcl:"verify_server_certificate,attr"`
}

type RestoreBackupContext struct {
	// BackupRunId: number, required
	BackupRunId terra.NumberValue `hcl:"backup_run_id,attr" validate:"required"`
	// InstanceId: string, optional
	InstanceId terra.StringValue `hcl:"instance_id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}

type Settings struct {
	// ActivationPolicy: string, optional
	ActivationPolicy terra.StringValue `hcl:"activation_policy,attr"`
	// AvailabilityType: string, optional
	AvailabilityType terra.StringValue `hcl:"availability_type,attr"`
	// Collation: string, optional
	Collation terra.StringValue `hcl:"collation,attr"`
	// ConnectorEnforcement: string, optional
	ConnectorEnforcement terra.StringValue `hcl:"connector_enforcement,attr"`
	// DeletionProtectionEnabled: bool, optional
	DeletionProtectionEnabled terra.BoolValue `hcl:"deletion_protection_enabled,attr"`
	// DiskAutoresize: bool, optional
	DiskAutoresize terra.BoolValue `hcl:"disk_autoresize,attr"`
	// DiskAutoresizeLimit: number, optional
	DiskAutoresizeLimit terra.NumberValue `hcl:"disk_autoresize_limit,attr"`
	// DiskSize: number, optional
	DiskSize terra.NumberValue `hcl:"disk_size,attr"`
	// DiskType: string, optional
	DiskType terra.StringValue `hcl:"disk_type,attr"`
	// Edition: string, optional
	Edition terra.StringValue `hcl:"edition,attr"`
	// EnableGoogleMlIntegration: bool, optional
	EnableGoogleMlIntegration terra.BoolValue `hcl:"enable_google_ml_integration,attr"`
	// PricingPlan: string, optional
	PricingPlan terra.StringValue `hcl:"pricing_plan,attr"`
	// Tier: string, required
	Tier terra.StringValue `hcl:"tier,attr" validate:"required"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
	// UserLabels: map of string, optional
	UserLabels terra.MapValue[terra.StringValue] `hcl:"user_labels,attr"`
	// SettingsActiveDirectoryConfig: optional
	ActiveDirectoryConfig *SettingsActiveDirectoryConfig `hcl:"active_directory_config,block"`
	// SettingsAdvancedMachineFeatures: optional
	AdvancedMachineFeatures *SettingsAdvancedMachineFeatures `hcl:"advanced_machine_features,block"`
	// SettingsBackupConfiguration: optional
	BackupConfiguration *SettingsBackupConfiguration `hcl:"backup_configuration,block"`
	// SettingsDataCacheConfig: optional
	DataCacheConfig *SettingsDataCacheConfig `hcl:"data_cache_config,block"`
	// SettingsDatabaseFlags: min=0
	DatabaseFlags []SettingsDatabaseFlags `hcl:"database_flags,block" validate:"min=0"`
	// SettingsDenyMaintenancePeriod: optional
	DenyMaintenancePeriod *SettingsDenyMaintenancePeriod `hcl:"deny_maintenance_period,block"`
	// SettingsInsightsConfig: optional
	InsightsConfig *SettingsInsightsConfig `hcl:"insights_config,block"`
	// SettingsIpConfiguration: optional
	IpConfiguration *SettingsIpConfiguration `hcl:"ip_configuration,block"`
	// SettingsLocationPreference: optional
	LocationPreference *SettingsLocationPreference `hcl:"location_preference,block"`
	// SettingsMaintenanceWindow: optional
	MaintenanceWindow *SettingsMaintenanceWindow `hcl:"maintenance_window,block"`
	// SettingsPasswordValidationPolicy: optional
	PasswordValidationPolicy *SettingsPasswordValidationPolicy `hcl:"password_validation_policy,block"`
	// SettingsSqlServerAuditConfig: optional
	SqlServerAuditConfig *SettingsSqlServerAuditConfig `hcl:"sql_server_audit_config,block"`
}

type SettingsActiveDirectoryConfig struct {
	// Domain: string, required
	Domain terra.StringValue `hcl:"domain,attr" validate:"required"`
}

type SettingsAdvancedMachineFeatures struct {
	// ThreadsPerCore: number, optional
	ThreadsPerCore terra.NumberValue `hcl:"threads_per_core,attr"`
}

type SettingsBackupConfiguration struct {
	// BinaryLogEnabled: bool, optional
	BinaryLogEnabled terra.BoolValue `hcl:"binary_log_enabled,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// PointInTimeRecoveryEnabled: bool, optional
	PointInTimeRecoveryEnabled terra.BoolValue `hcl:"point_in_time_recovery_enabled,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// TransactionLogRetentionDays: number, optional
	TransactionLogRetentionDays terra.NumberValue `hcl:"transaction_log_retention_days,attr"`
	// SettingsBackupConfigurationBackupRetentionSettings: optional
	BackupRetentionSettings *SettingsBackupConfigurationBackupRetentionSettings `hcl:"backup_retention_settings,block"`
}

type SettingsBackupConfigurationBackupRetentionSettings struct {
	// RetainedBackups: number, required
	RetainedBackups terra.NumberValue `hcl:"retained_backups,attr" validate:"required"`
	// RetentionUnit: string, optional
	RetentionUnit terra.StringValue `hcl:"retention_unit,attr"`
}

type SettingsDataCacheConfig struct {
	// DataCacheEnabled: bool, optional
	DataCacheEnabled terra.BoolValue `hcl:"data_cache_enabled,attr"`
}

type SettingsDatabaseFlags struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type SettingsDenyMaintenancePeriod struct {
	// EndDate: string, required
	EndDate terra.StringValue `hcl:"end_date,attr" validate:"required"`
	// StartDate: string, required
	StartDate terra.StringValue `hcl:"start_date,attr" validate:"required"`
	// Time: string, required
	Time terra.StringValue `hcl:"time,attr" validate:"required"`
}

type SettingsInsightsConfig struct {
	// QueryInsightsEnabled: bool, optional
	QueryInsightsEnabled terra.BoolValue `hcl:"query_insights_enabled,attr"`
	// QueryPlansPerMinute: number, optional
	QueryPlansPerMinute terra.NumberValue `hcl:"query_plans_per_minute,attr"`
	// QueryStringLength: number, optional
	QueryStringLength terra.NumberValue `hcl:"query_string_length,attr"`
	// RecordApplicationTags: bool, optional
	RecordApplicationTags terra.BoolValue `hcl:"record_application_tags,attr"`
	// RecordClientAddress: bool, optional
	RecordClientAddress terra.BoolValue `hcl:"record_client_address,attr"`
}

type SettingsIpConfiguration struct {
	// AllocatedIpRange: string, optional
	AllocatedIpRange terra.StringValue `hcl:"allocated_ip_range,attr"`
	// EnablePrivatePathForGoogleCloudServices: bool, optional
	EnablePrivatePathForGoogleCloudServices terra.BoolValue `hcl:"enable_private_path_for_google_cloud_services,attr"`
	// Ipv4Enabled: bool, optional
	Ipv4Enabled terra.BoolValue `hcl:"ipv4_enabled,attr"`
	// PrivateNetwork: string, optional
	PrivateNetwork terra.StringValue `hcl:"private_network,attr"`
	// RequireSsl: bool, optional
	RequireSsl terra.BoolValue `hcl:"require_ssl,attr"`
	// SslMode: string, optional
	SslMode terra.StringValue `hcl:"ssl_mode,attr"`
	// SettingsIpConfigurationAuthorizedNetworks: min=0
	AuthorizedNetworks []SettingsIpConfigurationAuthorizedNetworks `hcl:"authorized_networks,block" validate:"min=0"`
	// SettingsIpConfigurationPscConfig: min=0
	PscConfig []SettingsIpConfigurationPscConfig `hcl:"psc_config,block" validate:"min=0"`
}

type SettingsIpConfigurationAuthorizedNetworks struct {
	// ExpirationTime: string, optional
	ExpirationTime terra.StringValue `hcl:"expiration_time,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type SettingsIpConfigurationPscConfig struct {
	// AllowedConsumerProjects: set of string, optional
	AllowedConsumerProjects terra.SetValue[terra.StringValue] `hcl:"allowed_consumer_projects,attr"`
	// PscEnabled: bool, optional
	PscEnabled terra.BoolValue `hcl:"psc_enabled,attr"`
}

type SettingsLocationPreference struct {
	// FollowGaeApplication: string, optional
	FollowGaeApplication terra.StringValue `hcl:"follow_gae_application,attr"`
	// SecondaryZone: string, optional
	SecondaryZone terra.StringValue `hcl:"secondary_zone,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
}

type SettingsMaintenanceWindow struct {
	// Day: number, optional
	Day terra.NumberValue `hcl:"day,attr"`
	// Hour: number, optional
	Hour terra.NumberValue `hcl:"hour,attr"`
	// UpdateTrack: string, optional
	UpdateTrack terra.StringValue `hcl:"update_track,attr"`
}

type SettingsPasswordValidationPolicy struct {
	// Complexity: string, optional
	Complexity terra.StringValue `hcl:"complexity,attr"`
	// DisallowUsernameSubstring: bool, optional
	DisallowUsernameSubstring terra.BoolValue `hcl:"disallow_username_substring,attr"`
	// EnablePasswordPolicy: bool, required
	EnablePasswordPolicy terra.BoolValue `hcl:"enable_password_policy,attr" validate:"required"`
	// MinLength: number, optional
	MinLength terra.NumberValue `hcl:"min_length,attr"`
	// PasswordChangeInterval: string, optional
	PasswordChangeInterval terra.StringValue `hcl:"password_change_interval,attr"`
	// ReuseInterval: number, optional
	ReuseInterval terra.NumberValue `hcl:"reuse_interval,attr"`
}

type SettingsSqlServerAuditConfig struct {
	// Bucket: string, optional
	Bucket terra.StringValue `hcl:"bucket,attr"`
	// RetentionInterval: string, optional
	RetentionInterval terra.StringValue `hcl:"retention_interval,attr"`
	// UploadInterval: string, optional
	UploadInterval terra.StringValue `hcl:"upload_interval,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type IpAddressAttributes struct {
	ref terra.Reference
}

func (ia IpAddressAttributes) InternalRef() (terra.Reference, error) {
	return ia.ref, nil
}

func (ia IpAddressAttributes) InternalWithRef(ref terra.Reference) IpAddressAttributes {
	return IpAddressAttributes{ref: ref}
}

func (ia IpAddressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ia.ref.InternalTokens()
}

func (ia IpAddressAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("ip_address"))
}

func (ia IpAddressAttributes) TimeToRetire() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("time_to_retire"))
}

func (ia IpAddressAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("type"))
}

type ServerCaCertAttributes struct {
	ref terra.Reference
}

func (scc ServerCaCertAttributes) InternalRef() (terra.Reference, error) {
	return scc.ref, nil
}

func (scc ServerCaCertAttributes) InternalWithRef(ref terra.Reference) ServerCaCertAttributes {
	return ServerCaCertAttributes{ref: ref}
}

func (scc ServerCaCertAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return scc.ref.InternalTokens()
}

func (scc ServerCaCertAttributes) Cert() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("cert"))
}

func (scc ServerCaCertAttributes) CommonName() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("common_name"))
}

func (scc ServerCaCertAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("create_time"))
}

func (scc ServerCaCertAttributes) ExpirationTime() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("expiration_time"))
}

func (scc ServerCaCertAttributes) Sha1Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("sha1_fingerprint"))
}

type CloneAttributes struct {
	ref terra.Reference
}

func (c CloneAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CloneAttributes) InternalWithRef(ref terra.Reference) CloneAttributes {
	return CloneAttributes{ref: ref}
}

func (c CloneAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CloneAttributes) AllocatedIpRange() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("allocated_ip_range"))
}

func (c CloneAttributes) DatabaseNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("database_names"))
}

func (c CloneAttributes) PointInTime() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("point_in_time"))
}

func (c CloneAttributes) PreferredZone() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("preferred_zone"))
}

func (c CloneAttributes) SourceInstanceName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("source_instance_name"))
}

type ReplicaConfigurationAttributes struct {
	ref terra.Reference
}

func (rc ReplicaConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc ReplicaConfigurationAttributes) InternalWithRef(ref terra.Reference) ReplicaConfigurationAttributes {
	return ReplicaConfigurationAttributes{ref: ref}
}

func (rc ReplicaConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc ReplicaConfigurationAttributes) CaCertificate() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("ca_certificate"))
}

func (rc ReplicaConfigurationAttributes) ClientCertificate() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("client_certificate"))
}

func (rc ReplicaConfigurationAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("client_key"))
}

func (rc ReplicaConfigurationAttributes) ConnectRetryInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("connect_retry_interval"))
}

func (rc ReplicaConfigurationAttributes) DumpFilePath() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("dump_file_path"))
}

func (rc ReplicaConfigurationAttributes) FailoverTarget() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("failover_target"))
}

func (rc ReplicaConfigurationAttributes) MasterHeartbeatPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("master_heartbeat_period"))
}

func (rc ReplicaConfigurationAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("password"))
}

func (rc ReplicaConfigurationAttributes) SslCipher() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("ssl_cipher"))
}

func (rc ReplicaConfigurationAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("username"))
}

func (rc ReplicaConfigurationAttributes) VerifyServerCertificate() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("verify_server_certificate"))
}

type RestoreBackupContextAttributes struct {
	ref terra.Reference
}

func (rbc RestoreBackupContextAttributes) InternalRef() (terra.Reference, error) {
	return rbc.ref, nil
}

func (rbc RestoreBackupContextAttributes) InternalWithRef(ref terra.Reference) RestoreBackupContextAttributes {
	return RestoreBackupContextAttributes{ref: ref}
}

func (rbc RestoreBackupContextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rbc.ref.InternalTokens()
}

func (rbc RestoreBackupContextAttributes) BackupRunId() terra.NumberValue {
	return terra.ReferenceAsNumber(rbc.ref.Append("backup_run_id"))
}

func (rbc RestoreBackupContextAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(rbc.ref.Append("instance_id"))
}

func (rbc RestoreBackupContextAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(rbc.ref.Append("project"))
}

type SettingsAttributes struct {
	ref terra.Reference
}

func (s SettingsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SettingsAttributes) InternalWithRef(ref terra.Reference) SettingsAttributes {
	return SettingsAttributes{ref: ref}
}

func (s SettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SettingsAttributes) ActivationPolicy() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("activation_policy"))
}

func (s SettingsAttributes) AvailabilityType() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("availability_type"))
}

func (s SettingsAttributes) Collation() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("collation"))
}

func (s SettingsAttributes) ConnectorEnforcement() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("connector_enforcement"))
}

func (s SettingsAttributes) DeletionProtectionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("deletion_protection_enabled"))
}

func (s SettingsAttributes) DiskAutoresize() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("disk_autoresize"))
}

func (s SettingsAttributes) DiskAutoresizeLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("disk_autoresize_limit"))
}

func (s SettingsAttributes) DiskSize() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("disk_size"))
}

func (s SettingsAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("disk_type"))
}

func (s SettingsAttributes) Edition() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("edition"))
}

func (s SettingsAttributes) EnableGoogleMlIntegration() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("enable_google_ml_integration"))
}

func (s SettingsAttributes) PricingPlan() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("pricing_plan"))
}

func (s SettingsAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("tier"))
}

func (s SettingsAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("time_zone"))
}

func (s SettingsAttributes) UserLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("user_labels"))
}

func (s SettingsAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("version"))
}

func (s SettingsAttributes) ActiveDirectoryConfig() terra.ListValue[SettingsActiveDirectoryConfigAttributes] {
	return terra.ReferenceAsList[SettingsActiveDirectoryConfigAttributes](s.ref.Append("active_directory_config"))
}

func (s SettingsAttributes) AdvancedMachineFeatures() terra.ListValue[SettingsAdvancedMachineFeaturesAttributes] {
	return terra.ReferenceAsList[SettingsAdvancedMachineFeaturesAttributes](s.ref.Append("advanced_machine_features"))
}

func (s SettingsAttributes) BackupConfiguration() terra.ListValue[SettingsBackupConfigurationAttributes] {
	return terra.ReferenceAsList[SettingsBackupConfigurationAttributes](s.ref.Append("backup_configuration"))
}

func (s SettingsAttributes) DataCacheConfig() terra.ListValue[SettingsDataCacheConfigAttributes] {
	return terra.ReferenceAsList[SettingsDataCacheConfigAttributes](s.ref.Append("data_cache_config"))
}

func (s SettingsAttributes) DatabaseFlags() terra.SetValue[SettingsDatabaseFlagsAttributes] {
	return terra.ReferenceAsSet[SettingsDatabaseFlagsAttributes](s.ref.Append("database_flags"))
}

func (s SettingsAttributes) DenyMaintenancePeriod() terra.ListValue[SettingsDenyMaintenancePeriodAttributes] {
	return terra.ReferenceAsList[SettingsDenyMaintenancePeriodAttributes](s.ref.Append("deny_maintenance_period"))
}

func (s SettingsAttributes) InsightsConfig() terra.ListValue[SettingsInsightsConfigAttributes] {
	return terra.ReferenceAsList[SettingsInsightsConfigAttributes](s.ref.Append("insights_config"))
}

func (s SettingsAttributes) IpConfiguration() terra.ListValue[SettingsIpConfigurationAttributes] {
	return terra.ReferenceAsList[SettingsIpConfigurationAttributes](s.ref.Append("ip_configuration"))
}

func (s SettingsAttributes) LocationPreference() terra.ListValue[SettingsLocationPreferenceAttributes] {
	return terra.ReferenceAsList[SettingsLocationPreferenceAttributes](s.ref.Append("location_preference"))
}

func (s SettingsAttributes) MaintenanceWindow() terra.ListValue[SettingsMaintenanceWindowAttributes] {
	return terra.ReferenceAsList[SettingsMaintenanceWindowAttributes](s.ref.Append("maintenance_window"))
}

func (s SettingsAttributes) PasswordValidationPolicy() terra.ListValue[SettingsPasswordValidationPolicyAttributes] {
	return terra.ReferenceAsList[SettingsPasswordValidationPolicyAttributes](s.ref.Append("password_validation_policy"))
}

func (s SettingsAttributes) SqlServerAuditConfig() terra.ListValue[SettingsSqlServerAuditConfigAttributes] {
	return terra.ReferenceAsList[SettingsSqlServerAuditConfigAttributes](s.ref.Append("sql_server_audit_config"))
}

type SettingsActiveDirectoryConfigAttributes struct {
	ref terra.Reference
}

func (adc SettingsActiveDirectoryConfigAttributes) InternalRef() (terra.Reference, error) {
	return adc.ref, nil
}

func (adc SettingsActiveDirectoryConfigAttributes) InternalWithRef(ref terra.Reference) SettingsActiveDirectoryConfigAttributes {
	return SettingsActiveDirectoryConfigAttributes{ref: ref}
}

func (adc SettingsActiveDirectoryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return adc.ref.InternalTokens()
}

func (adc SettingsActiveDirectoryConfigAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("domain"))
}

type SettingsAdvancedMachineFeaturesAttributes struct {
	ref terra.Reference
}

func (amf SettingsAdvancedMachineFeaturesAttributes) InternalRef() (terra.Reference, error) {
	return amf.ref, nil
}

func (amf SettingsAdvancedMachineFeaturesAttributes) InternalWithRef(ref terra.Reference) SettingsAdvancedMachineFeaturesAttributes {
	return SettingsAdvancedMachineFeaturesAttributes{ref: ref}
}

func (amf SettingsAdvancedMachineFeaturesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return amf.ref.InternalTokens()
}

func (amf SettingsAdvancedMachineFeaturesAttributes) ThreadsPerCore() terra.NumberValue {
	return terra.ReferenceAsNumber(amf.ref.Append("threads_per_core"))
}

type SettingsBackupConfigurationAttributes struct {
	ref terra.Reference
}

func (bc SettingsBackupConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return bc.ref, nil
}

func (bc SettingsBackupConfigurationAttributes) InternalWithRef(ref terra.Reference) SettingsBackupConfigurationAttributes {
	return SettingsBackupConfigurationAttributes{ref: ref}
}

func (bc SettingsBackupConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bc.ref.InternalTokens()
}

func (bc SettingsBackupConfigurationAttributes) BinaryLogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(bc.ref.Append("binary_log_enabled"))
}

func (bc SettingsBackupConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(bc.ref.Append("enabled"))
}

func (bc SettingsBackupConfigurationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("location"))
}

func (bc SettingsBackupConfigurationAttributes) PointInTimeRecoveryEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(bc.ref.Append("point_in_time_recovery_enabled"))
}

func (bc SettingsBackupConfigurationAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("start_time"))
}

func (bc SettingsBackupConfigurationAttributes) TransactionLogRetentionDays() terra.NumberValue {
	return terra.ReferenceAsNumber(bc.ref.Append("transaction_log_retention_days"))
}

func (bc SettingsBackupConfigurationAttributes) BackupRetentionSettings() terra.ListValue[SettingsBackupConfigurationBackupRetentionSettingsAttributes] {
	return terra.ReferenceAsList[SettingsBackupConfigurationBackupRetentionSettingsAttributes](bc.ref.Append("backup_retention_settings"))
}

type SettingsBackupConfigurationBackupRetentionSettingsAttributes struct {
	ref terra.Reference
}

func (brs SettingsBackupConfigurationBackupRetentionSettingsAttributes) InternalRef() (terra.Reference, error) {
	return brs.ref, nil
}

func (brs SettingsBackupConfigurationBackupRetentionSettingsAttributes) InternalWithRef(ref terra.Reference) SettingsBackupConfigurationBackupRetentionSettingsAttributes {
	return SettingsBackupConfigurationBackupRetentionSettingsAttributes{ref: ref}
}

func (brs SettingsBackupConfigurationBackupRetentionSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return brs.ref.InternalTokens()
}

func (brs SettingsBackupConfigurationBackupRetentionSettingsAttributes) RetainedBackups() terra.NumberValue {
	return terra.ReferenceAsNumber(brs.ref.Append("retained_backups"))
}

func (brs SettingsBackupConfigurationBackupRetentionSettingsAttributes) RetentionUnit() terra.StringValue {
	return terra.ReferenceAsString(brs.ref.Append("retention_unit"))
}

type SettingsDataCacheConfigAttributes struct {
	ref terra.Reference
}

func (dcc SettingsDataCacheConfigAttributes) InternalRef() (terra.Reference, error) {
	return dcc.ref, nil
}

func (dcc SettingsDataCacheConfigAttributes) InternalWithRef(ref terra.Reference) SettingsDataCacheConfigAttributes {
	return SettingsDataCacheConfigAttributes{ref: ref}
}

func (dcc SettingsDataCacheConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcc.ref.InternalTokens()
}

func (dcc SettingsDataCacheConfigAttributes) DataCacheEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(dcc.ref.Append("data_cache_enabled"))
}

type SettingsDatabaseFlagsAttributes struct {
	ref terra.Reference
}

func (df SettingsDatabaseFlagsAttributes) InternalRef() (terra.Reference, error) {
	return df.ref, nil
}

func (df SettingsDatabaseFlagsAttributes) InternalWithRef(ref terra.Reference) SettingsDatabaseFlagsAttributes {
	return SettingsDatabaseFlagsAttributes{ref: ref}
}

func (df SettingsDatabaseFlagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return df.ref.InternalTokens()
}

func (df SettingsDatabaseFlagsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(df.ref.Append("name"))
}

func (df SettingsDatabaseFlagsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(df.ref.Append("value"))
}

type SettingsDenyMaintenancePeriodAttributes struct {
	ref terra.Reference
}

func (dmp SettingsDenyMaintenancePeriodAttributes) InternalRef() (terra.Reference, error) {
	return dmp.ref, nil
}

func (dmp SettingsDenyMaintenancePeriodAttributes) InternalWithRef(ref terra.Reference) SettingsDenyMaintenancePeriodAttributes {
	return SettingsDenyMaintenancePeriodAttributes{ref: ref}
}

func (dmp SettingsDenyMaintenancePeriodAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dmp.ref.InternalTokens()
}

func (dmp SettingsDenyMaintenancePeriodAttributes) EndDate() terra.StringValue {
	return terra.ReferenceAsString(dmp.ref.Append("end_date"))
}

func (dmp SettingsDenyMaintenancePeriodAttributes) StartDate() terra.StringValue {
	return terra.ReferenceAsString(dmp.ref.Append("start_date"))
}

func (dmp SettingsDenyMaintenancePeriodAttributes) Time() terra.StringValue {
	return terra.ReferenceAsString(dmp.ref.Append("time"))
}

type SettingsInsightsConfigAttributes struct {
	ref terra.Reference
}

func (ic SettingsInsightsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic SettingsInsightsConfigAttributes) InternalWithRef(ref terra.Reference) SettingsInsightsConfigAttributes {
	return SettingsInsightsConfigAttributes{ref: ref}
}

func (ic SettingsInsightsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic SettingsInsightsConfigAttributes) QueryInsightsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("query_insights_enabled"))
}

func (ic SettingsInsightsConfigAttributes) QueryPlansPerMinute() terra.NumberValue {
	return terra.ReferenceAsNumber(ic.ref.Append("query_plans_per_minute"))
}

func (ic SettingsInsightsConfigAttributes) QueryStringLength() terra.NumberValue {
	return terra.ReferenceAsNumber(ic.ref.Append("query_string_length"))
}

func (ic SettingsInsightsConfigAttributes) RecordApplicationTags() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("record_application_tags"))
}

func (ic SettingsInsightsConfigAttributes) RecordClientAddress() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("record_client_address"))
}

type SettingsIpConfigurationAttributes struct {
	ref terra.Reference
}

func (ic SettingsIpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic SettingsIpConfigurationAttributes) InternalWithRef(ref terra.Reference) SettingsIpConfigurationAttributes {
	return SettingsIpConfigurationAttributes{ref: ref}
}

func (ic SettingsIpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic SettingsIpConfigurationAttributes) AllocatedIpRange() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("allocated_ip_range"))
}

func (ic SettingsIpConfigurationAttributes) EnablePrivatePathForGoogleCloudServices() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("enable_private_path_for_google_cloud_services"))
}

func (ic SettingsIpConfigurationAttributes) Ipv4Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("ipv4_enabled"))
}

func (ic SettingsIpConfigurationAttributes) PrivateNetwork() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("private_network"))
}

func (ic SettingsIpConfigurationAttributes) RequireSsl() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("require_ssl"))
}

func (ic SettingsIpConfigurationAttributes) SslMode() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("ssl_mode"))
}

func (ic SettingsIpConfigurationAttributes) AuthorizedNetworks() terra.SetValue[SettingsIpConfigurationAuthorizedNetworksAttributes] {
	return terra.ReferenceAsSet[SettingsIpConfigurationAuthorizedNetworksAttributes](ic.ref.Append("authorized_networks"))
}

func (ic SettingsIpConfigurationAttributes) PscConfig() terra.SetValue[SettingsIpConfigurationPscConfigAttributes] {
	return terra.ReferenceAsSet[SettingsIpConfigurationPscConfigAttributes](ic.ref.Append("psc_config"))
}

type SettingsIpConfigurationAuthorizedNetworksAttributes struct {
	ref terra.Reference
}

func (an SettingsIpConfigurationAuthorizedNetworksAttributes) InternalRef() (terra.Reference, error) {
	return an.ref, nil
}

func (an SettingsIpConfigurationAuthorizedNetworksAttributes) InternalWithRef(ref terra.Reference) SettingsIpConfigurationAuthorizedNetworksAttributes {
	return SettingsIpConfigurationAuthorizedNetworksAttributes{ref: ref}
}

func (an SettingsIpConfigurationAuthorizedNetworksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return an.ref.InternalTokens()
}

func (an SettingsIpConfigurationAuthorizedNetworksAttributes) ExpirationTime() terra.StringValue {
	return terra.ReferenceAsString(an.ref.Append("expiration_time"))
}

func (an SettingsIpConfigurationAuthorizedNetworksAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(an.ref.Append("name"))
}

func (an SettingsIpConfigurationAuthorizedNetworksAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(an.ref.Append("value"))
}

type SettingsIpConfigurationPscConfigAttributes struct {
	ref terra.Reference
}

func (pc SettingsIpConfigurationPscConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc SettingsIpConfigurationPscConfigAttributes) InternalWithRef(ref terra.Reference) SettingsIpConfigurationPscConfigAttributes {
	return SettingsIpConfigurationPscConfigAttributes{ref: ref}
}

func (pc SettingsIpConfigurationPscConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc SettingsIpConfigurationPscConfigAttributes) AllowedConsumerProjects() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pc.ref.Append("allowed_consumer_projects"))
}

func (pc SettingsIpConfigurationPscConfigAttributes) PscEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("psc_enabled"))
}

type SettingsLocationPreferenceAttributes struct {
	ref terra.Reference
}

func (lp SettingsLocationPreferenceAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp SettingsLocationPreferenceAttributes) InternalWithRef(ref terra.Reference) SettingsLocationPreferenceAttributes {
	return SettingsLocationPreferenceAttributes{ref: ref}
}

func (lp SettingsLocationPreferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp SettingsLocationPreferenceAttributes) FollowGaeApplication() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("follow_gae_application"))
}

func (lp SettingsLocationPreferenceAttributes) SecondaryZone() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("secondary_zone"))
}

func (lp SettingsLocationPreferenceAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("zone"))
}

type SettingsMaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (mw SettingsMaintenanceWindowAttributes) InternalRef() (terra.Reference, error) {
	return mw.ref, nil
}

func (mw SettingsMaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) SettingsMaintenanceWindowAttributes {
	return SettingsMaintenanceWindowAttributes{ref: ref}
}

func (mw SettingsMaintenanceWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mw.ref.InternalTokens()
}

func (mw SettingsMaintenanceWindowAttributes) Day() terra.NumberValue {
	return terra.ReferenceAsNumber(mw.ref.Append("day"))
}

func (mw SettingsMaintenanceWindowAttributes) Hour() terra.NumberValue {
	return terra.ReferenceAsNumber(mw.ref.Append("hour"))
}

func (mw SettingsMaintenanceWindowAttributes) UpdateTrack() terra.StringValue {
	return terra.ReferenceAsString(mw.ref.Append("update_track"))
}

type SettingsPasswordValidationPolicyAttributes struct {
	ref terra.Reference
}

func (pvp SettingsPasswordValidationPolicyAttributes) InternalRef() (terra.Reference, error) {
	return pvp.ref, nil
}

func (pvp SettingsPasswordValidationPolicyAttributes) InternalWithRef(ref terra.Reference) SettingsPasswordValidationPolicyAttributes {
	return SettingsPasswordValidationPolicyAttributes{ref: ref}
}

func (pvp SettingsPasswordValidationPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pvp.ref.InternalTokens()
}

func (pvp SettingsPasswordValidationPolicyAttributes) Complexity() terra.StringValue {
	return terra.ReferenceAsString(pvp.ref.Append("complexity"))
}

func (pvp SettingsPasswordValidationPolicyAttributes) DisallowUsernameSubstring() terra.BoolValue {
	return terra.ReferenceAsBool(pvp.ref.Append("disallow_username_substring"))
}

func (pvp SettingsPasswordValidationPolicyAttributes) EnablePasswordPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(pvp.ref.Append("enable_password_policy"))
}

func (pvp SettingsPasswordValidationPolicyAttributes) MinLength() terra.NumberValue {
	return terra.ReferenceAsNumber(pvp.ref.Append("min_length"))
}

func (pvp SettingsPasswordValidationPolicyAttributes) PasswordChangeInterval() terra.StringValue {
	return terra.ReferenceAsString(pvp.ref.Append("password_change_interval"))
}

func (pvp SettingsPasswordValidationPolicyAttributes) ReuseInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(pvp.ref.Append("reuse_interval"))
}

type SettingsSqlServerAuditConfigAttributes struct {
	ref terra.Reference
}

func (ssac SettingsSqlServerAuditConfigAttributes) InternalRef() (terra.Reference, error) {
	return ssac.ref, nil
}

func (ssac SettingsSqlServerAuditConfigAttributes) InternalWithRef(ref terra.Reference) SettingsSqlServerAuditConfigAttributes {
	return SettingsSqlServerAuditConfigAttributes{ref: ref}
}

func (ssac SettingsSqlServerAuditConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssac.ref.InternalTokens()
}

func (ssac SettingsSqlServerAuditConfigAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(ssac.ref.Append("bucket"))
}

func (ssac SettingsSqlServerAuditConfigAttributes) RetentionInterval() terra.StringValue {
	return terra.ReferenceAsString(ssac.ref.Append("retention_interval"))
}

func (ssac SettingsSqlServerAuditConfigAttributes) UploadInterval() terra.StringValue {
	return terra.ReferenceAsString(ssac.ref.Append("upload_interval"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type IpAddressState struct {
	IpAddress    string `json:"ip_address"`
	TimeToRetire string `json:"time_to_retire"`
	Type         string `json:"type"`
}

type ServerCaCertState struct {
	Cert            string `json:"cert"`
	CommonName      string `json:"common_name"`
	CreateTime      string `json:"create_time"`
	ExpirationTime  string `json:"expiration_time"`
	Sha1Fingerprint string `json:"sha1_fingerprint"`
}

type CloneState struct {
	AllocatedIpRange   string   `json:"allocated_ip_range"`
	DatabaseNames      []string `json:"database_names"`
	PointInTime        string   `json:"point_in_time"`
	PreferredZone      string   `json:"preferred_zone"`
	SourceInstanceName string   `json:"source_instance_name"`
}

type ReplicaConfigurationState struct {
	CaCertificate           string  `json:"ca_certificate"`
	ClientCertificate       string  `json:"client_certificate"`
	ClientKey               string  `json:"client_key"`
	ConnectRetryInterval    float64 `json:"connect_retry_interval"`
	DumpFilePath            string  `json:"dump_file_path"`
	FailoverTarget          bool    `json:"failover_target"`
	MasterHeartbeatPeriod   float64 `json:"master_heartbeat_period"`
	Password                string  `json:"password"`
	SslCipher               string  `json:"ssl_cipher"`
	Username                string  `json:"username"`
	VerifyServerCertificate bool    `json:"verify_server_certificate"`
}

type RestoreBackupContextState struct {
	BackupRunId float64 `json:"backup_run_id"`
	InstanceId  string  `json:"instance_id"`
	Project     string  `json:"project"`
}

type SettingsState struct {
	ActivationPolicy          string                                  `json:"activation_policy"`
	AvailabilityType          string                                  `json:"availability_type"`
	Collation                 string                                  `json:"collation"`
	ConnectorEnforcement      string                                  `json:"connector_enforcement"`
	DeletionProtectionEnabled bool                                    `json:"deletion_protection_enabled"`
	DiskAutoresize            bool                                    `json:"disk_autoresize"`
	DiskAutoresizeLimit       float64                                 `json:"disk_autoresize_limit"`
	DiskSize                  float64                                 `json:"disk_size"`
	DiskType                  string                                  `json:"disk_type"`
	Edition                   string                                  `json:"edition"`
	EnableGoogleMlIntegration bool                                    `json:"enable_google_ml_integration"`
	PricingPlan               string                                  `json:"pricing_plan"`
	Tier                      string                                  `json:"tier"`
	TimeZone                  string                                  `json:"time_zone"`
	UserLabels                map[string]string                       `json:"user_labels"`
	Version                   float64                                 `json:"version"`
	ActiveDirectoryConfig     []SettingsActiveDirectoryConfigState    `json:"active_directory_config"`
	AdvancedMachineFeatures   []SettingsAdvancedMachineFeaturesState  `json:"advanced_machine_features"`
	BackupConfiguration       []SettingsBackupConfigurationState      `json:"backup_configuration"`
	DataCacheConfig           []SettingsDataCacheConfigState          `json:"data_cache_config"`
	DatabaseFlags             []SettingsDatabaseFlagsState            `json:"database_flags"`
	DenyMaintenancePeriod     []SettingsDenyMaintenancePeriodState    `json:"deny_maintenance_period"`
	InsightsConfig            []SettingsInsightsConfigState           `json:"insights_config"`
	IpConfiguration           []SettingsIpConfigurationState          `json:"ip_configuration"`
	LocationPreference        []SettingsLocationPreferenceState       `json:"location_preference"`
	MaintenanceWindow         []SettingsMaintenanceWindowState        `json:"maintenance_window"`
	PasswordValidationPolicy  []SettingsPasswordValidationPolicyState `json:"password_validation_policy"`
	SqlServerAuditConfig      []SettingsSqlServerAuditConfigState     `json:"sql_server_audit_config"`
}

type SettingsActiveDirectoryConfigState struct {
	Domain string `json:"domain"`
}

type SettingsAdvancedMachineFeaturesState struct {
	ThreadsPerCore float64 `json:"threads_per_core"`
}

type SettingsBackupConfigurationState struct {
	BinaryLogEnabled            bool                                                      `json:"binary_log_enabled"`
	Enabled                     bool                                                      `json:"enabled"`
	Location                    string                                                    `json:"location"`
	PointInTimeRecoveryEnabled  bool                                                      `json:"point_in_time_recovery_enabled"`
	StartTime                   string                                                    `json:"start_time"`
	TransactionLogRetentionDays float64                                                   `json:"transaction_log_retention_days"`
	BackupRetentionSettings     []SettingsBackupConfigurationBackupRetentionSettingsState `json:"backup_retention_settings"`
}

type SettingsBackupConfigurationBackupRetentionSettingsState struct {
	RetainedBackups float64 `json:"retained_backups"`
	RetentionUnit   string  `json:"retention_unit"`
}

type SettingsDataCacheConfigState struct {
	DataCacheEnabled bool `json:"data_cache_enabled"`
}

type SettingsDatabaseFlagsState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type SettingsDenyMaintenancePeriodState struct {
	EndDate   string `json:"end_date"`
	StartDate string `json:"start_date"`
	Time      string `json:"time"`
}

type SettingsInsightsConfigState struct {
	QueryInsightsEnabled  bool    `json:"query_insights_enabled"`
	QueryPlansPerMinute   float64 `json:"query_plans_per_minute"`
	QueryStringLength     float64 `json:"query_string_length"`
	RecordApplicationTags bool    `json:"record_application_tags"`
	RecordClientAddress   bool    `json:"record_client_address"`
}

type SettingsIpConfigurationState struct {
	AllocatedIpRange                        string                                           `json:"allocated_ip_range"`
	EnablePrivatePathForGoogleCloudServices bool                                             `json:"enable_private_path_for_google_cloud_services"`
	Ipv4Enabled                             bool                                             `json:"ipv4_enabled"`
	PrivateNetwork                          string                                           `json:"private_network"`
	RequireSsl                              bool                                             `json:"require_ssl"`
	SslMode                                 string                                           `json:"ssl_mode"`
	AuthorizedNetworks                      []SettingsIpConfigurationAuthorizedNetworksState `json:"authorized_networks"`
	PscConfig                               []SettingsIpConfigurationPscConfigState          `json:"psc_config"`
}

type SettingsIpConfigurationAuthorizedNetworksState struct {
	ExpirationTime string `json:"expiration_time"`
	Name           string `json:"name"`
	Value          string `json:"value"`
}

type SettingsIpConfigurationPscConfigState struct {
	AllowedConsumerProjects []string `json:"allowed_consumer_projects"`
	PscEnabled              bool     `json:"psc_enabled"`
}

type SettingsLocationPreferenceState struct {
	FollowGaeApplication string `json:"follow_gae_application"`
	SecondaryZone        string `json:"secondary_zone"`
	Zone                 string `json:"zone"`
}

type SettingsMaintenanceWindowState struct {
	Day         float64 `json:"day"`
	Hour        float64 `json:"hour"`
	UpdateTrack string  `json:"update_track"`
}

type SettingsPasswordValidationPolicyState struct {
	Complexity                string  `json:"complexity"`
	DisallowUsernameSubstring bool    `json:"disallow_username_substring"`
	EnablePasswordPolicy      bool    `json:"enable_password_policy"`
	MinLength                 float64 `json:"min_length"`
	PasswordChangeInterval    string  `json:"password_change_interval"`
	ReuseInterval             float64 `json:"reuse_interval"`
}

type SettingsSqlServerAuditConfigState struct {
	Bucket            string `json:"bucket"`
	RetentionInterval string `json:"retention_interval"`
	UploadInterval    string `json:"upload_interval"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
