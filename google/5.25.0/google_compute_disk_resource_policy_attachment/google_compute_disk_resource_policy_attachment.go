// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_disk_resource_policy_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_disk_resource_policy_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeDiskResourcePolicyAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcdrpa *Resource) Type() string {
	return "google_compute_disk_resource_policy_attachment"
}

// LocalName returns the local name for [Resource].
func (gcdrpa *Resource) LocalName() string {
	return gcdrpa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcdrpa *Resource) Configuration() interface{} {
	return gcdrpa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcdrpa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcdrpa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcdrpa *Resource) Dependencies() terra.Dependencies {
	return gcdrpa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcdrpa *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcdrpa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcdrpa *Resource) Attributes() googleComputeDiskResourcePolicyAttachmentAttributes {
	return googleComputeDiskResourcePolicyAttachmentAttributes{ref: terra.ReferenceResource(gcdrpa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcdrpa *Resource) ImportState(state io.Reader) error {
	gcdrpa.state = &googleComputeDiskResourcePolicyAttachmentState{}
	if err := json.NewDecoder(state).Decode(gcdrpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcdrpa.Type(), gcdrpa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcdrpa *Resource) State() (*googleComputeDiskResourcePolicyAttachmentState, bool) {
	return gcdrpa.state, gcdrpa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcdrpa *Resource) StateMust() *googleComputeDiskResourcePolicyAttachmentState {
	if gcdrpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcdrpa.Type(), gcdrpa.LocalName()))
	}
	return gcdrpa.state
}

// Args contains the configurations for google_compute_disk_resource_policy_attachment.
type Args struct {
	// Disk: string, required
	Disk terra.StringValue `hcl:"disk,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeDiskResourcePolicyAttachmentAttributes struct {
	ref terra.Reference
}

// Disk returns a reference to field disk of google_compute_disk_resource_policy_attachment.
func (gcdrpa googleComputeDiskResourcePolicyAttachmentAttributes) Disk() terra.StringValue {
	return terra.ReferenceAsString(gcdrpa.ref.Append("disk"))
}

// Id returns a reference to field id of google_compute_disk_resource_policy_attachment.
func (gcdrpa googleComputeDiskResourcePolicyAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcdrpa.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_disk_resource_policy_attachment.
func (gcdrpa googleComputeDiskResourcePolicyAttachmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcdrpa.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_disk_resource_policy_attachment.
func (gcdrpa googleComputeDiskResourcePolicyAttachmentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcdrpa.ref.Append("project"))
}

// Zone returns a reference to field zone of google_compute_disk_resource_policy_attachment.
func (gcdrpa googleComputeDiskResourcePolicyAttachmentAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gcdrpa.ref.Append("zone"))
}

func (gcdrpa googleComputeDiskResourcePolicyAttachmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcdrpa.ref.Append("timeouts"))
}

type googleComputeDiskResourcePolicyAttachmentState struct {
	Disk     string         `json:"disk"`
	Id       string         `json:"id"`
	Name     string         `json:"name"`
	Project  string         `json:"project"`
	Zone     string         `json:"zone"`
	Timeouts *TimeoutsState `json:"timeouts"`
}
