// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_network_services_edge_cache_keyset

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type PublicKey struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Managed: bool, optional
	Managed terra.BoolValue `hcl:"managed,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ValidationSharedKeys struct {
	// SecretVersion: string, required
	SecretVersion terra.StringValue `hcl:"secret_version,attr" validate:"required"`
}

type PublicKeyAttributes struct {
	ref terra.Reference
}

func (pk PublicKeyAttributes) InternalRef() (terra.Reference, error) {
	return pk.ref, nil
}

func (pk PublicKeyAttributes) InternalWithRef(ref terra.Reference) PublicKeyAttributes {
	return PublicKeyAttributes{ref: ref}
}

func (pk PublicKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pk.ref.InternalTokens()
}

func (pk PublicKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pk.ref.Append("id"))
}

func (pk PublicKeyAttributes) Managed() terra.BoolValue {
	return terra.ReferenceAsBool(pk.ref.Append("managed"))
}

func (pk PublicKeyAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(pk.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ValidationSharedKeysAttributes struct {
	ref terra.Reference
}

func (vsk ValidationSharedKeysAttributes) InternalRef() (terra.Reference, error) {
	return vsk.ref, nil
}

func (vsk ValidationSharedKeysAttributes) InternalWithRef(ref terra.Reference) ValidationSharedKeysAttributes {
	return ValidationSharedKeysAttributes{ref: ref}
}

func (vsk ValidationSharedKeysAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vsk.ref.InternalTokens()
}

func (vsk ValidationSharedKeysAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(vsk.ref.Append("secret_version"))
}

type PublicKeyState struct {
	Id      string `json:"id"`
	Managed bool   `json:"managed"`
	Value   string `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type ValidationSharedKeysState struct {
	SecretVersion string `json:"secret_version"`
}
