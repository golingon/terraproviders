// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_network_services_edge_cache_keyset

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_network_services_edge_cache_keyset.
type Resource struct {
	Name      string
	Args      Args
	state     *googleNetworkServicesEdgeCacheKeysetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gnseck *Resource) Type() string {
	return "google_network_services_edge_cache_keyset"
}

// LocalName returns the local name for [Resource].
func (gnseck *Resource) LocalName() string {
	return gnseck.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gnseck *Resource) Configuration() interface{} {
	return gnseck.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gnseck *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gnseck)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gnseck *Resource) Dependencies() terra.Dependencies {
	return gnseck.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gnseck *Resource) LifecycleManagement() *terra.Lifecycle {
	return gnseck.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gnseck *Resource) Attributes() googleNetworkServicesEdgeCacheKeysetAttributes {
	return googleNetworkServicesEdgeCacheKeysetAttributes{ref: terra.ReferenceResource(gnseck)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gnseck *Resource) ImportState(state io.Reader) error {
	gnseck.state = &googleNetworkServicesEdgeCacheKeysetState{}
	if err := json.NewDecoder(state).Decode(gnseck.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gnseck.Type(), gnseck.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gnseck *Resource) State() (*googleNetworkServicesEdgeCacheKeysetState, bool) {
	return gnseck.state, gnseck.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gnseck *Resource) StateMust() *googleNetworkServicesEdgeCacheKeysetState {
	if gnseck.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gnseck.Type(), gnseck.LocalName()))
	}
	return gnseck.state
}

// Args contains the configurations for google_network_services_edge_cache_keyset.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// PublicKey: min=0,max=3
	PublicKey []PublicKey `hcl:"public_key,block" validate:"min=0,max=3"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// ValidationSharedKeys: min=0,max=3
	ValidationSharedKeys []ValidationSharedKeys `hcl:"validation_shared_keys,block" validate:"min=0,max=3"`
}

type googleNetworkServicesEdgeCacheKeysetAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_network_services_edge_cache_keyset.
func (gnseck googleNetworkServicesEdgeCacheKeysetAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gnseck.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_network_services_edge_cache_keyset.
func (gnseck googleNetworkServicesEdgeCacheKeysetAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnseck.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_network_services_edge_cache_keyset.
func (gnseck googleNetworkServicesEdgeCacheKeysetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gnseck.ref.Append("id"))
}

// Labels returns a reference to field labels of google_network_services_edge_cache_keyset.
func (gnseck googleNetworkServicesEdgeCacheKeysetAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnseck.ref.Append("labels"))
}

// Name returns a reference to field name of google_network_services_edge_cache_keyset.
func (gnseck googleNetworkServicesEdgeCacheKeysetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gnseck.ref.Append("name"))
}

// Project returns a reference to field project of google_network_services_edge_cache_keyset.
func (gnseck googleNetworkServicesEdgeCacheKeysetAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gnseck.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_network_services_edge_cache_keyset.
func (gnseck googleNetworkServicesEdgeCacheKeysetAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnseck.ref.Append("terraform_labels"))
}

func (gnseck googleNetworkServicesEdgeCacheKeysetAttributes) PublicKey() terra.ListValue[PublicKeyAttributes] {
	return terra.ReferenceAsList[PublicKeyAttributes](gnseck.ref.Append("public_key"))
}

func (gnseck googleNetworkServicesEdgeCacheKeysetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gnseck.ref.Append("timeouts"))
}

func (gnseck googleNetworkServicesEdgeCacheKeysetAttributes) ValidationSharedKeys() terra.ListValue[ValidationSharedKeysAttributes] {
	return terra.ReferenceAsList[ValidationSharedKeysAttributes](gnseck.ref.Append("validation_shared_keys"))
}

type googleNetworkServicesEdgeCacheKeysetState struct {
	Description          string                      `json:"description"`
	EffectiveLabels      map[string]string           `json:"effective_labels"`
	Id                   string                      `json:"id"`
	Labels               map[string]string           `json:"labels"`
	Name                 string                      `json:"name"`
	Project              string                      `json:"project"`
	TerraformLabels      map[string]string           `json:"terraform_labels"`
	PublicKey            []PublicKeyState            `json:"public_key"`
	Timeouts             *TimeoutsState              `json:"timeouts"`
	ValidationSharedKeys []ValidationSharedKeysState `json:"validation_shared_keys"`
}
