// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_netapp_storage_pool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_netapp_storage_pool.
type Resource struct {
	Name      string
	Args      Args
	state     *googleNetappStoragePoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gnsp *Resource) Type() string {
	return "google_netapp_storage_pool"
}

// LocalName returns the local name for [Resource].
func (gnsp *Resource) LocalName() string {
	return gnsp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gnsp *Resource) Configuration() interface{} {
	return gnsp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gnsp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gnsp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gnsp *Resource) Dependencies() terra.Dependencies {
	return gnsp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gnsp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gnsp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gnsp *Resource) Attributes() googleNetappStoragePoolAttributes {
	return googleNetappStoragePoolAttributes{ref: terra.ReferenceResource(gnsp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gnsp *Resource) ImportState(state io.Reader) error {
	gnsp.state = &googleNetappStoragePoolState{}
	if err := json.NewDecoder(state).Decode(gnsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gnsp.Type(), gnsp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gnsp *Resource) State() (*googleNetappStoragePoolState, bool) {
	return gnsp.state, gnsp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gnsp *Resource) StateMust() *googleNetappStoragePoolState {
	if gnsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gnsp.Type(), gnsp.LocalName()))
	}
	return gnsp.state
}

// Args contains the configurations for google_netapp_storage_pool.
type Args struct {
	// ActiveDirectory: string, optional
	ActiveDirectory terra.StringValue `hcl:"active_directory,attr"`
	// CapacityGib: string, required
	CapacityGib terra.StringValue `hcl:"capacity_gib,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsConfig: string, optional
	KmsConfig terra.StringValue `hcl:"kms_config,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LdapEnabled: bool, optional
	LdapEnabled terra.BoolValue `hcl:"ldap_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceLevel: string, required
	ServiceLevel terra.StringValue `hcl:"service_level,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleNetappStoragePoolAttributes struct {
	ref terra.Reference
}

// ActiveDirectory returns a reference to field active_directory of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) ActiveDirectory() terra.StringValue {
	return terra.ReferenceAsString(gnsp.ref.Append("active_directory"))
}

// CapacityGib returns a reference to field capacity_gib of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) CapacityGib() terra.StringValue {
	return terra.ReferenceAsString(gnsp.ref.Append("capacity_gib"))
}

// Description returns a reference to field description of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gnsp.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnsp.ref.Append("effective_labels"))
}

// EncryptionType returns a reference to field encryption_type of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(gnsp.ref.Append("encryption_type"))
}

// Id returns a reference to field id of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gnsp.ref.Append("id"))
}

// KmsConfig returns a reference to field kms_config of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) KmsConfig() terra.StringValue {
	return terra.ReferenceAsString(gnsp.ref.Append("kms_config"))
}

// Labels returns a reference to field labels of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnsp.ref.Append("labels"))
}

// LdapEnabled returns a reference to field ldap_enabled of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) LdapEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(gnsp.ref.Append("ldap_enabled"))
}

// Location returns a reference to field location of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gnsp.ref.Append("location"))
}

// Name returns a reference to field name of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gnsp.ref.Append("name"))
}

// Network returns a reference to field network of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gnsp.ref.Append("network"))
}

// Project returns a reference to field project of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gnsp.ref.Append("project"))
}

// ServiceLevel returns a reference to field service_level of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) ServiceLevel() terra.StringValue {
	return terra.ReferenceAsString(gnsp.ref.Append("service_level"))
}

// TerraformLabels returns a reference to field terraform_labels of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnsp.ref.Append("terraform_labels"))
}

// VolumeCapacityGib returns a reference to field volume_capacity_gib of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) VolumeCapacityGib() terra.StringValue {
	return terra.ReferenceAsString(gnsp.ref.Append("volume_capacity_gib"))
}

// VolumeCount returns a reference to field volume_count of google_netapp_storage_pool.
func (gnsp googleNetappStoragePoolAttributes) VolumeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(gnsp.ref.Append("volume_count"))
}

func (gnsp googleNetappStoragePoolAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gnsp.ref.Append("timeouts"))
}

type googleNetappStoragePoolState struct {
	ActiveDirectory   string            `json:"active_directory"`
	CapacityGib       string            `json:"capacity_gib"`
	Description       string            `json:"description"`
	EffectiveLabels   map[string]string `json:"effective_labels"`
	EncryptionType    string            `json:"encryption_type"`
	Id                string            `json:"id"`
	KmsConfig         string            `json:"kms_config"`
	Labels            map[string]string `json:"labels"`
	LdapEnabled       bool              `json:"ldap_enabled"`
	Location          string            `json:"location"`
	Name              string            `json:"name"`
	Network           string            `json:"network"`
	Project           string            `json:"project"`
	ServiceLevel      string            `json:"service_level"`
	TerraformLabels   map[string]string `json:"terraform_labels"`
	VolumeCapacityGib string            `json:"volume_capacity_gib"`
	VolumeCount       float64           `json:"volume_count"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
