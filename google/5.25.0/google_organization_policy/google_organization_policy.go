// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_organization_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_organization_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleOrganizationPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gop *Resource) Type() string {
	return "google_organization_policy"
}

// LocalName returns the local name for [Resource].
func (gop *Resource) LocalName() string {
	return gop.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gop *Resource) Configuration() interface{} {
	return gop.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gop *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gop)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gop *Resource) Dependencies() terra.Dependencies {
	return gop.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gop *Resource) LifecycleManagement() *terra.Lifecycle {
	return gop.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gop *Resource) Attributes() googleOrganizationPolicyAttributes {
	return googleOrganizationPolicyAttributes{ref: terra.ReferenceResource(gop)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gop *Resource) ImportState(state io.Reader) error {
	gop.state = &googleOrganizationPolicyState{}
	if err := json.NewDecoder(state).Decode(gop.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gop.Type(), gop.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gop *Resource) State() (*googleOrganizationPolicyState, bool) {
	return gop.state, gop.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gop *Resource) StateMust() *googleOrganizationPolicyState {
	if gop.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gop.Type(), gop.LocalName()))
	}
	return gop.state
}

// Args contains the configurations for google_organization_policy.
type Args struct {
	// Constraint: string, required
	Constraint terra.StringValue `hcl:"constraint,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OrgId: string, required
	OrgId terra.StringValue `hcl:"org_id,attr" validate:"required"`
	// Version: number, optional
	Version terra.NumberValue `hcl:"version,attr"`
	// BooleanPolicy: optional
	BooleanPolicy *BooleanPolicy `hcl:"boolean_policy,block"`
	// ListPolicy: optional
	ListPolicy *ListPolicy `hcl:"list_policy,block"`
	// RestorePolicy: optional
	RestorePolicy *RestorePolicy `hcl:"restore_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleOrganizationPolicyAttributes struct {
	ref terra.Reference
}

// Constraint returns a reference to field constraint of google_organization_policy.
func (gop googleOrganizationPolicyAttributes) Constraint() terra.StringValue {
	return terra.ReferenceAsString(gop.ref.Append("constraint"))
}

// Etag returns a reference to field etag of google_organization_policy.
func (gop googleOrganizationPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gop.ref.Append("etag"))
}

// Id returns a reference to field id of google_organization_policy.
func (gop googleOrganizationPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gop.ref.Append("id"))
}

// OrgId returns a reference to field org_id of google_organization_policy.
func (gop googleOrganizationPolicyAttributes) OrgId() terra.StringValue {
	return terra.ReferenceAsString(gop.ref.Append("org_id"))
}

// UpdateTime returns a reference to field update_time of google_organization_policy.
func (gop googleOrganizationPolicyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gop.ref.Append("update_time"))
}

// Version returns a reference to field version of google_organization_policy.
func (gop googleOrganizationPolicyAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(gop.ref.Append("version"))
}

func (gop googleOrganizationPolicyAttributes) BooleanPolicy() terra.ListValue[BooleanPolicyAttributes] {
	return terra.ReferenceAsList[BooleanPolicyAttributes](gop.ref.Append("boolean_policy"))
}

func (gop googleOrganizationPolicyAttributes) ListPolicy() terra.ListValue[ListPolicyAttributes] {
	return terra.ReferenceAsList[ListPolicyAttributes](gop.ref.Append("list_policy"))
}

func (gop googleOrganizationPolicyAttributes) RestorePolicy() terra.ListValue[RestorePolicyAttributes] {
	return terra.ReferenceAsList[RestorePolicyAttributes](gop.ref.Append("restore_policy"))
}

func (gop googleOrganizationPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gop.ref.Append("timeouts"))
}

type googleOrganizationPolicyState struct {
	Constraint    string               `json:"constraint"`
	Etag          string               `json:"etag"`
	Id            string               `json:"id"`
	OrgId         string               `json:"org_id"`
	UpdateTime    string               `json:"update_time"`
	Version       float64              `json:"version"`
	BooleanPolicy []BooleanPolicyState `json:"boolean_policy"`
	ListPolicy    []ListPolicyState    `json:"list_policy"`
	RestorePolicy []RestorePolicyState `json:"restore_policy"`
	Timeouts      *TimeoutsState       `json:"timeouts"`
}
