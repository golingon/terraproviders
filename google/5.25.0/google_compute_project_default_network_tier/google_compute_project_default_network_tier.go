// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_project_default_network_tier

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_project_default_network_tier.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeProjectDefaultNetworkTierState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcpdnt *Resource) Type() string {
	return "google_compute_project_default_network_tier"
}

// LocalName returns the local name for [Resource].
func (gcpdnt *Resource) LocalName() string {
	return gcpdnt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcpdnt *Resource) Configuration() interface{} {
	return gcpdnt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcpdnt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcpdnt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcpdnt *Resource) Dependencies() terra.Dependencies {
	return gcpdnt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcpdnt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcpdnt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcpdnt *Resource) Attributes() googleComputeProjectDefaultNetworkTierAttributes {
	return googleComputeProjectDefaultNetworkTierAttributes{ref: terra.ReferenceResource(gcpdnt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcpdnt *Resource) ImportState(state io.Reader) error {
	gcpdnt.state = &googleComputeProjectDefaultNetworkTierState{}
	if err := json.NewDecoder(state).Decode(gcpdnt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcpdnt.Type(), gcpdnt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcpdnt *Resource) State() (*googleComputeProjectDefaultNetworkTierState, bool) {
	return gcpdnt.state, gcpdnt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcpdnt *Resource) StateMust() *googleComputeProjectDefaultNetworkTierState {
	if gcpdnt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcpdnt.Type(), gcpdnt.LocalName()))
	}
	return gcpdnt.state
}

// Args contains the configurations for google_compute_project_default_network_tier.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetworkTier: string, required
	NetworkTier terra.StringValue `hcl:"network_tier,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeProjectDefaultNetworkTierAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_compute_project_default_network_tier.
func (gcpdnt googleComputeProjectDefaultNetworkTierAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcpdnt.ref.Append("id"))
}

// NetworkTier returns a reference to field network_tier of google_compute_project_default_network_tier.
func (gcpdnt googleComputeProjectDefaultNetworkTierAttributes) NetworkTier() terra.StringValue {
	return terra.ReferenceAsString(gcpdnt.ref.Append("network_tier"))
}

// Project returns a reference to field project of google_compute_project_default_network_tier.
func (gcpdnt googleComputeProjectDefaultNetworkTierAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcpdnt.ref.Append("project"))
}

func (gcpdnt googleComputeProjectDefaultNetworkTierAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcpdnt.ref.Append("timeouts"))
}

type googleComputeProjectDefaultNetworkTierState struct {
	Id          string         `json:"id"`
	NetworkTier string         `json:"network_tier"`
	Project     string         `json:"project"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
