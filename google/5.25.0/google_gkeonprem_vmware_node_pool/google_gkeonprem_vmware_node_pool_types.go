// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_gkeonprem_vmware_node_pool

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Config struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// Cpus: number, optional
	Cpus terra.NumberValue `hcl:"cpus,attr"`
	// EnableLoadBalancer: bool, optional
	EnableLoadBalancer terra.BoolValue `hcl:"enable_load_balancer,attr"`
	// Image: string, optional
	Image terra.StringValue `hcl:"image,attr"`
	// ImageType: string, required
	ImageType terra.StringValue `hcl:"image_type,attr" validate:"required"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// MemoryMb: number, optional
	MemoryMb terra.NumberValue `hcl:"memory_mb,attr"`
	// Replicas: number, optional
	Replicas terra.NumberValue `hcl:"replicas,attr"`
	// ConfigTaints: min=0
	Taints []ConfigTaints `hcl:"taints,block" validate:"min=0"`
	// ConfigVsphereConfig: optional
	VsphereConfig *ConfigVsphereConfig `hcl:"vsphere_config,block"`
}

type ConfigTaints struct {
	// Effect: string, optional
	Effect terra.StringValue `hcl:"effect,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ConfigVsphereConfig struct {
	// Datastore: string, optional
	Datastore terra.StringValue `hcl:"datastore,attr"`
	// HostGroups: list of string, optional
	HostGroups terra.ListValue[terra.StringValue] `hcl:"host_groups,attr"`
	// ConfigVsphereConfigTags: min=0
	Tags []ConfigVsphereConfigTags `hcl:"tags,block" validate:"min=0"`
}

type ConfigVsphereConfigTags struct {
	// Category: string, optional
	Category terra.StringValue `hcl:"category,attr"`
	// Tag: string, optional
	Tag terra.StringValue `hcl:"tag,attr"`
}

type NodePoolAutoscaling struct {
	// MaxReplicas: number, required
	MaxReplicas terra.NumberValue `hcl:"max_replicas,attr" validate:"required"`
	// MinReplicas: number, required
	MinReplicas terra.NumberValue `hcl:"min_replicas,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type StatusAttributes struct {
	ref terra.Reference
}

func (s StatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StatusAttributes) InternalWithRef(ref terra.Reference) StatusAttributes {
	return StatusAttributes{ref: ref}
}

func (s StatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StatusAttributes) ErrorMessage() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("error_message"))
}

func (s StatusAttributes) Conditions() terra.ListValue[StatusConditionsAttributes] {
	return terra.ReferenceAsList[StatusConditionsAttributes](s.ref.Append("conditions"))
}

type StatusConditionsAttributes struct {
	ref terra.Reference
}

func (c StatusConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c StatusConditionsAttributes) InternalWithRef(ref terra.Reference) StatusConditionsAttributes {
	return StatusConditionsAttributes{ref: ref}
}

func (c StatusConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c StatusConditionsAttributes) LastTransitionTime() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("last_transition_time"))
}

func (c StatusConditionsAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("message"))
}

func (c StatusConditionsAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("reason"))
}

func (c StatusConditionsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("state"))
}

func (c StatusConditionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type ConfigAttributes struct {
	ref terra.Reference
}

func (c ConfigAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigAttributes) InternalWithRef(ref terra.Reference) ConfigAttributes {
	return ConfigAttributes{ref: ref}
}

func (c ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigAttributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("boot_disk_size_gb"))
}

func (c ConfigAttributes) Cpus() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("cpus"))
}

func (c ConfigAttributes) EnableLoadBalancer() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("enable_load_balancer"))
}

func (c ConfigAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c ConfigAttributes) ImageType() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image_type"))
}

func (c ConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("labels"))
}

func (c ConfigAttributes) MemoryMb() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("memory_mb"))
}

func (c ConfigAttributes) Replicas() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("replicas"))
}

func (c ConfigAttributes) Taints() terra.ListValue[ConfigTaintsAttributes] {
	return terra.ReferenceAsList[ConfigTaintsAttributes](c.ref.Append("taints"))
}

func (c ConfigAttributes) VsphereConfig() terra.ListValue[ConfigVsphereConfigAttributes] {
	return terra.ReferenceAsList[ConfigVsphereConfigAttributes](c.ref.Append("vsphere_config"))
}

type ConfigTaintsAttributes struct {
	ref terra.Reference
}

func (t ConfigTaintsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ConfigTaintsAttributes) InternalWithRef(ref terra.Reference) ConfigTaintsAttributes {
	return ConfigTaintsAttributes{ref: ref}
}

func (t ConfigTaintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ConfigTaintsAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("effect"))
}

func (t ConfigTaintsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t ConfigTaintsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type ConfigVsphereConfigAttributes struct {
	ref terra.Reference
}

func (vc ConfigVsphereConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc ConfigVsphereConfigAttributes) InternalWithRef(ref terra.Reference) ConfigVsphereConfigAttributes {
	return ConfigVsphereConfigAttributes{ref: ref}
}

func (vc ConfigVsphereConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc ConfigVsphereConfigAttributes) Datastore() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("datastore"))
}

func (vc ConfigVsphereConfigAttributes) HostGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vc.ref.Append("host_groups"))
}

func (vc ConfigVsphereConfigAttributes) Tags() terra.ListValue[ConfigVsphereConfigTagsAttributes] {
	return terra.ReferenceAsList[ConfigVsphereConfigTagsAttributes](vc.ref.Append("tags"))
}

type ConfigVsphereConfigTagsAttributes struct {
	ref terra.Reference
}

func (t ConfigVsphereConfigTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ConfigVsphereConfigTagsAttributes) InternalWithRef(ref terra.Reference) ConfigVsphereConfigTagsAttributes {
	return ConfigVsphereConfigTagsAttributes{ref: ref}
}

func (t ConfigVsphereConfigTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ConfigVsphereConfigTagsAttributes) Category() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("category"))
}

func (t ConfigVsphereConfigTagsAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("tag"))
}

type NodePoolAutoscalingAttributes struct {
	ref terra.Reference
}

func (npa NodePoolAutoscalingAttributes) InternalRef() (terra.Reference, error) {
	return npa.ref, nil
}

func (npa NodePoolAutoscalingAttributes) InternalWithRef(ref terra.Reference) NodePoolAutoscalingAttributes {
	return NodePoolAutoscalingAttributes{ref: ref}
}

func (npa NodePoolAutoscalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npa.ref.InternalTokens()
}

func (npa NodePoolAutoscalingAttributes) MaxReplicas() terra.NumberValue {
	return terra.ReferenceAsNumber(npa.ref.Append("max_replicas"))
}

func (npa NodePoolAutoscalingAttributes) MinReplicas() terra.NumberValue {
	return terra.ReferenceAsNumber(npa.ref.Append("min_replicas"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type StatusState struct {
	ErrorMessage string                  `json:"error_message"`
	Conditions   []StatusConditionsState `json:"conditions"`
}

type StatusConditionsState struct {
	LastTransitionTime string `json:"last_transition_time"`
	Message            string `json:"message"`
	Reason             string `json:"reason"`
	State              string `json:"state"`
	Type               string `json:"type"`
}

type ConfigState struct {
	BootDiskSizeGb     float64                    `json:"boot_disk_size_gb"`
	Cpus               float64                    `json:"cpus"`
	EnableLoadBalancer bool                       `json:"enable_load_balancer"`
	Image              string                     `json:"image"`
	ImageType          string                     `json:"image_type"`
	Labels             map[string]string          `json:"labels"`
	MemoryMb           float64                    `json:"memory_mb"`
	Replicas           float64                    `json:"replicas"`
	Taints             []ConfigTaintsState        `json:"taints"`
	VsphereConfig      []ConfigVsphereConfigState `json:"vsphere_config"`
}

type ConfigTaintsState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type ConfigVsphereConfigState struct {
	Datastore  string                         `json:"datastore"`
	HostGroups []string                       `json:"host_groups"`
	Tags       []ConfigVsphereConfigTagsState `json:"tags"`
}

type ConfigVsphereConfigTagsState struct {
	Category string `json:"category"`
	Tag      string `json:"tag"`
}

type NodePoolAutoscalingState struct {
	MaxReplicas float64 `json:"max_replicas"`
	MinReplicas float64 `json:"min_replicas"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
