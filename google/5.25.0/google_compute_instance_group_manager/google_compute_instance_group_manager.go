// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_instance_group_manager

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_instance_group_manager.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeInstanceGroupManagerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcigm *Resource) Type() string {
	return "google_compute_instance_group_manager"
}

// LocalName returns the local name for [Resource].
func (gcigm *Resource) LocalName() string {
	return gcigm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcigm *Resource) Configuration() interface{} {
	return gcigm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcigm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcigm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcigm *Resource) Dependencies() terra.Dependencies {
	return gcigm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcigm *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcigm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcigm *Resource) Attributes() googleComputeInstanceGroupManagerAttributes {
	return googleComputeInstanceGroupManagerAttributes{ref: terra.ReferenceResource(gcigm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcigm *Resource) ImportState(state io.Reader) error {
	gcigm.state = &googleComputeInstanceGroupManagerState{}
	if err := json.NewDecoder(state).Decode(gcigm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcigm.Type(), gcigm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcigm *Resource) State() (*googleComputeInstanceGroupManagerState, bool) {
	return gcigm.state, gcigm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcigm *Resource) StateMust() *googleComputeInstanceGroupManagerState {
	if gcigm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcigm.Type(), gcigm.LocalName()))
	}
	return gcigm.state
}

// Args contains the configurations for google_compute_instance_group_manager.
type Args struct {
	// BaseInstanceName: string, required
	BaseInstanceName terra.StringValue `hcl:"base_instance_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListManagedInstancesResults: string, optional
	ListManagedInstancesResults terra.StringValue `hcl:"list_managed_instances_results,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TargetPools: set of string, optional
	TargetPools terra.SetValue[terra.StringValue] `hcl:"target_pools,attr"`
	// TargetSize: number, optional
	TargetSize terra.NumberValue `hcl:"target_size,attr"`
	// WaitForInstances: bool, optional
	WaitForInstances terra.BoolValue `hcl:"wait_for_instances,attr"`
	// WaitForInstancesStatus: string, optional
	WaitForInstancesStatus terra.StringValue `hcl:"wait_for_instances_status,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// AllInstancesConfig: optional
	AllInstancesConfig *AllInstancesConfig `hcl:"all_instances_config,block"`
	// AutoHealingPolicies: optional
	AutoHealingPolicies *AutoHealingPolicies `hcl:"auto_healing_policies,block"`
	// InstanceLifecyclePolicy: optional
	InstanceLifecyclePolicy *InstanceLifecyclePolicy `hcl:"instance_lifecycle_policy,block"`
	// NamedPort: min=0
	NamedPort []NamedPort `hcl:"named_port,block" validate:"min=0"`
	// StatefulDisk: min=0
	StatefulDisk []StatefulDisk `hcl:"stateful_disk,block" validate:"min=0"`
	// StatefulExternalIp: min=0
	StatefulExternalIp []StatefulExternalIp `hcl:"stateful_external_ip,block" validate:"min=0"`
	// StatefulInternalIp: min=0
	StatefulInternalIp []StatefulInternalIp `hcl:"stateful_internal_ip,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// UpdatePolicy: optional
	UpdatePolicy *UpdatePolicy `hcl:"update_policy,block"`
	// Version: min=1
	Version []Version `hcl:"version,block" validate:"min=1"`
}

type googleComputeInstanceGroupManagerAttributes struct {
	ref terra.Reference
}

// BaseInstanceName returns a reference to field base_instance_name of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) BaseInstanceName() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("base_instance_name"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("description"))
}

// Fingerprint returns a reference to field fingerprint of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("fingerprint"))
}

// Id returns a reference to field id of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("id"))
}

// InstanceGroup returns a reference to field instance_group of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) InstanceGroup() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("instance_group"))
}

// ListManagedInstancesResults returns a reference to field list_managed_instances_results of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) ListManagedInstancesResults() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("list_managed_instances_results"))
}

// Name returns a reference to field name of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("name"))
}

// Operation returns a reference to field operation of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) Operation() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("operation"))
}

// Project returns a reference to field project of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("self_link"))
}

// TargetPools returns a reference to field target_pools of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) TargetPools() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gcigm.ref.Append("target_pools"))
}

// TargetSize returns a reference to field target_size of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) TargetSize() terra.NumberValue {
	return terra.ReferenceAsNumber(gcigm.ref.Append("target_size"))
}

// WaitForInstances returns a reference to field wait_for_instances of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) WaitForInstances() terra.BoolValue {
	return terra.ReferenceAsBool(gcigm.ref.Append("wait_for_instances"))
}

// WaitForInstancesStatus returns a reference to field wait_for_instances_status of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) WaitForInstancesStatus() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("wait_for_instances_status"))
}

// Zone returns a reference to field zone of google_compute_instance_group_manager.
func (gcigm googleComputeInstanceGroupManagerAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("zone"))
}

func (gcigm googleComputeInstanceGroupManagerAttributes) Status() terra.ListValue[StatusAttributes] {
	return terra.ReferenceAsList[StatusAttributes](gcigm.ref.Append("status"))
}

func (gcigm googleComputeInstanceGroupManagerAttributes) AllInstancesConfig() terra.ListValue[AllInstancesConfigAttributes] {
	return terra.ReferenceAsList[AllInstancesConfigAttributes](gcigm.ref.Append("all_instances_config"))
}

func (gcigm googleComputeInstanceGroupManagerAttributes) AutoHealingPolicies() terra.ListValue[AutoHealingPoliciesAttributes] {
	return terra.ReferenceAsList[AutoHealingPoliciesAttributes](gcigm.ref.Append("auto_healing_policies"))
}

func (gcigm googleComputeInstanceGroupManagerAttributes) InstanceLifecyclePolicy() terra.ListValue[InstanceLifecyclePolicyAttributes] {
	return terra.ReferenceAsList[InstanceLifecyclePolicyAttributes](gcigm.ref.Append("instance_lifecycle_policy"))
}

func (gcigm googleComputeInstanceGroupManagerAttributes) NamedPort() terra.SetValue[NamedPortAttributes] {
	return terra.ReferenceAsSet[NamedPortAttributes](gcigm.ref.Append("named_port"))
}

func (gcigm googleComputeInstanceGroupManagerAttributes) StatefulDisk() terra.SetValue[StatefulDiskAttributes] {
	return terra.ReferenceAsSet[StatefulDiskAttributes](gcigm.ref.Append("stateful_disk"))
}

func (gcigm googleComputeInstanceGroupManagerAttributes) StatefulExternalIp() terra.ListValue[StatefulExternalIpAttributes] {
	return terra.ReferenceAsList[StatefulExternalIpAttributes](gcigm.ref.Append("stateful_external_ip"))
}

func (gcigm googleComputeInstanceGroupManagerAttributes) StatefulInternalIp() terra.ListValue[StatefulInternalIpAttributes] {
	return terra.ReferenceAsList[StatefulInternalIpAttributes](gcigm.ref.Append("stateful_internal_ip"))
}

func (gcigm googleComputeInstanceGroupManagerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcigm.ref.Append("timeouts"))
}

func (gcigm googleComputeInstanceGroupManagerAttributes) UpdatePolicy() terra.ListValue[UpdatePolicyAttributes] {
	return terra.ReferenceAsList[UpdatePolicyAttributes](gcigm.ref.Append("update_policy"))
}

func (gcigm googleComputeInstanceGroupManagerAttributes) Version() terra.ListValue[VersionAttributes] {
	return terra.ReferenceAsList[VersionAttributes](gcigm.ref.Append("version"))
}

type googleComputeInstanceGroupManagerState struct {
	BaseInstanceName            string                         `json:"base_instance_name"`
	CreationTimestamp           string                         `json:"creation_timestamp"`
	Description                 string                         `json:"description"`
	Fingerprint                 string                         `json:"fingerprint"`
	Id                          string                         `json:"id"`
	InstanceGroup               string                         `json:"instance_group"`
	ListManagedInstancesResults string                         `json:"list_managed_instances_results"`
	Name                        string                         `json:"name"`
	Operation                   string                         `json:"operation"`
	Project                     string                         `json:"project"`
	SelfLink                    string                         `json:"self_link"`
	TargetPools                 []string                       `json:"target_pools"`
	TargetSize                  float64                        `json:"target_size"`
	WaitForInstances            bool                           `json:"wait_for_instances"`
	WaitForInstancesStatus      string                         `json:"wait_for_instances_status"`
	Zone                        string                         `json:"zone"`
	Status                      []StatusState                  `json:"status"`
	AllInstancesConfig          []AllInstancesConfigState      `json:"all_instances_config"`
	AutoHealingPolicies         []AutoHealingPoliciesState     `json:"auto_healing_policies"`
	InstanceLifecyclePolicy     []InstanceLifecyclePolicyState `json:"instance_lifecycle_policy"`
	NamedPort                   []NamedPortState               `json:"named_port"`
	StatefulDisk                []StatefulDiskState            `json:"stateful_disk"`
	StatefulExternalIp          []StatefulExternalIpState      `json:"stateful_external_ip"`
	StatefulInternalIp          []StatefulInternalIpState      `json:"stateful_internal_ip"`
	Timeouts                    *TimeoutsState                 `json:"timeouts"`
	UpdatePolicy                []UpdatePolicyState            `json:"update_policy"`
	Version                     []VersionState                 `json:"version"`
}
