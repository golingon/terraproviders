// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataproc_workflow_template

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Jobs struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// PrerequisiteStepIds: list of string, optional
	PrerequisiteStepIds terra.ListValue[terra.StringValue] `hcl:"prerequisite_step_ids,attr"`
	// StepId: string, required
	StepId terra.StringValue `hcl:"step_id,attr" validate:"required"`
	// JobsHadoopJob: optional
	HadoopJob *JobsHadoopJob `hcl:"hadoop_job,block"`
	// JobsHiveJob: optional
	HiveJob *JobsHiveJob `hcl:"hive_job,block"`
	// JobsPigJob: optional
	PigJob *JobsPigJob `hcl:"pig_job,block"`
	// JobsPrestoJob: optional
	PrestoJob *JobsPrestoJob `hcl:"presto_job,block"`
	// JobsPysparkJob: optional
	PysparkJob *JobsPysparkJob `hcl:"pyspark_job,block"`
	// JobsScheduling: optional
	Scheduling *JobsScheduling `hcl:"scheduling,block"`
	// JobsSparkJob: optional
	SparkJob *JobsSparkJob `hcl:"spark_job,block"`
	// JobsSparkRJob: optional
	SparkRJob *JobsSparkRJob `hcl:"spark_r_job,block"`
	// JobsSparkSqlJob: optional
	SparkSqlJob *JobsSparkSqlJob `hcl:"spark_sql_job,block"`
}

type JobsHadoopJob struct {
	// ArchiveUris: list of string, optional
	ArchiveUris terra.ListValue[terra.StringValue] `hcl:"archive_uris,attr"`
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// FileUris: list of string, optional
	FileUris terra.ListValue[terra.StringValue] `hcl:"file_uris,attr"`
	// JarFileUris: list of string, optional
	JarFileUris terra.ListValue[terra.StringValue] `hcl:"jar_file_uris,attr"`
	// MainClass: string, optional
	MainClass terra.StringValue `hcl:"main_class,attr"`
	// MainJarFileUri: string, optional
	MainJarFileUri terra.StringValue `hcl:"main_jar_file_uri,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// JobsHadoopJobLoggingConfig: optional
	LoggingConfig *JobsHadoopJobLoggingConfig `hcl:"logging_config,block"`
}

type JobsHadoopJobLoggingConfig struct {
	// DriverLogLevels: map of string, optional
	DriverLogLevels terra.MapValue[terra.StringValue] `hcl:"driver_log_levels,attr"`
}

type JobsHiveJob struct {
	// ContinueOnFailure: bool, optional
	ContinueOnFailure terra.BoolValue `hcl:"continue_on_failure,attr"`
	// JarFileUris: list of string, optional
	JarFileUris terra.ListValue[terra.StringValue] `hcl:"jar_file_uris,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// QueryFileUri: string, optional
	QueryFileUri terra.StringValue `hcl:"query_file_uri,attr"`
	// ScriptVariables: map of string, optional
	ScriptVariables terra.MapValue[terra.StringValue] `hcl:"script_variables,attr"`
	// JobsHiveJobQueryList: optional
	QueryList *JobsHiveJobQueryList `hcl:"query_list,block"`
}

type JobsHiveJobQueryList struct {
	// Queries: list of string, required
	Queries terra.ListValue[terra.StringValue] `hcl:"queries,attr" validate:"required"`
}

type JobsPigJob struct {
	// ContinueOnFailure: bool, optional
	ContinueOnFailure terra.BoolValue `hcl:"continue_on_failure,attr"`
	// JarFileUris: list of string, optional
	JarFileUris terra.ListValue[terra.StringValue] `hcl:"jar_file_uris,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// QueryFileUri: string, optional
	QueryFileUri terra.StringValue `hcl:"query_file_uri,attr"`
	// ScriptVariables: map of string, optional
	ScriptVariables terra.MapValue[terra.StringValue] `hcl:"script_variables,attr"`
	// JobsPigJobLoggingConfig: optional
	LoggingConfig *JobsPigJobLoggingConfig `hcl:"logging_config,block"`
	// JobsPigJobQueryList: optional
	QueryList *JobsPigJobQueryList `hcl:"query_list,block"`
}

type JobsPigJobLoggingConfig struct {
	// DriverLogLevels: map of string, optional
	DriverLogLevels terra.MapValue[terra.StringValue] `hcl:"driver_log_levels,attr"`
}

type JobsPigJobQueryList struct {
	// Queries: list of string, required
	Queries terra.ListValue[terra.StringValue] `hcl:"queries,attr" validate:"required"`
}

type JobsPrestoJob struct {
	// ClientTags: list of string, optional
	ClientTags terra.ListValue[terra.StringValue] `hcl:"client_tags,attr"`
	// ContinueOnFailure: bool, optional
	ContinueOnFailure terra.BoolValue `hcl:"continue_on_failure,attr"`
	// OutputFormat: string, optional
	OutputFormat terra.StringValue `hcl:"output_format,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// QueryFileUri: string, optional
	QueryFileUri terra.StringValue `hcl:"query_file_uri,attr"`
	// JobsPrestoJobLoggingConfig: optional
	LoggingConfig *JobsPrestoJobLoggingConfig `hcl:"logging_config,block"`
	// JobsPrestoJobQueryList: optional
	QueryList *JobsPrestoJobQueryList `hcl:"query_list,block"`
}

type JobsPrestoJobLoggingConfig struct {
	// DriverLogLevels: map of string, optional
	DriverLogLevels terra.MapValue[terra.StringValue] `hcl:"driver_log_levels,attr"`
}

type JobsPrestoJobQueryList struct {
	// Queries: list of string, required
	Queries terra.ListValue[terra.StringValue] `hcl:"queries,attr" validate:"required"`
}

type JobsPysparkJob struct {
	// ArchiveUris: list of string, optional
	ArchiveUris terra.ListValue[terra.StringValue] `hcl:"archive_uris,attr"`
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// FileUris: list of string, optional
	FileUris terra.ListValue[terra.StringValue] `hcl:"file_uris,attr"`
	// JarFileUris: list of string, optional
	JarFileUris terra.ListValue[terra.StringValue] `hcl:"jar_file_uris,attr"`
	// MainPythonFileUri: string, required
	MainPythonFileUri terra.StringValue `hcl:"main_python_file_uri,attr" validate:"required"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// PythonFileUris: list of string, optional
	PythonFileUris terra.ListValue[terra.StringValue] `hcl:"python_file_uris,attr"`
	// JobsPysparkJobLoggingConfig: optional
	LoggingConfig *JobsPysparkJobLoggingConfig `hcl:"logging_config,block"`
}

type JobsPysparkJobLoggingConfig struct {
	// DriverLogLevels: map of string, optional
	DriverLogLevels terra.MapValue[terra.StringValue] `hcl:"driver_log_levels,attr"`
}

type JobsScheduling struct {
	// MaxFailuresPerHour: number, optional
	MaxFailuresPerHour terra.NumberValue `hcl:"max_failures_per_hour,attr"`
	// MaxFailuresTotal: number, optional
	MaxFailuresTotal terra.NumberValue `hcl:"max_failures_total,attr"`
}

type JobsSparkJob struct {
	// ArchiveUris: list of string, optional
	ArchiveUris terra.ListValue[terra.StringValue] `hcl:"archive_uris,attr"`
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// FileUris: list of string, optional
	FileUris terra.ListValue[terra.StringValue] `hcl:"file_uris,attr"`
	// JarFileUris: list of string, optional
	JarFileUris terra.ListValue[terra.StringValue] `hcl:"jar_file_uris,attr"`
	// MainClass: string, optional
	MainClass terra.StringValue `hcl:"main_class,attr"`
	// MainJarFileUri: string, optional
	MainJarFileUri terra.StringValue `hcl:"main_jar_file_uri,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// JobsSparkJobLoggingConfig: optional
	LoggingConfig *JobsSparkJobLoggingConfig `hcl:"logging_config,block"`
}

type JobsSparkJobLoggingConfig struct {
	// DriverLogLevels: map of string, optional
	DriverLogLevels terra.MapValue[terra.StringValue] `hcl:"driver_log_levels,attr"`
}

type JobsSparkRJob struct {
	// ArchiveUris: list of string, optional
	ArchiveUris terra.ListValue[terra.StringValue] `hcl:"archive_uris,attr"`
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// FileUris: list of string, optional
	FileUris terra.ListValue[terra.StringValue] `hcl:"file_uris,attr"`
	// MainRFileUri: string, required
	MainRFileUri terra.StringValue `hcl:"main_r_file_uri,attr" validate:"required"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// JobsSparkRJobLoggingConfig: optional
	LoggingConfig *JobsSparkRJobLoggingConfig `hcl:"logging_config,block"`
}

type JobsSparkRJobLoggingConfig struct {
	// DriverLogLevels: map of string, optional
	DriverLogLevels terra.MapValue[terra.StringValue] `hcl:"driver_log_levels,attr"`
}

type JobsSparkSqlJob struct {
	// JarFileUris: list of string, optional
	JarFileUris terra.ListValue[terra.StringValue] `hcl:"jar_file_uris,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// QueryFileUri: string, optional
	QueryFileUri terra.StringValue `hcl:"query_file_uri,attr"`
	// ScriptVariables: map of string, optional
	ScriptVariables terra.MapValue[terra.StringValue] `hcl:"script_variables,attr"`
	// JobsSparkSqlJobLoggingConfig: optional
	LoggingConfig *JobsSparkSqlJobLoggingConfig `hcl:"logging_config,block"`
	// JobsSparkSqlJobQueryList: optional
	QueryList *JobsSparkSqlJobQueryList `hcl:"query_list,block"`
}

type JobsSparkSqlJobLoggingConfig struct {
	// DriverLogLevels: map of string, optional
	DriverLogLevels terra.MapValue[terra.StringValue] `hcl:"driver_log_levels,attr"`
}

type JobsSparkSqlJobQueryList struct {
	// Queries: list of string, required
	Queries terra.ListValue[terra.StringValue] `hcl:"queries,attr" validate:"required"`
}

type Parameters struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Fields: list of string, required
	Fields terra.ListValue[terra.StringValue] `hcl:"fields,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParametersValidation: optional
	Validation *ParametersValidation `hcl:"validation,block"`
}

type ParametersValidation struct {
	// ParametersValidationRegex: optional
	Regex *ParametersValidationRegex `hcl:"regex,block"`
	// ParametersValidationValues: optional
	Values *ParametersValidationValues `hcl:"values,block"`
}

type ParametersValidationRegex struct {
	// Regexes: list of string, required
	Regexes terra.ListValue[terra.StringValue] `hcl:"regexes,attr" validate:"required"`
}

type ParametersValidationValues struct {
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type Placement struct {
	// PlacementClusterSelector: optional
	ClusterSelector *PlacementClusterSelector `hcl:"cluster_selector,block"`
	// PlacementManagedCluster: optional
	ManagedCluster *PlacementManagedCluster `hcl:"managed_cluster,block"`
}

type PlacementClusterSelector struct {
	// ClusterLabels: map of string, required
	ClusterLabels terra.MapValue[terra.StringValue] `hcl:"cluster_labels,attr" validate:"required"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
}

type PlacementManagedCluster struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// PlacementManagedClusterConfig: required
	Config *PlacementManagedClusterConfig `hcl:"config,block" validate:"required"`
}

type PlacementManagedClusterConfig struct {
	// StagingBucket: string, optional
	StagingBucket terra.StringValue `hcl:"staging_bucket,attr"`
	// TempBucket: string, optional
	TempBucket terra.StringValue `hcl:"temp_bucket,attr"`
	// PlacementManagedClusterConfigAutoscalingConfig: optional
	AutoscalingConfig *PlacementManagedClusterConfigAutoscalingConfig `hcl:"autoscaling_config,block"`
	// PlacementManagedClusterConfigEncryptionConfig: optional
	EncryptionConfig *PlacementManagedClusterConfigEncryptionConfig `hcl:"encryption_config,block"`
	// PlacementManagedClusterConfigEndpointConfig: optional
	EndpointConfig *PlacementManagedClusterConfigEndpointConfig `hcl:"endpoint_config,block"`
	// PlacementManagedClusterConfigGceClusterConfig: optional
	GceClusterConfig *PlacementManagedClusterConfigGceClusterConfig `hcl:"gce_cluster_config,block"`
	// PlacementManagedClusterConfigInitializationActions: min=0
	InitializationActions []PlacementManagedClusterConfigInitializationActions `hcl:"initialization_actions,block" validate:"min=0"`
	// PlacementManagedClusterConfigLifecycleConfig: optional
	LifecycleConfig *PlacementManagedClusterConfigLifecycleConfig `hcl:"lifecycle_config,block"`
	// PlacementManagedClusterConfigMasterConfig: optional
	MasterConfig *PlacementManagedClusterConfigMasterConfig `hcl:"master_config,block"`
	// PlacementManagedClusterConfigSecondaryWorkerConfig: optional
	SecondaryWorkerConfig *PlacementManagedClusterConfigSecondaryWorkerConfig `hcl:"secondary_worker_config,block"`
	// PlacementManagedClusterConfigSecurityConfig: optional
	SecurityConfig *PlacementManagedClusterConfigSecurityConfig `hcl:"security_config,block"`
	// PlacementManagedClusterConfigSoftwareConfig: optional
	SoftwareConfig *PlacementManagedClusterConfigSoftwareConfig `hcl:"software_config,block"`
	// PlacementManagedClusterConfigWorkerConfig: optional
	WorkerConfig *PlacementManagedClusterConfigWorkerConfig `hcl:"worker_config,block"`
}

type PlacementManagedClusterConfigAutoscalingConfig struct {
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
}

type PlacementManagedClusterConfigEncryptionConfig struct {
	// GcePdKmsKeyName: string, optional
	GcePdKmsKeyName terra.StringValue `hcl:"gce_pd_kms_key_name,attr"`
}

type PlacementManagedClusterConfigEndpointConfig struct {
	// EnableHttpPortAccess: bool, optional
	EnableHttpPortAccess terra.BoolValue `hcl:"enable_http_port_access,attr"`
}

type PlacementManagedClusterConfigGceClusterConfig struct {
	// InternalIpOnly: bool, optional
	InternalIpOnly terra.BoolValue `hcl:"internal_ip_only,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// PrivateIpv6GoogleAccess: string, optional
	PrivateIpv6GoogleAccess terra.StringValue `hcl:"private_ipv6_google_access,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// ServiceAccountScopes: list of string, optional
	ServiceAccountScopes terra.ListValue[terra.StringValue] `hcl:"service_account_scopes,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// Tags: set of string, optional
	Tags terra.SetValue[terra.StringValue] `hcl:"tags,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// PlacementManagedCluster09F81Dcf: optional
	NodeGroupAffinity *PlacementManagedCluster09F81Dcf `hcl:"node_group_affinity,block"`
	// PlacementManagedCluster7939B187: optional
	ReservationAffinity *PlacementManagedCluster7939B187 `hcl:"reservation_affinity,block"`
	// PlacementManagedClusterD61Dedae: optional
	ShieldedInstanceConfig *PlacementManagedClusterD61Dedae `hcl:"shielded_instance_config,block"`
}

type PlacementManagedCluster09F81Dcf struct {
	// NodeGroup: string, required
	NodeGroup terra.StringValue `hcl:"node_group,attr" validate:"required"`
}

type PlacementManagedCluster7939B187 struct {
	// ConsumeReservationType: string, optional
	ConsumeReservationType terra.StringValue `hcl:"consume_reservation_type,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Values: list of string, optional
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr"`
}

type PlacementManagedClusterD61Dedae struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
	// EnableVtpm: bool, optional
	EnableVtpm terra.BoolValue `hcl:"enable_vtpm,attr"`
}

type PlacementManagedClusterConfigInitializationActions struct {
	// ExecutableFile: string, optional
	ExecutableFile terra.StringValue `hcl:"executable_file,attr"`
	// ExecutionTimeout: string, optional
	ExecutionTimeout terra.StringValue `hcl:"execution_timeout,attr"`
}

type PlacementManagedClusterConfigLifecycleConfig struct {
	// AutoDeleteTime: string, optional
	AutoDeleteTime terra.StringValue `hcl:"auto_delete_time,attr"`
	// AutoDeleteTtl: string, optional
	AutoDeleteTtl terra.StringValue `hcl:"auto_delete_ttl,attr"`
	// IdleDeleteTtl: string, optional
	IdleDeleteTtl terra.StringValue `hcl:"idle_delete_ttl,attr"`
}

type PlacementManagedClusterConfigMasterConfig struct {
	// Image: string, optional
	Image terra.StringValue `hcl:"image,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NumInstances: number, optional
	NumInstances terra.NumberValue `hcl:"num_instances,attr"`
	// Preemptibility: string, optional
	Preemptibility terra.StringValue `hcl:"preemptibility,attr"`
	// PlacementManagedClusterEf6Dc0A3: min=0
	Accelerators []PlacementManagedClusterEf6Dc0A3 `hcl:"accelerators,block" validate:"min=0"`
	// PlacementManagedCluster127Ead06: optional
	DiskConfig *PlacementManagedCluster127Ead06 `hcl:"disk_config,block"`
}

type PlacementManagedClusterEf6Dc0A3 struct {
	// AcceleratorCount: number, optional
	AcceleratorCount terra.NumberValue `hcl:"accelerator_count,attr"`
	// AcceleratorType: string, optional
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr"`
}

type PlacementManagedCluster127Ead06 struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// BootDiskType: string, optional
	BootDiskType terra.StringValue `hcl:"boot_disk_type,attr"`
	// NumLocalSsds: number, optional
	NumLocalSsds terra.NumberValue `hcl:"num_local_ssds,attr"`
}

type PlacementManagedClusterConfigSecondaryWorkerConfig struct {
	// Image: string, optional
	Image terra.StringValue `hcl:"image,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NumInstances: number, optional
	NumInstances terra.NumberValue `hcl:"num_instances,attr"`
	// Preemptibility: string, optional
	Preemptibility terra.StringValue `hcl:"preemptibility,attr"`
	// PlacementManagedCluster3E8Dc934: min=0
	Accelerators []PlacementManagedCluster3E8Dc934 `hcl:"accelerators,block" validate:"min=0"`
	// PlacementManagedCluster69B791A6: optional
	DiskConfig *PlacementManagedCluster69B791A6 `hcl:"disk_config,block"`
}

type PlacementManagedCluster3E8Dc934 struct {
	// AcceleratorCount: number, optional
	AcceleratorCount terra.NumberValue `hcl:"accelerator_count,attr"`
	// AcceleratorType: string, optional
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr"`
}

type PlacementManagedCluster69B791A6 struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// BootDiskType: string, optional
	BootDiskType terra.StringValue `hcl:"boot_disk_type,attr"`
	// NumLocalSsds: number, optional
	NumLocalSsds terra.NumberValue `hcl:"num_local_ssds,attr"`
}

type PlacementManagedClusterConfigSecurityConfig struct {
	// PlacementManagedCluster15A47D6D: optional
	KerberosConfig *PlacementManagedCluster15A47D6D `hcl:"kerberos_config,block"`
}

type PlacementManagedCluster15A47D6D struct {
	// CrossRealmTrustAdminServer: string, optional
	CrossRealmTrustAdminServer terra.StringValue `hcl:"cross_realm_trust_admin_server,attr"`
	// CrossRealmTrustKdc: string, optional
	CrossRealmTrustKdc terra.StringValue `hcl:"cross_realm_trust_kdc,attr"`
	// CrossRealmTrustRealm: string, optional
	CrossRealmTrustRealm terra.StringValue `hcl:"cross_realm_trust_realm,attr"`
	// CrossRealmTrustSharedPassword: string, optional
	CrossRealmTrustSharedPassword terra.StringValue `hcl:"cross_realm_trust_shared_password,attr"`
	// EnableKerberos: bool, optional
	EnableKerberos terra.BoolValue `hcl:"enable_kerberos,attr"`
	// KdcDbKey: string, optional
	KdcDbKey terra.StringValue `hcl:"kdc_db_key,attr"`
	// KeyPassword: string, optional
	KeyPassword terra.StringValue `hcl:"key_password,attr"`
	// Keystore: string, optional
	Keystore terra.StringValue `hcl:"keystore,attr"`
	// KeystorePassword: string, optional
	KeystorePassword terra.StringValue `hcl:"keystore_password,attr"`
	// KmsKey: string, optional
	KmsKey terra.StringValue `hcl:"kms_key,attr"`
	// Realm: string, optional
	Realm terra.StringValue `hcl:"realm,attr"`
	// RootPrincipalPassword: string, optional
	RootPrincipalPassword terra.StringValue `hcl:"root_principal_password,attr"`
	// TgtLifetimeHours: number, optional
	TgtLifetimeHours terra.NumberValue `hcl:"tgt_lifetime_hours,attr"`
	// Truststore: string, optional
	Truststore terra.StringValue `hcl:"truststore,attr"`
	// TruststorePassword: string, optional
	TruststorePassword terra.StringValue `hcl:"truststore_password,attr"`
}

type PlacementManagedClusterConfigSoftwareConfig struct {
	// ImageVersion: string, optional
	ImageVersion terra.StringValue `hcl:"image_version,attr"`
	// OptionalComponents: list of string, optional
	OptionalComponents terra.ListValue[terra.StringValue] `hcl:"optional_components,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type PlacementManagedClusterConfigWorkerConfig struct {
	// Image: string, optional
	Image terra.StringValue `hcl:"image,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// MinCpuPlatform: string, optional
	MinCpuPlatform terra.StringValue `hcl:"min_cpu_platform,attr"`
	// NumInstances: number, optional
	NumInstances terra.NumberValue `hcl:"num_instances,attr"`
	// Preemptibility: string, optional
	Preemptibility terra.StringValue `hcl:"preemptibility,attr"`
	// PlacementManagedCluster7F8062Ac: min=0
	Accelerators []PlacementManagedCluster7F8062Ac `hcl:"accelerators,block" validate:"min=0"`
	// PlacementManagedClusterDf2F2757: optional
	DiskConfig *PlacementManagedClusterDf2F2757 `hcl:"disk_config,block"`
}

type PlacementManagedCluster7F8062Ac struct {
	// AcceleratorCount: number, optional
	AcceleratorCount terra.NumberValue `hcl:"accelerator_count,attr"`
	// AcceleratorType: string, optional
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr"`
}

type PlacementManagedClusterDf2F2757 struct {
	// BootDiskSizeGb: number, optional
	BootDiskSizeGb terra.NumberValue `hcl:"boot_disk_size_gb,attr"`
	// BootDiskType: string, optional
	BootDiskType terra.StringValue `hcl:"boot_disk_type,attr"`
	// NumLocalSsds: number, optional
	NumLocalSsds terra.NumberValue `hcl:"num_local_ssds,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type JobsAttributes struct {
	ref terra.Reference
}

func (j JobsAttributes) InternalRef() (terra.Reference, error) {
	return j.ref, nil
}

func (j JobsAttributes) InternalWithRef(ref terra.Reference) JobsAttributes {
	return JobsAttributes{ref: ref}
}

func (j JobsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return j.ref.InternalTokens()
}

func (j JobsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](j.ref.Append("labels"))
}

func (j JobsAttributes) PrerequisiteStepIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](j.ref.Append("prerequisite_step_ids"))
}

func (j JobsAttributes) StepId() terra.StringValue {
	return terra.ReferenceAsString(j.ref.Append("step_id"))
}

func (j JobsAttributes) HadoopJob() terra.ListValue[JobsHadoopJobAttributes] {
	return terra.ReferenceAsList[JobsHadoopJobAttributes](j.ref.Append("hadoop_job"))
}

func (j JobsAttributes) HiveJob() terra.ListValue[JobsHiveJobAttributes] {
	return terra.ReferenceAsList[JobsHiveJobAttributes](j.ref.Append("hive_job"))
}

func (j JobsAttributes) PigJob() terra.ListValue[JobsPigJobAttributes] {
	return terra.ReferenceAsList[JobsPigJobAttributes](j.ref.Append("pig_job"))
}

func (j JobsAttributes) PrestoJob() terra.ListValue[JobsPrestoJobAttributes] {
	return terra.ReferenceAsList[JobsPrestoJobAttributes](j.ref.Append("presto_job"))
}

func (j JobsAttributes) PysparkJob() terra.ListValue[JobsPysparkJobAttributes] {
	return terra.ReferenceAsList[JobsPysparkJobAttributes](j.ref.Append("pyspark_job"))
}

func (j JobsAttributes) Scheduling() terra.ListValue[JobsSchedulingAttributes] {
	return terra.ReferenceAsList[JobsSchedulingAttributes](j.ref.Append("scheduling"))
}

func (j JobsAttributes) SparkJob() terra.ListValue[JobsSparkJobAttributes] {
	return terra.ReferenceAsList[JobsSparkJobAttributes](j.ref.Append("spark_job"))
}

func (j JobsAttributes) SparkRJob() terra.ListValue[JobsSparkRJobAttributes] {
	return terra.ReferenceAsList[JobsSparkRJobAttributes](j.ref.Append("spark_r_job"))
}

func (j JobsAttributes) SparkSqlJob() terra.ListValue[JobsSparkSqlJobAttributes] {
	return terra.ReferenceAsList[JobsSparkSqlJobAttributes](j.ref.Append("spark_sql_job"))
}

type JobsHadoopJobAttributes struct {
	ref terra.Reference
}

func (hj JobsHadoopJobAttributes) InternalRef() (terra.Reference, error) {
	return hj.ref, nil
}

func (hj JobsHadoopJobAttributes) InternalWithRef(ref terra.Reference) JobsHadoopJobAttributes {
	return JobsHadoopJobAttributes{ref: ref}
}

func (hj JobsHadoopJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hj.ref.InternalTokens()
}

func (hj JobsHadoopJobAttributes) ArchiveUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hj.ref.Append("archive_uris"))
}

func (hj JobsHadoopJobAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hj.ref.Append("args"))
}

func (hj JobsHadoopJobAttributes) FileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hj.ref.Append("file_uris"))
}

func (hj JobsHadoopJobAttributes) JarFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hj.ref.Append("jar_file_uris"))
}

func (hj JobsHadoopJobAttributes) MainClass() terra.StringValue {
	return terra.ReferenceAsString(hj.ref.Append("main_class"))
}

func (hj JobsHadoopJobAttributes) MainJarFileUri() terra.StringValue {
	return terra.ReferenceAsString(hj.ref.Append("main_jar_file_uri"))
}

func (hj JobsHadoopJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hj.ref.Append("properties"))
}

func (hj JobsHadoopJobAttributes) LoggingConfig() terra.ListValue[JobsHadoopJobLoggingConfigAttributes] {
	return terra.ReferenceAsList[JobsHadoopJobLoggingConfigAttributes](hj.ref.Append("logging_config"))
}

type JobsHadoopJobLoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc JobsHadoopJobLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc JobsHadoopJobLoggingConfigAttributes) InternalWithRef(ref terra.Reference) JobsHadoopJobLoggingConfigAttributes {
	return JobsHadoopJobLoggingConfigAttributes{ref: ref}
}

func (lc JobsHadoopJobLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc JobsHadoopJobLoggingConfigAttributes) DriverLogLevels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("driver_log_levels"))
}

type JobsHiveJobAttributes struct {
	ref terra.Reference
}

func (hj JobsHiveJobAttributes) InternalRef() (terra.Reference, error) {
	return hj.ref, nil
}

func (hj JobsHiveJobAttributes) InternalWithRef(ref terra.Reference) JobsHiveJobAttributes {
	return JobsHiveJobAttributes{ref: ref}
}

func (hj JobsHiveJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hj.ref.InternalTokens()
}

func (hj JobsHiveJobAttributes) ContinueOnFailure() terra.BoolValue {
	return terra.ReferenceAsBool(hj.ref.Append("continue_on_failure"))
}

func (hj JobsHiveJobAttributes) JarFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hj.ref.Append("jar_file_uris"))
}

func (hj JobsHiveJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hj.ref.Append("properties"))
}

func (hj JobsHiveJobAttributes) QueryFileUri() terra.StringValue {
	return terra.ReferenceAsString(hj.ref.Append("query_file_uri"))
}

func (hj JobsHiveJobAttributes) ScriptVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hj.ref.Append("script_variables"))
}

func (hj JobsHiveJobAttributes) QueryList() terra.ListValue[JobsHiveJobQueryListAttributes] {
	return terra.ReferenceAsList[JobsHiveJobQueryListAttributes](hj.ref.Append("query_list"))
}

type JobsHiveJobQueryListAttributes struct {
	ref terra.Reference
}

func (ql JobsHiveJobQueryListAttributes) InternalRef() (terra.Reference, error) {
	return ql.ref, nil
}

func (ql JobsHiveJobQueryListAttributes) InternalWithRef(ref terra.Reference) JobsHiveJobQueryListAttributes {
	return JobsHiveJobQueryListAttributes{ref: ref}
}

func (ql JobsHiveJobQueryListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ql.ref.InternalTokens()
}

func (ql JobsHiveJobQueryListAttributes) Queries() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ql.ref.Append("queries"))
}

type JobsPigJobAttributes struct {
	ref terra.Reference
}

func (pj JobsPigJobAttributes) InternalRef() (terra.Reference, error) {
	return pj.ref, nil
}

func (pj JobsPigJobAttributes) InternalWithRef(ref terra.Reference) JobsPigJobAttributes {
	return JobsPigJobAttributes{ref: ref}
}

func (pj JobsPigJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pj.ref.InternalTokens()
}

func (pj JobsPigJobAttributes) ContinueOnFailure() terra.BoolValue {
	return terra.ReferenceAsBool(pj.ref.Append("continue_on_failure"))
}

func (pj JobsPigJobAttributes) JarFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pj.ref.Append("jar_file_uris"))
}

func (pj JobsPigJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pj.ref.Append("properties"))
}

func (pj JobsPigJobAttributes) QueryFileUri() terra.StringValue {
	return terra.ReferenceAsString(pj.ref.Append("query_file_uri"))
}

func (pj JobsPigJobAttributes) ScriptVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pj.ref.Append("script_variables"))
}

func (pj JobsPigJobAttributes) LoggingConfig() terra.ListValue[JobsPigJobLoggingConfigAttributes] {
	return terra.ReferenceAsList[JobsPigJobLoggingConfigAttributes](pj.ref.Append("logging_config"))
}

func (pj JobsPigJobAttributes) QueryList() terra.ListValue[JobsPigJobQueryListAttributes] {
	return terra.ReferenceAsList[JobsPigJobQueryListAttributes](pj.ref.Append("query_list"))
}

type JobsPigJobLoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc JobsPigJobLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc JobsPigJobLoggingConfigAttributes) InternalWithRef(ref terra.Reference) JobsPigJobLoggingConfigAttributes {
	return JobsPigJobLoggingConfigAttributes{ref: ref}
}

func (lc JobsPigJobLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc JobsPigJobLoggingConfigAttributes) DriverLogLevels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("driver_log_levels"))
}

type JobsPigJobQueryListAttributes struct {
	ref terra.Reference
}

func (ql JobsPigJobQueryListAttributes) InternalRef() (terra.Reference, error) {
	return ql.ref, nil
}

func (ql JobsPigJobQueryListAttributes) InternalWithRef(ref terra.Reference) JobsPigJobQueryListAttributes {
	return JobsPigJobQueryListAttributes{ref: ref}
}

func (ql JobsPigJobQueryListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ql.ref.InternalTokens()
}

func (ql JobsPigJobQueryListAttributes) Queries() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ql.ref.Append("queries"))
}

type JobsPrestoJobAttributes struct {
	ref terra.Reference
}

func (pj JobsPrestoJobAttributes) InternalRef() (terra.Reference, error) {
	return pj.ref, nil
}

func (pj JobsPrestoJobAttributes) InternalWithRef(ref terra.Reference) JobsPrestoJobAttributes {
	return JobsPrestoJobAttributes{ref: ref}
}

func (pj JobsPrestoJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pj.ref.InternalTokens()
}

func (pj JobsPrestoJobAttributes) ClientTags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pj.ref.Append("client_tags"))
}

func (pj JobsPrestoJobAttributes) ContinueOnFailure() terra.BoolValue {
	return terra.ReferenceAsBool(pj.ref.Append("continue_on_failure"))
}

func (pj JobsPrestoJobAttributes) OutputFormat() terra.StringValue {
	return terra.ReferenceAsString(pj.ref.Append("output_format"))
}

func (pj JobsPrestoJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pj.ref.Append("properties"))
}

func (pj JobsPrestoJobAttributes) QueryFileUri() terra.StringValue {
	return terra.ReferenceAsString(pj.ref.Append("query_file_uri"))
}

func (pj JobsPrestoJobAttributes) LoggingConfig() terra.ListValue[JobsPrestoJobLoggingConfigAttributes] {
	return terra.ReferenceAsList[JobsPrestoJobLoggingConfigAttributes](pj.ref.Append("logging_config"))
}

func (pj JobsPrestoJobAttributes) QueryList() terra.ListValue[JobsPrestoJobQueryListAttributes] {
	return terra.ReferenceAsList[JobsPrestoJobQueryListAttributes](pj.ref.Append("query_list"))
}

type JobsPrestoJobLoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc JobsPrestoJobLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc JobsPrestoJobLoggingConfigAttributes) InternalWithRef(ref terra.Reference) JobsPrestoJobLoggingConfigAttributes {
	return JobsPrestoJobLoggingConfigAttributes{ref: ref}
}

func (lc JobsPrestoJobLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc JobsPrestoJobLoggingConfigAttributes) DriverLogLevels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("driver_log_levels"))
}

type JobsPrestoJobQueryListAttributes struct {
	ref terra.Reference
}

func (ql JobsPrestoJobQueryListAttributes) InternalRef() (terra.Reference, error) {
	return ql.ref, nil
}

func (ql JobsPrestoJobQueryListAttributes) InternalWithRef(ref terra.Reference) JobsPrestoJobQueryListAttributes {
	return JobsPrestoJobQueryListAttributes{ref: ref}
}

func (ql JobsPrestoJobQueryListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ql.ref.InternalTokens()
}

func (ql JobsPrestoJobQueryListAttributes) Queries() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ql.ref.Append("queries"))
}

type JobsPysparkJobAttributes struct {
	ref terra.Reference
}

func (pj JobsPysparkJobAttributes) InternalRef() (terra.Reference, error) {
	return pj.ref, nil
}

func (pj JobsPysparkJobAttributes) InternalWithRef(ref terra.Reference) JobsPysparkJobAttributes {
	return JobsPysparkJobAttributes{ref: ref}
}

func (pj JobsPysparkJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pj.ref.InternalTokens()
}

func (pj JobsPysparkJobAttributes) ArchiveUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pj.ref.Append("archive_uris"))
}

func (pj JobsPysparkJobAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pj.ref.Append("args"))
}

func (pj JobsPysparkJobAttributes) FileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pj.ref.Append("file_uris"))
}

func (pj JobsPysparkJobAttributes) JarFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pj.ref.Append("jar_file_uris"))
}

func (pj JobsPysparkJobAttributes) MainPythonFileUri() terra.StringValue {
	return terra.ReferenceAsString(pj.ref.Append("main_python_file_uri"))
}

func (pj JobsPysparkJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pj.ref.Append("properties"))
}

func (pj JobsPysparkJobAttributes) PythonFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pj.ref.Append("python_file_uris"))
}

func (pj JobsPysparkJobAttributes) LoggingConfig() terra.ListValue[JobsPysparkJobLoggingConfigAttributes] {
	return terra.ReferenceAsList[JobsPysparkJobLoggingConfigAttributes](pj.ref.Append("logging_config"))
}

type JobsPysparkJobLoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc JobsPysparkJobLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc JobsPysparkJobLoggingConfigAttributes) InternalWithRef(ref terra.Reference) JobsPysparkJobLoggingConfigAttributes {
	return JobsPysparkJobLoggingConfigAttributes{ref: ref}
}

func (lc JobsPysparkJobLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc JobsPysparkJobLoggingConfigAttributes) DriverLogLevels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("driver_log_levels"))
}

type JobsSchedulingAttributes struct {
	ref terra.Reference
}

func (s JobsSchedulingAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s JobsSchedulingAttributes) InternalWithRef(ref terra.Reference) JobsSchedulingAttributes {
	return JobsSchedulingAttributes{ref: ref}
}

func (s JobsSchedulingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s JobsSchedulingAttributes) MaxFailuresPerHour() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("max_failures_per_hour"))
}

func (s JobsSchedulingAttributes) MaxFailuresTotal() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("max_failures_total"))
}

type JobsSparkJobAttributes struct {
	ref terra.Reference
}

func (sj JobsSparkJobAttributes) InternalRef() (terra.Reference, error) {
	return sj.ref, nil
}

func (sj JobsSparkJobAttributes) InternalWithRef(ref terra.Reference) JobsSparkJobAttributes {
	return JobsSparkJobAttributes{ref: ref}
}

func (sj JobsSparkJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sj.ref.InternalTokens()
}

func (sj JobsSparkJobAttributes) ArchiveUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sj.ref.Append("archive_uris"))
}

func (sj JobsSparkJobAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sj.ref.Append("args"))
}

func (sj JobsSparkJobAttributes) FileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sj.ref.Append("file_uris"))
}

func (sj JobsSparkJobAttributes) JarFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sj.ref.Append("jar_file_uris"))
}

func (sj JobsSparkJobAttributes) MainClass() terra.StringValue {
	return terra.ReferenceAsString(sj.ref.Append("main_class"))
}

func (sj JobsSparkJobAttributes) MainJarFileUri() terra.StringValue {
	return terra.ReferenceAsString(sj.ref.Append("main_jar_file_uri"))
}

func (sj JobsSparkJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sj.ref.Append("properties"))
}

func (sj JobsSparkJobAttributes) LoggingConfig() terra.ListValue[JobsSparkJobLoggingConfigAttributes] {
	return terra.ReferenceAsList[JobsSparkJobLoggingConfigAttributes](sj.ref.Append("logging_config"))
}

type JobsSparkJobLoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc JobsSparkJobLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc JobsSparkJobLoggingConfigAttributes) InternalWithRef(ref terra.Reference) JobsSparkJobLoggingConfigAttributes {
	return JobsSparkJobLoggingConfigAttributes{ref: ref}
}

func (lc JobsSparkJobLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc JobsSparkJobLoggingConfigAttributes) DriverLogLevels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("driver_log_levels"))
}

type JobsSparkRJobAttributes struct {
	ref terra.Reference
}

func (srj JobsSparkRJobAttributes) InternalRef() (terra.Reference, error) {
	return srj.ref, nil
}

func (srj JobsSparkRJobAttributes) InternalWithRef(ref terra.Reference) JobsSparkRJobAttributes {
	return JobsSparkRJobAttributes{ref: ref}
}

func (srj JobsSparkRJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return srj.ref.InternalTokens()
}

func (srj JobsSparkRJobAttributes) ArchiveUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](srj.ref.Append("archive_uris"))
}

func (srj JobsSparkRJobAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](srj.ref.Append("args"))
}

func (srj JobsSparkRJobAttributes) FileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](srj.ref.Append("file_uris"))
}

func (srj JobsSparkRJobAttributes) MainRFileUri() terra.StringValue {
	return terra.ReferenceAsString(srj.ref.Append("main_r_file_uri"))
}

func (srj JobsSparkRJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](srj.ref.Append("properties"))
}

func (srj JobsSparkRJobAttributes) LoggingConfig() terra.ListValue[JobsSparkRJobLoggingConfigAttributes] {
	return terra.ReferenceAsList[JobsSparkRJobLoggingConfigAttributes](srj.ref.Append("logging_config"))
}

type JobsSparkRJobLoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc JobsSparkRJobLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc JobsSparkRJobLoggingConfigAttributes) InternalWithRef(ref terra.Reference) JobsSparkRJobLoggingConfigAttributes {
	return JobsSparkRJobLoggingConfigAttributes{ref: ref}
}

func (lc JobsSparkRJobLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc JobsSparkRJobLoggingConfigAttributes) DriverLogLevels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("driver_log_levels"))
}

type JobsSparkSqlJobAttributes struct {
	ref terra.Reference
}

func (ssj JobsSparkSqlJobAttributes) InternalRef() (terra.Reference, error) {
	return ssj.ref, nil
}

func (ssj JobsSparkSqlJobAttributes) InternalWithRef(ref terra.Reference) JobsSparkSqlJobAttributes {
	return JobsSparkSqlJobAttributes{ref: ref}
}

func (ssj JobsSparkSqlJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssj.ref.InternalTokens()
}

func (ssj JobsSparkSqlJobAttributes) JarFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ssj.ref.Append("jar_file_uris"))
}

func (ssj JobsSparkSqlJobAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ssj.ref.Append("properties"))
}

func (ssj JobsSparkSqlJobAttributes) QueryFileUri() terra.StringValue {
	return terra.ReferenceAsString(ssj.ref.Append("query_file_uri"))
}

func (ssj JobsSparkSqlJobAttributes) ScriptVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ssj.ref.Append("script_variables"))
}

func (ssj JobsSparkSqlJobAttributes) LoggingConfig() terra.ListValue[JobsSparkSqlJobLoggingConfigAttributes] {
	return terra.ReferenceAsList[JobsSparkSqlJobLoggingConfigAttributes](ssj.ref.Append("logging_config"))
}

func (ssj JobsSparkSqlJobAttributes) QueryList() terra.ListValue[JobsSparkSqlJobQueryListAttributes] {
	return terra.ReferenceAsList[JobsSparkSqlJobQueryListAttributes](ssj.ref.Append("query_list"))
}

type JobsSparkSqlJobLoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc JobsSparkSqlJobLoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc JobsSparkSqlJobLoggingConfigAttributes) InternalWithRef(ref terra.Reference) JobsSparkSqlJobLoggingConfigAttributes {
	return JobsSparkSqlJobLoggingConfigAttributes{ref: ref}
}

func (lc JobsSparkSqlJobLoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc JobsSparkSqlJobLoggingConfigAttributes) DriverLogLevels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("driver_log_levels"))
}

type JobsSparkSqlJobQueryListAttributes struct {
	ref terra.Reference
}

func (ql JobsSparkSqlJobQueryListAttributes) InternalRef() (terra.Reference, error) {
	return ql.ref, nil
}

func (ql JobsSparkSqlJobQueryListAttributes) InternalWithRef(ref terra.Reference) JobsSparkSqlJobQueryListAttributes {
	return JobsSparkSqlJobQueryListAttributes{ref: ref}
}

func (ql JobsSparkSqlJobQueryListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ql.ref.InternalTokens()
}

func (ql JobsSparkSqlJobQueryListAttributes) Queries() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ql.ref.Append("queries"))
}

type ParametersAttributes struct {
	ref terra.Reference
}

func (p ParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ParametersAttributes) InternalWithRef(ref terra.Reference) ParametersAttributes {
	return ParametersAttributes{ref: ref}
}

func (p ParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ParametersAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("description"))
}

func (p ParametersAttributes) Fields() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("fields"))
}

func (p ParametersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p ParametersAttributes) Validation() terra.ListValue[ParametersValidationAttributes] {
	return terra.ReferenceAsList[ParametersValidationAttributes](p.ref.Append("validation"))
}

type ParametersValidationAttributes struct {
	ref terra.Reference
}

func (v ParametersValidationAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ParametersValidationAttributes) InternalWithRef(ref terra.Reference) ParametersValidationAttributes {
	return ParametersValidationAttributes{ref: ref}
}

func (v ParametersValidationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ParametersValidationAttributes) Regex() terra.ListValue[ParametersValidationRegexAttributes] {
	return terra.ReferenceAsList[ParametersValidationRegexAttributes](v.ref.Append("regex"))
}

func (v ParametersValidationAttributes) Values() terra.ListValue[ParametersValidationValuesAttributes] {
	return terra.ReferenceAsList[ParametersValidationValuesAttributes](v.ref.Append("values"))
}

type ParametersValidationRegexAttributes struct {
	ref terra.Reference
}

func (r ParametersValidationRegexAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ParametersValidationRegexAttributes) InternalWithRef(ref terra.Reference) ParametersValidationRegexAttributes {
	return ParametersValidationRegexAttributes{ref: ref}
}

func (r ParametersValidationRegexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ParametersValidationRegexAttributes) Regexes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](r.ref.Append("regexes"))
}

type ParametersValidationValuesAttributes struct {
	ref terra.Reference
}

func (v ParametersValidationValuesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ParametersValidationValuesAttributes) InternalWithRef(ref terra.Reference) ParametersValidationValuesAttributes {
	return ParametersValidationValuesAttributes{ref: ref}
}

func (v ParametersValidationValuesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ParametersValidationValuesAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("values"))
}

type PlacementAttributes struct {
	ref terra.Reference
}

func (p PlacementAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PlacementAttributes) InternalWithRef(ref terra.Reference) PlacementAttributes {
	return PlacementAttributes{ref: ref}
}

func (p PlacementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PlacementAttributes) ClusterSelector() terra.ListValue[PlacementClusterSelectorAttributes] {
	return terra.ReferenceAsList[PlacementClusterSelectorAttributes](p.ref.Append("cluster_selector"))
}

func (p PlacementAttributes) ManagedCluster() terra.ListValue[PlacementManagedClusterAttributes] {
	return terra.ReferenceAsList[PlacementManagedClusterAttributes](p.ref.Append("managed_cluster"))
}

type PlacementClusterSelectorAttributes struct {
	ref terra.Reference
}

func (cs PlacementClusterSelectorAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs PlacementClusterSelectorAttributes) InternalWithRef(ref terra.Reference) PlacementClusterSelectorAttributes {
	return PlacementClusterSelectorAttributes{ref: ref}
}

func (cs PlacementClusterSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs PlacementClusterSelectorAttributes) ClusterLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cs.ref.Append("cluster_labels"))
}

func (cs PlacementClusterSelectorAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("zone"))
}

type PlacementManagedClusterAttributes struct {
	ref terra.Reference
}

func (mc PlacementManagedClusterAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc PlacementManagedClusterAttributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterAttributes {
	return PlacementManagedClusterAttributes{ref: ref}
}

func (mc PlacementManagedClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc PlacementManagedClusterAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("cluster_name"))
}

func (mc PlacementManagedClusterAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](mc.ref.Append("labels"))
}

func (mc PlacementManagedClusterAttributes) Config() terra.ListValue[PlacementManagedClusterConfigAttributes] {
	return terra.ReferenceAsList[PlacementManagedClusterConfigAttributes](mc.ref.Append("config"))
}

type PlacementManagedClusterConfigAttributes struct {
	ref terra.Reference
}

func (c PlacementManagedClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c PlacementManagedClusterConfigAttributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterConfigAttributes {
	return PlacementManagedClusterConfigAttributes{ref: ref}
}

func (c PlacementManagedClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c PlacementManagedClusterConfigAttributes) StagingBucket() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("staging_bucket"))
}

func (c PlacementManagedClusterConfigAttributes) TempBucket() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("temp_bucket"))
}

func (c PlacementManagedClusterConfigAttributes) AutoscalingConfig() terra.ListValue[PlacementManagedClusterConfigAutoscalingConfigAttributes] {
	return terra.ReferenceAsList[PlacementManagedClusterConfigAutoscalingConfigAttributes](c.ref.Append("autoscaling_config"))
}

func (c PlacementManagedClusterConfigAttributes) EncryptionConfig() terra.ListValue[PlacementManagedClusterConfigEncryptionConfigAttributes] {
	return terra.ReferenceAsList[PlacementManagedClusterConfigEncryptionConfigAttributes](c.ref.Append("encryption_config"))
}

func (c PlacementManagedClusterConfigAttributes) EndpointConfig() terra.ListValue[PlacementManagedClusterConfigEndpointConfigAttributes] {
	return terra.ReferenceAsList[PlacementManagedClusterConfigEndpointConfigAttributes](c.ref.Append("endpoint_config"))
}

func (c PlacementManagedClusterConfigAttributes) GceClusterConfig() terra.ListValue[PlacementManagedClusterConfigGceClusterConfigAttributes] {
	return terra.ReferenceAsList[PlacementManagedClusterConfigGceClusterConfigAttributes](c.ref.Append("gce_cluster_config"))
}

func (c PlacementManagedClusterConfigAttributes) InitializationActions() terra.ListValue[PlacementManagedClusterConfigInitializationActionsAttributes] {
	return terra.ReferenceAsList[PlacementManagedClusterConfigInitializationActionsAttributes](c.ref.Append("initialization_actions"))
}

func (c PlacementManagedClusterConfigAttributes) LifecycleConfig() terra.ListValue[PlacementManagedClusterConfigLifecycleConfigAttributes] {
	return terra.ReferenceAsList[PlacementManagedClusterConfigLifecycleConfigAttributes](c.ref.Append("lifecycle_config"))
}

func (c PlacementManagedClusterConfigAttributes) MasterConfig() terra.ListValue[PlacementManagedClusterConfigMasterConfigAttributes] {
	return terra.ReferenceAsList[PlacementManagedClusterConfigMasterConfigAttributes](c.ref.Append("master_config"))
}

func (c PlacementManagedClusterConfigAttributes) SecondaryWorkerConfig() terra.ListValue[PlacementManagedClusterConfigSecondaryWorkerConfigAttributes] {
	return terra.ReferenceAsList[PlacementManagedClusterConfigSecondaryWorkerConfigAttributes](c.ref.Append("secondary_worker_config"))
}

func (c PlacementManagedClusterConfigAttributes) SecurityConfig() terra.ListValue[PlacementManagedClusterConfigSecurityConfigAttributes] {
	return terra.ReferenceAsList[PlacementManagedClusterConfigSecurityConfigAttributes](c.ref.Append("security_config"))
}

func (c PlacementManagedClusterConfigAttributes) SoftwareConfig() terra.ListValue[PlacementManagedClusterConfigSoftwareConfigAttributes] {
	return terra.ReferenceAsList[PlacementManagedClusterConfigSoftwareConfigAttributes](c.ref.Append("software_config"))
}

func (c PlacementManagedClusterConfigAttributes) WorkerConfig() terra.ListValue[PlacementManagedClusterConfigWorkerConfigAttributes] {
	return terra.ReferenceAsList[PlacementManagedClusterConfigWorkerConfigAttributes](c.ref.Append("worker_config"))
}

type PlacementManagedClusterConfigAutoscalingConfigAttributes struct {
	ref terra.Reference
}

func (ac PlacementManagedClusterConfigAutoscalingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac PlacementManagedClusterConfigAutoscalingConfigAttributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterConfigAutoscalingConfigAttributes {
	return PlacementManagedClusterConfigAutoscalingConfigAttributes{ref: ref}
}

func (ac PlacementManagedClusterConfigAutoscalingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac PlacementManagedClusterConfigAutoscalingConfigAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("policy"))
}

type PlacementManagedClusterConfigEncryptionConfigAttributes struct {
	ref terra.Reference
}

func (ec PlacementManagedClusterConfigEncryptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec PlacementManagedClusterConfigEncryptionConfigAttributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterConfigEncryptionConfigAttributes {
	return PlacementManagedClusterConfigEncryptionConfigAttributes{ref: ref}
}

func (ec PlacementManagedClusterConfigEncryptionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec PlacementManagedClusterConfigEncryptionConfigAttributes) GcePdKmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("gce_pd_kms_key_name"))
}

type PlacementManagedClusterConfigEndpointConfigAttributes struct {
	ref terra.Reference
}

func (ec PlacementManagedClusterConfigEndpointConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec PlacementManagedClusterConfigEndpointConfigAttributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterConfigEndpointConfigAttributes {
	return PlacementManagedClusterConfigEndpointConfigAttributes{ref: ref}
}

func (ec PlacementManagedClusterConfigEndpointConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec PlacementManagedClusterConfigEndpointConfigAttributes) EnableHttpPortAccess() terra.BoolValue {
	return terra.ReferenceAsBool(ec.ref.Append("enable_http_port_access"))
}

func (ec PlacementManagedClusterConfigEndpointConfigAttributes) HttpPorts() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ec.ref.Append("http_ports"))
}

type PlacementManagedClusterConfigGceClusterConfigAttributes struct {
	ref terra.Reference
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return gcc.ref, nil
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterConfigGceClusterConfigAttributes {
	return PlacementManagedClusterConfigGceClusterConfigAttributes{ref: ref}
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gcc.ref.InternalTokens()
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) InternalIpOnly() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("internal_ip_only"))
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcc.ref.Append("metadata"))
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("network"))
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) PrivateIpv6GoogleAccess() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("private_ipv6_google_access"))
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("service_account"))
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) ServiceAccountScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcc.ref.Append("service_account_scopes"))
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("subnetwork"))
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) Tags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gcc.ref.Append("tags"))
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("zone"))
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) NodeGroupAffinity() terra.ListValue[PlacementManagedCluster09F81DcfAttributes] {
	return terra.ReferenceAsList[PlacementManagedCluster09F81DcfAttributes](gcc.ref.Append("node_group_affinity"))
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) ReservationAffinity() terra.ListValue[PlacementManagedCluster7939B187Attributes] {
	return terra.ReferenceAsList[PlacementManagedCluster7939B187Attributes](gcc.ref.Append("reservation_affinity"))
}

func (gcc PlacementManagedClusterConfigGceClusterConfigAttributes) ShieldedInstanceConfig() terra.ListValue[PlacementManagedClusterD61DedaeAttributes] {
	return terra.ReferenceAsList[PlacementManagedClusterD61DedaeAttributes](gcc.ref.Append("shielded_instance_config"))
}

type PlacementManagedCluster09F81DcfAttributes struct {
	ref terra.Reference
}

func (nga PlacementManagedCluster09F81DcfAttributes) InternalRef() (terra.Reference, error) {
	return nga.ref, nil
}

func (nga PlacementManagedCluster09F81DcfAttributes) InternalWithRef(ref terra.Reference) PlacementManagedCluster09F81DcfAttributes {
	return PlacementManagedCluster09F81DcfAttributes{ref: ref}
}

func (nga PlacementManagedCluster09F81DcfAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nga.ref.InternalTokens()
}

func (nga PlacementManagedCluster09F81DcfAttributes) NodeGroup() terra.StringValue {
	return terra.ReferenceAsString(nga.ref.Append("node_group"))
}

type PlacementManagedCluster7939B187Attributes struct {
	ref terra.Reference
}

func (ra PlacementManagedCluster7939B187Attributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra PlacementManagedCluster7939B187Attributes) InternalWithRef(ref terra.Reference) PlacementManagedCluster7939B187Attributes {
	return PlacementManagedCluster7939B187Attributes{ref: ref}
}

func (ra PlacementManagedCluster7939B187Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra PlacementManagedCluster7939B187Attributes) ConsumeReservationType() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("consume_reservation_type"))
}

func (ra PlacementManagedCluster7939B187Attributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("key"))
}

func (ra PlacementManagedCluster7939B187Attributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ra.ref.Append("values"))
}

type PlacementManagedClusterD61DedaeAttributes struct {
	ref terra.Reference
}

func (sic PlacementManagedClusterD61DedaeAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic PlacementManagedClusterD61DedaeAttributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterD61DedaeAttributes {
	return PlacementManagedClusterD61DedaeAttributes{ref: ref}
}

func (sic PlacementManagedClusterD61DedaeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic PlacementManagedClusterD61DedaeAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic PlacementManagedClusterD61DedaeAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

func (sic PlacementManagedClusterD61DedaeAttributes) EnableVtpm() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_vtpm"))
}

type PlacementManagedClusterConfigInitializationActionsAttributes struct {
	ref terra.Reference
}

func (ia PlacementManagedClusterConfigInitializationActionsAttributes) InternalRef() (terra.Reference, error) {
	return ia.ref, nil
}

func (ia PlacementManagedClusterConfigInitializationActionsAttributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterConfigInitializationActionsAttributes {
	return PlacementManagedClusterConfigInitializationActionsAttributes{ref: ref}
}

func (ia PlacementManagedClusterConfigInitializationActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ia.ref.InternalTokens()
}

func (ia PlacementManagedClusterConfigInitializationActionsAttributes) ExecutableFile() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("executable_file"))
}

func (ia PlacementManagedClusterConfigInitializationActionsAttributes) ExecutionTimeout() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("execution_timeout"))
}

type PlacementManagedClusterConfigLifecycleConfigAttributes struct {
	ref terra.Reference
}

func (lc PlacementManagedClusterConfigLifecycleConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc PlacementManagedClusterConfigLifecycleConfigAttributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterConfigLifecycleConfigAttributes {
	return PlacementManagedClusterConfigLifecycleConfigAttributes{ref: ref}
}

func (lc PlacementManagedClusterConfigLifecycleConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc PlacementManagedClusterConfigLifecycleConfigAttributes) AutoDeleteTime() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("auto_delete_time"))
}

func (lc PlacementManagedClusterConfigLifecycleConfigAttributes) AutoDeleteTtl() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("auto_delete_ttl"))
}

func (lc PlacementManagedClusterConfigLifecycleConfigAttributes) IdleDeleteTtl() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("idle_delete_ttl"))
}

func (lc PlacementManagedClusterConfigLifecycleConfigAttributes) IdleStartTime() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("idle_start_time"))
}

type PlacementManagedClusterConfigMasterConfigAttributes struct {
	ref terra.Reference
}

func (mc PlacementManagedClusterConfigMasterConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc PlacementManagedClusterConfigMasterConfigAttributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterConfigMasterConfigAttributes {
	return PlacementManagedClusterConfigMasterConfigAttributes{ref: ref}
}

func (mc PlacementManagedClusterConfigMasterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc PlacementManagedClusterConfigMasterConfigAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("image"))
}

func (mc PlacementManagedClusterConfigMasterConfigAttributes) InstanceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("instance_names"))
}

func (mc PlacementManagedClusterConfigMasterConfigAttributes) IsPreemptible() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("is_preemptible"))
}

func (mc PlacementManagedClusterConfigMasterConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("machine_type"))
}

func (mc PlacementManagedClusterConfigMasterConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("min_cpu_platform"))
}

func (mc PlacementManagedClusterConfigMasterConfigAttributes) NumInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("num_instances"))
}

func (mc PlacementManagedClusterConfigMasterConfigAttributes) Preemptibility() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("preemptibility"))
}

func (mc PlacementManagedClusterConfigMasterConfigAttributes) ManagedGroupConfig() terra.ListValue[PlacementManagedCluster5122D8E0Attributes] {
	return terra.ReferenceAsList[PlacementManagedCluster5122D8E0Attributes](mc.ref.Append("managed_group_config"))
}

func (mc PlacementManagedClusterConfigMasterConfigAttributes) Accelerators() terra.ListValue[PlacementManagedClusterEf6Dc0A3Attributes] {
	return terra.ReferenceAsList[PlacementManagedClusterEf6Dc0A3Attributes](mc.ref.Append("accelerators"))
}

func (mc PlacementManagedClusterConfigMasterConfigAttributes) DiskConfig() terra.ListValue[PlacementManagedCluster127Ead06Attributes] {
	return terra.ReferenceAsList[PlacementManagedCluster127Ead06Attributes](mc.ref.Append("disk_config"))
}

type PlacementManagedCluster5122D8E0Attributes struct {
	ref terra.Reference
}

func (mgc PlacementManagedCluster5122D8E0Attributes) InternalRef() (terra.Reference, error) {
	return mgc.ref, nil
}

func (mgc PlacementManagedCluster5122D8E0Attributes) InternalWithRef(ref terra.Reference) PlacementManagedCluster5122D8E0Attributes {
	return PlacementManagedCluster5122D8E0Attributes{ref: ref}
}

func (mgc PlacementManagedCluster5122D8E0Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return mgc.ref.InternalTokens()
}

func (mgc PlacementManagedCluster5122D8E0Attributes) InstanceGroupManagerName() terra.StringValue {
	return terra.ReferenceAsString(mgc.ref.Append("instance_group_manager_name"))
}

func (mgc PlacementManagedCluster5122D8E0Attributes) InstanceTemplateName() terra.StringValue {
	return terra.ReferenceAsString(mgc.ref.Append("instance_template_name"))
}

type PlacementManagedClusterEf6Dc0A3Attributes struct {
	ref terra.Reference
}

func (a PlacementManagedClusterEf6Dc0A3Attributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a PlacementManagedClusterEf6Dc0A3Attributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterEf6Dc0A3Attributes {
	return PlacementManagedClusterEf6Dc0A3Attributes{ref: ref}
}

func (a PlacementManagedClusterEf6Dc0A3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a PlacementManagedClusterEf6Dc0A3Attributes) AcceleratorCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("accelerator_count"))
}

func (a PlacementManagedClusterEf6Dc0A3Attributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("accelerator_type"))
}

type PlacementManagedCluster127Ead06Attributes struct {
	ref terra.Reference
}

func (dc PlacementManagedCluster127Ead06Attributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc PlacementManagedCluster127Ead06Attributes) InternalWithRef(ref terra.Reference) PlacementManagedCluster127Ead06Attributes {
	return PlacementManagedCluster127Ead06Attributes{ref: ref}
}

func (dc PlacementManagedCluster127Ead06Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc PlacementManagedCluster127Ead06Attributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("boot_disk_size_gb"))
}

func (dc PlacementManagedCluster127Ead06Attributes) BootDiskType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("boot_disk_type"))
}

func (dc PlacementManagedCluster127Ead06Attributes) NumLocalSsds() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("num_local_ssds"))
}

type PlacementManagedClusterConfigSecondaryWorkerConfigAttributes struct {
	ref terra.Reference
}

func (swc PlacementManagedClusterConfigSecondaryWorkerConfigAttributes) InternalRef() (terra.Reference, error) {
	return swc.ref, nil
}

func (swc PlacementManagedClusterConfigSecondaryWorkerConfigAttributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterConfigSecondaryWorkerConfigAttributes {
	return PlacementManagedClusterConfigSecondaryWorkerConfigAttributes{ref: ref}
}

func (swc PlacementManagedClusterConfigSecondaryWorkerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return swc.ref.InternalTokens()
}

func (swc PlacementManagedClusterConfigSecondaryWorkerConfigAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(swc.ref.Append("image"))
}

func (swc PlacementManagedClusterConfigSecondaryWorkerConfigAttributes) InstanceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](swc.ref.Append("instance_names"))
}

func (swc PlacementManagedClusterConfigSecondaryWorkerConfigAttributes) IsPreemptible() terra.BoolValue {
	return terra.ReferenceAsBool(swc.ref.Append("is_preemptible"))
}

func (swc PlacementManagedClusterConfigSecondaryWorkerConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(swc.ref.Append("machine_type"))
}

func (swc PlacementManagedClusterConfigSecondaryWorkerConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(swc.ref.Append("min_cpu_platform"))
}

func (swc PlacementManagedClusterConfigSecondaryWorkerConfigAttributes) NumInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(swc.ref.Append("num_instances"))
}

func (swc PlacementManagedClusterConfigSecondaryWorkerConfigAttributes) Preemptibility() terra.StringValue {
	return terra.ReferenceAsString(swc.ref.Append("preemptibility"))
}

func (swc PlacementManagedClusterConfigSecondaryWorkerConfigAttributes) ManagedGroupConfig() terra.ListValue[PlacementManagedCluster05Efb12EAttributes] {
	return terra.ReferenceAsList[PlacementManagedCluster05Efb12EAttributes](swc.ref.Append("managed_group_config"))
}

func (swc PlacementManagedClusterConfigSecondaryWorkerConfigAttributes) Accelerators() terra.ListValue[PlacementManagedCluster3E8Dc934Attributes] {
	return terra.ReferenceAsList[PlacementManagedCluster3E8Dc934Attributes](swc.ref.Append("accelerators"))
}

func (swc PlacementManagedClusterConfigSecondaryWorkerConfigAttributes) DiskConfig() terra.ListValue[PlacementManagedCluster69B791A6Attributes] {
	return terra.ReferenceAsList[PlacementManagedCluster69B791A6Attributes](swc.ref.Append("disk_config"))
}

type PlacementManagedCluster05Efb12EAttributes struct {
	ref terra.Reference
}

func (mgc PlacementManagedCluster05Efb12EAttributes) InternalRef() (terra.Reference, error) {
	return mgc.ref, nil
}

func (mgc PlacementManagedCluster05Efb12EAttributes) InternalWithRef(ref terra.Reference) PlacementManagedCluster05Efb12EAttributes {
	return PlacementManagedCluster05Efb12EAttributes{ref: ref}
}

func (mgc PlacementManagedCluster05Efb12EAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mgc.ref.InternalTokens()
}

func (mgc PlacementManagedCluster05Efb12EAttributes) InstanceGroupManagerName() terra.StringValue {
	return terra.ReferenceAsString(mgc.ref.Append("instance_group_manager_name"))
}

func (mgc PlacementManagedCluster05Efb12EAttributes) InstanceTemplateName() terra.StringValue {
	return terra.ReferenceAsString(mgc.ref.Append("instance_template_name"))
}

type PlacementManagedCluster3E8Dc934Attributes struct {
	ref terra.Reference
}

func (a PlacementManagedCluster3E8Dc934Attributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a PlacementManagedCluster3E8Dc934Attributes) InternalWithRef(ref terra.Reference) PlacementManagedCluster3E8Dc934Attributes {
	return PlacementManagedCluster3E8Dc934Attributes{ref: ref}
}

func (a PlacementManagedCluster3E8Dc934Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a PlacementManagedCluster3E8Dc934Attributes) AcceleratorCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("accelerator_count"))
}

func (a PlacementManagedCluster3E8Dc934Attributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("accelerator_type"))
}

type PlacementManagedCluster69B791A6Attributes struct {
	ref terra.Reference
}

func (dc PlacementManagedCluster69B791A6Attributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc PlacementManagedCluster69B791A6Attributes) InternalWithRef(ref terra.Reference) PlacementManagedCluster69B791A6Attributes {
	return PlacementManagedCluster69B791A6Attributes{ref: ref}
}

func (dc PlacementManagedCluster69B791A6Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc PlacementManagedCluster69B791A6Attributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("boot_disk_size_gb"))
}

func (dc PlacementManagedCluster69B791A6Attributes) BootDiskType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("boot_disk_type"))
}

func (dc PlacementManagedCluster69B791A6Attributes) NumLocalSsds() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("num_local_ssds"))
}

type PlacementManagedClusterConfigSecurityConfigAttributes struct {
	ref terra.Reference
}

func (sc PlacementManagedClusterConfigSecurityConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc PlacementManagedClusterConfigSecurityConfigAttributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterConfigSecurityConfigAttributes {
	return PlacementManagedClusterConfigSecurityConfigAttributes{ref: ref}
}

func (sc PlacementManagedClusterConfigSecurityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc PlacementManagedClusterConfigSecurityConfigAttributes) KerberosConfig() terra.ListValue[PlacementManagedCluster15A47D6DAttributes] {
	return terra.ReferenceAsList[PlacementManagedCluster15A47D6DAttributes](sc.ref.Append("kerberos_config"))
}

type PlacementManagedCluster15A47D6DAttributes struct {
	ref terra.Reference
}

func (kc PlacementManagedCluster15A47D6DAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc PlacementManagedCluster15A47D6DAttributes) InternalWithRef(ref terra.Reference) PlacementManagedCluster15A47D6DAttributes {
	return PlacementManagedCluster15A47D6DAttributes{ref: ref}
}

func (kc PlacementManagedCluster15A47D6DAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc PlacementManagedCluster15A47D6DAttributes) CrossRealmTrustAdminServer() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_admin_server"))
}

func (kc PlacementManagedCluster15A47D6DAttributes) CrossRealmTrustKdc() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_kdc"))
}

func (kc PlacementManagedCluster15A47D6DAttributes) CrossRealmTrustRealm() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_realm"))
}

func (kc PlacementManagedCluster15A47D6DAttributes) CrossRealmTrustSharedPassword() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cross_realm_trust_shared_password"))
}

func (kc PlacementManagedCluster15A47D6DAttributes) EnableKerberos() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("enable_kerberos"))
}

func (kc PlacementManagedCluster15A47D6DAttributes) KdcDbKey() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("kdc_db_key"))
}

func (kc PlacementManagedCluster15A47D6DAttributes) KeyPassword() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("key_password"))
}

func (kc PlacementManagedCluster15A47D6DAttributes) Keystore() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("keystore"))
}

func (kc PlacementManagedCluster15A47D6DAttributes) KeystorePassword() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("keystore_password"))
}

func (kc PlacementManagedCluster15A47D6DAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("kms_key"))
}

func (kc PlacementManagedCluster15A47D6DAttributes) Realm() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("realm"))
}

func (kc PlacementManagedCluster15A47D6DAttributes) RootPrincipalPassword() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("root_principal_password"))
}

func (kc PlacementManagedCluster15A47D6DAttributes) TgtLifetimeHours() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("tgt_lifetime_hours"))
}

func (kc PlacementManagedCluster15A47D6DAttributes) Truststore() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("truststore"))
}

func (kc PlacementManagedCluster15A47D6DAttributes) TruststorePassword() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("truststore_password"))
}

type PlacementManagedClusterConfigSoftwareConfigAttributes struct {
	ref terra.Reference
}

func (sc PlacementManagedClusterConfigSoftwareConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc PlacementManagedClusterConfigSoftwareConfigAttributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterConfigSoftwareConfigAttributes {
	return PlacementManagedClusterConfigSoftwareConfigAttributes{ref: ref}
}

func (sc PlacementManagedClusterConfigSoftwareConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc PlacementManagedClusterConfigSoftwareConfigAttributes) ImageVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("image_version"))
}

func (sc PlacementManagedClusterConfigSoftwareConfigAttributes) OptionalComponents() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sc.ref.Append("optional_components"))
}

func (sc PlacementManagedClusterConfigSoftwareConfigAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sc.ref.Append("properties"))
}

type PlacementManagedClusterConfigWorkerConfigAttributes struct {
	ref terra.Reference
}

func (wc PlacementManagedClusterConfigWorkerConfigAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc PlacementManagedClusterConfigWorkerConfigAttributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterConfigWorkerConfigAttributes {
	return PlacementManagedClusterConfigWorkerConfigAttributes{ref: ref}
}

func (wc PlacementManagedClusterConfigWorkerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc PlacementManagedClusterConfigWorkerConfigAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("image"))
}

func (wc PlacementManagedClusterConfigWorkerConfigAttributes) InstanceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wc.ref.Append("instance_names"))
}

func (wc PlacementManagedClusterConfigWorkerConfigAttributes) IsPreemptible() terra.BoolValue {
	return terra.ReferenceAsBool(wc.ref.Append("is_preemptible"))
}

func (wc PlacementManagedClusterConfigWorkerConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("machine_type"))
}

func (wc PlacementManagedClusterConfigWorkerConfigAttributes) MinCpuPlatform() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("min_cpu_platform"))
}

func (wc PlacementManagedClusterConfigWorkerConfigAttributes) NumInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(wc.ref.Append("num_instances"))
}

func (wc PlacementManagedClusterConfigWorkerConfigAttributes) Preemptibility() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("preemptibility"))
}

func (wc PlacementManagedClusterConfigWorkerConfigAttributes) ManagedGroupConfig() terra.ListValue[PlacementManagedCluster69525Ee5Attributes] {
	return terra.ReferenceAsList[PlacementManagedCluster69525Ee5Attributes](wc.ref.Append("managed_group_config"))
}

func (wc PlacementManagedClusterConfigWorkerConfigAttributes) Accelerators() terra.ListValue[PlacementManagedCluster7F8062AcAttributes] {
	return terra.ReferenceAsList[PlacementManagedCluster7F8062AcAttributes](wc.ref.Append("accelerators"))
}

func (wc PlacementManagedClusterConfigWorkerConfigAttributes) DiskConfig() terra.ListValue[PlacementManagedClusterDf2F2757Attributes] {
	return terra.ReferenceAsList[PlacementManagedClusterDf2F2757Attributes](wc.ref.Append("disk_config"))
}

type PlacementManagedCluster69525Ee5Attributes struct {
	ref terra.Reference
}

func (mgc PlacementManagedCluster69525Ee5Attributes) InternalRef() (terra.Reference, error) {
	return mgc.ref, nil
}

func (mgc PlacementManagedCluster69525Ee5Attributes) InternalWithRef(ref terra.Reference) PlacementManagedCluster69525Ee5Attributes {
	return PlacementManagedCluster69525Ee5Attributes{ref: ref}
}

func (mgc PlacementManagedCluster69525Ee5Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return mgc.ref.InternalTokens()
}

func (mgc PlacementManagedCluster69525Ee5Attributes) InstanceGroupManagerName() terra.StringValue {
	return terra.ReferenceAsString(mgc.ref.Append("instance_group_manager_name"))
}

func (mgc PlacementManagedCluster69525Ee5Attributes) InstanceTemplateName() terra.StringValue {
	return terra.ReferenceAsString(mgc.ref.Append("instance_template_name"))
}

type PlacementManagedCluster7F8062AcAttributes struct {
	ref terra.Reference
}

func (a PlacementManagedCluster7F8062AcAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a PlacementManagedCluster7F8062AcAttributes) InternalWithRef(ref terra.Reference) PlacementManagedCluster7F8062AcAttributes {
	return PlacementManagedCluster7F8062AcAttributes{ref: ref}
}

func (a PlacementManagedCluster7F8062AcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a PlacementManagedCluster7F8062AcAttributes) AcceleratorCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("accelerator_count"))
}

func (a PlacementManagedCluster7F8062AcAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("accelerator_type"))
}

type PlacementManagedClusterDf2F2757Attributes struct {
	ref terra.Reference
}

func (dc PlacementManagedClusterDf2F2757Attributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc PlacementManagedClusterDf2F2757Attributes) InternalWithRef(ref terra.Reference) PlacementManagedClusterDf2F2757Attributes {
	return PlacementManagedClusterDf2F2757Attributes{ref: ref}
}

func (dc PlacementManagedClusterDf2F2757Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc PlacementManagedClusterDf2F2757Attributes) BootDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("boot_disk_size_gb"))
}

func (dc PlacementManagedClusterDf2F2757Attributes) BootDiskType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("boot_disk_type"))
}

func (dc PlacementManagedClusterDf2F2757Attributes) NumLocalSsds() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("num_local_ssds"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type JobsState struct {
	Labels              map[string]string      `json:"labels"`
	PrerequisiteStepIds []string               `json:"prerequisite_step_ids"`
	StepId              string                 `json:"step_id"`
	HadoopJob           []JobsHadoopJobState   `json:"hadoop_job"`
	HiveJob             []JobsHiveJobState     `json:"hive_job"`
	PigJob              []JobsPigJobState      `json:"pig_job"`
	PrestoJob           []JobsPrestoJobState   `json:"presto_job"`
	PysparkJob          []JobsPysparkJobState  `json:"pyspark_job"`
	Scheduling          []JobsSchedulingState  `json:"scheduling"`
	SparkJob            []JobsSparkJobState    `json:"spark_job"`
	SparkRJob           []JobsSparkRJobState   `json:"spark_r_job"`
	SparkSqlJob         []JobsSparkSqlJobState `json:"spark_sql_job"`
}

type JobsHadoopJobState struct {
	ArchiveUris    []string                          `json:"archive_uris"`
	Args           []string                          `json:"args"`
	FileUris       []string                          `json:"file_uris"`
	JarFileUris    []string                          `json:"jar_file_uris"`
	MainClass      string                            `json:"main_class"`
	MainJarFileUri string                            `json:"main_jar_file_uri"`
	Properties     map[string]string                 `json:"properties"`
	LoggingConfig  []JobsHadoopJobLoggingConfigState `json:"logging_config"`
}

type JobsHadoopJobLoggingConfigState struct {
	DriverLogLevels map[string]string `json:"driver_log_levels"`
}

type JobsHiveJobState struct {
	ContinueOnFailure bool                        `json:"continue_on_failure"`
	JarFileUris       []string                    `json:"jar_file_uris"`
	Properties        map[string]string           `json:"properties"`
	QueryFileUri      string                      `json:"query_file_uri"`
	ScriptVariables   map[string]string           `json:"script_variables"`
	QueryList         []JobsHiveJobQueryListState `json:"query_list"`
}

type JobsHiveJobQueryListState struct {
	Queries []string `json:"queries"`
}

type JobsPigJobState struct {
	ContinueOnFailure bool                           `json:"continue_on_failure"`
	JarFileUris       []string                       `json:"jar_file_uris"`
	Properties        map[string]string              `json:"properties"`
	QueryFileUri      string                         `json:"query_file_uri"`
	ScriptVariables   map[string]string              `json:"script_variables"`
	LoggingConfig     []JobsPigJobLoggingConfigState `json:"logging_config"`
	QueryList         []JobsPigJobQueryListState     `json:"query_list"`
}

type JobsPigJobLoggingConfigState struct {
	DriverLogLevels map[string]string `json:"driver_log_levels"`
}

type JobsPigJobQueryListState struct {
	Queries []string `json:"queries"`
}

type JobsPrestoJobState struct {
	ClientTags        []string                          `json:"client_tags"`
	ContinueOnFailure bool                              `json:"continue_on_failure"`
	OutputFormat      string                            `json:"output_format"`
	Properties        map[string]string                 `json:"properties"`
	QueryFileUri      string                            `json:"query_file_uri"`
	LoggingConfig     []JobsPrestoJobLoggingConfigState `json:"logging_config"`
	QueryList         []JobsPrestoJobQueryListState     `json:"query_list"`
}

type JobsPrestoJobLoggingConfigState struct {
	DriverLogLevels map[string]string `json:"driver_log_levels"`
}

type JobsPrestoJobQueryListState struct {
	Queries []string `json:"queries"`
}

type JobsPysparkJobState struct {
	ArchiveUris       []string                           `json:"archive_uris"`
	Args              []string                           `json:"args"`
	FileUris          []string                           `json:"file_uris"`
	JarFileUris       []string                           `json:"jar_file_uris"`
	MainPythonFileUri string                             `json:"main_python_file_uri"`
	Properties        map[string]string                  `json:"properties"`
	PythonFileUris    []string                           `json:"python_file_uris"`
	LoggingConfig     []JobsPysparkJobLoggingConfigState `json:"logging_config"`
}

type JobsPysparkJobLoggingConfigState struct {
	DriverLogLevels map[string]string `json:"driver_log_levels"`
}

type JobsSchedulingState struct {
	MaxFailuresPerHour float64 `json:"max_failures_per_hour"`
	MaxFailuresTotal   float64 `json:"max_failures_total"`
}

type JobsSparkJobState struct {
	ArchiveUris    []string                         `json:"archive_uris"`
	Args           []string                         `json:"args"`
	FileUris       []string                         `json:"file_uris"`
	JarFileUris    []string                         `json:"jar_file_uris"`
	MainClass      string                           `json:"main_class"`
	MainJarFileUri string                           `json:"main_jar_file_uri"`
	Properties     map[string]string                `json:"properties"`
	LoggingConfig  []JobsSparkJobLoggingConfigState `json:"logging_config"`
}

type JobsSparkJobLoggingConfigState struct {
	DriverLogLevels map[string]string `json:"driver_log_levels"`
}

type JobsSparkRJobState struct {
	ArchiveUris   []string                          `json:"archive_uris"`
	Args          []string                          `json:"args"`
	FileUris      []string                          `json:"file_uris"`
	MainRFileUri  string                            `json:"main_r_file_uri"`
	Properties    map[string]string                 `json:"properties"`
	LoggingConfig []JobsSparkRJobLoggingConfigState `json:"logging_config"`
}

type JobsSparkRJobLoggingConfigState struct {
	DriverLogLevels map[string]string `json:"driver_log_levels"`
}

type JobsSparkSqlJobState struct {
	JarFileUris     []string                            `json:"jar_file_uris"`
	Properties      map[string]string                   `json:"properties"`
	QueryFileUri    string                              `json:"query_file_uri"`
	ScriptVariables map[string]string                   `json:"script_variables"`
	LoggingConfig   []JobsSparkSqlJobLoggingConfigState `json:"logging_config"`
	QueryList       []JobsSparkSqlJobQueryListState     `json:"query_list"`
}

type JobsSparkSqlJobLoggingConfigState struct {
	DriverLogLevels map[string]string `json:"driver_log_levels"`
}

type JobsSparkSqlJobQueryListState struct {
	Queries []string `json:"queries"`
}

type ParametersState struct {
	Description string                      `json:"description"`
	Fields      []string                    `json:"fields"`
	Name        string                      `json:"name"`
	Validation  []ParametersValidationState `json:"validation"`
}

type ParametersValidationState struct {
	Regex  []ParametersValidationRegexState  `json:"regex"`
	Values []ParametersValidationValuesState `json:"values"`
}

type ParametersValidationRegexState struct {
	Regexes []string `json:"regexes"`
}

type ParametersValidationValuesState struct {
	Values []string `json:"values"`
}

type PlacementState struct {
	ClusterSelector []PlacementClusterSelectorState `json:"cluster_selector"`
	ManagedCluster  []PlacementManagedClusterState  `json:"managed_cluster"`
}

type PlacementClusterSelectorState struct {
	ClusterLabels map[string]string `json:"cluster_labels"`
	Zone          string            `json:"zone"`
}

type PlacementManagedClusterState struct {
	ClusterName string                               `json:"cluster_name"`
	Labels      map[string]string                    `json:"labels"`
	Config      []PlacementManagedClusterConfigState `json:"config"`
}

type PlacementManagedClusterConfigState struct {
	StagingBucket         string                                                    `json:"staging_bucket"`
	TempBucket            string                                                    `json:"temp_bucket"`
	AutoscalingConfig     []PlacementManagedClusterConfigAutoscalingConfigState     `json:"autoscaling_config"`
	EncryptionConfig      []PlacementManagedClusterConfigEncryptionConfigState      `json:"encryption_config"`
	EndpointConfig        []PlacementManagedClusterConfigEndpointConfigState        `json:"endpoint_config"`
	GceClusterConfig      []PlacementManagedClusterConfigGceClusterConfigState      `json:"gce_cluster_config"`
	InitializationActions []PlacementManagedClusterConfigInitializationActionsState `json:"initialization_actions"`
	LifecycleConfig       []PlacementManagedClusterConfigLifecycleConfigState       `json:"lifecycle_config"`
	MasterConfig          []PlacementManagedClusterConfigMasterConfigState          `json:"master_config"`
	SecondaryWorkerConfig []PlacementManagedClusterConfigSecondaryWorkerConfigState `json:"secondary_worker_config"`
	SecurityConfig        []PlacementManagedClusterConfigSecurityConfigState        `json:"security_config"`
	SoftwareConfig        []PlacementManagedClusterConfigSoftwareConfigState        `json:"software_config"`
	WorkerConfig          []PlacementManagedClusterConfigWorkerConfigState          `json:"worker_config"`
}

type PlacementManagedClusterConfigAutoscalingConfigState struct {
	Policy string `json:"policy"`
}

type PlacementManagedClusterConfigEncryptionConfigState struct {
	GcePdKmsKeyName string `json:"gce_pd_kms_key_name"`
}

type PlacementManagedClusterConfigEndpointConfigState struct {
	EnableHttpPortAccess bool              `json:"enable_http_port_access"`
	HttpPorts            map[string]string `json:"http_ports"`
}

type PlacementManagedClusterConfigGceClusterConfigState struct {
	InternalIpOnly          bool                                   `json:"internal_ip_only"`
	Metadata                map[string]string                      `json:"metadata"`
	Network                 string                                 `json:"network"`
	PrivateIpv6GoogleAccess string                                 `json:"private_ipv6_google_access"`
	ServiceAccount          string                                 `json:"service_account"`
	ServiceAccountScopes    []string                               `json:"service_account_scopes"`
	Subnetwork              string                                 `json:"subnetwork"`
	Tags                    []string                               `json:"tags"`
	Zone                    string                                 `json:"zone"`
	NodeGroupAffinity       []PlacementManagedCluster09F81DcfState `json:"node_group_affinity"`
	ReservationAffinity     []PlacementManagedCluster7939B187State `json:"reservation_affinity"`
	ShieldedInstanceConfig  []PlacementManagedClusterD61DedaeState `json:"shielded_instance_config"`
}

type PlacementManagedCluster09F81DcfState struct {
	NodeGroup string `json:"node_group"`
}

type PlacementManagedCluster7939B187State struct {
	ConsumeReservationType string   `json:"consume_reservation_type"`
	Key                    string   `json:"key"`
	Values                 []string `json:"values"`
}

type PlacementManagedClusterD61DedaeState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
	EnableVtpm                bool `json:"enable_vtpm"`
}

type PlacementManagedClusterConfigInitializationActionsState struct {
	ExecutableFile   string `json:"executable_file"`
	ExecutionTimeout string `json:"execution_timeout"`
}

type PlacementManagedClusterConfigLifecycleConfigState struct {
	AutoDeleteTime string `json:"auto_delete_time"`
	AutoDeleteTtl  string `json:"auto_delete_ttl"`
	IdleDeleteTtl  string `json:"idle_delete_ttl"`
	IdleStartTime  string `json:"idle_start_time"`
}

type PlacementManagedClusterConfigMasterConfigState struct {
	Image              string                                 `json:"image"`
	InstanceNames      []string                               `json:"instance_names"`
	IsPreemptible      bool                                   `json:"is_preemptible"`
	MachineType        string                                 `json:"machine_type"`
	MinCpuPlatform     string                                 `json:"min_cpu_platform"`
	NumInstances       float64                                `json:"num_instances"`
	Preemptibility     string                                 `json:"preemptibility"`
	ManagedGroupConfig []PlacementManagedCluster5122D8E0State `json:"managed_group_config"`
	Accelerators       []PlacementManagedClusterEf6Dc0A3State `json:"accelerators"`
	DiskConfig         []PlacementManagedCluster127Ead06State `json:"disk_config"`
}

type PlacementManagedCluster5122D8E0State struct {
	InstanceGroupManagerName string `json:"instance_group_manager_name"`
	InstanceTemplateName     string `json:"instance_template_name"`
}

type PlacementManagedClusterEf6Dc0A3State struct {
	AcceleratorCount float64 `json:"accelerator_count"`
	AcceleratorType  string  `json:"accelerator_type"`
}

type PlacementManagedCluster127Ead06State struct {
	BootDiskSizeGb float64 `json:"boot_disk_size_gb"`
	BootDiskType   string  `json:"boot_disk_type"`
	NumLocalSsds   float64 `json:"num_local_ssds"`
}

type PlacementManagedClusterConfigSecondaryWorkerConfigState struct {
	Image              string                                 `json:"image"`
	InstanceNames      []string                               `json:"instance_names"`
	IsPreemptible      bool                                   `json:"is_preemptible"`
	MachineType        string                                 `json:"machine_type"`
	MinCpuPlatform     string                                 `json:"min_cpu_platform"`
	NumInstances       float64                                `json:"num_instances"`
	Preemptibility     string                                 `json:"preemptibility"`
	ManagedGroupConfig []PlacementManagedCluster05Efb12EState `json:"managed_group_config"`
	Accelerators       []PlacementManagedCluster3E8Dc934State `json:"accelerators"`
	DiskConfig         []PlacementManagedCluster69B791A6State `json:"disk_config"`
}

type PlacementManagedCluster05Efb12EState struct {
	InstanceGroupManagerName string `json:"instance_group_manager_name"`
	InstanceTemplateName     string `json:"instance_template_name"`
}

type PlacementManagedCluster3E8Dc934State struct {
	AcceleratorCount float64 `json:"accelerator_count"`
	AcceleratorType  string  `json:"accelerator_type"`
}

type PlacementManagedCluster69B791A6State struct {
	BootDiskSizeGb float64 `json:"boot_disk_size_gb"`
	BootDiskType   string  `json:"boot_disk_type"`
	NumLocalSsds   float64 `json:"num_local_ssds"`
}

type PlacementManagedClusterConfigSecurityConfigState struct {
	KerberosConfig []PlacementManagedCluster15A47D6DState `json:"kerberos_config"`
}

type PlacementManagedCluster15A47D6DState struct {
	CrossRealmTrustAdminServer    string  `json:"cross_realm_trust_admin_server"`
	CrossRealmTrustKdc            string  `json:"cross_realm_trust_kdc"`
	CrossRealmTrustRealm          string  `json:"cross_realm_trust_realm"`
	CrossRealmTrustSharedPassword string  `json:"cross_realm_trust_shared_password"`
	EnableKerberos                bool    `json:"enable_kerberos"`
	KdcDbKey                      string  `json:"kdc_db_key"`
	KeyPassword                   string  `json:"key_password"`
	Keystore                      string  `json:"keystore"`
	KeystorePassword              string  `json:"keystore_password"`
	KmsKey                        string  `json:"kms_key"`
	Realm                         string  `json:"realm"`
	RootPrincipalPassword         string  `json:"root_principal_password"`
	TgtLifetimeHours              float64 `json:"tgt_lifetime_hours"`
	Truststore                    string  `json:"truststore"`
	TruststorePassword            string  `json:"truststore_password"`
}

type PlacementManagedClusterConfigSoftwareConfigState struct {
	ImageVersion       string            `json:"image_version"`
	OptionalComponents []string          `json:"optional_components"`
	Properties         map[string]string `json:"properties"`
}

type PlacementManagedClusterConfigWorkerConfigState struct {
	Image              string                                 `json:"image"`
	InstanceNames      []string                               `json:"instance_names"`
	IsPreemptible      bool                                   `json:"is_preemptible"`
	MachineType        string                                 `json:"machine_type"`
	MinCpuPlatform     string                                 `json:"min_cpu_platform"`
	NumInstances       float64                                `json:"num_instances"`
	Preemptibility     string                                 `json:"preemptibility"`
	ManagedGroupConfig []PlacementManagedCluster69525Ee5State `json:"managed_group_config"`
	Accelerators       []PlacementManagedCluster7F8062AcState `json:"accelerators"`
	DiskConfig         []PlacementManagedClusterDf2F2757State `json:"disk_config"`
}

type PlacementManagedCluster69525Ee5State struct {
	InstanceGroupManagerName string `json:"instance_group_manager_name"`
	InstanceTemplateName     string `json:"instance_template_name"`
}

type PlacementManagedCluster7F8062AcState struct {
	AcceleratorCount float64 `json:"accelerator_count"`
	AcceleratorType  string  `json:"accelerator_type"`
}

type PlacementManagedClusterDf2F2757State struct {
	BootDiskSizeGb float64 `json:"boot_disk_size_gb"`
	BootDiskType   string  `json:"boot_disk_type"`
	NumLocalSsds   float64 `json:"num_local_ssds"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
