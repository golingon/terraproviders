// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataproc_workflow_template

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dataproc_workflow_template.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataprocWorkflowTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdwt *Resource) Type() string {
	return "google_dataproc_workflow_template"
}

// LocalName returns the local name for [Resource].
func (gdwt *Resource) LocalName() string {
	return gdwt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdwt *Resource) Configuration() interface{} {
	return gdwt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdwt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdwt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdwt *Resource) Dependencies() terra.Dependencies {
	return gdwt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdwt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdwt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdwt *Resource) Attributes() googleDataprocWorkflowTemplateAttributes {
	return googleDataprocWorkflowTemplateAttributes{ref: terra.ReferenceResource(gdwt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdwt *Resource) ImportState(state io.Reader) error {
	gdwt.state = &googleDataprocWorkflowTemplateState{}
	if err := json.NewDecoder(state).Decode(gdwt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdwt.Type(), gdwt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdwt *Resource) State() (*googleDataprocWorkflowTemplateState, bool) {
	return gdwt.state, gdwt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdwt *Resource) StateMust() *googleDataprocWorkflowTemplateState {
	if gdwt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdwt.Type(), gdwt.LocalName()))
	}
	return gdwt.state
}

// Args contains the configurations for google_dataproc_workflow_template.
type Args struct {
	// DagTimeout: string, optional
	DagTimeout terra.StringValue `hcl:"dag_timeout,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Version: number, optional
	Version terra.NumberValue `hcl:"version,attr"`
	// Jobs: min=1
	Jobs []Jobs `hcl:"jobs,block" validate:"min=1"`
	// Parameters: min=0
	Parameters []Parameters `hcl:"parameters,block" validate:"min=0"`
	// Placement: required
	Placement *Placement `hcl:"placement,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDataprocWorkflowTemplateAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_dataproc_workflow_template.
func (gdwt googleDataprocWorkflowTemplateAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gdwt.ref.Append("create_time"))
}

// DagTimeout returns a reference to field dag_timeout of google_dataproc_workflow_template.
func (gdwt googleDataprocWorkflowTemplateAttributes) DagTimeout() terra.StringValue {
	return terra.ReferenceAsString(gdwt.ref.Append("dag_timeout"))
}

// EffectiveLabels returns a reference to field effective_labels of google_dataproc_workflow_template.
func (gdwt googleDataprocWorkflowTemplateAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdwt.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_dataproc_workflow_template.
func (gdwt googleDataprocWorkflowTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdwt.ref.Append("id"))
}

// Labels returns a reference to field labels of google_dataproc_workflow_template.
func (gdwt googleDataprocWorkflowTemplateAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdwt.ref.Append("labels"))
}

// Location returns a reference to field location of google_dataproc_workflow_template.
func (gdwt googleDataprocWorkflowTemplateAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gdwt.ref.Append("location"))
}

// Name returns a reference to field name of google_dataproc_workflow_template.
func (gdwt googleDataprocWorkflowTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdwt.ref.Append("name"))
}

// Project returns a reference to field project of google_dataproc_workflow_template.
func (gdwt googleDataprocWorkflowTemplateAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdwt.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_dataproc_workflow_template.
func (gdwt googleDataprocWorkflowTemplateAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdwt.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_dataproc_workflow_template.
func (gdwt googleDataprocWorkflowTemplateAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gdwt.ref.Append("update_time"))
}

// Version returns a reference to field version of google_dataproc_workflow_template.
func (gdwt googleDataprocWorkflowTemplateAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(gdwt.ref.Append("version"))
}

func (gdwt googleDataprocWorkflowTemplateAttributes) Jobs() terra.ListValue[JobsAttributes] {
	return terra.ReferenceAsList[JobsAttributes](gdwt.ref.Append("jobs"))
}

func (gdwt googleDataprocWorkflowTemplateAttributes) Parameters() terra.ListValue[ParametersAttributes] {
	return terra.ReferenceAsList[ParametersAttributes](gdwt.ref.Append("parameters"))
}

func (gdwt googleDataprocWorkflowTemplateAttributes) Placement() terra.ListValue[PlacementAttributes] {
	return terra.ReferenceAsList[PlacementAttributes](gdwt.ref.Append("placement"))
}

func (gdwt googleDataprocWorkflowTemplateAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdwt.ref.Append("timeouts"))
}

type googleDataprocWorkflowTemplateState struct {
	CreateTime      string            `json:"create_time"`
	DagTimeout      string            `json:"dag_timeout"`
	EffectiveLabels map[string]string `json:"effective_labels"`
	Id              string            `json:"id"`
	Labels          map[string]string `json:"labels"`
	Location        string            `json:"location"`
	Name            string            `json:"name"`
	Project         string            `json:"project"`
	TerraformLabels map[string]string `json:"terraform_labels"`
	UpdateTime      string            `json:"update_time"`
	Version         float64           `json:"version"`
	Jobs            []JobsState       `json:"jobs"`
	Parameters      []ParametersState `json:"parameters"`
	Placement       []PlacementState  `json:"placement"`
	Timeouts        *TimeoutsState    `json:"timeouts"`
}
