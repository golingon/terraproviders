// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_project_iam_binding

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_project_iam_binding.
type Resource struct {
	Name      string
	Args      Args
	state     *googleProjectIamBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gpib *Resource) Type() string {
	return "google_project_iam_binding"
}

// LocalName returns the local name for [Resource].
func (gpib *Resource) LocalName() string {
	return gpib.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gpib *Resource) Configuration() interface{} {
	return gpib.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gpib *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gpib)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gpib *Resource) Dependencies() terra.Dependencies {
	return gpib.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gpib *Resource) LifecycleManagement() *terra.Lifecycle {
	return gpib.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gpib *Resource) Attributes() googleProjectIamBindingAttributes {
	return googleProjectIamBindingAttributes{ref: terra.ReferenceResource(gpib)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gpib *Resource) ImportState(state io.Reader) error {
	gpib.state = &googleProjectIamBindingState{}
	if err := json.NewDecoder(state).Decode(gpib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gpib.Type(), gpib.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gpib *Resource) State() (*googleProjectIamBindingState, bool) {
	return gpib.state, gpib.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gpib *Resource) StateMust() *googleProjectIamBindingState {
	if gpib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gpib.Type(), gpib.LocalName()))
	}
	return gpib.state
}

// Args contains the configurations for google_project_iam_binding.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *Condition `hcl:"condition,block"`
}

type googleProjectIamBindingAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_project_iam_binding.
func (gpib googleProjectIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gpib.ref.Append("etag"))
}

// Id returns a reference to field id of google_project_iam_binding.
func (gpib googleProjectIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gpib.ref.Append("id"))
}

// Members returns a reference to field members of google_project_iam_binding.
func (gpib googleProjectIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gpib.ref.Append("members"))
}

// Project returns a reference to field project of google_project_iam_binding.
func (gpib googleProjectIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gpib.ref.Append("project"))
}

// Role returns a reference to field role of google_project_iam_binding.
func (gpib googleProjectIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(gpib.ref.Append("role"))
}

func (gpib googleProjectIamBindingAttributes) Condition() terra.ListValue[ConditionAttributes] {
	return terra.ReferenceAsList[ConditionAttributes](gpib.ref.Append("condition"))
}

type googleProjectIamBindingState struct {
	Etag      string           `json:"etag"`
	Id        string           `json:"id"`
	Members   []string         `json:"members"`
	Project   string           `json:"project"`
	Role      string           `json:"role"`
	Condition []ConditionState `json:"condition"`
}
