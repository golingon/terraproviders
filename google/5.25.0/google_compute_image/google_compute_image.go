// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_image

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_image.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeImageState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gci *Resource) Type() string {
	return "google_compute_image"
}

// LocalName returns the local name for [Resource].
func (gci *Resource) LocalName() string {
	return gci.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gci *Resource) Configuration() interface{} {
	return gci.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gci *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gci)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gci *Resource) Dependencies() terra.Dependencies {
	return gci.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gci *Resource) LifecycleManagement() *terra.Lifecycle {
	return gci.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gci *Resource) Attributes() googleComputeImageAttributes {
	return googleComputeImageAttributes{ref: terra.ReferenceResource(gci)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gci *Resource) ImportState(state io.Reader) error {
	gci.state = &googleComputeImageState{}
	if err := json.NewDecoder(state).Decode(gci.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gci.Type(), gci.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gci *Resource) State() (*googleComputeImageState, bool) {
	return gci.state, gci.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gci *Resource) StateMust() *googleComputeImageState {
	if gci.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gci.Type(), gci.LocalName()))
	}
	return gci.state
}

// Args contains the configurations for google_compute_image.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// Family: string, optional
	Family terra.StringValue `hcl:"family,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Licenses: list of string, optional
	Licenses terra.ListValue[terra.StringValue] `hcl:"licenses,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SourceDisk: string, optional
	SourceDisk terra.StringValue `hcl:"source_disk,attr"`
	// SourceImage: string, optional
	SourceImage terra.StringValue `hcl:"source_image,attr"`
	// SourceSnapshot: string, optional
	SourceSnapshot terra.StringValue `hcl:"source_snapshot,attr"`
	// StorageLocations: list of string, optional
	StorageLocations terra.ListValue[terra.StringValue] `hcl:"storage_locations,attr"`
	// GuestOsFeatures: min=0
	GuestOsFeatures []GuestOsFeatures `hcl:"guest_os_features,block" validate:"min=0"`
	// ImageEncryptionKey: optional
	ImageEncryptionKey *ImageEncryptionKey `hcl:"image_encryption_key,block"`
	// RawDisk: optional
	RawDisk *RawDisk `hcl:"raw_disk,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeImageAttributes struct {
	ref terra.Reference
}

// ArchiveSizeBytes returns a reference to field archive_size_bytes of google_compute_image.
func (gci googleComputeImageAttributes) ArchiveSizeBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(gci.ref.Append("archive_size_bytes"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_image.
func (gci googleComputeImageAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gci.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_image.
func (gci googleComputeImageAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gci.ref.Append("description"))
}

// DiskSizeGb returns a reference to field disk_size_gb of google_compute_image.
func (gci googleComputeImageAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(gci.ref.Append("disk_size_gb"))
}

// EffectiveLabels returns a reference to field effective_labels of google_compute_image.
func (gci googleComputeImageAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gci.ref.Append("effective_labels"))
}

// Family returns a reference to field family of google_compute_image.
func (gci googleComputeImageAttributes) Family() terra.StringValue {
	return terra.ReferenceAsString(gci.ref.Append("family"))
}

// Id returns a reference to field id of google_compute_image.
func (gci googleComputeImageAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gci.ref.Append("id"))
}

// LabelFingerprint returns a reference to field label_fingerprint of google_compute_image.
func (gci googleComputeImageAttributes) LabelFingerprint() terra.StringValue {
	return terra.ReferenceAsString(gci.ref.Append("label_fingerprint"))
}

// Labels returns a reference to field labels of google_compute_image.
func (gci googleComputeImageAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gci.ref.Append("labels"))
}

// Licenses returns a reference to field licenses of google_compute_image.
func (gci googleComputeImageAttributes) Licenses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gci.ref.Append("licenses"))
}

// Name returns a reference to field name of google_compute_image.
func (gci googleComputeImageAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gci.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_image.
func (gci googleComputeImageAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gci.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_compute_image.
func (gci googleComputeImageAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gci.ref.Append("self_link"))
}

// SourceDisk returns a reference to field source_disk of google_compute_image.
func (gci googleComputeImageAttributes) SourceDisk() terra.StringValue {
	return terra.ReferenceAsString(gci.ref.Append("source_disk"))
}

// SourceImage returns a reference to field source_image of google_compute_image.
func (gci googleComputeImageAttributes) SourceImage() terra.StringValue {
	return terra.ReferenceAsString(gci.ref.Append("source_image"))
}

// SourceSnapshot returns a reference to field source_snapshot of google_compute_image.
func (gci googleComputeImageAttributes) SourceSnapshot() terra.StringValue {
	return terra.ReferenceAsString(gci.ref.Append("source_snapshot"))
}

// StorageLocations returns a reference to field storage_locations of google_compute_image.
func (gci googleComputeImageAttributes) StorageLocations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gci.ref.Append("storage_locations"))
}

// TerraformLabels returns a reference to field terraform_labels of google_compute_image.
func (gci googleComputeImageAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gci.ref.Append("terraform_labels"))
}

func (gci googleComputeImageAttributes) GuestOsFeatures() terra.SetValue[GuestOsFeaturesAttributes] {
	return terra.ReferenceAsSet[GuestOsFeaturesAttributes](gci.ref.Append("guest_os_features"))
}

func (gci googleComputeImageAttributes) ImageEncryptionKey() terra.ListValue[ImageEncryptionKeyAttributes] {
	return terra.ReferenceAsList[ImageEncryptionKeyAttributes](gci.ref.Append("image_encryption_key"))
}

func (gci googleComputeImageAttributes) RawDisk() terra.ListValue[RawDiskAttributes] {
	return terra.ReferenceAsList[RawDiskAttributes](gci.ref.Append("raw_disk"))
}

func (gci googleComputeImageAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gci.ref.Append("timeouts"))
}

type googleComputeImageState struct {
	ArchiveSizeBytes   float64                   `json:"archive_size_bytes"`
	CreationTimestamp  string                    `json:"creation_timestamp"`
	Description        string                    `json:"description"`
	DiskSizeGb         float64                   `json:"disk_size_gb"`
	EffectiveLabels    map[string]string         `json:"effective_labels"`
	Family             string                    `json:"family"`
	Id                 string                    `json:"id"`
	LabelFingerprint   string                    `json:"label_fingerprint"`
	Labels             map[string]string         `json:"labels"`
	Licenses           []string                  `json:"licenses"`
	Name               string                    `json:"name"`
	Project            string                    `json:"project"`
	SelfLink           string                    `json:"self_link"`
	SourceDisk         string                    `json:"source_disk"`
	SourceImage        string                    `json:"source_image"`
	SourceSnapshot     string                    `json:"source_snapshot"`
	StorageLocations   []string                  `json:"storage_locations"`
	TerraformLabels    map[string]string         `json:"terraform_labels"`
	GuestOsFeatures    []GuestOsFeaturesState    `json:"guest_os_features"`
	ImageEncryptionKey []ImageEncryptionKeyState `json:"image_encryption_key"`
	RawDisk            []RawDiskState            `json:"raw_disk"`
	Timeouts           *TimeoutsState            `json:"timeouts"`
}
