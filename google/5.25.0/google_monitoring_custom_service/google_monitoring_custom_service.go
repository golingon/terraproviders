// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_monitoring_custom_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_monitoring_custom_service.
type Resource struct {
	Name      string
	Args      Args
	state     *googleMonitoringCustomServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gmcs *Resource) Type() string {
	return "google_monitoring_custom_service"
}

// LocalName returns the local name for [Resource].
func (gmcs *Resource) LocalName() string {
	return gmcs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gmcs *Resource) Configuration() interface{} {
	return gmcs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gmcs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gmcs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gmcs *Resource) Dependencies() terra.Dependencies {
	return gmcs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gmcs *Resource) LifecycleManagement() *terra.Lifecycle {
	return gmcs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gmcs *Resource) Attributes() googleMonitoringCustomServiceAttributes {
	return googleMonitoringCustomServiceAttributes{ref: terra.ReferenceResource(gmcs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gmcs *Resource) ImportState(state io.Reader) error {
	gmcs.state = &googleMonitoringCustomServiceState{}
	if err := json.NewDecoder(state).Decode(gmcs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gmcs.Type(), gmcs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gmcs *Resource) State() (*googleMonitoringCustomServiceState, bool) {
	return gmcs.state, gmcs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gmcs *Resource) StateMust() *googleMonitoringCustomServiceState {
	if gmcs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gmcs.Type(), gmcs.LocalName()))
	}
	return gmcs.state
}

// Args contains the configurations for google_monitoring_custom_service.
type Args struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceId: string, optional
	ServiceId terra.StringValue `hcl:"service_id,attr"`
	// UserLabels: map of string, optional
	UserLabels terra.MapValue[terra.StringValue] `hcl:"user_labels,attr"`
	// Telemetry: optional
	Telemetry *Telemetry `hcl:"telemetry,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleMonitoringCustomServiceAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of google_monitoring_custom_service.
func (gmcs googleMonitoringCustomServiceAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gmcs.ref.Append("display_name"))
}

// Id returns a reference to field id of google_monitoring_custom_service.
func (gmcs googleMonitoringCustomServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gmcs.ref.Append("id"))
}

// Name returns a reference to field name of google_monitoring_custom_service.
func (gmcs googleMonitoringCustomServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gmcs.ref.Append("name"))
}

// Project returns a reference to field project of google_monitoring_custom_service.
func (gmcs googleMonitoringCustomServiceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gmcs.ref.Append("project"))
}

// ServiceId returns a reference to field service_id of google_monitoring_custom_service.
func (gmcs googleMonitoringCustomServiceAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceAsString(gmcs.ref.Append("service_id"))
}

// UserLabels returns a reference to field user_labels of google_monitoring_custom_service.
func (gmcs googleMonitoringCustomServiceAttributes) UserLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gmcs.ref.Append("user_labels"))
}

func (gmcs googleMonitoringCustomServiceAttributes) Telemetry() terra.ListValue[TelemetryAttributes] {
	return terra.ReferenceAsList[TelemetryAttributes](gmcs.ref.Append("telemetry"))
}

func (gmcs googleMonitoringCustomServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gmcs.ref.Append("timeouts"))
}

type googleMonitoringCustomServiceState struct {
	DisplayName string            `json:"display_name"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	Project     string            `json:"project"`
	ServiceId   string            `json:"service_id"`
	UserLabels  map[string]string `json:"user_labels"`
	Telemetry   []TelemetryState  `json:"telemetry"`
	Timeouts    *TimeoutsState    `json:"timeouts"`
}
