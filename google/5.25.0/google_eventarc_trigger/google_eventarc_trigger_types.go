// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_eventarc_trigger

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Destination struct {
	// Workflow: string, optional
	Workflow terra.StringValue `hcl:"workflow,attr"`
	// DestinationCloudRunService: optional
	CloudRunService *DestinationCloudRunService `hcl:"cloud_run_service,block"`
	// DestinationGke: optional
	Gke *DestinationGke `hcl:"gke,block"`
	// DestinationHttpEndpoint: optional
	HttpEndpoint *DestinationHttpEndpoint `hcl:"http_endpoint,block"`
	// DestinationNetworkConfig: optional
	NetworkConfig *DestinationNetworkConfig `hcl:"network_config,block"`
}

type DestinationCloudRunService struct {
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
}

type DestinationGke struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Namespace: string, required
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
}

type DestinationHttpEndpoint struct {
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type DestinationNetworkConfig struct {
	// NetworkAttachment: string, required
	NetworkAttachment terra.StringValue `hcl:"network_attachment,attr" validate:"required"`
}

type MatchingCriteria struct {
	// Attribute: string, required
	Attribute terra.StringValue `hcl:"attribute,attr" validate:"required"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Transport struct {
	// TransportPubsub: optional
	Pubsub *TransportPubsub `hcl:"pubsub,block"`
}

type TransportPubsub struct {
	// Topic: string, optional
	Topic terra.StringValue `hcl:"topic,attr"`
}

type DestinationAttributes struct {
	ref terra.Reference
}

func (d DestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DestinationAttributes) InternalWithRef(ref terra.Reference) DestinationAttributes {
	return DestinationAttributes{ref: ref}
}

func (d DestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DestinationAttributes) CloudFunction() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("cloud_function"))
}

func (d DestinationAttributes) Workflow() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("workflow"))
}

func (d DestinationAttributes) CloudRunService() terra.ListValue[DestinationCloudRunServiceAttributes] {
	return terra.ReferenceAsList[DestinationCloudRunServiceAttributes](d.ref.Append("cloud_run_service"))
}

func (d DestinationAttributes) Gke() terra.ListValue[DestinationGkeAttributes] {
	return terra.ReferenceAsList[DestinationGkeAttributes](d.ref.Append("gke"))
}

func (d DestinationAttributes) HttpEndpoint() terra.ListValue[DestinationHttpEndpointAttributes] {
	return terra.ReferenceAsList[DestinationHttpEndpointAttributes](d.ref.Append("http_endpoint"))
}

func (d DestinationAttributes) NetworkConfig() terra.ListValue[DestinationNetworkConfigAttributes] {
	return terra.ReferenceAsList[DestinationNetworkConfigAttributes](d.ref.Append("network_config"))
}

type DestinationCloudRunServiceAttributes struct {
	ref terra.Reference
}

func (crs DestinationCloudRunServiceAttributes) InternalRef() (terra.Reference, error) {
	return crs.ref, nil
}

func (crs DestinationCloudRunServiceAttributes) InternalWithRef(ref terra.Reference) DestinationCloudRunServiceAttributes {
	return DestinationCloudRunServiceAttributes{ref: ref}
}

func (crs DestinationCloudRunServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crs.ref.InternalTokens()
}

func (crs DestinationCloudRunServiceAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(crs.ref.Append("path"))
}

func (crs DestinationCloudRunServiceAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(crs.ref.Append("region"))
}

func (crs DestinationCloudRunServiceAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(crs.ref.Append("service"))
}

type DestinationGkeAttributes struct {
	ref terra.Reference
}

func (g DestinationGkeAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g DestinationGkeAttributes) InternalWithRef(ref terra.Reference) DestinationGkeAttributes {
	return DestinationGkeAttributes{ref: ref}
}

func (g DestinationGkeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g DestinationGkeAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("cluster"))
}

func (g DestinationGkeAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("location"))
}

func (g DestinationGkeAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("namespace"))
}

func (g DestinationGkeAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("path"))
}

func (g DestinationGkeAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("service"))
}

type DestinationHttpEndpointAttributes struct {
	ref terra.Reference
}

func (he DestinationHttpEndpointAttributes) InternalRef() (terra.Reference, error) {
	return he.ref, nil
}

func (he DestinationHttpEndpointAttributes) InternalWithRef(ref terra.Reference) DestinationHttpEndpointAttributes {
	return DestinationHttpEndpointAttributes{ref: ref}
}

func (he DestinationHttpEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return he.ref.InternalTokens()
}

func (he DestinationHttpEndpointAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(he.ref.Append("uri"))
}

type DestinationNetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc DestinationNetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc DestinationNetworkConfigAttributes) InternalWithRef(ref terra.Reference) DestinationNetworkConfigAttributes {
	return DestinationNetworkConfigAttributes{ref: ref}
}

func (nc DestinationNetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc DestinationNetworkConfigAttributes) NetworkAttachment() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("network_attachment"))
}

type MatchingCriteriaAttributes struct {
	ref terra.Reference
}

func (mc MatchingCriteriaAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MatchingCriteriaAttributes) InternalWithRef(ref terra.Reference) MatchingCriteriaAttributes {
	return MatchingCriteriaAttributes{ref: ref}
}

func (mc MatchingCriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MatchingCriteriaAttributes) Attribute() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("attribute"))
}

func (mc MatchingCriteriaAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("operator"))
}

func (mc MatchingCriteriaAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TransportAttributes struct {
	ref terra.Reference
}

func (t TransportAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TransportAttributes) InternalWithRef(ref terra.Reference) TransportAttributes {
	return TransportAttributes{ref: ref}
}

func (t TransportAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TransportAttributes) Pubsub() terra.ListValue[TransportPubsubAttributes] {
	return terra.ReferenceAsList[TransportPubsubAttributes](t.ref.Append("pubsub"))
}

type TransportPubsubAttributes struct {
	ref terra.Reference
}

func (p TransportPubsubAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p TransportPubsubAttributes) InternalWithRef(ref terra.Reference) TransportPubsubAttributes {
	return TransportPubsubAttributes{ref: ref}
}

func (p TransportPubsubAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p TransportPubsubAttributes) Subscription() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("subscription"))
}

func (p TransportPubsubAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("topic"))
}

type DestinationState struct {
	CloudFunction   string                            `json:"cloud_function"`
	Workflow        string                            `json:"workflow"`
	CloudRunService []DestinationCloudRunServiceState `json:"cloud_run_service"`
	Gke             []DestinationGkeState             `json:"gke"`
	HttpEndpoint    []DestinationHttpEndpointState    `json:"http_endpoint"`
	NetworkConfig   []DestinationNetworkConfigState   `json:"network_config"`
}

type DestinationCloudRunServiceState struct {
	Path    string `json:"path"`
	Region  string `json:"region"`
	Service string `json:"service"`
}

type DestinationGkeState struct {
	Cluster   string `json:"cluster"`
	Location  string `json:"location"`
	Namespace string `json:"namespace"`
	Path      string `json:"path"`
	Service   string `json:"service"`
}

type DestinationHttpEndpointState struct {
	Uri string `json:"uri"`
}

type DestinationNetworkConfigState struct {
	NetworkAttachment string `json:"network_attachment"`
}

type MatchingCriteriaState struct {
	Attribute string `json:"attribute"`
	Operator  string `json:"operator"`
	Value     string `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TransportState struct {
	Pubsub []TransportPubsubState `json:"pubsub"`
}

type TransportPubsubState struct {
	Subscription string `json:"subscription"`
	Topic        string `json:"topic"`
}
