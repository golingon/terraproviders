// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_vertex_ai_index

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_vertex_ai_index.
type Resource struct {
	Name      string
	Args      Args
	state     *googleVertexAiIndexState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gvai *Resource) Type() string {
	return "google_vertex_ai_index"
}

// LocalName returns the local name for [Resource].
func (gvai *Resource) LocalName() string {
	return gvai.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gvai *Resource) Configuration() interface{} {
	return gvai.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gvai *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gvai)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gvai *Resource) Dependencies() terra.Dependencies {
	return gvai.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gvai *Resource) LifecycleManagement() *terra.Lifecycle {
	return gvai.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gvai *Resource) Attributes() googleVertexAiIndexAttributes {
	return googleVertexAiIndexAttributes{ref: terra.ReferenceResource(gvai)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gvai *Resource) ImportState(state io.Reader) error {
	gvai.state = &googleVertexAiIndexState{}
	if err := json.NewDecoder(state).Decode(gvai.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gvai.Type(), gvai.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gvai *Resource) State() (*googleVertexAiIndexState, bool) {
	return gvai.state, gvai.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gvai *Resource) StateMust() *googleVertexAiIndexState {
	if gvai.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gvai.Type(), gvai.LocalName()))
	}
	return gvai.state
}

// Args contains the configurations for google_vertex_ai_index.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IndexUpdateMethod: string, optional
	IndexUpdateMethod terra.StringValue `hcl:"index_update_method,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Metadata: optional
	Metadata *Metadata `hcl:"metadata,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleVertexAiIndexAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_vertex_ai_index.
func (gvai googleVertexAiIndexAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gvai.ref.Append("create_time"))
}

// Description returns a reference to field description of google_vertex_ai_index.
func (gvai googleVertexAiIndexAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gvai.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_vertex_ai_index.
func (gvai googleVertexAiIndexAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gvai.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_vertex_ai_index.
func (gvai googleVertexAiIndexAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gvai.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_vertex_ai_index.
func (gvai googleVertexAiIndexAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gvai.ref.Append("etag"))
}

// Id returns a reference to field id of google_vertex_ai_index.
func (gvai googleVertexAiIndexAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gvai.ref.Append("id"))
}

// IndexUpdateMethod returns a reference to field index_update_method of google_vertex_ai_index.
func (gvai googleVertexAiIndexAttributes) IndexUpdateMethod() terra.StringValue {
	return terra.ReferenceAsString(gvai.ref.Append("index_update_method"))
}

// Labels returns a reference to field labels of google_vertex_ai_index.
func (gvai googleVertexAiIndexAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gvai.ref.Append("labels"))
}

// MetadataSchemaUri returns a reference to field metadata_schema_uri of google_vertex_ai_index.
func (gvai googleVertexAiIndexAttributes) MetadataSchemaUri() terra.StringValue {
	return terra.ReferenceAsString(gvai.ref.Append("metadata_schema_uri"))
}

// Name returns a reference to field name of google_vertex_ai_index.
func (gvai googleVertexAiIndexAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gvai.ref.Append("name"))
}

// Project returns a reference to field project of google_vertex_ai_index.
func (gvai googleVertexAiIndexAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gvai.ref.Append("project"))
}

// Region returns a reference to field region of google_vertex_ai_index.
func (gvai googleVertexAiIndexAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gvai.ref.Append("region"))
}

// TerraformLabels returns a reference to field terraform_labels of google_vertex_ai_index.
func (gvai googleVertexAiIndexAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gvai.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_vertex_ai_index.
func (gvai googleVertexAiIndexAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gvai.ref.Append("update_time"))
}

func (gvai googleVertexAiIndexAttributes) DeployedIndexes() terra.ListValue[DeployedIndexesAttributes] {
	return terra.ReferenceAsList[DeployedIndexesAttributes](gvai.ref.Append("deployed_indexes"))
}

func (gvai googleVertexAiIndexAttributes) IndexStats() terra.ListValue[IndexStatsAttributes] {
	return terra.ReferenceAsList[IndexStatsAttributes](gvai.ref.Append("index_stats"))
}

func (gvai googleVertexAiIndexAttributes) Metadata() terra.ListValue[MetadataAttributes] {
	return terra.ReferenceAsList[MetadataAttributes](gvai.ref.Append("metadata"))
}

func (gvai googleVertexAiIndexAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gvai.ref.Append("timeouts"))
}

type googleVertexAiIndexState struct {
	CreateTime        string                 `json:"create_time"`
	Description       string                 `json:"description"`
	DisplayName       string                 `json:"display_name"`
	EffectiveLabels   map[string]string      `json:"effective_labels"`
	Etag              string                 `json:"etag"`
	Id                string                 `json:"id"`
	IndexUpdateMethod string                 `json:"index_update_method"`
	Labels            map[string]string      `json:"labels"`
	MetadataSchemaUri string                 `json:"metadata_schema_uri"`
	Name              string                 `json:"name"`
	Project           string                 `json:"project"`
	Region            string                 `json:"region"`
	TerraformLabels   map[string]string      `json:"terraform_labels"`
	UpdateTime        string                 `json:"update_time"`
	DeployedIndexes   []DeployedIndexesState `json:"deployed_indexes"`
	IndexStats        []IndexStatsState      `json:"index_stats"`
	Metadata          []MetadataState        `json:"metadata"`
	Timeouts          *TimeoutsState         `json:"timeouts"`
}
