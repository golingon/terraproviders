// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_monitoring_slo

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_monitoring_slo.
type Resource struct {
	Name      string
	Args      Args
	state     *googleMonitoringSloState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gms *Resource) Type() string {
	return "google_monitoring_slo"
}

// LocalName returns the local name for [Resource].
func (gms *Resource) LocalName() string {
	return gms.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gms *Resource) Configuration() interface{} {
	return gms.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gms *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gms)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gms *Resource) Dependencies() terra.Dependencies {
	return gms.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gms *Resource) LifecycleManagement() *terra.Lifecycle {
	return gms.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gms *Resource) Attributes() googleMonitoringSloAttributes {
	return googleMonitoringSloAttributes{ref: terra.ReferenceResource(gms)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gms *Resource) ImportState(state io.Reader) error {
	gms.state = &googleMonitoringSloState{}
	if err := json.NewDecoder(state).Decode(gms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gms.Type(), gms.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gms *Resource) State() (*googleMonitoringSloState, bool) {
	return gms.state, gms.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gms *Resource) StateMust() *googleMonitoringSloState {
	if gms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gms.Type(), gms.LocalName()))
	}
	return gms.state
}

// Args contains the configurations for google_monitoring_slo.
type Args struct {
	// CalendarPeriod: string, optional
	CalendarPeriod terra.StringValue `hcl:"calendar_period,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Goal: number, required
	Goal terra.NumberValue `hcl:"goal,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RollingPeriodDays: number, optional
	RollingPeriodDays terra.NumberValue `hcl:"rolling_period_days,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// SloId: string, optional
	SloId terra.StringValue `hcl:"slo_id,attr"`
	// UserLabels: map of string, optional
	UserLabels terra.MapValue[terra.StringValue] `hcl:"user_labels,attr"`
	// BasicSli: optional
	BasicSli *BasicSli `hcl:"basic_sli,block"`
	// RequestBasedSli: optional
	RequestBasedSli *RequestBasedSli `hcl:"request_based_sli,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// WindowsBasedSli: optional
	WindowsBasedSli *WindowsBasedSli `hcl:"windows_based_sli,block"`
}

type googleMonitoringSloAttributes struct {
	ref terra.Reference
}

// CalendarPeriod returns a reference to field calendar_period of google_monitoring_slo.
func (gms googleMonitoringSloAttributes) CalendarPeriod() terra.StringValue {
	return terra.ReferenceAsString(gms.ref.Append("calendar_period"))
}

// DisplayName returns a reference to field display_name of google_monitoring_slo.
func (gms googleMonitoringSloAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gms.ref.Append("display_name"))
}

// Goal returns a reference to field goal of google_monitoring_slo.
func (gms googleMonitoringSloAttributes) Goal() terra.NumberValue {
	return terra.ReferenceAsNumber(gms.ref.Append("goal"))
}

// Id returns a reference to field id of google_monitoring_slo.
func (gms googleMonitoringSloAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gms.ref.Append("id"))
}

// Name returns a reference to field name of google_monitoring_slo.
func (gms googleMonitoringSloAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gms.ref.Append("name"))
}

// Project returns a reference to field project of google_monitoring_slo.
func (gms googleMonitoringSloAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gms.ref.Append("project"))
}

// RollingPeriodDays returns a reference to field rolling_period_days of google_monitoring_slo.
func (gms googleMonitoringSloAttributes) RollingPeriodDays() terra.NumberValue {
	return terra.ReferenceAsNumber(gms.ref.Append("rolling_period_days"))
}

// Service returns a reference to field service of google_monitoring_slo.
func (gms googleMonitoringSloAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(gms.ref.Append("service"))
}

// SloId returns a reference to field slo_id of google_monitoring_slo.
func (gms googleMonitoringSloAttributes) SloId() terra.StringValue {
	return terra.ReferenceAsString(gms.ref.Append("slo_id"))
}

// UserLabels returns a reference to field user_labels of google_monitoring_slo.
func (gms googleMonitoringSloAttributes) UserLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gms.ref.Append("user_labels"))
}

func (gms googleMonitoringSloAttributes) BasicSli() terra.ListValue[BasicSliAttributes] {
	return terra.ReferenceAsList[BasicSliAttributes](gms.ref.Append("basic_sli"))
}

func (gms googleMonitoringSloAttributes) RequestBasedSli() terra.ListValue[RequestBasedSliAttributes] {
	return terra.ReferenceAsList[RequestBasedSliAttributes](gms.ref.Append("request_based_sli"))
}

func (gms googleMonitoringSloAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gms.ref.Append("timeouts"))
}

func (gms googleMonitoringSloAttributes) WindowsBasedSli() terra.ListValue[WindowsBasedSliAttributes] {
	return terra.ReferenceAsList[WindowsBasedSliAttributes](gms.ref.Append("windows_based_sli"))
}

type googleMonitoringSloState struct {
	CalendarPeriod    string                 `json:"calendar_period"`
	DisplayName       string                 `json:"display_name"`
	Goal              float64                `json:"goal"`
	Id                string                 `json:"id"`
	Name              string                 `json:"name"`
	Project           string                 `json:"project"`
	RollingPeriodDays float64                `json:"rolling_period_days"`
	Service           string                 `json:"service"`
	SloId             string                 `json:"slo_id"`
	UserLabels        map[string]string      `json:"user_labels"`
	BasicSli          []BasicSliState        `json:"basic_sli"`
	RequestBasedSli   []RequestBasedSliState `json:"request_based_sli"`
	Timeouts          *TimeoutsState         `json:"timeouts"`
	WindowsBasedSli   []WindowsBasedSliState `json:"windows_based_sli"`
}
