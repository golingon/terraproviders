// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_container_azure_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Authorization struct {
	// AuthorizationAdminGroups: min=0
	AdminGroups []AuthorizationAdminGroups `hcl:"admin_groups,block" validate:"min=0"`
	// AuthorizationAdminUsers: min=1
	AdminUsers []AuthorizationAdminUsers `hcl:"admin_users,block" validate:"min=1"`
}

type AuthorizationAdminGroups struct {
	// Group: string, required
	Group terra.StringValue `hcl:"group,attr" validate:"required"`
}

type AuthorizationAdminUsers struct {
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type AzureServicesAuthentication struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
}

type ControlPlane struct {
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// VmSize: string, optional
	VmSize terra.StringValue `hcl:"vm_size,attr"`
	// ControlPlaneDatabaseEncryption: optional
	DatabaseEncryption *ControlPlaneDatabaseEncryption `hcl:"database_encryption,block"`
	// ControlPlaneMainVolume: optional
	MainVolume *ControlPlaneMainVolume `hcl:"main_volume,block"`
	// ControlPlaneProxyConfig: optional
	ProxyConfig *ControlPlaneProxyConfig `hcl:"proxy_config,block"`
	// ControlPlaneReplicaPlacements: min=0
	ReplicaPlacements []ControlPlaneReplicaPlacements `hcl:"replica_placements,block" validate:"min=0"`
	// ControlPlaneRootVolume: optional
	RootVolume *ControlPlaneRootVolume `hcl:"root_volume,block"`
	// ControlPlaneSshConfig: required
	SshConfig *ControlPlaneSshConfig `hcl:"ssh_config,block" validate:"required"`
}

type ControlPlaneDatabaseEncryption struct {
	// KeyId: string, required
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
}

type ControlPlaneMainVolume struct {
	// SizeGib: number, optional
	SizeGib terra.NumberValue `hcl:"size_gib,attr"`
}

type ControlPlaneProxyConfig struct {
	// ResourceGroupId: string, required
	ResourceGroupId terra.StringValue `hcl:"resource_group_id,attr" validate:"required"`
	// SecretId: string, required
	SecretId terra.StringValue `hcl:"secret_id,attr" validate:"required"`
}

type ControlPlaneReplicaPlacements struct {
	// AzureAvailabilityZone: string, required
	AzureAvailabilityZone terra.StringValue `hcl:"azure_availability_zone,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
}

type ControlPlaneRootVolume struct {
	// SizeGib: number, optional
	SizeGib terra.NumberValue `hcl:"size_gib,attr"`
}

type ControlPlaneSshConfig struct {
	// AuthorizedKey: string, required
	AuthorizedKey terra.StringValue `hcl:"authorized_key,attr" validate:"required"`
}

type Fleet struct {
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}

type Networking struct {
	// PodAddressCidrBlocks: list of string, required
	PodAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"pod_address_cidr_blocks,attr" validate:"required"`
	// ServiceAddressCidrBlocks: list of string, required
	ServiceAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"service_address_cidr_blocks,attr" validate:"required"`
	// VirtualNetworkId: string, required
	VirtualNetworkId terra.StringValue `hcl:"virtual_network_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type WorkloadIdentityConfigAttributes struct {
	ref terra.Reference
}

func (wic WorkloadIdentityConfigAttributes) InternalRef() (terra.Reference, error) {
	return wic.ref, nil
}

func (wic WorkloadIdentityConfigAttributes) InternalWithRef(ref terra.Reference) WorkloadIdentityConfigAttributes {
	return WorkloadIdentityConfigAttributes{ref: ref}
}

func (wic WorkloadIdentityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wic.ref.InternalTokens()
}

func (wic WorkloadIdentityConfigAttributes) IdentityProvider() terra.StringValue {
	return terra.ReferenceAsString(wic.ref.Append("identity_provider"))
}

func (wic WorkloadIdentityConfigAttributes) IssuerUri() terra.StringValue {
	return terra.ReferenceAsString(wic.ref.Append("issuer_uri"))
}

func (wic WorkloadIdentityConfigAttributes) WorkloadPool() terra.StringValue {
	return terra.ReferenceAsString(wic.ref.Append("workload_pool"))
}

type AuthorizationAttributes struct {
	ref terra.Reference
}

func (a AuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthorizationAttributes) InternalWithRef(ref terra.Reference) AuthorizationAttributes {
	return AuthorizationAttributes{ref: ref}
}

func (a AuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthorizationAttributes) AdminGroups() terra.ListValue[AuthorizationAdminGroupsAttributes] {
	return terra.ReferenceAsList[AuthorizationAdminGroupsAttributes](a.ref.Append("admin_groups"))
}

func (a AuthorizationAttributes) AdminUsers() terra.ListValue[AuthorizationAdminUsersAttributes] {
	return terra.ReferenceAsList[AuthorizationAdminUsersAttributes](a.ref.Append("admin_users"))
}

type AuthorizationAdminGroupsAttributes struct {
	ref terra.Reference
}

func (ag AuthorizationAdminGroupsAttributes) InternalRef() (terra.Reference, error) {
	return ag.ref, nil
}

func (ag AuthorizationAdminGroupsAttributes) InternalWithRef(ref terra.Reference) AuthorizationAdminGroupsAttributes {
	return AuthorizationAdminGroupsAttributes{ref: ref}
}

func (ag AuthorizationAdminGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ag.ref.InternalTokens()
}

func (ag AuthorizationAdminGroupsAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("group"))
}

type AuthorizationAdminUsersAttributes struct {
	ref terra.Reference
}

func (au AuthorizationAdminUsersAttributes) InternalRef() (terra.Reference, error) {
	return au.ref, nil
}

func (au AuthorizationAdminUsersAttributes) InternalWithRef(ref terra.Reference) AuthorizationAdminUsersAttributes {
	return AuthorizationAdminUsersAttributes{ref: ref}
}

func (au AuthorizationAdminUsersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return au.ref.InternalTokens()
}

func (au AuthorizationAdminUsersAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("username"))
}

type AzureServicesAuthenticationAttributes struct {
	ref terra.Reference
}

func (asa AzureServicesAuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return asa.ref, nil
}

func (asa AzureServicesAuthenticationAttributes) InternalWithRef(ref terra.Reference) AzureServicesAuthenticationAttributes {
	return AzureServicesAuthenticationAttributes{ref: ref}
}

func (asa AzureServicesAuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asa.ref.InternalTokens()
}

func (asa AzureServicesAuthenticationAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("application_id"))
}

func (asa AzureServicesAuthenticationAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("tenant_id"))
}

type ControlPlaneAttributes struct {
	ref terra.Reference
}

func (cp ControlPlaneAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp ControlPlaneAttributes) InternalWithRef(ref terra.Reference) ControlPlaneAttributes {
	return ControlPlaneAttributes{ref: ref}
}

func (cp ControlPlaneAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp ControlPlaneAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("subnet_id"))
}

func (cp ControlPlaneAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cp.ref.Append("tags"))
}

func (cp ControlPlaneAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("version"))
}

func (cp ControlPlaneAttributes) VmSize() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("vm_size"))
}

func (cp ControlPlaneAttributes) DatabaseEncryption() terra.ListValue[ControlPlaneDatabaseEncryptionAttributes] {
	return terra.ReferenceAsList[ControlPlaneDatabaseEncryptionAttributes](cp.ref.Append("database_encryption"))
}

func (cp ControlPlaneAttributes) MainVolume() terra.ListValue[ControlPlaneMainVolumeAttributes] {
	return terra.ReferenceAsList[ControlPlaneMainVolumeAttributes](cp.ref.Append("main_volume"))
}

func (cp ControlPlaneAttributes) ProxyConfig() terra.ListValue[ControlPlaneProxyConfigAttributes] {
	return terra.ReferenceAsList[ControlPlaneProxyConfigAttributes](cp.ref.Append("proxy_config"))
}

func (cp ControlPlaneAttributes) ReplicaPlacements() terra.ListValue[ControlPlaneReplicaPlacementsAttributes] {
	return terra.ReferenceAsList[ControlPlaneReplicaPlacementsAttributes](cp.ref.Append("replica_placements"))
}

func (cp ControlPlaneAttributes) RootVolume() terra.ListValue[ControlPlaneRootVolumeAttributes] {
	return terra.ReferenceAsList[ControlPlaneRootVolumeAttributes](cp.ref.Append("root_volume"))
}

func (cp ControlPlaneAttributes) SshConfig() terra.ListValue[ControlPlaneSshConfigAttributes] {
	return terra.ReferenceAsList[ControlPlaneSshConfigAttributes](cp.ref.Append("ssh_config"))
}

type ControlPlaneDatabaseEncryptionAttributes struct {
	ref terra.Reference
}

func (de ControlPlaneDatabaseEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de ControlPlaneDatabaseEncryptionAttributes) InternalWithRef(ref terra.Reference) ControlPlaneDatabaseEncryptionAttributes {
	return ControlPlaneDatabaseEncryptionAttributes{ref: ref}
}

func (de ControlPlaneDatabaseEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de ControlPlaneDatabaseEncryptionAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("key_id"))
}

type ControlPlaneMainVolumeAttributes struct {
	ref terra.Reference
}

func (mv ControlPlaneMainVolumeAttributes) InternalRef() (terra.Reference, error) {
	return mv.ref, nil
}

func (mv ControlPlaneMainVolumeAttributes) InternalWithRef(ref terra.Reference) ControlPlaneMainVolumeAttributes {
	return ControlPlaneMainVolumeAttributes{ref: ref}
}

func (mv ControlPlaneMainVolumeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mv.ref.InternalTokens()
}

func (mv ControlPlaneMainVolumeAttributes) SizeGib() terra.NumberValue {
	return terra.ReferenceAsNumber(mv.ref.Append("size_gib"))
}

type ControlPlaneProxyConfigAttributes struct {
	ref terra.Reference
}

func (pc ControlPlaneProxyConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc ControlPlaneProxyConfigAttributes) InternalWithRef(ref terra.Reference) ControlPlaneProxyConfigAttributes {
	return ControlPlaneProxyConfigAttributes{ref: ref}
}

func (pc ControlPlaneProxyConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc ControlPlaneProxyConfigAttributes) ResourceGroupId() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("resource_group_id"))
}

func (pc ControlPlaneProxyConfigAttributes) SecretId() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("secret_id"))
}

type ControlPlaneReplicaPlacementsAttributes struct {
	ref terra.Reference
}

func (rp ControlPlaneReplicaPlacementsAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp ControlPlaneReplicaPlacementsAttributes) InternalWithRef(ref terra.Reference) ControlPlaneReplicaPlacementsAttributes {
	return ControlPlaneReplicaPlacementsAttributes{ref: ref}
}

func (rp ControlPlaneReplicaPlacementsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp ControlPlaneReplicaPlacementsAttributes) AzureAvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("azure_availability_zone"))
}

func (rp ControlPlaneReplicaPlacementsAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("subnet_id"))
}

type ControlPlaneRootVolumeAttributes struct {
	ref terra.Reference
}

func (rv ControlPlaneRootVolumeAttributes) InternalRef() (terra.Reference, error) {
	return rv.ref, nil
}

func (rv ControlPlaneRootVolumeAttributes) InternalWithRef(ref terra.Reference) ControlPlaneRootVolumeAttributes {
	return ControlPlaneRootVolumeAttributes{ref: ref}
}

func (rv ControlPlaneRootVolumeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rv.ref.InternalTokens()
}

func (rv ControlPlaneRootVolumeAttributes) SizeGib() terra.NumberValue {
	return terra.ReferenceAsNumber(rv.ref.Append("size_gib"))
}

type ControlPlaneSshConfigAttributes struct {
	ref terra.Reference
}

func (sc ControlPlaneSshConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc ControlPlaneSshConfigAttributes) InternalWithRef(ref terra.Reference) ControlPlaneSshConfigAttributes {
	return ControlPlaneSshConfigAttributes{ref: ref}
}

func (sc ControlPlaneSshConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc ControlPlaneSshConfigAttributes) AuthorizedKey() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("authorized_key"))
}

type FleetAttributes struct {
	ref terra.Reference
}

func (f FleetAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FleetAttributes) InternalWithRef(ref terra.Reference) FleetAttributes {
	return FleetAttributes{ref: ref}
}

func (f FleetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FleetAttributes) Membership() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("membership"))
}

func (f FleetAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("project"))
}

type NetworkingAttributes struct {
	ref terra.Reference
}

func (n NetworkingAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NetworkingAttributes) InternalWithRef(ref terra.Reference) NetworkingAttributes {
	return NetworkingAttributes{ref: ref}
}

func (n NetworkingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NetworkingAttributes) PodAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("pod_address_cidr_blocks"))
}

func (n NetworkingAttributes) ServiceAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("service_address_cidr_blocks"))
}

func (n NetworkingAttributes) VirtualNetworkId() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("virtual_network_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type WorkloadIdentityConfigState struct {
	IdentityProvider string `json:"identity_provider"`
	IssuerUri        string `json:"issuer_uri"`
	WorkloadPool     string `json:"workload_pool"`
}

type AuthorizationState struct {
	AdminGroups []AuthorizationAdminGroupsState `json:"admin_groups"`
	AdminUsers  []AuthorizationAdminUsersState  `json:"admin_users"`
}

type AuthorizationAdminGroupsState struct {
	Group string `json:"group"`
}

type AuthorizationAdminUsersState struct {
	Username string `json:"username"`
}

type AzureServicesAuthenticationState struct {
	ApplicationId string `json:"application_id"`
	TenantId      string `json:"tenant_id"`
}

type ControlPlaneState struct {
	SubnetId           string                                `json:"subnet_id"`
	Tags               map[string]string                     `json:"tags"`
	Version            string                                `json:"version"`
	VmSize             string                                `json:"vm_size"`
	DatabaseEncryption []ControlPlaneDatabaseEncryptionState `json:"database_encryption"`
	MainVolume         []ControlPlaneMainVolumeState         `json:"main_volume"`
	ProxyConfig        []ControlPlaneProxyConfigState        `json:"proxy_config"`
	ReplicaPlacements  []ControlPlaneReplicaPlacementsState  `json:"replica_placements"`
	RootVolume         []ControlPlaneRootVolumeState         `json:"root_volume"`
	SshConfig          []ControlPlaneSshConfigState          `json:"ssh_config"`
}

type ControlPlaneDatabaseEncryptionState struct {
	KeyId string `json:"key_id"`
}

type ControlPlaneMainVolumeState struct {
	SizeGib float64 `json:"size_gib"`
}

type ControlPlaneProxyConfigState struct {
	ResourceGroupId string `json:"resource_group_id"`
	SecretId        string `json:"secret_id"`
}

type ControlPlaneReplicaPlacementsState struct {
	AzureAvailabilityZone string `json:"azure_availability_zone"`
	SubnetId              string `json:"subnet_id"`
}

type ControlPlaneRootVolumeState struct {
	SizeGib float64 `json:"size_gib"`
}

type ControlPlaneSshConfigState struct {
	AuthorizedKey string `json:"authorized_key"`
}

type FleetState struct {
	Membership string `json:"membership"`
	Project    string `json:"project"`
}

type NetworkingState struct {
	PodAddressCidrBlocks     []string `json:"pod_address_cidr_blocks"`
	ServiceAddressCidrBlocks []string `json:"service_address_cidr_blocks"`
	VirtualNetworkId         string   `json:"virtual_network_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
