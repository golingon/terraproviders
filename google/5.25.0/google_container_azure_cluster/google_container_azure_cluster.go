// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_container_azure_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_container_azure_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *googleContainerAzureClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcac *Resource) Type() string {
	return "google_container_azure_cluster"
}

// LocalName returns the local name for [Resource].
func (gcac *Resource) LocalName() string {
	return gcac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcac *Resource) Configuration() interface{} {
	return gcac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcac *Resource) Dependencies() terra.Dependencies {
	return gcac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcac *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcac *Resource) Attributes() googleContainerAzureClusterAttributes {
	return googleContainerAzureClusterAttributes{ref: terra.ReferenceResource(gcac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcac *Resource) ImportState(state io.Reader) error {
	gcac.state = &googleContainerAzureClusterState{}
	if err := json.NewDecoder(state).Decode(gcac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcac.Type(), gcac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcac *Resource) State() (*googleContainerAzureClusterState, bool) {
	return gcac.state, gcac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcac *Resource) StateMust() *googleContainerAzureClusterState {
	if gcac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcac.Type(), gcac.LocalName()))
	}
	return gcac.state
}

// Args contains the configurations for google_container_azure_cluster.
type Args struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// AzureRegion: string, required
	AzureRegion terra.StringValue `hcl:"azure_region,attr" validate:"required"`
	// Client: string, optional
	Client terra.StringValue `hcl:"client,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ResourceGroupId: string, required
	ResourceGroupId terra.StringValue `hcl:"resource_group_id,attr" validate:"required"`
	// Authorization: required
	Authorization *Authorization `hcl:"authorization,block" validate:"required"`
	// AzureServicesAuthentication: optional
	AzureServicesAuthentication *AzureServicesAuthentication `hcl:"azure_services_authentication,block"`
	// ControlPlane: required
	ControlPlane *ControlPlane `hcl:"control_plane,block" validate:"required"`
	// Fleet: required
	Fleet *Fleet `hcl:"fleet,block" validate:"required"`
	// Networking: required
	Networking *Networking `hcl:"networking,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleContainerAzureClusterAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcac.ref.Append("annotations"))
}

// AzureRegion returns a reference to field azure_region of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) AzureRegion() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("azure_region"))
}

// Client returns a reference to field client of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) Client() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("client"))
}

// CreateTime returns a reference to field create_time of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("create_time"))
}

// Description returns a reference to field description of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("description"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcac.ref.Append("effective_annotations"))
}

// Endpoint returns a reference to field endpoint of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("endpoint"))
}

// Etag returns a reference to field etag of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("etag"))
}

// Id returns a reference to field id of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("id"))
}

// Location returns a reference to field location of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("location"))
}

// Name returns a reference to field name of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("name"))
}

// Project returns a reference to field project of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("project"))
}

// Reconciling returns a reference to field reconciling of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceAsBool(gcac.ref.Append("reconciling"))
}

// ResourceGroupId returns a reference to field resource_group_id of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) ResourceGroupId() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("resource_group_id"))
}

// State returns a reference to field state of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("state"))
}

// Uid returns a reference to field uid of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_container_azure_cluster.
func (gcac googleContainerAzureClusterAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("update_time"))
}

func (gcac googleContainerAzureClusterAttributes) WorkloadIdentityConfig() terra.ListValue[WorkloadIdentityConfigAttributes] {
	return terra.ReferenceAsList[WorkloadIdentityConfigAttributes](gcac.ref.Append("workload_identity_config"))
}

func (gcac googleContainerAzureClusterAttributes) Authorization() terra.ListValue[AuthorizationAttributes] {
	return terra.ReferenceAsList[AuthorizationAttributes](gcac.ref.Append("authorization"))
}

func (gcac googleContainerAzureClusterAttributes) AzureServicesAuthentication() terra.ListValue[AzureServicesAuthenticationAttributes] {
	return terra.ReferenceAsList[AzureServicesAuthenticationAttributes](gcac.ref.Append("azure_services_authentication"))
}

func (gcac googleContainerAzureClusterAttributes) ControlPlane() terra.ListValue[ControlPlaneAttributes] {
	return terra.ReferenceAsList[ControlPlaneAttributes](gcac.ref.Append("control_plane"))
}

func (gcac googleContainerAzureClusterAttributes) Fleet() terra.ListValue[FleetAttributes] {
	return terra.ReferenceAsList[FleetAttributes](gcac.ref.Append("fleet"))
}

func (gcac googleContainerAzureClusterAttributes) Networking() terra.ListValue[NetworkingAttributes] {
	return terra.ReferenceAsList[NetworkingAttributes](gcac.ref.Append("networking"))
}

func (gcac googleContainerAzureClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcac.ref.Append("timeouts"))
}

type googleContainerAzureClusterState struct {
	Annotations                 map[string]string                  `json:"annotations"`
	AzureRegion                 string                             `json:"azure_region"`
	Client                      string                             `json:"client"`
	CreateTime                  string                             `json:"create_time"`
	Description                 string                             `json:"description"`
	EffectiveAnnotations        map[string]string                  `json:"effective_annotations"`
	Endpoint                    string                             `json:"endpoint"`
	Etag                        string                             `json:"etag"`
	Id                          string                             `json:"id"`
	Location                    string                             `json:"location"`
	Name                        string                             `json:"name"`
	Project                     string                             `json:"project"`
	Reconciling                 bool                               `json:"reconciling"`
	ResourceGroupId             string                             `json:"resource_group_id"`
	State                       string                             `json:"state"`
	Uid                         string                             `json:"uid"`
	UpdateTime                  string                             `json:"update_time"`
	WorkloadIdentityConfig      []WorkloadIdentityConfigState      `json:"workload_identity_config"`
	Authorization               []AuthorizationState               `json:"authorization"`
	AzureServicesAuthentication []AzureServicesAuthenticationState `json:"azure_services_authentication"`
	ControlPlane                []ControlPlaneState                `json:"control_plane"`
	Fleet                       []FleetState                       `json:"fleet"`
	Networking                  []NetworkingState                  `json:"networking"`
	Timeouts                    *TimeoutsState                     `json:"timeouts"`
}
