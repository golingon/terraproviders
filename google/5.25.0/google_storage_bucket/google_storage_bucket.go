// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_storage_bucket

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_storage_bucket.
type Resource struct {
	Name      string
	Args      Args
	state     *googleStorageBucketState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsb *Resource) Type() string {
	return "google_storage_bucket"
}

// LocalName returns the local name for [Resource].
func (gsb *Resource) LocalName() string {
	return gsb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsb *Resource) Configuration() interface{} {
	return gsb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsb *Resource) Dependencies() terra.Dependencies {
	return gsb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsb *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsb *Resource) Attributes() googleStorageBucketAttributes {
	return googleStorageBucketAttributes{ref: terra.ReferenceResource(gsb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsb *Resource) ImportState(state io.Reader) error {
	gsb.state = &googleStorageBucketState{}
	if err := json.NewDecoder(state).Decode(gsb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsb.Type(), gsb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsb *Resource) State() (*googleStorageBucketState, bool) {
	return gsb.state, gsb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsb *Resource) StateMust() *googleStorageBucketState {
	if gsb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsb.Type(), gsb.LocalName()))
	}
	return gsb.state
}

// Args contains the configurations for google_storage_bucket.
type Args struct {
	// DefaultEventBasedHold: bool, optional
	DefaultEventBasedHold terra.BoolValue `hcl:"default_event_based_hold,attr"`
	// EnableObjectRetention: bool, optional
	EnableObjectRetention terra.BoolValue `hcl:"enable_object_retention,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// PublicAccessPrevention: string, optional
	PublicAccessPrevention terra.StringValue `hcl:"public_access_prevention,attr"`
	// RequesterPays: bool, optional
	RequesterPays terra.BoolValue `hcl:"requester_pays,attr"`
	// Rpo: string, optional
	Rpo terra.StringValue `hcl:"rpo,attr"`
	// StorageClass: string, optional
	StorageClass terra.StringValue `hcl:"storage_class,attr"`
	// UniformBucketLevelAccess: bool, optional
	UniformBucketLevelAccess terra.BoolValue `hcl:"uniform_bucket_level_access,attr"`
	// Autoclass: optional
	Autoclass *Autoclass `hcl:"autoclass,block"`
	// Cors: min=0
	Cors []Cors `hcl:"cors,block" validate:"min=0"`
	// CustomPlacementConfig: optional
	CustomPlacementConfig *CustomPlacementConfig `hcl:"custom_placement_config,block"`
	// Encryption: optional
	Encryption *Encryption `hcl:"encryption,block"`
	// LifecycleRule: min=0,max=100
	LifecycleRule []LifecycleRule `hcl:"lifecycle_rule,block" validate:"min=0,max=100"`
	// Logging: optional
	Logging *Logging `hcl:"logging,block"`
	// RetentionPolicy: optional
	RetentionPolicy *RetentionPolicy `hcl:"retention_policy,block"`
	// SoftDeletePolicy: optional
	SoftDeletePolicy *SoftDeletePolicy `hcl:"soft_delete_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Versioning: optional
	Versioning *Versioning `hcl:"versioning,block"`
	// Website: optional
	Website *Website `hcl:"website,block"`
}

type googleStorageBucketAttributes struct {
	ref terra.Reference
}

// DefaultEventBasedHold returns a reference to field default_event_based_hold of google_storage_bucket.
func (gsb googleStorageBucketAttributes) DefaultEventBasedHold() terra.BoolValue {
	return terra.ReferenceAsBool(gsb.ref.Append("default_event_based_hold"))
}

// EffectiveLabels returns a reference to field effective_labels of google_storage_bucket.
func (gsb googleStorageBucketAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsb.ref.Append("effective_labels"))
}

// EnableObjectRetention returns a reference to field enable_object_retention of google_storage_bucket.
func (gsb googleStorageBucketAttributes) EnableObjectRetention() terra.BoolValue {
	return terra.ReferenceAsBool(gsb.ref.Append("enable_object_retention"))
}

// ForceDestroy returns a reference to field force_destroy of google_storage_bucket.
func (gsb googleStorageBucketAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(gsb.ref.Append("force_destroy"))
}

// Id returns a reference to field id of google_storage_bucket.
func (gsb googleStorageBucketAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsb.ref.Append("id"))
}

// Labels returns a reference to field labels of google_storage_bucket.
func (gsb googleStorageBucketAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsb.ref.Append("labels"))
}

// Location returns a reference to field location of google_storage_bucket.
func (gsb googleStorageBucketAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gsb.ref.Append("location"))
}

// Name returns a reference to field name of google_storage_bucket.
func (gsb googleStorageBucketAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsb.ref.Append("name"))
}

// Project returns a reference to field project of google_storage_bucket.
func (gsb googleStorageBucketAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gsb.ref.Append("project"))
}

// ProjectNumber returns a reference to field project_number of google_storage_bucket.
func (gsb googleStorageBucketAttributes) ProjectNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(gsb.ref.Append("project_number"))
}

// PublicAccessPrevention returns a reference to field public_access_prevention of google_storage_bucket.
func (gsb googleStorageBucketAttributes) PublicAccessPrevention() terra.StringValue {
	return terra.ReferenceAsString(gsb.ref.Append("public_access_prevention"))
}

// RequesterPays returns a reference to field requester_pays of google_storage_bucket.
func (gsb googleStorageBucketAttributes) RequesterPays() terra.BoolValue {
	return terra.ReferenceAsBool(gsb.ref.Append("requester_pays"))
}

// Rpo returns a reference to field rpo of google_storage_bucket.
func (gsb googleStorageBucketAttributes) Rpo() terra.StringValue {
	return terra.ReferenceAsString(gsb.ref.Append("rpo"))
}

// SelfLink returns a reference to field self_link of google_storage_bucket.
func (gsb googleStorageBucketAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gsb.ref.Append("self_link"))
}

// StorageClass returns a reference to field storage_class of google_storage_bucket.
func (gsb googleStorageBucketAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(gsb.ref.Append("storage_class"))
}

// TerraformLabels returns a reference to field terraform_labels of google_storage_bucket.
func (gsb googleStorageBucketAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsb.ref.Append("terraform_labels"))
}

// UniformBucketLevelAccess returns a reference to field uniform_bucket_level_access of google_storage_bucket.
func (gsb googleStorageBucketAttributes) UniformBucketLevelAccess() terra.BoolValue {
	return terra.ReferenceAsBool(gsb.ref.Append("uniform_bucket_level_access"))
}

// Url returns a reference to field url of google_storage_bucket.
func (gsb googleStorageBucketAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(gsb.ref.Append("url"))
}

func (gsb googleStorageBucketAttributes) Autoclass() terra.ListValue[AutoclassAttributes] {
	return terra.ReferenceAsList[AutoclassAttributes](gsb.ref.Append("autoclass"))
}

func (gsb googleStorageBucketAttributes) Cors() terra.ListValue[CorsAttributes] {
	return terra.ReferenceAsList[CorsAttributes](gsb.ref.Append("cors"))
}

func (gsb googleStorageBucketAttributes) CustomPlacementConfig() terra.ListValue[CustomPlacementConfigAttributes] {
	return terra.ReferenceAsList[CustomPlacementConfigAttributes](gsb.ref.Append("custom_placement_config"))
}

func (gsb googleStorageBucketAttributes) Encryption() terra.ListValue[EncryptionAttributes] {
	return terra.ReferenceAsList[EncryptionAttributes](gsb.ref.Append("encryption"))
}

func (gsb googleStorageBucketAttributes) LifecycleRule() terra.ListValue[LifecycleRuleAttributes] {
	return terra.ReferenceAsList[LifecycleRuleAttributes](gsb.ref.Append("lifecycle_rule"))
}

func (gsb googleStorageBucketAttributes) Logging() terra.ListValue[LoggingAttributes] {
	return terra.ReferenceAsList[LoggingAttributes](gsb.ref.Append("logging"))
}

func (gsb googleStorageBucketAttributes) RetentionPolicy() terra.ListValue[RetentionPolicyAttributes] {
	return terra.ReferenceAsList[RetentionPolicyAttributes](gsb.ref.Append("retention_policy"))
}

func (gsb googleStorageBucketAttributes) SoftDeletePolicy() terra.ListValue[SoftDeletePolicyAttributes] {
	return terra.ReferenceAsList[SoftDeletePolicyAttributes](gsb.ref.Append("soft_delete_policy"))
}

func (gsb googleStorageBucketAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsb.ref.Append("timeouts"))
}

func (gsb googleStorageBucketAttributes) Versioning() terra.ListValue[VersioningAttributes] {
	return terra.ReferenceAsList[VersioningAttributes](gsb.ref.Append("versioning"))
}

func (gsb googleStorageBucketAttributes) Website() terra.ListValue[WebsiteAttributes] {
	return terra.ReferenceAsList[WebsiteAttributes](gsb.ref.Append("website"))
}

type googleStorageBucketState struct {
	DefaultEventBasedHold    bool                         `json:"default_event_based_hold"`
	EffectiveLabels          map[string]string            `json:"effective_labels"`
	EnableObjectRetention    bool                         `json:"enable_object_retention"`
	ForceDestroy             bool                         `json:"force_destroy"`
	Id                       string                       `json:"id"`
	Labels                   map[string]string            `json:"labels"`
	Location                 string                       `json:"location"`
	Name                     string                       `json:"name"`
	Project                  string                       `json:"project"`
	ProjectNumber            float64                      `json:"project_number"`
	PublicAccessPrevention   string                       `json:"public_access_prevention"`
	RequesterPays            bool                         `json:"requester_pays"`
	Rpo                      string                       `json:"rpo"`
	SelfLink                 string                       `json:"self_link"`
	StorageClass             string                       `json:"storage_class"`
	TerraformLabels          map[string]string            `json:"terraform_labels"`
	UniformBucketLevelAccess bool                         `json:"uniform_bucket_level_access"`
	Url                      string                       `json:"url"`
	Autoclass                []AutoclassState             `json:"autoclass"`
	Cors                     []CorsState                  `json:"cors"`
	CustomPlacementConfig    []CustomPlacementConfigState `json:"custom_placement_config"`
	Encryption               []EncryptionState            `json:"encryption"`
	LifecycleRule            []LifecycleRuleState         `json:"lifecycle_rule"`
	Logging                  []LoggingState               `json:"logging"`
	RetentionPolicy          []RetentionPolicyState       `json:"retention_policy"`
	SoftDeletePolicy         []SoftDeletePolicyState      `json:"soft_delete_policy"`
	Timeouts                 *TimeoutsState               `json:"timeouts"`
	Versioning               []VersioningState            `json:"versioning"`
	Website                  []WebsiteState               `json:"website"`
}
