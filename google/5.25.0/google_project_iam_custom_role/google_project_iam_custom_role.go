// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_project_iam_custom_role

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_project_iam_custom_role.
type Resource struct {
	Name      string
	Args      Args
	state     *googleProjectIamCustomRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gpicr *Resource) Type() string {
	return "google_project_iam_custom_role"
}

// LocalName returns the local name for [Resource].
func (gpicr *Resource) LocalName() string {
	return gpicr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gpicr *Resource) Configuration() interface{} {
	return gpicr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gpicr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gpicr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gpicr *Resource) Dependencies() terra.Dependencies {
	return gpicr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gpicr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gpicr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gpicr *Resource) Attributes() googleProjectIamCustomRoleAttributes {
	return googleProjectIamCustomRoleAttributes{ref: terra.ReferenceResource(gpicr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gpicr *Resource) ImportState(state io.Reader) error {
	gpicr.state = &googleProjectIamCustomRoleState{}
	if err := json.NewDecoder(state).Decode(gpicr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gpicr.Type(), gpicr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gpicr *Resource) State() (*googleProjectIamCustomRoleState, bool) {
	return gpicr.state, gpicr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gpicr *Resource) StateMust() *googleProjectIamCustomRoleState {
	if gpicr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gpicr.Type(), gpicr.LocalName()))
	}
	return gpicr.state
}

// Args contains the configurations for google_project_iam_custom_role.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Permissions: set of string, required
	Permissions terra.SetValue[terra.StringValue] `hcl:"permissions,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RoleId: string, required
	RoleId terra.StringValue `hcl:"role_id,attr" validate:"required"`
	// Stage: string, optional
	Stage terra.StringValue `hcl:"stage,attr"`
	// Title: string, required
	Title terra.StringValue `hcl:"title,attr" validate:"required"`
}

type googleProjectIamCustomRoleAttributes struct {
	ref terra.Reference
}

// Deleted returns a reference to field deleted of google_project_iam_custom_role.
func (gpicr googleProjectIamCustomRoleAttributes) Deleted() terra.BoolValue {
	return terra.ReferenceAsBool(gpicr.ref.Append("deleted"))
}

// Description returns a reference to field description of google_project_iam_custom_role.
func (gpicr googleProjectIamCustomRoleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gpicr.ref.Append("description"))
}

// Id returns a reference to field id of google_project_iam_custom_role.
func (gpicr googleProjectIamCustomRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gpicr.ref.Append("id"))
}

// Name returns a reference to field name of google_project_iam_custom_role.
func (gpicr googleProjectIamCustomRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gpicr.ref.Append("name"))
}

// Permissions returns a reference to field permissions of google_project_iam_custom_role.
func (gpicr googleProjectIamCustomRoleAttributes) Permissions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gpicr.ref.Append("permissions"))
}

// Project returns a reference to field project of google_project_iam_custom_role.
func (gpicr googleProjectIamCustomRoleAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gpicr.ref.Append("project"))
}

// RoleId returns a reference to field role_id of google_project_iam_custom_role.
func (gpicr googleProjectIamCustomRoleAttributes) RoleId() terra.StringValue {
	return terra.ReferenceAsString(gpicr.ref.Append("role_id"))
}

// Stage returns a reference to field stage of google_project_iam_custom_role.
func (gpicr googleProjectIamCustomRoleAttributes) Stage() terra.StringValue {
	return terra.ReferenceAsString(gpicr.ref.Append("stage"))
}

// Title returns a reference to field title of google_project_iam_custom_role.
func (gpicr googleProjectIamCustomRoleAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(gpicr.ref.Append("title"))
}

type googleProjectIamCustomRoleState struct {
	Deleted     bool     `json:"deleted"`
	Description string   `json:"description"`
	Id          string   `json:"id"`
	Name        string   `json:"name"`
	Permissions []string `json:"permissions"`
	Project     string   `json:"project"`
	RoleId      string   `json:"role_id"`
	Stage       string   `json:"stage"`
	Title       string   `json:"title"`
}
