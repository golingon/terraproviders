// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_projects

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource google_projects.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (gp *DataSource) DataSource() string {
	return "google_projects"
}

// LocalName returns the local name for [DataSource].
func (gp *DataSource) LocalName() string {
	return gp.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (gp *DataSource) Configuration() interface{} {
	return gp.Args
}

// Attributes returns the attributes for [DataSource].
func (gp *DataSource) Attributes() dataGoogleProjectsAttributes {
	return dataGoogleProjectsAttributes{ref: terra.ReferenceDataSource(gp)}
}

// DataArgs contains the configurations for google_projects.
type DataArgs struct {
	// Filter: string, required
	Filter terra.StringValue `hcl:"filter,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type dataGoogleProjectsAttributes struct {
	ref terra.Reference
}

// Filter returns a reference to field filter of google_projects.
func (gp dataGoogleProjectsAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("filter"))
}

// Id returns a reference to field id of google_projects.
func (gp dataGoogleProjectsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gp.ref.Append("id"))
}

func (gp dataGoogleProjectsAttributes) Projects() terra.ListValue[DataProjectsAttributes] {
	return terra.ReferenceAsList[DataProjectsAttributes](gp.ref.Append("projects"))
}
