// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_dataset

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataAccessAttributes struct {
	ref terra.Reference
}

func (a DataAccessAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DataAccessAttributes) InternalWithRef(ref terra.Reference) DataAccessAttributes {
	return DataAccessAttributes{ref: ref}
}

func (a DataAccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DataAccessAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("domain"))
}

func (a DataAccessAttributes) GroupByEmail() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("group_by_email"))
}

func (a DataAccessAttributes) IamMember() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("iam_member"))
}

func (a DataAccessAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("role"))
}

func (a DataAccessAttributes) SpecialGroup() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("special_group"))
}

func (a DataAccessAttributes) UserByEmail() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("user_by_email"))
}

func (a DataAccessAttributes) Dataset() terra.ListValue[DataAccessDatasetAttributes] {
	return terra.ReferenceAsList[DataAccessDatasetAttributes](a.ref.Append("dataset"))
}

func (a DataAccessAttributes) Routine() terra.ListValue[DataAccessRoutineAttributes] {
	return terra.ReferenceAsList[DataAccessRoutineAttributes](a.ref.Append("routine"))
}

func (a DataAccessAttributes) View() terra.ListValue[DataAccessViewAttributes] {
	return terra.ReferenceAsList[DataAccessViewAttributes](a.ref.Append("view"))
}

type DataAccessDatasetAttributes struct {
	ref terra.Reference
}

func (d DataAccessDatasetAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DataAccessDatasetAttributes) InternalWithRef(ref terra.Reference) DataAccessDatasetAttributes {
	return DataAccessDatasetAttributes{ref: ref}
}

func (d DataAccessDatasetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DataAccessDatasetAttributes) TargetTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](d.ref.Append("target_types"))
}

func (d DataAccessDatasetAttributes) Dataset() terra.ListValue[DataAccessDatasetDatasetAttributes] {
	return terra.ReferenceAsList[DataAccessDatasetDatasetAttributes](d.ref.Append("dataset"))
}

type DataAccessDatasetDatasetAttributes struct {
	ref terra.Reference
}

func (d DataAccessDatasetDatasetAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DataAccessDatasetDatasetAttributes) InternalWithRef(ref terra.Reference) DataAccessDatasetDatasetAttributes {
	return DataAccessDatasetDatasetAttributes{ref: ref}
}

func (d DataAccessDatasetDatasetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DataAccessDatasetDatasetAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("dataset_id"))
}

func (d DataAccessDatasetDatasetAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("project_id"))
}

type DataAccessRoutineAttributes struct {
	ref terra.Reference
}

func (r DataAccessRoutineAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataAccessRoutineAttributes) InternalWithRef(ref terra.Reference) DataAccessRoutineAttributes {
	return DataAccessRoutineAttributes{ref: ref}
}

func (r DataAccessRoutineAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataAccessRoutineAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("dataset_id"))
}

func (r DataAccessRoutineAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("project_id"))
}

func (r DataAccessRoutineAttributes) RoutineId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("routine_id"))
}

type DataAccessViewAttributes struct {
	ref terra.Reference
}

func (v DataAccessViewAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v DataAccessViewAttributes) InternalWithRef(ref terra.Reference) DataAccessViewAttributes {
	return DataAccessViewAttributes{ref: ref}
}

func (v DataAccessViewAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v DataAccessViewAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("dataset_id"))
}

func (v DataAccessViewAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("project_id"))
}

func (v DataAccessViewAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("table_id"))
}

type DataDefaultEncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (dec DataDefaultEncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dec.ref, nil
}

func (dec DataDefaultEncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) DataDefaultEncryptionConfigurationAttributes {
	return DataDefaultEncryptionConfigurationAttributes{ref: ref}
}

func (dec DataDefaultEncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dec.ref.InternalTokens()
}

func (dec DataDefaultEncryptionConfigurationAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(dec.ref.Append("kms_key_name"))
}

type DataAccessState struct {
	Domain       string                   `json:"domain"`
	GroupByEmail string                   `json:"group_by_email"`
	IamMember    string                   `json:"iam_member"`
	Role         string                   `json:"role"`
	SpecialGroup string                   `json:"special_group"`
	UserByEmail  string                   `json:"user_by_email"`
	Dataset      []DataAccessDatasetState `json:"dataset"`
	Routine      []DataAccessRoutineState `json:"routine"`
	View         []DataAccessViewState    `json:"view"`
}

type DataAccessDatasetState struct {
	TargetTypes []string                        `json:"target_types"`
	Dataset     []DataAccessDatasetDatasetState `json:"dataset"`
}

type DataAccessDatasetDatasetState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
}

type DataAccessRoutineState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	RoutineId string `json:"routine_id"`
}

type DataAccessViewState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	TableId   string `json:"table_id"`
}

type DataDefaultEncryptionConfigurationState struct {
	KmsKeyName string `json:"kms_key_name"`
}
