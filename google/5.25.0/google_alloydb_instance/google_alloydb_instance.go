// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_alloydb_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_alloydb_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *googleAlloydbInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gai *Resource) Type() string {
	return "google_alloydb_instance"
}

// LocalName returns the local name for [Resource].
func (gai *Resource) LocalName() string {
	return gai.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gai *Resource) Configuration() interface{} {
	return gai.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gai *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gai)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gai *Resource) Dependencies() terra.Dependencies {
	return gai.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gai *Resource) LifecycleManagement() *terra.Lifecycle {
	return gai.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gai *Resource) Attributes() googleAlloydbInstanceAttributes {
	return googleAlloydbInstanceAttributes{ref: terra.ReferenceResource(gai)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gai *Resource) ImportState(state io.Reader) error {
	gai.state = &googleAlloydbInstanceState{}
	if err := json.NewDecoder(state).Decode(gai.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gai.Type(), gai.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gai *Resource) State() (*googleAlloydbInstanceState, bool) {
	return gai.state, gai.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gai *Resource) StateMust() *googleAlloydbInstanceState {
	if gai.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gai.Type(), gai.LocalName()))
	}
	return gai.state
}

// Args contains the configurations for google_alloydb_instance.
type Args struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// AvailabilityType: string, optional
	AvailabilityType terra.StringValue `hcl:"availability_type,attr"`
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// DatabaseFlags: map of string, optional
	DatabaseFlags terra.MapValue[terra.StringValue] `hcl:"database_flags,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// GceZone: string, optional
	GceZone terra.StringValue `hcl:"gce_zone,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// ClientConnectionConfig: optional
	ClientConnectionConfig *ClientConnectionConfig `hcl:"client_connection_config,block"`
	// MachineConfig: optional
	MachineConfig *MachineConfig `hcl:"machine_config,block"`
	// QueryInsightsConfig: optional
	QueryInsightsConfig *QueryInsightsConfig `hcl:"query_insights_config,block"`
	// ReadPoolConfig: optional
	ReadPoolConfig *ReadPoolConfig `hcl:"read_pool_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleAlloydbInstanceAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gai.ref.Append("annotations"))
}

// AvailabilityType returns a reference to field availability_type of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) AvailabilityType() terra.StringValue {
	return terra.ReferenceAsString(gai.ref.Append("availability_type"))
}

// Cluster returns a reference to field cluster of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(gai.ref.Append("cluster"))
}

// CreateTime returns a reference to field create_time of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gai.ref.Append("create_time"))
}

// DatabaseFlags returns a reference to field database_flags of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) DatabaseFlags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gai.ref.Append("database_flags"))
}

// DisplayName returns a reference to field display_name of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gai.ref.Append("display_name"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gai.ref.Append("effective_annotations"))
}

// EffectiveLabels returns a reference to field effective_labels of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gai.ref.Append("effective_labels"))
}

// GceZone returns a reference to field gce_zone of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) GceZone() terra.StringValue {
	return terra.ReferenceAsString(gai.ref.Append("gce_zone"))
}

// Id returns a reference to field id of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gai.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(gai.ref.Append("instance_id"))
}

// InstanceType returns a reference to field instance_type of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(gai.ref.Append("instance_type"))
}

// IpAddress returns a reference to field ip_address of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(gai.ref.Append("ip_address"))
}

// Labels returns a reference to field labels of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gai.ref.Append("labels"))
}

// Name returns a reference to field name of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gai.ref.Append("name"))
}

// Reconciling returns a reference to field reconciling of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceAsBool(gai.ref.Append("reconciling"))
}

// State returns a reference to field state of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gai.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gai.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gai.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_alloydb_instance.
func (gai googleAlloydbInstanceAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gai.ref.Append("update_time"))
}

func (gai googleAlloydbInstanceAttributes) ClientConnectionConfig() terra.ListValue[ClientConnectionConfigAttributes] {
	return terra.ReferenceAsList[ClientConnectionConfigAttributes](gai.ref.Append("client_connection_config"))
}

func (gai googleAlloydbInstanceAttributes) MachineConfig() terra.ListValue[MachineConfigAttributes] {
	return terra.ReferenceAsList[MachineConfigAttributes](gai.ref.Append("machine_config"))
}

func (gai googleAlloydbInstanceAttributes) QueryInsightsConfig() terra.ListValue[QueryInsightsConfigAttributes] {
	return terra.ReferenceAsList[QueryInsightsConfigAttributes](gai.ref.Append("query_insights_config"))
}

func (gai googleAlloydbInstanceAttributes) ReadPoolConfig() terra.ListValue[ReadPoolConfigAttributes] {
	return terra.ReferenceAsList[ReadPoolConfigAttributes](gai.ref.Append("read_pool_config"))
}

func (gai googleAlloydbInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gai.ref.Append("timeouts"))
}

type googleAlloydbInstanceState struct {
	Annotations            map[string]string             `json:"annotations"`
	AvailabilityType       string                        `json:"availability_type"`
	Cluster                string                        `json:"cluster"`
	CreateTime             string                        `json:"create_time"`
	DatabaseFlags          map[string]string             `json:"database_flags"`
	DisplayName            string                        `json:"display_name"`
	EffectiveAnnotations   map[string]string             `json:"effective_annotations"`
	EffectiveLabels        map[string]string             `json:"effective_labels"`
	GceZone                string                        `json:"gce_zone"`
	Id                     string                        `json:"id"`
	InstanceId             string                        `json:"instance_id"`
	InstanceType           string                        `json:"instance_type"`
	IpAddress              string                        `json:"ip_address"`
	Labels                 map[string]string             `json:"labels"`
	Name                   string                        `json:"name"`
	Reconciling            bool                          `json:"reconciling"`
	State                  string                        `json:"state"`
	TerraformLabels        map[string]string             `json:"terraform_labels"`
	Uid                    string                        `json:"uid"`
	UpdateTime             string                        `json:"update_time"`
	ClientConnectionConfig []ClientConnectionConfigState `json:"client_connection_config"`
	MachineConfig          []MachineConfigState          `json:"machine_config"`
	QueryInsightsConfig    []QueryInsightsConfigState    `json:"query_insights_config"`
	ReadPoolConfig         []ReadPoolConfigState         `json:"read_pool_config"`
	Timeouts               *TimeoutsState                `json:"timeouts"`
}
