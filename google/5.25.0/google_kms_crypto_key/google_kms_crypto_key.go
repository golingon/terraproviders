// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_kms_crypto_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_kms_crypto_key.
type Resource struct {
	Name      string
	Args      Args
	state     *googleKmsCryptoKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gkck *Resource) Type() string {
	return "google_kms_crypto_key"
}

// LocalName returns the local name for [Resource].
func (gkck *Resource) LocalName() string {
	return gkck.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gkck *Resource) Configuration() interface{} {
	return gkck.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gkck *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gkck)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gkck *Resource) Dependencies() terra.Dependencies {
	return gkck.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gkck *Resource) LifecycleManagement() *terra.Lifecycle {
	return gkck.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gkck *Resource) Attributes() googleKmsCryptoKeyAttributes {
	return googleKmsCryptoKeyAttributes{ref: terra.ReferenceResource(gkck)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gkck *Resource) ImportState(state io.Reader) error {
	gkck.state = &googleKmsCryptoKeyState{}
	if err := json.NewDecoder(state).Decode(gkck.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gkck.Type(), gkck.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gkck *Resource) State() (*googleKmsCryptoKeyState, bool) {
	return gkck.state, gkck.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gkck *Resource) StateMust() *googleKmsCryptoKeyState {
	if gkck.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gkck.Type(), gkck.LocalName()))
	}
	return gkck.state
}

// Args contains the configurations for google_kms_crypto_key.
type Args struct {
	// CryptoKeyBackend: string, optional
	CryptoKeyBackend terra.StringValue `hcl:"crypto_key_backend,attr"`
	// DestroyScheduledDuration: string, optional
	DestroyScheduledDuration terra.StringValue `hcl:"destroy_scheduled_duration,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImportOnly: bool, optional
	ImportOnly terra.BoolValue `hcl:"import_only,attr"`
	// KeyRing: string, required
	KeyRing terra.StringValue `hcl:"key_ring,attr" validate:"required"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Purpose: string, optional
	Purpose terra.StringValue `hcl:"purpose,attr"`
	// RotationPeriod: string, optional
	RotationPeriod terra.StringValue `hcl:"rotation_period,attr"`
	// SkipInitialVersionCreation: bool, optional
	SkipInitialVersionCreation terra.BoolValue `hcl:"skip_initial_version_creation,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VersionTemplate: optional
	VersionTemplate *VersionTemplate `hcl:"version_template,block"`
}

type googleKmsCryptoKeyAttributes struct {
	ref terra.Reference
}

// CryptoKeyBackend returns a reference to field crypto_key_backend of google_kms_crypto_key.
func (gkck googleKmsCryptoKeyAttributes) CryptoKeyBackend() terra.StringValue {
	return terra.ReferenceAsString(gkck.ref.Append("crypto_key_backend"))
}

// DestroyScheduledDuration returns a reference to field destroy_scheduled_duration of google_kms_crypto_key.
func (gkck googleKmsCryptoKeyAttributes) DestroyScheduledDuration() terra.StringValue {
	return terra.ReferenceAsString(gkck.ref.Append("destroy_scheduled_duration"))
}

// EffectiveLabels returns a reference to field effective_labels of google_kms_crypto_key.
func (gkck googleKmsCryptoKeyAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gkck.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_kms_crypto_key.
func (gkck googleKmsCryptoKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gkck.ref.Append("id"))
}

// ImportOnly returns a reference to field import_only of google_kms_crypto_key.
func (gkck googleKmsCryptoKeyAttributes) ImportOnly() terra.BoolValue {
	return terra.ReferenceAsBool(gkck.ref.Append("import_only"))
}

// KeyRing returns a reference to field key_ring of google_kms_crypto_key.
func (gkck googleKmsCryptoKeyAttributes) KeyRing() terra.StringValue {
	return terra.ReferenceAsString(gkck.ref.Append("key_ring"))
}

// Labels returns a reference to field labels of google_kms_crypto_key.
func (gkck googleKmsCryptoKeyAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gkck.ref.Append("labels"))
}

// Name returns a reference to field name of google_kms_crypto_key.
func (gkck googleKmsCryptoKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gkck.ref.Append("name"))
}

// Purpose returns a reference to field purpose of google_kms_crypto_key.
func (gkck googleKmsCryptoKeyAttributes) Purpose() terra.StringValue {
	return terra.ReferenceAsString(gkck.ref.Append("purpose"))
}

// RotationPeriod returns a reference to field rotation_period of google_kms_crypto_key.
func (gkck googleKmsCryptoKeyAttributes) RotationPeriod() terra.StringValue {
	return terra.ReferenceAsString(gkck.ref.Append("rotation_period"))
}

// SkipInitialVersionCreation returns a reference to field skip_initial_version_creation of google_kms_crypto_key.
func (gkck googleKmsCryptoKeyAttributes) SkipInitialVersionCreation() terra.BoolValue {
	return terra.ReferenceAsBool(gkck.ref.Append("skip_initial_version_creation"))
}

// TerraformLabels returns a reference to field terraform_labels of google_kms_crypto_key.
func (gkck googleKmsCryptoKeyAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gkck.ref.Append("terraform_labels"))
}

func (gkck googleKmsCryptoKeyAttributes) Primary() terra.ListValue[PrimaryAttributes] {
	return terra.ReferenceAsList[PrimaryAttributes](gkck.ref.Append("primary"))
}

func (gkck googleKmsCryptoKeyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gkck.ref.Append("timeouts"))
}

func (gkck googleKmsCryptoKeyAttributes) VersionTemplate() terra.ListValue[VersionTemplateAttributes] {
	return terra.ReferenceAsList[VersionTemplateAttributes](gkck.ref.Append("version_template"))
}

type googleKmsCryptoKeyState struct {
	CryptoKeyBackend           string                 `json:"crypto_key_backend"`
	DestroyScheduledDuration   string                 `json:"destroy_scheduled_duration"`
	EffectiveLabels            map[string]string      `json:"effective_labels"`
	Id                         string                 `json:"id"`
	ImportOnly                 bool                   `json:"import_only"`
	KeyRing                    string                 `json:"key_ring"`
	Labels                     map[string]string      `json:"labels"`
	Name                       string                 `json:"name"`
	Purpose                    string                 `json:"purpose"`
	RotationPeriod             string                 `json:"rotation_period"`
	SkipInitialVersionCreation bool                   `json:"skip_initial_version_creation"`
	TerraformLabels            map[string]string      `json:"terraform_labels"`
	Primary                    []PrimaryState         `json:"primary"`
	Timeouts                   *TimeoutsState         `json:"timeouts"`
	VersionTemplate            []VersionTemplateState `json:"version_template"`
}
