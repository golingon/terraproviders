// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloudbuildv2_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_cloudbuildv2_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCloudbuildv2ConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcc *Resource) Type() string {
	return "google_cloudbuildv2_connection"
}

// LocalName returns the local name for [Resource].
func (gcc *Resource) LocalName() string {
	return gcc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcc *Resource) Configuration() interface{} {
	return gcc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcc *Resource) Dependencies() terra.Dependencies {
	return gcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcc *Resource) Attributes() googleCloudbuildv2ConnectionAttributes {
	return googleCloudbuildv2ConnectionAttributes{ref: terra.ReferenceResource(gcc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcc *Resource) ImportState(state io.Reader) error {
	gcc.state = &googleCloudbuildv2ConnectionState{}
	if err := json.NewDecoder(state).Decode(gcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcc.Type(), gcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcc *Resource) State() (*googleCloudbuildv2ConnectionState, bool) {
	return gcc.state, gcc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcc *Resource) StateMust() *googleCloudbuildv2ConnectionState {
	if gcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcc.Type(), gcc.LocalName()))
	}
	return gcc.state
}

// Args contains the configurations for google_cloudbuildv2_connection.
type Args struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// GithubConfig: optional
	GithubConfig *GithubConfig `hcl:"github_config,block"`
	// GithubEnterpriseConfig: optional
	GithubEnterpriseConfig *GithubEnterpriseConfig `hcl:"github_enterprise_config,block"`
	// GitlabConfig: optional
	GitlabConfig *GitlabConfig `hcl:"gitlab_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleCloudbuildv2ConnectionAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_cloudbuildv2_connection.
func (gcc googleCloudbuildv2ConnectionAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcc.ref.Append("annotations"))
}

// CreateTime returns a reference to field create_time of google_cloudbuildv2_connection.
func (gcc googleCloudbuildv2ConnectionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("create_time"))
}

// Disabled returns a reference to field disabled of google_cloudbuildv2_connection.
func (gcc googleCloudbuildv2ConnectionAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("disabled"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_cloudbuildv2_connection.
func (gcc googleCloudbuildv2ConnectionAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcc.ref.Append("effective_annotations"))
}

// Etag returns a reference to field etag of google_cloudbuildv2_connection.
func (gcc googleCloudbuildv2ConnectionAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("etag"))
}

// Id returns a reference to field id of google_cloudbuildv2_connection.
func (gcc googleCloudbuildv2ConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("id"))
}

// Location returns a reference to field location of google_cloudbuildv2_connection.
func (gcc googleCloudbuildv2ConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("location"))
}

// Name returns a reference to field name of google_cloudbuildv2_connection.
func (gcc googleCloudbuildv2ConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("name"))
}

// Project returns a reference to field project of google_cloudbuildv2_connection.
func (gcc googleCloudbuildv2ConnectionAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("project"))
}

// Reconciling returns a reference to field reconciling of google_cloudbuildv2_connection.
func (gcc googleCloudbuildv2ConnectionAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceAsBool(gcc.ref.Append("reconciling"))
}

// UpdateTime returns a reference to field update_time of google_cloudbuildv2_connection.
func (gcc googleCloudbuildv2ConnectionAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gcc.ref.Append("update_time"))
}

func (gcc googleCloudbuildv2ConnectionAttributes) InstallationState() terra.ListValue[InstallationStateAttributes] {
	return terra.ReferenceAsList[InstallationStateAttributes](gcc.ref.Append("installation_state"))
}

func (gcc googleCloudbuildv2ConnectionAttributes) GithubConfig() terra.ListValue[GithubConfigAttributes] {
	return terra.ReferenceAsList[GithubConfigAttributes](gcc.ref.Append("github_config"))
}

func (gcc googleCloudbuildv2ConnectionAttributes) GithubEnterpriseConfig() terra.ListValue[GithubEnterpriseConfigAttributes] {
	return terra.ReferenceAsList[GithubEnterpriseConfigAttributes](gcc.ref.Append("github_enterprise_config"))
}

func (gcc googleCloudbuildv2ConnectionAttributes) GitlabConfig() terra.ListValue[GitlabConfigAttributes] {
	return terra.ReferenceAsList[GitlabConfigAttributes](gcc.ref.Append("gitlab_config"))
}

func (gcc googleCloudbuildv2ConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcc.ref.Append("timeouts"))
}

type googleCloudbuildv2ConnectionState struct {
	Annotations            map[string]string             `json:"annotations"`
	CreateTime             string                        `json:"create_time"`
	Disabled               bool                          `json:"disabled"`
	EffectiveAnnotations   map[string]string             `json:"effective_annotations"`
	Etag                   string                        `json:"etag"`
	Id                     string                        `json:"id"`
	Location               string                        `json:"location"`
	Name                   string                        `json:"name"`
	Project                string                        `json:"project"`
	Reconciling            bool                          `json:"reconciling"`
	UpdateTime             string                        `json:"update_time"`
	InstallationState      []InstallationStateState      `json:"installation_state"`
	GithubConfig           []GithubConfigState           `json:"github_config"`
	GithubEnterpriseConfig []GithubEnterpriseConfigState `json:"github_enterprise_config"`
	GitlabConfig           []GitlabConfigState           `json:"gitlab_config"`
	Timeouts               *TimeoutsState                `json:"timeouts"`
}
