// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloud_run_v2_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BinaryAuthorization struct {
	// BreakglassJustification: string, optional
	BreakglassJustification terra.StringValue `hcl:"breakglass_justification,attr"`
	// UseDefault: bool, optional
	UseDefault terra.BoolValue `hcl:"use_default,attr"`
}

type Template struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// EncryptionKey: string, optional
	EncryptionKey terra.StringValue `hcl:"encryption_key,attr"`
	// ExecutionEnvironment: string, optional
	ExecutionEnvironment terra.StringValue `hcl:"execution_environment,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// MaxInstanceRequestConcurrency: number, optional
	MaxInstanceRequestConcurrency terra.NumberValue `hcl:"max_instance_request_concurrency,attr"`
	// Revision: string, optional
	Revision terra.StringValue `hcl:"revision,attr"`
	// ServiceAccount: string, optional
	ServiceAccount terra.StringValue `hcl:"service_account,attr"`
	// SessionAffinity: bool, optional
	SessionAffinity terra.BoolValue `hcl:"session_affinity,attr"`
	// Timeout: string, optional
	Timeout terra.StringValue `hcl:"timeout,attr"`
	// TemplateContainers: min=0
	Containers []TemplateContainers `hcl:"containers,block" validate:"min=0"`
	// TemplateScaling: optional
	Scaling *TemplateScaling `hcl:"scaling,block"`
	// TemplateVolumes: min=0
	Volumes []TemplateVolumes `hcl:"volumes,block" validate:"min=0"`
	// TemplateVpcAccess: optional
	VpcAccess *TemplateVpcAccess `hcl:"vpc_access,block"`
}

type TemplateContainers struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Command: list of string, optional
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// DependsOn: list of string, optional
	DependsOn terra.ListValue[terra.StringValue] `hcl:"depends_on,attr"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// WorkingDir: string, optional
	WorkingDir terra.StringValue `hcl:"working_dir,attr"`
	// TemplateContainersEnv: min=0
	Env []TemplateContainersEnv `hcl:"env,block" validate:"min=0"`
	// TemplateContainersLivenessProbe: optional
	LivenessProbe *TemplateContainersLivenessProbe `hcl:"liveness_probe,block"`
	// TemplateContainersPorts: optional
	Ports *TemplateContainersPorts `hcl:"ports,block"`
	// TemplateContainersResources: optional
	Resources *TemplateContainersResources `hcl:"resources,block"`
	// TemplateContainersStartupProbe: optional
	StartupProbe *TemplateContainersStartupProbe `hcl:"startup_probe,block"`
	// TemplateContainersVolumeMounts: min=0
	VolumeMounts []TemplateContainersVolumeMounts `hcl:"volume_mounts,block" validate:"min=0"`
}

type TemplateContainersEnv struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
	// TemplateContainersEnvValueSource: optional
	ValueSource *TemplateContainersEnvValueSource `hcl:"value_source,block"`
}

type TemplateContainersEnvValueSource struct {
	// TemplateContainers2Daa6B87: optional
	SecretKeyRef *TemplateContainers2Daa6B87 `hcl:"secret_key_ref,block"`
}

type TemplateContainers2Daa6B87 struct {
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type TemplateContainersLivenessProbe struct {
	// FailureThreshold: number, optional
	FailureThreshold terra.NumberValue `hcl:"failure_threshold,attr"`
	// InitialDelaySeconds: number, optional
	InitialDelaySeconds terra.NumberValue `hcl:"initial_delay_seconds,attr"`
	// PeriodSeconds: number, optional
	PeriodSeconds terra.NumberValue `hcl:"period_seconds,attr"`
	// TimeoutSeconds: number, optional
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// TemplateContainersLivenessProbeGrpc: optional
	Grpc *TemplateContainersLivenessProbeGrpc `hcl:"grpc,block"`
	// TemplateContainersLivenessProbeHttpGet: optional
	HttpGet *TemplateContainersLivenessProbeHttpGet `hcl:"http_get,block"`
	// TemplateContainersLivenessProbeTcpSocket: optional
	TcpSocket *TemplateContainersLivenessProbeTcpSocket `hcl:"tcp_socket,block"`
}

type TemplateContainersLivenessProbeGrpc struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
}

type TemplateContainersLivenessProbeHttpGet struct {
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// TemplateContainers32Db2D95: min=0
	HttpHeaders []TemplateContainers32Db2D95 `hcl:"http_headers,block" validate:"min=0"`
}

type TemplateContainers32Db2D95 struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type TemplateContainersLivenessProbeTcpSocket struct {
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type TemplateContainersPorts struct {
	// ContainerPort: number, optional
	ContainerPort terra.NumberValue `hcl:"container_port,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type TemplateContainersResources struct {
	// CpuIdle: bool, optional
	CpuIdle terra.BoolValue `hcl:"cpu_idle,attr"`
	// Limits: map of string, optional
	Limits terra.MapValue[terra.StringValue] `hcl:"limits,attr"`
	// StartupCpuBoost: bool, optional
	StartupCpuBoost terra.BoolValue `hcl:"startup_cpu_boost,attr"`
}

type TemplateContainersStartupProbe struct {
	// FailureThreshold: number, optional
	FailureThreshold terra.NumberValue `hcl:"failure_threshold,attr"`
	// InitialDelaySeconds: number, optional
	InitialDelaySeconds terra.NumberValue `hcl:"initial_delay_seconds,attr"`
	// PeriodSeconds: number, optional
	PeriodSeconds terra.NumberValue `hcl:"period_seconds,attr"`
	// TimeoutSeconds: number, optional
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// TemplateContainersStartupProbeGrpc: optional
	Grpc *TemplateContainersStartupProbeGrpc `hcl:"grpc,block"`
	// TemplateContainersStartupProbeHttpGet: optional
	HttpGet *TemplateContainersStartupProbeHttpGet `hcl:"http_get,block"`
	// TemplateContainersStartupProbeTcpSocket: optional
	TcpSocket *TemplateContainersStartupProbeTcpSocket `hcl:"tcp_socket,block"`
}

type TemplateContainersStartupProbeGrpc struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
}

type TemplateContainersStartupProbeHttpGet struct {
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// TemplateContainers9Abba116: min=0
	HttpHeaders []TemplateContainers9Abba116 `hcl:"http_headers,block" validate:"min=0"`
}

type TemplateContainers9Abba116 struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type TemplateContainersStartupProbeTcpSocket struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
}

type TemplateContainersVolumeMounts struct {
	// MountPath: string, required
	MountPath terra.StringValue `hcl:"mount_path,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type TemplateScaling struct {
	// MaxInstanceCount: number, optional
	MaxInstanceCount terra.NumberValue `hcl:"max_instance_count,attr"`
	// MinInstanceCount: number, optional
	MinInstanceCount terra.NumberValue `hcl:"min_instance_count,attr"`
}

type TemplateVolumes struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TemplateVolumesCloudSqlInstance: optional
	CloudSqlInstance *TemplateVolumesCloudSqlInstance `hcl:"cloud_sql_instance,block"`
	// TemplateVolumesGcs: optional
	Gcs *TemplateVolumesGcs `hcl:"gcs,block"`
	// TemplateVolumesNfs: optional
	Nfs *TemplateVolumesNfs `hcl:"nfs,block"`
	// TemplateVolumesSecret: optional
	Secret *TemplateVolumesSecret `hcl:"secret,block"`
}

type TemplateVolumesCloudSqlInstance struct {
	// Instances: set of string, optional
	Instances terra.SetValue[terra.StringValue] `hcl:"instances,attr"`
}

type TemplateVolumesGcs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// ReadOnly: bool, optional
	ReadOnly terra.BoolValue `hcl:"read_only,attr"`
}

type TemplateVolumesNfs struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// ReadOnly: bool, optional
	ReadOnly terra.BoolValue `hcl:"read_only,attr"`
	// Server: string, required
	Server terra.StringValue `hcl:"server,attr" validate:"required"`
}

type TemplateVolumesSecret struct {
	// DefaultMode: number, optional
	DefaultMode terra.NumberValue `hcl:"default_mode,attr"`
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
	// TemplateVolumesSecretItems: min=0
	Items []TemplateVolumesSecretItems `hcl:"items,block" validate:"min=0"`
}

type TemplateVolumesSecretItems struct {
	// Mode: number, optional
	Mode terra.NumberValue `hcl:"mode,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type TemplateVpcAccess struct {
	// Connector: string, optional
	Connector terra.StringValue `hcl:"connector,attr"`
	// Egress: string, optional
	Egress terra.StringValue `hcl:"egress,attr"`
	// TemplateVpcAccessNetworkInterfaces: min=0
	NetworkInterfaces []TemplateVpcAccessNetworkInterfaces `hcl:"network_interfaces,block" validate:"min=0"`
}

type TemplateVpcAccessNetworkInterfaces struct {
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// Subnetwork: string, optional
	Subnetwork terra.StringValue `hcl:"subnetwork,attr"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Traffic struct {
	// Percent: number, optional
	Percent terra.NumberValue `hcl:"percent,attr"`
	// Revision: string, optional
	Revision terra.StringValue `hcl:"revision,attr"`
	// Tag: string, optional
	Tag terra.StringValue `hcl:"tag,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) ExecutionReason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("execution_reason"))
}

func (c ConditionsAttributes) LastTransitionTime() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("last_transition_time"))
}

func (c ConditionsAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("message"))
}

func (c ConditionsAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("reason"))
}

func (c ConditionsAttributes) RevisionReason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("revision_reason"))
}

func (c ConditionsAttributes) Severity() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("severity"))
}

func (c ConditionsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("state"))
}

func (c ConditionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type TerminalConditionAttributes struct {
	ref terra.Reference
}

func (tc TerminalConditionAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TerminalConditionAttributes) InternalWithRef(ref terra.Reference) TerminalConditionAttributes {
	return TerminalConditionAttributes{ref: ref}
}

func (tc TerminalConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TerminalConditionAttributes) ExecutionReason() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("execution_reason"))
}

func (tc TerminalConditionAttributes) LastTransitionTime() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("last_transition_time"))
}

func (tc TerminalConditionAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("message"))
}

func (tc TerminalConditionAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("reason"))
}

func (tc TerminalConditionAttributes) RevisionReason() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("revision_reason"))
}

func (tc TerminalConditionAttributes) Severity() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("severity"))
}

func (tc TerminalConditionAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("state"))
}

func (tc TerminalConditionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("type"))
}

type TrafficStatusesAttributes struct {
	ref terra.Reference
}

func (ts TrafficStatusesAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TrafficStatusesAttributes) InternalWithRef(ref terra.Reference) TrafficStatusesAttributes {
	return TrafficStatusesAttributes{ref: ref}
}

func (ts TrafficStatusesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TrafficStatusesAttributes) Percent() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("percent"))
}

func (ts TrafficStatusesAttributes) Revision() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("revision"))
}

func (ts TrafficStatusesAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("tag"))
}

func (ts TrafficStatusesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("type"))
}

func (ts TrafficStatusesAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("uri"))
}

type BinaryAuthorizationAttributes struct {
	ref terra.Reference
}

func (ba BinaryAuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return ba.ref, nil
}

func (ba BinaryAuthorizationAttributes) InternalWithRef(ref terra.Reference) BinaryAuthorizationAttributes {
	return BinaryAuthorizationAttributes{ref: ref}
}

func (ba BinaryAuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ba.ref.InternalTokens()
}

func (ba BinaryAuthorizationAttributes) BreakglassJustification() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("breakglass_justification"))
}

func (ba BinaryAuthorizationAttributes) UseDefault() terra.BoolValue {
	return terra.ReferenceAsBool(ba.ref.Append("use_default"))
}

type TemplateAttributes struct {
	ref terra.Reference
}

func (t TemplateAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TemplateAttributes) InternalWithRef(ref terra.Reference) TemplateAttributes {
	return TemplateAttributes{ref: ref}
}

func (t TemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TemplateAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](t.ref.Append("annotations"))
}

func (t TemplateAttributes) EncryptionKey() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("encryption_key"))
}

func (t TemplateAttributes) ExecutionEnvironment() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("execution_environment"))
}

func (t TemplateAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](t.ref.Append("labels"))
}

func (t TemplateAttributes) MaxInstanceRequestConcurrency() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("max_instance_request_concurrency"))
}

func (t TemplateAttributes) Revision() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("revision"))
}

func (t TemplateAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("service_account"))
}

func (t TemplateAttributes) SessionAffinity() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("session_affinity"))
}

func (t TemplateAttributes) Timeout() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("timeout"))
}

func (t TemplateAttributes) Containers() terra.ListValue[TemplateContainersAttributes] {
	return terra.ReferenceAsList[TemplateContainersAttributes](t.ref.Append("containers"))
}

func (t TemplateAttributes) Scaling() terra.ListValue[TemplateScalingAttributes] {
	return terra.ReferenceAsList[TemplateScalingAttributes](t.ref.Append("scaling"))
}

func (t TemplateAttributes) Volumes() terra.ListValue[TemplateVolumesAttributes] {
	return terra.ReferenceAsList[TemplateVolumesAttributes](t.ref.Append("volumes"))
}

func (t TemplateAttributes) VpcAccess() terra.ListValue[TemplateVpcAccessAttributes] {
	return terra.ReferenceAsList[TemplateVpcAccessAttributes](t.ref.Append("vpc_access"))
}

type TemplateContainersAttributes struct {
	ref terra.Reference
}

func (c TemplateContainersAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c TemplateContainersAttributes) InternalWithRef(ref terra.Reference) TemplateContainersAttributes {
	return TemplateContainersAttributes{ref: ref}
}

func (c TemplateContainersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c TemplateContainersAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("args"))
}

func (c TemplateContainersAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("command"))
}

func (c TemplateContainersAttributes) DependsOn() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("depends_on"))
}

func (c TemplateContainersAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c TemplateContainersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c TemplateContainersAttributes) WorkingDir() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("working_dir"))
}

func (c TemplateContainersAttributes) Env() terra.ListValue[TemplateContainersEnvAttributes] {
	return terra.ReferenceAsList[TemplateContainersEnvAttributes](c.ref.Append("env"))
}

func (c TemplateContainersAttributes) LivenessProbe() terra.ListValue[TemplateContainersLivenessProbeAttributes] {
	return terra.ReferenceAsList[TemplateContainersLivenessProbeAttributes](c.ref.Append("liveness_probe"))
}

func (c TemplateContainersAttributes) Ports() terra.ListValue[TemplateContainersPortsAttributes] {
	return terra.ReferenceAsList[TemplateContainersPortsAttributes](c.ref.Append("ports"))
}

func (c TemplateContainersAttributes) Resources() terra.ListValue[TemplateContainersResourcesAttributes] {
	return terra.ReferenceAsList[TemplateContainersResourcesAttributes](c.ref.Append("resources"))
}

func (c TemplateContainersAttributes) StartupProbe() terra.ListValue[TemplateContainersStartupProbeAttributes] {
	return terra.ReferenceAsList[TemplateContainersStartupProbeAttributes](c.ref.Append("startup_probe"))
}

func (c TemplateContainersAttributes) VolumeMounts() terra.ListValue[TemplateContainersVolumeMountsAttributes] {
	return terra.ReferenceAsList[TemplateContainersVolumeMountsAttributes](c.ref.Append("volume_mounts"))
}

type TemplateContainersEnvAttributes struct {
	ref terra.Reference
}

func (e TemplateContainersEnvAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e TemplateContainersEnvAttributes) InternalWithRef(ref terra.Reference) TemplateContainersEnvAttributes {
	return TemplateContainersEnvAttributes{ref: ref}
}

func (e TemplateContainersEnvAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e TemplateContainersEnvAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e TemplateContainersEnvAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

func (e TemplateContainersEnvAttributes) ValueSource() terra.ListValue[TemplateContainersEnvValueSourceAttributes] {
	return terra.ReferenceAsList[TemplateContainersEnvValueSourceAttributes](e.ref.Append("value_source"))
}

type TemplateContainersEnvValueSourceAttributes struct {
	ref terra.Reference
}

func (vs TemplateContainersEnvValueSourceAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs TemplateContainersEnvValueSourceAttributes) InternalWithRef(ref terra.Reference) TemplateContainersEnvValueSourceAttributes {
	return TemplateContainersEnvValueSourceAttributes{ref: ref}
}

func (vs TemplateContainersEnvValueSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs TemplateContainersEnvValueSourceAttributes) SecretKeyRef() terra.ListValue[TemplateContainers2Daa6B87Attributes] {
	return terra.ReferenceAsList[TemplateContainers2Daa6B87Attributes](vs.ref.Append("secret_key_ref"))
}

type TemplateContainers2Daa6B87Attributes struct {
	ref terra.Reference
}

func (skr TemplateContainers2Daa6B87Attributes) InternalRef() (terra.Reference, error) {
	return skr.ref, nil
}

func (skr TemplateContainers2Daa6B87Attributes) InternalWithRef(ref terra.Reference) TemplateContainers2Daa6B87Attributes {
	return TemplateContainers2Daa6B87Attributes{ref: ref}
}

func (skr TemplateContainers2Daa6B87Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return skr.ref.InternalTokens()
}

func (skr TemplateContainers2Daa6B87Attributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(skr.ref.Append("secret"))
}

func (skr TemplateContainers2Daa6B87Attributes) Version() terra.StringValue {
	return terra.ReferenceAsString(skr.ref.Append("version"))
}

type TemplateContainersLivenessProbeAttributes struct {
	ref terra.Reference
}

func (lp TemplateContainersLivenessProbeAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp TemplateContainersLivenessProbeAttributes) InternalWithRef(ref terra.Reference) TemplateContainersLivenessProbeAttributes {
	return TemplateContainersLivenessProbeAttributes{ref: ref}
}

func (lp TemplateContainersLivenessProbeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp TemplateContainersLivenessProbeAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("failure_threshold"))
}

func (lp TemplateContainersLivenessProbeAttributes) InitialDelaySeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("initial_delay_seconds"))
}

func (lp TemplateContainersLivenessProbeAttributes) PeriodSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("period_seconds"))
}

func (lp TemplateContainersLivenessProbeAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("timeout_seconds"))
}

func (lp TemplateContainersLivenessProbeAttributes) Grpc() terra.ListValue[TemplateContainersLivenessProbeGrpcAttributes] {
	return terra.ReferenceAsList[TemplateContainersLivenessProbeGrpcAttributes](lp.ref.Append("grpc"))
}

func (lp TemplateContainersLivenessProbeAttributes) HttpGet() terra.ListValue[TemplateContainersLivenessProbeHttpGetAttributes] {
	return terra.ReferenceAsList[TemplateContainersLivenessProbeHttpGetAttributes](lp.ref.Append("http_get"))
}

func (lp TemplateContainersLivenessProbeAttributes) TcpSocket() terra.ListValue[TemplateContainersLivenessProbeTcpSocketAttributes] {
	return terra.ReferenceAsList[TemplateContainersLivenessProbeTcpSocketAttributes](lp.ref.Append("tcp_socket"))
}

type TemplateContainersLivenessProbeGrpcAttributes struct {
	ref terra.Reference
}

func (g TemplateContainersLivenessProbeGrpcAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g TemplateContainersLivenessProbeGrpcAttributes) InternalWithRef(ref terra.Reference) TemplateContainersLivenessProbeGrpcAttributes {
	return TemplateContainersLivenessProbeGrpcAttributes{ref: ref}
}

func (g TemplateContainersLivenessProbeGrpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g TemplateContainersLivenessProbeGrpcAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("port"))
}

func (g TemplateContainersLivenessProbeGrpcAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("service"))
}

type TemplateContainersLivenessProbeHttpGetAttributes struct {
	ref terra.Reference
}

func (hg TemplateContainersLivenessProbeHttpGetAttributes) InternalRef() (terra.Reference, error) {
	return hg.ref, nil
}

func (hg TemplateContainersLivenessProbeHttpGetAttributes) InternalWithRef(ref terra.Reference) TemplateContainersLivenessProbeHttpGetAttributes {
	return TemplateContainersLivenessProbeHttpGetAttributes{ref: ref}
}

func (hg TemplateContainersLivenessProbeHttpGetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hg.ref.InternalTokens()
}

func (hg TemplateContainersLivenessProbeHttpGetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hg.ref.Append("path"))
}

func (hg TemplateContainersLivenessProbeHttpGetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(hg.ref.Append("port"))
}

func (hg TemplateContainersLivenessProbeHttpGetAttributes) HttpHeaders() terra.ListValue[TemplateContainers32Db2D95Attributes] {
	return terra.ReferenceAsList[TemplateContainers32Db2D95Attributes](hg.ref.Append("http_headers"))
}

type TemplateContainers32Db2D95Attributes struct {
	ref terra.Reference
}

func (hh TemplateContainers32Db2D95Attributes) InternalRef() (terra.Reference, error) {
	return hh.ref, nil
}

func (hh TemplateContainers32Db2D95Attributes) InternalWithRef(ref terra.Reference) TemplateContainers32Db2D95Attributes {
	return TemplateContainers32Db2D95Attributes{ref: ref}
}

func (hh TemplateContainers32Db2D95Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return hh.ref.InternalTokens()
}

func (hh TemplateContainers32Db2D95Attributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("name"))
}

func (hh TemplateContainers32Db2D95Attributes) Value() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("value"))
}

type TemplateContainersLivenessProbeTcpSocketAttributes struct {
	ref terra.Reference
}

func (ts TemplateContainersLivenessProbeTcpSocketAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TemplateContainersLivenessProbeTcpSocketAttributes) InternalWithRef(ref terra.Reference) TemplateContainersLivenessProbeTcpSocketAttributes {
	return TemplateContainersLivenessProbeTcpSocketAttributes{ref: ref}
}

func (ts TemplateContainersLivenessProbeTcpSocketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TemplateContainersLivenessProbeTcpSocketAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("port"))
}

type TemplateContainersPortsAttributes struct {
	ref terra.Reference
}

func (p TemplateContainersPortsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p TemplateContainersPortsAttributes) InternalWithRef(ref terra.Reference) TemplateContainersPortsAttributes {
	return TemplateContainersPortsAttributes{ref: ref}
}

func (p TemplateContainersPortsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p TemplateContainersPortsAttributes) ContainerPort() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("container_port"))
}

func (p TemplateContainersPortsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

type TemplateContainersResourcesAttributes struct {
	ref terra.Reference
}

func (r TemplateContainersResourcesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r TemplateContainersResourcesAttributes) InternalWithRef(ref terra.Reference) TemplateContainersResourcesAttributes {
	return TemplateContainersResourcesAttributes{ref: ref}
}

func (r TemplateContainersResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r TemplateContainersResourcesAttributes) CpuIdle() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("cpu_idle"))
}

func (r TemplateContainersResourcesAttributes) Limits() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("limits"))
}

func (r TemplateContainersResourcesAttributes) StartupCpuBoost() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("startup_cpu_boost"))
}

type TemplateContainersStartupProbeAttributes struct {
	ref terra.Reference
}

func (sp TemplateContainersStartupProbeAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp TemplateContainersStartupProbeAttributes) InternalWithRef(ref terra.Reference) TemplateContainersStartupProbeAttributes {
	return TemplateContainersStartupProbeAttributes{ref: ref}
}

func (sp TemplateContainersStartupProbeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp TemplateContainersStartupProbeAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("failure_threshold"))
}

func (sp TemplateContainersStartupProbeAttributes) InitialDelaySeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("initial_delay_seconds"))
}

func (sp TemplateContainersStartupProbeAttributes) PeriodSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("period_seconds"))
}

func (sp TemplateContainersStartupProbeAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("timeout_seconds"))
}

func (sp TemplateContainersStartupProbeAttributes) Grpc() terra.ListValue[TemplateContainersStartupProbeGrpcAttributes] {
	return terra.ReferenceAsList[TemplateContainersStartupProbeGrpcAttributes](sp.ref.Append("grpc"))
}

func (sp TemplateContainersStartupProbeAttributes) HttpGet() terra.ListValue[TemplateContainersStartupProbeHttpGetAttributes] {
	return terra.ReferenceAsList[TemplateContainersStartupProbeHttpGetAttributes](sp.ref.Append("http_get"))
}

func (sp TemplateContainersStartupProbeAttributes) TcpSocket() terra.ListValue[TemplateContainersStartupProbeTcpSocketAttributes] {
	return terra.ReferenceAsList[TemplateContainersStartupProbeTcpSocketAttributes](sp.ref.Append("tcp_socket"))
}

type TemplateContainersStartupProbeGrpcAttributes struct {
	ref terra.Reference
}

func (g TemplateContainersStartupProbeGrpcAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g TemplateContainersStartupProbeGrpcAttributes) InternalWithRef(ref terra.Reference) TemplateContainersStartupProbeGrpcAttributes {
	return TemplateContainersStartupProbeGrpcAttributes{ref: ref}
}

func (g TemplateContainersStartupProbeGrpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g TemplateContainersStartupProbeGrpcAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("port"))
}

func (g TemplateContainersStartupProbeGrpcAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("service"))
}

type TemplateContainersStartupProbeHttpGetAttributes struct {
	ref terra.Reference
}

func (hg TemplateContainersStartupProbeHttpGetAttributes) InternalRef() (terra.Reference, error) {
	return hg.ref, nil
}

func (hg TemplateContainersStartupProbeHttpGetAttributes) InternalWithRef(ref terra.Reference) TemplateContainersStartupProbeHttpGetAttributes {
	return TemplateContainersStartupProbeHttpGetAttributes{ref: ref}
}

func (hg TemplateContainersStartupProbeHttpGetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hg.ref.InternalTokens()
}

func (hg TemplateContainersStartupProbeHttpGetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hg.ref.Append("path"))
}

func (hg TemplateContainersStartupProbeHttpGetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(hg.ref.Append("port"))
}

func (hg TemplateContainersStartupProbeHttpGetAttributes) HttpHeaders() terra.ListValue[TemplateContainers9Abba116Attributes] {
	return terra.ReferenceAsList[TemplateContainers9Abba116Attributes](hg.ref.Append("http_headers"))
}

type TemplateContainers9Abba116Attributes struct {
	ref terra.Reference
}

func (hh TemplateContainers9Abba116Attributes) InternalRef() (terra.Reference, error) {
	return hh.ref, nil
}

func (hh TemplateContainers9Abba116Attributes) InternalWithRef(ref terra.Reference) TemplateContainers9Abba116Attributes {
	return TemplateContainers9Abba116Attributes{ref: ref}
}

func (hh TemplateContainers9Abba116Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return hh.ref.InternalTokens()
}

func (hh TemplateContainers9Abba116Attributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("name"))
}

func (hh TemplateContainers9Abba116Attributes) Value() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("value"))
}

type TemplateContainersStartupProbeTcpSocketAttributes struct {
	ref terra.Reference
}

func (ts TemplateContainersStartupProbeTcpSocketAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TemplateContainersStartupProbeTcpSocketAttributes) InternalWithRef(ref terra.Reference) TemplateContainersStartupProbeTcpSocketAttributes {
	return TemplateContainersStartupProbeTcpSocketAttributes{ref: ref}
}

func (ts TemplateContainersStartupProbeTcpSocketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TemplateContainersStartupProbeTcpSocketAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("port"))
}

type TemplateContainersVolumeMountsAttributes struct {
	ref terra.Reference
}

func (vm TemplateContainersVolumeMountsAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm TemplateContainersVolumeMountsAttributes) InternalWithRef(ref terra.Reference) TemplateContainersVolumeMountsAttributes {
	return TemplateContainersVolumeMountsAttributes{ref: ref}
}

func (vm TemplateContainersVolumeMountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm TemplateContainersVolumeMountsAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("mount_path"))
}

func (vm TemplateContainersVolumeMountsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("name"))
}

type TemplateScalingAttributes struct {
	ref terra.Reference
}

func (s TemplateScalingAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s TemplateScalingAttributes) InternalWithRef(ref terra.Reference) TemplateScalingAttributes {
	return TemplateScalingAttributes{ref: ref}
}

func (s TemplateScalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s TemplateScalingAttributes) MaxInstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("max_instance_count"))
}

func (s TemplateScalingAttributes) MinInstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("min_instance_count"))
}

type TemplateVolumesAttributes struct {
	ref terra.Reference
}

func (v TemplateVolumesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v TemplateVolumesAttributes) InternalWithRef(ref terra.Reference) TemplateVolumesAttributes {
	return TemplateVolumesAttributes{ref: ref}
}

func (v TemplateVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v TemplateVolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v TemplateVolumesAttributes) CloudSqlInstance() terra.ListValue[TemplateVolumesCloudSqlInstanceAttributes] {
	return terra.ReferenceAsList[TemplateVolumesCloudSqlInstanceAttributes](v.ref.Append("cloud_sql_instance"))
}

func (v TemplateVolumesAttributes) Gcs() terra.ListValue[TemplateVolumesGcsAttributes] {
	return terra.ReferenceAsList[TemplateVolumesGcsAttributes](v.ref.Append("gcs"))
}

func (v TemplateVolumesAttributes) Nfs() terra.ListValue[TemplateVolumesNfsAttributes] {
	return terra.ReferenceAsList[TemplateVolumesNfsAttributes](v.ref.Append("nfs"))
}

func (v TemplateVolumesAttributes) Secret() terra.ListValue[TemplateVolumesSecretAttributes] {
	return terra.ReferenceAsList[TemplateVolumesSecretAttributes](v.ref.Append("secret"))
}

type TemplateVolumesCloudSqlInstanceAttributes struct {
	ref terra.Reference
}

func (csi TemplateVolumesCloudSqlInstanceAttributes) InternalRef() (terra.Reference, error) {
	return csi.ref, nil
}

func (csi TemplateVolumesCloudSqlInstanceAttributes) InternalWithRef(ref terra.Reference) TemplateVolumesCloudSqlInstanceAttributes {
	return TemplateVolumesCloudSqlInstanceAttributes{ref: ref}
}

func (csi TemplateVolumesCloudSqlInstanceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return csi.ref.InternalTokens()
}

func (csi TemplateVolumesCloudSqlInstanceAttributes) Instances() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](csi.ref.Append("instances"))
}

type TemplateVolumesGcsAttributes struct {
	ref terra.Reference
}

func (g TemplateVolumesGcsAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g TemplateVolumesGcsAttributes) InternalWithRef(ref terra.Reference) TemplateVolumesGcsAttributes {
	return TemplateVolumesGcsAttributes{ref: ref}
}

func (g TemplateVolumesGcsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g TemplateVolumesGcsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("bucket"))
}

func (g TemplateVolumesGcsAttributes) ReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("read_only"))
}

type TemplateVolumesNfsAttributes struct {
	ref terra.Reference
}

func (n TemplateVolumesNfsAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n TemplateVolumesNfsAttributes) InternalWithRef(ref terra.Reference) TemplateVolumesNfsAttributes {
	return TemplateVolumesNfsAttributes{ref: ref}
}

func (n TemplateVolumesNfsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n TemplateVolumesNfsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("path"))
}

func (n TemplateVolumesNfsAttributes) ReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(n.ref.Append("read_only"))
}

func (n TemplateVolumesNfsAttributes) Server() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("server"))
}

type TemplateVolumesSecretAttributes struct {
	ref terra.Reference
}

func (s TemplateVolumesSecretAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s TemplateVolumesSecretAttributes) InternalWithRef(ref terra.Reference) TemplateVolumesSecretAttributes {
	return TemplateVolumesSecretAttributes{ref: ref}
}

func (s TemplateVolumesSecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s TemplateVolumesSecretAttributes) DefaultMode() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("default_mode"))
}

func (s TemplateVolumesSecretAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret"))
}

func (s TemplateVolumesSecretAttributes) Items() terra.ListValue[TemplateVolumesSecretItemsAttributes] {
	return terra.ReferenceAsList[TemplateVolumesSecretItemsAttributes](s.ref.Append("items"))
}

type TemplateVolumesSecretItemsAttributes struct {
	ref terra.Reference
}

func (i TemplateVolumesSecretItemsAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i TemplateVolumesSecretItemsAttributes) InternalWithRef(ref terra.Reference) TemplateVolumesSecretItemsAttributes {
	return TemplateVolumesSecretItemsAttributes{ref: ref}
}

func (i TemplateVolumesSecretItemsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i TemplateVolumesSecretItemsAttributes) Mode() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("mode"))
}

func (i TemplateVolumesSecretItemsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("path"))
}

func (i TemplateVolumesSecretItemsAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("version"))
}

type TemplateVpcAccessAttributes struct {
	ref terra.Reference
}

func (va TemplateVpcAccessAttributes) InternalRef() (terra.Reference, error) {
	return va.ref, nil
}

func (va TemplateVpcAccessAttributes) InternalWithRef(ref terra.Reference) TemplateVpcAccessAttributes {
	return TemplateVpcAccessAttributes{ref: ref}
}

func (va TemplateVpcAccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return va.ref.InternalTokens()
}

func (va TemplateVpcAccessAttributes) Connector() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("connector"))
}

func (va TemplateVpcAccessAttributes) Egress() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("egress"))
}

func (va TemplateVpcAccessAttributes) NetworkInterfaces() terra.ListValue[TemplateVpcAccessNetworkInterfacesAttributes] {
	return terra.ReferenceAsList[TemplateVpcAccessNetworkInterfacesAttributes](va.ref.Append("network_interfaces"))
}

type TemplateVpcAccessNetworkInterfacesAttributes struct {
	ref terra.Reference
}

func (ni TemplateVpcAccessNetworkInterfacesAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni TemplateVpcAccessNetworkInterfacesAttributes) InternalWithRef(ref terra.Reference) TemplateVpcAccessNetworkInterfacesAttributes {
	return TemplateVpcAccessNetworkInterfacesAttributes{ref: ref}
}

func (ni TemplateVpcAccessNetworkInterfacesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni TemplateVpcAccessNetworkInterfacesAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("network"))
}

func (ni TemplateVpcAccessNetworkInterfacesAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("subnetwork"))
}

func (ni TemplateVpcAccessNetworkInterfacesAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ni.ref.Append("tags"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TrafficAttributes struct {
	ref terra.Reference
}

func (t TrafficAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TrafficAttributes) InternalWithRef(ref terra.Reference) TrafficAttributes {
	return TrafficAttributes{ref: ref}
}

func (t TrafficAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TrafficAttributes) Percent() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("percent"))
}

func (t TrafficAttributes) Revision() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("revision"))
}

func (t TrafficAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("tag"))
}

func (t TrafficAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("type"))
}

type ConditionsState struct {
	ExecutionReason    string `json:"execution_reason"`
	LastTransitionTime string `json:"last_transition_time"`
	Message            string `json:"message"`
	Reason             string `json:"reason"`
	RevisionReason     string `json:"revision_reason"`
	Severity           string `json:"severity"`
	State              string `json:"state"`
	Type               string `json:"type"`
}

type TerminalConditionState struct {
	ExecutionReason    string `json:"execution_reason"`
	LastTransitionTime string `json:"last_transition_time"`
	Message            string `json:"message"`
	Reason             string `json:"reason"`
	RevisionReason     string `json:"revision_reason"`
	Severity           string `json:"severity"`
	State              string `json:"state"`
	Type               string `json:"type"`
}

type TrafficStatusesState struct {
	Percent  float64 `json:"percent"`
	Revision string  `json:"revision"`
	Tag      string  `json:"tag"`
	Type     string  `json:"type"`
	Uri      string  `json:"uri"`
}

type BinaryAuthorizationState struct {
	BreakglassJustification string `json:"breakglass_justification"`
	UseDefault              bool   `json:"use_default"`
}

type TemplateState struct {
	Annotations                   map[string]string         `json:"annotations"`
	EncryptionKey                 string                    `json:"encryption_key"`
	ExecutionEnvironment          string                    `json:"execution_environment"`
	Labels                        map[string]string         `json:"labels"`
	MaxInstanceRequestConcurrency float64                   `json:"max_instance_request_concurrency"`
	Revision                      string                    `json:"revision"`
	ServiceAccount                string                    `json:"service_account"`
	SessionAffinity               bool                      `json:"session_affinity"`
	Timeout                       string                    `json:"timeout"`
	Containers                    []TemplateContainersState `json:"containers"`
	Scaling                       []TemplateScalingState    `json:"scaling"`
	Volumes                       []TemplateVolumesState    `json:"volumes"`
	VpcAccess                     []TemplateVpcAccessState  `json:"vpc_access"`
}

type TemplateContainersState struct {
	Args          []string                               `json:"args"`
	Command       []string                               `json:"command"`
	DependsOn     []string                               `json:"depends_on"`
	Image         string                                 `json:"image"`
	Name          string                                 `json:"name"`
	WorkingDir    string                                 `json:"working_dir"`
	Env           []TemplateContainersEnvState           `json:"env"`
	LivenessProbe []TemplateContainersLivenessProbeState `json:"liveness_probe"`
	Ports         []TemplateContainersPortsState         `json:"ports"`
	Resources     []TemplateContainersResourcesState     `json:"resources"`
	StartupProbe  []TemplateContainersStartupProbeState  `json:"startup_probe"`
	VolumeMounts  []TemplateContainersVolumeMountsState  `json:"volume_mounts"`
}

type TemplateContainersEnvState struct {
	Name        string                                  `json:"name"`
	Value       string                                  `json:"value"`
	ValueSource []TemplateContainersEnvValueSourceState `json:"value_source"`
}

type TemplateContainersEnvValueSourceState struct {
	SecretKeyRef []TemplateContainers2Daa6B87State `json:"secret_key_ref"`
}

type TemplateContainers2Daa6B87State struct {
	Secret  string `json:"secret"`
	Version string `json:"version"`
}

type TemplateContainersLivenessProbeState struct {
	FailureThreshold    float64                                         `json:"failure_threshold"`
	InitialDelaySeconds float64                                         `json:"initial_delay_seconds"`
	PeriodSeconds       float64                                         `json:"period_seconds"`
	TimeoutSeconds      float64                                         `json:"timeout_seconds"`
	Grpc                []TemplateContainersLivenessProbeGrpcState      `json:"grpc"`
	HttpGet             []TemplateContainersLivenessProbeHttpGetState   `json:"http_get"`
	TcpSocket           []TemplateContainersLivenessProbeTcpSocketState `json:"tcp_socket"`
}

type TemplateContainersLivenessProbeGrpcState struct {
	Port    float64 `json:"port"`
	Service string  `json:"service"`
}

type TemplateContainersLivenessProbeHttpGetState struct {
	Path        string                            `json:"path"`
	Port        float64                           `json:"port"`
	HttpHeaders []TemplateContainers32Db2D95State `json:"http_headers"`
}

type TemplateContainers32Db2D95State struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TemplateContainersLivenessProbeTcpSocketState struct {
	Port float64 `json:"port"`
}

type TemplateContainersPortsState struct {
	ContainerPort float64 `json:"container_port"`
	Name          string  `json:"name"`
}

type TemplateContainersResourcesState struct {
	CpuIdle         bool              `json:"cpu_idle"`
	Limits          map[string]string `json:"limits"`
	StartupCpuBoost bool              `json:"startup_cpu_boost"`
}

type TemplateContainersStartupProbeState struct {
	FailureThreshold    float64                                        `json:"failure_threshold"`
	InitialDelaySeconds float64                                        `json:"initial_delay_seconds"`
	PeriodSeconds       float64                                        `json:"period_seconds"`
	TimeoutSeconds      float64                                        `json:"timeout_seconds"`
	Grpc                []TemplateContainersStartupProbeGrpcState      `json:"grpc"`
	HttpGet             []TemplateContainersStartupProbeHttpGetState   `json:"http_get"`
	TcpSocket           []TemplateContainersStartupProbeTcpSocketState `json:"tcp_socket"`
}

type TemplateContainersStartupProbeGrpcState struct {
	Port    float64 `json:"port"`
	Service string  `json:"service"`
}

type TemplateContainersStartupProbeHttpGetState struct {
	Path        string                            `json:"path"`
	Port        float64                           `json:"port"`
	HttpHeaders []TemplateContainers9Abba116State `json:"http_headers"`
}

type TemplateContainers9Abba116State struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TemplateContainersStartupProbeTcpSocketState struct {
	Port float64 `json:"port"`
}

type TemplateContainersVolumeMountsState struct {
	MountPath string `json:"mount_path"`
	Name      string `json:"name"`
}

type TemplateScalingState struct {
	MaxInstanceCount float64 `json:"max_instance_count"`
	MinInstanceCount float64 `json:"min_instance_count"`
}

type TemplateVolumesState struct {
	Name             string                                 `json:"name"`
	CloudSqlInstance []TemplateVolumesCloudSqlInstanceState `json:"cloud_sql_instance"`
	Gcs              []TemplateVolumesGcsState              `json:"gcs"`
	Nfs              []TemplateVolumesNfsState              `json:"nfs"`
	Secret           []TemplateVolumesSecretState           `json:"secret"`
}

type TemplateVolumesCloudSqlInstanceState struct {
	Instances []string `json:"instances"`
}

type TemplateVolumesGcsState struct {
	Bucket   string `json:"bucket"`
	ReadOnly bool   `json:"read_only"`
}

type TemplateVolumesNfsState struct {
	Path     string `json:"path"`
	ReadOnly bool   `json:"read_only"`
	Server   string `json:"server"`
}

type TemplateVolumesSecretState struct {
	DefaultMode float64                           `json:"default_mode"`
	Secret      string                            `json:"secret"`
	Items       []TemplateVolumesSecretItemsState `json:"items"`
}

type TemplateVolumesSecretItemsState struct {
	Mode    float64 `json:"mode"`
	Path    string  `json:"path"`
	Version string  `json:"version"`
}

type TemplateVpcAccessState struct {
	Connector         string                                    `json:"connector"`
	Egress            string                                    `json:"egress"`
	NetworkInterfaces []TemplateVpcAccessNetworkInterfacesState `json:"network_interfaces"`
}

type TemplateVpcAccessNetworkInterfacesState struct {
	Network    string   `json:"network"`
	Subnetwork string   `json:"subnetwork"`
	Tags       []string `json:"tags"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TrafficState struct {
	Percent  float64 `json:"percent"`
	Revision string  `json:"revision"`
	Tag      string  `json:"tag"`
	Type     string  `json:"type"`
}
