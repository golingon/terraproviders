// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apigee_envgroup

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_apigee_envgroup.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApigeeEnvgroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gae *Resource) Type() string {
	return "google_apigee_envgroup"
}

// LocalName returns the local name for [Resource].
func (gae *Resource) LocalName() string {
	return gae.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gae *Resource) Configuration() interface{} {
	return gae.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gae *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gae)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gae *Resource) Dependencies() terra.Dependencies {
	return gae.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gae *Resource) LifecycleManagement() *terra.Lifecycle {
	return gae.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gae *Resource) Attributes() googleApigeeEnvgroupAttributes {
	return googleApigeeEnvgroupAttributes{ref: terra.ReferenceResource(gae)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gae *Resource) ImportState(state io.Reader) error {
	gae.state = &googleApigeeEnvgroupState{}
	if err := json.NewDecoder(state).Decode(gae.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gae.Type(), gae.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gae *Resource) State() (*googleApigeeEnvgroupState, bool) {
	return gae.state, gae.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gae *Resource) StateMust() *googleApigeeEnvgroupState {
	if gae.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gae.Type(), gae.LocalName()))
	}
	return gae.state
}

// Args contains the configurations for google_apigee_envgroup.
type Args struct {
	// Hostnames: list of string, optional
	Hostnames terra.ListValue[terra.StringValue] `hcl:"hostnames,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OrgId: string, required
	OrgId terra.StringValue `hcl:"org_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApigeeEnvgroupAttributes struct {
	ref terra.Reference
}

// Hostnames returns a reference to field hostnames of google_apigee_envgroup.
func (gae googleApigeeEnvgroupAttributes) Hostnames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gae.ref.Append("hostnames"))
}

// Id returns a reference to field id of google_apigee_envgroup.
func (gae googleApigeeEnvgroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gae.ref.Append("id"))
}

// Name returns a reference to field name of google_apigee_envgroup.
func (gae googleApigeeEnvgroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gae.ref.Append("name"))
}

// OrgId returns a reference to field org_id of google_apigee_envgroup.
func (gae googleApigeeEnvgroupAttributes) OrgId() terra.StringValue {
	return terra.ReferenceAsString(gae.ref.Append("org_id"))
}

func (gae googleApigeeEnvgroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gae.ref.Append("timeouts"))
}

type googleApigeeEnvgroupState struct {
	Hostnames []string       `json:"hostnames"`
	Id        string         `json:"id"`
	Name      string         `json:"name"`
	OrgId     string         `json:"org_id"`
	Timeouts  *TimeoutsState `json:"timeouts"`
}
