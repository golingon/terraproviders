// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_table_iam_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_table_iam_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryTableIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbtip *Resource) Type() string {
	return "google_bigquery_table_iam_policy"
}

// LocalName returns the local name for [Resource].
func (gbtip *Resource) LocalName() string {
	return gbtip.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbtip *Resource) Configuration() interface{} {
	return gbtip.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbtip *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbtip)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbtip *Resource) Dependencies() terra.Dependencies {
	return gbtip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbtip *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbtip.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbtip *Resource) Attributes() googleBigqueryTableIamPolicyAttributes {
	return googleBigqueryTableIamPolicyAttributes{ref: terra.ReferenceResource(gbtip)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbtip *Resource) ImportState(state io.Reader) error {
	gbtip.state = &googleBigqueryTableIamPolicyState{}
	if err := json.NewDecoder(state).Decode(gbtip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbtip.Type(), gbtip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbtip *Resource) State() (*googleBigqueryTableIamPolicyState, bool) {
	return gbtip.state, gbtip.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbtip *Resource) StateMust() *googleBigqueryTableIamPolicyState {
	if gbtip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbtip.Type(), gbtip.LocalName()))
	}
	return gbtip.state
}

// Args contains the configurations for google_bigquery_table_iam_policy.
type Args struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
}

type googleBigqueryTableIamPolicyAttributes struct {
	ref terra.Reference
}

// DatasetId returns a reference to field dataset_id of google_bigquery_table_iam_policy.
func (gbtip googleBigqueryTableIamPolicyAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(gbtip.ref.Append("dataset_id"))
}

// Etag returns a reference to field etag of google_bigquery_table_iam_policy.
func (gbtip googleBigqueryTableIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gbtip.ref.Append("etag"))
}

// Id returns a reference to field id of google_bigquery_table_iam_policy.
func (gbtip googleBigqueryTableIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbtip.ref.Append("id"))
}

// PolicyData returns a reference to field policy_data of google_bigquery_table_iam_policy.
func (gbtip googleBigqueryTableIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(gbtip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_bigquery_table_iam_policy.
func (gbtip googleBigqueryTableIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbtip.ref.Append("project"))
}

// TableId returns a reference to field table_id of google_bigquery_table_iam_policy.
func (gbtip googleBigqueryTableIamPolicyAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(gbtip.ref.Append("table_id"))
}

type googleBigqueryTableIamPolicyState struct {
	DatasetId  string `json:"dataset_id"`
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	TableId    string `json:"table_id"`
}
