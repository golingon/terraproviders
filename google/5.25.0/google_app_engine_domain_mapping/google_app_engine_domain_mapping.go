// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_app_engine_domain_mapping

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_app_engine_domain_mapping.
type Resource struct {
	Name      string
	Args      Args
	state     *googleAppEngineDomainMappingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gaedm *Resource) Type() string {
	return "google_app_engine_domain_mapping"
}

// LocalName returns the local name for [Resource].
func (gaedm *Resource) LocalName() string {
	return gaedm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gaedm *Resource) Configuration() interface{} {
	return gaedm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gaedm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gaedm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gaedm *Resource) Dependencies() terra.Dependencies {
	return gaedm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gaedm *Resource) LifecycleManagement() *terra.Lifecycle {
	return gaedm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gaedm *Resource) Attributes() googleAppEngineDomainMappingAttributes {
	return googleAppEngineDomainMappingAttributes{ref: terra.ReferenceResource(gaedm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gaedm *Resource) ImportState(state io.Reader) error {
	gaedm.state = &googleAppEngineDomainMappingState{}
	if err := json.NewDecoder(state).Decode(gaedm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gaedm.Type(), gaedm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gaedm *Resource) State() (*googleAppEngineDomainMappingState, bool) {
	return gaedm.state, gaedm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gaedm *Resource) StateMust() *googleAppEngineDomainMappingState {
	if gaedm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gaedm.Type(), gaedm.LocalName()))
	}
	return gaedm.state
}

// Args contains the configurations for google_app_engine_domain_mapping.
type Args struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OverrideStrategy: string, optional
	OverrideStrategy terra.StringValue `hcl:"override_strategy,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SslSettings: optional
	SslSettings *SslSettings `hcl:"ssl_settings,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleAppEngineDomainMappingAttributes struct {
	ref terra.Reference
}

// DomainName returns a reference to field domain_name of google_app_engine_domain_mapping.
func (gaedm googleAppEngineDomainMappingAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(gaedm.ref.Append("domain_name"))
}

// Id returns a reference to field id of google_app_engine_domain_mapping.
func (gaedm googleAppEngineDomainMappingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gaedm.ref.Append("id"))
}

// Name returns a reference to field name of google_app_engine_domain_mapping.
func (gaedm googleAppEngineDomainMappingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gaedm.ref.Append("name"))
}

// OverrideStrategy returns a reference to field override_strategy of google_app_engine_domain_mapping.
func (gaedm googleAppEngineDomainMappingAttributes) OverrideStrategy() terra.StringValue {
	return terra.ReferenceAsString(gaedm.ref.Append("override_strategy"))
}

// Project returns a reference to field project of google_app_engine_domain_mapping.
func (gaedm googleAppEngineDomainMappingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gaedm.ref.Append("project"))
}

func (gaedm googleAppEngineDomainMappingAttributes) ResourceRecords() terra.ListValue[ResourceRecordsAttributes] {
	return terra.ReferenceAsList[ResourceRecordsAttributes](gaedm.ref.Append("resource_records"))
}

func (gaedm googleAppEngineDomainMappingAttributes) SslSettings() terra.ListValue[SslSettingsAttributes] {
	return terra.ReferenceAsList[SslSettingsAttributes](gaedm.ref.Append("ssl_settings"))
}

func (gaedm googleAppEngineDomainMappingAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gaedm.ref.Append("timeouts"))
}

type googleAppEngineDomainMappingState struct {
	DomainName       string                 `json:"domain_name"`
	Id               string                 `json:"id"`
	Name             string                 `json:"name"`
	OverrideStrategy string                 `json:"override_strategy"`
	Project          string                 `json:"project"`
	ResourceRecords  []ResourceRecordsState `json:"resource_records"`
	SslSettings      []SslSettingsState     `json:"ssl_settings"`
	Timeouts         *TimeoutsState         `json:"timeouts"`
}
