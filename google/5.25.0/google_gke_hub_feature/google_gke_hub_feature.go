// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_gke_hub_feature

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_gke_hub_feature.
type Resource struct {
	Name      string
	Args      Args
	state     *googleGkeHubFeatureState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gghf *Resource) Type() string {
	return "google_gke_hub_feature"
}

// LocalName returns the local name for [Resource].
func (gghf *Resource) LocalName() string {
	return gghf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gghf *Resource) Configuration() interface{} {
	return gghf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gghf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gghf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gghf *Resource) Dependencies() terra.Dependencies {
	return gghf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gghf *Resource) LifecycleManagement() *terra.Lifecycle {
	return gghf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gghf *Resource) Attributes() googleGkeHubFeatureAttributes {
	return googleGkeHubFeatureAttributes{ref: terra.ReferenceResource(gghf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gghf *Resource) ImportState(state io.Reader) error {
	gghf.state = &googleGkeHubFeatureState{}
	if err := json.NewDecoder(state).Decode(gghf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gghf.Type(), gghf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gghf *Resource) State() (*googleGkeHubFeatureState, bool) {
	return gghf.state, gghf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gghf *Resource) StateMust() *googleGkeHubFeatureState {
	if gghf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gghf.Type(), gghf.LocalName()))
	}
	return gghf.state
}

// Args contains the configurations for google_gke_hub_feature.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// FleetDefaultMemberConfig: optional
	FleetDefaultMemberConfig *FleetDefaultMemberConfig `hcl:"fleet_default_member_config,block"`
	// Spec: optional
	Spec *Spec `hcl:"spec,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleGkeHubFeatureAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_gke_hub_feature.
func (gghf googleGkeHubFeatureAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gghf.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_gke_hub_feature.
func (gghf googleGkeHubFeatureAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(gghf.ref.Append("delete_time"))
}

// EffectiveLabels returns a reference to field effective_labels of google_gke_hub_feature.
func (gghf googleGkeHubFeatureAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gghf.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_gke_hub_feature.
func (gghf googleGkeHubFeatureAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gghf.ref.Append("id"))
}

// Labels returns a reference to field labels of google_gke_hub_feature.
func (gghf googleGkeHubFeatureAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gghf.ref.Append("labels"))
}

// Location returns a reference to field location of google_gke_hub_feature.
func (gghf googleGkeHubFeatureAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gghf.ref.Append("location"))
}

// Name returns a reference to field name of google_gke_hub_feature.
func (gghf googleGkeHubFeatureAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gghf.ref.Append("name"))
}

// Project returns a reference to field project of google_gke_hub_feature.
func (gghf googleGkeHubFeatureAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gghf.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_gke_hub_feature.
func (gghf googleGkeHubFeatureAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gghf.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_gke_hub_feature.
func (gghf googleGkeHubFeatureAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gghf.ref.Append("update_time"))
}

func (gghf googleGkeHubFeatureAttributes) ResourceState() terra.ListValue[ResourceStateAttributes] {
	return terra.ReferenceAsList[ResourceStateAttributes](gghf.ref.Append("resource_state"))
}

func (gghf googleGkeHubFeatureAttributes) State() terra.ListValue[StateAttributes] {
	return terra.ReferenceAsList[StateAttributes](gghf.ref.Append("state"))
}

func (gghf googleGkeHubFeatureAttributes) FleetDefaultMemberConfig() terra.ListValue[FleetDefaultMemberConfigAttributes] {
	return terra.ReferenceAsList[FleetDefaultMemberConfigAttributes](gghf.ref.Append("fleet_default_member_config"))
}

func (gghf googleGkeHubFeatureAttributes) Spec() terra.ListValue[SpecAttributes] {
	return terra.ReferenceAsList[SpecAttributes](gghf.ref.Append("spec"))
}

func (gghf googleGkeHubFeatureAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gghf.ref.Append("timeouts"))
}

type googleGkeHubFeatureState struct {
	CreateTime               string                          `json:"create_time"`
	DeleteTime               string                          `json:"delete_time"`
	EffectiveLabels          map[string]string               `json:"effective_labels"`
	Id                       string                          `json:"id"`
	Labels                   map[string]string               `json:"labels"`
	Location                 string                          `json:"location"`
	Name                     string                          `json:"name"`
	Project                  string                          `json:"project"`
	TerraformLabels          map[string]string               `json:"terraform_labels"`
	UpdateTime               string                          `json:"update_time"`
	ResourceState            []ResourceStateState            `json:"resource_state"`
	State                    []StateState                    `json:"state"`
	FleetDefaultMemberConfig []FleetDefaultMemberConfigState `json:"fleet_default_member_config"`
	Spec                     []SpecState                     `json:"spec"`
	Timeouts                 *TimeoutsState                  `json:"timeouts"`
}
