// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apikeys_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_apikeys_key.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApikeysKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gak *Resource) Type() string {
	return "google_apikeys_key"
}

// LocalName returns the local name for [Resource].
func (gak *Resource) LocalName() string {
	return gak.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gak *Resource) Configuration() interface{} {
	return gak.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gak *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gak)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gak *Resource) Dependencies() terra.Dependencies {
	return gak.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gak *Resource) LifecycleManagement() *terra.Lifecycle {
	return gak.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gak *Resource) Attributes() googleApikeysKeyAttributes {
	return googleApikeysKeyAttributes{ref: terra.ReferenceResource(gak)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gak *Resource) ImportState(state io.Reader) error {
	gak.state = &googleApikeysKeyState{}
	if err := json.NewDecoder(state).Decode(gak.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gak.Type(), gak.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gak *Resource) State() (*googleApikeysKeyState, bool) {
	return gak.state, gak.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gak *Resource) StateMust() *googleApikeysKeyState {
	if gak.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gak.Type(), gak.LocalName()))
	}
	return gak.state
}

// Args contains the configurations for google_apikeys_key.
type Args struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Restrictions: optional
	Restrictions *Restrictions `hcl:"restrictions,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApikeysKeyAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of google_apikeys_key.
func (gak googleApikeysKeyAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gak.ref.Append("display_name"))
}

// Id returns a reference to field id of google_apikeys_key.
func (gak googleApikeysKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gak.ref.Append("id"))
}

// KeyString returns a reference to field key_string of google_apikeys_key.
func (gak googleApikeysKeyAttributes) KeyString() terra.StringValue {
	return terra.ReferenceAsString(gak.ref.Append("key_string"))
}

// Name returns a reference to field name of google_apikeys_key.
func (gak googleApikeysKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gak.ref.Append("name"))
}

// Project returns a reference to field project of google_apikeys_key.
func (gak googleApikeysKeyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gak.ref.Append("project"))
}

// Uid returns a reference to field uid of google_apikeys_key.
func (gak googleApikeysKeyAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gak.ref.Append("uid"))
}

func (gak googleApikeysKeyAttributes) Restrictions() terra.ListValue[RestrictionsAttributes] {
	return terra.ReferenceAsList[RestrictionsAttributes](gak.ref.Append("restrictions"))
}

func (gak googleApikeysKeyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gak.ref.Append("timeouts"))
}

type googleApikeysKeyState struct {
	DisplayName  string              `json:"display_name"`
	Id           string              `json:"id"`
	KeyString    string              `json:"key_string"`
	Name         string              `json:"name"`
	Project      string              `json:"project"`
	Uid          string              `json:"uid"`
	Restrictions []RestrictionsState `json:"restrictions"`
	Timeouts     *TimeoutsState      `json:"timeouts"`
}
