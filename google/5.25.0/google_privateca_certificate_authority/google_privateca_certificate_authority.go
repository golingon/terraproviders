// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_privateca_certificate_authority

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_privateca_certificate_authority.
type Resource struct {
	Name      string
	Args      Args
	state     *googlePrivatecaCertificateAuthorityState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gpca *Resource) Type() string {
	return "google_privateca_certificate_authority"
}

// LocalName returns the local name for [Resource].
func (gpca *Resource) LocalName() string {
	return gpca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gpca *Resource) Configuration() interface{} {
	return gpca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gpca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gpca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gpca *Resource) Dependencies() terra.Dependencies {
	return gpca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gpca *Resource) LifecycleManagement() *terra.Lifecycle {
	return gpca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gpca *Resource) Attributes() googlePrivatecaCertificateAuthorityAttributes {
	return googlePrivatecaCertificateAuthorityAttributes{ref: terra.ReferenceResource(gpca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gpca *Resource) ImportState(state io.Reader) error {
	gpca.state = &googlePrivatecaCertificateAuthorityState{}
	if err := json.NewDecoder(state).Decode(gpca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gpca.Type(), gpca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gpca *Resource) State() (*googlePrivatecaCertificateAuthorityState, bool) {
	return gpca.state, gpca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gpca *Resource) StateMust() *googlePrivatecaCertificateAuthorityState {
	if gpca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gpca.Type(), gpca.LocalName()))
	}
	return gpca.state
}

// Args contains the configurations for google_privateca_certificate_authority.
type Args struct {
	// CertificateAuthorityId: string, required
	CertificateAuthorityId terra.StringValue `hcl:"certificate_authority_id,attr" validate:"required"`
	// DeletionProtection: bool, optional
	DeletionProtection terra.BoolValue `hcl:"deletion_protection,attr"`
	// DesiredState: string, optional
	DesiredState terra.StringValue `hcl:"desired_state,attr"`
	// GcsBucket: string, optional
	GcsBucket terra.StringValue `hcl:"gcs_bucket,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreActiveCertificatesOnDeletion: bool, optional
	IgnoreActiveCertificatesOnDeletion terra.BoolValue `hcl:"ignore_active_certificates_on_deletion,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Lifetime: string, optional
	Lifetime terra.StringValue `hcl:"lifetime,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// PemCaCertificate: string, optional
	PemCaCertificate terra.StringValue `hcl:"pem_ca_certificate,attr"`
	// Pool: string, required
	Pool terra.StringValue `hcl:"pool,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SkipGracePeriod: bool, optional
	SkipGracePeriod terra.BoolValue `hcl:"skip_grace_period,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Config: required
	Config *Config `hcl:"config,block" validate:"required"`
	// KeySpec: required
	KeySpec *KeySpec `hcl:"key_spec,block" validate:"required"`
	// SubordinateConfig: optional
	SubordinateConfig *SubordinateConfig `hcl:"subordinate_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googlePrivatecaCertificateAuthorityAttributes struct {
	ref terra.Reference
}

// CertificateAuthorityId returns a reference to field certificate_authority_id of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) CertificateAuthorityId() terra.StringValue {
	return terra.ReferenceAsString(gpca.ref.Append("certificate_authority_id"))
}

// CreateTime returns a reference to field create_time of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gpca.ref.Append("create_time"))
}

// DeletionProtection returns a reference to field deletion_protection of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) DeletionProtection() terra.BoolValue {
	return terra.ReferenceAsBool(gpca.ref.Append("deletion_protection"))
}

// DesiredState returns a reference to field desired_state of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceAsString(gpca.ref.Append("desired_state"))
}

// EffectiveLabels returns a reference to field effective_labels of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpca.ref.Append("effective_labels"))
}

// GcsBucket returns a reference to field gcs_bucket of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) GcsBucket() terra.StringValue {
	return terra.ReferenceAsString(gpca.ref.Append("gcs_bucket"))
}

// Id returns a reference to field id of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gpca.ref.Append("id"))
}

// IgnoreActiveCertificatesOnDeletion returns a reference to field ignore_active_certificates_on_deletion of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) IgnoreActiveCertificatesOnDeletion() terra.BoolValue {
	return terra.ReferenceAsBool(gpca.ref.Append("ignore_active_certificates_on_deletion"))
}

// Labels returns a reference to field labels of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpca.ref.Append("labels"))
}

// Lifetime returns a reference to field lifetime of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) Lifetime() terra.StringValue {
	return terra.ReferenceAsString(gpca.ref.Append("lifetime"))
}

// Location returns a reference to field location of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gpca.ref.Append("location"))
}

// Name returns a reference to field name of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gpca.ref.Append("name"))
}

// PemCaCertificate returns a reference to field pem_ca_certificate of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) PemCaCertificate() terra.StringValue {
	return terra.ReferenceAsString(gpca.ref.Append("pem_ca_certificate"))
}

// PemCaCertificates returns a reference to field pem_ca_certificates of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) PemCaCertificates() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gpca.ref.Append("pem_ca_certificates"))
}

// Pool returns a reference to field pool of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) Pool() terra.StringValue {
	return terra.ReferenceAsString(gpca.ref.Append("pool"))
}

// Project returns a reference to field project of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gpca.ref.Append("project"))
}

// SkipGracePeriod returns a reference to field skip_grace_period of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) SkipGracePeriod() terra.BoolValue {
	return terra.ReferenceAsBool(gpca.ref.Append("skip_grace_period"))
}

// State returns a reference to field state of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gpca.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpca.ref.Append("terraform_labels"))
}

// Type returns a reference to field type of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gpca.ref.Append("type"))
}

// UpdateTime returns a reference to field update_time of google_privateca_certificate_authority.
func (gpca googlePrivatecaCertificateAuthorityAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gpca.ref.Append("update_time"))
}

func (gpca googlePrivatecaCertificateAuthorityAttributes) AccessUrls() terra.ListValue[AccessUrlsAttributes] {
	return terra.ReferenceAsList[AccessUrlsAttributes](gpca.ref.Append("access_urls"))
}

func (gpca googlePrivatecaCertificateAuthorityAttributes) Config() terra.ListValue[ConfigAttributes] {
	return terra.ReferenceAsList[ConfigAttributes](gpca.ref.Append("config"))
}

func (gpca googlePrivatecaCertificateAuthorityAttributes) KeySpec() terra.ListValue[KeySpecAttributes] {
	return terra.ReferenceAsList[KeySpecAttributes](gpca.ref.Append("key_spec"))
}

func (gpca googlePrivatecaCertificateAuthorityAttributes) SubordinateConfig() terra.ListValue[SubordinateConfigAttributes] {
	return terra.ReferenceAsList[SubordinateConfigAttributes](gpca.ref.Append("subordinate_config"))
}

func (gpca googlePrivatecaCertificateAuthorityAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gpca.ref.Append("timeouts"))
}

type googlePrivatecaCertificateAuthorityState struct {
	CertificateAuthorityId             string                   `json:"certificate_authority_id"`
	CreateTime                         string                   `json:"create_time"`
	DeletionProtection                 bool                     `json:"deletion_protection"`
	DesiredState                       string                   `json:"desired_state"`
	EffectiveLabels                    map[string]string        `json:"effective_labels"`
	GcsBucket                          string                   `json:"gcs_bucket"`
	Id                                 string                   `json:"id"`
	IgnoreActiveCertificatesOnDeletion bool                     `json:"ignore_active_certificates_on_deletion"`
	Labels                             map[string]string        `json:"labels"`
	Lifetime                           string                   `json:"lifetime"`
	Location                           string                   `json:"location"`
	Name                               string                   `json:"name"`
	PemCaCertificate                   string                   `json:"pem_ca_certificate"`
	PemCaCertificates                  []string                 `json:"pem_ca_certificates"`
	Pool                               string                   `json:"pool"`
	Project                            string                   `json:"project"`
	SkipGracePeriod                    bool                     `json:"skip_grace_period"`
	State                              string                   `json:"state"`
	TerraformLabels                    map[string]string        `json:"terraform_labels"`
	Type                               string                   `json:"type"`
	UpdateTime                         string                   `json:"update_time"`
	AccessUrls                         []AccessUrlsState        `json:"access_urls"`
	Config                             []ConfigState            `json:"config"`
	KeySpec                            []KeySpecState           `json:"key_spec"`
	SubordinateConfig                  []SubordinateConfigState `json:"subordinate_config"`
	Timeouts                           *TimeoutsState           `json:"timeouts"`
}
