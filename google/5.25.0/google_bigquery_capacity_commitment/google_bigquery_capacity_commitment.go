// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_capacity_commitment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_capacity_commitment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryCapacityCommitmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbcc *Resource) Type() string {
	return "google_bigquery_capacity_commitment"
}

// LocalName returns the local name for [Resource].
func (gbcc *Resource) LocalName() string {
	return gbcc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbcc *Resource) Configuration() interface{} {
	return gbcc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbcc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbcc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbcc *Resource) Dependencies() terra.Dependencies {
	return gbcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbcc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbcc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbcc *Resource) Attributes() googleBigqueryCapacityCommitmentAttributes {
	return googleBigqueryCapacityCommitmentAttributes{ref: terra.ReferenceResource(gbcc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbcc *Resource) ImportState(state io.Reader) error {
	gbcc.state = &googleBigqueryCapacityCommitmentState{}
	if err := json.NewDecoder(state).Decode(gbcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbcc.Type(), gbcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbcc *Resource) State() (*googleBigqueryCapacityCommitmentState, bool) {
	return gbcc.state, gbcc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbcc *Resource) StateMust() *googleBigqueryCapacityCommitmentState {
	if gbcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbcc.Type(), gbcc.LocalName()))
	}
	return gbcc.state
}

// Args contains the configurations for google_bigquery_capacity_commitment.
type Args struct {
	// CapacityCommitmentId: string, optional
	CapacityCommitmentId terra.StringValue `hcl:"capacity_commitment_id,attr"`
	// Edition: string, optional
	Edition terra.StringValue `hcl:"edition,attr"`
	// EnforceSingleAdminProjectPerOrg: string, optional
	EnforceSingleAdminProjectPerOrg terra.StringValue `hcl:"enforce_single_admin_project_per_org,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Plan: string, required
	Plan terra.StringValue `hcl:"plan,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RenewalPlan: string, optional
	RenewalPlan terra.StringValue `hcl:"renewal_plan,attr"`
	// SlotCount: number, required
	SlotCount terra.NumberValue `hcl:"slot_count,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBigqueryCapacityCommitmentAttributes struct {
	ref terra.Reference
}

// CapacityCommitmentId returns a reference to field capacity_commitment_id of google_bigquery_capacity_commitment.
func (gbcc googleBigqueryCapacityCommitmentAttributes) CapacityCommitmentId() terra.StringValue {
	return terra.ReferenceAsString(gbcc.ref.Append("capacity_commitment_id"))
}

// CommitmentEndTime returns a reference to field commitment_end_time of google_bigquery_capacity_commitment.
func (gbcc googleBigqueryCapacityCommitmentAttributes) CommitmentEndTime() terra.StringValue {
	return terra.ReferenceAsString(gbcc.ref.Append("commitment_end_time"))
}

// CommitmentStartTime returns a reference to field commitment_start_time of google_bigquery_capacity_commitment.
func (gbcc googleBigqueryCapacityCommitmentAttributes) CommitmentStartTime() terra.StringValue {
	return terra.ReferenceAsString(gbcc.ref.Append("commitment_start_time"))
}

// Edition returns a reference to field edition of google_bigquery_capacity_commitment.
func (gbcc googleBigqueryCapacityCommitmentAttributes) Edition() terra.StringValue {
	return terra.ReferenceAsString(gbcc.ref.Append("edition"))
}

// EnforceSingleAdminProjectPerOrg returns a reference to field enforce_single_admin_project_per_org of google_bigquery_capacity_commitment.
func (gbcc googleBigqueryCapacityCommitmentAttributes) EnforceSingleAdminProjectPerOrg() terra.StringValue {
	return terra.ReferenceAsString(gbcc.ref.Append("enforce_single_admin_project_per_org"))
}

// Id returns a reference to field id of google_bigquery_capacity_commitment.
func (gbcc googleBigqueryCapacityCommitmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbcc.ref.Append("id"))
}

// Location returns a reference to field location of google_bigquery_capacity_commitment.
func (gbcc googleBigqueryCapacityCommitmentAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbcc.ref.Append("location"))
}

// Name returns a reference to field name of google_bigquery_capacity_commitment.
func (gbcc googleBigqueryCapacityCommitmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbcc.ref.Append("name"))
}

// Plan returns a reference to field plan of google_bigquery_capacity_commitment.
func (gbcc googleBigqueryCapacityCommitmentAttributes) Plan() terra.StringValue {
	return terra.ReferenceAsString(gbcc.ref.Append("plan"))
}

// Project returns a reference to field project of google_bigquery_capacity_commitment.
func (gbcc googleBigqueryCapacityCommitmentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbcc.ref.Append("project"))
}

// RenewalPlan returns a reference to field renewal_plan of google_bigquery_capacity_commitment.
func (gbcc googleBigqueryCapacityCommitmentAttributes) RenewalPlan() terra.StringValue {
	return terra.ReferenceAsString(gbcc.ref.Append("renewal_plan"))
}

// SlotCount returns a reference to field slot_count of google_bigquery_capacity_commitment.
func (gbcc googleBigqueryCapacityCommitmentAttributes) SlotCount() terra.NumberValue {
	return terra.ReferenceAsNumber(gbcc.ref.Append("slot_count"))
}

// State returns a reference to field state of google_bigquery_capacity_commitment.
func (gbcc googleBigqueryCapacityCommitmentAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gbcc.ref.Append("state"))
}

func (gbcc googleBigqueryCapacityCommitmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbcc.ref.Append("timeouts"))
}

type googleBigqueryCapacityCommitmentState struct {
	CapacityCommitmentId            string         `json:"capacity_commitment_id"`
	CommitmentEndTime               string         `json:"commitment_end_time"`
	CommitmentStartTime             string         `json:"commitment_start_time"`
	Edition                         string         `json:"edition"`
	EnforceSingleAdminProjectPerOrg string         `json:"enforce_single_admin_project_per_org"`
	Id                              string         `json:"id"`
	Location                        string         `json:"location"`
	Name                            string         `json:"name"`
	Plan                            string         `json:"plan"`
	Project                         string         `json:"project"`
	RenewalPlan                     string         `json:"renewal_plan"`
	SlotCount                       float64        `json:"slot_count"`
	State                           string         `json:"state"`
	Timeouts                        *TimeoutsState `json:"timeouts"`
}
