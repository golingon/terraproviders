// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_vmwareengine_external_access_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_vmwareengine_external_access_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *googleVmwareengineExternalAccessRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gvear *Resource) Type() string {
	return "google_vmwareengine_external_access_rule"
}

// LocalName returns the local name for [Resource].
func (gvear *Resource) LocalName() string {
	return gvear.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gvear *Resource) Configuration() interface{} {
	return gvear.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gvear *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gvear)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gvear *Resource) Dependencies() terra.Dependencies {
	return gvear.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gvear *Resource) LifecycleManagement() *terra.Lifecycle {
	return gvear.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gvear *Resource) Attributes() googleVmwareengineExternalAccessRuleAttributes {
	return googleVmwareengineExternalAccessRuleAttributes{ref: terra.ReferenceResource(gvear)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gvear *Resource) ImportState(state io.Reader) error {
	gvear.state = &googleVmwareengineExternalAccessRuleState{}
	if err := json.NewDecoder(state).Decode(gvear.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gvear.Type(), gvear.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gvear *Resource) State() (*googleVmwareengineExternalAccessRuleState, bool) {
	return gvear.state, gvear.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gvear *Resource) StateMust() *googleVmwareengineExternalAccessRuleState {
	if gvear.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gvear.Type(), gvear.LocalName()))
	}
	return gvear.state
}

// Args contains the configurations for google_vmwareengine_external_access_rule.
type Args struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DestinationPorts: list of string, required
	DestinationPorts terra.ListValue[terra.StringValue] `hcl:"destination_ports,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpProtocol: string, required
	IpProtocol terra.StringValue `hcl:"ip_protocol,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// SourcePorts: list of string, required
	SourcePorts terra.ListValue[terra.StringValue] `hcl:"source_ports,attr" validate:"required"`
	// DestinationIpRanges: min=1
	DestinationIpRanges []DestinationIpRanges `hcl:"destination_ip_ranges,block" validate:"min=1"`
	// SourceIpRanges: min=1
	SourceIpRanges []SourceIpRanges `hcl:"source_ip_ranges,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleVmwareengineExternalAccessRuleAttributes struct {
	ref terra.Reference
}

// Action returns a reference to field action of google_vmwareengine_external_access_rule.
func (gvear googleVmwareengineExternalAccessRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(gvear.ref.Append("action"))
}

// CreateTime returns a reference to field create_time of google_vmwareengine_external_access_rule.
func (gvear googleVmwareengineExternalAccessRuleAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gvear.ref.Append("create_time"))
}

// Description returns a reference to field description of google_vmwareengine_external_access_rule.
func (gvear googleVmwareengineExternalAccessRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gvear.ref.Append("description"))
}

// DestinationPorts returns a reference to field destination_ports of google_vmwareengine_external_access_rule.
func (gvear googleVmwareengineExternalAccessRuleAttributes) DestinationPorts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gvear.ref.Append("destination_ports"))
}

// Id returns a reference to field id of google_vmwareengine_external_access_rule.
func (gvear googleVmwareengineExternalAccessRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gvear.ref.Append("id"))
}

// IpProtocol returns a reference to field ip_protocol of google_vmwareengine_external_access_rule.
func (gvear googleVmwareengineExternalAccessRuleAttributes) IpProtocol() terra.StringValue {
	return terra.ReferenceAsString(gvear.ref.Append("ip_protocol"))
}

// Name returns a reference to field name of google_vmwareengine_external_access_rule.
func (gvear googleVmwareengineExternalAccessRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gvear.ref.Append("name"))
}

// Parent returns a reference to field parent of google_vmwareengine_external_access_rule.
func (gvear googleVmwareengineExternalAccessRuleAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gvear.ref.Append("parent"))
}

// Priority returns a reference to field priority of google_vmwareengine_external_access_rule.
func (gvear googleVmwareengineExternalAccessRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(gvear.ref.Append("priority"))
}

// SourcePorts returns a reference to field source_ports of google_vmwareengine_external_access_rule.
func (gvear googleVmwareengineExternalAccessRuleAttributes) SourcePorts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gvear.ref.Append("source_ports"))
}

// State returns a reference to field state of google_vmwareengine_external_access_rule.
func (gvear googleVmwareengineExternalAccessRuleAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gvear.ref.Append("state"))
}

// Uid returns a reference to field uid of google_vmwareengine_external_access_rule.
func (gvear googleVmwareengineExternalAccessRuleAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gvear.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_vmwareengine_external_access_rule.
func (gvear googleVmwareengineExternalAccessRuleAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gvear.ref.Append("update_time"))
}

func (gvear googleVmwareengineExternalAccessRuleAttributes) DestinationIpRanges() terra.ListValue[DestinationIpRangesAttributes] {
	return terra.ReferenceAsList[DestinationIpRangesAttributes](gvear.ref.Append("destination_ip_ranges"))
}

func (gvear googleVmwareengineExternalAccessRuleAttributes) SourceIpRanges() terra.ListValue[SourceIpRangesAttributes] {
	return terra.ReferenceAsList[SourceIpRangesAttributes](gvear.ref.Append("source_ip_ranges"))
}

func (gvear googleVmwareengineExternalAccessRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gvear.ref.Append("timeouts"))
}

type googleVmwareengineExternalAccessRuleState struct {
	Action              string                     `json:"action"`
	CreateTime          string                     `json:"create_time"`
	Description         string                     `json:"description"`
	DestinationPorts    []string                   `json:"destination_ports"`
	Id                  string                     `json:"id"`
	IpProtocol          string                     `json:"ip_protocol"`
	Name                string                     `json:"name"`
	Parent              string                     `json:"parent"`
	Priority            float64                    `json:"priority"`
	SourcePorts         []string                   `json:"source_ports"`
	State               string                     `json:"state"`
	Uid                 string                     `json:"uid"`
	UpdateTime          string                     `json:"update_time"`
	DestinationIpRanges []DestinationIpRangesState `json:"destination_ip_ranges"`
	SourceIpRanges      []SourceIpRangesState      `json:"source_ip_ranges"`
	Timeouts            *TimeoutsState             `json:"timeouts"`
}
