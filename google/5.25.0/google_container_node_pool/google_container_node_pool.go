// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_container_node_pool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_container_node_pool.
type Resource struct {
	Name      string
	Args      Args
	state     *googleContainerNodePoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcnp *Resource) Type() string {
	return "google_container_node_pool"
}

// LocalName returns the local name for [Resource].
func (gcnp *Resource) LocalName() string {
	return gcnp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcnp *Resource) Configuration() interface{} {
	return gcnp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcnp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcnp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcnp *Resource) Dependencies() terra.Dependencies {
	return gcnp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcnp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcnp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcnp *Resource) Attributes() googleContainerNodePoolAttributes {
	return googleContainerNodePoolAttributes{ref: terra.ReferenceResource(gcnp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcnp *Resource) ImportState(state io.Reader) error {
	gcnp.state = &googleContainerNodePoolState{}
	if err := json.NewDecoder(state).Decode(gcnp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcnp.Type(), gcnp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcnp *Resource) State() (*googleContainerNodePoolState, bool) {
	return gcnp.state, gcnp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcnp *Resource) StateMust() *googleContainerNodePoolState {
	if gcnp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcnp.Type(), gcnp.LocalName()))
	}
	return gcnp.state
}

// Args contains the configurations for google_container_node_pool.
type Args struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InitialNodeCount: number, optional
	InitialNodeCount terra.NumberValue `hcl:"initial_node_count,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// MaxPodsPerNode: number, optional
	MaxPodsPerNode terra.NumberValue `hcl:"max_pods_per_node,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// NodeCount: number, optional
	NodeCount terra.NumberValue `hcl:"node_count,attr"`
	// NodeLocations: set of string, optional
	NodeLocations terra.SetValue[terra.StringValue] `hcl:"node_locations,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// Autoscaling: optional
	Autoscaling *Autoscaling `hcl:"autoscaling,block"`
	// Management: optional
	Management *Management `hcl:"management,block"`
	// NetworkConfig: optional
	NetworkConfig *NetworkConfig `hcl:"network_config,block"`
	// NodeConfig: optional
	NodeConfig *NodeConfig `hcl:"node_config,block"`
	// PlacementPolicy: optional
	PlacementPolicy *PlacementPolicy `hcl:"placement_policy,block"`
	// QueuedProvisioning: optional
	QueuedProvisioning *QueuedProvisioning `hcl:"queued_provisioning,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// UpgradeSettings: optional
	UpgradeSettings *UpgradeSettings `hcl:"upgrade_settings,block"`
}

type googleContainerNodePoolAttributes struct {
	ref terra.Reference
}

// Cluster returns a reference to field cluster of google_container_node_pool.
func (gcnp googleContainerNodePoolAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("cluster"))
}

// Id returns a reference to field id of google_container_node_pool.
func (gcnp googleContainerNodePoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("id"))
}

// InitialNodeCount returns a reference to field initial_node_count of google_container_node_pool.
func (gcnp googleContainerNodePoolAttributes) InitialNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(gcnp.ref.Append("initial_node_count"))
}

// InstanceGroupUrls returns a reference to field instance_group_urls of google_container_node_pool.
func (gcnp googleContainerNodePoolAttributes) InstanceGroupUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcnp.ref.Append("instance_group_urls"))
}

// Location returns a reference to field location of google_container_node_pool.
func (gcnp googleContainerNodePoolAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("location"))
}

// ManagedInstanceGroupUrls returns a reference to field managed_instance_group_urls of google_container_node_pool.
func (gcnp googleContainerNodePoolAttributes) ManagedInstanceGroupUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcnp.ref.Append("managed_instance_group_urls"))
}

// MaxPodsPerNode returns a reference to field max_pods_per_node of google_container_node_pool.
func (gcnp googleContainerNodePoolAttributes) MaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(gcnp.ref.Append("max_pods_per_node"))
}

// Name returns a reference to field name of google_container_node_pool.
func (gcnp googleContainerNodePoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of google_container_node_pool.
func (gcnp googleContainerNodePoolAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("name_prefix"))
}

// NodeCount returns a reference to field node_count of google_container_node_pool.
func (gcnp googleContainerNodePoolAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(gcnp.ref.Append("node_count"))
}

// NodeLocations returns a reference to field node_locations of google_container_node_pool.
func (gcnp googleContainerNodePoolAttributes) NodeLocations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gcnp.ref.Append("node_locations"))
}

// Operation returns a reference to field operation of google_container_node_pool.
func (gcnp googleContainerNodePoolAttributes) Operation() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("operation"))
}

// Project returns a reference to field project of google_container_node_pool.
func (gcnp googleContainerNodePoolAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("project"))
}

// Version returns a reference to field version of google_container_node_pool.
func (gcnp googleContainerNodePoolAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("version"))
}

func (gcnp googleContainerNodePoolAttributes) Autoscaling() terra.ListValue[AutoscalingAttributes] {
	return terra.ReferenceAsList[AutoscalingAttributes](gcnp.ref.Append("autoscaling"))
}

func (gcnp googleContainerNodePoolAttributes) Management() terra.ListValue[ManagementAttributes] {
	return terra.ReferenceAsList[ManagementAttributes](gcnp.ref.Append("management"))
}

func (gcnp googleContainerNodePoolAttributes) NetworkConfig() terra.ListValue[NetworkConfigAttributes] {
	return terra.ReferenceAsList[NetworkConfigAttributes](gcnp.ref.Append("network_config"))
}

func (gcnp googleContainerNodePoolAttributes) NodeConfig() terra.ListValue[NodeConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigAttributes](gcnp.ref.Append("node_config"))
}

func (gcnp googleContainerNodePoolAttributes) PlacementPolicy() terra.ListValue[PlacementPolicyAttributes] {
	return terra.ReferenceAsList[PlacementPolicyAttributes](gcnp.ref.Append("placement_policy"))
}

func (gcnp googleContainerNodePoolAttributes) QueuedProvisioning() terra.ListValue[QueuedProvisioningAttributes] {
	return terra.ReferenceAsList[QueuedProvisioningAttributes](gcnp.ref.Append("queued_provisioning"))
}

func (gcnp googleContainerNodePoolAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcnp.ref.Append("timeouts"))
}

func (gcnp googleContainerNodePoolAttributes) UpgradeSettings() terra.ListValue[UpgradeSettingsAttributes] {
	return terra.ReferenceAsList[UpgradeSettingsAttributes](gcnp.ref.Append("upgrade_settings"))
}

type googleContainerNodePoolState struct {
	Cluster                  string                    `json:"cluster"`
	Id                       string                    `json:"id"`
	InitialNodeCount         float64                   `json:"initial_node_count"`
	InstanceGroupUrls        []string                  `json:"instance_group_urls"`
	Location                 string                    `json:"location"`
	ManagedInstanceGroupUrls []string                  `json:"managed_instance_group_urls"`
	MaxPodsPerNode           float64                   `json:"max_pods_per_node"`
	Name                     string                    `json:"name"`
	NamePrefix               string                    `json:"name_prefix"`
	NodeCount                float64                   `json:"node_count"`
	NodeLocations            []string                  `json:"node_locations"`
	Operation                string                    `json:"operation"`
	Project                  string                    `json:"project"`
	Version                  string                    `json:"version"`
	Autoscaling              []AutoscalingState        `json:"autoscaling"`
	Management               []ManagementState         `json:"management"`
	NetworkConfig            []NetworkConfigState      `json:"network_config"`
	NodeConfig               []NodeConfigState         `json:"node_config"`
	PlacementPolicy          []PlacementPolicyState    `json:"placement_policy"`
	QueuedProvisioning       []QueuedProvisioningState `json:"queued_provisioning"`
	Timeouts                 *TimeoutsState            `json:"timeouts"`
	UpgradeSettings          []UpgradeSettingsState    `json:"upgrade_settings"`
}
