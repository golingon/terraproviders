// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_gke_hub_fleet

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_gke_hub_fleet.
type Resource struct {
	Name      string
	Args      Args
	state     *googleGkeHubFleetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gghf *Resource) Type() string {
	return "google_gke_hub_fleet"
}

// LocalName returns the local name for [Resource].
func (gghf *Resource) LocalName() string {
	return gghf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gghf *Resource) Configuration() interface{} {
	return gghf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gghf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gghf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gghf *Resource) Dependencies() terra.Dependencies {
	return gghf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gghf *Resource) LifecycleManagement() *terra.Lifecycle {
	return gghf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gghf *Resource) Attributes() googleGkeHubFleetAttributes {
	return googleGkeHubFleetAttributes{ref: terra.ReferenceResource(gghf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gghf *Resource) ImportState(state io.Reader) error {
	gghf.state = &googleGkeHubFleetState{}
	if err := json.NewDecoder(state).Decode(gghf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gghf.Type(), gghf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gghf *Resource) State() (*googleGkeHubFleetState, bool) {
	return gghf.state, gghf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gghf *Resource) StateMust() *googleGkeHubFleetState {
	if gghf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gghf.Type(), gghf.LocalName()))
	}
	return gghf.state
}

// Args contains the configurations for google_gke_hub_fleet.
type Args struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DefaultClusterConfig: optional
	DefaultClusterConfig *DefaultClusterConfig `hcl:"default_cluster_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleGkeHubFleetAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_gke_hub_fleet.
func (gghf googleGkeHubFleetAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gghf.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_gke_hub_fleet.
func (gghf googleGkeHubFleetAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(gghf.ref.Append("delete_time"))
}

// DisplayName returns a reference to field display_name of google_gke_hub_fleet.
func (gghf googleGkeHubFleetAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gghf.ref.Append("display_name"))
}

// Id returns a reference to field id of google_gke_hub_fleet.
func (gghf googleGkeHubFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gghf.ref.Append("id"))
}

// Project returns a reference to field project of google_gke_hub_fleet.
func (gghf googleGkeHubFleetAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gghf.ref.Append("project"))
}

// Uid returns a reference to field uid of google_gke_hub_fleet.
func (gghf googleGkeHubFleetAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gghf.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_gke_hub_fleet.
func (gghf googleGkeHubFleetAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gghf.ref.Append("update_time"))
}

func (gghf googleGkeHubFleetAttributes) State() terra.ListValue[StateAttributes] {
	return terra.ReferenceAsList[StateAttributes](gghf.ref.Append("state"))
}

func (gghf googleGkeHubFleetAttributes) DefaultClusterConfig() terra.ListValue[DefaultClusterConfigAttributes] {
	return terra.ReferenceAsList[DefaultClusterConfigAttributes](gghf.ref.Append("default_cluster_config"))
}

func (gghf googleGkeHubFleetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gghf.ref.Append("timeouts"))
}

type googleGkeHubFleetState struct {
	CreateTime           string                      `json:"create_time"`
	DeleteTime           string                      `json:"delete_time"`
	DisplayName          string                      `json:"display_name"`
	Id                   string                      `json:"id"`
	Project              string                      `json:"project"`
	Uid                  string                      `json:"uid"`
	UpdateTime           string                      `json:"update_time"`
	State                []StateState                `json:"state"`
	DefaultClusterConfig []DefaultClusterConfigState `json:"default_cluster_config"`
	Timeouts             *TimeoutsState              `json:"timeouts"`
}
