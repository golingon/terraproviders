// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_pubsub_topic

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataIngestionDataSourceSettingsAttributes struct {
	ref terra.Reference
}

func (idss DataIngestionDataSourceSettingsAttributes) InternalRef() (terra.Reference, error) {
	return idss.ref, nil
}

func (idss DataIngestionDataSourceSettingsAttributes) InternalWithRef(ref terra.Reference) DataIngestionDataSourceSettingsAttributes {
	return DataIngestionDataSourceSettingsAttributes{ref: ref}
}

func (idss DataIngestionDataSourceSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return idss.ref.InternalTokens()
}

func (idss DataIngestionDataSourceSettingsAttributes) AwsKinesis() terra.ListValue[DataIngestionDataSourceSettingsAwsKinesisAttributes] {
	return terra.ReferenceAsList[DataIngestionDataSourceSettingsAwsKinesisAttributes](idss.ref.Append("aws_kinesis"))
}

type DataIngestionDataSourceSettingsAwsKinesisAttributes struct {
	ref terra.Reference
}

func (ak DataIngestionDataSourceSettingsAwsKinesisAttributes) InternalRef() (terra.Reference, error) {
	return ak.ref, nil
}

func (ak DataIngestionDataSourceSettingsAwsKinesisAttributes) InternalWithRef(ref terra.Reference) DataIngestionDataSourceSettingsAwsKinesisAttributes {
	return DataIngestionDataSourceSettingsAwsKinesisAttributes{ref: ref}
}

func (ak DataIngestionDataSourceSettingsAwsKinesisAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ak.ref.InternalTokens()
}

func (ak DataIngestionDataSourceSettingsAwsKinesisAttributes) AwsRoleArn() terra.StringValue {
	return terra.ReferenceAsString(ak.ref.Append("aws_role_arn"))
}

func (ak DataIngestionDataSourceSettingsAwsKinesisAttributes) ConsumerArn() terra.StringValue {
	return terra.ReferenceAsString(ak.ref.Append("consumer_arn"))
}

func (ak DataIngestionDataSourceSettingsAwsKinesisAttributes) GcpServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(ak.ref.Append("gcp_service_account"))
}

func (ak DataIngestionDataSourceSettingsAwsKinesisAttributes) StreamArn() terra.StringValue {
	return terra.ReferenceAsString(ak.ref.Append("stream_arn"))
}

type DataMessageStoragePolicyAttributes struct {
	ref terra.Reference
}

func (msp DataMessageStoragePolicyAttributes) InternalRef() (terra.Reference, error) {
	return msp.ref, nil
}

func (msp DataMessageStoragePolicyAttributes) InternalWithRef(ref terra.Reference) DataMessageStoragePolicyAttributes {
	return DataMessageStoragePolicyAttributes{ref: ref}
}

func (msp DataMessageStoragePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return msp.ref.InternalTokens()
}

func (msp DataMessageStoragePolicyAttributes) AllowedPersistenceRegions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](msp.ref.Append("allowed_persistence_regions"))
}

type DataSchemaSettingsAttributes struct {
	ref terra.Reference
}

func (ss DataSchemaSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss DataSchemaSettingsAttributes) InternalWithRef(ref terra.Reference) DataSchemaSettingsAttributes {
	return DataSchemaSettingsAttributes{ref: ref}
}

func (ss DataSchemaSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss DataSchemaSettingsAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("encoding"))
}

func (ss DataSchemaSettingsAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("schema"))
}

type DataIngestionDataSourceSettingsState struct {
	AwsKinesis []DataIngestionDataSourceSettingsAwsKinesisState `json:"aws_kinesis"`
}

type DataIngestionDataSourceSettingsAwsKinesisState struct {
	AwsRoleArn        string `json:"aws_role_arn"`
	ConsumerArn       string `json:"consumer_arn"`
	GcpServiceAccount string `json:"gcp_service_account"`
	StreamArn         string `json:"stream_arn"`
}

type DataMessageStoragePolicyState struct {
	AllowedPersistenceRegions []string `json:"allowed_persistence_regions"`
}

type DataSchemaSettingsState struct {
	Encoding string `json:"encoding"`
	Schema   string `json:"schema"`
}
