// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_pubsub_topic

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_pubsub_topic.
type Resource struct {
	Name      string
	Args      Args
	state     *googlePubsubTopicState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gpt *Resource) Type() string {
	return "google_pubsub_topic"
}

// LocalName returns the local name for [Resource].
func (gpt *Resource) LocalName() string {
	return gpt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gpt *Resource) Configuration() interface{} {
	return gpt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gpt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gpt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gpt *Resource) Dependencies() terra.Dependencies {
	return gpt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gpt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gpt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gpt *Resource) Attributes() googlePubsubTopicAttributes {
	return googlePubsubTopicAttributes{ref: terra.ReferenceResource(gpt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gpt *Resource) ImportState(state io.Reader) error {
	gpt.state = &googlePubsubTopicState{}
	if err := json.NewDecoder(state).Decode(gpt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gpt.Type(), gpt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gpt *Resource) State() (*googlePubsubTopicState, bool) {
	return gpt.state, gpt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gpt *Resource) StateMust() *googlePubsubTopicState {
	if gpt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gpt.Type(), gpt.LocalName()))
	}
	return gpt.state
}

// Args contains the configurations for google_pubsub_topic.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// MessageRetentionDuration: string, optional
	MessageRetentionDuration terra.StringValue `hcl:"message_retention_duration,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// IngestionDataSourceSettings: optional
	IngestionDataSourceSettings *IngestionDataSourceSettings `hcl:"ingestion_data_source_settings,block"`
	// MessageStoragePolicy: optional
	MessageStoragePolicy *MessageStoragePolicy `hcl:"message_storage_policy,block"`
	// SchemaSettings: optional
	SchemaSettings *SchemaSettings `hcl:"schema_settings,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googlePubsubTopicAttributes struct {
	ref terra.Reference
}

// EffectiveLabels returns a reference to field effective_labels of google_pubsub_topic.
func (gpt googlePubsubTopicAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpt.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_pubsub_topic.
func (gpt googlePubsubTopicAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gpt.ref.Append("id"))
}

// KmsKeyName returns a reference to field kms_key_name of google_pubsub_topic.
func (gpt googlePubsubTopicAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(gpt.ref.Append("kms_key_name"))
}

// Labels returns a reference to field labels of google_pubsub_topic.
func (gpt googlePubsubTopicAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpt.ref.Append("labels"))
}

// MessageRetentionDuration returns a reference to field message_retention_duration of google_pubsub_topic.
func (gpt googlePubsubTopicAttributes) MessageRetentionDuration() terra.StringValue {
	return terra.ReferenceAsString(gpt.ref.Append("message_retention_duration"))
}

// Name returns a reference to field name of google_pubsub_topic.
func (gpt googlePubsubTopicAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gpt.ref.Append("name"))
}

// Project returns a reference to field project of google_pubsub_topic.
func (gpt googlePubsubTopicAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gpt.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_pubsub_topic.
func (gpt googlePubsubTopicAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gpt.ref.Append("terraform_labels"))
}

func (gpt googlePubsubTopicAttributes) IngestionDataSourceSettings() terra.ListValue[IngestionDataSourceSettingsAttributes] {
	return terra.ReferenceAsList[IngestionDataSourceSettingsAttributes](gpt.ref.Append("ingestion_data_source_settings"))
}

func (gpt googlePubsubTopicAttributes) MessageStoragePolicy() terra.ListValue[MessageStoragePolicyAttributes] {
	return terra.ReferenceAsList[MessageStoragePolicyAttributes](gpt.ref.Append("message_storage_policy"))
}

func (gpt googlePubsubTopicAttributes) SchemaSettings() terra.ListValue[SchemaSettingsAttributes] {
	return terra.ReferenceAsList[SchemaSettingsAttributes](gpt.ref.Append("schema_settings"))
}

func (gpt googlePubsubTopicAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gpt.ref.Append("timeouts"))
}

type googlePubsubTopicState struct {
	EffectiveLabels             map[string]string                  `json:"effective_labels"`
	Id                          string                             `json:"id"`
	KmsKeyName                  string                             `json:"kms_key_name"`
	Labels                      map[string]string                  `json:"labels"`
	MessageRetentionDuration    string                             `json:"message_retention_duration"`
	Name                        string                             `json:"name"`
	Project                     string                             `json:"project"`
	TerraformLabels             map[string]string                  `json:"terraform_labels"`
	IngestionDataSourceSettings []IngestionDataSourceSettingsState `json:"ingestion_data_source_settings"`
	MessageStoragePolicy        []MessageStoragePolicyState        `json:"message_storage_policy"`
	SchemaSettings              []SchemaSettingsState              `json:"schema_settings"`
	Timeouts                    *TimeoutsState                     `json:"timeouts"`
}
