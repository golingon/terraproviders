// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_vmwareengine_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_vmwareengine_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *googleVmwareengineClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gvc *Resource) Type() string {
	return "google_vmwareengine_cluster"
}

// LocalName returns the local name for [Resource].
func (gvc *Resource) LocalName() string {
	return gvc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gvc *Resource) Configuration() interface{} {
	return gvc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gvc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gvc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gvc *Resource) Dependencies() terra.Dependencies {
	return gvc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gvc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gvc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gvc *Resource) Attributes() googleVmwareengineClusterAttributes {
	return googleVmwareengineClusterAttributes{ref: terra.ReferenceResource(gvc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gvc *Resource) ImportState(state io.Reader) error {
	gvc.state = &googleVmwareengineClusterState{}
	if err := json.NewDecoder(state).Decode(gvc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gvc.Type(), gvc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gvc *Resource) State() (*googleVmwareengineClusterState, bool) {
	return gvc.state, gvc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gvc *Resource) StateMust() *googleVmwareengineClusterState {
	if gvc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gvc.Type(), gvc.LocalName()))
	}
	return gvc.state
}

// Args contains the configurations for google_vmwareengine_cluster.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// NodeTypeConfigs: min=0
	NodeTypeConfigs []NodeTypeConfigs `hcl:"node_type_configs,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleVmwareengineClusterAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_vmwareengine_cluster.
func (gvc googleVmwareengineClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("id"))
}

// Management returns a reference to field management of google_vmwareengine_cluster.
func (gvc googleVmwareengineClusterAttributes) Management() terra.BoolValue {
	return terra.ReferenceAsBool(gvc.ref.Append("management"))
}

// Name returns a reference to field name of google_vmwareengine_cluster.
func (gvc googleVmwareengineClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("name"))
}

// Parent returns a reference to field parent of google_vmwareengine_cluster.
func (gvc googleVmwareengineClusterAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("parent"))
}

// State returns a reference to field state of google_vmwareengine_cluster.
func (gvc googleVmwareengineClusterAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("state"))
}

// Uid returns a reference to field uid of google_vmwareengine_cluster.
func (gvc googleVmwareengineClusterAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gvc.ref.Append("uid"))
}

func (gvc googleVmwareengineClusterAttributes) NodeTypeConfigs() terra.SetValue[NodeTypeConfigsAttributes] {
	return terra.ReferenceAsSet[NodeTypeConfigsAttributes](gvc.ref.Append("node_type_configs"))
}

func (gvc googleVmwareengineClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gvc.ref.Append("timeouts"))
}

type googleVmwareengineClusterState struct {
	Id              string                 `json:"id"`
	Management      bool                   `json:"management"`
	Name            string                 `json:"name"`
	Parent          string                 `json:"parent"`
	State           string                 `json:"state"`
	Uid             string                 `json:"uid"`
	NodeTypeConfigs []NodeTypeConfigsState `json:"node_type_configs"`
	Timeouts        *TimeoutsState         `json:"timeouts"`
}
