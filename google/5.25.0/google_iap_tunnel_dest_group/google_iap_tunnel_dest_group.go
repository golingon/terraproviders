// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_iap_tunnel_dest_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_iap_tunnel_dest_group.
type Resource struct {
	Name      string
	Args      Args
	state     *googleIapTunnelDestGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gitdg *Resource) Type() string {
	return "google_iap_tunnel_dest_group"
}

// LocalName returns the local name for [Resource].
func (gitdg *Resource) LocalName() string {
	return gitdg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gitdg *Resource) Configuration() interface{} {
	return gitdg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gitdg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gitdg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gitdg *Resource) Dependencies() terra.Dependencies {
	return gitdg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gitdg *Resource) LifecycleManagement() *terra.Lifecycle {
	return gitdg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gitdg *Resource) Attributes() googleIapTunnelDestGroupAttributes {
	return googleIapTunnelDestGroupAttributes{ref: terra.ReferenceResource(gitdg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gitdg *Resource) ImportState(state io.Reader) error {
	gitdg.state = &googleIapTunnelDestGroupState{}
	if err := json.NewDecoder(state).Decode(gitdg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gitdg.Type(), gitdg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gitdg *Resource) State() (*googleIapTunnelDestGroupState, bool) {
	return gitdg.state, gitdg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gitdg *Resource) StateMust() *googleIapTunnelDestGroupState {
	if gitdg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gitdg.Type(), gitdg.LocalName()))
	}
	return gitdg.state
}

// Args contains the configurations for google_iap_tunnel_dest_group.
type Args struct {
	// Cidrs: list of string, optional
	Cidrs terra.ListValue[terra.StringValue] `hcl:"cidrs,attr"`
	// Fqdns: list of string, optional
	Fqdns terra.ListValue[terra.StringValue] `hcl:"fqdns,attr"`
	// GroupName: string, required
	GroupName terra.StringValue `hcl:"group_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleIapTunnelDestGroupAttributes struct {
	ref terra.Reference
}

// Cidrs returns a reference to field cidrs of google_iap_tunnel_dest_group.
func (gitdg googleIapTunnelDestGroupAttributes) Cidrs() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gitdg.ref.Append("cidrs"))
}

// Fqdns returns a reference to field fqdns of google_iap_tunnel_dest_group.
func (gitdg googleIapTunnelDestGroupAttributes) Fqdns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gitdg.ref.Append("fqdns"))
}

// GroupName returns a reference to field group_name of google_iap_tunnel_dest_group.
func (gitdg googleIapTunnelDestGroupAttributes) GroupName() terra.StringValue {
	return terra.ReferenceAsString(gitdg.ref.Append("group_name"))
}

// Id returns a reference to field id of google_iap_tunnel_dest_group.
func (gitdg googleIapTunnelDestGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gitdg.ref.Append("id"))
}

// Name returns a reference to field name of google_iap_tunnel_dest_group.
func (gitdg googleIapTunnelDestGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gitdg.ref.Append("name"))
}

// Project returns a reference to field project of google_iap_tunnel_dest_group.
func (gitdg googleIapTunnelDestGroupAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gitdg.ref.Append("project"))
}

// Region returns a reference to field region of google_iap_tunnel_dest_group.
func (gitdg googleIapTunnelDestGroupAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gitdg.ref.Append("region"))
}

func (gitdg googleIapTunnelDestGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gitdg.ref.Append("timeouts"))
}

type googleIapTunnelDestGroupState struct {
	Cidrs     []string       `json:"cidrs"`
	Fqdns     []string       `json:"fqdns"`
	GroupName string         `json:"group_name"`
	Id        string         `json:"id"`
	Name      string         `json:"name"`
	Project   string         `json:"project"`
	Region    string         `json:"region"`
	Timeouts  *TimeoutsState `json:"timeouts"`
}
