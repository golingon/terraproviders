// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_monitoring_metric_descriptor

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_monitoring_metric_descriptor.
type Resource struct {
	Name      string
	Args      Args
	state     *googleMonitoringMetricDescriptorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gmmd *Resource) Type() string {
	return "google_monitoring_metric_descriptor"
}

// LocalName returns the local name for [Resource].
func (gmmd *Resource) LocalName() string {
	return gmmd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gmmd *Resource) Configuration() interface{} {
	return gmmd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gmmd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gmmd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gmmd *Resource) Dependencies() terra.Dependencies {
	return gmmd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gmmd *Resource) LifecycleManagement() *terra.Lifecycle {
	return gmmd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gmmd *Resource) Attributes() googleMonitoringMetricDescriptorAttributes {
	return googleMonitoringMetricDescriptorAttributes{ref: terra.ReferenceResource(gmmd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gmmd *Resource) ImportState(state io.Reader) error {
	gmmd.state = &googleMonitoringMetricDescriptorState{}
	if err := json.NewDecoder(state).Decode(gmmd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gmmd.Type(), gmmd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gmmd *Resource) State() (*googleMonitoringMetricDescriptorState, bool) {
	return gmmd.state, gmmd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gmmd *Resource) StateMust() *googleMonitoringMetricDescriptorState {
	if gmmd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gmmd.Type(), gmmd.LocalName()))
	}
	return gmmd.state
}

// Args contains the configurations for google_monitoring_metric_descriptor.
type Args struct {
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LaunchStage: string, optional
	LaunchStage terra.StringValue `hcl:"launch_stage,attr"`
	// MetricKind: string, required
	MetricKind terra.StringValue `hcl:"metric_kind,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Unit: string, optional
	Unit terra.StringValue `hcl:"unit,attr"`
	// ValueType: string, required
	ValueType terra.StringValue `hcl:"value_type,attr" validate:"required"`
	// Labels: min=0
	Labels []Labels `hcl:"labels,block" validate:"min=0"`
	// Metadata: optional
	Metadata *Metadata `hcl:"metadata,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleMonitoringMetricDescriptorAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_monitoring_metric_descriptor.
func (gmmd googleMonitoringMetricDescriptorAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gmmd.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_monitoring_metric_descriptor.
func (gmmd googleMonitoringMetricDescriptorAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gmmd.ref.Append("display_name"))
}

// Id returns a reference to field id of google_monitoring_metric_descriptor.
func (gmmd googleMonitoringMetricDescriptorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gmmd.ref.Append("id"))
}

// LaunchStage returns a reference to field launch_stage of google_monitoring_metric_descriptor.
func (gmmd googleMonitoringMetricDescriptorAttributes) LaunchStage() terra.StringValue {
	return terra.ReferenceAsString(gmmd.ref.Append("launch_stage"))
}

// MetricKind returns a reference to field metric_kind of google_monitoring_metric_descriptor.
func (gmmd googleMonitoringMetricDescriptorAttributes) MetricKind() terra.StringValue {
	return terra.ReferenceAsString(gmmd.ref.Append("metric_kind"))
}

// MonitoredResourceTypes returns a reference to field monitored_resource_types of google_monitoring_metric_descriptor.
func (gmmd googleMonitoringMetricDescriptorAttributes) MonitoredResourceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gmmd.ref.Append("monitored_resource_types"))
}

// Name returns a reference to field name of google_monitoring_metric_descriptor.
func (gmmd googleMonitoringMetricDescriptorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gmmd.ref.Append("name"))
}

// Project returns a reference to field project of google_monitoring_metric_descriptor.
func (gmmd googleMonitoringMetricDescriptorAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gmmd.ref.Append("project"))
}

// Type returns a reference to field type of google_monitoring_metric_descriptor.
func (gmmd googleMonitoringMetricDescriptorAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gmmd.ref.Append("type"))
}

// Unit returns a reference to field unit of google_monitoring_metric_descriptor.
func (gmmd googleMonitoringMetricDescriptorAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(gmmd.ref.Append("unit"))
}

// ValueType returns a reference to field value_type of google_monitoring_metric_descriptor.
func (gmmd googleMonitoringMetricDescriptorAttributes) ValueType() terra.StringValue {
	return terra.ReferenceAsString(gmmd.ref.Append("value_type"))
}

func (gmmd googleMonitoringMetricDescriptorAttributes) Labels() terra.SetValue[LabelsAttributes] {
	return terra.ReferenceAsSet[LabelsAttributes](gmmd.ref.Append("labels"))
}

func (gmmd googleMonitoringMetricDescriptorAttributes) Metadata() terra.ListValue[MetadataAttributes] {
	return terra.ReferenceAsList[MetadataAttributes](gmmd.ref.Append("metadata"))
}

func (gmmd googleMonitoringMetricDescriptorAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gmmd.ref.Append("timeouts"))
}

type googleMonitoringMetricDescriptorState struct {
	Description            string          `json:"description"`
	DisplayName            string          `json:"display_name"`
	Id                     string          `json:"id"`
	LaunchStage            string          `json:"launch_stage"`
	MetricKind             string          `json:"metric_kind"`
	MonitoredResourceTypes []string        `json:"monitored_resource_types"`
	Name                   string          `json:"name"`
	Project                string          `json:"project"`
	Type                   string          `json:"type"`
	Unit                   string          `json:"unit"`
	ValueType              string          `json:"value_type"`
	Labels                 []LabelsState   `json:"labels"`
	Metadata               []MetadataState `json:"metadata"`
	Timeouts               *TimeoutsState  `json:"timeouts"`
}
