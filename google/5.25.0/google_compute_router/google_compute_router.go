// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_router

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_router.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeRouterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcr *Resource) Type() string {
	return "google_compute_router"
}

// LocalName returns the local name for [Resource].
func (gcr *Resource) LocalName() string {
	return gcr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcr *Resource) Configuration() interface{} {
	return gcr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcr *Resource) Dependencies() terra.Dependencies {
	return gcr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcr *Resource) Attributes() googleComputeRouterAttributes {
	return googleComputeRouterAttributes{ref: terra.ReferenceResource(gcr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcr *Resource) ImportState(state io.Reader) error {
	gcr.state = &googleComputeRouterState{}
	if err := json.NewDecoder(state).Decode(gcr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcr.Type(), gcr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcr *Resource) State() (*googleComputeRouterState, bool) {
	return gcr.state, gcr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcr *Resource) StateMust() *googleComputeRouterState {
	if gcr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcr.Type(), gcr.LocalName()))
	}
	return gcr.state
}

// Args contains the configurations for google_compute_router.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EncryptedInterconnectRouter: bool, optional
	EncryptedInterconnectRouter terra.BoolValue `hcl:"encrypted_interconnect_router,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Bgp: optional
	Bgp *Bgp `hcl:"bgp,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeRouterAttributes struct {
	ref terra.Reference
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_router.
func (gcr googleComputeRouterAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_router.
func (gcr googleComputeRouterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("description"))
}

// EncryptedInterconnectRouter returns a reference to field encrypted_interconnect_router of google_compute_router.
func (gcr googleComputeRouterAttributes) EncryptedInterconnectRouter() terra.BoolValue {
	return terra.ReferenceAsBool(gcr.ref.Append("encrypted_interconnect_router"))
}

// Id returns a reference to field id of google_compute_router.
func (gcr googleComputeRouterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_router.
func (gcr googleComputeRouterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("name"))
}

// Network returns a reference to field network of google_compute_router.
func (gcr googleComputeRouterAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("network"))
}

// Project returns a reference to field project of google_compute_router.
func (gcr googleComputeRouterAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_router.
func (gcr googleComputeRouterAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("region"))
}

// SelfLink returns a reference to field self_link of google_compute_router.
func (gcr googleComputeRouterAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcr.ref.Append("self_link"))
}

func (gcr googleComputeRouterAttributes) Bgp() terra.ListValue[BgpAttributes] {
	return terra.ReferenceAsList[BgpAttributes](gcr.ref.Append("bgp"))
}

func (gcr googleComputeRouterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcr.ref.Append("timeouts"))
}

type googleComputeRouterState struct {
	CreationTimestamp           string         `json:"creation_timestamp"`
	Description                 string         `json:"description"`
	EncryptedInterconnectRouter bool           `json:"encrypted_interconnect_router"`
	Id                          string         `json:"id"`
	Name                        string         `json:"name"`
	Network                     string         `json:"network"`
	Project                     string         `json:"project"`
	Region                      string         `json:"region"`
	SelfLink                    string         `json:"self_link"`
	Bgp                         []BgpState     `json:"bgp"`
	Timeouts                    *TimeoutsState `json:"timeouts"`
}
