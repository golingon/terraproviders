// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_datapolicy_data_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_datapolicy_data_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryDatapolicyDataPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbddp *Resource) Type() string {
	return "google_bigquery_datapolicy_data_policy"
}

// LocalName returns the local name for [Resource].
func (gbddp *Resource) LocalName() string {
	return gbddp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbddp *Resource) Configuration() interface{} {
	return gbddp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbddp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbddp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbddp *Resource) Dependencies() terra.Dependencies {
	return gbddp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbddp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbddp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbddp *Resource) Attributes() googleBigqueryDatapolicyDataPolicyAttributes {
	return googleBigqueryDatapolicyDataPolicyAttributes{ref: terra.ReferenceResource(gbddp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbddp *Resource) ImportState(state io.Reader) error {
	gbddp.state = &googleBigqueryDatapolicyDataPolicyState{}
	if err := json.NewDecoder(state).Decode(gbddp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbddp.Type(), gbddp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbddp *Resource) State() (*googleBigqueryDatapolicyDataPolicyState, bool) {
	return gbddp.state, gbddp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbddp *Resource) StateMust() *googleBigqueryDatapolicyDataPolicyState {
	if gbddp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbddp.Type(), gbddp.LocalName()))
	}
	return gbddp.state
}

// Args contains the configurations for google_bigquery_datapolicy_data_policy.
type Args struct {
	// DataPolicyId: string, required
	DataPolicyId terra.StringValue `hcl:"data_policy_id,attr" validate:"required"`
	// DataPolicyType: string, required
	DataPolicyType terra.StringValue `hcl:"data_policy_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// PolicyTag: string, required
	PolicyTag terra.StringValue `hcl:"policy_tag,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// DataMaskingPolicy: optional
	DataMaskingPolicy *DataMaskingPolicy `hcl:"data_masking_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBigqueryDatapolicyDataPolicyAttributes struct {
	ref terra.Reference
}

// DataPolicyId returns a reference to field data_policy_id of google_bigquery_datapolicy_data_policy.
func (gbddp googleBigqueryDatapolicyDataPolicyAttributes) DataPolicyId() terra.StringValue {
	return terra.ReferenceAsString(gbddp.ref.Append("data_policy_id"))
}

// DataPolicyType returns a reference to field data_policy_type of google_bigquery_datapolicy_data_policy.
func (gbddp googleBigqueryDatapolicyDataPolicyAttributes) DataPolicyType() terra.StringValue {
	return terra.ReferenceAsString(gbddp.ref.Append("data_policy_type"))
}

// Id returns a reference to field id of google_bigquery_datapolicy_data_policy.
func (gbddp googleBigqueryDatapolicyDataPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbddp.ref.Append("id"))
}

// Location returns a reference to field location of google_bigquery_datapolicy_data_policy.
func (gbddp googleBigqueryDatapolicyDataPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbddp.ref.Append("location"))
}

// Name returns a reference to field name of google_bigquery_datapolicy_data_policy.
func (gbddp googleBigqueryDatapolicyDataPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbddp.ref.Append("name"))
}

// PolicyTag returns a reference to field policy_tag of google_bigquery_datapolicy_data_policy.
func (gbddp googleBigqueryDatapolicyDataPolicyAttributes) PolicyTag() terra.StringValue {
	return terra.ReferenceAsString(gbddp.ref.Append("policy_tag"))
}

// Project returns a reference to field project of google_bigquery_datapolicy_data_policy.
func (gbddp googleBigqueryDatapolicyDataPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbddp.ref.Append("project"))
}

func (gbddp googleBigqueryDatapolicyDataPolicyAttributes) DataMaskingPolicy() terra.ListValue[DataMaskingPolicyAttributes] {
	return terra.ReferenceAsList[DataMaskingPolicyAttributes](gbddp.ref.Append("data_masking_policy"))
}

func (gbddp googleBigqueryDatapolicyDataPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbddp.ref.Append("timeouts"))
}

type googleBigqueryDatapolicyDataPolicyState struct {
	DataPolicyId      string                   `json:"data_policy_id"`
	DataPolicyType    string                   `json:"data_policy_type"`
	Id                string                   `json:"id"`
	Location          string                   `json:"location"`
	Name              string                   `json:"name"`
	PolicyTag         string                   `json:"policy_tag"`
	Project           string                   `json:"project"`
	DataMaskingPolicy []DataMaskingPolicyState `json:"data_masking_policy"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
