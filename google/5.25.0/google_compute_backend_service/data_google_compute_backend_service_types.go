// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_backend_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataBackendAttributes struct {
	ref terra.Reference
}

func (b DataBackendAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b DataBackendAttributes) InternalWithRef(ref terra.Reference) DataBackendAttributes {
	return DataBackendAttributes{ref: ref}
}

func (b DataBackendAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b DataBackendAttributes) BalancingMode() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("balancing_mode"))
}

func (b DataBackendAttributes) CapacityScaler() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("capacity_scaler"))
}

func (b DataBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("description"))
}

func (b DataBackendAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("group"))
}

func (b DataBackendAttributes) MaxConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("max_connections"))
}

func (b DataBackendAttributes) MaxConnectionsPerEndpoint() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("max_connections_per_endpoint"))
}

func (b DataBackendAttributes) MaxConnectionsPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("max_connections_per_instance"))
}

func (b DataBackendAttributes) MaxRate() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("max_rate"))
}

func (b DataBackendAttributes) MaxRatePerEndpoint() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("max_rate_per_endpoint"))
}

func (b DataBackendAttributes) MaxRatePerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("max_rate_per_instance"))
}

func (b DataBackendAttributes) MaxUtilization() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("max_utilization"))
}

type DataCdnPolicyAttributes struct {
	ref terra.Reference
}

func (cp DataCdnPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp DataCdnPolicyAttributes) InternalWithRef(ref terra.Reference) DataCdnPolicyAttributes {
	return DataCdnPolicyAttributes{ref: ref}
}

func (cp DataCdnPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp DataCdnPolicyAttributes) CacheMode() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("cache_mode"))
}

func (cp DataCdnPolicyAttributes) ClientTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("client_ttl"))
}

func (cp DataCdnPolicyAttributes) DefaultTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("default_ttl"))
}

func (cp DataCdnPolicyAttributes) MaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("max_ttl"))
}

func (cp DataCdnPolicyAttributes) NegativeCaching() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("negative_caching"))
}

func (cp DataCdnPolicyAttributes) ServeWhileStale() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("serve_while_stale"))
}

func (cp DataCdnPolicyAttributes) SignedUrlCacheMaxAgeSec() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("signed_url_cache_max_age_sec"))
}

func (cp DataCdnPolicyAttributes) BypassCacheOnRequestHeaders() terra.ListValue[DataCdnPolicyBypassCacheOnRequestHeadersAttributes] {
	return terra.ReferenceAsList[DataCdnPolicyBypassCacheOnRequestHeadersAttributes](cp.ref.Append("bypass_cache_on_request_headers"))
}

func (cp DataCdnPolicyAttributes) CacheKeyPolicy() terra.ListValue[DataCdnPolicyCacheKeyPolicyAttributes] {
	return terra.ReferenceAsList[DataCdnPolicyCacheKeyPolicyAttributes](cp.ref.Append("cache_key_policy"))
}

func (cp DataCdnPolicyAttributes) NegativeCachingPolicy() terra.ListValue[DataCdnPolicyNegativeCachingPolicyAttributes] {
	return terra.ReferenceAsList[DataCdnPolicyNegativeCachingPolicyAttributes](cp.ref.Append("negative_caching_policy"))
}

type DataCdnPolicyBypassCacheOnRequestHeadersAttributes struct {
	ref terra.Reference
}

func (bcorh DataCdnPolicyBypassCacheOnRequestHeadersAttributes) InternalRef() (terra.Reference, error) {
	return bcorh.ref, nil
}

func (bcorh DataCdnPolicyBypassCacheOnRequestHeadersAttributes) InternalWithRef(ref terra.Reference) DataCdnPolicyBypassCacheOnRequestHeadersAttributes {
	return DataCdnPolicyBypassCacheOnRequestHeadersAttributes{ref: ref}
}

func (bcorh DataCdnPolicyBypassCacheOnRequestHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bcorh.ref.InternalTokens()
}

func (bcorh DataCdnPolicyBypassCacheOnRequestHeadersAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(bcorh.ref.Append("header_name"))
}

type DataCdnPolicyCacheKeyPolicyAttributes struct {
	ref terra.Reference
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ckp.ref, nil
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) InternalWithRef(ref terra.Reference) DataCdnPolicyCacheKeyPolicyAttributes {
	return DataCdnPolicyCacheKeyPolicyAttributes{ref: ref}
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ckp.ref.InternalTokens()
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) IncludeHost() terra.BoolValue {
	return terra.ReferenceAsBool(ckp.ref.Append("include_host"))
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) IncludeHttpHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ckp.ref.Append("include_http_headers"))
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) IncludeNamedCookies() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ckp.ref.Append("include_named_cookies"))
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) IncludeProtocol() terra.BoolValue {
	return terra.ReferenceAsBool(ckp.ref.Append("include_protocol"))
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) IncludeQueryString() terra.BoolValue {
	return terra.ReferenceAsBool(ckp.ref.Append("include_query_string"))
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) QueryStringBlacklist() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ckp.ref.Append("query_string_blacklist"))
}

func (ckp DataCdnPolicyCacheKeyPolicyAttributes) QueryStringWhitelist() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ckp.ref.Append("query_string_whitelist"))
}

type DataCdnPolicyNegativeCachingPolicyAttributes struct {
	ref terra.Reference
}

func (ncp DataCdnPolicyNegativeCachingPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ncp.ref, nil
}

func (ncp DataCdnPolicyNegativeCachingPolicyAttributes) InternalWithRef(ref terra.Reference) DataCdnPolicyNegativeCachingPolicyAttributes {
	return DataCdnPolicyNegativeCachingPolicyAttributes{ref: ref}
}

func (ncp DataCdnPolicyNegativeCachingPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ncp.ref.InternalTokens()
}

func (ncp DataCdnPolicyNegativeCachingPolicyAttributes) Code() terra.NumberValue {
	return terra.ReferenceAsNumber(ncp.ref.Append("code"))
}

func (ncp DataCdnPolicyNegativeCachingPolicyAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(ncp.ref.Append("ttl"))
}

type DataCircuitBreakersAttributes struct {
	ref terra.Reference
}

func (cb DataCircuitBreakersAttributes) InternalRef() (terra.Reference, error) {
	return cb.ref, nil
}

func (cb DataCircuitBreakersAttributes) InternalWithRef(ref terra.Reference) DataCircuitBreakersAttributes {
	return DataCircuitBreakersAttributes{ref: ref}
}

func (cb DataCircuitBreakersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cb.ref.InternalTokens()
}

func (cb DataCircuitBreakersAttributes) MaxConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(cb.ref.Append("max_connections"))
}

func (cb DataCircuitBreakersAttributes) MaxPendingRequests() terra.NumberValue {
	return terra.ReferenceAsNumber(cb.ref.Append("max_pending_requests"))
}

func (cb DataCircuitBreakersAttributes) MaxRequests() terra.NumberValue {
	return terra.ReferenceAsNumber(cb.ref.Append("max_requests"))
}

func (cb DataCircuitBreakersAttributes) MaxRequestsPerConnection() terra.NumberValue {
	return terra.ReferenceAsNumber(cb.ref.Append("max_requests_per_connection"))
}

func (cb DataCircuitBreakersAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(cb.ref.Append("max_retries"))
}

type DataConsistentHashAttributes struct {
	ref terra.Reference
}

func (ch DataConsistentHashAttributes) InternalRef() (terra.Reference, error) {
	return ch.ref, nil
}

func (ch DataConsistentHashAttributes) InternalWithRef(ref terra.Reference) DataConsistentHashAttributes {
	return DataConsistentHashAttributes{ref: ref}
}

func (ch DataConsistentHashAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ch.ref.InternalTokens()
}

func (ch DataConsistentHashAttributes) HttpHeaderName() terra.StringValue {
	return terra.ReferenceAsString(ch.ref.Append("http_header_name"))
}

func (ch DataConsistentHashAttributes) MinimumRingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ch.ref.Append("minimum_ring_size"))
}

func (ch DataConsistentHashAttributes) HttpCookie() terra.ListValue[DataConsistentHashHttpCookieAttributes] {
	return terra.ReferenceAsList[DataConsistentHashHttpCookieAttributes](ch.ref.Append("http_cookie"))
}

type DataConsistentHashHttpCookieAttributes struct {
	ref terra.Reference
}

func (hc DataConsistentHashHttpCookieAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc DataConsistentHashHttpCookieAttributes) InternalWithRef(ref terra.Reference) DataConsistentHashHttpCookieAttributes {
	return DataConsistentHashHttpCookieAttributes{ref: ref}
}

func (hc DataConsistentHashHttpCookieAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc DataConsistentHashHttpCookieAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("name"))
}

func (hc DataConsistentHashHttpCookieAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("path"))
}

func (hc DataConsistentHashHttpCookieAttributes) Ttl() terra.ListValue[DataConsistentHashHttpCookieTtlAttributes] {
	return terra.ReferenceAsList[DataConsistentHashHttpCookieTtlAttributes](hc.ref.Append("ttl"))
}

type DataConsistentHashHttpCookieTtlAttributes struct {
	ref terra.Reference
}

func (t DataConsistentHashHttpCookieTtlAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataConsistentHashHttpCookieTtlAttributes) InternalWithRef(ref terra.Reference) DataConsistentHashHttpCookieTtlAttributes {
	return DataConsistentHashHttpCookieTtlAttributes{ref: ref}
}

func (t DataConsistentHashHttpCookieTtlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataConsistentHashHttpCookieTtlAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("nanos"))
}

func (t DataConsistentHashHttpCookieTtlAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("seconds"))
}

type DataIapAttributes struct {
	ref terra.Reference
}

func (i DataIapAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DataIapAttributes) InternalWithRef(ref terra.Reference) DataIapAttributes {
	return DataIapAttributes{ref: ref}
}

func (i DataIapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DataIapAttributes) Oauth2ClientId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("oauth2_client_id"))
}

func (i DataIapAttributes) Oauth2ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("oauth2_client_secret"))
}

func (i DataIapAttributes) Oauth2ClientSecretSha256() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("oauth2_client_secret_sha256"))
}

type DataLocalityLbPoliciesAttributes struct {
	ref terra.Reference
}

func (llp DataLocalityLbPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return llp.ref, nil
}

func (llp DataLocalityLbPoliciesAttributes) InternalWithRef(ref terra.Reference) DataLocalityLbPoliciesAttributes {
	return DataLocalityLbPoliciesAttributes{ref: ref}
}

func (llp DataLocalityLbPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return llp.ref.InternalTokens()
}

func (llp DataLocalityLbPoliciesAttributes) CustomPolicy() terra.ListValue[DataLocalityLbPoliciesCustomPolicyAttributes] {
	return terra.ReferenceAsList[DataLocalityLbPoliciesCustomPolicyAttributes](llp.ref.Append("custom_policy"))
}

func (llp DataLocalityLbPoliciesAttributes) Policy() terra.ListValue[DataLocalityLbPoliciesPolicyAttributes] {
	return terra.ReferenceAsList[DataLocalityLbPoliciesPolicyAttributes](llp.ref.Append("policy"))
}

type DataLocalityLbPoliciesCustomPolicyAttributes struct {
	ref terra.Reference
}

func (cp DataLocalityLbPoliciesCustomPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp DataLocalityLbPoliciesCustomPolicyAttributes) InternalWithRef(ref terra.Reference) DataLocalityLbPoliciesCustomPolicyAttributes {
	return DataLocalityLbPoliciesCustomPolicyAttributes{ref: ref}
}

func (cp DataLocalityLbPoliciesCustomPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp DataLocalityLbPoliciesCustomPolicyAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("data"))
}

func (cp DataLocalityLbPoliciesCustomPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("name"))
}

type DataLocalityLbPoliciesPolicyAttributes struct {
	ref terra.Reference
}

func (p DataLocalityLbPoliciesPolicyAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DataLocalityLbPoliciesPolicyAttributes) InternalWithRef(ref terra.Reference) DataLocalityLbPoliciesPolicyAttributes {
	return DataLocalityLbPoliciesPolicyAttributes{ref: ref}
}

func (p DataLocalityLbPoliciesPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DataLocalityLbPoliciesPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

type DataLogConfigAttributes struct {
	ref terra.Reference
}

func (lc DataLogConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc DataLogConfigAttributes) InternalWithRef(ref terra.Reference) DataLogConfigAttributes {
	return DataLogConfigAttributes{ref: ref}
}

func (lc DataLogConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc DataLogConfigAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("enable"))
}

func (lc DataLogConfigAttributes) SampleRate() terra.NumberValue {
	return terra.ReferenceAsNumber(lc.ref.Append("sample_rate"))
}

type DataOutlierDetectionAttributes struct {
	ref terra.Reference
}

func (od DataOutlierDetectionAttributes) InternalRef() (terra.Reference, error) {
	return od.ref, nil
}

func (od DataOutlierDetectionAttributes) InternalWithRef(ref terra.Reference) DataOutlierDetectionAttributes {
	return DataOutlierDetectionAttributes{ref: ref}
}

func (od DataOutlierDetectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return od.ref.InternalTokens()
}

func (od DataOutlierDetectionAttributes) ConsecutiveErrors() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("consecutive_errors"))
}

func (od DataOutlierDetectionAttributes) ConsecutiveGatewayFailure() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("consecutive_gateway_failure"))
}

func (od DataOutlierDetectionAttributes) EnforcingConsecutiveErrors() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("enforcing_consecutive_errors"))
}

func (od DataOutlierDetectionAttributes) EnforcingConsecutiveGatewayFailure() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("enforcing_consecutive_gateway_failure"))
}

func (od DataOutlierDetectionAttributes) EnforcingSuccessRate() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("enforcing_success_rate"))
}

func (od DataOutlierDetectionAttributes) MaxEjectionPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("max_ejection_percent"))
}

func (od DataOutlierDetectionAttributes) SuccessRateMinimumHosts() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("success_rate_minimum_hosts"))
}

func (od DataOutlierDetectionAttributes) SuccessRateRequestVolume() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("success_rate_request_volume"))
}

func (od DataOutlierDetectionAttributes) SuccessRateStdevFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("success_rate_stdev_factor"))
}

func (od DataOutlierDetectionAttributes) BaseEjectionTime() terra.ListValue[DataOutlierDetectionBaseEjectionTimeAttributes] {
	return terra.ReferenceAsList[DataOutlierDetectionBaseEjectionTimeAttributes](od.ref.Append("base_ejection_time"))
}

func (od DataOutlierDetectionAttributes) Interval() terra.ListValue[DataOutlierDetectionIntervalAttributes] {
	return terra.ReferenceAsList[DataOutlierDetectionIntervalAttributes](od.ref.Append("interval"))
}

type DataOutlierDetectionBaseEjectionTimeAttributes struct {
	ref terra.Reference
}

func (bet DataOutlierDetectionBaseEjectionTimeAttributes) InternalRef() (terra.Reference, error) {
	return bet.ref, nil
}

func (bet DataOutlierDetectionBaseEjectionTimeAttributes) InternalWithRef(ref terra.Reference) DataOutlierDetectionBaseEjectionTimeAttributes {
	return DataOutlierDetectionBaseEjectionTimeAttributes{ref: ref}
}

func (bet DataOutlierDetectionBaseEjectionTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bet.ref.InternalTokens()
}

func (bet DataOutlierDetectionBaseEjectionTimeAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(bet.ref.Append("nanos"))
}

func (bet DataOutlierDetectionBaseEjectionTimeAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceAsNumber(bet.ref.Append("seconds"))
}

type DataOutlierDetectionIntervalAttributes struct {
	ref terra.Reference
}

func (i DataOutlierDetectionIntervalAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DataOutlierDetectionIntervalAttributes) InternalWithRef(ref terra.Reference) DataOutlierDetectionIntervalAttributes {
	return DataOutlierDetectionIntervalAttributes{ref: ref}
}

func (i DataOutlierDetectionIntervalAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DataOutlierDetectionIntervalAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("nanos"))
}

func (i DataOutlierDetectionIntervalAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("seconds"))
}

type DataSecuritySettingsAttributes struct {
	ref terra.Reference
}

func (ss DataSecuritySettingsAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss DataSecuritySettingsAttributes) InternalWithRef(ref terra.Reference) DataSecuritySettingsAttributes {
	return DataSecuritySettingsAttributes{ref: ref}
}

func (ss DataSecuritySettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss DataSecuritySettingsAttributes) ClientTlsPolicy() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("client_tls_policy"))
}

func (ss DataSecuritySettingsAttributes) SubjectAltNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ss.ref.Append("subject_alt_names"))
}

type DataBackendState struct {
	BalancingMode             string  `json:"balancing_mode"`
	CapacityScaler            float64 `json:"capacity_scaler"`
	Description               string  `json:"description"`
	Group                     string  `json:"group"`
	MaxConnections            float64 `json:"max_connections"`
	MaxConnectionsPerEndpoint float64 `json:"max_connections_per_endpoint"`
	MaxConnectionsPerInstance float64 `json:"max_connections_per_instance"`
	MaxRate                   float64 `json:"max_rate"`
	MaxRatePerEndpoint        float64 `json:"max_rate_per_endpoint"`
	MaxRatePerInstance        float64 `json:"max_rate_per_instance"`
	MaxUtilization            float64 `json:"max_utilization"`
}

type DataCdnPolicyState struct {
	CacheMode                   string                                          `json:"cache_mode"`
	ClientTtl                   float64                                         `json:"client_ttl"`
	DefaultTtl                  float64                                         `json:"default_ttl"`
	MaxTtl                      float64                                         `json:"max_ttl"`
	NegativeCaching             bool                                            `json:"negative_caching"`
	ServeWhileStale             float64                                         `json:"serve_while_stale"`
	SignedUrlCacheMaxAgeSec     float64                                         `json:"signed_url_cache_max_age_sec"`
	BypassCacheOnRequestHeaders []DataCdnPolicyBypassCacheOnRequestHeadersState `json:"bypass_cache_on_request_headers"`
	CacheKeyPolicy              []DataCdnPolicyCacheKeyPolicyState              `json:"cache_key_policy"`
	NegativeCachingPolicy       []DataCdnPolicyNegativeCachingPolicyState       `json:"negative_caching_policy"`
}

type DataCdnPolicyBypassCacheOnRequestHeadersState struct {
	HeaderName string `json:"header_name"`
}

type DataCdnPolicyCacheKeyPolicyState struct {
	IncludeHost          bool     `json:"include_host"`
	IncludeHttpHeaders   []string `json:"include_http_headers"`
	IncludeNamedCookies  []string `json:"include_named_cookies"`
	IncludeProtocol      bool     `json:"include_protocol"`
	IncludeQueryString   bool     `json:"include_query_string"`
	QueryStringBlacklist []string `json:"query_string_blacklist"`
	QueryStringWhitelist []string `json:"query_string_whitelist"`
}

type DataCdnPolicyNegativeCachingPolicyState struct {
	Code float64 `json:"code"`
	Ttl  float64 `json:"ttl"`
}

type DataCircuitBreakersState struct {
	MaxConnections           float64 `json:"max_connections"`
	MaxPendingRequests       float64 `json:"max_pending_requests"`
	MaxRequests              float64 `json:"max_requests"`
	MaxRequestsPerConnection float64 `json:"max_requests_per_connection"`
	MaxRetries               float64 `json:"max_retries"`
}

type DataConsistentHashState struct {
	HttpHeaderName  string                              `json:"http_header_name"`
	MinimumRingSize float64                             `json:"minimum_ring_size"`
	HttpCookie      []DataConsistentHashHttpCookieState `json:"http_cookie"`
}

type DataConsistentHashHttpCookieState struct {
	Name string                                 `json:"name"`
	Path string                                 `json:"path"`
	Ttl  []DataConsistentHashHttpCookieTtlState `json:"ttl"`
}

type DataConsistentHashHttpCookieTtlState struct {
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type DataIapState struct {
	Oauth2ClientId           string `json:"oauth2_client_id"`
	Oauth2ClientSecret       string `json:"oauth2_client_secret"`
	Oauth2ClientSecretSha256 string `json:"oauth2_client_secret_sha256"`
}

type DataLocalityLbPoliciesState struct {
	CustomPolicy []DataLocalityLbPoliciesCustomPolicyState `json:"custom_policy"`
	Policy       []DataLocalityLbPoliciesPolicyState       `json:"policy"`
}

type DataLocalityLbPoliciesCustomPolicyState struct {
	Data string `json:"data"`
	Name string `json:"name"`
}

type DataLocalityLbPoliciesPolicyState struct {
	Name string `json:"name"`
}

type DataLogConfigState struct {
	Enable     bool    `json:"enable"`
	SampleRate float64 `json:"sample_rate"`
}

type DataOutlierDetectionState struct {
	ConsecutiveErrors                  float64                                     `json:"consecutive_errors"`
	ConsecutiveGatewayFailure          float64                                     `json:"consecutive_gateway_failure"`
	EnforcingConsecutiveErrors         float64                                     `json:"enforcing_consecutive_errors"`
	EnforcingConsecutiveGatewayFailure float64                                     `json:"enforcing_consecutive_gateway_failure"`
	EnforcingSuccessRate               float64                                     `json:"enforcing_success_rate"`
	MaxEjectionPercent                 float64                                     `json:"max_ejection_percent"`
	SuccessRateMinimumHosts            float64                                     `json:"success_rate_minimum_hosts"`
	SuccessRateRequestVolume           float64                                     `json:"success_rate_request_volume"`
	SuccessRateStdevFactor             float64                                     `json:"success_rate_stdev_factor"`
	BaseEjectionTime                   []DataOutlierDetectionBaseEjectionTimeState `json:"base_ejection_time"`
	Interval                           []DataOutlierDetectionIntervalState         `json:"interval"`
}

type DataOutlierDetectionBaseEjectionTimeState struct {
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type DataOutlierDetectionIntervalState struct {
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type DataSecuritySettingsState struct {
	ClientTlsPolicy string   `json:"client_tls_policy"`
	SubjectAltNames []string `json:"subject_alt_names"`
}
