// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_backend_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Backend struct {
	// BalancingMode: string, optional
	BalancingMode terra.StringValue `hcl:"balancing_mode,attr"`
	// CapacityScaler: number, optional
	CapacityScaler terra.NumberValue `hcl:"capacity_scaler,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Group: string, required
	Group terra.StringValue `hcl:"group,attr" validate:"required"`
	// MaxConnections: number, optional
	MaxConnections terra.NumberValue `hcl:"max_connections,attr"`
	// MaxConnectionsPerEndpoint: number, optional
	MaxConnectionsPerEndpoint terra.NumberValue `hcl:"max_connections_per_endpoint,attr"`
	// MaxConnectionsPerInstance: number, optional
	MaxConnectionsPerInstance terra.NumberValue `hcl:"max_connections_per_instance,attr"`
	// MaxRate: number, optional
	MaxRate terra.NumberValue `hcl:"max_rate,attr"`
	// MaxRatePerEndpoint: number, optional
	MaxRatePerEndpoint terra.NumberValue `hcl:"max_rate_per_endpoint,attr"`
	// MaxRatePerInstance: number, optional
	MaxRatePerInstance terra.NumberValue `hcl:"max_rate_per_instance,attr"`
	// MaxUtilization: number, optional
	MaxUtilization terra.NumberValue `hcl:"max_utilization,attr"`
}

type CdnPolicy struct {
	// CacheMode: string, optional
	CacheMode terra.StringValue `hcl:"cache_mode,attr"`
	// ClientTtl: number, optional
	ClientTtl terra.NumberValue `hcl:"client_ttl,attr"`
	// DefaultTtl: number, optional
	DefaultTtl terra.NumberValue `hcl:"default_ttl,attr"`
	// MaxTtl: number, optional
	MaxTtl terra.NumberValue `hcl:"max_ttl,attr"`
	// NegativeCaching: bool, optional
	NegativeCaching terra.BoolValue `hcl:"negative_caching,attr"`
	// ServeWhileStale: number, optional
	ServeWhileStale terra.NumberValue `hcl:"serve_while_stale,attr"`
	// SignedUrlCacheMaxAgeSec: number, optional
	SignedUrlCacheMaxAgeSec terra.NumberValue `hcl:"signed_url_cache_max_age_sec,attr"`
	// CdnPolicyBypassCacheOnRequestHeaders: min=0
	BypassCacheOnRequestHeaders []CdnPolicyBypassCacheOnRequestHeaders `hcl:"bypass_cache_on_request_headers,block" validate:"min=0"`
	// CdnPolicyCacheKeyPolicy: optional
	CacheKeyPolicy *CdnPolicyCacheKeyPolicy `hcl:"cache_key_policy,block"`
	// CdnPolicyNegativeCachingPolicy: min=0
	NegativeCachingPolicy []CdnPolicyNegativeCachingPolicy `hcl:"negative_caching_policy,block" validate:"min=0"`
}

type CdnPolicyBypassCacheOnRequestHeaders struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
}

type CdnPolicyCacheKeyPolicy struct {
	// IncludeHost: bool, optional
	IncludeHost terra.BoolValue `hcl:"include_host,attr"`
	// IncludeHttpHeaders: list of string, optional
	IncludeHttpHeaders terra.ListValue[terra.StringValue] `hcl:"include_http_headers,attr"`
	// IncludeNamedCookies: list of string, optional
	IncludeNamedCookies terra.ListValue[terra.StringValue] `hcl:"include_named_cookies,attr"`
	// IncludeProtocol: bool, optional
	IncludeProtocol terra.BoolValue `hcl:"include_protocol,attr"`
	// IncludeQueryString: bool, optional
	IncludeQueryString terra.BoolValue `hcl:"include_query_string,attr"`
	// QueryStringBlacklist: set of string, optional
	QueryStringBlacklist terra.SetValue[terra.StringValue] `hcl:"query_string_blacklist,attr"`
	// QueryStringWhitelist: set of string, optional
	QueryStringWhitelist terra.SetValue[terra.StringValue] `hcl:"query_string_whitelist,attr"`
}

type CdnPolicyNegativeCachingPolicy struct {
	// Code: number, optional
	Code terra.NumberValue `hcl:"code,attr"`
	// Ttl: number, optional
	Ttl terra.NumberValue `hcl:"ttl,attr"`
}

type CircuitBreakers struct {
	// MaxConnections: number, optional
	MaxConnections terra.NumberValue `hcl:"max_connections,attr"`
	// MaxPendingRequests: number, optional
	MaxPendingRequests terra.NumberValue `hcl:"max_pending_requests,attr"`
	// MaxRequests: number, optional
	MaxRequests terra.NumberValue `hcl:"max_requests,attr"`
	// MaxRequestsPerConnection: number, optional
	MaxRequestsPerConnection terra.NumberValue `hcl:"max_requests_per_connection,attr"`
	// MaxRetries: number, optional
	MaxRetries terra.NumberValue `hcl:"max_retries,attr"`
}

type ConsistentHash struct {
	// HttpHeaderName: string, optional
	HttpHeaderName terra.StringValue `hcl:"http_header_name,attr"`
	// MinimumRingSize: number, optional
	MinimumRingSize terra.NumberValue `hcl:"minimum_ring_size,attr"`
	// ConsistentHashHttpCookie: optional
	HttpCookie *ConsistentHashHttpCookie `hcl:"http_cookie,block"`
}

type ConsistentHashHttpCookie struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// ConsistentHashHttpCookieTtl: optional
	Ttl *ConsistentHashHttpCookieTtl `hcl:"ttl,block"`
}

type ConsistentHashHttpCookieTtl struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: number, required
	Seconds terra.NumberValue `hcl:"seconds,attr" validate:"required"`
}

type Iap struct {
	// Oauth2ClientId: string, required
	Oauth2ClientId terra.StringValue `hcl:"oauth2_client_id,attr" validate:"required"`
	// Oauth2ClientSecret: string, required
	Oauth2ClientSecret terra.StringValue `hcl:"oauth2_client_secret,attr" validate:"required"`
}

type LocalityLbPolicies struct {
	// LocalityLbPoliciesCustomPolicy: optional
	CustomPolicy *LocalityLbPoliciesCustomPolicy `hcl:"custom_policy,block"`
	// LocalityLbPoliciesPolicy: optional
	Policy *LocalityLbPoliciesPolicy `hcl:"policy,block"`
}

type LocalityLbPoliciesCustomPolicy struct {
	// Data: string, optional
	Data terra.StringValue `hcl:"data,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type LocalityLbPoliciesPolicy struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type LogConfig struct {
	// Enable: bool, optional
	Enable terra.BoolValue `hcl:"enable,attr"`
	// SampleRate: number, optional
	SampleRate terra.NumberValue `hcl:"sample_rate,attr"`
}

type OutlierDetection struct {
	// ConsecutiveErrors: number, optional
	ConsecutiveErrors terra.NumberValue `hcl:"consecutive_errors,attr"`
	// ConsecutiveGatewayFailure: number, optional
	ConsecutiveGatewayFailure terra.NumberValue `hcl:"consecutive_gateway_failure,attr"`
	// EnforcingConsecutiveErrors: number, optional
	EnforcingConsecutiveErrors terra.NumberValue `hcl:"enforcing_consecutive_errors,attr"`
	// EnforcingConsecutiveGatewayFailure: number, optional
	EnforcingConsecutiveGatewayFailure terra.NumberValue `hcl:"enforcing_consecutive_gateway_failure,attr"`
	// EnforcingSuccessRate: number, optional
	EnforcingSuccessRate terra.NumberValue `hcl:"enforcing_success_rate,attr"`
	// MaxEjectionPercent: number, optional
	MaxEjectionPercent terra.NumberValue `hcl:"max_ejection_percent,attr"`
	// SuccessRateMinimumHosts: number, optional
	SuccessRateMinimumHosts terra.NumberValue `hcl:"success_rate_minimum_hosts,attr"`
	// SuccessRateRequestVolume: number, optional
	SuccessRateRequestVolume terra.NumberValue `hcl:"success_rate_request_volume,attr"`
	// SuccessRateStdevFactor: number, optional
	SuccessRateStdevFactor terra.NumberValue `hcl:"success_rate_stdev_factor,attr"`
	// OutlierDetectionBaseEjectionTime: optional
	BaseEjectionTime *OutlierDetectionBaseEjectionTime `hcl:"base_ejection_time,block"`
	// OutlierDetectionInterval: optional
	Interval *OutlierDetectionInterval `hcl:"interval,block"`
}

type OutlierDetectionBaseEjectionTime struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: number, required
	Seconds terra.NumberValue `hcl:"seconds,attr" validate:"required"`
}

type OutlierDetectionInterval struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: number, required
	Seconds terra.NumberValue `hcl:"seconds,attr" validate:"required"`
}

type SecuritySettings struct {
	// ClientTlsPolicy: string, required
	ClientTlsPolicy terra.StringValue `hcl:"client_tls_policy,attr" validate:"required"`
	// SubjectAltNames: list of string, required
	SubjectAltNames terra.ListValue[terra.StringValue] `hcl:"subject_alt_names,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BackendAttributes struct {
	ref terra.Reference
}

func (b BackendAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BackendAttributes) InternalWithRef(ref terra.Reference) BackendAttributes {
	return BackendAttributes{ref: ref}
}

func (b BackendAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BackendAttributes) BalancingMode() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("balancing_mode"))
}

func (b BackendAttributes) CapacityScaler() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("capacity_scaler"))
}

func (b BackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("description"))
}

func (b BackendAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("group"))
}

func (b BackendAttributes) MaxConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("max_connections"))
}

func (b BackendAttributes) MaxConnectionsPerEndpoint() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("max_connections_per_endpoint"))
}

func (b BackendAttributes) MaxConnectionsPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("max_connections_per_instance"))
}

func (b BackendAttributes) MaxRate() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("max_rate"))
}

func (b BackendAttributes) MaxRatePerEndpoint() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("max_rate_per_endpoint"))
}

func (b BackendAttributes) MaxRatePerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("max_rate_per_instance"))
}

func (b BackendAttributes) MaxUtilization() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("max_utilization"))
}

type CdnPolicyAttributes struct {
	ref terra.Reference
}

func (cp CdnPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp CdnPolicyAttributes) InternalWithRef(ref terra.Reference) CdnPolicyAttributes {
	return CdnPolicyAttributes{ref: ref}
}

func (cp CdnPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp CdnPolicyAttributes) CacheMode() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("cache_mode"))
}

func (cp CdnPolicyAttributes) ClientTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("client_ttl"))
}

func (cp CdnPolicyAttributes) DefaultTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("default_ttl"))
}

func (cp CdnPolicyAttributes) MaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("max_ttl"))
}

func (cp CdnPolicyAttributes) NegativeCaching() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("negative_caching"))
}

func (cp CdnPolicyAttributes) ServeWhileStale() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("serve_while_stale"))
}

func (cp CdnPolicyAttributes) SignedUrlCacheMaxAgeSec() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("signed_url_cache_max_age_sec"))
}

func (cp CdnPolicyAttributes) BypassCacheOnRequestHeaders() terra.ListValue[CdnPolicyBypassCacheOnRequestHeadersAttributes] {
	return terra.ReferenceAsList[CdnPolicyBypassCacheOnRequestHeadersAttributes](cp.ref.Append("bypass_cache_on_request_headers"))
}

func (cp CdnPolicyAttributes) CacheKeyPolicy() terra.ListValue[CdnPolicyCacheKeyPolicyAttributes] {
	return terra.ReferenceAsList[CdnPolicyCacheKeyPolicyAttributes](cp.ref.Append("cache_key_policy"))
}

func (cp CdnPolicyAttributes) NegativeCachingPolicy() terra.ListValue[CdnPolicyNegativeCachingPolicyAttributes] {
	return terra.ReferenceAsList[CdnPolicyNegativeCachingPolicyAttributes](cp.ref.Append("negative_caching_policy"))
}

type CdnPolicyBypassCacheOnRequestHeadersAttributes struct {
	ref terra.Reference
}

func (bcorh CdnPolicyBypassCacheOnRequestHeadersAttributes) InternalRef() (terra.Reference, error) {
	return bcorh.ref, nil
}

func (bcorh CdnPolicyBypassCacheOnRequestHeadersAttributes) InternalWithRef(ref terra.Reference) CdnPolicyBypassCacheOnRequestHeadersAttributes {
	return CdnPolicyBypassCacheOnRequestHeadersAttributes{ref: ref}
}

func (bcorh CdnPolicyBypassCacheOnRequestHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bcorh.ref.InternalTokens()
}

func (bcorh CdnPolicyBypassCacheOnRequestHeadersAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(bcorh.ref.Append("header_name"))
}

type CdnPolicyCacheKeyPolicyAttributes struct {
	ref terra.Reference
}

func (ckp CdnPolicyCacheKeyPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ckp.ref, nil
}

func (ckp CdnPolicyCacheKeyPolicyAttributes) InternalWithRef(ref terra.Reference) CdnPolicyCacheKeyPolicyAttributes {
	return CdnPolicyCacheKeyPolicyAttributes{ref: ref}
}

func (ckp CdnPolicyCacheKeyPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ckp.ref.InternalTokens()
}

func (ckp CdnPolicyCacheKeyPolicyAttributes) IncludeHost() terra.BoolValue {
	return terra.ReferenceAsBool(ckp.ref.Append("include_host"))
}

func (ckp CdnPolicyCacheKeyPolicyAttributes) IncludeHttpHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ckp.ref.Append("include_http_headers"))
}

func (ckp CdnPolicyCacheKeyPolicyAttributes) IncludeNamedCookies() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ckp.ref.Append("include_named_cookies"))
}

func (ckp CdnPolicyCacheKeyPolicyAttributes) IncludeProtocol() terra.BoolValue {
	return terra.ReferenceAsBool(ckp.ref.Append("include_protocol"))
}

func (ckp CdnPolicyCacheKeyPolicyAttributes) IncludeQueryString() terra.BoolValue {
	return terra.ReferenceAsBool(ckp.ref.Append("include_query_string"))
}

func (ckp CdnPolicyCacheKeyPolicyAttributes) QueryStringBlacklist() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ckp.ref.Append("query_string_blacklist"))
}

func (ckp CdnPolicyCacheKeyPolicyAttributes) QueryStringWhitelist() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ckp.ref.Append("query_string_whitelist"))
}

type CdnPolicyNegativeCachingPolicyAttributes struct {
	ref terra.Reference
}

func (ncp CdnPolicyNegativeCachingPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ncp.ref, nil
}

func (ncp CdnPolicyNegativeCachingPolicyAttributes) InternalWithRef(ref terra.Reference) CdnPolicyNegativeCachingPolicyAttributes {
	return CdnPolicyNegativeCachingPolicyAttributes{ref: ref}
}

func (ncp CdnPolicyNegativeCachingPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ncp.ref.InternalTokens()
}

func (ncp CdnPolicyNegativeCachingPolicyAttributes) Code() terra.NumberValue {
	return terra.ReferenceAsNumber(ncp.ref.Append("code"))
}

func (ncp CdnPolicyNegativeCachingPolicyAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(ncp.ref.Append("ttl"))
}

type CircuitBreakersAttributes struct {
	ref terra.Reference
}

func (cb CircuitBreakersAttributes) InternalRef() (terra.Reference, error) {
	return cb.ref, nil
}

func (cb CircuitBreakersAttributes) InternalWithRef(ref terra.Reference) CircuitBreakersAttributes {
	return CircuitBreakersAttributes{ref: ref}
}

func (cb CircuitBreakersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cb.ref.InternalTokens()
}

func (cb CircuitBreakersAttributes) MaxConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(cb.ref.Append("max_connections"))
}

func (cb CircuitBreakersAttributes) MaxPendingRequests() terra.NumberValue {
	return terra.ReferenceAsNumber(cb.ref.Append("max_pending_requests"))
}

func (cb CircuitBreakersAttributes) MaxRequests() terra.NumberValue {
	return terra.ReferenceAsNumber(cb.ref.Append("max_requests"))
}

func (cb CircuitBreakersAttributes) MaxRequestsPerConnection() terra.NumberValue {
	return terra.ReferenceAsNumber(cb.ref.Append("max_requests_per_connection"))
}

func (cb CircuitBreakersAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(cb.ref.Append("max_retries"))
}

type ConsistentHashAttributes struct {
	ref terra.Reference
}

func (ch ConsistentHashAttributes) InternalRef() (terra.Reference, error) {
	return ch.ref, nil
}

func (ch ConsistentHashAttributes) InternalWithRef(ref terra.Reference) ConsistentHashAttributes {
	return ConsistentHashAttributes{ref: ref}
}

func (ch ConsistentHashAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ch.ref.InternalTokens()
}

func (ch ConsistentHashAttributes) HttpHeaderName() terra.StringValue {
	return terra.ReferenceAsString(ch.ref.Append("http_header_name"))
}

func (ch ConsistentHashAttributes) MinimumRingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ch.ref.Append("minimum_ring_size"))
}

func (ch ConsistentHashAttributes) HttpCookie() terra.ListValue[ConsistentHashHttpCookieAttributes] {
	return terra.ReferenceAsList[ConsistentHashHttpCookieAttributes](ch.ref.Append("http_cookie"))
}

type ConsistentHashHttpCookieAttributes struct {
	ref terra.Reference
}

func (hc ConsistentHashHttpCookieAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc ConsistentHashHttpCookieAttributes) InternalWithRef(ref terra.Reference) ConsistentHashHttpCookieAttributes {
	return ConsistentHashHttpCookieAttributes{ref: ref}
}

func (hc ConsistentHashHttpCookieAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc ConsistentHashHttpCookieAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("name"))
}

func (hc ConsistentHashHttpCookieAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("path"))
}

func (hc ConsistentHashHttpCookieAttributes) Ttl() terra.ListValue[ConsistentHashHttpCookieTtlAttributes] {
	return terra.ReferenceAsList[ConsistentHashHttpCookieTtlAttributes](hc.ref.Append("ttl"))
}

type ConsistentHashHttpCookieTtlAttributes struct {
	ref terra.Reference
}

func (t ConsistentHashHttpCookieTtlAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ConsistentHashHttpCookieTtlAttributes) InternalWithRef(ref terra.Reference) ConsistentHashHttpCookieTtlAttributes {
	return ConsistentHashHttpCookieTtlAttributes{ref: ref}
}

func (t ConsistentHashHttpCookieTtlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ConsistentHashHttpCookieTtlAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("nanos"))
}

func (t ConsistentHashHttpCookieTtlAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("seconds"))
}

type IapAttributes struct {
	ref terra.Reference
}

func (i IapAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IapAttributes) InternalWithRef(ref terra.Reference) IapAttributes {
	return IapAttributes{ref: ref}
}

func (i IapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IapAttributes) Oauth2ClientId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("oauth2_client_id"))
}

func (i IapAttributes) Oauth2ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("oauth2_client_secret"))
}

func (i IapAttributes) Oauth2ClientSecretSha256() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("oauth2_client_secret_sha256"))
}

type LocalityLbPoliciesAttributes struct {
	ref terra.Reference
}

func (llp LocalityLbPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return llp.ref, nil
}

func (llp LocalityLbPoliciesAttributes) InternalWithRef(ref terra.Reference) LocalityLbPoliciesAttributes {
	return LocalityLbPoliciesAttributes{ref: ref}
}

func (llp LocalityLbPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return llp.ref.InternalTokens()
}

func (llp LocalityLbPoliciesAttributes) CustomPolicy() terra.ListValue[LocalityLbPoliciesCustomPolicyAttributes] {
	return terra.ReferenceAsList[LocalityLbPoliciesCustomPolicyAttributes](llp.ref.Append("custom_policy"))
}

func (llp LocalityLbPoliciesAttributes) Policy() terra.ListValue[LocalityLbPoliciesPolicyAttributes] {
	return terra.ReferenceAsList[LocalityLbPoliciesPolicyAttributes](llp.ref.Append("policy"))
}

type LocalityLbPoliciesCustomPolicyAttributes struct {
	ref terra.Reference
}

func (cp LocalityLbPoliciesCustomPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp LocalityLbPoliciesCustomPolicyAttributes) InternalWithRef(ref terra.Reference) LocalityLbPoliciesCustomPolicyAttributes {
	return LocalityLbPoliciesCustomPolicyAttributes{ref: ref}
}

func (cp LocalityLbPoliciesCustomPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp LocalityLbPoliciesCustomPolicyAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("data"))
}

func (cp LocalityLbPoliciesCustomPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("name"))
}

type LocalityLbPoliciesPolicyAttributes struct {
	ref terra.Reference
}

func (p LocalityLbPoliciesPolicyAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p LocalityLbPoliciesPolicyAttributes) InternalWithRef(ref terra.Reference) LocalityLbPoliciesPolicyAttributes {
	return LocalityLbPoliciesPolicyAttributes{ref: ref}
}

func (p LocalityLbPoliciesPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p LocalityLbPoliciesPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

type LogConfigAttributes struct {
	ref terra.Reference
}

func (lc LogConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LogConfigAttributes) InternalWithRef(ref terra.Reference) LogConfigAttributes {
	return LogConfigAttributes{ref: ref}
}

func (lc LogConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LogConfigAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("enable"))
}

func (lc LogConfigAttributes) SampleRate() terra.NumberValue {
	return terra.ReferenceAsNumber(lc.ref.Append("sample_rate"))
}

type OutlierDetectionAttributes struct {
	ref terra.Reference
}

func (od OutlierDetectionAttributes) InternalRef() (terra.Reference, error) {
	return od.ref, nil
}

func (od OutlierDetectionAttributes) InternalWithRef(ref terra.Reference) OutlierDetectionAttributes {
	return OutlierDetectionAttributes{ref: ref}
}

func (od OutlierDetectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return od.ref.InternalTokens()
}

func (od OutlierDetectionAttributes) ConsecutiveErrors() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("consecutive_errors"))
}

func (od OutlierDetectionAttributes) ConsecutiveGatewayFailure() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("consecutive_gateway_failure"))
}

func (od OutlierDetectionAttributes) EnforcingConsecutiveErrors() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("enforcing_consecutive_errors"))
}

func (od OutlierDetectionAttributes) EnforcingConsecutiveGatewayFailure() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("enforcing_consecutive_gateway_failure"))
}

func (od OutlierDetectionAttributes) EnforcingSuccessRate() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("enforcing_success_rate"))
}

func (od OutlierDetectionAttributes) MaxEjectionPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("max_ejection_percent"))
}

func (od OutlierDetectionAttributes) SuccessRateMinimumHosts() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("success_rate_minimum_hosts"))
}

func (od OutlierDetectionAttributes) SuccessRateRequestVolume() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("success_rate_request_volume"))
}

func (od OutlierDetectionAttributes) SuccessRateStdevFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("success_rate_stdev_factor"))
}

func (od OutlierDetectionAttributes) BaseEjectionTime() terra.ListValue[OutlierDetectionBaseEjectionTimeAttributes] {
	return terra.ReferenceAsList[OutlierDetectionBaseEjectionTimeAttributes](od.ref.Append("base_ejection_time"))
}

func (od OutlierDetectionAttributes) Interval() terra.ListValue[OutlierDetectionIntervalAttributes] {
	return terra.ReferenceAsList[OutlierDetectionIntervalAttributes](od.ref.Append("interval"))
}

type OutlierDetectionBaseEjectionTimeAttributes struct {
	ref terra.Reference
}

func (bet OutlierDetectionBaseEjectionTimeAttributes) InternalRef() (terra.Reference, error) {
	return bet.ref, nil
}

func (bet OutlierDetectionBaseEjectionTimeAttributes) InternalWithRef(ref terra.Reference) OutlierDetectionBaseEjectionTimeAttributes {
	return OutlierDetectionBaseEjectionTimeAttributes{ref: ref}
}

func (bet OutlierDetectionBaseEjectionTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bet.ref.InternalTokens()
}

func (bet OutlierDetectionBaseEjectionTimeAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(bet.ref.Append("nanos"))
}

func (bet OutlierDetectionBaseEjectionTimeAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceAsNumber(bet.ref.Append("seconds"))
}

type OutlierDetectionIntervalAttributes struct {
	ref terra.Reference
}

func (i OutlierDetectionIntervalAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i OutlierDetectionIntervalAttributes) InternalWithRef(ref terra.Reference) OutlierDetectionIntervalAttributes {
	return OutlierDetectionIntervalAttributes{ref: ref}
}

func (i OutlierDetectionIntervalAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i OutlierDetectionIntervalAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("nanos"))
}

func (i OutlierDetectionIntervalAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("seconds"))
}

type SecuritySettingsAttributes struct {
	ref terra.Reference
}

func (ss SecuritySettingsAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss SecuritySettingsAttributes) InternalWithRef(ref terra.Reference) SecuritySettingsAttributes {
	return SecuritySettingsAttributes{ref: ref}
}

func (ss SecuritySettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss SecuritySettingsAttributes) ClientTlsPolicy() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("client_tls_policy"))
}

func (ss SecuritySettingsAttributes) SubjectAltNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ss.ref.Append("subject_alt_names"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BackendState struct {
	BalancingMode             string  `json:"balancing_mode"`
	CapacityScaler            float64 `json:"capacity_scaler"`
	Description               string  `json:"description"`
	Group                     string  `json:"group"`
	MaxConnections            float64 `json:"max_connections"`
	MaxConnectionsPerEndpoint float64 `json:"max_connections_per_endpoint"`
	MaxConnectionsPerInstance float64 `json:"max_connections_per_instance"`
	MaxRate                   float64 `json:"max_rate"`
	MaxRatePerEndpoint        float64 `json:"max_rate_per_endpoint"`
	MaxRatePerInstance        float64 `json:"max_rate_per_instance"`
	MaxUtilization            float64 `json:"max_utilization"`
}

type CdnPolicyState struct {
	CacheMode                   string                                      `json:"cache_mode"`
	ClientTtl                   float64                                     `json:"client_ttl"`
	DefaultTtl                  float64                                     `json:"default_ttl"`
	MaxTtl                      float64                                     `json:"max_ttl"`
	NegativeCaching             bool                                        `json:"negative_caching"`
	ServeWhileStale             float64                                     `json:"serve_while_stale"`
	SignedUrlCacheMaxAgeSec     float64                                     `json:"signed_url_cache_max_age_sec"`
	BypassCacheOnRequestHeaders []CdnPolicyBypassCacheOnRequestHeadersState `json:"bypass_cache_on_request_headers"`
	CacheKeyPolicy              []CdnPolicyCacheKeyPolicyState              `json:"cache_key_policy"`
	NegativeCachingPolicy       []CdnPolicyNegativeCachingPolicyState       `json:"negative_caching_policy"`
}

type CdnPolicyBypassCacheOnRequestHeadersState struct {
	HeaderName string `json:"header_name"`
}

type CdnPolicyCacheKeyPolicyState struct {
	IncludeHost          bool     `json:"include_host"`
	IncludeHttpHeaders   []string `json:"include_http_headers"`
	IncludeNamedCookies  []string `json:"include_named_cookies"`
	IncludeProtocol      bool     `json:"include_protocol"`
	IncludeQueryString   bool     `json:"include_query_string"`
	QueryStringBlacklist []string `json:"query_string_blacklist"`
	QueryStringWhitelist []string `json:"query_string_whitelist"`
}

type CdnPolicyNegativeCachingPolicyState struct {
	Code float64 `json:"code"`
	Ttl  float64 `json:"ttl"`
}

type CircuitBreakersState struct {
	MaxConnections           float64 `json:"max_connections"`
	MaxPendingRequests       float64 `json:"max_pending_requests"`
	MaxRequests              float64 `json:"max_requests"`
	MaxRequestsPerConnection float64 `json:"max_requests_per_connection"`
	MaxRetries               float64 `json:"max_retries"`
}

type ConsistentHashState struct {
	HttpHeaderName  string                          `json:"http_header_name"`
	MinimumRingSize float64                         `json:"minimum_ring_size"`
	HttpCookie      []ConsistentHashHttpCookieState `json:"http_cookie"`
}

type ConsistentHashHttpCookieState struct {
	Name string                             `json:"name"`
	Path string                             `json:"path"`
	Ttl  []ConsistentHashHttpCookieTtlState `json:"ttl"`
}

type ConsistentHashHttpCookieTtlState struct {
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type IapState struct {
	Oauth2ClientId           string `json:"oauth2_client_id"`
	Oauth2ClientSecret       string `json:"oauth2_client_secret"`
	Oauth2ClientSecretSha256 string `json:"oauth2_client_secret_sha256"`
}

type LocalityLbPoliciesState struct {
	CustomPolicy []LocalityLbPoliciesCustomPolicyState `json:"custom_policy"`
	Policy       []LocalityLbPoliciesPolicyState       `json:"policy"`
}

type LocalityLbPoliciesCustomPolicyState struct {
	Data string `json:"data"`
	Name string `json:"name"`
}

type LocalityLbPoliciesPolicyState struct {
	Name string `json:"name"`
}

type LogConfigState struct {
	Enable     bool    `json:"enable"`
	SampleRate float64 `json:"sample_rate"`
}

type OutlierDetectionState struct {
	ConsecutiveErrors                  float64                                 `json:"consecutive_errors"`
	ConsecutiveGatewayFailure          float64                                 `json:"consecutive_gateway_failure"`
	EnforcingConsecutiveErrors         float64                                 `json:"enforcing_consecutive_errors"`
	EnforcingConsecutiveGatewayFailure float64                                 `json:"enforcing_consecutive_gateway_failure"`
	EnforcingSuccessRate               float64                                 `json:"enforcing_success_rate"`
	MaxEjectionPercent                 float64                                 `json:"max_ejection_percent"`
	SuccessRateMinimumHosts            float64                                 `json:"success_rate_minimum_hosts"`
	SuccessRateRequestVolume           float64                                 `json:"success_rate_request_volume"`
	SuccessRateStdevFactor             float64                                 `json:"success_rate_stdev_factor"`
	BaseEjectionTime                   []OutlierDetectionBaseEjectionTimeState `json:"base_ejection_time"`
	Interval                           []OutlierDetectionIntervalState         `json:"interval"`
}

type OutlierDetectionBaseEjectionTimeState struct {
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type OutlierDetectionIntervalState struct {
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type SecuritySettingsState struct {
	ClientTlsPolicy string   `json:"client_tls_policy"`
	SubjectAltNames []string `json:"subject_alt_names"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
