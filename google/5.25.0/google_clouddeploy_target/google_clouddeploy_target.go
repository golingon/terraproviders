// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_clouddeploy_target

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_clouddeploy_target.
type Resource struct {
	Name      string
	Args      Args
	state     *googleClouddeployTargetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gct *Resource) Type() string {
	return "google_clouddeploy_target"
}

// LocalName returns the local name for [Resource].
func (gct *Resource) LocalName() string {
	return gct.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gct *Resource) Configuration() interface{} {
	return gct.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gct *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gct)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gct *Resource) Dependencies() terra.Dependencies {
	return gct.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gct *Resource) LifecycleManagement() *terra.Lifecycle {
	return gct.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gct *Resource) Attributes() googleClouddeployTargetAttributes {
	return googleClouddeployTargetAttributes{ref: terra.ReferenceResource(gct)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gct *Resource) ImportState(state io.Reader) error {
	gct.state = &googleClouddeployTargetState{}
	if err := json.NewDecoder(state).Decode(gct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gct.Type(), gct.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gct *Resource) State() (*googleClouddeployTargetState, bool) {
	return gct.state, gct.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gct *Resource) StateMust() *googleClouddeployTargetState {
	if gct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gct.Type(), gct.LocalName()))
	}
	return gct.state
}

// Args contains the configurations for google_clouddeploy_target.
type Args struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// DeployParameters: map of string, optional
	DeployParameters terra.MapValue[terra.StringValue] `hcl:"deploy_parameters,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RequireApproval: bool, optional
	RequireApproval terra.BoolValue `hcl:"require_approval,attr"`
	// AnthosCluster: optional
	AnthosCluster *AnthosCluster `hcl:"anthos_cluster,block"`
	// ExecutionConfigs: min=0
	ExecutionConfigs []ExecutionConfigs `hcl:"execution_configs,block" validate:"min=0"`
	// Gke: optional
	Gke *Gke `hcl:"gke,block"`
	// MultiTarget: optional
	MultiTarget *MultiTarget `hcl:"multi_target,block"`
	// Run: optional
	Run *Run `hcl:"run,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleClouddeployTargetAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gct.ref.Append("annotations"))
}

// CreateTime returns a reference to field create_time of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gct.ref.Append("create_time"))
}

// DeployParameters returns a reference to field deploy_parameters of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) DeployParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gct.ref.Append("deploy_parameters"))
}

// Description returns a reference to field description of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gct.ref.Append("description"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gct.ref.Append("effective_annotations"))
}

// EffectiveLabels returns a reference to field effective_labels of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gct.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gct.ref.Append("etag"))
}

// Id returns a reference to field id of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gct.ref.Append("id"))
}

// Labels returns a reference to field labels of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gct.ref.Append("labels"))
}

// Location returns a reference to field location of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gct.ref.Append("location"))
}

// Name returns a reference to field name of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gct.ref.Append("name"))
}

// Project returns a reference to field project of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gct.ref.Append("project"))
}

// RequireApproval returns a reference to field require_approval of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) RequireApproval() terra.BoolValue {
	return terra.ReferenceAsBool(gct.ref.Append("require_approval"))
}

// TargetId returns a reference to field target_id of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) TargetId() terra.StringValue {
	return terra.ReferenceAsString(gct.ref.Append("target_id"))
}

// TerraformLabels returns a reference to field terraform_labels of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gct.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gct.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_clouddeploy_target.
func (gct googleClouddeployTargetAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gct.ref.Append("update_time"))
}

func (gct googleClouddeployTargetAttributes) AnthosCluster() terra.ListValue[AnthosClusterAttributes] {
	return terra.ReferenceAsList[AnthosClusterAttributes](gct.ref.Append("anthos_cluster"))
}

func (gct googleClouddeployTargetAttributes) ExecutionConfigs() terra.ListValue[ExecutionConfigsAttributes] {
	return terra.ReferenceAsList[ExecutionConfigsAttributes](gct.ref.Append("execution_configs"))
}

func (gct googleClouddeployTargetAttributes) Gke() terra.ListValue[GkeAttributes] {
	return terra.ReferenceAsList[GkeAttributes](gct.ref.Append("gke"))
}

func (gct googleClouddeployTargetAttributes) MultiTarget() terra.ListValue[MultiTargetAttributes] {
	return terra.ReferenceAsList[MultiTargetAttributes](gct.ref.Append("multi_target"))
}

func (gct googleClouddeployTargetAttributes) Run() terra.ListValue[RunAttributes] {
	return terra.ReferenceAsList[RunAttributes](gct.ref.Append("run"))
}

func (gct googleClouddeployTargetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gct.ref.Append("timeouts"))
}

type googleClouddeployTargetState struct {
	Annotations          map[string]string       `json:"annotations"`
	CreateTime           string                  `json:"create_time"`
	DeployParameters     map[string]string       `json:"deploy_parameters"`
	Description          string                  `json:"description"`
	EffectiveAnnotations map[string]string       `json:"effective_annotations"`
	EffectiveLabels      map[string]string       `json:"effective_labels"`
	Etag                 string                  `json:"etag"`
	Id                   string                  `json:"id"`
	Labels               map[string]string       `json:"labels"`
	Location             string                  `json:"location"`
	Name                 string                  `json:"name"`
	Project              string                  `json:"project"`
	RequireApproval      bool                    `json:"require_approval"`
	TargetId             string                  `json:"target_id"`
	TerraformLabels      map[string]string       `json:"terraform_labels"`
	Uid                  string                  `json:"uid"`
	UpdateTime           string                  `json:"update_time"`
	AnthosCluster        []AnthosClusterState    `json:"anthos_cluster"`
	ExecutionConfigs     []ExecutionConfigsState `json:"execution_configs"`
	Gke                  []GkeState              `json:"gke"`
	MultiTarget          []MultiTargetState      `json:"multi_target"`
	Run                  []RunState              `json:"run"`
	Timeouts             *TimeoutsState          `json:"timeouts"`
}
