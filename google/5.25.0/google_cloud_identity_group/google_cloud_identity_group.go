// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloud_identity_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_cloud_identity_group.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCloudIdentityGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcig *Resource) Type() string {
	return "google_cloud_identity_group"
}

// LocalName returns the local name for [Resource].
func (gcig *Resource) LocalName() string {
	return gcig.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcig *Resource) Configuration() interface{} {
	return gcig.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcig *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcig)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcig *Resource) Dependencies() terra.Dependencies {
	return gcig.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcig *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcig.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcig *Resource) Attributes() googleCloudIdentityGroupAttributes {
	return googleCloudIdentityGroupAttributes{ref: terra.ReferenceResource(gcig)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcig *Resource) ImportState(state io.Reader) error {
	gcig.state = &googleCloudIdentityGroupState{}
	if err := json.NewDecoder(state).Decode(gcig.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcig.Type(), gcig.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcig *Resource) State() (*googleCloudIdentityGroupState, bool) {
	return gcig.state, gcig.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcig *Resource) StateMust() *googleCloudIdentityGroupState {
	if gcig.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcig.Type(), gcig.LocalName()))
	}
	return gcig.state
}

// Args contains the configurations for google_cloud_identity_group.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InitialGroupConfig: string, optional
	InitialGroupConfig terra.StringValue `hcl:"initial_group_config,attr"`
	// Labels: map of string, required
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr" validate:"required"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// GroupKey: required
	GroupKey *GroupKey `hcl:"group_key,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleCloudIdentityGroupAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_cloud_identity_group.
func (gcig googleCloudIdentityGroupAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("create_time"))
}

// Description returns a reference to field description of google_cloud_identity_group.
func (gcig googleCloudIdentityGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_cloud_identity_group.
func (gcig googleCloudIdentityGroupAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("display_name"))
}

// Id returns a reference to field id of google_cloud_identity_group.
func (gcig googleCloudIdentityGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("id"))
}

// InitialGroupConfig returns a reference to field initial_group_config of google_cloud_identity_group.
func (gcig googleCloudIdentityGroupAttributes) InitialGroupConfig() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("initial_group_config"))
}

// Labels returns a reference to field labels of google_cloud_identity_group.
func (gcig googleCloudIdentityGroupAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcig.ref.Append("labels"))
}

// Name returns a reference to field name of google_cloud_identity_group.
func (gcig googleCloudIdentityGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("name"))
}

// Parent returns a reference to field parent of google_cloud_identity_group.
func (gcig googleCloudIdentityGroupAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("parent"))
}

// UpdateTime returns a reference to field update_time of google_cloud_identity_group.
func (gcig googleCloudIdentityGroupAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gcig.ref.Append("update_time"))
}

func (gcig googleCloudIdentityGroupAttributes) AdditionalGroupKeys() terra.ListValue[AdditionalGroupKeysAttributes] {
	return terra.ReferenceAsList[AdditionalGroupKeysAttributes](gcig.ref.Append("additional_group_keys"))
}

func (gcig googleCloudIdentityGroupAttributes) GroupKey() terra.ListValue[GroupKeyAttributes] {
	return terra.ReferenceAsList[GroupKeyAttributes](gcig.ref.Append("group_key"))
}

func (gcig googleCloudIdentityGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcig.ref.Append("timeouts"))
}

type googleCloudIdentityGroupState struct {
	CreateTime          string                     `json:"create_time"`
	Description         string                     `json:"description"`
	DisplayName         string                     `json:"display_name"`
	Id                  string                     `json:"id"`
	InitialGroupConfig  string                     `json:"initial_group_config"`
	Labels              map[string]string          `json:"labels"`
	Name                string                     `json:"name"`
	Parent              string                     `json:"parent"`
	UpdateTime          string                     `json:"update_time"`
	AdditionalGroupKeys []AdditionalGroupKeysState `json:"additional_group_keys"`
	GroupKey            []GroupKeyState            `json:"group_key"`
	Timeouts            *TimeoutsState             `json:"timeouts"`
}
