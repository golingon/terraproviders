// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_workbench_instance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type GceSetup struct {
	// DisablePublicIp: bool, optional
	DisablePublicIp terra.BoolValue `hcl:"disable_public_ip,attr"`
	// EnableIpForwarding: bool, optional
	EnableIpForwarding terra.BoolValue `hcl:"enable_ip_forwarding,attr"`
	// MachineType: string, optional
	MachineType terra.StringValue `hcl:"machine_type,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Tags: list of string, optional
	Tags terra.ListValue[terra.StringValue] `hcl:"tags,attr"`
	// GceSetupAcceleratorConfigs: min=0
	AcceleratorConfigs []GceSetupAcceleratorConfigs `hcl:"accelerator_configs,block" validate:"min=0"`
	// GceSetupBootDisk: optional
	BootDisk *GceSetupBootDisk `hcl:"boot_disk,block"`
	// GceSetupContainerImage: optional
	ContainerImage *GceSetupContainerImage `hcl:"container_image,block"`
	// GceSetupDataDisks: optional
	DataDisks *GceSetupDataDisks `hcl:"data_disks,block"`
	// GceSetupNetworkInterfaces: min=0
	NetworkInterfaces []GceSetupNetworkInterfaces `hcl:"network_interfaces,block" validate:"min=0"`
	// GceSetupServiceAccounts: min=0
	ServiceAccounts []GceSetupServiceAccounts `hcl:"service_accounts,block" validate:"min=0"`
	// GceSetupShieldedInstanceConfig: optional
	ShieldedInstanceConfig *GceSetupShieldedInstanceConfig `hcl:"shielded_instance_config,block"`
	// GceSetupVmImage: optional
	VmImage *GceSetupVmImage `hcl:"vm_image,block"`
}

type GceSetupAcceleratorConfigs struct {
	// CoreCount: string, optional
	CoreCount terra.StringValue `hcl:"core_count,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type GceSetupBootDisk struct {
	// DiskEncryption: string, optional
	DiskEncryption terra.StringValue `hcl:"disk_encryption,attr"`
	// DiskSizeGb: string, optional
	DiskSizeGb terra.StringValue `hcl:"disk_size_gb,attr"`
	// DiskType: string, optional
	DiskType terra.StringValue `hcl:"disk_type,attr"`
	// KmsKey: string, optional
	KmsKey terra.StringValue `hcl:"kms_key,attr"`
}

type GceSetupContainerImage struct {
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
	// Tag: string, optional
	Tag terra.StringValue `hcl:"tag,attr"`
}

type GceSetupDataDisks struct {
	// DiskEncryption: string, optional
	DiskEncryption terra.StringValue `hcl:"disk_encryption,attr"`
	// DiskSizeGb: string, optional
	DiskSizeGb terra.StringValue `hcl:"disk_size_gb,attr"`
	// DiskType: string, optional
	DiskType terra.StringValue `hcl:"disk_type,attr"`
	// KmsKey: string, optional
	KmsKey terra.StringValue `hcl:"kms_key,attr"`
}

type GceSetupNetworkInterfaces struct {
	// Network: string, optional
	Network terra.StringValue `hcl:"network,attr"`
	// NicType: string, optional
	NicType terra.StringValue `hcl:"nic_type,attr"`
	// Subnet: string, optional
	Subnet terra.StringValue `hcl:"subnet,attr"`
}

type GceSetupServiceAccounts struct {
	// Email: string, optional
	Email terra.StringValue `hcl:"email,attr"`
}

type GceSetupShieldedInstanceConfig struct {
	// EnableIntegrityMonitoring: bool, optional
	EnableIntegrityMonitoring terra.BoolValue `hcl:"enable_integrity_monitoring,attr"`
	// EnableSecureBoot: bool, optional
	EnableSecureBoot terra.BoolValue `hcl:"enable_secure_boot,attr"`
	// EnableVtpm: bool, optional
	EnableVtpm terra.BoolValue `hcl:"enable_vtpm,attr"`
}

type GceSetupVmImage struct {
	// Family: string, optional
	Family terra.StringValue `hcl:"family,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type HealthInfoAttributes struct {
	ref terra.Reference
}

func (hi HealthInfoAttributes) InternalRef() (terra.Reference, error) {
	return hi.ref, nil
}

func (hi HealthInfoAttributes) InternalWithRef(ref terra.Reference) HealthInfoAttributes {
	return HealthInfoAttributes{ref: ref}
}

func (hi HealthInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hi.ref.InternalTokens()
}

type UpgradeHistoryAttributes struct {
	ref terra.Reference
}

func (uh UpgradeHistoryAttributes) InternalRef() (terra.Reference, error) {
	return uh.ref, nil
}

func (uh UpgradeHistoryAttributes) InternalWithRef(ref terra.Reference) UpgradeHistoryAttributes {
	return UpgradeHistoryAttributes{ref: ref}
}

func (uh UpgradeHistoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uh.ref.InternalTokens()
}

func (uh UpgradeHistoryAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(uh.ref.Append("action"))
}

func (uh UpgradeHistoryAttributes) ContainerImage() terra.StringValue {
	return terra.ReferenceAsString(uh.ref.Append("container_image"))
}

func (uh UpgradeHistoryAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(uh.ref.Append("create_time"))
}

func (uh UpgradeHistoryAttributes) Framework() terra.StringValue {
	return terra.ReferenceAsString(uh.ref.Append("framework"))
}

func (uh UpgradeHistoryAttributes) Snapshot() terra.StringValue {
	return terra.ReferenceAsString(uh.ref.Append("snapshot"))
}

func (uh UpgradeHistoryAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(uh.ref.Append("state"))
}

func (uh UpgradeHistoryAttributes) TargetVersion() terra.StringValue {
	return terra.ReferenceAsString(uh.ref.Append("target_version"))
}

func (uh UpgradeHistoryAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(uh.ref.Append("version"))
}

func (uh UpgradeHistoryAttributes) VmImage() terra.StringValue {
	return terra.ReferenceAsString(uh.ref.Append("vm_image"))
}

type GceSetupAttributes struct {
	ref terra.Reference
}

func (gs GceSetupAttributes) InternalRef() (terra.Reference, error) {
	return gs.ref, nil
}

func (gs GceSetupAttributes) InternalWithRef(ref terra.Reference) GceSetupAttributes {
	return GceSetupAttributes{ref: ref}
}

func (gs GceSetupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gs.ref.InternalTokens()
}

func (gs GceSetupAttributes) DisablePublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(gs.ref.Append("disable_public_ip"))
}

func (gs GceSetupAttributes) EnableIpForwarding() terra.BoolValue {
	return terra.ReferenceAsBool(gs.ref.Append("enable_ip_forwarding"))
}

func (gs GceSetupAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(gs.ref.Append("machine_type"))
}

func (gs GceSetupAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gs.ref.Append("metadata"))
}

func (gs GceSetupAttributes) Tags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gs.ref.Append("tags"))
}

func (gs GceSetupAttributes) AcceleratorConfigs() terra.ListValue[GceSetupAcceleratorConfigsAttributes] {
	return terra.ReferenceAsList[GceSetupAcceleratorConfigsAttributes](gs.ref.Append("accelerator_configs"))
}

func (gs GceSetupAttributes) BootDisk() terra.ListValue[GceSetupBootDiskAttributes] {
	return terra.ReferenceAsList[GceSetupBootDiskAttributes](gs.ref.Append("boot_disk"))
}

func (gs GceSetupAttributes) ContainerImage() terra.ListValue[GceSetupContainerImageAttributes] {
	return terra.ReferenceAsList[GceSetupContainerImageAttributes](gs.ref.Append("container_image"))
}

func (gs GceSetupAttributes) DataDisks() terra.ListValue[GceSetupDataDisksAttributes] {
	return terra.ReferenceAsList[GceSetupDataDisksAttributes](gs.ref.Append("data_disks"))
}

func (gs GceSetupAttributes) NetworkInterfaces() terra.ListValue[GceSetupNetworkInterfacesAttributes] {
	return terra.ReferenceAsList[GceSetupNetworkInterfacesAttributes](gs.ref.Append("network_interfaces"))
}

func (gs GceSetupAttributes) ServiceAccounts() terra.ListValue[GceSetupServiceAccountsAttributes] {
	return terra.ReferenceAsList[GceSetupServiceAccountsAttributes](gs.ref.Append("service_accounts"))
}

func (gs GceSetupAttributes) ShieldedInstanceConfig() terra.ListValue[GceSetupShieldedInstanceConfigAttributes] {
	return terra.ReferenceAsList[GceSetupShieldedInstanceConfigAttributes](gs.ref.Append("shielded_instance_config"))
}

func (gs GceSetupAttributes) VmImage() terra.ListValue[GceSetupVmImageAttributes] {
	return terra.ReferenceAsList[GceSetupVmImageAttributes](gs.ref.Append("vm_image"))
}

type GceSetupAcceleratorConfigsAttributes struct {
	ref terra.Reference
}

func (ac GceSetupAcceleratorConfigsAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac GceSetupAcceleratorConfigsAttributes) InternalWithRef(ref terra.Reference) GceSetupAcceleratorConfigsAttributes {
	return GceSetupAcceleratorConfigsAttributes{ref: ref}
}

func (ac GceSetupAcceleratorConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac GceSetupAcceleratorConfigsAttributes) CoreCount() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("core_count"))
}

func (ac GceSetupAcceleratorConfigsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("type"))
}

type GceSetupBootDiskAttributes struct {
	ref terra.Reference
}

func (bd GceSetupBootDiskAttributes) InternalRef() (terra.Reference, error) {
	return bd.ref, nil
}

func (bd GceSetupBootDiskAttributes) InternalWithRef(ref terra.Reference) GceSetupBootDiskAttributes {
	return GceSetupBootDiskAttributes{ref: ref}
}

func (bd GceSetupBootDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bd.ref.InternalTokens()
}

func (bd GceSetupBootDiskAttributes) DiskEncryption() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("disk_encryption"))
}

func (bd GceSetupBootDiskAttributes) DiskSizeGb() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("disk_size_gb"))
}

func (bd GceSetupBootDiskAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("disk_type"))
}

func (bd GceSetupBootDiskAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("kms_key"))
}

type GceSetupContainerImageAttributes struct {
	ref terra.Reference
}

func (ci GceSetupContainerImageAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci GceSetupContainerImageAttributes) InternalWithRef(ref terra.Reference) GceSetupContainerImageAttributes {
	return GceSetupContainerImageAttributes{ref: ref}
}

func (ci GceSetupContainerImageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci GceSetupContainerImageAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("repository"))
}

func (ci GceSetupContainerImageAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("tag"))
}

type GceSetupDataDisksAttributes struct {
	ref terra.Reference
}

func (dd GceSetupDataDisksAttributes) InternalRef() (terra.Reference, error) {
	return dd.ref, nil
}

func (dd GceSetupDataDisksAttributes) InternalWithRef(ref terra.Reference) GceSetupDataDisksAttributes {
	return GceSetupDataDisksAttributes{ref: ref}
}

func (dd GceSetupDataDisksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dd.ref.InternalTokens()
}

func (dd GceSetupDataDisksAttributes) DiskEncryption() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("disk_encryption"))
}

func (dd GceSetupDataDisksAttributes) DiskSizeGb() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("disk_size_gb"))
}

func (dd GceSetupDataDisksAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("disk_type"))
}

func (dd GceSetupDataDisksAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("kms_key"))
}

type GceSetupNetworkInterfacesAttributes struct {
	ref terra.Reference
}

func (ni GceSetupNetworkInterfacesAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni GceSetupNetworkInterfacesAttributes) InternalWithRef(ref terra.Reference) GceSetupNetworkInterfacesAttributes {
	return GceSetupNetworkInterfacesAttributes{ref: ref}
}

func (ni GceSetupNetworkInterfacesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni GceSetupNetworkInterfacesAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("network"))
}

func (ni GceSetupNetworkInterfacesAttributes) NicType() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("nic_type"))
}

func (ni GceSetupNetworkInterfacesAttributes) Subnet() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("subnet"))
}

type GceSetupServiceAccountsAttributes struct {
	ref terra.Reference
}

func (sa GceSetupServiceAccountsAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa GceSetupServiceAccountsAttributes) InternalWithRef(ref terra.Reference) GceSetupServiceAccountsAttributes {
	return GceSetupServiceAccountsAttributes{ref: ref}
}

func (sa GceSetupServiceAccountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa GceSetupServiceAccountsAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("email"))
}

func (sa GceSetupServiceAccountsAttributes) Scopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sa.ref.Append("scopes"))
}

type GceSetupShieldedInstanceConfigAttributes struct {
	ref terra.Reference
}

func (sic GceSetupShieldedInstanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic GceSetupShieldedInstanceConfigAttributes) InternalWithRef(ref terra.Reference) GceSetupShieldedInstanceConfigAttributes {
	return GceSetupShieldedInstanceConfigAttributes{ref: ref}
}

func (sic GceSetupShieldedInstanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic GceSetupShieldedInstanceConfigAttributes) EnableIntegrityMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_integrity_monitoring"))
}

func (sic GceSetupShieldedInstanceConfigAttributes) EnableSecureBoot() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_secure_boot"))
}

func (sic GceSetupShieldedInstanceConfigAttributes) EnableVtpm() terra.BoolValue {
	return terra.ReferenceAsBool(sic.ref.Append("enable_vtpm"))
}

type GceSetupVmImageAttributes struct {
	ref terra.Reference
}

func (vi GceSetupVmImageAttributes) InternalRef() (terra.Reference, error) {
	return vi.ref, nil
}

func (vi GceSetupVmImageAttributes) InternalWithRef(ref terra.Reference) GceSetupVmImageAttributes {
	return GceSetupVmImageAttributes{ref: ref}
}

func (vi GceSetupVmImageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vi.ref.InternalTokens()
}

func (vi GceSetupVmImageAttributes) Family() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("family"))
}

func (vi GceSetupVmImageAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("name"))
}

func (vi GceSetupVmImageAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("project"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type HealthInfoState struct{}

type UpgradeHistoryState struct {
	Action         string `json:"action"`
	ContainerImage string `json:"container_image"`
	CreateTime     string `json:"create_time"`
	Framework      string `json:"framework"`
	Snapshot       string `json:"snapshot"`
	State          string `json:"state"`
	TargetVersion  string `json:"target_version"`
	Version        string `json:"version"`
	VmImage        string `json:"vm_image"`
}

type GceSetupState struct {
	DisablePublicIp        bool                                  `json:"disable_public_ip"`
	EnableIpForwarding     bool                                  `json:"enable_ip_forwarding"`
	MachineType            string                                `json:"machine_type"`
	Metadata               map[string]string                     `json:"metadata"`
	Tags                   []string                              `json:"tags"`
	AcceleratorConfigs     []GceSetupAcceleratorConfigsState     `json:"accelerator_configs"`
	BootDisk               []GceSetupBootDiskState               `json:"boot_disk"`
	ContainerImage         []GceSetupContainerImageState         `json:"container_image"`
	DataDisks              []GceSetupDataDisksState              `json:"data_disks"`
	NetworkInterfaces      []GceSetupNetworkInterfacesState      `json:"network_interfaces"`
	ServiceAccounts        []GceSetupServiceAccountsState        `json:"service_accounts"`
	ShieldedInstanceConfig []GceSetupShieldedInstanceConfigState `json:"shielded_instance_config"`
	VmImage                []GceSetupVmImageState                `json:"vm_image"`
}

type GceSetupAcceleratorConfigsState struct {
	CoreCount string `json:"core_count"`
	Type      string `json:"type"`
}

type GceSetupBootDiskState struct {
	DiskEncryption string `json:"disk_encryption"`
	DiskSizeGb     string `json:"disk_size_gb"`
	DiskType       string `json:"disk_type"`
	KmsKey         string `json:"kms_key"`
}

type GceSetupContainerImageState struct {
	Repository string `json:"repository"`
	Tag        string `json:"tag"`
}

type GceSetupDataDisksState struct {
	DiskEncryption string `json:"disk_encryption"`
	DiskSizeGb     string `json:"disk_size_gb"`
	DiskType       string `json:"disk_type"`
	KmsKey         string `json:"kms_key"`
}

type GceSetupNetworkInterfacesState struct {
	Network string `json:"network"`
	NicType string `json:"nic_type"`
	Subnet  string `json:"subnet"`
}

type GceSetupServiceAccountsState struct {
	Email  string   `json:"email"`
	Scopes []string `json:"scopes"`
}

type GceSetupShieldedInstanceConfigState struct {
	EnableIntegrityMonitoring bool `json:"enable_integrity_monitoring"`
	EnableSecureBoot          bool `json:"enable_secure_boot"`
	EnableVtpm                bool `json:"enable_vtpm"`
}

type GceSetupVmImageState struct {
	Family  string `json:"family"`
	Name    string `json:"name"`
	Project string `json:"project"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
