// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_target_https_proxy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_target_https_proxy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeTargetHttpsProxyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcthp *Resource) Type() string {
	return "google_compute_target_https_proxy"
}

// LocalName returns the local name for [Resource].
func (gcthp *Resource) LocalName() string {
	return gcthp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcthp *Resource) Configuration() interface{} {
	return gcthp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcthp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcthp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcthp *Resource) Dependencies() terra.Dependencies {
	return gcthp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcthp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcthp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcthp *Resource) Attributes() googleComputeTargetHttpsProxyAttributes {
	return googleComputeTargetHttpsProxyAttributes{ref: terra.ReferenceResource(gcthp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcthp *Resource) ImportState(state io.Reader) error {
	gcthp.state = &googleComputeTargetHttpsProxyState{}
	if err := json.NewDecoder(state).Decode(gcthp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcthp.Type(), gcthp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcthp *Resource) State() (*googleComputeTargetHttpsProxyState, bool) {
	return gcthp.state, gcthp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcthp *Resource) StateMust() *googleComputeTargetHttpsProxyState {
	if gcthp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcthp.Type(), gcthp.LocalName()))
	}
	return gcthp.state
}

// Args contains the configurations for google_compute_target_https_proxy.
type Args struct {
	// CertificateManagerCertificates: list of string, optional
	CertificateManagerCertificates terra.ListValue[terra.StringValue] `hcl:"certificate_manager_certificates,attr"`
	// CertificateMap: string, optional
	CertificateMap terra.StringValue `hcl:"certificate_map,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// HttpKeepAliveTimeoutSec: number, optional
	HttpKeepAliveTimeoutSec terra.NumberValue `hcl:"http_keep_alive_timeout_sec,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ProxyBind: bool, optional
	ProxyBind terra.BoolValue `hcl:"proxy_bind,attr"`
	// QuicOverride: string, optional
	QuicOverride terra.StringValue `hcl:"quic_override,attr"`
	// ServerTlsPolicy: string, optional
	ServerTlsPolicy terra.StringValue `hcl:"server_tls_policy,attr"`
	// SslCertificates: list of string, optional
	SslCertificates terra.ListValue[terra.StringValue] `hcl:"ssl_certificates,attr"`
	// SslPolicy: string, optional
	SslPolicy terra.StringValue `hcl:"ssl_policy,attr"`
	// UrlMap: string, required
	UrlMap terra.StringValue `hcl:"url_map,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeTargetHttpsProxyAttributes struct {
	ref terra.Reference
}

// CertificateManagerCertificates returns a reference to field certificate_manager_certificates of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) CertificateManagerCertificates() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcthp.ref.Append("certificate_manager_certificates"))
}

// CertificateMap returns a reference to field certificate_map of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) CertificateMap() terra.StringValue {
	return terra.ReferenceAsString(gcthp.ref.Append("certificate_map"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcthp.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcthp.ref.Append("description"))
}

// HttpKeepAliveTimeoutSec returns a reference to field http_keep_alive_timeout_sec of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) HttpKeepAliveTimeoutSec() terra.NumberValue {
	return terra.ReferenceAsNumber(gcthp.ref.Append("http_keep_alive_timeout_sec"))
}

// Id returns a reference to field id of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcthp.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcthp.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcthp.ref.Append("project"))
}

// ProxyBind returns a reference to field proxy_bind of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) ProxyBind() terra.BoolValue {
	return terra.ReferenceAsBool(gcthp.ref.Append("proxy_bind"))
}

// ProxyId returns a reference to field proxy_id of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) ProxyId() terra.NumberValue {
	return terra.ReferenceAsNumber(gcthp.ref.Append("proxy_id"))
}

// QuicOverride returns a reference to field quic_override of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) QuicOverride() terra.StringValue {
	return terra.ReferenceAsString(gcthp.ref.Append("quic_override"))
}

// SelfLink returns a reference to field self_link of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcthp.ref.Append("self_link"))
}

// ServerTlsPolicy returns a reference to field server_tls_policy of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) ServerTlsPolicy() terra.StringValue {
	return terra.ReferenceAsString(gcthp.ref.Append("server_tls_policy"))
}

// SslCertificates returns a reference to field ssl_certificates of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) SslCertificates() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcthp.ref.Append("ssl_certificates"))
}

// SslPolicy returns a reference to field ssl_policy of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) SslPolicy() terra.StringValue {
	return terra.ReferenceAsString(gcthp.ref.Append("ssl_policy"))
}

// UrlMap returns a reference to field url_map of google_compute_target_https_proxy.
func (gcthp googleComputeTargetHttpsProxyAttributes) UrlMap() terra.StringValue {
	return terra.ReferenceAsString(gcthp.ref.Append("url_map"))
}

func (gcthp googleComputeTargetHttpsProxyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcthp.ref.Append("timeouts"))
}

type googleComputeTargetHttpsProxyState struct {
	CertificateManagerCertificates []string       `json:"certificate_manager_certificates"`
	CertificateMap                 string         `json:"certificate_map"`
	CreationTimestamp              string         `json:"creation_timestamp"`
	Description                    string         `json:"description"`
	HttpKeepAliveTimeoutSec        float64        `json:"http_keep_alive_timeout_sec"`
	Id                             string         `json:"id"`
	Name                           string         `json:"name"`
	Project                        string         `json:"project"`
	ProxyBind                      bool           `json:"proxy_bind"`
	ProxyId                        float64        `json:"proxy_id"`
	QuicOverride                   string         `json:"quic_override"`
	SelfLink                       string         `json:"self_link"`
	ServerTlsPolicy                string         `json:"server_tls_policy"`
	SslCertificates                []string       `json:"ssl_certificates"`
	SslPolicy                      string         `json:"ssl_policy"`
	UrlMap                         string         `json:"url_map"`
	Timeouts                       *TimeoutsState `json:"timeouts"`
}
