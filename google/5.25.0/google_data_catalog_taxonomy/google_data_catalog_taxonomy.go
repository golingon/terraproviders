// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_data_catalog_taxonomy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_data_catalog_taxonomy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataCatalogTaxonomyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdct *Resource) Type() string {
	return "google_data_catalog_taxonomy"
}

// LocalName returns the local name for [Resource].
func (gdct *Resource) LocalName() string {
	return gdct.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdct *Resource) Configuration() interface{} {
	return gdct.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdct *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdct)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdct *Resource) Dependencies() terra.Dependencies {
	return gdct.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdct *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdct.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdct *Resource) Attributes() googleDataCatalogTaxonomyAttributes {
	return googleDataCatalogTaxonomyAttributes{ref: terra.ReferenceResource(gdct)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdct *Resource) ImportState(state io.Reader) error {
	gdct.state = &googleDataCatalogTaxonomyState{}
	if err := json.NewDecoder(state).Decode(gdct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdct.Type(), gdct.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdct *Resource) State() (*googleDataCatalogTaxonomyState, bool) {
	return gdct.state, gdct.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdct *Resource) StateMust() *googleDataCatalogTaxonomyState {
	if gdct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdct.Type(), gdct.LocalName()))
	}
	return gdct.state
}

// Args contains the configurations for google_data_catalog_taxonomy.
type Args struct {
	// ActivatedPolicyTypes: list of string, optional
	ActivatedPolicyTypes terra.ListValue[terra.StringValue] `hcl:"activated_policy_types,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDataCatalogTaxonomyAttributes struct {
	ref terra.Reference
}

// ActivatedPolicyTypes returns a reference to field activated_policy_types of google_data_catalog_taxonomy.
func (gdct googleDataCatalogTaxonomyAttributes) ActivatedPolicyTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gdct.ref.Append("activated_policy_types"))
}

// Description returns a reference to field description of google_data_catalog_taxonomy.
func (gdct googleDataCatalogTaxonomyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdct.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_data_catalog_taxonomy.
func (gdct googleDataCatalogTaxonomyAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdct.ref.Append("display_name"))
}

// Id returns a reference to field id of google_data_catalog_taxonomy.
func (gdct googleDataCatalogTaxonomyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdct.ref.Append("id"))
}

// Name returns a reference to field name of google_data_catalog_taxonomy.
func (gdct googleDataCatalogTaxonomyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdct.ref.Append("name"))
}

// Project returns a reference to field project of google_data_catalog_taxonomy.
func (gdct googleDataCatalogTaxonomyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdct.ref.Append("project"))
}

// Region returns a reference to field region of google_data_catalog_taxonomy.
func (gdct googleDataCatalogTaxonomyAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gdct.ref.Append("region"))
}

func (gdct googleDataCatalogTaxonomyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdct.ref.Append("timeouts"))
}

type googleDataCatalogTaxonomyState struct {
	ActivatedPolicyTypes []string       `json:"activated_policy_types"`
	Description          string         `json:"description"`
	DisplayName          string         `json:"display_name"`
	Id                   string         `json:"id"`
	Name                 string         `json:"name"`
	Project              string         `json:"project"`
	Region               string         `json:"region"`
	Timeouts             *TimeoutsState `json:"timeouts"`
}
