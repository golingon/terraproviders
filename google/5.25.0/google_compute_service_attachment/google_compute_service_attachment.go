// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_service_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_service_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeServiceAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcsa *Resource) Type() string {
	return "google_compute_service_attachment"
}

// LocalName returns the local name for [Resource].
func (gcsa *Resource) LocalName() string {
	return gcsa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcsa *Resource) Configuration() interface{} {
	return gcsa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcsa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcsa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcsa *Resource) Dependencies() terra.Dependencies {
	return gcsa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcsa *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcsa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcsa *Resource) Attributes() googleComputeServiceAttachmentAttributes {
	return googleComputeServiceAttachmentAttributes{ref: terra.ReferenceResource(gcsa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcsa *Resource) ImportState(state io.Reader) error {
	gcsa.state = &googleComputeServiceAttachmentState{}
	if err := json.NewDecoder(state).Decode(gcsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcsa.Type(), gcsa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcsa *Resource) State() (*googleComputeServiceAttachmentState, bool) {
	return gcsa.state, gcsa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcsa *Resource) StateMust() *googleComputeServiceAttachmentState {
	if gcsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcsa.Type(), gcsa.LocalName()))
	}
	return gcsa.state
}

// Args contains the configurations for google_compute_service_attachment.
type Args struct {
	// ConnectionPreference: string, required
	ConnectionPreference terra.StringValue `hcl:"connection_preference,attr" validate:"required"`
	// ConsumerRejectLists: list of string, optional
	ConsumerRejectLists terra.ListValue[terra.StringValue] `hcl:"consumer_reject_lists,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DomainNames: list of string, optional
	DomainNames terra.ListValue[terra.StringValue] `hcl:"domain_names,attr"`
	// EnableProxyProtocol: bool, required
	EnableProxyProtocol terra.BoolValue `hcl:"enable_proxy_protocol,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NatSubnets: list of string, required
	NatSubnets terra.ListValue[terra.StringValue] `hcl:"nat_subnets,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ReconcileConnections: bool, optional
	ReconcileConnections terra.BoolValue `hcl:"reconcile_connections,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// TargetService: string, required
	TargetService terra.StringValue `hcl:"target_service,attr" validate:"required"`
	// ConsumerAcceptLists: min=0
	ConsumerAcceptLists []ConsumerAcceptLists `hcl:"consumer_accept_lists,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeServiceAttachmentAttributes struct {
	ref terra.Reference
}

// ConnectionPreference returns a reference to field connection_preference of google_compute_service_attachment.
func (gcsa googleComputeServiceAttachmentAttributes) ConnectionPreference() terra.StringValue {
	return terra.ReferenceAsString(gcsa.ref.Append("connection_preference"))
}

// ConsumerRejectLists returns a reference to field consumer_reject_lists of google_compute_service_attachment.
func (gcsa googleComputeServiceAttachmentAttributes) ConsumerRejectLists() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcsa.ref.Append("consumer_reject_lists"))
}

// Description returns a reference to field description of google_compute_service_attachment.
func (gcsa googleComputeServiceAttachmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcsa.ref.Append("description"))
}

// DomainNames returns a reference to field domain_names of google_compute_service_attachment.
func (gcsa googleComputeServiceAttachmentAttributes) DomainNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcsa.ref.Append("domain_names"))
}

// EnableProxyProtocol returns a reference to field enable_proxy_protocol of google_compute_service_attachment.
func (gcsa googleComputeServiceAttachmentAttributes) EnableProxyProtocol() terra.BoolValue {
	return terra.ReferenceAsBool(gcsa.ref.Append("enable_proxy_protocol"))
}

// Fingerprint returns a reference to field fingerprint of google_compute_service_attachment.
func (gcsa googleComputeServiceAttachmentAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(gcsa.ref.Append("fingerprint"))
}

// Id returns a reference to field id of google_compute_service_attachment.
func (gcsa googleComputeServiceAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcsa.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_service_attachment.
func (gcsa googleComputeServiceAttachmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcsa.ref.Append("name"))
}

// NatSubnets returns a reference to field nat_subnets of google_compute_service_attachment.
func (gcsa googleComputeServiceAttachmentAttributes) NatSubnets() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcsa.ref.Append("nat_subnets"))
}

// Project returns a reference to field project of google_compute_service_attachment.
func (gcsa googleComputeServiceAttachmentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcsa.ref.Append("project"))
}

// ReconcileConnections returns a reference to field reconcile_connections of google_compute_service_attachment.
func (gcsa googleComputeServiceAttachmentAttributes) ReconcileConnections() terra.BoolValue {
	return terra.ReferenceAsBool(gcsa.ref.Append("reconcile_connections"))
}

// Region returns a reference to field region of google_compute_service_attachment.
func (gcsa googleComputeServiceAttachmentAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcsa.ref.Append("region"))
}

// SelfLink returns a reference to field self_link of google_compute_service_attachment.
func (gcsa googleComputeServiceAttachmentAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcsa.ref.Append("self_link"))
}

// TargetService returns a reference to field target_service of google_compute_service_attachment.
func (gcsa googleComputeServiceAttachmentAttributes) TargetService() terra.StringValue {
	return terra.ReferenceAsString(gcsa.ref.Append("target_service"))
}

func (gcsa googleComputeServiceAttachmentAttributes) ConnectedEndpoints() terra.ListValue[ConnectedEndpointsAttributes] {
	return terra.ReferenceAsList[ConnectedEndpointsAttributes](gcsa.ref.Append("connected_endpoints"))
}

func (gcsa googleComputeServiceAttachmentAttributes) ConsumerAcceptLists() terra.SetValue[ConsumerAcceptListsAttributes] {
	return terra.ReferenceAsSet[ConsumerAcceptListsAttributes](gcsa.ref.Append("consumer_accept_lists"))
}

func (gcsa googleComputeServiceAttachmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcsa.ref.Append("timeouts"))
}

type googleComputeServiceAttachmentState struct {
	ConnectionPreference string                     `json:"connection_preference"`
	ConsumerRejectLists  []string                   `json:"consumer_reject_lists"`
	Description          string                     `json:"description"`
	DomainNames          []string                   `json:"domain_names"`
	EnableProxyProtocol  bool                       `json:"enable_proxy_protocol"`
	Fingerprint          string                     `json:"fingerprint"`
	Id                   string                     `json:"id"`
	Name                 string                     `json:"name"`
	NatSubnets           []string                   `json:"nat_subnets"`
	Project              string                     `json:"project"`
	ReconcileConnections bool                       `json:"reconcile_connections"`
	Region               string                     `json:"region"`
	SelfLink             string                     `json:"self_link"`
	TargetService        string                     `json:"target_service"`
	ConnectedEndpoints   []ConnectedEndpointsState  `json:"connected_endpoints"`
	ConsumerAcceptLists  []ConsumerAcceptListsState `json:"consumer_accept_lists"`
	Timeouts             *TimeoutsState             `json:"timeouts"`
}
