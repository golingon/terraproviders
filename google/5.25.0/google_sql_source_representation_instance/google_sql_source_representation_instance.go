// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_sql_source_representation_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_sql_source_representation_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *googleSqlSourceRepresentationInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gssri *Resource) Type() string {
	return "google_sql_source_representation_instance"
}

// LocalName returns the local name for [Resource].
func (gssri *Resource) LocalName() string {
	return gssri.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gssri *Resource) Configuration() interface{} {
	return gssri.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gssri *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gssri)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gssri *Resource) Dependencies() terra.Dependencies {
	return gssri.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gssri *Resource) LifecycleManagement() *terra.Lifecycle {
	return gssri.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gssri *Resource) Attributes() googleSqlSourceRepresentationInstanceAttributes {
	return googleSqlSourceRepresentationInstanceAttributes{ref: terra.ReferenceResource(gssri)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gssri *Resource) ImportState(state io.Reader) error {
	gssri.state = &googleSqlSourceRepresentationInstanceState{}
	if err := json.NewDecoder(state).Decode(gssri.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gssri.Type(), gssri.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gssri *Resource) State() (*googleSqlSourceRepresentationInstanceState, bool) {
	return gssri.state, gssri.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gssri *Resource) StateMust() *googleSqlSourceRepresentationInstanceState {
	if gssri.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gssri.Type(), gssri.LocalName()))
	}
	return gssri.state
}

// Args contains the configurations for google_sql_source_representation_instance.
type Args struct {
	// CaCertificate: string, optional
	CaCertificate terra.StringValue `hcl:"ca_certificate,attr"`
	// ClientCertificate: string, optional
	ClientCertificate terra.StringValue `hcl:"client_certificate,attr"`
	// ClientKey: string, optional
	ClientKey terra.StringValue `hcl:"client_key,attr"`
	// DatabaseVersion: string, required
	DatabaseVersion terra.StringValue `hcl:"database_version,attr" validate:"required"`
	// DumpFilePath: string, optional
	DumpFilePath terra.StringValue `hcl:"dump_file_path,attr"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleSqlSourceRepresentationInstanceAttributes struct {
	ref terra.Reference
}

// CaCertificate returns a reference to field ca_certificate of google_sql_source_representation_instance.
func (gssri googleSqlSourceRepresentationInstanceAttributes) CaCertificate() terra.StringValue {
	return terra.ReferenceAsString(gssri.ref.Append("ca_certificate"))
}

// ClientCertificate returns a reference to field client_certificate of google_sql_source_representation_instance.
func (gssri googleSqlSourceRepresentationInstanceAttributes) ClientCertificate() terra.StringValue {
	return terra.ReferenceAsString(gssri.ref.Append("client_certificate"))
}

// ClientKey returns a reference to field client_key of google_sql_source_representation_instance.
func (gssri googleSqlSourceRepresentationInstanceAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceAsString(gssri.ref.Append("client_key"))
}

// DatabaseVersion returns a reference to field database_version of google_sql_source_representation_instance.
func (gssri googleSqlSourceRepresentationInstanceAttributes) DatabaseVersion() terra.StringValue {
	return terra.ReferenceAsString(gssri.ref.Append("database_version"))
}

// DumpFilePath returns a reference to field dump_file_path of google_sql_source_representation_instance.
func (gssri googleSqlSourceRepresentationInstanceAttributes) DumpFilePath() terra.StringValue {
	return terra.ReferenceAsString(gssri.ref.Append("dump_file_path"))
}

// Host returns a reference to field host of google_sql_source_representation_instance.
func (gssri googleSqlSourceRepresentationInstanceAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(gssri.ref.Append("host"))
}

// Id returns a reference to field id of google_sql_source_representation_instance.
func (gssri googleSqlSourceRepresentationInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gssri.ref.Append("id"))
}

// Name returns a reference to field name of google_sql_source_representation_instance.
func (gssri googleSqlSourceRepresentationInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gssri.ref.Append("name"))
}

// Password returns a reference to field password of google_sql_source_representation_instance.
func (gssri googleSqlSourceRepresentationInstanceAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(gssri.ref.Append("password"))
}

// Port returns a reference to field port of google_sql_source_representation_instance.
func (gssri googleSqlSourceRepresentationInstanceAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(gssri.ref.Append("port"))
}

// Project returns a reference to field project of google_sql_source_representation_instance.
func (gssri googleSqlSourceRepresentationInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gssri.ref.Append("project"))
}

// Region returns a reference to field region of google_sql_source_representation_instance.
func (gssri googleSqlSourceRepresentationInstanceAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gssri.ref.Append("region"))
}

// Username returns a reference to field username of google_sql_source_representation_instance.
func (gssri googleSqlSourceRepresentationInstanceAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(gssri.ref.Append("username"))
}

func (gssri googleSqlSourceRepresentationInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gssri.ref.Append("timeouts"))
}

type googleSqlSourceRepresentationInstanceState struct {
	CaCertificate     string         `json:"ca_certificate"`
	ClientCertificate string         `json:"client_certificate"`
	ClientKey         string         `json:"client_key"`
	DatabaseVersion   string         `json:"database_version"`
	DumpFilePath      string         `json:"dump_file_path"`
	Host              string         `json:"host"`
	Id                string         `json:"id"`
	Name              string         `json:"name"`
	Password          string         `json:"password"`
	Port              float64        `json:"port"`
	Project           string         `json:"project"`
	Region            string         `json:"region"`
	Username          string         `json:"username"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
