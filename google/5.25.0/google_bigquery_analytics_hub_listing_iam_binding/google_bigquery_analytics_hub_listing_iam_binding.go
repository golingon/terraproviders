// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_analytics_hub_listing_iam_binding

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_analytics_hub_listing_iam_binding.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryAnalyticsHubListingIamBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbahlib *Resource) Type() string {
	return "google_bigquery_analytics_hub_listing_iam_binding"
}

// LocalName returns the local name for [Resource].
func (gbahlib *Resource) LocalName() string {
	return gbahlib.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbahlib *Resource) Configuration() interface{} {
	return gbahlib.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbahlib *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbahlib)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbahlib *Resource) Dependencies() terra.Dependencies {
	return gbahlib.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbahlib *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbahlib.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbahlib *Resource) Attributes() googleBigqueryAnalyticsHubListingIamBindingAttributes {
	return googleBigqueryAnalyticsHubListingIamBindingAttributes{ref: terra.ReferenceResource(gbahlib)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbahlib *Resource) ImportState(state io.Reader) error {
	gbahlib.state = &googleBigqueryAnalyticsHubListingIamBindingState{}
	if err := json.NewDecoder(state).Decode(gbahlib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbahlib.Type(), gbahlib.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbahlib *Resource) State() (*googleBigqueryAnalyticsHubListingIamBindingState, bool) {
	return gbahlib.state, gbahlib.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbahlib *Resource) StateMust() *googleBigqueryAnalyticsHubListingIamBindingState {
	if gbahlib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbahlib.Type(), gbahlib.LocalName()))
	}
	return gbahlib.state
}

// Args contains the configurations for google_bigquery_analytics_hub_listing_iam_binding.
type Args struct {
	// DataExchangeId: string, required
	DataExchangeId terra.StringValue `hcl:"data_exchange_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListingId: string, required
	ListingId terra.StringValue `hcl:"listing_id,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *Condition `hcl:"condition,block"`
}

type googleBigqueryAnalyticsHubListingIamBindingAttributes struct {
	ref terra.Reference
}

// DataExchangeId returns a reference to field data_exchange_id of google_bigquery_analytics_hub_listing_iam_binding.
func (gbahlib googleBigqueryAnalyticsHubListingIamBindingAttributes) DataExchangeId() terra.StringValue {
	return terra.ReferenceAsString(gbahlib.ref.Append("data_exchange_id"))
}

// Etag returns a reference to field etag of google_bigquery_analytics_hub_listing_iam_binding.
func (gbahlib googleBigqueryAnalyticsHubListingIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gbahlib.ref.Append("etag"))
}

// Id returns a reference to field id of google_bigquery_analytics_hub_listing_iam_binding.
func (gbahlib googleBigqueryAnalyticsHubListingIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbahlib.ref.Append("id"))
}

// ListingId returns a reference to field listing_id of google_bigquery_analytics_hub_listing_iam_binding.
func (gbahlib googleBigqueryAnalyticsHubListingIamBindingAttributes) ListingId() terra.StringValue {
	return terra.ReferenceAsString(gbahlib.ref.Append("listing_id"))
}

// Location returns a reference to field location of google_bigquery_analytics_hub_listing_iam_binding.
func (gbahlib googleBigqueryAnalyticsHubListingIamBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbahlib.ref.Append("location"))
}

// Members returns a reference to field members of google_bigquery_analytics_hub_listing_iam_binding.
func (gbahlib googleBigqueryAnalyticsHubListingIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gbahlib.ref.Append("members"))
}

// Project returns a reference to field project of google_bigquery_analytics_hub_listing_iam_binding.
func (gbahlib googleBigqueryAnalyticsHubListingIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbahlib.ref.Append("project"))
}

// Role returns a reference to field role of google_bigquery_analytics_hub_listing_iam_binding.
func (gbahlib googleBigqueryAnalyticsHubListingIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(gbahlib.ref.Append("role"))
}

func (gbahlib googleBigqueryAnalyticsHubListingIamBindingAttributes) Condition() terra.ListValue[ConditionAttributes] {
	return terra.ReferenceAsList[ConditionAttributes](gbahlib.ref.Append("condition"))
}

type googleBigqueryAnalyticsHubListingIamBindingState struct {
	DataExchangeId string           `json:"data_exchange_id"`
	Etag           string           `json:"etag"`
	Id             string           `json:"id"`
	ListingId      string           `json:"listing_id"`
	Location       string           `json:"location"`
	Members        []string         `json:"members"`
	Project        string           `json:"project"`
	Role           string           `json:"role"`
	Condition      []ConditionState `json:"condition"`
}
