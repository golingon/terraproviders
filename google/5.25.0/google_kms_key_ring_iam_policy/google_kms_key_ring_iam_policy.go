// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_kms_key_ring_iam_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_kms_key_ring_iam_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleKmsKeyRingIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gkkrip *Resource) Type() string {
	return "google_kms_key_ring_iam_policy"
}

// LocalName returns the local name for [Resource].
func (gkkrip *Resource) LocalName() string {
	return gkkrip.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gkkrip *Resource) Configuration() interface{} {
	return gkkrip.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gkkrip *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gkkrip)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gkkrip *Resource) Dependencies() terra.Dependencies {
	return gkkrip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gkkrip *Resource) LifecycleManagement() *terra.Lifecycle {
	return gkkrip.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gkkrip *Resource) Attributes() googleKmsKeyRingIamPolicyAttributes {
	return googleKmsKeyRingIamPolicyAttributes{ref: terra.ReferenceResource(gkkrip)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gkkrip *Resource) ImportState(state io.Reader) error {
	gkkrip.state = &googleKmsKeyRingIamPolicyState{}
	if err := json.NewDecoder(state).Decode(gkkrip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gkkrip.Type(), gkkrip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gkkrip *Resource) State() (*googleKmsKeyRingIamPolicyState, bool) {
	return gkkrip.state, gkkrip.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gkkrip *Resource) StateMust() *googleKmsKeyRingIamPolicyState {
	if gkkrip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gkkrip.Type(), gkkrip.LocalName()))
	}
	return gkkrip.state
}

// Args contains the configurations for google_kms_key_ring_iam_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyRingId: string, required
	KeyRingId terra.StringValue `hcl:"key_ring_id,attr" validate:"required"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
}

type googleKmsKeyRingIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_kms_key_ring_iam_policy.
func (gkkrip googleKmsKeyRingIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gkkrip.ref.Append("etag"))
}

// Id returns a reference to field id of google_kms_key_ring_iam_policy.
func (gkkrip googleKmsKeyRingIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gkkrip.ref.Append("id"))
}

// KeyRingId returns a reference to field key_ring_id of google_kms_key_ring_iam_policy.
func (gkkrip googleKmsKeyRingIamPolicyAttributes) KeyRingId() terra.StringValue {
	return terra.ReferenceAsString(gkkrip.ref.Append("key_ring_id"))
}

// PolicyData returns a reference to field policy_data of google_kms_key_ring_iam_policy.
func (gkkrip googleKmsKeyRingIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(gkkrip.ref.Append("policy_data"))
}

type googleKmsKeyRingIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	KeyRingId  string `json:"key_ring_id"`
	PolicyData string `json:"policy_data"`
}
