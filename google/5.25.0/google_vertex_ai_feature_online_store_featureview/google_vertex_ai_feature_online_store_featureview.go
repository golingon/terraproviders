// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_vertex_ai_feature_online_store_featureview

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_vertex_ai_feature_online_store_featureview.
type Resource struct {
	Name      string
	Args      Args
	state     *googleVertexAiFeatureOnlineStoreFeatureviewState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gvafosf *Resource) Type() string {
	return "google_vertex_ai_feature_online_store_featureview"
}

// LocalName returns the local name for [Resource].
func (gvafosf *Resource) LocalName() string {
	return gvafosf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gvafosf *Resource) Configuration() interface{} {
	return gvafosf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gvafosf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gvafosf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gvafosf *Resource) Dependencies() terra.Dependencies {
	return gvafosf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gvafosf *Resource) LifecycleManagement() *terra.Lifecycle {
	return gvafosf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gvafosf *Resource) Attributes() googleVertexAiFeatureOnlineStoreFeatureviewAttributes {
	return googleVertexAiFeatureOnlineStoreFeatureviewAttributes{ref: terra.ReferenceResource(gvafosf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gvafosf *Resource) ImportState(state io.Reader) error {
	gvafosf.state = &googleVertexAiFeatureOnlineStoreFeatureviewState{}
	if err := json.NewDecoder(state).Decode(gvafosf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gvafosf.Type(), gvafosf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gvafosf *Resource) State() (*googleVertexAiFeatureOnlineStoreFeatureviewState, bool) {
	return gvafosf.state, gvafosf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gvafosf *Resource) StateMust() *googleVertexAiFeatureOnlineStoreFeatureviewState {
	if gvafosf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gvafosf.Type(), gvafosf.LocalName()))
	}
	return gvafosf.state
}

// Args contains the configurations for google_vertex_ai_feature_online_store_featureview.
type Args struct {
	// FeatureOnlineStore: string, required
	FeatureOnlineStore terra.StringValue `hcl:"feature_online_store,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, required
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
	// BigQuerySource: optional
	BigQuerySource *BigQuerySource `hcl:"big_query_source,block"`
	// FeatureRegistrySource: optional
	FeatureRegistrySource *FeatureRegistrySource `hcl:"feature_registry_source,block"`
	// SyncConfig: optional
	SyncConfig *SyncConfig `hcl:"sync_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleVertexAiFeatureOnlineStoreFeatureviewAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_vertex_ai_feature_online_store_featureview.
func (gvafosf googleVertexAiFeatureOnlineStoreFeatureviewAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gvafosf.ref.Append("create_time"))
}

// EffectiveLabels returns a reference to field effective_labels of google_vertex_ai_feature_online_store_featureview.
func (gvafosf googleVertexAiFeatureOnlineStoreFeatureviewAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gvafosf.ref.Append("effective_labels"))
}

// FeatureOnlineStore returns a reference to field feature_online_store of google_vertex_ai_feature_online_store_featureview.
func (gvafosf googleVertexAiFeatureOnlineStoreFeatureviewAttributes) FeatureOnlineStore() terra.StringValue {
	return terra.ReferenceAsString(gvafosf.ref.Append("feature_online_store"))
}

// Id returns a reference to field id of google_vertex_ai_feature_online_store_featureview.
func (gvafosf googleVertexAiFeatureOnlineStoreFeatureviewAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gvafosf.ref.Append("id"))
}

// Labels returns a reference to field labels of google_vertex_ai_feature_online_store_featureview.
func (gvafosf googleVertexAiFeatureOnlineStoreFeatureviewAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gvafosf.ref.Append("labels"))
}

// Name returns a reference to field name of google_vertex_ai_feature_online_store_featureview.
func (gvafosf googleVertexAiFeatureOnlineStoreFeatureviewAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gvafosf.ref.Append("name"))
}

// Project returns a reference to field project of google_vertex_ai_feature_online_store_featureview.
func (gvafosf googleVertexAiFeatureOnlineStoreFeatureviewAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gvafosf.ref.Append("project"))
}

// Region returns a reference to field region of google_vertex_ai_feature_online_store_featureview.
func (gvafosf googleVertexAiFeatureOnlineStoreFeatureviewAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gvafosf.ref.Append("region"))
}

// TerraformLabels returns a reference to field terraform_labels of google_vertex_ai_feature_online_store_featureview.
func (gvafosf googleVertexAiFeatureOnlineStoreFeatureviewAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gvafosf.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_vertex_ai_feature_online_store_featureview.
func (gvafosf googleVertexAiFeatureOnlineStoreFeatureviewAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gvafosf.ref.Append("update_time"))
}

func (gvafosf googleVertexAiFeatureOnlineStoreFeatureviewAttributes) BigQuerySource() terra.ListValue[BigQuerySourceAttributes] {
	return terra.ReferenceAsList[BigQuerySourceAttributes](gvafosf.ref.Append("big_query_source"))
}

func (gvafosf googleVertexAiFeatureOnlineStoreFeatureviewAttributes) FeatureRegistrySource() terra.ListValue[FeatureRegistrySourceAttributes] {
	return terra.ReferenceAsList[FeatureRegistrySourceAttributes](gvafosf.ref.Append("feature_registry_source"))
}

func (gvafosf googleVertexAiFeatureOnlineStoreFeatureviewAttributes) SyncConfig() terra.ListValue[SyncConfigAttributes] {
	return terra.ReferenceAsList[SyncConfigAttributes](gvafosf.ref.Append("sync_config"))
}

func (gvafosf googleVertexAiFeatureOnlineStoreFeatureviewAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gvafosf.ref.Append("timeouts"))
}

type googleVertexAiFeatureOnlineStoreFeatureviewState struct {
	CreateTime            string                       `json:"create_time"`
	EffectiveLabels       map[string]string            `json:"effective_labels"`
	FeatureOnlineStore    string                       `json:"feature_online_store"`
	Id                    string                       `json:"id"`
	Labels                map[string]string            `json:"labels"`
	Name                  string                       `json:"name"`
	Project               string                       `json:"project"`
	Region                string                       `json:"region"`
	TerraformLabels       map[string]string            `json:"terraform_labels"`
	UpdateTime            string                       `json:"update_time"`
	BigQuerySource        []BigQuerySourceState        `json:"big_query_source"`
	FeatureRegistrySource []FeatureRegistrySourceState `json:"feature_registry_source"`
	SyncConfig            []SyncConfigState            `json:"sync_config"`
	Timeouts              *TimeoutsState               `json:"timeouts"`
}
