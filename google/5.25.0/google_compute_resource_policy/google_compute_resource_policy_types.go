// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_resource_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DiskConsistencyGroupPolicy struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type GroupPlacementPolicy struct {
	// AvailabilityDomainCount: number, optional
	AvailabilityDomainCount terra.NumberValue `hcl:"availability_domain_count,attr"`
	// Collocation: string, optional
	Collocation terra.StringValue `hcl:"collocation,attr"`
	// VmCount: number, optional
	VmCount terra.NumberValue `hcl:"vm_count,attr"`
}

type InstanceSchedulePolicy struct {
	// ExpirationTime: string, optional
	ExpirationTime terra.StringValue `hcl:"expiration_time,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// TimeZone: string, required
	TimeZone terra.StringValue `hcl:"time_zone,attr" validate:"required"`
	// InstanceSchedulePolicyVmStartSchedule: optional
	VmStartSchedule *InstanceSchedulePolicyVmStartSchedule `hcl:"vm_start_schedule,block"`
	// InstanceSchedulePolicyVmStopSchedule: optional
	VmStopSchedule *InstanceSchedulePolicyVmStopSchedule `hcl:"vm_stop_schedule,block"`
}

type InstanceSchedulePolicyVmStartSchedule struct {
	// Schedule: string, required
	Schedule terra.StringValue `hcl:"schedule,attr" validate:"required"`
}

type InstanceSchedulePolicyVmStopSchedule struct {
	// Schedule: string, required
	Schedule terra.StringValue `hcl:"schedule,attr" validate:"required"`
}

type SnapshotSchedulePolicy struct {
	// SnapshotSchedulePolicyRetentionPolicy: optional
	RetentionPolicy *SnapshotSchedulePolicyRetentionPolicy `hcl:"retention_policy,block"`
	// SnapshotSchedulePolicySchedule: required
	Schedule *SnapshotSchedulePolicySchedule `hcl:"schedule,block" validate:"required"`
	// SnapshotSchedulePolicySnapshotProperties: optional
	SnapshotProperties *SnapshotSchedulePolicySnapshotProperties `hcl:"snapshot_properties,block"`
}

type SnapshotSchedulePolicyRetentionPolicy struct {
	// MaxRetentionDays: number, required
	MaxRetentionDays terra.NumberValue `hcl:"max_retention_days,attr" validate:"required"`
	// OnSourceDiskDelete: string, optional
	OnSourceDiskDelete terra.StringValue `hcl:"on_source_disk_delete,attr"`
}

type SnapshotSchedulePolicySchedule struct {
	// SnapshotSchedulePolicyScheduleDailySchedule: optional
	DailySchedule *SnapshotSchedulePolicyScheduleDailySchedule `hcl:"daily_schedule,block"`
	// SnapshotSchedulePolicyScheduleHourlySchedule: optional
	HourlySchedule *SnapshotSchedulePolicyScheduleHourlySchedule `hcl:"hourly_schedule,block"`
	// SnapshotSchedulePolicyScheduleWeeklySchedule: optional
	WeeklySchedule *SnapshotSchedulePolicyScheduleWeeklySchedule `hcl:"weekly_schedule,block"`
}

type SnapshotSchedulePolicyScheduleDailySchedule struct {
	// DaysInCycle: number, required
	DaysInCycle terra.NumberValue `hcl:"days_in_cycle,attr" validate:"required"`
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
}

type SnapshotSchedulePolicyScheduleHourlySchedule struct {
	// HoursInCycle: number, required
	HoursInCycle terra.NumberValue `hcl:"hours_in_cycle,attr" validate:"required"`
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
}

type SnapshotSchedulePolicyScheduleWeeklySchedule struct {
	// SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeks: min=1,max=7
	DayOfWeeks []SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeks `hcl:"day_of_weeks,block" validate:"min=1,max=7"`
}

type SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeks struct {
	// Day: string, required
	Day terra.StringValue `hcl:"day,attr" validate:"required"`
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
}

type SnapshotSchedulePolicySnapshotProperties struct {
	// ChainName: string, optional
	ChainName terra.StringValue `hcl:"chain_name,attr"`
	// GuestFlush: bool, optional
	GuestFlush terra.BoolValue `hcl:"guest_flush,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// StorageLocations: set of string, optional
	StorageLocations terra.SetValue[terra.StringValue] `hcl:"storage_locations,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type DiskConsistencyGroupPolicyAttributes struct {
	ref terra.Reference
}

func (dcgp DiskConsistencyGroupPolicyAttributes) InternalRef() (terra.Reference, error) {
	return dcgp.ref, nil
}

func (dcgp DiskConsistencyGroupPolicyAttributes) InternalWithRef(ref terra.Reference) DiskConsistencyGroupPolicyAttributes {
	return DiskConsistencyGroupPolicyAttributes{ref: ref}
}

func (dcgp DiskConsistencyGroupPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcgp.ref.InternalTokens()
}

func (dcgp DiskConsistencyGroupPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dcgp.ref.Append("enabled"))
}

type GroupPlacementPolicyAttributes struct {
	ref terra.Reference
}

func (gpp GroupPlacementPolicyAttributes) InternalRef() (terra.Reference, error) {
	return gpp.ref, nil
}

func (gpp GroupPlacementPolicyAttributes) InternalWithRef(ref terra.Reference) GroupPlacementPolicyAttributes {
	return GroupPlacementPolicyAttributes{ref: ref}
}

func (gpp GroupPlacementPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gpp.ref.InternalTokens()
}

func (gpp GroupPlacementPolicyAttributes) AvailabilityDomainCount() terra.NumberValue {
	return terra.ReferenceAsNumber(gpp.ref.Append("availability_domain_count"))
}

func (gpp GroupPlacementPolicyAttributes) Collocation() terra.StringValue {
	return terra.ReferenceAsString(gpp.ref.Append("collocation"))
}

func (gpp GroupPlacementPolicyAttributes) VmCount() terra.NumberValue {
	return terra.ReferenceAsNumber(gpp.ref.Append("vm_count"))
}

type InstanceSchedulePolicyAttributes struct {
	ref terra.Reference
}

func (isp InstanceSchedulePolicyAttributes) InternalRef() (terra.Reference, error) {
	return isp.ref, nil
}

func (isp InstanceSchedulePolicyAttributes) InternalWithRef(ref terra.Reference) InstanceSchedulePolicyAttributes {
	return InstanceSchedulePolicyAttributes{ref: ref}
}

func (isp InstanceSchedulePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return isp.ref.InternalTokens()
}

func (isp InstanceSchedulePolicyAttributes) ExpirationTime() terra.StringValue {
	return terra.ReferenceAsString(isp.ref.Append("expiration_time"))
}

func (isp InstanceSchedulePolicyAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(isp.ref.Append("start_time"))
}

func (isp InstanceSchedulePolicyAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(isp.ref.Append("time_zone"))
}

func (isp InstanceSchedulePolicyAttributes) VmStartSchedule() terra.ListValue[InstanceSchedulePolicyVmStartScheduleAttributes] {
	return terra.ReferenceAsList[InstanceSchedulePolicyVmStartScheduleAttributes](isp.ref.Append("vm_start_schedule"))
}

func (isp InstanceSchedulePolicyAttributes) VmStopSchedule() terra.ListValue[InstanceSchedulePolicyVmStopScheduleAttributes] {
	return terra.ReferenceAsList[InstanceSchedulePolicyVmStopScheduleAttributes](isp.ref.Append("vm_stop_schedule"))
}

type InstanceSchedulePolicyVmStartScheduleAttributes struct {
	ref terra.Reference
}

func (vss InstanceSchedulePolicyVmStartScheduleAttributes) InternalRef() (terra.Reference, error) {
	return vss.ref, nil
}

func (vss InstanceSchedulePolicyVmStartScheduleAttributes) InternalWithRef(ref terra.Reference) InstanceSchedulePolicyVmStartScheduleAttributes {
	return InstanceSchedulePolicyVmStartScheduleAttributes{ref: ref}
}

func (vss InstanceSchedulePolicyVmStartScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vss.ref.InternalTokens()
}

func (vss InstanceSchedulePolicyVmStartScheduleAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(vss.ref.Append("schedule"))
}

type InstanceSchedulePolicyVmStopScheduleAttributes struct {
	ref terra.Reference
}

func (vss InstanceSchedulePolicyVmStopScheduleAttributes) InternalRef() (terra.Reference, error) {
	return vss.ref, nil
}

func (vss InstanceSchedulePolicyVmStopScheduleAttributes) InternalWithRef(ref terra.Reference) InstanceSchedulePolicyVmStopScheduleAttributes {
	return InstanceSchedulePolicyVmStopScheduleAttributes{ref: ref}
}

func (vss InstanceSchedulePolicyVmStopScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vss.ref.InternalTokens()
}

func (vss InstanceSchedulePolicyVmStopScheduleAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(vss.ref.Append("schedule"))
}

type SnapshotSchedulePolicyAttributes struct {
	ref terra.Reference
}

func (ssp SnapshotSchedulePolicyAttributes) InternalRef() (terra.Reference, error) {
	return ssp.ref, nil
}

func (ssp SnapshotSchedulePolicyAttributes) InternalWithRef(ref terra.Reference) SnapshotSchedulePolicyAttributes {
	return SnapshotSchedulePolicyAttributes{ref: ref}
}

func (ssp SnapshotSchedulePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssp.ref.InternalTokens()
}

func (ssp SnapshotSchedulePolicyAttributes) RetentionPolicy() terra.ListValue[SnapshotSchedulePolicyRetentionPolicyAttributes] {
	return terra.ReferenceAsList[SnapshotSchedulePolicyRetentionPolicyAttributes](ssp.ref.Append("retention_policy"))
}

func (ssp SnapshotSchedulePolicyAttributes) Schedule() terra.ListValue[SnapshotSchedulePolicyScheduleAttributes] {
	return terra.ReferenceAsList[SnapshotSchedulePolicyScheduleAttributes](ssp.ref.Append("schedule"))
}

func (ssp SnapshotSchedulePolicyAttributes) SnapshotProperties() terra.ListValue[SnapshotSchedulePolicySnapshotPropertiesAttributes] {
	return terra.ReferenceAsList[SnapshotSchedulePolicySnapshotPropertiesAttributes](ssp.ref.Append("snapshot_properties"))
}

type SnapshotSchedulePolicyRetentionPolicyAttributes struct {
	ref terra.Reference
}

func (rp SnapshotSchedulePolicyRetentionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp SnapshotSchedulePolicyRetentionPolicyAttributes) InternalWithRef(ref terra.Reference) SnapshotSchedulePolicyRetentionPolicyAttributes {
	return SnapshotSchedulePolicyRetentionPolicyAttributes{ref: ref}
}

func (rp SnapshotSchedulePolicyRetentionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp SnapshotSchedulePolicyRetentionPolicyAttributes) MaxRetentionDays() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("max_retention_days"))
}

func (rp SnapshotSchedulePolicyRetentionPolicyAttributes) OnSourceDiskDelete() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("on_source_disk_delete"))
}

type SnapshotSchedulePolicyScheduleAttributes struct {
	ref terra.Reference
}

func (s SnapshotSchedulePolicyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SnapshotSchedulePolicyScheduleAttributes) InternalWithRef(ref terra.Reference) SnapshotSchedulePolicyScheduleAttributes {
	return SnapshotSchedulePolicyScheduleAttributes{ref: ref}
}

func (s SnapshotSchedulePolicyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SnapshotSchedulePolicyScheduleAttributes) DailySchedule() terra.ListValue[SnapshotSchedulePolicyScheduleDailyScheduleAttributes] {
	return terra.ReferenceAsList[SnapshotSchedulePolicyScheduleDailyScheduleAttributes](s.ref.Append("daily_schedule"))
}

func (s SnapshotSchedulePolicyScheduleAttributes) HourlySchedule() terra.ListValue[SnapshotSchedulePolicyScheduleHourlyScheduleAttributes] {
	return terra.ReferenceAsList[SnapshotSchedulePolicyScheduleHourlyScheduleAttributes](s.ref.Append("hourly_schedule"))
}

func (s SnapshotSchedulePolicyScheduleAttributes) WeeklySchedule() terra.ListValue[SnapshotSchedulePolicyScheduleWeeklyScheduleAttributes] {
	return terra.ReferenceAsList[SnapshotSchedulePolicyScheduleWeeklyScheduleAttributes](s.ref.Append("weekly_schedule"))
}

type SnapshotSchedulePolicyScheduleDailyScheduleAttributes struct {
	ref terra.Reference
}

func (ds SnapshotSchedulePolicyScheduleDailyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds SnapshotSchedulePolicyScheduleDailyScheduleAttributes) InternalWithRef(ref terra.Reference) SnapshotSchedulePolicyScheduleDailyScheduleAttributes {
	return SnapshotSchedulePolicyScheduleDailyScheduleAttributes{ref: ref}
}

func (ds SnapshotSchedulePolicyScheduleDailyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds SnapshotSchedulePolicyScheduleDailyScheduleAttributes) DaysInCycle() terra.NumberValue {
	return terra.ReferenceAsNumber(ds.ref.Append("days_in_cycle"))
}

func (ds SnapshotSchedulePolicyScheduleDailyScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("start_time"))
}

type SnapshotSchedulePolicyScheduleHourlyScheduleAttributes struct {
	ref terra.Reference
}

func (hs SnapshotSchedulePolicyScheduleHourlyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return hs.ref, nil
}

func (hs SnapshotSchedulePolicyScheduleHourlyScheduleAttributes) InternalWithRef(ref terra.Reference) SnapshotSchedulePolicyScheduleHourlyScheduleAttributes {
	return SnapshotSchedulePolicyScheduleHourlyScheduleAttributes{ref: ref}
}

func (hs SnapshotSchedulePolicyScheduleHourlyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hs.ref.InternalTokens()
}

func (hs SnapshotSchedulePolicyScheduleHourlyScheduleAttributes) HoursInCycle() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("hours_in_cycle"))
}

func (hs SnapshotSchedulePolicyScheduleHourlyScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("start_time"))
}

type SnapshotSchedulePolicyScheduleWeeklyScheduleAttributes struct {
	ref terra.Reference
}

func (ws SnapshotSchedulePolicyScheduleWeeklyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ws.ref, nil
}

func (ws SnapshotSchedulePolicyScheduleWeeklyScheduleAttributes) InternalWithRef(ref terra.Reference) SnapshotSchedulePolicyScheduleWeeklyScheduleAttributes {
	return SnapshotSchedulePolicyScheduleWeeklyScheduleAttributes{ref: ref}
}

func (ws SnapshotSchedulePolicyScheduleWeeklyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ws.ref.InternalTokens()
}

func (ws SnapshotSchedulePolicyScheduleWeeklyScheduleAttributes) DayOfWeeks() terra.SetValue[SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes] {
	return terra.ReferenceAsSet[SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes](ws.ref.Append("day_of_weeks"))
}

type SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes struct {
	ref terra.Reference
}

func (dow SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes) InternalRef() (terra.Reference, error) {
	return dow.ref, nil
}

func (dow SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes) InternalWithRef(ref terra.Reference) SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes {
	return SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes{ref: ref}
}

func (dow SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dow.ref.InternalTokens()
}

func (dow SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes) Day() terra.StringValue {
	return terra.ReferenceAsString(dow.ref.Append("day"))
}

func (dow SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(dow.ref.Append("start_time"))
}

type SnapshotSchedulePolicySnapshotPropertiesAttributes struct {
	ref terra.Reference
}

func (sp SnapshotSchedulePolicySnapshotPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SnapshotSchedulePolicySnapshotPropertiesAttributes) InternalWithRef(ref terra.Reference) SnapshotSchedulePolicySnapshotPropertiesAttributes {
	return SnapshotSchedulePolicySnapshotPropertiesAttributes{ref: ref}
}

func (sp SnapshotSchedulePolicySnapshotPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SnapshotSchedulePolicySnapshotPropertiesAttributes) ChainName() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("chain_name"))
}

func (sp SnapshotSchedulePolicySnapshotPropertiesAttributes) GuestFlush() terra.BoolValue {
	return terra.ReferenceAsBool(sp.ref.Append("guest_flush"))
}

func (sp SnapshotSchedulePolicySnapshotPropertiesAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sp.ref.Append("labels"))
}

func (sp SnapshotSchedulePolicySnapshotPropertiesAttributes) StorageLocations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sp.ref.Append("storage_locations"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type DiskConsistencyGroupPolicyState struct {
	Enabled bool `json:"enabled"`
}

type GroupPlacementPolicyState struct {
	AvailabilityDomainCount float64 `json:"availability_domain_count"`
	Collocation             string  `json:"collocation"`
	VmCount                 float64 `json:"vm_count"`
}

type InstanceSchedulePolicyState struct {
	ExpirationTime  string                                       `json:"expiration_time"`
	StartTime       string                                       `json:"start_time"`
	TimeZone        string                                       `json:"time_zone"`
	VmStartSchedule []InstanceSchedulePolicyVmStartScheduleState `json:"vm_start_schedule"`
	VmStopSchedule  []InstanceSchedulePolicyVmStopScheduleState  `json:"vm_stop_schedule"`
}

type InstanceSchedulePolicyVmStartScheduleState struct {
	Schedule string `json:"schedule"`
}

type InstanceSchedulePolicyVmStopScheduleState struct {
	Schedule string `json:"schedule"`
}

type SnapshotSchedulePolicyState struct {
	RetentionPolicy    []SnapshotSchedulePolicyRetentionPolicyState    `json:"retention_policy"`
	Schedule           []SnapshotSchedulePolicyScheduleState           `json:"schedule"`
	SnapshotProperties []SnapshotSchedulePolicySnapshotPropertiesState `json:"snapshot_properties"`
}

type SnapshotSchedulePolicyRetentionPolicyState struct {
	MaxRetentionDays   float64 `json:"max_retention_days"`
	OnSourceDiskDelete string  `json:"on_source_disk_delete"`
}

type SnapshotSchedulePolicyScheduleState struct {
	DailySchedule  []SnapshotSchedulePolicyScheduleDailyScheduleState  `json:"daily_schedule"`
	HourlySchedule []SnapshotSchedulePolicyScheduleHourlyScheduleState `json:"hourly_schedule"`
	WeeklySchedule []SnapshotSchedulePolicyScheduleWeeklyScheduleState `json:"weekly_schedule"`
}

type SnapshotSchedulePolicyScheduleDailyScheduleState struct {
	DaysInCycle float64 `json:"days_in_cycle"`
	StartTime   string  `json:"start_time"`
}

type SnapshotSchedulePolicyScheduleHourlyScheduleState struct {
	HoursInCycle float64 `json:"hours_in_cycle"`
	StartTime    string  `json:"start_time"`
}

type SnapshotSchedulePolicyScheduleWeeklyScheduleState struct {
	DayOfWeeks []SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksState `json:"day_of_weeks"`
}

type SnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeksState struct {
	Day       string `json:"day"`
	StartTime string `json:"start_time"`
}

type SnapshotSchedulePolicySnapshotPropertiesState struct {
	ChainName        string            `json:"chain_name"`
	GuestFlush       bool              `json:"guest_flush"`
	Labels           map[string]string `json:"labels"`
	StorageLocations []string          `json:"storage_locations"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
