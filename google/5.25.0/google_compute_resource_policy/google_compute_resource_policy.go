// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_resource_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_resource_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeResourcePolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcrp *Resource) Type() string {
	return "google_compute_resource_policy"
}

// LocalName returns the local name for [Resource].
func (gcrp *Resource) LocalName() string {
	return gcrp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcrp *Resource) Configuration() interface{} {
	return gcrp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcrp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcrp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcrp *Resource) Dependencies() terra.Dependencies {
	return gcrp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcrp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcrp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcrp *Resource) Attributes() googleComputeResourcePolicyAttributes {
	return googleComputeResourcePolicyAttributes{ref: terra.ReferenceResource(gcrp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcrp *Resource) ImportState(state io.Reader) error {
	gcrp.state = &googleComputeResourcePolicyState{}
	if err := json.NewDecoder(state).Decode(gcrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcrp.Type(), gcrp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcrp *Resource) State() (*googleComputeResourcePolicyState, bool) {
	return gcrp.state, gcrp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcrp *Resource) StateMust() *googleComputeResourcePolicyState {
	if gcrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcrp.Type(), gcrp.LocalName()))
	}
	return gcrp.state
}

// Args contains the configurations for google_compute_resource_policy.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// DiskConsistencyGroupPolicy: optional
	DiskConsistencyGroupPolicy *DiskConsistencyGroupPolicy `hcl:"disk_consistency_group_policy,block"`
	// GroupPlacementPolicy: optional
	GroupPlacementPolicy *GroupPlacementPolicy `hcl:"group_placement_policy,block"`
	// InstanceSchedulePolicy: optional
	InstanceSchedulePolicy *InstanceSchedulePolicy `hcl:"instance_schedule_policy,block"`
	// SnapshotSchedulePolicy: optional
	SnapshotSchedulePolicy *SnapshotSchedulePolicy `hcl:"snapshot_schedule_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeResourcePolicyAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_compute_resource_policy.
func (gcrp googleComputeResourcePolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("description"))
}

// Id returns a reference to field id of google_compute_resource_policy.
func (gcrp googleComputeResourcePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_resource_policy.
func (gcrp googleComputeResourcePolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_resource_policy.
func (gcrp googleComputeResourcePolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_resource_policy.
func (gcrp googleComputeResourcePolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("region"))
}

// SelfLink returns a reference to field self_link of google_compute_resource_policy.
func (gcrp googleComputeResourcePolicyAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcrp.ref.Append("self_link"))
}

func (gcrp googleComputeResourcePolicyAttributes) DiskConsistencyGroupPolicy() terra.ListValue[DiskConsistencyGroupPolicyAttributes] {
	return terra.ReferenceAsList[DiskConsistencyGroupPolicyAttributes](gcrp.ref.Append("disk_consistency_group_policy"))
}

func (gcrp googleComputeResourcePolicyAttributes) GroupPlacementPolicy() terra.ListValue[GroupPlacementPolicyAttributes] {
	return terra.ReferenceAsList[GroupPlacementPolicyAttributes](gcrp.ref.Append("group_placement_policy"))
}

func (gcrp googleComputeResourcePolicyAttributes) InstanceSchedulePolicy() terra.ListValue[InstanceSchedulePolicyAttributes] {
	return terra.ReferenceAsList[InstanceSchedulePolicyAttributes](gcrp.ref.Append("instance_schedule_policy"))
}

func (gcrp googleComputeResourcePolicyAttributes) SnapshotSchedulePolicy() terra.ListValue[SnapshotSchedulePolicyAttributes] {
	return terra.ReferenceAsList[SnapshotSchedulePolicyAttributes](gcrp.ref.Append("snapshot_schedule_policy"))
}

func (gcrp googleComputeResourcePolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcrp.ref.Append("timeouts"))
}

type googleComputeResourcePolicyState struct {
	Description                string                            `json:"description"`
	Id                         string                            `json:"id"`
	Name                       string                            `json:"name"`
	Project                    string                            `json:"project"`
	Region                     string                            `json:"region"`
	SelfLink                   string                            `json:"self_link"`
	DiskConsistencyGroupPolicy []DiskConsistencyGroupPolicyState `json:"disk_consistency_group_policy"`
	GroupPlacementPolicy       []GroupPlacementPolicyState       `json:"group_placement_policy"`
	InstanceSchedulePolicy     []InstanceSchedulePolicyState     `json:"instance_schedule_policy"`
	SnapshotSchedulePolicy     []SnapshotSchedulePolicyState     `json:"snapshot_schedule_policy"`
	Timeouts                   *TimeoutsState                    `json:"timeouts"`
}
