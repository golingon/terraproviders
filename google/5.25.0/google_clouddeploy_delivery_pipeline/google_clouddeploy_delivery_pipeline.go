// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_clouddeploy_delivery_pipeline

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_clouddeploy_delivery_pipeline.
type Resource struct {
	Name      string
	Args      Args
	state     *googleClouddeployDeliveryPipelineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcdp *Resource) Type() string {
	return "google_clouddeploy_delivery_pipeline"
}

// LocalName returns the local name for [Resource].
func (gcdp *Resource) LocalName() string {
	return gcdp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcdp *Resource) Configuration() interface{} {
	return gcdp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcdp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcdp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcdp *Resource) Dependencies() terra.Dependencies {
	return gcdp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcdp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcdp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcdp *Resource) Attributes() googleClouddeployDeliveryPipelineAttributes {
	return googleClouddeployDeliveryPipelineAttributes{ref: terra.ReferenceResource(gcdp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcdp *Resource) ImportState(state io.Reader) error {
	gcdp.state = &googleClouddeployDeliveryPipelineState{}
	if err := json.NewDecoder(state).Decode(gcdp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcdp.Type(), gcdp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcdp *Resource) State() (*googleClouddeployDeliveryPipelineState, bool) {
	return gcdp.state, gcdp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcdp *Resource) StateMust() *googleClouddeployDeliveryPipelineState {
	if gcdp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcdp.Type(), gcdp.LocalName()))
	}
	return gcdp.state
}

// Args contains the configurations for google_clouddeploy_delivery_pipeline.
type Args struct {
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Suspended: bool, optional
	Suspended terra.BoolValue `hcl:"suspended,attr"`
	// SerialPipeline: optional
	SerialPipeline *SerialPipeline `hcl:"serial_pipeline,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleClouddeployDeliveryPipelineAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcdp.ref.Append("annotations"))
}

// CreateTime returns a reference to field create_time of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcdp.ref.Append("create_time"))
}

// Description returns a reference to field description of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcdp.ref.Append("description"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcdp.ref.Append("effective_annotations"))
}

// EffectiveLabels returns a reference to field effective_labels of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcdp.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gcdp.ref.Append("etag"))
}

// Id returns a reference to field id of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcdp.ref.Append("id"))
}

// Labels returns a reference to field labels of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcdp.ref.Append("labels"))
}

// Location returns a reference to field location of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcdp.ref.Append("location"))
}

// Name returns a reference to field name of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcdp.ref.Append("name"))
}

// Project returns a reference to field project of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcdp.ref.Append("project"))
}

// Suspended returns a reference to field suspended of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) Suspended() terra.BoolValue {
	return terra.ReferenceAsBool(gcdp.ref.Append("suspended"))
}

// TerraformLabels returns a reference to field terraform_labels of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcdp.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gcdp.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_clouddeploy_delivery_pipeline.
func (gcdp googleClouddeployDeliveryPipelineAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gcdp.ref.Append("update_time"))
}

func (gcdp googleClouddeployDeliveryPipelineAttributes) Condition() terra.ListValue[ConditionAttributes] {
	return terra.ReferenceAsList[ConditionAttributes](gcdp.ref.Append("condition"))
}

func (gcdp googleClouddeployDeliveryPipelineAttributes) SerialPipeline() terra.ListValue[SerialPipelineAttributes] {
	return terra.ReferenceAsList[SerialPipelineAttributes](gcdp.ref.Append("serial_pipeline"))
}

func (gcdp googleClouddeployDeliveryPipelineAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcdp.ref.Append("timeouts"))
}

type googleClouddeployDeliveryPipelineState struct {
	Annotations          map[string]string     `json:"annotations"`
	CreateTime           string                `json:"create_time"`
	Description          string                `json:"description"`
	EffectiveAnnotations map[string]string     `json:"effective_annotations"`
	EffectiveLabels      map[string]string     `json:"effective_labels"`
	Etag                 string                `json:"etag"`
	Id                   string                `json:"id"`
	Labels               map[string]string     `json:"labels"`
	Location             string                `json:"location"`
	Name                 string                `json:"name"`
	Project              string                `json:"project"`
	Suspended            bool                  `json:"suspended"`
	TerraformLabels      map[string]string     `json:"terraform_labels"`
	Uid                  string                `json:"uid"`
	UpdateTime           string                `json:"update_time"`
	Condition            []ConditionState      `json:"condition"`
	SerialPipeline       []SerialPipelineState `json:"serial_pipeline"`
	Timeouts             *TimeoutsState        `json:"timeouts"`
}
