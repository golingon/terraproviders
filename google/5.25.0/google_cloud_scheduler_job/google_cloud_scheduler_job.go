// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloud_scheduler_job

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_cloud_scheduler_job.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCloudSchedulerJobState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcsj *Resource) Type() string {
	return "google_cloud_scheduler_job"
}

// LocalName returns the local name for [Resource].
func (gcsj *Resource) LocalName() string {
	return gcsj.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcsj *Resource) Configuration() interface{} {
	return gcsj.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcsj *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcsj)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcsj *Resource) Dependencies() terra.Dependencies {
	return gcsj.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcsj *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcsj.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcsj *Resource) Attributes() googleCloudSchedulerJobAttributes {
	return googleCloudSchedulerJobAttributes{ref: terra.ReferenceResource(gcsj)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcsj *Resource) ImportState(state io.Reader) error {
	gcsj.state = &googleCloudSchedulerJobState{}
	if err := json.NewDecoder(state).Decode(gcsj.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcsj.Type(), gcsj.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcsj *Resource) State() (*googleCloudSchedulerJobState, bool) {
	return gcsj.state, gcsj.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcsj *Resource) StateMust() *googleCloudSchedulerJobState {
	if gcsj.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcsj.Type(), gcsj.LocalName()))
	}
	return gcsj.state
}

// Args contains the configurations for google_cloud_scheduler_job.
type Args struct {
	// AttemptDeadline: string, optional
	AttemptDeadline terra.StringValue `hcl:"attempt_deadline,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Paused: bool, optional
	Paused terra.BoolValue `hcl:"paused,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Schedule: string, optional
	Schedule terra.StringValue `hcl:"schedule,attr"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
	// AppEngineHttpTarget: optional
	AppEngineHttpTarget *AppEngineHttpTarget `hcl:"app_engine_http_target,block"`
	// HttpTarget: optional
	HttpTarget *HttpTarget `hcl:"http_target,block"`
	// PubsubTarget: optional
	PubsubTarget *PubsubTarget `hcl:"pubsub_target,block"`
	// RetryConfig: optional
	RetryConfig *RetryConfig `hcl:"retry_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleCloudSchedulerJobAttributes struct {
	ref terra.Reference
}

// AttemptDeadline returns a reference to field attempt_deadline of google_cloud_scheduler_job.
func (gcsj googleCloudSchedulerJobAttributes) AttemptDeadline() terra.StringValue {
	return terra.ReferenceAsString(gcsj.ref.Append("attempt_deadline"))
}

// Description returns a reference to field description of google_cloud_scheduler_job.
func (gcsj googleCloudSchedulerJobAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcsj.ref.Append("description"))
}

// Id returns a reference to field id of google_cloud_scheduler_job.
func (gcsj googleCloudSchedulerJobAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcsj.ref.Append("id"))
}

// Name returns a reference to field name of google_cloud_scheduler_job.
func (gcsj googleCloudSchedulerJobAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcsj.ref.Append("name"))
}

// Paused returns a reference to field paused of google_cloud_scheduler_job.
func (gcsj googleCloudSchedulerJobAttributes) Paused() terra.BoolValue {
	return terra.ReferenceAsBool(gcsj.ref.Append("paused"))
}

// Project returns a reference to field project of google_cloud_scheduler_job.
func (gcsj googleCloudSchedulerJobAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcsj.ref.Append("project"))
}

// Region returns a reference to field region of google_cloud_scheduler_job.
func (gcsj googleCloudSchedulerJobAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcsj.ref.Append("region"))
}

// Schedule returns a reference to field schedule of google_cloud_scheduler_job.
func (gcsj googleCloudSchedulerJobAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(gcsj.ref.Append("schedule"))
}

// State returns a reference to field state of google_cloud_scheduler_job.
func (gcsj googleCloudSchedulerJobAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gcsj.ref.Append("state"))
}

// TimeZone returns a reference to field time_zone of google_cloud_scheduler_job.
func (gcsj googleCloudSchedulerJobAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(gcsj.ref.Append("time_zone"))
}

func (gcsj googleCloudSchedulerJobAttributes) AppEngineHttpTarget() terra.ListValue[AppEngineHttpTargetAttributes] {
	return terra.ReferenceAsList[AppEngineHttpTargetAttributes](gcsj.ref.Append("app_engine_http_target"))
}

func (gcsj googleCloudSchedulerJobAttributes) HttpTarget() terra.ListValue[HttpTargetAttributes] {
	return terra.ReferenceAsList[HttpTargetAttributes](gcsj.ref.Append("http_target"))
}

func (gcsj googleCloudSchedulerJobAttributes) PubsubTarget() terra.ListValue[PubsubTargetAttributes] {
	return terra.ReferenceAsList[PubsubTargetAttributes](gcsj.ref.Append("pubsub_target"))
}

func (gcsj googleCloudSchedulerJobAttributes) RetryConfig() terra.ListValue[RetryConfigAttributes] {
	return terra.ReferenceAsList[RetryConfigAttributes](gcsj.ref.Append("retry_config"))
}

func (gcsj googleCloudSchedulerJobAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcsj.ref.Append("timeouts"))
}

type googleCloudSchedulerJobState struct {
	AttemptDeadline     string                     `json:"attempt_deadline"`
	Description         string                     `json:"description"`
	Id                  string                     `json:"id"`
	Name                string                     `json:"name"`
	Paused              bool                       `json:"paused"`
	Project             string                     `json:"project"`
	Region              string                     `json:"region"`
	Schedule            string                     `json:"schedule"`
	State               string                     `json:"state"`
	TimeZone            string                     `json:"time_zone"`
	AppEngineHttpTarget []AppEngineHttpTargetState `json:"app_engine_http_target"`
	HttpTarget          []HttpTargetState          `json:"http_target"`
	PubsubTarget        []PubsubTargetState        `json:"pubsub_target"`
	RetryConfig         []RetryConfigState         `json:"retry_config"`
	Timeouts            *TimeoutsState             `json:"timeouts"`
}
