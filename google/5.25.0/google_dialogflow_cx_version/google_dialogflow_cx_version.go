// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dialogflow_cx_version

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dialogflow_cx_version.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDialogflowCxVersionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdcv *Resource) Type() string {
	return "google_dialogflow_cx_version"
}

// LocalName returns the local name for [Resource].
func (gdcv *Resource) LocalName() string {
	return gdcv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdcv *Resource) Configuration() interface{} {
	return gdcv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdcv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdcv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdcv *Resource) Dependencies() terra.Dependencies {
	return gdcv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdcv *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdcv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdcv *Resource) Attributes() googleDialogflowCxVersionAttributes {
	return googleDialogflowCxVersionAttributes{ref: terra.ReferenceResource(gdcv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdcv *Resource) ImportState(state io.Reader) error {
	gdcv.state = &googleDialogflowCxVersionState{}
	if err := json.NewDecoder(state).Decode(gdcv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdcv.Type(), gdcv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdcv *Resource) State() (*googleDialogflowCxVersionState, bool) {
	return gdcv.state, gdcv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdcv *Resource) StateMust() *googleDialogflowCxVersionState {
	if gdcv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdcv.Type(), gdcv.LocalName()))
	}
	return gdcv.state
}

// Args contains the configurations for google_dialogflow_cx_version.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, optional
	Parent terra.StringValue `hcl:"parent,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDialogflowCxVersionAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_dialogflow_cx_version.
func (gdcv googleDialogflowCxVersionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gdcv.ref.Append("create_time"))
}

// Description returns a reference to field description of google_dialogflow_cx_version.
func (gdcv googleDialogflowCxVersionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdcv.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_dialogflow_cx_version.
func (gdcv googleDialogflowCxVersionAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdcv.ref.Append("display_name"))
}

// Id returns a reference to field id of google_dialogflow_cx_version.
func (gdcv googleDialogflowCxVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdcv.ref.Append("id"))
}

// Name returns a reference to field name of google_dialogflow_cx_version.
func (gdcv googleDialogflowCxVersionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdcv.ref.Append("name"))
}

// Parent returns a reference to field parent of google_dialogflow_cx_version.
func (gdcv googleDialogflowCxVersionAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gdcv.ref.Append("parent"))
}

// State returns a reference to field state of google_dialogflow_cx_version.
func (gdcv googleDialogflowCxVersionAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gdcv.ref.Append("state"))
}

func (gdcv googleDialogflowCxVersionAttributes) NluSettings() terra.ListValue[NluSettingsAttributes] {
	return terra.ReferenceAsList[NluSettingsAttributes](gdcv.ref.Append("nlu_settings"))
}

func (gdcv googleDialogflowCxVersionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdcv.ref.Append("timeouts"))
}

type googleDialogflowCxVersionState struct {
	CreateTime  string             `json:"create_time"`
	Description string             `json:"description"`
	DisplayName string             `json:"display_name"`
	Id          string             `json:"id"`
	Name        string             `json:"name"`
	Parent      string             `json:"parent"`
	State       string             `json:"state"`
	NluSettings []NluSettingsState `json:"nlu_settings"`
	Timeouts    *TimeoutsState     `json:"timeouts"`
}
