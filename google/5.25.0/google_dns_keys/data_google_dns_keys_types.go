// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dns_keys

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataKeySigningKeysAttributes struct {
	ref terra.Reference
}

func (ksk DataKeySigningKeysAttributes) InternalRef() (terra.Reference, error) {
	return ksk.ref, nil
}

func (ksk DataKeySigningKeysAttributes) InternalWithRef(ref terra.Reference) DataKeySigningKeysAttributes {
	return DataKeySigningKeysAttributes{ref: ref}
}

func (ksk DataKeySigningKeysAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ksk.ref.InternalTokens()
}

func (ksk DataKeySigningKeysAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceAsString(ksk.ref.Append("algorithm"))
}

func (ksk DataKeySigningKeysAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(ksk.ref.Append("creation_time"))
}

func (ksk DataKeySigningKeysAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ksk.ref.Append("description"))
}

func (ksk DataKeySigningKeysAttributes) DsRecord() terra.StringValue {
	return terra.ReferenceAsString(ksk.ref.Append("ds_record"))
}

func (ksk DataKeySigningKeysAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ksk.ref.Append("id"))
}

func (ksk DataKeySigningKeysAttributes) IsActive() terra.BoolValue {
	return terra.ReferenceAsBool(ksk.ref.Append("is_active"))
}

func (ksk DataKeySigningKeysAttributes) KeyLength() terra.NumberValue {
	return terra.ReferenceAsNumber(ksk.ref.Append("key_length"))
}

func (ksk DataKeySigningKeysAttributes) KeyTag() terra.NumberValue {
	return terra.ReferenceAsNumber(ksk.ref.Append("key_tag"))
}

func (ksk DataKeySigningKeysAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceAsString(ksk.ref.Append("public_key"))
}

func (ksk DataKeySigningKeysAttributes) Digests() terra.ListValue[DataKeySigningKeysDigestsAttributes] {
	return terra.ReferenceAsList[DataKeySigningKeysDigestsAttributes](ksk.ref.Append("digests"))
}

type DataKeySigningKeysDigestsAttributes struct {
	ref terra.Reference
}

func (d DataKeySigningKeysDigestsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DataKeySigningKeysDigestsAttributes) InternalWithRef(ref terra.Reference) DataKeySigningKeysDigestsAttributes {
	return DataKeySigningKeysDigestsAttributes{ref: ref}
}

func (d DataKeySigningKeysDigestsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DataKeySigningKeysDigestsAttributes) Digest() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("digest"))
}

func (d DataKeySigningKeysDigestsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("type"))
}

type DataZoneSigningKeysAttributes struct {
	ref terra.Reference
}

func (zsk DataZoneSigningKeysAttributes) InternalRef() (terra.Reference, error) {
	return zsk.ref, nil
}

func (zsk DataZoneSigningKeysAttributes) InternalWithRef(ref terra.Reference) DataZoneSigningKeysAttributes {
	return DataZoneSigningKeysAttributes{ref: ref}
}

func (zsk DataZoneSigningKeysAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return zsk.ref.InternalTokens()
}

func (zsk DataZoneSigningKeysAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceAsString(zsk.ref.Append("algorithm"))
}

func (zsk DataZoneSigningKeysAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(zsk.ref.Append("creation_time"))
}

func (zsk DataZoneSigningKeysAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(zsk.ref.Append("description"))
}

func (zsk DataZoneSigningKeysAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(zsk.ref.Append("id"))
}

func (zsk DataZoneSigningKeysAttributes) IsActive() terra.BoolValue {
	return terra.ReferenceAsBool(zsk.ref.Append("is_active"))
}

func (zsk DataZoneSigningKeysAttributes) KeyLength() terra.NumberValue {
	return terra.ReferenceAsNumber(zsk.ref.Append("key_length"))
}

func (zsk DataZoneSigningKeysAttributes) KeyTag() terra.NumberValue {
	return terra.ReferenceAsNumber(zsk.ref.Append("key_tag"))
}

func (zsk DataZoneSigningKeysAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceAsString(zsk.ref.Append("public_key"))
}

func (zsk DataZoneSigningKeysAttributes) Digests() terra.ListValue[DataZoneSigningKeysDigestsAttributes] {
	return terra.ReferenceAsList[DataZoneSigningKeysDigestsAttributes](zsk.ref.Append("digests"))
}

type DataZoneSigningKeysDigestsAttributes struct {
	ref terra.Reference
}

func (d DataZoneSigningKeysDigestsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DataZoneSigningKeysDigestsAttributes) InternalWithRef(ref terra.Reference) DataZoneSigningKeysDigestsAttributes {
	return DataZoneSigningKeysDigestsAttributes{ref: ref}
}

func (d DataZoneSigningKeysDigestsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DataZoneSigningKeysDigestsAttributes) Digest() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("digest"))
}

func (d DataZoneSigningKeysDigestsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("type"))
}

type DataKeySigningKeysState struct {
	Algorithm    string                           `json:"algorithm"`
	CreationTime string                           `json:"creation_time"`
	Description  string                           `json:"description"`
	DsRecord     string                           `json:"ds_record"`
	Id           string                           `json:"id"`
	IsActive     bool                             `json:"is_active"`
	KeyLength    float64                          `json:"key_length"`
	KeyTag       float64                          `json:"key_tag"`
	PublicKey    string                           `json:"public_key"`
	Digests      []DataKeySigningKeysDigestsState `json:"digests"`
}

type DataKeySigningKeysDigestsState struct {
	Digest string `json:"digest"`
	Type   string `json:"type"`
}

type DataZoneSigningKeysState struct {
	Algorithm    string                            `json:"algorithm"`
	CreationTime string                            `json:"creation_time"`
	Description  string                            `json:"description"`
	Id           string                            `json:"id"`
	IsActive     bool                              `json:"is_active"`
	KeyLength    float64                           `json:"key_length"`
	KeyTag       float64                           `json:"key_tag"`
	PublicKey    string                            `json:"public_key"`
	Digests      []DataZoneSigningKeysDigestsState `json:"digests"`
}

type DataZoneSigningKeysDigestsState struct {
	Digest string `json:"digest"`
	Type   string `json:"type"`
}
