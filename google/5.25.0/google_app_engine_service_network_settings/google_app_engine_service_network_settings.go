// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_app_engine_service_network_settings

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_app_engine_service_network_settings.
type Resource struct {
	Name      string
	Args      Args
	state     *googleAppEngineServiceNetworkSettingsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gaesns *Resource) Type() string {
	return "google_app_engine_service_network_settings"
}

// LocalName returns the local name for [Resource].
func (gaesns *Resource) LocalName() string {
	return gaesns.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gaesns *Resource) Configuration() interface{} {
	return gaesns.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gaesns *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gaesns)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gaesns *Resource) Dependencies() terra.Dependencies {
	return gaesns.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gaesns *Resource) LifecycleManagement() *terra.Lifecycle {
	return gaesns.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gaesns *Resource) Attributes() googleAppEngineServiceNetworkSettingsAttributes {
	return googleAppEngineServiceNetworkSettingsAttributes{ref: terra.ReferenceResource(gaesns)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gaesns *Resource) ImportState(state io.Reader) error {
	gaesns.state = &googleAppEngineServiceNetworkSettingsState{}
	if err := json.NewDecoder(state).Decode(gaesns.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gaesns.Type(), gaesns.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gaesns *Resource) State() (*googleAppEngineServiceNetworkSettingsState, bool) {
	return gaesns.state, gaesns.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gaesns *Resource) StateMust() *googleAppEngineServiceNetworkSettingsState {
	if gaesns.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gaesns.Type(), gaesns.LocalName()))
	}
	return gaesns.state
}

// Args contains the configurations for google_app_engine_service_network_settings.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// NetworkSettings: required
	NetworkSettings *NetworkSettings `hcl:"network_settings,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleAppEngineServiceNetworkSettingsAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_app_engine_service_network_settings.
func (gaesns googleAppEngineServiceNetworkSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gaesns.ref.Append("id"))
}

// Project returns a reference to field project of google_app_engine_service_network_settings.
func (gaesns googleAppEngineServiceNetworkSettingsAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gaesns.ref.Append("project"))
}

// Service returns a reference to field service of google_app_engine_service_network_settings.
func (gaesns googleAppEngineServiceNetworkSettingsAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(gaesns.ref.Append("service"))
}

func (gaesns googleAppEngineServiceNetworkSettingsAttributes) NetworkSettings() terra.ListValue[NetworkSettingsAttributes] {
	return terra.ReferenceAsList[NetworkSettingsAttributes](gaesns.ref.Append("network_settings"))
}

func (gaesns googleAppEngineServiceNetworkSettingsAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gaesns.ref.Append("timeouts"))
}

type googleAppEngineServiceNetworkSettingsState struct {
	Id              string                 `json:"id"`
	Project         string                 `json:"project"`
	Service         string                 `json:"service"`
	NetworkSettings []NetworkSettingsState `json:"network_settings"`
	Timeouts        *TimeoutsState         `json:"timeouts"`
}
