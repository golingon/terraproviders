// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_access_context_manager_service_perimeter_egress_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EgressFrom struct {
	// Identities: list of string, optional
	Identities terra.ListValue[terra.StringValue] `hcl:"identities,attr"`
	// IdentityType: string, optional
	IdentityType terra.StringValue `hcl:"identity_type,attr"`
	// SourceRestriction: string, optional
	SourceRestriction terra.StringValue `hcl:"source_restriction,attr"`
	// EgressFromSources: min=0
	Sources []EgressFromSources `hcl:"sources,block" validate:"min=0"`
}

type EgressFromSources struct {
	// AccessLevel: string, optional
	AccessLevel terra.StringValue `hcl:"access_level,attr"`
}

type EgressTo struct {
	// ExternalResources: list of string, optional
	ExternalResources terra.ListValue[terra.StringValue] `hcl:"external_resources,attr"`
	// Resources: list of string, optional
	Resources terra.ListValue[terra.StringValue] `hcl:"resources,attr"`
	// EgressToOperations: min=0
	Operations []EgressToOperations `hcl:"operations,block" validate:"min=0"`
}

type EgressToOperations struct {
	// ServiceName: string, optional
	ServiceName terra.StringValue `hcl:"service_name,attr"`
	// EgressToOperationsMethodSelectors: min=0
	MethodSelectors []EgressToOperationsMethodSelectors `hcl:"method_selectors,block" validate:"min=0"`
}

type EgressToOperationsMethodSelectors struct {
	// Method: string, optional
	Method terra.StringValue `hcl:"method,attr"`
	// Permission: string, optional
	Permission terra.StringValue `hcl:"permission,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type EgressFromAttributes struct {
	ref terra.Reference
}

func (ef EgressFromAttributes) InternalRef() (terra.Reference, error) {
	return ef.ref, nil
}

func (ef EgressFromAttributes) InternalWithRef(ref terra.Reference) EgressFromAttributes {
	return EgressFromAttributes{ref: ref}
}

func (ef EgressFromAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ef.ref.InternalTokens()
}

func (ef EgressFromAttributes) Identities() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ef.ref.Append("identities"))
}

func (ef EgressFromAttributes) IdentityType() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("identity_type"))
}

func (ef EgressFromAttributes) SourceRestriction() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("source_restriction"))
}

func (ef EgressFromAttributes) Sources() terra.ListValue[EgressFromSourcesAttributes] {
	return terra.ReferenceAsList[EgressFromSourcesAttributes](ef.ref.Append("sources"))
}

type EgressFromSourcesAttributes struct {
	ref terra.Reference
}

func (s EgressFromSourcesAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s EgressFromSourcesAttributes) InternalWithRef(ref terra.Reference) EgressFromSourcesAttributes {
	return EgressFromSourcesAttributes{ref: ref}
}

func (s EgressFromSourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s EgressFromSourcesAttributes) AccessLevel() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("access_level"))
}

type EgressToAttributes struct {
	ref terra.Reference
}

func (et EgressToAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et EgressToAttributes) InternalWithRef(ref terra.Reference) EgressToAttributes {
	return EgressToAttributes{ref: ref}
}

func (et EgressToAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et EgressToAttributes) ExternalResources() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](et.ref.Append("external_resources"))
}

func (et EgressToAttributes) Resources() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](et.ref.Append("resources"))
}

func (et EgressToAttributes) Operations() terra.ListValue[EgressToOperationsAttributes] {
	return terra.ReferenceAsList[EgressToOperationsAttributes](et.ref.Append("operations"))
}

type EgressToOperationsAttributes struct {
	ref terra.Reference
}

func (o EgressToOperationsAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o EgressToOperationsAttributes) InternalWithRef(ref terra.Reference) EgressToOperationsAttributes {
	return EgressToOperationsAttributes{ref: ref}
}

func (o EgressToOperationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o EgressToOperationsAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("service_name"))
}

func (o EgressToOperationsAttributes) MethodSelectors() terra.ListValue[EgressToOperationsMethodSelectorsAttributes] {
	return terra.ReferenceAsList[EgressToOperationsMethodSelectorsAttributes](o.ref.Append("method_selectors"))
}

type EgressToOperationsMethodSelectorsAttributes struct {
	ref terra.Reference
}

func (ms EgressToOperationsMethodSelectorsAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms EgressToOperationsMethodSelectorsAttributes) InternalWithRef(ref terra.Reference) EgressToOperationsMethodSelectorsAttributes {
	return EgressToOperationsMethodSelectorsAttributes{ref: ref}
}

func (ms EgressToOperationsMethodSelectorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms EgressToOperationsMethodSelectorsAttributes) Method() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("method"))
}

func (ms EgressToOperationsMethodSelectorsAttributes) Permission() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("permission"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type EgressFromState struct {
	Identities        []string                 `json:"identities"`
	IdentityType      string                   `json:"identity_type"`
	SourceRestriction string                   `json:"source_restriction"`
	Sources           []EgressFromSourcesState `json:"sources"`
}

type EgressFromSourcesState struct {
	AccessLevel string `json:"access_level"`
}

type EgressToState struct {
	ExternalResources []string                  `json:"external_resources"`
	Resources         []string                  `json:"resources"`
	Operations        []EgressToOperationsState `json:"operations"`
}

type EgressToOperationsState struct {
	ServiceName     string                                   `json:"service_name"`
	MethodSelectors []EgressToOperationsMethodSelectorsState `json:"method_selectors"`
}

type EgressToOperationsMethodSelectorsState struct {
	Method     string `json:"method"`
	Permission string `json:"permission"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
