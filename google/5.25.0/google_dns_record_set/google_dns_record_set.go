// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dns_record_set

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dns_record_set.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDnsRecordSetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdrs *Resource) Type() string {
	return "google_dns_record_set"
}

// LocalName returns the local name for [Resource].
func (gdrs *Resource) LocalName() string {
	return gdrs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdrs *Resource) Configuration() interface{} {
	return gdrs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdrs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdrs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdrs *Resource) Dependencies() terra.Dependencies {
	return gdrs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdrs *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdrs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdrs *Resource) Attributes() googleDnsRecordSetAttributes {
	return googleDnsRecordSetAttributes{ref: terra.ReferenceResource(gdrs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdrs *Resource) ImportState(state io.Reader) error {
	gdrs.state = &googleDnsRecordSetState{}
	if err := json.NewDecoder(state).Decode(gdrs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdrs.Type(), gdrs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdrs *Resource) State() (*googleDnsRecordSetState, bool) {
	return gdrs.state, gdrs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdrs *Resource) StateMust() *googleDnsRecordSetState {
	if gdrs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdrs.Type(), gdrs.LocalName()))
	}
	return gdrs.state
}

// Args contains the configurations for google_dns_record_set.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagedZone: string, required
	ManagedZone terra.StringValue `hcl:"managed_zone,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Rrdatas: list of string, optional
	Rrdatas terra.ListValue[terra.StringValue] `hcl:"rrdatas,attr"`
	// Ttl: number, optional
	Ttl terra.NumberValue `hcl:"ttl,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// RoutingPolicy: optional
	RoutingPolicy *RoutingPolicy `hcl:"routing_policy,block"`
}

type googleDnsRecordSetAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_dns_record_set.
func (gdrs googleDnsRecordSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdrs.ref.Append("id"))
}

// ManagedZone returns a reference to field managed_zone of google_dns_record_set.
func (gdrs googleDnsRecordSetAttributes) ManagedZone() terra.StringValue {
	return terra.ReferenceAsString(gdrs.ref.Append("managed_zone"))
}

// Name returns a reference to field name of google_dns_record_set.
func (gdrs googleDnsRecordSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdrs.ref.Append("name"))
}

// Project returns a reference to field project of google_dns_record_set.
func (gdrs googleDnsRecordSetAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdrs.ref.Append("project"))
}

// Rrdatas returns a reference to field rrdatas of google_dns_record_set.
func (gdrs googleDnsRecordSetAttributes) Rrdatas() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gdrs.ref.Append("rrdatas"))
}

// Ttl returns a reference to field ttl of google_dns_record_set.
func (gdrs googleDnsRecordSetAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(gdrs.ref.Append("ttl"))
}

// Type returns a reference to field type of google_dns_record_set.
func (gdrs googleDnsRecordSetAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gdrs.ref.Append("type"))
}

func (gdrs googleDnsRecordSetAttributes) RoutingPolicy() terra.ListValue[RoutingPolicyAttributes] {
	return terra.ReferenceAsList[RoutingPolicyAttributes](gdrs.ref.Append("routing_policy"))
}

type googleDnsRecordSetState struct {
	Id            string               `json:"id"`
	ManagedZone   string               `json:"managed_zone"`
	Name          string               `json:"name"`
	Project       string               `json:"project"`
	Rrdatas       []string             `json:"rrdatas"`
	Ttl           float64              `json:"ttl"`
	Type          string               `json:"type"`
	RoutingPolicy []RoutingPolicyState `json:"routing_policy"`
}
