// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apphub_service_project_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_apphub_service_project_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApphubServiceProjectAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gaspa *Resource) Type() string {
	return "google_apphub_service_project_attachment"
}

// LocalName returns the local name for [Resource].
func (gaspa *Resource) LocalName() string {
	return gaspa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gaspa *Resource) Configuration() interface{} {
	return gaspa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gaspa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gaspa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gaspa *Resource) Dependencies() terra.Dependencies {
	return gaspa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gaspa *Resource) LifecycleManagement() *terra.Lifecycle {
	return gaspa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gaspa *Resource) Attributes() googleApphubServiceProjectAttachmentAttributes {
	return googleApphubServiceProjectAttachmentAttributes{ref: terra.ReferenceResource(gaspa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gaspa *Resource) ImportState(state io.Reader) error {
	gaspa.state = &googleApphubServiceProjectAttachmentState{}
	if err := json.NewDecoder(state).Decode(gaspa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gaspa.Type(), gaspa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gaspa *Resource) State() (*googleApphubServiceProjectAttachmentState, bool) {
	return gaspa.state, gaspa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gaspa *Resource) StateMust() *googleApphubServiceProjectAttachmentState {
	if gaspa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gaspa.Type(), gaspa.LocalName()))
	}
	return gaspa.state
}

// Args contains the configurations for google_apphub_service_project_attachment.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceProject: string, optional
	ServiceProject terra.StringValue `hcl:"service_project,attr"`
	// ServiceProjectAttachmentId: string, required
	ServiceProjectAttachmentId terra.StringValue `hcl:"service_project_attachment_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApphubServiceProjectAttachmentAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_apphub_service_project_attachment.
func (gaspa googleApphubServiceProjectAttachmentAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gaspa.ref.Append("create_time"))
}

// Id returns a reference to field id of google_apphub_service_project_attachment.
func (gaspa googleApphubServiceProjectAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gaspa.ref.Append("id"))
}

// Name returns a reference to field name of google_apphub_service_project_attachment.
func (gaspa googleApphubServiceProjectAttachmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gaspa.ref.Append("name"))
}

// Project returns a reference to field project of google_apphub_service_project_attachment.
func (gaspa googleApphubServiceProjectAttachmentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gaspa.ref.Append("project"))
}

// ServiceProject returns a reference to field service_project of google_apphub_service_project_attachment.
func (gaspa googleApphubServiceProjectAttachmentAttributes) ServiceProject() terra.StringValue {
	return terra.ReferenceAsString(gaspa.ref.Append("service_project"))
}

// ServiceProjectAttachmentId returns a reference to field service_project_attachment_id of google_apphub_service_project_attachment.
func (gaspa googleApphubServiceProjectAttachmentAttributes) ServiceProjectAttachmentId() terra.StringValue {
	return terra.ReferenceAsString(gaspa.ref.Append("service_project_attachment_id"))
}

// State returns a reference to field state of google_apphub_service_project_attachment.
func (gaspa googleApphubServiceProjectAttachmentAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gaspa.ref.Append("state"))
}

// Uid returns a reference to field uid of google_apphub_service_project_attachment.
func (gaspa googleApphubServiceProjectAttachmentAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gaspa.ref.Append("uid"))
}

func (gaspa googleApphubServiceProjectAttachmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gaspa.ref.Append("timeouts"))
}

type googleApphubServiceProjectAttachmentState struct {
	CreateTime                 string         `json:"create_time"`
	Id                         string         `json:"id"`
	Name                       string         `json:"name"`
	Project                    string         `json:"project"`
	ServiceProject             string         `json:"service_project"`
	ServiceProjectAttachmentId string         `json:"service_project_attachment_id"`
	State                      string         `json:"state"`
	Uid                        string         `json:"uid"`
	Timeouts                   *TimeoutsState `json:"timeouts"`
}
