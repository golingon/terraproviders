// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_region_network_firewall_policy_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_region_network_firewall_policy_association.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeRegionNetworkFirewallPolicyAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcrnfpa *Resource) Type() string {
	return "google_compute_region_network_firewall_policy_association"
}

// LocalName returns the local name for [Resource].
func (gcrnfpa *Resource) LocalName() string {
	return gcrnfpa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcrnfpa *Resource) Configuration() interface{} {
	return gcrnfpa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcrnfpa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcrnfpa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcrnfpa *Resource) Dependencies() terra.Dependencies {
	return gcrnfpa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcrnfpa *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcrnfpa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcrnfpa *Resource) Attributes() googleComputeRegionNetworkFirewallPolicyAssociationAttributes {
	return googleComputeRegionNetworkFirewallPolicyAssociationAttributes{ref: terra.ReferenceResource(gcrnfpa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcrnfpa *Resource) ImportState(state io.Reader) error {
	gcrnfpa.state = &googleComputeRegionNetworkFirewallPolicyAssociationState{}
	if err := json.NewDecoder(state).Decode(gcrnfpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcrnfpa.Type(), gcrnfpa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcrnfpa *Resource) State() (*googleComputeRegionNetworkFirewallPolicyAssociationState, bool) {
	return gcrnfpa.state, gcrnfpa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcrnfpa *Resource) StateMust() *googleComputeRegionNetworkFirewallPolicyAssociationState {
	if gcrnfpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcrnfpa.Type(), gcrnfpa.LocalName()))
	}
	return gcrnfpa.state
}

// Args contains the configurations for google_compute_region_network_firewall_policy_association.
type Args struct {
	// AttachmentTarget: string, required
	AttachmentTarget terra.StringValue `hcl:"attachment_target,attr" validate:"required"`
	// FirewallPolicy: string, required
	FirewallPolicy terra.StringValue `hcl:"firewall_policy,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeRegionNetworkFirewallPolicyAssociationAttributes struct {
	ref terra.Reference
}

// AttachmentTarget returns a reference to field attachment_target of google_compute_region_network_firewall_policy_association.
func (gcrnfpa googleComputeRegionNetworkFirewallPolicyAssociationAttributes) AttachmentTarget() terra.StringValue {
	return terra.ReferenceAsString(gcrnfpa.ref.Append("attachment_target"))
}

// FirewallPolicy returns a reference to field firewall_policy of google_compute_region_network_firewall_policy_association.
func (gcrnfpa googleComputeRegionNetworkFirewallPolicyAssociationAttributes) FirewallPolicy() terra.StringValue {
	return terra.ReferenceAsString(gcrnfpa.ref.Append("firewall_policy"))
}

// Id returns a reference to field id of google_compute_region_network_firewall_policy_association.
func (gcrnfpa googleComputeRegionNetworkFirewallPolicyAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcrnfpa.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_region_network_firewall_policy_association.
func (gcrnfpa googleComputeRegionNetworkFirewallPolicyAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcrnfpa.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_region_network_firewall_policy_association.
func (gcrnfpa googleComputeRegionNetworkFirewallPolicyAssociationAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcrnfpa.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_region_network_firewall_policy_association.
func (gcrnfpa googleComputeRegionNetworkFirewallPolicyAssociationAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcrnfpa.ref.Append("region"))
}

// ShortName returns a reference to field short_name of google_compute_region_network_firewall_policy_association.
func (gcrnfpa googleComputeRegionNetworkFirewallPolicyAssociationAttributes) ShortName() terra.StringValue {
	return terra.ReferenceAsString(gcrnfpa.ref.Append("short_name"))
}

func (gcrnfpa googleComputeRegionNetworkFirewallPolicyAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcrnfpa.ref.Append("timeouts"))
}

type googleComputeRegionNetworkFirewallPolicyAssociationState struct {
	AttachmentTarget string         `json:"attachment_target"`
	FirewallPolicy   string         `json:"firewall_policy"`
	Id               string         `json:"id"`
	Name             string         `json:"name"`
	Project          string         `json:"project"`
	Region           string         `json:"region"`
	ShortName        string         `json:"short_name"`
	Timeouts         *TimeoutsState `json:"timeouts"`
}
