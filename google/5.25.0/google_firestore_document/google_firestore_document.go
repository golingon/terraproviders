// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firestore_document

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firestore_document.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirestoreDocumentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfd *Resource) Type() string {
	return "google_firestore_document"
}

// LocalName returns the local name for [Resource].
func (gfd *Resource) LocalName() string {
	return gfd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfd *Resource) Configuration() interface{} {
	return gfd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfd *Resource) Dependencies() terra.Dependencies {
	return gfd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfd *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfd *Resource) Attributes() googleFirestoreDocumentAttributes {
	return googleFirestoreDocumentAttributes{ref: terra.ReferenceResource(gfd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfd *Resource) ImportState(state io.Reader) error {
	gfd.state = &googleFirestoreDocumentState{}
	if err := json.NewDecoder(state).Decode(gfd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfd.Type(), gfd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfd *Resource) State() (*googleFirestoreDocumentState, bool) {
	return gfd.state, gfd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfd *Resource) StateMust() *googleFirestoreDocumentState {
	if gfd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfd.Type(), gfd.LocalName()))
	}
	return gfd.state
}

// Args contains the configurations for google_firestore_document.
type Args struct {
	// Collection: string, required
	Collection terra.StringValue `hcl:"collection,attr" validate:"required"`
	// Database: string, optional
	Database terra.StringValue `hcl:"database,attr"`
	// DocumentId: string, required
	DocumentId terra.StringValue `hcl:"document_id,attr" validate:"required"`
	// Fields: string, required
	Fields terra.StringValue `hcl:"fields,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirestoreDocumentAttributes struct {
	ref terra.Reference
}

// Collection returns a reference to field collection of google_firestore_document.
func (gfd googleFirestoreDocumentAttributes) Collection() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("collection"))
}

// CreateTime returns a reference to field create_time of google_firestore_document.
func (gfd googleFirestoreDocumentAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("create_time"))
}

// Database returns a reference to field database of google_firestore_document.
func (gfd googleFirestoreDocumentAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("database"))
}

// DocumentId returns a reference to field document_id of google_firestore_document.
func (gfd googleFirestoreDocumentAttributes) DocumentId() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("document_id"))
}

// Fields returns a reference to field fields of google_firestore_document.
func (gfd googleFirestoreDocumentAttributes) Fields() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("fields"))
}

// Id returns a reference to field id of google_firestore_document.
func (gfd googleFirestoreDocumentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("id"))
}

// Name returns a reference to field name of google_firestore_document.
func (gfd googleFirestoreDocumentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("name"))
}

// Path returns a reference to field path of google_firestore_document.
func (gfd googleFirestoreDocumentAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("path"))
}

// Project returns a reference to field project of google_firestore_document.
func (gfd googleFirestoreDocumentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("project"))
}

// UpdateTime returns a reference to field update_time of google_firestore_document.
func (gfd googleFirestoreDocumentAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gfd.ref.Append("update_time"))
}

func (gfd googleFirestoreDocumentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfd.ref.Append("timeouts"))
}

type googleFirestoreDocumentState struct {
	Collection string         `json:"collection"`
	CreateTime string         `json:"create_time"`
	Database   string         `json:"database"`
	DocumentId string         `json:"document_id"`
	Fields     string         `json:"fields"`
	Id         string         `json:"id"`
	Name       string         `json:"name"`
	Path       string         `json:"path"`
	Project    string         `json:"project"`
	UpdateTime string         `json:"update_time"`
	Timeouts   *TimeoutsState `json:"timeouts"`
}
