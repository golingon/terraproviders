// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_storage_notification

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_storage_notification.
type Resource struct {
	Name      string
	Args      Args
	state     *googleStorageNotificationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsn *Resource) Type() string {
	return "google_storage_notification"
}

// LocalName returns the local name for [Resource].
func (gsn *Resource) LocalName() string {
	return gsn.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsn *Resource) Configuration() interface{} {
	return gsn.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsn *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsn)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsn *Resource) Dependencies() terra.Dependencies {
	return gsn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsn *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsn.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsn *Resource) Attributes() googleStorageNotificationAttributes {
	return googleStorageNotificationAttributes{ref: terra.ReferenceResource(gsn)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsn *Resource) ImportState(state io.Reader) error {
	gsn.state = &googleStorageNotificationState{}
	if err := json.NewDecoder(state).Decode(gsn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsn.Type(), gsn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsn *Resource) State() (*googleStorageNotificationState, bool) {
	return gsn.state, gsn.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsn *Resource) StateMust() *googleStorageNotificationState {
	if gsn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsn.Type(), gsn.LocalName()))
	}
	return gsn.state
}

// Args contains the configurations for google_storage_notification.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// CustomAttributes: map of string, optional
	CustomAttributes terra.MapValue[terra.StringValue] `hcl:"custom_attributes,attr"`
	// EventTypes: set of string, optional
	EventTypes terra.SetValue[terra.StringValue] `hcl:"event_types,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ObjectNamePrefix: string, optional
	ObjectNamePrefix terra.StringValue `hcl:"object_name_prefix,attr"`
	// PayloadFormat: string, required
	PayloadFormat terra.StringValue `hcl:"payload_format,attr" validate:"required"`
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
}

type googleStorageNotificationAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of google_storage_notification.
func (gsn googleStorageNotificationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(gsn.ref.Append("bucket"))
}

// CustomAttributes returns a reference to field custom_attributes of google_storage_notification.
func (gsn googleStorageNotificationAttributes) CustomAttributes() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsn.ref.Append("custom_attributes"))
}

// EventTypes returns a reference to field event_types of google_storage_notification.
func (gsn googleStorageNotificationAttributes) EventTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gsn.ref.Append("event_types"))
}

// Id returns a reference to field id of google_storage_notification.
func (gsn googleStorageNotificationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsn.ref.Append("id"))
}

// NotificationId returns a reference to field notification_id of google_storage_notification.
func (gsn googleStorageNotificationAttributes) NotificationId() terra.StringValue {
	return terra.ReferenceAsString(gsn.ref.Append("notification_id"))
}

// ObjectNamePrefix returns a reference to field object_name_prefix of google_storage_notification.
func (gsn googleStorageNotificationAttributes) ObjectNamePrefix() terra.StringValue {
	return terra.ReferenceAsString(gsn.ref.Append("object_name_prefix"))
}

// PayloadFormat returns a reference to field payload_format of google_storage_notification.
func (gsn googleStorageNotificationAttributes) PayloadFormat() terra.StringValue {
	return terra.ReferenceAsString(gsn.ref.Append("payload_format"))
}

// SelfLink returns a reference to field self_link of google_storage_notification.
func (gsn googleStorageNotificationAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gsn.ref.Append("self_link"))
}

// Topic returns a reference to field topic of google_storage_notification.
func (gsn googleStorageNotificationAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(gsn.ref.Append("topic"))
}

type googleStorageNotificationState struct {
	Bucket           string            `json:"bucket"`
	CustomAttributes map[string]string `json:"custom_attributes"`
	EventTypes       []string          `json:"event_types"`
	Id               string            `json:"id"`
	NotificationId   string            `json:"notification_id"`
	ObjectNamePrefix string            `json:"object_name_prefix"`
	PayloadFormat    string            `json:"payload_format"`
	SelfLink         string            `json:"self_link"`
	Topic            string            `json:"topic"`
}
