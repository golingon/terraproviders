// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_gkeonprem_vmware_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_gkeonprem_vmware_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *googleGkeonpremVmwareClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ggvc *Resource) Type() string {
	return "google_gkeonprem_vmware_cluster"
}

// LocalName returns the local name for [Resource].
func (ggvc *Resource) LocalName() string {
	return ggvc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ggvc *Resource) Configuration() interface{} {
	return ggvc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ggvc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ggvc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ggvc *Resource) Dependencies() terra.Dependencies {
	return ggvc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ggvc *Resource) LifecycleManagement() *terra.Lifecycle {
	return ggvc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ggvc *Resource) Attributes() googleGkeonpremVmwareClusterAttributes {
	return googleGkeonpremVmwareClusterAttributes{ref: terra.ReferenceResource(ggvc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ggvc *Resource) ImportState(state io.Reader) error {
	ggvc.state = &googleGkeonpremVmwareClusterState{}
	if err := json.NewDecoder(state).Decode(ggvc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ggvc.Type(), ggvc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ggvc *Resource) State() (*googleGkeonpremVmwareClusterState, bool) {
	return ggvc.state, ggvc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ggvc *Resource) StateMust() *googleGkeonpremVmwareClusterState {
	if ggvc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ggvc.Type(), ggvc.LocalName()))
	}
	return ggvc.state
}

// Args contains the configurations for google_gkeonprem_vmware_cluster.
type Args struct {
	// AdminClusterMembership: string, required
	AdminClusterMembership terra.StringValue `hcl:"admin_cluster_membership,attr" validate:"required"`
	// Annotations: map of string, optional
	Annotations terra.MapValue[terra.StringValue] `hcl:"annotations,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableBundledIngress: bool, optional
	DisableBundledIngress terra.BoolValue `hcl:"disable_bundled_ingress,attr"`
	// EnableControlPlaneV2: bool, optional
	EnableControlPlaneV2 terra.BoolValue `hcl:"enable_control_plane_v2,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OnPremVersion: string, required
	OnPremVersion terra.StringValue `hcl:"on_prem_version,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// VmTrackingEnabled: bool, optional
	VmTrackingEnabled terra.BoolValue `hcl:"vm_tracking_enabled,attr"`
	// AntiAffinityGroups: optional
	AntiAffinityGroups *AntiAffinityGroups `hcl:"anti_affinity_groups,block"`
	// Authorization: optional
	Authorization *Authorization `hcl:"authorization,block"`
	// AutoRepairConfig: optional
	AutoRepairConfig *AutoRepairConfig `hcl:"auto_repair_config,block"`
	// ControlPlaneNode: required
	ControlPlaneNode *ControlPlaneNode `hcl:"control_plane_node,block" validate:"required"`
	// DataplaneV2: optional
	DataplaneV2 *DataplaneV2 `hcl:"dataplane_v2,block"`
	// LoadBalancer: optional
	LoadBalancer *LoadBalancer `hcl:"load_balancer,block"`
	// NetworkConfig: optional
	NetworkConfig *NetworkConfig `hcl:"network_config,block"`
	// Storage: optional
	Storage *Storage `hcl:"storage,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// UpgradePolicy: optional
	UpgradePolicy *UpgradePolicy `hcl:"upgrade_policy,block"`
	// Vcenter: optional
	Vcenter *Vcenter `hcl:"vcenter,block"`
}

type googleGkeonpremVmwareClusterAttributes struct {
	ref terra.Reference
}

// AdminClusterMembership returns a reference to field admin_cluster_membership of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) AdminClusterMembership() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("admin_cluster_membership"))
}

// Annotations returns a reference to field annotations of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) Annotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ggvc.ref.Append("annotations"))
}

// CreateTime returns a reference to field create_time of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("delete_time"))
}

// Description returns a reference to field description of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("description"))
}

// DisableBundledIngress returns a reference to field disable_bundled_ingress of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) DisableBundledIngress() terra.BoolValue {
	return terra.ReferenceAsBool(ggvc.ref.Append("disable_bundled_ingress"))
}

// EffectiveAnnotations returns a reference to field effective_annotations of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) EffectiveAnnotations() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ggvc.ref.Append("effective_annotations"))
}

// EnableControlPlaneV2 returns a reference to field enable_control_plane_v2 of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) EnableControlPlaneV2() terra.BoolValue {
	return terra.ReferenceAsBool(ggvc.ref.Append("enable_control_plane_v2"))
}

// Endpoint returns a reference to field endpoint of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("endpoint"))
}

// Etag returns a reference to field etag of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("etag"))
}

// Id returns a reference to field id of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("id"))
}

// LocalName returns a reference to field local_name of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) LocalName() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("local_name"))
}

// Location returns a reference to field location of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("location"))
}

// Name returns a reference to field name of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("name"))
}

// OnPremVersion returns a reference to field on_prem_version of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) OnPremVersion() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("on_prem_version"))
}

// Project returns a reference to field project of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("project"))
}

// Reconciling returns a reference to field reconciling of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) Reconciling() terra.BoolValue {
	return terra.ReferenceAsBool(ggvc.ref.Append("reconciling"))
}

// State returns a reference to field state of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("state"))
}

// Uid returns a reference to field uid of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(ggvc.ref.Append("update_time"))
}

// VmTrackingEnabled returns a reference to field vm_tracking_enabled of google_gkeonprem_vmware_cluster.
func (ggvc googleGkeonpremVmwareClusterAttributes) VmTrackingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ggvc.ref.Append("vm_tracking_enabled"))
}

func (ggvc googleGkeonpremVmwareClusterAttributes) Fleet() terra.ListValue[FleetAttributes] {
	return terra.ReferenceAsList[FleetAttributes](ggvc.ref.Append("fleet"))
}

func (ggvc googleGkeonpremVmwareClusterAttributes) Status() terra.ListValue[StatusAttributes] {
	return terra.ReferenceAsList[StatusAttributes](ggvc.ref.Append("status"))
}

func (ggvc googleGkeonpremVmwareClusterAttributes) ValidationCheck() terra.ListValue[ValidationCheckAttributes] {
	return terra.ReferenceAsList[ValidationCheckAttributes](ggvc.ref.Append("validation_check"))
}

func (ggvc googleGkeonpremVmwareClusterAttributes) AntiAffinityGroups() terra.ListValue[AntiAffinityGroupsAttributes] {
	return terra.ReferenceAsList[AntiAffinityGroupsAttributes](ggvc.ref.Append("anti_affinity_groups"))
}

func (ggvc googleGkeonpremVmwareClusterAttributes) Authorization() terra.ListValue[AuthorizationAttributes] {
	return terra.ReferenceAsList[AuthorizationAttributes](ggvc.ref.Append("authorization"))
}

func (ggvc googleGkeonpremVmwareClusterAttributes) AutoRepairConfig() terra.ListValue[AutoRepairConfigAttributes] {
	return terra.ReferenceAsList[AutoRepairConfigAttributes](ggvc.ref.Append("auto_repair_config"))
}

func (ggvc googleGkeonpremVmwareClusterAttributes) ControlPlaneNode() terra.ListValue[ControlPlaneNodeAttributes] {
	return terra.ReferenceAsList[ControlPlaneNodeAttributes](ggvc.ref.Append("control_plane_node"))
}

func (ggvc googleGkeonpremVmwareClusterAttributes) DataplaneV2() terra.ListValue[DataplaneV2Attributes] {
	return terra.ReferenceAsList[DataplaneV2Attributes](ggvc.ref.Append("dataplane_v2"))
}

func (ggvc googleGkeonpremVmwareClusterAttributes) LoadBalancer() terra.ListValue[LoadBalancerAttributes] {
	return terra.ReferenceAsList[LoadBalancerAttributes](ggvc.ref.Append("load_balancer"))
}

func (ggvc googleGkeonpremVmwareClusterAttributes) NetworkConfig() terra.ListValue[NetworkConfigAttributes] {
	return terra.ReferenceAsList[NetworkConfigAttributes](ggvc.ref.Append("network_config"))
}

func (ggvc googleGkeonpremVmwareClusterAttributes) Storage() terra.ListValue[StorageAttributes] {
	return terra.ReferenceAsList[StorageAttributes](ggvc.ref.Append("storage"))
}

func (ggvc googleGkeonpremVmwareClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ggvc.ref.Append("timeouts"))
}

func (ggvc googleGkeonpremVmwareClusterAttributes) UpgradePolicy() terra.ListValue[UpgradePolicyAttributes] {
	return terra.ReferenceAsList[UpgradePolicyAttributes](ggvc.ref.Append("upgrade_policy"))
}

func (ggvc googleGkeonpremVmwareClusterAttributes) Vcenter() terra.ListValue[VcenterAttributes] {
	return terra.ReferenceAsList[VcenterAttributes](ggvc.ref.Append("vcenter"))
}

type googleGkeonpremVmwareClusterState struct {
	AdminClusterMembership string                    `json:"admin_cluster_membership"`
	Annotations            map[string]string         `json:"annotations"`
	CreateTime             string                    `json:"create_time"`
	DeleteTime             string                    `json:"delete_time"`
	Description            string                    `json:"description"`
	DisableBundledIngress  bool                      `json:"disable_bundled_ingress"`
	EffectiveAnnotations   map[string]string         `json:"effective_annotations"`
	EnableControlPlaneV2   bool                      `json:"enable_control_plane_v2"`
	Endpoint               string                    `json:"endpoint"`
	Etag                   string                    `json:"etag"`
	Id                     string                    `json:"id"`
	LocalName              string                    `json:"local_name"`
	Location               string                    `json:"location"`
	Name                   string                    `json:"name"`
	OnPremVersion          string                    `json:"on_prem_version"`
	Project                string                    `json:"project"`
	Reconciling            bool                      `json:"reconciling"`
	State                  string                    `json:"state"`
	Uid                    string                    `json:"uid"`
	UpdateTime             string                    `json:"update_time"`
	VmTrackingEnabled      bool                      `json:"vm_tracking_enabled"`
	Fleet                  []FleetState              `json:"fleet"`
	Status                 []StatusState             `json:"status"`
	ValidationCheck        []ValidationCheckState    `json:"validation_check"`
	AntiAffinityGroups     []AntiAffinityGroupsState `json:"anti_affinity_groups"`
	Authorization          []AuthorizationState      `json:"authorization"`
	AutoRepairConfig       []AutoRepairConfigState   `json:"auto_repair_config"`
	ControlPlaneNode       []ControlPlaneNodeState   `json:"control_plane_node"`
	DataplaneV2            []DataplaneV2State        `json:"dataplane_v2"`
	LoadBalancer           []LoadBalancerState       `json:"load_balancer"`
	NetworkConfig          []NetworkConfigState      `json:"network_config"`
	Storage                []StorageState            `json:"storage"`
	Timeouts               *TimeoutsState            `json:"timeouts"`
	UpgradePolicy          []UpgradePolicyState      `json:"upgrade_policy"`
	Vcenter                []VcenterState            `json:"vcenter"`
}
