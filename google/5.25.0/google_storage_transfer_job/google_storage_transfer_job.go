// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_storage_transfer_job

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_storage_transfer_job.
type Resource struct {
	Name      string
	Args      Args
	state     *googleStorageTransferJobState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gstj *Resource) Type() string {
	return "google_storage_transfer_job"
}

// LocalName returns the local name for [Resource].
func (gstj *Resource) LocalName() string {
	return gstj.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gstj *Resource) Configuration() interface{} {
	return gstj.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gstj *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gstj)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gstj *Resource) Dependencies() terra.Dependencies {
	return gstj.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gstj *Resource) LifecycleManagement() *terra.Lifecycle {
	return gstj.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gstj *Resource) Attributes() googleStorageTransferJobAttributes {
	return googleStorageTransferJobAttributes{ref: terra.ReferenceResource(gstj)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gstj *Resource) ImportState(state io.Reader) error {
	gstj.state = &googleStorageTransferJobState{}
	if err := json.NewDecoder(state).Decode(gstj.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gstj.Type(), gstj.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gstj *Resource) State() (*googleStorageTransferJobState, bool) {
	return gstj.state, gstj.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gstj *Resource) StateMust() *googleStorageTransferJobState {
	if gstj.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gstj.Type(), gstj.LocalName()))
	}
	return gstj.state
}

// Args contains the configurations for google_storage_transfer_job.
type Args struct {
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// EventStream: optional
	EventStream *EventStream `hcl:"event_stream,block"`
	// NotificationConfig: optional
	NotificationConfig *NotificationConfig `hcl:"notification_config,block"`
	// Schedule: optional
	Schedule *Schedule `hcl:"schedule,block"`
	// TransferSpec: required
	TransferSpec *TransferSpec `hcl:"transfer_spec,block" validate:"required"`
}

type googleStorageTransferJobAttributes struct {
	ref terra.Reference
}

// CreationTime returns a reference to field creation_time of google_storage_transfer_job.
func (gstj googleStorageTransferJobAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(gstj.ref.Append("creation_time"))
}

// DeletionTime returns a reference to field deletion_time of google_storage_transfer_job.
func (gstj googleStorageTransferJobAttributes) DeletionTime() terra.StringValue {
	return terra.ReferenceAsString(gstj.ref.Append("deletion_time"))
}

// Description returns a reference to field description of google_storage_transfer_job.
func (gstj googleStorageTransferJobAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gstj.ref.Append("description"))
}

// Id returns a reference to field id of google_storage_transfer_job.
func (gstj googleStorageTransferJobAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gstj.ref.Append("id"))
}

// LastModificationTime returns a reference to field last_modification_time of google_storage_transfer_job.
func (gstj googleStorageTransferJobAttributes) LastModificationTime() terra.StringValue {
	return terra.ReferenceAsString(gstj.ref.Append("last_modification_time"))
}

// Name returns a reference to field name of google_storage_transfer_job.
func (gstj googleStorageTransferJobAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gstj.ref.Append("name"))
}

// Project returns a reference to field project of google_storage_transfer_job.
func (gstj googleStorageTransferJobAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gstj.ref.Append("project"))
}

// Status returns a reference to field status of google_storage_transfer_job.
func (gstj googleStorageTransferJobAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(gstj.ref.Append("status"))
}

func (gstj googleStorageTransferJobAttributes) EventStream() terra.ListValue[EventStreamAttributes] {
	return terra.ReferenceAsList[EventStreamAttributes](gstj.ref.Append("event_stream"))
}

func (gstj googleStorageTransferJobAttributes) NotificationConfig() terra.ListValue[NotificationConfigAttributes] {
	return terra.ReferenceAsList[NotificationConfigAttributes](gstj.ref.Append("notification_config"))
}

func (gstj googleStorageTransferJobAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](gstj.ref.Append("schedule"))
}

func (gstj googleStorageTransferJobAttributes) TransferSpec() terra.ListValue[TransferSpecAttributes] {
	return terra.ReferenceAsList[TransferSpecAttributes](gstj.ref.Append("transfer_spec"))
}

type googleStorageTransferJobState struct {
	CreationTime         string                    `json:"creation_time"`
	DeletionTime         string                    `json:"deletion_time"`
	Description          string                    `json:"description"`
	Id                   string                    `json:"id"`
	LastModificationTime string                    `json:"last_modification_time"`
	Name                 string                    `json:"name"`
	Project              string                    `json:"project"`
	Status               string                    `json:"status"`
	EventStream          []EventStreamState        `json:"event_stream"`
	NotificationConfig   []NotificationConfigState `json:"notification_config"`
	Schedule             []ScheduleState           `json:"schedule"`
	TransferSpec         []TransferSpecState       `json:"transfer_spec"`
}
