// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_beyondcorp_app_gateway

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_beyondcorp_app_gateway.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBeyondcorpAppGatewayState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbag *Resource) Type() string {
	return "google_beyondcorp_app_gateway"
}

// LocalName returns the local name for [Resource].
func (gbag *Resource) LocalName() string {
	return gbag.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbag *Resource) Configuration() interface{} {
	return gbag.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbag *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbag)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbag *Resource) Dependencies() terra.Dependencies {
	return gbag.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbag *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbag.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbag *Resource) Attributes() googleBeyondcorpAppGatewayAttributes {
	return googleBeyondcorpAppGatewayAttributes{ref: terra.ReferenceResource(gbag)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbag *Resource) ImportState(state io.Reader) error {
	gbag.state = &googleBeyondcorpAppGatewayState{}
	if err := json.NewDecoder(state).Decode(gbag.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbag.Type(), gbag.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbag *Resource) State() (*googleBeyondcorpAppGatewayState, bool) {
	return gbag.state, gbag.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbag *Resource) StateMust() *googleBeyondcorpAppGatewayState {
	if gbag.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbag.Type(), gbag.LocalName()))
	}
	return gbag.state
}

// Args contains the configurations for google_beyondcorp_app_gateway.
type Args struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// HostType: string, optional
	HostType terra.StringValue `hcl:"host_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBeyondcorpAppGatewayAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of google_beyondcorp_app_gateway.
func (gbag googleBeyondcorpAppGatewayAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gbag.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_beyondcorp_app_gateway.
func (gbag googleBeyondcorpAppGatewayAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbag.ref.Append("effective_labels"))
}

// HostType returns a reference to field host_type of google_beyondcorp_app_gateway.
func (gbag googleBeyondcorpAppGatewayAttributes) HostType() terra.StringValue {
	return terra.ReferenceAsString(gbag.ref.Append("host_type"))
}

// Id returns a reference to field id of google_beyondcorp_app_gateway.
func (gbag googleBeyondcorpAppGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbag.ref.Append("id"))
}

// Labels returns a reference to field labels of google_beyondcorp_app_gateway.
func (gbag googleBeyondcorpAppGatewayAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbag.ref.Append("labels"))
}

// Name returns a reference to field name of google_beyondcorp_app_gateway.
func (gbag googleBeyondcorpAppGatewayAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbag.ref.Append("name"))
}

// Project returns a reference to field project of google_beyondcorp_app_gateway.
func (gbag googleBeyondcorpAppGatewayAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbag.ref.Append("project"))
}

// Region returns a reference to field region of google_beyondcorp_app_gateway.
func (gbag googleBeyondcorpAppGatewayAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gbag.ref.Append("region"))
}

// State returns a reference to field state of google_beyondcorp_app_gateway.
func (gbag googleBeyondcorpAppGatewayAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gbag.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_beyondcorp_app_gateway.
func (gbag googleBeyondcorpAppGatewayAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbag.ref.Append("terraform_labels"))
}

// Type returns a reference to field type of google_beyondcorp_app_gateway.
func (gbag googleBeyondcorpAppGatewayAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gbag.ref.Append("type"))
}

// Uri returns a reference to field uri of google_beyondcorp_app_gateway.
func (gbag googleBeyondcorpAppGatewayAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(gbag.ref.Append("uri"))
}

func (gbag googleBeyondcorpAppGatewayAttributes) AllocatedConnections() terra.ListValue[AllocatedConnectionsAttributes] {
	return terra.ReferenceAsList[AllocatedConnectionsAttributes](gbag.ref.Append("allocated_connections"))
}

func (gbag googleBeyondcorpAppGatewayAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbag.ref.Append("timeouts"))
}

type googleBeyondcorpAppGatewayState struct {
	DisplayName          string                      `json:"display_name"`
	EffectiveLabels      map[string]string           `json:"effective_labels"`
	HostType             string                      `json:"host_type"`
	Id                   string                      `json:"id"`
	Labels               map[string]string           `json:"labels"`
	Name                 string                      `json:"name"`
	Project              string                      `json:"project"`
	Region               string                      `json:"region"`
	State                string                      `json:"state"`
	TerraformLabels      map[string]string           `json:"terraform_labels"`
	Type                 string                      `json:"type"`
	Uri                  string                      `json:"uri"`
	AllocatedConnections []AllocatedConnectionsState `json:"allocated_connections"`
	Timeouts             *TimeoutsState              `json:"timeouts"`
}
