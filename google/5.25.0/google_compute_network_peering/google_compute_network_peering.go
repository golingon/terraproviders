// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_network_peering

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_network_peering.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeNetworkPeeringState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcnp *Resource) Type() string {
	return "google_compute_network_peering"
}

// LocalName returns the local name for [Resource].
func (gcnp *Resource) LocalName() string {
	return gcnp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcnp *Resource) Configuration() interface{} {
	return gcnp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcnp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcnp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcnp *Resource) Dependencies() terra.Dependencies {
	return gcnp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcnp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcnp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcnp *Resource) Attributes() googleComputeNetworkPeeringAttributes {
	return googleComputeNetworkPeeringAttributes{ref: terra.ReferenceResource(gcnp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcnp *Resource) ImportState(state io.Reader) error {
	gcnp.state = &googleComputeNetworkPeeringState{}
	if err := json.NewDecoder(state).Decode(gcnp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcnp.Type(), gcnp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcnp *Resource) State() (*googleComputeNetworkPeeringState, bool) {
	return gcnp.state, gcnp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcnp *Resource) StateMust() *googleComputeNetworkPeeringState {
	if gcnp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcnp.Type(), gcnp.LocalName()))
	}
	return gcnp.state
}

// Args contains the configurations for google_compute_network_peering.
type Args struct {
	// ExportCustomRoutes: bool, optional
	ExportCustomRoutes terra.BoolValue `hcl:"export_custom_routes,attr"`
	// ExportSubnetRoutesWithPublicIp: bool, optional
	ExportSubnetRoutesWithPublicIp terra.BoolValue `hcl:"export_subnet_routes_with_public_ip,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImportCustomRoutes: bool, optional
	ImportCustomRoutes terra.BoolValue `hcl:"import_custom_routes,attr"`
	// ImportSubnetRoutesWithPublicIp: bool, optional
	ImportSubnetRoutesWithPublicIp terra.BoolValue `hcl:"import_subnet_routes_with_public_ip,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// PeerNetwork: string, required
	PeerNetwork terra.StringValue `hcl:"peer_network,attr" validate:"required"`
	// StackType: string, optional
	StackType terra.StringValue `hcl:"stack_type,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeNetworkPeeringAttributes struct {
	ref terra.Reference
}

// ExportCustomRoutes returns a reference to field export_custom_routes of google_compute_network_peering.
func (gcnp googleComputeNetworkPeeringAttributes) ExportCustomRoutes() terra.BoolValue {
	return terra.ReferenceAsBool(gcnp.ref.Append("export_custom_routes"))
}

// ExportSubnetRoutesWithPublicIp returns a reference to field export_subnet_routes_with_public_ip of google_compute_network_peering.
func (gcnp googleComputeNetworkPeeringAttributes) ExportSubnetRoutesWithPublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(gcnp.ref.Append("export_subnet_routes_with_public_ip"))
}

// Id returns a reference to field id of google_compute_network_peering.
func (gcnp googleComputeNetworkPeeringAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("id"))
}

// ImportCustomRoutes returns a reference to field import_custom_routes of google_compute_network_peering.
func (gcnp googleComputeNetworkPeeringAttributes) ImportCustomRoutes() terra.BoolValue {
	return terra.ReferenceAsBool(gcnp.ref.Append("import_custom_routes"))
}

// ImportSubnetRoutesWithPublicIp returns a reference to field import_subnet_routes_with_public_ip of google_compute_network_peering.
func (gcnp googleComputeNetworkPeeringAttributes) ImportSubnetRoutesWithPublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(gcnp.ref.Append("import_subnet_routes_with_public_ip"))
}

// Name returns a reference to field name of google_compute_network_peering.
func (gcnp googleComputeNetworkPeeringAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("name"))
}

// Network returns a reference to field network of google_compute_network_peering.
func (gcnp googleComputeNetworkPeeringAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("network"))
}

// PeerNetwork returns a reference to field peer_network of google_compute_network_peering.
func (gcnp googleComputeNetworkPeeringAttributes) PeerNetwork() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("peer_network"))
}

// StackType returns a reference to field stack_type of google_compute_network_peering.
func (gcnp googleComputeNetworkPeeringAttributes) StackType() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("stack_type"))
}

// State returns a reference to field state of google_compute_network_peering.
func (gcnp googleComputeNetworkPeeringAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("state"))
}

// StateDetails returns a reference to field state_details of google_compute_network_peering.
func (gcnp googleComputeNetworkPeeringAttributes) StateDetails() terra.StringValue {
	return terra.ReferenceAsString(gcnp.ref.Append("state_details"))
}

func (gcnp googleComputeNetworkPeeringAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcnp.ref.Append("timeouts"))
}

type googleComputeNetworkPeeringState struct {
	ExportCustomRoutes             bool           `json:"export_custom_routes"`
	ExportSubnetRoutesWithPublicIp bool           `json:"export_subnet_routes_with_public_ip"`
	Id                             string         `json:"id"`
	ImportCustomRoutes             bool           `json:"import_custom_routes"`
	ImportSubnetRoutesWithPublicIp bool           `json:"import_subnet_routes_with_public_ip"`
	Name                           string         `json:"name"`
	Network                        string         `json:"network"`
	PeerNetwork                    string         `json:"peer_network"`
	StackType                      string         `json:"stack_type"`
	State                          string         `json:"state"`
	StateDetails                   string         `json:"state_details"`
	Timeouts                       *TimeoutsState `json:"timeouts"`
}
