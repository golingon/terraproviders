// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_network_services_edge_cache_origin

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_network_services_edge_cache_origin.
type Resource struct {
	Name      string
	Args      Args
	state     *googleNetworkServicesEdgeCacheOriginState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gnseco *Resource) Type() string {
	return "google_network_services_edge_cache_origin"
}

// LocalName returns the local name for [Resource].
func (gnseco *Resource) LocalName() string {
	return gnseco.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gnseco *Resource) Configuration() interface{} {
	return gnseco.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gnseco *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gnseco)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gnseco *Resource) Dependencies() terra.Dependencies {
	return gnseco.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gnseco *Resource) LifecycleManagement() *terra.Lifecycle {
	return gnseco.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gnseco *Resource) Attributes() googleNetworkServicesEdgeCacheOriginAttributes {
	return googleNetworkServicesEdgeCacheOriginAttributes{ref: terra.ReferenceResource(gnseco)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gnseco *Resource) ImportState(state io.Reader) error {
	gnseco.state = &googleNetworkServicesEdgeCacheOriginState{}
	if err := json.NewDecoder(state).Decode(gnseco.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gnseco.Type(), gnseco.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gnseco *Resource) State() (*googleNetworkServicesEdgeCacheOriginState, bool) {
	return gnseco.state, gnseco.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gnseco *Resource) StateMust() *googleNetworkServicesEdgeCacheOriginState {
	if gnseco.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gnseco.Type(), gnseco.LocalName()))
	}
	return gnseco.state
}

// Args contains the configurations for google_network_services_edge_cache_origin.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FailoverOrigin: string, optional
	FailoverOrigin terra.StringValue `hcl:"failover_origin,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// MaxAttempts: number, optional
	MaxAttempts terra.NumberValue `hcl:"max_attempts,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OriginAddress: string, required
	OriginAddress terra.StringValue `hcl:"origin_address,attr" validate:"required"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// RetryConditions: list of string, optional
	RetryConditions terra.ListValue[terra.StringValue] `hcl:"retry_conditions,attr"`
	// AwsV4Authentication: optional
	AwsV4Authentication *AwsV4Authentication `hcl:"aws_v4_authentication,block"`
	// OriginOverrideAction: optional
	OriginOverrideAction *OriginOverrideAction `hcl:"origin_override_action,block"`
	// OriginRedirect: optional
	OriginRedirect *OriginRedirect `hcl:"origin_redirect,block"`
	// Timeout: optional
	Timeout *Timeout `hcl:"timeout,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleNetworkServicesEdgeCacheOriginAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_network_services_edge_cache_origin.
func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gnseco.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_network_services_edge_cache_origin.
func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnseco.ref.Append("effective_labels"))
}

// FailoverOrigin returns a reference to field failover_origin of google_network_services_edge_cache_origin.
func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) FailoverOrigin() terra.StringValue {
	return terra.ReferenceAsString(gnseco.ref.Append("failover_origin"))
}

// Id returns a reference to field id of google_network_services_edge_cache_origin.
func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gnseco.ref.Append("id"))
}

// Labels returns a reference to field labels of google_network_services_edge_cache_origin.
func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnseco.ref.Append("labels"))
}

// MaxAttempts returns a reference to field max_attempts of google_network_services_edge_cache_origin.
func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) MaxAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(gnseco.ref.Append("max_attempts"))
}

// Name returns a reference to field name of google_network_services_edge_cache_origin.
func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gnseco.ref.Append("name"))
}

// OriginAddress returns a reference to field origin_address of google_network_services_edge_cache_origin.
func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) OriginAddress() terra.StringValue {
	return terra.ReferenceAsString(gnseco.ref.Append("origin_address"))
}

// Port returns a reference to field port of google_network_services_edge_cache_origin.
func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(gnseco.ref.Append("port"))
}

// Project returns a reference to field project of google_network_services_edge_cache_origin.
func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gnseco.ref.Append("project"))
}

// Protocol returns a reference to field protocol of google_network_services_edge_cache_origin.
func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(gnseco.ref.Append("protocol"))
}

// RetryConditions returns a reference to field retry_conditions of google_network_services_edge_cache_origin.
func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) RetryConditions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gnseco.ref.Append("retry_conditions"))
}

// TerraformLabels returns a reference to field terraform_labels of google_network_services_edge_cache_origin.
func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnseco.ref.Append("terraform_labels"))
}

func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) AwsV4Authentication() terra.ListValue[AwsV4AuthenticationAttributes] {
	return terra.ReferenceAsList[AwsV4AuthenticationAttributes](gnseco.ref.Append("aws_v4_authentication"))
}

func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) OriginOverrideAction() terra.ListValue[OriginOverrideActionAttributes] {
	return terra.ReferenceAsList[OriginOverrideActionAttributes](gnseco.ref.Append("origin_override_action"))
}

func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) OriginRedirect() terra.ListValue[OriginRedirectAttributes] {
	return terra.ReferenceAsList[OriginRedirectAttributes](gnseco.ref.Append("origin_redirect"))
}

func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) Timeout() terra.ListValue[TimeoutAttributes] {
	return terra.ReferenceAsList[TimeoutAttributes](gnseco.ref.Append("timeout"))
}

func (gnseco googleNetworkServicesEdgeCacheOriginAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gnseco.ref.Append("timeouts"))
}

type googleNetworkServicesEdgeCacheOriginState struct {
	Description          string                      `json:"description"`
	EffectiveLabels      map[string]string           `json:"effective_labels"`
	FailoverOrigin       string                      `json:"failover_origin"`
	Id                   string                      `json:"id"`
	Labels               map[string]string           `json:"labels"`
	MaxAttempts          float64                     `json:"max_attempts"`
	Name                 string                      `json:"name"`
	OriginAddress        string                      `json:"origin_address"`
	Port                 float64                     `json:"port"`
	Project              string                      `json:"project"`
	Protocol             string                      `json:"protocol"`
	RetryConditions      []string                    `json:"retry_conditions"`
	TerraformLabels      map[string]string           `json:"terraform_labels"`
	AwsV4Authentication  []AwsV4AuthenticationState  `json:"aws_v4_authentication"`
	OriginOverrideAction []OriginOverrideActionState `json:"origin_override_action"`
	OriginRedirect       []OriginRedirectState       `json:"origin_redirect"`
	Timeout              []TimeoutState              `json:"timeout"`
	Timeouts             *TimeoutsState              `json:"timeouts"`
}
