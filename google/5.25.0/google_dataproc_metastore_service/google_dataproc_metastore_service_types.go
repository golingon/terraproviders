// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataproc_metastore_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EncryptionConfig struct {
	// KmsKey: string, required
	KmsKey terra.StringValue `hcl:"kms_key,attr" validate:"required"`
}

type HiveMetastoreConfig struct {
	// ConfigOverrides: map of string, optional
	ConfigOverrides terra.MapValue[terra.StringValue] `hcl:"config_overrides,attr"`
	// EndpointProtocol: string, optional
	EndpointProtocol terra.StringValue `hcl:"endpoint_protocol,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// HiveMetastoreConfigAuxiliaryVersions: min=0
	AuxiliaryVersions []HiveMetastoreConfigAuxiliaryVersions `hcl:"auxiliary_versions,block" validate:"min=0"`
	// HiveMetastoreConfigKerberosConfig: optional
	KerberosConfig *HiveMetastoreConfigKerberosConfig `hcl:"kerberos_config,block"`
}

type HiveMetastoreConfigAuxiliaryVersions struct {
	// ConfigOverrides: map of string, optional
	ConfigOverrides terra.MapValue[terra.StringValue] `hcl:"config_overrides,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type HiveMetastoreConfigKerberosConfig struct {
	// Krb5ConfigGcsUri: string, required
	Krb5ConfigGcsUri terra.StringValue `hcl:"krb5_config_gcs_uri,attr" validate:"required"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
	// HiveMetastoreConfigKerberosConfigKeytab: required
	Keytab *HiveMetastoreConfigKerberosConfigKeytab `hcl:"keytab,block" validate:"required"`
}

type HiveMetastoreConfigKerberosConfigKeytab struct {
	// CloudSecret: string, required
	CloudSecret terra.StringValue `hcl:"cloud_secret,attr" validate:"required"`
}

type MaintenanceWindow struct {
	// DayOfWeek: string, required
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr" validate:"required"`
	// HourOfDay: number, required
	HourOfDay terra.NumberValue `hcl:"hour_of_day,attr" validate:"required"`
}

type MetadataIntegration struct {
	// MetadataIntegrationDataCatalogConfig: required
	DataCatalogConfig *MetadataIntegrationDataCatalogConfig `hcl:"data_catalog_config,block" validate:"required"`
}

type MetadataIntegrationDataCatalogConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type NetworkConfig struct {
	// NetworkConfigConsumers: min=1
	Consumers []NetworkConfigConsumers `hcl:"consumers,block" validate:"min=1"`
}

type NetworkConfigConsumers struct {
	// Subnetwork: string, required
	Subnetwork terra.StringValue `hcl:"subnetwork,attr" validate:"required"`
}

type ScalingConfig struct {
	// InstanceSize: string, optional
	InstanceSize terra.StringValue `hcl:"instance_size,attr"`
	// ScalingFactor: number, optional
	ScalingFactor terra.NumberValue `hcl:"scaling_factor,attr"`
}

type ScheduledBackup struct {
	// BackupLocation: string, required
	BackupLocation terra.StringValue `hcl:"backup_location,attr" validate:"required"`
	// CronSchedule: string, optional
	CronSchedule terra.StringValue `hcl:"cron_schedule,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
}

type TelemetryConfig struct {
	// LogFormat: string, optional
	LogFormat terra.StringValue `hcl:"log_format,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type EncryptionConfigAttributes struct {
	ref terra.Reference
}

func (ec EncryptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EncryptionConfigAttributes) InternalWithRef(ref terra.Reference) EncryptionConfigAttributes {
	return EncryptionConfigAttributes{ref: ref}
}

func (ec EncryptionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EncryptionConfigAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key"))
}

type HiveMetastoreConfigAttributes struct {
	ref terra.Reference
}

func (hmc HiveMetastoreConfigAttributes) InternalRef() (terra.Reference, error) {
	return hmc.ref, nil
}

func (hmc HiveMetastoreConfigAttributes) InternalWithRef(ref terra.Reference) HiveMetastoreConfigAttributes {
	return HiveMetastoreConfigAttributes{ref: ref}
}

func (hmc HiveMetastoreConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hmc.ref.InternalTokens()
}

func (hmc HiveMetastoreConfigAttributes) ConfigOverrides() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hmc.ref.Append("config_overrides"))
}

func (hmc HiveMetastoreConfigAttributes) EndpointProtocol() terra.StringValue {
	return terra.ReferenceAsString(hmc.ref.Append("endpoint_protocol"))
}

func (hmc HiveMetastoreConfigAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(hmc.ref.Append("version"))
}

func (hmc HiveMetastoreConfigAttributes) AuxiliaryVersions() terra.SetValue[HiveMetastoreConfigAuxiliaryVersionsAttributes] {
	return terra.ReferenceAsSet[HiveMetastoreConfigAuxiliaryVersionsAttributes](hmc.ref.Append("auxiliary_versions"))
}

func (hmc HiveMetastoreConfigAttributes) KerberosConfig() terra.ListValue[HiveMetastoreConfigKerberosConfigAttributes] {
	return terra.ReferenceAsList[HiveMetastoreConfigKerberosConfigAttributes](hmc.ref.Append("kerberos_config"))
}

type HiveMetastoreConfigAuxiliaryVersionsAttributes struct {
	ref terra.Reference
}

func (av HiveMetastoreConfigAuxiliaryVersionsAttributes) InternalRef() (terra.Reference, error) {
	return av.ref, nil
}

func (av HiveMetastoreConfigAuxiliaryVersionsAttributes) InternalWithRef(ref terra.Reference) HiveMetastoreConfigAuxiliaryVersionsAttributes {
	return HiveMetastoreConfigAuxiliaryVersionsAttributes{ref: ref}
}

func (av HiveMetastoreConfigAuxiliaryVersionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return av.ref.InternalTokens()
}

func (av HiveMetastoreConfigAuxiliaryVersionsAttributes) ConfigOverrides() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](av.ref.Append("config_overrides"))
}

func (av HiveMetastoreConfigAuxiliaryVersionsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("key"))
}

func (av HiveMetastoreConfigAuxiliaryVersionsAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("version"))
}

type HiveMetastoreConfigKerberosConfigAttributes struct {
	ref terra.Reference
}

func (kc HiveMetastoreConfigKerberosConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc HiveMetastoreConfigKerberosConfigAttributes) InternalWithRef(ref terra.Reference) HiveMetastoreConfigKerberosConfigAttributes {
	return HiveMetastoreConfigKerberosConfigAttributes{ref: ref}
}

func (kc HiveMetastoreConfigKerberosConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc HiveMetastoreConfigKerberosConfigAttributes) Krb5ConfigGcsUri() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("krb5_config_gcs_uri"))
}

func (kc HiveMetastoreConfigKerberosConfigAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("principal"))
}

func (kc HiveMetastoreConfigKerberosConfigAttributes) Keytab() terra.ListValue[HiveMetastoreConfigKerberosConfigKeytabAttributes] {
	return terra.ReferenceAsList[HiveMetastoreConfigKerberosConfigKeytabAttributes](kc.ref.Append("keytab"))
}

type HiveMetastoreConfigKerberosConfigKeytabAttributes struct {
	ref terra.Reference
}

func (k HiveMetastoreConfigKerberosConfigKeytabAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k HiveMetastoreConfigKerberosConfigKeytabAttributes) InternalWithRef(ref terra.Reference) HiveMetastoreConfigKerberosConfigKeytabAttributes {
	return HiveMetastoreConfigKerberosConfigKeytabAttributes{ref: ref}
}

func (k HiveMetastoreConfigKerberosConfigKeytabAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k HiveMetastoreConfigKerberosConfigKeytabAttributes) CloudSecret() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("cloud_secret"))
}

type MaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (mw MaintenanceWindowAttributes) InternalRef() (terra.Reference, error) {
	return mw.ref, nil
}

func (mw MaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) MaintenanceWindowAttributes {
	return MaintenanceWindowAttributes{ref: ref}
}

func (mw MaintenanceWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mw.ref.InternalTokens()
}

func (mw MaintenanceWindowAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(mw.ref.Append("day_of_week"))
}

func (mw MaintenanceWindowAttributes) HourOfDay() terra.NumberValue {
	return terra.ReferenceAsNumber(mw.ref.Append("hour_of_day"))
}

type MetadataIntegrationAttributes struct {
	ref terra.Reference
}

func (mi MetadataIntegrationAttributes) InternalRef() (terra.Reference, error) {
	return mi.ref, nil
}

func (mi MetadataIntegrationAttributes) InternalWithRef(ref terra.Reference) MetadataIntegrationAttributes {
	return MetadataIntegrationAttributes{ref: ref}
}

func (mi MetadataIntegrationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mi.ref.InternalTokens()
}

func (mi MetadataIntegrationAttributes) DataCatalogConfig() terra.ListValue[MetadataIntegrationDataCatalogConfigAttributes] {
	return terra.ReferenceAsList[MetadataIntegrationDataCatalogConfigAttributes](mi.ref.Append("data_catalog_config"))
}

type MetadataIntegrationDataCatalogConfigAttributes struct {
	ref terra.Reference
}

func (dcc MetadataIntegrationDataCatalogConfigAttributes) InternalRef() (terra.Reference, error) {
	return dcc.ref, nil
}

func (dcc MetadataIntegrationDataCatalogConfigAttributes) InternalWithRef(ref terra.Reference) MetadataIntegrationDataCatalogConfigAttributes {
	return MetadataIntegrationDataCatalogConfigAttributes{ref: ref}
}

func (dcc MetadataIntegrationDataCatalogConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcc.ref.InternalTokens()
}

func (dcc MetadataIntegrationDataCatalogConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dcc.ref.Append("enabled"))
}

type NetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAttributes {
	return NetworkConfigAttributes{ref: ref}
}

func (nc NetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigAttributes) Consumers() terra.ListValue[NetworkConfigConsumersAttributes] {
	return terra.ReferenceAsList[NetworkConfigConsumersAttributes](nc.ref.Append("consumers"))
}

type NetworkConfigConsumersAttributes struct {
	ref terra.Reference
}

func (c NetworkConfigConsumersAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c NetworkConfigConsumersAttributes) InternalWithRef(ref terra.Reference) NetworkConfigConsumersAttributes {
	return NetworkConfigConsumersAttributes{ref: ref}
}

func (c NetworkConfigConsumersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c NetworkConfigConsumersAttributes) EndpointUri() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("endpoint_uri"))
}

func (c NetworkConfigConsumersAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("subnetwork"))
}

type ScalingConfigAttributes struct {
	ref terra.Reference
}

func (sc ScalingConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc ScalingConfigAttributes) InternalWithRef(ref terra.Reference) ScalingConfigAttributes {
	return ScalingConfigAttributes{ref: ref}
}

func (sc ScalingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc ScalingConfigAttributes) InstanceSize() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("instance_size"))
}

func (sc ScalingConfigAttributes) ScalingFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("scaling_factor"))
}

type ScheduledBackupAttributes struct {
	ref terra.Reference
}

func (sb ScheduledBackupAttributes) InternalRef() (terra.Reference, error) {
	return sb.ref, nil
}

func (sb ScheduledBackupAttributes) InternalWithRef(ref terra.Reference) ScheduledBackupAttributes {
	return ScheduledBackupAttributes{ref: ref}
}

func (sb ScheduledBackupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sb.ref.InternalTokens()
}

func (sb ScheduledBackupAttributes) BackupLocation() terra.StringValue {
	return terra.ReferenceAsString(sb.ref.Append("backup_location"))
}

func (sb ScheduledBackupAttributes) CronSchedule() terra.StringValue {
	return terra.ReferenceAsString(sb.ref.Append("cron_schedule"))
}

func (sb ScheduledBackupAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(sb.ref.Append("enabled"))
}

func (sb ScheduledBackupAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(sb.ref.Append("time_zone"))
}

type TelemetryConfigAttributes struct {
	ref terra.Reference
}

func (tc TelemetryConfigAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TelemetryConfigAttributes) InternalWithRef(ref terra.Reference) TelemetryConfigAttributes {
	return TelemetryConfigAttributes{ref: ref}
}

func (tc TelemetryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TelemetryConfigAttributes) LogFormat() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("log_format"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EncryptionConfigState struct {
	KmsKey string `json:"kms_key"`
}

type HiveMetastoreConfigState struct {
	ConfigOverrides   map[string]string                           `json:"config_overrides"`
	EndpointProtocol  string                                      `json:"endpoint_protocol"`
	Version           string                                      `json:"version"`
	AuxiliaryVersions []HiveMetastoreConfigAuxiliaryVersionsState `json:"auxiliary_versions"`
	KerberosConfig    []HiveMetastoreConfigKerberosConfigState    `json:"kerberos_config"`
}

type HiveMetastoreConfigAuxiliaryVersionsState struct {
	ConfigOverrides map[string]string `json:"config_overrides"`
	Key             string            `json:"key"`
	Version         string            `json:"version"`
}

type HiveMetastoreConfigKerberosConfigState struct {
	Krb5ConfigGcsUri string                                         `json:"krb5_config_gcs_uri"`
	Principal        string                                         `json:"principal"`
	Keytab           []HiveMetastoreConfigKerberosConfigKeytabState `json:"keytab"`
}

type HiveMetastoreConfigKerberosConfigKeytabState struct {
	CloudSecret string `json:"cloud_secret"`
}

type MaintenanceWindowState struct {
	DayOfWeek string  `json:"day_of_week"`
	HourOfDay float64 `json:"hour_of_day"`
}

type MetadataIntegrationState struct {
	DataCatalogConfig []MetadataIntegrationDataCatalogConfigState `json:"data_catalog_config"`
}

type MetadataIntegrationDataCatalogConfigState struct {
	Enabled bool `json:"enabled"`
}

type NetworkConfigState struct {
	Consumers []NetworkConfigConsumersState `json:"consumers"`
}

type NetworkConfigConsumersState struct {
	EndpointUri string `json:"endpoint_uri"`
	Subnetwork  string `json:"subnetwork"`
}

type ScalingConfigState struct {
	InstanceSize  string  `json:"instance_size"`
	ScalingFactor float64 `json:"scaling_factor"`
}

type ScheduledBackupState struct {
	BackupLocation string `json:"backup_location"`
	CronSchedule   string `json:"cron_schedule"`
	Enabled        bool   `json:"enabled"`
	TimeZone       string `json:"time_zone"`
}

type TelemetryConfigState struct {
	LogFormat string `json:"log_format"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
