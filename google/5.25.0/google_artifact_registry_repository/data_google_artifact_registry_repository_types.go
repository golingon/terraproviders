// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_artifact_registry_repository

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataCleanupPoliciesAttributes struct {
	ref terra.Reference
}

func (cp DataCleanupPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp DataCleanupPoliciesAttributes) InternalWithRef(ref terra.Reference) DataCleanupPoliciesAttributes {
	return DataCleanupPoliciesAttributes{ref: ref}
}

func (cp DataCleanupPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp DataCleanupPoliciesAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("action"))
}

func (cp DataCleanupPoliciesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("id"))
}

func (cp DataCleanupPoliciesAttributes) Condition() terra.ListValue[DataCleanupPoliciesConditionAttributes] {
	return terra.ReferenceAsList[DataCleanupPoliciesConditionAttributes](cp.ref.Append("condition"))
}

func (cp DataCleanupPoliciesAttributes) MostRecentVersions() terra.ListValue[DataCleanupPoliciesMostRecentVersionsAttributes] {
	return terra.ReferenceAsList[DataCleanupPoliciesMostRecentVersionsAttributes](cp.ref.Append("most_recent_versions"))
}

type DataCleanupPoliciesConditionAttributes struct {
	ref terra.Reference
}

func (c DataCleanupPoliciesConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataCleanupPoliciesConditionAttributes) InternalWithRef(ref terra.Reference) DataCleanupPoliciesConditionAttributes {
	return DataCleanupPoliciesConditionAttributes{ref: ref}
}

func (c DataCleanupPoliciesConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataCleanupPoliciesConditionAttributes) NewerThan() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("newer_than"))
}

func (c DataCleanupPoliciesConditionAttributes) OlderThan() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("older_than"))
}

func (c DataCleanupPoliciesConditionAttributes) PackageNamePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("package_name_prefixes"))
}

func (c DataCleanupPoliciesConditionAttributes) TagPrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("tag_prefixes"))
}

func (c DataCleanupPoliciesConditionAttributes) TagState() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("tag_state"))
}

func (c DataCleanupPoliciesConditionAttributes) VersionNamePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("version_name_prefixes"))
}

type DataCleanupPoliciesMostRecentVersionsAttributes struct {
	ref terra.Reference
}

func (mrv DataCleanupPoliciesMostRecentVersionsAttributes) InternalRef() (terra.Reference, error) {
	return mrv.ref, nil
}

func (mrv DataCleanupPoliciesMostRecentVersionsAttributes) InternalWithRef(ref terra.Reference) DataCleanupPoliciesMostRecentVersionsAttributes {
	return DataCleanupPoliciesMostRecentVersionsAttributes{ref: ref}
}

func (mrv DataCleanupPoliciesMostRecentVersionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mrv.ref.InternalTokens()
}

func (mrv DataCleanupPoliciesMostRecentVersionsAttributes) KeepCount() terra.NumberValue {
	return terra.ReferenceAsNumber(mrv.ref.Append("keep_count"))
}

func (mrv DataCleanupPoliciesMostRecentVersionsAttributes) PackageNamePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mrv.ref.Append("package_name_prefixes"))
}

type DataDockerConfigAttributes struct {
	ref terra.Reference
}

func (dc DataDockerConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DataDockerConfigAttributes) InternalWithRef(ref terra.Reference) DataDockerConfigAttributes {
	return DataDockerConfigAttributes{ref: ref}
}

func (dc DataDockerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DataDockerConfigAttributes) ImmutableTags() terra.BoolValue {
	return terra.ReferenceAsBool(dc.ref.Append("immutable_tags"))
}

type DataMavenConfigAttributes struct {
	ref terra.Reference
}

func (mc DataMavenConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc DataMavenConfigAttributes) InternalWithRef(ref terra.Reference) DataMavenConfigAttributes {
	return DataMavenConfigAttributes{ref: ref}
}

func (mc DataMavenConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc DataMavenConfigAttributes) AllowSnapshotOverwrites() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("allow_snapshot_overwrites"))
}

func (mc DataMavenConfigAttributes) VersionPolicy() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("version_policy"))
}

type DataRemoteRepositoryConfigAttributes struct {
	ref terra.Reference
}

func (rrc DataRemoteRepositoryConfigAttributes) InternalRef() (terra.Reference, error) {
	return rrc.ref, nil
}

func (rrc DataRemoteRepositoryConfigAttributes) InternalWithRef(ref terra.Reference) DataRemoteRepositoryConfigAttributes {
	return DataRemoteRepositoryConfigAttributes{ref: ref}
}

func (rrc DataRemoteRepositoryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rrc.ref.InternalTokens()
}

func (rrc DataRemoteRepositoryConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(rrc.ref.Append("description"))
}

func (rrc DataRemoteRepositoryConfigAttributes) AptRepository() terra.ListValue[DataRemoteRepositoryConfigAptRepositoryAttributes] {
	return terra.ReferenceAsList[DataRemoteRepositoryConfigAptRepositoryAttributes](rrc.ref.Append("apt_repository"))
}

func (rrc DataRemoteRepositoryConfigAttributes) DockerRepository() terra.ListValue[DataRemoteRepositoryConfigDockerRepositoryAttributes] {
	return terra.ReferenceAsList[DataRemoteRepositoryConfigDockerRepositoryAttributes](rrc.ref.Append("docker_repository"))
}

func (rrc DataRemoteRepositoryConfigAttributes) MavenRepository() terra.ListValue[DataRemoteRepositoryConfigMavenRepositoryAttributes] {
	return terra.ReferenceAsList[DataRemoteRepositoryConfigMavenRepositoryAttributes](rrc.ref.Append("maven_repository"))
}

func (rrc DataRemoteRepositoryConfigAttributes) NpmRepository() terra.ListValue[DataRemoteRepositoryConfigNpmRepositoryAttributes] {
	return terra.ReferenceAsList[DataRemoteRepositoryConfigNpmRepositoryAttributes](rrc.ref.Append("npm_repository"))
}

func (rrc DataRemoteRepositoryConfigAttributes) PythonRepository() terra.ListValue[DataRemoteRepositoryConfigPythonRepositoryAttributes] {
	return terra.ReferenceAsList[DataRemoteRepositoryConfigPythonRepositoryAttributes](rrc.ref.Append("python_repository"))
}

func (rrc DataRemoteRepositoryConfigAttributes) UpstreamCredentials() terra.ListValue[DataRemoteRepositoryConfigUpstreamCredentialsAttributes] {
	return terra.ReferenceAsList[DataRemoteRepositoryConfigUpstreamCredentialsAttributes](rrc.ref.Append("upstream_credentials"))
}

func (rrc DataRemoteRepositoryConfigAttributes) YumRepository() terra.ListValue[DataRemoteRepositoryConfigYumRepositoryAttributes] {
	return terra.ReferenceAsList[DataRemoteRepositoryConfigYumRepositoryAttributes](rrc.ref.Append("yum_repository"))
}

type DataRemoteRepositoryConfigAptRepositoryAttributes struct {
	ref terra.Reference
}

func (ar DataRemoteRepositoryConfigAptRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return ar.ref, nil
}

func (ar DataRemoteRepositoryConfigAptRepositoryAttributes) InternalWithRef(ref terra.Reference) DataRemoteRepositoryConfigAptRepositoryAttributes {
	return DataRemoteRepositoryConfigAptRepositoryAttributes{ref: ref}
}

func (ar DataRemoteRepositoryConfigAptRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ar.ref.InternalTokens()
}

func (ar DataRemoteRepositoryConfigAptRepositoryAttributes) PublicRepository() terra.ListValue[DataRemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes] {
	return terra.ReferenceAsList[DataRemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes](ar.ref.Append("public_repository"))
}

type DataRemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes struct {
	ref terra.Reference
}

func (pr DataRemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr DataRemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes) InternalWithRef(ref terra.Reference) DataRemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes {
	return DataRemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes{ref: ref}
}

func (pr DataRemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr DataRemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes) RepositoryBase() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("repository_base"))
}

func (pr DataRemoteRepositoryConfigAptRepositoryPublicRepositoryAttributes) RepositoryPath() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("repository_path"))
}

type DataRemoteRepositoryConfigDockerRepositoryAttributes struct {
	ref terra.Reference
}

func (dr DataRemoteRepositoryConfigDockerRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr DataRemoteRepositoryConfigDockerRepositoryAttributes) InternalWithRef(ref terra.Reference) DataRemoteRepositoryConfigDockerRepositoryAttributes {
	return DataRemoteRepositoryConfigDockerRepositoryAttributes{ref: ref}
}

func (dr DataRemoteRepositoryConfigDockerRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr DataRemoteRepositoryConfigDockerRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("public_repository"))
}

type DataRemoteRepositoryConfigMavenRepositoryAttributes struct {
	ref terra.Reference
}

func (mr DataRemoteRepositoryConfigMavenRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr DataRemoteRepositoryConfigMavenRepositoryAttributes) InternalWithRef(ref terra.Reference) DataRemoteRepositoryConfigMavenRepositoryAttributes {
	return DataRemoteRepositoryConfigMavenRepositoryAttributes{ref: ref}
}

func (mr DataRemoteRepositoryConfigMavenRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr DataRemoteRepositoryConfigMavenRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("public_repository"))
}

type DataRemoteRepositoryConfigNpmRepositoryAttributes struct {
	ref terra.Reference
}

func (nr DataRemoteRepositoryConfigNpmRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return nr.ref, nil
}

func (nr DataRemoteRepositoryConfigNpmRepositoryAttributes) InternalWithRef(ref terra.Reference) DataRemoteRepositoryConfigNpmRepositoryAttributes {
	return DataRemoteRepositoryConfigNpmRepositoryAttributes{ref: ref}
}

func (nr DataRemoteRepositoryConfigNpmRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nr.ref.InternalTokens()
}

func (nr DataRemoteRepositoryConfigNpmRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(nr.ref.Append("public_repository"))
}

type DataRemoteRepositoryConfigPythonRepositoryAttributes struct {
	ref terra.Reference
}

func (pr DataRemoteRepositoryConfigPythonRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr DataRemoteRepositoryConfigPythonRepositoryAttributes) InternalWithRef(ref terra.Reference) DataRemoteRepositoryConfigPythonRepositoryAttributes {
	return DataRemoteRepositoryConfigPythonRepositoryAttributes{ref: ref}
}

func (pr DataRemoteRepositoryConfigPythonRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr DataRemoteRepositoryConfigPythonRepositoryAttributes) PublicRepository() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("public_repository"))
}

type DataRemoteRepositoryConfigUpstreamCredentialsAttributes struct {
	ref terra.Reference
}

func (uc DataRemoteRepositoryConfigUpstreamCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return uc.ref, nil
}

func (uc DataRemoteRepositoryConfigUpstreamCredentialsAttributes) InternalWithRef(ref terra.Reference) DataRemoteRepositoryConfigUpstreamCredentialsAttributes {
	return DataRemoteRepositoryConfigUpstreamCredentialsAttributes{ref: ref}
}

func (uc DataRemoteRepositoryConfigUpstreamCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uc.ref.InternalTokens()
}

func (uc DataRemoteRepositoryConfigUpstreamCredentialsAttributes) UsernamePasswordCredentials() terra.ListValue[DataRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes] {
	return terra.ReferenceAsList[DataRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes](uc.ref.Append("username_password_credentials"))
}

type DataRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes struct {
	ref terra.Reference
}

func (upc DataRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return upc.ref, nil
}

func (upc DataRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes) InternalWithRef(ref terra.Reference) DataRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes {
	return DataRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes{ref: ref}
}

func (upc DataRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return upc.ref.InternalTokens()
}

func (upc DataRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes) PasswordSecretVersion() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("password_secret_version"))
}

func (upc DataRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("username"))
}

type DataRemoteRepositoryConfigYumRepositoryAttributes struct {
	ref terra.Reference
}

func (yr DataRemoteRepositoryConfigYumRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return yr.ref, nil
}

func (yr DataRemoteRepositoryConfigYumRepositoryAttributes) InternalWithRef(ref terra.Reference) DataRemoteRepositoryConfigYumRepositoryAttributes {
	return DataRemoteRepositoryConfigYumRepositoryAttributes{ref: ref}
}

func (yr DataRemoteRepositoryConfigYumRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return yr.ref.InternalTokens()
}

func (yr DataRemoteRepositoryConfigYumRepositoryAttributes) PublicRepository() terra.ListValue[DataRemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes] {
	return terra.ReferenceAsList[DataRemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes](yr.ref.Append("public_repository"))
}

type DataRemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes struct {
	ref terra.Reference
}

func (pr DataRemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr DataRemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes) InternalWithRef(ref terra.Reference) DataRemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes {
	return DataRemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes{ref: ref}
}

func (pr DataRemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr DataRemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes) RepositoryBase() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("repository_base"))
}

func (pr DataRemoteRepositoryConfigYumRepositoryPublicRepositoryAttributes) RepositoryPath() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("repository_path"))
}

type DataVirtualRepositoryConfigAttributes struct {
	ref terra.Reference
}

func (vrc DataVirtualRepositoryConfigAttributes) InternalRef() (terra.Reference, error) {
	return vrc.ref, nil
}

func (vrc DataVirtualRepositoryConfigAttributes) InternalWithRef(ref terra.Reference) DataVirtualRepositoryConfigAttributes {
	return DataVirtualRepositoryConfigAttributes{ref: ref}
}

func (vrc DataVirtualRepositoryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vrc.ref.InternalTokens()
}

func (vrc DataVirtualRepositoryConfigAttributes) UpstreamPolicies() terra.ListValue[DataVirtualRepositoryConfigUpstreamPoliciesAttributes] {
	return terra.ReferenceAsList[DataVirtualRepositoryConfigUpstreamPoliciesAttributes](vrc.ref.Append("upstream_policies"))
}

type DataVirtualRepositoryConfigUpstreamPoliciesAttributes struct {
	ref terra.Reference
}

func (up DataVirtualRepositoryConfigUpstreamPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return up.ref, nil
}

func (up DataVirtualRepositoryConfigUpstreamPoliciesAttributes) InternalWithRef(ref terra.Reference) DataVirtualRepositoryConfigUpstreamPoliciesAttributes {
	return DataVirtualRepositoryConfigUpstreamPoliciesAttributes{ref: ref}
}

func (up DataVirtualRepositoryConfigUpstreamPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return up.ref.InternalTokens()
}

func (up DataVirtualRepositoryConfigUpstreamPoliciesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("id"))
}

func (up DataVirtualRepositoryConfigUpstreamPoliciesAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(up.ref.Append("priority"))
}

func (up DataVirtualRepositoryConfigUpstreamPoliciesAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("repository"))
}

type DataCleanupPoliciesState struct {
	Action             string                                       `json:"action"`
	Id                 string                                       `json:"id"`
	Condition          []DataCleanupPoliciesConditionState          `json:"condition"`
	MostRecentVersions []DataCleanupPoliciesMostRecentVersionsState `json:"most_recent_versions"`
}

type DataCleanupPoliciesConditionState struct {
	NewerThan           string   `json:"newer_than"`
	OlderThan           string   `json:"older_than"`
	PackageNamePrefixes []string `json:"package_name_prefixes"`
	TagPrefixes         []string `json:"tag_prefixes"`
	TagState            string   `json:"tag_state"`
	VersionNamePrefixes []string `json:"version_name_prefixes"`
}

type DataCleanupPoliciesMostRecentVersionsState struct {
	KeepCount           float64  `json:"keep_count"`
	PackageNamePrefixes []string `json:"package_name_prefixes"`
}

type DataDockerConfigState struct {
	ImmutableTags bool `json:"immutable_tags"`
}

type DataMavenConfigState struct {
	AllowSnapshotOverwrites bool   `json:"allow_snapshot_overwrites"`
	VersionPolicy           string `json:"version_policy"`
}

type DataRemoteRepositoryConfigState struct {
	Description         string                                               `json:"description"`
	AptRepository       []DataRemoteRepositoryConfigAptRepositoryState       `json:"apt_repository"`
	DockerRepository    []DataRemoteRepositoryConfigDockerRepositoryState    `json:"docker_repository"`
	MavenRepository     []DataRemoteRepositoryConfigMavenRepositoryState     `json:"maven_repository"`
	NpmRepository       []DataRemoteRepositoryConfigNpmRepositoryState       `json:"npm_repository"`
	PythonRepository    []DataRemoteRepositoryConfigPythonRepositoryState    `json:"python_repository"`
	UpstreamCredentials []DataRemoteRepositoryConfigUpstreamCredentialsState `json:"upstream_credentials"`
	YumRepository       []DataRemoteRepositoryConfigYumRepositoryState       `json:"yum_repository"`
}

type DataRemoteRepositoryConfigAptRepositoryState struct {
	PublicRepository []DataRemoteRepositoryConfigAptRepositoryPublicRepositoryState `json:"public_repository"`
}

type DataRemoteRepositoryConfigAptRepositoryPublicRepositoryState struct {
	RepositoryBase string `json:"repository_base"`
	RepositoryPath string `json:"repository_path"`
}

type DataRemoteRepositoryConfigDockerRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type DataRemoteRepositoryConfigMavenRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type DataRemoteRepositoryConfigNpmRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type DataRemoteRepositoryConfigPythonRepositoryState struct {
	PublicRepository string `json:"public_repository"`
}

type DataRemoteRepositoryConfigUpstreamCredentialsState struct {
	UsernamePasswordCredentials []DataRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsState `json:"username_password_credentials"`
}

type DataRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsState struct {
	PasswordSecretVersion string `json:"password_secret_version"`
	Username              string `json:"username"`
}

type DataRemoteRepositoryConfigYumRepositoryState struct {
	PublicRepository []DataRemoteRepositoryConfigYumRepositoryPublicRepositoryState `json:"public_repository"`
}

type DataRemoteRepositoryConfigYumRepositoryPublicRepositoryState struct {
	RepositoryBase string `json:"repository_base"`
	RepositoryPath string `json:"repository_path"`
}

type DataVirtualRepositoryConfigState struct {
	UpstreamPolicies []DataVirtualRepositoryConfigUpstreamPoliciesState `json:"upstream_policies"`
}

type DataVirtualRepositoryConfigUpstreamPoliciesState struct {
	Id         string  `json:"id"`
	Priority   float64 `json:"priority"`
	Repository string  `json:"repository"`
}
