// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apphub_application

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_apphub_application.
type Resource struct {
	Name      string
	Args      Args
	state     *googleApphubApplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gaa *Resource) Type() string {
	return "google_apphub_application"
}

// LocalName returns the local name for [Resource].
func (gaa *Resource) LocalName() string {
	return gaa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gaa *Resource) Configuration() interface{} {
	return gaa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gaa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gaa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gaa *Resource) Dependencies() terra.Dependencies {
	return gaa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gaa *Resource) LifecycleManagement() *terra.Lifecycle {
	return gaa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gaa *Resource) Attributes() googleApphubApplicationAttributes {
	return googleApphubApplicationAttributes{ref: terra.ReferenceResource(gaa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gaa *Resource) ImportState(state io.Reader) error {
	gaa.state = &googleApphubApplicationState{}
	if err := json.NewDecoder(state).Decode(gaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gaa.Type(), gaa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gaa *Resource) State() (*googleApphubApplicationState, bool) {
	return gaa.state, gaa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gaa *Resource) StateMust() *googleApphubApplicationState {
	if gaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gaa.Type(), gaa.LocalName()))
	}
	return gaa.state
}

// Args contains the configurations for google_apphub_application.
type Args struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Attributes: optional
	Attributes *Attributes `hcl:"attributes,block"`
	// Scope: required
	Scope *Scope `hcl:"scope,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleApphubApplicationAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of google_apphub_application.
func (gaa googleApphubApplicationAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(gaa.ref.Append("application_id"))
}

// CreateTime returns a reference to field create_time of google_apphub_application.
func (gaa googleApphubApplicationAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gaa.ref.Append("create_time"))
}

// Description returns a reference to field description of google_apphub_application.
func (gaa googleApphubApplicationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gaa.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_apphub_application.
func (gaa googleApphubApplicationAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gaa.ref.Append("display_name"))
}

// Id returns a reference to field id of google_apphub_application.
func (gaa googleApphubApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gaa.ref.Append("id"))
}

// Location returns a reference to field location of google_apphub_application.
func (gaa googleApphubApplicationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gaa.ref.Append("location"))
}

// Name returns a reference to field name of google_apphub_application.
func (gaa googleApphubApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gaa.ref.Append("name"))
}

// Project returns a reference to field project of google_apphub_application.
func (gaa googleApphubApplicationAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gaa.ref.Append("project"))
}

// State returns a reference to field state of google_apphub_application.
func (gaa googleApphubApplicationAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gaa.ref.Append("state"))
}

// Uid returns a reference to field uid of google_apphub_application.
func (gaa googleApphubApplicationAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gaa.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_apphub_application.
func (gaa googleApphubApplicationAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gaa.ref.Append("update_time"))
}

func (gaa googleApphubApplicationAttributes) Attributes() terra.ListValue[AttributesAttributes] {
	return terra.ReferenceAsList[AttributesAttributes](gaa.ref.Append("attributes"))
}

func (gaa googleApphubApplicationAttributes) Scope() terra.ListValue[ScopeAttributes] {
	return terra.ReferenceAsList[ScopeAttributes](gaa.ref.Append("scope"))
}

func (gaa googleApphubApplicationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gaa.ref.Append("timeouts"))
}

type googleApphubApplicationState struct {
	ApplicationId string            `json:"application_id"`
	CreateTime    string            `json:"create_time"`
	Description   string            `json:"description"`
	DisplayName   string            `json:"display_name"`
	Id            string            `json:"id"`
	Location      string            `json:"location"`
	Name          string            `json:"name"`
	Project       string            `json:"project"`
	State         string            `json:"state"`
	Uid           string            `json:"uid"`
	UpdateTime    string            `json:"update_time"`
	Attributes    []AttributesState `json:"attributes"`
	Scope         []ScopeState      `json:"scope"`
	Timeouts      *TimeoutsState    `json:"timeouts"`
}
