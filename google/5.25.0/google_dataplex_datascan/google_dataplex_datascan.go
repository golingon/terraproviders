// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataplex_datascan

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dataplex_datascan.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataplexDatascanState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdd *Resource) Type() string {
	return "google_dataplex_datascan"
}

// LocalName returns the local name for [Resource].
func (gdd *Resource) LocalName() string {
	return gdd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdd *Resource) Configuration() interface{} {
	return gdd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdd *Resource) Dependencies() terra.Dependencies {
	return gdd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdd *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdd *Resource) Attributes() googleDataplexDatascanAttributes {
	return googleDataplexDatascanAttributes{ref: terra.ReferenceResource(gdd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdd *Resource) ImportState(state io.Reader) error {
	gdd.state = &googleDataplexDatascanState{}
	if err := json.NewDecoder(state).Decode(gdd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdd.Type(), gdd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdd *Resource) State() (*googleDataplexDatascanState, bool) {
	return gdd.state, gdd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdd *Resource) StateMust() *googleDataplexDatascanState {
	if gdd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdd.Type(), gdd.LocalName()))
	}
	return gdd.state
}

// Args contains the configurations for google_dataplex_datascan.
type Args struct {
	// DataScanId: string, required
	DataScanId terra.StringValue `hcl:"data_scan_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Data: required
	Data *Data `hcl:"data,block" validate:"required"`
	// DataProfileSpec: optional
	DataProfileSpec *DataProfileSpec `hcl:"data_profile_spec,block"`
	// DataQualitySpec: optional
	DataQualitySpec *DataQualitySpec `hcl:"data_quality_spec,block"`
	// ExecutionSpec: required
	ExecutionSpec *ExecutionSpec `hcl:"execution_spec,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDataplexDatascanAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gdd.ref.Append("create_time"))
}

// DataScanId returns a reference to field data_scan_id of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) DataScanId() terra.StringValue {
	return terra.ReferenceAsString(gdd.ref.Append("data_scan_id"))
}

// Description returns a reference to field description of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdd.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdd.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdd.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdd.ref.Append("id"))
}

// Labels returns a reference to field labels of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdd.ref.Append("labels"))
}

// Location returns a reference to field location of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gdd.ref.Append("location"))
}

// Name returns a reference to field name of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdd.ref.Append("name"))
}

// Project returns a reference to field project of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdd.ref.Append("project"))
}

// State returns a reference to field state of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gdd.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdd.ref.Append("terraform_labels"))
}

// Type returns a reference to field type of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gdd.ref.Append("type"))
}

// Uid returns a reference to field uid of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gdd.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_dataplex_datascan.
func (gdd googleDataplexDatascanAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gdd.ref.Append("update_time"))
}

func (gdd googleDataplexDatascanAttributes) ExecutionStatus() terra.ListValue[ExecutionStatusAttributes] {
	return terra.ReferenceAsList[ExecutionStatusAttributes](gdd.ref.Append("execution_status"))
}

func (gdd googleDataplexDatascanAttributes) Data() terra.ListValue[DataAttributes] {
	return terra.ReferenceAsList[DataAttributes](gdd.ref.Append("data"))
}

func (gdd googleDataplexDatascanAttributes) DataProfileSpec() terra.ListValue[DataProfileSpecAttributes] {
	return terra.ReferenceAsList[DataProfileSpecAttributes](gdd.ref.Append("data_profile_spec"))
}

func (gdd googleDataplexDatascanAttributes) DataQualitySpec() terra.ListValue[DataQualitySpecAttributes] {
	return terra.ReferenceAsList[DataQualitySpecAttributes](gdd.ref.Append("data_quality_spec"))
}

func (gdd googleDataplexDatascanAttributes) ExecutionSpec() terra.ListValue[ExecutionSpecAttributes] {
	return terra.ReferenceAsList[ExecutionSpecAttributes](gdd.ref.Append("execution_spec"))
}

func (gdd googleDataplexDatascanAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdd.ref.Append("timeouts"))
}

type googleDataplexDatascanState struct {
	CreateTime      string                 `json:"create_time"`
	DataScanId      string                 `json:"data_scan_id"`
	Description     string                 `json:"description"`
	DisplayName     string                 `json:"display_name"`
	EffectiveLabels map[string]string      `json:"effective_labels"`
	Id              string                 `json:"id"`
	Labels          map[string]string      `json:"labels"`
	Location        string                 `json:"location"`
	Name            string                 `json:"name"`
	Project         string                 `json:"project"`
	State           string                 `json:"state"`
	TerraformLabels map[string]string      `json:"terraform_labels"`
	Type            string                 `json:"type"`
	Uid             string                 `json:"uid"`
	UpdateTime      string                 `json:"update_time"`
	ExecutionStatus []ExecutionStatusState `json:"execution_status"`
	Data            []DataState            `json:"data"`
	DataProfileSpec []DataProfileSpecState `json:"data_profile_spec"`
	DataQualitySpec []DataQualitySpecState `json:"data_quality_spec"`
	ExecutionSpec   []ExecutionSpecState   `json:"execution_spec"`
	Timeouts        *TimeoutsState         `json:"timeouts"`
}
