// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dns_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dns_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDnsPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdp *Resource) Type() string {
	return "google_dns_policy"
}

// LocalName returns the local name for [Resource].
func (gdp *Resource) LocalName() string {
	return gdp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdp *Resource) Configuration() interface{} {
	return gdp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdp *Resource) Dependencies() terra.Dependencies {
	return gdp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdp *Resource) Attributes() googleDnsPolicyAttributes {
	return googleDnsPolicyAttributes{ref: terra.ReferenceResource(gdp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdp *Resource) ImportState(state io.Reader) error {
	gdp.state = &googleDnsPolicyState{}
	if err := json.NewDecoder(state).Decode(gdp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdp.Type(), gdp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdp *Resource) State() (*googleDnsPolicyState, bool) {
	return gdp.state, gdp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdp *Resource) StateMust() *googleDnsPolicyState {
	if gdp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdp.Type(), gdp.LocalName()))
	}
	return gdp.state
}

// Args contains the configurations for google_dns_policy.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnableInboundForwarding: bool, optional
	EnableInboundForwarding terra.BoolValue `hcl:"enable_inbound_forwarding,attr"`
	// EnableLogging: bool, optional
	EnableLogging terra.BoolValue `hcl:"enable_logging,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// AlternativeNameServerConfig: optional
	AlternativeNameServerConfig *AlternativeNameServerConfig `hcl:"alternative_name_server_config,block"`
	// Networks: min=0
	Networks []Networks `hcl:"networks,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDnsPolicyAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_dns_policy.
func (gdp googleDnsPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdp.ref.Append("description"))
}

// EnableInboundForwarding returns a reference to field enable_inbound_forwarding of google_dns_policy.
func (gdp googleDnsPolicyAttributes) EnableInboundForwarding() terra.BoolValue {
	return terra.ReferenceAsBool(gdp.ref.Append("enable_inbound_forwarding"))
}

// EnableLogging returns a reference to field enable_logging of google_dns_policy.
func (gdp googleDnsPolicyAttributes) EnableLogging() terra.BoolValue {
	return terra.ReferenceAsBool(gdp.ref.Append("enable_logging"))
}

// Id returns a reference to field id of google_dns_policy.
func (gdp googleDnsPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdp.ref.Append("id"))
}

// Name returns a reference to field name of google_dns_policy.
func (gdp googleDnsPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdp.ref.Append("name"))
}

// Project returns a reference to field project of google_dns_policy.
func (gdp googleDnsPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdp.ref.Append("project"))
}

func (gdp googleDnsPolicyAttributes) AlternativeNameServerConfig() terra.ListValue[AlternativeNameServerConfigAttributes] {
	return terra.ReferenceAsList[AlternativeNameServerConfigAttributes](gdp.ref.Append("alternative_name_server_config"))
}

func (gdp googleDnsPolicyAttributes) Networks() terra.SetValue[NetworksAttributes] {
	return terra.ReferenceAsSet[NetworksAttributes](gdp.ref.Append("networks"))
}

func (gdp googleDnsPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdp.ref.Append("timeouts"))
}

type googleDnsPolicyState struct {
	Description                 string                             `json:"description"`
	EnableInboundForwarding     bool                               `json:"enable_inbound_forwarding"`
	EnableLogging               bool                               `json:"enable_logging"`
	Id                          string                             `json:"id"`
	Name                        string                             `json:"name"`
	Project                     string                             `json:"project"`
	AlternativeNameServerConfig []AlternativeNameServerConfigState `json:"alternative_name_server_config"`
	Networks                    []NetworksState                    `json:"networks"`
	Timeouts                    *TimeoutsState                     `json:"timeouts"`
}
