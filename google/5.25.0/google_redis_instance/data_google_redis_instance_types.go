// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_redis_instance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataMaintenancePolicyAttributes struct {
	ref terra.Reference
}

func (mp DataMaintenancePolicyAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp DataMaintenancePolicyAttributes) InternalWithRef(ref terra.Reference) DataMaintenancePolicyAttributes {
	return DataMaintenancePolicyAttributes{ref: ref}
}

func (mp DataMaintenancePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp DataMaintenancePolicyAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("create_time"))
}

func (mp DataMaintenancePolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("description"))
}

func (mp DataMaintenancePolicyAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("update_time"))
}

func (mp DataMaintenancePolicyAttributes) WeeklyMaintenanceWindow() terra.ListValue[DataMaintenancePolicyWeeklyMaintenanceWindowAttributes] {
	return terra.ReferenceAsList[DataMaintenancePolicyWeeklyMaintenanceWindowAttributes](mp.ref.Append("weekly_maintenance_window"))
}

type DataMaintenancePolicyWeeklyMaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (wmw DataMaintenancePolicyWeeklyMaintenanceWindowAttributes) InternalRef() (terra.Reference, error) {
	return wmw.ref, nil
}

func (wmw DataMaintenancePolicyWeeklyMaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) DataMaintenancePolicyWeeklyMaintenanceWindowAttributes {
	return DataMaintenancePolicyWeeklyMaintenanceWindowAttributes{ref: ref}
}

func (wmw DataMaintenancePolicyWeeklyMaintenanceWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wmw.ref.InternalTokens()
}

func (wmw DataMaintenancePolicyWeeklyMaintenanceWindowAttributes) Day() terra.StringValue {
	return terra.ReferenceAsString(wmw.ref.Append("day"))
}

func (wmw DataMaintenancePolicyWeeklyMaintenanceWindowAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(wmw.ref.Append("duration"))
}

func (wmw DataMaintenancePolicyWeeklyMaintenanceWindowAttributes) StartTime() terra.ListValue[DataMaintenancePolicyWeeklyMaintenanceWindowStartTimeAttributes] {
	return terra.ReferenceAsList[DataMaintenancePolicyWeeklyMaintenanceWindowStartTimeAttributes](wmw.ref.Append("start_time"))
}

type DataMaintenancePolicyWeeklyMaintenanceWindowStartTimeAttributes struct {
	ref terra.Reference
}

func (st DataMaintenancePolicyWeeklyMaintenanceWindowStartTimeAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st DataMaintenancePolicyWeeklyMaintenanceWindowStartTimeAttributes) InternalWithRef(ref terra.Reference) DataMaintenancePolicyWeeklyMaintenanceWindowStartTimeAttributes {
	return DataMaintenancePolicyWeeklyMaintenanceWindowStartTimeAttributes{ref: ref}
}

func (st DataMaintenancePolicyWeeklyMaintenanceWindowStartTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st DataMaintenancePolicyWeeklyMaintenanceWindowStartTimeAttributes) Hours() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("hours"))
}

func (st DataMaintenancePolicyWeeklyMaintenanceWindowStartTimeAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("minutes"))
}

func (st DataMaintenancePolicyWeeklyMaintenanceWindowStartTimeAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("nanos"))
}

func (st DataMaintenancePolicyWeeklyMaintenanceWindowStartTimeAttributes) Seconds() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("seconds"))
}

type DataMaintenanceScheduleAttributes struct {
	ref terra.Reference
}

func (ms DataMaintenanceScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms DataMaintenanceScheduleAttributes) InternalWithRef(ref terra.Reference) DataMaintenanceScheduleAttributes {
	return DataMaintenanceScheduleAttributes{ref: ref}
}

func (ms DataMaintenanceScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms DataMaintenanceScheduleAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("end_time"))
}

func (ms DataMaintenanceScheduleAttributes) ScheduleDeadlineTime() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("schedule_deadline_time"))
}

func (ms DataMaintenanceScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("start_time"))
}

type DataNodesAttributes struct {
	ref terra.Reference
}

func (n DataNodesAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n DataNodesAttributes) InternalWithRef(ref terra.Reference) DataNodesAttributes {
	return DataNodesAttributes{ref: ref}
}

func (n DataNodesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n DataNodesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("id"))
}

func (n DataNodesAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("zone"))
}

type DataPersistenceConfigAttributes struct {
	ref terra.Reference
}

func (pc DataPersistenceConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc DataPersistenceConfigAttributes) InternalWithRef(ref terra.Reference) DataPersistenceConfigAttributes {
	return DataPersistenceConfigAttributes{ref: ref}
}

func (pc DataPersistenceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc DataPersistenceConfigAttributes) PersistenceMode() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("persistence_mode"))
}

func (pc DataPersistenceConfigAttributes) RdbNextSnapshotTime() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("rdb_next_snapshot_time"))
}

func (pc DataPersistenceConfigAttributes) RdbSnapshotPeriod() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("rdb_snapshot_period"))
}

func (pc DataPersistenceConfigAttributes) RdbSnapshotStartTime() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("rdb_snapshot_start_time"))
}

type DataServerCaCertsAttributes struct {
	ref terra.Reference
}

func (scc DataServerCaCertsAttributes) InternalRef() (terra.Reference, error) {
	return scc.ref, nil
}

func (scc DataServerCaCertsAttributes) InternalWithRef(ref terra.Reference) DataServerCaCertsAttributes {
	return DataServerCaCertsAttributes{ref: ref}
}

func (scc DataServerCaCertsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return scc.ref.InternalTokens()
}

func (scc DataServerCaCertsAttributes) Cert() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("cert"))
}

func (scc DataServerCaCertsAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("create_time"))
}

func (scc DataServerCaCertsAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("expire_time"))
}

func (scc DataServerCaCertsAttributes) SerialNumber() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("serial_number"))
}

func (scc DataServerCaCertsAttributes) Sha1Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("sha1_fingerprint"))
}

type DataMaintenancePolicyState struct {
	CreateTime              string                                              `json:"create_time"`
	Description             string                                              `json:"description"`
	UpdateTime              string                                              `json:"update_time"`
	WeeklyMaintenanceWindow []DataMaintenancePolicyWeeklyMaintenanceWindowState `json:"weekly_maintenance_window"`
}

type DataMaintenancePolicyWeeklyMaintenanceWindowState struct {
	Day       string                                                       `json:"day"`
	Duration  string                                                       `json:"duration"`
	StartTime []DataMaintenancePolicyWeeklyMaintenanceWindowStartTimeState `json:"start_time"`
}

type DataMaintenancePolicyWeeklyMaintenanceWindowStartTimeState struct {
	Hours   float64 `json:"hours"`
	Minutes float64 `json:"minutes"`
	Nanos   float64 `json:"nanos"`
	Seconds float64 `json:"seconds"`
}

type DataMaintenanceScheduleState struct {
	EndTime              string `json:"end_time"`
	ScheduleDeadlineTime string `json:"schedule_deadline_time"`
	StartTime            string `json:"start_time"`
}

type DataNodesState struct {
	Id   string `json:"id"`
	Zone string `json:"zone"`
}

type DataPersistenceConfigState struct {
	PersistenceMode      string `json:"persistence_mode"`
	RdbNextSnapshotTime  string `json:"rdb_next_snapshot_time"`
	RdbSnapshotPeriod    string `json:"rdb_snapshot_period"`
	RdbSnapshotStartTime string `json:"rdb_snapshot_start_time"`
}

type DataServerCaCertsState struct {
	Cert            string `json:"cert"`
	CreateTime      string `json:"create_time"`
	ExpireTime      string `json:"expire_time"`
	SerialNumber    string `json:"serial_number"`
	Sha1Fingerprint string `json:"sha1_fingerprint"`
}
