// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_certificate_manager_trust_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_certificate_manager_trust_config.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCertificateManagerTrustConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcmtc *Resource) Type() string {
	return "google_certificate_manager_trust_config"
}

// LocalName returns the local name for [Resource].
func (gcmtc *Resource) LocalName() string {
	return gcmtc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcmtc *Resource) Configuration() interface{} {
	return gcmtc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcmtc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcmtc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcmtc *Resource) Dependencies() terra.Dependencies {
	return gcmtc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcmtc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcmtc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcmtc *Resource) Attributes() googleCertificateManagerTrustConfigAttributes {
	return googleCertificateManagerTrustConfigAttributes{ref: terra.ReferenceResource(gcmtc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcmtc *Resource) ImportState(state io.Reader) error {
	gcmtc.state = &googleCertificateManagerTrustConfigState{}
	if err := json.NewDecoder(state).Decode(gcmtc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcmtc.Type(), gcmtc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcmtc *Resource) State() (*googleCertificateManagerTrustConfigState, bool) {
	return gcmtc.state, gcmtc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcmtc *Resource) StateMust() *googleCertificateManagerTrustConfigState {
	if gcmtc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcmtc.Type(), gcmtc.LocalName()))
	}
	return gcmtc.state
}

// Args contains the configurations for google_certificate_manager_trust_config.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// TrustStores: min=0
	TrustStores []TrustStores `hcl:"trust_stores,block" validate:"min=0"`
}

type googleCertificateManagerTrustConfigAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_certificate_manager_trust_config.
func (gcmtc googleCertificateManagerTrustConfigAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcmtc.ref.Append("create_time"))
}

// Description returns a reference to field description of google_certificate_manager_trust_config.
func (gcmtc googleCertificateManagerTrustConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcmtc.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_certificate_manager_trust_config.
func (gcmtc googleCertificateManagerTrustConfigAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcmtc.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_certificate_manager_trust_config.
func (gcmtc googleCertificateManagerTrustConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcmtc.ref.Append("id"))
}

// Labels returns a reference to field labels of google_certificate_manager_trust_config.
func (gcmtc googleCertificateManagerTrustConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcmtc.ref.Append("labels"))
}

// Location returns a reference to field location of google_certificate_manager_trust_config.
func (gcmtc googleCertificateManagerTrustConfigAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcmtc.ref.Append("location"))
}

// Name returns a reference to field name of google_certificate_manager_trust_config.
func (gcmtc googleCertificateManagerTrustConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcmtc.ref.Append("name"))
}

// Project returns a reference to field project of google_certificate_manager_trust_config.
func (gcmtc googleCertificateManagerTrustConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcmtc.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_certificate_manager_trust_config.
func (gcmtc googleCertificateManagerTrustConfigAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcmtc.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_certificate_manager_trust_config.
func (gcmtc googleCertificateManagerTrustConfigAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gcmtc.ref.Append("update_time"))
}

func (gcmtc googleCertificateManagerTrustConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcmtc.ref.Append("timeouts"))
}

func (gcmtc googleCertificateManagerTrustConfigAttributes) TrustStores() terra.ListValue[TrustStoresAttributes] {
	return terra.ReferenceAsList[TrustStoresAttributes](gcmtc.ref.Append("trust_stores"))
}

type googleCertificateManagerTrustConfigState struct {
	CreateTime      string             `json:"create_time"`
	Description     string             `json:"description"`
	EffectiveLabels map[string]string  `json:"effective_labels"`
	Id              string             `json:"id"`
	Labels          map[string]string  `json:"labels"`
	Location        string             `json:"location"`
	Name            string             `json:"name"`
	Project         string             `json:"project"`
	TerraformLabels map[string]string  `json:"terraform_labels"`
	UpdateTime      string             `json:"update_time"`
	Timeouts        *TimeoutsState     `json:"timeouts"`
	TrustStores     []TrustStoresState `json:"trust_stores"`
}
