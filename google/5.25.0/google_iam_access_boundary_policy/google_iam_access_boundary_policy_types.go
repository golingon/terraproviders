// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_iam_access_boundary_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rules struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// RulesAccessBoundaryRule: optional
	AccessBoundaryRule *RulesAccessBoundaryRule `hcl:"access_boundary_rule,block"`
}

type RulesAccessBoundaryRule struct {
	// AvailablePermissions: list of string, optional
	AvailablePermissions terra.ListValue[terra.StringValue] `hcl:"available_permissions,attr"`
	// AvailableResource: string, optional
	AvailableResource terra.StringValue `hcl:"available_resource,attr"`
	// RulesAccessBoundaryRuleAvailabilityCondition: optional
	AvailabilityCondition *RulesAccessBoundaryRuleAvailabilityCondition `hcl:"availability_condition,block"`
}

type RulesAccessBoundaryRuleAvailabilityCondition struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Expression: string, required
	Expression terra.StringValue `hcl:"expression,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Title: string, optional
	Title terra.StringValue `hcl:"title,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RulesAttributes struct {
	ref terra.Reference
}

func (r RulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RulesAttributes) InternalWithRef(ref terra.Reference) RulesAttributes {
	return RulesAttributes{ref: ref}
}

func (r RulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RulesAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("description"))
}

func (r RulesAttributes) AccessBoundaryRule() terra.ListValue[RulesAccessBoundaryRuleAttributes] {
	return terra.ReferenceAsList[RulesAccessBoundaryRuleAttributes](r.ref.Append("access_boundary_rule"))
}

type RulesAccessBoundaryRuleAttributes struct {
	ref terra.Reference
}

func (abr RulesAccessBoundaryRuleAttributes) InternalRef() (terra.Reference, error) {
	return abr.ref, nil
}

func (abr RulesAccessBoundaryRuleAttributes) InternalWithRef(ref terra.Reference) RulesAccessBoundaryRuleAttributes {
	return RulesAccessBoundaryRuleAttributes{ref: ref}
}

func (abr RulesAccessBoundaryRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return abr.ref.InternalTokens()
}

func (abr RulesAccessBoundaryRuleAttributes) AvailablePermissions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](abr.ref.Append("available_permissions"))
}

func (abr RulesAccessBoundaryRuleAttributes) AvailableResource() terra.StringValue {
	return terra.ReferenceAsString(abr.ref.Append("available_resource"))
}

func (abr RulesAccessBoundaryRuleAttributes) AvailabilityCondition() terra.ListValue[RulesAccessBoundaryRuleAvailabilityConditionAttributes] {
	return terra.ReferenceAsList[RulesAccessBoundaryRuleAvailabilityConditionAttributes](abr.ref.Append("availability_condition"))
}

type RulesAccessBoundaryRuleAvailabilityConditionAttributes struct {
	ref terra.Reference
}

func (ac RulesAccessBoundaryRuleAvailabilityConditionAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac RulesAccessBoundaryRuleAvailabilityConditionAttributes) InternalWithRef(ref terra.Reference) RulesAccessBoundaryRuleAvailabilityConditionAttributes {
	return RulesAccessBoundaryRuleAvailabilityConditionAttributes{ref: ref}
}

func (ac RulesAccessBoundaryRuleAvailabilityConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac RulesAccessBoundaryRuleAvailabilityConditionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("description"))
}

func (ac RulesAccessBoundaryRuleAvailabilityConditionAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("expression"))
}

func (ac RulesAccessBoundaryRuleAvailabilityConditionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("location"))
}

func (ac RulesAccessBoundaryRuleAvailabilityConditionAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("title"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RulesState struct {
	Description        string                         `json:"description"`
	AccessBoundaryRule []RulesAccessBoundaryRuleState `json:"access_boundary_rule"`
}

type RulesAccessBoundaryRuleState struct {
	AvailablePermissions  []string                                            `json:"available_permissions"`
	AvailableResource     string                                              `json:"available_resource"`
	AvailabilityCondition []RulesAccessBoundaryRuleAvailabilityConditionState `json:"availability_condition"`
}

type RulesAccessBoundaryRuleAvailabilityConditionState struct {
	Description string `json:"description"`
	Expression  string `json:"expression"`
	Location    string `json:"location"`
	Title       string `json:"title"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
