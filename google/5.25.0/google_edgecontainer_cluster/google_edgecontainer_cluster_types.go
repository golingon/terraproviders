// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_edgecontainer_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Authorization struct {
	// AuthorizationAdminUsers: required
	AdminUsers *AuthorizationAdminUsers `hcl:"admin_users,block" validate:"required"`
}

type AuthorizationAdminUsers struct {
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type ControlPlane struct {
	// ControlPlaneLocal: optional
	Local *ControlPlaneLocal `hcl:"local,block"`
	// ControlPlaneRemote: optional
	Remote *ControlPlaneRemote `hcl:"remote,block"`
}

type ControlPlaneLocal struct {
	// MachineFilter: string, optional
	MachineFilter terra.StringValue `hcl:"machine_filter,attr"`
	// NodeCount: number, optional
	NodeCount terra.NumberValue `hcl:"node_count,attr"`
	// NodeLocation: string, optional
	NodeLocation terra.StringValue `hcl:"node_location,attr"`
	// SharedDeploymentPolicy: string, optional
	SharedDeploymentPolicy terra.StringValue `hcl:"shared_deployment_policy,attr"`
}

type ControlPlaneRemote struct {
	// NodeLocation: string, optional
	NodeLocation terra.StringValue `hcl:"node_location,attr"`
}

type ControlPlaneEncryption struct {
	// KmsKey: string, optional
	KmsKey terra.StringValue `hcl:"kms_key,attr"`
}

type Fleet struct {
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
}

type MaintenancePolicy struct {
	// MaintenancePolicyWindow: required
	Window *MaintenancePolicyWindow `hcl:"window,block" validate:"required"`
}

type MaintenancePolicyWindow struct {
	// MaintenancePolicyWindowRecurringWindow: required
	RecurringWindow *MaintenancePolicyWindowRecurringWindow `hcl:"recurring_window,block" validate:"required"`
}

type MaintenancePolicyWindowRecurringWindow struct {
	// Recurrence: string, optional
	Recurrence terra.StringValue `hcl:"recurrence,attr"`
	// MaintenancePolicyWindowRecurringWindowWindow: optional
	Window *MaintenancePolicyWindowRecurringWindowWindow `hcl:"window,block"`
}

type MaintenancePolicyWindowRecurringWindowWindow struct {
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
}

type Networking struct {
	// ClusterIpv4CidrBlocks: list of string, required
	ClusterIpv4CidrBlocks terra.ListValue[terra.StringValue] `hcl:"cluster_ipv4_cidr_blocks,attr" validate:"required"`
	// ClusterIpv6CidrBlocks: list of string, optional
	ClusterIpv6CidrBlocks terra.ListValue[terra.StringValue] `hcl:"cluster_ipv6_cidr_blocks,attr"`
	// ServicesIpv4CidrBlocks: list of string, required
	ServicesIpv4CidrBlocks terra.ListValue[terra.StringValue] `hcl:"services_ipv4_cidr_blocks,attr" validate:"required"`
	// ServicesIpv6CidrBlocks: list of string, optional
	ServicesIpv6CidrBlocks terra.ListValue[terra.StringValue] `hcl:"services_ipv6_cidr_blocks,attr"`
}

type SystemAddonsConfig struct {
	// SystemAddonsConfigIngress: optional
	Ingress *SystemAddonsConfigIngress `hcl:"ingress,block"`
}

type SystemAddonsConfigIngress struct {
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// Ipv4Vip: string, optional
	Ipv4Vip terra.StringValue `hcl:"ipv4_vip,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type MaintenanceEventsAttributes struct {
	ref terra.Reference
}

func (me MaintenanceEventsAttributes) InternalRef() (terra.Reference, error) {
	return me.ref, nil
}

func (me MaintenanceEventsAttributes) InternalWithRef(ref terra.Reference) MaintenanceEventsAttributes {
	return MaintenanceEventsAttributes{ref: ref}
}

func (me MaintenanceEventsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return me.ref.InternalTokens()
}

func (me MaintenanceEventsAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("create_time"))
}

func (me MaintenanceEventsAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("end_time"))
}

func (me MaintenanceEventsAttributes) Operation() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("operation"))
}

func (me MaintenanceEventsAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("schedule"))
}

func (me MaintenanceEventsAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("start_time"))
}

func (me MaintenanceEventsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("state"))
}

func (me MaintenanceEventsAttributes) TargetVersion() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("target_version"))
}

func (me MaintenanceEventsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("type"))
}

func (me MaintenanceEventsAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("update_time"))
}

func (me MaintenanceEventsAttributes) Uuid() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("uuid"))
}

type AuthorizationAttributes struct {
	ref terra.Reference
}

func (a AuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthorizationAttributes) InternalWithRef(ref terra.Reference) AuthorizationAttributes {
	return AuthorizationAttributes{ref: ref}
}

func (a AuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthorizationAttributes) AdminUsers() terra.ListValue[AuthorizationAdminUsersAttributes] {
	return terra.ReferenceAsList[AuthorizationAdminUsersAttributes](a.ref.Append("admin_users"))
}

type AuthorizationAdminUsersAttributes struct {
	ref terra.Reference
}

func (au AuthorizationAdminUsersAttributes) InternalRef() (terra.Reference, error) {
	return au.ref, nil
}

func (au AuthorizationAdminUsersAttributes) InternalWithRef(ref terra.Reference) AuthorizationAdminUsersAttributes {
	return AuthorizationAdminUsersAttributes{ref: ref}
}

func (au AuthorizationAdminUsersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return au.ref.InternalTokens()
}

func (au AuthorizationAdminUsersAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("username"))
}

type ControlPlaneAttributes struct {
	ref terra.Reference
}

func (cp ControlPlaneAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp ControlPlaneAttributes) InternalWithRef(ref terra.Reference) ControlPlaneAttributes {
	return ControlPlaneAttributes{ref: ref}
}

func (cp ControlPlaneAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp ControlPlaneAttributes) Local() terra.ListValue[ControlPlaneLocalAttributes] {
	return terra.ReferenceAsList[ControlPlaneLocalAttributes](cp.ref.Append("local"))
}

func (cp ControlPlaneAttributes) Remote() terra.ListValue[ControlPlaneRemoteAttributes] {
	return terra.ReferenceAsList[ControlPlaneRemoteAttributes](cp.ref.Append("remote"))
}

type ControlPlaneLocalAttributes struct {
	ref terra.Reference
}

func (l ControlPlaneLocalAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l ControlPlaneLocalAttributes) InternalWithRef(ref terra.Reference) ControlPlaneLocalAttributes {
	return ControlPlaneLocalAttributes{ref: ref}
}

func (l ControlPlaneLocalAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l ControlPlaneLocalAttributes) MachineFilter() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("machine_filter"))
}

func (l ControlPlaneLocalAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("node_count"))
}

func (l ControlPlaneLocalAttributes) NodeLocation() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("node_location"))
}

func (l ControlPlaneLocalAttributes) SharedDeploymentPolicy() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("shared_deployment_policy"))
}

type ControlPlaneRemoteAttributes struct {
	ref terra.Reference
}

func (r ControlPlaneRemoteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ControlPlaneRemoteAttributes) InternalWithRef(ref terra.Reference) ControlPlaneRemoteAttributes {
	return ControlPlaneRemoteAttributes{ref: ref}
}

func (r ControlPlaneRemoteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ControlPlaneRemoteAttributes) NodeLocation() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("node_location"))
}

type ControlPlaneEncryptionAttributes struct {
	ref terra.Reference
}

func (cpe ControlPlaneEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return cpe.ref, nil
}

func (cpe ControlPlaneEncryptionAttributes) InternalWithRef(ref terra.Reference) ControlPlaneEncryptionAttributes {
	return ControlPlaneEncryptionAttributes{ref: ref}
}

func (cpe ControlPlaneEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpe.ref.InternalTokens()
}

func (cpe ControlPlaneEncryptionAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(cpe.ref.Append("kms_key"))
}

func (cpe ControlPlaneEncryptionAttributes) KmsKeyActiveVersion() terra.StringValue {
	return terra.ReferenceAsString(cpe.ref.Append("kms_key_active_version"))
}

func (cpe ControlPlaneEncryptionAttributes) KmsKeyState() terra.StringValue {
	return terra.ReferenceAsString(cpe.ref.Append("kms_key_state"))
}

func (cpe ControlPlaneEncryptionAttributes) KmsStatus() terra.ListValue[ControlPlaneEncryptionKmsStatusAttributes] {
	return terra.ReferenceAsList[ControlPlaneEncryptionKmsStatusAttributes](cpe.ref.Append("kms_status"))
}

type ControlPlaneEncryptionKmsStatusAttributes struct {
	ref terra.Reference
}

func (ks ControlPlaneEncryptionKmsStatusAttributes) InternalRef() (terra.Reference, error) {
	return ks.ref, nil
}

func (ks ControlPlaneEncryptionKmsStatusAttributes) InternalWithRef(ref terra.Reference) ControlPlaneEncryptionKmsStatusAttributes {
	return ControlPlaneEncryptionKmsStatusAttributes{ref: ref}
}

func (ks ControlPlaneEncryptionKmsStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ks.ref.InternalTokens()
}

func (ks ControlPlaneEncryptionKmsStatusAttributes) Code() terra.NumberValue {
	return terra.ReferenceAsNumber(ks.ref.Append("code"))
}

func (ks ControlPlaneEncryptionKmsStatusAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("message"))
}

type FleetAttributes struct {
	ref terra.Reference
}

func (f FleetAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FleetAttributes) InternalWithRef(ref terra.Reference) FleetAttributes {
	return FleetAttributes{ref: ref}
}

func (f FleetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FleetAttributes) Membership() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("membership"))
}

func (f FleetAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("project"))
}

type MaintenancePolicyAttributes struct {
	ref terra.Reference
}

func (mp MaintenancePolicyAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp MaintenancePolicyAttributes) InternalWithRef(ref terra.Reference) MaintenancePolicyAttributes {
	return MaintenancePolicyAttributes{ref: ref}
}

func (mp MaintenancePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp MaintenancePolicyAttributes) Window() terra.ListValue[MaintenancePolicyWindowAttributes] {
	return terra.ReferenceAsList[MaintenancePolicyWindowAttributes](mp.ref.Append("window"))
}

type MaintenancePolicyWindowAttributes struct {
	ref terra.Reference
}

func (w MaintenancePolicyWindowAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w MaintenancePolicyWindowAttributes) InternalWithRef(ref terra.Reference) MaintenancePolicyWindowAttributes {
	return MaintenancePolicyWindowAttributes{ref: ref}
}

func (w MaintenancePolicyWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w MaintenancePolicyWindowAttributes) RecurringWindow() terra.ListValue[MaintenancePolicyWindowRecurringWindowAttributes] {
	return terra.ReferenceAsList[MaintenancePolicyWindowRecurringWindowAttributes](w.ref.Append("recurring_window"))
}

type MaintenancePolicyWindowRecurringWindowAttributes struct {
	ref terra.Reference
}

func (rw MaintenancePolicyWindowRecurringWindowAttributes) InternalRef() (terra.Reference, error) {
	return rw.ref, nil
}

func (rw MaintenancePolicyWindowRecurringWindowAttributes) InternalWithRef(ref terra.Reference) MaintenancePolicyWindowRecurringWindowAttributes {
	return MaintenancePolicyWindowRecurringWindowAttributes{ref: ref}
}

func (rw MaintenancePolicyWindowRecurringWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rw.ref.InternalTokens()
}

func (rw MaintenancePolicyWindowRecurringWindowAttributes) Recurrence() terra.StringValue {
	return terra.ReferenceAsString(rw.ref.Append("recurrence"))
}

func (rw MaintenancePolicyWindowRecurringWindowAttributes) Window() terra.ListValue[MaintenancePolicyWindowRecurringWindowWindowAttributes] {
	return terra.ReferenceAsList[MaintenancePolicyWindowRecurringWindowWindowAttributes](rw.ref.Append("window"))
}

type MaintenancePolicyWindowRecurringWindowWindowAttributes struct {
	ref terra.Reference
}

func (w MaintenancePolicyWindowRecurringWindowWindowAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w MaintenancePolicyWindowRecurringWindowWindowAttributes) InternalWithRef(ref terra.Reference) MaintenancePolicyWindowRecurringWindowWindowAttributes {
	return MaintenancePolicyWindowRecurringWindowWindowAttributes{ref: ref}
}

func (w MaintenancePolicyWindowRecurringWindowWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w MaintenancePolicyWindowRecurringWindowWindowAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("end_time"))
}

func (w MaintenancePolicyWindowRecurringWindowWindowAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("start_time"))
}

type NetworkingAttributes struct {
	ref terra.Reference
}

func (n NetworkingAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NetworkingAttributes) InternalWithRef(ref terra.Reference) NetworkingAttributes {
	return NetworkingAttributes{ref: ref}
}

func (n NetworkingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NetworkingAttributes) ClusterIpv4CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("cluster_ipv4_cidr_blocks"))
}

func (n NetworkingAttributes) ClusterIpv6CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("cluster_ipv6_cidr_blocks"))
}

func (n NetworkingAttributes) NetworkType() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("network_type"))
}

func (n NetworkingAttributes) ServicesIpv4CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("services_ipv4_cidr_blocks"))
}

func (n NetworkingAttributes) ServicesIpv6CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](n.ref.Append("services_ipv6_cidr_blocks"))
}

type SystemAddonsConfigAttributes struct {
	ref terra.Reference
}

func (sac SystemAddonsConfigAttributes) InternalRef() (terra.Reference, error) {
	return sac.ref, nil
}

func (sac SystemAddonsConfigAttributes) InternalWithRef(ref terra.Reference) SystemAddonsConfigAttributes {
	return SystemAddonsConfigAttributes{ref: ref}
}

func (sac SystemAddonsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sac.ref.InternalTokens()
}

func (sac SystemAddonsConfigAttributes) Ingress() terra.ListValue[SystemAddonsConfigIngressAttributes] {
	return terra.ReferenceAsList[SystemAddonsConfigIngressAttributes](sac.ref.Append("ingress"))
}

type SystemAddonsConfigIngressAttributes struct {
	ref terra.Reference
}

func (i SystemAddonsConfigIngressAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i SystemAddonsConfigIngressAttributes) InternalWithRef(ref terra.Reference) SystemAddonsConfigIngressAttributes {
	return SystemAddonsConfigIngressAttributes{ref: ref}
}

func (i SystemAddonsConfigIngressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i SystemAddonsConfigIngressAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(i.ref.Append("disabled"))
}

func (i SystemAddonsConfigIngressAttributes) Ipv4Vip() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("ipv4_vip"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type MaintenanceEventsState struct {
	CreateTime    string `json:"create_time"`
	EndTime       string `json:"end_time"`
	Operation     string `json:"operation"`
	Schedule      string `json:"schedule"`
	StartTime     string `json:"start_time"`
	State         string `json:"state"`
	TargetVersion string `json:"target_version"`
	Type          string `json:"type"`
	UpdateTime    string `json:"update_time"`
	Uuid          string `json:"uuid"`
}

type AuthorizationState struct {
	AdminUsers []AuthorizationAdminUsersState `json:"admin_users"`
}

type AuthorizationAdminUsersState struct {
	Username string `json:"username"`
}

type ControlPlaneState struct {
	Local  []ControlPlaneLocalState  `json:"local"`
	Remote []ControlPlaneRemoteState `json:"remote"`
}

type ControlPlaneLocalState struct {
	MachineFilter          string  `json:"machine_filter"`
	NodeCount              float64 `json:"node_count"`
	NodeLocation           string  `json:"node_location"`
	SharedDeploymentPolicy string  `json:"shared_deployment_policy"`
}

type ControlPlaneRemoteState struct {
	NodeLocation string `json:"node_location"`
}

type ControlPlaneEncryptionState struct {
	KmsKey              string                                 `json:"kms_key"`
	KmsKeyActiveVersion string                                 `json:"kms_key_active_version"`
	KmsKeyState         string                                 `json:"kms_key_state"`
	KmsStatus           []ControlPlaneEncryptionKmsStatusState `json:"kms_status"`
}

type ControlPlaneEncryptionKmsStatusState struct {
	Code    float64 `json:"code"`
	Message string  `json:"message"`
}

type FleetState struct {
	Membership string `json:"membership"`
	Project    string `json:"project"`
}

type MaintenancePolicyState struct {
	Window []MaintenancePolicyWindowState `json:"window"`
}

type MaintenancePolicyWindowState struct {
	RecurringWindow []MaintenancePolicyWindowRecurringWindowState `json:"recurring_window"`
}

type MaintenancePolicyWindowRecurringWindowState struct {
	Recurrence string                                              `json:"recurrence"`
	Window     []MaintenancePolicyWindowRecurringWindowWindowState `json:"window"`
}

type MaintenancePolicyWindowRecurringWindowWindowState struct {
	EndTime   string `json:"end_time"`
	StartTime string `json:"start_time"`
}

type NetworkingState struct {
	ClusterIpv4CidrBlocks  []string `json:"cluster_ipv4_cidr_blocks"`
	ClusterIpv6CidrBlocks  []string `json:"cluster_ipv6_cidr_blocks"`
	NetworkType            string   `json:"network_type"`
	ServicesIpv4CidrBlocks []string `json:"services_ipv4_cidr_blocks"`
	ServicesIpv6CidrBlocks []string `json:"services_ipv6_cidr_blocks"`
}

type SystemAddonsConfigState struct {
	Ingress []SystemAddonsConfigIngressState `json:"ingress"`
}

type SystemAddonsConfigIngressState struct {
	Disabled bool   `json:"disabled"`
	Ipv4Vip  string `json:"ipv4_vip"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
