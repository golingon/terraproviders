// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_identity_platform_config

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BlockingFunctions struct {
	// BlockingFunctionsForwardInboundCredentials: optional
	ForwardInboundCredentials *BlockingFunctionsForwardInboundCredentials `hcl:"forward_inbound_credentials,block"`
	// BlockingFunctionsTriggers: min=1
	Triggers []BlockingFunctionsTriggers `hcl:"triggers,block" validate:"min=1"`
}

type BlockingFunctionsForwardInboundCredentials struct {
	// AccessToken: bool, optional
	AccessToken terra.BoolValue `hcl:"access_token,attr"`
	// IdToken: bool, optional
	IdToken terra.BoolValue `hcl:"id_token,attr"`
	// RefreshToken: bool, optional
	RefreshToken terra.BoolValue `hcl:"refresh_token,attr"`
}

type BlockingFunctionsTriggers struct {
	// EventType: string, required
	EventType terra.StringValue `hcl:"event_type,attr" validate:"required"`
	// FunctionUri: string, required
	FunctionUri terra.StringValue `hcl:"function_uri,attr" validate:"required"`
}

type Client struct {
	// ClientPermissions: optional
	Permissions *ClientPermissions `hcl:"permissions,block"`
}

type ClientPermissions struct {
	// DisabledUserDeletion: bool, optional
	DisabledUserDeletion terra.BoolValue `hcl:"disabled_user_deletion,attr"`
	// DisabledUserSignup: bool, optional
	DisabledUserSignup terra.BoolValue `hcl:"disabled_user_signup,attr"`
}

type Mfa struct {
	// EnabledProviders: list of string, optional
	EnabledProviders terra.ListValue[terra.StringValue] `hcl:"enabled_providers,attr"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// MfaProviderConfigs: min=0
	ProviderConfigs []MfaProviderConfigs `hcl:"provider_configs,block" validate:"min=0"`
}

type MfaProviderConfigs struct {
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// MfaProviderConfigsTotpProviderConfig: optional
	TotpProviderConfig *MfaProviderConfigsTotpProviderConfig `hcl:"totp_provider_config,block"`
}

type MfaProviderConfigsTotpProviderConfig struct {
	// AdjacentIntervals: number, optional
	AdjacentIntervals terra.NumberValue `hcl:"adjacent_intervals,attr"`
}

type Monitoring struct {
	// MonitoringRequestLogging: optional
	RequestLogging *MonitoringRequestLogging `hcl:"request_logging,block"`
}

type MonitoringRequestLogging struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type MultiTenant struct {
	// AllowTenants: bool, optional
	AllowTenants terra.BoolValue `hcl:"allow_tenants,attr"`
	// DefaultTenantLocation: string, optional
	DefaultTenantLocation terra.StringValue `hcl:"default_tenant_location,attr"`
}

type Quota struct {
	// QuotaSignUpQuotaConfig: optional
	SignUpQuotaConfig *QuotaSignUpQuotaConfig `hcl:"sign_up_quota_config,block"`
}

type QuotaSignUpQuotaConfig struct {
	// Quota: number, optional
	Quota terra.NumberValue `hcl:"quota,attr"`
	// QuotaDuration: string, optional
	QuotaDuration terra.StringValue `hcl:"quota_duration,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
}

type SignIn struct {
	// AllowDuplicateEmails: bool, optional
	AllowDuplicateEmails terra.BoolValue `hcl:"allow_duplicate_emails,attr"`
	// SignInAnonymous: optional
	Anonymous *SignInAnonymous `hcl:"anonymous,block"`
	// SignInEmail: optional
	Email *SignInEmail `hcl:"email,block"`
	// SignInPhoneNumber: optional
	PhoneNumber *SignInPhoneNumber `hcl:"phone_number,block"`
}

type SignInAnonymous struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type SignInEmail struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// PasswordRequired: bool, optional
	PasswordRequired terra.BoolValue `hcl:"password_required,attr"`
}

type SignInPhoneNumber struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// TestPhoneNumbers: map of string, optional
	TestPhoneNumbers terra.MapValue[terra.StringValue] `hcl:"test_phone_numbers,attr"`
}

type SmsRegionConfig struct {
	// SmsRegionConfigAllowByDefault: optional
	AllowByDefault *SmsRegionConfigAllowByDefault `hcl:"allow_by_default,block"`
	// SmsRegionConfigAllowlistOnly: optional
	AllowlistOnly *SmsRegionConfigAllowlistOnly `hcl:"allowlist_only,block"`
}

type SmsRegionConfigAllowByDefault struct {
	// DisallowedRegions: list of string, optional
	DisallowedRegions terra.ListValue[terra.StringValue] `hcl:"disallowed_regions,attr"`
}

type SmsRegionConfigAllowlistOnly struct {
	// AllowedRegions: list of string, optional
	AllowedRegions terra.ListValue[terra.StringValue] `hcl:"allowed_regions,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BlockingFunctionsAttributes struct {
	ref terra.Reference
}

func (bf BlockingFunctionsAttributes) InternalRef() (terra.Reference, error) {
	return bf.ref, nil
}

func (bf BlockingFunctionsAttributes) InternalWithRef(ref terra.Reference) BlockingFunctionsAttributes {
	return BlockingFunctionsAttributes{ref: ref}
}

func (bf BlockingFunctionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bf.ref.InternalTokens()
}

func (bf BlockingFunctionsAttributes) ForwardInboundCredentials() terra.ListValue[BlockingFunctionsForwardInboundCredentialsAttributes] {
	return terra.ReferenceAsList[BlockingFunctionsForwardInboundCredentialsAttributes](bf.ref.Append("forward_inbound_credentials"))
}

func (bf BlockingFunctionsAttributes) Triggers() terra.SetValue[BlockingFunctionsTriggersAttributes] {
	return terra.ReferenceAsSet[BlockingFunctionsTriggersAttributes](bf.ref.Append("triggers"))
}

type BlockingFunctionsForwardInboundCredentialsAttributes struct {
	ref terra.Reference
}

func (fic BlockingFunctionsForwardInboundCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return fic.ref, nil
}

func (fic BlockingFunctionsForwardInboundCredentialsAttributes) InternalWithRef(ref terra.Reference) BlockingFunctionsForwardInboundCredentialsAttributes {
	return BlockingFunctionsForwardInboundCredentialsAttributes{ref: ref}
}

func (fic BlockingFunctionsForwardInboundCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fic.ref.InternalTokens()
}

func (fic BlockingFunctionsForwardInboundCredentialsAttributes) AccessToken() terra.BoolValue {
	return terra.ReferenceAsBool(fic.ref.Append("access_token"))
}

func (fic BlockingFunctionsForwardInboundCredentialsAttributes) IdToken() terra.BoolValue {
	return terra.ReferenceAsBool(fic.ref.Append("id_token"))
}

func (fic BlockingFunctionsForwardInboundCredentialsAttributes) RefreshToken() terra.BoolValue {
	return terra.ReferenceAsBool(fic.ref.Append("refresh_token"))
}

type BlockingFunctionsTriggersAttributes struct {
	ref terra.Reference
}

func (t BlockingFunctionsTriggersAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t BlockingFunctionsTriggersAttributes) InternalWithRef(ref terra.Reference) BlockingFunctionsTriggersAttributes {
	return BlockingFunctionsTriggersAttributes{ref: ref}
}

func (t BlockingFunctionsTriggersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t BlockingFunctionsTriggersAttributes) EventType() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("event_type"))
}

func (t BlockingFunctionsTriggersAttributes) FunctionUri() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("function_uri"))
}

func (t BlockingFunctionsTriggersAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update_time"))
}

type ClientAttributes struct {
	ref terra.Reference
}

func (c ClientAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ClientAttributes) InternalWithRef(ref terra.Reference) ClientAttributes {
	return ClientAttributes{ref: ref}
}

func (c ClientAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ClientAttributes) ApiKey() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("api_key"))
}

func (c ClientAttributes) FirebaseSubdomain() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("firebase_subdomain"))
}

func (c ClientAttributes) Permissions() terra.ListValue[ClientPermissionsAttributes] {
	return terra.ReferenceAsList[ClientPermissionsAttributes](c.ref.Append("permissions"))
}

type ClientPermissionsAttributes struct {
	ref terra.Reference
}

func (p ClientPermissionsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ClientPermissionsAttributes) InternalWithRef(ref terra.Reference) ClientPermissionsAttributes {
	return ClientPermissionsAttributes{ref: ref}
}

func (p ClientPermissionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ClientPermissionsAttributes) DisabledUserDeletion() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("disabled_user_deletion"))
}

func (p ClientPermissionsAttributes) DisabledUserSignup() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("disabled_user_signup"))
}

type MfaAttributes struct {
	ref terra.Reference
}

func (m MfaAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MfaAttributes) InternalWithRef(ref terra.Reference) MfaAttributes {
	return MfaAttributes{ref: ref}
}

func (m MfaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MfaAttributes) EnabledProviders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("enabled_providers"))
}

func (m MfaAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("state"))
}

func (m MfaAttributes) ProviderConfigs() terra.ListValue[MfaProviderConfigsAttributes] {
	return terra.ReferenceAsList[MfaProviderConfigsAttributes](m.ref.Append("provider_configs"))
}

type MfaProviderConfigsAttributes struct {
	ref terra.Reference
}

func (pc MfaProviderConfigsAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc MfaProviderConfigsAttributes) InternalWithRef(ref terra.Reference) MfaProviderConfigsAttributes {
	return MfaProviderConfigsAttributes{ref: ref}
}

func (pc MfaProviderConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc MfaProviderConfigsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("state"))
}

func (pc MfaProviderConfigsAttributes) TotpProviderConfig() terra.ListValue[MfaProviderConfigsTotpProviderConfigAttributes] {
	return terra.ReferenceAsList[MfaProviderConfigsTotpProviderConfigAttributes](pc.ref.Append("totp_provider_config"))
}

type MfaProviderConfigsTotpProviderConfigAttributes struct {
	ref terra.Reference
}

func (tpc MfaProviderConfigsTotpProviderConfigAttributes) InternalRef() (terra.Reference, error) {
	return tpc.ref, nil
}

func (tpc MfaProviderConfigsTotpProviderConfigAttributes) InternalWithRef(ref terra.Reference) MfaProviderConfigsTotpProviderConfigAttributes {
	return MfaProviderConfigsTotpProviderConfigAttributes{ref: ref}
}

func (tpc MfaProviderConfigsTotpProviderConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tpc.ref.InternalTokens()
}

func (tpc MfaProviderConfigsTotpProviderConfigAttributes) AdjacentIntervals() terra.NumberValue {
	return terra.ReferenceAsNumber(tpc.ref.Append("adjacent_intervals"))
}

type MonitoringAttributes struct {
	ref terra.Reference
}

func (m MonitoringAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MonitoringAttributes) InternalWithRef(ref terra.Reference) MonitoringAttributes {
	return MonitoringAttributes{ref: ref}
}

func (m MonitoringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MonitoringAttributes) RequestLogging() terra.ListValue[MonitoringRequestLoggingAttributes] {
	return terra.ReferenceAsList[MonitoringRequestLoggingAttributes](m.ref.Append("request_logging"))
}

type MonitoringRequestLoggingAttributes struct {
	ref terra.Reference
}

func (rl MonitoringRequestLoggingAttributes) InternalRef() (terra.Reference, error) {
	return rl.ref, nil
}

func (rl MonitoringRequestLoggingAttributes) InternalWithRef(ref terra.Reference) MonitoringRequestLoggingAttributes {
	return MonitoringRequestLoggingAttributes{ref: ref}
}

func (rl MonitoringRequestLoggingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rl.ref.InternalTokens()
}

func (rl MonitoringRequestLoggingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(rl.ref.Append("enabled"))
}

type MultiTenantAttributes struct {
	ref terra.Reference
}

func (mt MultiTenantAttributes) InternalRef() (terra.Reference, error) {
	return mt.ref, nil
}

func (mt MultiTenantAttributes) InternalWithRef(ref terra.Reference) MultiTenantAttributes {
	return MultiTenantAttributes{ref: ref}
}

func (mt MultiTenantAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mt.ref.InternalTokens()
}

func (mt MultiTenantAttributes) AllowTenants() terra.BoolValue {
	return terra.ReferenceAsBool(mt.ref.Append("allow_tenants"))
}

func (mt MultiTenantAttributes) DefaultTenantLocation() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("default_tenant_location"))
}

type QuotaAttributes struct {
	ref terra.Reference
}

func (q QuotaAttributes) InternalRef() (terra.Reference, error) {
	return q.ref, nil
}

func (q QuotaAttributes) InternalWithRef(ref terra.Reference) QuotaAttributes {
	return QuotaAttributes{ref: ref}
}

func (q QuotaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return q.ref.InternalTokens()
}

func (q QuotaAttributes) SignUpQuotaConfig() terra.ListValue[QuotaSignUpQuotaConfigAttributes] {
	return terra.ReferenceAsList[QuotaSignUpQuotaConfigAttributes](q.ref.Append("sign_up_quota_config"))
}

type QuotaSignUpQuotaConfigAttributes struct {
	ref terra.Reference
}

func (suqc QuotaSignUpQuotaConfigAttributes) InternalRef() (terra.Reference, error) {
	return suqc.ref, nil
}

func (suqc QuotaSignUpQuotaConfigAttributes) InternalWithRef(ref terra.Reference) QuotaSignUpQuotaConfigAttributes {
	return QuotaSignUpQuotaConfigAttributes{ref: ref}
}

func (suqc QuotaSignUpQuotaConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return suqc.ref.InternalTokens()
}

func (suqc QuotaSignUpQuotaConfigAttributes) Quota() terra.NumberValue {
	return terra.ReferenceAsNumber(suqc.ref.Append("quota"))
}

func (suqc QuotaSignUpQuotaConfigAttributes) QuotaDuration() terra.StringValue {
	return terra.ReferenceAsString(suqc.ref.Append("quota_duration"))
}

func (suqc QuotaSignUpQuotaConfigAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(suqc.ref.Append("start_time"))
}

type SignInAttributes struct {
	ref terra.Reference
}

func (si SignInAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si SignInAttributes) InternalWithRef(ref terra.Reference) SignInAttributes {
	return SignInAttributes{ref: ref}
}

func (si SignInAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si SignInAttributes) AllowDuplicateEmails() terra.BoolValue {
	return terra.ReferenceAsBool(si.ref.Append("allow_duplicate_emails"))
}

func (si SignInAttributes) HashConfig() terra.ListValue[SignInHashConfigAttributes] {
	return terra.ReferenceAsList[SignInHashConfigAttributes](si.ref.Append("hash_config"))
}

func (si SignInAttributes) Anonymous() terra.ListValue[SignInAnonymousAttributes] {
	return terra.ReferenceAsList[SignInAnonymousAttributes](si.ref.Append("anonymous"))
}

func (si SignInAttributes) Email() terra.ListValue[SignInEmailAttributes] {
	return terra.ReferenceAsList[SignInEmailAttributes](si.ref.Append("email"))
}

func (si SignInAttributes) PhoneNumber() terra.ListValue[SignInPhoneNumberAttributes] {
	return terra.ReferenceAsList[SignInPhoneNumberAttributes](si.ref.Append("phone_number"))
}

type SignInHashConfigAttributes struct {
	ref terra.Reference
}

func (hc SignInHashConfigAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc SignInHashConfigAttributes) InternalWithRef(ref terra.Reference) SignInHashConfigAttributes {
	return SignInHashConfigAttributes{ref: ref}
}

func (hc SignInHashConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc SignInHashConfigAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("algorithm"))
}

func (hc SignInHashConfigAttributes) MemoryCost() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("memory_cost"))
}

func (hc SignInHashConfigAttributes) Rounds() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("rounds"))
}

func (hc SignInHashConfigAttributes) SaltSeparator() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("salt_separator"))
}

func (hc SignInHashConfigAttributes) SignerKey() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("signer_key"))
}

type SignInAnonymousAttributes struct {
	ref terra.Reference
}

func (a SignInAnonymousAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a SignInAnonymousAttributes) InternalWithRef(ref terra.Reference) SignInAnonymousAttributes {
	return SignInAnonymousAttributes{ref: ref}
}

func (a SignInAnonymousAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a SignInAnonymousAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("enabled"))
}

type SignInEmailAttributes struct {
	ref terra.Reference
}

func (e SignInEmailAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e SignInEmailAttributes) InternalWithRef(ref terra.Reference) SignInEmailAttributes {
	return SignInEmailAttributes{ref: ref}
}

func (e SignInEmailAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e SignInEmailAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("enabled"))
}

func (e SignInEmailAttributes) PasswordRequired() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("password_required"))
}

type SignInPhoneNumberAttributes struct {
	ref terra.Reference
}

func (pn SignInPhoneNumberAttributes) InternalRef() (terra.Reference, error) {
	return pn.ref, nil
}

func (pn SignInPhoneNumberAttributes) InternalWithRef(ref terra.Reference) SignInPhoneNumberAttributes {
	return SignInPhoneNumberAttributes{ref: ref}
}

func (pn SignInPhoneNumberAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pn.ref.InternalTokens()
}

func (pn SignInPhoneNumberAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pn.ref.Append("enabled"))
}

func (pn SignInPhoneNumberAttributes) TestPhoneNumbers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pn.ref.Append("test_phone_numbers"))
}

type SmsRegionConfigAttributes struct {
	ref terra.Reference
}

func (src SmsRegionConfigAttributes) InternalRef() (terra.Reference, error) {
	return src.ref, nil
}

func (src SmsRegionConfigAttributes) InternalWithRef(ref terra.Reference) SmsRegionConfigAttributes {
	return SmsRegionConfigAttributes{ref: ref}
}

func (src SmsRegionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return src.ref.InternalTokens()
}

func (src SmsRegionConfigAttributes) AllowByDefault() terra.ListValue[SmsRegionConfigAllowByDefaultAttributes] {
	return terra.ReferenceAsList[SmsRegionConfigAllowByDefaultAttributes](src.ref.Append("allow_by_default"))
}

func (src SmsRegionConfigAttributes) AllowlistOnly() terra.ListValue[SmsRegionConfigAllowlistOnlyAttributes] {
	return terra.ReferenceAsList[SmsRegionConfigAllowlistOnlyAttributes](src.ref.Append("allowlist_only"))
}

type SmsRegionConfigAllowByDefaultAttributes struct {
	ref terra.Reference
}

func (abd SmsRegionConfigAllowByDefaultAttributes) InternalRef() (terra.Reference, error) {
	return abd.ref, nil
}

func (abd SmsRegionConfigAllowByDefaultAttributes) InternalWithRef(ref terra.Reference) SmsRegionConfigAllowByDefaultAttributes {
	return SmsRegionConfigAllowByDefaultAttributes{ref: ref}
}

func (abd SmsRegionConfigAllowByDefaultAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return abd.ref.InternalTokens()
}

func (abd SmsRegionConfigAllowByDefaultAttributes) DisallowedRegions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](abd.ref.Append("disallowed_regions"))
}

type SmsRegionConfigAllowlistOnlyAttributes struct {
	ref terra.Reference
}

func (ao SmsRegionConfigAllowlistOnlyAttributes) InternalRef() (terra.Reference, error) {
	return ao.ref, nil
}

func (ao SmsRegionConfigAllowlistOnlyAttributes) InternalWithRef(ref terra.Reference) SmsRegionConfigAllowlistOnlyAttributes {
	return SmsRegionConfigAllowlistOnlyAttributes{ref: ref}
}

func (ao SmsRegionConfigAllowlistOnlyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ao.ref.InternalTokens()
}

func (ao SmsRegionConfigAllowlistOnlyAttributes) AllowedRegions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ao.ref.Append("allowed_regions"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BlockingFunctionsState struct {
	ForwardInboundCredentials []BlockingFunctionsForwardInboundCredentialsState `json:"forward_inbound_credentials"`
	Triggers                  []BlockingFunctionsTriggersState                  `json:"triggers"`
}

type BlockingFunctionsForwardInboundCredentialsState struct {
	AccessToken  bool `json:"access_token"`
	IdToken      bool `json:"id_token"`
	RefreshToken bool `json:"refresh_token"`
}

type BlockingFunctionsTriggersState struct {
	EventType   string `json:"event_type"`
	FunctionUri string `json:"function_uri"`
	UpdateTime  string `json:"update_time"`
}

type ClientState struct {
	ApiKey            string                   `json:"api_key"`
	FirebaseSubdomain string                   `json:"firebase_subdomain"`
	Permissions       []ClientPermissionsState `json:"permissions"`
}

type ClientPermissionsState struct {
	DisabledUserDeletion bool `json:"disabled_user_deletion"`
	DisabledUserSignup   bool `json:"disabled_user_signup"`
}

type MfaState struct {
	EnabledProviders []string                  `json:"enabled_providers"`
	State            string                    `json:"state"`
	ProviderConfigs  []MfaProviderConfigsState `json:"provider_configs"`
}

type MfaProviderConfigsState struct {
	State              string                                      `json:"state"`
	TotpProviderConfig []MfaProviderConfigsTotpProviderConfigState `json:"totp_provider_config"`
}

type MfaProviderConfigsTotpProviderConfigState struct {
	AdjacentIntervals float64 `json:"adjacent_intervals"`
}

type MonitoringState struct {
	RequestLogging []MonitoringRequestLoggingState `json:"request_logging"`
}

type MonitoringRequestLoggingState struct {
	Enabled bool `json:"enabled"`
}

type MultiTenantState struct {
	AllowTenants          bool   `json:"allow_tenants"`
	DefaultTenantLocation string `json:"default_tenant_location"`
}

type QuotaState struct {
	SignUpQuotaConfig []QuotaSignUpQuotaConfigState `json:"sign_up_quota_config"`
}

type QuotaSignUpQuotaConfigState struct {
	Quota         float64 `json:"quota"`
	QuotaDuration string  `json:"quota_duration"`
	StartTime     string  `json:"start_time"`
}

type SignInState struct {
	AllowDuplicateEmails bool                     `json:"allow_duplicate_emails"`
	HashConfig           []SignInHashConfigState  `json:"hash_config"`
	Anonymous            []SignInAnonymousState   `json:"anonymous"`
	Email                []SignInEmailState       `json:"email"`
	PhoneNumber          []SignInPhoneNumberState `json:"phone_number"`
}

type SignInHashConfigState struct {
	Algorithm     string  `json:"algorithm"`
	MemoryCost    float64 `json:"memory_cost"`
	Rounds        float64 `json:"rounds"`
	SaltSeparator string  `json:"salt_separator"`
	SignerKey     string  `json:"signer_key"`
}

type SignInAnonymousState struct {
	Enabled bool `json:"enabled"`
}

type SignInEmailState struct {
	Enabled          bool `json:"enabled"`
	PasswordRequired bool `json:"password_required"`
}

type SignInPhoneNumberState struct {
	Enabled          bool              `json:"enabled"`
	TestPhoneNumbers map[string]string `json:"test_phone_numbers"`
}

type SmsRegionConfigState struct {
	AllowByDefault []SmsRegionConfigAllowByDefaultState `json:"allow_by_default"`
	AllowlistOnly  []SmsRegionConfigAllowlistOnlyState  `json:"allowlist_only"`
}

type SmsRegionConfigAllowByDefaultState struct {
	DisallowedRegions []string `json:"disallowed_regions"`
}

type SmsRegionConfigAllowlistOnlyState struct {
	AllowedRegions []string `json:"allowed_regions"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
