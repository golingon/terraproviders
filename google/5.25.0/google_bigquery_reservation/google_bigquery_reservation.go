// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_reservation

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_reservation.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryReservationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbr *Resource) Type() string {
	return "google_bigquery_reservation"
}

// LocalName returns the local name for [Resource].
func (gbr *Resource) LocalName() string {
	return gbr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbr *Resource) Configuration() interface{} {
	return gbr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbr *Resource) Dependencies() terra.Dependencies {
	return gbr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbr *Resource) Attributes() googleBigqueryReservationAttributes {
	return googleBigqueryReservationAttributes{ref: terra.ReferenceResource(gbr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbr *Resource) ImportState(state io.Reader) error {
	gbr.state = &googleBigqueryReservationState{}
	if err := json.NewDecoder(state).Decode(gbr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbr.Type(), gbr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbr *Resource) State() (*googleBigqueryReservationState, bool) {
	return gbr.state, gbr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbr *Resource) StateMust() *googleBigqueryReservationState {
	if gbr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbr.Type(), gbr.LocalName()))
	}
	return gbr.state
}

// Args contains the configurations for google_bigquery_reservation.
type Args struct {
	// Concurrency: number, optional
	Concurrency terra.NumberValue `hcl:"concurrency,attr"`
	// Edition: string, optional
	Edition terra.StringValue `hcl:"edition,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreIdleSlots: bool, optional
	IgnoreIdleSlots terra.BoolValue `hcl:"ignore_idle_slots,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// MultiRegionAuxiliary: bool, optional
	MultiRegionAuxiliary terra.BoolValue `hcl:"multi_region_auxiliary,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SlotCapacity: number, required
	SlotCapacity terra.NumberValue `hcl:"slot_capacity,attr" validate:"required"`
	// Autoscale: optional
	Autoscale *Autoscale `hcl:"autoscale,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBigqueryReservationAttributes struct {
	ref terra.Reference
}

// Concurrency returns a reference to field concurrency of google_bigquery_reservation.
func (gbr googleBigqueryReservationAttributes) Concurrency() terra.NumberValue {
	return terra.ReferenceAsNumber(gbr.ref.Append("concurrency"))
}

// Edition returns a reference to field edition of google_bigquery_reservation.
func (gbr googleBigqueryReservationAttributes) Edition() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("edition"))
}

// Id returns a reference to field id of google_bigquery_reservation.
func (gbr googleBigqueryReservationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("id"))
}

// IgnoreIdleSlots returns a reference to field ignore_idle_slots of google_bigquery_reservation.
func (gbr googleBigqueryReservationAttributes) IgnoreIdleSlots() terra.BoolValue {
	return terra.ReferenceAsBool(gbr.ref.Append("ignore_idle_slots"))
}

// Location returns a reference to field location of google_bigquery_reservation.
func (gbr googleBigqueryReservationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("location"))
}

// MultiRegionAuxiliary returns a reference to field multi_region_auxiliary of google_bigquery_reservation.
func (gbr googleBigqueryReservationAttributes) MultiRegionAuxiliary() terra.BoolValue {
	return terra.ReferenceAsBool(gbr.ref.Append("multi_region_auxiliary"))
}

// Name returns a reference to field name of google_bigquery_reservation.
func (gbr googleBigqueryReservationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("name"))
}

// Project returns a reference to field project of google_bigquery_reservation.
func (gbr googleBigqueryReservationAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("project"))
}

// SlotCapacity returns a reference to field slot_capacity of google_bigquery_reservation.
func (gbr googleBigqueryReservationAttributes) SlotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(gbr.ref.Append("slot_capacity"))
}

func (gbr googleBigqueryReservationAttributes) Autoscale() terra.ListValue[AutoscaleAttributes] {
	return terra.ReferenceAsList[AutoscaleAttributes](gbr.ref.Append("autoscale"))
}

func (gbr googleBigqueryReservationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbr.ref.Append("timeouts"))
}

type googleBigqueryReservationState struct {
	Concurrency          float64          `json:"concurrency"`
	Edition              string           `json:"edition"`
	Id                   string           `json:"id"`
	IgnoreIdleSlots      bool             `json:"ignore_idle_slots"`
	Location             string           `json:"location"`
	MultiRegionAuxiliary bool             `json:"multi_region_auxiliary"`
	Name                 string           `json:"name"`
	Project              string           `json:"project"`
	SlotCapacity         float64          `json:"slot_capacity"`
	Autoscale            []AutoscaleState `json:"autoscale"`
	Timeouts             *TimeoutsState   `json:"timeouts"`
}
