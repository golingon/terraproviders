// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_access_context_manager_gcp_user_access_binding

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_access_context_manager_gcp_user_access_binding.
type Resource struct {
	Name      string
	Args      Args
	state     *googleAccessContextManagerGcpUserAccessBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gacmguab *Resource) Type() string {
	return "google_access_context_manager_gcp_user_access_binding"
}

// LocalName returns the local name for [Resource].
func (gacmguab *Resource) LocalName() string {
	return gacmguab.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gacmguab *Resource) Configuration() interface{} {
	return gacmguab.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gacmguab *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gacmguab)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gacmguab *Resource) Dependencies() terra.Dependencies {
	return gacmguab.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gacmguab *Resource) LifecycleManagement() *terra.Lifecycle {
	return gacmguab.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gacmguab *Resource) Attributes() googleAccessContextManagerGcpUserAccessBindingAttributes {
	return googleAccessContextManagerGcpUserAccessBindingAttributes{ref: terra.ReferenceResource(gacmguab)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gacmguab *Resource) ImportState(state io.Reader) error {
	gacmguab.state = &googleAccessContextManagerGcpUserAccessBindingState{}
	if err := json.NewDecoder(state).Decode(gacmguab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gacmguab.Type(), gacmguab.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gacmguab *Resource) State() (*googleAccessContextManagerGcpUserAccessBindingState, bool) {
	return gacmguab.state, gacmguab.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gacmguab *Resource) StateMust() *googleAccessContextManagerGcpUserAccessBindingState {
	if gacmguab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gacmguab.Type(), gacmguab.LocalName()))
	}
	return gacmguab.state
}

// Args contains the configurations for google_access_context_manager_gcp_user_access_binding.
type Args struct {
	// AccessLevels: list of string, required
	AccessLevels terra.ListValue[terra.StringValue] `hcl:"access_levels,attr" validate:"required"`
	// GroupKey: string, required
	GroupKey terra.StringValue `hcl:"group_key,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OrganizationId: string, required
	OrganizationId terra.StringValue `hcl:"organization_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleAccessContextManagerGcpUserAccessBindingAttributes struct {
	ref terra.Reference
}

// AccessLevels returns a reference to field access_levels of google_access_context_manager_gcp_user_access_binding.
func (gacmguab googleAccessContextManagerGcpUserAccessBindingAttributes) AccessLevels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gacmguab.ref.Append("access_levels"))
}

// GroupKey returns a reference to field group_key of google_access_context_manager_gcp_user_access_binding.
func (gacmguab googleAccessContextManagerGcpUserAccessBindingAttributes) GroupKey() terra.StringValue {
	return terra.ReferenceAsString(gacmguab.ref.Append("group_key"))
}

// Id returns a reference to field id of google_access_context_manager_gcp_user_access_binding.
func (gacmguab googleAccessContextManagerGcpUserAccessBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gacmguab.ref.Append("id"))
}

// Name returns a reference to field name of google_access_context_manager_gcp_user_access_binding.
func (gacmguab googleAccessContextManagerGcpUserAccessBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gacmguab.ref.Append("name"))
}

// OrganizationId returns a reference to field organization_id of google_access_context_manager_gcp_user_access_binding.
func (gacmguab googleAccessContextManagerGcpUserAccessBindingAttributes) OrganizationId() terra.StringValue {
	return terra.ReferenceAsString(gacmguab.ref.Append("organization_id"))
}

func (gacmguab googleAccessContextManagerGcpUserAccessBindingAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gacmguab.ref.Append("timeouts"))
}

type googleAccessContextManagerGcpUserAccessBindingState struct {
	AccessLevels   []string       `json:"access_levels"`
	GroupKey       string         `json:"group_key"`
	Id             string         `json:"id"`
	Name           string         `json:"name"`
	OrganizationId string         `json:"organization_id"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
