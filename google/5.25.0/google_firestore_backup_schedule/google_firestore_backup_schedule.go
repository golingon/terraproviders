// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firestore_backup_schedule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firestore_backup_schedule.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirestoreBackupScheduleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfbs *Resource) Type() string {
	return "google_firestore_backup_schedule"
}

// LocalName returns the local name for [Resource].
func (gfbs *Resource) LocalName() string {
	return gfbs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfbs *Resource) Configuration() interface{} {
	return gfbs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfbs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfbs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfbs *Resource) Dependencies() terra.Dependencies {
	return gfbs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfbs *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfbs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfbs *Resource) Attributes() googleFirestoreBackupScheduleAttributes {
	return googleFirestoreBackupScheduleAttributes{ref: terra.ReferenceResource(gfbs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfbs *Resource) ImportState(state io.Reader) error {
	gfbs.state = &googleFirestoreBackupScheduleState{}
	if err := json.NewDecoder(state).Decode(gfbs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfbs.Type(), gfbs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfbs *Resource) State() (*googleFirestoreBackupScheduleState, bool) {
	return gfbs.state, gfbs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfbs *Resource) StateMust() *googleFirestoreBackupScheduleState {
	if gfbs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfbs.Type(), gfbs.LocalName()))
	}
	return gfbs.state
}

// Args contains the configurations for google_firestore_backup_schedule.
type Args struct {
	// Database: string, optional
	Database terra.StringValue `hcl:"database,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Retention: string, required
	Retention terra.StringValue `hcl:"retention,attr" validate:"required"`
	// DailyRecurrence: optional
	DailyRecurrence *DailyRecurrence `hcl:"daily_recurrence,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// WeeklyRecurrence: optional
	WeeklyRecurrence *WeeklyRecurrence `hcl:"weekly_recurrence,block"`
}

type googleFirestoreBackupScheduleAttributes struct {
	ref terra.Reference
}

// Database returns a reference to field database of google_firestore_backup_schedule.
func (gfbs googleFirestoreBackupScheduleAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(gfbs.ref.Append("database"))
}

// Id returns a reference to field id of google_firestore_backup_schedule.
func (gfbs googleFirestoreBackupScheduleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfbs.ref.Append("id"))
}

// Name returns a reference to field name of google_firestore_backup_schedule.
func (gfbs googleFirestoreBackupScheduleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfbs.ref.Append("name"))
}

// Project returns a reference to field project of google_firestore_backup_schedule.
func (gfbs googleFirestoreBackupScheduleAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfbs.ref.Append("project"))
}

// Retention returns a reference to field retention of google_firestore_backup_schedule.
func (gfbs googleFirestoreBackupScheduleAttributes) Retention() terra.StringValue {
	return terra.ReferenceAsString(gfbs.ref.Append("retention"))
}

func (gfbs googleFirestoreBackupScheduleAttributes) DailyRecurrence() terra.ListValue[DailyRecurrenceAttributes] {
	return terra.ReferenceAsList[DailyRecurrenceAttributes](gfbs.ref.Append("daily_recurrence"))
}

func (gfbs googleFirestoreBackupScheduleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfbs.ref.Append("timeouts"))
}

func (gfbs googleFirestoreBackupScheduleAttributes) WeeklyRecurrence() terra.ListValue[WeeklyRecurrenceAttributes] {
	return terra.ReferenceAsList[WeeklyRecurrenceAttributes](gfbs.ref.Append("weekly_recurrence"))
}

type googleFirestoreBackupScheduleState struct {
	Database         string                  `json:"database"`
	Id               string                  `json:"id"`
	Name             string                  `json:"name"`
	Project          string                  `json:"project"`
	Retention        string                  `json:"retention"`
	DailyRecurrence  []DailyRecurrenceState  `json:"daily_recurrence"`
	Timeouts         *TimeoutsState          `json:"timeouts"`
	WeeklyRecurrence []WeeklyRecurrenceState `json:"weekly_recurrence"`
}
