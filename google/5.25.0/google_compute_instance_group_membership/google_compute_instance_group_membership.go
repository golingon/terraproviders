// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_instance_group_membership

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_instance_group_membership.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeInstanceGroupMembershipState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcigm *Resource) Type() string {
	return "google_compute_instance_group_membership"
}

// LocalName returns the local name for [Resource].
func (gcigm *Resource) LocalName() string {
	return gcigm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcigm *Resource) Configuration() interface{} {
	return gcigm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcigm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcigm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcigm *Resource) Dependencies() terra.Dependencies {
	return gcigm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcigm *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcigm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcigm *Resource) Attributes() googleComputeInstanceGroupMembershipAttributes {
	return googleComputeInstanceGroupMembershipAttributes{ref: terra.ReferenceResource(gcigm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcigm *Resource) ImportState(state io.Reader) error {
	gcigm.state = &googleComputeInstanceGroupMembershipState{}
	if err := json.NewDecoder(state).Decode(gcigm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcigm.Type(), gcigm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcigm *Resource) State() (*googleComputeInstanceGroupMembershipState, bool) {
	return gcigm.state, gcigm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcigm *Resource) StateMust() *googleComputeInstanceGroupMembershipState {
	if gcigm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcigm.Type(), gcigm.LocalName()))
	}
	return gcigm.state
}

// Args contains the configurations for google_compute_instance_group_membership.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// InstanceGroup: string, required
	InstanceGroup terra.StringValue `hcl:"instance_group,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeInstanceGroupMembershipAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_compute_instance_group_membership.
func (gcigm googleComputeInstanceGroupMembershipAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("id"))
}

// Instance returns a reference to field instance of google_compute_instance_group_membership.
func (gcigm googleComputeInstanceGroupMembershipAttributes) Instance() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("instance"))
}

// InstanceGroup returns a reference to field instance_group of google_compute_instance_group_membership.
func (gcigm googleComputeInstanceGroupMembershipAttributes) InstanceGroup() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("instance_group"))
}

// Project returns a reference to field project of google_compute_instance_group_membership.
func (gcigm googleComputeInstanceGroupMembershipAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("project"))
}

// Zone returns a reference to field zone of google_compute_instance_group_membership.
func (gcigm googleComputeInstanceGroupMembershipAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gcigm.ref.Append("zone"))
}

func (gcigm googleComputeInstanceGroupMembershipAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcigm.ref.Append("timeouts"))
}

type googleComputeInstanceGroupMembershipState struct {
	Id            string         `json:"id"`
	Instance      string         `json:"instance"`
	InstanceGroup string         `json:"instance_group"`
	Project       string         `json:"project"`
	Zone          string         `json:"zone"`
	Timeouts      *TimeoutsState `json:"timeouts"`
}
