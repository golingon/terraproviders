// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_region_commitment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_region_commitment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeRegionCommitmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcrc *Resource) Type() string {
	return "google_compute_region_commitment"
}

// LocalName returns the local name for [Resource].
func (gcrc *Resource) LocalName() string {
	return gcrc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcrc *Resource) Configuration() interface{} {
	return gcrc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcrc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcrc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcrc *Resource) Dependencies() terra.Dependencies {
	return gcrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcrc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcrc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcrc *Resource) Attributes() googleComputeRegionCommitmentAttributes {
	return googleComputeRegionCommitmentAttributes{ref: terra.ReferenceResource(gcrc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcrc *Resource) ImportState(state io.Reader) error {
	gcrc.state = &googleComputeRegionCommitmentState{}
	if err := json.NewDecoder(state).Decode(gcrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcrc.Type(), gcrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcrc *Resource) State() (*googleComputeRegionCommitmentState, bool) {
	return gcrc.state, gcrc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcrc *Resource) StateMust() *googleComputeRegionCommitmentState {
	if gcrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcrc.Type(), gcrc.LocalName()))
	}
	return gcrc.state
}

// Args contains the configurations for google_compute_region_commitment.
type Args struct {
	// AutoRenew: bool, optional
	AutoRenew terra.BoolValue `hcl:"auto_renew,attr"`
	// Category: string, optional
	Category terra.StringValue `hcl:"category,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Plan: string, required
	Plan terra.StringValue `hcl:"plan,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// LicenseResource: optional
	LicenseResource *LicenseResource `hcl:"license_resource,block"`
	// Resources: min=0
	Resources []Resources `hcl:"resources,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeRegionCommitmentAttributes struct {
	ref terra.Reference
}

// AutoRenew returns a reference to field auto_renew of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) AutoRenew() terra.BoolValue {
	return terra.ReferenceAsBool(gcrc.ref.Append("auto_renew"))
}

// Category returns a reference to field category of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) Category() terra.StringValue {
	return terra.ReferenceAsString(gcrc.ref.Append("category"))
}

// CommitmentId returns a reference to field commitment_id of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) CommitmentId() terra.NumberValue {
	return terra.ReferenceAsNumber(gcrc.ref.Append("commitment_id"))
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcrc.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcrc.ref.Append("description"))
}

// EndTimestamp returns a reference to field end_timestamp of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) EndTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcrc.ref.Append("end_timestamp"))
}

// Id returns a reference to field id of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcrc.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcrc.ref.Append("name"))
}

// Plan returns a reference to field plan of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) Plan() terra.StringValue {
	return terra.ReferenceAsString(gcrc.ref.Append("plan"))
}

// Project returns a reference to field project of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcrc.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcrc.ref.Append("region"))
}

// SelfLink returns a reference to field self_link of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcrc.ref.Append("self_link"))
}

// StartTimestamp returns a reference to field start_timestamp of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) StartTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gcrc.ref.Append("start_timestamp"))
}

// Status returns a reference to field status of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(gcrc.ref.Append("status"))
}

// StatusMessage returns a reference to field status_message of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) StatusMessage() terra.StringValue {
	return terra.ReferenceAsString(gcrc.ref.Append("status_message"))
}

// Type returns a reference to field type of google_compute_region_commitment.
func (gcrc googleComputeRegionCommitmentAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gcrc.ref.Append("type"))
}

func (gcrc googleComputeRegionCommitmentAttributes) LicenseResource() terra.ListValue[LicenseResourceAttributes] {
	return terra.ReferenceAsList[LicenseResourceAttributes](gcrc.ref.Append("license_resource"))
}

func (gcrc googleComputeRegionCommitmentAttributes) Resources() terra.ListValue[ResourcesAttributes] {
	return terra.ReferenceAsList[ResourcesAttributes](gcrc.ref.Append("resources"))
}

func (gcrc googleComputeRegionCommitmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcrc.ref.Append("timeouts"))
}

type googleComputeRegionCommitmentState struct {
	AutoRenew         bool                   `json:"auto_renew"`
	Category          string                 `json:"category"`
	CommitmentId      float64                `json:"commitment_id"`
	CreationTimestamp string                 `json:"creation_timestamp"`
	Description       string                 `json:"description"`
	EndTimestamp      string                 `json:"end_timestamp"`
	Id                string                 `json:"id"`
	Name              string                 `json:"name"`
	Plan              string                 `json:"plan"`
	Project           string                 `json:"project"`
	Region            string                 `json:"region"`
	SelfLink          string                 `json:"self_link"`
	StartTimestamp    string                 `json:"start_timestamp"`
	Status            string                 `json:"status"`
	StatusMessage     string                 `json:"status_message"`
	Type              string                 `json:"type"`
	LicenseResource   []LicenseResourceState `json:"license_resource"`
	Resources         []ResourcesState       `json:"resources"`
	Timeouts          *TimeoutsState         `json:"timeouts"`
}
