// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_public_advertised_prefix

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_public_advertised_prefix.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputePublicAdvertisedPrefixState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcpap *Resource) Type() string {
	return "google_compute_public_advertised_prefix"
}

// LocalName returns the local name for [Resource].
func (gcpap *Resource) LocalName() string {
	return gcpap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcpap *Resource) Configuration() interface{} {
	return gcpap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcpap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcpap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcpap *Resource) Dependencies() terra.Dependencies {
	return gcpap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcpap *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcpap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcpap *Resource) Attributes() googleComputePublicAdvertisedPrefixAttributes {
	return googleComputePublicAdvertisedPrefixAttributes{ref: terra.ReferenceResource(gcpap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcpap *Resource) ImportState(state io.Reader) error {
	gcpap.state = &googleComputePublicAdvertisedPrefixState{}
	if err := json.NewDecoder(state).Decode(gcpap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcpap.Type(), gcpap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcpap *Resource) State() (*googleComputePublicAdvertisedPrefixState, bool) {
	return gcpap.state, gcpap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcpap *Resource) StateMust() *googleComputePublicAdvertisedPrefixState {
	if gcpap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcpap.Type(), gcpap.LocalName()))
	}
	return gcpap.state
}

// Args contains the configurations for google_compute_public_advertised_prefix.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DnsVerificationIp: string, required
	DnsVerificationIp terra.StringValue `hcl:"dns_verification_ip,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpCidrRange: string, required
	IpCidrRange terra.StringValue `hcl:"ip_cidr_range,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputePublicAdvertisedPrefixAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_compute_public_advertised_prefix.
func (gcpap googleComputePublicAdvertisedPrefixAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcpap.ref.Append("description"))
}

// DnsVerificationIp returns a reference to field dns_verification_ip of google_compute_public_advertised_prefix.
func (gcpap googleComputePublicAdvertisedPrefixAttributes) DnsVerificationIp() terra.StringValue {
	return terra.ReferenceAsString(gcpap.ref.Append("dns_verification_ip"))
}

// Id returns a reference to field id of google_compute_public_advertised_prefix.
func (gcpap googleComputePublicAdvertisedPrefixAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcpap.ref.Append("id"))
}

// IpCidrRange returns a reference to field ip_cidr_range of google_compute_public_advertised_prefix.
func (gcpap googleComputePublicAdvertisedPrefixAttributes) IpCidrRange() terra.StringValue {
	return terra.ReferenceAsString(gcpap.ref.Append("ip_cidr_range"))
}

// Name returns a reference to field name of google_compute_public_advertised_prefix.
func (gcpap googleComputePublicAdvertisedPrefixAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcpap.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_public_advertised_prefix.
func (gcpap googleComputePublicAdvertisedPrefixAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcpap.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_compute_public_advertised_prefix.
func (gcpap googleComputePublicAdvertisedPrefixAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcpap.ref.Append("self_link"))
}

func (gcpap googleComputePublicAdvertisedPrefixAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcpap.ref.Append("timeouts"))
}

type googleComputePublicAdvertisedPrefixState struct {
	Description       string         `json:"description"`
	DnsVerificationIp string         `json:"dns_verification_ip"`
	Id                string         `json:"id"`
	IpCidrRange       string         `json:"ip_cidr_range"`
	Name              string         `json:"name"`
	Project           string         `json:"project"`
	SelfLink          string         `json:"self_link"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
