// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_edgenetwork_network

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_edgenetwork_network.
type Resource struct {
	Name      string
	Args      Args
	state     *googleEdgenetworkNetworkState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gen *Resource) Type() string {
	return "google_edgenetwork_network"
}

// LocalName returns the local name for [Resource].
func (gen *Resource) LocalName() string {
	return gen.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gen *Resource) Configuration() interface{} {
	return gen.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gen *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gen)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gen *Resource) Dependencies() terra.Dependencies {
	return gen.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gen *Resource) LifecycleManagement() *terra.Lifecycle {
	return gen.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gen *Resource) Attributes() googleEdgenetworkNetworkAttributes {
	return googleEdgenetworkNetworkAttributes{ref: terra.ReferenceResource(gen)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gen *Resource) ImportState(state io.Reader) error {
	gen.state = &googleEdgenetworkNetworkState{}
	if err := json.NewDecoder(state).Decode(gen.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gen.Type(), gen.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gen *Resource) State() (*googleEdgenetworkNetworkState, bool) {
	return gen.state, gen.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gen *Resource) StateMust() *googleEdgenetworkNetworkState {
	if gen.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gen.Type(), gen.LocalName()))
	}
	return gen.state
}

// Args contains the configurations for google_edgenetwork_network.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Mtu: number, optional
	Mtu terra.NumberValue `hcl:"mtu,attr"`
	// NetworkId: string, required
	NetworkId terra.StringValue `hcl:"network_id,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, required
	Zone terra.StringValue `hcl:"zone,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleEdgenetworkNetworkAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_edgenetwork_network.
func (gen googleEdgenetworkNetworkAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gen.ref.Append("create_time"))
}

// Description returns a reference to field description of google_edgenetwork_network.
func (gen googleEdgenetworkNetworkAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gen.ref.Append("description"))
}

// Id returns a reference to field id of google_edgenetwork_network.
func (gen googleEdgenetworkNetworkAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gen.ref.Append("id"))
}

// Labels returns a reference to field labels of google_edgenetwork_network.
func (gen googleEdgenetworkNetworkAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gen.ref.Append("labels"))
}

// Location returns a reference to field location of google_edgenetwork_network.
func (gen googleEdgenetworkNetworkAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gen.ref.Append("location"))
}

// Mtu returns a reference to field mtu of google_edgenetwork_network.
func (gen googleEdgenetworkNetworkAttributes) Mtu() terra.NumberValue {
	return terra.ReferenceAsNumber(gen.ref.Append("mtu"))
}

// Name returns a reference to field name of google_edgenetwork_network.
func (gen googleEdgenetworkNetworkAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gen.ref.Append("name"))
}

// NetworkId returns a reference to field network_id of google_edgenetwork_network.
func (gen googleEdgenetworkNetworkAttributes) NetworkId() terra.StringValue {
	return terra.ReferenceAsString(gen.ref.Append("network_id"))
}

// Project returns a reference to field project of google_edgenetwork_network.
func (gen googleEdgenetworkNetworkAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gen.ref.Append("project"))
}

// UpdateTime returns a reference to field update_time of google_edgenetwork_network.
func (gen googleEdgenetworkNetworkAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gen.ref.Append("update_time"))
}

// Zone returns a reference to field zone of google_edgenetwork_network.
func (gen googleEdgenetworkNetworkAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gen.ref.Append("zone"))
}

func (gen googleEdgenetworkNetworkAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gen.ref.Append("timeouts"))
}

type googleEdgenetworkNetworkState struct {
	CreateTime  string            `json:"create_time"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Labels      map[string]string `json:"labels"`
	Location    string            `json:"location"`
	Mtu         float64           `json:"mtu"`
	Name        string            `json:"name"`
	NetworkId   string            `json:"network_id"`
	Project     string            `json:"project"`
	UpdateTime  string            `json:"update_time"`
	Zone        string            `json:"zone"`
	Timeouts    *TimeoutsState    `json:"timeouts"`
}
