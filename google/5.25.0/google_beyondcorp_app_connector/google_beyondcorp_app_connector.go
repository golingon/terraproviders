// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_beyondcorp_app_connector

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_beyondcorp_app_connector.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBeyondcorpAppConnectorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbac *Resource) Type() string {
	return "google_beyondcorp_app_connector"
}

// LocalName returns the local name for [Resource].
func (gbac *Resource) LocalName() string {
	return gbac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbac *Resource) Configuration() interface{} {
	return gbac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbac *Resource) Dependencies() terra.Dependencies {
	return gbac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbac *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbac *Resource) Attributes() googleBeyondcorpAppConnectorAttributes {
	return googleBeyondcorpAppConnectorAttributes{ref: terra.ReferenceResource(gbac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbac *Resource) ImportState(state io.Reader) error {
	gbac.state = &googleBeyondcorpAppConnectorState{}
	if err := json.NewDecoder(state).Decode(gbac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbac.Type(), gbac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbac *Resource) State() (*googleBeyondcorpAppConnectorState, bool) {
	return gbac.state, gbac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbac *Resource) StateMust() *googleBeyondcorpAppConnectorState {
	if gbac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbac.Type(), gbac.LocalName()))
	}
	return gbac.state
}

// Args contains the configurations for google_beyondcorp_app_connector.
type Args struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// PrincipalInfo: required
	PrincipalInfo *PrincipalInfo `hcl:"principal_info,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBeyondcorpAppConnectorAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of google_beyondcorp_app_connector.
func (gbac googleBeyondcorpAppConnectorAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gbac.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_beyondcorp_app_connector.
func (gbac googleBeyondcorpAppConnectorAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbac.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_beyondcorp_app_connector.
func (gbac googleBeyondcorpAppConnectorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbac.ref.Append("id"))
}

// Labels returns a reference to field labels of google_beyondcorp_app_connector.
func (gbac googleBeyondcorpAppConnectorAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbac.ref.Append("labels"))
}

// Name returns a reference to field name of google_beyondcorp_app_connector.
func (gbac googleBeyondcorpAppConnectorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbac.ref.Append("name"))
}

// Project returns a reference to field project of google_beyondcorp_app_connector.
func (gbac googleBeyondcorpAppConnectorAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbac.ref.Append("project"))
}

// Region returns a reference to field region of google_beyondcorp_app_connector.
func (gbac googleBeyondcorpAppConnectorAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gbac.ref.Append("region"))
}

// State returns a reference to field state of google_beyondcorp_app_connector.
func (gbac googleBeyondcorpAppConnectorAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gbac.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_beyondcorp_app_connector.
func (gbac googleBeyondcorpAppConnectorAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbac.ref.Append("terraform_labels"))
}

func (gbac googleBeyondcorpAppConnectorAttributes) PrincipalInfo() terra.ListValue[PrincipalInfoAttributes] {
	return terra.ReferenceAsList[PrincipalInfoAttributes](gbac.ref.Append("principal_info"))
}

func (gbac googleBeyondcorpAppConnectorAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbac.ref.Append("timeouts"))
}

type googleBeyondcorpAppConnectorState struct {
	DisplayName     string               `json:"display_name"`
	EffectiveLabels map[string]string    `json:"effective_labels"`
	Id              string               `json:"id"`
	Labels          map[string]string    `json:"labels"`
	Name            string               `json:"name"`
	Project         string               `json:"project"`
	Region          string               `json:"region"`
	State           string               `json:"state"`
	TerraformLabels map[string]string    `json:"terraform_labels"`
	PrincipalInfo   []PrincipalInfoState `json:"principal_info"`
	Timeouts        *TimeoutsState       `json:"timeouts"`
}
