// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_container_azure_client

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_container_azure_client.
type Resource struct {
	Name      string
	Args      Args
	state     *googleContainerAzureClientState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcac *Resource) Type() string {
	return "google_container_azure_client"
}

// LocalName returns the local name for [Resource].
func (gcac *Resource) LocalName() string {
	return gcac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcac *Resource) Configuration() interface{} {
	return gcac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcac *Resource) Dependencies() terra.Dependencies {
	return gcac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcac *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcac *Resource) Attributes() googleContainerAzureClientAttributes {
	return googleContainerAzureClientAttributes{ref: terra.ReferenceResource(gcac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcac *Resource) ImportState(state io.Reader) error {
	gcac.state = &googleContainerAzureClientState{}
	if err := json.NewDecoder(state).Decode(gcac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcac.Type(), gcac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcac *Resource) State() (*googleContainerAzureClientState, bool) {
	return gcac.state, gcac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcac *Resource) StateMust() *googleContainerAzureClientState {
	if gcac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcac.Type(), gcac.LocalName()))
	}
	return gcac.state
}

// Args contains the configurations for google_container_azure_client.
type Args struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleContainerAzureClientAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of google_container_azure_client.
func (gcac googleContainerAzureClientAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("application_id"))
}

// Certificate returns a reference to field certificate of google_container_azure_client.
func (gcac googleContainerAzureClientAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("certificate"))
}

// CreateTime returns a reference to field create_time of google_container_azure_client.
func (gcac googleContainerAzureClientAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("create_time"))
}

// Id returns a reference to field id of google_container_azure_client.
func (gcac googleContainerAzureClientAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("id"))
}

// Location returns a reference to field location of google_container_azure_client.
func (gcac googleContainerAzureClientAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("location"))
}

// Name returns a reference to field name of google_container_azure_client.
func (gcac googleContainerAzureClientAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("name"))
}

// Project returns a reference to field project of google_container_azure_client.
func (gcac googleContainerAzureClientAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("project"))
}

// TenantId returns a reference to field tenant_id of google_container_azure_client.
func (gcac googleContainerAzureClientAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("tenant_id"))
}

// Uid returns a reference to field uid of google_container_azure_client.
func (gcac googleContainerAzureClientAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gcac.ref.Append("uid"))
}

func (gcac googleContainerAzureClientAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcac.ref.Append("timeouts"))
}

type googleContainerAzureClientState struct {
	ApplicationId string         `json:"application_id"`
	Certificate   string         `json:"certificate"`
	CreateTime    string         `json:"create_time"`
	Id            string         `json:"id"`
	Location      string         `json:"location"`
	Name          string         `json:"name"`
	Project       string         `json:"project"`
	TenantId      string         `json:"tenant_id"`
	Uid           string         `json:"uid"`
	Timeouts      *TimeoutsState `json:"timeouts"`
}
